import{S as U4t,i as J4t,s as Y4t,e as a,k as l,w as f,t as o,M as K4t,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as Z4t}from"../../chunks/vendor-6b77c823.js";import{T as Vkr}from"../../chunks/Tip-39098574.js";import{D as M}from"../../chunks/Docstring-abef54e3.js";import{C as w}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function eEt($f){let K,io,de,Ee,lo,me,Ce,Vo,Ii,If,fa,Ni,Di,d5,Nf,Be,co,ji,Gn,c5,On,Xn,f5,qi,Vn,m5,Gi,Df,qa;return{c(){K=a("p"),io=o("If your "),de=a("code"),Ee=o("NewModelConfig"),lo=o(" is a subclass of "),me=a("code"),Ce=o("PretrainedConfig"),Vo=o(`, make sure its
`),Ii=a("code"),If=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Ni=a("code"),Di=o('"new-model"'),d5=o(")."),Nf=l(),Be=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),c5=o(" is a subclass of "),On=a("a"),Xn=o("PreTrainedModel"),f5=o(`, make sure its
`),qi=a("code"),Vn=o("config_class"),m5=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),Df=o("NewModelConfig"),qa=o(")."),this.h()},l(fo){K=n(fo,"P",{});var _e=s(K);io=r(_e,"If your "),de=n(_e,"CODE",{});var r9=s(de);Ee=r(r9,"NewModelConfig"),r9.forEach(t),lo=r(_e," is a subclass of "),me=n(_e,"CODE",{});var Oi=s(me);Ce=r(Oi,"PretrainedConfig"),Oi.forEach(t),Vo=r(_e,`, make sure its
`),Ii=n(_e,"CODE",{});var t9=s(Ii);If=r(t9,"model_type"),t9.forEach(t),fa=r(_e," attribute is set to the same key you use when registering the config (here "),Ni=n(_e,"CODE",{});var a9=s(Ni);Di=r(a9,'"new-model"'),a9.forEach(t),d5=r(_e,")."),_e.forEach(t),Nf=i(fo),Be=n(fo,"P",{});var zo=s(Be);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),c5=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var n9=s(On);Xn=r(n9,"PreTrainedModel"),n9.forEach(t),f5=r(zo,`, make sure its
`),qi=n(zo,"CODE",{});var jf=s(qi);Vn=r(jf,"config_class"),jf.forEach(t),m5=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var s9=s(Gi);Df=r(s9,"NewModelConfig"),s9.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,K,_e),e(K,io),e(K,de),e(de,Ee),e(K,lo),e(K,me),e(me,Ce),e(K,Vo),e(K,Ii),e(Ii,If),e(K,fa),e(K,Ni),e(Ni,Di),e(K,d5),b(fo,Nf,_e),b(fo,Be,_e),e(Be,co),e(Be,ji),e(ji,Gn),e(Be,c5),e(Be,On),e(On,Xn),e(Be,f5),e(Be,qi),e(qi,Vn),e(Be,m5),e(Be,Gi),e(Gi,Df),e(Be,qa)},d(fo){fo&&t(K),fo&&t(Nf),fo&&t(Be)}}}function oEt($f){let K,io,de,Ee,lo;return{c(){K=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){K=n(me,"P",{});var Ce=s(K);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(me,Ce){b(me,K,Ce),e(K,io),e(K,de),e(de,Ee),e(K,lo)},d(me){me&&t(K)}}}function rEt($f){let K,io,de,Ee,lo;return{c(){K=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){K=n(me,"P",{});var Ce=s(K);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(me,Ce){b(me,K,Ce),e(K,io),e(K,de),e(de,Ee),e(K,lo)},d(me){me&&t(K)}}}function tEt($f){let K,io,de,Ee,lo,me,Ce,Vo,Ii,If,fa,Ni,Di,d5,Nf,Be,co,ji,Gn,c5,On,Xn,f5,qi,Vn,m5,Gi,Df,qa,fo,_e,r9,Oi,t9,a9,zo,Ga,n9,jf,s9,x$e,_ke,Xi,qf,WQ,g5,k$e,QQ,R$e,uke,zn,S$e,HQ,P$e,$$e,UQ,I$e,N$e,bke,h5,vke,l9,D$e,Tke,Gf,Fke,Vi,Of,JQ,p5,j$e,YQ,q$e,Cke,Wo,_5,G$e,u5,O$e,i9,X$e,V$e,z$e,b5,W$e,KQ,Q$e,H$e,U$e,mo,v5,J$e,ZQ,Y$e,K$e,zi,Z$e,eH,eIe,oIe,oH,rIe,tIe,aIe,v,Xf,rH,nIe,sIe,d9,lIe,iIe,dIe,Vf,tH,cIe,fIe,c9,mIe,gIe,hIe,zf,aH,pIe,_Ie,f9,uIe,bIe,vIe,Wf,nH,TIe,FIe,m9,CIe,MIe,EIe,Qf,sH,yIe,wIe,g9,AIe,LIe,BIe,Hf,lH,xIe,kIe,h9,RIe,SIe,PIe,Uf,iH,$Ie,IIe,p9,NIe,DIe,jIe,Jf,dH,qIe,GIe,_9,OIe,XIe,VIe,Yf,cH,zIe,WIe,u9,QIe,HIe,UIe,Kf,fH,JIe,YIe,b9,KIe,ZIe,eNe,Zf,mH,oNe,rNe,v9,tNe,aNe,nNe,em,gH,sNe,lNe,T9,iNe,dNe,cNe,om,hH,fNe,mNe,F9,gNe,hNe,pNe,rm,pH,_Ne,uNe,C9,bNe,vNe,TNe,tm,_H,FNe,CNe,M9,MNe,ENe,yNe,am,uH,wNe,ANe,E9,LNe,BNe,xNe,nm,bH,kNe,RNe,y9,SNe,PNe,$Ne,sm,vH,INe,NNe,w9,DNe,jNe,qNe,lm,TH,GNe,ONe,A9,XNe,VNe,zNe,im,FH,WNe,QNe,L9,HNe,UNe,JNe,dm,CH,YNe,KNe,B9,ZNe,eDe,oDe,cm,MH,rDe,tDe,x9,aDe,nDe,sDe,fm,EH,lDe,iDe,k9,dDe,cDe,fDe,mm,yH,mDe,gDe,R9,hDe,pDe,_De,gm,wH,uDe,bDe,S9,vDe,TDe,FDe,hm,AH,CDe,MDe,P9,EDe,yDe,wDe,pm,LH,ADe,LDe,$9,BDe,xDe,kDe,_m,BH,RDe,SDe,I9,PDe,$De,IDe,um,xH,NDe,DDe,N9,jDe,qDe,GDe,bm,kH,ODe,XDe,D9,VDe,zDe,WDe,vm,RH,QDe,HDe,j9,UDe,JDe,YDe,Tm,SH,KDe,ZDe,q9,eje,oje,rje,Fm,PH,tje,aje,G9,nje,sje,lje,Cm,$H,ije,dje,O9,cje,fje,mje,Mm,IH,gje,hje,X9,pje,_je,uje,Em,NH,bje,vje,V9,Tje,Fje,Cje,ym,DH,Mje,Eje,z9,yje,wje,Aje,wm,jH,Lje,Bje,W9,xje,kje,Rje,Am,qH,Sje,Pje,Q9,$je,Ije,Nje,Lm,GH,Dje,jje,H9,qje,Gje,Oje,Bm,OH,Xje,Vje,U9,zje,Wje,Qje,xm,XH,Hje,Uje,J9,Jje,Yje,Kje,km,VH,Zje,eqe,Y9,oqe,rqe,tqe,Rm,zH,aqe,nqe,K9,sqe,lqe,iqe,Sm,WH,dqe,cqe,Z9,fqe,mqe,gqe,Pm,QH,hqe,pqe,eB,_qe,uqe,bqe,$m,HH,vqe,Tqe,oB,Fqe,Cqe,Mqe,Im,UH,Eqe,yqe,rB,wqe,Aqe,Lqe,Nm,JH,Bqe,xqe,tB,kqe,Rqe,Sqe,Dm,YH,Pqe,$qe,aB,Iqe,Nqe,Dqe,jm,KH,jqe,qqe,nB,Gqe,Oqe,Xqe,qm,ZH,Vqe,zqe,sB,Wqe,Qqe,Hqe,Gm,eU,Uqe,Jqe,lB,Yqe,Kqe,Zqe,Om,oU,eGe,oGe,iB,rGe,tGe,aGe,Xm,rU,nGe,sGe,dB,lGe,iGe,dGe,Vm,tU,cGe,fGe,cB,mGe,gGe,hGe,zm,aU,pGe,_Ge,fB,uGe,bGe,vGe,Wm,nU,TGe,FGe,mB,CGe,MGe,EGe,Qm,sU,yGe,wGe,gB,AGe,LGe,BGe,Hm,lU,xGe,kGe,hB,RGe,SGe,PGe,Um,iU,$Ge,IGe,pB,NGe,DGe,jGe,Jm,dU,qGe,GGe,_B,OGe,XGe,VGe,Ym,cU,zGe,WGe,uB,QGe,HGe,UGe,Km,fU,JGe,YGe,bB,KGe,ZGe,eOe,Zm,mU,oOe,rOe,vB,tOe,aOe,nOe,eg,gU,sOe,lOe,TB,iOe,dOe,cOe,og,hU,fOe,mOe,FB,gOe,hOe,pOe,rg,pU,_Oe,uOe,CB,bOe,vOe,TOe,tg,_U,FOe,COe,MB,MOe,EOe,yOe,ag,uU,wOe,AOe,EB,LOe,BOe,xOe,ng,bU,kOe,ROe,yB,SOe,POe,$Oe,sg,vU,IOe,NOe,wB,DOe,jOe,qOe,lg,TU,GOe,OOe,AB,XOe,VOe,zOe,ig,FU,WOe,QOe,LB,HOe,UOe,JOe,dg,CU,YOe,KOe,BB,ZOe,eXe,oXe,cg,MU,rXe,tXe,xB,aXe,nXe,sXe,fg,EU,lXe,iXe,kB,dXe,cXe,fXe,mg,yU,mXe,gXe,RB,hXe,pXe,_Xe,gg,wU,uXe,bXe,SB,vXe,TXe,FXe,hg,AU,CXe,MXe,PB,EXe,yXe,wXe,pg,LU,AXe,LXe,$B,BXe,xXe,kXe,_g,BU,RXe,SXe,IB,PXe,$Xe,IXe,ug,xU,NXe,DXe,NB,jXe,qXe,GXe,bg,kU,OXe,XXe,DB,VXe,zXe,WXe,vg,RU,QXe,HXe,jB,UXe,JXe,YXe,Tg,SU,KXe,ZXe,qB,eVe,oVe,rVe,Fg,PU,tVe,aVe,GB,nVe,sVe,lVe,Cg,$U,iVe,dVe,OB,cVe,fVe,mVe,Mg,IU,gVe,hVe,XB,pVe,_Ve,uVe,Eg,NU,bVe,vVe,VB,TVe,FVe,CVe,yg,DU,MVe,EVe,zB,yVe,wVe,AVe,wg,jU,LVe,BVe,WB,xVe,kVe,RVe,Ag,qU,SVe,PVe,QB,$Ve,IVe,NVe,Lg,GU,DVe,jVe,HB,qVe,GVe,OVe,Bg,OU,XVe,VVe,UB,zVe,WVe,QVe,xg,XU,HVe,UVe,JB,JVe,YVe,KVe,kg,VU,ZVe,eze,YB,oze,rze,tze,Rg,zU,aze,nze,KB,sze,lze,ize,Sg,WU,dze,cze,ZB,fze,mze,gze,QU,hze,pze,T5,_ze,Pg,F5,uze,HU,bze,Mke,Wi,$g,UU,C5,vze,JU,Tze,Eke,Qo,M5,Fze,E5,Cze,ex,Mze,Eze,yze,y5,wze,YU,Aze,Lze,Bze,go,w5,xze,KU,kze,Rze,Oa,Sze,ZU,Pze,$ze,eJ,Ize,Nze,oJ,Dze,jze,qze,E,Wn,rJ,Gze,Oze,ox,Xze,Vze,rx,zze,Wze,Qze,Qn,tJ,Hze,Uze,tx,Jze,Yze,ax,Kze,Zze,eWe,Hn,aJ,oWe,rWe,nx,tWe,aWe,sx,nWe,sWe,lWe,Ig,nJ,iWe,dWe,lx,cWe,fWe,mWe,Un,sJ,gWe,hWe,ix,pWe,_We,dx,uWe,bWe,vWe,Ng,lJ,TWe,FWe,cx,CWe,MWe,EWe,Dg,iJ,yWe,wWe,fx,AWe,LWe,BWe,jg,dJ,xWe,kWe,mx,RWe,SWe,PWe,Jn,cJ,$We,IWe,gx,NWe,DWe,hx,jWe,qWe,GWe,Yn,fJ,OWe,XWe,px,VWe,zWe,_x,WWe,QWe,HWe,Kn,mJ,UWe,JWe,ux,YWe,KWe,bx,ZWe,eQe,oQe,qg,gJ,rQe,tQe,vx,aQe,nQe,sQe,Gg,hJ,lQe,iQe,Tx,dQe,cQe,fQe,Zn,pJ,mQe,gQe,Fx,hQe,pQe,Cx,_Qe,uQe,bQe,Og,_J,vQe,TQe,Mx,FQe,CQe,MQe,es,uJ,EQe,yQe,Ex,wQe,AQe,yx,LQe,BQe,xQe,os,bJ,kQe,RQe,wx,SQe,PQe,Ax,$Qe,IQe,NQe,rs,vJ,DQe,jQe,Lx,qQe,GQe,TJ,OQe,XQe,VQe,Xg,FJ,zQe,WQe,Bx,QQe,HQe,UQe,ts,CJ,JQe,YQe,xx,KQe,ZQe,kx,eHe,oHe,rHe,Vg,MJ,tHe,aHe,Rx,nHe,sHe,lHe,as,EJ,iHe,dHe,Sx,cHe,fHe,Px,mHe,gHe,hHe,ns,yJ,pHe,_He,$x,uHe,bHe,Ix,vHe,THe,FHe,ss,wJ,CHe,MHe,Nx,EHe,yHe,Dx,wHe,AHe,LHe,zg,AJ,BHe,xHe,jx,kHe,RHe,SHe,ls,LJ,PHe,$He,qx,IHe,NHe,Gx,DHe,jHe,qHe,Wg,BJ,GHe,OHe,Ox,XHe,VHe,zHe,is,xJ,WHe,QHe,Xx,HHe,UHe,Vx,JHe,YHe,KHe,ds,kJ,ZHe,eUe,zx,oUe,rUe,Wx,tUe,aUe,nUe,cs,RJ,sUe,lUe,Qx,iUe,dUe,Hx,cUe,fUe,mUe,fs,SJ,gUe,hUe,Ux,pUe,_Ue,Jx,uUe,bUe,vUe,Qg,PJ,TUe,FUe,Yx,CUe,MUe,EUe,ms,$J,yUe,wUe,Kx,AUe,LUe,Zx,BUe,xUe,kUe,gs,IJ,RUe,SUe,ek,PUe,$Ue,ok,IUe,NUe,DUe,hs,NJ,jUe,qUe,rk,GUe,OUe,tk,XUe,VUe,zUe,ps,DJ,WUe,QUe,ak,HUe,UUe,nk,JUe,YUe,KUe,_s,jJ,ZUe,eJe,sk,oJe,rJe,lk,tJe,aJe,nJe,us,qJ,sJe,lJe,ik,iJe,dJe,dk,cJe,fJe,mJe,Hg,GJ,gJe,hJe,ck,pJe,_Je,uJe,bs,OJ,bJe,vJe,fk,TJe,FJe,mk,CJe,MJe,EJe,Ug,XJ,yJe,wJe,gk,AJe,LJe,BJe,Jg,VJ,xJe,kJe,hk,RJe,SJe,PJe,vs,zJ,$Je,IJe,pk,NJe,DJe,_k,jJe,qJe,GJe,Ts,WJ,OJe,XJe,uk,VJe,zJe,bk,WJe,QJe,HJe,Yg,QJ,UJe,JJe,vk,YJe,KJe,ZJe,Fs,HJ,eYe,oYe,Tk,rYe,tYe,Fk,aYe,nYe,sYe,Cs,UJ,lYe,iYe,Ck,dYe,cYe,Mk,fYe,mYe,gYe,Ms,JJ,hYe,pYe,Ek,_Ye,uYe,yk,bYe,vYe,TYe,Es,YJ,FYe,CYe,wk,MYe,EYe,Ak,yYe,wYe,AYe,ys,KJ,LYe,BYe,Lk,xYe,kYe,Bk,RYe,SYe,PYe,Kg,ZJ,$Ye,IYe,xk,NYe,DYe,jYe,Zg,eY,qYe,GYe,kk,OYe,XYe,VYe,eh,oY,zYe,WYe,Rk,QYe,HYe,UYe,oh,rY,JYe,YYe,Sk,KYe,ZYe,eKe,ws,tY,oKe,rKe,Pk,tKe,aKe,$k,nKe,sKe,lKe,rh,aY,iKe,dKe,Ik,cKe,fKe,mKe,As,nY,gKe,hKe,Nk,pKe,_Ke,Dk,uKe,bKe,vKe,Ls,sY,TKe,FKe,jk,CKe,MKe,qk,EKe,yKe,wKe,Bs,lY,AKe,LKe,Gk,BKe,xKe,Ok,kKe,RKe,SKe,xs,iY,PKe,$Ke,Xk,IKe,NKe,Vk,DKe,jKe,qKe,ks,dY,GKe,OKe,zk,XKe,VKe,Wk,zKe,WKe,QKe,Rs,cY,HKe,UKe,Qk,JKe,YKe,Hk,KKe,ZKe,eZe,th,fY,oZe,rZe,Uk,tZe,aZe,nZe,ah,mY,sZe,lZe,Jk,iZe,dZe,cZe,Ss,gY,fZe,mZe,Yk,gZe,hZe,Kk,pZe,_Ze,uZe,Ps,hY,bZe,vZe,Zk,TZe,FZe,eR,CZe,MZe,EZe,$s,pY,yZe,wZe,oR,AZe,LZe,rR,BZe,xZe,kZe,nh,_Y,RZe,SZe,tR,PZe,$Ze,IZe,sh,uY,NZe,DZe,aR,jZe,qZe,GZe,lh,bY,OZe,XZe,nR,VZe,zZe,WZe,ih,vY,QZe,HZe,sR,UZe,JZe,YZe,Is,TY,KZe,ZZe,lR,eeo,oeo,iR,reo,teo,aeo,dh,FY,neo,seo,dR,leo,ieo,deo,ch,CY,ceo,feo,cR,meo,geo,heo,Ns,MY,peo,_eo,fR,ueo,beo,mR,veo,Teo,Feo,Ds,EY,Ceo,Meo,gR,Eeo,yeo,hR,weo,Aeo,Leo,yY,Beo,xeo,A5,keo,fh,L5,Reo,wY,Seo,yke,Qi,mh,AY,B5,Peo,LY,$eo,wke,Ho,x5,Ieo,k5,Neo,pR,Deo,jeo,qeo,R5,Geo,BY,Oeo,Xeo,Veo,$e,S5,zeo,xY,Weo,Qeo,Xa,Heo,kY,Ueo,Jeo,RY,Yeo,Keo,SY,Zeo,eoo,ooo,Z,gh,PY,roo,too,_R,aoo,noo,soo,hh,$Y,loo,ioo,uR,doo,coo,foo,ph,IY,moo,goo,bR,hoo,poo,_oo,_h,NY,uoo,boo,vR,voo,Too,Foo,uh,DY,Coo,Moo,TR,Eoo,yoo,woo,bh,jY,Aoo,Loo,FR,Boo,xoo,koo,vh,qY,Roo,Soo,CR,Poo,$oo,Ioo,Th,GY,Noo,Doo,MR,joo,qoo,Goo,Fh,OY,Ooo,Xoo,ER,Voo,zoo,Woo,Ch,XY,Qoo,Hoo,yR,Uoo,Joo,Yoo,Mh,VY,Koo,Zoo,wR,ero,oro,rro,Eh,zY,tro,aro,AR,nro,sro,lro,yh,WY,iro,dro,LR,cro,fro,mro,wh,QY,gro,hro,BR,pro,_ro,uro,Ah,HY,bro,vro,xR,Tro,Fro,Cro,Lh,UY,Mro,Ero,kR,yro,wro,Aro,Bh,JY,Lro,Bro,RR,xro,kro,Rro,xh,YY,Sro,Pro,SR,$ro,Iro,Nro,kh,KY,Dro,jro,PR,qro,Gro,Oro,Rh,Xro,ZY,Vro,zro,P5,Wro,Sh,$5,Qro,eK,Hro,Ake,Hi,Ph,oK,I5,Uro,rK,Jro,Lke,Uo,N5,Yro,D5,Kro,$R,Zro,eto,oto,j5,rto,tK,tto,ato,nto,Ie,q5,sto,aK,lto,ito,Ui,dto,nK,cto,fto,sK,mto,gto,hto,xe,$h,lK,pto,_to,IR,uto,bto,vto,Ih,iK,Tto,Fto,NR,Cto,Mto,Eto,Nh,dK,yto,wto,DR,Ato,Lto,Bto,Dh,cK,xto,kto,jR,Rto,Sto,Pto,jh,fK,$to,Ito,qR,Nto,Dto,jto,qh,mK,qto,Gto,GR,Oto,Xto,Vto,Gh,gK,zto,Wto,OR,Qto,Hto,Uto,Oh,hK,Jto,Yto,XR,Kto,Zto,eao,Xh,oao,pK,rao,tao,G5,aao,Vh,O5,nao,_K,sao,Bke,Ji,zh,uK,X5,lao,bK,iao,xke,Jo,V5,dao,Yi,cao,vK,fao,mao,TK,gao,hao,pao,z5,_ao,FK,uao,bao,vao,Vr,W5,Tao,CK,Fao,Cao,Ki,Mao,MK,Eao,yao,EK,wao,Aao,Lao,yK,Bao,xao,Q5,kao,Ne,H5,Rao,wK,Sao,Pao,Va,$ao,AK,Iao,Nao,LK,Dao,jao,BK,qao,Gao,Oao,F,Wh,xK,Xao,Vao,VR,zao,Wao,Qao,Qh,kK,Hao,Uao,zR,Jao,Yao,Kao,Hh,RK,Zao,eno,WR,ono,rno,tno,Uh,SK,ano,nno,QR,sno,lno,ino,Jh,PK,dno,cno,HR,fno,mno,gno,Yh,$K,hno,pno,UR,_no,uno,bno,Kh,IK,vno,Tno,JR,Fno,Cno,Mno,Zh,NK,Eno,yno,YR,wno,Ano,Lno,ep,DK,Bno,xno,KR,kno,Rno,Sno,op,jK,Pno,$no,ZR,Ino,Nno,Dno,rp,qK,jno,qno,eS,Gno,Ono,Xno,tp,GK,Vno,zno,oS,Wno,Qno,Hno,ap,OK,Uno,Jno,rS,Yno,Kno,Zno,np,XK,eso,oso,tS,rso,tso,aso,sp,VK,nso,sso,aS,lso,iso,dso,lp,zK,cso,fso,nS,mso,gso,hso,ip,WK,pso,_so,sS,uso,bso,vso,dp,QK,Tso,Fso,lS,Cso,Mso,Eso,cp,HK,yso,wso,iS,Aso,Lso,Bso,fp,UK,xso,kso,dS,Rso,Sso,Pso,mp,JK,$so,Iso,cS,Nso,Dso,jso,gp,YK,qso,Gso,fS,Oso,Xso,Vso,hp,KK,zso,Wso,mS,Qso,Hso,Uso,pp,ZK,Jso,Yso,gS,Kso,Zso,elo,_p,eZ,olo,rlo,hS,tlo,alo,nlo,up,oZ,slo,llo,pS,ilo,dlo,clo,bp,rZ,flo,mlo,_S,glo,hlo,plo,vp,tZ,_lo,ulo,uS,blo,vlo,Tlo,js,aZ,Flo,Clo,bS,Mlo,Elo,vS,ylo,wlo,Alo,Tp,nZ,Llo,Blo,TS,xlo,klo,Rlo,Fp,sZ,Slo,Plo,FS,$lo,Ilo,Nlo,Cp,lZ,Dlo,jlo,CS,qlo,Glo,Olo,Mp,iZ,Xlo,Vlo,MS,zlo,Wlo,Qlo,Ep,dZ,Hlo,Ulo,ES,Jlo,Ylo,Klo,yp,cZ,Zlo,eio,yS,oio,rio,tio,wp,fZ,aio,nio,wS,sio,lio,iio,Ap,mZ,dio,cio,AS,fio,mio,gio,Lp,gZ,hio,pio,LS,_io,uio,bio,Bp,hZ,vio,Tio,BS,Fio,Cio,Mio,xp,pZ,Eio,yio,xS,wio,Aio,Lio,kp,_Z,Bio,xio,kS,kio,Rio,Sio,Rp,uZ,Pio,$io,RS,Iio,Nio,Dio,Sp,bZ,jio,qio,SS,Gio,Oio,Xio,Pp,vZ,Vio,zio,PS,Wio,Qio,Hio,$p,TZ,Uio,Jio,$S,Yio,Kio,Zio,Ip,FZ,edo,odo,IS,rdo,tdo,ado,Np,CZ,ndo,sdo,NS,ldo,ido,ddo,Dp,MZ,cdo,fdo,DS,mdo,gdo,hdo,jp,EZ,pdo,_do,jS,udo,bdo,vdo,qp,yZ,Tdo,Fdo,qS,Cdo,Mdo,Edo,Gp,wZ,ydo,wdo,GS,Ado,Ldo,Bdo,Op,AZ,xdo,kdo,OS,Rdo,Sdo,Pdo,Xp,LZ,$do,Ido,XS,Ndo,Ddo,jdo,Vp,BZ,qdo,Gdo,VS,Odo,Xdo,Vdo,zp,xZ,zdo,Wdo,zS,Qdo,Hdo,Udo,Wp,kZ,Jdo,Ydo,WS,Kdo,Zdo,eco,Qp,RZ,oco,rco,QS,tco,aco,nco,Hp,SZ,sco,lco,HS,ico,dco,cco,Up,PZ,fco,mco,US,gco,hco,pco,Jp,$Z,_co,uco,JS,bco,vco,Tco,Yp,IZ,Fco,Cco,YS,Mco,Eco,yco,Kp,NZ,wco,Aco,KS,Lco,Bco,xco,Zp,DZ,kco,Rco,ZS,Sco,Pco,$co,e_,jZ,Ico,Nco,eP,Dco,jco,qco,o_,qZ,Gco,Oco,oP,Xco,Vco,zco,r_,GZ,Wco,Qco,rP,Hco,Uco,Jco,t_,OZ,Yco,Kco,tP,Zco,efo,ofo,a_,XZ,rfo,tfo,aP,afo,nfo,sfo,n_,VZ,lfo,ifo,nP,dfo,cfo,ffo,s_,zZ,mfo,gfo,sP,hfo,pfo,_fo,l_,WZ,ufo,bfo,lP,vfo,Tfo,Ffo,i_,QZ,Cfo,Mfo,iP,Efo,yfo,wfo,d_,HZ,Afo,Lfo,dP,Bfo,xfo,kfo,c_,UZ,Rfo,Sfo,cP,Pfo,$fo,Ifo,f_,JZ,Nfo,Dfo,fP,jfo,qfo,Gfo,m_,YZ,Ofo,Xfo,mP,Vfo,zfo,Wfo,g_,KZ,Qfo,Hfo,gP,Ufo,Jfo,Yfo,h_,ZZ,Kfo,Zfo,hP,emo,omo,rmo,p_,eee,tmo,amo,pP,nmo,smo,lmo,__,oee,imo,dmo,_P,cmo,fmo,mmo,u_,ree,gmo,hmo,uP,pmo,_mo,umo,b_,tee,bmo,vmo,bP,Tmo,Fmo,Cmo,v_,aee,Mmo,Emo,vP,ymo,wmo,Amo,T_,nee,Lmo,Bmo,TP,xmo,kmo,Rmo,F_,see,Smo,Pmo,FP,$mo,Imo,Nmo,C_,lee,Dmo,jmo,CP,qmo,Gmo,Omo,M_,iee,Xmo,Vmo,MP,zmo,Wmo,Qmo,E_,dee,Hmo,Umo,EP,Jmo,Ymo,Kmo,y_,cee,Zmo,ego,yP,ogo,rgo,tgo,w_,fee,ago,ngo,wP,sgo,lgo,igo,A_,mee,dgo,cgo,AP,fgo,mgo,ggo,L_,gee,hgo,pgo,LP,_go,ugo,bgo,B_,vgo,hee,Tgo,Fgo,pee,Cgo,Mgo,_ee,Ego,ygo,U5,kke,Zi,x_,uee,J5,wgo,bee,Ago,Rke,Yo,Y5,Lgo,ed,Bgo,vee,xgo,kgo,Tee,Rgo,Sgo,Pgo,K5,$go,Fee,Igo,Ngo,Dgo,zr,Z5,jgo,Cee,qgo,Ggo,od,Ogo,Mee,Xgo,Vgo,Eee,zgo,Wgo,Qgo,yee,Hgo,Ugo,ey,Jgo,De,oy,Ygo,wee,Kgo,Zgo,za,eho,Aee,oho,rho,Lee,tho,aho,Bee,nho,sho,lho,k,k_,xee,iho,dho,BP,cho,fho,mho,R_,kee,gho,hho,xP,pho,_ho,uho,S_,Ree,bho,vho,kP,Tho,Fho,Cho,P_,See,Mho,Eho,RP,yho,who,Aho,$_,Pee,Lho,Bho,SP,xho,kho,Rho,I_,$ee,Sho,Pho,PP,$ho,Iho,Nho,N_,Iee,Dho,jho,$P,qho,Gho,Oho,D_,Nee,Xho,Vho,IP,zho,Who,Qho,j_,Dee,Hho,Uho,NP,Jho,Yho,Kho,q_,jee,Zho,epo,DP,opo,rpo,tpo,G_,qee,apo,npo,jP,spo,lpo,ipo,O_,Gee,dpo,cpo,qP,fpo,mpo,gpo,X_,Oee,hpo,ppo,GP,_po,upo,bpo,V_,Xee,vpo,Tpo,OP,Fpo,Cpo,Mpo,z_,Vee,Epo,ypo,XP,wpo,Apo,Lpo,W_,zee,Bpo,xpo,VP,kpo,Rpo,Spo,Q_,Wee,Ppo,$po,zP,Ipo,Npo,Dpo,H_,Qee,jpo,qpo,WP,Gpo,Opo,Xpo,U_,Hee,Vpo,zpo,QP,Wpo,Qpo,Hpo,J_,Uee,Upo,Jpo,HP,Ypo,Kpo,Zpo,Y_,Jee,e_o,o_o,UP,r_o,t_o,a_o,K_,Yee,n_o,s_o,JP,l_o,i_o,d_o,Z_,Kee,c_o,f_o,YP,m_o,g_o,h_o,eu,Zee,p_o,__o,KP,u_o,b_o,v_o,ou,eoe,T_o,F_o,ZP,C_o,M_o,E_o,ru,ooe,y_o,w_o,e$,A_o,L_o,B_o,tu,roe,x_o,k_o,o$,R_o,S_o,P_o,au,toe,$_o,I_o,r$,N_o,D_o,j_o,nu,aoe,q_o,G_o,t$,O_o,X_o,V_o,su,noe,z_o,W_o,a$,Q_o,H_o,U_o,lu,soe,J_o,Y_o,n$,K_o,Z_o,euo,iu,loe,ouo,ruo,s$,tuo,auo,nuo,du,ioe,suo,luo,l$,iuo,duo,cuo,cu,doe,fuo,muo,i$,guo,huo,puo,fu,coe,_uo,uuo,d$,buo,vuo,Tuo,mu,foe,Fuo,Cuo,c$,Muo,Euo,yuo,gu,moe,wuo,Auo,f$,Luo,Buo,xuo,hu,goe,kuo,Ruo,m$,Suo,Puo,$uo,pu,hoe,Iuo,Nuo,g$,Duo,juo,quo,_u,Guo,poe,Ouo,Xuo,_oe,Vuo,zuo,uoe,Wuo,Quo,ry,Ske,rd,uu,boe,ty,Huo,voe,Uuo,Pke,Ko,ay,Juo,td,Yuo,Toe,Kuo,Zuo,Foe,e1o,o1o,r1o,ny,t1o,Coe,a1o,n1o,s1o,Wr,sy,l1o,Moe,i1o,d1o,ad,c1o,Eoe,f1o,m1o,yoe,g1o,h1o,p1o,woe,_1o,u1o,ly,b1o,je,iy,v1o,Aoe,T1o,F1o,Wa,C1o,Loe,M1o,E1o,Boe,y1o,w1o,xoe,A1o,L1o,B1o,$,bu,koe,x1o,k1o,h$,R1o,S1o,P1o,vu,Roe,$1o,I1o,p$,N1o,D1o,j1o,Tu,Soe,q1o,G1o,_$,O1o,X1o,V1o,Fu,Poe,z1o,W1o,u$,Q1o,H1o,U1o,Cu,$oe,J1o,Y1o,b$,K1o,Z1o,e2o,Mu,Ioe,o2o,r2o,v$,t2o,a2o,n2o,Eu,Noe,s2o,l2o,T$,i2o,d2o,c2o,yu,Doe,f2o,m2o,F$,g2o,h2o,p2o,wu,joe,_2o,u2o,C$,b2o,v2o,T2o,Au,qoe,F2o,C2o,M$,M2o,E2o,y2o,Lu,Goe,w2o,A2o,E$,L2o,B2o,x2o,Bu,Ooe,k2o,R2o,y$,S2o,P2o,$2o,xu,Xoe,I2o,N2o,w$,D2o,j2o,q2o,ku,Voe,G2o,O2o,A$,X2o,V2o,z2o,Ru,zoe,W2o,Q2o,L$,H2o,U2o,J2o,Su,Woe,Y2o,K2o,B$,Z2o,e6o,o6o,Pu,Qoe,r6o,t6o,x$,a6o,n6o,s6o,$u,Hoe,l6o,i6o,k$,d6o,c6o,f6o,Iu,Uoe,m6o,g6o,R$,h6o,p6o,_6o,Nu,Joe,u6o,b6o,S$,v6o,T6o,F6o,Du,Yoe,C6o,M6o,P$,E6o,y6o,w6o,ju,Koe,A6o,L6o,$$,B6o,x6o,k6o,qu,Zoe,R6o,S6o,I$,P6o,$6o,I6o,Gu,ere,N6o,D6o,N$,j6o,q6o,G6o,Ou,ore,O6o,X6o,D$,V6o,z6o,W6o,Xu,rre,Q6o,H6o,j$,U6o,J6o,Y6o,Vu,tre,K6o,Z6o,q$,ebo,obo,rbo,zu,are,tbo,abo,G$,nbo,sbo,lbo,Wu,nre,ibo,dbo,O$,cbo,fbo,mbo,Qu,sre,gbo,hbo,X$,pbo,_bo,ubo,Hu,lre,bbo,vbo,V$,Tbo,Fbo,Cbo,Uu,ire,Mbo,Ebo,z$,ybo,wbo,Abo,Ju,dre,Lbo,Bbo,W$,xbo,kbo,Rbo,Yu,cre,Sbo,Pbo,Q$,$bo,Ibo,Nbo,Ku,fre,Dbo,jbo,H$,qbo,Gbo,Obo,Zu,Xbo,mre,Vbo,zbo,gre,Wbo,Qbo,hre,Hbo,Ubo,dy,$ke,nd,e1,pre,cy,Jbo,_re,Ybo,Ike,Zo,fy,Kbo,sd,Zbo,ure,evo,ovo,bre,rvo,tvo,avo,my,nvo,vre,svo,lvo,ivo,Qr,gy,dvo,Tre,cvo,fvo,ld,mvo,Fre,gvo,hvo,Cre,pvo,_vo,uvo,Mre,bvo,vvo,hy,Tvo,qe,py,Fvo,Ere,Cvo,Mvo,Qa,Evo,yre,yvo,wvo,wre,Avo,Lvo,Are,Bvo,xvo,kvo,I,o1,Lre,Rvo,Svo,U$,Pvo,$vo,Ivo,r1,Bre,Nvo,Dvo,J$,jvo,qvo,Gvo,t1,xre,Ovo,Xvo,Y$,Vvo,zvo,Wvo,a1,kre,Qvo,Hvo,K$,Uvo,Jvo,Yvo,n1,Rre,Kvo,Zvo,Z$,eTo,oTo,rTo,s1,Sre,tTo,aTo,eI,nTo,sTo,lTo,l1,Pre,iTo,dTo,oI,cTo,fTo,mTo,i1,$re,gTo,hTo,rI,pTo,_To,uTo,d1,Ire,bTo,vTo,tI,TTo,FTo,CTo,c1,Nre,MTo,ETo,aI,yTo,wTo,ATo,f1,Dre,LTo,BTo,nI,xTo,kTo,RTo,m1,jre,STo,PTo,sI,$To,ITo,NTo,g1,qre,DTo,jTo,lI,qTo,GTo,OTo,h1,Gre,XTo,VTo,iI,zTo,WTo,QTo,p1,Ore,HTo,UTo,dI,JTo,YTo,KTo,_1,Xre,ZTo,eFo,cI,oFo,rFo,tFo,u1,Vre,aFo,nFo,fI,sFo,lFo,iFo,b1,zre,dFo,cFo,mI,fFo,mFo,gFo,v1,Wre,hFo,pFo,gI,_Fo,uFo,bFo,T1,Qre,vFo,TFo,hI,FFo,CFo,MFo,F1,Hre,EFo,yFo,pI,wFo,AFo,LFo,C1,Ure,BFo,xFo,_I,kFo,RFo,SFo,M1,Jre,PFo,$Fo,uI,IFo,NFo,DFo,E1,Yre,jFo,qFo,bI,GFo,OFo,XFo,y1,Kre,VFo,zFo,vI,WFo,QFo,HFo,w1,Zre,UFo,JFo,TI,YFo,KFo,ZFo,A1,ete,eCo,oCo,FI,rCo,tCo,aCo,L1,ote,nCo,sCo,CI,lCo,iCo,dCo,B1,rte,cCo,fCo,MI,mCo,gCo,hCo,x1,tte,pCo,_Co,EI,uCo,bCo,vCo,k1,ate,TCo,FCo,nte,CCo,MCo,ECo,R1,ste,yCo,wCo,yI,ACo,LCo,BCo,S1,lte,xCo,kCo,wI,RCo,SCo,PCo,P1,ite,$Co,ICo,AI,NCo,DCo,jCo,$1,dte,qCo,GCo,LI,OCo,XCo,VCo,I1,zCo,cte,WCo,QCo,fte,HCo,UCo,mte,JCo,YCo,_y,Nke,id,N1,gte,uy,KCo,hte,ZCo,Dke,er,by,eMo,dd,oMo,pte,rMo,tMo,_te,aMo,nMo,sMo,vy,lMo,ute,iMo,dMo,cMo,Hr,Ty,fMo,bte,mMo,gMo,cd,hMo,vte,pMo,_Mo,Tte,uMo,bMo,vMo,Fte,TMo,FMo,Fy,CMo,Ge,Cy,MMo,Cte,EMo,yMo,Ha,wMo,Mte,AMo,LMo,Ete,BMo,xMo,yte,kMo,RMo,SMo,se,D1,wte,PMo,$Mo,BI,IMo,NMo,DMo,j1,Ate,jMo,qMo,xI,GMo,OMo,XMo,q1,Lte,VMo,zMo,kI,WMo,QMo,HMo,G1,Bte,UMo,JMo,RI,YMo,KMo,ZMo,O1,xte,e4o,o4o,SI,r4o,t4o,a4o,X1,kte,n4o,s4o,PI,l4o,i4o,d4o,V1,Rte,c4o,f4o,$I,m4o,g4o,h4o,z1,Ste,p4o,_4o,II,u4o,b4o,v4o,W1,Pte,T4o,F4o,NI,C4o,M4o,E4o,Q1,$te,y4o,w4o,DI,A4o,L4o,B4o,H1,Ite,x4o,k4o,jI,R4o,S4o,P4o,U1,Nte,$4o,I4o,qI,N4o,D4o,j4o,J1,Dte,q4o,G4o,GI,O4o,X4o,V4o,Y1,jte,z4o,W4o,OI,Q4o,H4o,U4o,K1,qte,J4o,Y4o,XI,K4o,Z4o,eEo,Z1,Gte,oEo,rEo,VI,tEo,aEo,nEo,e2,sEo,Ote,lEo,iEo,Xte,dEo,cEo,Vte,fEo,mEo,My,jke,fd,o2,zte,Ey,gEo,Wte,hEo,qke,or,yy,pEo,md,_Eo,Qte,uEo,bEo,Hte,vEo,TEo,FEo,wy,CEo,Ute,MEo,EEo,yEo,Ur,Ay,wEo,Jte,AEo,LEo,gd,BEo,Yte,xEo,kEo,Kte,REo,SEo,PEo,Zte,$Eo,IEo,Ly,NEo,Oe,By,DEo,eae,jEo,qEo,Ua,GEo,oae,OEo,XEo,rae,VEo,zEo,tae,WEo,QEo,HEo,A,r2,aae,UEo,JEo,zI,YEo,KEo,ZEo,t2,nae,e3o,o3o,WI,r3o,t3o,a3o,a2,sae,n3o,s3o,QI,l3o,i3o,d3o,n2,lae,c3o,f3o,HI,m3o,g3o,h3o,s2,iae,p3o,_3o,UI,u3o,b3o,v3o,l2,dae,T3o,F3o,JI,C3o,M3o,E3o,i2,cae,y3o,w3o,YI,A3o,L3o,B3o,d2,fae,x3o,k3o,KI,R3o,S3o,P3o,c2,mae,$3o,I3o,ZI,N3o,D3o,j3o,f2,gae,q3o,G3o,eN,O3o,X3o,V3o,m2,hae,z3o,W3o,oN,Q3o,H3o,U3o,g2,pae,J3o,Y3o,rN,K3o,Z3o,e5o,h2,_ae,o5o,r5o,tN,t5o,a5o,n5o,p2,uae,s5o,l5o,aN,i5o,d5o,c5o,_2,bae,f5o,m5o,nN,g5o,h5o,p5o,u2,vae,_5o,u5o,sN,b5o,v5o,T5o,b2,Tae,F5o,C5o,lN,M5o,E5o,y5o,v2,Fae,w5o,A5o,iN,L5o,B5o,x5o,T2,Cae,k5o,R5o,dN,S5o,P5o,$5o,F2,Mae,I5o,N5o,cN,D5o,j5o,q5o,C2,Eae,G5o,O5o,fN,X5o,V5o,z5o,M2,yae,W5o,Q5o,mN,H5o,U5o,J5o,E2,wae,Y5o,K5o,gN,Z5o,eyo,oyo,y2,Aae,ryo,tyo,hN,ayo,nyo,syo,w2,Lae,lyo,iyo,pN,dyo,cyo,fyo,A2,Bae,myo,gyo,_N,hyo,pyo,_yo,L2,xae,uyo,byo,uN,vyo,Tyo,Fyo,B2,kae,Cyo,Myo,bN,Eyo,yyo,wyo,x2,Rae,Ayo,Lyo,vN,Byo,xyo,kyo,k2,Sae,Ryo,Syo,TN,Pyo,$yo,Iyo,R2,Pae,Nyo,Dyo,FN,jyo,qyo,Gyo,S2,$ae,Oyo,Xyo,CN,Vyo,zyo,Wyo,P2,Iae,Qyo,Hyo,MN,Uyo,Jyo,Yyo,$2,Nae,Kyo,Zyo,EN,ewo,owo,rwo,I2,Dae,two,awo,yN,nwo,swo,lwo,N2,jae,iwo,dwo,wN,cwo,fwo,mwo,D2,qae,gwo,hwo,AN,pwo,_wo,uwo,j2,Gae,bwo,vwo,LN,Two,Fwo,Cwo,q2,Oae,Mwo,Ewo,BN,ywo,wwo,Awo,G2,Xae,Lwo,Bwo,xN,xwo,kwo,Rwo,O2,Vae,Swo,Pwo,kN,$wo,Iwo,Nwo,X2,zae,Dwo,jwo,RN,qwo,Gwo,Owo,V2,Wae,Xwo,Vwo,SN,zwo,Wwo,Qwo,z2,Qae,Hwo,Uwo,PN,Jwo,Ywo,Kwo,W2,Hae,Zwo,eAo,$N,oAo,rAo,tAo,Q2,Uae,aAo,nAo,IN,sAo,lAo,iAo,H2,dAo,Jae,cAo,fAo,Yae,mAo,gAo,Kae,hAo,pAo,xy,Gke,hd,U2,Zae,ky,_Ao,ene,uAo,Oke,rr,Ry,bAo,pd,vAo,one,TAo,FAo,rne,CAo,MAo,EAo,Sy,yAo,tne,wAo,AAo,LAo,Jr,Py,BAo,ane,xAo,kAo,_d,RAo,nne,SAo,PAo,sne,$Ao,IAo,NAo,lne,DAo,jAo,$y,qAo,Xe,Iy,GAo,ine,OAo,XAo,Ja,VAo,dne,zAo,WAo,cne,QAo,HAo,fne,UAo,JAo,YAo,G,J2,mne,KAo,ZAo,NN,e0o,o0o,r0o,Y2,gne,t0o,a0o,DN,n0o,s0o,l0o,K2,hne,i0o,d0o,jN,c0o,f0o,m0o,Z2,pne,g0o,h0o,qN,p0o,_0o,u0o,e6,_ne,b0o,v0o,GN,T0o,F0o,C0o,o6,une,M0o,E0o,ON,y0o,w0o,A0o,r6,bne,L0o,B0o,XN,x0o,k0o,R0o,t6,vne,S0o,P0o,VN,$0o,I0o,N0o,a6,Tne,D0o,j0o,zN,q0o,G0o,O0o,n6,Fne,X0o,V0o,WN,z0o,W0o,Q0o,s6,Cne,H0o,U0o,QN,J0o,Y0o,K0o,l6,Mne,Z0o,eLo,HN,oLo,rLo,tLo,i6,Ene,aLo,nLo,UN,sLo,lLo,iLo,d6,yne,dLo,cLo,JN,fLo,mLo,gLo,c6,wne,hLo,pLo,YN,_Lo,uLo,bLo,f6,Ane,vLo,TLo,KN,FLo,CLo,MLo,m6,Lne,ELo,yLo,ZN,wLo,ALo,LLo,g6,Bne,BLo,xLo,eD,kLo,RLo,SLo,h6,xne,PLo,$Lo,oD,ILo,NLo,DLo,p6,kne,jLo,qLo,rD,GLo,OLo,XLo,_6,Rne,VLo,zLo,tD,WLo,QLo,HLo,u6,Sne,ULo,JLo,aD,YLo,KLo,ZLo,b6,Pne,e7o,o7o,nD,r7o,t7o,a7o,v6,$ne,n7o,s7o,sD,l7o,i7o,d7o,T6,Ine,c7o,f7o,lD,m7o,g7o,h7o,F6,Nne,p7o,_7o,iD,u7o,b7o,v7o,C6,Dne,T7o,F7o,dD,C7o,M7o,E7o,M6,jne,y7o,w7o,cD,A7o,L7o,B7o,E6,x7o,qne,k7o,R7o,Gne,S7o,P7o,One,$7o,I7o,Ny,Xke,ud,y6,Xne,Dy,N7o,Vne,D7o,Vke,tr,jy,j7o,bd,q7o,zne,G7o,O7o,Wne,X7o,V7o,z7o,qy,W7o,Qne,Q7o,H7o,U7o,Yr,Gy,J7o,Hne,Y7o,K7o,vd,Z7o,Une,e8o,o8o,Jne,r8o,t8o,a8o,Yne,n8o,s8o,Oy,l8o,Ve,Xy,i8o,Kne,d8o,c8o,Ya,f8o,Zne,m8o,g8o,ese,h8o,p8o,ose,_8o,u8o,b8o,da,w6,rse,v8o,T8o,fD,F8o,C8o,M8o,A6,tse,E8o,y8o,mD,w8o,A8o,L8o,L6,ase,B8o,x8o,gD,k8o,R8o,S8o,B6,nse,P8o,$8o,hD,I8o,N8o,D8o,x6,sse,j8o,q8o,pD,G8o,O8o,X8o,k6,V8o,lse,z8o,W8o,ise,Q8o,H8o,dse,U8o,J8o,Vy,zke,Td,R6,cse,zy,Y8o,fse,K8o,Wke,ar,Wy,Z8o,Fd,e9o,mse,o9o,r9o,gse,t9o,a9o,n9o,Qy,s9o,hse,l9o,i9o,d9o,Kr,Hy,c9o,pse,f9o,m9o,Cd,g9o,_se,h9o,p9o,use,_9o,u9o,b9o,bse,v9o,T9o,Uy,F9o,ze,Jy,C9o,vse,M9o,E9o,Ka,y9o,Tse,w9o,A9o,Fse,L9o,B9o,Cse,x9o,k9o,R9o,j,S6,Mse,S9o,P9o,_D,$9o,I9o,N9o,P6,Ese,D9o,j9o,uD,q9o,G9o,O9o,$6,yse,X9o,V9o,bD,z9o,W9o,Q9o,I6,wse,H9o,U9o,vD,J9o,Y9o,K9o,N6,Ase,Z9o,eBo,TD,oBo,rBo,tBo,D6,Lse,aBo,nBo,FD,sBo,lBo,iBo,j6,Bse,dBo,cBo,CD,fBo,mBo,gBo,q6,xse,hBo,pBo,MD,_Bo,uBo,bBo,G6,kse,vBo,TBo,ED,FBo,CBo,MBo,O6,Rse,EBo,yBo,yD,wBo,ABo,LBo,X6,Sse,BBo,xBo,wD,kBo,RBo,SBo,V6,Pse,PBo,$Bo,AD,IBo,NBo,DBo,z6,$se,jBo,qBo,LD,GBo,OBo,XBo,W6,Ise,VBo,zBo,BD,WBo,QBo,HBo,Q6,Nse,UBo,JBo,xD,YBo,KBo,ZBo,H6,Dse,exo,oxo,kD,rxo,txo,axo,U6,jse,nxo,sxo,RD,lxo,ixo,dxo,J6,qse,cxo,fxo,SD,mxo,gxo,hxo,Y6,Gse,pxo,_xo,PD,uxo,bxo,vxo,K6,Ose,Txo,Fxo,$D,Cxo,Mxo,Exo,Z6,Xse,yxo,wxo,ID,Axo,Lxo,Bxo,eb,Vse,xxo,kxo,ND,Rxo,Sxo,Pxo,ob,zse,$xo,Ixo,DD,Nxo,Dxo,jxo,rb,Wse,qxo,Gxo,jD,Oxo,Xxo,Vxo,tb,Qse,zxo,Wxo,qD,Qxo,Hxo,Uxo,ab,Hse,Jxo,Yxo,GD,Kxo,Zxo,eko,nb,Use,oko,rko,OD,tko,ako,nko,sb,Jse,sko,lko,XD,iko,dko,cko,lb,Yse,fko,mko,VD,gko,hko,pko,ib,Kse,_ko,uko,zD,bko,vko,Tko,db,Zse,Fko,Cko,WD,Mko,Eko,yko,cb,ele,wko,Ako,QD,Lko,Bko,xko,fb,ole,kko,Rko,HD,Sko,Pko,$ko,mb,Iko,rle,Nko,Dko,tle,jko,qko,ale,Gko,Oko,Yy,Qke,Md,gb,nle,Ky,Xko,sle,Vko,Hke,nr,Zy,zko,Ed,Wko,lle,Qko,Hko,ile,Uko,Jko,Yko,ew,Kko,dle,Zko,eRo,oRo,Zr,ow,rRo,cle,tRo,aRo,yd,nRo,fle,sRo,lRo,mle,iRo,dRo,cRo,gle,fRo,mRo,rw,gRo,We,tw,hRo,hle,pRo,_Ro,Za,uRo,ple,bRo,vRo,_le,TRo,FRo,ule,CRo,MRo,ERo,R,hb,ble,yRo,wRo,UD,ARo,LRo,BRo,pb,vle,xRo,kRo,JD,RRo,SRo,PRo,_b,Tle,$Ro,IRo,YD,NRo,DRo,jRo,ub,Fle,qRo,GRo,KD,ORo,XRo,VRo,bb,Cle,zRo,WRo,ZD,QRo,HRo,URo,vb,Mle,JRo,YRo,ej,KRo,ZRo,eSo,Tb,Ele,oSo,rSo,oj,tSo,aSo,nSo,Fb,yle,sSo,lSo,rj,iSo,dSo,cSo,Cb,wle,fSo,mSo,tj,gSo,hSo,pSo,Mb,Ale,_So,uSo,aj,bSo,vSo,TSo,Eb,Lle,FSo,CSo,nj,MSo,ESo,ySo,yb,Ble,wSo,ASo,sj,LSo,BSo,xSo,wb,xle,kSo,RSo,lj,SSo,PSo,$So,Ab,kle,ISo,NSo,ij,DSo,jSo,qSo,Lb,Rle,GSo,OSo,dj,XSo,VSo,zSo,Bb,Sle,WSo,QSo,cj,HSo,USo,JSo,xb,Ple,YSo,KSo,fj,ZSo,ePo,oPo,kb,$le,rPo,tPo,mj,aPo,nPo,sPo,Rb,Ile,lPo,iPo,gj,dPo,cPo,fPo,Sb,Nle,mPo,gPo,hj,hPo,pPo,_Po,Pb,Dle,uPo,bPo,pj,vPo,TPo,FPo,$b,jle,CPo,MPo,_j,EPo,yPo,wPo,Ib,qle,APo,LPo,uj,BPo,xPo,kPo,Nb,Gle,RPo,SPo,bj,PPo,$Po,IPo,Db,Ole,NPo,DPo,vj,jPo,qPo,GPo,jb,Xle,OPo,XPo,Tj,VPo,zPo,WPo,qb,Vle,QPo,HPo,Fj,UPo,JPo,YPo,Gb,zle,KPo,ZPo,Cj,e$o,o$o,r$o,Ob,Wle,t$o,a$o,Mj,n$o,s$o,l$o,Xb,Qle,i$o,d$o,Ej,c$o,f$o,m$o,Vb,Hle,g$o,h$o,yj,p$o,_$o,u$o,zb,Ule,b$o,v$o,wj,T$o,F$o,C$o,Wb,Jle,M$o,E$o,Aj,y$o,w$o,A$o,Qb,Yle,L$o,B$o,Lj,x$o,k$o,R$o,Hb,Kle,S$o,P$o,Bj,$$o,I$o,N$o,Ub,Zle,D$o,j$o,xj,q$o,G$o,O$o,Jb,eie,X$o,V$o,kj,z$o,W$o,Q$o,Yb,oie,H$o,U$o,Rj,J$o,Y$o,K$o,Kb,rie,Z$o,eIo,Sj,oIo,rIo,tIo,Zb,aIo,tie,nIo,sIo,aie,lIo,iIo,nie,dIo,cIo,aw,Uke,wd,ev,sie,nw,fIo,lie,mIo,Jke,sr,sw,gIo,Ad,hIo,iie,pIo,_Io,die,uIo,bIo,vIo,lw,TIo,cie,FIo,CIo,MIo,et,iw,EIo,fie,yIo,wIo,Ld,AIo,mie,LIo,BIo,gie,xIo,kIo,RIo,hie,SIo,PIo,dw,$Io,Qe,cw,IIo,pie,NIo,DIo,en,jIo,_ie,qIo,GIo,uie,OIo,XIo,bie,VIo,zIo,WIo,vie,ov,Tie,QIo,HIo,Pj,UIo,JIo,YIo,rv,KIo,Fie,ZIo,eNo,Cie,oNo,rNo,Mie,tNo,aNo,fw,Yke,Bd,tv,Eie,mw,nNo,yie,sNo,Kke,lr,gw,lNo,xd,iNo,wie,dNo,cNo,Aie,fNo,mNo,gNo,hw,hNo,Lie,pNo,_No,uNo,ot,pw,bNo,Bie,vNo,TNo,kd,FNo,xie,CNo,MNo,kie,ENo,yNo,wNo,Rie,ANo,LNo,_w,BNo,He,uw,xNo,Sie,kNo,RNo,on,SNo,Pie,PNo,$No,$ie,INo,NNo,Iie,DNo,jNo,qNo,ce,av,Nie,GNo,ONo,$j,XNo,VNo,zNo,nv,Die,WNo,QNo,Ij,HNo,UNo,JNo,qs,jie,YNo,KNo,Nj,ZNo,eDo,Dj,oDo,rDo,tDo,sv,qie,aDo,nDo,jj,sDo,lDo,iDo,ma,Gie,dDo,cDo,qj,fDo,mDo,Gj,gDo,hDo,Oj,pDo,_Do,uDo,lv,Oie,bDo,vDo,Xj,TDo,FDo,CDo,iv,Xie,MDo,EDo,Vj,yDo,wDo,ADo,dv,Vie,LDo,BDo,zj,xDo,kDo,RDo,cv,zie,SDo,PDo,Wj,$Do,IDo,NDo,fv,Wie,DDo,jDo,Qj,qDo,GDo,ODo,mv,Qie,XDo,VDo,Hj,zDo,WDo,QDo,gv,Hie,HDo,UDo,Uj,JDo,YDo,KDo,hv,ZDo,Uie,ejo,ojo,Jie,rjo,tjo,Yie,ajo,njo,bw,Zke,Rd,pv,Kie,vw,sjo,Zie,ljo,eRe,ir,Tw,ijo,Sd,djo,ede,cjo,fjo,ode,mjo,gjo,hjo,Fw,pjo,rde,_jo,ujo,bjo,rt,Cw,vjo,tde,Tjo,Fjo,Pd,Cjo,ade,Mjo,Ejo,nde,yjo,wjo,Ajo,sde,Ljo,Bjo,Mw,xjo,Ue,Ew,kjo,lde,Rjo,Sjo,rn,Pjo,ide,$jo,Ijo,dde,Njo,Djo,cde,jjo,qjo,Gjo,fde,_v,mde,Ojo,Xjo,Jj,Vjo,zjo,Wjo,uv,Qjo,gde,Hjo,Ujo,hde,Jjo,Yjo,pde,Kjo,Zjo,yw,oRe,$d,bv,_de,ww,eqo,ude,oqo,rRe,dr,Aw,rqo,Id,tqo,bde,aqo,nqo,vde,sqo,lqo,iqo,Lw,dqo,Tde,cqo,fqo,mqo,tt,Bw,gqo,Fde,hqo,pqo,Nd,_qo,Cde,uqo,bqo,Mde,vqo,Tqo,Fqo,Ede,Cqo,Mqo,xw,Eqo,Je,kw,yqo,yde,wqo,Aqo,tn,Lqo,wde,Bqo,xqo,Ade,kqo,Rqo,Lde,Sqo,Pqo,$qo,ke,vv,Bde,Iqo,Nqo,Yj,Dqo,jqo,qqo,Tv,xde,Gqo,Oqo,Kj,Xqo,Vqo,zqo,Fv,kde,Wqo,Qqo,Zj,Hqo,Uqo,Jqo,Cv,Rde,Yqo,Kqo,eq,Zqo,eGo,oGo,Mv,Sde,rGo,tGo,oq,aGo,nGo,sGo,Ev,Pde,lGo,iGo,rq,dGo,cGo,fGo,yv,$de,mGo,gGo,tq,hGo,pGo,_Go,wv,Ide,uGo,bGo,aq,vGo,TGo,FGo,Av,CGo,Nde,MGo,EGo,Dde,yGo,wGo,jde,AGo,LGo,Rw,tRe,Dd,Lv,qde,Sw,BGo,Gde,xGo,aRe,cr,Pw,kGo,jd,RGo,Ode,SGo,PGo,Xde,$Go,IGo,NGo,$w,DGo,Vde,jGo,qGo,GGo,at,Iw,OGo,zde,XGo,VGo,qd,zGo,Wde,WGo,QGo,Qde,HGo,UGo,JGo,Hde,YGo,KGo,Nw,ZGo,Ye,Dw,eOo,Ude,oOo,rOo,an,tOo,Jde,aOo,nOo,Yde,sOo,lOo,Kde,iOo,dOo,cOo,nn,Bv,Zde,fOo,mOo,nq,gOo,hOo,pOo,xv,ece,_Oo,uOo,sq,bOo,vOo,TOo,kv,oce,FOo,COo,lq,MOo,EOo,yOo,Rv,rce,wOo,AOo,iq,LOo,BOo,xOo,Sv,kOo,tce,ROo,SOo,ace,POo,$Oo,nce,IOo,NOo,jw,nRe,Gd,Pv,sce,qw,DOo,lce,jOo,sRe,fr,Gw,qOo,Od,GOo,ice,OOo,XOo,dce,VOo,zOo,WOo,Ow,QOo,cce,HOo,UOo,JOo,nt,Xw,YOo,fce,KOo,ZOo,Xd,eXo,mce,oXo,rXo,gce,tXo,aXo,nXo,hce,sXo,lXo,Vw,iXo,Ke,zw,dXo,pce,cXo,fXo,sn,mXo,_ce,gXo,hXo,uce,pXo,_Xo,bce,uXo,bXo,vXo,Re,$v,vce,TXo,FXo,dq,CXo,MXo,EXo,Iv,Tce,yXo,wXo,cq,AXo,LXo,BXo,Nv,Fce,xXo,kXo,fq,RXo,SXo,PXo,Dv,Cce,$Xo,IXo,mq,NXo,DXo,jXo,jv,Mce,qXo,GXo,gq,OXo,XXo,VXo,qv,Ece,zXo,WXo,hq,QXo,HXo,UXo,Gv,yce,JXo,YXo,pq,KXo,ZXo,eVo,Ov,wce,oVo,rVo,_q,tVo,aVo,nVo,Xv,sVo,Ace,lVo,iVo,Lce,dVo,cVo,Bce,fVo,mVo,Ww,lRe,Vd,Vv,xce,Qw,gVo,kce,hVo,iRe,mr,Hw,pVo,zd,_Vo,Rce,uVo,bVo,Sce,vVo,TVo,FVo,Uw,CVo,Pce,MVo,EVo,yVo,st,Jw,wVo,$ce,AVo,LVo,Wd,BVo,Ice,xVo,kVo,Nce,RVo,SVo,PVo,Dce,$Vo,IVo,Yw,NVo,Ze,Kw,DVo,jce,jVo,qVo,ln,GVo,qce,OVo,XVo,Gce,VVo,zVo,Oce,WVo,QVo,HVo,Zw,zv,Xce,UVo,JVo,uq,YVo,KVo,ZVo,Wv,Vce,ezo,ozo,bq,rzo,tzo,azo,Qv,nzo,zce,szo,lzo,Wce,izo,dzo,Qce,czo,fzo,eA,dRe,Qd,Hv,Hce,oA,mzo,Uce,gzo,cRe,gr,rA,hzo,Hd,pzo,Jce,_zo,uzo,Yce,bzo,vzo,Tzo,tA,Fzo,Kce,Czo,Mzo,Ezo,lt,aA,yzo,Zce,wzo,Azo,Ud,Lzo,efe,Bzo,xzo,ofe,kzo,Rzo,Szo,rfe,Pzo,$zo,nA,Izo,eo,sA,Nzo,tfe,Dzo,jzo,dn,qzo,afe,Gzo,Ozo,nfe,Xzo,Vzo,sfe,zzo,Wzo,Qzo,cn,Uv,lfe,Hzo,Uzo,vq,Jzo,Yzo,Kzo,Jv,ife,Zzo,eWo,Tq,oWo,rWo,tWo,Yv,dfe,aWo,nWo,Fq,sWo,lWo,iWo,Kv,cfe,dWo,cWo,Cq,fWo,mWo,gWo,Zv,hWo,ffe,pWo,_Wo,mfe,uWo,bWo,gfe,vWo,TWo,lA,fRe,Jd,eT,hfe,iA,FWo,pfe,CWo,mRe,hr,dA,MWo,Yd,EWo,_fe,yWo,wWo,ufe,AWo,LWo,BWo,cA,xWo,bfe,kWo,RWo,SWo,it,fA,PWo,vfe,$Wo,IWo,Kd,NWo,Tfe,DWo,jWo,Ffe,qWo,GWo,OWo,Cfe,XWo,VWo,mA,zWo,oo,gA,WWo,Mfe,QWo,HWo,fn,UWo,Efe,JWo,YWo,yfe,KWo,ZWo,wfe,eQo,oQo,rQo,Zd,oT,Afe,tQo,aQo,Mq,nQo,sQo,lQo,rT,Lfe,iQo,dQo,Eq,cQo,fQo,mQo,tT,Bfe,gQo,hQo,yq,pQo,_Qo,uQo,aT,bQo,xfe,vQo,TQo,kfe,FQo,CQo,Rfe,MQo,EQo,hA,gRe,ec,nT,Sfe,pA,yQo,Pfe,wQo,hRe,pr,_A,AQo,oc,LQo,$fe,BQo,xQo,Ife,kQo,RQo,SQo,uA,PQo,Nfe,$Qo,IQo,NQo,dt,bA,DQo,Dfe,jQo,qQo,rc,GQo,jfe,OQo,XQo,qfe,VQo,zQo,WQo,Gfe,QQo,HQo,vA,UQo,ro,TA,JQo,Ofe,YQo,KQo,mn,ZQo,Xfe,eHo,oHo,Vfe,rHo,tHo,zfe,aHo,nHo,sHo,Wfe,sT,Qfe,lHo,iHo,wq,dHo,cHo,fHo,lT,mHo,Hfe,gHo,hHo,Ufe,pHo,_Ho,Jfe,uHo,bHo,FA,pRe,tc,iT,Yfe,CA,vHo,Kfe,THo,_Re,_r,MA,FHo,ac,CHo,Zfe,MHo,EHo,eme,yHo,wHo,AHo,EA,LHo,ome,BHo,xHo,kHo,ct,yA,RHo,rme,SHo,PHo,nc,$Ho,tme,IHo,NHo,ame,DHo,jHo,qHo,nme,GHo,OHo,wA,XHo,to,AA,VHo,sme,zHo,WHo,gn,QHo,lme,HHo,UHo,ime,JHo,YHo,dme,KHo,ZHo,eUo,cme,dT,fme,oUo,rUo,Aq,tUo,aUo,nUo,cT,sUo,mme,lUo,iUo,gme,dUo,cUo,hme,fUo,mUo,LA,uRe,sc,fT,pme,BA,gUo,_me,hUo,bRe,ur,xA,pUo,lc,_Uo,ume,uUo,bUo,bme,vUo,TUo,FUo,kA,CUo,vme,MUo,EUo,yUo,ft,RA,wUo,Tme,AUo,LUo,ic,BUo,Fme,xUo,kUo,Cme,RUo,SUo,PUo,Mme,$Uo,IUo,SA,NUo,ao,PA,DUo,Eme,jUo,qUo,hn,GUo,yme,OUo,XUo,wme,VUo,zUo,Ame,WUo,QUo,HUo,$A,mT,Lme,UUo,JUo,Lq,YUo,KUo,ZUo,gT,Bme,eJo,oJo,Bq,rJo,tJo,aJo,hT,nJo,xme,sJo,lJo,kme,iJo,dJo,Rme,cJo,fJo,IA,vRe,dc,pT,Sme,NA,mJo,Pme,gJo,TRe,br,DA,hJo,cc,pJo,$me,_Jo,uJo,Ime,bJo,vJo,TJo,jA,FJo,Nme,CJo,MJo,EJo,mt,qA,yJo,Dme,wJo,AJo,fc,LJo,jme,BJo,xJo,qme,kJo,RJo,SJo,Gme,PJo,$Jo,GA,IJo,no,OA,NJo,Ome,DJo,jJo,pn,qJo,Xme,GJo,OJo,Vme,XJo,VJo,zme,zJo,WJo,QJo,Wme,_T,Qme,HJo,UJo,xq,JJo,YJo,KJo,uT,ZJo,Hme,eYo,oYo,Ume,rYo,tYo,Jme,aYo,nYo,XA,FRe,mc,bT,Yme,VA,sYo,Kme,lYo,CRe,vr,zA,iYo,gc,dYo,Zme,cYo,fYo,ege,mYo,gYo,hYo,WA,pYo,oge,_Yo,uYo,bYo,gt,QA,vYo,rge,TYo,FYo,hc,CYo,tge,MYo,EYo,age,yYo,wYo,AYo,nge,LYo,BYo,HA,xYo,ho,UA,kYo,sge,RYo,SYo,_n,PYo,lge,$Yo,IYo,ige,NYo,DYo,dge,jYo,qYo,GYo,B,vT,cge,OYo,XYo,kq,VYo,zYo,WYo,TT,fge,QYo,HYo,Rq,UYo,JYo,YYo,FT,mge,KYo,ZYo,Sq,eKo,oKo,rKo,CT,gge,tKo,aKo,Pq,nKo,sKo,lKo,MT,hge,iKo,dKo,$q,cKo,fKo,mKo,ET,pge,gKo,hKo,Iq,pKo,_Ko,uKo,yT,_ge,bKo,vKo,Nq,TKo,FKo,CKo,wT,uge,MKo,EKo,Dq,yKo,wKo,AKo,AT,bge,LKo,BKo,jq,xKo,kKo,RKo,LT,vge,SKo,PKo,qq,$Ko,IKo,NKo,BT,Tge,DKo,jKo,Gq,qKo,GKo,OKo,xT,Fge,XKo,VKo,Oq,zKo,WKo,QKo,kT,Cge,HKo,UKo,Xq,JKo,YKo,KKo,RT,Mge,ZKo,eZo,Vq,oZo,rZo,tZo,ST,Ege,aZo,nZo,zq,sZo,lZo,iZo,PT,yge,dZo,cZo,Wq,fZo,mZo,gZo,Gs,wge,hZo,pZo,Qq,_Zo,uZo,Hq,bZo,vZo,TZo,$T,Age,FZo,CZo,Uq,MZo,EZo,yZo,IT,Lge,wZo,AZo,Jq,LZo,BZo,xZo,NT,Bge,kZo,RZo,Yq,SZo,PZo,$Zo,DT,xge,IZo,NZo,Kq,DZo,jZo,qZo,jT,kge,GZo,OZo,Zq,XZo,VZo,zZo,qT,Rge,WZo,QZo,eG,HZo,UZo,JZo,GT,Sge,YZo,KZo,oG,ZZo,eer,oer,OT,Pge,rer,ter,rG,aer,ner,ser,XT,$ge,ler,ier,tG,der,cer,fer,VT,Ige,mer,ger,aG,her,per,_er,zT,Nge,uer,ber,nG,ver,Ter,Fer,WT,Dge,Cer,Mer,sG,Eer,yer,wer,QT,jge,Aer,Ler,lG,Ber,xer,ker,HT,qge,Rer,Ser,iG,Per,$er,Ier,UT,Gge,Ner,Der,dG,jer,qer,Ger,JT,Oge,Oer,Xer,cG,Ver,zer,Wer,YT,Xge,Qer,Her,fG,Uer,Jer,Yer,KT,Vge,Ker,Zer,mG,eor,oor,ror,ZT,zge,tor,aor,gG,nor,sor,lor,eF,Wge,ior,dor,hG,cor,mor,gor,oF,Qge,hor,por,pG,_or,uor,bor,rF,Hge,vor,Tor,_G,For,Cor,Mor,tF,Uge,Eor,yor,uG,wor,Aor,Lor,aF,Jge,Bor,xor,bG,kor,Ror,Sor,nF,Yge,Por,$or,vG,Ior,Nor,Dor,Kge,jor,qor,JA,MRe,pc,sF,Zge,YA,Gor,ehe,Oor,ERe,Tr,KA,Xor,_c,Vor,ohe,zor,Wor,rhe,Qor,Hor,Uor,ZA,Jor,the,Yor,Kor,Zor,ht,e0,err,ahe,orr,rrr,uc,trr,nhe,arr,nrr,she,srr,lrr,irr,lhe,drr,crr,o0,frr,po,r0,mrr,ihe,grr,hrr,un,prr,dhe,_rr,urr,che,brr,vrr,fhe,Trr,Frr,Crr,H,lF,mhe,Mrr,Err,TG,yrr,wrr,Arr,iF,ghe,Lrr,Brr,FG,xrr,krr,Rrr,dF,hhe,Srr,Prr,CG,$rr,Irr,Nrr,cF,phe,Drr,jrr,MG,qrr,Grr,Orr,fF,_he,Xrr,Vrr,EG,zrr,Wrr,Qrr,mF,uhe,Hrr,Urr,yG,Jrr,Yrr,Krr,gF,bhe,Zrr,etr,wG,otr,rtr,ttr,hF,vhe,atr,ntr,AG,str,ltr,itr,pF,The,dtr,ctr,LG,ftr,mtr,gtr,_F,Fhe,htr,ptr,BG,_tr,utr,btr,uF,Che,vtr,Ttr,xG,Ftr,Ctr,Mtr,bF,Mhe,Etr,ytr,kG,wtr,Atr,Ltr,vF,Ehe,Btr,xtr,RG,ktr,Rtr,Str,TF,yhe,Ptr,$tr,SG,Itr,Ntr,Dtr,FF,whe,jtr,qtr,PG,Gtr,Otr,Xtr,CF,Ahe,Vtr,ztr,$G,Wtr,Qtr,Htr,MF,Lhe,Utr,Jtr,IG,Ytr,Ktr,Ztr,EF,Bhe,ear,oar,NG,rar,tar,aar,yF,xhe,nar,sar,DG,lar,iar,dar,wF,khe,car,far,jG,mar,gar,har,AF,Rhe,par,_ar,qG,uar,bar,Tar,LF,She,Far,Car,GG,Mar,Ear,yar,Phe,war,Aar,t0,yRe,bc,BF,$he,a0,Lar,Ihe,Bar,wRe,Fr,n0,xar,vc,kar,Nhe,Rar,Sar,Dhe,Par,$ar,Iar,s0,Nar,jhe,Dar,jar,qar,pt,l0,Gar,qhe,Oar,Xar,Tc,Var,Ghe,zar,War,Ohe,Qar,Har,Uar,Xhe,Jar,Yar,i0,Kar,_o,d0,Zar,Vhe,enr,onr,bn,rnr,zhe,tnr,anr,Whe,nnr,snr,Qhe,lnr,inr,dnr,ge,xF,Hhe,cnr,fnr,OG,mnr,gnr,hnr,kF,Uhe,pnr,_nr,XG,unr,bnr,vnr,RF,Jhe,Tnr,Fnr,VG,Cnr,Mnr,Enr,SF,Yhe,ynr,wnr,zG,Anr,Lnr,Bnr,PF,Khe,xnr,knr,WG,Rnr,Snr,Pnr,$F,Zhe,$nr,Inr,QG,Nnr,Dnr,jnr,IF,epe,qnr,Gnr,HG,Onr,Xnr,Vnr,NF,ope,znr,Wnr,UG,Qnr,Hnr,Unr,DF,rpe,Jnr,Ynr,JG,Knr,Znr,esr,jF,tpe,osr,rsr,YG,tsr,asr,nsr,qF,ape,ssr,lsr,KG,isr,dsr,csr,npe,fsr,msr,c0,ARe,Fc,GF,spe,f0,gsr,lpe,hsr,LRe,Cr,m0,psr,Cc,_sr,ipe,usr,bsr,dpe,vsr,Tsr,Fsr,g0,Csr,cpe,Msr,Esr,ysr,_t,h0,wsr,fpe,Asr,Lsr,Mc,Bsr,mpe,xsr,ksr,gpe,Rsr,Ssr,Psr,hpe,$sr,Isr,p0,Nsr,uo,_0,Dsr,ppe,jsr,qsr,vn,Gsr,_pe,Osr,Xsr,upe,Vsr,zsr,bpe,Wsr,Qsr,Hsr,u0,OF,vpe,Usr,Jsr,ZG,Ysr,Ksr,Zsr,XF,Tpe,elr,olr,eO,rlr,tlr,alr,Fpe,nlr,slr,b0,BRe,Ec,VF,Cpe,v0,llr,Mpe,ilr,xRe,Mr,T0,dlr,yc,clr,Epe,flr,mlr,ype,glr,hlr,plr,F0,_lr,wpe,ulr,blr,vlr,ut,C0,Tlr,Ape,Flr,Clr,wc,Mlr,Lpe,Elr,ylr,Bpe,wlr,Alr,Llr,xpe,Blr,xlr,M0,klr,bo,E0,Rlr,kpe,Slr,Plr,Tn,$lr,Rpe,Ilr,Nlr,Spe,Dlr,jlr,Ppe,qlr,Glr,Olr,J,zF,$pe,Xlr,Vlr,oO,zlr,Wlr,Qlr,WF,Ipe,Hlr,Ulr,rO,Jlr,Ylr,Klr,QF,Npe,Zlr,eir,tO,oir,rir,tir,HF,Dpe,air,nir,aO,sir,lir,iir,UF,jpe,dir,cir,nO,fir,mir,gir,JF,qpe,hir,pir,sO,_ir,uir,bir,YF,Gpe,vir,Tir,lO,Fir,Cir,Mir,KF,Ope,Eir,yir,iO,wir,Air,Lir,ZF,Xpe,Bir,xir,dO,kir,Rir,Sir,eC,Vpe,Pir,$ir,cO,Iir,Nir,Dir,oC,zpe,jir,qir,fO,Gir,Oir,Xir,rC,Wpe,Vir,zir,mO,Wir,Qir,Hir,tC,Qpe,Uir,Jir,gO,Yir,Kir,Zir,aC,Hpe,edr,odr,hO,rdr,tdr,adr,nC,Upe,ndr,sdr,pO,ldr,idr,ddr,sC,Jpe,cdr,fdr,_O,mdr,gdr,hdr,lC,Ype,pdr,_dr,uO,udr,bdr,vdr,iC,Kpe,Tdr,Fdr,bO,Cdr,Mdr,Edr,dC,Zpe,ydr,wdr,vO,Adr,Ldr,Bdr,cC,e_e,xdr,kdr,TO,Rdr,Sdr,Pdr,o_e,$dr,Idr,y0,kRe,Ac,fC,r_e,w0,Ndr,t_e,Ddr,RRe,Er,A0,jdr,Lc,qdr,a_e,Gdr,Odr,n_e,Xdr,Vdr,zdr,L0,Wdr,s_e,Qdr,Hdr,Udr,bt,B0,Jdr,l_e,Ydr,Kdr,Bc,Zdr,i_e,ecr,ocr,d_e,rcr,tcr,acr,c_e,ncr,scr,x0,lcr,vo,k0,icr,f_e,dcr,ccr,Fn,fcr,m_e,mcr,gcr,g_e,hcr,pcr,h_e,_cr,ucr,bcr,ue,mC,p_e,vcr,Tcr,FO,Fcr,Ccr,Mcr,gC,__e,Ecr,ycr,CO,wcr,Acr,Lcr,hC,u_e,Bcr,xcr,MO,kcr,Rcr,Scr,pC,b_e,Pcr,$cr,EO,Icr,Ncr,Dcr,_C,v_e,jcr,qcr,yO,Gcr,Ocr,Xcr,uC,T_e,Vcr,zcr,wO,Wcr,Qcr,Hcr,bC,F_e,Ucr,Jcr,AO,Ycr,Kcr,Zcr,vC,C_e,efr,ofr,LO,rfr,tfr,afr,TC,M_e,nfr,sfr,BO,lfr,ifr,dfr,FC,E_e,cfr,ffr,xO,mfr,gfr,hfr,y_e,pfr,_fr,R0,SRe,xc,CC,w_e,S0,ufr,A_e,bfr,PRe,yr,P0,vfr,kc,Tfr,L_e,Ffr,Cfr,B_e,Mfr,Efr,yfr,$0,wfr,x_e,Afr,Lfr,Bfr,vt,I0,xfr,k_e,kfr,Rfr,Rc,Sfr,R_e,Pfr,$fr,S_e,Ifr,Nfr,Dfr,P_e,jfr,qfr,N0,Gfr,To,D0,Ofr,$_e,Xfr,Vfr,Cn,zfr,I_e,Wfr,Qfr,N_e,Hfr,Ufr,D_e,Jfr,Yfr,Kfr,V,MC,j_e,Zfr,emr,kO,omr,rmr,tmr,EC,q_e,amr,nmr,RO,smr,lmr,imr,yC,G_e,dmr,cmr,SO,fmr,mmr,gmr,wC,O_e,hmr,pmr,PO,_mr,umr,bmr,AC,X_e,vmr,Tmr,$O,Fmr,Cmr,Mmr,LC,V_e,Emr,ymr,IO,wmr,Amr,Lmr,BC,z_e,Bmr,xmr,NO,kmr,Rmr,Smr,xC,W_e,Pmr,$mr,DO,Imr,Nmr,Dmr,kC,Q_e,jmr,qmr,jO,Gmr,Omr,Xmr,RC,H_e,Vmr,zmr,qO,Wmr,Qmr,Hmr,SC,U_e,Umr,Jmr,GO,Ymr,Kmr,Zmr,PC,J_e,egr,ogr,OO,rgr,tgr,agr,$C,Y_e,ngr,sgr,XO,lgr,igr,dgr,IC,K_e,cgr,fgr,VO,mgr,ggr,hgr,NC,Z_e,pgr,_gr,zO,ugr,bgr,vgr,DC,eue,Tgr,Fgr,WO,Cgr,Mgr,Egr,jC,oue,ygr,wgr,QO,Agr,Lgr,Bgr,qC,rue,xgr,kgr,HO,Rgr,Sgr,Pgr,GC,tue,$gr,Igr,UO,Ngr,Dgr,jgr,OC,aue,qgr,Ggr,JO,Ogr,Xgr,Vgr,XC,nue,zgr,Wgr,YO,Qgr,Hgr,Ugr,VC,sue,Jgr,Ygr,KO,Kgr,Zgr,ehr,zC,lue,ohr,rhr,ZO,thr,ahr,nhr,WC,iue,shr,lhr,eX,ihr,dhr,chr,QC,due,fhr,mhr,oX,ghr,hhr,phr,cue,_hr,uhr,j0,$Re,Sc,HC,fue,q0,bhr,mue,vhr,IRe,wr,G0,Thr,Pc,Fhr,gue,Chr,Mhr,hue,Ehr,yhr,whr,O0,Ahr,pue,Lhr,Bhr,xhr,Tt,X0,khr,_ue,Rhr,Shr,$c,Phr,uue,$hr,Ihr,bue,Nhr,Dhr,jhr,vue,qhr,Ghr,V0,Ohr,Fo,z0,Xhr,Tue,Vhr,zhr,Mn,Whr,Fue,Qhr,Hhr,Cue,Uhr,Jhr,Mue,Yhr,Khr,Zhr,ne,UC,Eue,epr,opr,rX,rpr,tpr,apr,JC,yue,npr,spr,tX,lpr,ipr,dpr,YC,wue,cpr,fpr,aX,mpr,gpr,hpr,KC,Aue,ppr,_pr,nX,upr,bpr,vpr,ZC,Lue,Tpr,Fpr,sX,Cpr,Mpr,Epr,eM,Bue,ypr,wpr,lX,Apr,Lpr,Bpr,oM,xue,xpr,kpr,iX,Rpr,Spr,Ppr,rM,kue,$pr,Ipr,dX,Npr,Dpr,jpr,tM,Rue,qpr,Gpr,cX,Opr,Xpr,Vpr,aM,Sue,zpr,Wpr,fX,Qpr,Hpr,Upr,nM,Pue,Jpr,Ypr,mX,Kpr,Zpr,e_r,sM,$ue,o_r,r_r,gX,t_r,a_r,n_r,lM,Iue,s_r,l_r,hX,i_r,d_r,c_r,iM,Nue,f_r,m_r,pX,g_r,h_r,p_r,dM,Due,__r,u_r,_X,b_r,v_r,T_r,cM,jue,F_r,C_r,uX,M_r,E_r,y_r,fM,que,w_r,A_r,bX,L_r,B_r,x_r,Gue,k_r,R_r,W0,NRe,Ic,mM,Oue,Q0,S_r,Xue,P_r,DRe,Ar,H0,$_r,Nc,I_r,Vue,N_r,D_r,zue,j_r,q_r,G_r,U0,O_r,Wue,X_r,V_r,z_r,Ft,J0,W_r,Que,Q_r,H_r,Dc,U_r,Hue,J_r,Y_r,Uue,K_r,Z_r,eur,Jue,our,rur,Y0,tur,Co,K0,aur,Yue,nur,sur,En,lur,Kue,iur,dur,Zue,cur,fur,e1e,mur,gur,hur,o1e,gM,r1e,pur,_ur,vX,uur,bur,vur,t1e,Tur,Fur,Z0,jRe,jc,hM,a1e,eL,Cur,n1e,Mur,qRe,Lr,oL,Eur,qc,yur,s1e,wur,Aur,l1e,Lur,Bur,xur,rL,kur,i1e,Rur,Sur,Pur,Ct,tL,$ur,d1e,Iur,Nur,Gc,Dur,c1e,jur,qur,f1e,Gur,Our,Xur,m1e,Vur,zur,aL,Wur,Mo,nL,Qur,g1e,Hur,Uur,yn,Jur,h1e,Yur,Kur,p1e,Zur,e1r,_1e,o1r,r1r,t1r,Y,pM,u1e,a1r,n1r,TX,s1r,l1r,i1r,_M,b1e,d1r,c1r,FX,f1r,m1r,g1r,uM,v1e,h1r,p1r,CX,_1r,u1r,b1r,bM,T1e,v1r,T1r,MX,F1r,C1r,M1r,vM,F1e,E1r,y1r,EX,w1r,A1r,L1r,TM,C1e,B1r,x1r,yX,k1r,R1r,S1r,FM,M1e,P1r,$1r,wX,I1r,N1r,D1r,CM,E1e,j1r,q1r,AX,G1r,O1r,X1r,MM,y1e,V1r,z1r,LX,W1r,Q1r,H1r,EM,w1e,U1r,J1r,BX,Y1r,K1r,Z1r,yM,A1e,e2r,o2r,xX,r2r,t2r,a2r,wM,L1e,n2r,s2r,kX,l2r,i2r,d2r,AM,B1e,c2r,f2r,RX,m2r,g2r,h2r,LM,x1e,p2r,_2r,SX,u2r,b2r,v2r,BM,k1e,T2r,F2r,PX,C2r,M2r,E2r,xM,R1e,y2r,w2r,$X,A2r,L2r,B2r,kM,S1e,x2r,k2r,IX,R2r,S2r,P2r,RM,P1e,$2r,I2r,NX,N2r,D2r,j2r,SM,$1e,q2r,G2r,DX,O2r,X2r,V2r,PM,I1e,z2r,W2r,jX,Q2r,H2r,U2r,N1e,J2r,Y2r,sL,GRe,Oc,$M,D1e,lL,K2r,j1e,Z2r,ORe,Br,iL,e6r,Xc,o6r,q1e,r6r,t6r,G1e,a6r,n6r,s6r,dL,l6r,O1e,i6r,d6r,c6r,Mt,cL,f6r,X1e,m6r,g6r,Vc,h6r,V1e,p6r,_6r,z1e,u6r,b6r,v6r,W1e,T6r,F6r,fL,C6r,Eo,mL,M6r,Q1e,E6r,y6r,wn,w6r,H1e,A6r,L6r,U1e,B6r,x6r,J1e,k6r,R6r,S6r,ee,IM,Y1e,P6r,$6r,qX,I6r,N6r,D6r,NM,K1e,j6r,q6r,GX,G6r,O6r,X6r,DM,Z1e,V6r,z6r,OX,W6r,Q6r,H6r,jM,e2e,U6r,J6r,XX,Y6r,K6r,Z6r,qM,o2e,ebr,obr,VX,rbr,tbr,abr,GM,r2e,nbr,sbr,zX,lbr,ibr,dbr,OM,t2e,cbr,fbr,WX,mbr,gbr,hbr,XM,a2e,pbr,_br,QX,ubr,bbr,vbr,VM,n2e,Tbr,Fbr,HX,Cbr,Mbr,Ebr,zM,s2e,ybr,wbr,UX,Abr,Lbr,Bbr,WM,l2e,xbr,kbr,JX,Rbr,Sbr,Pbr,QM,i2e,$br,Ibr,YX,Nbr,Dbr,jbr,HM,d2e,qbr,Gbr,KX,Obr,Xbr,Vbr,UM,c2e,zbr,Wbr,ZX,Qbr,Hbr,Ubr,JM,f2e,Jbr,Ybr,eV,Kbr,Zbr,evr,YM,m2e,ovr,rvr,oV,tvr,avr,nvr,KM,g2e,svr,lvr,rV,ivr,dvr,cvr,ZM,h2e,fvr,mvr,tV,gvr,hvr,pvr,e4,p2e,_vr,uvr,aV,bvr,vvr,Tvr,_2e,Fvr,Cvr,gL,XRe,zc,o4,u2e,hL,Mvr,b2e,Evr,VRe,xr,pL,yvr,Wc,wvr,v2e,Avr,Lvr,T2e,Bvr,xvr,kvr,_L,Rvr,F2e,Svr,Pvr,$vr,Et,uL,Ivr,C2e,Nvr,Dvr,Qc,jvr,M2e,qvr,Gvr,E2e,Ovr,Xvr,Vvr,y2e,zvr,Wvr,bL,Qvr,yo,vL,Hvr,w2e,Uvr,Jvr,An,Yvr,A2e,Kvr,Zvr,L2e,eTr,oTr,B2e,rTr,tTr,aTr,x2e,r4,k2e,nTr,sTr,nV,lTr,iTr,dTr,R2e,cTr,fTr,TL,zRe,Hc,t4,S2e,FL,mTr,P2e,gTr,WRe,kr,CL,hTr,Uc,pTr,$2e,_Tr,uTr,I2e,bTr,vTr,TTr,ML,FTr,N2e,CTr,MTr,ETr,yt,EL,yTr,D2e,wTr,ATr,Jc,LTr,j2e,BTr,xTr,q2e,kTr,RTr,STr,G2e,PTr,$Tr,yL,ITr,wo,wL,NTr,O2e,DTr,jTr,Ln,qTr,X2e,GTr,OTr,V2e,XTr,VTr,z2e,zTr,WTr,QTr,W2e,a4,Q2e,HTr,UTr,sV,JTr,YTr,KTr,H2e,ZTr,eFr,AL,QRe,Yc,n4,U2e,LL,oFr,J2e,rFr,HRe,Rr,BL,tFr,Kc,aFr,Y2e,nFr,sFr,K2e,lFr,iFr,dFr,xL,cFr,Z2e,fFr,mFr,gFr,wt,kL,hFr,e6e,pFr,_Fr,Zc,uFr,o6e,bFr,vFr,r6e,TFr,FFr,CFr,t6e,MFr,EFr,RL,yFr,Ao,SL,wFr,a6e,AFr,LFr,Bn,BFr,n6e,xFr,kFr,s6e,RFr,SFr,l6e,PFr,$Fr,IFr,z,s4,i6e,NFr,DFr,lV,jFr,qFr,GFr,l4,d6e,OFr,XFr,iV,VFr,zFr,WFr,i4,c6e,QFr,HFr,dV,UFr,JFr,YFr,d4,f6e,KFr,ZFr,cV,eCr,oCr,rCr,c4,m6e,tCr,aCr,fV,nCr,sCr,lCr,f4,g6e,iCr,dCr,mV,cCr,fCr,mCr,m4,h6e,gCr,hCr,gV,pCr,_Cr,uCr,g4,p6e,bCr,vCr,hV,TCr,FCr,CCr,h4,_6e,MCr,ECr,pV,yCr,wCr,ACr,p4,u6e,LCr,BCr,_V,xCr,kCr,RCr,_4,b6e,SCr,PCr,uV,$Cr,ICr,NCr,u4,v6e,DCr,jCr,bV,qCr,GCr,OCr,b4,T6e,XCr,VCr,vV,zCr,WCr,QCr,v4,F6e,HCr,UCr,TV,JCr,YCr,KCr,T4,C6e,ZCr,eMr,FV,oMr,rMr,tMr,F4,M6e,aMr,nMr,CV,sMr,lMr,iMr,C4,E6e,dMr,cMr,MV,fMr,mMr,gMr,M4,y6e,hMr,pMr,EV,_Mr,uMr,bMr,E4,w6e,vMr,TMr,yV,FMr,CMr,MMr,y4,A6e,EMr,yMr,wV,wMr,AMr,LMr,w4,L6e,BMr,xMr,AV,kMr,RMr,SMr,A4,B6e,PMr,$Mr,LV,IMr,NMr,DMr,L4,x6e,jMr,qMr,BV,GMr,OMr,XMr,B4,k6e,VMr,zMr,xV,WMr,QMr,HMr,x4,R6e,UMr,JMr,kV,YMr,KMr,ZMr,S6e,e4r,o4r,PL,URe,ef,k4,P6e,$L,r4r,$6e,t4r,JRe,Sr,IL,a4r,of,n4r,I6e,s4r,l4r,N6e,i4r,d4r,c4r,NL,f4r,D6e,m4r,g4r,h4r,At,DL,p4r,j6e,_4r,u4r,rf,b4r,q6e,v4r,T4r,G6e,F4r,C4r,M4r,O6e,E4r,y4r,jL,w4r,Lo,qL,A4r,X6e,L4r,B4r,xn,x4r,V6e,k4r,R4r,z6e,S4r,P4r,W6e,$4r,I4r,N4r,ca,R4,Q6e,D4r,j4r,RV,q4r,G4r,O4r,S4,H6e,X4r,V4r,SV,z4r,W4r,Q4r,P4,U6e,H4r,U4r,PV,J4r,Y4r,K4r,$4,J6e,Z4r,eEr,$V,oEr,rEr,tEr,I4,Y6e,aEr,nEr,IV,sEr,lEr,iEr,K6e,dEr,cEr,GL,YRe,tf,N4,Z6e,OL,fEr,ebe,mEr,KRe,Pr,XL,gEr,af,hEr,obe,pEr,_Er,rbe,uEr,bEr,vEr,VL,TEr,tbe,FEr,CEr,MEr,Lt,zL,EEr,abe,yEr,wEr,nf,AEr,nbe,LEr,BEr,sbe,xEr,kEr,REr,lbe,SEr,PEr,WL,$Er,Bo,QL,IEr,ibe,NEr,DEr,kn,jEr,dbe,qEr,GEr,cbe,OEr,XEr,fbe,VEr,zEr,WEr,fe,D4,mbe,QEr,HEr,NV,UEr,JEr,YEr,j4,gbe,KEr,ZEr,DV,e3r,o3r,r3r,q4,hbe,t3r,a3r,jV,n3r,s3r,l3r,G4,pbe,i3r,d3r,qV,c3r,f3r,m3r,O4,_be,g3r,h3r,GV,p3r,_3r,u3r,X4,ube,b3r,v3r,OV,T3r,F3r,C3r,V4,bbe,M3r,E3r,XV,y3r,w3r,A3r,z4,vbe,L3r,B3r,VV,x3r,k3r,R3r,W4,Tbe,S3r,P3r,zV,$3r,I3r,N3r,Q4,Fbe,D3r,j3r,WV,q3r,G3r,O3r,H4,Cbe,X3r,V3r,QV,z3r,W3r,Q3r,U4,Mbe,H3r,U3r,HV,J3r,Y3r,K3r,Ebe,Z3r,e5r,HL,ZRe,sf,J4,ybe,UL,o5r,wbe,r5r,eSe,$r,JL,t5r,lf,a5r,Abe,n5r,s5r,Lbe,l5r,i5r,d5r,YL,c5r,Bbe,f5r,m5r,g5r,Bt,KL,h5r,xbe,p5r,_5r,df,u5r,kbe,b5r,v5r,Rbe,T5r,F5r,C5r,Sbe,M5r,E5r,ZL,y5r,xo,e7,w5r,Pbe,A5r,L5r,Rn,B5r,$be,x5r,k5r,Ibe,R5r,S5r,Nbe,P5r,$5r,I5r,be,Y4,Dbe,N5r,D5r,UV,j5r,q5r,G5r,K4,jbe,O5r,X5r,JV,V5r,z5r,W5r,Z4,qbe,Q5r,H5r,YV,U5r,J5r,Y5r,eE,Gbe,K5r,Z5r,KV,eyr,oyr,ryr,oE,Obe,tyr,ayr,ZV,nyr,syr,lyr,rE,Xbe,iyr,dyr,ez,cyr,fyr,myr,tE,Vbe,gyr,hyr,oz,pyr,_yr,uyr,aE,zbe,byr,vyr,rz,Tyr,Fyr,Cyr,nE,Wbe,Myr,Eyr,tz,yyr,wyr,Ayr,sE,Qbe,Lyr,Byr,az,xyr,kyr,Ryr,Hbe,Syr,Pyr,o7,oSe,cf,lE,Ube,r7,$yr,Jbe,Iyr,rSe,Ir,t7,Nyr,ff,Dyr,Ybe,jyr,qyr,Kbe,Gyr,Oyr,Xyr,a7,Vyr,Zbe,zyr,Wyr,Qyr,xt,n7,Hyr,eve,Uyr,Jyr,mf,Yyr,ove,Kyr,Zyr,rve,ewr,owr,rwr,tve,twr,awr,s7,nwr,ko,l7,swr,ave,lwr,iwr,Sn,dwr,nve,cwr,fwr,sve,mwr,gwr,lve,hwr,pwr,_wr,Me,iE,ive,uwr,bwr,nz,vwr,Twr,Fwr,dE,dve,Cwr,Mwr,sz,Ewr,ywr,wwr,cE,cve,Awr,Lwr,lz,Bwr,xwr,kwr,fE,fve,Rwr,Swr,iz,Pwr,$wr,Iwr,mE,mve,Nwr,Dwr,dz,jwr,qwr,Gwr,gE,gve,Owr,Xwr,cz,Vwr,zwr,Wwr,hE,hve,Qwr,Hwr,fz,Uwr,Jwr,Ywr,pE,pve,Kwr,Zwr,mz,eAr,oAr,rAr,_E,_ve,tAr,aAr,gz,nAr,sAr,lAr,uve,iAr,dAr,i7,tSe,gf,uE,bve,d7,cAr,vve,fAr,aSe,Nr,c7,mAr,hf,gAr,Tve,hAr,pAr,Fve,_Ar,uAr,bAr,f7,vAr,Cve,TAr,FAr,CAr,kt,m7,MAr,Mve,EAr,yAr,pf,wAr,Eve,AAr,LAr,yve,BAr,xAr,kAr,wve,RAr,SAr,g7,PAr,Ro,h7,$Ar,Ave,IAr,NAr,Pn,DAr,Lve,jAr,qAr,Bve,GAr,OAr,xve,XAr,VAr,zAr,ve,bE,kve,WAr,QAr,hz,HAr,UAr,JAr,vE,Rve,YAr,KAr,pz,ZAr,e0r,o0r,TE,Sve,r0r,t0r,_z,a0r,n0r,s0r,FE,Pve,l0r,i0r,uz,d0r,c0r,f0r,CE,$ve,m0r,g0r,bz,h0r,p0r,_0r,ME,Ive,u0r,b0r,vz,v0r,T0r,F0r,EE,Nve,C0r,M0r,Tz,E0r,y0r,w0r,yE,Dve,A0r,L0r,Fz,B0r,x0r,k0r,wE,jve,R0r,S0r,Cz,P0r,$0r,I0r,AE,qve,N0r,D0r,Mz,j0r,q0r,G0r,Gve,O0r,X0r,p7,nSe,_f,LE,Ove,_7,V0r,Xve,z0r,sSe,Dr,u7,W0r,uf,Q0r,Vve,H0r,U0r,zve,J0r,Y0r,K0r,b7,Z0r,Wve,eLr,oLr,rLr,Rt,v7,tLr,Qve,aLr,nLr,bf,sLr,Hve,lLr,iLr,Uve,dLr,cLr,fLr,Jve,mLr,gLr,T7,hLr,So,F7,pLr,Yve,_Lr,uLr,$n,bLr,Kve,vLr,TLr,Zve,FLr,CLr,eTe,MLr,ELr,yLr,Te,BE,oTe,wLr,ALr,Ez,LLr,BLr,xLr,xE,rTe,kLr,RLr,yz,SLr,PLr,$Lr,kE,tTe,ILr,NLr,wz,DLr,jLr,qLr,RE,aTe,GLr,OLr,Az,XLr,VLr,zLr,SE,nTe,WLr,QLr,Lz,HLr,ULr,JLr,PE,sTe,YLr,KLr,Bz,ZLr,e7r,o7r,$E,lTe,r7r,t7r,xz,a7r,n7r,s7r,IE,iTe,l7r,i7r,kz,d7r,c7r,f7r,NE,dTe,m7r,g7r,Rz,h7r,p7r,_7r,DE,cTe,u7r,b7r,Sz,v7r,T7r,F7r,fTe,C7r,M7r,C7,lSe,vf,jE,mTe,M7,E7r,gTe,y7r,iSe,jr,E7,w7r,Tf,A7r,hTe,L7r,B7r,pTe,x7r,k7r,R7r,y7,S7r,_Te,P7r,$7r,I7r,St,w7,N7r,uTe,D7r,j7r,Ff,q7r,bTe,G7r,O7r,vTe,X7r,V7r,z7r,TTe,W7r,Q7r,A7,H7r,Po,L7,U7r,FTe,J7r,Y7r,In,K7r,CTe,Z7r,e8r,MTe,o8r,r8r,ETe,t8r,a8r,n8r,Se,qE,yTe,s8r,l8r,Pz,i8r,d8r,c8r,GE,wTe,f8r,m8r,$z,g8r,h8r,p8r,OE,ATe,_8r,u8r,Iz,b8r,v8r,T8r,XE,LTe,F8r,C8r,Nz,M8r,E8r,y8r,VE,BTe,w8r,A8r,Dz,L8r,B8r,x8r,zE,xTe,k8r,R8r,jz,S8r,P8r,$8r,WE,kTe,I8r,N8r,qz,D8r,j8r,q8r,QE,RTe,G8r,O8r,Gz,X8r,V8r,z8r,STe,W8r,Q8r,B7,dSe,Cf,HE,PTe,x7,H8r,$Te,U8r,cSe,qr,k7,J8r,Mf,Y8r,ITe,K8r,Z8r,NTe,e9r,o9r,r9r,R7,t9r,DTe,a9r,n9r,s9r,Pt,S7,l9r,jTe,i9r,d9r,Ef,c9r,qTe,f9r,m9r,GTe,g9r,h9r,p9r,OTe,_9r,u9r,P7,b9r,$o,$7,v9r,XTe,T9r,F9r,Nn,C9r,VTe,M9r,E9r,zTe,y9r,w9r,WTe,A9r,L9r,B9r,Pe,UE,QTe,x9r,k9r,Oz,R9r,S9r,P9r,JE,HTe,$9r,I9r,Xz,N9r,D9r,j9r,YE,UTe,q9r,G9r,Vz,O9r,X9r,V9r,KE,JTe,z9r,W9r,zz,Q9r,H9r,U9r,ZE,YTe,J9r,Y9r,Wz,K9r,Z9r,eBr,e3,KTe,oBr,rBr,Qz,tBr,aBr,nBr,o3,ZTe,sBr,lBr,Hz,iBr,dBr,cBr,r3,eFe,fBr,mBr,Uz,gBr,hBr,pBr,oFe,_Br,uBr,I7,fSe,yf,t3,rFe,N7,bBr,tFe,vBr,mSe,Gr,D7,TBr,wf,FBr,aFe,CBr,MBr,nFe,EBr,yBr,wBr,j7,ABr,sFe,LBr,BBr,xBr,$t,q7,kBr,lFe,RBr,SBr,Af,PBr,iFe,$Br,IBr,dFe,NBr,DBr,jBr,cFe,qBr,GBr,G7,OBr,Io,O7,XBr,fFe,VBr,zBr,Dn,WBr,mFe,QBr,HBr,gFe,UBr,JBr,hFe,YBr,KBr,ZBr,pFe,a3,_Fe,exr,oxr,Jz,rxr,txr,axr,uFe,nxr,sxr,X7,gSe,Lf,n3,bFe,V7,lxr,vFe,ixr,hSe,Or,z7,dxr,Bf,cxr,TFe,fxr,mxr,FFe,gxr,hxr,pxr,W7,_xr,CFe,uxr,bxr,vxr,It,Q7,Txr,MFe,Fxr,Cxr,xf,Mxr,EFe,Exr,yxr,yFe,wxr,Axr,Lxr,wFe,Bxr,xxr,H7,kxr,No,U7,Rxr,AFe,Sxr,Pxr,jn,$xr,LFe,Ixr,Nxr,BFe,Dxr,jxr,xFe,qxr,Gxr,Oxr,J7,s3,kFe,Xxr,Vxr,Yz,zxr,Wxr,Qxr,l3,RFe,Hxr,Uxr,Kz,Jxr,Yxr,Kxr,SFe,Zxr,ekr,Y7,pSe,kf,i3,PFe,K7,okr,$Fe,rkr,_Se,Xr,Z7,tkr,Rf,akr,IFe,nkr,skr,NFe,lkr,ikr,dkr,e8,ckr,DFe,fkr,mkr,gkr,Nt,o8,hkr,jFe,pkr,_kr,Sf,ukr,qFe,bkr,vkr,GFe,Tkr,Fkr,Ckr,OFe,Mkr,Ekr,r8,ykr,Do,t8,wkr,XFe,Akr,Lkr,qn,Bkr,VFe,xkr,kkr,zFe,Rkr,Skr,WFe,Pkr,$kr,Ikr,QFe,d3,HFe,Nkr,Dkr,Zz,jkr,qkr,Gkr,UFe,Okr,Xkr,a8,uSe;return me=new X({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),g5=new X({}),h5=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Gf=new Vkr({props:{warning:!0,$$slots:{default:[eEt]},$$scope:{ctx:$f}}}),p5=new X({}),_5=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/configuration_auto.py#L541"}}),v5=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/configuration_auto.py#L564",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),T5=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),F5=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/configuration_auto.py#L686",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),C5=new X({}),M5=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/tokenization_auto.py#L351"}}),w5=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16162/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),A5=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),L5=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),B5=new X({}),x5=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),S5=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/feature_extraction_auto.py#L186",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16162/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Rh=new Vkr({props:{$$slots:{default:[oEt]},$$scope:{ctx:$f}}}),P5=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),$5=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/feature_extraction_auto.py#L313",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),I5=new X({}),N5=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/processing_auto.py#L70"}}),q5=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Xh=new Vkr({props:{$$slots:{default:[rEt]},$$scope:{ctx:$f}}}),G5=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),O5=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),X5=new X({}),V5=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L707"}}),W5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/resnetd#transformers.ResNetDConfig">ResNetDConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/resnetd#transformers.ResNetDModel">ResNetDModel</a> (ResNet-D model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Q5=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),H5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),U5=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J5=new X({}),Y5=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L714"}}),Z5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),oy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ry=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ty=new X({}),ay=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L729"}}),sy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),iy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cy=new X({}),fy=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L736"}}),gy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),hy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),py=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_y=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uy=new X({}),by=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L743"}}),Ty=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),Fy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),Cy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),My=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ey=new X({}),yy=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L752"}}),Ay=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),By=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ky=new X({}),Ry=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L786"}}),Py=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),$y=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),Iy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dy=new X({}),jy=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L793"}}),Gy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),Oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),Xy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zy=new X({}),Wy=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L779"}}),Hy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),Jy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Yy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ky=new X({}),Zy=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L761"}}),ow=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),rw=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),tw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aw=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nw=new X({}),sw=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L768"}}),iw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),dw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),cw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mw=new X({}),gw=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L802"}}),pw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16162/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16162/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16162/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/resnetd#transformers.ResNetDConfig">ResNetDConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/resnetd#transformers.ResNetDForImageClassification">ResNetDForImageClassification</a> (ResNet-D model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),_w=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),uw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vw=new X({}),Tw=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L841"}}),Cw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Mw=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),Ew=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yw=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ww=new X({}),Aw=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L848"}}),Bw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),xw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),kw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Rw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Sw=new X({}),Pw=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L871"}}),Iw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Nw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Dw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qw=new X({}),Gw=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L855"}}),Xw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Vw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),zw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qw=new X({}),Hw=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L862"}}),Jw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Yw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),Kw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oA=new X({}),rA=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L880"}}),aA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),nA=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),sA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iA=new X({}),dA=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L887"}}),fA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),mA=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),gA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hA=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pA=new X({}),_A=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L834"}}),bA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),vA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),TA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CA=new X({}),MA=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L809"}}),yA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),wA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),AA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BA=new X({}),xA=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L816"}}),RA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),SA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),PA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),IA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NA=new X({}),DA=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_auto.py#L825"}}),qA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),GA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),OA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),XA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VA=new X({}),zA=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_tf_auto.py#L374"}}),QA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),HA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),UA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),JA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YA=new X({}),KA=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),e0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),o0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),r0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a0=new X({}),n0=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),l0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),i0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),d0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f0=new X({}),m0=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),h0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),p0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),_0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),b0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),v0=new X({}),T0=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),C0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),M0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),E0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),y0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w0=new X({}),A0=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),B0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),x0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),k0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),R0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S0=new X({}),P0=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),I0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),N0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),D0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),j0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q0=new X({}),G0=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),X0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),V0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),z0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),W0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q0=new X({}),H0=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),J0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Y0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),K0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Z0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eL=new X({}),oL=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),tL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),aL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),nL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lL=new X({}),iL=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),cL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),fL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),mL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hL=new X({}),pL=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),uL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),bL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),vL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),TL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FL=new X({}),CL=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),EL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),yL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),wL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),AL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LL=new X({}),BL=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),kL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),RL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),SL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),PL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$L=new X({}),IL=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),DL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),jL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),qL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),GL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OL=new X({}),XL=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),zL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),WL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),QL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),HL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UL=new X({}),JL=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),KL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),ZL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),e7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),o7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r7=new X({}),t7=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),n7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),s7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),l7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),i7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d7=new X({}),c7=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),m7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),g7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),h7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),p7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_7=new X({}),u7=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),v7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),T7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),F7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),C7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M7=new X({}),E7=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),w7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),A7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),L7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),B7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x7=new X({}),k7=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),S7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),P7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),$7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),I7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),N7=new X({}),D7=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),q7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),G7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),O7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V7=new X({}),z7=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),Q7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16162/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),H7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),U7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Y7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K7=new X({}),Z7=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),o8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16162/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16162/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),r8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),t8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),a8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){K=a("meta"),io=l(),de=a("h1"),Ee=a("a"),lo=a("span"),f(me.$$.fragment),Ce=l(),Vo=a("span"),Ii=o("Auto Classes"),If=l(),fa=a("p"),Ni=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=a("code"),d5=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),c5=o("AutoConfig"),On=o(", "),Xn=a("a"),f5=o("AutoModel"),qi=o(`, and
`),Vn=a("a"),m5=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),Df=l(),f(qa.$$.fragment),fo=l(),_e=a("p"),r9=o("will create a model that is an instance of "),Oi=a("a"),t9=o("BertModel"),a9=o("."),zo=l(),Ga=a("p"),n9=o("There is one class of "),jf=a("code"),s9=o("AutoModel"),x$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),_ke=l(),Xi=a("h2"),qf=a("a"),WQ=a("span"),f(g5.$$.fragment),k$e=l(),QQ=a("span"),R$e=o("Extending the Auto Classes"),uke=l(),zn=a("p"),S$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),HQ=a("code"),P$e=o("NewModel"),$$e=o(", make sure you have a "),UQ=a("code"),I$e=o("NewModelConfig"),N$e=o(` then you can add those to the auto
classes like this:`),bke=l(),f(h5.$$.fragment),vke=l(),l9=a("p"),D$e=o("You will then be able to use the auto classes like you would usually do!"),Tke=l(),f(Gf.$$.fragment),Fke=l(),Vi=a("h2"),Of=a("a"),JQ=a("span"),f(p5.$$.fragment),j$e=l(),YQ=a("span"),q$e=o("AutoConfig"),Cke=l(),Wo=a("div"),f(_5.$$.fragment),G$e=l(),u5=a("p"),O$e=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),i9=a("a"),X$e=o("from_pretrained()"),V$e=o(" class method."),z$e=l(),b5=a("p"),W$e=o("This class cannot be instantiated directly using "),KQ=a("code"),Q$e=o("__init__()"),H$e=o(" (throws an error)."),U$e=l(),mo=a("div"),f(v5.$$.fragment),J$e=l(),ZQ=a("p"),Y$e=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),K$e=l(),zi=a("p"),Z$e=o("The configuration class to instantiate is selected based on the "),eH=a("code"),eIe=o("model_type"),oIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),oH=a("code"),rIe=o("pretrained_model_name_or_path"),tIe=o(":"),aIe=l(),v=a("ul"),Xf=a("li"),rH=a("strong"),nIe=o("albert"),sIe=o(" \u2014 "),d9=a("a"),lIe=o("AlbertConfig"),iIe=o(" (ALBERT model)"),dIe=l(),Vf=a("li"),tH=a("strong"),cIe=o("bart"),fIe=o(" \u2014 "),c9=a("a"),mIe=o("BartConfig"),gIe=o(" (BART model)"),hIe=l(),zf=a("li"),aH=a("strong"),pIe=o("beit"),_Ie=o(" \u2014 "),f9=a("a"),uIe=o("BeitConfig"),bIe=o(" (BEiT model)"),vIe=l(),Wf=a("li"),nH=a("strong"),TIe=o("bert"),FIe=o(" \u2014 "),m9=a("a"),CIe=o("BertConfig"),MIe=o(" (BERT model)"),EIe=l(),Qf=a("li"),sH=a("strong"),yIe=o("bert-generation"),wIe=o(" \u2014 "),g9=a("a"),AIe=o("BertGenerationConfig"),LIe=o(" (Bert Generation model)"),BIe=l(),Hf=a("li"),lH=a("strong"),xIe=o("big_bird"),kIe=o(" \u2014 "),h9=a("a"),RIe=o("BigBirdConfig"),SIe=o(" (BigBird model)"),PIe=l(),Uf=a("li"),iH=a("strong"),$Ie=o("bigbird_pegasus"),IIe=o(" \u2014 "),p9=a("a"),NIe=o("BigBirdPegasusConfig"),DIe=o(" (BigBirdPegasus model)"),jIe=l(),Jf=a("li"),dH=a("strong"),qIe=o("blenderbot"),GIe=o(" \u2014 "),_9=a("a"),OIe=o("BlenderbotConfig"),XIe=o(" (Blenderbot model)"),VIe=l(),Yf=a("li"),cH=a("strong"),zIe=o("blenderbot-small"),WIe=o(" \u2014 "),u9=a("a"),QIe=o("BlenderbotSmallConfig"),HIe=o(" (BlenderbotSmall model)"),UIe=l(),Kf=a("li"),fH=a("strong"),JIe=o("camembert"),YIe=o(" \u2014 "),b9=a("a"),KIe=o("CamembertConfig"),ZIe=o(" (CamemBERT model)"),eNe=l(),Zf=a("li"),mH=a("strong"),oNe=o("canine"),rNe=o(" \u2014 "),v9=a("a"),tNe=o("CanineConfig"),aNe=o(" (Canine model)"),nNe=l(),em=a("li"),gH=a("strong"),sNe=o("clip"),lNe=o(" \u2014 "),T9=a("a"),iNe=o("CLIPConfig"),dNe=o(" (CLIP model)"),cNe=l(),om=a("li"),hH=a("strong"),fNe=o("convbert"),mNe=o(" \u2014 "),F9=a("a"),gNe=o("ConvBertConfig"),hNe=o(" (ConvBERT model)"),pNe=l(),rm=a("li"),pH=a("strong"),_Ne=o("convnext"),uNe=o(" \u2014 "),C9=a("a"),bNe=o("ConvNextConfig"),vNe=o(" (ConvNext model)"),TNe=l(),tm=a("li"),_H=a("strong"),FNe=o("ctrl"),CNe=o(" \u2014 "),M9=a("a"),MNe=o("CTRLConfig"),ENe=o(" (CTRL model)"),yNe=l(),am=a("li"),uH=a("strong"),wNe=o("data2vec-audio"),ANe=o(" \u2014 "),E9=a("a"),LNe=o("Data2VecAudioConfig"),BNe=o(" (Data2VecAudio model)"),xNe=l(),nm=a("li"),bH=a("strong"),kNe=o("data2vec-text"),RNe=o(" \u2014 "),y9=a("a"),SNe=o("Data2VecTextConfig"),PNe=o(" (Data2VecText model)"),$Ne=l(),sm=a("li"),vH=a("strong"),INe=o("deberta"),NNe=o(" \u2014 "),w9=a("a"),DNe=o("DebertaConfig"),jNe=o(" (DeBERTa model)"),qNe=l(),lm=a("li"),TH=a("strong"),GNe=o("deberta-v2"),ONe=o(" \u2014 "),A9=a("a"),XNe=o("DebertaV2Config"),VNe=o(" (DeBERTa-v2 model)"),zNe=l(),im=a("li"),FH=a("strong"),WNe=o("decision_transformer"),QNe=o(" \u2014 "),L9=a("a"),HNe=o("DecisionTransformerConfig"),UNe=o(" (Decision Transformer model)"),JNe=l(),dm=a("li"),CH=a("strong"),YNe=o("deit"),KNe=o(" \u2014 "),B9=a("a"),ZNe=o("DeiTConfig"),eDe=o(" (DeiT model)"),oDe=l(),cm=a("li"),MH=a("strong"),rDe=o("detr"),tDe=o(" \u2014 "),x9=a("a"),aDe=o("DetrConfig"),nDe=o(" (DETR model)"),sDe=l(),fm=a("li"),EH=a("strong"),lDe=o("distilbert"),iDe=o(" \u2014 "),k9=a("a"),dDe=o("DistilBertConfig"),cDe=o(" (DistilBERT model)"),fDe=l(),mm=a("li"),yH=a("strong"),mDe=o("dpr"),gDe=o(" \u2014 "),R9=a("a"),hDe=o("DPRConfig"),pDe=o(" (DPR model)"),_De=l(),gm=a("li"),wH=a("strong"),uDe=o("electra"),bDe=o(" \u2014 "),S9=a("a"),vDe=o("ElectraConfig"),TDe=o(" (ELECTRA model)"),FDe=l(),hm=a("li"),AH=a("strong"),CDe=o("encoder-decoder"),MDe=o(" \u2014 "),P9=a("a"),EDe=o("EncoderDecoderConfig"),yDe=o(" (Encoder decoder model)"),wDe=l(),pm=a("li"),LH=a("strong"),ADe=o("flaubert"),LDe=o(" \u2014 "),$9=a("a"),BDe=o("FlaubertConfig"),xDe=o(" (FlauBERT model)"),kDe=l(),_m=a("li"),BH=a("strong"),RDe=o("fnet"),SDe=o(" \u2014 "),I9=a("a"),PDe=o("FNetConfig"),$De=o(" (FNet model)"),IDe=l(),um=a("li"),xH=a("strong"),NDe=o("fsmt"),DDe=o(" \u2014 "),N9=a("a"),jDe=o("FSMTConfig"),qDe=o(" (FairSeq Machine-Translation model)"),GDe=l(),bm=a("li"),kH=a("strong"),ODe=o("funnel"),XDe=o(" \u2014 "),D9=a("a"),VDe=o("FunnelConfig"),zDe=o(" (Funnel Transformer model)"),WDe=l(),vm=a("li"),RH=a("strong"),QDe=o("glpn"),HDe=o(" \u2014 "),j9=a("a"),UDe=o("GLPNConfig"),JDe=o(" (GLPN model)"),YDe=l(),Tm=a("li"),SH=a("strong"),KDe=o("gpt2"),ZDe=o(" \u2014 "),q9=a("a"),eje=o("GPT2Config"),oje=o(" (OpenAI GPT-2 model)"),rje=l(),Fm=a("li"),PH=a("strong"),tje=o("gpt_neo"),aje=o(" \u2014 "),G9=a("a"),nje=o("GPTNeoConfig"),sje=o(" (GPT Neo model)"),lje=l(),Cm=a("li"),$H=a("strong"),ije=o("gptj"),dje=o(" \u2014 "),O9=a("a"),cje=o("GPTJConfig"),fje=o(" (GPT-J model)"),mje=l(),Mm=a("li"),IH=a("strong"),gje=o("hubert"),hje=o(" \u2014 "),X9=a("a"),pje=o("HubertConfig"),_je=o(" (Hubert model)"),uje=l(),Em=a("li"),NH=a("strong"),bje=o("ibert"),vje=o(" \u2014 "),V9=a("a"),Tje=o("IBertConfig"),Fje=o(" (I-BERT model)"),Cje=l(),ym=a("li"),DH=a("strong"),Mje=o("imagegpt"),Eje=o(" \u2014 "),z9=a("a"),yje=o("ImageGPTConfig"),wje=o(" (ImageGPT model)"),Aje=l(),wm=a("li"),jH=a("strong"),Lje=o("layoutlm"),Bje=o(" \u2014 "),W9=a("a"),xje=o("LayoutLMConfig"),kje=o(" (LayoutLM model)"),Rje=l(),Am=a("li"),qH=a("strong"),Sje=o("layoutlmv2"),Pje=o(" \u2014 "),Q9=a("a"),$je=o("LayoutLMv2Config"),Ije=o(" (LayoutLMv2 model)"),Nje=l(),Lm=a("li"),GH=a("strong"),Dje=o("led"),jje=o(" \u2014 "),H9=a("a"),qje=o("LEDConfig"),Gje=o(" (LED model)"),Oje=l(),Bm=a("li"),OH=a("strong"),Xje=o("longformer"),Vje=o(" \u2014 "),U9=a("a"),zje=o("LongformerConfig"),Wje=o(" (Longformer model)"),Qje=l(),xm=a("li"),XH=a("strong"),Hje=o("luke"),Uje=o(" \u2014 "),J9=a("a"),Jje=o("LukeConfig"),Yje=o(" (LUKE model)"),Kje=l(),km=a("li"),VH=a("strong"),Zje=o("lxmert"),eqe=o(" \u2014 "),Y9=a("a"),oqe=o("LxmertConfig"),rqe=o(" (LXMERT model)"),tqe=l(),Rm=a("li"),zH=a("strong"),aqe=o("m2m_100"),nqe=o(" \u2014 "),K9=a("a"),sqe=o("M2M100Config"),lqe=o(" (M2M100 model)"),iqe=l(),Sm=a("li"),WH=a("strong"),dqe=o("marian"),cqe=o(" \u2014 "),Z9=a("a"),fqe=o("MarianConfig"),mqe=o(" (Marian model)"),gqe=l(),Pm=a("li"),QH=a("strong"),hqe=o("maskformer"),pqe=o(" \u2014 "),eB=a("a"),_qe=o("MaskFormerConfig"),uqe=o(" (MaskFormer model)"),bqe=l(),$m=a("li"),HH=a("strong"),vqe=o("mbart"),Tqe=o(" \u2014 "),oB=a("a"),Fqe=o("MBartConfig"),Cqe=o(" (mBART model)"),Mqe=l(),Im=a("li"),UH=a("strong"),Eqe=o("megatron-bert"),yqe=o(" \u2014 "),rB=a("a"),wqe=o("MegatronBertConfig"),Aqe=o(" (MegatronBert model)"),Lqe=l(),Nm=a("li"),JH=a("strong"),Bqe=o("mobilebert"),xqe=o(" \u2014 "),tB=a("a"),kqe=o("MobileBertConfig"),Rqe=o(" (MobileBERT model)"),Sqe=l(),Dm=a("li"),YH=a("strong"),Pqe=o("mpnet"),$qe=o(" \u2014 "),aB=a("a"),Iqe=o("MPNetConfig"),Nqe=o(" (MPNet model)"),Dqe=l(),jm=a("li"),KH=a("strong"),jqe=o("mt5"),qqe=o(" \u2014 "),nB=a("a"),Gqe=o("MT5Config"),Oqe=o(" (mT5 model)"),Xqe=l(),qm=a("li"),ZH=a("strong"),Vqe=o("nystromformer"),zqe=o(" \u2014 "),sB=a("a"),Wqe=o("NystromformerConfig"),Qqe=o(" (Nystromformer model)"),Hqe=l(),Gm=a("li"),eU=a("strong"),Uqe=o("openai-gpt"),Jqe=o(" \u2014 "),lB=a("a"),Yqe=o("OpenAIGPTConfig"),Kqe=o(" (OpenAI GPT model)"),Zqe=l(),Om=a("li"),oU=a("strong"),eGe=o("pegasus"),oGe=o(" \u2014 "),iB=a("a"),rGe=o("PegasusConfig"),tGe=o(" (Pegasus model)"),aGe=l(),Xm=a("li"),rU=a("strong"),nGe=o("perceiver"),sGe=o(" \u2014 "),dB=a("a"),lGe=o("PerceiverConfig"),iGe=o(" (Perceiver model)"),dGe=l(),Vm=a("li"),tU=a("strong"),cGe=o("plbart"),fGe=o(" \u2014 "),cB=a("a"),mGe=o("PLBartConfig"),gGe=o(" (PLBart model)"),hGe=l(),zm=a("li"),aU=a("strong"),pGe=o("poolformer"),_Ge=o(" \u2014 "),fB=a("a"),uGe=o("PoolFormerConfig"),bGe=o(" (PoolFormer model)"),vGe=l(),Wm=a("li"),nU=a("strong"),TGe=o("prophetnet"),FGe=o(" \u2014 "),mB=a("a"),CGe=o("ProphetNetConfig"),MGe=o(" (ProphetNet model)"),EGe=l(),Qm=a("li"),sU=a("strong"),yGe=o("qdqbert"),wGe=o(" \u2014 "),gB=a("a"),AGe=o("QDQBertConfig"),LGe=o(" (QDQBert model)"),BGe=l(),Hm=a("li"),lU=a("strong"),xGe=o("rag"),kGe=o(" \u2014 "),hB=a("a"),RGe=o("RagConfig"),SGe=o(" (RAG model)"),PGe=l(),Um=a("li"),iU=a("strong"),$Ge=o("realm"),IGe=o(" \u2014 "),pB=a("a"),NGe=o("RealmConfig"),DGe=o(" (Realm model)"),jGe=l(),Jm=a("li"),dU=a("strong"),qGe=o("reformer"),GGe=o(" \u2014 "),_B=a("a"),OGe=o("ReformerConfig"),XGe=o(" (Reformer model)"),VGe=l(),Ym=a("li"),cU=a("strong"),zGe=o("rembert"),WGe=o(" \u2014 "),uB=a("a"),QGe=o("RemBertConfig"),HGe=o(" (RemBERT model)"),UGe=l(),Km=a("li"),fU=a("strong"),JGe=o("resnet"),YGe=o(" \u2014 "),bB=a("a"),KGe=o("ResNetConfig"),ZGe=o(" (ResNet model)"),eOe=l(),Zm=a("li"),mU=a("strong"),oOe=o("resnetd"),rOe=o(" \u2014 "),vB=a("a"),tOe=o("ResNetDConfig"),aOe=o(" (ResNet-D model)"),nOe=l(),eg=a("li"),gU=a("strong"),sOe=o("retribert"),lOe=o(" \u2014 "),TB=a("a"),iOe=o("RetriBertConfig"),dOe=o(" (RetriBERT model)"),cOe=l(),og=a("li"),hU=a("strong"),fOe=o("roberta"),mOe=o(" \u2014 "),FB=a("a"),gOe=o("RobertaConfig"),hOe=o(" (RoBERTa model)"),pOe=l(),rg=a("li"),pU=a("strong"),_Oe=o("roformer"),uOe=o(" \u2014 "),CB=a("a"),bOe=o("RoFormerConfig"),vOe=o(" (RoFormer model)"),TOe=l(),tg=a("li"),_U=a("strong"),FOe=o("segformer"),COe=o(" \u2014 "),MB=a("a"),MOe=o("SegformerConfig"),EOe=o(" (SegFormer model)"),yOe=l(),ag=a("li"),uU=a("strong"),wOe=o("sew"),AOe=o(" \u2014 "),EB=a("a"),LOe=o("SEWConfig"),BOe=o(" (SEW model)"),xOe=l(),ng=a("li"),bU=a("strong"),kOe=o("sew-d"),ROe=o(" \u2014 "),yB=a("a"),SOe=o("SEWDConfig"),POe=o(" (SEW-D model)"),$Oe=l(),sg=a("li"),vU=a("strong"),IOe=o("speech-encoder-decoder"),NOe=o(" \u2014 "),wB=a("a"),DOe=o("SpeechEncoderDecoderConfig"),jOe=o(" (Speech Encoder decoder model)"),qOe=l(),lg=a("li"),TU=a("strong"),GOe=o("speech_to_text"),OOe=o(" \u2014 "),AB=a("a"),XOe=o("Speech2TextConfig"),VOe=o(" (Speech2Text model)"),zOe=l(),ig=a("li"),FU=a("strong"),WOe=o("speech_to_text_2"),QOe=o(" \u2014 "),LB=a("a"),HOe=o("Speech2Text2Config"),UOe=o(" (Speech2Text2 model)"),JOe=l(),dg=a("li"),CU=a("strong"),YOe=o("splinter"),KOe=o(" \u2014 "),BB=a("a"),ZOe=o("SplinterConfig"),eXe=o(" (Splinter model)"),oXe=l(),cg=a("li"),MU=a("strong"),rXe=o("squeezebert"),tXe=o(" \u2014 "),xB=a("a"),aXe=o("SqueezeBertConfig"),nXe=o(" (SqueezeBERT model)"),sXe=l(),fg=a("li"),EU=a("strong"),lXe=o("swin"),iXe=o(" \u2014 "),kB=a("a"),dXe=o("SwinConfig"),cXe=o(" (Swin model)"),fXe=l(),mg=a("li"),yU=a("strong"),mXe=o("t5"),gXe=o(" \u2014 "),RB=a("a"),hXe=o("T5Config"),pXe=o(" (T5 model)"),_Xe=l(),gg=a("li"),wU=a("strong"),uXe=o("tapas"),bXe=o(" \u2014 "),SB=a("a"),vXe=o("TapasConfig"),TXe=o(" (TAPAS model)"),FXe=l(),hg=a("li"),AU=a("strong"),CXe=o("transfo-xl"),MXe=o(" \u2014 "),PB=a("a"),EXe=o("TransfoXLConfig"),yXe=o(" (Transformer-XL model)"),wXe=l(),pg=a("li"),LU=a("strong"),AXe=o("trocr"),LXe=o(" \u2014 "),$B=a("a"),BXe=o("TrOCRConfig"),xXe=o(" (TrOCR model)"),kXe=l(),_g=a("li"),BU=a("strong"),RXe=o("unispeech"),SXe=o(" \u2014 "),IB=a("a"),PXe=o("UniSpeechConfig"),$Xe=o(" (UniSpeech model)"),IXe=l(),ug=a("li"),xU=a("strong"),NXe=o("unispeech-sat"),DXe=o(" \u2014 "),NB=a("a"),jXe=o("UniSpeechSatConfig"),qXe=o(" (UniSpeechSat model)"),GXe=l(),bg=a("li"),kU=a("strong"),OXe=o("van"),XXe=o(" \u2014 "),DB=a("a"),VXe=o("VanConfig"),zXe=o(" (VAN model)"),WXe=l(),vg=a("li"),RU=a("strong"),QXe=o("vilt"),HXe=o(" \u2014 "),jB=a("a"),UXe=o("ViltConfig"),JXe=o(" (ViLT model)"),YXe=l(),Tg=a("li"),SU=a("strong"),KXe=o("vision-encoder-decoder"),ZXe=o(" \u2014 "),qB=a("a"),eVe=o("VisionEncoderDecoderConfig"),oVe=o(" (Vision Encoder decoder model)"),rVe=l(),Fg=a("li"),PU=a("strong"),tVe=o("vision-text-dual-encoder"),aVe=o(" \u2014 "),GB=a("a"),nVe=o("VisionTextDualEncoderConfig"),sVe=o(" (VisionTextDualEncoder model)"),lVe=l(),Cg=a("li"),$U=a("strong"),iVe=o("visual_bert"),dVe=o(" \u2014 "),OB=a("a"),cVe=o("VisualBertConfig"),fVe=o(" (VisualBert model)"),mVe=l(),Mg=a("li"),IU=a("strong"),gVe=o("vit"),hVe=o(" \u2014 "),XB=a("a"),pVe=o("ViTConfig"),_Ve=o(" (ViT model)"),uVe=l(),Eg=a("li"),NU=a("strong"),bVe=o("vit_mae"),vVe=o(" \u2014 "),VB=a("a"),TVe=o("ViTMAEConfig"),FVe=o(" (ViTMAE model)"),CVe=l(),yg=a("li"),DU=a("strong"),MVe=o("wav2vec2"),EVe=o(" \u2014 "),zB=a("a"),yVe=o("Wav2Vec2Config"),wVe=o(" (Wav2Vec2 model)"),AVe=l(),wg=a("li"),jU=a("strong"),LVe=o("wavlm"),BVe=o(" \u2014 "),WB=a("a"),xVe=o("WavLMConfig"),kVe=o(" (WavLM model)"),RVe=l(),Ag=a("li"),qU=a("strong"),SVe=o("xglm"),PVe=o(" \u2014 "),QB=a("a"),$Ve=o("XGLMConfig"),IVe=o(" (XGLM model)"),NVe=l(),Lg=a("li"),GU=a("strong"),DVe=o("xlm"),jVe=o(" \u2014 "),HB=a("a"),qVe=o("XLMConfig"),GVe=o(" (XLM model)"),OVe=l(),Bg=a("li"),OU=a("strong"),XVe=o("xlm-prophetnet"),VVe=o(" \u2014 "),UB=a("a"),zVe=o("XLMProphetNetConfig"),WVe=o(" (XLMProphetNet model)"),QVe=l(),xg=a("li"),XU=a("strong"),HVe=o("xlm-roberta"),UVe=o(" \u2014 "),JB=a("a"),JVe=o("XLMRobertaConfig"),YVe=o(" (XLM-RoBERTa model)"),KVe=l(),kg=a("li"),VU=a("strong"),ZVe=o("xlm-roberta-xl"),eze=o(" \u2014 "),YB=a("a"),oze=o("XLMRobertaXLConfig"),rze=o(" (XLM-RoBERTa-XL model)"),tze=l(),Rg=a("li"),zU=a("strong"),aze=o("xlnet"),nze=o(" \u2014 "),KB=a("a"),sze=o("XLNetConfig"),lze=o(" (XLNet model)"),ize=l(),Sg=a("li"),WU=a("strong"),dze=o("yoso"),cze=o(" \u2014 "),ZB=a("a"),fze=o("YosoConfig"),mze=o(" (YOSO model)"),gze=l(),QU=a("p"),hze=o("Examples:"),pze=l(),f(T5.$$.fragment),_ze=l(),Pg=a("div"),f(F5.$$.fragment),uze=l(),HU=a("p"),bze=o("Register a new configuration for this class."),Mke=l(),Wi=a("h2"),$g=a("a"),UU=a("span"),f(C5.$$.fragment),vze=l(),JU=a("span"),Tze=o("AutoTokenizer"),Eke=l(),Qo=a("div"),f(M5.$$.fragment),Fze=l(),E5=a("p"),Cze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ex=a("a"),Mze=o("AutoTokenizer.from_pretrained()"),Eze=o(" class method."),yze=l(),y5=a("p"),wze=o("This class cannot be instantiated directly using "),YU=a("code"),Aze=o("__init__()"),Lze=o(" (throws an error)."),Bze=l(),go=a("div"),f(w5.$$.fragment),xze=l(),KU=a("p"),kze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Rze=l(),Oa=a("p"),Sze=o("The tokenizer class to instantiate is selected based on the "),ZU=a("code"),Pze=o("model_type"),$ze=o(` property of the config object (either
passed as an argument or loaded from `),eJ=a("code"),Ize=o("pretrained_model_name_or_path"),Nze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oJ=a("code"),Dze=o("pretrained_model_name_or_path"),jze=o(":"),qze=l(),E=a("ul"),Wn=a("li"),rJ=a("strong"),Gze=o("albert"),Oze=o(" \u2014 "),ox=a("a"),Xze=o("AlbertTokenizer"),Vze=o(" or "),rx=a("a"),zze=o("AlbertTokenizerFast"),Wze=o(" (ALBERT model)"),Qze=l(),Qn=a("li"),tJ=a("strong"),Hze=o("bart"),Uze=o(" \u2014 "),tx=a("a"),Jze=o("BartTokenizer"),Yze=o(" or "),ax=a("a"),Kze=o("BartTokenizerFast"),Zze=o(" (BART model)"),eWe=l(),Hn=a("li"),aJ=a("strong"),oWe=o("barthez"),rWe=o(" \u2014 "),nx=a("a"),tWe=o("BarthezTokenizer"),aWe=o(" or "),sx=a("a"),nWe=o("BarthezTokenizerFast"),sWe=o(" (BARThez model)"),lWe=l(),Ig=a("li"),nJ=a("strong"),iWe=o("bartpho"),dWe=o(" \u2014 "),lx=a("a"),cWe=o("BartphoTokenizer"),fWe=o(" (BARTpho model)"),mWe=l(),Un=a("li"),sJ=a("strong"),gWe=o("bert"),hWe=o(" \u2014 "),ix=a("a"),pWe=o("BertTokenizer"),_We=o(" or "),dx=a("a"),uWe=o("BertTokenizerFast"),bWe=o(" (BERT model)"),vWe=l(),Ng=a("li"),lJ=a("strong"),TWe=o("bert-generation"),FWe=o(" \u2014 "),cx=a("a"),CWe=o("BertGenerationTokenizer"),MWe=o(" (Bert Generation model)"),EWe=l(),Dg=a("li"),iJ=a("strong"),yWe=o("bert-japanese"),wWe=o(" \u2014 "),fx=a("a"),AWe=o("BertJapaneseTokenizer"),LWe=o(" (BertJapanese model)"),BWe=l(),jg=a("li"),dJ=a("strong"),xWe=o("bertweet"),kWe=o(" \u2014 "),mx=a("a"),RWe=o("BertweetTokenizer"),SWe=o(" (Bertweet model)"),PWe=l(),Jn=a("li"),cJ=a("strong"),$We=o("big_bird"),IWe=o(" \u2014 "),gx=a("a"),NWe=o("BigBirdTokenizer"),DWe=o(" or "),hx=a("a"),jWe=o("BigBirdTokenizerFast"),qWe=o(" (BigBird model)"),GWe=l(),Yn=a("li"),fJ=a("strong"),OWe=o("bigbird_pegasus"),XWe=o(" \u2014 "),px=a("a"),VWe=o("PegasusTokenizer"),zWe=o(" or "),_x=a("a"),WWe=o("PegasusTokenizerFast"),QWe=o(" (BigBirdPegasus model)"),HWe=l(),Kn=a("li"),mJ=a("strong"),UWe=o("blenderbot"),JWe=o(" \u2014 "),ux=a("a"),YWe=o("BlenderbotTokenizer"),KWe=o(" or "),bx=a("a"),ZWe=o("BlenderbotTokenizerFast"),eQe=o(" (Blenderbot model)"),oQe=l(),qg=a("li"),gJ=a("strong"),rQe=o("blenderbot-small"),tQe=o(" \u2014 "),vx=a("a"),aQe=o("BlenderbotSmallTokenizer"),nQe=o(" (BlenderbotSmall model)"),sQe=l(),Gg=a("li"),hJ=a("strong"),lQe=o("byt5"),iQe=o(" \u2014 "),Tx=a("a"),dQe=o("ByT5Tokenizer"),cQe=o(" (ByT5 model)"),fQe=l(),Zn=a("li"),pJ=a("strong"),mQe=o("camembert"),gQe=o(" \u2014 "),Fx=a("a"),hQe=o("CamembertTokenizer"),pQe=o(" or "),Cx=a("a"),_Qe=o("CamembertTokenizerFast"),uQe=o(" (CamemBERT model)"),bQe=l(),Og=a("li"),_J=a("strong"),vQe=o("canine"),TQe=o(" \u2014 "),Mx=a("a"),FQe=o("CanineTokenizer"),CQe=o(" (Canine model)"),MQe=l(),es=a("li"),uJ=a("strong"),EQe=o("clip"),yQe=o(" \u2014 "),Ex=a("a"),wQe=o("CLIPTokenizer"),AQe=o(" or "),yx=a("a"),LQe=o("CLIPTokenizerFast"),BQe=o(" (CLIP model)"),xQe=l(),os=a("li"),bJ=a("strong"),kQe=o("convbert"),RQe=o(" \u2014 "),wx=a("a"),SQe=o("ConvBertTokenizer"),PQe=o(" or "),Ax=a("a"),$Qe=o("ConvBertTokenizerFast"),IQe=o(" (ConvBERT model)"),NQe=l(),rs=a("li"),vJ=a("strong"),DQe=o("cpm"),jQe=o(" \u2014 "),Lx=a("a"),qQe=o("CpmTokenizer"),GQe=o(" or "),TJ=a("code"),OQe=o("CpmTokenizerFast"),XQe=o(" (CPM model)"),VQe=l(),Xg=a("li"),FJ=a("strong"),zQe=o("ctrl"),WQe=o(" \u2014 "),Bx=a("a"),QQe=o("CTRLTokenizer"),HQe=o(" (CTRL model)"),UQe=l(),ts=a("li"),CJ=a("strong"),JQe=o("deberta"),YQe=o(" \u2014 "),xx=a("a"),KQe=o("DebertaTokenizer"),ZQe=o(" or "),kx=a("a"),eHe=o("DebertaTokenizerFast"),oHe=o(" (DeBERTa model)"),rHe=l(),Vg=a("li"),MJ=a("strong"),tHe=o("deberta-v2"),aHe=o(" \u2014 "),Rx=a("a"),nHe=o("DebertaV2Tokenizer"),sHe=o(" (DeBERTa-v2 model)"),lHe=l(),as=a("li"),EJ=a("strong"),iHe=o("distilbert"),dHe=o(" \u2014 "),Sx=a("a"),cHe=o("DistilBertTokenizer"),fHe=o(" or "),Px=a("a"),mHe=o("DistilBertTokenizerFast"),gHe=o(" (DistilBERT model)"),hHe=l(),ns=a("li"),yJ=a("strong"),pHe=o("dpr"),_He=o(" \u2014 "),$x=a("a"),uHe=o("DPRQuestionEncoderTokenizer"),bHe=o(" or "),Ix=a("a"),vHe=o("DPRQuestionEncoderTokenizerFast"),THe=o(" (DPR model)"),FHe=l(),ss=a("li"),wJ=a("strong"),CHe=o("electra"),MHe=o(" \u2014 "),Nx=a("a"),EHe=o("ElectraTokenizer"),yHe=o(" or "),Dx=a("a"),wHe=o("ElectraTokenizerFast"),AHe=o(" (ELECTRA model)"),LHe=l(),zg=a("li"),AJ=a("strong"),BHe=o("flaubert"),xHe=o(" \u2014 "),jx=a("a"),kHe=o("FlaubertTokenizer"),RHe=o(" (FlauBERT model)"),SHe=l(),ls=a("li"),LJ=a("strong"),PHe=o("fnet"),$He=o(" \u2014 "),qx=a("a"),IHe=o("FNetTokenizer"),NHe=o(" or "),Gx=a("a"),DHe=o("FNetTokenizerFast"),jHe=o(" (FNet model)"),qHe=l(),Wg=a("li"),BJ=a("strong"),GHe=o("fsmt"),OHe=o(" \u2014 "),Ox=a("a"),XHe=o("FSMTTokenizer"),VHe=o(" (FairSeq Machine-Translation model)"),zHe=l(),is=a("li"),xJ=a("strong"),WHe=o("funnel"),QHe=o(" \u2014 "),Xx=a("a"),HHe=o("FunnelTokenizer"),UHe=o(" or "),Vx=a("a"),JHe=o("FunnelTokenizerFast"),YHe=o(" (Funnel Transformer model)"),KHe=l(),ds=a("li"),kJ=a("strong"),ZHe=o("gpt2"),eUe=o(" \u2014 "),zx=a("a"),oUe=o("GPT2Tokenizer"),rUe=o(" or "),Wx=a("a"),tUe=o("GPT2TokenizerFast"),aUe=o(" (OpenAI GPT-2 model)"),nUe=l(),cs=a("li"),RJ=a("strong"),sUe=o("gpt_neo"),lUe=o(" \u2014 "),Qx=a("a"),iUe=o("GPT2Tokenizer"),dUe=o(" or "),Hx=a("a"),cUe=o("GPT2TokenizerFast"),fUe=o(" (GPT Neo model)"),mUe=l(),fs=a("li"),SJ=a("strong"),gUe=o("herbert"),hUe=o(" \u2014 "),Ux=a("a"),pUe=o("HerbertTokenizer"),_Ue=o(" or "),Jx=a("a"),uUe=o("HerbertTokenizerFast"),bUe=o(" (HerBERT model)"),vUe=l(),Qg=a("li"),PJ=a("strong"),TUe=o("hubert"),FUe=o(" \u2014 "),Yx=a("a"),CUe=o("Wav2Vec2CTCTokenizer"),MUe=o(" (Hubert model)"),EUe=l(),ms=a("li"),$J=a("strong"),yUe=o("ibert"),wUe=o(" \u2014 "),Kx=a("a"),AUe=o("RobertaTokenizer"),LUe=o(" or "),Zx=a("a"),BUe=o("RobertaTokenizerFast"),xUe=o(" (I-BERT model)"),kUe=l(),gs=a("li"),IJ=a("strong"),RUe=o("layoutlm"),SUe=o(" \u2014 "),ek=a("a"),PUe=o("LayoutLMTokenizer"),$Ue=o(" or "),ok=a("a"),IUe=o("LayoutLMTokenizerFast"),NUe=o(" (LayoutLM model)"),DUe=l(),hs=a("li"),NJ=a("strong"),jUe=o("layoutlmv2"),qUe=o(" \u2014 "),rk=a("a"),GUe=o("LayoutLMv2Tokenizer"),OUe=o(" or "),tk=a("a"),XUe=o("LayoutLMv2TokenizerFast"),VUe=o(" (LayoutLMv2 model)"),zUe=l(),ps=a("li"),DJ=a("strong"),WUe=o("layoutxlm"),QUe=o(" \u2014 "),ak=a("a"),HUe=o("LayoutXLMTokenizer"),UUe=o(" or "),nk=a("a"),JUe=o("LayoutXLMTokenizerFast"),YUe=o(" (LayoutXLM model)"),KUe=l(),_s=a("li"),jJ=a("strong"),ZUe=o("led"),eJe=o(" \u2014 "),sk=a("a"),oJe=o("LEDTokenizer"),rJe=o(" or "),lk=a("a"),tJe=o("LEDTokenizerFast"),aJe=o(" (LED model)"),nJe=l(),us=a("li"),qJ=a("strong"),sJe=o("longformer"),lJe=o(" \u2014 "),ik=a("a"),iJe=o("LongformerTokenizer"),dJe=o(" or "),dk=a("a"),cJe=o("LongformerTokenizerFast"),fJe=o(" (Longformer model)"),mJe=l(),Hg=a("li"),GJ=a("strong"),gJe=o("luke"),hJe=o(" \u2014 "),ck=a("a"),pJe=o("LukeTokenizer"),_Je=o(" (LUKE model)"),uJe=l(),bs=a("li"),OJ=a("strong"),bJe=o("lxmert"),vJe=o(" \u2014 "),fk=a("a"),TJe=o("LxmertTokenizer"),FJe=o(" or "),mk=a("a"),CJe=o("LxmertTokenizerFast"),MJe=o(" (LXMERT model)"),EJe=l(),Ug=a("li"),XJ=a("strong"),yJe=o("m2m_100"),wJe=o(" \u2014 "),gk=a("a"),AJe=o("M2M100Tokenizer"),LJe=o(" (M2M100 model)"),BJe=l(),Jg=a("li"),VJ=a("strong"),xJe=o("marian"),kJe=o(" \u2014 "),hk=a("a"),RJe=o("MarianTokenizer"),SJe=o(" (Marian model)"),PJe=l(),vs=a("li"),zJ=a("strong"),$Je=o("mbart"),IJe=o(" \u2014 "),pk=a("a"),NJe=o("MBartTokenizer"),DJe=o(" or "),_k=a("a"),jJe=o("MBartTokenizerFast"),qJe=o(" (mBART model)"),GJe=l(),Ts=a("li"),WJ=a("strong"),OJe=o("mbart50"),XJe=o(" \u2014 "),uk=a("a"),VJe=o("MBart50Tokenizer"),zJe=o(" or "),bk=a("a"),WJe=o("MBart50TokenizerFast"),QJe=o(" (mBART-50 model)"),HJe=l(),Yg=a("li"),QJ=a("strong"),UJe=o("mluke"),JJe=o(" \u2014 "),vk=a("a"),YJe=o("MLukeTokenizer"),KJe=o(" (mLUKE model)"),ZJe=l(),Fs=a("li"),HJ=a("strong"),eYe=o("mobilebert"),oYe=o(" \u2014 "),Tk=a("a"),rYe=o("MobileBertTokenizer"),tYe=o(" or "),Fk=a("a"),aYe=o("MobileBertTokenizerFast"),nYe=o(" (MobileBERT model)"),sYe=l(),Cs=a("li"),UJ=a("strong"),lYe=o("mpnet"),iYe=o(" \u2014 "),Ck=a("a"),dYe=o("MPNetTokenizer"),cYe=o(" or "),Mk=a("a"),fYe=o("MPNetTokenizerFast"),mYe=o(" (MPNet model)"),gYe=l(),Ms=a("li"),JJ=a("strong"),hYe=o("mt5"),pYe=o(" \u2014 "),Ek=a("a"),_Ye=o("MT5Tokenizer"),uYe=o(" or "),yk=a("a"),bYe=o("MT5TokenizerFast"),vYe=o(" (mT5 model)"),TYe=l(),Es=a("li"),YJ=a("strong"),FYe=o("openai-gpt"),CYe=o(" \u2014 "),wk=a("a"),MYe=o("OpenAIGPTTokenizer"),EYe=o(" or "),Ak=a("a"),yYe=o("OpenAIGPTTokenizerFast"),wYe=o(" (OpenAI GPT model)"),AYe=l(),ys=a("li"),KJ=a("strong"),LYe=o("pegasus"),BYe=o(" \u2014 "),Lk=a("a"),xYe=o("PegasusTokenizer"),kYe=o(" or "),Bk=a("a"),RYe=o("PegasusTokenizerFast"),SYe=o(" (Pegasus model)"),PYe=l(),Kg=a("li"),ZJ=a("strong"),$Ye=o("perceiver"),IYe=o(" \u2014 "),xk=a("a"),NYe=o("PerceiverTokenizer"),DYe=o(" (Perceiver model)"),jYe=l(),Zg=a("li"),eY=a("strong"),qYe=o("phobert"),GYe=o(" \u2014 "),kk=a("a"),OYe=o("PhobertTokenizer"),XYe=o(" (PhoBERT model)"),VYe=l(),eh=a("li"),oY=a("strong"),zYe=o("plbart"),WYe=o(" \u2014 "),Rk=a("a"),QYe=o("PLBartTokenizer"),HYe=o(" (PLBart model)"),UYe=l(),oh=a("li"),rY=a("strong"),JYe=o("prophetnet"),YYe=o(" \u2014 "),Sk=a("a"),KYe=o("ProphetNetTokenizer"),ZYe=o(" (ProphetNet model)"),eKe=l(),ws=a("li"),tY=a("strong"),oKe=o("qdqbert"),rKe=o(" \u2014 "),Pk=a("a"),tKe=o("BertTokenizer"),aKe=o(" or "),$k=a("a"),nKe=o("BertTokenizerFast"),sKe=o(" (QDQBert model)"),lKe=l(),rh=a("li"),aY=a("strong"),iKe=o("rag"),dKe=o(" \u2014 "),Ik=a("a"),cKe=o("RagTokenizer"),fKe=o(" (RAG model)"),mKe=l(),As=a("li"),nY=a("strong"),gKe=o("realm"),hKe=o(" \u2014 "),Nk=a("a"),pKe=o("RealmTokenizer"),_Ke=o(" or "),Dk=a("a"),uKe=o("RealmTokenizerFast"),bKe=o(" (Realm model)"),vKe=l(),Ls=a("li"),sY=a("strong"),TKe=o("reformer"),FKe=o(" \u2014 "),jk=a("a"),CKe=o("ReformerTokenizer"),MKe=o(" or "),qk=a("a"),EKe=o("ReformerTokenizerFast"),yKe=o(" (Reformer model)"),wKe=l(),Bs=a("li"),lY=a("strong"),AKe=o("rembert"),LKe=o(" \u2014 "),Gk=a("a"),BKe=o("RemBertTokenizer"),xKe=o(" or "),Ok=a("a"),kKe=o("RemBertTokenizerFast"),RKe=o(" (RemBERT model)"),SKe=l(),xs=a("li"),iY=a("strong"),PKe=o("retribert"),$Ke=o(" \u2014 "),Xk=a("a"),IKe=o("RetriBertTokenizer"),NKe=o(" or "),Vk=a("a"),DKe=o("RetriBertTokenizerFast"),jKe=o(" (RetriBERT model)"),qKe=l(),ks=a("li"),dY=a("strong"),GKe=o("roberta"),OKe=o(" \u2014 "),zk=a("a"),XKe=o("RobertaTokenizer"),VKe=o(" or "),Wk=a("a"),zKe=o("RobertaTokenizerFast"),WKe=o(" (RoBERTa model)"),QKe=l(),Rs=a("li"),cY=a("strong"),HKe=o("roformer"),UKe=o(" \u2014 "),Qk=a("a"),JKe=o("RoFormerTokenizer"),YKe=o(" or "),Hk=a("a"),KKe=o("RoFormerTokenizerFast"),ZKe=o(" (RoFormer model)"),eZe=l(),th=a("li"),fY=a("strong"),oZe=o("speech_to_text"),rZe=o(" \u2014 "),Uk=a("a"),tZe=o("Speech2TextTokenizer"),aZe=o(" (Speech2Text model)"),nZe=l(),ah=a("li"),mY=a("strong"),sZe=o("speech_to_text_2"),lZe=o(" \u2014 "),Jk=a("a"),iZe=o("Speech2Text2Tokenizer"),dZe=o(" (Speech2Text2 model)"),cZe=l(),Ss=a("li"),gY=a("strong"),fZe=o("splinter"),mZe=o(" \u2014 "),Yk=a("a"),gZe=o("SplinterTokenizer"),hZe=o(" or "),Kk=a("a"),pZe=o("SplinterTokenizerFast"),_Ze=o(" (Splinter model)"),uZe=l(),Ps=a("li"),hY=a("strong"),bZe=o("squeezebert"),vZe=o(" \u2014 "),Zk=a("a"),TZe=o("SqueezeBertTokenizer"),FZe=o(" or "),eR=a("a"),CZe=o("SqueezeBertTokenizerFast"),MZe=o(" (SqueezeBERT model)"),EZe=l(),$s=a("li"),pY=a("strong"),yZe=o("t5"),wZe=o(" \u2014 "),oR=a("a"),AZe=o("T5Tokenizer"),LZe=o(" or "),rR=a("a"),BZe=o("T5TokenizerFast"),xZe=o(" (T5 model)"),kZe=l(),nh=a("li"),_Y=a("strong"),RZe=o("tapas"),SZe=o(" \u2014 "),tR=a("a"),PZe=o("TapasTokenizer"),$Ze=o(" (TAPAS model)"),IZe=l(),sh=a("li"),uY=a("strong"),NZe=o("transfo-xl"),DZe=o(" \u2014 "),aR=a("a"),jZe=o("TransfoXLTokenizer"),qZe=o(" (Transformer-XL model)"),GZe=l(),lh=a("li"),bY=a("strong"),OZe=o("wav2vec2"),XZe=o(" \u2014 "),nR=a("a"),VZe=o("Wav2Vec2CTCTokenizer"),zZe=o(" (Wav2Vec2 model)"),WZe=l(),ih=a("li"),vY=a("strong"),QZe=o("wav2vec2_phoneme"),HZe=o(" \u2014 "),sR=a("a"),UZe=o("Wav2Vec2PhonemeCTCTokenizer"),JZe=o(" (Wav2Vec2Phoneme model)"),YZe=l(),Is=a("li"),TY=a("strong"),KZe=o("xglm"),ZZe=o(" \u2014 "),lR=a("a"),eeo=o("XGLMTokenizer"),oeo=o(" or "),iR=a("a"),reo=o("XGLMTokenizerFast"),teo=o(" (XGLM model)"),aeo=l(),dh=a("li"),FY=a("strong"),neo=o("xlm"),seo=o(" \u2014 "),dR=a("a"),leo=o("XLMTokenizer"),ieo=o(" (XLM model)"),deo=l(),ch=a("li"),CY=a("strong"),ceo=o("xlm-prophetnet"),feo=o(" \u2014 "),cR=a("a"),meo=o("XLMProphetNetTokenizer"),geo=o(" (XLMProphetNet model)"),heo=l(),Ns=a("li"),MY=a("strong"),peo=o("xlm-roberta"),_eo=o(" \u2014 "),fR=a("a"),ueo=o("XLMRobertaTokenizer"),beo=o(" or "),mR=a("a"),veo=o("XLMRobertaTokenizerFast"),Teo=o(" (XLM-RoBERTa model)"),Feo=l(),Ds=a("li"),EY=a("strong"),Ceo=o("xlnet"),Meo=o(" \u2014 "),gR=a("a"),Eeo=o("XLNetTokenizer"),yeo=o(" or "),hR=a("a"),weo=o("XLNetTokenizerFast"),Aeo=o(" (XLNet model)"),Leo=l(),yY=a("p"),Beo=o("Examples:"),xeo=l(),f(A5.$$.fragment),keo=l(),fh=a("div"),f(L5.$$.fragment),Reo=l(),wY=a("p"),Seo=o("Register a new tokenizer in this mapping."),yke=l(),Qi=a("h2"),mh=a("a"),AY=a("span"),f(B5.$$.fragment),Peo=l(),LY=a("span"),$eo=o("AutoFeatureExtractor"),wke=l(),Ho=a("div"),f(x5.$$.fragment),Ieo=l(),k5=a("p"),Neo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),pR=a("a"),Deo=o("AutoFeatureExtractor.from_pretrained()"),jeo=o(" class method."),qeo=l(),R5=a("p"),Geo=o("This class cannot be instantiated directly using "),BY=a("code"),Oeo=o("__init__()"),Xeo=o(" (throws an error)."),Veo=l(),$e=a("div"),f(S5.$$.fragment),zeo=l(),xY=a("p"),Weo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Qeo=l(),Xa=a("p"),Heo=o("The feature extractor class to instantiate is selected based on the "),kY=a("code"),Ueo=o("model_type"),Jeo=o(` property of the config object
(either passed as an argument or loaded from `),RY=a("code"),Yeo=o("pretrained_model_name_or_path"),Keo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),SY=a("code"),Zeo=o("pretrained_model_name_or_path"),eoo=o(":"),ooo=l(),Z=a("ul"),gh=a("li"),PY=a("strong"),roo=o("beit"),too=o(" \u2014 "),_R=a("a"),aoo=o("BeitFeatureExtractor"),noo=o(" (BEiT model)"),soo=l(),hh=a("li"),$Y=a("strong"),loo=o("clip"),ioo=o(" \u2014 "),uR=a("a"),doo=o("CLIPFeatureExtractor"),coo=o(" (CLIP model)"),foo=l(),ph=a("li"),IY=a("strong"),moo=o("convnext"),goo=o(" \u2014 "),bR=a("a"),hoo=o("ConvNextFeatureExtractor"),poo=o(" (ConvNext model)"),_oo=l(),_h=a("li"),NY=a("strong"),uoo=o("deit"),boo=o(" \u2014 "),vR=a("a"),voo=o("DeiTFeatureExtractor"),Too=o(" (DeiT model)"),Foo=l(),uh=a("li"),DY=a("strong"),Coo=o("detr"),Moo=o(" \u2014 "),TR=a("a"),Eoo=o("DetrFeatureExtractor"),yoo=o(" (DETR model)"),woo=l(),bh=a("li"),jY=a("strong"),Aoo=o("hubert"),Loo=o(" \u2014 "),FR=a("a"),Boo=o("Wav2Vec2FeatureExtractor"),xoo=o(" (Hubert model)"),koo=l(),vh=a("li"),qY=a("strong"),Roo=o("layoutlmv2"),Soo=o(" \u2014 "),CR=a("a"),Poo=o("LayoutLMv2FeatureExtractor"),$oo=o(" (LayoutLMv2 model)"),Ioo=l(),Th=a("li"),GY=a("strong"),Noo=o("maskformer"),Doo=o(" \u2014 "),MR=a("a"),joo=o("MaskFormerFeatureExtractor"),qoo=o(" (MaskFormer model)"),Goo=l(),Fh=a("li"),OY=a("strong"),Ooo=o("perceiver"),Xoo=o(" \u2014 "),ER=a("a"),Voo=o("PerceiverFeatureExtractor"),zoo=o(" (Perceiver model)"),Woo=l(),Ch=a("li"),XY=a("strong"),Qoo=o("poolformer"),Hoo=o(" \u2014 "),yR=a("a"),Uoo=o("PoolFormerFeatureExtractor"),Joo=o(" (PoolFormer model)"),Yoo=l(),Mh=a("li"),VY=a("strong"),Koo=o("resnet"),Zoo=o(" \u2014 "),wR=a("a"),ero=o("ConvNextFeatureExtractor"),oro=o(" (ResNet model)"),rro=l(),Eh=a("li"),zY=a("strong"),tro=o("resnetd"),aro=o(" \u2014 "),AR=a("a"),nro=o("ConvNextFeatureExtractor"),sro=o(" (ResNet-D model)"),lro=l(),yh=a("li"),WY=a("strong"),iro=o("segformer"),dro=o(" \u2014 "),LR=a("a"),cro=o("SegformerFeatureExtractor"),fro=o(" (SegFormer model)"),mro=l(),wh=a("li"),QY=a("strong"),gro=o("speech_to_text"),hro=o(" \u2014 "),BR=a("a"),pro=o("Speech2TextFeatureExtractor"),_ro=o(" (Speech2Text model)"),uro=l(),Ah=a("li"),HY=a("strong"),bro=o("swin"),vro=o(" \u2014 "),xR=a("a"),Tro=o("ViTFeatureExtractor"),Fro=o(" (Swin model)"),Cro=l(),Lh=a("li"),UY=a("strong"),Mro=o("van"),Ero=o(" \u2014 "),kR=a("a"),yro=o("ConvNextFeatureExtractor"),wro=o(" (VAN model)"),Aro=l(),Bh=a("li"),JY=a("strong"),Lro=o("vit"),Bro=o(" \u2014 "),RR=a("a"),xro=o("ViTFeatureExtractor"),kro=o(" (ViT model)"),Rro=l(),xh=a("li"),YY=a("strong"),Sro=o("vit_mae"),Pro=o(" \u2014 "),SR=a("a"),$ro=o("ViTFeatureExtractor"),Iro=o(" (ViTMAE model)"),Nro=l(),kh=a("li"),KY=a("strong"),Dro=o("wav2vec2"),jro=o(" \u2014 "),PR=a("a"),qro=o("Wav2Vec2FeatureExtractor"),Gro=o(" (Wav2Vec2 model)"),Oro=l(),f(Rh.$$.fragment),Xro=l(),ZY=a("p"),Vro=o("Examples:"),zro=l(),f(P5.$$.fragment),Wro=l(),Sh=a("div"),f($5.$$.fragment),Qro=l(),eK=a("p"),Hro=o("Register a new feature extractor for this class."),Ake=l(),Hi=a("h2"),Ph=a("a"),oK=a("span"),f(I5.$$.fragment),Uro=l(),rK=a("span"),Jro=o("AutoProcessor"),Lke=l(),Uo=a("div"),f(N5.$$.fragment),Yro=l(),D5=a("p"),Kro=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$R=a("a"),Zro=o("AutoProcessor.from_pretrained()"),eto=o(" class method."),oto=l(),j5=a("p"),rto=o("This class cannot be instantiated directly using "),tK=a("code"),tto=o("__init__()"),ato=o(" (throws an error)."),nto=l(),Ie=a("div"),f(q5.$$.fragment),sto=l(),aK=a("p"),lto=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ito=l(),Ui=a("p"),dto=o("The processor class to instantiate is selected based on the "),nK=a("code"),cto=o("model_type"),fto=o(` property of the config object (either
passed as an argument or loaded from `),sK=a("code"),mto=o("pretrained_model_name_or_path"),gto=o(" if possible):"),hto=l(),xe=a("ul"),$h=a("li"),lK=a("strong"),pto=o("clip"),_to=o(" \u2014 "),IR=a("a"),uto=o("CLIPProcessor"),bto=o(" (CLIP model)"),vto=l(),Ih=a("li"),iK=a("strong"),Tto=o("layoutlmv2"),Fto=o(" \u2014 "),NR=a("a"),Cto=o("LayoutLMv2Processor"),Mto=o(" (LayoutLMv2 model)"),Eto=l(),Nh=a("li"),dK=a("strong"),yto=o("layoutxlm"),wto=o(" \u2014 "),DR=a("a"),Ato=o("LayoutXLMProcessor"),Lto=o(" (LayoutXLM model)"),Bto=l(),Dh=a("li"),cK=a("strong"),xto=o("speech_to_text"),kto=o(" \u2014 "),jR=a("a"),Rto=o("Speech2TextProcessor"),Sto=o(" (Speech2Text model)"),Pto=l(),jh=a("li"),fK=a("strong"),$to=o("speech_to_text_2"),Ito=o(" \u2014 "),qR=a("a"),Nto=o("Speech2Text2Processor"),Dto=o(" (Speech2Text2 model)"),jto=l(),qh=a("li"),mK=a("strong"),qto=o("trocr"),Gto=o(" \u2014 "),GR=a("a"),Oto=o("TrOCRProcessor"),Xto=o(" (TrOCR model)"),Vto=l(),Gh=a("li"),gK=a("strong"),zto=o("vision-text-dual-encoder"),Wto=o(" \u2014 "),OR=a("a"),Qto=o("VisionTextDualEncoderProcessor"),Hto=o(" (VisionTextDualEncoder model)"),Uto=l(),Oh=a("li"),hK=a("strong"),Jto=o("wav2vec2"),Yto=o(" \u2014 "),XR=a("a"),Kto=o("Wav2Vec2Processor"),Zto=o(" (Wav2Vec2 model)"),eao=l(),f(Xh.$$.fragment),oao=l(),pK=a("p"),rao=o("Examples:"),tao=l(),f(G5.$$.fragment),aao=l(),Vh=a("div"),f(O5.$$.fragment),nao=l(),_K=a("p"),sao=o("Register a new processor for this class."),Bke=l(),Ji=a("h2"),zh=a("a"),uK=a("span"),f(X5.$$.fragment),lao=l(),bK=a("span"),iao=o("AutoModel"),xke=l(),Jo=a("div"),f(V5.$$.fragment),dao=l(),Yi=a("p"),cao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vK=a("code"),fao=o("from_pretrained()"),mao=o("class method or the "),TK=a("code"),gao=o("from_config()"),hao=o(`class
method.`),pao=l(),z5=a("p"),_ao=o("This class cannot be instantiated directly using "),FK=a("code"),uao=o("__init__()"),bao=o(" (throws an error)."),vao=l(),Vr=a("div"),f(W5.$$.fragment),Tao=l(),CK=a("p"),Fao=o("Instantiates one of the base model classes of the library from a configuration."),Cao=l(),Ki=a("p"),Mao=o(`Note:
Loading a model from its configuration file does `),MK=a("strong"),Eao=o("not"),yao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=a("code"),wao=o("from_pretrained()"),Aao=o("to load the model weights."),Lao=l(),yK=a("p"),Bao=o("Examples:"),xao=l(),f(Q5.$$.fragment),kao=l(),Ne=a("div"),f(H5.$$.fragment),Rao=l(),wK=a("p"),Sao=o("Instantiate one of the base model classes of the library from a pretrained model."),Pao=l(),Va=a("p"),$ao=o("The model class to instantiate is selected based on the "),AK=a("code"),Iao=o("model_type"),Nao=o(` property of the config object (either
passed as an argument or loaded from `),LK=a("code"),Dao=o("pretrained_model_name_or_path"),jao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BK=a("code"),qao=o("pretrained_model_name_or_path"),Gao=o(":"),Oao=l(),F=a("ul"),Wh=a("li"),xK=a("strong"),Xao=o("albert"),Vao=o(" \u2014 "),VR=a("a"),zao=o("AlbertModel"),Wao=o(" (ALBERT model)"),Qao=l(),Qh=a("li"),kK=a("strong"),Hao=o("bart"),Uao=o(" \u2014 "),zR=a("a"),Jao=o("BartModel"),Yao=o(" (BART model)"),Kao=l(),Hh=a("li"),RK=a("strong"),Zao=o("beit"),eno=o(" \u2014 "),WR=a("a"),ono=o("BeitModel"),rno=o(" (BEiT model)"),tno=l(),Uh=a("li"),SK=a("strong"),ano=o("bert"),nno=o(" \u2014 "),QR=a("a"),sno=o("BertModel"),lno=o(" (BERT model)"),ino=l(),Jh=a("li"),PK=a("strong"),dno=o("bert-generation"),cno=o(" \u2014 "),HR=a("a"),fno=o("BertGenerationEncoder"),mno=o(" (Bert Generation model)"),gno=l(),Yh=a("li"),$K=a("strong"),hno=o("big_bird"),pno=o(" \u2014 "),UR=a("a"),_no=o("BigBirdModel"),uno=o(" (BigBird model)"),bno=l(),Kh=a("li"),IK=a("strong"),vno=o("bigbird_pegasus"),Tno=o(" \u2014 "),JR=a("a"),Fno=o("BigBirdPegasusModel"),Cno=o(" (BigBirdPegasus model)"),Mno=l(),Zh=a("li"),NK=a("strong"),Eno=o("blenderbot"),yno=o(" \u2014 "),YR=a("a"),wno=o("BlenderbotModel"),Ano=o(" (Blenderbot model)"),Lno=l(),ep=a("li"),DK=a("strong"),Bno=o("blenderbot-small"),xno=o(" \u2014 "),KR=a("a"),kno=o("BlenderbotSmallModel"),Rno=o(" (BlenderbotSmall model)"),Sno=l(),op=a("li"),jK=a("strong"),Pno=o("camembert"),$no=o(" \u2014 "),ZR=a("a"),Ino=o("CamembertModel"),Nno=o(" (CamemBERT model)"),Dno=l(),rp=a("li"),qK=a("strong"),jno=o("canine"),qno=o(" \u2014 "),eS=a("a"),Gno=o("CanineModel"),Ono=o(" (Canine model)"),Xno=l(),tp=a("li"),GK=a("strong"),Vno=o("clip"),zno=o(" \u2014 "),oS=a("a"),Wno=o("CLIPModel"),Qno=o(" (CLIP model)"),Hno=l(),ap=a("li"),OK=a("strong"),Uno=o("convbert"),Jno=o(" \u2014 "),rS=a("a"),Yno=o("ConvBertModel"),Kno=o(" (ConvBERT model)"),Zno=l(),np=a("li"),XK=a("strong"),eso=o("convnext"),oso=o(" \u2014 "),tS=a("a"),rso=o("ConvNextModel"),tso=o(" (ConvNext model)"),aso=l(),sp=a("li"),VK=a("strong"),nso=o("ctrl"),sso=o(" \u2014 "),aS=a("a"),lso=o("CTRLModel"),iso=o(" (CTRL model)"),dso=l(),lp=a("li"),zK=a("strong"),cso=o("data2vec-audio"),fso=o(" \u2014 "),nS=a("a"),mso=o("Data2VecAudioModel"),gso=o(" (Data2VecAudio model)"),hso=l(),ip=a("li"),WK=a("strong"),pso=o("data2vec-text"),_so=o(" \u2014 "),sS=a("a"),uso=o("Data2VecTextModel"),bso=o(" (Data2VecText model)"),vso=l(),dp=a("li"),QK=a("strong"),Tso=o("deberta"),Fso=o(" \u2014 "),lS=a("a"),Cso=o("DebertaModel"),Mso=o(" (DeBERTa model)"),Eso=l(),cp=a("li"),HK=a("strong"),yso=o("deberta-v2"),wso=o(" \u2014 "),iS=a("a"),Aso=o("DebertaV2Model"),Lso=o(" (DeBERTa-v2 model)"),Bso=l(),fp=a("li"),UK=a("strong"),xso=o("decision_transformer"),kso=o(" \u2014 "),dS=a("a"),Rso=o("DecisionTransformerModel"),Sso=o(" (Decision Transformer model)"),Pso=l(),mp=a("li"),JK=a("strong"),$so=o("deit"),Iso=o(" \u2014 "),cS=a("a"),Nso=o("DeiTModel"),Dso=o(" (DeiT model)"),jso=l(),gp=a("li"),YK=a("strong"),qso=o("detr"),Gso=o(" \u2014 "),fS=a("a"),Oso=o("DetrModel"),Xso=o(" (DETR model)"),Vso=l(),hp=a("li"),KK=a("strong"),zso=o("distilbert"),Wso=o(" \u2014 "),mS=a("a"),Qso=o("DistilBertModel"),Hso=o(" (DistilBERT model)"),Uso=l(),pp=a("li"),ZK=a("strong"),Jso=o("dpr"),Yso=o(" \u2014 "),gS=a("a"),Kso=o("DPRQuestionEncoder"),Zso=o(" (DPR model)"),elo=l(),_p=a("li"),eZ=a("strong"),olo=o("electra"),rlo=o(" \u2014 "),hS=a("a"),tlo=o("ElectraModel"),alo=o(" (ELECTRA model)"),nlo=l(),up=a("li"),oZ=a("strong"),slo=o("flaubert"),llo=o(" \u2014 "),pS=a("a"),ilo=o("FlaubertModel"),dlo=o(" (FlauBERT model)"),clo=l(),bp=a("li"),rZ=a("strong"),flo=o("fnet"),mlo=o(" \u2014 "),_S=a("a"),glo=o("FNetModel"),hlo=o(" (FNet model)"),plo=l(),vp=a("li"),tZ=a("strong"),_lo=o("fsmt"),ulo=o(" \u2014 "),uS=a("a"),blo=o("FSMTModel"),vlo=o(" (FairSeq Machine-Translation model)"),Tlo=l(),js=a("li"),aZ=a("strong"),Flo=o("funnel"),Clo=o(" \u2014 "),bS=a("a"),Mlo=o("FunnelModel"),Elo=o(" or "),vS=a("a"),ylo=o("FunnelBaseModel"),wlo=o(" (Funnel Transformer model)"),Alo=l(),Tp=a("li"),nZ=a("strong"),Llo=o("glpn"),Blo=o(" \u2014 "),TS=a("a"),xlo=o("GLPNModel"),klo=o(" (GLPN model)"),Rlo=l(),Fp=a("li"),sZ=a("strong"),Slo=o("gpt2"),Plo=o(" \u2014 "),FS=a("a"),$lo=o("GPT2Model"),Ilo=o(" (OpenAI GPT-2 model)"),Nlo=l(),Cp=a("li"),lZ=a("strong"),Dlo=o("gpt_neo"),jlo=o(" \u2014 "),CS=a("a"),qlo=o("GPTNeoModel"),Glo=o(" (GPT Neo model)"),Olo=l(),Mp=a("li"),iZ=a("strong"),Xlo=o("gptj"),Vlo=o(" \u2014 "),MS=a("a"),zlo=o("GPTJModel"),Wlo=o(" (GPT-J model)"),Qlo=l(),Ep=a("li"),dZ=a("strong"),Hlo=o("hubert"),Ulo=o(" \u2014 "),ES=a("a"),Jlo=o("HubertModel"),Ylo=o(" (Hubert model)"),Klo=l(),yp=a("li"),cZ=a("strong"),Zlo=o("ibert"),eio=o(" \u2014 "),yS=a("a"),oio=o("IBertModel"),rio=o(" (I-BERT model)"),tio=l(),wp=a("li"),fZ=a("strong"),aio=o("imagegpt"),nio=o(" \u2014 "),wS=a("a"),sio=o("ImageGPTModel"),lio=o(" (ImageGPT model)"),iio=l(),Ap=a("li"),mZ=a("strong"),dio=o("layoutlm"),cio=o(" \u2014 "),AS=a("a"),fio=o("LayoutLMModel"),mio=o(" (LayoutLM model)"),gio=l(),Lp=a("li"),gZ=a("strong"),hio=o("layoutlmv2"),pio=o(" \u2014 "),LS=a("a"),_io=o("LayoutLMv2Model"),uio=o(" (LayoutLMv2 model)"),bio=l(),Bp=a("li"),hZ=a("strong"),vio=o("led"),Tio=o(" \u2014 "),BS=a("a"),Fio=o("LEDModel"),Cio=o(" (LED model)"),Mio=l(),xp=a("li"),pZ=a("strong"),Eio=o("longformer"),yio=o(" \u2014 "),xS=a("a"),wio=o("LongformerModel"),Aio=o(" (Longformer model)"),Lio=l(),kp=a("li"),_Z=a("strong"),Bio=o("luke"),xio=o(" \u2014 "),kS=a("a"),kio=o("LukeModel"),Rio=o(" (LUKE model)"),Sio=l(),Rp=a("li"),uZ=a("strong"),Pio=o("lxmert"),$io=o(" \u2014 "),RS=a("a"),Iio=o("LxmertModel"),Nio=o(" (LXMERT model)"),Dio=l(),Sp=a("li"),bZ=a("strong"),jio=o("m2m_100"),qio=o(" \u2014 "),SS=a("a"),Gio=o("M2M100Model"),Oio=o(" (M2M100 model)"),Xio=l(),Pp=a("li"),vZ=a("strong"),Vio=o("marian"),zio=o(" \u2014 "),PS=a("a"),Wio=o("MarianModel"),Qio=o(" (Marian model)"),Hio=l(),$p=a("li"),TZ=a("strong"),Uio=o("maskformer"),Jio=o(" \u2014 "),$S=a("a"),Yio=o("MaskFormerModel"),Kio=o(" (MaskFormer model)"),Zio=l(),Ip=a("li"),FZ=a("strong"),edo=o("mbart"),odo=o(" \u2014 "),IS=a("a"),rdo=o("MBartModel"),tdo=o(" (mBART model)"),ado=l(),Np=a("li"),CZ=a("strong"),ndo=o("megatron-bert"),sdo=o(" \u2014 "),NS=a("a"),ldo=o("MegatronBertModel"),ido=o(" (MegatronBert model)"),ddo=l(),Dp=a("li"),MZ=a("strong"),cdo=o("mobilebert"),fdo=o(" \u2014 "),DS=a("a"),mdo=o("MobileBertModel"),gdo=o(" (MobileBERT model)"),hdo=l(),jp=a("li"),EZ=a("strong"),pdo=o("mpnet"),_do=o(" \u2014 "),jS=a("a"),udo=o("MPNetModel"),bdo=o(" (MPNet model)"),vdo=l(),qp=a("li"),yZ=a("strong"),Tdo=o("mt5"),Fdo=o(" \u2014 "),qS=a("a"),Cdo=o("MT5Model"),Mdo=o(" (mT5 model)"),Edo=l(),Gp=a("li"),wZ=a("strong"),ydo=o("nystromformer"),wdo=o(" \u2014 "),GS=a("a"),Ado=o("NystromformerModel"),Ldo=o(" (Nystromformer model)"),Bdo=l(),Op=a("li"),AZ=a("strong"),xdo=o("openai-gpt"),kdo=o(" \u2014 "),OS=a("a"),Rdo=o("OpenAIGPTModel"),Sdo=o(" (OpenAI GPT model)"),Pdo=l(),Xp=a("li"),LZ=a("strong"),$do=o("pegasus"),Ido=o(" \u2014 "),XS=a("a"),Ndo=o("PegasusModel"),Ddo=o(" (Pegasus model)"),jdo=l(),Vp=a("li"),BZ=a("strong"),qdo=o("perceiver"),Gdo=o(" \u2014 "),VS=a("a"),Odo=o("PerceiverModel"),Xdo=o(" (Perceiver model)"),Vdo=l(),zp=a("li"),xZ=a("strong"),zdo=o("plbart"),Wdo=o(" \u2014 "),zS=a("a"),Qdo=o("PLBartModel"),Hdo=o(" (PLBart model)"),Udo=l(),Wp=a("li"),kZ=a("strong"),Jdo=o("poolformer"),Ydo=o(" \u2014 "),WS=a("a"),Kdo=o("PoolFormerModel"),Zdo=o(" (PoolFormer model)"),eco=l(),Qp=a("li"),RZ=a("strong"),oco=o("prophetnet"),rco=o(" \u2014 "),QS=a("a"),tco=o("ProphetNetModel"),aco=o(" (ProphetNet model)"),nco=l(),Hp=a("li"),SZ=a("strong"),sco=o("qdqbert"),lco=o(" \u2014 "),HS=a("a"),ico=o("QDQBertModel"),dco=o(" (QDQBert model)"),cco=l(),Up=a("li"),PZ=a("strong"),fco=o("reformer"),mco=o(" \u2014 "),US=a("a"),gco=o("ReformerModel"),hco=o(" (Reformer model)"),pco=l(),Jp=a("li"),$Z=a("strong"),_co=o("rembert"),uco=o(" \u2014 "),JS=a("a"),bco=o("RemBertModel"),vco=o(" (RemBERT model)"),Tco=l(),Yp=a("li"),IZ=a("strong"),Fco=o("resnet"),Cco=o(" \u2014 "),YS=a("a"),Mco=o("ResNetModel"),Eco=o(" (ResNet model)"),yco=l(),Kp=a("li"),NZ=a("strong"),wco=o("resnetd"),Aco=o(" \u2014 "),KS=a("a"),Lco=o("ResNetDModel"),Bco=o(" (ResNet-D model)"),xco=l(),Zp=a("li"),DZ=a("strong"),kco=o("retribert"),Rco=o(" \u2014 "),ZS=a("a"),Sco=o("RetriBertModel"),Pco=o(" (RetriBERT model)"),$co=l(),e_=a("li"),jZ=a("strong"),Ico=o("roberta"),Nco=o(" \u2014 "),eP=a("a"),Dco=o("RobertaModel"),jco=o(" (RoBERTa model)"),qco=l(),o_=a("li"),qZ=a("strong"),Gco=o("roformer"),Oco=o(" \u2014 "),oP=a("a"),Xco=o("RoFormerModel"),Vco=o(" (RoFormer model)"),zco=l(),r_=a("li"),GZ=a("strong"),Wco=o("segformer"),Qco=o(" \u2014 "),rP=a("a"),Hco=o("SegformerModel"),Uco=o(" (SegFormer model)"),Jco=l(),t_=a("li"),OZ=a("strong"),Yco=o("sew"),Kco=o(" \u2014 "),tP=a("a"),Zco=o("SEWModel"),efo=o(" (SEW model)"),ofo=l(),a_=a("li"),XZ=a("strong"),rfo=o("sew-d"),tfo=o(" \u2014 "),aP=a("a"),afo=o("SEWDModel"),nfo=o(" (SEW-D model)"),sfo=l(),n_=a("li"),VZ=a("strong"),lfo=o("speech_to_text"),ifo=o(" \u2014 "),nP=a("a"),dfo=o("Speech2TextModel"),cfo=o(" (Speech2Text model)"),ffo=l(),s_=a("li"),zZ=a("strong"),mfo=o("splinter"),gfo=o(" \u2014 "),sP=a("a"),hfo=o("SplinterModel"),pfo=o(" (Splinter model)"),_fo=l(),l_=a("li"),WZ=a("strong"),ufo=o("squeezebert"),bfo=o(" \u2014 "),lP=a("a"),vfo=o("SqueezeBertModel"),Tfo=o(" (SqueezeBERT model)"),Ffo=l(),i_=a("li"),QZ=a("strong"),Cfo=o("swin"),Mfo=o(" \u2014 "),iP=a("a"),Efo=o("SwinModel"),yfo=o(" (Swin model)"),wfo=l(),d_=a("li"),HZ=a("strong"),Afo=o("t5"),Lfo=o(" \u2014 "),dP=a("a"),Bfo=o("T5Model"),xfo=o(" (T5 model)"),kfo=l(),c_=a("li"),UZ=a("strong"),Rfo=o("tapas"),Sfo=o(" \u2014 "),cP=a("a"),Pfo=o("TapasModel"),$fo=o(" (TAPAS model)"),Ifo=l(),f_=a("li"),JZ=a("strong"),Nfo=o("transfo-xl"),Dfo=o(" \u2014 "),fP=a("a"),jfo=o("TransfoXLModel"),qfo=o(" (Transformer-XL model)"),Gfo=l(),m_=a("li"),YZ=a("strong"),Ofo=o("unispeech"),Xfo=o(" \u2014 "),mP=a("a"),Vfo=o("UniSpeechModel"),zfo=o(" (UniSpeech model)"),Wfo=l(),g_=a("li"),KZ=a("strong"),Qfo=o("unispeech-sat"),Hfo=o(" \u2014 "),gP=a("a"),Ufo=o("UniSpeechSatModel"),Jfo=o(" (UniSpeechSat model)"),Yfo=l(),h_=a("li"),ZZ=a("strong"),Kfo=o("van"),Zfo=o(" \u2014 "),hP=a("a"),emo=o("VanModel"),omo=o(" (VAN model)"),rmo=l(),p_=a("li"),eee=a("strong"),tmo=o("vilt"),amo=o(" \u2014 "),pP=a("a"),nmo=o("ViltModel"),smo=o(" (ViLT model)"),lmo=l(),__=a("li"),oee=a("strong"),imo=o("vision-text-dual-encoder"),dmo=o(" \u2014 "),_P=a("a"),cmo=o("VisionTextDualEncoderModel"),fmo=o(" (VisionTextDualEncoder model)"),mmo=l(),u_=a("li"),ree=a("strong"),gmo=o("visual_bert"),hmo=o(" \u2014 "),uP=a("a"),pmo=o("VisualBertModel"),_mo=o(" (VisualBert model)"),umo=l(),b_=a("li"),tee=a("strong"),bmo=o("vit"),vmo=o(" \u2014 "),bP=a("a"),Tmo=o("ViTModel"),Fmo=o(" (ViT model)"),Cmo=l(),v_=a("li"),aee=a("strong"),Mmo=o("vit_mae"),Emo=o(" \u2014 "),vP=a("a"),ymo=o("ViTMAEModel"),wmo=o(" (ViTMAE model)"),Amo=l(),T_=a("li"),nee=a("strong"),Lmo=o("wav2vec2"),Bmo=o(" \u2014 "),TP=a("a"),xmo=o("Wav2Vec2Model"),kmo=o(" (Wav2Vec2 model)"),Rmo=l(),F_=a("li"),see=a("strong"),Smo=o("wavlm"),Pmo=o(" \u2014 "),FP=a("a"),$mo=o("WavLMModel"),Imo=o(" (WavLM model)"),Nmo=l(),C_=a("li"),lee=a("strong"),Dmo=o("xglm"),jmo=o(" \u2014 "),CP=a("a"),qmo=o("XGLMModel"),Gmo=o(" (XGLM model)"),Omo=l(),M_=a("li"),iee=a("strong"),Xmo=o("xlm"),Vmo=o(" \u2014 "),MP=a("a"),zmo=o("XLMModel"),Wmo=o(" (XLM model)"),Qmo=l(),E_=a("li"),dee=a("strong"),Hmo=o("xlm-prophetnet"),Umo=o(" \u2014 "),EP=a("a"),Jmo=o("XLMProphetNetModel"),Ymo=o(" (XLMProphetNet model)"),Kmo=l(),y_=a("li"),cee=a("strong"),Zmo=o("xlm-roberta"),ego=o(" \u2014 "),yP=a("a"),ogo=o("XLMRobertaModel"),rgo=o(" (XLM-RoBERTa model)"),tgo=l(),w_=a("li"),fee=a("strong"),ago=o("xlm-roberta-xl"),ngo=o(" \u2014 "),wP=a("a"),sgo=o("XLMRobertaXLModel"),lgo=o(" (XLM-RoBERTa-XL model)"),igo=l(),A_=a("li"),mee=a("strong"),dgo=o("xlnet"),cgo=o(" \u2014 "),AP=a("a"),fgo=o("XLNetModel"),mgo=o(" (XLNet model)"),ggo=l(),L_=a("li"),gee=a("strong"),hgo=o("yoso"),pgo=o(" \u2014 "),LP=a("a"),_go=o("YosoModel"),ugo=o(" (YOSO model)"),bgo=l(),B_=a("p"),vgo=o("The model is set in evaluation mode by default using "),hee=a("code"),Tgo=o("model.eval()"),Fgo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pee=a("code"),Cgo=o("model.train()"),Mgo=l(),_ee=a("p"),Ego=o("Examples:"),ygo=l(),f(U5.$$.fragment),kke=l(),Zi=a("h2"),x_=a("a"),uee=a("span"),f(J5.$$.fragment),wgo=l(),bee=a("span"),Ago=o("AutoModelForPreTraining"),Rke=l(),Yo=a("div"),f(Y5.$$.fragment),Lgo=l(),ed=a("p"),Bgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vee=a("code"),xgo=o("from_pretrained()"),kgo=o("class method or the "),Tee=a("code"),Rgo=o("from_config()"),Sgo=o(`class
method.`),Pgo=l(),K5=a("p"),$go=o("This class cannot be instantiated directly using "),Fee=a("code"),Igo=o("__init__()"),Ngo=o(" (throws an error)."),Dgo=l(),zr=a("div"),f(Z5.$$.fragment),jgo=l(),Cee=a("p"),qgo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ggo=l(),od=a("p"),Ogo=o(`Note:
Loading a model from its configuration file does `),Mee=a("strong"),Xgo=o("not"),Vgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eee=a("code"),zgo=o("from_pretrained()"),Wgo=o("to load the model weights."),Qgo=l(),yee=a("p"),Hgo=o("Examples:"),Ugo=l(),f(ey.$$.fragment),Jgo=l(),De=a("div"),f(oy.$$.fragment),Ygo=l(),wee=a("p"),Kgo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Zgo=l(),za=a("p"),eho=o("The model class to instantiate is selected based on the "),Aee=a("code"),oho=o("model_type"),rho=o(` property of the config object (either
passed as an argument or loaded from `),Lee=a("code"),tho=o("pretrained_model_name_or_path"),aho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bee=a("code"),nho=o("pretrained_model_name_or_path"),sho=o(":"),lho=l(),k=a("ul"),k_=a("li"),xee=a("strong"),iho=o("albert"),dho=o(" \u2014 "),BP=a("a"),cho=o("AlbertForPreTraining"),fho=o(" (ALBERT model)"),mho=l(),R_=a("li"),kee=a("strong"),gho=o("bart"),hho=o(" \u2014 "),xP=a("a"),pho=o("BartForConditionalGeneration"),_ho=o(" (BART model)"),uho=l(),S_=a("li"),Ree=a("strong"),bho=o("bert"),vho=o(" \u2014 "),kP=a("a"),Tho=o("BertForPreTraining"),Fho=o(" (BERT model)"),Cho=l(),P_=a("li"),See=a("strong"),Mho=o("big_bird"),Eho=o(" \u2014 "),RP=a("a"),yho=o("BigBirdForPreTraining"),who=o(" (BigBird model)"),Aho=l(),$_=a("li"),Pee=a("strong"),Lho=o("camembert"),Bho=o(" \u2014 "),SP=a("a"),xho=o("CamembertForMaskedLM"),kho=o(" (CamemBERT model)"),Rho=l(),I_=a("li"),$ee=a("strong"),Sho=o("ctrl"),Pho=o(" \u2014 "),PP=a("a"),$ho=o("CTRLLMHeadModel"),Iho=o(" (CTRL model)"),Nho=l(),N_=a("li"),Iee=a("strong"),Dho=o("data2vec-text"),jho=o(" \u2014 "),$P=a("a"),qho=o("Data2VecTextForMaskedLM"),Gho=o(" (Data2VecText model)"),Oho=l(),D_=a("li"),Nee=a("strong"),Xho=o("deberta"),Vho=o(" \u2014 "),IP=a("a"),zho=o("DebertaForMaskedLM"),Who=o(" (DeBERTa model)"),Qho=l(),j_=a("li"),Dee=a("strong"),Hho=o("deberta-v2"),Uho=o(" \u2014 "),NP=a("a"),Jho=o("DebertaV2ForMaskedLM"),Yho=o(" (DeBERTa-v2 model)"),Kho=l(),q_=a("li"),jee=a("strong"),Zho=o("distilbert"),epo=o(" \u2014 "),DP=a("a"),opo=o("DistilBertForMaskedLM"),rpo=o(" (DistilBERT model)"),tpo=l(),G_=a("li"),qee=a("strong"),apo=o("electra"),npo=o(" \u2014 "),jP=a("a"),spo=o("ElectraForPreTraining"),lpo=o(" (ELECTRA model)"),ipo=l(),O_=a("li"),Gee=a("strong"),dpo=o("flaubert"),cpo=o(" \u2014 "),qP=a("a"),fpo=o("FlaubertWithLMHeadModel"),mpo=o(" (FlauBERT model)"),gpo=l(),X_=a("li"),Oee=a("strong"),hpo=o("fnet"),ppo=o(" \u2014 "),GP=a("a"),_po=o("FNetForPreTraining"),upo=o(" (FNet model)"),bpo=l(),V_=a("li"),Xee=a("strong"),vpo=o("fsmt"),Tpo=o(" \u2014 "),OP=a("a"),Fpo=o("FSMTForConditionalGeneration"),Cpo=o(" (FairSeq Machine-Translation model)"),Mpo=l(),z_=a("li"),Vee=a("strong"),Epo=o("funnel"),ypo=o(" \u2014 "),XP=a("a"),wpo=o("FunnelForPreTraining"),Apo=o(" (Funnel Transformer model)"),Lpo=l(),W_=a("li"),zee=a("strong"),Bpo=o("gpt2"),xpo=o(" \u2014 "),VP=a("a"),kpo=o("GPT2LMHeadModel"),Rpo=o(" (OpenAI GPT-2 model)"),Spo=l(),Q_=a("li"),Wee=a("strong"),Ppo=o("ibert"),$po=o(" \u2014 "),zP=a("a"),Ipo=o("IBertForMaskedLM"),Npo=o(" (I-BERT model)"),Dpo=l(),H_=a("li"),Qee=a("strong"),jpo=o("layoutlm"),qpo=o(" \u2014 "),WP=a("a"),Gpo=o("LayoutLMForMaskedLM"),Opo=o(" (LayoutLM model)"),Xpo=l(),U_=a("li"),Hee=a("strong"),Vpo=o("longformer"),zpo=o(" \u2014 "),QP=a("a"),Wpo=o("LongformerForMaskedLM"),Qpo=o(" (Longformer model)"),Hpo=l(),J_=a("li"),Uee=a("strong"),Upo=o("lxmert"),Jpo=o(" \u2014 "),HP=a("a"),Ypo=o("LxmertForPreTraining"),Kpo=o(" (LXMERT model)"),Zpo=l(),Y_=a("li"),Jee=a("strong"),e_o=o("megatron-bert"),o_o=o(" \u2014 "),UP=a("a"),r_o=o("MegatronBertForPreTraining"),t_o=o(" (MegatronBert model)"),a_o=l(),K_=a("li"),Yee=a("strong"),n_o=o("mobilebert"),s_o=o(" \u2014 "),JP=a("a"),l_o=o("MobileBertForPreTraining"),i_o=o(" (MobileBERT model)"),d_o=l(),Z_=a("li"),Kee=a("strong"),c_o=o("mpnet"),f_o=o(" \u2014 "),YP=a("a"),m_o=o("MPNetForMaskedLM"),g_o=o(" (MPNet model)"),h_o=l(),eu=a("li"),Zee=a("strong"),p_o=o("openai-gpt"),__o=o(" \u2014 "),KP=a("a"),u_o=o("OpenAIGPTLMHeadModel"),b_o=o(" (OpenAI GPT model)"),v_o=l(),ou=a("li"),eoe=a("strong"),T_o=o("retribert"),F_o=o(" \u2014 "),ZP=a("a"),C_o=o("RetriBertModel"),M_o=o(" (RetriBERT model)"),E_o=l(),ru=a("li"),ooe=a("strong"),y_o=o("roberta"),w_o=o(" \u2014 "),e$=a("a"),A_o=o("RobertaForMaskedLM"),L_o=o(" (RoBERTa model)"),B_o=l(),tu=a("li"),roe=a("strong"),x_o=o("squeezebert"),k_o=o(" \u2014 "),o$=a("a"),R_o=o("SqueezeBertForMaskedLM"),S_o=o(" (SqueezeBERT model)"),P_o=l(),au=a("li"),toe=a("strong"),$_o=o("t5"),I_o=o(" \u2014 "),r$=a("a"),N_o=o("T5ForConditionalGeneration"),D_o=o(" (T5 model)"),j_o=l(),nu=a("li"),aoe=a("strong"),q_o=o("tapas"),G_o=o(" \u2014 "),t$=a("a"),O_o=o("TapasForMaskedLM"),X_o=o(" (TAPAS model)"),V_o=l(),su=a("li"),noe=a("strong"),z_o=o("transfo-xl"),W_o=o(" \u2014 "),a$=a("a"),Q_o=o("TransfoXLLMHeadModel"),H_o=o(" (Transformer-XL model)"),U_o=l(),lu=a("li"),soe=a("strong"),J_o=o("unispeech"),Y_o=o(" \u2014 "),n$=a("a"),K_o=o("UniSpeechForPreTraining"),Z_o=o(" (UniSpeech model)"),euo=l(),iu=a("li"),loe=a("strong"),ouo=o("unispeech-sat"),ruo=o(" \u2014 "),s$=a("a"),tuo=o("UniSpeechSatForPreTraining"),auo=o(" (UniSpeechSat model)"),nuo=l(),du=a("li"),ioe=a("strong"),suo=o("visual_bert"),luo=o(" \u2014 "),l$=a("a"),iuo=o("VisualBertForPreTraining"),duo=o(" (VisualBert model)"),cuo=l(),cu=a("li"),doe=a("strong"),fuo=o("vit_mae"),muo=o(" \u2014 "),i$=a("a"),guo=o("ViTMAEForPreTraining"),huo=o(" (ViTMAE model)"),puo=l(),fu=a("li"),coe=a("strong"),_uo=o("wav2vec2"),uuo=o(" \u2014 "),d$=a("a"),buo=o("Wav2Vec2ForPreTraining"),vuo=o(" (Wav2Vec2 model)"),Tuo=l(),mu=a("li"),foe=a("strong"),Fuo=o("xlm"),Cuo=o(" \u2014 "),c$=a("a"),Muo=o("XLMWithLMHeadModel"),Euo=o(" (XLM model)"),yuo=l(),gu=a("li"),moe=a("strong"),wuo=o("xlm-roberta"),Auo=o(" \u2014 "),f$=a("a"),Luo=o("XLMRobertaForMaskedLM"),Buo=o(" (XLM-RoBERTa model)"),xuo=l(),hu=a("li"),goe=a("strong"),kuo=o("xlm-roberta-xl"),Ruo=o(" \u2014 "),m$=a("a"),Suo=o("XLMRobertaXLForMaskedLM"),Puo=o(" (XLM-RoBERTa-XL model)"),$uo=l(),pu=a("li"),hoe=a("strong"),Iuo=o("xlnet"),Nuo=o(" \u2014 "),g$=a("a"),Duo=o("XLNetLMHeadModel"),juo=o(" (XLNet model)"),quo=l(),_u=a("p"),Guo=o("The model is set in evaluation mode by default using "),poe=a("code"),Ouo=o("model.eval()"),Xuo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_oe=a("code"),Vuo=o("model.train()"),zuo=l(),uoe=a("p"),Wuo=o("Examples:"),Quo=l(),f(ry.$$.fragment),Ske=l(),rd=a("h2"),uu=a("a"),boe=a("span"),f(ty.$$.fragment),Huo=l(),voe=a("span"),Uuo=o("AutoModelForCausalLM"),Pke=l(),Ko=a("div"),f(ay.$$.fragment),Juo=l(),td=a("p"),Yuo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Toe=a("code"),Kuo=o("from_pretrained()"),Zuo=o("class method or the "),Foe=a("code"),e1o=o("from_config()"),o1o=o(`class
method.`),r1o=l(),ny=a("p"),t1o=o("This class cannot be instantiated directly using "),Coe=a("code"),a1o=o("__init__()"),n1o=o(" (throws an error)."),s1o=l(),Wr=a("div"),f(sy.$$.fragment),l1o=l(),Moe=a("p"),i1o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),d1o=l(),ad=a("p"),c1o=o(`Note:
Loading a model from its configuration file does `),Eoe=a("strong"),f1o=o("not"),m1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yoe=a("code"),g1o=o("from_pretrained()"),h1o=o("to load the model weights."),p1o=l(),woe=a("p"),_1o=o("Examples:"),u1o=l(),f(ly.$$.fragment),b1o=l(),je=a("div"),f(iy.$$.fragment),v1o=l(),Aoe=a("p"),T1o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),F1o=l(),Wa=a("p"),C1o=o("The model class to instantiate is selected based on the "),Loe=a("code"),M1o=o("model_type"),E1o=o(` property of the config object (either
passed as an argument or loaded from `),Boe=a("code"),y1o=o("pretrained_model_name_or_path"),w1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xoe=a("code"),A1o=o("pretrained_model_name_or_path"),L1o=o(":"),B1o=l(),$=a("ul"),bu=a("li"),koe=a("strong"),x1o=o("bart"),k1o=o(" \u2014 "),h$=a("a"),R1o=o("BartForCausalLM"),S1o=o(" (BART model)"),P1o=l(),vu=a("li"),Roe=a("strong"),$1o=o("bert"),I1o=o(" \u2014 "),p$=a("a"),N1o=o("BertLMHeadModel"),D1o=o(" (BERT model)"),j1o=l(),Tu=a("li"),Soe=a("strong"),q1o=o("bert-generation"),G1o=o(" \u2014 "),_$=a("a"),O1o=o("BertGenerationDecoder"),X1o=o(" (Bert Generation model)"),V1o=l(),Fu=a("li"),Poe=a("strong"),z1o=o("big_bird"),W1o=o(" \u2014 "),u$=a("a"),Q1o=o("BigBirdForCausalLM"),H1o=o(" (BigBird model)"),U1o=l(),Cu=a("li"),$oe=a("strong"),J1o=o("bigbird_pegasus"),Y1o=o(" \u2014 "),b$=a("a"),K1o=o("BigBirdPegasusForCausalLM"),Z1o=o(" (BigBirdPegasus model)"),e2o=l(),Mu=a("li"),Ioe=a("strong"),o2o=o("blenderbot"),r2o=o(" \u2014 "),v$=a("a"),t2o=o("BlenderbotForCausalLM"),a2o=o(" (Blenderbot model)"),n2o=l(),Eu=a("li"),Noe=a("strong"),s2o=o("blenderbot-small"),l2o=o(" \u2014 "),T$=a("a"),i2o=o("BlenderbotSmallForCausalLM"),d2o=o(" (BlenderbotSmall model)"),c2o=l(),yu=a("li"),Doe=a("strong"),f2o=o("camembert"),m2o=o(" \u2014 "),F$=a("a"),g2o=o("CamembertForCausalLM"),h2o=o(" (CamemBERT model)"),p2o=l(),wu=a("li"),joe=a("strong"),_2o=o("ctrl"),u2o=o(" \u2014 "),C$=a("a"),b2o=o("CTRLLMHeadModel"),v2o=o(" (CTRL model)"),T2o=l(),Au=a("li"),qoe=a("strong"),F2o=o("data2vec-text"),C2o=o(" \u2014 "),M$=a("a"),M2o=o("Data2VecTextForCausalLM"),E2o=o(" (Data2VecText model)"),y2o=l(),Lu=a("li"),Goe=a("strong"),w2o=o("electra"),A2o=o(" \u2014 "),E$=a("a"),L2o=o("ElectraForCausalLM"),B2o=o(" (ELECTRA model)"),x2o=l(),Bu=a("li"),Ooe=a("strong"),k2o=o("gpt2"),R2o=o(" \u2014 "),y$=a("a"),S2o=o("GPT2LMHeadModel"),P2o=o(" (OpenAI GPT-2 model)"),$2o=l(),xu=a("li"),Xoe=a("strong"),I2o=o("gpt_neo"),N2o=o(" \u2014 "),w$=a("a"),D2o=o("GPTNeoForCausalLM"),j2o=o(" (GPT Neo model)"),q2o=l(),ku=a("li"),Voe=a("strong"),G2o=o("gptj"),O2o=o(" \u2014 "),A$=a("a"),X2o=o("GPTJForCausalLM"),V2o=o(" (GPT-J model)"),z2o=l(),Ru=a("li"),zoe=a("strong"),W2o=o("marian"),Q2o=o(" \u2014 "),L$=a("a"),H2o=o("MarianForCausalLM"),U2o=o(" (Marian model)"),J2o=l(),Su=a("li"),Woe=a("strong"),Y2o=o("mbart"),K2o=o(" \u2014 "),B$=a("a"),Z2o=o("MBartForCausalLM"),e6o=o(" (mBART model)"),o6o=l(),Pu=a("li"),Qoe=a("strong"),r6o=o("megatron-bert"),t6o=o(" \u2014 "),x$=a("a"),a6o=o("MegatronBertForCausalLM"),n6o=o(" (MegatronBert model)"),s6o=l(),$u=a("li"),Hoe=a("strong"),l6o=o("openai-gpt"),i6o=o(" \u2014 "),k$=a("a"),d6o=o("OpenAIGPTLMHeadModel"),c6o=o(" (OpenAI GPT model)"),f6o=l(),Iu=a("li"),Uoe=a("strong"),m6o=o("pegasus"),g6o=o(" \u2014 "),R$=a("a"),h6o=o("PegasusForCausalLM"),p6o=o(" (Pegasus model)"),_6o=l(),Nu=a("li"),Joe=a("strong"),u6o=o("plbart"),b6o=o(" \u2014 "),S$=a("a"),v6o=o("PLBartForCausalLM"),T6o=o(" (PLBart model)"),F6o=l(),Du=a("li"),Yoe=a("strong"),C6o=o("prophetnet"),M6o=o(" \u2014 "),P$=a("a"),E6o=o("ProphetNetForCausalLM"),y6o=o(" (ProphetNet model)"),w6o=l(),ju=a("li"),Koe=a("strong"),A6o=o("qdqbert"),L6o=o(" \u2014 "),$$=a("a"),B6o=o("QDQBertLMHeadModel"),x6o=o(" (QDQBert model)"),k6o=l(),qu=a("li"),Zoe=a("strong"),R6o=o("reformer"),S6o=o(" \u2014 "),I$=a("a"),P6o=o("ReformerModelWithLMHead"),$6o=o(" (Reformer model)"),I6o=l(),Gu=a("li"),ere=a("strong"),N6o=o("rembert"),D6o=o(" \u2014 "),N$=a("a"),j6o=o("RemBertForCausalLM"),q6o=o(" (RemBERT model)"),G6o=l(),Ou=a("li"),ore=a("strong"),O6o=o("roberta"),X6o=o(" \u2014 "),D$=a("a"),V6o=o("RobertaForCausalLM"),z6o=o(" (RoBERTa model)"),W6o=l(),Xu=a("li"),rre=a("strong"),Q6o=o("roformer"),H6o=o(" \u2014 "),j$=a("a"),U6o=o("RoFormerForCausalLM"),J6o=o(" (RoFormer model)"),Y6o=l(),Vu=a("li"),tre=a("strong"),K6o=o("speech_to_text_2"),Z6o=o(" \u2014 "),q$=a("a"),ebo=o("Speech2Text2ForCausalLM"),obo=o(" (Speech2Text2 model)"),rbo=l(),zu=a("li"),are=a("strong"),tbo=o("transfo-xl"),abo=o(" \u2014 "),G$=a("a"),nbo=o("TransfoXLLMHeadModel"),sbo=o(" (Transformer-XL model)"),lbo=l(),Wu=a("li"),nre=a("strong"),ibo=o("trocr"),dbo=o(" \u2014 "),O$=a("a"),cbo=o("TrOCRForCausalLM"),fbo=o(" (TrOCR model)"),mbo=l(),Qu=a("li"),sre=a("strong"),gbo=o("xglm"),hbo=o(" \u2014 "),X$=a("a"),pbo=o("XGLMForCausalLM"),_bo=o(" (XGLM model)"),ubo=l(),Hu=a("li"),lre=a("strong"),bbo=o("xlm"),vbo=o(" \u2014 "),V$=a("a"),Tbo=o("XLMWithLMHeadModel"),Fbo=o(" (XLM model)"),Cbo=l(),Uu=a("li"),ire=a("strong"),Mbo=o("xlm-prophetnet"),Ebo=o(" \u2014 "),z$=a("a"),ybo=o("XLMProphetNetForCausalLM"),wbo=o(" (XLMProphetNet model)"),Abo=l(),Ju=a("li"),dre=a("strong"),Lbo=o("xlm-roberta"),Bbo=o(" \u2014 "),W$=a("a"),xbo=o("XLMRobertaForCausalLM"),kbo=o(" (XLM-RoBERTa model)"),Rbo=l(),Yu=a("li"),cre=a("strong"),Sbo=o("xlm-roberta-xl"),Pbo=o(" \u2014 "),Q$=a("a"),$bo=o("XLMRobertaXLForCausalLM"),Ibo=o(" (XLM-RoBERTa-XL model)"),Nbo=l(),Ku=a("li"),fre=a("strong"),Dbo=o("xlnet"),jbo=o(" \u2014 "),H$=a("a"),qbo=o("XLNetLMHeadModel"),Gbo=o(" (XLNet model)"),Obo=l(),Zu=a("p"),Xbo=o("The model is set in evaluation mode by default using "),mre=a("code"),Vbo=o("model.eval()"),zbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gre=a("code"),Wbo=o("model.train()"),Qbo=l(),hre=a("p"),Hbo=o("Examples:"),Ubo=l(),f(dy.$$.fragment),$ke=l(),nd=a("h2"),e1=a("a"),pre=a("span"),f(cy.$$.fragment),Jbo=l(),_re=a("span"),Ybo=o("AutoModelForMaskedLM"),Ike=l(),Zo=a("div"),f(fy.$$.fragment),Kbo=l(),sd=a("p"),Zbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ure=a("code"),evo=o("from_pretrained()"),ovo=o("class method or the "),bre=a("code"),rvo=o("from_config()"),tvo=o(`class
method.`),avo=l(),my=a("p"),nvo=o("This class cannot be instantiated directly using "),vre=a("code"),svo=o("__init__()"),lvo=o(" (throws an error)."),ivo=l(),Qr=a("div"),f(gy.$$.fragment),dvo=l(),Tre=a("p"),cvo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),fvo=l(),ld=a("p"),mvo=o(`Note:
Loading a model from its configuration file does `),Fre=a("strong"),gvo=o("not"),hvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cre=a("code"),pvo=o("from_pretrained()"),_vo=o("to load the model weights."),uvo=l(),Mre=a("p"),bvo=o("Examples:"),vvo=l(),f(hy.$$.fragment),Tvo=l(),qe=a("div"),f(py.$$.fragment),Fvo=l(),Ere=a("p"),Cvo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Mvo=l(),Qa=a("p"),Evo=o("The model class to instantiate is selected based on the "),yre=a("code"),yvo=o("model_type"),wvo=o(` property of the config object (either
passed as an argument or loaded from `),wre=a("code"),Avo=o("pretrained_model_name_or_path"),Lvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Are=a("code"),Bvo=o("pretrained_model_name_or_path"),xvo=o(":"),kvo=l(),I=a("ul"),o1=a("li"),Lre=a("strong"),Rvo=o("albert"),Svo=o(" \u2014 "),U$=a("a"),Pvo=o("AlbertForMaskedLM"),$vo=o(" (ALBERT model)"),Ivo=l(),r1=a("li"),Bre=a("strong"),Nvo=o("bart"),Dvo=o(" \u2014 "),J$=a("a"),jvo=o("BartForConditionalGeneration"),qvo=o(" (BART model)"),Gvo=l(),t1=a("li"),xre=a("strong"),Ovo=o("bert"),Xvo=o(" \u2014 "),Y$=a("a"),Vvo=o("BertForMaskedLM"),zvo=o(" (BERT model)"),Wvo=l(),a1=a("li"),kre=a("strong"),Qvo=o("big_bird"),Hvo=o(" \u2014 "),K$=a("a"),Uvo=o("BigBirdForMaskedLM"),Jvo=o(" (BigBird model)"),Yvo=l(),n1=a("li"),Rre=a("strong"),Kvo=o("camembert"),Zvo=o(" \u2014 "),Z$=a("a"),eTo=o("CamembertForMaskedLM"),oTo=o(" (CamemBERT model)"),rTo=l(),s1=a("li"),Sre=a("strong"),tTo=o("convbert"),aTo=o(" \u2014 "),eI=a("a"),nTo=o("ConvBertForMaskedLM"),sTo=o(" (ConvBERT model)"),lTo=l(),l1=a("li"),Pre=a("strong"),iTo=o("data2vec-text"),dTo=o(" \u2014 "),oI=a("a"),cTo=o("Data2VecTextForMaskedLM"),fTo=o(" (Data2VecText model)"),mTo=l(),i1=a("li"),$re=a("strong"),gTo=o("deberta"),hTo=o(" \u2014 "),rI=a("a"),pTo=o("DebertaForMaskedLM"),_To=o(" (DeBERTa model)"),uTo=l(),d1=a("li"),Ire=a("strong"),bTo=o("deberta-v2"),vTo=o(" \u2014 "),tI=a("a"),TTo=o("DebertaV2ForMaskedLM"),FTo=o(" (DeBERTa-v2 model)"),CTo=l(),c1=a("li"),Nre=a("strong"),MTo=o("distilbert"),ETo=o(" \u2014 "),aI=a("a"),yTo=o("DistilBertForMaskedLM"),wTo=o(" (DistilBERT model)"),ATo=l(),f1=a("li"),Dre=a("strong"),LTo=o("electra"),BTo=o(" \u2014 "),nI=a("a"),xTo=o("ElectraForMaskedLM"),kTo=o(" (ELECTRA model)"),RTo=l(),m1=a("li"),jre=a("strong"),STo=o("flaubert"),PTo=o(" \u2014 "),sI=a("a"),$To=o("FlaubertWithLMHeadModel"),ITo=o(" (FlauBERT model)"),NTo=l(),g1=a("li"),qre=a("strong"),DTo=o("fnet"),jTo=o(" \u2014 "),lI=a("a"),qTo=o("FNetForMaskedLM"),GTo=o(" (FNet model)"),OTo=l(),h1=a("li"),Gre=a("strong"),XTo=o("funnel"),VTo=o(" \u2014 "),iI=a("a"),zTo=o("FunnelForMaskedLM"),WTo=o(" (Funnel Transformer model)"),QTo=l(),p1=a("li"),Ore=a("strong"),HTo=o("ibert"),UTo=o(" \u2014 "),dI=a("a"),JTo=o("IBertForMaskedLM"),YTo=o(" (I-BERT model)"),KTo=l(),_1=a("li"),Xre=a("strong"),ZTo=o("layoutlm"),eFo=o(" \u2014 "),cI=a("a"),oFo=o("LayoutLMForMaskedLM"),rFo=o(" (LayoutLM model)"),tFo=l(),u1=a("li"),Vre=a("strong"),aFo=o("longformer"),nFo=o(" \u2014 "),fI=a("a"),sFo=o("LongformerForMaskedLM"),lFo=o(" (Longformer model)"),iFo=l(),b1=a("li"),zre=a("strong"),dFo=o("mbart"),cFo=o(" \u2014 "),mI=a("a"),fFo=o("MBartForConditionalGeneration"),mFo=o(" (mBART model)"),gFo=l(),v1=a("li"),Wre=a("strong"),hFo=o("megatron-bert"),pFo=o(" \u2014 "),gI=a("a"),_Fo=o("MegatronBertForMaskedLM"),uFo=o(" (MegatronBert model)"),bFo=l(),T1=a("li"),Qre=a("strong"),vFo=o("mobilebert"),TFo=o(" \u2014 "),hI=a("a"),FFo=o("MobileBertForMaskedLM"),CFo=o(" (MobileBERT model)"),MFo=l(),F1=a("li"),Hre=a("strong"),EFo=o("mpnet"),yFo=o(" \u2014 "),pI=a("a"),wFo=o("MPNetForMaskedLM"),AFo=o(" (MPNet model)"),LFo=l(),C1=a("li"),Ure=a("strong"),BFo=o("nystromformer"),xFo=o(" \u2014 "),_I=a("a"),kFo=o("NystromformerForMaskedLM"),RFo=o(" (Nystromformer model)"),SFo=l(),M1=a("li"),Jre=a("strong"),PFo=o("perceiver"),$Fo=o(" \u2014 "),uI=a("a"),IFo=o("PerceiverForMaskedLM"),NFo=o(" (Perceiver model)"),DFo=l(),E1=a("li"),Yre=a("strong"),jFo=o("qdqbert"),qFo=o(" \u2014 "),bI=a("a"),GFo=o("QDQBertForMaskedLM"),OFo=o(" (QDQBert model)"),XFo=l(),y1=a("li"),Kre=a("strong"),VFo=o("reformer"),zFo=o(" \u2014 "),vI=a("a"),WFo=o("ReformerForMaskedLM"),QFo=o(" (Reformer model)"),HFo=l(),w1=a("li"),Zre=a("strong"),UFo=o("rembert"),JFo=o(" \u2014 "),TI=a("a"),YFo=o("RemBertForMaskedLM"),KFo=o(" (RemBERT model)"),ZFo=l(),A1=a("li"),ete=a("strong"),eCo=o("roberta"),oCo=o(" \u2014 "),FI=a("a"),rCo=o("RobertaForMaskedLM"),tCo=o(" (RoBERTa model)"),aCo=l(),L1=a("li"),ote=a("strong"),nCo=o("roformer"),sCo=o(" \u2014 "),CI=a("a"),lCo=o("RoFormerForMaskedLM"),iCo=o(" (RoFormer model)"),dCo=l(),B1=a("li"),rte=a("strong"),cCo=o("squeezebert"),fCo=o(" \u2014 "),MI=a("a"),mCo=o("SqueezeBertForMaskedLM"),gCo=o(" (SqueezeBERT model)"),hCo=l(),x1=a("li"),tte=a("strong"),pCo=o("tapas"),_Co=o(" \u2014 "),EI=a("a"),uCo=o("TapasForMaskedLM"),bCo=o(" (TAPAS model)"),vCo=l(),k1=a("li"),ate=a("strong"),TCo=o("wav2vec2"),FCo=o(" \u2014 "),nte=a("code"),CCo=o("Wav2Vec2ForMaskedLM"),MCo=o("(Wav2Vec2 model)"),ECo=l(),R1=a("li"),ste=a("strong"),yCo=o("xlm"),wCo=o(" \u2014 "),yI=a("a"),ACo=o("XLMWithLMHeadModel"),LCo=o(" (XLM model)"),BCo=l(),S1=a("li"),lte=a("strong"),xCo=o("xlm-roberta"),kCo=o(" \u2014 "),wI=a("a"),RCo=o("XLMRobertaForMaskedLM"),SCo=o(" (XLM-RoBERTa model)"),PCo=l(),P1=a("li"),ite=a("strong"),$Co=o("xlm-roberta-xl"),ICo=o(" \u2014 "),AI=a("a"),NCo=o("XLMRobertaXLForMaskedLM"),DCo=o(" (XLM-RoBERTa-XL model)"),jCo=l(),$1=a("li"),dte=a("strong"),qCo=o("yoso"),GCo=o(" \u2014 "),LI=a("a"),OCo=o("YosoForMaskedLM"),XCo=o(" (YOSO model)"),VCo=l(),I1=a("p"),zCo=o("The model is set in evaluation mode by default using "),cte=a("code"),WCo=o("model.eval()"),QCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fte=a("code"),HCo=o("model.train()"),UCo=l(),mte=a("p"),JCo=o("Examples:"),YCo=l(),f(_y.$$.fragment),Nke=l(),id=a("h2"),N1=a("a"),gte=a("span"),f(uy.$$.fragment),KCo=l(),hte=a("span"),ZCo=o("AutoModelForSeq2SeqLM"),Dke=l(),er=a("div"),f(by.$$.fragment),eMo=l(),dd=a("p"),oMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pte=a("code"),rMo=o("from_pretrained()"),tMo=o("class method or the "),_te=a("code"),aMo=o("from_config()"),nMo=o(`class
method.`),sMo=l(),vy=a("p"),lMo=o("This class cannot be instantiated directly using "),ute=a("code"),iMo=o("__init__()"),dMo=o(" (throws an error)."),cMo=l(),Hr=a("div"),f(Ty.$$.fragment),fMo=l(),bte=a("p"),mMo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gMo=l(),cd=a("p"),hMo=o(`Note:
Loading a model from its configuration file does `),vte=a("strong"),pMo=o("not"),_Mo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tte=a("code"),uMo=o("from_pretrained()"),bMo=o("to load the model weights."),vMo=l(),Fte=a("p"),TMo=o("Examples:"),FMo=l(),f(Fy.$$.fragment),CMo=l(),Ge=a("div"),f(Cy.$$.fragment),MMo=l(),Cte=a("p"),EMo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yMo=l(),Ha=a("p"),wMo=o("The model class to instantiate is selected based on the "),Mte=a("code"),AMo=o("model_type"),LMo=o(` property of the config object (either
passed as an argument or loaded from `),Ete=a("code"),BMo=o("pretrained_model_name_or_path"),xMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yte=a("code"),kMo=o("pretrained_model_name_or_path"),RMo=o(":"),SMo=l(),se=a("ul"),D1=a("li"),wte=a("strong"),PMo=o("bart"),$Mo=o(" \u2014 "),BI=a("a"),IMo=o("BartForConditionalGeneration"),NMo=o(" (BART model)"),DMo=l(),j1=a("li"),Ate=a("strong"),jMo=o("bigbird_pegasus"),qMo=o(" \u2014 "),xI=a("a"),GMo=o("BigBirdPegasusForConditionalGeneration"),OMo=o(" (BigBirdPegasus model)"),XMo=l(),q1=a("li"),Lte=a("strong"),VMo=o("blenderbot"),zMo=o(" \u2014 "),kI=a("a"),WMo=o("BlenderbotForConditionalGeneration"),QMo=o(" (Blenderbot model)"),HMo=l(),G1=a("li"),Bte=a("strong"),UMo=o("blenderbot-small"),JMo=o(" \u2014 "),RI=a("a"),YMo=o("BlenderbotSmallForConditionalGeneration"),KMo=o(" (BlenderbotSmall model)"),ZMo=l(),O1=a("li"),xte=a("strong"),e4o=o("encoder-decoder"),o4o=o(" \u2014 "),SI=a("a"),r4o=o("EncoderDecoderModel"),t4o=o(" (Encoder decoder model)"),a4o=l(),X1=a("li"),kte=a("strong"),n4o=o("fsmt"),s4o=o(" \u2014 "),PI=a("a"),l4o=o("FSMTForConditionalGeneration"),i4o=o(" (FairSeq Machine-Translation model)"),d4o=l(),V1=a("li"),Rte=a("strong"),c4o=o("led"),f4o=o(" \u2014 "),$I=a("a"),m4o=o("LEDForConditionalGeneration"),g4o=o(" (LED model)"),h4o=l(),z1=a("li"),Ste=a("strong"),p4o=o("m2m_100"),_4o=o(" \u2014 "),II=a("a"),u4o=o("M2M100ForConditionalGeneration"),b4o=o(" (M2M100 model)"),v4o=l(),W1=a("li"),Pte=a("strong"),T4o=o("marian"),F4o=o(" \u2014 "),NI=a("a"),C4o=o("MarianMTModel"),M4o=o(" (Marian model)"),E4o=l(),Q1=a("li"),$te=a("strong"),y4o=o("mbart"),w4o=o(" \u2014 "),DI=a("a"),A4o=o("MBartForConditionalGeneration"),L4o=o(" (mBART model)"),B4o=l(),H1=a("li"),Ite=a("strong"),x4o=o("mt5"),k4o=o(" \u2014 "),jI=a("a"),R4o=o("MT5ForConditionalGeneration"),S4o=o(" (mT5 model)"),P4o=l(),U1=a("li"),Nte=a("strong"),$4o=o("pegasus"),I4o=o(" \u2014 "),qI=a("a"),N4o=o("PegasusForConditionalGeneration"),D4o=o(" (Pegasus model)"),j4o=l(),J1=a("li"),Dte=a("strong"),q4o=o("plbart"),G4o=o(" \u2014 "),GI=a("a"),O4o=o("PLBartForConditionalGeneration"),X4o=o(" (PLBart model)"),V4o=l(),Y1=a("li"),jte=a("strong"),z4o=o("prophetnet"),W4o=o(" \u2014 "),OI=a("a"),Q4o=o("ProphetNetForConditionalGeneration"),H4o=o(" (ProphetNet model)"),U4o=l(),K1=a("li"),qte=a("strong"),J4o=o("t5"),Y4o=o(" \u2014 "),XI=a("a"),K4o=o("T5ForConditionalGeneration"),Z4o=o(" (T5 model)"),eEo=l(),Z1=a("li"),Gte=a("strong"),oEo=o("xlm-prophetnet"),rEo=o(" \u2014 "),VI=a("a"),tEo=o("XLMProphetNetForConditionalGeneration"),aEo=o(" (XLMProphetNet model)"),nEo=l(),e2=a("p"),sEo=o("The model is set in evaluation mode by default using "),Ote=a("code"),lEo=o("model.eval()"),iEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xte=a("code"),dEo=o("model.train()"),cEo=l(),Vte=a("p"),fEo=o("Examples:"),mEo=l(),f(My.$$.fragment),jke=l(),fd=a("h2"),o2=a("a"),zte=a("span"),f(Ey.$$.fragment),gEo=l(),Wte=a("span"),hEo=o("AutoModelForSequenceClassification"),qke=l(),or=a("div"),f(yy.$$.fragment),pEo=l(),md=a("p"),_Eo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Qte=a("code"),uEo=o("from_pretrained()"),bEo=o("class method or the "),Hte=a("code"),vEo=o("from_config()"),TEo=o(`class
method.`),FEo=l(),wy=a("p"),CEo=o("This class cannot be instantiated directly using "),Ute=a("code"),MEo=o("__init__()"),EEo=o(" (throws an error)."),yEo=l(),Ur=a("div"),f(Ay.$$.fragment),wEo=l(),Jte=a("p"),AEo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),LEo=l(),gd=a("p"),BEo=o(`Note:
Loading a model from its configuration file does `),Yte=a("strong"),xEo=o("not"),kEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kte=a("code"),REo=o("from_pretrained()"),SEo=o("to load the model weights."),PEo=l(),Zte=a("p"),$Eo=o("Examples:"),IEo=l(),f(Ly.$$.fragment),NEo=l(),Oe=a("div"),f(By.$$.fragment),DEo=l(),eae=a("p"),jEo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qEo=l(),Ua=a("p"),GEo=o("The model class to instantiate is selected based on the "),oae=a("code"),OEo=o("model_type"),XEo=o(` property of the config object (either
passed as an argument or loaded from `),rae=a("code"),VEo=o("pretrained_model_name_or_path"),zEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tae=a("code"),WEo=o("pretrained_model_name_or_path"),QEo=o(":"),HEo=l(),A=a("ul"),r2=a("li"),aae=a("strong"),UEo=o("albert"),JEo=o(" \u2014 "),zI=a("a"),YEo=o("AlbertForSequenceClassification"),KEo=o(" (ALBERT model)"),ZEo=l(),t2=a("li"),nae=a("strong"),e3o=o("bart"),o3o=o(" \u2014 "),WI=a("a"),r3o=o("BartForSequenceClassification"),t3o=o(" (BART model)"),a3o=l(),a2=a("li"),sae=a("strong"),n3o=o("bert"),s3o=o(" \u2014 "),QI=a("a"),l3o=o("BertForSequenceClassification"),i3o=o(" (BERT model)"),d3o=l(),n2=a("li"),lae=a("strong"),c3o=o("big_bird"),f3o=o(" \u2014 "),HI=a("a"),m3o=o("BigBirdForSequenceClassification"),g3o=o(" (BigBird model)"),h3o=l(),s2=a("li"),iae=a("strong"),p3o=o("bigbird_pegasus"),_3o=o(" \u2014 "),UI=a("a"),u3o=o("BigBirdPegasusForSequenceClassification"),b3o=o(" (BigBirdPegasus model)"),v3o=l(),l2=a("li"),dae=a("strong"),T3o=o("camembert"),F3o=o(" \u2014 "),JI=a("a"),C3o=o("CamembertForSequenceClassification"),M3o=o(" (CamemBERT model)"),E3o=l(),i2=a("li"),cae=a("strong"),y3o=o("canine"),w3o=o(" \u2014 "),YI=a("a"),A3o=o("CanineForSequenceClassification"),L3o=o(" (Canine model)"),B3o=l(),d2=a("li"),fae=a("strong"),x3o=o("convbert"),k3o=o(" \u2014 "),KI=a("a"),R3o=o("ConvBertForSequenceClassification"),S3o=o(" (ConvBERT model)"),P3o=l(),c2=a("li"),mae=a("strong"),$3o=o("ctrl"),I3o=o(" \u2014 "),ZI=a("a"),N3o=o("CTRLForSequenceClassification"),D3o=o(" (CTRL model)"),j3o=l(),f2=a("li"),gae=a("strong"),q3o=o("data2vec-text"),G3o=o(" \u2014 "),eN=a("a"),O3o=o("Data2VecTextForSequenceClassification"),X3o=o(" (Data2VecText model)"),V3o=l(),m2=a("li"),hae=a("strong"),z3o=o("deberta"),W3o=o(" \u2014 "),oN=a("a"),Q3o=o("DebertaForSequenceClassification"),H3o=o(" (DeBERTa model)"),U3o=l(),g2=a("li"),pae=a("strong"),J3o=o("deberta-v2"),Y3o=o(" \u2014 "),rN=a("a"),K3o=o("DebertaV2ForSequenceClassification"),Z3o=o(" (DeBERTa-v2 model)"),e5o=l(),h2=a("li"),_ae=a("strong"),o5o=o("distilbert"),r5o=o(" \u2014 "),tN=a("a"),t5o=o("DistilBertForSequenceClassification"),a5o=o(" (DistilBERT model)"),n5o=l(),p2=a("li"),uae=a("strong"),s5o=o("electra"),l5o=o(" \u2014 "),aN=a("a"),i5o=o("ElectraForSequenceClassification"),d5o=o(" (ELECTRA model)"),c5o=l(),_2=a("li"),bae=a("strong"),f5o=o("flaubert"),m5o=o(" \u2014 "),nN=a("a"),g5o=o("FlaubertForSequenceClassification"),h5o=o(" (FlauBERT model)"),p5o=l(),u2=a("li"),vae=a("strong"),_5o=o("fnet"),u5o=o(" \u2014 "),sN=a("a"),b5o=o("FNetForSequenceClassification"),v5o=o(" (FNet model)"),T5o=l(),b2=a("li"),Tae=a("strong"),F5o=o("funnel"),C5o=o(" \u2014 "),lN=a("a"),M5o=o("FunnelForSequenceClassification"),E5o=o(" (Funnel Transformer model)"),y5o=l(),v2=a("li"),Fae=a("strong"),w5o=o("gpt2"),A5o=o(" \u2014 "),iN=a("a"),L5o=o("GPT2ForSequenceClassification"),B5o=o(" (OpenAI GPT-2 model)"),x5o=l(),T2=a("li"),Cae=a("strong"),k5o=o("gpt_neo"),R5o=o(" \u2014 "),dN=a("a"),S5o=o("GPTNeoForSequenceClassification"),P5o=o(" (GPT Neo model)"),$5o=l(),F2=a("li"),Mae=a("strong"),I5o=o("gptj"),N5o=o(" \u2014 "),cN=a("a"),D5o=o("GPTJForSequenceClassification"),j5o=o(" (GPT-J model)"),q5o=l(),C2=a("li"),Eae=a("strong"),G5o=o("ibert"),O5o=o(" \u2014 "),fN=a("a"),X5o=o("IBertForSequenceClassification"),V5o=o(" (I-BERT model)"),z5o=l(),M2=a("li"),yae=a("strong"),W5o=o("layoutlm"),Q5o=o(" \u2014 "),mN=a("a"),H5o=o("LayoutLMForSequenceClassification"),U5o=o(" (LayoutLM model)"),J5o=l(),E2=a("li"),wae=a("strong"),Y5o=o("layoutlmv2"),K5o=o(" \u2014 "),gN=a("a"),Z5o=o("LayoutLMv2ForSequenceClassification"),eyo=o(" (LayoutLMv2 model)"),oyo=l(),y2=a("li"),Aae=a("strong"),ryo=o("led"),tyo=o(" \u2014 "),hN=a("a"),ayo=o("LEDForSequenceClassification"),nyo=o(" (LED model)"),syo=l(),w2=a("li"),Lae=a("strong"),lyo=o("longformer"),iyo=o(" \u2014 "),pN=a("a"),dyo=o("LongformerForSequenceClassification"),cyo=o(" (Longformer model)"),fyo=l(),A2=a("li"),Bae=a("strong"),myo=o("mbart"),gyo=o(" \u2014 "),_N=a("a"),hyo=o("MBartForSequenceClassification"),pyo=o(" (mBART model)"),_yo=l(),L2=a("li"),xae=a("strong"),uyo=o("megatron-bert"),byo=o(" \u2014 "),uN=a("a"),vyo=o("MegatronBertForSequenceClassification"),Tyo=o(" (MegatronBert model)"),Fyo=l(),B2=a("li"),kae=a("strong"),Cyo=o("mobilebert"),Myo=o(" \u2014 "),bN=a("a"),Eyo=o("MobileBertForSequenceClassification"),yyo=o(" (MobileBERT model)"),wyo=l(),x2=a("li"),Rae=a("strong"),Ayo=o("mpnet"),Lyo=o(" \u2014 "),vN=a("a"),Byo=o("MPNetForSequenceClassification"),xyo=o(" (MPNet model)"),kyo=l(),k2=a("li"),Sae=a("strong"),Ryo=o("nystromformer"),Syo=o(" \u2014 "),TN=a("a"),Pyo=o("NystromformerForSequenceClassification"),$yo=o(" (Nystromformer model)"),Iyo=l(),R2=a("li"),Pae=a("strong"),Nyo=o("openai-gpt"),Dyo=o(" \u2014 "),FN=a("a"),jyo=o("OpenAIGPTForSequenceClassification"),qyo=o(" (OpenAI GPT model)"),Gyo=l(),S2=a("li"),$ae=a("strong"),Oyo=o("perceiver"),Xyo=o(" \u2014 "),CN=a("a"),Vyo=o("PerceiverForSequenceClassification"),zyo=o(" (Perceiver model)"),Wyo=l(),P2=a("li"),Iae=a("strong"),Qyo=o("plbart"),Hyo=o(" \u2014 "),MN=a("a"),Uyo=o("PLBartForSequenceClassification"),Jyo=o(" (PLBart model)"),Yyo=l(),$2=a("li"),Nae=a("strong"),Kyo=o("qdqbert"),Zyo=o(" \u2014 "),EN=a("a"),ewo=o("QDQBertForSequenceClassification"),owo=o(" (QDQBert model)"),rwo=l(),I2=a("li"),Dae=a("strong"),two=o("reformer"),awo=o(" \u2014 "),yN=a("a"),nwo=o("ReformerForSequenceClassification"),swo=o(" (Reformer model)"),lwo=l(),N2=a("li"),jae=a("strong"),iwo=o("rembert"),dwo=o(" \u2014 "),wN=a("a"),cwo=o("RemBertForSequenceClassification"),fwo=o(" (RemBERT model)"),mwo=l(),D2=a("li"),qae=a("strong"),gwo=o("roberta"),hwo=o(" \u2014 "),AN=a("a"),pwo=o("RobertaForSequenceClassification"),_wo=o(" (RoBERTa model)"),uwo=l(),j2=a("li"),Gae=a("strong"),bwo=o("roformer"),vwo=o(" \u2014 "),LN=a("a"),Two=o("RoFormerForSequenceClassification"),Fwo=o(" (RoFormer model)"),Cwo=l(),q2=a("li"),Oae=a("strong"),Mwo=o("squeezebert"),Ewo=o(" \u2014 "),BN=a("a"),ywo=o("SqueezeBertForSequenceClassification"),wwo=o(" (SqueezeBERT model)"),Awo=l(),G2=a("li"),Xae=a("strong"),Lwo=o("tapas"),Bwo=o(" \u2014 "),xN=a("a"),xwo=o("TapasForSequenceClassification"),kwo=o(" (TAPAS model)"),Rwo=l(),O2=a("li"),Vae=a("strong"),Swo=o("transfo-xl"),Pwo=o(" \u2014 "),kN=a("a"),$wo=o("TransfoXLForSequenceClassification"),Iwo=o(" (Transformer-XL model)"),Nwo=l(),X2=a("li"),zae=a("strong"),Dwo=o("xlm"),jwo=o(" \u2014 "),RN=a("a"),qwo=o("XLMForSequenceClassification"),Gwo=o(" (XLM model)"),Owo=l(),V2=a("li"),Wae=a("strong"),Xwo=o("xlm-roberta"),Vwo=o(" \u2014 "),SN=a("a"),zwo=o("XLMRobertaForSequenceClassification"),Wwo=o(" (XLM-RoBERTa model)"),Qwo=l(),z2=a("li"),Qae=a("strong"),Hwo=o("xlm-roberta-xl"),Uwo=o(" \u2014 "),PN=a("a"),Jwo=o("XLMRobertaXLForSequenceClassification"),Ywo=o(" (XLM-RoBERTa-XL model)"),Kwo=l(),W2=a("li"),Hae=a("strong"),Zwo=o("xlnet"),eAo=o(" \u2014 "),$N=a("a"),oAo=o("XLNetForSequenceClassification"),rAo=o(" (XLNet model)"),tAo=l(),Q2=a("li"),Uae=a("strong"),aAo=o("yoso"),nAo=o(" \u2014 "),IN=a("a"),sAo=o("YosoForSequenceClassification"),lAo=o(" (YOSO model)"),iAo=l(),H2=a("p"),dAo=o("The model is set in evaluation mode by default using "),Jae=a("code"),cAo=o("model.eval()"),fAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yae=a("code"),mAo=o("model.train()"),gAo=l(),Kae=a("p"),hAo=o("Examples:"),pAo=l(),f(xy.$$.fragment),Gke=l(),hd=a("h2"),U2=a("a"),Zae=a("span"),f(ky.$$.fragment),_Ao=l(),ene=a("span"),uAo=o("AutoModelForMultipleChoice"),Oke=l(),rr=a("div"),f(Ry.$$.fragment),bAo=l(),pd=a("p"),vAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),one=a("code"),TAo=o("from_pretrained()"),FAo=o("class method or the "),rne=a("code"),CAo=o("from_config()"),MAo=o(`class
method.`),EAo=l(),Sy=a("p"),yAo=o("This class cannot be instantiated directly using "),tne=a("code"),wAo=o("__init__()"),AAo=o(" (throws an error)."),LAo=l(),Jr=a("div"),f(Py.$$.fragment),BAo=l(),ane=a("p"),xAo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),kAo=l(),_d=a("p"),RAo=o(`Note:
Loading a model from its configuration file does `),nne=a("strong"),SAo=o("not"),PAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sne=a("code"),$Ao=o("from_pretrained()"),IAo=o("to load the model weights."),NAo=l(),lne=a("p"),DAo=o("Examples:"),jAo=l(),f($y.$$.fragment),qAo=l(),Xe=a("div"),f(Iy.$$.fragment),GAo=l(),ine=a("p"),OAo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),XAo=l(),Ja=a("p"),VAo=o("The model class to instantiate is selected based on the "),dne=a("code"),zAo=o("model_type"),WAo=o(` property of the config object (either
passed as an argument or loaded from `),cne=a("code"),QAo=o("pretrained_model_name_or_path"),HAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fne=a("code"),UAo=o("pretrained_model_name_or_path"),JAo=o(":"),YAo=l(),G=a("ul"),J2=a("li"),mne=a("strong"),KAo=o("albert"),ZAo=o(" \u2014 "),NN=a("a"),e0o=o("AlbertForMultipleChoice"),o0o=o(" (ALBERT model)"),r0o=l(),Y2=a("li"),gne=a("strong"),t0o=o("bert"),a0o=o(" \u2014 "),DN=a("a"),n0o=o("BertForMultipleChoice"),s0o=o(" (BERT model)"),l0o=l(),K2=a("li"),hne=a("strong"),i0o=o("big_bird"),d0o=o(" \u2014 "),jN=a("a"),c0o=o("BigBirdForMultipleChoice"),f0o=o(" (BigBird model)"),m0o=l(),Z2=a("li"),pne=a("strong"),g0o=o("camembert"),h0o=o(" \u2014 "),qN=a("a"),p0o=o("CamembertForMultipleChoice"),_0o=o(" (CamemBERT model)"),u0o=l(),e6=a("li"),_ne=a("strong"),b0o=o("canine"),v0o=o(" \u2014 "),GN=a("a"),T0o=o("CanineForMultipleChoice"),F0o=o(" (Canine model)"),C0o=l(),o6=a("li"),une=a("strong"),M0o=o("convbert"),E0o=o(" \u2014 "),ON=a("a"),y0o=o("ConvBertForMultipleChoice"),w0o=o(" (ConvBERT model)"),A0o=l(),r6=a("li"),bne=a("strong"),L0o=o("data2vec-text"),B0o=o(" \u2014 "),XN=a("a"),x0o=o("Data2VecTextForMultipleChoice"),k0o=o(" (Data2VecText model)"),R0o=l(),t6=a("li"),vne=a("strong"),S0o=o("distilbert"),P0o=o(" \u2014 "),VN=a("a"),$0o=o("DistilBertForMultipleChoice"),I0o=o(" (DistilBERT model)"),N0o=l(),a6=a("li"),Tne=a("strong"),D0o=o("electra"),j0o=o(" \u2014 "),zN=a("a"),q0o=o("ElectraForMultipleChoice"),G0o=o(" (ELECTRA model)"),O0o=l(),n6=a("li"),Fne=a("strong"),X0o=o("flaubert"),V0o=o(" \u2014 "),WN=a("a"),z0o=o("FlaubertForMultipleChoice"),W0o=o(" (FlauBERT model)"),Q0o=l(),s6=a("li"),Cne=a("strong"),H0o=o("fnet"),U0o=o(" \u2014 "),QN=a("a"),J0o=o("FNetForMultipleChoice"),Y0o=o(" (FNet model)"),K0o=l(),l6=a("li"),Mne=a("strong"),Z0o=o("funnel"),eLo=o(" \u2014 "),HN=a("a"),oLo=o("FunnelForMultipleChoice"),rLo=o(" (Funnel Transformer model)"),tLo=l(),i6=a("li"),Ene=a("strong"),aLo=o("ibert"),nLo=o(" \u2014 "),UN=a("a"),sLo=o("IBertForMultipleChoice"),lLo=o(" (I-BERT model)"),iLo=l(),d6=a("li"),yne=a("strong"),dLo=o("longformer"),cLo=o(" \u2014 "),JN=a("a"),fLo=o("LongformerForMultipleChoice"),mLo=o(" (Longformer model)"),gLo=l(),c6=a("li"),wne=a("strong"),hLo=o("megatron-bert"),pLo=o(" \u2014 "),YN=a("a"),_Lo=o("MegatronBertForMultipleChoice"),uLo=o(" (MegatronBert model)"),bLo=l(),f6=a("li"),Ane=a("strong"),vLo=o("mobilebert"),TLo=o(" \u2014 "),KN=a("a"),FLo=o("MobileBertForMultipleChoice"),CLo=o(" (MobileBERT model)"),MLo=l(),m6=a("li"),Lne=a("strong"),ELo=o("mpnet"),yLo=o(" \u2014 "),ZN=a("a"),wLo=o("MPNetForMultipleChoice"),ALo=o(" (MPNet model)"),LLo=l(),g6=a("li"),Bne=a("strong"),BLo=o("nystromformer"),xLo=o(" \u2014 "),eD=a("a"),kLo=o("NystromformerForMultipleChoice"),RLo=o(" (Nystromformer model)"),SLo=l(),h6=a("li"),xne=a("strong"),PLo=o("qdqbert"),$Lo=o(" \u2014 "),oD=a("a"),ILo=o("QDQBertForMultipleChoice"),NLo=o(" (QDQBert model)"),DLo=l(),p6=a("li"),kne=a("strong"),jLo=o("rembert"),qLo=o(" \u2014 "),rD=a("a"),GLo=o("RemBertForMultipleChoice"),OLo=o(" (RemBERT model)"),XLo=l(),_6=a("li"),Rne=a("strong"),VLo=o("roberta"),zLo=o(" \u2014 "),tD=a("a"),WLo=o("RobertaForMultipleChoice"),QLo=o(" (RoBERTa model)"),HLo=l(),u6=a("li"),Sne=a("strong"),ULo=o("roformer"),JLo=o(" \u2014 "),aD=a("a"),YLo=o("RoFormerForMultipleChoice"),KLo=o(" (RoFormer model)"),ZLo=l(),b6=a("li"),Pne=a("strong"),e7o=o("squeezebert"),o7o=o(" \u2014 "),nD=a("a"),r7o=o("SqueezeBertForMultipleChoice"),t7o=o(" (SqueezeBERT model)"),a7o=l(),v6=a("li"),$ne=a("strong"),n7o=o("xlm"),s7o=o(" \u2014 "),sD=a("a"),l7o=o("XLMForMultipleChoice"),i7o=o(" (XLM model)"),d7o=l(),T6=a("li"),Ine=a("strong"),c7o=o("xlm-roberta"),f7o=o(" \u2014 "),lD=a("a"),m7o=o("XLMRobertaForMultipleChoice"),g7o=o(" (XLM-RoBERTa model)"),h7o=l(),F6=a("li"),Nne=a("strong"),p7o=o("xlm-roberta-xl"),_7o=o(" \u2014 "),iD=a("a"),u7o=o("XLMRobertaXLForMultipleChoice"),b7o=o(" (XLM-RoBERTa-XL model)"),v7o=l(),C6=a("li"),Dne=a("strong"),T7o=o("xlnet"),F7o=o(" \u2014 "),dD=a("a"),C7o=o("XLNetForMultipleChoice"),M7o=o(" (XLNet model)"),E7o=l(),M6=a("li"),jne=a("strong"),y7o=o("yoso"),w7o=o(" \u2014 "),cD=a("a"),A7o=o("YosoForMultipleChoice"),L7o=o(" (YOSO model)"),B7o=l(),E6=a("p"),x7o=o("The model is set in evaluation mode by default using "),qne=a("code"),k7o=o("model.eval()"),R7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gne=a("code"),S7o=o("model.train()"),P7o=l(),One=a("p"),$7o=o("Examples:"),I7o=l(),f(Ny.$$.fragment),Xke=l(),ud=a("h2"),y6=a("a"),Xne=a("span"),f(Dy.$$.fragment),N7o=l(),Vne=a("span"),D7o=o("AutoModelForNextSentencePrediction"),Vke=l(),tr=a("div"),f(jy.$$.fragment),j7o=l(),bd=a("p"),q7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zne=a("code"),G7o=o("from_pretrained()"),O7o=o("class method or the "),Wne=a("code"),X7o=o("from_config()"),V7o=o(`class
method.`),z7o=l(),qy=a("p"),W7o=o("This class cannot be instantiated directly using "),Qne=a("code"),Q7o=o("__init__()"),H7o=o(" (throws an error)."),U7o=l(),Yr=a("div"),f(Gy.$$.fragment),J7o=l(),Hne=a("p"),Y7o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),K7o=l(),vd=a("p"),Z7o=o(`Note:
Loading a model from its configuration file does `),Une=a("strong"),e8o=o("not"),o8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jne=a("code"),r8o=o("from_pretrained()"),t8o=o("to load the model weights."),a8o=l(),Yne=a("p"),n8o=o("Examples:"),s8o=l(),f(Oy.$$.fragment),l8o=l(),Ve=a("div"),f(Xy.$$.fragment),i8o=l(),Kne=a("p"),d8o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),c8o=l(),Ya=a("p"),f8o=o("The model class to instantiate is selected based on the "),Zne=a("code"),m8o=o("model_type"),g8o=o(` property of the config object (either
passed as an argument or loaded from `),ese=a("code"),h8o=o("pretrained_model_name_or_path"),p8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ose=a("code"),_8o=o("pretrained_model_name_or_path"),u8o=o(":"),b8o=l(),da=a("ul"),w6=a("li"),rse=a("strong"),v8o=o("bert"),T8o=o(" \u2014 "),fD=a("a"),F8o=o("BertForNextSentencePrediction"),C8o=o(" (BERT model)"),M8o=l(),A6=a("li"),tse=a("strong"),E8o=o("fnet"),y8o=o(" \u2014 "),mD=a("a"),w8o=o("FNetForNextSentencePrediction"),A8o=o(" (FNet model)"),L8o=l(),L6=a("li"),ase=a("strong"),B8o=o("megatron-bert"),x8o=o(" \u2014 "),gD=a("a"),k8o=o("MegatronBertForNextSentencePrediction"),R8o=o(" (MegatronBert model)"),S8o=l(),B6=a("li"),nse=a("strong"),P8o=o("mobilebert"),$8o=o(" \u2014 "),hD=a("a"),I8o=o("MobileBertForNextSentencePrediction"),N8o=o(" (MobileBERT model)"),D8o=l(),x6=a("li"),sse=a("strong"),j8o=o("qdqbert"),q8o=o(" \u2014 "),pD=a("a"),G8o=o("QDQBertForNextSentencePrediction"),O8o=o(" (QDQBert model)"),X8o=l(),k6=a("p"),V8o=o("The model is set in evaluation mode by default using "),lse=a("code"),z8o=o("model.eval()"),W8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ise=a("code"),Q8o=o("model.train()"),H8o=l(),dse=a("p"),U8o=o("Examples:"),J8o=l(),f(Vy.$$.fragment),zke=l(),Td=a("h2"),R6=a("a"),cse=a("span"),f(zy.$$.fragment),Y8o=l(),fse=a("span"),K8o=o("AutoModelForTokenClassification"),Wke=l(),ar=a("div"),f(Wy.$$.fragment),Z8o=l(),Fd=a("p"),e9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mse=a("code"),o9o=o("from_pretrained()"),r9o=o("class method or the "),gse=a("code"),t9o=o("from_config()"),a9o=o(`class
method.`),n9o=l(),Qy=a("p"),s9o=o("This class cannot be instantiated directly using "),hse=a("code"),l9o=o("__init__()"),i9o=o(" (throws an error)."),d9o=l(),Kr=a("div"),f(Hy.$$.fragment),c9o=l(),pse=a("p"),f9o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),m9o=l(),Cd=a("p"),g9o=o(`Note:
Loading a model from its configuration file does `),_se=a("strong"),h9o=o("not"),p9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),use=a("code"),_9o=o("from_pretrained()"),u9o=o("to load the model weights."),b9o=l(),bse=a("p"),v9o=o("Examples:"),T9o=l(),f(Uy.$$.fragment),F9o=l(),ze=a("div"),f(Jy.$$.fragment),C9o=l(),vse=a("p"),M9o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),E9o=l(),Ka=a("p"),y9o=o("The model class to instantiate is selected based on the "),Tse=a("code"),w9o=o("model_type"),A9o=o(` property of the config object (either
passed as an argument or loaded from `),Fse=a("code"),L9o=o("pretrained_model_name_or_path"),B9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cse=a("code"),x9o=o("pretrained_model_name_or_path"),k9o=o(":"),R9o=l(),j=a("ul"),S6=a("li"),Mse=a("strong"),S9o=o("albert"),P9o=o(" \u2014 "),_D=a("a"),$9o=o("AlbertForTokenClassification"),I9o=o(" (ALBERT model)"),N9o=l(),P6=a("li"),Ese=a("strong"),D9o=o("bert"),j9o=o(" \u2014 "),uD=a("a"),q9o=o("BertForTokenClassification"),G9o=o(" (BERT model)"),O9o=l(),$6=a("li"),yse=a("strong"),X9o=o("big_bird"),V9o=o(" \u2014 "),bD=a("a"),z9o=o("BigBirdForTokenClassification"),W9o=o(" (BigBird model)"),Q9o=l(),I6=a("li"),wse=a("strong"),H9o=o("camembert"),U9o=o(" \u2014 "),vD=a("a"),J9o=o("CamembertForTokenClassification"),Y9o=o(" (CamemBERT model)"),K9o=l(),N6=a("li"),Ase=a("strong"),Z9o=o("canine"),eBo=o(" \u2014 "),TD=a("a"),oBo=o("CanineForTokenClassification"),rBo=o(" (Canine model)"),tBo=l(),D6=a("li"),Lse=a("strong"),aBo=o("convbert"),nBo=o(" \u2014 "),FD=a("a"),sBo=o("ConvBertForTokenClassification"),lBo=o(" (ConvBERT model)"),iBo=l(),j6=a("li"),Bse=a("strong"),dBo=o("data2vec-text"),cBo=o(" \u2014 "),CD=a("a"),fBo=o("Data2VecTextForTokenClassification"),mBo=o(" (Data2VecText model)"),gBo=l(),q6=a("li"),xse=a("strong"),hBo=o("deberta"),pBo=o(" \u2014 "),MD=a("a"),_Bo=o("DebertaForTokenClassification"),uBo=o(" (DeBERTa model)"),bBo=l(),G6=a("li"),kse=a("strong"),vBo=o("deberta-v2"),TBo=o(" \u2014 "),ED=a("a"),FBo=o("DebertaV2ForTokenClassification"),CBo=o(" (DeBERTa-v2 model)"),MBo=l(),O6=a("li"),Rse=a("strong"),EBo=o("distilbert"),yBo=o(" \u2014 "),yD=a("a"),wBo=o("DistilBertForTokenClassification"),ABo=o(" (DistilBERT model)"),LBo=l(),X6=a("li"),Sse=a("strong"),BBo=o("electra"),xBo=o(" \u2014 "),wD=a("a"),kBo=o("ElectraForTokenClassification"),RBo=o(" (ELECTRA model)"),SBo=l(),V6=a("li"),Pse=a("strong"),PBo=o("flaubert"),$Bo=o(" \u2014 "),AD=a("a"),IBo=o("FlaubertForTokenClassification"),NBo=o(" (FlauBERT model)"),DBo=l(),z6=a("li"),$se=a("strong"),jBo=o("fnet"),qBo=o(" \u2014 "),LD=a("a"),GBo=o("FNetForTokenClassification"),OBo=o(" (FNet model)"),XBo=l(),W6=a("li"),Ise=a("strong"),VBo=o("funnel"),zBo=o(" \u2014 "),BD=a("a"),WBo=o("FunnelForTokenClassification"),QBo=o(" (Funnel Transformer model)"),HBo=l(),Q6=a("li"),Nse=a("strong"),UBo=o("gpt2"),JBo=o(" \u2014 "),xD=a("a"),YBo=o("GPT2ForTokenClassification"),KBo=o(" (OpenAI GPT-2 model)"),ZBo=l(),H6=a("li"),Dse=a("strong"),exo=o("ibert"),oxo=o(" \u2014 "),kD=a("a"),rxo=o("IBertForTokenClassification"),txo=o(" (I-BERT model)"),axo=l(),U6=a("li"),jse=a("strong"),nxo=o("layoutlm"),sxo=o(" \u2014 "),RD=a("a"),lxo=o("LayoutLMForTokenClassification"),ixo=o(" (LayoutLM model)"),dxo=l(),J6=a("li"),qse=a("strong"),cxo=o("layoutlmv2"),fxo=o(" \u2014 "),SD=a("a"),mxo=o("LayoutLMv2ForTokenClassification"),gxo=o(" (LayoutLMv2 model)"),hxo=l(),Y6=a("li"),Gse=a("strong"),pxo=o("longformer"),_xo=o(" \u2014 "),PD=a("a"),uxo=o("LongformerForTokenClassification"),bxo=o(" (Longformer model)"),vxo=l(),K6=a("li"),Ose=a("strong"),Txo=o("megatron-bert"),Fxo=o(" \u2014 "),$D=a("a"),Cxo=o("MegatronBertForTokenClassification"),Mxo=o(" (MegatronBert model)"),Exo=l(),Z6=a("li"),Xse=a("strong"),yxo=o("mobilebert"),wxo=o(" \u2014 "),ID=a("a"),Axo=o("MobileBertForTokenClassification"),Lxo=o(" (MobileBERT model)"),Bxo=l(),eb=a("li"),Vse=a("strong"),xxo=o("mpnet"),kxo=o(" \u2014 "),ND=a("a"),Rxo=o("MPNetForTokenClassification"),Sxo=o(" (MPNet model)"),Pxo=l(),ob=a("li"),zse=a("strong"),$xo=o("nystromformer"),Ixo=o(" \u2014 "),DD=a("a"),Nxo=o("NystromformerForTokenClassification"),Dxo=o(" (Nystromformer model)"),jxo=l(),rb=a("li"),Wse=a("strong"),qxo=o("qdqbert"),Gxo=o(" \u2014 "),jD=a("a"),Oxo=o("QDQBertForTokenClassification"),Xxo=o(" (QDQBert model)"),Vxo=l(),tb=a("li"),Qse=a("strong"),zxo=o("rembert"),Wxo=o(" \u2014 "),qD=a("a"),Qxo=o("RemBertForTokenClassification"),Hxo=o(" (RemBERT model)"),Uxo=l(),ab=a("li"),Hse=a("strong"),Jxo=o("roberta"),Yxo=o(" \u2014 "),GD=a("a"),Kxo=o("RobertaForTokenClassification"),Zxo=o(" (RoBERTa model)"),eko=l(),nb=a("li"),Use=a("strong"),oko=o("roformer"),rko=o(" \u2014 "),OD=a("a"),tko=o("RoFormerForTokenClassification"),ako=o(" (RoFormer model)"),nko=l(),sb=a("li"),Jse=a("strong"),sko=o("squeezebert"),lko=o(" \u2014 "),XD=a("a"),iko=o("SqueezeBertForTokenClassification"),dko=o(" (SqueezeBERT model)"),cko=l(),lb=a("li"),Yse=a("strong"),fko=o("xlm"),mko=o(" \u2014 "),VD=a("a"),gko=o("XLMForTokenClassification"),hko=o(" (XLM model)"),pko=l(),ib=a("li"),Kse=a("strong"),_ko=o("xlm-roberta"),uko=o(" \u2014 "),zD=a("a"),bko=o("XLMRobertaForTokenClassification"),vko=o(" (XLM-RoBERTa model)"),Tko=l(),db=a("li"),Zse=a("strong"),Fko=o("xlm-roberta-xl"),Cko=o(" \u2014 "),WD=a("a"),Mko=o("XLMRobertaXLForTokenClassification"),Eko=o(" (XLM-RoBERTa-XL model)"),yko=l(),cb=a("li"),ele=a("strong"),wko=o("xlnet"),Ako=o(" \u2014 "),QD=a("a"),Lko=o("XLNetForTokenClassification"),Bko=o(" (XLNet model)"),xko=l(),fb=a("li"),ole=a("strong"),kko=o("yoso"),Rko=o(" \u2014 "),HD=a("a"),Sko=o("YosoForTokenClassification"),Pko=o(" (YOSO model)"),$ko=l(),mb=a("p"),Iko=o("The model is set in evaluation mode by default using "),rle=a("code"),Nko=o("model.eval()"),Dko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tle=a("code"),jko=o("model.train()"),qko=l(),ale=a("p"),Gko=o("Examples:"),Oko=l(),f(Yy.$$.fragment),Qke=l(),Md=a("h2"),gb=a("a"),nle=a("span"),f(Ky.$$.fragment),Xko=l(),sle=a("span"),Vko=o("AutoModelForQuestionAnswering"),Hke=l(),nr=a("div"),f(Zy.$$.fragment),zko=l(),Ed=a("p"),Wko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),lle=a("code"),Qko=o("from_pretrained()"),Hko=o("class method or the "),ile=a("code"),Uko=o("from_config()"),Jko=o(`class
method.`),Yko=l(),ew=a("p"),Kko=o("This class cannot be instantiated directly using "),dle=a("code"),Zko=o("__init__()"),eRo=o(" (throws an error)."),oRo=l(),Zr=a("div"),f(ow.$$.fragment),rRo=l(),cle=a("p"),tRo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aRo=l(),yd=a("p"),nRo=o(`Note:
Loading a model from its configuration file does `),fle=a("strong"),sRo=o("not"),lRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mle=a("code"),iRo=o("from_pretrained()"),dRo=o("to load the model weights."),cRo=l(),gle=a("p"),fRo=o("Examples:"),mRo=l(),f(rw.$$.fragment),gRo=l(),We=a("div"),f(tw.$$.fragment),hRo=l(),hle=a("p"),pRo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_Ro=l(),Za=a("p"),uRo=o("The model class to instantiate is selected based on the "),ple=a("code"),bRo=o("model_type"),vRo=o(` property of the config object (either
passed as an argument or loaded from `),_le=a("code"),TRo=o("pretrained_model_name_or_path"),FRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ule=a("code"),CRo=o("pretrained_model_name_or_path"),MRo=o(":"),ERo=l(),R=a("ul"),hb=a("li"),ble=a("strong"),yRo=o("albert"),wRo=o(" \u2014 "),UD=a("a"),ARo=o("AlbertForQuestionAnswering"),LRo=o(" (ALBERT model)"),BRo=l(),pb=a("li"),vle=a("strong"),xRo=o("bart"),kRo=o(" \u2014 "),JD=a("a"),RRo=o("BartForQuestionAnswering"),SRo=o(" (BART model)"),PRo=l(),_b=a("li"),Tle=a("strong"),$Ro=o("bert"),IRo=o(" \u2014 "),YD=a("a"),NRo=o("BertForQuestionAnswering"),DRo=o(" (BERT model)"),jRo=l(),ub=a("li"),Fle=a("strong"),qRo=o("big_bird"),GRo=o(" \u2014 "),KD=a("a"),ORo=o("BigBirdForQuestionAnswering"),XRo=o(" (BigBird model)"),VRo=l(),bb=a("li"),Cle=a("strong"),zRo=o("bigbird_pegasus"),WRo=o(" \u2014 "),ZD=a("a"),QRo=o("BigBirdPegasusForQuestionAnswering"),HRo=o(" (BigBirdPegasus model)"),URo=l(),vb=a("li"),Mle=a("strong"),JRo=o("camembert"),YRo=o(" \u2014 "),ej=a("a"),KRo=o("CamembertForQuestionAnswering"),ZRo=o(" (CamemBERT model)"),eSo=l(),Tb=a("li"),Ele=a("strong"),oSo=o("canine"),rSo=o(" \u2014 "),oj=a("a"),tSo=o("CanineForQuestionAnswering"),aSo=o(" (Canine model)"),nSo=l(),Fb=a("li"),yle=a("strong"),sSo=o("convbert"),lSo=o(" \u2014 "),rj=a("a"),iSo=o("ConvBertForQuestionAnswering"),dSo=o(" (ConvBERT model)"),cSo=l(),Cb=a("li"),wle=a("strong"),fSo=o("data2vec-text"),mSo=o(" \u2014 "),tj=a("a"),gSo=o("Data2VecTextForQuestionAnswering"),hSo=o(" (Data2VecText model)"),pSo=l(),Mb=a("li"),Ale=a("strong"),_So=o("deberta"),uSo=o(" \u2014 "),aj=a("a"),bSo=o("DebertaForQuestionAnswering"),vSo=o(" (DeBERTa model)"),TSo=l(),Eb=a("li"),Lle=a("strong"),FSo=o("deberta-v2"),CSo=o(" \u2014 "),nj=a("a"),MSo=o("DebertaV2ForQuestionAnswering"),ESo=o(" (DeBERTa-v2 model)"),ySo=l(),yb=a("li"),Ble=a("strong"),wSo=o("distilbert"),ASo=o(" \u2014 "),sj=a("a"),LSo=o("DistilBertForQuestionAnswering"),BSo=o(" (DistilBERT model)"),xSo=l(),wb=a("li"),xle=a("strong"),kSo=o("electra"),RSo=o(" \u2014 "),lj=a("a"),SSo=o("ElectraForQuestionAnswering"),PSo=o(" (ELECTRA model)"),$So=l(),Ab=a("li"),kle=a("strong"),ISo=o("flaubert"),NSo=o(" \u2014 "),ij=a("a"),DSo=o("FlaubertForQuestionAnsweringSimple"),jSo=o(" (FlauBERT model)"),qSo=l(),Lb=a("li"),Rle=a("strong"),GSo=o("fnet"),OSo=o(" \u2014 "),dj=a("a"),XSo=o("FNetForQuestionAnswering"),VSo=o(" (FNet model)"),zSo=l(),Bb=a("li"),Sle=a("strong"),WSo=o("funnel"),QSo=o(" \u2014 "),cj=a("a"),HSo=o("FunnelForQuestionAnswering"),USo=o(" (Funnel Transformer model)"),JSo=l(),xb=a("li"),Ple=a("strong"),YSo=o("gptj"),KSo=o(" \u2014 "),fj=a("a"),ZSo=o("GPTJForQuestionAnswering"),ePo=o(" (GPT-J model)"),oPo=l(),kb=a("li"),$le=a("strong"),rPo=o("ibert"),tPo=o(" \u2014 "),mj=a("a"),aPo=o("IBertForQuestionAnswering"),nPo=o(" (I-BERT model)"),sPo=l(),Rb=a("li"),Ile=a("strong"),lPo=o("layoutlmv2"),iPo=o(" \u2014 "),gj=a("a"),dPo=o("LayoutLMv2ForQuestionAnswering"),cPo=o(" (LayoutLMv2 model)"),fPo=l(),Sb=a("li"),Nle=a("strong"),mPo=o("led"),gPo=o(" \u2014 "),hj=a("a"),hPo=o("LEDForQuestionAnswering"),pPo=o(" (LED model)"),_Po=l(),Pb=a("li"),Dle=a("strong"),uPo=o("longformer"),bPo=o(" \u2014 "),pj=a("a"),vPo=o("LongformerForQuestionAnswering"),TPo=o(" (Longformer model)"),FPo=l(),$b=a("li"),jle=a("strong"),CPo=o("lxmert"),MPo=o(" \u2014 "),_j=a("a"),EPo=o("LxmertForQuestionAnswering"),yPo=o(" (LXMERT model)"),wPo=l(),Ib=a("li"),qle=a("strong"),APo=o("mbart"),LPo=o(" \u2014 "),uj=a("a"),BPo=o("MBartForQuestionAnswering"),xPo=o(" (mBART model)"),kPo=l(),Nb=a("li"),Gle=a("strong"),RPo=o("megatron-bert"),SPo=o(" \u2014 "),bj=a("a"),PPo=o("MegatronBertForQuestionAnswering"),$Po=o(" (MegatronBert model)"),IPo=l(),Db=a("li"),Ole=a("strong"),NPo=o("mobilebert"),DPo=o(" \u2014 "),vj=a("a"),jPo=o("MobileBertForQuestionAnswering"),qPo=o(" (MobileBERT model)"),GPo=l(),jb=a("li"),Xle=a("strong"),OPo=o("mpnet"),XPo=o(" \u2014 "),Tj=a("a"),VPo=o("MPNetForQuestionAnswering"),zPo=o(" (MPNet model)"),WPo=l(),qb=a("li"),Vle=a("strong"),QPo=o("nystromformer"),HPo=o(" \u2014 "),Fj=a("a"),UPo=o("NystromformerForQuestionAnswering"),JPo=o(" (Nystromformer model)"),YPo=l(),Gb=a("li"),zle=a("strong"),KPo=o("qdqbert"),ZPo=o(" \u2014 "),Cj=a("a"),e$o=o("QDQBertForQuestionAnswering"),o$o=o(" (QDQBert model)"),r$o=l(),Ob=a("li"),Wle=a("strong"),t$o=o("reformer"),a$o=o(" \u2014 "),Mj=a("a"),n$o=o("ReformerForQuestionAnswering"),s$o=o(" (Reformer model)"),l$o=l(),Xb=a("li"),Qle=a("strong"),i$o=o("rembert"),d$o=o(" \u2014 "),Ej=a("a"),c$o=o("RemBertForQuestionAnswering"),f$o=o(" (RemBERT model)"),m$o=l(),Vb=a("li"),Hle=a("strong"),g$o=o("roberta"),h$o=o(" \u2014 "),yj=a("a"),p$o=o("RobertaForQuestionAnswering"),_$o=o(" (RoBERTa model)"),u$o=l(),zb=a("li"),Ule=a("strong"),b$o=o("roformer"),v$o=o(" \u2014 "),wj=a("a"),T$o=o("RoFormerForQuestionAnswering"),F$o=o(" (RoFormer model)"),C$o=l(),Wb=a("li"),Jle=a("strong"),M$o=o("splinter"),E$o=o(" \u2014 "),Aj=a("a"),y$o=o("SplinterForQuestionAnswering"),w$o=o(" (Splinter model)"),A$o=l(),Qb=a("li"),Yle=a("strong"),L$o=o("squeezebert"),B$o=o(" \u2014 "),Lj=a("a"),x$o=o("SqueezeBertForQuestionAnswering"),k$o=o(" (SqueezeBERT model)"),R$o=l(),Hb=a("li"),Kle=a("strong"),S$o=o("xlm"),P$o=o(" \u2014 "),Bj=a("a"),$$o=o("XLMForQuestionAnsweringSimple"),I$o=o(" (XLM model)"),N$o=l(),Ub=a("li"),Zle=a("strong"),D$o=o("xlm-roberta"),j$o=o(" \u2014 "),xj=a("a"),q$o=o("XLMRobertaForQuestionAnswering"),G$o=o(" (XLM-RoBERTa model)"),O$o=l(),Jb=a("li"),eie=a("strong"),X$o=o("xlm-roberta-xl"),V$o=o(" \u2014 "),kj=a("a"),z$o=o("XLMRobertaXLForQuestionAnswering"),W$o=o(" (XLM-RoBERTa-XL model)"),Q$o=l(),Yb=a("li"),oie=a("strong"),H$o=o("xlnet"),U$o=o(" \u2014 "),Rj=a("a"),J$o=o("XLNetForQuestionAnsweringSimple"),Y$o=o(" (XLNet model)"),K$o=l(),Kb=a("li"),rie=a("strong"),Z$o=o("yoso"),eIo=o(" \u2014 "),Sj=a("a"),oIo=o("YosoForQuestionAnswering"),rIo=o(" (YOSO model)"),tIo=l(),Zb=a("p"),aIo=o("The model is set in evaluation mode by default using "),tie=a("code"),nIo=o("model.eval()"),sIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aie=a("code"),lIo=o("model.train()"),iIo=l(),nie=a("p"),dIo=o("Examples:"),cIo=l(),f(aw.$$.fragment),Uke=l(),wd=a("h2"),ev=a("a"),sie=a("span"),f(nw.$$.fragment),fIo=l(),lie=a("span"),mIo=o("AutoModelForTableQuestionAnswering"),Jke=l(),sr=a("div"),f(sw.$$.fragment),gIo=l(),Ad=a("p"),hIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iie=a("code"),pIo=o("from_pretrained()"),_Io=o("class method or the "),die=a("code"),uIo=o("from_config()"),bIo=o(`class
method.`),vIo=l(),lw=a("p"),TIo=o("This class cannot be instantiated directly using "),cie=a("code"),FIo=o("__init__()"),CIo=o(" (throws an error)."),MIo=l(),et=a("div"),f(iw.$$.fragment),EIo=l(),fie=a("p"),yIo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),wIo=l(),Ld=a("p"),AIo=o(`Note:
Loading a model from its configuration file does `),mie=a("strong"),LIo=o("not"),BIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gie=a("code"),xIo=o("from_pretrained()"),kIo=o("to load the model weights."),RIo=l(),hie=a("p"),SIo=o("Examples:"),PIo=l(),f(dw.$$.fragment),$Io=l(),Qe=a("div"),f(cw.$$.fragment),IIo=l(),pie=a("p"),NIo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),DIo=l(),en=a("p"),jIo=o("The model class to instantiate is selected based on the "),_ie=a("code"),qIo=o("model_type"),GIo=o(` property of the config object (either
passed as an argument or loaded from `),uie=a("code"),OIo=o("pretrained_model_name_or_path"),XIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bie=a("code"),VIo=o("pretrained_model_name_or_path"),zIo=o(":"),WIo=l(),vie=a("ul"),ov=a("li"),Tie=a("strong"),QIo=o("tapas"),HIo=o(" \u2014 "),Pj=a("a"),UIo=o("TapasForQuestionAnswering"),JIo=o(" (TAPAS model)"),YIo=l(),rv=a("p"),KIo=o("The model is set in evaluation mode by default using "),Fie=a("code"),ZIo=o("model.eval()"),eNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cie=a("code"),oNo=o("model.train()"),rNo=l(),Mie=a("p"),tNo=o("Examples:"),aNo=l(),f(fw.$$.fragment),Yke=l(),Bd=a("h2"),tv=a("a"),Eie=a("span"),f(mw.$$.fragment),nNo=l(),yie=a("span"),sNo=o("AutoModelForImageClassification"),Kke=l(),lr=a("div"),f(gw.$$.fragment),lNo=l(),xd=a("p"),iNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wie=a("code"),dNo=o("from_pretrained()"),cNo=o("class method or the "),Aie=a("code"),fNo=o("from_config()"),mNo=o(`class
method.`),gNo=l(),hw=a("p"),hNo=o("This class cannot be instantiated directly using "),Lie=a("code"),pNo=o("__init__()"),_No=o(" (throws an error)."),uNo=l(),ot=a("div"),f(pw.$$.fragment),bNo=l(),Bie=a("p"),vNo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),TNo=l(),kd=a("p"),FNo=o(`Note:
Loading a model from its configuration file does `),xie=a("strong"),CNo=o("not"),MNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kie=a("code"),ENo=o("from_pretrained()"),yNo=o("to load the model weights."),wNo=l(),Rie=a("p"),ANo=o("Examples:"),LNo=l(),f(_w.$$.fragment),BNo=l(),He=a("div"),f(uw.$$.fragment),xNo=l(),Sie=a("p"),kNo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),RNo=l(),on=a("p"),SNo=o("The model class to instantiate is selected based on the "),Pie=a("code"),PNo=o("model_type"),$No=o(` property of the config object (either
passed as an argument or loaded from `),$ie=a("code"),INo=o("pretrained_model_name_or_path"),NNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iie=a("code"),DNo=o("pretrained_model_name_or_path"),jNo=o(":"),qNo=l(),ce=a("ul"),av=a("li"),Nie=a("strong"),GNo=o("beit"),ONo=o(" \u2014 "),$j=a("a"),XNo=o("BeitForImageClassification"),VNo=o(" (BEiT model)"),zNo=l(),nv=a("li"),Die=a("strong"),WNo=o("convnext"),QNo=o(" \u2014 "),Ij=a("a"),HNo=o("ConvNextForImageClassification"),UNo=o(" (ConvNext model)"),JNo=l(),qs=a("li"),jie=a("strong"),YNo=o("deit"),KNo=o(" \u2014 "),Nj=a("a"),ZNo=o("DeiTForImageClassification"),eDo=o(" or "),Dj=a("a"),oDo=o("DeiTForImageClassificationWithTeacher"),rDo=o(" (DeiT model)"),tDo=l(),sv=a("li"),qie=a("strong"),aDo=o("imagegpt"),nDo=o(" \u2014 "),jj=a("a"),sDo=o("ImageGPTForImageClassification"),lDo=o(" (ImageGPT model)"),iDo=l(),ma=a("li"),Gie=a("strong"),dDo=o("perceiver"),cDo=o(" \u2014 "),qj=a("a"),fDo=o("PerceiverForImageClassificationLearned"),mDo=o(" or "),Gj=a("a"),gDo=o("PerceiverForImageClassificationFourier"),hDo=o(" or "),Oj=a("a"),pDo=o("PerceiverForImageClassificationConvProcessing"),_Do=o(" (Perceiver model)"),uDo=l(),lv=a("li"),Oie=a("strong"),bDo=o("poolformer"),vDo=o(" \u2014 "),Xj=a("a"),TDo=o("PoolFormerForImageClassification"),FDo=o(" (PoolFormer model)"),CDo=l(),iv=a("li"),Xie=a("strong"),MDo=o("resnet"),EDo=o(" \u2014 "),Vj=a("a"),yDo=o("ResNetForImageClassification"),wDo=o(" (ResNet model)"),ADo=l(),dv=a("li"),Vie=a("strong"),LDo=o("resnetd"),BDo=o(" \u2014 "),zj=a("a"),xDo=o("ResNetDForImageClassification"),kDo=o(" (ResNet-D model)"),RDo=l(),cv=a("li"),zie=a("strong"),SDo=o("segformer"),PDo=o(" \u2014 "),Wj=a("a"),$Do=o("SegformerForImageClassification"),IDo=o(" (SegFormer model)"),NDo=l(),fv=a("li"),Wie=a("strong"),DDo=o("swin"),jDo=o(" \u2014 "),Qj=a("a"),qDo=o("SwinForImageClassification"),GDo=o(" (Swin model)"),ODo=l(),mv=a("li"),Qie=a("strong"),XDo=o("van"),VDo=o(" \u2014 "),Hj=a("a"),zDo=o("VanForImageClassification"),WDo=o(" (VAN model)"),QDo=l(),gv=a("li"),Hie=a("strong"),HDo=o("vit"),UDo=o(" \u2014 "),Uj=a("a"),JDo=o("ViTForImageClassification"),YDo=o(" (ViT model)"),KDo=l(),hv=a("p"),ZDo=o("The model is set in evaluation mode by default using "),Uie=a("code"),ejo=o("model.eval()"),ojo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jie=a("code"),rjo=o("model.train()"),tjo=l(),Yie=a("p"),ajo=o("Examples:"),njo=l(),f(bw.$$.fragment),Zke=l(),Rd=a("h2"),pv=a("a"),Kie=a("span"),f(vw.$$.fragment),sjo=l(),Zie=a("span"),ljo=o("AutoModelForVision2Seq"),eRe=l(),ir=a("div"),f(Tw.$$.fragment),ijo=l(),Sd=a("p"),djo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ede=a("code"),cjo=o("from_pretrained()"),fjo=o("class method or the "),ode=a("code"),mjo=o("from_config()"),gjo=o(`class
method.`),hjo=l(),Fw=a("p"),pjo=o("This class cannot be instantiated directly using "),rde=a("code"),_jo=o("__init__()"),ujo=o(" (throws an error)."),bjo=l(),rt=a("div"),f(Cw.$$.fragment),vjo=l(),tde=a("p"),Tjo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Fjo=l(),Pd=a("p"),Cjo=o(`Note:
Loading a model from its configuration file does `),ade=a("strong"),Mjo=o("not"),Ejo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nde=a("code"),yjo=o("from_pretrained()"),wjo=o("to load the model weights."),Ajo=l(),sde=a("p"),Ljo=o("Examples:"),Bjo=l(),f(Mw.$$.fragment),xjo=l(),Ue=a("div"),f(Ew.$$.fragment),kjo=l(),lde=a("p"),Rjo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Sjo=l(),rn=a("p"),Pjo=o("The model class to instantiate is selected based on the "),ide=a("code"),$jo=o("model_type"),Ijo=o(` property of the config object (either
passed as an argument or loaded from `),dde=a("code"),Njo=o("pretrained_model_name_or_path"),Djo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=a("code"),jjo=o("pretrained_model_name_or_path"),qjo=o(":"),Gjo=l(),fde=a("ul"),_v=a("li"),mde=a("strong"),Ojo=o("vision-encoder-decoder"),Xjo=o(" \u2014 "),Jj=a("a"),Vjo=o("VisionEncoderDecoderModel"),zjo=o(" (Vision Encoder decoder model)"),Wjo=l(),uv=a("p"),Qjo=o("The model is set in evaluation mode by default using "),gde=a("code"),Hjo=o("model.eval()"),Ujo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hde=a("code"),Jjo=o("model.train()"),Yjo=l(),pde=a("p"),Kjo=o("Examples:"),Zjo=l(),f(yw.$$.fragment),oRe=l(),$d=a("h2"),bv=a("a"),_de=a("span"),f(ww.$$.fragment),eqo=l(),ude=a("span"),oqo=o("AutoModelForAudioClassification"),rRe=l(),dr=a("div"),f(Aw.$$.fragment),rqo=l(),Id=a("p"),tqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),bde=a("code"),aqo=o("from_pretrained()"),nqo=o("class method or the "),vde=a("code"),sqo=o("from_config()"),lqo=o(`class
method.`),iqo=l(),Lw=a("p"),dqo=o("This class cannot be instantiated directly using "),Tde=a("code"),cqo=o("__init__()"),fqo=o(" (throws an error)."),mqo=l(),tt=a("div"),f(Bw.$$.fragment),gqo=l(),Fde=a("p"),hqo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),pqo=l(),Nd=a("p"),_qo=o(`Note:
Loading a model from its configuration file does `),Cde=a("strong"),uqo=o("not"),bqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mde=a("code"),vqo=o("from_pretrained()"),Tqo=o("to load the model weights."),Fqo=l(),Ede=a("p"),Cqo=o("Examples:"),Mqo=l(),f(xw.$$.fragment),Eqo=l(),Je=a("div"),f(kw.$$.fragment),yqo=l(),yde=a("p"),wqo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Aqo=l(),tn=a("p"),Lqo=o("The model class to instantiate is selected based on the "),wde=a("code"),Bqo=o("model_type"),xqo=o(` property of the config object (either
passed as an argument or loaded from `),Ade=a("code"),kqo=o("pretrained_model_name_or_path"),Rqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lde=a("code"),Sqo=o("pretrained_model_name_or_path"),Pqo=o(":"),$qo=l(),ke=a("ul"),vv=a("li"),Bde=a("strong"),Iqo=o("data2vec-audio"),Nqo=o(" \u2014 "),Yj=a("a"),Dqo=o("Data2VecAudioForSequenceClassification"),jqo=o(" (Data2VecAudio model)"),qqo=l(),Tv=a("li"),xde=a("strong"),Gqo=o("hubert"),Oqo=o(" \u2014 "),Kj=a("a"),Xqo=o("HubertForSequenceClassification"),Vqo=o(" (Hubert model)"),zqo=l(),Fv=a("li"),kde=a("strong"),Wqo=o("sew"),Qqo=o(" \u2014 "),Zj=a("a"),Hqo=o("SEWForSequenceClassification"),Uqo=o(" (SEW model)"),Jqo=l(),Cv=a("li"),Rde=a("strong"),Yqo=o("sew-d"),Kqo=o(" \u2014 "),eq=a("a"),Zqo=o("SEWDForSequenceClassification"),eGo=o(" (SEW-D model)"),oGo=l(),Mv=a("li"),Sde=a("strong"),rGo=o("unispeech"),tGo=o(" \u2014 "),oq=a("a"),aGo=o("UniSpeechForSequenceClassification"),nGo=o(" (UniSpeech model)"),sGo=l(),Ev=a("li"),Pde=a("strong"),lGo=o("unispeech-sat"),iGo=o(" \u2014 "),rq=a("a"),dGo=o("UniSpeechSatForSequenceClassification"),cGo=o(" (UniSpeechSat model)"),fGo=l(),yv=a("li"),$de=a("strong"),mGo=o("wav2vec2"),gGo=o(" \u2014 "),tq=a("a"),hGo=o("Wav2Vec2ForSequenceClassification"),pGo=o(" (Wav2Vec2 model)"),_Go=l(),wv=a("li"),Ide=a("strong"),uGo=o("wavlm"),bGo=o(" \u2014 "),aq=a("a"),vGo=o("WavLMForSequenceClassification"),TGo=o(" (WavLM model)"),FGo=l(),Av=a("p"),CGo=o("The model is set in evaluation mode by default using "),Nde=a("code"),MGo=o("model.eval()"),EGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dde=a("code"),yGo=o("model.train()"),wGo=l(),jde=a("p"),AGo=o("Examples:"),LGo=l(),f(Rw.$$.fragment),tRe=l(),Dd=a("h2"),Lv=a("a"),qde=a("span"),f(Sw.$$.fragment),BGo=l(),Gde=a("span"),xGo=o("AutoModelForAudioFrameClassification"),aRe=l(),cr=a("div"),f(Pw.$$.fragment),kGo=l(),jd=a("p"),RGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Ode=a("code"),SGo=o("from_pretrained()"),PGo=o("class method or the "),Xde=a("code"),$Go=o("from_config()"),IGo=o(`class
method.`),NGo=l(),$w=a("p"),DGo=o("This class cannot be instantiated directly using "),Vde=a("code"),jGo=o("__init__()"),qGo=o(" (throws an error)."),GGo=l(),at=a("div"),f(Iw.$$.fragment),OGo=l(),zde=a("p"),XGo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),VGo=l(),qd=a("p"),zGo=o(`Note:
Loading a model from its configuration file does `),Wde=a("strong"),WGo=o("not"),QGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qde=a("code"),HGo=o("from_pretrained()"),UGo=o("to load the model weights."),JGo=l(),Hde=a("p"),YGo=o("Examples:"),KGo=l(),f(Nw.$$.fragment),ZGo=l(),Ye=a("div"),f(Dw.$$.fragment),eOo=l(),Ude=a("p"),oOo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),rOo=l(),an=a("p"),tOo=o("The model class to instantiate is selected based on the "),Jde=a("code"),aOo=o("model_type"),nOo=o(` property of the config object (either
passed as an argument or loaded from `),Yde=a("code"),sOo=o("pretrained_model_name_or_path"),lOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kde=a("code"),iOo=o("pretrained_model_name_or_path"),dOo=o(":"),cOo=l(),nn=a("ul"),Bv=a("li"),Zde=a("strong"),fOo=o("data2vec-audio"),mOo=o(" \u2014 "),nq=a("a"),gOo=o("Data2VecAudioForAudioFrameClassification"),hOo=o(" (Data2VecAudio model)"),pOo=l(),xv=a("li"),ece=a("strong"),_Oo=o("unispeech-sat"),uOo=o(" \u2014 "),sq=a("a"),bOo=o("UniSpeechSatForAudioFrameClassification"),vOo=o(" (UniSpeechSat model)"),TOo=l(),kv=a("li"),oce=a("strong"),FOo=o("wav2vec2"),COo=o(" \u2014 "),lq=a("a"),MOo=o("Wav2Vec2ForAudioFrameClassification"),EOo=o(" (Wav2Vec2 model)"),yOo=l(),Rv=a("li"),rce=a("strong"),wOo=o("wavlm"),AOo=o(" \u2014 "),iq=a("a"),LOo=o("WavLMForAudioFrameClassification"),BOo=o(" (WavLM model)"),xOo=l(),Sv=a("p"),kOo=o("The model is set in evaluation mode by default using "),tce=a("code"),ROo=o("model.eval()"),SOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ace=a("code"),POo=o("model.train()"),$Oo=l(),nce=a("p"),IOo=o("Examples:"),NOo=l(),f(jw.$$.fragment),nRe=l(),Gd=a("h2"),Pv=a("a"),sce=a("span"),f(qw.$$.fragment),DOo=l(),lce=a("span"),jOo=o("AutoModelForCTC"),sRe=l(),fr=a("div"),f(Gw.$$.fragment),qOo=l(),Od=a("p"),GOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ice=a("code"),OOo=o("from_pretrained()"),XOo=o("class method or the "),dce=a("code"),VOo=o("from_config()"),zOo=o(`class
method.`),WOo=l(),Ow=a("p"),QOo=o("This class cannot be instantiated directly using "),cce=a("code"),HOo=o("__init__()"),UOo=o(" (throws an error)."),JOo=l(),nt=a("div"),f(Xw.$$.fragment),YOo=l(),fce=a("p"),KOo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ZOo=l(),Xd=a("p"),eXo=o(`Note:
Loading a model from its configuration file does `),mce=a("strong"),oXo=o("not"),rXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gce=a("code"),tXo=o("from_pretrained()"),aXo=o("to load the model weights."),nXo=l(),hce=a("p"),sXo=o("Examples:"),lXo=l(),f(Vw.$$.fragment),iXo=l(),Ke=a("div"),f(zw.$$.fragment),dXo=l(),pce=a("p"),cXo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),fXo=l(),sn=a("p"),mXo=o("The model class to instantiate is selected based on the "),_ce=a("code"),gXo=o("model_type"),hXo=o(` property of the config object (either
passed as an argument or loaded from `),uce=a("code"),pXo=o("pretrained_model_name_or_path"),_Xo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=a("code"),uXo=o("pretrained_model_name_or_path"),bXo=o(":"),vXo=l(),Re=a("ul"),$v=a("li"),vce=a("strong"),TXo=o("data2vec-audio"),FXo=o(" \u2014 "),dq=a("a"),CXo=o("Data2VecAudioForCTC"),MXo=o(" (Data2VecAudio model)"),EXo=l(),Iv=a("li"),Tce=a("strong"),yXo=o("hubert"),wXo=o(" \u2014 "),cq=a("a"),AXo=o("HubertForCTC"),LXo=o(" (Hubert model)"),BXo=l(),Nv=a("li"),Fce=a("strong"),xXo=o("sew"),kXo=o(" \u2014 "),fq=a("a"),RXo=o("SEWForCTC"),SXo=o(" (SEW model)"),PXo=l(),Dv=a("li"),Cce=a("strong"),$Xo=o("sew-d"),IXo=o(" \u2014 "),mq=a("a"),NXo=o("SEWDForCTC"),DXo=o(" (SEW-D model)"),jXo=l(),jv=a("li"),Mce=a("strong"),qXo=o("unispeech"),GXo=o(" \u2014 "),gq=a("a"),OXo=o("UniSpeechForCTC"),XXo=o(" (UniSpeech model)"),VXo=l(),qv=a("li"),Ece=a("strong"),zXo=o("unispeech-sat"),WXo=o(" \u2014 "),hq=a("a"),QXo=o("UniSpeechSatForCTC"),HXo=o(" (UniSpeechSat model)"),UXo=l(),Gv=a("li"),yce=a("strong"),JXo=o("wav2vec2"),YXo=o(" \u2014 "),pq=a("a"),KXo=o("Wav2Vec2ForCTC"),ZXo=o(" (Wav2Vec2 model)"),eVo=l(),Ov=a("li"),wce=a("strong"),oVo=o("wavlm"),rVo=o(" \u2014 "),_q=a("a"),tVo=o("WavLMForCTC"),aVo=o(" (WavLM model)"),nVo=l(),Xv=a("p"),sVo=o("The model is set in evaluation mode by default using "),Ace=a("code"),lVo=o("model.eval()"),iVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=a("code"),dVo=o("model.train()"),cVo=l(),Bce=a("p"),fVo=o("Examples:"),mVo=l(),f(Ww.$$.fragment),lRe=l(),Vd=a("h2"),Vv=a("a"),xce=a("span"),f(Qw.$$.fragment),gVo=l(),kce=a("span"),hVo=o("AutoModelForSpeechSeq2Seq"),iRe=l(),mr=a("div"),f(Hw.$$.fragment),pVo=l(),zd=a("p"),_Vo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Rce=a("code"),uVo=o("from_pretrained()"),bVo=o("class method or the "),Sce=a("code"),vVo=o("from_config()"),TVo=o(`class
method.`),FVo=l(),Uw=a("p"),CVo=o("This class cannot be instantiated directly using "),Pce=a("code"),MVo=o("__init__()"),EVo=o(" (throws an error)."),yVo=l(),st=a("div"),f(Jw.$$.fragment),wVo=l(),$ce=a("p"),AVo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),LVo=l(),Wd=a("p"),BVo=o(`Note:
Loading a model from its configuration file does `),Ice=a("strong"),xVo=o("not"),kVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nce=a("code"),RVo=o("from_pretrained()"),SVo=o("to load the model weights."),PVo=l(),Dce=a("p"),$Vo=o("Examples:"),IVo=l(),f(Yw.$$.fragment),NVo=l(),Ze=a("div"),f(Kw.$$.fragment),DVo=l(),jce=a("p"),jVo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),qVo=l(),ln=a("p"),GVo=o("The model class to instantiate is selected based on the "),qce=a("code"),OVo=o("model_type"),XVo=o(` property of the config object (either
passed as an argument or loaded from `),Gce=a("code"),VVo=o("pretrained_model_name_or_path"),zVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=a("code"),WVo=o("pretrained_model_name_or_path"),QVo=o(":"),HVo=l(),Zw=a("ul"),zv=a("li"),Xce=a("strong"),UVo=o("speech-encoder-decoder"),JVo=o(" \u2014 "),uq=a("a"),YVo=o("SpeechEncoderDecoderModel"),KVo=o(" (Speech Encoder decoder model)"),ZVo=l(),Wv=a("li"),Vce=a("strong"),ezo=o("speech_to_text"),ozo=o(" \u2014 "),bq=a("a"),rzo=o("Speech2TextForConditionalGeneration"),tzo=o(" (Speech2Text model)"),azo=l(),Qv=a("p"),nzo=o("The model is set in evaluation mode by default using "),zce=a("code"),szo=o("model.eval()"),lzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wce=a("code"),izo=o("model.train()"),dzo=l(),Qce=a("p"),czo=o("Examples:"),fzo=l(),f(eA.$$.fragment),dRe=l(),Qd=a("h2"),Hv=a("a"),Hce=a("span"),f(oA.$$.fragment),mzo=l(),Uce=a("span"),gzo=o("AutoModelForAudioXVector"),cRe=l(),gr=a("div"),f(rA.$$.fragment),hzo=l(),Hd=a("p"),pzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Jce=a("code"),_zo=o("from_pretrained()"),uzo=o("class method or the "),Yce=a("code"),bzo=o("from_config()"),vzo=o(`class
method.`),Tzo=l(),tA=a("p"),Fzo=o("This class cannot be instantiated directly using "),Kce=a("code"),Czo=o("__init__()"),Mzo=o(" (throws an error)."),Ezo=l(),lt=a("div"),f(aA.$$.fragment),yzo=l(),Zce=a("p"),wzo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Azo=l(),Ud=a("p"),Lzo=o(`Note:
Loading a model from its configuration file does `),efe=a("strong"),Bzo=o("not"),xzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ofe=a("code"),kzo=o("from_pretrained()"),Rzo=o("to load the model weights."),Szo=l(),rfe=a("p"),Pzo=o("Examples:"),$zo=l(),f(nA.$$.fragment),Izo=l(),eo=a("div"),f(sA.$$.fragment),Nzo=l(),tfe=a("p"),Dzo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),jzo=l(),dn=a("p"),qzo=o("The model class to instantiate is selected based on the "),afe=a("code"),Gzo=o("model_type"),Ozo=o(` property of the config object (either
passed as an argument or loaded from `),nfe=a("code"),Xzo=o("pretrained_model_name_or_path"),Vzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sfe=a("code"),zzo=o("pretrained_model_name_or_path"),Wzo=o(":"),Qzo=l(),cn=a("ul"),Uv=a("li"),lfe=a("strong"),Hzo=o("data2vec-audio"),Uzo=o(" \u2014 "),vq=a("a"),Jzo=o("Data2VecAudioForXVector"),Yzo=o(" (Data2VecAudio model)"),Kzo=l(),Jv=a("li"),ife=a("strong"),Zzo=o("unispeech-sat"),eWo=o(" \u2014 "),Tq=a("a"),oWo=o("UniSpeechSatForXVector"),rWo=o(" (UniSpeechSat model)"),tWo=l(),Yv=a("li"),dfe=a("strong"),aWo=o("wav2vec2"),nWo=o(" \u2014 "),Fq=a("a"),sWo=o("Wav2Vec2ForXVector"),lWo=o(" (Wav2Vec2 model)"),iWo=l(),Kv=a("li"),cfe=a("strong"),dWo=o("wavlm"),cWo=o(" \u2014 "),Cq=a("a"),fWo=o("WavLMForXVector"),mWo=o(" (WavLM model)"),gWo=l(),Zv=a("p"),hWo=o("The model is set in evaluation mode by default using "),ffe=a("code"),pWo=o("model.eval()"),_Wo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mfe=a("code"),uWo=o("model.train()"),bWo=l(),gfe=a("p"),vWo=o("Examples:"),TWo=l(),f(lA.$$.fragment),fRe=l(),Jd=a("h2"),eT=a("a"),hfe=a("span"),f(iA.$$.fragment),FWo=l(),pfe=a("span"),CWo=o("AutoModelForMaskedImageModeling"),mRe=l(),hr=a("div"),f(dA.$$.fragment),MWo=l(),Yd=a("p"),EWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),_fe=a("code"),yWo=o("from_pretrained()"),wWo=o("class method or the "),ufe=a("code"),AWo=o("from_config()"),LWo=o(`class
method.`),BWo=l(),cA=a("p"),xWo=o("This class cannot be instantiated directly using "),bfe=a("code"),kWo=o("__init__()"),RWo=o(" (throws an error)."),SWo=l(),it=a("div"),f(fA.$$.fragment),PWo=l(),vfe=a("p"),$Wo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),IWo=l(),Kd=a("p"),NWo=o(`Note:
Loading a model from its configuration file does `),Tfe=a("strong"),DWo=o("not"),jWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ffe=a("code"),qWo=o("from_pretrained()"),GWo=o("to load the model weights."),OWo=l(),Cfe=a("p"),XWo=o("Examples:"),VWo=l(),f(mA.$$.fragment),zWo=l(),oo=a("div"),f(gA.$$.fragment),WWo=l(),Mfe=a("p"),QWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),HWo=l(),fn=a("p"),UWo=o("The model class to instantiate is selected based on the "),Efe=a("code"),JWo=o("model_type"),YWo=o(` property of the config object (either
passed as an argument or loaded from `),yfe=a("code"),KWo=o("pretrained_model_name_or_path"),ZWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=a("code"),eQo=o("pretrained_model_name_or_path"),oQo=o(":"),rQo=l(),Zd=a("ul"),oT=a("li"),Afe=a("strong"),tQo=o("deit"),aQo=o(" \u2014 "),Mq=a("a"),nQo=o("DeiTForMaskedImageModeling"),sQo=o(" (DeiT model)"),lQo=l(),rT=a("li"),Lfe=a("strong"),iQo=o("swin"),dQo=o(" \u2014 "),Eq=a("a"),cQo=o("SwinForMaskedImageModeling"),fQo=o(" (Swin model)"),mQo=l(),tT=a("li"),Bfe=a("strong"),gQo=o("vit"),hQo=o(" \u2014 "),yq=a("a"),pQo=o("ViTForMaskedImageModeling"),_Qo=o(" (ViT model)"),uQo=l(),aT=a("p"),bQo=o("The model is set in evaluation mode by default using "),xfe=a("code"),vQo=o("model.eval()"),TQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kfe=a("code"),FQo=o("model.train()"),CQo=l(),Rfe=a("p"),MQo=o("Examples:"),EQo=l(),f(hA.$$.fragment),gRe=l(),ec=a("h2"),nT=a("a"),Sfe=a("span"),f(pA.$$.fragment),yQo=l(),Pfe=a("span"),wQo=o("AutoModelForObjectDetection"),hRe=l(),pr=a("div"),f(_A.$$.fragment),AQo=l(),oc=a("p"),LQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),$fe=a("code"),BQo=o("from_pretrained()"),xQo=o("class method or the "),Ife=a("code"),kQo=o("from_config()"),RQo=o(`class
method.`),SQo=l(),uA=a("p"),PQo=o("This class cannot be instantiated directly using "),Nfe=a("code"),$Qo=o("__init__()"),IQo=o(" (throws an error)."),NQo=l(),dt=a("div"),f(bA.$$.fragment),DQo=l(),Dfe=a("p"),jQo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),qQo=l(),rc=a("p"),GQo=o(`Note:
Loading a model from its configuration file does `),jfe=a("strong"),OQo=o("not"),XQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qfe=a("code"),VQo=o("from_pretrained()"),zQo=o("to load the model weights."),WQo=l(),Gfe=a("p"),QQo=o("Examples:"),HQo=l(),f(vA.$$.fragment),UQo=l(),ro=a("div"),f(TA.$$.fragment),JQo=l(),Ofe=a("p"),YQo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),KQo=l(),mn=a("p"),ZQo=o("The model class to instantiate is selected based on the "),Xfe=a("code"),eHo=o("model_type"),oHo=o(` property of the config object (either
passed as an argument or loaded from `),Vfe=a("code"),rHo=o("pretrained_model_name_or_path"),tHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=a("code"),aHo=o("pretrained_model_name_or_path"),nHo=o(":"),sHo=l(),Wfe=a("ul"),sT=a("li"),Qfe=a("strong"),lHo=o("detr"),iHo=o(" \u2014 "),wq=a("a"),dHo=o("DetrForObjectDetection"),cHo=o(" (DETR model)"),fHo=l(),lT=a("p"),mHo=o("The model is set in evaluation mode by default using "),Hfe=a("code"),gHo=o("model.eval()"),hHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ufe=a("code"),pHo=o("model.train()"),_Ho=l(),Jfe=a("p"),uHo=o("Examples:"),bHo=l(),f(FA.$$.fragment),pRe=l(),tc=a("h2"),iT=a("a"),Yfe=a("span"),f(CA.$$.fragment),vHo=l(),Kfe=a("span"),THo=o("AutoModelForImageSegmentation"),_Re=l(),_r=a("div"),f(MA.$$.fragment),FHo=l(),ac=a("p"),CHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Zfe=a("code"),MHo=o("from_pretrained()"),EHo=o("class method or the "),eme=a("code"),yHo=o("from_config()"),wHo=o(`class
method.`),AHo=l(),EA=a("p"),LHo=o("This class cannot be instantiated directly using "),ome=a("code"),BHo=o("__init__()"),xHo=o(" (throws an error)."),kHo=l(),ct=a("div"),f(yA.$$.fragment),RHo=l(),rme=a("p"),SHo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),PHo=l(),nc=a("p"),$Ho=o(`Note:
Loading a model from its configuration file does `),tme=a("strong"),IHo=o("not"),NHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ame=a("code"),DHo=o("from_pretrained()"),jHo=o("to load the model weights."),qHo=l(),nme=a("p"),GHo=o("Examples:"),OHo=l(),f(wA.$$.fragment),XHo=l(),to=a("div"),f(AA.$$.fragment),VHo=l(),sme=a("p"),zHo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),WHo=l(),gn=a("p"),QHo=o("The model class to instantiate is selected based on the "),lme=a("code"),HHo=o("model_type"),UHo=o(` property of the config object (either
passed as an argument or loaded from `),ime=a("code"),JHo=o("pretrained_model_name_or_path"),YHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=a("code"),KHo=o("pretrained_model_name_or_path"),ZHo=o(":"),eUo=l(),cme=a("ul"),dT=a("li"),fme=a("strong"),oUo=o("detr"),rUo=o(" \u2014 "),Aq=a("a"),tUo=o("DetrForSegmentation"),aUo=o(" (DETR model)"),nUo=l(),cT=a("p"),sUo=o("The model is set in evaluation mode by default using "),mme=a("code"),lUo=o("model.eval()"),iUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=a("code"),dUo=o("model.train()"),cUo=l(),hme=a("p"),fUo=o("Examples:"),mUo=l(),f(LA.$$.fragment),uRe=l(),sc=a("h2"),fT=a("a"),pme=a("span"),f(BA.$$.fragment),gUo=l(),_me=a("span"),hUo=o("AutoModelForSemanticSegmentation"),bRe=l(),ur=a("div"),f(xA.$$.fragment),pUo=l(),lc=a("p"),_Uo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ume=a("code"),uUo=o("from_pretrained()"),bUo=o("class method or the "),bme=a("code"),vUo=o("from_config()"),TUo=o(`class
method.`),FUo=l(),kA=a("p"),CUo=o("This class cannot be instantiated directly using "),vme=a("code"),MUo=o("__init__()"),EUo=o(" (throws an error)."),yUo=l(),ft=a("div"),f(RA.$$.fragment),wUo=l(),Tme=a("p"),AUo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),LUo=l(),ic=a("p"),BUo=o(`Note:
Loading a model from its configuration file does `),Fme=a("strong"),xUo=o("not"),kUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cme=a("code"),RUo=o("from_pretrained()"),SUo=o("to load the model weights."),PUo=l(),Mme=a("p"),$Uo=o("Examples:"),IUo=l(),f(SA.$$.fragment),NUo=l(),ao=a("div"),f(PA.$$.fragment),DUo=l(),Eme=a("p"),jUo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),qUo=l(),hn=a("p"),GUo=o("The model class to instantiate is selected based on the "),yme=a("code"),OUo=o("model_type"),XUo=o(` property of the config object (either
passed as an argument or loaded from `),wme=a("code"),VUo=o("pretrained_model_name_or_path"),zUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=a("code"),WUo=o("pretrained_model_name_or_path"),QUo=o(":"),HUo=l(),$A=a("ul"),mT=a("li"),Lme=a("strong"),UUo=o("beit"),JUo=o(" \u2014 "),Lq=a("a"),YUo=o("BeitForSemanticSegmentation"),KUo=o(" (BEiT model)"),ZUo=l(),gT=a("li"),Bme=a("strong"),eJo=o("segformer"),oJo=o(" \u2014 "),Bq=a("a"),rJo=o("SegformerForSemanticSegmentation"),tJo=o(" (SegFormer model)"),aJo=l(),hT=a("p"),nJo=o("The model is set in evaluation mode by default using "),xme=a("code"),sJo=o("model.eval()"),lJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=a("code"),iJo=o("model.train()"),dJo=l(),Rme=a("p"),cJo=o("Examples:"),fJo=l(),f(IA.$$.fragment),vRe=l(),dc=a("h2"),pT=a("a"),Sme=a("span"),f(NA.$$.fragment),mJo=l(),Pme=a("span"),gJo=o("AutoModelForInstanceSegmentation"),TRe=l(),br=a("div"),f(DA.$$.fragment),hJo=l(),cc=a("p"),pJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),$me=a("code"),_Jo=o("from_pretrained()"),uJo=o("class method or the "),Ime=a("code"),bJo=o("from_config()"),vJo=o(`class
method.`),TJo=l(),jA=a("p"),FJo=o("This class cannot be instantiated directly using "),Nme=a("code"),CJo=o("__init__()"),MJo=o(" (throws an error)."),EJo=l(),mt=a("div"),f(qA.$$.fragment),yJo=l(),Dme=a("p"),wJo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),AJo=l(),fc=a("p"),LJo=o(`Note:
Loading a model from its configuration file does `),jme=a("strong"),BJo=o("not"),xJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qme=a("code"),kJo=o("from_pretrained()"),RJo=o("to load the model weights."),SJo=l(),Gme=a("p"),PJo=o("Examples:"),$Jo=l(),f(GA.$$.fragment),IJo=l(),no=a("div"),f(OA.$$.fragment),NJo=l(),Ome=a("p"),DJo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),jJo=l(),pn=a("p"),qJo=o("The model class to instantiate is selected based on the "),Xme=a("code"),GJo=o("model_type"),OJo=o(` property of the config object (either
passed as an argument or loaded from `),Vme=a("code"),XJo=o("pretrained_model_name_or_path"),VJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=a("code"),zJo=o("pretrained_model_name_or_path"),WJo=o(":"),QJo=l(),Wme=a("ul"),_T=a("li"),Qme=a("strong"),HJo=o("maskformer"),UJo=o(" \u2014 "),xq=a("a"),JJo=o("MaskFormerForInstanceSegmentation"),YJo=o(" (MaskFormer model)"),KJo=l(),uT=a("p"),ZJo=o("The model is set in evaluation mode by default using "),Hme=a("code"),eYo=o("model.eval()"),oYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=a("code"),rYo=o("model.train()"),tYo=l(),Jme=a("p"),aYo=o("Examples:"),nYo=l(),f(XA.$$.fragment),FRe=l(),mc=a("h2"),bT=a("a"),Yme=a("span"),f(VA.$$.fragment),sYo=l(),Kme=a("span"),lYo=o("TFAutoModel"),CRe=l(),vr=a("div"),f(zA.$$.fragment),iYo=l(),gc=a("p"),dYo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Zme=a("code"),cYo=o("from_pretrained()"),fYo=o("class method or the "),ege=a("code"),mYo=o("from_config()"),gYo=o(`class
method.`),hYo=l(),WA=a("p"),pYo=o("This class cannot be instantiated directly using "),oge=a("code"),_Yo=o("__init__()"),uYo=o(" (throws an error)."),bYo=l(),gt=a("div"),f(QA.$$.fragment),vYo=l(),rge=a("p"),TYo=o("Instantiates one of the base model classes of the library from a configuration."),FYo=l(),hc=a("p"),CYo=o(`Note:
Loading a model from its configuration file does `),tge=a("strong"),MYo=o("not"),EYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),age=a("code"),yYo=o("from_pretrained()"),wYo=o("to load the model weights."),AYo=l(),nge=a("p"),LYo=o("Examples:"),BYo=l(),f(HA.$$.fragment),xYo=l(),ho=a("div"),f(UA.$$.fragment),kYo=l(),sge=a("p"),RYo=o("Instantiate one of the base model classes of the library from a pretrained model."),SYo=l(),_n=a("p"),PYo=o("The model class to instantiate is selected based on the "),lge=a("code"),$Yo=o("model_type"),IYo=o(` property of the config object (either
passed as an argument or loaded from `),ige=a("code"),NYo=o("pretrained_model_name_or_path"),DYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dge=a("code"),jYo=o("pretrained_model_name_or_path"),qYo=o(":"),GYo=l(),B=a("ul"),vT=a("li"),cge=a("strong"),OYo=o("albert"),XYo=o(" \u2014 "),kq=a("a"),VYo=o("TFAlbertModel"),zYo=o(" (ALBERT model)"),WYo=l(),TT=a("li"),fge=a("strong"),QYo=o("bart"),HYo=o(" \u2014 "),Rq=a("a"),UYo=o("TFBartModel"),JYo=o(" (BART model)"),YYo=l(),FT=a("li"),mge=a("strong"),KYo=o("bert"),ZYo=o(" \u2014 "),Sq=a("a"),eKo=o("TFBertModel"),oKo=o(" (BERT model)"),rKo=l(),CT=a("li"),gge=a("strong"),tKo=o("blenderbot"),aKo=o(" \u2014 "),Pq=a("a"),nKo=o("TFBlenderbotModel"),sKo=o(" (Blenderbot model)"),lKo=l(),MT=a("li"),hge=a("strong"),iKo=o("blenderbot-small"),dKo=o(" \u2014 "),$q=a("a"),cKo=o("TFBlenderbotSmallModel"),fKo=o(" (BlenderbotSmall model)"),mKo=l(),ET=a("li"),pge=a("strong"),gKo=o("camembert"),hKo=o(" \u2014 "),Iq=a("a"),pKo=o("TFCamembertModel"),_Ko=o(" (CamemBERT model)"),uKo=l(),yT=a("li"),_ge=a("strong"),bKo=o("clip"),vKo=o(" \u2014 "),Nq=a("a"),TKo=o("TFCLIPModel"),FKo=o(" (CLIP model)"),CKo=l(),wT=a("li"),uge=a("strong"),MKo=o("convbert"),EKo=o(" \u2014 "),Dq=a("a"),yKo=o("TFConvBertModel"),wKo=o(" (ConvBERT model)"),AKo=l(),AT=a("li"),bge=a("strong"),LKo=o("convnext"),BKo=o(" \u2014 "),jq=a("a"),xKo=o("TFConvNextModel"),kKo=o(" (ConvNext model)"),RKo=l(),LT=a("li"),vge=a("strong"),SKo=o("ctrl"),PKo=o(" \u2014 "),qq=a("a"),$Ko=o("TFCTRLModel"),IKo=o(" (CTRL model)"),NKo=l(),BT=a("li"),Tge=a("strong"),DKo=o("deberta"),jKo=o(" \u2014 "),Gq=a("a"),qKo=o("TFDebertaModel"),GKo=o(" (DeBERTa model)"),OKo=l(),xT=a("li"),Fge=a("strong"),XKo=o("deberta-v2"),VKo=o(" \u2014 "),Oq=a("a"),zKo=o("TFDebertaV2Model"),WKo=o(" (DeBERTa-v2 model)"),QKo=l(),kT=a("li"),Cge=a("strong"),HKo=o("distilbert"),UKo=o(" \u2014 "),Xq=a("a"),JKo=o("TFDistilBertModel"),YKo=o(" (DistilBERT model)"),KKo=l(),RT=a("li"),Mge=a("strong"),ZKo=o("dpr"),eZo=o(" \u2014 "),Vq=a("a"),oZo=o("TFDPRQuestionEncoder"),rZo=o(" (DPR model)"),tZo=l(),ST=a("li"),Ege=a("strong"),aZo=o("electra"),nZo=o(" \u2014 "),zq=a("a"),sZo=o("TFElectraModel"),lZo=o(" (ELECTRA model)"),iZo=l(),PT=a("li"),yge=a("strong"),dZo=o("flaubert"),cZo=o(" \u2014 "),Wq=a("a"),fZo=o("TFFlaubertModel"),mZo=o(" (FlauBERT model)"),gZo=l(),Gs=a("li"),wge=a("strong"),hZo=o("funnel"),pZo=o(" \u2014 "),Qq=a("a"),_Zo=o("TFFunnelModel"),uZo=o(" or "),Hq=a("a"),bZo=o("TFFunnelBaseModel"),vZo=o(" (Funnel Transformer model)"),TZo=l(),$T=a("li"),Age=a("strong"),FZo=o("gpt2"),CZo=o(" \u2014 "),Uq=a("a"),MZo=o("TFGPT2Model"),EZo=o(" (OpenAI GPT-2 model)"),yZo=l(),IT=a("li"),Lge=a("strong"),wZo=o("hubert"),AZo=o(" \u2014 "),Jq=a("a"),LZo=o("TFHubertModel"),BZo=o(" (Hubert model)"),xZo=l(),NT=a("li"),Bge=a("strong"),kZo=o("layoutlm"),RZo=o(" \u2014 "),Yq=a("a"),SZo=o("TFLayoutLMModel"),PZo=o(" (LayoutLM model)"),$Zo=l(),DT=a("li"),xge=a("strong"),IZo=o("led"),NZo=o(" \u2014 "),Kq=a("a"),DZo=o("TFLEDModel"),jZo=o(" (LED model)"),qZo=l(),jT=a("li"),kge=a("strong"),GZo=o("longformer"),OZo=o(" \u2014 "),Zq=a("a"),XZo=o("TFLongformerModel"),VZo=o(" (Longformer model)"),zZo=l(),qT=a("li"),Rge=a("strong"),WZo=o("lxmert"),QZo=o(" \u2014 "),eG=a("a"),HZo=o("TFLxmertModel"),UZo=o(" (LXMERT model)"),JZo=l(),GT=a("li"),Sge=a("strong"),YZo=o("marian"),KZo=o(" \u2014 "),oG=a("a"),ZZo=o("TFMarianModel"),eer=o(" (Marian model)"),oer=l(),OT=a("li"),Pge=a("strong"),rer=o("mbart"),ter=o(" \u2014 "),rG=a("a"),aer=o("TFMBartModel"),ner=o(" (mBART model)"),ser=l(),XT=a("li"),$ge=a("strong"),ler=o("mobilebert"),ier=o(" \u2014 "),tG=a("a"),der=o("TFMobileBertModel"),cer=o(" (MobileBERT model)"),fer=l(),VT=a("li"),Ige=a("strong"),mer=o("mpnet"),ger=o(" \u2014 "),aG=a("a"),her=o("TFMPNetModel"),per=o(" (MPNet model)"),_er=l(),zT=a("li"),Nge=a("strong"),uer=o("mt5"),ber=o(" \u2014 "),nG=a("a"),ver=o("TFMT5Model"),Ter=o(" (mT5 model)"),Fer=l(),WT=a("li"),Dge=a("strong"),Cer=o("openai-gpt"),Mer=o(" \u2014 "),sG=a("a"),Eer=o("TFOpenAIGPTModel"),yer=o(" (OpenAI GPT model)"),wer=l(),QT=a("li"),jge=a("strong"),Aer=o("pegasus"),Ler=o(" \u2014 "),lG=a("a"),Ber=o("TFPegasusModel"),xer=o(" (Pegasus model)"),ker=l(),HT=a("li"),qge=a("strong"),Rer=o("rembert"),Ser=o(" \u2014 "),iG=a("a"),Per=o("TFRemBertModel"),$er=o(" (RemBERT model)"),Ier=l(),UT=a("li"),Gge=a("strong"),Ner=o("roberta"),Der=o(" \u2014 "),dG=a("a"),jer=o("TFRobertaModel"),qer=o(" (RoBERTa model)"),Ger=l(),JT=a("li"),Oge=a("strong"),Oer=o("roformer"),Xer=o(" \u2014 "),cG=a("a"),Ver=o("TFRoFormerModel"),zer=o(" (RoFormer model)"),Wer=l(),YT=a("li"),Xge=a("strong"),Qer=o("speech_to_text"),Her=o(" \u2014 "),fG=a("a"),Uer=o("TFSpeech2TextModel"),Jer=o(" (Speech2Text model)"),Yer=l(),KT=a("li"),Vge=a("strong"),Ker=o("t5"),Zer=o(" \u2014 "),mG=a("a"),eor=o("TFT5Model"),oor=o(" (T5 model)"),ror=l(),ZT=a("li"),zge=a("strong"),tor=o("tapas"),aor=o(" \u2014 "),gG=a("a"),nor=o("TFTapasModel"),sor=o(" (TAPAS model)"),lor=l(),eF=a("li"),Wge=a("strong"),ior=o("transfo-xl"),dor=o(" \u2014 "),hG=a("a"),cor=o("TFTransfoXLModel"),mor=o(" (Transformer-XL model)"),gor=l(),oF=a("li"),Qge=a("strong"),hor=o("vit"),por=o(" \u2014 "),pG=a("a"),_or=o("TFViTModel"),uor=o(" (ViT model)"),bor=l(),rF=a("li"),Hge=a("strong"),vor=o("wav2vec2"),Tor=o(" \u2014 "),_G=a("a"),For=o("TFWav2Vec2Model"),Cor=o(" (Wav2Vec2 model)"),Mor=l(),tF=a("li"),Uge=a("strong"),Eor=o("xlm"),yor=o(" \u2014 "),uG=a("a"),wor=o("TFXLMModel"),Aor=o(" (XLM model)"),Lor=l(),aF=a("li"),Jge=a("strong"),Bor=o("xlm-roberta"),xor=o(" \u2014 "),bG=a("a"),kor=o("TFXLMRobertaModel"),Ror=o(" (XLM-RoBERTa model)"),Sor=l(),nF=a("li"),Yge=a("strong"),Por=o("xlnet"),$or=o(" \u2014 "),vG=a("a"),Ior=o("TFXLNetModel"),Nor=o(" (XLNet model)"),Dor=l(),Kge=a("p"),jor=o("Examples:"),qor=l(),f(JA.$$.fragment),MRe=l(),pc=a("h2"),sF=a("a"),Zge=a("span"),f(YA.$$.fragment),Gor=l(),ehe=a("span"),Oor=o("TFAutoModelForPreTraining"),ERe=l(),Tr=a("div"),f(KA.$$.fragment),Xor=l(),_c=a("p"),Vor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ohe=a("code"),zor=o("from_pretrained()"),Wor=o("class method or the "),rhe=a("code"),Qor=o("from_config()"),Hor=o(`class
method.`),Uor=l(),ZA=a("p"),Jor=o("This class cannot be instantiated directly using "),the=a("code"),Yor=o("__init__()"),Kor=o(" (throws an error)."),Zor=l(),ht=a("div"),f(e0.$$.fragment),err=l(),ahe=a("p"),orr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rrr=l(),uc=a("p"),trr=o(`Note:
Loading a model from its configuration file does `),nhe=a("strong"),arr=o("not"),nrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),she=a("code"),srr=o("from_pretrained()"),lrr=o("to load the model weights."),irr=l(),lhe=a("p"),drr=o("Examples:"),crr=l(),f(o0.$$.fragment),frr=l(),po=a("div"),f(r0.$$.fragment),mrr=l(),ihe=a("p"),grr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hrr=l(),un=a("p"),prr=o("The model class to instantiate is selected based on the "),dhe=a("code"),_rr=o("model_type"),urr=o(` property of the config object (either
passed as an argument or loaded from `),che=a("code"),brr=o("pretrained_model_name_or_path"),vrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fhe=a("code"),Trr=o("pretrained_model_name_or_path"),Frr=o(":"),Crr=l(),H=a("ul"),lF=a("li"),mhe=a("strong"),Mrr=o("albert"),Err=o(" \u2014 "),TG=a("a"),yrr=o("TFAlbertForPreTraining"),wrr=o(" (ALBERT model)"),Arr=l(),iF=a("li"),ghe=a("strong"),Lrr=o("bart"),Brr=o(" \u2014 "),FG=a("a"),xrr=o("TFBartForConditionalGeneration"),krr=o(" (BART model)"),Rrr=l(),dF=a("li"),hhe=a("strong"),Srr=o("bert"),Prr=o(" \u2014 "),CG=a("a"),$rr=o("TFBertForPreTraining"),Irr=o(" (BERT model)"),Nrr=l(),cF=a("li"),phe=a("strong"),Drr=o("camembert"),jrr=o(" \u2014 "),MG=a("a"),qrr=o("TFCamembertForMaskedLM"),Grr=o(" (CamemBERT model)"),Orr=l(),fF=a("li"),_he=a("strong"),Xrr=o("ctrl"),Vrr=o(" \u2014 "),EG=a("a"),zrr=o("TFCTRLLMHeadModel"),Wrr=o(" (CTRL model)"),Qrr=l(),mF=a("li"),uhe=a("strong"),Hrr=o("distilbert"),Urr=o(" \u2014 "),yG=a("a"),Jrr=o("TFDistilBertForMaskedLM"),Yrr=o(" (DistilBERT model)"),Krr=l(),gF=a("li"),bhe=a("strong"),Zrr=o("electra"),etr=o(" \u2014 "),wG=a("a"),otr=o("TFElectraForPreTraining"),rtr=o(" (ELECTRA model)"),ttr=l(),hF=a("li"),vhe=a("strong"),atr=o("flaubert"),ntr=o(" \u2014 "),AG=a("a"),str=o("TFFlaubertWithLMHeadModel"),ltr=o(" (FlauBERT model)"),itr=l(),pF=a("li"),The=a("strong"),dtr=o("funnel"),ctr=o(" \u2014 "),LG=a("a"),ftr=o("TFFunnelForPreTraining"),mtr=o(" (Funnel Transformer model)"),gtr=l(),_F=a("li"),Fhe=a("strong"),htr=o("gpt2"),ptr=o(" \u2014 "),BG=a("a"),_tr=o("TFGPT2LMHeadModel"),utr=o(" (OpenAI GPT-2 model)"),btr=l(),uF=a("li"),Che=a("strong"),vtr=o("layoutlm"),Ttr=o(" \u2014 "),xG=a("a"),Ftr=o("TFLayoutLMForMaskedLM"),Ctr=o(" (LayoutLM model)"),Mtr=l(),bF=a("li"),Mhe=a("strong"),Etr=o("lxmert"),ytr=o(" \u2014 "),kG=a("a"),wtr=o("TFLxmertForPreTraining"),Atr=o(" (LXMERT model)"),Ltr=l(),vF=a("li"),Ehe=a("strong"),Btr=o("mobilebert"),xtr=o(" \u2014 "),RG=a("a"),ktr=o("TFMobileBertForPreTraining"),Rtr=o(" (MobileBERT model)"),Str=l(),TF=a("li"),yhe=a("strong"),Ptr=o("mpnet"),$tr=o(" \u2014 "),SG=a("a"),Itr=o("TFMPNetForMaskedLM"),Ntr=o(" (MPNet model)"),Dtr=l(),FF=a("li"),whe=a("strong"),jtr=o("openai-gpt"),qtr=o(" \u2014 "),PG=a("a"),Gtr=o("TFOpenAIGPTLMHeadModel"),Otr=o(" (OpenAI GPT model)"),Xtr=l(),CF=a("li"),Ahe=a("strong"),Vtr=o("roberta"),ztr=o(" \u2014 "),$G=a("a"),Wtr=o("TFRobertaForMaskedLM"),Qtr=o(" (RoBERTa model)"),Htr=l(),MF=a("li"),Lhe=a("strong"),Utr=o("t5"),Jtr=o(" \u2014 "),IG=a("a"),Ytr=o("TFT5ForConditionalGeneration"),Ktr=o(" (T5 model)"),Ztr=l(),EF=a("li"),Bhe=a("strong"),ear=o("tapas"),oar=o(" \u2014 "),NG=a("a"),rar=o("TFTapasForMaskedLM"),tar=o(" (TAPAS model)"),aar=l(),yF=a("li"),xhe=a("strong"),nar=o("transfo-xl"),sar=o(" \u2014 "),DG=a("a"),lar=o("TFTransfoXLLMHeadModel"),iar=o(" (Transformer-XL model)"),dar=l(),wF=a("li"),khe=a("strong"),car=o("xlm"),far=o(" \u2014 "),jG=a("a"),mar=o("TFXLMWithLMHeadModel"),gar=o(" (XLM model)"),har=l(),AF=a("li"),Rhe=a("strong"),par=o("xlm-roberta"),_ar=o(" \u2014 "),qG=a("a"),uar=o("TFXLMRobertaForMaskedLM"),bar=o(" (XLM-RoBERTa model)"),Tar=l(),LF=a("li"),She=a("strong"),Far=o("xlnet"),Car=o(" \u2014 "),GG=a("a"),Mar=o("TFXLNetLMHeadModel"),Ear=o(" (XLNet model)"),yar=l(),Phe=a("p"),war=o("Examples:"),Aar=l(),f(t0.$$.fragment),yRe=l(),bc=a("h2"),BF=a("a"),$he=a("span"),f(a0.$$.fragment),Lar=l(),Ihe=a("span"),Bar=o("TFAutoModelForCausalLM"),wRe=l(),Fr=a("div"),f(n0.$$.fragment),xar=l(),vc=a("p"),kar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Nhe=a("code"),Rar=o("from_pretrained()"),Sar=o("class method or the "),Dhe=a("code"),Par=o("from_config()"),$ar=o(`class
method.`),Iar=l(),s0=a("p"),Nar=o("This class cannot be instantiated directly using "),jhe=a("code"),Dar=o("__init__()"),jar=o(" (throws an error)."),qar=l(),pt=a("div"),f(l0.$$.fragment),Gar=l(),qhe=a("p"),Oar=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Xar=l(),Tc=a("p"),Var=o(`Note:
Loading a model from its configuration file does `),Ghe=a("strong"),zar=o("not"),War=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ohe=a("code"),Qar=o("from_pretrained()"),Har=o("to load the model weights."),Uar=l(),Xhe=a("p"),Jar=o("Examples:"),Yar=l(),f(i0.$$.fragment),Kar=l(),_o=a("div"),f(d0.$$.fragment),Zar=l(),Vhe=a("p"),enr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),onr=l(),bn=a("p"),rnr=o("The model class to instantiate is selected based on the "),zhe=a("code"),tnr=o("model_type"),anr=o(` property of the config object (either
passed as an argument or loaded from `),Whe=a("code"),nnr=o("pretrained_model_name_or_path"),snr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=a("code"),lnr=o("pretrained_model_name_or_path"),inr=o(":"),dnr=l(),ge=a("ul"),xF=a("li"),Hhe=a("strong"),cnr=o("bert"),fnr=o(" \u2014 "),OG=a("a"),mnr=o("TFBertLMHeadModel"),gnr=o(" (BERT model)"),hnr=l(),kF=a("li"),Uhe=a("strong"),pnr=o("camembert"),_nr=o(" \u2014 "),XG=a("a"),unr=o("TFCamembertForCausalLM"),bnr=o(" (CamemBERT model)"),vnr=l(),RF=a("li"),Jhe=a("strong"),Tnr=o("ctrl"),Fnr=o(" \u2014 "),VG=a("a"),Cnr=o("TFCTRLLMHeadModel"),Mnr=o(" (CTRL model)"),Enr=l(),SF=a("li"),Yhe=a("strong"),ynr=o("gpt2"),wnr=o(" \u2014 "),zG=a("a"),Anr=o("TFGPT2LMHeadModel"),Lnr=o(" (OpenAI GPT-2 model)"),Bnr=l(),PF=a("li"),Khe=a("strong"),xnr=o("openai-gpt"),knr=o(" \u2014 "),WG=a("a"),Rnr=o("TFOpenAIGPTLMHeadModel"),Snr=o(" (OpenAI GPT model)"),Pnr=l(),$F=a("li"),Zhe=a("strong"),$nr=o("rembert"),Inr=o(" \u2014 "),QG=a("a"),Nnr=o("TFRemBertForCausalLM"),Dnr=o(" (RemBERT model)"),jnr=l(),IF=a("li"),epe=a("strong"),qnr=o("roberta"),Gnr=o(" \u2014 "),HG=a("a"),Onr=o("TFRobertaForCausalLM"),Xnr=o(" (RoBERTa model)"),Vnr=l(),NF=a("li"),ope=a("strong"),znr=o("roformer"),Wnr=o(" \u2014 "),UG=a("a"),Qnr=o("TFRoFormerForCausalLM"),Hnr=o(" (RoFormer model)"),Unr=l(),DF=a("li"),rpe=a("strong"),Jnr=o("transfo-xl"),Ynr=o(" \u2014 "),JG=a("a"),Knr=o("TFTransfoXLLMHeadModel"),Znr=o(" (Transformer-XL model)"),esr=l(),jF=a("li"),tpe=a("strong"),osr=o("xlm"),rsr=o(" \u2014 "),YG=a("a"),tsr=o("TFXLMWithLMHeadModel"),asr=o(" (XLM model)"),nsr=l(),qF=a("li"),ape=a("strong"),ssr=o("xlnet"),lsr=o(" \u2014 "),KG=a("a"),isr=o("TFXLNetLMHeadModel"),dsr=o(" (XLNet model)"),csr=l(),npe=a("p"),fsr=o("Examples:"),msr=l(),f(c0.$$.fragment),ARe=l(),Fc=a("h2"),GF=a("a"),spe=a("span"),f(f0.$$.fragment),gsr=l(),lpe=a("span"),hsr=o("TFAutoModelForImageClassification"),LRe=l(),Cr=a("div"),f(m0.$$.fragment),psr=l(),Cc=a("p"),_sr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ipe=a("code"),usr=o("from_pretrained()"),bsr=o("class method or the "),dpe=a("code"),vsr=o("from_config()"),Tsr=o(`class
method.`),Fsr=l(),g0=a("p"),Csr=o("This class cannot be instantiated directly using "),cpe=a("code"),Msr=o("__init__()"),Esr=o(" (throws an error)."),ysr=l(),_t=a("div"),f(h0.$$.fragment),wsr=l(),fpe=a("p"),Asr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lsr=l(),Mc=a("p"),Bsr=o(`Note:
Loading a model from its configuration file does `),mpe=a("strong"),xsr=o("not"),ksr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gpe=a("code"),Rsr=o("from_pretrained()"),Ssr=o("to load the model weights."),Psr=l(),hpe=a("p"),$sr=o("Examples:"),Isr=l(),f(p0.$$.fragment),Nsr=l(),uo=a("div"),f(_0.$$.fragment),Dsr=l(),ppe=a("p"),jsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qsr=l(),vn=a("p"),Gsr=o("The model class to instantiate is selected based on the "),_pe=a("code"),Osr=o("model_type"),Xsr=o(` property of the config object (either
passed as an argument or loaded from `),upe=a("code"),Vsr=o("pretrained_model_name_or_path"),zsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bpe=a("code"),Wsr=o("pretrained_model_name_or_path"),Qsr=o(":"),Hsr=l(),u0=a("ul"),OF=a("li"),vpe=a("strong"),Usr=o("convnext"),Jsr=o(" \u2014 "),ZG=a("a"),Ysr=o("TFConvNextForImageClassification"),Ksr=o(" (ConvNext model)"),Zsr=l(),XF=a("li"),Tpe=a("strong"),elr=o("vit"),olr=o(" \u2014 "),eO=a("a"),rlr=o("TFViTForImageClassification"),tlr=o(" (ViT model)"),alr=l(),Fpe=a("p"),nlr=o("Examples:"),slr=l(),f(b0.$$.fragment),BRe=l(),Ec=a("h2"),VF=a("a"),Cpe=a("span"),f(v0.$$.fragment),llr=l(),Mpe=a("span"),ilr=o("TFAutoModelForMaskedLM"),xRe=l(),Mr=a("div"),f(T0.$$.fragment),dlr=l(),yc=a("p"),clr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Epe=a("code"),flr=o("from_pretrained()"),mlr=o("class method or the "),ype=a("code"),glr=o("from_config()"),hlr=o(`class
method.`),plr=l(),F0=a("p"),_lr=o("This class cannot be instantiated directly using "),wpe=a("code"),ulr=o("__init__()"),blr=o(" (throws an error)."),vlr=l(),ut=a("div"),f(C0.$$.fragment),Tlr=l(),Ape=a("p"),Flr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Clr=l(),wc=a("p"),Mlr=o(`Note:
Loading a model from its configuration file does `),Lpe=a("strong"),Elr=o("not"),ylr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bpe=a("code"),wlr=o("from_pretrained()"),Alr=o("to load the model weights."),Llr=l(),xpe=a("p"),Blr=o("Examples:"),xlr=l(),f(M0.$$.fragment),klr=l(),bo=a("div"),f(E0.$$.fragment),Rlr=l(),kpe=a("p"),Slr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Plr=l(),Tn=a("p"),$lr=o("The model class to instantiate is selected based on the "),Rpe=a("code"),Ilr=o("model_type"),Nlr=o(` property of the config object (either
passed as an argument or loaded from `),Spe=a("code"),Dlr=o("pretrained_model_name_or_path"),jlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=a("code"),qlr=o("pretrained_model_name_or_path"),Glr=o(":"),Olr=l(),J=a("ul"),zF=a("li"),$pe=a("strong"),Xlr=o("albert"),Vlr=o(" \u2014 "),oO=a("a"),zlr=o("TFAlbertForMaskedLM"),Wlr=o(" (ALBERT model)"),Qlr=l(),WF=a("li"),Ipe=a("strong"),Hlr=o("bert"),Ulr=o(" \u2014 "),rO=a("a"),Jlr=o("TFBertForMaskedLM"),Ylr=o(" (BERT model)"),Klr=l(),QF=a("li"),Npe=a("strong"),Zlr=o("camembert"),eir=o(" \u2014 "),tO=a("a"),oir=o("TFCamembertForMaskedLM"),rir=o(" (CamemBERT model)"),tir=l(),HF=a("li"),Dpe=a("strong"),air=o("convbert"),nir=o(" \u2014 "),aO=a("a"),sir=o("TFConvBertForMaskedLM"),lir=o(" (ConvBERT model)"),iir=l(),UF=a("li"),jpe=a("strong"),dir=o("deberta"),cir=o(" \u2014 "),nO=a("a"),fir=o("TFDebertaForMaskedLM"),mir=o(" (DeBERTa model)"),gir=l(),JF=a("li"),qpe=a("strong"),hir=o("deberta-v2"),pir=o(" \u2014 "),sO=a("a"),_ir=o("TFDebertaV2ForMaskedLM"),uir=o(" (DeBERTa-v2 model)"),bir=l(),YF=a("li"),Gpe=a("strong"),vir=o("distilbert"),Tir=o(" \u2014 "),lO=a("a"),Fir=o("TFDistilBertForMaskedLM"),Cir=o(" (DistilBERT model)"),Mir=l(),KF=a("li"),Ope=a("strong"),Eir=o("electra"),yir=o(" \u2014 "),iO=a("a"),wir=o("TFElectraForMaskedLM"),Air=o(" (ELECTRA model)"),Lir=l(),ZF=a("li"),Xpe=a("strong"),Bir=o("flaubert"),xir=o(" \u2014 "),dO=a("a"),kir=o("TFFlaubertWithLMHeadModel"),Rir=o(" (FlauBERT model)"),Sir=l(),eC=a("li"),Vpe=a("strong"),Pir=o("funnel"),$ir=o(" \u2014 "),cO=a("a"),Iir=o("TFFunnelForMaskedLM"),Nir=o(" (Funnel Transformer model)"),Dir=l(),oC=a("li"),zpe=a("strong"),jir=o("layoutlm"),qir=o(" \u2014 "),fO=a("a"),Gir=o("TFLayoutLMForMaskedLM"),Oir=o(" (LayoutLM model)"),Xir=l(),rC=a("li"),Wpe=a("strong"),Vir=o("longformer"),zir=o(" \u2014 "),mO=a("a"),Wir=o("TFLongformerForMaskedLM"),Qir=o(" (Longformer model)"),Hir=l(),tC=a("li"),Qpe=a("strong"),Uir=o("mobilebert"),Jir=o(" \u2014 "),gO=a("a"),Yir=o("TFMobileBertForMaskedLM"),Kir=o(" (MobileBERT model)"),Zir=l(),aC=a("li"),Hpe=a("strong"),edr=o("mpnet"),odr=o(" \u2014 "),hO=a("a"),rdr=o("TFMPNetForMaskedLM"),tdr=o(" (MPNet model)"),adr=l(),nC=a("li"),Upe=a("strong"),ndr=o("rembert"),sdr=o(" \u2014 "),pO=a("a"),ldr=o("TFRemBertForMaskedLM"),idr=o(" (RemBERT model)"),ddr=l(),sC=a("li"),Jpe=a("strong"),cdr=o("roberta"),fdr=o(" \u2014 "),_O=a("a"),mdr=o("TFRobertaForMaskedLM"),gdr=o(" (RoBERTa model)"),hdr=l(),lC=a("li"),Ype=a("strong"),pdr=o("roformer"),_dr=o(" \u2014 "),uO=a("a"),udr=o("TFRoFormerForMaskedLM"),bdr=o(" (RoFormer model)"),vdr=l(),iC=a("li"),Kpe=a("strong"),Tdr=o("tapas"),Fdr=o(" \u2014 "),bO=a("a"),Cdr=o("TFTapasForMaskedLM"),Mdr=o(" (TAPAS model)"),Edr=l(),dC=a("li"),Zpe=a("strong"),ydr=o("xlm"),wdr=o(" \u2014 "),vO=a("a"),Adr=o("TFXLMWithLMHeadModel"),Ldr=o(" (XLM model)"),Bdr=l(),cC=a("li"),e_e=a("strong"),xdr=o("xlm-roberta"),kdr=o(" \u2014 "),TO=a("a"),Rdr=o("TFXLMRobertaForMaskedLM"),Sdr=o(" (XLM-RoBERTa model)"),Pdr=l(),o_e=a("p"),$dr=o("Examples:"),Idr=l(),f(y0.$$.fragment),kRe=l(),Ac=a("h2"),fC=a("a"),r_e=a("span"),f(w0.$$.fragment),Ndr=l(),t_e=a("span"),Ddr=o("TFAutoModelForSeq2SeqLM"),RRe=l(),Er=a("div"),f(A0.$$.fragment),jdr=l(),Lc=a("p"),qdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),a_e=a("code"),Gdr=o("from_pretrained()"),Odr=o("class method or the "),n_e=a("code"),Xdr=o("from_config()"),Vdr=o(`class
method.`),zdr=l(),L0=a("p"),Wdr=o("This class cannot be instantiated directly using "),s_e=a("code"),Qdr=o("__init__()"),Hdr=o(" (throws an error)."),Udr=l(),bt=a("div"),f(B0.$$.fragment),Jdr=l(),l_e=a("p"),Ydr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Kdr=l(),Bc=a("p"),Zdr=o(`Note:
Loading a model from its configuration file does `),i_e=a("strong"),ecr=o("not"),ocr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),d_e=a("code"),rcr=o("from_pretrained()"),tcr=o("to load the model weights."),acr=l(),c_e=a("p"),ncr=o("Examples:"),scr=l(),f(x0.$$.fragment),lcr=l(),vo=a("div"),f(k0.$$.fragment),icr=l(),f_e=a("p"),dcr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ccr=l(),Fn=a("p"),fcr=o("The model class to instantiate is selected based on the "),m_e=a("code"),mcr=o("model_type"),gcr=o(` property of the config object (either
passed as an argument or loaded from `),g_e=a("code"),hcr=o("pretrained_model_name_or_path"),pcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=a("code"),_cr=o("pretrained_model_name_or_path"),ucr=o(":"),bcr=l(),ue=a("ul"),mC=a("li"),p_e=a("strong"),vcr=o("bart"),Tcr=o(" \u2014 "),FO=a("a"),Fcr=o("TFBartForConditionalGeneration"),Ccr=o(" (BART model)"),Mcr=l(),gC=a("li"),__e=a("strong"),Ecr=o("blenderbot"),ycr=o(" \u2014 "),CO=a("a"),wcr=o("TFBlenderbotForConditionalGeneration"),Acr=o(" (Blenderbot model)"),Lcr=l(),hC=a("li"),u_e=a("strong"),Bcr=o("blenderbot-small"),xcr=o(" \u2014 "),MO=a("a"),kcr=o("TFBlenderbotSmallForConditionalGeneration"),Rcr=o(" (BlenderbotSmall model)"),Scr=l(),pC=a("li"),b_e=a("strong"),Pcr=o("encoder-decoder"),$cr=o(" \u2014 "),EO=a("a"),Icr=o("TFEncoderDecoderModel"),Ncr=o(" (Encoder decoder model)"),Dcr=l(),_C=a("li"),v_e=a("strong"),jcr=o("led"),qcr=o(" \u2014 "),yO=a("a"),Gcr=o("TFLEDForConditionalGeneration"),Ocr=o(" (LED model)"),Xcr=l(),uC=a("li"),T_e=a("strong"),Vcr=o("marian"),zcr=o(" \u2014 "),wO=a("a"),Wcr=o("TFMarianMTModel"),Qcr=o(" (Marian model)"),Hcr=l(),bC=a("li"),F_e=a("strong"),Ucr=o("mbart"),Jcr=o(" \u2014 "),AO=a("a"),Ycr=o("TFMBartForConditionalGeneration"),Kcr=o(" (mBART model)"),Zcr=l(),vC=a("li"),C_e=a("strong"),efr=o("mt5"),ofr=o(" \u2014 "),LO=a("a"),rfr=o("TFMT5ForConditionalGeneration"),tfr=o(" (mT5 model)"),afr=l(),TC=a("li"),M_e=a("strong"),nfr=o("pegasus"),sfr=o(" \u2014 "),BO=a("a"),lfr=o("TFPegasusForConditionalGeneration"),ifr=o(" (Pegasus model)"),dfr=l(),FC=a("li"),E_e=a("strong"),cfr=o("t5"),ffr=o(" \u2014 "),xO=a("a"),mfr=o("TFT5ForConditionalGeneration"),gfr=o(" (T5 model)"),hfr=l(),y_e=a("p"),pfr=o("Examples:"),_fr=l(),f(R0.$$.fragment),SRe=l(),xc=a("h2"),CC=a("a"),w_e=a("span"),f(S0.$$.fragment),ufr=l(),A_e=a("span"),bfr=o("TFAutoModelForSequenceClassification"),PRe=l(),yr=a("div"),f(P0.$$.fragment),vfr=l(),kc=a("p"),Tfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),L_e=a("code"),Ffr=o("from_pretrained()"),Cfr=o("class method or the "),B_e=a("code"),Mfr=o("from_config()"),Efr=o(`class
method.`),yfr=l(),$0=a("p"),wfr=o("This class cannot be instantiated directly using "),x_e=a("code"),Afr=o("__init__()"),Lfr=o(" (throws an error)."),Bfr=l(),vt=a("div"),f(I0.$$.fragment),xfr=l(),k_e=a("p"),kfr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Rfr=l(),Rc=a("p"),Sfr=o(`Note:
Loading a model from its configuration file does `),R_e=a("strong"),Pfr=o("not"),$fr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),S_e=a("code"),Ifr=o("from_pretrained()"),Nfr=o("to load the model weights."),Dfr=l(),P_e=a("p"),jfr=o("Examples:"),qfr=l(),f(N0.$$.fragment),Gfr=l(),To=a("div"),f(D0.$$.fragment),Ofr=l(),$_e=a("p"),Xfr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Vfr=l(),Cn=a("p"),zfr=o("The model class to instantiate is selected based on the "),I_e=a("code"),Wfr=o("model_type"),Qfr=o(` property of the config object (either
passed as an argument or loaded from `),N_e=a("code"),Hfr=o("pretrained_model_name_or_path"),Ufr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=a("code"),Jfr=o("pretrained_model_name_or_path"),Yfr=o(":"),Kfr=l(),V=a("ul"),MC=a("li"),j_e=a("strong"),Zfr=o("albert"),emr=o(" \u2014 "),kO=a("a"),omr=o("TFAlbertForSequenceClassification"),rmr=o(" (ALBERT model)"),tmr=l(),EC=a("li"),q_e=a("strong"),amr=o("bert"),nmr=o(" \u2014 "),RO=a("a"),smr=o("TFBertForSequenceClassification"),lmr=o(" (BERT model)"),imr=l(),yC=a("li"),G_e=a("strong"),dmr=o("camembert"),cmr=o(" \u2014 "),SO=a("a"),fmr=o("TFCamembertForSequenceClassification"),mmr=o(" (CamemBERT model)"),gmr=l(),wC=a("li"),O_e=a("strong"),hmr=o("convbert"),pmr=o(" \u2014 "),PO=a("a"),_mr=o("TFConvBertForSequenceClassification"),umr=o(" (ConvBERT model)"),bmr=l(),AC=a("li"),X_e=a("strong"),vmr=o("ctrl"),Tmr=o(" \u2014 "),$O=a("a"),Fmr=o("TFCTRLForSequenceClassification"),Cmr=o(" (CTRL model)"),Mmr=l(),LC=a("li"),V_e=a("strong"),Emr=o("deberta"),ymr=o(" \u2014 "),IO=a("a"),wmr=o("TFDebertaForSequenceClassification"),Amr=o(" (DeBERTa model)"),Lmr=l(),BC=a("li"),z_e=a("strong"),Bmr=o("deberta-v2"),xmr=o(" \u2014 "),NO=a("a"),kmr=o("TFDebertaV2ForSequenceClassification"),Rmr=o(" (DeBERTa-v2 model)"),Smr=l(),xC=a("li"),W_e=a("strong"),Pmr=o("distilbert"),$mr=o(" \u2014 "),DO=a("a"),Imr=o("TFDistilBertForSequenceClassification"),Nmr=o(" (DistilBERT model)"),Dmr=l(),kC=a("li"),Q_e=a("strong"),jmr=o("electra"),qmr=o(" \u2014 "),jO=a("a"),Gmr=o("TFElectraForSequenceClassification"),Omr=o(" (ELECTRA model)"),Xmr=l(),RC=a("li"),H_e=a("strong"),Vmr=o("flaubert"),zmr=o(" \u2014 "),qO=a("a"),Wmr=o("TFFlaubertForSequenceClassification"),Qmr=o(" (FlauBERT model)"),Hmr=l(),SC=a("li"),U_e=a("strong"),Umr=o("funnel"),Jmr=o(" \u2014 "),GO=a("a"),Ymr=o("TFFunnelForSequenceClassification"),Kmr=o(" (Funnel Transformer model)"),Zmr=l(),PC=a("li"),J_e=a("strong"),egr=o("gpt2"),ogr=o(" \u2014 "),OO=a("a"),rgr=o("TFGPT2ForSequenceClassification"),tgr=o(" (OpenAI GPT-2 model)"),agr=l(),$C=a("li"),Y_e=a("strong"),ngr=o("layoutlm"),sgr=o(" \u2014 "),XO=a("a"),lgr=o("TFLayoutLMForSequenceClassification"),igr=o(" (LayoutLM model)"),dgr=l(),IC=a("li"),K_e=a("strong"),cgr=o("longformer"),fgr=o(" \u2014 "),VO=a("a"),mgr=o("TFLongformerForSequenceClassification"),ggr=o(" (Longformer model)"),hgr=l(),NC=a("li"),Z_e=a("strong"),pgr=o("mobilebert"),_gr=o(" \u2014 "),zO=a("a"),ugr=o("TFMobileBertForSequenceClassification"),bgr=o(" (MobileBERT model)"),vgr=l(),DC=a("li"),eue=a("strong"),Tgr=o("mpnet"),Fgr=o(" \u2014 "),WO=a("a"),Cgr=o("TFMPNetForSequenceClassification"),Mgr=o(" (MPNet model)"),Egr=l(),jC=a("li"),oue=a("strong"),ygr=o("openai-gpt"),wgr=o(" \u2014 "),QO=a("a"),Agr=o("TFOpenAIGPTForSequenceClassification"),Lgr=o(" (OpenAI GPT model)"),Bgr=l(),qC=a("li"),rue=a("strong"),xgr=o("rembert"),kgr=o(" \u2014 "),HO=a("a"),Rgr=o("TFRemBertForSequenceClassification"),Sgr=o(" (RemBERT model)"),Pgr=l(),GC=a("li"),tue=a("strong"),$gr=o("roberta"),Igr=o(" \u2014 "),UO=a("a"),Ngr=o("TFRobertaForSequenceClassification"),Dgr=o(" (RoBERTa model)"),jgr=l(),OC=a("li"),aue=a("strong"),qgr=o("roformer"),Ggr=o(" \u2014 "),JO=a("a"),Ogr=o("TFRoFormerForSequenceClassification"),Xgr=o(" (RoFormer model)"),Vgr=l(),XC=a("li"),nue=a("strong"),zgr=o("tapas"),Wgr=o(" \u2014 "),YO=a("a"),Qgr=o("TFTapasForSequenceClassification"),Hgr=o(" (TAPAS model)"),Ugr=l(),VC=a("li"),sue=a("strong"),Jgr=o("transfo-xl"),Ygr=o(" \u2014 "),KO=a("a"),Kgr=o("TFTransfoXLForSequenceClassification"),Zgr=o(" (Transformer-XL model)"),ehr=l(),zC=a("li"),lue=a("strong"),ohr=o("xlm"),rhr=o(" \u2014 "),ZO=a("a"),thr=o("TFXLMForSequenceClassification"),ahr=o(" (XLM model)"),nhr=l(),WC=a("li"),iue=a("strong"),shr=o("xlm-roberta"),lhr=o(" \u2014 "),eX=a("a"),ihr=o("TFXLMRobertaForSequenceClassification"),dhr=o(" (XLM-RoBERTa model)"),chr=l(),QC=a("li"),due=a("strong"),fhr=o("xlnet"),mhr=o(" \u2014 "),oX=a("a"),ghr=o("TFXLNetForSequenceClassification"),hhr=o(" (XLNet model)"),phr=l(),cue=a("p"),_hr=o("Examples:"),uhr=l(),f(j0.$$.fragment),$Re=l(),Sc=a("h2"),HC=a("a"),fue=a("span"),f(q0.$$.fragment),bhr=l(),mue=a("span"),vhr=o("TFAutoModelForMultipleChoice"),IRe=l(),wr=a("div"),f(G0.$$.fragment),Thr=l(),Pc=a("p"),Fhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gue=a("code"),Chr=o("from_pretrained()"),Mhr=o("class method or the "),hue=a("code"),Ehr=o("from_config()"),yhr=o(`class
method.`),whr=l(),O0=a("p"),Ahr=o("This class cannot be instantiated directly using "),pue=a("code"),Lhr=o("__init__()"),Bhr=o(" (throws an error)."),xhr=l(),Tt=a("div"),f(X0.$$.fragment),khr=l(),_ue=a("p"),Rhr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Shr=l(),$c=a("p"),Phr=o(`Note:
Loading a model from its configuration file does `),uue=a("strong"),$hr=o("not"),Ihr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bue=a("code"),Nhr=o("from_pretrained()"),Dhr=o("to load the model weights."),jhr=l(),vue=a("p"),qhr=o("Examples:"),Ghr=l(),f(V0.$$.fragment),Ohr=l(),Fo=a("div"),f(z0.$$.fragment),Xhr=l(),Tue=a("p"),Vhr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zhr=l(),Mn=a("p"),Whr=o("The model class to instantiate is selected based on the "),Fue=a("code"),Qhr=o("model_type"),Hhr=o(` property of the config object (either
passed as an argument or loaded from `),Cue=a("code"),Uhr=o("pretrained_model_name_or_path"),Jhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mue=a("code"),Yhr=o("pretrained_model_name_or_path"),Khr=o(":"),Zhr=l(),ne=a("ul"),UC=a("li"),Eue=a("strong"),epr=o("albert"),opr=o(" \u2014 "),rX=a("a"),rpr=o("TFAlbertForMultipleChoice"),tpr=o(" (ALBERT model)"),apr=l(),JC=a("li"),yue=a("strong"),npr=o("bert"),spr=o(" \u2014 "),tX=a("a"),lpr=o("TFBertForMultipleChoice"),ipr=o(" (BERT model)"),dpr=l(),YC=a("li"),wue=a("strong"),cpr=o("camembert"),fpr=o(" \u2014 "),aX=a("a"),mpr=o("TFCamembertForMultipleChoice"),gpr=o(" (CamemBERT model)"),hpr=l(),KC=a("li"),Aue=a("strong"),ppr=o("convbert"),_pr=o(" \u2014 "),nX=a("a"),upr=o("TFConvBertForMultipleChoice"),bpr=o(" (ConvBERT model)"),vpr=l(),ZC=a("li"),Lue=a("strong"),Tpr=o("distilbert"),Fpr=o(" \u2014 "),sX=a("a"),Cpr=o("TFDistilBertForMultipleChoice"),Mpr=o(" (DistilBERT model)"),Epr=l(),eM=a("li"),Bue=a("strong"),ypr=o("electra"),wpr=o(" \u2014 "),lX=a("a"),Apr=o("TFElectraForMultipleChoice"),Lpr=o(" (ELECTRA model)"),Bpr=l(),oM=a("li"),xue=a("strong"),xpr=o("flaubert"),kpr=o(" \u2014 "),iX=a("a"),Rpr=o("TFFlaubertForMultipleChoice"),Spr=o(" (FlauBERT model)"),Ppr=l(),rM=a("li"),kue=a("strong"),$pr=o("funnel"),Ipr=o(" \u2014 "),dX=a("a"),Npr=o("TFFunnelForMultipleChoice"),Dpr=o(" (Funnel Transformer model)"),jpr=l(),tM=a("li"),Rue=a("strong"),qpr=o("longformer"),Gpr=o(" \u2014 "),cX=a("a"),Opr=o("TFLongformerForMultipleChoice"),Xpr=o(" (Longformer model)"),Vpr=l(),aM=a("li"),Sue=a("strong"),zpr=o("mobilebert"),Wpr=o(" \u2014 "),fX=a("a"),Qpr=o("TFMobileBertForMultipleChoice"),Hpr=o(" (MobileBERT model)"),Upr=l(),nM=a("li"),Pue=a("strong"),Jpr=o("mpnet"),Ypr=o(" \u2014 "),mX=a("a"),Kpr=o("TFMPNetForMultipleChoice"),Zpr=o(" (MPNet model)"),e_r=l(),sM=a("li"),$ue=a("strong"),o_r=o("rembert"),r_r=o(" \u2014 "),gX=a("a"),t_r=o("TFRemBertForMultipleChoice"),a_r=o(" (RemBERT model)"),n_r=l(),lM=a("li"),Iue=a("strong"),s_r=o("roberta"),l_r=o(" \u2014 "),hX=a("a"),i_r=o("TFRobertaForMultipleChoice"),d_r=o(" (RoBERTa model)"),c_r=l(),iM=a("li"),Nue=a("strong"),f_r=o("roformer"),m_r=o(" \u2014 "),pX=a("a"),g_r=o("TFRoFormerForMultipleChoice"),h_r=o(" (RoFormer model)"),p_r=l(),dM=a("li"),Due=a("strong"),__r=o("xlm"),u_r=o(" \u2014 "),_X=a("a"),b_r=o("TFXLMForMultipleChoice"),v_r=o(" (XLM model)"),T_r=l(),cM=a("li"),jue=a("strong"),F_r=o("xlm-roberta"),C_r=o(" \u2014 "),uX=a("a"),M_r=o("TFXLMRobertaForMultipleChoice"),E_r=o(" (XLM-RoBERTa model)"),y_r=l(),fM=a("li"),que=a("strong"),w_r=o("xlnet"),A_r=o(" \u2014 "),bX=a("a"),L_r=o("TFXLNetForMultipleChoice"),B_r=o(" (XLNet model)"),x_r=l(),Gue=a("p"),k_r=o("Examples:"),R_r=l(),f(W0.$$.fragment),NRe=l(),Ic=a("h2"),mM=a("a"),Oue=a("span"),f(Q0.$$.fragment),S_r=l(),Xue=a("span"),P_r=o("TFAutoModelForTableQuestionAnswering"),DRe=l(),Ar=a("div"),f(H0.$$.fragment),$_r=l(),Nc=a("p"),I_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Vue=a("code"),N_r=o("from_pretrained()"),D_r=o("class method or the "),zue=a("code"),j_r=o("from_config()"),q_r=o(`class
method.`),G_r=l(),U0=a("p"),O_r=o("This class cannot be instantiated directly using "),Wue=a("code"),X_r=o("__init__()"),V_r=o(" (throws an error)."),z_r=l(),Ft=a("div"),f(J0.$$.fragment),W_r=l(),Que=a("p"),Q_r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),H_r=l(),Dc=a("p"),U_r=o(`Note:
Loading a model from its configuration file does `),Hue=a("strong"),J_r=o("not"),Y_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uue=a("code"),K_r=o("from_pretrained()"),Z_r=o("to load the model weights."),eur=l(),Jue=a("p"),our=o("Examples:"),rur=l(),f(Y0.$$.fragment),tur=l(),Co=a("div"),f(K0.$$.fragment),aur=l(),Yue=a("p"),nur=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),sur=l(),En=a("p"),lur=o("The model class to instantiate is selected based on the "),Kue=a("code"),iur=o("model_type"),dur=o(` property of the config object (either
passed as an argument or loaded from `),Zue=a("code"),cur=o("pretrained_model_name_or_path"),fur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=a("code"),mur=o("pretrained_model_name_or_path"),gur=o(":"),hur=l(),o1e=a("ul"),gM=a("li"),r1e=a("strong"),pur=o("tapas"),_ur=o(" \u2014 "),vX=a("a"),uur=o("TFTapasForQuestionAnswering"),bur=o(" (TAPAS model)"),vur=l(),t1e=a("p"),Tur=o("Examples:"),Fur=l(),f(Z0.$$.fragment),jRe=l(),jc=a("h2"),hM=a("a"),a1e=a("span"),f(eL.$$.fragment),Cur=l(),n1e=a("span"),Mur=o("TFAutoModelForTokenClassification"),qRe=l(),Lr=a("div"),f(oL.$$.fragment),Eur=l(),qc=a("p"),yur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),s1e=a("code"),wur=o("from_pretrained()"),Aur=o("class method or the "),l1e=a("code"),Lur=o("from_config()"),Bur=o(`class
method.`),xur=l(),rL=a("p"),kur=o("This class cannot be instantiated directly using "),i1e=a("code"),Rur=o("__init__()"),Sur=o(" (throws an error)."),Pur=l(),Ct=a("div"),f(tL.$$.fragment),$ur=l(),d1e=a("p"),Iur=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Nur=l(),Gc=a("p"),Dur=o(`Note:
Loading a model from its configuration file does `),c1e=a("strong"),jur=o("not"),qur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),f1e=a("code"),Gur=o("from_pretrained()"),Our=o("to load the model weights."),Xur=l(),m1e=a("p"),Vur=o("Examples:"),zur=l(),f(aL.$$.fragment),Wur=l(),Mo=a("div"),f(nL.$$.fragment),Qur=l(),g1e=a("p"),Hur=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Uur=l(),yn=a("p"),Jur=o("The model class to instantiate is selected based on the "),h1e=a("code"),Yur=o("model_type"),Kur=o(` property of the config object (either
passed as an argument or loaded from `),p1e=a("code"),Zur=o("pretrained_model_name_or_path"),e1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=a("code"),o1r=o("pretrained_model_name_or_path"),r1r=o(":"),t1r=l(),Y=a("ul"),pM=a("li"),u1e=a("strong"),a1r=o("albert"),n1r=o(" \u2014 "),TX=a("a"),s1r=o("TFAlbertForTokenClassification"),l1r=o(" (ALBERT model)"),i1r=l(),_M=a("li"),b1e=a("strong"),d1r=o("bert"),c1r=o(" \u2014 "),FX=a("a"),f1r=o("TFBertForTokenClassification"),m1r=o(" (BERT model)"),g1r=l(),uM=a("li"),v1e=a("strong"),h1r=o("camembert"),p1r=o(" \u2014 "),CX=a("a"),_1r=o("TFCamembertForTokenClassification"),u1r=o(" (CamemBERT model)"),b1r=l(),bM=a("li"),T1e=a("strong"),v1r=o("convbert"),T1r=o(" \u2014 "),MX=a("a"),F1r=o("TFConvBertForTokenClassification"),C1r=o(" (ConvBERT model)"),M1r=l(),vM=a("li"),F1e=a("strong"),E1r=o("deberta"),y1r=o(" \u2014 "),EX=a("a"),w1r=o("TFDebertaForTokenClassification"),A1r=o(" (DeBERTa model)"),L1r=l(),TM=a("li"),C1e=a("strong"),B1r=o("deberta-v2"),x1r=o(" \u2014 "),yX=a("a"),k1r=o("TFDebertaV2ForTokenClassification"),R1r=o(" (DeBERTa-v2 model)"),S1r=l(),FM=a("li"),M1e=a("strong"),P1r=o("distilbert"),$1r=o(" \u2014 "),wX=a("a"),I1r=o("TFDistilBertForTokenClassification"),N1r=o(" (DistilBERT model)"),D1r=l(),CM=a("li"),E1e=a("strong"),j1r=o("electra"),q1r=o(" \u2014 "),AX=a("a"),G1r=o("TFElectraForTokenClassification"),O1r=o(" (ELECTRA model)"),X1r=l(),MM=a("li"),y1e=a("strong"),V1r=o("flaubert"),z1r=o(" \u2014 "),LX=a("a"),W1r=o("TFFlaubertForTokenClassification"),Q1r=o(" (FlauBERT model)"),H1r=l(),EM=a("li"),w1e=a("strong"),U1r=o("funnel"),J1r=o(" \u2014 "),BX=a("a"),Y1r=o("TFFunnelForTokenClassification"),K1r=o(" (Funnel Transformer model)"),Z1r=l(),yM=a("li"),A1e=a("strong"),e2r=o("layoutlm"),o2r=o(" \u2014 "),xX=a("a"),r2r=o("TFLayoutLMForTokenClassification"),t2r=o(" (LayoutLM model)"),a2r=l(),wM=a("li"),L1e=a("strong"),n2r=o("longformer"),s2r=o(" \u2014 "),kX=a("a"),l2r=o("TFLongformerForTokenClassification"),i2r=o(" (Longformer model)"),d2r=l(),AM=a("li"),B1e=a("strong"),c2r=o("mobilebert"),f2r=o(" \u2014 "),RX=a("a"),m2r=o("TFMobileBertForTokenClassification"),g2r=o(" (MobileBERT model)"),h2r=l(),LM=a("li"),x1e=a("strong"),p2r=o("mpnet"),_2r=o(" \u2014 "),SX=a("a"),u2r=o("TFMPNetForTokenClassification"),b2r=o(" (MPNet model)"),v2r=l(),BM=a("li"),k1e=a("strong"),T2r=o("rembert"),F2r=o(" \u2014 "),PX=a("a"),C2r=o("TFRemBertForTokenClassification"),M2r=o(" (RemBERT model)"),E2r=l(),xM=a("li"),R1e=a("strong"),y2r=o("roberta"),w2r=o(" \u2014 "),$X=a("a"),A2r=o("TFRobertaForTokenClassification"),L2r=o(" (RoBERTa model)"),B2r=l(),kM=a("li"),S1e=a("strong"),x2r=o("roformer"),k2r=o(" \u2014 "),IX=a("a"),R2r=o("TFRoFormerForTokenClassification"),S2r=o(" (RoFormer model)"),P2r=l(),RM=a("li"),P1e=a("strong"),$2r=o("xlm"),I2r=o(" \u2014 "),NX=a("a"),N2r=o("TFXLMForTokenClassification"),D2r=o(" (XLM model)"),j2r=l(),SM=a("li"),$1e=a("strong"),q2r=o("xlm-roberta"),G2r=o(" \u2014 "),DX=a("a"),O2r=o("TFXLMRobertaForTokenClassification"),X2r=o(" (XLM-RoBERTa model)"),V2r=l(),PM=a("li"),I1e=a("strong"),z2r=o("xlnet"),W2r=o(" \u2014 "),jX=a("a"),Q2r=o("TFXLNetForTokenClassification"),H2r=o(" (XLNet model)"),U2r=l(),N1e=a("p"),J2r=o("Examples:"),Y2r=l(),f(sL.$$.fragment),GRe=l(),Oc=a("h2"),$M=a("a"),D1e=a("span"),f(lL.$$.fragment),K2r=l(),j1e=a("span"),Z2r=o("TFAutoModelForQuestionAnswering"),ORe=l(),Br=a("div"),f(iL.$$.fragment),e6r=l(),Xc=a("p"),o6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),q1e=a("code"),r6r=o("from_pretrained()"),t6r=o("class method or the "),G1e=a("code"),a6r=o("from_config()"),n6r=o(`class
method.`),s6r=l(),dL=a("p"),l6r=o("This class cannot be instantiated directly using "),O1e=a("code"),i6r=o("__init__()"),d6r=o(" (throws an error)."),c6r=l(),Mt=a("div"),f(cL.$$.fragment),f6r=l(),X1e=a("p"),m6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),g6r=l(),Vc=a("p"),h6r=o(`Note:
Loading a model from its configuration file does `),V1e=a("strong"),p6r=o("not"),_6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),z1e=a("code"),u6r=o("from_pretrained()"),b6r=o("to load the model weights."),v6r=l(),W1e=a("p"),T6r=o("Examples:"),F6r=l(),f(fL.$$.fragment),C6r=l(),Eo=a("div"),f(mL.$$.fragment),M6r=l(),Q1e=a("p"),E6r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),y6r=l(),wn=a("p"),w6r=o("The model class to instantiate is selected based on the "),H1e=a("code"),A6r=o("model_type"),L6r=o(` property of the config object (either
passed as an argument or loaded from `),U1e=a("code"),B6r=o("pretrained_model_name_or_path"),x6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=a("code"),k6r=o("pretrained_model_name_or_path"),R6r=o(":"),S6r=l(),ee=a("ul"),IM=a("li"),Y1e=a("strong"),P6r=o("albert"),$6r=o(" \u2014 "),qX=a("a"),I6r=o("TFAlbertForQuestionAnswering"),N6r=o(" (ALBERT model)"),D6r=l(),NM=a("li"),K1e=a("strong"),j6r=o("bert"),q6r=o(" \u2014 "),GX=a("a"),G6r=o("TFBertForQuestionAnswering"),O6r=o(" (BERT model)"),X6r=l(),DM=a("li"),Z1e=a("strong"),V6r=o("camembert"),z6r=o(" \u2014 "),OX=a("a"),W6r=o("TFCamembertForQuestionAnswering"),Q6r=o(" (CamemBERT model)"),H6r=l(),jM=a("li"),e2e=a("strong"),U6r=o("convbert"),J6r=o(" \u2014 "),XX=a("a"),Y6r=o("TFConvBertForQuestionAnswering"),K6r=o(" (ConvBERT model)"),Z6r=l(),qM=a("li"),o2e=a("strong"),ebr=o("deberta"),obr=o(" \u2014 "),VX=a("a"),rbr=o("TFDebertaForQuestionAnswering"),tbr=o(" (DeBERTa model)"),abr=l(),GM=a("li"),r2e=a("strong"),nbr=o("deberta-v2"),sbr=o(" \u2014 "),zX=a("a"),lbr=o("TFDebertaV2ForQuestionAnswering"),ibr=o(" (DeBERTa-v2 model)"),dbr=l(),OM=a("li"),t2e=a("strong"),cbr=o("distilbert"),fbr=o(" \u2014 "),WX=a("a"),mbr=o("TFDistilBertForQuestionAnswering"),gbr=o(" (DistilBERT model)"),hbr=l(),XM=a("li"),a2e=a("strong"),pbr=o("electra"),_br=o(" \u2014 "),QX=a("a"),ubr=o("TFElectraForQuestionAnswering"),bbr=o(" (ELECTRA model)"),vbr=l(),VM=a("li"),n2e=a("strong"),Tbr=o("flaubert"),Fbr=o(" \u2014 "),HX=a("a"),Cbr=o("TFFlaubertForQuestionAnsweringSimple"),Mbr=o(" (FlauBERT model)"),Ebr=l(),zM=a("li"),s2e=a("strong"),ybr=o("funnel"),wbr=o(" \u2014 "),UX=a("a"),Abr=o("TFFunnelForQuestionAnswering"),Lbr=o(" (Funnel Transformer model)"),Bbr=l(),WM=a("li"),l2e=a("strong"),xbr=o("longformer"),kbr=o(" \u2014 "),JX=a("a"),Rbr=o("TFLongformerForQuestionAnswering"),Sbr=o(" (Longformer model)"),Pbr=l(),QM=a("li"),i2e=a("strong"),$br=o("mobilebert"),Ibr=o(" \u2014 "),YX=a("a"),Nbr=o("TFMobileBertForQuestionAnswering"),Dbr=o(" (MobileBERT model)"),jbr=l(),HM=a("li"),d2e=a("strong"),qbr=o("mpnet"),Gbr=o(" \u2014 "),KX=a("a"),Obr=o("TFMPNetForQuestionAnswering"),Xbr=o(" (MPNet model)"),Vbr=l(),UM=a("li"),c2e=a("strong"),zbr=o("rembert"),Wbr=o(" \u2014 "),ZX=a("a"),Qbr=o("TFRemBertForQuestionAnswering"),Hbr=o(" (RemBERT model)"),Ubr=l(),JM=a("li"),f2e=a("strong"),Jbr=o("roberta"),Ybr=o(" \u2014 "),eV=a("a"),Kbr=o("TFRobertaForQuestionAnswering"),Zbr=o(" (RoBERTa model)"),evr=l(),YM=a("li"),m2e=a("strong"),ovr=o("roformer"),rvr=o(" \u2014 "),oV=a("a"),tvr=o("TFRoFormerForQuestionAnswering"),avr=o(" (RoFormer model)"),nvr=l(),KM=a("li"),g2e=a("strong"),svr=o("xlm"),lvr=o(" \u2014 "),rV=a("a"),ivr=o("TFXLMForQuestionAnsweringSimple"),dvr=o(" (XLM model)"),cvr=l(),ZM=a("li"),h2e=a("strong"),fvr=o("xlm-roberta"),mvr=o(" \u2014 "),tV=a("a"),gvr=o("TFXLMRobertaForQuestionAnswering"),hvr=o(" (XLM-RoBERTa model)"),pvr=l(),e4=a("li"),p2e=a("strong"),_vr=o("xlnet"),uvr=o(" \u2014 "),aV=a("a"),bvr=o("TFXLNetForQuestionAnsweringSimple"),vvr=o(" (XLNet model)"),Tvr=l(),_2e=a("p"),Fvr=o("Examples:"),Cvr=l(),f(gL.$$.fragment),XRe=l(),zc=a("h2"),o4=a("a"),u2e=a("span"),f(hL.$$.fragment),Mvr=l(),b2e=a("span"),Evr=o("TFAutoModelForVision2Seq"),VRe=l(),xr=a("div"),f(pL.$$.fragment),yvr=l(),Wc=a("p"),wvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),v2e=a("code"),Avr=o("from_pretrained()"),Lvr=o("class method or the "),T2e=a("code"),Bvr=o("from_config()"),xvr=o(`class
method.`),kvr=l(),_L=a("p"),Rvr=o("This class cannot be instantiated directly using "),F2e=a("code"),Svr=o("__init__()"),Pvr=o(" (throws an error)."),$vr=l(),Et=a("div"),f(uL.$$.fragment),Ivr=l(),C2e=a("p"),Nvr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Dvr=l(),Qc=a("p"),jvr=o(`Note:
Loading a model from its configuration file does `),M2e=a("strong"),qvr=o("not"),Gvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),E2e=a("code"),Ovr=o("from_pretrained()"),Xvr=o("to load the model weights."),Vvr=l(),y2e=a("p"),zvr=o("Examples:"),Wvr=l(),f(bL.$$.fragment),Qvr=l(),yo=a("div"),f(vL.$$.fragment),Hvr=l(),w2e=a("p"),Uvr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Jvr=l(),An=a("p"),Yvr=o("The model class to instantiate is selected based on the "),A2e=a("code"),Kvr=o("model_type"),Zvr=o(` property of the config object (either
passed as an argument or loaded from `),L2e=a("code"),eTr=o("pretrained_model_name_or_path"),oTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=a("code"),rTr=o("pretrained_model_name_or_path"),tTr=o(":"),aTr=l(),x2e=a("ul"),r4=a("li"),k2e=a("strong"),nTr=o("vision-encoder-decoder"),sTr=o(" \u2014 "),nV=a("a"),lTr=o("TFVisionEncoderDecoderModel"),iTr=o(" (Vision Encoder decoder model)"),dTr=l(),R2e=a("p"),cTr=o("Examples:"),fTr=l(),f(TL.$$.fragment),zRe=l(),Hc=a("h2"),t4=a("a"),S2e=a("span"),f(FL.$$.fragment),mTr=l(),P2e=a("span"),gTr=o("TFAutoModelForSpeechSeq2Seq"),WRe=l(),kr=a("div"),f(CL.$$.fragment),hTr=l(),Uc=a("p"),pTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),$2e=a("code"),_Tr=o("from_pretrained()"),uTr=o("class method or the "),I2e=a("code"),bTr=o("from_config()"),vTr=o(`class
method.`),TTr=l(),ML=a("p"),FTr=o("This class cannot be instantiated directly using "),N2e=a("code"),CTr=o("__init__()"),MTr=o(" (throws an error)."),ETr=l(),yt=a("div"),f(EL.$$.fragment),yTr=l(),D2e=a("p"),wTr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ATr=l(),Jc=a("p"),LTr=o(`Note:
Loading a model from its configuration file does `),j2e=a("strong"),BTr=o("not"),xTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),q2e=a("code"),kTr=o("from_pretrained()"),RTr=o("to load the model weights."),STr=l(),G2e=a("p"),PTr=o("Examples:"),$Tr=l(),f(yL.$$.fragment),ITr=l(),wo=a("div"),f(wL.$$.fragment),NTr=l(),O2e=a("p"),DTr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jTr=l(),Ln=a("p"),qTr=o("The model class to instantiate is selected based on the "),X2e=a("code"),GTr=o("model_type"),OTr=o(` property of the config object (either
passed as an argument or loaded from `),V2e=a("code"),XTr=o("pretrained_model_name_or_path"),VTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=a("code"),zTr=o("pretrained_model_name_or_path"),WTr=o(":"),QTr=l(),W2e=a("ul"),a4=a("li"),Q2e=a("strong"),HTr=o("speech_to_text"),UTr=o(" \u2014 "),sV=a("a"),JTr=o("TFSpeech2TextForConditionalGeneration"),YTr=o(" (Speech2Text model)"),KTr=l(),H2e=a("p"),ZTr=o("Examples:"),eFr=l(),f(AL.$$.fragment),QRe=l(),Yc=a("h2"),n4=a("a"),U2e=a("span"),f(LL.$$.fragment),oFr=l(),J2e=a("span"),rFr=o("FlaxAutoModel"),HRe=l(),Rr=a("div"),f(BL.$$.fragment),tFr=l(),Kc=a("p"),aFr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Y2e=a("code"),nFr=o("from_pretrained()"),sFr=o("class method or the "),K2e=a("code"),lFr=o("from_config()"),iFr=o(`class
method.`),dFr=l(),xL=a("p"),cFr=o("This class cannot be instantiated directly using "),Z2e=a("code"),fFr=o("__init__()"),mFr=o(" (throws an error)."),gFr=l(),wt=a("div"),f(kL.$$.fragment),hFr=l(),e6e=a("p"),pFr=o("Instantiates one of the base model classes of the library from a configuration."),_Fr=l(),Zc=a("p"),uFr=o(`Note:
Loading a model from its configuration file does `),o6e=a("strong"),bFr=o("not"),vFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),r6e=a("code"),TFr=o("from_pretrained()"),FFr=o("to load the model weights."),CFr=l(),t6e=a("p"),MFr=o("Examples:"),EFr=l(),f(RL.$$.fragment),yFr=l(),Ao=a("div"),f(SL.$$.fragment),wFr=l(),a6e=a("p"),AFr=o("Instantiate one of the base model classes of the library from a pretrained model."),LFr=l(),Bn=a("p"),BFr=o("The model class to instantiate is selected based on the "),n6e=a("code"),xFr=o("model_type"),kFr=o(` property of the config object (either
passed as an argument or loaded from `),s6e=a("code"),RFr=o("pretrained_model_name_or_path"),SFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l6e=a("code"),PFr=o("pretrained_model_name_or_path"),$Fr=o(":"),IFr=l(),z=a("ul"),s4=a("li"),i6e=a("strong"),NFr=o("albert"),DFr=o(" \u2014 "),lV=a("a"),jFr=o("FlaxAlbertModel"),qFr=o(" (ALBERT model)"),GFr=l(),l4=a("li"),d6e=a("strong"),OFr=o("bart"),XFr=o(" \u2014 "),iV=a("a"),VFr=o("FlaxBartModel"),zFr=o(" (BART model)"),WFr=l(),i4=a("li"),c6e=a("strong"),QFr=o("beit"),HFr=o(" \u2014 "),dV=a("a"),UFr=o("FlaxBeitModel"),JFr=o(" (BEiT model)"),YFr=l(),d4=a("li"),f6e=a("strong"),KFr=o("bert"),ZFr=o(" \u2014 "),cV=a("a"),eCr=o("FlaxBertModel"),oCr=o(" (BERT model)"),rCr=l(),c4=a("li"),m6e=a("strong"),tCr=o("big_bird"),aCr=o(" \u2014 "),fV=a("a"),nCr=o("FlaxBigBirdModel"),sCr=o(" (BigBird model)"),lCr=l(),f4=a("li"),g6e=a("strong"),iCr=o("blenderbot"),dCr=o(" \u2014 "),mV=a("a"),cCr=o("FlaxBlenderbotModel"),fCr=o(" (Blenderbot model)"),mCr=l(),m4=a("li"),h6e=a("strong"),gCr=o("blenderbot-small"),hCr=o(" \u2014 "),gV=a("a"),pCr=o("FlaxBlenderbotSmallModel"),_Cr=o(" (BlenderbotSmall model)"),uCr=l(),g4=a("li"),p6e=a("strong"),bCr=o("clip"),vCr=o(" \u2014 "),hV=a("a"),TCr=o("FlaxCLIPModel"),FCr=o(" (CLIP model)"),CCr=l(),h4=a("li"),_6e=a("strong"),MCr=o("distilbert"),ECr=o(" \u2014 "),pV=a("a"),yCr=o("FlaxDistilBertModel"),wCr=o(" (DistilBERT model)"),ACr=l(),p4=a("li"),u6e=a("strong"),LCr=o("electra"),BCr=o(" \u2014 "),_V=a("a"),xCr=o("FlaxElectraModel"),kCr=o(" (ELECTRA model)"),RCr=l(),_4=a("li"),b6e=a("strong"),SCr=o("gpt2"),PCr=o(" \u2014 "),uV=a("a"),$Cr=o("FlaxGPT2Model"),ICr=o(" (OpenAI GPT-2 model)"),NCr=l(),u4=a("li"),v6e=a("strong"),DCr=o("gpt_neo"),jCr=o(" \u2014 "),bV=a("a"),qCr=o("FlaxGPTNeoModel"),GCr=o(" (GPT Neo model)"),OCr=l(),b4=a("li"),T6e=a("strong"),XCr=o("gptj"),VCr=o(" \u2014 "),vV=a("a"),zCr=o("FlaxGPTJModel"),WCr=o(" (GPT-J model)"),QCr=l(),v4=a("li"),F6e=a("strong"),HCr=o("marian"),UCr=o(" \u2014 "),TV=a("a"),JCr=o("FlaxMarianModel"),YCr=o(" (Marian model)"),KCr=l(),T4=a("li"),C6e=a("strong"),ZCr=o("mbart"),eMr=o(" \u2014 "),FV=a("a"),oMr=o("FlaxMBartModel"),rMr=o(" (mBART model)"),tMr=l(),F4=a("li"),M6e=a("strong"),aMr=o("mt5"),nMr=o(" \u2014 "),CV=a("a"),sMr=o("FlaxMT5Model"),lMr=o(" (mT5 model)"),iMr=l(),C4=a("li"),E6e=a("strong"),dMr=o("pegasus"),cMr=o(" \u2014 "),MV=a("a"),fMr=o("FlaxPegasusModel"),mMr=o(" (Pegasus model)"),gMr=l(),M4=a("li"),y6e=a("strong"),hMr=o("roberta"),pMr=o(" \u2014 "),EV=a("a"),_Mr=o("FlaxRobertaModel"),uMr=o(" (RoBERTa model)"),bMr=l(),E4=a("li"),w6e=a("strong"),vMr=o("roformer"),TMr=o(" \u2014 "),yV=a("a"),FMr=o("FlaxRoFormerModel"),CMr=o(" (RoFormer model)"),MMr=l(),y4=a("li"),A6e=a("strong"),EMr=o("t5"),yMr=o(" \u2014 "),wV=a("a"),wMr=o("FlaxT5Model"),AMr=o(" (T5 model)"),LMr=l(),w4=a("li"),L6e=a("strong"),BMr=o("vision-text-dual-encoder"),xMr=o(" \u2014 "),AV=a("a"),kMr=o("FlaxVisionTextDualEncoderModel"),RMr=o(" (VisionTextDualEncoder model)"),SMr=l(),A4=a("li"),B6e=a("strong"),PMr=o("vit"),$Mr=o(" \u2014 "),LV=a("a"),IMr=o("FlaxViTModel"),NMr=o(" (ViT model)"),DMr=l(),L4=a("li"),x6e=a("strong"),jMr=o("wav2vec2"),qMr=o(" \u2014 "),BV=a("a"),GMr=o("FlaxWav2Vec2Model"),OMr=o(" (Wav2Vec2 model)"),XMr=l(),B4=a("li"),k6e=a("strong"),VMr=o("xglm"),zMr=o(" \u2014 "),xV=a("a"),WMr=o("FlaxXGLMModel"),QMr=o(" (XGLM model)"),HMr=l(),x4=a("li"),R6e=a("strong"),UMr=o("xlm-roberta"),JMr=o(" \u2014 "),kV=a("a"),YMr=o("FlaxXLMRobertaModel"),KMr=o(" (XLM-RoBERTa model)"),ZMr=l(),S6e=a("p"),e4r=o("Examples:"),o4r=l(),f(PL.$$.fragment),URe=l(),ef=a("h2"),k4=a("a"),P6e=a("span"),f($L.$$.fragment),r4r=l(),$6e=a("span"),t4r=o("FlaxAutoModelForCausalLM"),JRe=l(),Sr=a("div"),f(IL.$$.fragment),a4r=l(),of=a("p"),n4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),I6e=a("code"),s4r=o("from_pretrained()"),l4r=o("class method or the "),N6e=a("code"),i4r=o("from_config()"),d4r=o(`class
method.`),c4r=l(),NL=a("p"),f4r=o("This class cannot be instantiated directly using "),D6e=a("code"),m4r=o("__init__()"),g4r=o(" (throws an error)."),h4r=l(),At=a("div"),f(DL.$$.fragment),p4r=l(),j6e=a("p"),_4r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),u4r=l(),rf=a("p"),b4r=o(`Note:
Loading a model from its configuration file does `),q6e=a("strong"),v4r=o("not"),T4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),G6e=a("code"),F4r=o("from_pretrained()"),C4r=o("to load the model weights."),M4r=l(),O6e=a("p"),E4r=o("Examples:"),y4r=l(),f(jL.$$.fragment),w4r=l(),Lo=a("div"),f(qL.$$.fragment),A4r=l(),X6e=a("p"),L4r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),B4r=l(),xn=a("p"),x4r=o("The model class to instantiate is selected based on the "),V6e=a("code"),k4r=o("model_type"),R4r=o(` property of the config object (either
passed as an argument or loaded from `),z6e=a("code"),S4r=o("pretrained_model_name_or_path"),P4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W6e=a("code"),$4r=o("pretrained_model_name_or_path"),I4r=o(":"),N4r=l(),ca=a("ul"),R4=a("li"),Q6e=a("strong"),D4r=o("bart"),j4r=o(" \u2014 "),RV=a("a"),q4r=o("FlaxBartForCausalLM"),G4r=o(" (BART model)"),O4r=l(),S4=a("li"),H6e=a("strong"),X4r=o("gpt2"),V4r=o(" \u2014 "),SV=a("a"),z4r=o("FlaxGPT2LMHeadModel"),W4r=o(" (OpenAI GPT-2 model)"),Q4r=l(),P4=a("li"),U6e=a("strong"),H4r=o("gpt_neo"),U4r=o(" \u2014 "),PV=a("a"),J4r=o("FlaxGPTNeoForCausalLM"),Y4r=o(" (GPT Neo model)"),K4r=l(),$4=a("li"),J6e=a("strong"),Z4r=o("gptj"),eEr=o(" \u2014 "),$V=a("a"),oEr=o("FlaxGPTJForCausalLM"),rEr=o(" (GPT-J model)"),tEr=l(),I4=a("li"),Y6e=a("strong"),aEr=o("xglm"),nEr=o(" \u2014 "),IV=a("a"),sEr=o("FlaxXGLMForCausalLM"),lEr=o(" (XGLM model)"),iEr=l(),K6e=a("p"),dEr=o("Examples:"),cEr=l(),f(GL.$$.fragment),YRe=l(),tf=a("h2"),N4=a("a"),Z6e=a("span"),f(OL.$$.fragment),fEr=l(),ebe=a("span"),mEr=o("FlaxAutoModelForPreTraining"),KRe=l(),Pr=a("div"),f(XL.$$.fragment),gEr=l(),af=a("p"),hEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),obe=a("code"),pEr=o("from_pretrained()"),_Er=o("class method or the "),rbe=a("code"),uEr=o("from_config()"),bEr=o(`class
method.`),vEr=l(),VL=a("p"),TEr=o("This class cannot be instantiated directly using "),tbe=a("code"),FEr=o("__init__()"),CEr=o(" (throws an error)."),MEr=l(),Lt=a("div"),f(zL.$$.fragment),EEr=l(),abe=a("p"),yEr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wEr=l(),nf=a("p"),AEr=o(`Note:
Loading a model from its configuration file does `),nbe=a("strong"),LEr=o("not"),BEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sbe=a("code"),xEr=o("from_pretrained()"),kEr=o("to load the model weights."),REr=l(),lbe=a("p"),SEr=o("Examples:"),PEr=l(),f(WL.$$.fragment),$Er=l(),Bo=a("div"),f(QL.$$.fragment),IEr=l(),ibe=a("p"),NEr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),DEr=l(),kn=a("p"),jEr=o("The model class to instantiate is selected based on the "),dbe=a("code"),qEr=o("model_type"),GEr=o(` property of the config object (either
passed as an argument or loaded from `),cbe=a("code"),OEr=o("pretrained_model_name_or_path"),XEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=a("code"),VEr=o("pretrained_model_name_or_path"),zEr=o(":"),WEr=l(),fe=a("ul"),D4=a("li"),mbe=a("strong"),QEr=o("albert"),HEr=o(" \u2014 "),NV=a("a"),UEr=o("FlaxAlbertForPreTraining"),JEr=o(" (ALBERT model)"),YEr=l(),j4=a("li"),gbe=a("strong"),KEr=o("bart"),ZEr=o(" \u2014 "),DV=a("a"),e3r=o("FlaxBartForConditionalGeneration"),o3r=o(" (BART model)"),r3r=l(),q4=a("li"),hbe=a("strong"),t3r=o("bert"),a3r=o(" \u2014 "),jV=a("a"),n3r=o("FlaxBertForPreTraining"),s3r=o(" (BERT model)"),l3r=l(),G4=a("li"),pbe=a("strong"),i3r=o("big_bird"),d3r=o(" \u2014 "),qV=a("a"),c3r=o("FlaxBigBirdForPreTraining"),f3r=o(" (BigBird model)"),m3r=l(),O4=a("li"),_be=a("strong"),g3r=o("electra"),h3r=o(" \u2014 "),GV=a("a"),p3r=o("FlaxElectraForPreTraining"),_3r=o(" (ELECTRA model)"),u3r=l(),X4=a("li"),ube=a("strong"),b3r=o("mbart"),v3r=o(" \u2014 "),OV=a("a"),T3r=o("FlaxMBartForConditionalGeneration"),F3r=o(" (mBART model)"),C3r=l(),V4=a("li"),bbe=a("strong"),M3r=o("mt5"),E3r=o(" \u2014 "),XV=a("a"),y3r=o("FlaxMT5ForConditionalGeneration"),w3r=o(" (mT5 model)"),A3r=l(),z4=a("li"),vbe=a("strong"),L3r=o("roberta"),B3r=o(" \u2014 "),VV=a("a"),x3r=o("FlaxRobertaForMaskedLM"),k3r=o(" (RoBERTa model)"),R3r=l(),W4=a("li"),Tbe=a("strong"),S3r=o("roformer"),P3r=o(" \u2014 "),zV=a("a"),$3r=o("FlaxRoFormerForMaskedLM"),I3r=o(" (RoFormer model)"),N3r=l(),Q4=a("li"),Fbe=a("strong"),D3r=o("t5"),j3r=o(" \u2014 "),WV=a("a"),q3r=o("FlaxT5ForConditionalGeneration"),G3r=o(" (T5 model)"),O3r=l(),H4=a("li"),Cbe=a("strong"),X3r=o("wav2vec2"),V3r=o(" \u2014 "),QV=a("a"),z3r=o("FlaxWav2Vec2ForPreTraining"),W3r=o(" (Wav2Vec2 model)"),Q3r=l(),U4=a("li"),Mbe=a("strong"),H3r=o("xlm-roberta"),U3r=o(" \u2014 "),HV=a("a"),J3r=o("FlaxXLMRobertaForMaskedLM"),Y3r=o(" (XLM-RoBERTa model)"),K3r=l(),Ebe=a("p"),Z3r=o("Examples:"),e5r=l(),f(HL.$$.fragment),ZRe=l(),sf=a("h2"),J4=a("a"),ybe=a("span"),f(UL.$$.fragment),o5r=l(),wbe=a("span"),r5r=o("FlaxAutoModelForMaskedLM"),eSe=l(),$r=a("div"),f(JL.$$.fragment),t5r=l(),lf=a("p"),a5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Abe=a("code"),n5r=o("from_pretrained()"),s5r=o("class method or the "),Lbe=a("code"),l5r=o("from_config()"),i5r=o(`class
method.`),d5r=l(),YL=a("p"),c5r=o("This class cannot be instantiated directly using "),Bbe=a("code"),f5r=o("__init__()"),m5r=o(" (throws an error)."),g5r=l(),Bt=a("div"),f(KL.$$.fragment),h5r=l(),xbe=a("p"),p5r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_5r=l(),df=a("p"),u5r=o(`Note:
Loading a model from its configuration file does `),kbe=a("strong"),b5r=o("not"),v5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rbe=a("code"),T5r=o("from_pretrained()"),F5r=o("to load the model weights."),C5r=l(),Sbe=a("p"),M5r=o("Examples:"),E5r=l(),f(ZL.$$.fragment),y5r=l(),xo=a("div"),f(e7.$$.fragment),w5r=l(),Pbe=a("p"),A5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),L5r=l(),Rn=a("p"),B5r=o("The model class to instantiate is selected based on the "),$be=a("code"),x5r=o("model_type"),k5r=o(` property of the config object (either
passed as an argument or loaded from `),Ibe=a("code"),R5r=o("pretrained_model_name_or_path"),S5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=a("code"),P5r=o("pretrained_model_name_or_path"),$5r=o(":"),I5r=l(),be=a("ul"),Y4=a("li"),Dbe=a("strong"),N5r=o("albert"),D5r=o(" \u2014 "),UV=a("a"),j5r=o("FlaxAlbertForMaskedLM"),q5r=o(" (ALBERT model)"),G5r=l(),K4=a("li"),jbe=a("strong"),O5r=o("bart"),X5r=o(" \u2014 "),JV=a("a"),V5r=o("FlaxBartForConditionalGeneration"),z5r=o(" (BART model)"),W5r=l(),Z4=a("li"),qbe=a("strong"),Q5r=o("bert"),H5r=o(" \u2014 "),YV=a("a"),U5r=o("FlaxBertForMaskedLM"),J5r=o(" (BERT model)"),Y5r=l(),eE=a("li"),Gbe=a("strong"),K5r=o("big_bird"),Z5r=o(" \u2014 "),KV=a("a"),eyr=o("FlaxBigBirdForMaskedLM"),oyr=o(" (BigBird model)"),ryr=l(),oE=a("li"),Obe=a("strong"),tyr=o("distilbert"),ayr=o(" \u2014 "),ZV=a("a"),nyr=o("FlaxDistilBertForMaskedLM"),syr=o(" (DistilBERT model)"),lyr=l(),rE=a("li"),Xbe=a("strong"),iyr=o("electra"),dyr=o(" \u2014 "),ez=a("a"),cyr=o("FlaxElectraForMaskedLM"),fyr=o(" (ELECTRA model)"),myr=l(),tE=a("li"),Vbe=a("strong"),gyr=o("mbart"),hyr=o(" \u2014 "),oz=a("a"),pyr=o("FlaxMBartForConditionalGeneration"),_yr=o(" (mBART model)"),uyr=l(),aE=a("li"),zbe=a("strong"),byr=o("roberta"),vyr=o(" \u2014 "),rz=a("a"),Tyr=o("FlaxRobertaForMaskedLM"),Fyr=o(" (RoBERTa model)"),Cyr=l(),nE=a("li"),Wbe=a("strong"),Myr=o("roformer"),Eyr=o(" \u2014 "),tz=a("a"),yyr=o("FlaxRoFormerForMaskedLM"),wyr=o(" (RoFormer model)"),Ayr=l(),sE=a("li"),Qbe=a("strong"),Lyr=o("xlm-roberta"),Byr=o(" \u2014 "),az=a("a"),xyr=o("FlaxXLMRobertaForMaskedLM"),kyr=o(" (XLM-RoBERTa model)"),Ryr=l(),Hbe=a("p"),Syr=o("Examples:"),Pyr=l(),f(o7.$$.fragment),oSe=l(),cf=a("h2"),lE=a("a"),Ube=a("span"),f(r7.$$.fragment),$yr=l(),Jbe=a("span"),Iyr=o("FlaxAutoModelForSeq2SeqLM"),rSe=l(),Ir=a("div"),f(t7.$$.fragment),Nyr=l(),ff=a("p"),Dyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ybe=a("code"),jyr=o("from_pretrained()"),qyr=o("class method or the "),Kbe=a("code"),Gyr=o("from_config()"),Oyr=o(`class
method.`),Xyr=l(),a7=a("p"),Vyr=o("This class cannot be instantiated directly using "),Zbe=a("code"),zyr=o("__init__()"),Wyr=o(" (throws an error)."),Qyr=l(),xt=a("div"),f(n7.$$.fragment),Hyr=l(),eve=a("p"),Uyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jyr=l(),mf=a("p"),Yyr=o(`Note:
Loading a model from its configuration file does `),ove=a("strong"),Kyr=o("not"),Zyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rve=a("code"),ewr=o("from_pretrained()"),owr=o("to load the model weights."),rwr=l(),tve=a("p"),twr=o("Examples:"),awr=l(),f(s7.$$.fragment),nwr=l(),ko=a("div"),f(l7.$$.fragment),swr=l(),ave=a("p"),lwr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iwr=l(),Sn=a("p"),dwr=o("The model class to instantiate is selected based on the "),nve=a("code"),cwr=o("model_type"),fwr=o(` property of the config object (either
passed as an argument or loaded from `),sve=a("code"),mwr=o("pretrained_model_name_or_path"),gwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=a("code"),hwr=o("pretrained_model_name_or_path"),pwr=o(":"),_wr=l(),Me=a("ul"),iE=a("li"),ive=a("strong"),uwr=o("bart"),bwr=o(" \u2014 "),nz=a("a"),vwr=o("FlaxBartForConditionalGeneration"),Twr=o(" (BART model)"),Fwr=l(),dE=a("li"),dve=a("strong"),Cwr=o("blenderbot"),Mwr=o(" \u2014 "),sz=a("a"),Ewr=o("FlaxBlenderbotForConditionalGeneration"),ywr=o(" (Blenderbot model)"),wwr=l(),cE=a("li"),cve=a("strong"),Awr=o("blenderbot-small"),Lwr=o(" \u2014 "),lz=a("a"),Bwr=o("FlaxBlenderbotSmallForConditionalGeneration"),xwr=o(" (BlenderbotSmall model)"),kwr=l(),fE=a("li"),fve=a("strong"),Rwr=o("encoder-decoder"),Swr=o(" \u2014 "),iz=a("a"),Pwr=o("FlaxEncoderDecoderModel"),$wr=o(" (Encoder decoder model)"),Iwr=l(),mE=a("li"),mve=a("strong"),Nwr=o("marian"),Dwr=o(" \u2014 "),dz=a("a"),jwr=o("FlaxMarianMTModel"),qwr=o(" (Marian model)"),Gwr=l(),gE=a("li"),gve=a("strong"),Owr=o("mbart"),Xwr=o(" \u2014 "),cz=a("a"),Vwr=o("FlaxMBartForConditionalGeneration"),zwr=o(" (mBART model)"),Wwr=l(),hE=a("li"),hve=a("strong"),Qwr=o("mt5"),Hwr=o(" \u2014 "),fz=a("a"),Uwr=o("FlaxMT5ForConditionalGeneration"),Jwr=o(" (mT5 model)"),Ywr=l(),pE=a("li"),pve=a("strong"),Kwr=o("pegasus"),Zwr=o(" \u2014 "),mz=a("a"),eAr=o("FlaxPegasusForConditionalGeneration"),oAr=o(" (Pegasus model)"),rAr=l(),_E=a("li"),_ve=a("strong"),tAr=o("t5"),aAr=o(" \u2014 "),gz=a("a"),nAr=o("FlaxT5ForConditionalGeneration"),sAr=o(" (T5 model)"),lAr=l(),uve=a("p"),iAr=o("Examples:"),dAr=l(),f(i7.$$.fragment),tSe=l(),gf=a("h2"),uE=a("a"),bve=a("span"),f(d7.$$.fragment),cAr=l(),vve=a("span"),fAr=o("FlaxAutoModelForSequenceClassification"),aSe=l(),Nr=a("div"),f(c7.$$.fragment),mAr=l(),hf=a("p"),gAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Tve=a("code"),hAr=o("from_pretrained()"),pAr=o("class method or the "),Fve=a("code"),_Ar=o("from_config()"),uAr=o(`class
method.`),bAr=l(),f7=a("p"),vAr=o("This class cannot be instantiated directly using "),Cve=a("code"),TAr=o("__init__()"),FAr=o(" (throws an error)."),CAr=l(),kt=a("div"),f(m7.$$.fragment),MAr=l(),Mve=a("p"),EAr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yAr=l(),pf=a("p"),wAr=o(`Note:
Loading a model from its configuration file does `),Eve=a("strong"),AAr=o("not"),LAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yve=a("code"),BAr=o("from_pretrained()"),xAr=o("to load the model weights."),kAr=l(),wve=a("p"),RAr=o("Examples:"),SAr=l(),f(g7.$$.fragment),PAr=l(),Ro=a("div"),f(h7.$$.fragment),$Ar=l(),Ave=a("p"),IAr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),NAr=l(),Pn=a("p"),DAr=o("The model class to instantiate is selected based on the "),Lve=a("code"),jAr=o("model_type"),qAr=o(` property of the config object (either
passed as an argument or loaded from `),Bve=a("code"),GAr=o("pretrained_model_name_or_path"),OAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=a("code"),XAr=o("pretrained_model_name_or_path"),VAr=o(":"),zAr=l(),ve=a("ul"),bE=a("li"),kve=a("strong"),WAr=o("albert"),QAr=o(" \u2014 "),hz=a("a"),HAr=o("FlaxAlbertForSequenceClassification"),UAr=o(" (ALBERT model)"),JAr=l(),vE=a("li"),Rve=a("strong"),YAr=o("bart"),KAr=o(" \u2014 "),pz=a("a"),ZAr=o("FlaxBartForSequenceClassification"),e0r=o(" (BART model)"),o0r=l(),TE=a("li"),Sve=a("strong"),r0r=o("bert"),t0r=o(" \u2014 "),_z=a("a"),a0r=o("FlaxBertForSequenceClassification"),n0r=o(" (BERT model)"),s0r=l(),FE=a("li"),Pve=a("strong"),l0r=o("big_bird"),i0r=o(" \u2014 "),uz=a("a"),d0r=o("FlaxBigBirdForSequenceClassification"),c0r=o(" (BigBird model)"),f0r=l(),CE=a("li"),$ve=a("strong"),m0r=o("distilbert"),g0r=o(" \u2014 "),bz=a("a"),h0r=o("FlaxDistilBertForSequenceClassification"),p0r=o(" (DistilBERT model)"),_0r=l(),ME=a("li"),Ive=a("strong"),u0r=o("electra"),b0r=o(" \u2014 "),vz=a("a"),v0r=o("FlaxElectraForSequenceClassification"),T0r=o(" (ELECTRA model)"),F0r=l(),EE=a("li"),Nve=a("strong"),C0r=o("mbart"),M0r=o(" \u2014 "),Tz=a("a"),E0r=o("FlaxMBartForSequenceClassification"),y0r=o(" (mBART model)"),w0r=l(),yE=a("li"),Dve=a("strong"),A0r=o("roberta"),L0r=o(" \u2014 "),Fz=a("a"),B0r=o("FlaxRobertaForSequenceClassification"),x0r=o(" (RoBERTa model)"),k0r=l(),wE=a("li"),jve=a("strong"),R0r=o("roformer"),S0r=o(" \u2014 "),Cz=a("a"),P0r=o("FlaxRoFormerForSequenceClassification"),$0r=o(" (RoFormer model)"),I0r=l(),AE=a("li"),qve=a("strong"),N0r=o("xlm-roberta"),D0r=o(" \u2014 "),Mz=a("a"),j0r=o("FlaxXLMRobertaForSequenceClassification"),q0r=o(" (XLM-RoBERTa model)"),G0r=l(),Gve=a("p"),O0r=o("Examples:"),X0r=l(),f(p7.$$.fragment),nSe=l(),_f=a("h2"),LE=a("a"),Ove=a("span"),f(_7.$$.fragment),V0r=l(),Xve=a("span"),z0r=o("FlaxAutoModelForQuestionAnswering"),sSe=l(),Dr=a("div"),f(u7.$$.fragment),W0r=l(),uf=a("p"),Q0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Vve=a("code"),H0r=o("from_pretrained()"),U0r=o("class method or the "),zve=a("code"),J0r=o("from_config()"),Y0r=o(`class
method.`),K0r=l(),b7=a("p"),Z0r=o("This class cannot be instantiated directly using "),Wve=a("code"),eLr=o("__init__()"),oLr=o(" (throws an error)."),rLr=l(),Rt=a("div"),f(v7.$$.fragment),tLr=l(),Qve=a("p"),aLr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nLr=l(),bf=a("p"),sLr=o(`Note:
Loading a model from its configuration file does `),Hve=a("strong"),lLr=o("not"),iLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uve=a("code"),dLr=o("from_pretrained()"),cLr=o("to load the model weights."),fLr=l(),Jve=a("p"),mLr=o("Examples:"),gLr=l(),f(T7.$$.fragment),hLr=l(),So=a("div"),f(F7.$$.fragment),pLr=l(),Yve=a("p"),_Lr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uLr=l(),$n=a("p"),bLr=o("The model class to instantiate is selected based on the "),Kve=a("code"),vLr=o("model_type"),TLr=o(` property of the config object (either
passed as an argument or loaded from `),Zve=a("code"),FLr=o("pretrained_model_name_or_path"),CLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eTe=a("code"),MLr=o("pretrained_model_name_or_path"),ELr=o(":"),yLr=l(),Te=a("ul"),BE=a("li"),oTe=a("strong"),wLr=o("albert"),ALr=o(" \u2014 "),Ez=a("a"),LLr=o("FlaxAlbertForQuestionAnswering"),BLr=o(" (ALBERT model)"),xLr=l(),xE=a("li"),rTe=a("strong"),kLr=o("bart"),RLr=o(" \u2014 "),yz=a("a"),SLr=o("FlaxBartForQuestionAnswering"),PLr=o(" (BART model)"),$Lr=l(),kE=a("li"),tTe=a("strong"),ILr=o("bert"),NLr=o(" \u2014 "),wz=a("a"),DLr=o("FlaxBertForQuestionAnswering"),jLr=o(" (BERT model)"),qLr=l(),RE=a("li"),aTe=a("strong"),GLr=o("big_bird"),OLr=o(" \u2014 "),Az=a("a"),XLr=o("FlaxBigBirdForQuestionAnswering"),VLr=o(" (BigBird model)"),zLr=l(),SE=a("li"),nTe=a("strong"),WLr=o("distilbert"),QLr=o(" \u2014 "),Lz=a("a"),HLr=o("FlaxDistilBertForQuestionAnswering"),ULr=o(" (DistilBERT model)"),JLr=l(),PE=a("li"),sTe=a("strong"),YLr=o("electra"),KLr=o(" \u2014 "),Bz=a("a"),ZLr=o("FlaxElectraForQuestionAnswering"),e7r=o(" (ELECTRA model)"),o7r=l(),$E=a("li"),lTe=a("strong"),r7r=o("mbart"),t7r=o(" \u2014 "),xz=a("a"),a7r=o("FlaxMBartForQuestionAnswering"),n7r=o(" (mBART model)"),s7r=l(),IE=a("li"),iTe=a("strong"),l7r=o("roberta"),i7r=o(" \u2014 "),kz=a("a"),d7r=o("FlaxRobertaForQuestionAnswering"),c7r=o(" (RoBERTa model)"),f7r=l(),NE=a("li"),dTe=a("strong"),m7r=o("roformer"),g7r=o(" \u2014 "),Rz=a("a"),h7r=o("FlaxRoFormerForQuestionAnswering"),p7r=o(" (RoFormer model)"),_7r=l(),DE=a("li"),cTe=a("strong"),u7r=o("xlm-roberta"),b7r=o(" \u2014 "),Sz=a("a"),v7r=o("FlaxXLMRobertaForQuestionAnswering"),T7r=o(" (XLM-RoBERTa model)"),F7r=l(),fTe=a("p"),C7r=o("Examples:"),M7r=l(),f(C7.$$.fragment),lSe=l(),vf=a("h2"),jE=a("a"),mTe=a("span"),f(M7.$$.fragment),E7r=l(),gTe=a("span"),y7r=o("FlaxAutoModelForTokenClassification"),iSe=l(),jr=a("div"),f(E7.$$.fragment),w7r=l(),Tf=a("p"),A7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hTe=a("code"),L7r=o("from_pretrained()"),B7r=o("class method or the "),pTe=a("code"),x7r=o("from_config()"),k7r=o(`class
method.`),R7r=l(),y7=a("p"),S7r=o("This class cannot be instantiated directly using "),_Te=a("code"),P7r=o("__init__()"),$7r=o(" (throws an error)."),I7r=l(),St=a("div"),f(w7.$$.fragment),N7r=l(),uTe=a("p"),D7r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),j7r=l(),Ff=a("p"),q7r=o(`Note:
Loading a model from its configuration file does `),bTe=a("strong"),G7r=o("not"),O7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vTe=a("code"),X7r=o("from_pretrained()"),V7r=o("to load the model weights."),z7r=l(),TTe=a("p"),W7r=o("Examples:"),Q7r=l(),f(A7.$$.fragment),H7r=l(),Po=a("div"),f(L7.$$.fragment),U7r=l(),FTe=a("p"),J7r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Y7r=l(),In=a("p"),K7r=o("The model class to instantiate is selected based on the "),CTe=a("code"),Z7r=o("model_type"),e8r=o(` property of the config object (either
passed as an argument or loaded from `),MTe=a("code"),o8r=o("pretrained_model_name_or_path"),r8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=a("code"),t8r=o("pretrained_model_name_or_path"),a8r=o(":"),n8r=l(),Se=a("ul"),qE=a("li"),yTe=a("strong"),s8r=o("albert"),l8r=o(" \u2014 "),Pz=a("a"),i8r=o("FlaxAlbertForTokenClassification"),d8r=o(" (ALBERT model)"),c8r=l(),GE=a("li"),wTe=a("strong"),f8r=o("bert"),m8r=o(" \u2014 "),$z=a("a"),g8r=o("FlaxBertForTokenClassification"),h8r=o(" (BERT model)"),p8r=l(),OE=a("li"),ATe=a("strong"),_8r=o("big_bird"),u8r=o(" \u2014 "),Iz=a("a"),b8r=o("FlaxBigBirdForTokenClassification"),v8r=o(" (BigBird model)"),T8r=l(),XE=a("li"),LTe=a("strong"),F8r=o("distilbert"),C8r=o(" \u2014 "),Nz=a("a"),M8r=o("FlaxDistilBertForTokenClassification"),E8r=o(" (DistilBERT model)"),y8r=l(),VE=a("li"),BTe=a("strong"),w8r=o("electra"),A8r=o(" \u2014 "),Dz=a("a"),L8r=o("FlaxElectraForTokenClassification"),B8r=o(" (ELECTRA model)"),x8r=l(),zE=a("li"),xTe=a("strong"),k8r=o("roberta"),R8r=o(" \u2014 "),jz=a("a"),S8r=o("FlaxRobertaForTokenClassification"),P8r=o(" (RoBERTa model)"),$8r=l(),WE=a("li"),kTe=a("strong"),I8r=o("roformer"),N8r=o(" \u2014 "),qz=a("a"),D8r=o("FlaxRoFormerForTokenClassification"),j8r=o(" (RoFormer model)"),q8r=l(),QE=a("li"),RTe=a("strong"),G8r=o("xlm-roberta"),O8r=o(" \u2014 "),Gz=a("a"),X8r=o("FlaxXLMRobertaForTokenClassification"),V8r=o(" (XLM-RoBERTa model)"),z8r=l(),STe=a("p"),W8r=o("Examples:"),Q8r=l(),f(B7.$$.fragment),dSe=l(),Cf=a("h2"),HE=a("a"),PTe=a("span"),f(x7.$$.fragment),H8r=l(),$Te=a("span"),U8r=o("FlaxAutoModelForMultipleChoice"),cSe=l(),qr=a("div"),f(k7.$$.fragment),J8r=l(),Mf=a("p"),Y8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ITe=a("code"),K8r=o("from_pretrained()"),Z8r=o("class method or the "),NTe=a("code"),e9r=o("from_config()"),o9r=o(`class
method.`),r9r=l(),R7=a("p"),t9r=o("This class cannot be instantiated directly using "),DTe=a("code"),a9r=o("__init__()"),n9r=o(" (throws an error)."),s9r=l(),Pt=a("div"),f(S7.$$.fragment),l9r=l(),jTe=a("p"),i9r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),d9r=l(),Ef=a("p"),c9r=o(`Note:
Loading a model from its configuration file does `),qTe=a("strong"),f9r=o("not"),m9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GTe=a("code"),g9r=o("from_pretrained()"),h9r=o("to load the model weights."),p9r=l(),OTe=a("p"),_9r=o("Examples:"),u9r=l(),f(P7.$$.fragment),b9r=l(),$o=a("div"),f($7.$$.fragment),v9r=l(),XTe=a("p"),T9r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),F9r=l(),Nn=a("p"),C9r=o("The model class to instantiate is selected based on the "),VTe=a("code"),M9r=o("model_type"),E9r=o(` property of the config object (either
passed as an argument or loaded from `),zTe=a("code"),y9r=o("pretrained_model_name_or_path"),w9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=a("code"),A9r=o("pretrained_model_name_or_path"),L9r=o(":"),B9r=l(),Pe=a("ul"),UE=a("li"),QTe=a("strong"),x9r=o("albert"),k9r=o(" \u2014 "),Oz=a("a"),R9r=o("FlaxAlbertForMultipleChoice"),S9r=o(" (ALBERT model)"),P9r=l(),JE=a("li"),HTe=a("strong"),$9r=o("bert"),I9r=o(" \u2014 "),Xz=a("a"),N9r=o("FlaxBertForMultipleChoice"),D9r=o(" (BERT model)"),j9r=l(),YE=a("li"),UTe=a("strong"),q9r=o("big_bird"),G9r=o(" \u2014 "),Vz=a("a"),O9r=o("FlaxBigBirdForMultipleChoice"),X9r=o(" (BigBird model)"),V9r=l(),KE=a("li"),JTe=a("strong"),z9r=o("distilbert"),W9r=o(" \u2014 "),zz=a("a"),Q9r=o("FlaxDistilBertForMultipleChoice"),H9r=o(" (DistilBERT model)"),U9r=l(),ZE=a("li"),YTe=a("strong"),J9r=o("electra"),Y9r=o(" \u2014 "),Wz=a("a"),K9r=o("FlaxElectraForMultipleChoice"),Z9r=o(" (ELECTRA model)"),eBr=l(),e3=a("li"),KTe=a("strong"),oBr=o("roberta"),rBr=o(" \u2014 "),Qz=a("a"),tBr=o("FlaxRobertaForMultipleChoice"),aBr=o(" (RoBERTa model)"),nBr=l(),o3=a("li"),ZTe=a("strong"),sBr=o("roformer"),lBr=o(" \u2014 "),Hz=a("a"),iBr=o("FlaxRoFormerForMultipleChoice"),dBr=o(" (RoFormer model)"),cBr=l(),r3=a("li"),eFe=a("strong"),fBr=o("xlm-roberta"),mBr=o(" \u2014 "),Uz=a("a"),gBr=o("FlaxXLMRobertaForMultipleChoice"),hBr=o(" (XLM-RoBERTa model)"),pBr=l(),oFe=a("p"),_Br=o("Examples:"),uBr=l(),f(I7.$$.fragment),fSe=l(),yf=a("h2"),t3=a("a"),rFe=a("span"),f(N7.$$.fragment),bBr=l(),tFe=a("span"),vBr=o("FlaxAutoModelForNextSentencePrediction"),mSe=l(),Gr=a("div"),f(D7.$$.fragment),TBr=l(),wf=a("p"),FBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aFe=a("code"),CBr=o("from_pretrained()"),MBr=o("class method or the "),nFe=a("code"),EBr=o("from_config()"),yBr=o(`class
method.`),wBr=l(),j7=a("p"),ABr=o("This class cannot be instantiated directly using "),sFe=a("code"),LBr=o("__init__()"),BBr=o(" (throws an error)."),xBr=l(),$t=a("div"),f(q7.$$.fragment),kBr=l(),lFe=a("p"),RBr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),SBr=l(),Af=a("p"),PBr=o(`Note:
Loading a model from its configuration file does `),iFe=a("strong"),$Br=o("not"),IBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dFe=a("code"),NBr=o("from_pretrained()"),DBr=o("to load the model weights."),jBr=l(),cFe=a("p"),qBr=o("Examples:"),GBr=l(),f(G7.$$.fragment),OBr=l(),Io=a("div"),f(O7.$$.fragment),XBr=l(),fFe=a("p"),VBr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),zBr=l(),Dn=a("p"),WBr=o("The model class to instantiate is selected based on the "),mFe=a("code"),QBr=o("model_type"),HBr=o(` property of the config object (either
passed as an argument or loaded from `),gFe=a("code"),UBr=o("pretrained_model_name_or_path"),JBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=a("code"),YBr=o("pretrained_model_name_or_path"),KBr=o(":"),ZBr=l(),pFe=a("ul"),a3=a("li"),_Fe=a("strong"),exr=o("bert"),oxr=o(" \u2014 "),Jz=a("a"),rxr=o("FlaxBertForNextSentencePrediction"),txr=o(" (BERT model)"),axr=l(),uFe=a("p"),nxr=o("Examples:"),sxr=l(),f(X7.$$.fragment),gSe=l(),Lf=a("h2"),n3=a("a"),bFe=a("span"),f(V7.$$.fragment),lxr=l(),vFe=a("span"),ixr=o("FlaxAutoModelForImageClassification"),hSe=l(),Or=a("div"),f(z7.$$.fragment),dxr=l(),Bf=a("p"),cxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TFe=a("code"),fxr=o("from_pretrained()"),mxr=o("class method or the "),FFe=a("code"),gxr=o("from_config()"),hxr=o(`class
method.`),pxr=l(),W7=a("p"),_xr=o("This class cannot be instantiated directly using "),CFe=a("code"),uxr=o("__init__()"),bxr=o(" (throws an error)."),vxr=l(),It=a("div"),f(Q7.$$.fragment),Txr=l(),MFe=a("p"),Fxr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Cxr=l(),xf=a("p"),Mxr=o(`Note:
Loading a model from its configuration file does `),EFe=a("strong"),Exr=o("not"),yxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yFe=a("code"),wxr=o("from_pretrained()"),Axr=o("to load the model weights."),Lxr=l(),wFe=a("p"),Bxr=o("Examples:"),xxr=l(),f(H7.$$.fragment),kxr=l(),No=a("div"),f(U7.$$.fragment),Rxr=l(),AFe=a("p"),Sxr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Pxr=l(),jn=a("p"),$xr=o("The model class to instantiate is selected based on the "),LFe=a("code"),Ixr=o("model_type"),Nxr=o(` property of the config object (either
passed as an argument or loaded from `),BFe=a("code"),Dxr=o("pretrained_model_name_or_path"),jxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=a("code"),qxr=o("pretrained_model_name_or_path"),Gxr=o(":"),Oxr=l(),J7=a("ul"),s3=a("li"),kFe=a("strong"),Xxr=o("beit"),Vxr=o(" \u2014 "),Yz=a("a"),zxr=o("FlaxBeitForImageClassification"),Wxr=o(" (BEiT model)"),Qxr=l(),l3=a("li"),RFe=a("strong"),Hxr=o("vit"),Uxr=o(" \u2014 "),Kz=a("a"),Jxr=o("FlaxViTForImageClassification"),Yxr=o(" (ViT model)"),Kxr=l(),SFe=a("p"),Zxr=o("Examples:"),ekr=l(),f(Y7.$$.fragment),pSe=l(),kf=a("h2"),i3=a("a"),PFe=a("span"),f(K7.$$.fragment),okr=l(),$Fe=a("span"),rkr=o("FlaxAutoModelForVision2Seq"),_Se=l(),Xr=a("div"),f(Z7.$$.fragment),tkr=l(),Rf=a("p"),akr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IFe=a("code"),nkr=o("from_pretrained()"),skr=o("class method or the "),NFe=a("code"),lkr=o("from_config()"),ikr=o(`class
method.`),dkr=l(),e8=a("p"),ckr=o("This class cannot be instantiated directly using "),DFe=a("code"),fkr=o("__init__()"),mkr=o(" (throws an error)."),gkr=l(),Nt=a("div"),f(o8.$$.fragment),hkr=l(),jFe=a("p"),pkr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_kr=l(),Sf=a("p"),ukr=o(`Note:
Loading a model from its configuration file does `),qFe=a("strong"),bkr=o("not"),vkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GFe=a("code"),Tkr=o("from_pretrained()"),Fkr=o("to load the model weights."),Ckr=l(),OFe=a("p"),Mkr=o("Examples:"),Ekr=l(),f(r8.$$.fragment),ykr=l(),Do=a("div"),f(t8.$$.fragment),wkr=l(),XFe=a("p"),Akr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Lkr=l(),qn=a("p"),Bkr=o("The model class to instantiate is selected based on the "),VFe=a("code"),xkr=o("model_type"),kkr=o(` property of the config object (either
passed as an argument or loaded from `),zFe=a("code"),Rkr=o("pretrained_model_name_or_path"),Skr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=a("code"),Pkr=o("pretrained_model_name_or_path"),$kr=o(":"),Ikr=l(),QFe=a("ul"),d3=a("li"),HFe=a("strong"),Nkr=o("vision-encoder-decoder"),Dkr=o(" \u2014 "),Zz=a("a"),jkr=o("FlaxVisionEncoderDecoderModel"),qkr=o(" (Vision Encoder decoder model)"),Gkr=l(),UFe=a("p"),Okr=o("Examples:"),Xkr=l(),f(a8.$$.fragment),this.h()},l(c){const u=K4t('[data-svelte="svelte-1phssyn"]',document.head);K=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var n8=s(de);Ee=n(n8,"A",{id:!0,class:!0,href:!0});var JFe=s(Ee);lo=n(JFe,"SPAN",{});var YFe=s(lo);m(me.$$.fragment,YFe),YFe.forEach(t),JFe.forEach(t),Ce=i(n8),Vo=n(n8,"SPAN",{});var zkr=s(Vo);Ii=r(zkr,"Auto Classes"),zkr.forEach(t),n8.forEach(t),If=i(c),fa=n(c,"P",{});var bSe=s(fa);Ni=r(bSe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=n(bSe,"CODE",{});var Wkr=s(Di);d5=r(Wkr,"from_pretrained()"),Wkr.forEach(t),Nf=r(bSe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),bSe.forEach(t),Be=i(c),co=n(c,"P",{});var c3=s(co);ji=r(c3,"Instantiating one of "),Gn=n(c3,"A",{href:!0});var Qkr=s(Gn);c5=r(Qkr,"AutoConfig"),Qkr.forEach(t),On=r(c3,", "),Xn=n(c3,"A",{href:!0});var Hkr=s(Xn);f5=r(Hkr,"AutoModel"),Hkr.forEach(t),qi=r(c3,`, and
`),Vn=n(c3,"A",{href:!0});var Ukr=s(Vn);m5=r(Ukr,"AutoTokenizer"),Ukr.forEach(t),Gi=r(c3," will directly create a class of the relevant architecture. For instance"),c3.forEach(t),Df=i(c),m(qa.$$.fragment,c),fo=i(c),_e=n(c,"P",{});var vSe=s(_e);r9=r(vSe,"will create a model that is an instance of "),Oi=n(vSe,"A",{href:!0});var Jkr=s(Oi);t9=r(Jkr,"BertModel"),Jkr.forEach(t),a9=r(vSe,"."),vSe.forEach(t),zo=i(c),Ga=n(c,"P",{});var TSe=s(Ga);n9=r(TSe,"There is one class of "),jf=n(TSe,"CODE",{});var Ykr=s(jf);s9=r(Ykr,"AutoModel"),Ykr.forEach(t),x$e=r(TSe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),TSe.forEach(t),_ke=i(c),Xi=n(c,"H2",{class:!0});var FSe=s(Xi);qf=n(FSe,"A",{id:!0,class:!0,href:!0});var Kkr=s(qf);WQ=n(Kkr,"SPAN",{});var Zkr=s(WQ);m(g5.$$.fragment,Zkr),Zkr.forEach(t),Kkr.forEach(t),k$e=i(FSe),QQ=n(FSe,"SPAN",{});var eRr=s(QQ);R$e=r(eRr,"Extending the Auto Classes"),eRr.forEach(t),FSe.forEach(t),uke=i(c),zn=n(c,"P",{});var eW=s(zn);S$e=r(eW,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),HQ=n(eW,"CODE",{});var oRr=s(HQ);P$e=r(oRr,"NewModel"),oRr.forEach(t),$$e=r(eW,", make sure you have a "),UQ=n(eW,"CODE",{});var rRr=s(UQ);I$e=r(rRr,"NewModelConfig"),rRr.forEach(t),N$e=r(eW,` then you can add those to the auto
classes like this:`),eW.forEach(t),bke=i(c),m(h5.$$.fragment,c),vke=i(c),l9=n(c,"P",{});var tRr=s(l9);D$e=r(tRr,"You will then be able to use the auto classes like you would usually do!"),tRr.forEach(t),Tke=i(c),m(Gf.$$.fragment,c),Fke=i(c),Vi=n(c,"H2",{class:!0});var CSe=s(Vi);Of=n(CSe,"A",{id:!0,class:!0,href:!0});var aRr=s(Of);JQ=n(aRr,"SPAN",{});var nRr=s(JQ);m(p5.$$.fragment,nRr),nRr.forEach(t),aRr.forEach(t),j$e=i(CSe),YQ=n(CSe,"SPAN",{});var sRr=s(YQ);q$e=r(sRr,"AutoConfig"),sRr.forEach(t),CSe.forEach(t),Cke=i(c),Wo=n(c,"DIV",{class:!0});var Os=s(Wo);m(_5.$$.fragment,Os),G$e=i(Os),u5=n(Os,"P",{});var MSe=s(u5);O$e=r(MSe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),i9=n(MSe,"A",{href:!0});var lRr=s(i9);X$e=r(lRr,"from_pretrained()"),lRr.forEach(t),V$e=r(MSe," class method."),MSe.forEach(t),z$e=i(Os),b5=n(Os,"P",{});var ESe=s(b5);W$e=r(ESe,"This class cannot be instantiated directly using "),KQ=n(ESe,"CODE",{});var iRr=s(KQ);Q$e=r(iRr,"__init__()"),iRr.forEach(t),H$e=r(ESe," (throws an error)."),ESe.forEach(t),U$e=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(v5.$$.fragment,ga),J$e=i(ga),ZQ=n(ga,"P",{});var dRr=s(ZQ);Y$e=r(dRr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),dRr.forEach(t),K$e=i(ga),zi=n(ga,"P",{});var oW=s(zi);Z$e=r(oW,"The configuration class to instantiate is selected based on the "),eH=n(oW,"CODE",{});var cRr=s(eH);eIe=r(cRr,"model_type"),cRr.forEach(t),oIe=r(oW,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),oH=n(oW,"CODE",{});var fRr=s(oH);rIe=r(fRr,"pretrained_model_name_or_path"),fRr.forEach(t),tIe=r(oW,":"),oW.forEach(t),aIe=i(ga),v=n(ga,"UL",{});var T=s(v);Xf=n(T,"LI",{});var KFe=s(Xf);rH=n(KFe,"STRONG",{});var mRr=s(rH);nIe=r(mRr,"albert"),mRr.forEach(t),sIe=r(KFe," \u2014 "),d9=n(KFe,"A",{href:!0});var gRr=s(d9);lIe=r(gRr,"AlbertConfig"),gRr.forEach(t),iIe=r(KFe," (ALBERT model)"),KFe.forEach(t),dIe=i(T),Vf=n(T,"LI",{});var ZFe=s(Vf);tH=n(ZFe,"STRONG",{});var hRr=s(tH);cIe=r(hRr,"bart"),hRr.forEach(t),fIe=r(ZFe," \u2014 "),c9=n(ZFe,"A",{href:!0});var pRr=s(c9);mIe=r(pRr,"BartConfig"),pRr.forEach(t),gIe=r(ZFe," (BART model)"),ZFe.forEach(t),hIe=i(T),zf=n(T,"LI",{});var eCe=s(zf);aH=n(eCe,"STRONG",{});var _Rr=s(aH);pIe=r(_Rr,"beit"),_Rr.forEach(t),_Ie=r(eCe," \u2014 "),f9=n(eCe,"A",{href:!0});var uRr=s(f9);uIe=r(uRr,"BeitConfig"),uRr.forEach(t),bIe=r(eCe," (BEiT model)"),eCe.forEach(t),vIe=i(T),Wf=n(T,"LI",{});var oCe=s(Wf);nH=n(oCe,"STRONG",{});var bRr=s(nH);TIe=r(bRr,"bert"),bRr.forEach(t),FIe=r(oCe," \u2014 "),m9=n(oCe,"A",{href:!0});var vRr=s(m9);CIe=r(vRr,"BertConfig"),vRr.forEach(t),MIe=r(oCe," (BERT model)"),oCe.forEach(t),EIe=i(T),Qf=n(T,"LI",{});var rCe=s(Qf);sH=n(rCe,"STRONG",{});var TRr=s(sH);yIe=r(TRr,"bert-generation"),TRr.forEach(t),wIe=r(rCe," \u2014 "),g9=n(rCe,"A",{href:!0});var FRr=s(g9);AIe=r(FRr,"BertGenerationConfig"),FRr.forEach(t),LIe=r(rCe," (Bert Generation model)"),rCe.forEach(t),BIe=i(T),Hf=n(T,"LI",{});var tCe=s(Hf);lH=n(tCe,"STRONG",{});var CRr=s(lH);xIe=r(CRr,"big_bird"),CRr.forEach(t),kIe=r(tCe," \u2014 "),h9=n(tCe,"A",{href:!0});var MRr=s(h9);RIe=r(MRr,"BigBirdConfig"),MRr.forEach(t),SIe=r(tCe," (BigBird model)"),tCe.forEach(t),PIe=i(T),Uf=n(T,"LI",{});var aCe=s(Uf);iH=n(aCe,"STRONG",{});var ERr=s(iH);$Ie=r(ERr,"bigbird_pegasus"),ERr.forEach(t),IIe=r(aCe," \u2014 "),p9=n(aCe,"A",{href:!0});var yRr=s(p9);NIe=r(yRr,"BigBirdPegasusConfig"),yRr.forEach(t),DIe=r(aCe," (BigBirdPegasus model)"),aCe.forEach(t),jIe=i(T),Jf=n(T,"LI",{});var nCe=s(Jf);dH=n(nCe,"STRONG",{});var wRr=s(dH);qIe=r(wRr,"blenderbot"),wRr.forEach(t),GIe=r(nCe," \u2014 "),_9=n(nCe,"A",{href:!0});var ARr=s(_9);OIe=r(ARr,"BlenderbotConfig"),ARr.forEach(t),XIe=r(nCe," (Blenderbot model)"),nCe.forEach(t),VIe=i(T),Yf=n(T,"LI",{});var sCe=s(Yf);cH=n(sCe,"STRONG",{});var LRr=s(cH);zIe=r(LRr,"blenderbot-small"),LRr.forEach(t),WIe=r(sCe," \u2014 "),u9=n(sCe,"A",{href:!0});var BRr=s(u9);QIe=r(BRr,"BlenderbotSmallConfig"),BRr.forEach(t),HIe=r(sCe," (BlenderbotSmall model)"),sCe.forEach(t),UIe=i(T),Kf=n(T,"LI",{});var lCe=s(Kf);fH=n(lCe,"STRONG",{});var xRr=s(fH);JIe=r(xRr,"camembert"),xRr.forEach(t),YIe=r(lCe," \u2014 "),b9=n(lCe,"A",{href:!0});var kRr=s(b9);KIe=r(kRr,"CamembertConfig"),kRr.forEach(t),ZIe=r(lCe," (CamemBERT model)"),lCe.forEach(t),eNe=i(T),Zf=n(T,"LI",{});var iCe=s(Zf);mH=n(iCe,"STRONG",{});var RRr=s(mH);oNe=r(RRr,"canine"),RRr.forEach(t),rNe=r(iCe," \u2014 "),v9=n(iCe,"A",{href:!0});var SRr=s(v9);tNe=r(SRr,"CanineConfig"),SRr.forEach(t),aNe=r(iCe," (Canine model)"),iCe.forEach(t),nNe=i(T),em=n(T,"LI",{});var dCe=s(em);gH=n(dCe,"STRONG",{});var PRr=s(gH);sNe=r(PRr,"clip"),PRr.forEach(t),lNe=r(dCe," \u2014 "),T9=n(dCe,"A",{href:!0});var $Rr=s(T9);iNe=r($Rr,"CLIPConfig"),$Rr.forEach(t),dNe=r(dCe," (CLIP model)"),dCe.forEach(t),cNe=i(T),om=n(T,"LI",{});var cCe=s(om);hH=n(cCe,"STRONG",{});var IRr=s(hH);fNe=r(IRr,"convbert"),IRr.forEach(t),mNe=r(cCe," \u2014 "),F9=n(cCe,"A",{href:!0});var NRr=s(F9);gNe=r(NRr,"ConvBertConfig"),NRr.forEach(t),hNe=r(cCe," (ConvBERT model)"),cCe.forEach(t),pNe=i(T),rm=n(T,"LI",{});var fCe=s(rm);pH=n(fCe,"STRONG",{});var DRr=s(pH);_Ne=r(DRr,"convnext"),DRr.forEach(t),uNe=r(fCe," \u2014 "),C9=n(fCe,"A",{href:!0});var jRr=s(C9);bNe=r(jRr,"ConvNextConfig"),jRr.forEach(t),vNe=r(fCe," (ConvNext model)"),fCe.forEach(t),TNe=i(T),tm=n(T,"LI",{});var mCe=s(tm);_H=n(mCe,"STRONG",{});var qRr=s(_H);FNe=r(qRr,"ctrl"),qRr.forEach(t),CNe=r(mCe," \u2014 "),M9=n(mCe,"A",{href:!0});var GRr=s(M9);MNe=r(GRr,"CTRLConfig"),GRr.forEach(t),ENe=r(mCe," (CTRL model)"),mCe.forEach(t),yNe=i(T),am=n(T,"LI",{});var gCe=s(am);uH=n(gCe,"STRONG",{});var ORr=s(uH);wNe=r(ORr,"data2vec-audio"),ORr.forEach(t),ANe=r(gCe," \u2014 "),E9=n(gCe,"A",{href:!0});var XRr=s(E9);LNe=r(XRr,"Data2VecAudioConfig"),XRr.forEach(t),BNe=r(gCe," (Data2VecAudio model)"),gCe.forEach(t),xNe=i(T),nm=n(T,"LI",{});var hCe=s(nm);bH=n(hCe,"STRONG",{});var VRr=s(bH);kNe=r(VRr,"data2vec-text"),VRr.forEach(t),RNe=r(hCe," \u2014 "),y9=n(hCe,"A",{href:!0});var zRr=s(y9);SNe=r(zRr,"Data2VecTextConfig"),zRr.forEach(t),PNe=r(hCe," (Data2VecText model)"),hCe.forEach(t),$Ne=i(T),sm=n(T,"LI",{});var pCe=s(sm);vH=n(pCe,"STRONG",{});var WRr=s(vH);INe=r(WRr,"deberta"),WRr.forEach(t),NNe=r(pCe," \u2014 "),w9=n(pCe,"A",{href:!0});var QRr=s(w9);DNe=r(QRr,"DebertaConfig"),QRr.forEach(t),jNe=r(pCe," (DeBERTa model)"),pCe.forEach(t),qNe=i(T),lm=n(T,"LI",{});var _Ce=s(lm);TH=n(_Ce,"STRONG",{});var HRr=s(TH);GNe=r(HRr,"deberta-v2"),HRr.forEach(t),ONe=r(_Ce," \u2014 "),A9=n(_Ce,"A",{href:!0});var URr=s(A9);XNe=r(URr,"DebertaV2Config"),URr.forEach(t),VNe=r(_Ce," (DeBERTa-v2 model)"),_Ce.forEach(t),zNe=i(T),im=n(T,"LI",{});var uCe=s(im);FH=n(uCe,"STRONG",{});var JRr=s(FH);WNe=r(JRr,"decision_transformer"),JRr.forEach(t),QNe=r(uCe," \u2014 "),L9=n(uCe,"A",{href:!0});var YRr=s(L9);HNe=r(YRr,"DecisionTransformerConfig"),YRr.forEach(t),UNe=r(uCe," (Decision Transformer model)"),uCe.forEach(t),JNe=i(T),dm=n(T,"LI",{});var bCe=s(dm);CH=n(bCe,"STRONG",{});var KRr=s(CH);YNe=r(KRr,"deit"),KRr.forEach(t),KNe=r(bCe," \u2014 "),B9=n(bCe,"A",{href:!0});var ZRr=s(B9);ZNe=r(ZRr,"DeiTConfig"),ZRr.forEach(t),eDe=r(bCe," (DeiT model)"),bCe.forEach(t),oDe=i(T),cm=n(T,"LI",{});var vCe=s(cm);MH=n(vCe,"STRONG",{});var eSr=s(MH);rDe=r(eSr,"detr"),eSr.forEach(t),tDe=r(vCe," \u2014 "),x9=n(vCe,"A",{href:!0});var oSr=s(x9);aDe=r(oSr,"DetrConfig"),oSr.forEach(t),nDe=r(vCe," (DETR model)"),vCe.forEach(t),sDe=i(T),fm=n(T,"LI",{});var TCe=s(fm);EH=n(TCe,"STRONG",{});var rSr=s(EH);lDe=r(rSr,"distilbert"),rSr.forEach(t),iDe=r(TCe," \u2014 "),k9=n(TCe,"A",{href:!0});var tSr=s(k9);dDe=r(tSr,"DistilBertConfig"),tSr.forEach(t),cDe=r(TCe," (DistilBERT model)"),TCe.forEach(t),fDe=i(T),mm=n(T,"LI",{});var FCe=s(mm);yH=n(FCe,"STRONG",{});var aSr=s(yH);mDe=r(aSr,"dpr"),aSr.forEach(t),gDe=r(FCe," \u2014 "),R9=n(FCe,"A",{href:!0});var nSr=s(R9);hDe=r(nSr,"DPRConfig"),nSr.forEach(t),pDe=r(FCe," (DPR model)"),FCe.forEach(t),_De=i(T),gm=n(T,"LI",{});var CCe=s(gm);wH=n(CCe,"STRONG",{});var sSr=s(wH);uDe=r(sSr,"electra"),sSr.forEach(t),bDe=r(CCe," \u2014 "),S9=n(CCe,"A",{href:!0});var lSr=s(S9);vDe=r(lSr,"ElectraConfig"),lSr.forEach(t),TDe=r(CCe," (ELECTRA model)"),CCe.forEach(t),FDe=i(T),hm=n(T,"LI",{});var MCe=s(hm);AH=n(MCe,"STRONG",{});var iSr=s(AH);CDe=r(iSr,"encoder-decoder"),iSr.forEach(t),MDe=r(MCe," \u2014 "),P9=n(MCe,"A",{href:!0});var dSr=s(P9);EDe=r(dSr,"EncoderDecoderConfig"),dSr.forEach(t),yDe=r(MCe," (Encoder decoder model)"),MCe.forEach(t),wDe=i(T),pm=n(T,"LI",{});var ECe=s(pm);LH=n(ECe,"STRONG",{});var cSr=s(LH);ADe=r(cSr,"flaubert"),cSr.forEach(t),LDe=r(ECe," \u2014 "),$9=n(ECe,"A",{href:!0});var fSr=s($9);BDe=r(fSr,"FlaubertConfig"),fSr.forEach(t),xDe=r(ECe," (FlauBERT model)"),ECe.forEach(t),kDe=i(T),_m=n(T,"LI",{});var yCe=s(_m);BH=n(yCe,"STRONG",{});var mSr=s(BH);RDe=r(mSr,"fnet"),mSr.forEach(t),SDe=r(yCe," \u2014 "),I9=n(yCe,"A",{href:!0});var gSr=s(I9);PDe=r(gSr,"FNetConfig"),gSr.forEach(t),$De=r(yCe," (FNet model)"),yCe.forEach(t),IDe=i(T),um=n(T,"LI",{});var wCe=s(um);xH=n(wCe,"STRONG",{});var hSr=s(xH);NDe=r(hSr,"fsmt"),hSr.forEach(t),DDe=r(wCe," \u2014 "),N9=n(wCe,"A",{href:!0});var pSr=s(N9);jDe=r(pSr,"FSMTConfig"),pSr.forEach(t),qDe=r(wCe," (FairSeq Machine-Translation model)"),wCe.forEach(t),GDe=i(T),bm=n(T,"LI",{});var ACe=s(bm);kH=n(ACe,"STRONG",{});var _Sr=s(kH);ODe=r(_Sr,"funnel"),_Sr.forEach(t),XDe=r(ACe," \u2014 "),D9=n(ACe,"A",{href:!0});var uSr=s(D9);VDe=r(uSr,"FunnelConfig"),uSr.forEach(t),zDe=r(ACe," (Funnel Transformer model)"),ACe.forEach(t),WDe=i(T),vm=n(T,"LI",{});var LCe=s(vm);RH=n(LCe,"STRONG",{});var bSr=s(RH);QDe=r(bSr,"glpn"),bSr.forEach(t),HDe=r(LCe," \u2014 "),j9=n(LCe,"A",{href:!0});var vSr=s(j9);UDe=r(vSr,"GLPNConfig"),vSr.forEach(t),JDe=r(LCe," (GLPN model)"),LCe.forEach(t),YDe=i(T),Tm=n(T,"LI",{});var BCe=s(Tm);SH=n(BCe,"STRONG",{});var TSr=s(SH);KDe=r(TSr,"gpt2"),TSr.forEach(t),ZDe=r(BCe," \u2014 "),q9=n(BCe,"A",{href:!0});var FSr=s(q9);eje=r(FSr,"GPT2Config"),FSr.forEach(t),oje=r(BCe," (OpenAI GPT-2 model)"),BCe.forEach(t),rje=i(T),Fm=n(T,"LI",{});var xCe=s(Fm);PH=n(xCe,"STRONG",{});var CSr=s(PH);tje=r(CSr,"gpt_neo"),CSr.forEach(t),aje=r(xCe," \u2014 "),G9=n(xCe,"A",{href:!0});var MSr=s(G9);nje=r(MSr,"GPTNeoConfig"),MSr.forEach(t),sje=r(xCe," (GPT Neo model)"),xCe.forEach(t),lje=i(T),Cm=n(T,"LI",{});var kCe=s(Cm);$H=n(kCe,"STRONG",{});var ESr=s($H);ije=r(ESr,"gptj"),ESr.forEach(t),dje=r(kCe," \u2014 "),O9=n(kCe,"A",{href:!0});var ySr=s(O9);cje=r(ySr,"GPTJConfig"),ySr.forEach(t),fje=r(kCe," (GPT-J model)"),kCe.forEach(t),mje=i(T),Mm=n(T,"LI",{});var RCe=s(Mm);IH=n(RCe,"STRONG",{});var wSr=s(IH);gje=r(wSr,"hubert"),wSr.forEach(t),hje=r(RCe," \u2014 "),X9=n(RCe,"A",{href:!0});var ASr=s(X9);pje=r(ASr,"HubertConfig"),ASr.forEach(t),_je=r(RCe," (Hubert model)"),RCe.forEach(t),uje=i(T),Em=n(T,"LI",{});var SCe=s(Em);NH=n(SCe,"STRONG",{});var LSr=s(NH);bje=r(LSr,"ibert"),LSr.forEach(t),vje=r(SCe," \u2014 "),V9=n(SCe,"A",{href:!0});var BSr=s(V9);Tje=r(BSr,"IBertConfig"),BSr.forEach(t),Fje=r(SCe," (I-BERT model)"),SCe.forEach(t),Cje=i(T),ym=n(T,"LI",{});var PCe=s(ym);DH=n(PCe,"STRONG",{});var xSr=s(DH);Mje=r(xSr,"imagegpt"),xSr.forEach(t),Eje=r(PCe," \u2014 "),z9=n(PCe,"A",{href:!0});var kSr=s(z9);yje=r(kSr,"ImageGPTConfig"),kSr.forEach(t),wje=r(PCe," (ImageGPT model)"),PCe.forEach(t),Aje=i(T),wm=n(T,"LI",{});var $Ce=s(wm);jH=n($Ce,"STRONG",{});var RSr=s(jH);Lje=r(RSr,"layoutlm"),RSr.forEach(t),Bje=r($Ce," \u2014 "),W9=n($Ce,"A",{href:!0});var SSr=s(W9);xje=r(SSr,"LayoutLMConfig"),SSr.forEach(t),kje=r($Ce," (LayoutLM model)"),$Ce.forEach(t),Rje=i(T),Am=n(T,"LI",{});var ICe=s(Am);qH=n(ICe,"STRONG",{});var PSr=s(qH);Sje=r(PSr,"layoutlmv2"),PSr.forEach(t),Pje=r(ICe," \u2014 "),Q9=n(ICe,"A",{href:!0});var $Sr=s(Q9);$je=r($Sr,"LayoutLMv2Config"),$Sr.forEach(t),Ije=r(ICe," (LayoutLMv2 model)"),ICe.forEach(t),Nje=i(T),Lm=n(T,"LI",{});var NCe=s(Lm);GH=n(NCe,"STRONG",{});var ISr=s(GH);Dje=r(ISr,"led"),ISr.forEach(t),jje=r(NCe," \u2014 "),H9=n(NCe,"A",{href:!0});var NSr=s(H9);qje=r(NSr,"LEDConfig"),NSr.forEach(t),Gje=r(NCe," (LED model)"),NCe.forEach(t),Oje=i(T),Bm=n(T,"LI",{});var DCe=s(Bm);OH=n(DCe,"STRONG",{});var DSr=s(OH);Xje=r(DSr,"longformer"),DSr.forEach(t),Vje=r(DCe," \u2014 "),U9=n(DCe,"A",{href:!0});var jSr=s(U9);zje=r(jSr,"LongformerConfig"),jSr.forEach(t),Wje=r(DCe," (Longformer model)"),DCe.forEach(t),Qje=i(T),xm=n(T,"LI",{});var jCe=s(xm);XH=n(jCe,"STRONG",{});var qSr=s(XH);Hje=r(qSr,"luke"),qSr.forEach(t),Uje=r(jCe," \u2014 "),J9=n(jCe,"A",{href:!0});var GSr=s(J9);Jje=r(GSr,"LukeConfig"),GSr.forEach(t),Yje=r(jCe," (LUKE model)"),jCe.forEach(t),Kje=i(T),km=n(T,"LI",{});var qCe=s(km);VH=n(qCe,"STRONG",{});var OSr=s(VH);Zje=r(OSr,"lxmert"),OSr.forEach(t),eqe=r(qCe," \u2014 "),Y9=n(qCe,"A",{href:!0});var XSr=s(Y9);oqe=r(XSr,"LxmertConfig"),XSr.forEach(t),rqe=r(qCe," (LXMERT model)"),qCe.forEach(t),tqe=i(T),Rm=n(T,"LI",{});var GCe=s(Rm);zH=n(GCe,"STRONG",{});var VSr=s(zH);aqe=r(VSr,"m2m_100"),VSr.forEach(t),nqe=r(GCe," \u2014 "),K9=n(GCe,"A",{href:!0});var zSr=s(K9);sqe=r(zSr,"M2M100Config"),zSr.forEach(t),lqe=r(GCe," (M2M100 model)"),GCe.forEach(t),iqe=i(T),Sm=n(T,"LI",{});var OCe=s(Sm);WH=n(OCe,"STRONG",{});var WSr=s(WH);dqe=r(WSr,"marian"),WSr.forEach(t),cqe=r(OCe," \u2014 "),Z9=n(OCe,"A",{href:!0});var QSr=s(Z9);fqe=r(QSr,"MarianConfig"),QSr.forEach(t),mqe=r(OCe," (Marian model)"),OCe.forEach(t),gqe=i(T),Pm=n(T,"LI",{});var XCe=s(Pm);QH=n(XCe,"STRONG",{});var HSr=s(QH);hqe=r(HSr,"maskformer"),HSr.forEach(t),pqe=r(XCe," \u2014 "),eB=n(XCe,"A",{href:!0});var USr=s(eB);_qe=r(USr,"MaskFormerConfig"),USr.forEach(t),uqe=r(XCe," (MaskFormer model)"),XCe.forEach(t),bqe=i(T),$m=n(T,"LI",{});var VCe=s($m);HH=n(VCe,"STRONG",{});var JSr=s(HH);vqe=r(JSr,"mbart"),JSr.forEach(t),Tqe=r(VCe," \u2014 "),oB=n(VCe,"A",{href:!0});var YSr=s(oB);Fqe=r(YSr,"MBartConfig"),YSr.forEach(t),Cqe=r(VCe," (mBART model)"),VCe.forEach(t),Mqe=i(T),Im=n(T,"LI",{});var zCe=s(Im);UH=n(zCe,"STRONG",{});var KSr=s(UH);Eqe=r(KSr,"megatron-bert"),KSr.forEach(t),yqe=r(zCe," \u2014 "),rB=n(zCe,"A",{href:!0});var ZSr=s(rB);wqe=r(ZSr,"MegatronBertConfig"),ZSr.forEach(t),Aqe=r(zCe," (MegatronBert model)"),zCe.forEach(t),Lqe=i(T),Nm=n(T,"LI",{});var WCe=s(Nm);JH=n(WCe,"STRONG",{});var ePr=s(JH);Bqe=r(ePr,"mobilebert"),ePr.forEach(t),xqe=r(WCe," \u2014 "),tB=n(WCe,"A",{href:!0});var oPr=s(tB);kqe=r(oPr,"MobileBertConfig"),oPr.forEach(t),Rqe=r(WCe," (MobileBERT model)"),WCe.forEach(t),Sqe=i(T),Dm=n(T,"LI",{});var QCe=s(Dm);YH=n(QCe,"STRONG",{});var rPr=s(YH);Pqe=r(rPr,"mpnet"),rPr.forEach(t),$qe=r(QCe," \u2014 "),aB=n(QCe,"A",{href:!0});var tPr=s(aB);Iqe=r(tPr,"MPNetConfig"),tPr.forEach(t),Nqe=r(QCe," (MPNet model)"),QCe.forEach(t),Dqe=i(T),jm=n(T,"LI",{});var HCe=s(jm);KH=n(HCe,"STRONG",{});var aPr=s(KH);jqe=r(aPr,"mt5"),aPr.forEach(t),qqe=r(HCe," \u2014 "),nB=n(HCe,"A",{href:!0});var nPr=s(nB);Gqe=r(nPr,"MT5Config"),nPr.forEach(t),Oqe=r(HCe," (mT5 model)"),HCe.forEach(t),Xqe=i(T),qm=n(T,"LI",{});var UCe=s(qm);ZH=n(UCe,"STRONG",{});var sPr=s(ZH);Vqe=r(sPr,"nystromformer"),sPr.forEach(t),zqe=r(UCe," \u2014 "),sB=n(UCe,"A",{href:!0});var lPr=s(sB);Wqe=r(lPr,"NystromformerConfig"),lPr.forEach(t),Qqe=r(UCe," (Nystromformer model)"),UCe.forEach(t),Hqe=i(T),Gm=n(T,"LI",{});var JCe=s(Gm);eU=n(JCe,"STRONG",{});var iPr=s(eU);Uqe=r(iPr,"openai-gpt"),iPr.forEach(t),Jqe=r(JCe," \u2014 "),lB=n(JCe,"A",{href:!0});var dPr=s(lB);Yqe=r(dPr,"OpenAIGPTConfig"),dPr.forEach(t),Kqe=r(JCe," (OpenAI GPT model)"),JCe.forEach(t),Zqe=i(T),Om=n(T,"LI",{});var YCe=s(Om);oU=n(YCe,"STRONG",{});var cPr=s(oU);eGe=r(cPr,"pegasus"),cPr.forEach(t),oGe=r(YCe," \u2014 "),iB=n(YCe,"A",{href:!0});var fPr=s(iB);rGe=r(fPr,"PegasusConfig"),fPr.forEach(t),tGe=r(YCe," (Pegasus model)"),YCe.forEach(t),aGe=i(T),Xm=n(T,"LI",{});var KCe=s(Xm);rU=n(KCe,"STRONG",{});var mPr=s(rU);nGe=r(mPr,"perceiver"),mPr.forEach(t),sGe=r(KCe," \u2014 "),dB=n(KCe,"A",{href:!0});var gPr=s(dB);lGe=r(gPr,"PerceiverConfig"),gPr.forEach(t),iGe=r(KCe," (Perceiver model)"),KCe.forEach(t),dGe=i(T),Vm=n(T,"LI",{});var ZCe=s(Vm);tU=n(ZCe,"STRONG",{});var hPr=s(tU);cGe=r(hPr,"plbart"),hPr.forEach(t),fGe=r(ZCe," \u2014 "),cB=n(ZCe,"A",{href:!0});var pPr=s(cB);mGe=r(pPr,"PLBartConfig"),pPr.forEach(t),gGe=r(ZCe," (PLBart model)"),ZCe.forEach(t),hGe=i(T),zm=n(T,"LI",{});var eMe=s(zm);aU=n(eMe,"STRONG",{});var _Pr=s(aU);pGe=r(_Pr,"poolformer"),_Pr.forEach(t),_Ge=r(eMe," \u2014 "),fB=n(eMe,"A",{href:!0});var uPr=s(fB);uGe=r(uPr,"PoolFormerConfig"),uPr.forEach(t),bGe=r(eMe," (PoolFormer model)"),eMe.forEach(t),vGe=i(T),Wm=n(T,"LI",{});var oMe=s(Wm);nU=n(oMe,"STRONG",{});var bPr=s(nU);TGe=r(bPr,"prophetnet"),bPr.forEach(t),FGe=r(oMe," \u2014 "),mB=n(oMe,"A",{href:!0});var vPr=s(mB);CGe=r(vPr,"ProphetNetConfig"),vPr.forEach(t),MGe=r(oMe," (ProphetNet model)"),oMe.forEach(t),EGe=i(T),Qm=n(T,"LI",{});var rMe=s(Qm);sU=n(rMe,"STRONG",{});var TPr=s(sU);yGe=r(TPr,"qdqbert"),TPr.forEach(t),wGe=r(rMe," \u2014 "),gB=n(rMe,"A",{href:!0});var FPr=s(gB);AGe=r(FPr,"QDQBertConfig"),FPr.forEach(t),LGe=r(rMe," (QDQBert model)"),rMe.forEach(t),BGe=i(T),Hm=n(T,"LI",{});var tMe=s(Hm);lU=n(tMe,"STRONG",{});var CPr=s(lU);xGe=r(CPr,"rag"),CPr.forEach(t),kGe=r(tMe," \u2014 "),hB=n(tMe,"A",{href:!0});var MPr=s(hB);RGe=r(MPr,"RagConfig"),MPr.forEach(t),SGe=r(tMe," (RAG model)"),tMe.forEach(t),PGe=i(T),Um=n(T,"LI",{});var aMe=s(Um);iU=n(aMe,"STRONG",{});var EPr=s(iU);$Ge=r(EPr,"realm"),EPr.forEach(t),IGe=r(aMe," \u2014 "),pB=n(aMe,"A",{href:!0});var yPr=s(pB);NGe=r(yPr,"RealmConfig"),yPr.forEach(t),DGe=r(aMe," (Realm model)"),aMe.forEach(t),jGe=i(T),Jm=n(T,"LI",{});var nMe=s(Jm);dU=n(nMe,"STRONG",{});var wPr=s(dU);qGe=r(wPr,"reformer"),wPr.forEach(t),GGe=r(nMe," \u2014 "),_B=n(nMe,"A",{href:!0});var APr=s(_B);OGe=r(APr,"ReformerConfig"),APr.forEach(t),XGe=r(nMe," (Reformer model)"),nMe.forEach(t),VGe=i(T),Ym=n(T,"LI",{});var sMe=s(Ym);cU=n(sMe,"STRONG",{});var LPr=s(cU);zGe=r(LPr,"rembert"),LPr.forEach(t),WGe=r(sMe," \u2014 "),uB=n(sMe,"A",{href:!0});var BPr=s(uB);QGe=r(BPr,"RemBertConfig"),BPr.forEach(t),HGe=r(sMe," (RemBERT model)"),sMe.forEach(t),UGe=i(T),Km=n(T,"LI",{});var lMe=s(Km);fU=n(lMe,"STRONG",{});var xPr=s(fU);JGe=r(xPr,"resnet"),xPr.forEach(t),YGe=r(lMe," \u2014 "),bB=n(lMe,"A",{href:!0});var kPr=s(bB);KGe=r(kPr,"ResNetConfig"),kPr.forEach(t),ZGe=r(lMe," (ResNet model)"),lMe.forEach(t),eOe=i(T),Zm=n(T,"LI",{});var iMe=s(Zm);mU=n(iMe,"STRONG",{});var RPr=s(mU);oOe=r(RPr,"resnetd"),RPr.forEach(t),rOe=r(iMe," \u2014 "),vB=n(iMe,"A",{href:!0});var SPr=s(vB);tOe=r(SPr,"ResNetDConfig"),SPr.forEach(t),aOe=r(iMe," (ResNet-D model)"),iMe.forEach(t),nOe=i(T),eg=n(T,"LI",{});var dMe=s(eg);gU=n(dMe,"STRONG",{});var PPr=s(gU);sOe=r(PPr,"retribert"),PPr.forEach(t),lOe=r(dMe," \u2014 "),TB=n(dMe,"A",{href:!0});var $Pr=s(TB);iOe=r($Pr,"RetriBertConfig"),$Pr.forEach(t),dOe=r(dMe," (RetriBERT model)"),dMe.forEach(t),cOe=i(T),og=n(T,"LI",{});var cMe=s(og);hU=n(cMe,"STRONG",{});var IPr=s(hU);fOe=r(IPr,"roberta"),IPr.forEach(t),mOe=r(cMe," \u2014 "),FB=n(cMe,"A",{href:!0});var NPr=s(FB);gOe=r(NPr,"RobertaConfig"),NPr.forEach(t),hOe=r(cMe," (RoBERTa model)"),cMe.forEach(t),pOe=i(T),rg=n(T,"LI",{});var fMe=s(rg);pU=n(fMe,"STRONG",{});var DPr=s(pU);_Oe=r(DPr,"roformer"),DPr.forEach(t),uOe=r(fMe," \u2014 "),CB=n(fMe,"A",{href:!0});var jPr=s(CB);bOe=r(jPr,"RoFormerConfig"),jPr.forEach(t),vOe=r(fMe," (RoFormer model)"),fMe.forEach(t),TOe=i(T),tg=n(T,"LI",{});var mMe=s(tg);_U=n(mMe,"STRONG",{});var qPr=s(_U);FOe=r(qPr,"segformer"),qPr.forEach(t),COe=r(mMe," \u2014 "),MB=n(mMe,"A",{href:!0});var GPr=s(MB);MOe=r(GPr,"SegformerConfig"),GPr.forEach(t),EOe=r(mMe," (SegFormer model)"),mMe.forEach(t),yOe=i(T),ag=n(T,"LI",{});var gMe=s(ag);uU=n(gMe,"STRONG",{});var OPr=s(uU);wOe=r(OPr,"sew"),OPr.forEach(t),AOe=r(gMe," \u2014 "),EB=n(gMe,"A",{href:!0});var XPr=s(EB);LOe=r(XPr,"SEWConfig"),XPr.forEach(t),BOe=r(gMe," (SEW model)"),gMe.forEach(t),xOe=i(T),ng=n(T,"LI",{});var hMe=s(ng);bU=n(hMe,"STRONG",{});var VPr=s(bU);kOe=r(VPr,"sew-d"),VPr.forEach(t),ROe=r(hMe," \u2014 "),yB=n(hMe,"A",{href:!0});var zPr=s(yB);SOe=r(zPr,"SEWDConfig"),zPr.forEach(t),POe=r(hMe," (SEW-D model)"),hMe.forEach(t),$Oe=i(T),sg=n(T,"LI",{});var pMe=s(sg);vU=n(pMe,"STRONG",{});var WPr=s(vU);IOe=r(WPr,"speech-encoder-decoder"),WPr.forEach(t),NOe=r(pMe," \u2014 "),wB=n(pMe,"A",{href:!0});var QPr=s(wB);DOe=r(QPr,"SpeechEncoderDecoderConfig"),QPr.forEach(t),jOe=r(pMe," (Speech Encoder decoder model)"),pMe.forEach(t),qOe=i(T),lg=n(T,"LI",{});var _Me=s(lg);TU=n(_Me,"STRONG",{});var HPr=s(TU);GOe=r(HPr,"speech_to_text"),HPr.forEach(t),OOe=r(_Me," \u2014 "),AB=n(_Me,"A",{href:!0});var UPr=s(AB);XOe=r(UPr,"Speech2TextConfig"),UPr.forEach(t),VOe=r(_Me," (Speech2Text model)"),_Me.forEach(t),zOe=i(T),ig=n(T,"LI",{});var uMe=s(ig);FU=n(uMe,"STRONG",{});var JPr=s(FU);WOe=r(JPr,"speech_to_text_2"),JPr.forEach(t),QOe=r(uMe," \u2014 "),LB=n(uMe,"A",{href:!0});var YPr=s(LB);HOe=r(YPr,"Speech2Text2Config"),YPr.forEach(t),UOe=r(uMe," (Speech2Text2 model)"),uMe.forEach(t),JOe=i(T),dg=n(T,"LI",{});var bMe=s(dg);CU=n(bMe,"STRONG",{});var KPr=s(CU);YOe=r(KPr,"splinter"),KPr.forEach(t),KOe=r(bMe," \u2014 "),BB=n(bMe,"A",{href:!0});var ZPr=s(BB);ZOe=r(ZPr,"SplinterConfig"),ZPr.forEach(t),eXe=r(bMe," (Splinter model)"),bMe.forEach(t),oXe=i(T),cg=n(T,"LI",{});var vMe=s(cg);MU=n(vMe,"STRONG",{});var e$r=s(MU);rXe=r(e$r,"squeezebert"),e$r.forEach(t),tXe=r(vMe," \u2014 "),xB=n(vMe,"A",{href:!0});var o$r=s(xB);aXe=r(o$r,"SqueezeBertConfig"),o$r.forEach(t),nXe=r(vMe," (SqueezeBERT model)"),vMe.forEach(t),sXe=i(T),fg=n(T,"LI",{});var TMe=s(fg);EU=n(TMe,"STRONG",{});var r$r=s(EU);lXe=r(r$r,"swin"),r$r.forEach(t),iXe=r(TMe," \u2014 "),kB=n(TMe,"A",{href:!0});var t$r=s(kB);dXe=r(t$r,"SwinConfig"),t$r.forEach(t),cXe=r(TMe," (Swin model)"),TMe.forEach(t),fXe=i(T),mg=n(T,"LI",{});var FMe=s(mg);yU=n(FMe,"STRONG",{});var a$r=s(yU);mXe=r(a$r,"t5"),a$r.forEach(t),gXe=r(FMe," \u2014 "),RB=n(FMe,"A",{href:!0});var n$r=s(RB);hXe=r(n$r,"T5Config"),n$r.forEach(t),pXe=r(FMe," (T5 model)"),FMe.forEach(t),_Xe=i(T),gg=n(T,"LI",{});var CMe=s(gg);wU=n(CMe,"STRONG",{});var s$r=s(wU);uXe=r(s$r,"tapas"),s$r.forEach(t),bXe=r(CMe," \u2014 "),SB=n(CMe,"A",{href:!0});var l$r=s(SB);vXe=r(l$r,"TapasConfig"),l$r.forEach(t),TXe=r(CMe," (TAPAS model)"),CMe.forEach(t),FXe=i(T),hg=n(T,"LI",{});var MMe=s(hg);AU=n(MMe,"STRONG",{});var i$r=s(AU);CXe=r(i$r,"transfo-xl"),i$r.forEach(t),MXe=r(MMe," \u2014 "),PB=n(MMe,"A",{href:!0});var d$r=s(PB);EXe=r(d$r,"TransfoXLConfig"),d$r.forEach(t),yXe=r(MMe," (Transformer-XL model)"),MMe.forEach(t),wXe=i(T),pg=n(T,"LI",{});var EMe=s(pg);LU=n(EMe,"STRONG",{});var c$r=s(LU);AXe=r(c$r,"trocr"),c$r.forEach(t),LXe=r(EMe," \u2014 "),$B=n(EMe,"A",{href:!0});var f$r=s($B);BXe=r(f$r,"TrOCRConfig"),f$r.forEach(t),xXe=r(EMe," (TrOCR model)"),EMe.forEach(t),kXe=i(T),_g=n(T,"LI",{});var yMe=s(_g);BU=n(yMe,"STRONG",{});var m$r=s(BU);RXe=r(m$r,"unispeech"),m$r.forEach(t),SXe=r(yMe," \u2014 "),IB=n(yMe,"A",{href:!0});var g$r=s(IB);PXe=r(g$r,"UniSpeechConfig"),g$r.forEach(t),$Xe=r(yMe," (UniSpeech model)"),yMe.forEach(t),IXe=i(T),ug=n(T,"LI",{});var wMe=s(ug);xU=n(wMe,"STRONG",{});var h$r=s(xU);NXe=r(h$r,"unispeech-sat"),h$r.forEach(t),DXe=r(wMe," \u2014 "),NB=n(wMe,"A",{href:!0});var p$r=s(NB);jXe=r(p$r,"UniSpeechSatConfig"),p$r.forEach(t),qXe=r(wMe," (UniSpeechSat model)"),wMe.forEach(t),GXe=i(T),bg=n(T,"LI",{});var AMe=s(bg);kU=n(AMe,"STRONG",{});var _$r=s(kU);OXe=r(_$r,"van"),_$r.forEach(t),XXe=r(AMe," \u2014 "),DB=n(AMe,"A",{href:!0});var u$r=s(DB);VXe=r(u$r,"VanConfig"),u$r.forEach(t),zXe=r(AMe," (VAN model)"),AMe.forEach(t),WXe=i(T),vg=n(T,"LI",{});var LMe=s(vg);RU=n(LMe,"STRONG",{});var b$r=s(RU);QXe=r(b$r,"vilt"),b$r.forEach(t),HXe=r(LMe," \u2014 "),jB=n(LMe,"A",{href:!0});var v$r=s(jB);UXe=r(v$r,"ViltConfig"),v$r.forEach(t),JXe=r(LMe," (ViLT model)"),LMe.forEach(t),YXe=i(T),Tg=n(T,"LI",{});var BMe=s(Tg);SU=n(BMe,"STRONG",{});var T$r=s(SU);KXe=r(T$r,"vision-encoder-decoder"),T$r.forEach(t),ZXe=r(BMe," \u2014 "),qB=n(BMe,"A",{href:!0});var F$r=s(qB);eVe=r(F$r,"VisionEncoderDecoderConfig"),F$r.forEach(t),oVe=r(BMe," (Vision Encoder decoder model)"),BMe.forEach(t),rVe=i(T),Fg=n(T,"LI",{});var xMe=s(Fg);PU=n(xMe,"STRONG",{});var C$r=s(PU);tVe=r(C$r,"vision-text-dual-encoder"),C$r.forEach(t),aVe=r(xMe," \u2014 "),GB=n(xMe,"A",{href:!0});var M$r=s(GB);nVe=r(M$r,"VisionTextDualEncoderConfig"),M$r.forEach(t),sVe=r(xMe," (VisionTextDualEncoder model)"),xMe.forEach(t),lVe=i(T),Cg=n(T,"LI",{});var kMe=s(Cg);$U=n(kMe,"STRONG",{});var E$r=s($U);iVe=r(E$r,"visual_bert"),E$r.forEach(t),dVe=r(kMe," \u2014 "),OB=n(kMe,"A",{href:!0});var y$r=s(OB);cVe=r(y$r,"VisualBertConfig"),y$r.forEach(t),fVe=r(kMe," (VisualBert model)"),kMe.forEach(t),mVe=i(T),Mg=n(T,"LI",{});var RMe=s(Mg);IU=n(RMe,"STRONG",{});var w$r=s(IU);gVe=r(w$r,"vit"),w$r.forEach(t),hVe=r(RMe," \u2014 "),XB=n(RMe,"A",{href:!0});var A$r=s(XB);pVe=r(A$r,"ViTConfig"),A$r.forEach(t),_Ve=r(RMe," (ViT model)"),RMe.forEach(t),uVe=i(T),Eg=n(T,"LI",{});var SMe=s(Eg);NU=n(SMe,"STRONG",{});var L$r=s(NU);bVe=r(L$r,"vit_mae"),L$r.forEach(t),vVe=r(SMe," \u2014 "),VB=n(SMe,"A",{href:!0});var B$r=s(VB);TVe=r(B$r,"ViTMAEConfig"),B$r.forEach(t),FVe=r(SMe," (ViTMAE model)"),SMe.forEach(t),CVe=i(T),yg=n(T,"LI",{});var PMe=s(yg);DU=n(PMe,"STRONG",{});var x$r=s(DU);MVe=r(x$r,"wav2vec2"),x$r.forEach(t),EVe=r(PMe," \u2014 "),zB=n(PMe,"A",{href:!0});var k$r=s(zB);yVe=r(k$r,"Wav2Vec2Config"),k$r.forEach(t),wVe=r(PMe," (Wav2Vec2 model)"),PMe.forEach(t),AVe=i(T),wg=n(T,"LI",{});var $Me=s(wg);jU=n($Me,"STRONG",{});var R$r=s(jU);LVe=r(R$r,"wavlm"),R$r.forEach(t),BVe=r($Me," \u2014 "),WB=n($Me,"A",{href:!0});var S$r=s(WB);xVe=r(S$r,"WavLMConfig"),S$r.forEach(t),kVe=r($Me," (WavLM model)"),$Me.forEach(t),RVe=i(T),Ag=n(T,"LI",{});var IMe=s(Ag);qU=n(IMe,"STRONG",{});var P$r=s(qU);SVe=r(P$r,"xglm"),P$r.forEach(t),PVe=r(IMe," \u2014 "),QB=n(IMe,"A",{href:!0});var $$r=s(QB);$Ve=r($$r,"XGLMConfig"),$$r.forEach(t),IVe=r(IMe," (XGLM model)"),IMe.forEach(t),NVe=i(T),Lg=n(T,"LI",{});var NMe=s(Lg);GU=n(NMe,"STRONG",{});var I$r=s(GU);DVe=r(I$r,"xlm"),I$r.forEach(t),jVe=r(NMe," \u2014 "),HB=n(NMe,"A",{href:!0});var N$r=s(HB);qVe=r(N$r,"XLMConfig"),N$r.forEach(t),GVe=r(NMe," (XLM model)"),NMe.forEach(t),OVe=i(T),Bg=n(T,"LI",{});var DMe=s(Bg);OU=n(DMe,"STRONG",{});var D$r=s(OU);XVe=r(D$r,"xlm-prophetnet"),D$r.forEach(t),VVe=r(DMe," \u2014 "),UB=n(DMe,"A",{href:!0});var j$r=s(UB);zVe=r(j$r,"XLMProphetNetConfig"),j$r.forEach(t),WVe=r(DMe," (XLMProphetNet model)"),DMe.forEach(t),QVe=i(T),xg=n(T,"LI",{});var jMe=s(xg);XU=n(jMe,"STRONG",{});var q$r=s(XU);HVe=r(q$r,"xlm-roberta"),q$r.forEach(t),UVe=r(jMe," \u2014 "),JB=n(jMe,"A",{href:!0});var G$r=s(JB);JVe=r(G$r,"XLMRobertaConfig"),G$r.forEach(t),YVe=r(jMe," (XLM-RoBERTa model)"),jMe.forEach(t),KVe=i(T),kg=n(T,"LI",{});var qMe=s(kg);VU=n(qMe,"STRONG",{});var O$r=s(VU);ZVe=r(O$r,"xlm-roberta-xl"),O$r.forEach(t),eze=r(qMe," \u2014 "),YB=n(qMe,"A",{href:!0});var X$r=s(YB);oze=r(X$r,"XLMRobertaXLConfig"),X$r.forEach(t),rze=r(qMe," (XLM-RoBERTa-XL model)"),qMe.forEach(t),tze=i(T),Rg=n(T,"LI",{});var GMe=s(Rg);zU=n(GMe,"STRONG",{});var V$r=s(zU);aze=r(V$r,"xlnet"),V$r.forEach(t),nze=r(GMe," \u2014 "),KB=n(GMe,"A",{href:!0});var z$r=s(KB);sze=r(z$r,"XLNetConfig"),z$r.forEach(t),lze=r(GMe," (XLNet model)"),GMe.forEach(t),ize=i(T),Sg=n(T,"LI",{});var OMe=s(Sg);WU=n(OMe,"STRONG",{});var W$r=s(WU);dze=r(W$r,"yoso"),W$r.forEach(t),cze=r(OMe," \u2014 "),ZB=n(OMe,"A",{href:!0});var Q$r=s(ZB);fze=r(Q$r,"YosoConfig"),Q$r.forEach(t),mze=r(OMe," (YOSO model)"),OMe.forEach(t),T.forEach(t),gze=i(ga),QU=n(ga,"P",{});var H$r=s(QU);hze=r(H$r,"Examples:"),H$r.forEach(t),pze=i(ga),m(T5.$$.fragment,ga),ga.forEach(t),_ze=i(Os),Pg=n(Os,"DIV",{class:!0});var ySe=s(Pg);m(F5.$$.fragment,ySe),uze=i(ySe),HU=n(ySe,"P",{});var U$r=s(HU);bze=r(U$r,"Register a new configuration for this class."),U$r.forEach(t),ySe.forEach(t),Os.forEach(t),Mke=i(c),Wi=n(c,"H2",{class:!0});var wSe=s(Wi);$g=n(wSe,"A",{id:!0,class:!0,href:!0});var J$r=s($g);UU=n(J$r,"SPAN",{});var Y$r=s(UU);m(C5.$$.fragment,Y$r),Y$r.forEach(t),J$r.forEach(t),vze=i(wSe),JU=n(wSe,"SPAN",{});var K$r=s(JU);Tze=r(K$r,"AutoTokenizer"),K$r.forEach(t),wSe.forEach(t),Eke=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);m(M5.$$.fragment,Xs),Fze=i(Xs),E5=n(Xs,"P",{});var ASe=s(E5);Cze=r(ASe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ex=n(ASe,"A",{href:!0});var Z$r=s(ex);Mze=r(Z$r,"AutoTokenizer.from_pretrained()"),Z$r.forEach(t),Eze=r(ASe," class method."),ASe.forEach(t),yze=i(Xs),y5=n(Xs,"P",{});var LSe=s(y5);wze=r(LSe,"This class cannot be instantiated directly using "),YU=n(LSe,"CODE",{});var eIr=s(YU);Aze=r(eIr,"__init__()"),eIr.forEach(t),Lze=r(LSe," (throws an error)."),LSe.forEach(t),Bze=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(w5.$$.fragment,ha),xze=i(ha),KU=n(ha,"P",{});var oIr=s(KU);kze=r(oIr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),oIr.forEach(t),Rze=i(ha),Oa=n(ha,"P",{});var f3=s(Oa);Sze=r(f3,"The tokenizer class to instantiate is selected based on the "),ZU=n(f3,"CODE",{});var rIr=s(ZU);Pze=r(rIr,"model_type"),rIr.forEach(t),$ze=r(f3,` property of the config object (either
passed as an argument or loaded from `),eJ=n(f3,"CODE",{});var tIr=s(eJ);Ize=r(tIr,"pretrained_model_name_or_path"),tIr.forEach(t),Nze=r(f3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oJ=n(f3,"CODE",{});var aIr=s(oJ);Dze=r(aIr,"pretrained_model_name_or_path"),aIr.forEach(t),jze=r(f3,":"),f3.forEach(t),qze=i(ha),E=n(ha,"UL",{});var y=s(E);Wn=n(y,"LI",{});var s8=s(Wn);rJ=n(s8,"STRONG",{});var nIr=s(rJ);Gze=r(nIr,"albert"),nIr.forEach(t),Oze=r(s8," \u2014 "),ox=n(s8,"A",{href:!0});var sIr=s(ox);Xze=r(sIr,"AlbertTokenizer"),sIr.forEach(t),Vze=r(s8," or "),rx=n(s8,"A",{href:!0});var lIr=s(rx);zze=r(lIr,"AlbertTokenizerFast"),lIr.forEach(t),Wze=r(s8," (ALBERT model)"),s8.forEach(t),Qze=i(y),Qn=n(y,"LI",{});var l8=s(Qn);tJ=n(l8,"STRONG",{});var iIr=s(tJ);Hze=r(iIr,"bart"),iIr.forEach(t),Uze=r(l8," \u2014 "),tx=n(l8,"A",{href:!0});var dIr=s(tx);Jze=r(dIr,"BartTokenizer"),dIr.forEach(t),Yze=r(l8," or "),ax=n(l8,"A",{href:!0});var cIr=s(ax);Kze=r(cIr,"BartTokenizerFast"),cIr.forEach(t),Zze=r(l8," (BART model)"),l8.forEach(t),eWe=i(y),Hn=n(y,"LI",{});var i8=s(Hn);aJ=n(i8,"STRONG",{});var fIr=s(aJ);oWe=r(fIr,"barthez"),fIr.forEach(t),rWe=r(i8," \u2014 "),nx=n(i8,"A",{href:!0});var mIr=s(nx);tWe=r(mIr,"BarthezTokenizer"),mIr.forEach(t),aWe=r(i8," or "),sx=n(i8,"A",{href:!0});var gIr=s(sx);nWe=r(gIr,"BarthezTokenizerFast"),gIr.forEach(t),sWe=r(i8," (BARThez model)"),i8.forEach(t),lWe=i(y),Ig=n(y,"LI",{});var XMe=s(Ig);nJ=n(XMe,"STRONG",{});var hIr=s(nJ);iWe=r(hIr,"bartpho"),hIr.forEach(t),dWe=r(XMe," \u2014 "),lx=n(XMe,"A",{href:!0});var pIr=s(lx);cWe=r(pIr,"BartphoTokenizer"),pIr.forEach(t),fWe=r(XMe," (BARTpho model)"),XMe.forEach(t),mWe=i(y),Un=n(y,"LI",{});var d8=s(Un);sJ=n(d8,"STRONG",{});var _Ir=s(sJ);gWe=r(_Ir,"bert"),_Ir.forEach(t),hWe=r(d8," \u2014 "),ix=n(d8,"A",{href:!0});var uIr=s(ix);pWe=r(uIr,"BertTokenizer"),uIr.forEach(t),_We=r(d8," or "),dx=n(d8,"A",{href:!0});var bIr=s(dx);uWe=r(bIr,"BertTokenizerFast"),bIr.forEach(t),bWe=r(d8," (BERT model)"),d8.forEach(t),vWe=i(y),Ng=n(y,"LI",{});var VMe=s(Ng);lJ=n(VMe,"STRONG",{});var vIr=s(lJ);TWe=r(vIr,"bert-generation"),vIr.forEach(t),FWe=r(VMe," \u2014 "),cx=n(VMe,"A",{href:!0});var TIr=s(cx);CWe=r(TIr,"BertGenerationTokenizer"),TIr.forEach(t),MWe=r(VMe," (Bert Generation model)"),VMe.forEach(t),EWe=i(y),Dg=n(y,"LI",{});var zMe=s(Dg);iJ=n(zMe,"STRONG",{});var FIr=s(iJ);yWe=r(FIr,"bert-japanese"),FIr.forEach(t),wWe=r(zMe," \u2014 "),fx=n(zMe,"A",{href:!0});var CIr=s(fx);AWe=r(CIr,"BertJapaneseTokenizer"),CIr.forEach(t),LWe=r(zMe," (BertJapanese model)"),zMe.forEach(t),BWe=i(y),jg=n(y,"LI",{});var WMe=s(jg);dJ=n(WMe,"STRONG",{});var MIr=s(dJ);xWe=r(MIr,"bertweet"),MIr.forEach(t),kWe=r(WMe," \u2014 "),mx=n(WMe,"A",{href:!0});var EIr=s(mx);RWe=r(EIr,"BertweetTokenizer"),EIr.forEach(t),SWe=r(WMe," (Bertweet model)"),WMe.forEach(t),PWe=i(y),Jn=n(y,"LI",{});var c8=s(Jn);cJ=n(c8,"STRONG",{});var yIr=s(cJ);$We=r(yIr,"big_bird"),yIr.forEach(t),IWe=r(c8," \u2014 "),gx=n(c8,"A",{href:!0});var wIr=s(gx);NWe=r(wIr,"BigBirdTokenizer"),wIr.forEach(t),DWe=r(c8," or "),hx=n(c8,"A",{href:!0});var AIr=s(hx);jWe=r(AIr,"BigBirdTokenizerFast"),AIr.forEach(t),qWe=r(c8," (BigBird model)"),c8.forEach(t),GWe=i(y),Yn=n(y,"LI",{});var f8=s(Yn);fJ=n(f8,"STRONG",{});var LIr=s(fJ);OWe=r(LIr,"bigbird_pegasus"),LIr.forEach(t),XWe=r(f8," \u2014 "),px=n(f8,"A",{href:!0});var BIr=s(px);VWe=r(BIr,"PegasusTokenizer"),BIr.forEach(t),zWe=r(f8," or "),_x=n(f8,"A",{href:!0});var xIr=s(_x);WWe=r(xIr,"PegasusTokenizerFast"),xIr.forEach(t),QWe=r(f8," (BigBirdPegasus model)"),f8.forEach(t),HWe=i(y),Kn=n(y,"LI",{});var m8=s(Kn);mJ=n(m8,"STRONG",{});var kIr=s(mJ);UWe=r(kIr,"blenderbot"),kIr.forEach(t),JWe=r(m8," \u2014 "),ux=n(m8,"A",{href:!0});var RIr=s(ux);YWe=r(RIr,"BlenderbotTokenizer"),RIr.forEach(t),KWe=r(m8," or "),bx=n(m8,"A",{href:!0});var SIr=s(bx);ZWe=r(SIr,"BlenderbotTokenizerFast"),SIr.forEach(t),eQe=r(m8," (Blenderbot model)"),m8.forEach(t),oQe=i(y),qg=n(y,"LI",{});var QMe=s(qg);gJ=n(QMe,"STRONG",{});var PIr=s(gJ);rQe=r(PIr,"blenderbot-small"),PIr.forEach(t),tQe=r(QMe," \u2014 "),vx=n(QMe,"A",{href:!0});var $Ir=s(vx);aQe=r($Ir,"BlenderbotSmallTokenizer"),$Ir.forEach(t),nQe=r(QMe," (BlenderbotSmall model)"),QMe.forEach(t),sQe=i(y),Gg=n(y,"LI",{});var HMe=s(Gg);hJ=n(HMe,"STRONG",{});var IIr=s(hJ);lQe=r(IIr,"byt5"),IIr.forEach(t),iQe=r(HMe," \u2014 "),Tx=n(HMe,"A",{href:!0});var NIr=s(Tx);dQe=r(NIr,"ByT5Tokenizer"),NIr.forEach(t),cQe=r(HMe," (ByT5 model)"),HMe.forEach(t),fQe=i(y),Zn=n(y,"LI",{});var g8=s(Zn);pJ=n(g8,"STRONG",{});var DIr=s(pJ);mQe=r(DIr,"camembert"),DIr.forEach(t),gQe=r(g8," \u2014 "),Fx=n(g8,"A",{href:!0});var jIr=s(Fx);hQe=r(jIr,"CamembertTokenizer"),jIr.forEach(t),pQe=r(g8," or "),Cx=n(g8,"A",{href:!0});var qIr=s(Cx);_Qe=r(qIr,"CamembertTokenizerFast"),qIr.forEach(t),uQe=r(g8," (CamemBERT model)"),g8.forEach(t),bQe=i(y),Og=n(y,"LI",{});var UMe=s(Og);_J=n(UMe,"STRONG",{});var GIr=s(_J);vQe=r(GIr,"canine"),GIr.forEach(t),TQe=r(UMe," \u2014 "),Mx=n(UMe,"A",{href:!0});var OIr=s(Mx);FQe=r(OIr,"CanineTokenizer"),OIr.forEach(t),CQe=r(UMe," (Canine model)"),UMe.forEach(t),MQe=i(y),es=n(y,"LI",{});var h8=s(es);uJ=n(h8,"STRONG",{});var XIr=s(uJ);EQe=r(XIr,"clip"),XIr.forEach(t),yQe=r(h8," \u2014 "),Ex=n(h8,"A",{href:!0});var VIr=s(Ex);wQe=r(VIr,"CLIPTokenizer"),VIr.forEach(t),AQe=r(h8," or "),yx=n(h8,"A",{href:!0});var zIr=s(yx);LQe=r(zIr,"CLIPTokenizerFast"),zIr.forEach(t),BQe=r(h8," (CLIP model)"),h8.forEach(t),xQe=i(y),os=n(y,"LI",{});var p8=s(os);bJ=n(p8,"STRONG",{});var WIr=s(bJ);kQe=r(WIr,"convbert"),WIr.forEach(t),RQe=r(p8," \u2014 "),wx=n(p8,"A",{href:!0});var QIr=s(wx);SQe=r(QIr,"ConvBertTokenizer"),QIr.forEach(t),PQe=r(p8," or "),Ax=n(p8,"A",{href:!0});var HIr=s(Ax);$Qe=r(HIr,"ConvBertTokenizerFast"),HIr.forEach(t),IQe=r(p8," (ConvBERT model)"),p8.forEach(t),NQe=i(y),rs=n(y,"LI",{});var _8=s(rs);vJ=n(_8,"STRONG",{});var UIr=s(vJ);DQe=r(UIr,"cpm"),UIr.forEach(t),jQe=r(_8," \u2014 "),Lx=n(_8,"A",{href:!0});var JIr=s(Lx);qQe=r(JIr,"CpmTokenizer"),JIr.forEach(t),GQe=r(_8," or "),TJ=n(_8,"CODE",{});var YIr=s(TJ);OQe=r(YIr,"CpmTokenizerFast"),YIr.forEach(t),XQe=r(_8," (CPM model)"),_8.forEach(t),VQe=i(y),Xg=n(y,"LI",{});var JMe=s(Xg);FJ=n(JMe,"STRONG",{});var KIr=s(FJ);zQe=r(KIr,"ctrl"),KIr.forEach(t),WQe=r(JMe," \u2014 "),Bx=n(JMe,"A",{href:!0});var ZIr=s(Bx);QQe=r(ZIr,"CTRLTokenizer"),ZIr.forEach(t),HQe=r(JMe," (CTRL model)"),JMe.forEach(t),UQe=i(y),ts=n(y,"LI",{});var u8=s(ts);CJ=n(u8,"STRONG",{});var eNr=s(CJ);JQe=r(eNr,"deberta"),eNr.forEach(t),YQe=r(u8," \u2014 "),xx=n(u8,"A",{href:!0});var oNr=s(xx);KQe=r(oNr,"DebertaTokenizer"),oNr.forEach(t),ZQe=r(u8," or "),kx=n(u8,"A",{href:!0});var rNr=s(kx);eHe=r(rNr,"DebertaTokenizerFast"),rNr.forEach(t),oHe=r(u8," (DeBERTa model)"),u8.forEach(t),rHe=i(y),Vg=n(y,"LI",{});var YMe=s(Vg);MJ=n(YMe,"STRONG",{});var tNr=s(MJ);tHe=r(tNr,"deberta-v2"),tNr.forEach(t),aHe=r(YMe," \u2014 "),Rx=n(YMe,"A",{href:!0});var aNr=s(Rx);nHe=r(aNr,"DebertaV2Tokenizer"),aNr.forEach(t),sHe=r(YMe," (DeBERTa-v2 model)"),YMe.forEach(t),lHe=i(y),as=n(y,"LI",{});var b8=s(as);EJ=n(b8,"STRONG",{});var nNr=s(EJ);iHe=r(nNr,"distilbert"),nNr.forEach(t),dHe=r(b8," \u2014 "),Sx=n(b8,"A",{href:!0});var sNr=s(Sx);cHe=r(sNr,"DistilBertTokenizer"),sNr.forEach(t),fHe=r(b8," or "),Px=n(b8,"A",{href:!0});var lNr=s(Px);mHe=r(lNr,"DistilBertTokenizerFast"),lNr.forEach(t),gHe=r(b8," (DistilBERT model)"),b8.forEach(t),hHe=i(y),ns=n(y,"LI",{});var v8=s(ns);yJ=n(v8,"STRONG",{});var iNr=s(yJ);pHe=r(iNr,"dpr"),iNr.forEach(t),_He=r(v8," \u2014 "),$x=n(v8,"A",{href:!0});var dNr=s($x);uHe=r(dNr,"DPRQuestionEncoderTokenizer"),dNr.forEach(t),bHe=r(v8," or "),Ix=n(v8,"A",{href:!0});var cNr=s(Ix);vHe=r(cNr,"DPRQuestionEncoderTokenizerFast"),cNr.forEach(t),THe=r(v8," (DPR model)"),v8.forEach(t),FHe=i(y),ss=n(y,"LI",{});var T8=s(ss);wJ=n(T8,"STRONG",{});var fNr=s(wJ);CHe=r(fNr,"electra"),fNr.forEach(t),MHe=r(T8," \u2014 "),Nx=n(T8,"A",{href:!0});var mNr=s(Nx);EHe=r(mNr,"ElectraTokenizer"),mNr.forEach(t),yHe=r(T8," or "),Dx=n(T8,"A",{href:!0});var gNr=s(Dx);wHe=r(gNr,"ElectraTokenizerFast"),gNr.forEach(t),AHe=r(T8," (ELECTRA model)"),T8.forEach(t),LHe=i(y),zg=n(y,"LI",{});var KMe=s(zg);AJ=n(KMe,"STRONG",{});var hNr=s(AJ);BHe=r(hNr,"flaubert"),hNr.forEach(t),xHe=r(KMe," \u2014 "),jx=n(KMe,"A",{href:!0});var pNr=s(jx);kHe=r(pNr,"FlaubertTokenizer"),pNr.forEach(t),RHe=r(KMe," (FlauBERT model)"),KMe.forEach(t),SHe=i(y),ls=n(y,"LI",{});var F8=s(ls);LJ=n(F8,"STRONG",{});var _Nr=s(LJ);PHe=r(_Nr,"fnet"),_Nr.forEach(t),$He=r(F8," \u2014 "),qx=n(F8,"A",{href:!0});var uNr=s(qx);IHe=r(uNr,"FNetTokenizer"),uNr.forEach(t),NHe=r(F8," or "),Gx=n(F8,"A",{href:!0});var bNr=s(Gx);DHe=r(bNr,"FNetTokenizerFast"),bNr.forEach(t),jHe=r(F8," (FNet model)"),F8.forEach(t),qHe=i(y),Wg=n(y,"LI",{});var ZMe=s(Wg);BJ=n(ZMe,"STRONG",{});var vNr=s(BJ);GHe=r(vNr,"fsmt"),vNr.forEach(t),OHe=r(ZMe," \u2014 "),Ox=n(ZMe,"A",{href:!0});var TNr=s(Ox);XHe=r(TNr,"FSMTTokenizer"),TNr.forEach(t),VHe=r(ZMe," (FairSeq Machine-Translation model)"),ZMe.forEach(t),zHe=i(y),is=n(y,"LI",{});var C8=s(is);xJ=n(C8,"STRONG",{});var FNr=s(xJ);WHe=r(FNr,"funnel"),FNr.forEach(t),QHe=r(C8," \u2014 "),Xx=n(C8,"A",{href:!0});var CNr=s(Xx);HHe=r(CNr,"FunnelTokenizer"),CNr.forEach(t),UHe=r(C8," or "),Vx=n(C8,"A",{href:!0});var MNr=s(Vx);JHe=r(MNr,"FunnelTokenizerFast"),MNr.forEach(t),YHe=r(C8," (Funnel Transformer model)"),C8.forEach(t),KHe=i(y),ds=n(y,"LI",{});var M8=s(ds);kJ=n(M8,"STRONG",{});var ENr=s(kJ);ZHe=r(ENr,"gpt2"),ENr.forEach(t),eUe=r(M8," \u2014 "),zx=n(M8,"A",{href:!0});var yNr=s(zx);oUe=r(yNr,"GPT2Tokenizer"),yNr.forEach(t),rUe=r(M8," or "),Wx=n(M8,"A",{href:!0});var wNr=s(Wx);tUe=r(wNr,"GPT2TokenizerFast"),wNr.forEach(t),aUe=r(M8," (OpenAI GPT-2 model)"),M8.forEach(t),nUe=i(y),cs=n(y,"LI",{});var E8=s(cs);RJ=n(E8,"STRONG",{});var ANr=s(RJ);sUe=r(ANr,"gpt_neo"),ANr.forEach(t),lUe=r(E8," \u2014 "),Qx=n(E8,"A",{href:!0});var LNr=s(Qx);iUe=r(LNr,"GPT2Tokenizer"),LNr.forEach(t),dUe=r(E8," or "),Hx=n(E8,"A",{href:!0});var BNr=s(Hx);cUe=r(BNr,"GPT2TokenizerFast"),BNr.forEach(t),fUe=r(E8," (GPT Neo model)"),E8.forEach(t),mUe=i(y),fs=n(y,"LI",{});var y8=s(fs);SJ=n(y8,"STRONG",{});var xNr=s(SJ);gUe=r(xNr,"herbert"),xNr.forEach(t),hUe=r(y8," \u2014 "),Ux=n(y8,"A",{href:!0});var kNr=s(Ux);pUe=r(kNr,"HerbertTokenizer"),kNr.forEach(t),_Ue=r(y8," or "),Jx=n(y8,"A",{href:!0});var RNr=s(Jx);uUe=r(RNr,"HerbertTokenizerFast"),RNr.forEach(t),bUe=r(y8," (HerBERT model)"),y8.forEach(t),vUe=i(y),Qg=n(y,"LI",{});var e4e=s(Qg);PJ=n(e4e,"STRONG",{});var SNr=s(PJ);TUe=r(SNr,"hubert"),SNr.forEach(t),FUe=r(e4e," \u2014 "),Yx=n(e4e,"A",{href:!0});var PNr=s(Yx);CUe=r(PNr,"Wav2Vec2CTCTokenizer"),PNr.forEach(t),MUe=r(e4e," (Hubert model)"),e4e.forEach(t),EUe=i(y),ms=n(y,"LI",{});var w8=s(ms);$J=n(w8,"STRONG",{});var $Nr=s($J);yUe=r($Nr,"ibert"),$Nr.forEach(t),wUe=r(w8," \u2014 "),Kx=n(w8,"A",{href:!0});var INr=s(Kx);AUe=r(INr,"RobertaTokenizer"),INr.forEach(t),LUe=r(w8," or "),Zx=n(w8,"A",{href:!0});var NNr=s(Zx);BUe=r(NNr,"RobertaTokenizerFast"),NNr.forEach(t),xUe=r(w8," (I-BERT model)"),w8.forEach(t),kUe=i(y),gs=n(y,"LI",{});var A8=s(gs);IJ=n(A8,"STRONG",{});var DNr=s(IJ);RUe=r(DNr,"layoutlm"),DNr.forEach(t),SUe=r(A8," \u2014 "),ek=n(A8,"A",{href:!0});var jNr=s(ek);PUe=r(jNr,"LayoutLMTokenizer"),jNr.forEach(t),$Ue=r(A8," or "),ok=n(A8,"A",{href:!0});var qNr=s(ok);IUe=r(qNr,"LayoutLMTokenizerFast"),qNr.forEach(t),NUe=r(A8," (LayoutLM model)"),A8.forEach(t),DUe=i(y),hs=n(y,"LI",{});var L8=s(hs);NJ=n(L8,"STRONG",{});var GNr=s(NJ);jUe=r(GNr,"layoutlmv2"),GNr.forEach(t),qUe=r(L8," \u2014 "),rk=n(L8,"A",{href:!0});var ONr=s(rk);GUe=r(ONr,"LayoutLMv2Tokenizer"),ONr.forEach(t),OUe=r(L8," or "),tk=n(L8,"A",{href:!0});var XNr=s(tk);XUe=r(XNr,"LayoutLMv2TokenizerFast"),XNr.forEach(t),VUe=r(L8," (LayoutLMv2 model)"),L8.forEach(t),zUe=i(y),ps=n(y,"LI",{});var B8=s(ps);DJ=n(B8,"STRONG",{});var VNr=s(DJ);WUe=r(VNr,"layoutxlm"),VNr.forEach(t),QUe=r(B8," \u2014 "),ak=n(B8,"A",{href:!0});var zNr=s(ak);HUe=r(zNr,"LayoutXLMTokenizer"),zNr.forEach(t),UUe=r(B8," or "),nk=n(B8,"A",{href:!0});var WNr=s(nk);JUe=r(WNr,"LayoutXLMTokenizerFast"),WNr.forEach(t),YUe=r(B8," (LayoutXLM model)"),B8.forEach(t),KUe=i(y),_s=n(y,"LI",{});var x8=s(_s);jJ=n(x8,"STRONG",{});var QNr=s(jJ);ZUe=r(QNr,"led"),QNr.forEach(t),eJe=r(x8," \u2014 "),sk=n(x8,"A",{href:!0});var HNr=s(sk);oJe=r(HNr,"LEDTokenizer"),HNr.forEach(t),rJe=r(x8," or "),lk=n(x8,"A",{href:!0});var UNr=s(lk);tJe=r(UNr,"LEDTokenizerFast"),UNr.forEach(t),aJe=r(x8," (LED model)"),x8.forEach(t),nJe=i(y),us=n(y,"LI",{});var k8=s(us);qJ=n(k8,"STRONG",{});var JNr=s(qJ);sJe=r(JNr,"longformer"),JNr.forEach(t),lJe=r(k8," \u2014 "),ik=n(k8,"A",{href:!0});var YNr=s(ik);iJe=r(YNr,"LongformerTokenizer"),YNr.forEach(t),dJe=r(k8," or "),dk=n(k8,"A",{href:!0});var KNr=s(dk);cJe=r(KNr,"LongformerTokenizerFast"),KNr.forEach(t),fJe=r(k8," (Longformer model)"),k8.forEach(t),mJe=i(y),Hg=n(y,"LI",{});var o4e=s(Hg);GJ=n(o4e,"STRONG",{});var ZNr=s(GJ);gJe=r(ZNr,"luke"),ZNr.forEach(t),hJe=r(o4e," \u2014 "),ck=n(o4e,"A",{href:!0});var eDr=s(ck);pJe=r(eDr,"LukeTokenizer"),eDr.forEach(t),_Je=r(o4e," (LUKE model)"),o4e.forEach(t),uJe=i(y),bs=n(y,"LI",{});var R8=s(bs);OJ=n(R8,"STRONG",{});var oDr=s(OJ);bJe=r(oDr,"lxmert"),oDr.forEach(t),vJe=r(R8," \u2014 "),fk=n(R8,"A",{href:!0});var rDr=s(fk);TJe=r(rDr,"LxmertTokenizer"),rDr.forEach(t),FJe=r(R8," or "),mk=n(R8,"A",{href:!0});var tDr=s(mk);CJe=r(tDr,"LxmertTokenizerFast"),tDr.forEach(t),MJe=r(R8," (LXMERT model)"),R8.forEach(t),EJe=i(y),Ug=n(y,"LI",{});var r4e=s(Ug);XJ=n(r4e,"STRONG",{});var aDr=s(XJ);yJe=r(aDr,"m2m_100"),aDr.forEach(t),wJe=r(r4e," \u2014 "),gk=n(r4e,"A",{href:!0});var nDr=s(gk);AJe=r(nDr,"M2M100Tokenizer"),nDr.forEach(t),LJe=r(r4e," (M2M100 model)"),r4e.forEach(t),BJe=i(y),Jg=n(y,"LI",{});var t4e=s(Jg);VJ=n(t4e,"STRONG",{});var sDr=s(VJ);xJe=r(sDr,"marian"),sDr.forEach(t),kJe=r(t4e," \u2014 "),hk=n(t4e,"A",{href:!0});var lDr=s(hk);RJe=r(lDr,"MarianTokenizer"),lDr.forEach(t),SJe=r(t4e," (Marian model)"),t4e.forEach(t),PJe=i(y),vs=n(y,"LI",{});var S8=s(vs);zJ=n(S8,"STRONG",{});var iDr=s(zJ);$Je=r(iDr,"mbart"),iDr.forEach(t),IJe=r(S8," \u2014 "),pk=n(S8,"A",{href:!0});var dDr=s(pk);NJe=r(dDr,"MBartTokenizer"),dDr.forEach(t),DJe=r(S8," or "),_k=n(S8,"A",{href:!0});var cDr=s(_k);jJe=r(cDr,"MBartTokenizerFast"),cDr.forEach(t),qJe=r(S8," (mBART model)"),S8.forEach(t),GJe=i(y),Ts=n(y,"LI",{});var P8=s(Ts);WJ=n(P8,"STRONG",{});var fDr=s(WJ);OJe=r(fDr,"mbart50"),fDr.forEach(t),XJe=r(P8," \u2014 "),uk=n(P8,"A",{href:!0});var mDr=s(uk);VJe=r(mDr,"MBart50Tokenizer"),mDr.forEach(t),zJe=r(P8," or "),bk=n(P8,"A",{href:!0});var gDr=s(bk);WJe=r(gDr,"MBart50TokenizerFast"),gDr.forEach(t),QJe=r(P8," (mBART-50 model)"),P8.forEach(t),HJe=i(y),Yg=n(y,"LI",{});var a4e=s(Yg);QJ=n(a4e,"STRONG",{});var hDr=s(QJ);UJe=r(hDr,"mluke"),hDr.forEach(t),JJe=r(a4e," \u2014 "),vk=n(a4e,"A",{href:!0});var pDr=s(vk);YJe=r(pDr,"MLukeTokenizer"),pDr.forEach(t),KJe=r(a4e," (mLUKE model)"),a4e.forEach(t),ZJe=i(y),Fs=n(y,"LI",{});var $8=s(Fs);HJ=n($8,"STRONG",{});var _Dr=s(HJ);eYe=r(_Dr,"mobilebert"),_Dr.forEach(t),oYe=r($8," \u2014 "),Tk=n($8,"A",{href:!0});var uDr=s(Tk);rYe=r(uDr,"MobileBertTokenizer"),uDr.forEach(t),tYe=r($8," or "),Fk=n($8,"A",{href:!0});var bDr=s(Fk);aYe=r(bDr,"MobileBertTokenizerFast"),bDr.forEach(t),nYe=r($8," (MobileBERT model)"),$8.forEach(t),sYe=i(y),Cs=n(y,"LI",{});var I8=s(Cs);UJ=n(I8,"STRONG",{});var vDr=s(UJ);lYe=r(vDr,"mpnet"),vDr.forEach(t),iYe=r(I8," \u2014 "),Ck=n(I8,"A",{href:!0});var TDr=s(Ck);dYe=r(TDr,"MPNetTokenizer"),TDr.forEach(t),cYe=r(I8," or "),Mk=n(I8,"A",{href:!0});var FDr=s(Mk);fYe=r(FDr,"MPNetTokenizerFast"),FDr.forEach(t),mYe=r(I8," (MPNet model)"),I8.forEach(t),gYe=i(y),Ms=n(y,"LI",{});var N8=s(Ms);JJ=n(N8,"STRONG",{});var CDr=s(JJ);hYe=r(CDr,"mt5"),CDr.forEach(t),pYe=r(N8," \u2014 "),Ek=n(N8,"A",{href:!0});var MDr=s(Ek);_Ye=r(MDr,"MT5Tokenizer"),MDr.forEach(t),uYe=r(N8," or "),yk=n(N8,"A",{href:!0});var EDr=s(yk);bYe=r(EDr,"MT5TokenizerFast"),EDr.forEach(t),vYe=r(N8," (mT5 model)"),N8.forEach(t),TYe=i(y),Es=n(y,"LI",{});var D8=s(Es);YJ=n(D8,"STRONG",{});var yDr=s(YJ);FYe=r(yDr,"openai-gpt"),yDr.forEach(t),CYe=r(D8," \u2014 "),wk=n(D8,"A",{href:!0});var wDr=s(wk);MYe=r(wDr,"OpenAIGPTTokenizer"),wDr.forEach(t),EYe=r(D8," or "),Ak=n(D8,"A",{href:!0});var ADr=s(Ak);yYe=r(ADr,"OpenAIGPTTokenizerFast"),ADr.forEach(t),wYe=r(D8," (OpenAI GPT model)"),D8.forEach(t),AYe=i(y),ys=n(y,"LI",{});var j8=s(ys);KJ=n(j8,"STRONG",{});var LDr=s(KJ);LYe=r(LDr,"pegasus"),LDr.forEach(t),BYe=r(j8," \u2014 "),Lk=n(j8,"A",{href:!0});var BDr=s(Lk);xYe=r(BDr,"PegasusTokenizer"),BDr.forEach(t),kYe=r(j8," or "),Bk=n(j8,"A",{href:!0});var xDr=s(Bk);RYe=r(xDr,"PegasusTokenizerFast"),xDr.forEach(t),SYe=r(j8," (Pegasus model)"),j8.forEach(t),PYe=i(y),Kg=n(y,"LI",{});var n4e=s(Kg);ZJ=n(n4e,"STRONG",{});var kDr=s(ZJ);$Ye=r(kDr,"perceiver"),kDr.forEach(t),IYe=r(n4e," \u2014 "),xk=n(n4e,"A",{href:!0});var RDr=s(xk);NYe=r(RDr,"PerceiverTokenizer"),RDr.forEach(t),DYe=r(n4e," (Perceiver model)"),n4e.forEach(t),jYe=i(y),Zg=n(y,"LI",{});var s4e=s(Zg);eY=n(s4e,"STRONG",{});var SDr=s(eY);qYe=r(SDr,"phobert"),SDr.forEach(t),GYe=r(s4e," \u2014 "),kk=n(s4e,"A",{href:!0});var PDr=s(kk);OYe=r(PDr,"PhobertTokenizer"),PDr.forEach(t),XYe=r(s4e," (PhoBERT model)"),s4e.forEach(t),VYe=i(y),eh=n(y,"LI",{});var l4e=s(eh);oY=n(l4e,"STRONG",{});var $Dr=s(oY);zYe=r($Dr,"plbart"),$Dr.forEach(t),WYe=r(l4e," \u2014 "),Rk=n(l4e,"A",{href:!0});var IDr=s(Rk);QYe=r(IDr,"PLBartTokenizer"),IDr.forEach(t),HYe=r(l4e," (PLBart model)"),l4e.forEach(t),UYe=i(y),oh=n(y,"LI",{});var i4e=s(oh);rY=n(i4e,"STRONG",{});var NDr=s(rY);JYe=r(NDr,"prophetnet"),NDr.forEach(t),YYe=r(i4e," \u2014 "),Sk=n(i4e,"A",{href:!0});var DDr=s(Sk);KYe=r(DDr,"ProphetNetTokenizer"),DDr.forEach(t),ZYe=r(i4e," (ProphetNet model)"),i4e.forEach(t),eKe=i(y),ws=n(y,"LI",{});var q8=s(ws);tY=n(q8,"STRONG",{});var jDr=s(tY);oKe=r(jDr,"qdqbert"),jDr.forEach(t),rKe=r(q8," \u2014 "),Pk=n(q8,"A",{href:!0});var qDr=s(Pk);tKe=r(qDr,"BertTokenizer"),qDr.forEach(t),aKe=r(q8," or "),$k=n(q8,"A",{href:!0});var GDr=s($k);nKe=r(GDr,"BertTokenizerFast"),GDr.forEach(t),sKe=r(q8," (QDQBert model)"),q8.forEach(t),lKe=i(y),rh=n(y,"LI",{});var d4e=s(rh);aY=n(d4e,"STRONG",{});var ODr=s(aY);iKe=r(ODr,"rag"),ODr.forEach(t),dKe=r(d4e," \u2014 "),Ik=n(d4e,"A",{href:!0});var XDr=s(Ik);cKe=r(XDr,"RagTokenizer"),XDr.forEach(t),fKe=r(d4e," (RAG model)"),d4e.forEach(t),mKe=i(y),As=n(y,"LI",{});var G8=s(As);nY=n(G8,"STRONG",{});var VDr=s(nY);gKe=r(VDr,"realm"),VDr.forEach(t),hKe=r(G8," \u2014 "),Nk=n(G8,"A",{href:!0});var zDr=s(Nk);pKe=r(zDr,"RealmTokenizer"),zDr.forEach(t),_Ke=r(G8," or "),Dk=n(G8,"A",{href:!0});var WDr=s(Dk);uKe=r(WDr,"RealmTokenizerFast"),WDr.forEach(t),bKe=r(G8," (Realm model)"),G8.forEach(t),vKe=i(y),Ls=n(y,"LI",{});var O8=s(Ls);sY=n(O8,"STRONG",{});var QDr=s(sY);TKe=r(QDr,"reformer"),QDr.forEach(t),FKe=r(O8," \u2014 "),jk=n(O8,"A",{href:!0});var HDr=s(jk);CKe=r(HDr,"ReformerTokenizer"),HDr.forEach(t),MKe=r(O8," or "),qk=n(O8,"A",{href:!0});var UDr=s(qk);EKe=r(UDr,"ReformerTokenizerFast"),UDr.forEach(t),yKe=r(O8," (Reformer model)"),O8.forEach(t),wKe=i(y),Bs=n(y,"LI",{});var X8=s(Bs);lY=n(X8,"STRONG",{});var JDr=s(lY);AKe=r(JDr,"rembert"),JDr.forEach(t),LKe=r(X8," \u2014 "),Gk=n(X8,"A",{href:!0});var YDr=s(Gk);BKe=r(YDr,"RemBertTokenizer"),YDr.forEach(t),xKe=r(X8," or "),Ok=n(X8,"A",{href:!0});var KDr=s(Ok);kKe=r(KDr,"RemBertTokenizerFast"),KDr.forEach(t),RKe=r(X8," (RemBERT model)"),X8.forEach(t),SKe=i(y),xs=n(y,"LI",{});var V8=s(xs);iY=n(V8,"STRONG",{});var ZDr=s(iY);PKe=r(ZDr,"retribert"),ZDr.forEach(t),$Ke=r(V8," \u2014 "),Xk=n(V8,"A",{href:!0});var ejr=s(Xk);IKe=r(ejr,"RetriBertTokenizer"),ejr.forEach(t),NKe=r(V8," or "),Vk=n(V8,"A",{href:!0});var ojr=s(Vk);DKe=r(ojr,"RetriBertTokenizerFast"),ojr.forEach(t),jKe=r(V8," (RetriBERT model)"),V8.forEach(t),qKe=i(y),ks=n(y,"LI",{});var z8=s(ks);dY=n(z8,"STRONG",{});var rjr=s(dY);GKe=r(rjr,"roberta"),rjr.forEach(t),OKe=r(z8," \u2014 "),zk=n(z8,"A",{href:!0});var tjr=s(zk);XKe=r(tjr,"RobertaTokenizer"),tjr.forEach(t),VKe=r(z8," or "),Wk=n(z8,"A",{href:!0});var ajr=s(Wk);zKe=r(ajr,"RobertaTokenizerFast"),ajr.forEach(t),WKe=r(z8," (RoBERTa model)"),z8.forEach(t),QKe=i(y),Rs=n(y,"LI",{});var W8=s(Rs);cY=n(W8,"STRONG",{});var njr=s(cY);HKe=r(njr,"roformer"),njr.forEach(t),UKe=r(W8," \u2014 "),Qk=n(W8,"A",{href:!0});var sjr=s(Qk);JKe=r(sjr,"RoFormerTokenizer"),sjr.forEach(t),YKe=r(W8," or "),Hk=n(W8,"A",{href:!0});var ljr=s(Hk);KKe=r(ljr,"RoFormerTokenizerFast"),ljr.forEach(t),ZKe=r(W8," (RoFormer model)"),W8.forEach(t),eZe=i(y),th=n(y,"LI",{});var c4e=s(th);fY=n(c4e,"STRONG",{});var ijr=s(fY);oZe=r(ijr,"speech_to_text"),ijr.forEach(t),rZe=r(c4e," \u2014 "),Uk=n(c4e,"A",{href:!0});var djr=s(Uk);tZe=r(djr,"Speech2TextTokenizer"),djr.forEach(t),aZe=r(c4e," (Speech2Text model)"),c4e.forEach(t),nZe=i(y),ah=n(y,"LI",{});var f4e=s(ah);mY=n(f4e,"STRONG",{});var cjr=s(mY);sZe=r(cjr,"speech_to_text_2"),cjr.forEach(t),lZe=r(f4e," \u2014 "),Jk=n(f4e,"A",{href:!0});var fjr=s(Jk);iZe=r(fjr,"Speech2Text2Tokenizer"),fjr.forEach(t),dZe=r(f4e," (Speech2Text2 model)"),f4e.forEach(t),cZe=i(y),Ss=n(y,"LI",{});var Q8=s(Ss);gY=n(Q8,"STRONG",{});var mjr=s(gY);fZe=r(mjr,"splinter"),mjr.forEach(t),mZe=r(Q8," \u2014 "),Yk=n(Q8,"A",{href:!0});var gjr=s(Yk);gZe=r(gjr,"SplinterTokenizer"),gjr.forEach(t),hZe=r(Q8," or "),Kk=n(Q8,"A",{href:!0});var hjr=s(Kk);pZe=r(hjr,"SplinterTokenizerFast"),hjr.forEach(t),_Ze=r(Q8," (Splinter model)"),Q8.forEach(t),uZe=i(y),Ps=n(y,"LI",{});var H8=s(Ps);hY=n(H8,"STRONG",{});var pjr=s(hY);bZe=r(pjr,"squeezebert"),pjr.forEach(t),vZe=r(H8," \u2014 "),Zk=n(H8,"A",{href:!0});var _jr=s(Zk);TZe=r(_jr,"SqueezeBertTokenizer"),_jr.forEach(t),FZe=r(H8," or "),eR=n(H8,"A",{href:!0});var ujr=s(eR);CZe=r(ujr,"SqueezeBertTokenizerFast"),ujr.forEach(t),MZe=r(H8," (SqueezeBERT model)"),H8.forEach(t),EZe=i(y),$s=n(y,"LI",{});var U8=s($s);pY=n(U8,"STRONG",{});var bjr=s(pY);yZe=r(bjr,"t5"),bjr.forEach(t),wZe=r(U8," \u2014 "),oR=n(U8,"A",{href:!0});var vjr=s(oR);AZe=r(vjr,"T5Tokenizer"),vjr.forEach(t),LZe=r(U8," or "),rR=n(U8,"A",{href:!0});var Tjr=s(rR);BZe=r(Tjr,"T5TokenizerFast"),Tjr.forEach(t),xZe=r(U8," (T5 model)"),U8.forEach(t),kZe=i(y),nh=n(y,"LI",{});var m4e=s(nh);_Y=n(m4e,"STRONG",{});var Fjr=s(_Y);RZe=r(Fjr,"tapas"),Fjr.forEach(t),SZe=r(m4e," \u2014 "),tR=n(m4e,"A",{href:!0});var Cjr=s(tR);PZe=r(Cjr,"TapasTokenizer"),Cjr.forEach(t),$Ze=r(m4e," (TAPAS model)"),m4e.forEach(t),IZe=i(y),sh=n(y,"LI",{});var g4e=s(sh);uY=n(g4e,"STRONG",{});var Mjr=s(uY);NZe=r(Mjr,"transfo-xl"),Mjr.forEach(t),DZe=r(g4e," \u2014 "),aR=n(g4e,"A",{href:!0});var Ejr=s(aR);jZe=r(Ejr,"TransfoXLTokenizer"),Ejr.forEach(t),qZe=r(g4e," (Transformer-XL model)"),g4e.forEach(t),GZe=i(y),lh=n(y,"LI",{});var h4e=s(lh);bY=n(h4e,"STRONG",{});var yjr=s(bY);OZe=r(yjr,"wav2vec2"),yjr.forEach(t),XZe=r(h4e," \u2014 "),nR=n(h4e,"A",{href:!0});var wjr=s(nR);VZe=r(wjr,"Wav2Vec2CTCTokenizer"),wjr.forEach(t),zZe=r(h4e," (Wav2Vec2 model)"),h4e.forEach(t),WZe=i(y),ih=n(y,"LI",{});var p4e=s(ih);vY=n(p4e,"STRONG",{});var Ajr=s(vY);QZe=r(Ajr,"wav2vec2_phoneme"),Ajr.forEach(t),HZe=r(p4e," \u2014 "),sR=n(p4e,"A",{href:!0});var Ljr=s(sR);UZe=r(Ljr,"Wav2Vec2PhonemeCTCTokenizer"),Ljr.forEach(t),JZe=r(p4e," (Wav2Vec2Phoneme model)"),p4e.forEach(t),YZe=i(y),Is=n(y,"LI",{});var J8=s(Is);TY=n(J8,"STRONG",{});var Bjr=s(TY);KZe=r(Bjr,"xglm"),Bjr.forEach(t),ZZe=r(J8," \u2014 "),lR=n(J8,"A",{href:!0});var xjr=s(lR);eeo=r(xjr,"XGLMTokenizer"),xjr.forEach(t),oeo=r(J8," or "),iR=n(J8,"A",{href:!0});var kjr=s(iR);reo=r(kjr,"XGLMTokenizerFast"),kjr.forEach(t),teo=r(J8," (XGLM model)"),J8.forEach(t),aeo=i(y),dh=n(y,"LI",{});var _4e=s(dh);FY=n(_4e,"STRONG",{});var Rjr=s(FY);neo=r(Rjr,"xlm"),Rjr.forEach(t),seo=r(_4e," \u2014 "),dR=n(_4e,"A",{href:!0});var Sjr=s(dR);leo=r(Sjr,"XLMTokenizer"),Sjr.forEach(t),ieo=r(_4e," (XLM model)"),_4e.forEach(t),deo=i(y),ch=n(y,"LI",{});var u4e=s(ch);CY=n(u4e,"STRONG",{});var Pjr=s(CY);ceo=r(Pjr,"xlm-prophetnet"),Pjr.forEach(t),feo=r(u4e," \u2014 "),cR=n(u4e,"A",{href:!0});var $jr=s(cR);meo=r($jr,"XLMProphetNetTokenizer"),$jr.forEach(t),geo=r(u4e," (XLMProphetNet model)"),u4e.forEach(t),heo=i(y),Ns=n(y,"LI",{});var Y8=s(Ns);MY=n(Y8,"STRONG",{});var Ijr=s(MY);peo=r(Ijr,"xlm-roberta"),Ijr.forEach(t),_eo=r(Y8," \u2014 "),fR=n(Y8,"A",{href:!0});var Njr=s(fR);ueo=r(Njr,"XLMRobertaTokenizer"),Njr.forEach(t),beo=r(Y8," or "),mR=n(Y8,"A",{href:!0});var Djr=s(mR);veo=r(Djr,"XLMRobertaTokenizerFast"),Djr.forEach(t),Teo=r(Y8," (XLM-RoBERTa model)"),Y8.forEach(t),Feo=i(y),Ds=n(y,"LI",{});var K8=s(Ds);EY=n(K8,"STRONG",{});var jjr=s(EY);Ceo=r(jjr,"xlnet"),jjr.forEach(t),Meo=r(K8," \u2014 "),gR=n(K8,"A",{href:!0});var qjr=s(gR);Eeo=r(qjr,"XLNetTokenizer"),qjr.forEach(t),yeo=r(K8," or "),hR=n(K8,"A",{href:!0});var Gjr=s(hR);weo=r(Gjr,"XLNetTokenizerFast"),Gjr.forEach(t),Aeo=r(K8," (XLNet model)"),K8.forEach(t),y.forEach(t),Leo=i(ha),yY=n(ha,"P",{});var Ojr=s(yY);Beo=r(Ojr,"Examples:"),Ojr.forEach(t),xeo=i(ha),m(A5.$$.fragment,ha),ha.forEach(t),keo=i(Xs),fh=n(Xs,"DIV",{class:!0});var BSe=s(fh);m(L5.$$.fragment,BSe),Reo=i(BSe),wY=n(BSe,"P",{});var Xjr=s(wY);Seo=r(Xjr,"Register a new tokenizer in this mapping."),Xjr.forEach(t),BSe.forEach(t),Xs.forEach(t),yke=i(c),Qi=n(c,"H2",{class:!0});var xSe=s(Qi);mh=n(xSe,"A",{id:!0,class:!0,href:!0});var Vjr=s(mh);AY=n(Vjr,"SPAN",{});var zjr=s(AY);m(B5.$$.fragment,zjr),zjr.forEach(t),Vjr.forEach(t),Peo=i(xSe),LY=n(xSe,"SPAN",{});var Wjr=s(LY);$eo=r(Wjr,"AutoFeatureExtractor"),Wjr.forEach(t),xSe.forEach(t),wke=i(c),Ho=n(c,"DIV",{class:!0});var Vs=s(Ho);m(x5.$$.fragment,Vs),Ieo=i(Vs),k5=n(Vs,"P",{});var kSe=s(k5);Neo=r(kSe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),pR=n(kSe,"A",{href:!0});var Qjr=s(pR);Deo=r(Qjr,"AutoFeatureExtractor.from_pretrained()"),Qjr.forEach(t),jeo=r(kSe," class method."),kSe.forEach(t),qeo=i(Vs),R5=n(Vs,"P",{});var RSe=s(R5);Geo=r(RSe,"This class cannot be instantiated directly using "),BY=n(RSe,"CODE",{});var Hjr=s(BY);Oeo=r(Hjr,"__init__()"),Hjr.forEach(t),Xeo=r(RSe," (throws an error)."),RSe.forEach(t),Veo=i(Vs),$e=n(Vs,"DIV",{class:!0});var Dt=s($e);m(S5.$$.fragment,Dt),zeo=i(Dt),xY=n(Dt,"P",{});var Ujr=s(xY);Weo=r(Ujr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Ujr.forEach(t),Qeo=i(Dt),Xa=n(Dt,"P",{});var m3=s(Xa);Heo=r(m3,"The feature extractor class to instantiate is selected based on the "),kY=n(m3,"CODE",{});var Jjr=s(kY);Ueo=r(Jjr,"model_type"),Jjr.forEach(t),Jeo=r(m3,` property of the config object
(either passed as an argument or loaded from `),RY=n(m3,"CODE",{});var Yjr=s(RY);Yeo=r(Yjr,"pretrained_model_name_or_path"),Yjr.forEach(t),Keo=r(m3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),SY=n(m3,"CODE",{});var Kjr=s(SY);Zeo=r(Kjr,"pretrained_model_name_or_path"),Kjr.forEach(t),eoo=r(m3,":"),m3.forEach(t),ooo=i(Dt),Z=n(Dt,"UL",{});var te=s(Z);gh=n(te,"LI",{});var b4e=s(gh);PY=n(b4e,"STRONG",{});var Zjr=s(PY);roo=r(Zjr,"beit"),Zjr.forEach(t),too=r(b4e," \u2014 "),_R=n(b4e,"A",{href:!0});var eqr=s(_R);aoo=r(eqr,"BeitFeatureExtractor"),eqr.forEach(t),noo=r(b4e," (BEiT model)"),b4e.forEach(t),soo=i(te),hh=n(te,"LI",{});var v4e=s(hh);$Y=n(v4e,"STRONG",{});var oqr=s($Y);loo=r(oqr,"clip"),oqr.forEach(t),ioo=r(v4e," \u2014 "),uR=n(v4e,"A",{href:!0});var rqr=s(uR);doo=r(rqr,"CLIPFeatureExtractor"),rqr.forEach(t),coo=r(v4e," (CLIP model)"),v4e.forEach(t),foo=i(te),ph=n(te,"LI",{});var T4e=s(ph);IY=n(T4e,"STRONG",{});var tqr=s(IY);moo=r(tqr,"convnext"),tqr.forEach(t),goo=r(T4e," \u2014 "),bR=n(T4e,"A",{href:!0});var aqr=s(bR);hoo=r(aqr,"ConvNextFeatureExtractor"),aqr.forEach(t),poo=r(T4e," (ConvNext model)"),T4e.forEach(t),_oo=i(te),_h=n(te,"LI",{});var F4e=s(_h);NY=n(F4e,"STRONG",{});var nqr=s(NY);uoo=r(nqr,"deit"),nqr.forEach(t),boo=r(F4e," \u2014 "),vR=n(F4e,"A",{href:!0});var sqr=s(vR);voo=r(sqr,"DeiTFeatureExtractor"),sqr.forEach(t),Too=r(F4e," (DeiT model)"),F4e.forEach(t),Foo=i(te),uh=n(te,"LI",{});var C4e=s(uh);DY=n(C4e,"STRONG",{});var lqr=s(DY);Coo=r(lqr,"detr"),lqr.forEach(t),Moo=r(C4e," \u2014 "),TR=n(C4e,"A",{href:!0});var iqr=s(TR);Eoo=r(iqr,"DetrFeatureExtractor"),iqr.forEach(t),yoo=r(C4e," (DETR model)"),C4e.forEach(t),woo=i(te),bh=n(te,"LI",{});var M4e=s(bh);jY=n(M4e,"STRONG",{});var dqr=s(jY);Aoo=r(dqr,"hubert"),dqr.forEach(t),Loo=r(M4e," \u2014 "),FR=n(M4e,"A",{href:!0});var cqr=s(FR);Boo=r(cqr,"Wav2Vec2FeatureExtractor"),cqr.forEach(t),xoo=r(M4e," (Hubert model)"),M4e.forEach(t),koo=i(te),vh=n(te,"LI",{});var E4e=s(vh);qY=n(E4e,"STRONG",{});var fqr=s(qY);Roo=r(fqr,"layoutlmv2"),fqr.forEach(t),Soo=r(E4e," \u2014 "),CR=n(E4e,"A",{href:!0});var mqr=s(CR);Poo=r(mqr,"LayoutLMv2FeatureExtractor"),mqr.forEach(t),$oo=r(E4e," (LayoutLMv2 model)"),E4e.forEach(t),Ioo=i(te),Th=n(te,"LI",{});var y4e=s(Th);GY=n(y4e,"STRONG",{});var gqr=s(GY);Noo=r(gqr,"maskformer"),gqr.forEach(t),Doo=r(y4e," \u2014 "),MR=n(y4e,"A",{href:!0});var hqr=s(MR);joo=r(hqr,"MaskFormerFeatureExtractor"),hqr.forEach(t),qoo=r(y4e," (MaskFormer model)"),y4e.forEach(t),Goo=i(te),Fh=n(te,"LI",{});var w4e=s(Fh);OY=n(w4e,"STRONG",{});var pqr=s(OY);Ooo=r(pqr,"perceiver"),pqr.forEach(t),Xoo=r(w4e," \u2014 "),ER=n(w4e,"A",{href:!0});var _qr=s(ER);Voo=r(_qr,"PerceiverFeatureExtractor"),_qr.forEach(t),zoo=r(w4e," (Perceiver model)"),w4e.forEach(t),Woo=i(te),Ch=n(te,"LI",{});var A4e=s(Ch);XY=n(A4e,"STRONG",{});var uqr=s(XY);Qoo=r(uqr,"poolformer"),uqr.forEach(t),Hoo=r(A4e," \u2014 "),yR=n(A4e,"A",{href:!0});var bqr=s(yR);Uoo=r(bqr,"PoolFormerFeatureExtractor"),bqr.forEach(t),Joo=r(A4e," (PoolFormer model)"),A4e.forEach(t),Yoo=i(te),Mh=n(te,"LI",{});var L4e=s(Mh);VY=n(L4e,"STRONG",{});var vqr=s(VY);Koo=r(vqr,"resnet"),vqr.forEach(t),Zoo=r(L4e," \u2014 "),wR=n(L4e,"A",{href:!0});var Tqr=s(wR);ero=r(Tqr,"ConvNextFeatureExtractor"),Tqr.forEach(t),oro=r(L4e," (ResNet model)"),L4e.forEach(t),rro=i(te),Eh=n(te,"LI",{});var B4e=s(Eh);zY=n(B4e,"STRONG",{});var Fqr=s(zY);tro=r(Fqr,"resnetd"),Fqr.forEach(t),aro=r(B4e," \u2014 "),AR=n(B4e,"A",{href:!0});var Cqr=s(AR);nro=r(Cqr,"ConvNextFeatureExtractor"),Cqr.forEach(t),sro=r(B4e," (ResNet-D model)"),B4e.forEach(t),lro=i(te),yh=n(te,"LI",{});var x4e=s(yh);WY=n(x4e,"STRONG",{});var Mqr=s(WY);iro=r(Mqr,"segformer"),Mqr.forEach(t),dro=r(x4e," \u2014 "),LR=n(x4e,"A",{href:!0});var Eqr=s(LR);cro=r(Eqr,"SegformerFeatureExtractor"),Eqr.forEach(t),fro=r(x4e," (SegFormer model)"),x4e.forEach(t),mro=i(te),wh=n(te,"LI",{});var k4e=s(wh);QY=n(k4e,"STRONG",{});var yqr=s(QY);gro=r(yqr,"speech_to_text"),yqr.forEach(t),hro=r(k4e," \u2014 "),BR=n(k4e,"A",{href:!0});var wqr=s(BR);pro=r(wqr,"Speech2TextFeatureExtractor"),wqr.forEach(t),_ro=r(k4e," (Speech2Text model)"),k4e.forEach(t),uro=i(te),Ah=n(te,"LI",{});var R4e=s(Ah);HY=n(R4e,"STRONG",{});var Aqr=s(HY);bro=r(Aqr,"swin"),Aqr.forEach(t),vro=r(R4e," \u2014 "),xR=n(R4e,"A",{href:!0});var Lqr=s(xR);Tro=r(Lqr,"ViTFeatureExtractor"),Lqr.forEach(t),Fro=r(R4e," (Swin model)"),R4e.forEach(t),Cro=i(te),Lh=n(te,"LI",{});var S4e=s(Lh);UY=n(S4e,"STRONG",{});var Bqr=s(UY);Mro=r(Bqr,"van"),Bqr.forEach(t),Ero=r(S4e," \u2014 "),kR=n(S4e,"A",{href:!0});var xqr=s(kR);yro=r(xqr,"ConvNextFeatureExtractor"),xqr.forEach(t),wro=r(S4e," (VAN model)"),S4e.forEach(t),Aro=i(te),Bh=n(te,"LI",{});var P4e=s(Bh);JY=n(P4e,"STRONG",{});var kqr=s(JY);Lro=r(kqr,"vit"),kqr.forEach(t),Bro=r(P4e," \u2014 "),RR=n(P4e,"A",{href:!0});var Rqr=s(RR);xro=r(Rqr,"ViTFeatureExtractor"),Rqr.forEach(t),kro=r(P4e," (ViT model)"),P4e.forEach(t),Rro=i(te),xh=n(te,"LI",{});var $4e=s(xh);YY=n($4e,"STRONG",{});var Sqr=s(YY);Sro=r(Sqr,"vit_mae"),Sqr.forEach(t),Pro=r($4e," \u2014 "),SR=n($4e,"A",{href:!0});var Pqr=s(SR);$ro=r(Pqr,"ViTFeatureExtractor"),Pqr.forEach(t),Iro=r($4e," (ViTMAE model)"),$4e.forEach(t),Nro=i(te),kh=n(te,"LI",{});var I4e=s(kh);KY=n(I4e,"STRONG",{});var $qr=s(KY);Dro=r($qr,"wav2vec2"),$qr.forEach(t),jro=r(I4e," \u2014 "),PR=n(I4e,"A",{href:!0});var Iqr=s(PR);qro=r(Iqr,"Wav2Vec2FeatureExtractor"),Iqr.forEach(t),Gro=r(I4e," (Wav2Vec2 model)"),I4e.forEach(t),te.forEach(t),Oro=i(Dt),m(Rh.$$.fragment,Dt),Xro=i(Dt),ZY=n(Dt,"P",{});var Nqr=s(ZY);Vro=r(Nqr,"Examples:"),Nqr.forEach(t),zro=i(Dt),m(P5.$$.fragment,Dt),Dt.forEach(t),Wro=i(Vs),Sh=n(Vs,"DIV",{class:!0});var SSe=s(Sh);m($5.$$.fragment,SSe),Qro=i(SSe),eK=n(SSe,"P",{});var Dqr=s(eK);Hro=r(Dqr,"Register a new feature extractor for this class."),Dqr.forEach(t),SSe.forEach(t),Vs.forEach(t),Ake=i(c),Hi=n(c,"H2",{class:!0});var PSe=s(Hi);Ph=n(PSe,"A",{id:!0,class:!0,href:!0});var jqr=s(Ph);oK=n(jqr,"SPAN",{});var qqr=s(oK);m(I5.$$.fragment,qqr),qqr.forEach(t),jqr.forEach(t),Uro=i(PSe),rK=n(PSe,"SPAN",{});var Gqr=s(rK);Jro=r(Gqr,"AutoProcessor"),Gqr.forEach(t),PSe.forEach(t),Lke=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(N5.$$.fragment,zs),Yro=i(zs),D5=n(zs,"P",{});var $Se=s(D5);Kro=r($Se,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$R=n($Se,"A",{href:!0});var Oqr=s($R);Zro=r(Oqr,"AutoProcessor.from_pretrained()"),Oqr.forEach(t),eto=r($Se," class method."),$Se.forEach(t),oto=i(zs),j5=n(zs,"P",{});var ISe=s(j5);rto=r(ISe,"This class cannot be instantiated directly using "),tK=n(ISe,"CODE",{});var Xqr=s(tK);tto=r(Xqr,"__init__()"),Xqr.forEach(t),ato=r(ISe," (throws an error)."),ISe.forEach(t),nto=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);m(q5.$$.fragment,jt),sto=i(jt),aK=n(jt,"P",{});var Vqr=s(aK);lto=r(Vqr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Vqr.forEach(t),ito=i(jt),Ui=n(jt,"P",{});var rW=s(Ui);dto=r(rW,"The processor class to instantiate is selected based on the "),nK=n(rW,"CODE",{});var zqr=s(nK);cto=r(zqr,"model_type"),zqr.forEach(t),fto=r(rW,` property of the config object (either
passed as an argument or loaded from `),sK=n(rW,"CODE",{});var Wqr=s(sK);mto=r(Wqr,"pretrained_model_name_or_path"),Wqr.forEach(t),gto=r(rW," if possible):"),rW.forEach(t),hto=i(jt),xe=n(jt,"UL",{});var jo=s(xe);$h=n(jo,"LI",{});var N4e=s($h);lK=n(N4e,"STRONG",{});var Qqr=s(lK);pto=r(Qqr,"clip"),Qqr.forEach(t),_to=r(N4e," \u2014 "),IR=n(N4e,"A",{href:!0});var Hqr=s(IR);uto=r(Hqr,"CLIPProcessor"),Hqr.forEach(t),bto=r(N4e," (CLIP model)"),N4e.forEach(t),vto=i(jo),Ih=n(jo,"LI",{});var D4e=s(Ih);iK=n(D4e,"STRONG",{});var Uqr=s(iK);Tto=r(Uqr,"layoutlmv2"),Uqr.forEach(t),Fto=r(D4e," \u2014 "),NR=n(D4e,"A",{href:!0});var Jqr=s(NR);Cto=r(Jqr,"LayoutLMv2Processor"),Jqr.forEach(t),Mto=r(D4e," (LayoutLMv2 model)"),D4e.forEach(t),Eto=i(jo),Nh=n(jo,"LI",{});var j4e=s(Nh);dK=n(j4e,"STRONG",{});var Yqr=s(dK);yto=r(Yqr,"layoutxlm"),Yqr.forEach(t),wto=r(j4e," \u2014 "),DR=n(j4e,"A",{href:!0});var Kqr=s(DR);Ato=r(Kqr,"LayoutXLMProcessor"),Kqr.forEach(t),Lto=r(j4e," (LayoutXLM model)"),j4e.forEach(t),Bto=i(jo),Dh=n(jo,"LI",{});var q4e=s(Dh);cK=n(q4e,"STRONG",{});var Zqr=s(cK);xto=r(Zqr,"speech_to_text"),Zqr.forEach(t),kto=r(q4e," \u2014 "),jR=n(q4e,"A",{href:!0});var eGr=s(jR);Rto=r(eGr,"Speech2TextProcessor"),eGr.forEach(t),Sto=r(q4e," (Speech2Text model)"),q4e.forEach(t),Pto=i(jo),jh=n(jo,"LI",{});var G4e=s(jh);fK=n(G4e,"STRONG",{});var oGr=s(fK);$to=r(oGr,"speech_to_text_2"),oGr.forEach(t),Ito=r(G4e," \u2014 "),qR=n(G4e,"A",{href:!0});var rGr=s(qR);Nto=r(rGr,"Speech2Text2Processor"),rGr.forEach(t),Dto=r(G4e," (Speech2Text2 model)"),G4e.forEach(t),jto=i(jo),qh=n(jo,"LI",{});var O4e=s(qh);mK=n(O4e,"STRONG",{});var tGr=s(mK);qto=r(tGr,"trocr"),tGr.forEach(t),Gto=r(O4e," \u2014 "),GR=n(O4e,"A",{href:!0});var aGr=s(GR);Oto=r(aGr,"TrOCRProcessor"),aGr.forEach(t),Xto=r(O4e," (TrOCR model)"),O4e.forEach(t),Vto=i(jo),Gh=n(jo,"LI",{});var X4e=s(Gh);gK=n(X4e,"STRONG",{});var nGr=s(gK);zto=r(nGr,"vision-text-dual-encoder"),nGr.forEach(t),Wto=r(X4e," \u2014 "),OR=n(X4e,"A",{href:!0});var sGr=s(OR);Qto=r(sGr,"VisionTextDualEncoderProcessor"),sGr.forEach(t),Hto=r(X4e," (VisionTextDualEncoder model)"),X4e.forEach(t),Uto=i(jo),Oh=n(jo,"LI",{});var V4e=s(Oh);hK=n(V4e,"STRONG",{});var lGr=s(hK);Jto=r(lGr,"wav2vec2"),lGr.forEach(t),Yto=r(V4e," \u2014 "),XR=n(V4e,"A",{href:!0});var iGr=s(XR);Kto=r(iGr,"Wav2Vec2Processor"),iGr.forEach(t),Zto=r(V4e," (Wav2Vec2 model)"),V4e.forEach(t),jo.forEach(t),eao=i(jt),m(Xh.$$.fragment,jt),oao=i(jt),pK=n(jt,"P",{});var dGr=s(pK);rao=r(dGr,"Examples:"),dGr.forEach(t),tao=i(jt),m(G5.$$.fragment,jt),jt.forEach(t),aao=i(zs),Vh=n(zs,"DIV",{class:!0});var NSe=s(Vh);m(O5.$$.fragment,NSe),nao=i(NSe),_K=n(NSe,"P",{});var cGr=s(_K);sao=r(cGr,"Register a new processor for this class."),cGr.forEach(t),NSe.forEach(t),zs.forEach(t),Bke=i(c),Ji=n(c,"H2",{class:!0});var DSe=s(Ji);zh=n(DSe,"A",{id:!0,class:!0,href:!0});var fGr=s(zh);uK=n(fGr,"SPAN",{});var mGr=s(uK);m(X5.$$.fragment,mGr),mGr.forEach(t),fGr.forEach(t),lao=i(DSe),bK=n(DSe,"SPAN",{});var gGr=s(bK);iao=r(gGr,"AutoModel"),gGr.forEach(t),DSe.forEach(t),xke=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(V5.$$.fragment,Ws),dao=i(Ws),Yi=n(Ws,"P",{});var tW=s(Yi);cao=r(tW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vK=n(tW,"CODE",{});var hGr=s(vK);fao=r(hGr,"from_pretrained()"),hGr.forEach(t),mao=r(tW,"class method or the "),TK=n(tW,"CODE",{});var pGr=s(TK);gao=r(pGr,"from_config()"),pGr.forEach(t),hao=r(tW,`class
method.`),tW.forEach(t),pao=i(Ws),z5=n(Ws,"P",{});var jSe=s(z5);_ao=r(jSe,"This class cannot be instantiated directly using "),FK=n(jSe,"CODE",{});var _Gr=s(FK);uao=r(_Gr,"__init__()"),_Gr.forEach(t),bao=r(jSe," (throws an error)."),jSe.forEach(t),vao=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);m(W5.$$.fragment,Qs),Tao=i(Qs),CK=n(Qs,"P",{});var uGr=s(CK);Fao=r(uGr,"Instantiates one of the base model classes of the library from a configuration."),uGr.forEach(t),Cao=i(Qs),Ki=n(Qs,"P",{});var aW=s(Ki);Mao=r(aW,`Note:
Loading a model from its configuration file does `),MK=n(aW,"STRONG",{});var bGr=s(MK);Eao=r(bGr,"not"),bGr.forEach(t),yao=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=n(aW,"CODE",{});var vGr=s(EK);wao=r(vGr,"from_pretrained()"),vGr.forEach(t),Aao=r(aW,"to load the model weights."),aW.forEach(t),Lao=i(Qs),yK=n(Qs,"P",{});var TGr=s(yK);Bao=r(TGr,"Examples:"),TGr.forEach(t),xao=i(Qs),m(Q5.$$.fragment,Qs),Qs.forEach(t),kao=i(Ws),Ne=n(Ws,"DIV",{class:!0});var qt=s(Ne);m(H5.$$.fragment,qt),Rao=i(qt),wK=n(qt,"P",{});var FGr=s(wK);Sao=r(FGr,"Instantiate one of the base model classes of the library from a pretrained model."),FGr.forEach(t),Pao=i(qt),Va=n(qt,"P",{});var g3=s(Va);$ao=r(g3,"The model class to instantiate is selected based on the "),AK=n(g3,"CODE",{});var CGr=s(AK);Iao=r(CGr,"model_type"),CGr.forEach(t),Nao=r(g3,` property of the config object (either
passed as an argument or loaded from `),LK=n(g3,"CODE",{});var MGr=s(LK);Dao=r(MGr,"pretrained_model_name_or_path"),MGr.forEach(t),jao=r(g3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BK=n(g3,"CODE",{});var EGr=s(BK);qao=r(EGr,"pretrained_model_name_or_path"),EGr.forEach(t),Gao=r(g3,":"),g3.forEach(t),Oao=i(qt),F=n(qt,"UL",{});var C=s(F);Wh=n(C,"LI",{});var z4e=s(Wh);xK=n(z4e,"STRONG",{});var yGr=s(xK);Xao=r(yGr,"albert"),yGr.forEach(t),Vao=r(z4e," \u2014 "),VR=n(z4e,"A",{href:!0});var wGr=s(VR);zao=r(wGr,"AlbertModel"),wGr.forEach(t),Wao=r(z4e," (ALBERT model)"),z4e.forEach(t),Qao=i(C),Qh=n(C,"LI",{});var W4e=s(Qh);kK=n(W4e,"STRONG",{});var AGr=s(kK);Hao=r(AGr,"bart"),AGr.forEach(t),Uao=r(W4e," \u2014 "),zR=n(W4e,"A",{href:!0});var LGr=s(zR);Jao=r(LGr,"BartModel"),LGr.forEach(t),Yao=r(W4e," (BART model)"),W4e.forEach(t),Kao=i(C),Hh=n(C,"LI",{});var Q4e=s(Hh);RK=n(Q4e,"STRONG",{});var BGr=s(RK);Zao=r(BGr,"beit"),BGr.forEach(t),eno=r(Q4e," \u2014 "),WR=n(Q4e,"A",{href:!0});var xGr=s(WR);ono=r(xGr,"BeitModel"),xGr.forEach(t),rno=r(Q4e," (BEiT model)"),Q4e.forEach(t),tno=i(C),Uh=n(C,"LI",{});var H4e=s(Uh);SK=n(H4e,"STRONG",{});var kGr=s(SK);ano=r(kGr,"bert"),kGr.forEach(t),nno=r(H4e," \u2014 "),QR=n(H4e,"A",{href:!0});var RGr=s(QR);sno=r(RGr,"BertModel"),RGr.forEach(t),lno=r(H4e," (BERT model)"),H4e.forEach(t),ino=i(C),Jh=n(C,"LI",{});var U4e=s(Jh);PK=n(U4e,"STRONG",{});var SGr=s(PK);dno=r(SGr,"bert-generation"),SGr.forEach(t),cno=r(U4e," \u2014 "),HR=n(U4e,"A",{href:!0});var PGr=s(HR);fno=r(PGr,"BertGenerationEncoder"),PGr.forEach(t),mno=r(U4e," (Bert Generation model)"),U4e.forEach(t),gno=i(C),Yh=n(C,"LI",{});var J4e=s(Yh);$K=n(J4e,"STRONG",{});var $Gr=s($K);hno=r($Gr,"big_bird"),$Gr.forEach(t),pno=r(J4e," \u2014 "),UR=n(J4e,"A",{href:!0});var IGr=s(UR);_no=r(IGr,"BigBirdModel"),IGr.forEach(t),uno=r(J4e," (BigBird model)"),J4e.forEach(t),bno=i(C),Kh=n(C,"LI",{});var Y4e=s(Kh);IK=n(Y4e,"STRONG",{});var NGr=s(IK);vno=r(NGr,"bigbird_pegasus"),NGr.forEach(t),Tno=r(Y4e," \u2014 "),JR=n(Y4e,"A",{href:!0});var DGr=s(JR);Fno=r(DGr,"BigBirdPegasusModel"),DGr.forEach(t),Cno=r(Y4e," (BigBirdPegasus model)"),Y4e.forEach(t),Mno=i(C),Zh=n(C,"LI",{});var K4e=s(Zh);NK=n(K4e,"STRONG",{});var jGr=s(NK);Eno=r(jGr,"blenderbot"),jGr.forEach(t),yno=r(K4e," \u2014 "),YR=n(K4e,"A",{href:!0});var qGr=s(YR);wno=r(qGr,"BlenderbotModel"),qGr.forEach(t),Ano=r(K4e," (Blenderbot model)"),K4e.forEach(t),Lno=i(C),ep=n(C,"LI",{});var Z4e=s(ep);DK=n(Z4e,"STRONG",{});var GGr=s(DK);Bno=r(GGr,"blenderbot-small"),GGr.forEach(t),xno=r(Z4e," \u2014 "),KR=n(Z4e,"A",{href:!0});var OGr=s(KR);kno=r(OGr,"BlenderbotSmallModel"),OGr.forEach(t),Rno=r(Z4e," (BlenderbotSmall model)"),Z4e.forEach(t),Sno=i(C),op=n(C,"LI",{});var eEe=s(op);jK=n(eEe,"STRONG",{});var XGr=s(jK);Pno=r(XGr,"camembert"),XGr.forEach(t),$no=r(eEe," \u2014 "),ZR=n(eEe,"A",{href:!0});var VGr=s(ZR);Ino=r(VGr,"CamembertModel"),VGr.forEach(t),Nno=r(eEe," (CamemBERT model)"),eEe.forEach(t),Dno=i(C),rp=n(C,"LI",{});var oEe=s(rp);qK=n(oEe,"STRONG",{});var zGr=s(qK);jno=r(zGr,"canine"),zGr.forEach(t),qno=r(oEe," \u2014 "),eS=n(oEe,"A",{href:!0});var WGr=s(eS);Gno=r(WGr,"CanineModel"),WGr.forEach(t),Ono=r(oEe," (Canine model)"),oEe.forEach(t),Xno=i(C),tp=n(C,"LI",{});var rEe=s(tp);GK=n(rEe,"STRONG",{});var QGr=s(GK);Vno=r(QGr,"clip"),QGr.forEach(t),zno=r(rEe," \u2014 "),oS=n(rEe,"A",{href:!0});var HGr=s(oS);Wno=r(HGr,"CLIPModel"),HGr.forEach(t),Qno=r(rEe," (CLIP model)"),rEe.forEach(t),Hno=i(C),ap=n(C,"LI",{});var tEe=s(ap);OK=n(tEe,"STRONG",{});var UGr=s(OK);Uno=r(UGr,"convbert"),UGr.forEach(t),Jno=r(tEe," \u2014 "),rS=n(tEe,"A",{href:!0});var JGr=s(rS);Yno=r(JGr,"ConvBertModel"),JGr.forEach(t),Kno=r(tEe," (ConvBERT model)"),tEe.forEach(t),Zno=i(C),np=n(C,"LI",{});var aEe=s(np);XK=n(aEe,"STRONG",{});var YGr=s(XK);eso=r(YGr,"convnext"),YGr.forEach(t),oso=r(aEe," \u2014 "),tS=n(aEe,"A",{href:!0});var KGr=s(tS);rso=r(KGr,"ConvNextModel"),KGr.forEach(t),tso=r(aEe," (ConvNext model)"),aEe.forEach(t),aso=i(C),sp=n(C,"LI",{});var nEe=s(sp);VK=n(nEe,"STRONG",{});var ZGr=s(VK);nso=r(ZGr,"ctrl"),ZGr.forEach(t),sso=r(nEe," \u2014 "),aS=n(nEe,"A",{href:!0});var eOr=s(aS);lso=r(eOr,"CTRLModel"),eOr.forEach(t),iso=r(nEe," (CTRL model)"),nEe.forEach(t),dso=i(C),lp=n(C,"LI",{});var sEe=s(lp);zK=n(sEe,"STRONG",{});var oOr=s(zK);cso=r(oOr,"data2vec-audio"),oOr.forEach(t),fso=r(sEe," \u2014 "),nS=n(sEe,"A",{href:!0});var rOr=s(nS);mso=r(rOr,"Data2VecAudioModel"),rOr.forEach(t),gso=r(sEe," (Data2VecAudio model)"),sEe.forEach(t),hso=i(C),ip=n(C,"LI",{});var lEe=s(ip);WK=n(lEe,"STRONG",{});var tOr=s(WK);pso=r(tOr,"data2vec-text"),tOr.forEach(t),_so=r(lEe," \u2014 "),sS=n(lEe,"A",{href:!0});var aOr=s(sS);uso=r(aOr,"Data2VecTextModel"),aOr.forEach(t),bso=r(lEe," (Data2VecText model)"),lEe.forEach(t),vso=i(C),dp=n(C,"LI",{});var iEe=s(dp);QK=n(iEe,"STRONG",{});var nOr=s(QK);Tso=r(nOr,"deberta"),nOr.forEach(t),Fso=r(iEe," \u2014 "),lS=n(iEe,"A",{href:!0});var sOr=s(lS);Cso=r(sOr,"DebertaModel"),sOr.forEach(t),Mso=r(iEe," (DeBERTa model)"),iEe.forEach(t),Eso=i(C),cp=n(C,"LI",{});var dEe=s(cp);HK=n(dEe,"STRONG",{});var lOr=s(HK);yso=r(lOr,"deberta-v2"),lOr.forEach(t),wso=r(dEe," \u2014 "),iS=n(dEe,"A",{href:!0});var iOr=s(iS);Aso=r(iOr,"DebertaV2Model"),iOr.forEach(t),Lso=r(dEe," (DeBERTa-v2 model)"),dEe.forEach(t),Bso=i(C),fp=n(C,"LI",{});var cEe=s(fp);UK=n(cEe,"STRONG",{});var dOr=s(UK);xso=r(dOr,"decision_transformer"),dOr.forEach(t),kso=r(cEe," \u2014 "),dS=n(cEe,"A",{href:!0});var cOr=s(dS);Rso=r(cOr,"DecisionTransformerModel"),cOr.forEach(t),Sso=r(cEe," (Decision Transformer model)"),cEe.forEach(t),Pso=i(C),mp=n(C,"LI",{});var fEe=s(mp);JK=n(fEe,"STRONG",{});var fOr=s(JK);$so=r(fOr,"deit"),fOr.forEach(t),Iso=r(fEe," \u2014 "),cS=n(fEe,"A",{href:!0});var mOr=s(cS);Nso=r(mOr,"DeiTModel"),mOr.forEach(t),Dso=r(fEe," (DeiT model)"),fEe.forEach(t),jso=i(C),gp=n(C,"LI",{});var mEe=s(gp);YK=n(mEe,"STRONG",{});var gOr=s(YK);qso=r(gOr,"detr"),gOr.forEach(t),Gso=r(mEe," \u2014 "),fS=n(mEe,"A",{href:!0});var hOr=s(fS);Oso=r(hOr,"DetrModel"),hOr.forEach(t),Xso=r(mEe," (DETR model)"),mEe.forEach(t),Vso=i(C),hp=n(C,"LI",{});var gEe=s(hp);KK=n(gEe,"STRONG",{});var pOr=s(KK);zso=r(pOr,"distilbert"),pOr.forEach(t),Wso=r(gEe," \u2014 "),mS=n(gEe,"A",{href:!0});var _Or=s(mS);Qso=r(_Or,"DistilBertModel"),_Or.forEach(t),Hso=r(gEe," (DistilBERT model)"),gEe.forEach(t),Uso=i(C),pp=n(C,"LI",{});var hEe=s(pp);ZK=n(hEe,"STRONG",{});var uOr=s(ZK);Jso=r(uOr,"dpr"),uOr.forEach(t),Yso=r(hEe," \u2014 "),gS=n(hEe,"A",{href:!0});var bOr=s(gS);Kso=r(bOr,"DPRQuestionEncoder"),bOr.forEach(t),Zso=r(hEe," (DPR model)"),hEe.forEach(t),elo=i(C),_p=n(C,"LI",{});var pEe=s(_p);eZ=n(pEe,"STRONG",{});var vOr=s(eZ);olo=r(vOr,"electra"),vOr.forEach(t),rlo=r(pEe," \u2014 "),hS=n(pEe,"A",{href:!0});var TOr=s(hS);tlo=r(TOr,"ElectraModel"),TOr.forEach(t),alo=r(pEe," (ELECTRA model)"),pEe.forEach(t),nlo=i(C),up=n(C,"LI",{});var _Ee=s(up);oZ=n(_Ee,"STRONG",{});var FOr=s(oZ);slo=r(FOr,"flaubert"),FOr.forEach(t),llo=r(_Ee," \u2014 "),pS=n(_Ee,"A",{href:!0});var COr=s(pS);ilo=r(COr,"FlaubertModel"),COr.forEach(t),dlo=r(_Ee," (FlauBERT model)"),_Ee.forEach(t),clo=i(C),bp=n(C,"LI",{});var uEe=s(bp);rZ=n(uEe,"STRONG",{});var MOr=s(rZ);flo=r(MOr,"fnet"),MOr.forEach(t),mlo=r(uEe," \u2014 "),_S=n(uEe,"A",{href:!0});var EOr=s(_S);glo=r(EOr,"FNetModel"),EOr.forEach(t),hlo=r(uEe," (FNet model)"),uEe.forEach(t),plo=i(C),vp=n(C,"LI",{});var bEe=s(vp);tZ=n(bEe,"STRONG",{});var yOr=s(tZ);_lo=r(yOr,"fsmt"),yOr.forEach(t),ulo=r(bEe," \u2014 "),uS=n(bEe,"A",{href:!0});var wOr=s(uS);blo=r(wOr,"FSMTModel"),wOr.forEach(t),vlo=r(bEe," (FairSeq Machine-Translation model)"),bEe.forEach(t),Tlo=i(C),js=n(C,"LI",{});var Z8=s(js);aZ=n(Z8,"STRONG",{});var AOr=s(aZ);Flo=r(AOr,"funnel"),AOr.forEach(t),Clo=r(Z8," \u2014 "),bS=n(Z8,"A",{href:!0});var LOr=s(bS);Mlo=r(LOr,"FunnelModel"),LOr.forEach(t),Elo=r(Z8," or "),vS=n(Z8,"A",{href:!0});var BOr=s(vS);ylo=r(BOr,"FunnelBaseModel"),BOr.forEach(t),wlo=r(Z8," (Funnel Transformer model)"),Z8.forEach(t),Alo=i(C),Tp=n(C,"LI",{});var vEe=s(Tp);nZ=n(vEe,"STRONG",{});var xOr=s(nZ);Llo=r(xOr,"glpn"),xOr.forEach(t),Blo=r(vEe," \u2014 "),TS=n(vEe,"A",{href:!0});var kOr=s(TS);xlo=r(kOr,"GLPNModel"),kOr.forEach(t),klo=r(vEe," (GLPN model)"),vEe.forEach(t),Rlo=i(C),Fp=n(C,"LI",{});var TEe=s(Fp);sZ=n(TEe,"STRONG",{});var ROr=s(sZ);Slo=r(ROr,"gpt2"),ROr.forEach(t),Plo=r(TEe," \u2014 "),FS=n(TEe,"A",{href:!0});var SOr=s(FS);$lo=r(SOr,"GPT2Model"),SOr.forEach(t),Ilo=r(TEe," (OpenAI GPT-2 model)"),TEe.forEach(t),Nlo=i(C),Cp=n(C,"LI",{});var FEe=s(Cp);lZ=n(FEe,"STRONG",{});var POr=s(lZ);Dlo=r(POr,"gpt_neo"),POr.forEach(t),jlo=r(FEe," \u2014 "),CS=n(FEe,"A",{href:!0});var $Or=s(CS);qlo=r($Or,"GPTNeoModel"),$Or.forEach(t),Glo=r(FEe," (GPT Neo model)"),FEe.forEach(t),Olo=i(C),Mp=n(C,"LI",{});var CEe=s(Mp);iZ=n(CEe,"STRONG",{});var IOr=s(iZ);Xlo=r(IOr,"gptj"),IOr.forEach(t),Vlo=r(CEe," \u2014 "),MS=n(CEe,"A",{href:!0});var NOr=s(MS);zlo=r(NOr,"GPTJModel"),NOr.forEach(t),Wlo=r(CEe," (GPT-J model)"),CEe.forEach(t),Qlo=i(C),Ep=n(C,"LI",{});var MEe=s(Ep);dZ=n(MEe,"STRONG",{});var DOr=s(dZ);Hlo=r(DOr,"hubert"),DOr.forEach(t),Ulo=r(MEe," \u2014 "),ES=n(MEe,"A",{href:!0});var jOr=s(ES);Jlo=r(jOr,"HubertModel"),jOr.forEach(t),Ylo=r(MEe," (Hubert model)"),MEe.forEach(t),Klo=i(C),yp=n(C,"LI",{});var EEe=s(yp);cZ=n(EEe,"STRONG",{});var qOr=s(cZ);Zlo=r(qOr,"ibert"),qOr.forEach(t),eio=r(EEe," \u2014 "),yS=n(EEe,"A",{href:!0});var GOr=s(yS);oio=r(GOr,"IBertModel"),GOr.forEach(t),rio=r(EEe," (I-BERT model)"),EEe.forEach(t),tio=i(C),wp=n(C,"LI",{});var yEe=s(wp);fZ=n(yEe,"STRONG",{});var OOr=s(fZ);aio=r(OOr,"imagegpt"),OOr.forEach(t),nio=r(yEe," \u2014 "),wS=n(yEe,"A",{href:!0});var XOr=s(wS);sio=r(XOr,"ImageGPTModel"),XOr.forEach(t),lio=r(yEe," (ImageGPT model)"),yEe.forEach(t),iio=i(C),Ap=n(C,"LI",{});var wEe=s(Ap);mZ=n(wEe,"STRONG",{});var VOr=s(mZ);dio=r(VOr,"layoutlm"),VOr.forEach(t),cio=r(wEe," \u2014 "),AS=n(wEe,"A",{href:!0});var zOr=s(AS);fio=r(zOr,"LayoutLMModel"),zOr.forEach(t),mio=r(wEe," (LayoutLM model)"),wEe.forEach(t),gio=i(C),Lp=n(C,"LI",{});var AEe=s(Lp);gZ=n(AEe,"STRONG",{});var WOr=s(gZ);hio=r(WOr,"layoutlmv2"),WOr.forEach(t),pio=r(AEe," \u2014 "),LS=n(AEe,"A",{href:!0});var QOr=s(LS);_io=r(QOr,"LayoutLMv2Model"),QOr.forEach(t),uio=r(AEe," (LayoutLMv2 model)"),AEe.forEach(t),bio=i(C),Bp=n(C,"LI",{});var LEe=s(Bp);hZ=n(LEe,"STRONG",{});var HOr=s(hZ);vio=r(HOr,"led"),HOr.forEach(t),Tio=r(LEe," \u2014 "),BS=n(LEe,"A",{href:!0});var UOr=s(BS);Fio=r(UOr,"LEDModel"),UOr.forEach(t),Cio=r(LEe," (LED model)"),LEe.forEach(t),Mio=i(C),xp=n(C,"LI",{});var BEe=s(xp);pZ=n(BEe,"STRONG",{});var JOr=s(pZ);Eio=r(JOr,"longformer"),JOr.forEach(t),yio=r(BEe," \u2014 "),xS=n(BEe,"A",{href:!0});var YOr=s(xS);wio=r(YOr,"LongformerModel"),YOr.forEach(t),Aio=r(BEe," (Longformer model)"),BEe.forEach(t),Lio=i(C),kp=n(C,"LI",{});var xEe=s(kp);_Z=n(xEe,"STRONG",{});var KOr=s(_Z);Bio=r(KOr,"luke"),KOr.forEach(t),xio=r(xEe," \u2014 "),kS=n(xEe,"A",{href:!0});var ZOr=s(kS);kio=r(ZOr,"LukeModel"),ZOr.forEach(t),Rio=r(xEe," (LUKE model)"),xEe.forEach(t),Sio=i(C),Rp=n(C,"LI",{});var kEe=s(Rp);uZ=n(kEe,"STRONG",{});var eXr=s(uZ);Pio=r(eXr,"lxmert"),eXr.forEach(t),$io=r(kEe," \u2014 "),RS=n(kEe,"A",{href:!0});var oXr=s(RS);Iio=r(oXr,"LxmertModel"),oXr.forEach(t),Nio=r(kEe," (LXMERT model)"),kEe.forEach(t),Dio=i(C),Sp=n(C,"LI",{});var REe=s(Sp);bZ=n(REe,"STRONG",{});var rXr=s(bZ);jio=r(rXr,"m2m_100"),rXr.forEach(t),qio=r(REe," \u2014 "),SS=n(REe,"A",{href:!0});var tXr=s(SS);Gio=r(tXr,"M2M100Model"),tXr.forEach(t),Oio=r(REe," (M2M100 model)"),REe.forEach(t),Xio=i(C),Pp=n(C,"LI",{});var SEe=s(Pp);vZ=n(SEe,"STRONG",{});var aXr=s(vZ);Vio=r(aXr,"marian"),aXr.forEach(t),zio=r(SEe," \u2014 "),PS=n(SEe,"A",{href:!0});var nXr=s(PS);Wio=r(nXr,"MarianModel"),nXr.forEach(t),Qio=r(SEe," (Marian model)"),SEe.forEach(t),Hio=i(C),$p=n(C,"LI",{});var PEe=s($p);TZ=n(PEe,"STRONG",{});var sXr=s(TZ);Uio=r(sXr,"maskformer"),sXr.forEach(t),Jio=r(PEe," \u2014 "),$S=n(PEe,"A",{href:!0});var lXr=s($S);Yio=r(lXr,"MaskFormerModel"),lXr.forEach(t),Kio=r(PEe," (MaskFormer model)"),PEe.forEach(t),Zio=i(C),Ip=n(C,"LI",{});var $Ee=s(Ip);FZ=n($Ee,"STRONG",{});var iXr=s(FZ);edo=r(iXr,"mbart"),iXr.forEach(t),odo=r($Ee," \u2014 "),IS=n($Ee,"A",{href:!0});var dXr=s(IS);rdo=r(dXr,"MBartModel"),dXr.forEach(t),tdo=r($Ee," (mBART model)"),$Ee.forEach(t),ado=i(C),Np=n(C,"LI",{});var IEe=s(Np);CZ=n(IEe,"STRONG",{});var cXr=s(CZ);ndo=r(cXr,"megatron-bert"),cXr.forEach(t),sdo=r(IEe," \u2014 "),NS=n(IEe,"A",{href:!0});var fXr=s(NS);ldo=r(fXr,"MegatronBertModel"),fXr.forEach(t),ido=r(IEe," (MegatronBert model)"),IEe.forEach(t),ddo=i(C),Dp=n(C,"LI",{});var NEe=s(Dp);MZ=n(NEe,"STRONG",{});var mXr=s(MZ);cdo=r(mXr,"mobilebert"),mXr.forEach(t),fdo=r(NEe," \u2014 "),DS=n(NEe,"A",{href:!0});var gXr=s(DS);mdo=r(gXr,"MobileBertModel"),gXr.forEach(t),gdo=r(NEe," (MobileBERT model)"),NEe.forEach(t),hdo=i(C),jp=n(C,"LI",{});var DEe=s(jp);EZ=n(DEe,"STRONG",{});var hXr=s(EZ);pdo=r(hXr,"mpnet"),hXr.forEach(t),_do=r(DEe," \u2014 "),jS=n(DEe,"A",{href:!0});var pXr=s(jS);udo=r(pXr,"MPNetModel"),pXr.forEach(t),bdo=r(DEe," (MPNet model)"),DEe.forEach(t),vdo=i(C),qp=n(C,"LI",{});var jEe=s(qp);yZ=n(jEe,"STRONG",{});var _Xr=s(yZ);Tdo=r(_Xr,"mt5"),_Xr.forEach(t),Fdo=r(jEe," \u2014 "),qS=n(jEe,"A",{href:!0});var uXr=s(qS);Cdo=r(uXr,"MT5Model"),uXr.forEach(t),Mdo=r(jEe," (mT5 model)"),jEe.forEach(t),Edo=i(C),Gp=n(C,"LI",{});var qEe=s(Gp);wZ=n(qEe,"STRONG",{});var bXr=s(wZ);ydo=r(bXr,"nystromformer"),bXr.forEach(t),wdo=r(qEe," \u2014 "),GS=n(qEe,"A",{href:!0});var vXr=s(GS);Ado=r(vXr,"NystromformerModel"),vXr.forEach(t),Ldo=r(qEe," (Nystromformer model)"),qEe.forEach(t),Bdo=i(C),Op=n(C,"LI",{});var GEe=s(Op);AZ=n(GEe,"STRONG",{});var TXr=s(AZ);xdo=r(TXr,"openai-gpt"),TXr.forEach(t),kdo=r(GEe," \u2014 "),OS=n(GEe,"A",{href:!0});var FXr=s(OS);Rdo=r(FXr,"OpenAIGPTModel"),FXr.forEach(t),Sdo=r(GEe," (OpenAI GPT model)"),GEe.forEach(t),Pdo=i(C),Xp=n(C,"LI",{});var OEe=s(Xp);LZ=n(OEe,"STRONG",{});var CXr=s(LZ);$do=r(CXr,"pegasus"),CXr.forEach(t),Ido=r(OEe," \u2014 "),XS=n(OEe,"A",{href:!0});var MXr=s(XS);Ndo=r(MXr,"PegasusModel"),MXr.forEach(t),Ddo=r(OEe," (Pegasus model)"),OEe.forEach(t),jdo=i(C),Vp=n(C,"LI",{});var XEe=s(Vp);BZ=n(XEe,"STRONG",{});var EXr=s(BZ);qdo=r(EXr,"perceiver"),EXr.forEach(t),Gdo=r(XEe," \u2014 "),VS=n(XEe,"A",{href:!0});var yXr=s(VS);Odo=r(yXr,"PerceiverModel"),yXr.forEach(t),Xdo=r(XEe," (Perceiver model)"),XEe.forEach(t),Vdo=i(C),zp=n(C,"LI",{});var VEe=s(zp);xZ=n(VEe,"STRONG",{});var wXr=s(xZ);zdo=r(wXr,"plbart"),wXr.forEach(t),Wdo=r(VEe," \u2014 "),zS=n(VEe,"A",{href:!0});var AXr=s(zS);Qdo=r(AXr,"PLBartModel"),AXr.forEach(t),Hdo=r(VEe," (PLBart model)"),VEe.forEach(t),Udo=i(C),Wp=n(C,"LI",{});var zEe=s(Wp);kZ=n(zEe,"STRONG",{});var LXr=s(kZ);Jdo=r(LXr,"poolformer"),LXr.forEach(t),Ydo=r(zEe," \u2014 "),WS=n(zEe,"A",{href:!0});var BXr=s(WS);Kdo=r(BXr,"PoolFormerModel"),BXr.forEach(t),Zdo=r(zEe," (PoolFormer model)"),zEe.forEach(t),eco=i(C),Qp=n(C,"LI",{});var WEe=s(Qp);RZ=n(WEe,"STRONG",{});var xXr=s(RZ);oco=r(xXr,"prophetnet"),xXr.forEach(t),rco=r(WEe," \u2014 "),QS=n(WEe,"A",{href:!0});var kXr=s(QS);tco=r(kXr,"ProphetNetModel"),kXr.forEach(t),aco=r(WEe," (ProphetNet model)"),WEe.forEach(t),nco=i(C),Hp=n(C,"LI",{});var QEe=s(Hp);SZ=n(QEe,"STRONG",{});var RXr=s(SZ);sco=r(RXr,"qdqbert"),RXr.forEach(t),lco=r(QEe," \u2014 "),HS=n(QEe,"A",{href:!0});var SXr=s(HS);ico=r(SXr,"QDQBertModel"),SXr.forEach(t),dco=r(QEe," (QDQBert model)"),QEe.forEach(t),cco=i(C),Up=n(C,"LI",{});var HEe=s(Up);PZ=n(HEe,"STRONG",{});var PXr=s(PZ);fco=r(PXr,"reformer"),PXr.forEach(t),mco=r(HEe," \u2014 "),US=n(HEe,"A",{href:!0});var $Xr=s(US);gco=r($Xr,"ReformerModel"),$Xr.forEach(t),hco=r(HEe," (Reformer model)"),HEe.forEach(t),pco=i(C),Jp=n(C,"LI",{});var UEe=s(Jp);$Z=n(UEe,"STRONG",{});var IXr=s($Z);_co=r(IXr,"rembert"),IXr.forEach(t),uco=r(UEe," \u2014 "),JS=n(UEe,"A",{href:!0});var NXr=s(JS);bco=r(NXr,"RemBertModel"),NXr.forEach(t),vco=r(UEe," (RemBERT model)"),UEe.forEach(t),Tco=i(C),Yp=n(C,"LI",{});var JEe=s(Yp);IZ=n(JEe,"STRONG",{});var DXr=s(IZ);Fco=r(DXr,"resnet"),DXr.forEach(t),Cco=r(JEe," \u2014 "),YS=n(JEe,"A",{href:!0});var jXr=s(YS);Mco=r(jXr,"ResNetModel"),jXr.forEach(t),Eco=r(JEe," (ResNet model)"),JEe.forEach(t),yco=i(C),Kp=n(C,"LI",{});var YEe=s(Kp);NZ=n(YEe,"STRONG",{});var qXr=s(NZ);wco=r(qXr,"resnetd"),qXr.forEach(t),Aco=r(YEe," \u2014 "),KS=n(YEe,"A",{href:!0});var GXr=s(KS);Lco=r(GXr,"ResNetDModel"),GXr.forEach(t),Bco=r(YEe," (ResNet-D model)"),YEe.forEach(t),xco=i(C),Zp=n(C,"LI",{});var KEe=s(Zp);DZ=n(KEe,"STRONG",{});var OXr=s(DZ);kco=r(OXr,"retribert"),OXr.forEach(t),Rco=r(KEe," \u2014 "),ZS=n(KEe,"A",{href:!0});var XXr=s(ZS);Sco=r(XXr,"RetriBertModel"),XXr.forEach(t),Pco=r(KEe," (RetriBERT model)"),KEe.forEach(t),$co=i(C),e_=n(C,"LI",{});var ZEe=s(e_);jZ=n(ZEe,"STRONG",{});var VXr=s(jZ);Ico=r(VXr,"roberta"),VXr.forEach(t),Nco=r(ZEe," \u2014 "),eP=n(ZEe,"A",{href:!0});var zXr=s(eP);Dco=r(zXr,"RobertaModel"),zXr.forEach(t),jco=r(ZEe," (RoBERTa model)"),ZEe.forEach(t),qco=i(C),o_=n(C,"LI",{});var e3e=s(o_);qZ=n(e3e,"STRONG",{});var WXr=s(qZ);Gco=r(WXr,"roformer"),WXr.forEach(t),Oco=r(e3e," \u2014 "),oP=n(e3e,"A",{href:!0});var QXr=s(oP);Xco=r(QXr,"RoFormerModel"),QXr.forEach(t),Vco=r(e3e," (RoFormer model)"),e3e.forEach(t),zco=i(C),r_=n(C,"LI",{});var o3e=s(r_);GZ=n(o3e,"STRONG",{});var HXr=s(GZ);Wco=r(HXr,"segformer"),HXr.forEach(t),Qco=r(o3e," \u2014 "),rP=n(o3e,"A",{href:!0});var UXr=s(rP);Hco=r(UXr,"SegformerModel"),UXr.forEach(t),Uco=r(o3e," (SegFormer model)"),o3e.forEach(t),Jco=i(C),t_=n(C,"LI",{});var r3e=s(t_);OZ=n(r3e,"STRONG",{});var JXr=s(OZ);Yco=r(JXr,"sew"),JXr.forEach(t),Kco=r(r3e," \u2014 "),tP=n(r3e,"A",{href:!0});var YXr=s(tP);Zco=r(YXr,"SEWModel"),YXr.forEach(t),efo=r(r3e," (SEW model)"),r3e.forEach(t),ofo=i(C),a_=n(C,"LI",{});var t3e=s(a_);XZ=n(t3e,"STRONG",{});var KXr=s(XZ);rfo=r(KXr,"sew-d"),KXr.forEach(t),tfo=r(t3e," \u2014 "),aP=n(t3e,"A",{href:!0});var ZXr=s(aP);afo=r(ZXr,"SEWDModel"),ZXr.forEach(t),nfo=r(t3e," (SEW-D model)"),t3e.forEach(t),sfo=i(C),n_=n(C,"LI",{});var a3e=s(n_);VZ=n(a3e,"STRONG",{});var eVr=s(VZ);lfo=r(eVr,"speech_to_text"),eVr.forEach(t),ifo=r(a3e," \u2014 "),nP=n(a3e,"A",{href:!0});var oVr=s(nP);dfo=r(oVr,"Speech2TextModel"),oVr.forEach(t),cfo=r(a3e," (Speech2Text model)"),a3e.forEach(t),ffo=i(C),s_=n(C,"LI",{});var n3e=s(s_);zZ=n(n3e,"STRONG",{});var rVr=s(zZ);mfo=r(rVr,"splinter"),rVr.forEach(t),gfo=r(n3e," \u2014 "),sP=n(n3e,"A",{href:!0});var tVr=s(sP);hfo=r(tVr,"SplinterModel"),tVr.forEach(t),pfo=r(n3e," (Splinter model)"),n3e.forEach(t),_fo=i(C),l_=n(C,"LI",{});var s3e=s(l_);WZ=n(s3e,"STRONG",{});var aVr=s(WZ);ufo=r(aVr,"squeezebert"),aVr.forEach(t),bfo=r(s3e," \u2014 "),lP=n(s3e,"A",{href:!0});var nVr=s(lP);vfo=r(nVr,"SqueezeBertModel"),nVr.forEach(t),Tfo=r(s3e," (SqueezeBERT model)"),s3e.forEach(t),Ffo=i(C),i_=n(C,"LI",{});var l3e=s(i_);QZ=n(l3e,"STRONG",{});var sVr=s(QZ);Cfo=r(sVr,"swin"),sVr.forEach(t),Mfo=r(l3e," \u2014 "),iP=n(l3e,"A",{href:!0});var lVr=s(iP);Efo=r(lVr,"SwinModel"),lVr.forEach(t),yfo=r(l3e," (Swin model)"),l3e.forEach(t),wfo=i(C),d_=n(C,"LI",{});var i3e=s(d_);HZ=n(i3e,"STRONG",{});var iVr=s(HZ);Afo=r(iVr,"t5"),iVr.forEach(t),Lfo=r(i3e," \u2014 "),dP=n(i3e,"A",{href:!0});var dVr=s(dP);Bfo=r(dVr,"T5Model"),dVr.forEach(t),xfo=r(i3e," (T5 model)"),i3e.forEach(t),kfo=i(C),c_=n(C,"LI",{});var d3e=s(c_);UZ=n(d3e,"STRONG",{});var cVr=s(UZ);Rfo=r(cVr,"tapas"),cVr.forEach(t),Sfo=r(d3e," \u2014 "),cP=n(d3e,"A",{href:!0});var fVr=s(cP);Pfo=r(fVr,"TapasModel"),fVr.forEach(t),$fo=r(d3e," (TAPAS model)"),d3e.forEach(t),Ifo=i(C),f_=n(C,"LI",{});var c3e=s(f_);JZ=n(c3e,"STRONG",{});var mVr=s(JZ);Nfo=r(mVr,"transfo-xl"),mVr.forEach(t),Dfo=r(c3e," \u2014 "),fP=n(c3e,"A",{href:!0});var gVr=s(fP);jfo=r(gVr,"TransfoXLModel"),gVr.forEach(t),qfo=r(c3e," (Transformer-XL model)"),c3e.forEach(t),Gfo=i(C),m_=n(C,"LI",{});var f3e=s(m_);YZ=n(f3e,"STRONG",{});var hVr=s(YZ);Ofo=r(hVr,"unispeech"),hVr.forEach(t),Xfo=r(f3e," \u2014 "),mP=n(f3e,"A",{href:!0});var pVr=s(mP);Vfo=r(pVr,"UniSpeechModel"),pVr.forEach(t),zfo=r(f3e," (UniSpeech model)"),f3e.forEach(t),Wfo=i(C),g_=n(C,"LI",{});var m3e=s(g_);KZ=n(m3e,"STRONG",{});var _Vr=s(KZ);Qfo=r(_Vr,"unispeech-sat"),_Vr.forEach(t),Hfo=r(m3e," \u2014 "),gP=n(m3e,"A",{href:!0});var uVr=s(gP);Ufo=r(uVr,"UniSpeechSatModel"),uVr.forEach(t),Jfo=r(m3e," (UniSpeechSat model)"),m3e.forEach(t),Yfo=i(C),h_=n(C,"LI",{});var g3e=s(h_);ZZ=n(g3e,"STRONG",{});var bVr=s(ZZ);Kfo=r(bVr,"van"),bVr.forEach(t),Zfo=r(g3e," \u2014 "),hP=n(g3e,"A",{href:!0});var vVr=s(hP);emo=r(vVr,"VanModel"),vVr.forEach(t),omo=r(g3e," (VAN model)"),g3e.forEach(t),rmo=i(C),p_=n(C,"LI",{});var h3e=s(p_);eee=n(h3e,"STRONG",{});var TVr=s(eee);tmo=r(TVr,"vilt"),TVr.forEach(t),amo=r(h3e," \u2014 "),pP=n(h3e,"A",{href:!0});var FVr=s(pP);nmo=r(FVr,"ViltModel"),FVr.forEach(t),smo=r(h3e," (ViLT model)"),h3e.forEach(t),lmo=i(C),__=n(C,"LI",{});var p3e=s(__);oee=n(p3e,"STRONG",{});var CVr=s(oee);imo=r(CVr,"vision-text-dual-encoder"),CVr.forEach(t),dmo=r(p3e," \u2014 "),_P=n(p3e,"A",{href:!0});var MVr=s(_P);cmo=r(MVr,"VisionTextDualEncoderModel"),MVr.forEach(t),fmo=r(p3e," (VisionTextDualEncoder model)"),p3e.forEach(t),mmo=i(C),u_=n(C,"LI",{});var _3e=s(u_);ree=n(_3e,"STRONG",{});var EVr=s(ree);gmo=r(EVr,"visual_bert"),EVr.forEach(t),hmo=r(_3e," \u2014 "),uP=n(_3e,"A",{href:!0});var yVr=s(uP);pmo=r(yVr,"VisualBertModel"),yVr.forEach(t),_mo=r(_3e," (VisualBert model)"),_3e.forEach(t),umo=i(C),b_=n(C,"LI",{});var u3e=s(b_);tee=n(u3e,"STRONG",{});var wVr=s(tee);bmo=r(wVr,"vit"),wVr.forEach(t),vmo=r(u3e," \u2014 "),bP=n(u3e,"A",{href:!0});var AVr=s(bP);Tmo=r(AVr,"ViTModel"),AVr.forEach(t),Fmo=r(u3e," (ViT model)"),u3e.forEach(t),Cmo=i(C),v_=n(C,"LI",{});var b3e=s(v_);aee=n(b3e,"STRONG",{});var LVr=s(aee);Mmo=r(LVr,"vit_mae"),LVr.forEach(t),Emo=r(b3e," \u2014 "),vP=n(b3e,"A",{href:!0});var BVr=s(vP);ymo=r(BVr,"ViTMAEModel"),BVr.forEach(t),wmo=r(b3e," (ViTMAE model)"),b3e.forEach(t),Amo=i(C),T_=n(C,"LI",{});var v3e=s(T_);nee=n(v3e,"STRONG",{});var xVr=s(nee);Lmo=r(xVr,"wav2vec2"),xVr.forEach(t),Bmo=r(v3e," \u2014 "),TP=n(v3e,"A",{href:!0});var kVr=s(TP);xmo=r(kVr,"Wav2Vec2Model"),kVr.forEach(t),kmo=r(v3e," (Wav2Vec2 model)"),v3e.forEach(t),Rmo=i(C),F_=n(C,"LI",{});var T3e=s(F_);see=n(T3e,"STRONG",{});var RVr=s(see);Smo=r(RVr,"wavlm"),RVr.forEach(t),Pmo=r(T3e," \u2014 "),FP=n(T3e,"A",{href:!0});var SVr=s(FP);$mo=r(SVr,"WavLMModel"),SVr.forEach(t),Imo=r(T3e," (WavLM model)"),T3e.forEach(t),Nmo=i(C),C_=n(C,"LI",{});var F3e=s(C_);lee=n(F3e,"STRONG",{});var PVr=s(lee);Dmo=r(PVr,"xglm"),PVr.forEach(t),jmo=r(F3e," \u2014 "),CP=n(F3e,"A",{href:!0});var $Vr=s(CP);qmo=r($Vr,"XGLMModel"),$Vr.forEach(t),Gmo=r(F3e," (XGLM model)"),F3e.forEach(t),Omo=i(C),M_=n(C,"LI",{});var C3e=s(M_);iee=n(C3e,"STRONG",{});var IVr=s(iee);Xmo=r(IVr,"xlm"),IVr.forEach(t),Vmo=r(C3e," \u2014 "),MP=n(C3e,"A",{href:!0});var NVr=s(MP);zmo=r(NVr,"XLMModel"),NVr.forEach(t),Wmo=r(C3e," (XLM model)"),C3e.forEach(t),Qmo=i(C),E_=n(C,"LI",{});var M3e=s(E_);dee=n(M3e,"STRONG",{});var DVr=s(dee);Hmo=r(DVr,"xlm-prophetnet"),DVr.forEach(t),Umo=r(M3e," \u2014 "),EP=n(M3e,"A",{href:!0});var jVr=s(EP);Jmo=r(jVr,"XLMProphetNetModel"),jVr.forEach(t),Ymo=r(M3e," (XLMProphetNet model)"),M3e.forEach(t),Kmo=i(C),y_=n(C,"LI",{});var E3e=s(y_);cee=n(E3e,"STRONG",{});var qVr=s(cee);Zmo=r(qVr,"xlm-roberta"),qVr.forEach(t),ego=r(E3e," \u2014 "),yP=n(E3e,"A",{href:!0});var GVr=s(yP);ogo=r(GVr,"XLMRobertaModel"),GVr.forEach(t),rgo=r(E3e," (XLM-RoBERTa model)"),E3e.forEach(t),tgo=i(C),w_=n(C,"LI",{});var y3e=s(w_);fee=n(y3e,"STRONG",{});var OVr=s(fee);ago=r(OVr,"xlm-roberta-xl"),OVr.forEach(t),ngo=r(y3e," \u2014 "),wP=n(y3e,"A",{href:!0});var XVr=s(wP);sgo=r(XVr,"XLMRobertaXLModel"),XVr.forEach(t),lgo=r(y3e," (XLM-RoBERTa-XL model)"),y3e.forEach(t),igo=i(C),A_=n(C,"LI",{});var w3e=s(A_);mee=n(w3e,"STRONG",{});var VVr=s(mee);dgo=r(VVr,"xlnet"),VVr.forEach(t),cgo=r(w3e," \u2014 "),AP=n(w3e,"A",{href:!0});var zVr=s(AP);fgo=r(zVr,"XLNetModel"),zVr.forEach(t),mgo=r(w3e," (XLNet model)"),w3e.forEach(t),ggo=i(C),L_=n(C,"LI",{});var A3e=s(L_);gee=n(A3e,"STRONG",{});var WVr=s(gee);hgo=r(WVr,"yoso"),WVr.forEach(t),pgo=r(A3e," \u2014 "),LP=n(A3e,"A",{href:!0});var QVr=s(LP);_go=r(QVr,"YosoModel"),QVr.forEach(t),ugo=r(A3e," (YOSO model)"),A3e.forEach(t),C.forEach(t),bgo=i(qt),B_=n(qt,"P",{});var L3e=s(B_);vgo=r(L3e,"The model is set in evaluation mode by default using "),hee=n(L3e,"CODE",{});var HVr=s(hee);Tgo=r(HVr,"model.eval()"),HVr.forEach(t),Fgo=r(L3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pee=n(L3e,"CODE",{});var UVr=s(pee);Cgo=r(UVr,"model.train()"),UVr.forEach(t),L3e.forEach(t),Mgo=i(qt),_ee=n(qt,"P",{});var JVr=s(_ee);Ego=r(JVr,"Examples:"),JVr.forEach(t),ygo=i(qt),m(U5.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),kke=i(c),Zi=n(c,"H2",{class:!0});var qSe=s(Zi);x_=n(qSe,"A",{id:!0,class:!0,href:!0});var YVr=s(x_);uee=n(YVr,"SPAN",{});var KVr=s(uee);m(J5.$$.fragment,KVr),KVr.forEach(t),YVr.forEach(t),wgo=i(qSe),bee=n(qSe,"SPAN",{});var ZVr=s(bee);Ago=r(ZVr,"AutoModelForPreTraining"),ZVr.forEach(t),qSe.forEach(t),Rke=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(Y5.$$.fragment,Hs),Lgo=i(Hs),ed=n(Hs,"P",{});var nW=s(ed);Bgo=r(nW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vee=n(nW,"CODE",{});var ezr=s(vee);xgo=r(ezr,"from_pretrained()"),ezr.forEach(t),kgo=r(nW,"class method or the "),Tee=n(nW,"CODE",{});var ozr=s(Tee);Rgo=r(ozr,"from_config()"),ozr.forEach(t),Sgo=r(nW,`class
method.`),nW.forEach(t),Pgo=i(Hs),K5=n(Hs,"P",{});var GSe=s(K5);$go=r(GSe,"This class cannot be instantiated directly using "),Fee=n(GSe,"CODE",{});var rzr=s(Fee);Igo=r(rzr,"__init__()"),rzr.forEach(t),Ngo=r(GSe," (throws an error)."),GSe.forEach(t),Dgo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(Z5.$$.fragment,Us),jgo=i(Us),Cee=n(Us,"P",{});var tzr=s(Cee);qgo=r(tzr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),tzr.forEach(t),Ggo=i(Us),od=n(Us,"P",{});var sW=s(od);Ogo=r(sW,`Note:
Loading a model from its configuration file does `),Mee=n(sW,"STRONG",{});var azr=s(Mee);Xgo=r(azr,"not"),azr.forEach(t),Vgo=r(sW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eee=n(sW,"CODE",{});var nzr=s(Eee);zgo=r(nzr,"from_pretrained()"),nzr.forEach(t),Wgo=r(sW,"to load the model weights."),sW.forEach(t),Qgo=i(Us),yee=n(Us,"P",{});var szr=s(yee);Hgo=r(szr,"Examples:"),szr.forEach(t),Ugo=i(Us),m(ey.$$.fragment,Us),Us.forEach(t),Jgo=i(Hs),De=n(Hs,"DIV",{class:!0});var Gt=s(De);m(oy.$$.fragment,Gt),Ygo=i(Gt),wee=n(Gt,"P",{});var lzr=s(wee);Kgo=r(lzr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lzr.forEach(t),Zgo=i(Gt),za=n(Gt,"P",{});var h3=s(za);eho=r(h3,"The model class to instantiate is selected based on the "),Aee=n(h3,"CODE",{});var izr=s(Aee);oho=r(izr,"model_type"),izr.forEach(t),rho=r(h3,` property of the config object (either
passed as an argument or loaded from `),Lee=n(h3,"CODE",{});var dzr=s(Lee);tho=r(dzr,"pretrained_model_name_or_path"),dzr.forEach(t),aho=r(h3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bee=n(h3,"CODE",{});var czr=s(Bee);nho=r(czr,"pretrained_model_name_or_path"),czr.forEach(t),sho=r(h3,":"),h3.forEach(t),lho=i(Gt),k=n(Gt,"UL",{});var S=s(k);k_=n(S,"LI",{});var B3e=s(k_);xee=n(B3e,"STRONG",{});var fzr=s(xee);iho=r(fzr,"albert"),fzr.forEach(t),dho=r(B3e," \u2014 "),BP=n(B3e,"A",{href:!0});var mzr=s(BP);cho=r(mzr,"AlbertForPreTraining"),mzr.forEach(t),fho=r(B3e," (ALBERT model)"),B3e.forEach(t),mho=i(S),R_=n(S,"LI",{});var x3e=s(R_);kee=n(x3e,"STRONG",{});var gzr=s(kee);gho=r(gzr,"bart"),gzr.forEach(t),hho=r(x3e," \u2014 "),xP=n(x3e,"A",{href:!0});var hzr=s(xP);pho=r(hzr,"BartForConditionalGeneration"),hzr.forEach(t),_ho=r(x3e," (BART model)"),x3e.forEach(t),uho=i(S),S_=n(S,"LI",{});var k3e=s(S_);Ree=n(k3e,"STRONG",{});var pzr=s(Ree);bho=r(pzr,"bert"),pzr.forEach(t),vho=r(k3e," \u2014 "),kP=n(k3e,"A",{href:!0});var _zr=s(kP);Tho=r(_zr,"BertForPreTraining"),_zr.forEach(t),Fho=r(k3e," (BERT model)"),k3e.forEach(t),Cho=i(S),P_=n(S,"LI",{});var R3e=s(P_);See=n(R3e,"STRONG",{});var uzr=s(See);Mho=r(uzr,"big_bird"),uzr.forEach(t),Eho=r(R3e," \u2014 "),RP=n(R3e,"A",{href:!0});var bzr=s(RP);yho=r(bzr,"BigBirdForPreTraining"),bzr.forEach(t),who=r(R3e," (BigBird model)"),R3e.forEach(t),Aho=i(S),$_=n(S,"LI",{});var S3e=s($_);Pee=n(S3e,"STRONG",{});var vzr=s(Pee);Lho=r(vzr,"camembert"),vzr.forEach(t),Bho=r(S3e," \u2014 "),SP=n(S3e,"A",{href:!0});var Tzr=s(SP);xho=r(Tzr,"CamembertForMaskedLM"),Tzr.forEach(t),kho=r(S3e," (CamemBERT model)"),S3e.forEach(t),Rho=i(S),I_=n(S,"LI",{});var P3e=s(I_);$ee=n(P3e,"STRONG",{});var Fzr=s($ee);Sho=r(Fzr,"ctrl"),Fzr.forEach(t),Pho=r(P3e," \u2014 "),PP=n(P3e,"A",{href:!0});var Czr=s(PP);$ho=r(Czr,"CTRLLMHeadModel"),Czr.forEach(t),Iho=r(P3e," (CTRL model)"),P3e.forEach(t),Nho=i(S),N_=n(S,"LI",{});var $3e=s(N_);Iee=n($3e,"STRONG",{});var Mzr=s(Iee);Dho=r(Mzr,"data2vec-text"),Mzr.forEach(t),jho=r($3e," \u2014 "),$P=n($3e,"A",{href:!0});var Ezr=s($P);qho=r(Ezr,"Data2VecTextForMaskedLM"),Ezr.forEach(t),Gho=r($3e," (Data2VecText model)"),$3e.forEach(t),Oho=i(S),D_=n(S,"LI",{});var I3e=s(D_);Nee=n(I3e,"STRONG",{});var yzr=s(Nee);Xho=r(yzr,"deberta"),yzr.forEach(t),Vho=r(I3e," \u2014 "),IP=n(I3e,"A",{href:!0});var wzr=s(IP);zho=r(wzr,"DebertaForMaskedLM"),wzr.forEach(t),Who=r(I3e," (DeBERTa model)"),I3e.forEach(t),Qho=i(S),j_=n(S,"LI",{});var N3e=s(j_);Dee=n(N3e,"STRONG",{});var Azr=s(Dee);Hho=r(Azr,"deberta-v2"),Azr.forEach(t),Uho=r(N3e," \u2014 "),NP=n(N3e,"A",{href:!0});var Lzr=s(NP);Jho=r(Lzr,"DebertaV2ForMaskedLM"),Lzr.forEach(t),Yho=r(N3e," (DeBERTa-v2 model)"),N3e.forEach(t),Kho=i(S),q_=n(S,"LI",{});var D3e=s(q_);jee=n(D3e,"STRONG",{});var Bzr=s(jee);Zho=r(Bzr,"distilbert"),Bzr.forEach(t),epo=r(D3e," \u2014 "),DP=n(D3e,"A",{href:!0});var xzr=s(DP);opo=r(xzr,"DistilBertForMaskedLM"),xzr.forEach(t),rpo=r(D3e," (DistilBERT model)"),D3e.forEach(t),tpo=i(S),G_=n(S,"LI",{});var j3e=s(G_);qee=n(j3e,"STRONG",{});var kzr=s(qee);apo=r(kzr,"electra"),kzr.forEach(t),npo=r(j3e," \u2014 "),jP=n(j3e,"A",{href:!0});var Rzr=s(jP);spo=r(Rzr,"ElectraForPreTraining"),Rzr.forEach(t),lpo=r(j3e," (ELECTRA model)"),j3e.forEach(t),ipo=i(S),O_=n(S,"LI",{});var q3e=s(O_);Gee=n(q3e,"STRONG",{});var Szr=s(Gee);dpo=r(Szr,"flaubert"),Szr.forEach(t),cpo=r(q3e," \u2014 "),qP=n(q3e,"A",{href:!0});var Pzr=s(qP);fpo=r(Pzr,"FlaubertWithLMHeadModel"),Pzr.forEach(t),mpo=r(q3e," (FlauBERT model)"),q3e.forEach(t),gpo=i(S),X_=n(S,"LI",{});var G3e=s(X_);Oee=n(G3e,"STRONG",{});var $zr=s(Oee);hpo=r($zr,"fnet"),$zr.forEach(t),ppo=r(G3e," \u2014 "),GP=n(G3e,"A",{href:!0});var Izr=s(GP);_po=r(Izr,"FNetForPreTraining"),Izr.forEach(t),upo=r(G3e," (FNet model)"),G3e.forEach(t),bpo=i(S),V_=n(S,"LI",{});var O3e=s(V_);Xee=n(O3e,"STRONG",{});var Nzr=s(Xee);vpo=r(Nzr,"fsmt"),Nzr.forEach(t),Tpo=r(O3e," \u2014 "),OP=n(O3e,"A",{href:!0});var Dzr=s(OP);Fpo=r(Dzr,"FSMTForConditionalGeneration"),Dzr.forEach(t),Cpo=r(O3e," (FairSeq Machine-Translation model)"),O3e.forEach(t),Mpo=i(S),z_=n(S,"LI",{});var X3e=s(z_);Vee=n(X3e,"STRONG",{});var jzr=s(Vee);Epo=r(jzr,"funnel"),jzr.forEach(t),ypo=r(X3e," \u2014 "),XP=n(X3e,"A",{href:!0});var qzr=s(XP);wpo=r(qzr,"FunnelForPreTraining"),qzr.forEach(t),Apo=r(X3e," (Funnel Transformer model)"),X3e.forEach(t),Lpo=i(S),W_=n(S,"LI",{});var V3e=s(W_);zee=n(V3e,"STRONG",{});var Gzr=s(zee);Bpo=r(Gzr,"gpt2"),Gzr.forEach(t),xpo=r(V3e," \u2014 "),VP=n(V3e,"A",{href:!0});var Ozr=s(VP);kpo=r(Ozr,"GPT2LMHeadModel"),Ozr.forEach(t),Rpo=r(V3e," (OpenAI GPT-2 model)"),V3e.forEach(t),Spo=i(S),Q_=n(S,"LI",{});var z3e=s(Q_);Wee=n(z3e,"STRONG",{});var Xzr=s(Wee);Ppo=r(Xzr,"ibert"),Xzr.forEach(t),$po=r(z3e," \u2014 "),zP=n(z3e,"A",{href:!0});var Vzr=s(zP);Ipo=r(Vzr,"IBertForMaskedLM"),Vzr.forEach(t),Npo=r(z3e," (I-BERT model)"),z3e.forEach(t),Dpo=i(S),H_=n(S,"LI",{});var W3e=s(H_);Qee=n(W3e,"STRONG",{});var zzr=s(Qee);jpo=r(zzr,"layoutlm"),zzr.forEach(t),qpo=r(W3e," \u2014 "),WP=n(W3e,"A",{href:!0});var Wzr=s(WP);Gpo=r(Wzr,"LayoutLMForMaskedLM"),Wzr.forEach(t),Opo=r(W3e," (LayoutLM model)"),W3e.forEach(t),Xpo=i(S),U_=n(S,"LI",{});var Q3e=s(U_);Hee=n(Q3e,"STRONG",{});var Qzr=s(Hee);Vpo=r(Qzr,"longformer"),Qzr.forEach(t),zpo=r(Q3e," \u2014 "),QP=n(Q3e,"A",{href:!0});var Hzr=s(QP);Wpo=r(Hzr,"LongformerForMaskedLM"),Hzr.forEach(t),Qpo=r(Q3e," (Longformer model)"),Q3e.forEach(t),Hpo=i(S),J_=n(S,"LI",{});var H3e=s(J_);Uee=n(H3e,"STRONG",{});var Uzr=s(Uee);Upo=r(Uzr,"lxmert"),Uzr.forEach(t),Jpo=r(H3e," \u2014 "),HP=n(H3e,"A",{href:!0});var Jzr=s(HP);Ypo=r(Jzr,"LxmertForPreTraining"),Jzr.forEach(t),Kpo=r(H3e," (LXMERT model)"),H3e.forEach(t),Zpo=i(S),Y_=n(S,"LI",{});var U3e=s(Y_);Jee=n(U3e,"STRONG",{});var Yzr=s(Jee);e_o=r(Yzr,"megatron-bert"),Yzr.forEach(t),o_o=r(U3e," \u2014 "),UP=n(U3e,"A",{href:!0});var Kzr=s(UP);r_o=r(Kzr,"MegatronBertForPreTraining"),Kzr.forEach(t),t_o=r(U3e," (MegatronBert model)"),U3e.forEach(t),a_o=i(S),K_=n(S,"LI",{});var J3e=s(K_);Yee=n(J3e,"STRONG",{});var Zzr=s(Yee);n_o=r(Zzr,"mobilebert"),Zzr.forEach(t),s_o=r(J3e," \u2014 "),JP=n(J3e,"A",{href:!0});var eWr=s(JP);l_o=r(eWr,"MobileBertForPreTraining"),eWr.forEach(t),i_o=r(J3e," (MobileBERT model)"),J3e.forEach(t),d_o=i(S),Z_=n(S,"LI",{});var Y3e=s(Z_);Kee=n(Y3e,"STRONG",{});var oWr=s(Kee);c_o=r(oWr,"mpnet"),oWr.forEach(t),f_o=r(Y3e," \u2014 "),YP=n(Y3e,"A",{href:!0});var rWr=s(YP);m_o=r(rWr,"MPNetForMaskedLM"),rWr.forEach(t),g_o=r(Y3e," (MPNet model)"),Y3e.forEach(t),h_o=i(S),eu=n(S,"LI",{});var K3e=s(eu);Zee=n(K3e,"STRONG",{});var tWr=s(Zee);p_o=r(tWr,"openai-gpt"),tWr.forEach(t),__o=r(K3e," \u2014 "),KP=n(K3e,"A",{href:!0});var aWr=s(KP);u_o=r(aWr,"OpenAIGPTLMHeadModel"),aWr.forEach(t),b_o=r(K3e," (OpenAI GPT model)"),K3e.forEach(t),v_o=i(S),ou=n(S,"LI",{});var Z3e=s(ou);eoe=n(Z3e,"STRONG",{});var nWr=s(eoe);T_o=r(nWr,"retribert"),nWr.forEach(t),F_o=r(Z3e," \u2014 "),ZP=n(Z3e,"A",{href:!0});var sWr=s(ZP);C_o=r(sWr,"RetriBertModel"),sWr.forEach(t),M_o=r(Z3e," (RetriBERT model)"),Z3e.forEach(t),E_o=i(S),ru=n(S,"LI",{});var e5e=s(ru);ooe=n(e5e,"STRONG",{});var lWr=s(ooe);y_o=r(lWr,"roberta"),lWr.forEach(t),w_o=r(e5e," \u2014 "),e$=n(e5e,"A",{href:!0});var iWr=s(e$);A_o=r(iWr,"RobertaForMaskedLM"),iWr.forEach(t),L_o=r(e5e," (RoBERTa model)"),e5e.forEach(t),B_o=i(S),tu=n(S,"LI",{});var o5e=s(tu);roe=n(o5e,"STRONG",{});var dWr=s(roe);x_o=r(dWr,"squeezebert"),dWr.forEach(t),k_o=r(o5e," \u2014 "),o$=n(o5e,"A",{href:!0});var cWr=s(o$);R_o=r(cWr,"SqueezeBertForMaskedLM"),cWr.forEach(t),S_o=r(o5e," (SqueezeBERT model)"),o5e.forEach(t),P_o=i(S),au=n(S,"LI",{});var r5e=s(au);toe=n(r5e,"STRONG",{});var fWr=s(toe);$_o=r(fWr,"t5"),fWr.forEach(t),I_o=r(r5e," \u2014 "),r$=n(r5e,"A",{href:!0});var mWr=s(r$);N_o=r(mWr,"T5ForConditionalGeneration"),mWr.forEach(t),D_o=r(r5e," (T5 model)"),r5e.forEach(t),j_o=i(S),nu=n(S,"LI",{});var t5e=s(nu);aoe=n(t5e,"STRONG",{});var gWr=s(aoe);q_o=r(gWr,"tapas"),gWr.forEach(t),G_o=r(t5e," \u2014 "),t$=n(t5e,"A",{href:!0});var hWr=s(t$);O_o=r(hWr,"TapasForMaskedLM"),hWr.forEach(t),X_o=r(t5e," (TAPAS model)"),t5e.forEach(t),V_o=i(S),su=n(S,"LI",{});var a5e=s(su);noe=n(a5e,"STRONG",{});var pWr=s(noe);z_o=r(pWr,"transfo-xl"),pWr.forEach(t),W_o=r(a5e," \u2014 "),a$=n(a5e,"A",{href:!0});var _Wr=s(a$);Q_o=r(_Wr,"TransfoXLLMHeadModel"),_Wr.forEach(t),H_o=r(a5e," (Transformer-XL model)"),a5e.forEach(t),U_o=i(S),lu=n(S,"LI",{});var n5e=s(lu);soe=n(n5e,"STRONG",{});var uWr=s(soe);J_o=r(uWr,"unispeech"),uWr.forEach(t),Y_o=r(n5e," \u2014 "),n$=n(n5e,"A",{href:!0});var bWr=s(n$);K_o=r(bWr,"UniSpeechForPreTraining"),bWr.forEach(t),Z_o=r(n5e," (UniSpeech model)"),n5e.forEach(t),euo=i(S),iu=n(S,"LI",{});var s5e=s(iu);loe=n(s5e,"STRONG",{});var vWr=s(loe);ouo=r(vWr,"unispeech-sat"),vWr.forEach(t),ruo=r(s5e," \u2014 "),s$=n(s5e,"A",{href:!0});var TWr=s(s$);tuo=r(TWr,"UniSpeechSatForPreTraining"),TWr.forEach(t),auo=r(s5e," (UniSpeechSat model)"),s5e.forEach(t),nuo=i(S),du=n(S,"LI",{});var l5e=s(du);ioe=n(l5e,"STRONG",{});var FWr=s(ioe);suo=r(FWr,"visual_bert"),FWr.forEach(t),luo=r(l5e," \u2014 "),l$=n(l5e,"A",{href:!0});var CWr=s(l$);iuo=r(CWr,"VisualBertForPreTraining"),CWr.forEach(t),duo=r(l5e," (VisualBert model)"),l5e.forEach(t),cuo=i(S),cu=n(S,"LI",{});var i5e=s(cu);doe=n(i5e,"STRONG",{});var MWr=s(doe);fuo=r(MWr,"vit_mae"),MWr.forEach(t),muo=r(i5e," \u2014 "),i$=n(i5e,"A",{href:!0});var EWr=s(i$);guo=r(EWr,"ViTMAEForPreTraining"),EWr.forEach(t),huo=r(i5e," (ViTMAE model)"),i5e.forEach(t),puo=i(S),fu=n(S,"LI",{});var d5e=s(fu);coe=n(d5e,"STRONG",{});var yWr=s(coe);_uo=r(yWr,"wav2vec2"),yWr.forEach(t),uuo=r(d5e," \u2014 "),d$=n(d5e,"A",{href:!0});var wWr=s(d$);buo=r(wWr,"Wav2Vec2ForPreTraining"),wWr.forEach(t),vuo=r(d5e," (Wav2Vec2 model)"),d5e.forEach(t),Tuo=i(S),mu=n(S,"LI",{});var c5e=s(mu);foe=n(c5e,"STRONG",{});var AWr=s(foe);Fuo=r(AWr,"xlm"),AWr.forEach(t),Cuo=r(c5e," \u2014 "),c$=n(c5e,"A",{href:!0});var LWr=s(c$);Muo=r(LWr,"XLMWithLMHeadModel"),LWr.forEach(t),Euo=r(c5e," (XLM model)"),c5e.forEach(t),yuo=i(S),gu=n(S,"LI",{});var f5e=s(gu);moe=n(f5e,"STRONG",{});var BWr=s(moe);wuo=r(BWr,"xlm-roberta"),BWr.forEach(t),Auo=r(f5e," \u2014 "),f$=n(f5e,"A",{href:!0});var xWr=s(f$);Luo=r(xWr,"XLMRobertaForMaskedLM"),xWr.forEach(t),Buo=r(f5e," (XLM-RoBERTa model)"),f5e.forEach(t),xuo=i(S),hu=n(S,"LI",{});var m5e=s(hu);goe=n(m5e,"STRONG",{});var kWr=s(goe);kuo=r(kWr,"xlm-roberta-xl"),kWr.forEach(t),Ruo=r(m5e," \u2014 "),m$=n(m5e,"A",{href:!0});var RWr=s(m$);Suo=r(RWr,"XLMRobertaXLForMaskedLM"),RWr.forEach(t),Puo=r(m5e," (XLM-RoBERTa-XL model)"),m5e.forEach(t),$uo=i(S),pu=n(S,"LI",{});var g5e=s(pu);hoe=n(g5e,"STRONG",{});var SWr=s(hoe);Iuo=r(SWr,"xlnet"),SWr.forEach(t),Nuo=r(g5e," \u2014 "),g$=n(g5e,"A",{href:!0});var PWr=s(g$);Duo=r(PWr,"XLNetLMHeadModel"),PWr.forEach(t),juo=r(g5e," (XLNet model)"),g5e.forEach(t),S.forEach(t),quo=i(Gt),_u=n(Gt,"P",{});var h5e=s(_u);Guo=r(h5e,"The model is set in evaluation mode by default using "),poe=n(h5e,"CODE",{});var $Wr=s(poe);Ouo=r($Wr,"model.eval()"),$Wr.forEach(t),Xuo=r(h5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_oe=n(h5e,"CODE",{});var IWr=s(_oe);Vuo=r(IWr,"model.train()"),IWr.forEach(t),h5e.forEach(t),zuo=i(Gt),uoe=n(Gt,"P",{});var NWr=s(uoe);Wuo=r(NWr,"Examples:"),NWr.forEach(t),Quo=i(Gt),m(ry.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),Ske=i(c),rd=n(c,"H2",{class:!0});var OSe=s(rd);uu=n(OSe,"A",{id:!0,class:!0,href:!0});var DWr=s(uu);boe=n(DWr,"SPAN",{});var jWr=s(boe);m(ty.$$.fragment,jWr),jWr.forEach(t),DWr.forEach(t),Huo=i(OSe),voe=n(OSe,"SPAN",{});var qWr=s(voe);Uuo=r(qWr,"AutoModelForCausalLM"),qWr.forEach(t),OSe.forEach(t),Pke=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(ay.$$.fragment,Js),Juo=i(Js),td=n(Js,"P",{});var lW=s(td);Yuo=r(lW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Toe=n(lW,"CODE",{});var GWr=s(Toe);Kuo=r(GWr,"from_pretrained()"),GWr.forEach(t),Zuo=r(lW,"class method or the "),Foe=n(lW,"CODE",{});var OWr=s(Foe);e1o=r(OWr,"from_config()"),OWr.forEach(t),o1o=r(lW,`class
method.`),lW.forEach(t),r1o=i(Js),ny=n(Js,"P",{});var XSe=s(ny);t1o=r(XSe,"This class cannot be instantiated directly using "),Coe=n(XSe,"CODE",{});var XWr=s(Coe);a1o=r(XWr,"__init__()"),XWr.forEach(t),n1o=r(XSe," (throws an error)."),XSe.forEach(t),s1o=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);m(sy.$$.fragment,Ys),l1o=i(Ys),Moe=n(Ys,"P",{});var VWr=s(Moe);i1o=r(VWr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VWr.forEach(t),d1o=i(Ys),ad=n(Ys,"P",{});var iW=s(ad);c1o=r(iW,`Note:
Loading a model from its configuration file does `),Eoe=n(iW,"STRONG",{});var zWr=s(Eoe);f1o=r(zWr,"not"),zWr.forEach(t),m1o=r(iW,` load the model weights. It only affects the
model\u2019s configuration. Use `),yoe=n(iW,"CODE",{});var WWr=s(yoe);g1o=r(WWr,"from_pretrained()"),WWr.forEach(t),h1o=r(iW,"to load the model weights."),iW.forEach(t),p1o=i(Ys),woe=n(Ys,"P",{});var QWr=s(woe);_1o=r(QWr,"Examples:"),QWr.forEach(t),u1o=i(Ys),m(ly.$$.fragment,Ys),Ys.forEach(t),b1o=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(iy.$$.fragment,Ot),v1o=i(Ot),Aoe=n(Ot,"P",{});var HWr=s(Aoe);T1o=r(HWr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),HWr.forEach(t),F1o=i(Ot),Wa=n(Ot,"P",{});var p3=s(Wa);C1o=r(p3,"The model class to instantiate is selected based on the "),Loe=n(p3,"CODE",{});var UWr=s(Loe);M1o=r(UWr,"model_type"),UWr.forEach(t),E1o=r(p3,` property of the config object (either
passed as an argument or loaded from `),Boe=n(p3,"CODE",{});var JWr=s(Boe);y1o=r(JWr,"pretrained_model_name_or_path"),JWr.forEach(t),w1o=r(p3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xoe=n(p3,"CODE",{});var YWr=s(xoe);A1o=r(YWr,"pretrained_model_name_or_path"),YWr.forEach(t),L1o=r(p3,":"),p3.forEach(t),B1o=i(Ot),$=n(Ot,"UL",{});var N=s($);bu=n(N,"LI",{});var p5e=s(bu);koe=n(p5e,"STRONG",{});var KWr=s(koe);x1o=r(KWr,"bart"),KWr.forEach(t),k1o=r(p5e," \u2014 "),h$=n(p5e,"A",{href:!0});var ZWr=s(h$);R1o=r(ZWr,"BartForCausalLM"),ZWr.forEach(t),S1o=r(p5e," (BART model)"),p5e.forEach(t),P1o=i(N),vu=n(N,"LI",{});var _5e=s(vu);Roe=n(_5e,"STRONG",{});var eQr=s(Roe);$1o=r(eQr,"bert"),eQr.forEach(t),I1o=r(_5e," \u2014 "),p$=n(_5e,"A",{href:!0});var oQr=s(p$);N1o=r(oQr,"BertLMHeadModel"),oQr.forEach(t),D1o=r(_5e," (BERT model)"),_5e.forEach(t),j1o=i(N),Tu=n(N,"LI",{});var u5e=s(Tu);Soe=n(u5e,"STRONG",{});var rQr=s(Soe);q1o=r(rQr,"bert-generation"),rQr.forEach(t),G1o=r(u5e," \u2014 "),_$=n(u5e,"A",{href:!0});var tQr=s(_$);O1o=r(tQr,"BertGenerationDecoder"),tQr.forEach(t),X1o=r(u5e," (Bert Generation model)"),u5e.forEach(t),V1o=i(N),Fu=n(N,"LI",{});var b5e=s(Fu);Poe=n(b5e,"STRONG",{});var aQr=s(Poe);z1o=r(aQr,"big_bird"),aQr.forEach(t),W1o=r(b5e," \u2014 "),u$=n(b5e,"A",{href:!0});var nQr=s(u$);Q1o=r(nQr,"BigBirdForCausalLM"),nQr.forEach(t),H1o=r(b5e," (BigBird model)"),b5e.forEach(t),U1o=i(N),Cu=n(N,"LI",{});var v5e=s(Cu);$oe=n(v5e,"STRONG",{});var sQr=s($oe);J1o=r(sQr,"bigbird_pegasus"),sQr.forEach(t),Y1o=r(v5e," \u2014 "),b$=n(v5e,"A",{href:!0});var lQr=s(b$);K1o=r(lQr,"BigBirdPegasusForCausalLM"),lQr.forEach(t),Z1o=r(v5e," (BigBirdPegasus model)"),v5e.forEach(t),e2o=i(N),Mu=n(N,"LI",{});var T5e=s(Mu);Ioe=n(T5e,"STRONG",{});var iQr=s(Ioe);o2o=r(iQr,"blenderbot"),iQr.forEach(t),r2o=r(T5e," \u2014 "),v$=n(T5e,"A",{href:!0});var dQr=s(v$);t2o=r(dQr,"BlenderbotForCausalLM"),dQr.forEach(t),a2o=r(T5e," (Blenderbot model)"),T5e.forEach(t),n2o=i(N),Eu=n(N,"LI",{});var F5e=s(Eu);Noe=n(F5e,"STRONG",{});var cQr=s(Noe);s2o=r(cQr,"blenderbot-small"),cQr.forEach(t),l2o=r(F5e," \u2014 "),T$=n(F5e,"A",{href:!0});var fQr=s(T$);i2o=r(fQr,"BlenderbotSmallForCausalLM"),fQr.forEach(t),d2o=r(F5e," (BlenderbotSmall model)"),F5e.forEach(t),c2o=i(N),yu=n(N,"LI",{});var C5e=s(yu);Doe=n(C5e,"STRONG",{});var mQr=s(Doe);f2o=r(mQr,"camembert"),mQr.forEach(t),m2o=r(C5e," \u2014 "),F$=n(C5e,"A",{href:!0});var gQr=s(F$);g2o=r(gQr,"CamembertForCausalLM"),gQr.forEach(t),h2o=r(C5e," (CamemBERT model)"),C5e.forEach(t),p2o=i(N),wu=n(N,"LI",{});var M5e=s(wu);joe=n(M5e,"STRONG",{});var hQr=s(joe);_2o=r(hQr,"ctrl"),hQr.forEach(t),u2o=r(M5e," \u2014 "),C$=n(M5e,"A",{href:!0});var pQr=s(C$);b2o=r(pQr,"CTRLLMHeadModel"),pQr.forEach(t),v2o=r(M5e," (CTRL model)"),M5e.forEach(t),T2o=i(N),Au=n(N,"LI",{});var E5e=s(Au);qoe=n(E5e,"STRONG",{});var _Qr=s(qoe);F2o=r(_Qr,"data2vec-text"),_Qr.forEach(t),C2o=r(E5e," \u2014 "),M$=n(E5e,"A",{href:!0});var uQr=s(M$);M2o=r(uQr,"Data2VecTextForCausalLM"),uQr.forEach(t),E2o=r(E5e," (Data2VecText model)"),E5e.forEach(t),y2o=i(N),Lu=n(N,"LI",{});var y5e=s(Lu);Goe=n(y5e,"STRONG",{});var bQr=s(Goe);w2o=r(bQr,"electra"),bQr.forEach(t),A2o=r(y5e," \u2014 "),E$=n(y5e,"A",{href:!0});var vQr=s(E$);L2o=r(vQr,"ElectraForCausalLM"),vQr.forEach(t),B2o=r(y5e," (ELECTRA model)"),y5e.forEach(t),x2o=i(N),Bu=n(N,"LI",{});var w5e=s(Bu);Ooe=n(w5e,"STRONG",{});var TQr=s(Ooe);k2o=r(TQr,"gpt2"),TQr.forEach(t),R2o=r(w5e," \u2014 "),y$=n(w5e,"A",{href:!0});var FQr=s(y$);S2o=r(FQr,"GPT2LMHeadModel"),FQr.forEach(t),P2o=r(w5e," (OpenAI GPT-2 model)"),w5e.forEach(t),$2o=i(N),xu=n(N,"LI",{});var A5e=s(xu);Xoe=n(A5e,"STRONG",{});var CQr=s(Xoe);I2o=r(CQr,"gpt_neo"),CQr.forEach(t),N2o=r(A5e," \u2014 "),w$=n(A5e,"A",{href:!0});var MQr=s(w$);D2o=r(MQr,"GPTNeoForCausalLM"),MQr.forEach(t),j2o=r(A5e," (GPT Neo model)"),A5e.forEach(t),q2o=i(N),ku=n(N,"LI",{});var L5e=s(ku);Voe=n(L5e,"STRONG",{});var EQr=s(Voe);G2o=r(EQr,"gptj"),EQr.forEach(t),O2o=r(L5e," \u2014 "),A$=n(L5e,"A",{href:!0});var yQr=s(A$);X2o=r(yQr,"GPTJForCausalLM"),yQr.forEach(t),V2o=r(L5e," (GPT-J model)"),L5e.forEach(t),z2o=i(N),Ru=n(N,"LI",{});var B5e=s(Ru);zoe=n(B5e,"STRONG",{});var wQr=s(zoe);W2o=r(wQr,"marian"),wQr.forEach(t),Q2o=r(B5e," \u2014 "),L$=n(B5e,"A",{href:!0});var AQr=s(L$);H2o=r(AQr,"MarianForCausalLM"),AQr.forEach(t),U2o=r(B5e," (Marian model)"),B5e.forEach(t),J2o=i(N),Su=n(N,"LI",{});var x5e=s(Su);Woe=n(x5e,"STRONG",{});var LQr=s(Woe);Y2o=r(LQr,"mbart"),LQr.forEach(t),K2o=r(x5e," \u2014 "),B$=n(x5e,"A",{href:!0});var BQr=s(B$);Z2o=r(BQr,"MBartForCausalLM"),BQr.forEach(t),e6o=r(x5e," (mBART model)"),x5e.forEach(t),o6o=i(N),Pu=n(N,"LI",{});var k5e=s(Pu);Qoe=n(k5e,"STRONG",{});var xQr=s(Qoe);r6o=r(xQr,"megatron-bert"),xQr.forEach(t),t6o=r(k5e," \u2014 "),x$=n(k5e,"A",{href:!0});var kQr=s(x$);a6o=r(kQr,"MegatronBertForCausalLM"),kQr.forEach(t),n6o=r(k5e," (MegatronBert model)"),k5e.forEach(t),s6o=i(N),$u=n(N,"LI",{});var R5e=s($u);Hoe=n(R5e,"STRONG",{});var RQr=s(Hoe);l6o=r(RQr,"openai-gpt"),RQr.forEach(t),i6o=r(R5e," \u2014 "),k$=n(R5e,"A",{href:!0});var SQr=s(k$);d6o=r(SQr,"OpenAIGPTLMHeadModel"),SQr.forEach(t),c6o=r(R5e," (OpenAI GPT model)"),R5e.forEach(t),f6o=i(N),Iu=n(N,"LI",{});var S5e=s(Iu);Uoe=n(S5e,"STRONG",{});var PQr=s(Uoe);m6o=r(PQr,"pegasus"),PQr.forEach(t),g6o=r(S5e," \u2014 "),R$=n(S5e,"A",{href:!0});var $Qr=s(R$);h6o=r($Qr,"PegasusForCausalLM"),$Qr.forEach(t),p6o=r(S5e," (Pegasus model)"),S5e.forEach(t),_6o=i(N),Nu=n(N,"LI",{});var P5e=s(Nu);Joe=n(P5e,"STRONG",{});var IQr=s(Joe);u6o=r(IQr,"plbart"),IQr.forEach(t),b6o=r(P5e," \u2014 "),S$=n(P5e,"A",{href:!0});var NQr=s(S$);v6o=r(NQr,"PLBartForCausalLM"),NQr.forEach(t),T6o=r(P5e," (PLBart model)"),P5e.forEach(t),F6o=i(N),Du=n(N,"LI",{});var $5e=s(Du);Yoe=n($5e,"STRONG",{});var DQr=s(Yoe);C6o=r(DQr,"prophetnet"),DQr.forEach(t),M6o=r($5e," \u2014 "),P$=n($5e,"A",{href:!0});var jQr=s(P$);E6o=r(jQr,"ProphetNetForCausalLM"),jQr.forEach(t),y6o=r($5e," (ProphetNet model)"),$5e.forEach(t),w6o=i(N),ju=n(N,"LI",{});var I5e=s(ju);Koe=n(I5e,"STRONG",{});var qQr=s(Koe);A6o=r(qQr,"qdqbert"),qQr.forEach(t),L6o=r(I5e," \u2014 "),$$=n(I5e,"A",{href:!0});var GQr=s($$);B6o=r(GQr,"QDQBertLMHeadModel"),GQr.forEach(t),x6o=r(I5e," (QDQBert model)"),I5e.forEach(t),k6o=i(N),qu=n(N,"LI",{});var N5e=s(qu);Zoe=n(N5e,"STRONG",{});var OQr=s(Zoe);R6o=r(OQr,"reformer"),OQr.forEach(t),S6o=r(N5e," \u2014 "),I$=n(N5e,"A",{href:!0});var XQr=s(I$);P6o=r(XQr,"ReformerModelWithLMHead"),XQr.forEach(t),$6o=r(N5e," (Reformer model)"),N5e.forEach(t),I6o=i(N),Gu=n(N,"LI",{});var D5e=s(Gu);ere=n(D5e,"STRONG",{});var VQr=s(ere);N6o=r(VQr,"rembert"),VQr.forEach(t),D6o=r(D5e," \u2014 "),N$=n(D5e,"A",{href:!0});var zQr=s(N$);j6o=r(zQr,"RemBertForCausalLM"),zQr.forEach(t),q6o=r(D5e," (RemBERT model)"),D5e.forEach(t),G6o=i(N),Ou=n(N,"LI",{});var j5e=s(Ou);ore=n(j5e,"STRONG",{});var WQr=s(ore);O6o=r(WQr,"roberta"),WQr.forEach(t),X6o=r(j5e," \u2014 "),D$=n(j5e,"A",{href:!0});var QQr=s(D$);V6o=r(QQr,"RobertaForCausalLM"),QQr.forEach(t),z6o=r(j5e," (RoBERTa model)"),j5e.forEach(t),W6o=i(N),Xu=n(N,"LI",{});var q5e=s(Xu);rre=n(q5e,"STRONG",{});var HQr=s(rre);Q6o=r(HQr,"roformer"),HQr.forEach(t),H6o=r(q5e," \u2014 "),j$=n(q5e,"A",{href:!0});var UQr=s(j$);U6o=r(UQr,"RoFormerForCausalLM"),UQr.forEach(t),J6o=r(q5e," (RoFormer model)"),q5e.forEach(t),Y6o=i(N),Vu=n(N,"LI",{});var G5e=s(Vu);tre=n(G5e,"STRONG",{});var JQr=s(tre);K6o=r(JQr,"speech_to_text_2"),JQr.forEach(t),Z6o=r(G5e," \u2014 "),q$=n(G5e,"A",{href:!0});var YQr=s(q$);ebo=r(YQr,"Speech2Text2ForCausalLM"),YQr.forEach(t),obo=r(G5e," (Speech2Text2 model)"),G5e.forEach(t),rbo=i(N),zu=n(N,"LI",{});var O5e=s(zu);are=n(O5e,"STRONG",{});var KQr=s(are);tbo=r(KQr,"transfo-xl"),KQr.forEach(t),abo=r(O5e," \u2014 "),G$=n(O5e,"A",{href:!0});var ZQr=s(G$);nbo=r(ZQr,"TransfoXLLMHeadModel"),ZQr.forEach(t),sbo=r(O5e," (Transformer-XL model)"),O5e.forEach(t),lbo=i(N),Wu=n(N,"LI",{});var X5e=s(Wu);nre=n(X5e,"STRONG",{});var eHr=s(nre);ibo=r(eHr,"trocr"),eHr.forEach(t),dbo=r(X5e," \u2014 "),O$=n(X5e,"A",{href:!0});var oHr=s(O$);cbo=r(oHr,"TrOCRForCausalLM"),oHr.forEach(t),fbo=r(X5e," (TrOCR model)"),X5e.forEach(t),mbo=i(N),Qu=n(N,"LI",{});var V5e=s(Qu);sre=n(V5e,"STRONG",{});var rHr=s(sre);gbo=r(rHr,"xglm"),rHr.forEach(t),hbo=r(V5e," \u2014 "),X$=n(V5e,"A",{href:!0});var tHr=s(X$);pbo=r(tHr,"XGLMForCausalLM"),tHr.forEach(t),_bo=r(V5e," (XGLM model)"),V5e.forEach(t),ubo=i(N),Hu=n(N,"LI",{});var z5e=s(Hu);lre=n(z5e,"STRONG",{});var aHr=s(lre);bbo=r(aHr,"xlm"),aHr.forEach(t),vbo=r(z5e," \u2014 "),V$=n(z5e,"A",{href:!0});var nHr=s(V$);Tbo=r(nHr,"XLMWithLMHeadModel"),nHr.forEach(t),Fbo=r(z5e," (XLM model)"),z5e.forEach(t),Cbo=i(N),Uu=n(N,"LI",{});var W5e=s(Uu);ire=n(W5e,"STRONG",{});var sHr=s(ire);Mbo=r(sHr,"xlm-prophetnet"),sHr.forEach(t),Ebo=r(W5e," \u2014 "),z$=n(W5e,"A",{href:!0});var lHr=s(z$);ybo=r(lHr,"XLMProphetNetForCausalLM"),lHr.forEach(t),wbo=r(W5e," (XLMProphetNet model)"),W5e.forEach(t),Abo=i(N),Ju=n(N,"LI",{});var Q5e=s(Ju);dre=n(Q5e,"STRONG",{});var iHr=s(dre);Lbo=r(iHr,"xlm-roberta"),iHr.forEach(t),Bbo=r(Q5e," \u2014 "),W$=n(Q5e,"A",{href:!0});var dHr=s(W$);xbo=r(dHr,"XLMRobertaForCausalLM"),dHr.forEach(t),kbo=r(Q5e," (XLM-RoBERTa model)"),Q5e.forEach(t),Rbo=i(N),Yu=n(N,"LI",{});var H5e=s(Yu);cre=n(H5e,"STRONG",{});var cHr=s(cre);Sbo=r(cHr,"xlm-roberta-xl"),cHr.forEach(t),Pbo=r(H5e," \u2014 "),Q$=n(H5e,"A",{href:!0});var fHr=s(Q$);$bo=r(fHr,"XLMRobertaXLForCausalLM"),fHr.forEach(t),Ibo=r(H5e," (XLM-RoBERTa-XL model)"),H5e.forEach(t),Nbo=i(N),Ku=n(N,"LI",{});var U5e=s(Ku);fre=n(U5e,"STRONG",{});var mHr=s(fre);Dbo=r(mHr,"xlnet"),mHr.forEach(t),jbo=r(U5e," \u2014 "),H$=n(U5e,"A",{href:!0});var gHr=s(H$);qbo=r(gHr,"XLNetLMHeadModel"),gHr.forEach(t),Gbo=r(U5e," (XLNet model)"),U5e.forEach(t),N.forEach(t),Obo=i(Ot),Zu=n(Ot,"P",{});var J5e=s(Zu);Xbo=r(J5e,"The model is set in evaluation mode by default using "),mre=n(J5e,"CODE",{});var hHr=s(mre);Vbo=r(hHr,"model.eval()"),hHr.forEach(t),zbo=r(J5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gre=n(J5e,"CODE",{});var pHr=s(gre);Wbo=r(pHr,"model.train()"),pHr.forEach(t),J5e.forEach(t),Qbo=i(Ot),hre=n(Ot,"P",{});var _Hr=s(hre);Hbo=r(_Hr,"Examples:"),_Hr.forEach(t),Ubo=i(Ot),m(dy.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),$ke=i(c),nd=n(c,"H2",{class:!0});var VSe=s(nd);e1=n(VSe,"A",{id:!0,class:!0,href:!0});var uHr=s(e1);pre=n(uHr,"SPAN",{});var bHr=s(pre);m(cy.$$.fragment,bHr),bHr.forEach(t),uHr.forEach(t),Jbo=i(VSe),_re=n(VSe,"SPAN",{});var vHr=s(_re);Ybo=r(vHr,"AutoModelForMaskedLM"),vHr.forEach(t),VSe.forEach(t),Ike=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(fy.$$.fragment,Ks),Kbo=i(Ks),sd=n(Ks,"P",{});var dW=s(sd);Zbo=r(dW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ure=n(dW,"CODE",{});var THr=s(ure);evo=r(THr,"from_pretrained()"),THr.forEach(t),ovo=r(dW,"class method or the "),bre=n(dW,"CODE",{});var FHr=s(bre);rvo=r(FHr,"from_config()"),FHr.forEach(t),tvo=r(dW,`class
method.`),dW.forEach(t),avo=i(Ks),my=n(Ks,"P",{});var zSe=s(my);nvo=r(zSe,"This class cannot be instantiated directly using "),vre=n(zSe,"CODE",{});var CHr=s(vre);svo=r(CHr,"__init__()"),CHr.forEach(t),lvo=r(zSe," (throws an error)."),zSe.forEach(t),ivo=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(gy.$$.fragment,Zs),dvo=i(Zs),Tre=n(Zs,"P",{});var MHr=s(Tre);cvo=r(MHr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),MHr.forEach(t),fvo=i(Zs),ld=n(Zs,"P",{});var cW=s(ld);mvo=r(cW,`Note:
Loading a model from its configuration file does `),Fre=n(cW,"STRONG",{});var EHr=s(Fre);gvo=r(EHr,"not"),EHr.forEach(t),hvo=r(cW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cre=n(cW,"CODE",{});var yHr=s(Cre);pvo=r(yHr,"from_pretrained()"),yHr.forEach(t),_vo=r(cW,"to load the model weights."),cW.forEach(t),uvo=i(Zs),Mre=n(Zs,"P",{});var wHr=s(Mre);bvo=r(wHr,"Examples:"),wHr.forEach(t),vvo=i(Zs),m(hy.$$.fragment,Zs),Zs.forEach(t),Tvo=i(Ks),qe=n(Ks,"DIV",{class:!0});var Xt=s(qe);m(py.$$.fragment,Xt),Fvo=i(Xt),Ere=n(Xt,"P",{});var AHr=s(Ere);Cvo=r(AHr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),AHr.forEach(t),Mvo=i(Xt),Qa=n(Xt,"P",{});var _3=s(Qa);Evo=r(_3,"The model class to instantiate is selected based on the "),yre=n(_3,"CODE",{});var LHr=s(yre);yvo=r(LHr,"model_type"),LHr.forEach(t),wvo=r(_3,` property of the config object (either
passed as an argument or loaded from `),wre=n(_3,"CODE",{});var BHr=s(wre);Avo=r(BHr,"pretrained_model_name_or_path"),BHr.forEach(t),Lvo=r(_3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Are=n(_3,"CODE",{});var xHr=s(Are);Bvo=r(xHr,"pretrained_model_name_or_path"),xHr.forEach(t),xvo=r(_3,":"),_3.forEach(t),kvo=i(Xt),I=n(Xt,"UL",{});var D=s(I);o1=n(D,"LI",{});var Y5e=s(o1);Lre=n(Y5e,"STRONG",{});var kHr=s(Lre);Rvo=r(kHr,"albert"),kHr.forEach(t),Svo=r(Y5e," \u2014 "),U$=n(Y5e,"A",{href:!0});var RHr=s(U$);Pvo=r(RHr,"AlbertForMaskedLM"),RHr.forEach(t),$vo=r(Y5e," (ALBERT model)"),Y5e.forEach(t),Ivo=i(D),r1=n(D,"LI",{});var K5e=s(r1);Bre=n(K5e,"STRONG",{});var SHr=s(Bre);Nvo=r(SHr,"bart"),SHr.forEach(t),Dvo=r(K5e," \u2014 "),J$=n(K5e,"A",{href:!0});var PHr=s(J$);jvo=r(PHr,"BartForConditionalGeneration"),PHr.forEach(t),qvo=r(K5e," (BART model)"),K5e.forEach(t),Gvo=i(D),t1=n(D,"LI",{});var Z5e=s(t1);xre=n(Z5e,"STRONG",{});var $Hr=s(xre);Ovo=r($Hr,"bert"),$Hr.forEach(t),Xvo=r(Z5e," \u2014 "),Y$=n(Z5e,"A",{href:!0});var IHr=s(Y$);Vvo=r(IHr,"BertForMaskedLM"),IHr.forEach(t),zvo=r(Z5e," (BERT model)"),Z5e.forEach(t),Wvo=i(D),a1=n(D,"LI",{});var eye=s(a1);kre=n(eye,"STRONG",{});var NHr=s(kre);Qvo=r(NHr,"big_bird"),NHr.forEach(t),Hvo=r(eye," \u2014 "),K$=n(eye,"A",{href:!0});var DHr=s(K$);Uvo=r(DHr,"BigBirdForMaskedLM"),DHr.forEach(t),Jvo=r(eye," (BigBird model)"),eye.forEach(t),Yvo=i(D),n1=n(D,"LI",{});var oye=s(n1);Rre=n(oye,"STRONG",{});var jHr=s(Rre);Kvo=r(jHr,"camembert"),jHr.forEach(t),Zvo=r(oye," \u2014 "),Z$=n(oye,"A",{href:!0});var qHr=s(Z$);eTo=r(qHr,"CamembertForMaskedLM"),qHr.forEach(t),oTo=r(oye," (CamemBERT model)"),oye.forEach(t),rTo=i(D),s1=n(D,"LI",{});var rye=s(s1);Sre=n(rye,"STRONG",{});var GHr=s(Sre);tTo=r(GHr,"convbert"),GHr.forEach(t),aTo=r(rye," \u2014 "),eI=n(rye,"A",{href:!0});var OHr=s(eI);nTo=r(OHr,"ConvBertForMaskedLM"),OHr.forEach(t),sTo=r(rye," (ConvBERT model)"),rye.forEach(t),lTo=i(D),l1=n(D,"LI",{});var tye=s(l1);Pre=n(tye,"STRONG",{});var XHr=s(Pre);iTo=r(XHr,"data2vec-text"),XHr.forEach(t),dTo=r(tye," \u2014 "),oI=n(tye,"A",{href:!0});var VHr=s(oI);cTo=r(VHr,"Data2VecTextForMaskedLM"),VHr.forEach(t),fTo=r(tye," (Data2VecText model)"),tye.forEach(t),mTo=i(D),i1=n(D,"LI",{});var aye=s(i1);$re=n(aye,"STRONG",{});var zHr=s($re);gTo=r(zHr,"deberta"),zHr.forEach(t),hTo=r(aye," \u2014 "),rI=n(aye,"A",{href:!0});var WHr=s(rI);pTo=r(WHr,"DebertaForMaskedLM"),WHr.forEach(t),_To=r(aye," (DeBERTa model)"),aye.forEach(t),uTo=i(D),d1=n(D,"LI",{});var nye=s(d1);Ire=n(nye,"STRONG",{});var QHr=s(Ire);bTo=r(QHr,"deberta-v2"),QHr.forEach(t),vTo=r(nye," \u2014 "),tI=n(nye,"A",{href:!0});var HHr=s(tI);TTo=r(HHr,"DebertaV2ForMaskedLM"),HHr.forEach(t),FTo=r(nye," (DeBERTa-v2 model)"),nye.forEach(t),CTo=i(D),c1=n(D,"LI",{});var sye=s(c1);Nre=n(sye,"STRONG",{});var UHr=s(Nre);MTo=r(UHr,"distilbert"),UHr.forEach(t),ETo=r(sye," \u2014 "),aI=n(sye,"A",{href:!0});var JHr=s(aI);yTo=r(JHr,"DistilBertForMaskedLM"),JHr.forEach(t),wTo=r(sye," (DistilBERT model)"),sye.forEach(t),ATo=i(D),f1=n(D,"LI",{});var lye=s(f1);Dre=n(lye,"STRONG",{});var YHr=s(Dre);LTo=r(YHr,"electra"),YHr.forEach(t),BTo=r(lye," \u2014 "),nI=n(lye,"A",{href:!0});var KHr=s(nI);xTo=r(KHr,"ElectraForMaskedLM"),KHr.forEach(t),kTo=r(lye," (ELECTRA model)"),lye.forEach(t),RTo=i(D),m1=n(D,"LI",{});var iye=s(m1);jre=n(iye,"STRONG",{});var ZHr=s(jre);STo=r(ZHr,"flaubert"),ZHr.forEach(t),PTo=r(iye," \u2014 "),sI=n(iye,"A",{href:!0});var eUr=s(sI);$To=r(eUr,"FlaubertWithLMHeadModel"),eUr.forEach(t),ITo=r(iye," (FlauBERT model)"),iye.forEach(t),NTo=i(D),g1=n(D,"LI",{});var dye=s(g1);qre=n(dye,"STRONG",{});var oUr=s(qre);DTo=r(oUr,"fnet"),oUr.forEach(t),jTo=r(dye," \u2014 "),lI=n(dye,"A",{href:!0});var rUr=s(lI);qTo=r(rUr,"FNetForMaskedLM"),rUr.forEach(t),GTo=r(dye," (FNet model)"),dye.forEach(t),OTo=i(D),h1=n(D,"LI",{});var cye=s(h1);Gre=n(cye,"STRONG",{});var tUr=s(Gre);XTo=r(tUr,"funnel"),tUr.forEach(t),VTo=r(cye," \u2014 "),iI=n(cye,"A",{href:!0});var aUr=s(iI);zTo=r(aUr,"FunnelForMaskedLM"),aUr.forEach(t),WTo=r(cye," (Funnel Transformer model)"),cye.forEach(t),QTo=i(D),p1=n(D,"LI",{});var fye=s(p1);Ore=n(fye,"STRONG",{});var nUr=s(Ore);HTo=r(nUr,"ibert"),nUr.forEach(t),UTo=r(fye," \u2014 "),dI=n(fye,"A",{href:!0});var sUr=s(dI);JTo=r(sUr,"IBertForMaskedLM"),sUr.forEach(t),YTo=r(fye," (I-BERT model)"),fye.forEach(t),KTo=i(D),_1=n(D,"LI",{});var mye=s(_1);Xre=n(mye,"STRONG",{});var lUr=s(Xre);ZTo=r(lUr,"layoutlm"),lUr.forEach(t),eFo=r(mye," \u2014 "),cI=n(mye,"A",{href:!0});var iUr=s(cI);oFo=r(iUr,"LayoutLMForMaskedLM"),iUr.forEach(t),rFo=r(mye," (LayoutLM model)"),mye.forEach(t),tFo=i(D),u1=n(D,"LI",{});var gye=s(u1);Vre=n(gye,"STRONG",{});var dUr=s(Vre);aFo=r(dUr,"longformer"),dUr.forEach(t),nFo=r(gye," \u2014 "),fI=n(gye,"A",{href:!0});var cUr=s(fI);sFo=r(cUr,"LongformerForMaskedLM"),cUr.forEach(t),lFo=r(gye," (Longformer model)"),gye.forEach(t),iFo=i(D),b1=n(D,"LI",{});var hye=s(b1);zre=n(hye,"STRONG",{});var fUr=s(zre);dFo=r(fUr,"mbart"),fUr.forEach(t),cFo=r(hye," \u2014 "),mI=n(hye,"A",{href:!0});var mUr=s(mI);fFo=r(mUr,"MBartForConditionalGeneration"),mUr.forEach(t),mFo=r(hye," (mBART model)"),hye.forEach(t),gFo=i(D),v1=n(D,"LI",{});var pye=s(v1);Wre=n(pye,"STRONG",{});var gUr=s(Wre);hFo=r(gUr,"megatron-bert"),gUr.forEach(t),pFo=r(pye," \u2014 "),gI=n(pye,"A",{href:!0});var hUr=s(gI);_Fo=r(hUr,"MegatronBertForMaskedLM"),hUr.forEach(t),uFo=r(pye," (MegatronBert model)"),pye.forEach(t),bFo=i(D),T1=n(D,"LI",{});var _ye=s(T1);Qre=n(_ye,"STRONG",{});var pUr=s(Qre);vFo=r(pUr,"mobilebert"),pUr.forEach(t),TFo=r(_ye," \u2014 "),hI=n(_ye,"A",{href:!0});var _Ur=s(hI);FFo=r(_Ur,"MobileBertForMaskedLM"),_Ur.forEach(t),CFo=r(_ye," (MobileBERT model)"),_ye.forEach(t),MFo=i(D),F1=n(D,"LI",{});var uye=s(F1);Hre=n(uye,"STRONG",{});var uUr=s(Hre);EFo=r(uUr,"mpnet"),uUr.forEach(t),yFo=r(uye," \u2014 "),pI=n(uye,"A",{href:!0});var bUr=s(pI);wFo=r(bUr,"MPNetForMaskedLM"),bUr.forEach(t),AFo=r(uye," (MPNet model)"),uye.forEach(t),LFo=i(D),C1=n(D,"LI",{});var bye=s(C1);Ure=n(bye,"STRONG",{});var vUr=s(Ure);BFo=r(vUr,"nystromformer"),vUr.forEach(t),xFo=r(bye," \u2014 "),_I=n(bye,"A",{href:!0});var TUr=s(_I);kFo=r(TUr,"NystromformerForMaskedLM"),TUr.forEach(t),RFo=r(bye," (Nystromformer model)"),bye.forEach(t),SFo=i(D),M1=n(D,"LI",{});var vye=s(M1);Jre=n(vye,"STRONG",{});var FUr=s(Jre);PFo=r(FUr,"perceiver"),FUr.forEach(t),$Fo=r(vye," \u2014 "),uI=n(vye,"A",{href:!0});var CUr=s(uI);IFo=r(CUr,"PerceiverForMaskedLM"),CUr.forEach(t),NFo=r(vye," (Perceiver model)"),vye.forEach(t),DFo=i(D),E1=n(D,"LI",{});var Tye=s(E1);Yre=n(Tye,"STRONG",{});var MUr=s(Yre);jFo=r(MUr,"qdqbert"),MUr.forEach(t),qFo=r(Tye," \u2014 "),bI=n(Tye,"A",{href:!0});var EUr=s(bI);GFo=r(EUr,"QDQBertForMaskedLM"),EUr.forEach(t),OFo=r(Tye," (QDQBert model)"),Tye.forEach(t),XFo=i(D),y1=n(D,"LI",{});var Fye=s(y1);Kre=n(Fye,"STRONG",{});var yUr=s(Kre);VFo=r(yUr,"reformer"),yUr.forEach(t),zFo=r(Fye," \u2014 "),vI=n(Fye,"A",{href:!0});var wUr=s(vI);WFo=r(wUr,"ReformerForMaskedLM"),wUr.forEach(t),QFo=r(Fye," (Reformer model)"),Fye.forEach(t),HFo=i(D),w1=n(D,"LI",{});var Cye=s(w1);Zre=n(Cye,"STRONG",{});var AUr=s(Zre);UFo=r(AUr,"rembert"),AUr.forEach(t),JFo=r(Cye," \u2014 "),TI=n(Cye,"A",{href:!0});var LUr=s(TI);YFo=r(LUr,"RemBertForMaskedLM"),LUr.forEach(t),KFo=r(Cye," (RemBERT model)"),Cye.forEach(t),ZFo=i(D),A1=n(D,"LI",{});var Mye=s(A1);ete=n(Mye,"STRONG",{});var BUr=s(ete);eCo=r(BUr,"roberta"),BUr.forEach(t),oCo=r(Mye," \u2014 "),FI=n(Mye,"A",{href:!0});var xUr=s(FI);rCo=r(xUr,"RobertaForMaskedLM"),xUr.forEach(t),tCo=r(Mye," (RoBERTa model)"),Mye.forEach(t),aCo=i(D),L1=n(D,"LI",{});var Eye=s(L1);ote=n(Eye,"STRONG",{});var kUr=s(ote);nCo=r(kUr,"roformer"),kUr.forEach(t),sCo=r(Eye," \u2014 "),CI=n(Eye,"A",{href:!0});var RUr=s(CI);lCo=r(RUr,"RoFormerForMaskedLM"),RUr.forEach(t),iCo=r(Eye," (RoFormer model)"),Eye.forEach(t),dCo=i(D),B1=n(D,"LI",{});var yye=s(B1);rte=n(yye,"STRONG",{});var SUr=s(rte);cCo=r(SUr,"squeezebert"),SUr.forEach(t),fCo=r(yye," \u2014 "),MI=n(yye,"A",{href:!0});var PUr=s(MI);mCo=r(PUr,"SqueezeBertForMaskedLM"),PUr.forEach(t),gCo=r(yye," (SqueezeBERT model)"),yye.forEach(t),hCo=i(D),x1=n(D,"LI",{});var wye=s(x1);tte=n(wye,"STRONG",{});var $Ur=s(tte);pCo=r($Ur,"tapas"),$Ur.forEach(t),_Co=r(wye," \u2014 "),EI=n(wye,"A",{href:!0});var IUr=s(EI);uCo=r(IUr,"TapasForMaskedLM"),IUr.forEach(t),bCo=r(wye," (TAPAS model)"),wye.forEach(t),vCo=i(D),k1=n(D,"LI",{});var Aye=s(k1);ate=n(Aye,"STRONG",{});var NUr=s(ate);TCo=r(NUr,"wav2vec2"),NUr.forEach(t),FCo=r(Aye," \u2014 "),nte=n(Aye,"CODE",{});var DUr=s(nte);CCo=r(DUr,"Wav2Vec2ForMaskedLM"),DUr.forEach(t),MCo=r(Aye,"(Wav2Vec2 model)"),Aye.forEach(t),ECo=i(D),R1=n(D,"LI",{});var Lye=s(R1);ste=n(Lye,"STRONG",{});var jUr=s(ste);yCo=r(jUr,"xlm"),jUr.forEach(t),wCo=r(Lye," \u2014 "),yI=n(Lye,"A",{href:!0});var qUr=s(yI);ACo=r(qUr,"XLMWithLMHeadModel"),qUr.forEach(t),LCo=r(Lye," (XLM model)"),Lye.forEach(t),BCo=i(D),S1=n(D,"LI",{});var Bye=s(S1);lte=n(Bye,"STRONG",{});var GUr=s(lte);xCo=r(GUr,"xlm-roberta"),GUr.forEach(t),kCo=r(Bye," \u2014 "),wI=n(Bye,"A",{href:!0});var OUr=s(wI);RCo=r(OUr,"XLMRobertaForMaskedLM"),OUr.forEach(t),SCo=r(Bye," (XLM-RoBERTa model)"),Bye.forEach(t),PCo=i(D),P1=n(D,"LI",{});var xye=s(P1);ite=n(xye,"STRONG",{});var XUr=s(ite);$Co=r(XUr,"xlm-roberta-xl"),XUr.forEach(t),ICo=r(xye," \u2014 "),AI=n(xye,"A",{href:!0});var VUr=s(AI);NCo=r(VUr,"XLMRobertaXLForMaskedLM"),VUr.forEach(t),DCo=r(xye," (XLM-RoBERTa-XL model)"),xye.forEach(t),jCo=i(D),$1=n(D,"LI",{});var kye=s($1);dte=n(kye,"STRONG",{});var zUr=s(dte);qCo=r(zUr,"yoso"),zUr.forEach(t),GCo=r(kye," \u2014 "),LI=n(kye,"A",{href:!0});var WUr=s(LI);OCo=r(WUr,"YosoForMaskedLM"),WUr.forEach(t),XCo=r(kye," (YOSO model)"),kye.forEach(t),D.forEach(t),VCo=i(Xt),I1=n(Xt,"P",{});var Rye=s(I1);zCo=r(Rye,"The model is set in evaluation mode by default using "),cte=n(Rye,"CODE",{});var QUr=s(cte);WCo=r(QUr,"model.eval()"),QUr.forEach(t),QCo=r(Rye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fte=n(Rye,"CODE",{});var HUr=s(fte);HCo=r(HUr,"model.train()"),HUr.forEach(t),Rye.forEach(t),UCo=i(Xt),mte=n(Xt,"P",{});var UUr=s(mte);JCo=r(UUr,"Examples:"),UUr.forEach(t),YCo=i(Xt),m(_y.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),Nke=i(c),id=n(c,"H2",{class:!0});var WSe=s(id);N1=n(WSe,"A",{id:!0,class:!0,href:!0});var JUr=s(N1);gte=n(JUr,"SPAN",{});var YUr=s(gte);m(uy.$$.fragment,YUr),YUr.forEach(t),JUr.forEach(t),KCo=i(WSe),hte=n(WSe,"SPAN",{});var KUr=s(hte);ZCo=r(KUr,"AutoModelForSeq2SeqLM"),KUr.forEach(t),WSe.forEach(t),Dke=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(by.$$.fragment,el),eMo=i(el),dd=n(el,"P",{});var fW=s(dd);oMo=r(fW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pte=n(fW,"CODE",{});var ZUr=s(pte);rMo=r(ZUr,"from_pretrained()"),ZUr.forEach(t),tMo=r(fW,"class method or the "),_te=n(fW,"CODE",{});var eJr=s(_te);aMo=r(eJr,"from_config()"),eJr.forEach(t),nMo=r(fW,`class
method.`),fW.forEach(t),sMo=i(el),vy=n(el,"P",{});var QSe=s(vy);lMo=r(QSe,"This class cannot be instantiated directly using "),ute=n(QSe,"CODE",{});var oJr=s(ute);iMo=r(oJr,"__init__()"),oJr.forEach(t),dMo=r(QSe," (throws an error)."),QSe.forEach(t),cMo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(Ty.$$.fragment,ol),fMo=i(ol),bte=n(ol,"P",{});var rJr=s(bte);mMo=r(rJr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rJr.forEach(t),gMo=i(ol),cd=n(ol,"P",{});var mW=s(cd);hMo=r(mW,`Note:
Loading a model from its configuration file does `),vte=n(mW,"STRONG",{});var tJr=s(vte);pMo=r(tJr,"not"),tJr.forEach(t),_Mo=r(mW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tte=n(mW,"CODE",{});var aJr=s(Tte);uMo=r(aJr,"from_pretrained()"),aJr.forEach(t),bMo=r(mW,"to load the model weights."),mW.forEach(t),vMo=i(ol),Fte=n(ol,"P",{});var nJr=s(Fte);TMo=r(nJr,"Examples:"),nJr.forEach(t),FMo=i(ol),m(Fy.$$.fragment,ol),ol.forEach(t),CMo=i(el),Ge=n(el,"DIV",{class:!0});var Vt=s(Ge);m(Cy.$$.fragment,Vt),MMo=i(Vt),Cte=n(Vt,"P",{});var sJr=s(Cte);EMo=r(sJr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sJr.forEach(t),yMo=i(Vt),Ha=n(Vt,"P",{});var u3=s(Ha);wMo=r(u3,"The model class to instantiate is selected based on the "),Mte=n(u3,"CODE",{});var lJr=s(Mte);AMo=r(lJr,"model_type"),lJr.forEach(t),LMo=r(u3,` property of the config object (either
passed as an argument or loaded from `),Ete=n(u3,"CODE",{});var iJr=s(Ete);BMo=r(iJr,"pretrained_model_name_or_path"),iJr.forEach(t),xMo=r(u3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yte=n(u3,"CODE",{});var dJr=s(yte);kMo=r(dJr,"pretrained_model_name_or_path"),dJr.forEach(t),RMo=r(u3,":"),u3.forEach(t),SMo=i(Vt),se=n(Vt,"UL",{});var ie=s(se);D1=n(ie,"LI",{});var Sye=s(D1);wte=n(Sye,"STRONG",{});var cJr=s(wte);PMo=r(cJr,"bart"),cJr.forEach(t),$Mo=r(Sye," \u2014 "),BI=n(Sye,"A",{href:!0});var fJr=s(BI);IMo=r(fJr,"BartForConditionalGeneration"),fJr.forEach(t),NMo=r(Sye," (BART model)"),Sye.forEach(t),DMo=i(ie),j1=n(ie,"LI",{});var Pye=s(j1);Ate=n(Pye,"STRONG",{});var mJr=s(Ate);jMo=r(mJr,"bigbird_pegasus"),mJr.forEach(t),qMo=r(Pye," \u2014 "),xI=n(Pye,"A",{href:!0});var gJr=s(xI);GMo=r(gJr,"BigBirdPegasusForConditionalGeneration"),gJr.forEach(t),OMo=r(Pye," (BigBirdPegasus model)"),Pye.forEach(t),XMo=i(ie),q1=n(ie,"LI",{});var $ye=s(q1);Lte=n($ye,"STRONG",{});var hJr=s(Lte);VMo=r(hJr,"blenderbot"),hJr.forEach(t),zMo=r($ye," \u2014 "),kI=n($ye,"A",{href:!0});var pJr=s(kI);WMo=r(pJr,"BlenderbotForConditionalGeneration"),pJr.forEach(t),QMo=r($ye," (Blenderbot model)"),$ye.forEach(t),HMo=i(ie),G1=n(ie,"LI",{});var Iye=s(G1);Bte=n(Iye,"STRONG",{});var _Jr=s(Bte);UMo=r(_Jr,"blenderbot-small"),_Jr.forEach(t),JMo=r(Iye," \u2014 "),RI=n(Iye,"A",{href:!0});var uJr=s(RI);YMo=r(uJr,"BlenderbotSmallForConditionalGeneration"),uJr.forEach(t),KMo=r(Iye," (BlenderbotSmall model)"),Iye.forEach(t),ZMo=i(ie),O1=n(ie,"LI",{});var Nye=s(O1);xte=n(Nye,"STRONG",{});var bJr=s(xte);e4o=r(bJr,"encoder-decoder"),bJr.forEach(t),o4o=r(Nye," \u2014 "),SI=n(Nye,"A",{href:!0});var vJr=s(SI);r4o=r(vJr,"EncoderDecoderModel"),vJr.forEach(t),t4o=r(Nye," (Encoder decoder model)"),Nye.forEach(t),a4o=i(ie),X1=n(ie,"LI",{});var Dye=s(X1);kte=n(Dye,"STRONG",{});var TJr=s(kte);n4o=r(TJr,"fsmt"),TJr.forEach(t),s4o=r(Dye," \u2014 "),PI=n(Dye,"A",{href:!0});var FJr=s(PI);l4o=r(FJr,"FSMTForConditionalGeneration"),FJr.forEach(t),i4o=r(Dye," (FairSeq Machine-Translation model)"),Dye.forEach(t),d4o=i(ie),V1=n(ie,"LI",{});var jye=s(V1);Rte=n(jye,"STRONG",{});var CJr=s(Rte);c4o=r(CJr,"led"),CJr.forEach(t),f4o=r(jye," \u2014 "),$I=n(jye,"A",{href:!0});var MJr=s($I);m4o=r(MJr,"LEDForConditionalGeneration"),MJr.forEach(t),g4o=r(jye," (LED model)"),jye.forEach(t),h4o=i(ie),z1=n(ie,"LI",{});var qye=s(z1);Ste=n(qye,"STRONG",{});var EJr=s(Ste);p4o=r(EJr,"m2m_100"),EJr.forEach(t),_4o=r(qye," \u2014 "),II=n(qye,"A",{href:!0});var yJr=s(II);u4o=r(yJr,"M2M100ForConditionalGeneration"),yJr.forEach(t),b4o=r(qye," (M2M100 model)"),qye.forEach(t),v4o=i(ie),W1=n(ie,"LI",{});var Gye=s(W1);Pte=n(Gye,"STRONG",{});var wJr=s(Pte);T4o=r(wJr,"marian"),wJr.forEach(t),F4o=r(Gye," \u2014 "),NI=n(Gye,"A",{href:!0});var AJr=s(NI);C4o=r(AJr,"MarianMTModel"),AJr.forEach(t),M4o=r(Gye," (Marian model)"),Gye.forEach(t),E4o=i(ie),Q1=n(ie,"LI",{});var Oye=s(Q1);$te=n(Oye,"STRONG",{});var LJr=s($te);y4o=r(LJr,"mbart"),LJr.forEach(t),w4o=r(Oye," \u2014 "),DI=n(Oye,"A",{href:!0});var BJr=s(DI);A4o=r(BJr,"MBartForConditionalGeneration"),BJr.forEach(t),L4o=r(Oye," (mBART model)"),Oye.forEach(t),B4o=i(ie),H1=n(ie,"LI",{});var Xye=s(H1);Ite=n(Xye,"STRONG",{});var xJr=s(Ite);x4o=r(xJr,"mt5"),xJr.forEach(t),k4o=r(Xye," \u2014 "),jI=n(Xye,"A",{href:!0});var kJr=s(jI);R4o=r(kJr,"MT5ForConditionalGeneration"),kJr.forEach(t),S4o=r(Xye," (mT5 model)"),Xye.forEach(t),P4o=i(ie),U1=n(ie,"LI",{});var Vye=s(U1);Nte=n(Vye,"STRONG",{});var RJr=s(Nte);$4o=r(RJr,"pegasus"),RJr.forEach(t),I4o=r(Vye," \u2014 "),qI=n(Vye,"A",{href:!0});var SJr=s(qI);N4o=r(SJr,"PegasusForConditionalGeneration"),SJr.forEach(t),D4o=r(Vye," (Pegasus model)"),Vye.forEach(t),j4o=i(ie),J1=n(ie,"LI",{});var zye=s(J1);Dte=n(zye,"STRONG",{});var PJr=s(Dte);q4o=r(PJr,"plbart"),PJr.forEach(t),G4o=r(zye," \u2014 "),GI=n(zye,"A",{href:!0});var $Jr=s(GI);O4o=r($Jr,"PLBartForConditionalGeneration"),$Jr.forEach(t),X4o=r(zye," (PLBart model)"),zye.forEach(t),V4o=i(ie),Y1=n(ie,"LI",{});var Wye=s(Y1);jte=n(Wye,"STRONG",{});var IJr=s(jte);z4o=r(IJr,"prophetnet"),IJr.forEach(t),W4o=r(Wye," \u2014 "),OI=n(Wye,"A",{href:!0});var NJr=s(OI);Q4o=r(NJr,"ProphetNetForConditionalGeneration"),NJr.forEach(t),H4o=r(Wye," (ProphetNet model)"),Wye.forEach(t),U4o=i(ie),K1=n(ie,"LI",{});var Qye=s(K1);qte=n(Qye,"STRONG",{});var DJr=s(qte);J4o=r(DJr,"t5"),DJr.forEach(t),Y4o=r(Qye," \u2014 "),XI=n(Qye,"A",{href:!0});var jJr=s(XI);K4o=r(jJr,"T5ForConditionalGeneration"),jJr.forEach(t),Z4o=r(Qye," (T5 model)"),Qye.forEach(t),eEo=i(ie),Z1=n(ie,"LI",{});var Hye=s(Z1);Gte=n(Hye,"STRONG",{});var qJr=s(Gte);oEo=r(qJr,"xlm-prophetnet"),qJr.forEach(t),rEo=r(Hye," \u2014 "),VI=n(Hye,"A",{href:!0});var GJr=s(VI);tEo=r(GJr,"XLMProphetNetForConditionalGeneration"),GJr.forEach(t),aEo=r(Hye," (XLMProphetNet model)"),Hye.forEach(t),ie.forEach(t),nEo=i(Vt),e2=n(Vt,"P",{});var Uye=s(e2);sEo=r(Uye,"The model is set in evaluation mode by default using "),Ote=n(Uye,"CODE",{});var OJr=s(Ote);lEo=r(OJr,"model.eval()"),OJr.forEach(t),iEo=r(Uye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xte=n(Uye,"CODE",{});var XJr=s(Xte);dEo=r(XJr,"model.train()"),XJr.forEach(t),Uye.forEach(t),cEo=i(Vt),Vte=n(Vt,"P",{});var VJr=s(Vte);fEo=r(VJr,"Examples:"),VJr.forEach(t),mEo=i(Vt),m(My.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),jke=i(c),fd=n(c,"H2",{class:!0});var HSe=s(fd);o2=n(HSe,"A",{id:!0,class:!0,href:!0});var zJr=s(o2);zte=n(zJr,"SPAN",{});var WJr=s(zte);m(Ey.$$.fragment,WJr),WJr.forEach(t),zJr.forEach(t),gEo=i(HSe),Wte=n(HSe,"SPAN",{});var QJr=s(Wte);hEo=r(QJr,"AutoModelForSequenceClassification"),QJr.forEach(t),HSe.forEach(t),qke=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(yy.$$.fragment,rl),pEo=i(rl),md=n(rl,"P",{});var gW=s(md);_Eo=r(gW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Qte=n(gW,"CODE",{});var HJr=s(Qte);uEo=r(HJr,"from_pretrained()"),HJr.forEach(t),bEo=r(gW,"class method or the "),Hte=n(gW,"CODE",{});var UJr=s(Hte);vEo=r(UJr,"from_config()"),UJr.forEach(t),TEo=r(gW,`class
method.`),gW.forEach(t),FEo=i(rl),wy=n(rl,"P",{});var USe=s(wy);CEo=r(USe,"This class cannot be instantiated directly using "),Ute=n(USe,"CODE",{});var JJr=s(Ute);MEo=r(JJr,"__init__()"),JJr.forEach(t),EEo=r(USe," (throws an error)."),USe.forEach(t),yEo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(Ay.$$.fragment,tl),wEo=i(tl),Jte=n(tl,"P",{});var YJr=s(Jte);AEo=r(YJr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),YJr.forEach(t),LEo=i(tl),gd=n(tl,"P",{});var hW=s(gd);BEo=r(hW,`Note:
Loading a model from its configuration file does `),Yte=n(hW,"STRONG",{});var KJr=s(Yte);xEo=r(KJr,"not"),KJr.forEach(t),kEo=r(hW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kte=n(hW,"CODE",{});var ZJr=s(Kte);REo=r(ZJr,"from_pretrained()"),ZJr.forEach(t),SEo=r(hW,"to load the model weights."),hW.forEach(t),PEo=i(tl),Zte=n(tl,"P",{});var eYr=s(Zte);$Eo=r(eYr,"Examples:"),eYr.forEach(t),IEo=i(tl),m(Ly.$$.fragment,tl),tl.forEach(t),NEo=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(By.$$.fragment,zt),DEo=i(zt),eae=n(zt,"P",{});var oYr=s(eae);jEo=r(oYr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oYr.forEach(t),qEo=i(zt),Ua=n(zt,"P",{});var b3=s(Ua);GEo=r(b3,"The model class to instantiate is selected based on the "),oae=n(b3,"CODE",{});var rYr=s(oae);OEo=r(rYr,"model_type"),rYr.forEach(t),XEo=r(b3,` property of the config object (either
passed as an argument or loaded from `),rae=n(b3,"CODE",{});var tYr=s(rae);VEo=r(tYr,"pretrained_model_name_or_path"),tYr.forEach(t),zEo=r(b3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tae=n(b3,"CODE",{});var aYr=s(tae);WEo=r(aYr,"pretrained_model_name_or_path"),aYr.forEach(t),QEo=r(b3,":"),b3.forEach(t),HEo=i(zt),A=n(zt,"UL",{});var L=s(A);r2=n(L,"LI",{});var Jye=s(r2);aae=n(Jye,"STRONG",{});var nYr=s(aae);UEo=r(nYr,"albert"),nYr.forEach(t),JEo=r(Jye," \u2014 "),zI=n(Jye,"A",{href:!0});var sYr=s(zI);YEo=r(sYr,"AlbertForSequenceClassification"),sYr.forEach(t),KEo=r(Jye," (ALBERT model)"),Jye.forEach(t),ZEo=i(L),t2=n(L,"LI",{});var Yye=s(t2);nae=n(Yye,"STRONG",{});var lYr=s(nae);e3o=r(lYr,"bart"),lYr.forEach(t),o3o=r(Yye," \u2014 "),WI=n(Yye,"A",{href:!0});var iYr=s(WI);r3o=r(iYr,"BartForSequenceClassification"),iYr.forEach(t),t3o=r(Yye," (BART model)"),Yye.forEach(t),a3o=i(L),a2=n(L,"LI",{});var Kye=s(a2);sae=n(Kye,"STRONG",{});var dYr=s(sae);n3o=r(dYr,"bert"),dYr.forEach(t),s3o=r(Kye," \u2014 "),QI=n(Kye,"A",{href:!0});var cYr=s(QI);l3o=r(cYr,"BertForSequenceClassification"),cYr.forEach(t),i3o=r(Kye," (BERT model)"),Kye.forEach(t),d3o=i(L),n2=n(L,"LI",{});var Zye=s(n2);lae=n(Zye,"STRONG",{});var fYr=s(lae);c3o=r(fYr,"big_bird"),fYr.forEach(t),f3o=r(Zye," \u2014 "),HI=n(Zye,"A",{href:!0});var mYr=s(HI);m3o=r(mYr,"BigBirdForSequenceClassification"),mYr.forEach(t),g3o=r(Zye," (BigBird model)"),Zye.forEach(t),h3o=i(L),s2=n(L,"LI",{});var ewe=s(s2);iae=n(ewe,"STRONG",{});var gYr=s(iae);p3o=r(gYr,"bigbird_pegasus"),gYr.forEach(t),_3o=r(ewe," \u2014 "),UI=n(ewe,"A",{href:!0});var hYr=s(UI);u3o=r(hYr,"BigBirdPegasusForSequenceClassification"),hYr.forEach(t),b3o=r(ewe," (BigBirdPegasus model)"),ewe.forEach(t),v3o=i(L),l2=n(L,"LI",{});var owe=s(l2);dae=n(owe,"STRONG",{});var pYr=s(dae);T3o=r(pYr,"camembert"),pYr.forEach(t),F3o=r(owe," \u2014 "),JI=n(owe,"A",{href:!0});var _Yr=s(JI);C3o=r(_Yr,"CamembertForSequenceClassification"),_Yr.forEach(t),M3o=r(owe," (CamemBERT model)"),owe.forEach(t),E3o=i(L),i2=n(L,"LI",{});var rwe=s(i2);cae=n(rwe,"STRONG",{});var uYr=s(cae);y3o=r(uYr,"canine"),uYr.forEach(t),w3o=r(rwe," \u2014 "),YI=n(rwe,"A",{href:!0});var bYr=s(YI);A3o=r(bYr,"CanineForSequenceClassification"),bYr.forEach(t),L3o=r(rwe," (Canine model)"),rwe.forEach(t),B3o=i(L),d2=n(L,"LI",{});var twe=s(d2);fae=n(twe,"STRONG",{});var vYr=s(fae);x3o=r(vYr,"convbert"),vYr.forEach(t),k3o=r(twe," \u2014 "),KI=n(twe,"A",{href:!0});var TYr=s(KI);R3o=r(TYr,"ConvBertForSequenceClassification"),TYr.forEach(t),S3o=r(twe," (ConvBERT model)"),twe.forEach(t),P3o=i(L),c2=n(L,"LI",{});var awe=s(c2);mae=n(awe,"STRONG",{});var FYr=s(mae);$3o=r(FYr,"ctrl"),FYr.forEach(t),I3o=r(awe," \u2014 "),ZI=n(awe,"A",{href:!0});var CYr=s(ZI);N3o=r(CYr,"CTRLForSequenceClassification"),CYr.forEach(t),D3o=r(awe," (CTRL model)"),awe.forEach(t),j3o=i(L),f2=n(L,"LI",{});var nwe=s(f2);gae=n(nwe,"STRONG",{});var MYr=s(gae);q3o=r(MYr,"data2vec-text"),MYr.forEach(t),G3o=r(nwe," \u2014 "),eN=n(nwe,"A",{href:!0});var EYr=s(eN);O3o=r(EYr,"Data2VecTextForSequenceClassification"),EYr.forEach(t),X3o=r(nwe," (Data2VecText model)"),nwe.forEach(t),V3o=i(L),m2=n(L,"LI",{});var swe=s(m2);hae=n(swe,"STRONG",{});var yYr=s(hae);z3o=r(yYr,"deberta"),yYr.forEach(t),W3o=r(swe," \u2014 "),oN=n(swe,"A",{href:!0});var wYr=s(oN);Q3o=r(wYr,"DebertaForSequenceClassification"),wYr.forEach(t),H3o=r(swe," (DeBERTa model)"),swe.forEach(t),U3o=i(L),g2=n(L,"LI",{});var lwe=s(g2);pae=n(lwe,"STRONG",{});var AYr=s(pae);J3o=r(AYr,"deberta-v2"),AYr.forEach(t),Y3o=r(lwe," \u2014 "),rN=n(lwe,"A",{href:!0});var LYr=s(rN);K3o=r(LYr,"DebertaV2ForSequenceClassification"),LYr.forEach(t),Z3o=r(lwe," (DeBERTa-v2 model)"),lwe.forEach(t),e5o=i(L),h2=n(L,"LI",{});var iwe=s(h2);_ae=n(iwe,"STRONG",{});var BYr=s(_ae);o5o=r(BYr,"distilbert"),BYr.forEach(t),r5o=r(iwe," \u2014 "),tN=n(iwe,"A",{href:!0});var xYr=s(tN);t5o=r(xYr,"DistilBertForSequenceClassification"),xYr.forEach(t),a5o=r(iwe," (DistilBERT model)"),iwe.forEach(t),n5o=i(L),p2=n(L,"LI",{});var dwe=s(p2);uae=n(dwe,"STRONG",{});var kYr=s(uae);s5o=r(kYr,"electra"),kYr.forEach(t),l5o=r(dwe," \u2014 "),aN=n(dwe,"A",{href:!0});var RYr=s(aN);i5o=r(RYr,"ElectraForSequenceClassification"),RYr.forEach(t),d5o=r(dwe," (ELECTRA model)"),dwe.forEach(t),c5o=i(L),_2=n(L,"LI",{});var cwe=s(_2);bae=n(cwe,"STRONG",{});var SYr=s(bae);f5o=r(SYr,"flaubert"),SYr.forEach(t),m5o=r(cwe," \u2014 "),nN=n(cwe,"A",{href:!0});var PYr=s(nN);g5o=r(PYr,"FlaubertForSequenceClassification"),PYr.forEach(t),h5o=r(cwe," (FlauBERT model)"),cwe.forEach(t),p5o=i(L),u2=n(L,"LI",{});var fwe=s(u2);vae=n(fwe,"STRONG",{});var $Yr=s(vae);_5o=r($Yr,"fnet"),$Yr.forEach(t),u5o=r(fwe," \u2014 "),sN=n(fwe,"A",{href:!0});var IYr=s(sN);b5o=r(IYr,"FNetForSequenceClassification"),IYr.forEach(t),v5o=r(fwe," (FNet model)"),fwe.forEach(t),T5o=i(L),b2=n(L,"LI",{});var mwe=s(b2);Tae=n(mwe,"STRONG",{});var NYr=s(Tae);F5o=r(NYr,"funnel"),NYr.forEach(t),C5o=r(mwe," \u2014 "),lN=n(mwe,"A",{href:!0});var DYr=s(lN);M5o=r(DYr,"FunnelForSequenceClassification"),DYr.forEach(t),E5o=r(mwe," (Funnel Transformer model)"),mwe.forEach(t),y5o=i(L),v2=n(L,"LI",{});var gwe=s(v2);Fae=n(gwe,"STRONG",{});var jYr=s(Fae);w5o=r(jYr,"gpt2"),jYr.forEach(t),A5o=r(gwe," \u2014 "),iN=n(gwe,"A",{href:!0});var qYr=s(iN);L5o=r(qYr,"GPT2ForSequenceClassification"),qYr.forEach(t),B5o=r(gwe," (OpenAI GPT-2 model)"),gwe.forEach(t),x5o=i(L),T2=n(L,"LI",{});var hwe=s(T2);Cae=n(hwe,"STRONG",{});var GYr=s(Cae);k5o=r(GYr,"gpt_neo"),GYr.forEach(t),R5o=r(hwe," \u2014 "),dN=n(hwe,"A",{href:!0});var OYr=s(dN);S5o=r(OYr,"GPTNeoForSequenceClassification"),OYr.forEach(t),P5o=r(hwe," (GPT Neo model)"),hwe.forEach(t),$5o=i(L),F2=n(L,"LI",{});var pwe=s(F2);Mae=n(pwe,"STRONG",{});var XYr=s(Mae);I5o=r(XYr,"gptj"),XYr.forEach(t),N5o=r(pwe," \u2014 "),cN=n(pwe,"A",{href:!0});var VYr=s(cN);D5o=r(VYr,"GPTJForSequenceClassification"),VYr.forEach(t),j5o=r(pwe," (GPT-J model)"),pwe.forEach(t),q5o=i(L),C2=n(L,"LI",{});var _we=s(C2);Eae=n(_we,"STRONG",{});var zYr=s(Eae);G5o=r(zYr,"ibert"),zYr.forEach(t),O5o=r(_we," \u2014 "),fN=n(_we,"A",{href:!0});var WYr=s(fN);X5o=r(WYr,"IBertForSequenceClassification"),WYr.forEach(t),V5o=r(_we," (I-BERT model)"),_we.forEach(t),z5o=i(L),M2=n(L,"LI",{});var uwe=s(M2);yae=n(uwe,"STRONG",{});var QYr=s(yae);W5o=r(QYr,"layoutlm"),QYr.forEach(t),Q5o=r(uwe," \u2014 "),mN=n(uwe,"A",{href:!0});var HYr=s(mN);H5o=r(HYr,"LayoutLMForSequenceClassification"),HYr.forEach(t),U5o=r(uwe," (LayoutLM model)"),uwe.forEach(t),J5o=i(L),E2=n(L,"LI",{});var bwe=s(E2);wae=n(bwe,"STRONG",{});var UYr=s(wae);Y5o=r(UYr,"layoutlmv2"),UYr.forEach(t),K5o=r(bwe," \u2014 "),gN=n(bwe,"A",{href:!0});var JYr=s(gN);Z5o=r(JYr,"LayoutLMv2ForSequenceClassification"),JYr.forEach(t),eyo=r(bwe," (LayoutLMv2 model)"),bwe.forEach(t),oyo=i(L),y2=n(L,"LI",{});var vwe=s(y2);Aae=n(vwe,"STRONG",{});var YYr=s(Aae);ryo=r(YYr,"led"),YYr.forEach(t),tyo=r(vwe," \u2014 "),hN=n(vwe,"A",{href:!0});var KYr=s(hN);ayo=r(KYr,"LEDForSequenceClassification"),KYr.forEach(t),nyo=r(vwe," (LED model)"),vwe.forEach(t),syo=i(L),w2=n(L,"LI",{});var Twe=s(w2);Lae=n(Twe,"STRONG",{});var ZYr=s(Lae);lyo=r(ZYr,"longformer"),ZYr.forEach(t),iyo=r(Twe," \u2014 "),pN=n(Twe,"A",{href:!0});var eKr=s(pN);dyo=r(eKr,"LongformerForSequenceClassification"),eKr.forEach(t),cyo=r(Twe," (Longformer model)"),Twe.forEach(t),fyo=i(L),A2=n(L,"LI",{});var Fwe=s(A2);Bae=n(Fwe,"STRONG",{});var oKr=s(Bae);myo=r(oKr,"mbart"),oKr.forEach(t),gyo=r(Fwe," \u2014 "),_N=n(Fwe,"A",{href:!0});var rKr=s(_N);hyo=r(rKr,"MBartForSequenceClassification"),rKr.forEach(t),pyo=r(Fwe," (mBART model)"),Fwe.forEach(t),_yo=i(L),L2=n(L,"LI",{});var Cwe=s(L2);xae=n(Cwe,"STRONG",{});var tKr=s(xae);uyo=r(tKr,"megatron-bert"),tKr.forEach(t),byo=r(Cwe," \u2014 "),uN=n(Cwe,"A",{href:!0});var aKr=s(uN);vyo=r(aKr,"MegatronBertForSequenceClassification"),aKr.forEach(t),Tyo=r(Cwe," (MegatronBert model)"),Cwe.forEach(t),Fyo=i(L),B2=n(L,"LI",{});var Mwe=s(B2);kae=n(Mwe,"STRONG",{});var nKr=s(kae);Cyo=r(nKr,"mobilebert"),nKr.forEach(t),Myo=r(Mwe," \u2014 "),bN=n(Mwe,"A",{href:!0});var sKr=s(bN);Eyo=r(sKr,"MobileBertForSequenceClassification"),sKr.forEach(t),yyo=r(Mwe," (MobileBERT model)"),Mwe.forEach(t),wyo=i(L),x2=n(L,"LI",{});var Ewe=s(x2);Rae=n(Ewe,"STRONG",{});var lKr=s(Rae);Ayo=r(lKr,"mpnet"),lKr.forEach(t),Lyo=r(Ewe," \u2014 "),vN=n(Ewe,"A",{href:!0});var iKr=s(vN);Byo=r(iKr,"MPNetForSequenceClassification"),iKr.forEach(t),xyo=r(Ewe," (MPNet model)"),Ewe.forEach(t),kyo=i(L),k2=n(L,"LI",{});var ywe=s(k2);Sae=n(ywe,"STRONG",{});var dKr=s(Sae);Ryo=r(dKr,"nystromformer"),dKr.forEach(t),Syo=r(ywe," \u2014 "),TN=n(ywe,"A",{href:!0});var cKr=s(TN);Pyo=r(cKr,"NystromformerForSequenceClassification"),cKr.forEach(t),$yo=r(ywe," (Nystromformer model)"),ywe.forEach(t),Iyo=i(L),R2=n(L,"LI",{});var wwe=s(R2);Pae=n(wwe,"STRONG",{});var fKr=s(Pae);Nyo=r(fKr,"openai-gpt"),fKr.forEach(t),Dyo=r(wwe," \u2014 "),FN=n(wwe,"A",{href:!0});var mKr=s(FN);jyo=r(mKr,"OpenAIGPTForSequenceClassification"),mKr.forEach(t),qyo=r(wwe," (OpenAI GPT model)"),wwe.forEach(t),Gyo=i(L),S2=n(L,"LI",{});var Awe=s(S2);$ae=n(Awe,"STRONG",{});var gKr=s($ae);Oyo=r(gKr,"perceiver"),gKr.forEach(t),Xyo=r(Awe," \u2014 "),CN=n(Awe,"A",{href:!0});var hKr=s(CN);Vyo=r(hKr,"PerceiverForSequenceClassification"),hKr.forEach(t),zyo=r(Awe," (Perceiver model)"),Awe.forEach(t),Wyo=i(L),P2=n(L,"LI",{});var Lwe=s(P2);Iae=n(Lwe,"STRONG",{});var pKr=s(Iae);Qyo=r(pKr,"plbart"),pKr.forEach(t),Hyo=r(Lwe," \u2014 "),MN=n(Lwe,"A",{href:!0});var _Kr=s(MN);Uyo=r(_Kr,"PLBartForSequenceClassification"),_Kr.forEach(t),Jyo=r(Lwe," (PLBart model)"),Lwe.forEach(t),Yyo=i(L),$2=n(L,"LI",{});var Bwe=s($2);Nae=n(Bwe,"STRONG",{});var uKr=s(Nae);Kyo=r(uKr,"qdqbert"),uKr.forEach(t),Zyo=r(Bwe," \u2014 "),EN=n(Bwe,"A",{href:!0});var bKr=s(EN);ewo=r(bKr,"QDQBertForSequenceClassification"),bKr.forEach(t),owo=r(Bwe," (QDQBert model)"),Bwe.forEach(t),rwo=i(L),I2=n(L,"LI",{});var xwe=s(I2);Dae=n(xwe,"STRONG",{});var vKr=s(Dae);two=r(vKr,"reformer"),vKr.forEach(t),awo=r(xwe," \u2014 "),yN=n(xwe,"A",{href:!0});var TKr=s(yN);nwo=r(TKr,"ReformerForSequenceClassification"),TKr.forEach(t),swo=r(xwe," (Reformer model)"),xwe.forEach(t),lwo=i(L),N2=n(L,"LI",{});var kwe=s(N2);jae=n(kwe,"STRONG",{});var FKr=s(jae);iwo=r(FKr,"rembert"),FKr.forEach(t),dwo=r(kwe," \u2014 "),wN=n(kwe,"A",{href:!0});var CKr=s(wN);cwo=r(CKr,"RemBertForSequenceClassification"),CKr.forEach(t),fwo=r(kwe," (RemBERT model)"),kwe.forEach(t),mwo=i(L),D2=n(L,"LI",{});var Rwe=s(D2);qae=n(Rwe,"STRONG",{});var MKr=s(qae);gwo=r(MKr,"roberta"),MKr.forEach(t),hwo=r(Rwe," \u2014 "),AN=n(Rwe,"A",{href:!0});var EKr=s(AN);pwo=r(EKr,"RobertaForSequenceClassification"),EKr.forEach(t),_wo=r(Rwe," (RoBERTa model)"),Rwe.forEach(t),uwo=i(L),j2=n(L,"LI",{});var Swe=s(j2);Gae=n(Swe,"STRONG",{});var yKr=s(Gae);bwo=r(yKr,"roformer"),yKr.forEach(t),vwo=r(Swe," \u2014 "),LN=n(Swe,"A",{href:!0});var wKr=s(LN);Two=r(wKr,"RoFormerForSequenceClassification"),wKr.forEach(t),Fwo=r(Swe," (RoFormer model)"),Swe.forEach(t),Cwo=i(L),q2=n(L,"LI",{});var Pwe=s(q2);Oae=n(Pwe,"STRONG",{});var AKr=s(Oae);Mwo=r(AKr,"squeezebert"),AKr.forEach(t),Ewo=r(Pwe," \u2014 "),BN=n(Pwe,"A",{href:!0});var LKr=s(BN);ywo=r(LKr,"SqueezeBertForSequenceClassification"),LKr.forEach(t),wwo=r(Pwe," (SqueezeBERT model)"),Pwe.forEach(t),Awo=i(L),G2=n(L,"LI",{});var $we=s(G2);Xae=n($we,"STRONG",{});var BKr=s(Xae);Lwo=r(BKr,"tapas"),BKr.forEach(t),Bwo=r($we," \u2014 "),xN=n($we,"A",{href:!0});var xKr=s(xN);xwo=r(xKr,"TapasForSequenceClassification"),xKr.forEach(t),kwo=r($we," (TAPAS model)"),$we.forEach(t),Rwo=i(L),O2=n(L,"LI",{});var Iwe=s(O2);Vae=n(Iwe,"STRONG",{});var kKr=s(Vae);Swo=r(kKr,"transfo-xl"),kKr.forEach(t),Pwo=r(Iwe," \u2014 "),kN=n(Iwe,"A",{href:!0});var RKr=s(kN);$wo=r(RKr,"TransfoXLForSequenceClassification"),RKr.forEach(t),Iwo=r(Iwe," (Transformer-XL model)"),Iwe.forEach(t),Nwo=i(L),X2=n(L,"LI",{});var Nwe=s(X2);zae=n(Nwe,"STRONG",{});var SKr=s(zae);Dwo=r(SKr,"xlm"),SKr.forEach(t),jwo=r(Nwe," \u2014 "),RN=n(Nwe,"A",{href:!0});var PKr=s(RN);qwo=r(PKr,"XLMForSequenceClassification"),PKr.forEach(t),Gwo=r(Nwe," (XLM model)"),Nwe.forEach(t),Owo=i(L),V2=n(L,"LI",{});var Dwe=s(V2);Wae=n(Dwe,"STRONG",{});var $Kr=s(Wae);Xwo=r($Kr,"xlm-roberta"),$Kr.forEach(t),Vwo=r(Dwe," \u2014 "),SN=n(Dwe,"A",{href:!0});var IKr=s(SN);zwo=r(IKr,"XLMRobertaForSequenceClassification"),IKr.forEach(t),Wwo=r(Dwe," (XLM-RoBERTa model)"),Dwe.forEach(t),Qwo=i(L),z2=n(L,"LI",{});var jwe=s(z2);Qae=n(jwe,"STRONG",{});var NKr=s(Qae);Hwo=r(NKr,"xlm-roberta-xl"),NKr.forEach(t),Uwo=r(jwe," \u2014 "),PN=n(jwe,"A",{href:!0});var DKr=s(PN);Jwo=r(DKr,"XLMRobertaXLForSequenceClassification"),DKr.forEach(t),Ywo=r(jwe," (XLM-RoBERTa-XL model)"),jwe.forEach(t),Kwo=i(L),W2=n(L,"LI",{});var qwe=s(W2);Hae=n(qwe,"STRONG",{});var jKr=s(Hae);Zwo=r(jKr,"xlnet"),jKr.forEach(t),eAo=r(qwe," \u2014 "),$N=n(qwe,"A",{href:!0});var qKr=s($N);oAo=r(qKr,"XLNetForSequenceClassification"),qKr.forEach(t),rAo=r(qwe," (XLNet model)"),qwe.forEach(t),tAo=i(L),Q2=n(L,"LI",{});var Gwe=s(Q2);Uae=n(Gwe,"STRONG",{});var GKr=s(Uae);aAo=r(GKr,"yoso"),GKr.forEach(t),nAo=r(Gwe," \u2014 "),IN=n(Gwe,"A",{href:!0});var OKr=s(IN);sAo=r(OKr,"YosoForSequenceClassification"),OKr.forEach(t),lAo=r(Gwe," (YOSO model)"),Gwe.forEach(t),L.forEach(t),iAo=i(zt),H2=n(zt,"P",{});var Owe=s(H2);dAo=r(Owe,"The model is set in evaluation mode by default using "),Jae=n(Owe,"CODE",{});var XKr=s(Jae);cAo=r(XKr,"model.eval()"),XKr.forEach(t),fAo=r(Owe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yae=n(Owe,"CODE",{});var VKr=s(Yae);mAo=r(VKr,"model.train()"),VKr.forEach(t),Owe.forEach(t),gAo=i(zt),Kae=n(zt,"P",{});var zKr=s(Kae);hAo=r(zKr,"Examples:"),zKr.forEach(t),pAo=i(zt),m(xy.$$.fragment,zt),zt.forEach(t),rl.forEach(t),Gke=i(c),hd=n(c,"H2",{class:!0});var JSe=s(hd);U2=n(JSe,"A",{id:!0,class:!0,href:!0});var WKr=s(U2);Zae=n(WKr,"SPAN",{});var QKr=s(Zae);m(ky.$$.fragment,QKr),QKr.forEach(t),WKr.forEach(t),_Ao=i(JSe),ene=n(JSe,"SPAN",{});var HKr=s(ene);uAo=r(HKr,"AutoModelForMultipleChoice"),HKr.forEach(t),JSe.forEach(t),Oke=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(Ry.$$.fragment,al),bAo=i(al),pd=n(al,"P",{});var pW=s(pd);vAo=r(pW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),one=n(pW,"CODE",{});var UKr=s(one);TAo=r(UKr,"from_pretrained()"),UKr.forEach(t),FAo=r(pW,"class method or the "),rne=n(pW,"CODE",{});var JKr=s(rne);CAo=r(JKr,"from_config()"),JKr.forEach(t),MAo=r(pW,`class
method.`),pW.forEach(t),EAo=i(al),Sy=n(al,"P",{});var YSe=s(Sy);yAo=r(YSe,"This class cannot be instantiated directly using "),tne=n(YSe,"CODE",{});var YKr=s(tne);wAo=r(YKr,"__init__()"),YKr.forEach(t),AAo=r(YSe," (throws an error)."),YSe.forEach(t),LAo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(Py.$$.fragment,nl),BAo=i(nl),ane=n(nl,"P",{});var KKr=s(ane);xAo=r(KKr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),KKr.forEach(t),kAo=i(nl),_d=n(nl,"P",{});var _W=s(_d);RAo=r(_W,`Note:
Loading a model from its configuration file does `),nne=n(_W,"STRONG",{});var ZKr=s(nne);SAo=r(ZKr,"not"),ZKr.forEach(t),PAo=r(_W,` load the model weights. It only affects the
model\u2019s configuration. Use `),sne=n(_W,"CODE",{});var eZr=s(sne);$Ao=r(eZr,"from_pretrained()"),eZr.forEach(t),IAo=r(_W,"to load the model weights."),_W.forEach(t),NAo=i(nl),lne=n(nl,"P",{});var oZr=s(lne);DAo=r(oZr,"Examples:"),oZr.forEach(t),jAo=i(nl),m($y.$$.fragment,nl),nl.forEach(t),qAo=i(al),Xe=n(al,"DIV",{class:!0});var Wt=s(Xe);m(Iy.$$.fragment,Wt),GAo=i(Wt),ine=n(Wt,"P",{});var rZr=s(ine);OAo=r(rZr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rZr.forEach(t),XAo=i(Wt),Ja=n(Wt,"P",{});var v3=s(Ja);VAo=r(v3,"The model class to instantiate is selected based on the "),dne=n(v3,"CODE",{});var tZr=s(dne);zAo=r(tZr,"model_type"),tZr.forEach(t),WAo=r(v3,` property of the config object (either
passed as an argument or loaded from `),cne=n(v3,"CODE",{});var aZr=s(cne);QAo=r(aZr,"pretrained_model_name_or_path"),aZr.forEach(t),HAo=r(v3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fne=n(v3,"CODE",{});var nZr=s(fne);UAo=r(nZr,"pretrained_model_name_or_path"),nZr.forEach(t),JAo=r(v3,":"),v3.forEach(t),YAo=i(Wt),G=n(Wt,"UL",{});var O=s(G);J2=n(O,"LI",{});var Xwe=s(J2);mne=n(Xwe,"STRONG",{});var sZr=s(mne);KAo=r(sZr,"albert"),sZr.forEach(t),ZAo=r(Xwe," \u2014 "),NN=n(Xwe,"A",{href:!0});var lZr=s(NN);e0o=r(lZr,"AlbertForMultipleChoice"),lZr.forEach(t),o0o=r(Xwe," (ALBERT model)"),Xwe.forEach(t),r0o=i(O),Y2=n(O,"LI",{});var Vwe=s(Y2);gne=n(Vwe,"STRONG",{});var iZr=s(gne);t0o=r(iZr,"bert"),iZr.forEach(t),a0o=r(Vwe," \u2014 "),DN=n(Vwe,"A",{href:!0});var dZr=s(DN);n0o=r(dZr,"BertForMultipleChoice"),dZr.forEach(t),s0o=r(Vwe," (BERT model)"),Vwe.forEach(t),l0o=i(O),K2=n(O,"LI",{});var zwe=s(K2);hne=n(zwe,"STRONG",{});var cZr=s(hne);i0o=r(cZr,"big_bird"),cZr.forEach(t),d0o=r(zwe," \u2014 "),jN=n(zwe,"A",{href:!0});var fZr=s(jN);c0o=r(fZr,"BigBirdForMultipleChoice"),fZr.forEach(t),f0o=r(zwe," (BigBird model)"),zwe.forEach(t),m0o=i(O),Z2=n(O,"LI",{});var Wwe=s(Z2);pne=n(Wwe,"STRONG",{});var mZr=s(pne);g0o=r(mZr,"camembert"),mZr.forEach(t),h0o=r(Wwe," \u2014 "),qN=n(Wwe,"A",{href:!0});var gZr=s(qN);p0o=r(gZr,"CamembertForMultipleChoice"),gZr.forEach(t),_0o=r(Wwe," (CamemBERT model)"),Wwe.forEach(t),u0o=i(O),e6=n(O,"LI",{});var Qwe=s(e6);_ne=n(Qwe,"STRONG",{});var hZr=s(_ne);b0o=r(hZr,"canine"),hZr.forEach(t),v0o=r(Qwe," \u2014 "),GN=n(Qwe,"A",{href:!0});var pZr=s(GN);T0o=r(pZr,"CanineForMultipleChoice"),pZr.forEach(t),F0o=r(Qwe," (Canine model)"),Qwe.forEach(t),C0o=i(O),o6=n(O,"LI",{});var Hwe=s(o6);une=n(Hwe,"STRONG",{});var _Zr=s(une);M0o=r(_Zr,"convbert"),_Zr.forEach(t),E0o=r(Hwe," \u2014 "),ON=n(Hwe,"A",{href:!0});var uZr=s(ON);y0o=r(uZr,"ConvBertForMultipleChoice"),uZr.forEach(t),w0o=r(Hwe," (ConvBERT model)"),Hwe.forEach(t),A0o=i(O),r6=n(O,"LI",{});var Uwe=s(r6);bne=n(Uwe,"STRONG",{});var bZr=s(bne);L0o=r(bZr,"data2vec-text"),bZr.forEach(t),B0o=r(Uwe," \u2014 "),XN=n(Uwe,"A",{href:!0});var vZr=s(XN);x0o=r(vZr,"Data2VecTextForMultipleChoice"),vZr.forEach(t),k0o=r(Uwe," (Data2VecText model)"),Uwe.forEach(t),R0o=i(O),t6=n(O,"LI",{});var Jwe=s(t6);vne=n(Jwe,"STRONG",{});var TZr=s(vne);S0o=r(TZr,"distilbert"),TZr.forEach(t),P0o=r(Jwe," \u2014 "),VN=n(Jwe,"A",{href:!0});var FZr=s(VN);$0o=r(FZr,"DistilBertForMultipleChoice"),FZr.forEach(t),I0o=r(Jwe," (DistilBERT model)"),Jwe.forEach(t),N0o=i(O),a6=n(O,"LI",{});var Ywe=s(a6);Tne=n(Ywe,"STRONG",{});var CZr=s(Tne);D0o=r(CZr,"electra"),CZr.forEach(t),j0o=r(Ywe," \u2014 "),zN=n(Ywe,"A",{href:!0});var MZr=s(zN);q0o=r(MZr,"ElectraForMultipleChoice"),MZr.forEach(t),G0o=r(Ywe," (ELECTRA model)"),Ywe.forEach(t),O0o=i(O),n6=n(O,"LI",{});var Kwe=s(n6);Fne=n(Kwe,"STRONG",{});var EZr=s(Fne);X0o=r(EZr,"flaubert"),EZr.forEach(t),V0o=r(Kwe," \u2014 "),WN=n(Kwe,"A",{href:!0});var yZr=s(WN);z0o=r(yZr,"FlaubertForMultipleChoice"),yZr.forEach(t),W0o=r(Kwe," (FlauBERT model)"),Kwe.forEach(t),Q0o=i(O),s6=n(O,"LI",{});var Zwe=s(s6);Cne=n(Zwe,"STRONG",{});var wZr=s(Cne);H0o=r(wZr,"fnet"),wZr.forEach(t),U0o=r(Zwe," \u2014 "),QN=n(Zwe,"A",{href:!0});var AZr=s(QN);J0o=r(AZr,"FNetForMultipleChoice"),AZr.forEach(t),Y0o=r(Zwe," (FNet model)"),Zwe.forEach(t),K0o=i(O),l6=n(O,"LI",{});var eAe=s(l6);Mne=n(eAe,"STRONG",{});var LZr=s(Mne);Z0o=r(LZr,"funnel"),LZr.forEach(t),eLo=r(eAe," \u2014 "),HN=n(eAe,"A",{href:!0});var BZr=s(HN);oLo=r(BZr,"FunnelForMultipleChoice"),BZr.forEach(t),rLo=r(eAe," (Funnel Transformer model)"),eAe.forEach(t),tLo=i(O),i6=n(O,"LI",{});var oAe=s(i6);Ene=n(oAe,"STRONG",{});var xZr=s(Ene);aLo=r(xZr,"ibert"),xZr.forEach(t),nLo=r(oAe," \u2014 "),UN=n(oAe,"A",{href:!0});var kZr=s(UN);sLo=r(kZr,"IBertForMultipleChoice"),kZr.forEach(t),lLo=r(oAe," (I-BERT model)"),oAe.forEach(t),iLo=i(O),d6=n(O,"LI",{});var rAe=s(d6);yne=n(rAe,"STRONG",{});var RZr=s(yne);dLo=r(RZr,"longformer"),RZr.forEach(t),cLo=r(rAe," \u2014 "),JN=n(rAe,"A",{href:!0});var SZr=s(JN);fLo=r(SZr,"LongformerForMultipleChoice"),SZr.forEach(t),mLo=r(rAe," (Longformer model)"),rAe.forEach(t),gLo=i(O),c6=n(O,"LI",{});var tAe=s(c6);wne=n(tAe,"STRONG",{});var PZr=s(wne);hLo=r(PZr,"megatron-bert"),PZr.forEach(t),pLo=r(tAe," \u2014 "),YN=n(tAe,"A",{href:!0});var $Zr=s(YN);_Lo=r($Zr,"MegatronBertForMultipleChoice"),$Zr.forEach(t),uLo=r(tAe," (MegatronBert model)"),tAe.forEach(t),bLo=i(O),f6=n(O,"LI",{});var aAe=s(f6);Ane=n(aAe,"STRONG",{});var IZr=s(Ane);vLo=r(IZr,"mobilebert"),IZr.forEach(t),TLo=r(aAe," \u2014 "),KN=n(aAe,"A",{href:!0});var NZr=s(KN);FLo=r(NZr,"MobileBertForMultipleChoice"),NZr.forEach(t),CLo=r(aAe," (MobileBERT model)"),aAe.forEach(t),MLo=i(O),m6=n(O,"LI",{});var nAe=s(m6);Lne=n(nAe,"STRONG",{});var DZr=s(Lne);ELo=r(DZr,"mpnet"),DZr.forEach(t),yLo=r(nAe," \u2014 "),ZN=n(nAe,"A",{href:!0});var jZr=s(ZN);wLo=r(jZr,"MPNetForMultipleChoice"),jZr.forEach(t),ALo=r(nAe," (MPNet model)"),nAe.forEach(t),LLo=i(O),g6=n(O,"LI",{});var sAe=s(g6);Bne=n(sAe,"STRONG",{});var qZr=s(Bne);BLo=r(qZr,"nystromformer"),qZr.forEach(t),xLo=r(sAe," \u2014 "),eD=n(sAe,"A",{href:!0});var GZr=s(eD);kLo=r(GZr,"NystromformerForMultipleChoice"),GZr.forEach(t),RLo=r(sAe," (Nystromformer model)"),sAe.forEach(t),SLo=i(O),h6=n(O,"LI",{});var lAe=s(h6);xne=n(lAe,"STRONG",{});var OZr=s(xne);PLo=r(OZr,"qdqbert"),OZr.forEach(t),$Lo=r(lAe," \u2014 "),oD=n(lAe,"A",{href:!0});var XZr=s(oD);ILo=r(XZr,"QDQBertForMultipleChoice"),XZr.forEach(t),NLo=r(lAe," (QDQBert model)"),lAe.forEach(t),DLo=i(O),p6=n(O,"LI",{});var iAe=s(p6);kne=n(iAe,"STRONG",{});var VZr=s(kne);jLo=r(VZr,"rembert"),VZr.forEach(t),qLo=r(iAe," \u2014 "),rD=n(iAe,"A",{href:!0});var zZr=s(rD);GLo=r(zZr,"RemBertForMultipleChoice"),zZr.forEach(t),OLo=r(iAe," (RemBERT model)"),iAe.forEach(t),XLo=i(O),_6=n(O,"LI",{});var dAe=s(_6);Rne=n(dAe,"STRONG",{});var WZr=s(Rne);VLo=r(WZr,"roberta"),WZr.forEach(t),zLo=r(dAe," \u2014 "),tD=n(dAe,"A",{href:!0});var QZr=s(tD);WLo=r(QZr,"RobertaForMultipleChoice"),QZr.forEach(t),QLo=r(dAe," (RoBERTa model)"),dAe.forEach(t),HLo=i(O),u6=n(O,"LI",{});var cAe=s(u6);Sne=n(cAe,"STRONG",{});var HZr=s(Sne);ULo=r(HZr,"roformer"),HZr.forEach(t),JLo=r(cAe," \u2014 "),aD=n(cAe,"A",{href:!0});var UZr=s(aD);YLo=r(UZr,"RoFormerForMultipleChoice"),UZr.forEach(t),KLo=r(cAe," (RoFormer model)"),cAe.forEach(t),ZLo=i(O),b6=n(O,"LI",{});var fAe=s(b6);Pne=n(fAe,"STRONG",{});var JZr=s(Pne);e7o=r(JZr,"squeezebert"),JZr.forEach(t),o7o=r(fAe," \u2014 "),nD=n(fAe,"A",{href:!0});var YZr=s(nD);r7o=r(YZr,"SqueezeBertForMultipleChoice"),YZr.forEach(t),t7o=r(fAe," (SqueezeBERT model)"),fAe.forEach(t),a7o=i(O),v6=n(O,"LI",{});var mAe=s(v6);$ne=n(mAe,"STRONG",{});var KZr=s($ne);n7o=r(KZr,"xlm"),KZr.forEach(t),s7o=r(mAe," \u2014 "),sD=n(mAe,"A",{href:!0});var ZZr=s(sD);l7o=r(ZZr,"XLMForMultipleChoice"),ZZr.forEach(t),i7o=r(mAe," (XLM model)"),mAe.forEach(t),d7o=i(O),T6=n(O,"LI",{});var gAe=s(T6);Ine=n(gAe,"STRONG",{});var eet=s(Ine);c7o=r(eet,"xlm-roberta"),eet.forEach(t),f7o=r(gAe," \u2014 "),lD=n(gAe,"A",{href:!0});var oet=s(lD);m7o=r(oet,"XLMRobertaForMultipleChoice"),oet.forEach(t),g7o=r(gAe," (XLM-RoBERTa model)"),gAe.forEach(t),h7o=i(O),F6=n(O,"LI",{});var hAe=s(F6);Nne=n(hAe,"STRONG",{});var ret=s(Nne);p7o=r(ret,"xlm-roberta-xl"),ret.forEach(t),_7o=r(hAe," \u2014 "),iD=n(hAe,"A",{href:!0});var tet=s(iD);u7o=r(tet,"XLMRobertaXLForMultipleChoice"),tet.forEach(t),b7o=r(hAe," (XLM-RoBERTa-XL model)"),hAe.forEach(t),v7o=i(O),C6=n(O,"LI",{});var pAe=s(C6);Dne=n(pAe,"STRONG",{});var aet=s(Dne);T7o=r(aet,"xlnet"),aet.forEach(t),F7o=r(pAe," \u2014 "),dD=n(pAe,"A",{href:!0});var net=s(dD);C7o=r(net,"XLNetForMultipleChoice"),net.forEach(t),M7o=r(pAe," (XLNet model)"),pAe.forEach(t),E7o=i(O),M6=n(O,"LI",{});var _Ae=s(M6);jne=n(_Ae,"STRONG",{});var set=s(jne);y7o=r(set,"yoso"),set.forEach(t),w7o=r(_Ae," \u2014 "),cD=n(_Ae,"A",{href:!0});var iet=s(cD);A7o=r(iet,"YosoForMultipleChoice"),iet.forEach(t),L7o=r(_Ae," (YOSO model)"),_Ae.forEach(t),O.forEach(t),B7o=i(Wt),E6=n(Wt,"P",{});var uAe=s(E6);x7o=r(uAe,"The model is set in evaluation mode by default using "),qne=n(uAe,"CODE",{});var det=s(qne);k7o=r(det,"model.eval()"),det.forEach(t),R7o=r(uAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gne=n(uAe,"CODE",{});var cet=s(Gne);S7o=r(cet,"model.train()"),cet.forEach(t),uAe.forEach(t),P7o=i(Wt),One=n(Wt,"P",{});var fet=s(One);$7o=r(fet,"Examples:"),fet.forEach(t),I7o=i(Wt),m(Ny.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),Xke=i(c),ud=n(c,"H2",{class:!0});var KSe=s(ud);y6=n(KSe,"A",{id:!0,class:!0,href:!0});var met=s(y6);Xne=n(met,"SPAN",{});var get=s(Xne);m(Dy.$$.fragment,get),get.forEach(t),met.forEach(t),N7o=i(KSe),Vne=n(KSe,"SPAN",{});var het=s(Vne);D7o=r(het,"AutoModelForNextSentencePrediction"),het.forEach(t),KSe.forEach(t),Vke=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(jy.$$.fragment,sl),j7o=i(sl),bd=n(sl,"P",{});var uW=s(bd);q7o=r(uW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zne=n(uW,"CODE",{});var pet=s(zne);G7o=r(pet,"from_pretrained()"),pet.forEach(t),O7o=r(uW,"class method or the "),Wne=n(uW,"CODE",{});var _et=s(Wne);X7o=r(_et,"from_config()"),_et.forEach(t),V7o=r(uW,`class
method.`),uW.forEach(t),z7o=i(sl),qy=n(sl,"P",{});var ZSe=s(qy);W7o=r(ZSe,"This class cannot be instantiated directly using "),Qne=n(ZSe,"CODE",{});var uet=s(Qne);Q7o=r(uet,"__init__()"),uet.forEach(t),H7o=r(ZSe," (throws an error)."),ZSe.forEach(t),U7o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(Gy.$$.fragment,ll),J7o=i(ll),Hne=n(ll,"P",{});var bet=s(Hne);Y7o=r(bet,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bet.forEach(t),K7o=i(ll),vd=n(ll,"P",{});var bW=s(vd);Z7o=r(bW,`Note:
Loading a model from its configuration file does `),Une=n(bW,"STRONG",{});var vet=s(Une);e8o=r(vet,"not"),vet.forEach(t),o8o=r(bW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jne=n(bW,"CODE",{});var Tet=s(Jne);r8o=r(Tet,"from_pretrained()"),Tet.forEach(t),t8o=r(bW,"to load the model weights."),bW.forEach(t),a8o=i(ll),Yne=n(ll,"P",{});var Fet=s(Yne);n8o=r(Fet,"Examples:"),Fet.forEach(t),s8o=i(ll),m(Oy.$$.fragment,ll),ll.forEach(t),l8o=i(sl),Ve=n(sl,"DIV",{class:!0});var Qt=s(Ve);m(Xy.$$.fragment,Qt),i8o=i(Qt),Kne=n(Qt,"P",{});var Cet=s(Kne);d8o=r(Cet,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Cet.forEach(t),c8o=i(Qt),Ya=n(Qt,"P",{});var T3=s(Ya);f8o=r(T3,"The model class to instantiate is selected based on the "),Zne=n(T3,"CODE",{});var Met=s(Zne);m8o=r(Met,"model_type"),Met.forEach(t),g8o=r(T3,` property of the config object (either
passed as an argument or loaded from `),ese=n(T3,"CODE",{});var Eet=s(ese);h8o=r(Eet,"pretrained_model_name_or_path"),Eet.forEach(t),p8o=r(T3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ose=n(T3,"CODE",{});var yet=s(ose);_8o=r(yet,"pretrained_model_name_or_path"),yet.forEach(t),u8o=r(T3,":"),T3.forEach(t),b8o=i(Qt),da=n(Qt,"UL",{});var il=s(da);w6=n(il,"LI",{});var bAe=s(w6);rse=n(bAe,"STRONG",{});var wet=s(rse);v8o=r(wet,"bert"),wet.forEach(t),T8o=r(bAe," \u2014 "),fD=n(bAe,"A",{href:!0});var Aet=s(fD);F8o=r(Aet,"BertForNextSentencePrediction"),Aet.forEach(t),C8o=r(bAe," (BERT model)"),bAe.forEach(t),M8o=i(il),A6=n(il,"LI",{});var vAe=s(A6);tse=n(vAe,"STRONG",{});var Let=s(tse);E8o=r(Let,"fnet"),Let.forEach(t),y8o=r(vAe," \u2014 "),mD=n(vAe,"A",{href:!0});var Bet=s(mD);w8o=r(Bet,"FNetForNextSentencePrediction"),Bet.forEach(t),A8o=r(vAe," (FNet model)"),vAe.forEach(t),L8o=i(il),L6=n(il,"LI",{});var TAe=s(L6);ase=n(TAe,"STRONG",{});var xet=s(ase);B8o=r(xet,"megatron-bert"),xet.forEach(t),x8o=r(TAe," \u2014 "),gD=n(TAe,"A",{href:!0});var ket=s(gD);k8o=r(ket,"MegatronBertForNextSentencePrediction"),ket.forEach(t),R8o=r(TAe," (MegatronBert model)"),TAe.forEach(t),S8o=i(il),B6=n(il,"LI",{});var FAe=s(B6);nse=n(FAe,"STRONG",{});var Ret=s(nse);P8o=r(Ret,"mobilebert"),Ret.forEach(t),$8o=r(FAe," \u2014 "),hD=n(FAe,"A",{href:!0});var Set=s(hD);I8o=r(Set,"MobileBertForNextSentencePrediction"),Set.forEach(t),N8o=r(FAe," (MobileBERT model)"),FAe.forEach(t),D8o=i(il),x6=n(il,"LI",{});var CAe=s(x6);sse=n(CAe,"STRONG",{});var Pet=s(sse);j8o=r(Pet,"qdqbert"),Pet.forEach(t),q8o=r(CAe," \u2014 "),pD=n(CAe,"A",{href:!0});var $et=s(pD);G8o=r($et,"QDQBertForNextSentencePrediction"),$et.forEach(t),O8o=r(CAe," (QDQBert model)"),CAe.forEach(t),il.forEach(t),X8o=i(Qt),k6=n(Qt,"P",{});var MAe=s(k6);V8o=r(MAe,"The model is set in evaluation mode by default using "),lse=n(MAe,"CODE",{});var Iet=s(lse);z8o=r(Iet,"model.eval()"),Iet.forEach(t),W8o=r(MAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ise=n(MAe,"CODE",{});var Net=s(ise);Q8o=r(Net,"model.train()"),Net.forEach(t),MAe.forEach(t),H8o=i(Qt),dse=n(Qt,"P",{});var Det=s(dse);U8o=r(Det,"Examples:"),Det.forEach(t),J8o=i(Qt),m(Vy.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),zke=i(c),Td=n(c,"H2",{class:!0});var ePe=s(Td);R6=n(ePe,"A",{id:!0,class:!0,href:!0});var jet=s(R6);cse=n(jet,"SPAN",{});var qet=s(cse);m(zy.$$.fragment,qet),qet.forEach(t),jet.forEach(t),Y8o=i(ePe),fse=n(ePe,"SPAN",{});var Get=s(fse);K8o=r(Get,"AutoModelForTokenClassification"),Get.forEach(t),ePe.forEach(t),Wke=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(Wy.$$.fragment,dl),Z8o=i(dl),Fd=n(dl,"P",{});var vW=s(Fd);e9o=r(vW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mse=n(vW,"CODE",{});var Oet=s(mse);o9o=r(Oet,"from_pretrained()"),Oet.forEach(t),r9o=r(vW,"class method or the "),gse=n(vW,"CODE",{});var Xet=s(gse);t9o=r(Xet,"from_config()"),Xet.forEach(t),a9o=r(vW,`class
method.`),vW.forEach(t),n9o=i(dl),Qy=n(dl,"P",{});var oPe=s(Qy);s9o=r(oPe,"This class cannot be instantiated directly using "),hse=n(oPe,"CODE",{});var Vet=s(hse);l9o=r(Vet,"__init__()"),Vet.forEach(t),i9o=r(oPe," (throws an error)."),oPe.forEach(t),d9o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(Hy.$$.fragment,cl),c9o=i(cl),pse=n(cl,"P",{});var zet=s(pse);f9o=r(zet,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zet.forEach(t),m9o=i(cl),Cd=n(cl,"P",{});var TW=s(Cd);g9o=r(TW,`Note:
Loading a model from its configuration file does `),_se=n(TW,"STRONG",{});var Wet=s(_se);h9o=r(Wet,"not"),Wet.forEach(t),p9o=r(TW,` load the model weights. It only affects the
model\u2019s configuration. Use `),use=n(TW,"CODE",{});var Qet=s(use);_9o=r(Qet,"from_pretrained()"),Qet.forEach(t),u9o=r(TW,"to load the model weights."),TW.forEach(t),b9o=i(cl),bse=n(cl,"P",{});var Het=s(bse);v9o=r(Het,"Examples:"),Het.forEach(t),T9o=i(cl),m(Uy.$$.fragment,cl),cl.forEach(t),F9o=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(Jy.$$.fragment,Ht),C9o=i(Ht),vse=n(Ht,"P",{});var Uet=s(vse);M9o=r(Uet,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Uet.forEach(t),E9o=i(Ht),Ka=n(Ht,"P",{});var F3=s(Ka);y9o=r(F3,"The model class to instantiate is selected based on the "),Tse=n(F3,"CODE",{});var Jet=s(Tse);w9o=r(Jet,"model_type"),Jet.forEach(t),A9o=r(F3,` property of the config object (either
passed as an argument or loaded from `),Fse=n(F3,"CODE",{});var Yet=s(Fse);L9o=r(Yet,"pretrained_model_name_or_path"),Yet.forEach(t),B9o=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cse=n(F3,"CODE",{});var Ket=s(Cse);x9o=r(Ket,"pretrained_model_name_or_path"),Ket.forEach(t),k9o=r(F3,":"),F3.forEach(t),R9o=i(Ht),j=n(Ht,"UL",{});var q=s(j);S6=n(q,"LI",{});var EAe=s(S6);Mse=n(EAe,"STRONG",{});var Zet=s(Mse);S9o=r(Zet,"albert"),Zet.forEach(t),P9o=r(EAe," \u2014 "),_D=n(EAe,"A",{href:!0});var eot=s(_D);$9o=r(eot,"AlbertForTokenClassification"),eot.forEach(t),I9o=r(EAe," (ALBERT model)"),EAe.forEach(t),N9o=i(q),P6=n(q,"LI",{});var yAe=s(P6);Ese=n(yAe,"STRONG",{});var oot=s(Ese);D9o=r(oot,"bert"),oot.forEach(t),j9o=r(yAe," \u2014 "),uD=n(yAe,"A",{href:!0});var rot=s(uD);q9o=r(rot,"BertForTokenClassification"),rot.forEach(t),G9o=r(yAe," (BERT model)"),yAe.forEach(t),O9o=i(q),$6=n(q,"LI",{});var wAe=s($6);yse=n(wAe,"STRONG",{});var tot=s(yse);X9o=r(tot,"big_bird"),tot.forEach(t),V9o=r(wAe," \u2014 "),bD=n(wAe,"A",{href:!0});var aot=s(bD);z9o=r(aot,"BigBirdForTokenClassification"),aot.forEach(t),W9o=r(wAe," (BigBird model)"),wAe.forEach(t),Q9o=i(q),I6=n(q,"LI",{});var AAe=s(I6);wse=n(AAe,"STRONG",{});var not=s(wse);H9o=r(not,"camembert"),not.forEach(t),U9o=r(AAe," \u2014 "),vD=n(AAe,"A",{href:!0});var sot=s(vD);J9o=r(sot,"CamembertForTokenClassification"),sot.forEach(t),Y9o=r(AAe," (CamemBERT model)"),AAe.forEach(t),K9o=i(q),N6=n(q,"LI",{});var LAe=s(N6);Ase=n(LAe,"STRONG",{});var lot=s(Ase);Z9o=r(lot,"canine"),lot.forEach(t),eBo=r(LAe," \u2014 "),TD=n(LAe,"A",{href:!0});var iot=s(TD);oBo=r(iot,"CanineForTokenClassification"),iot.forEach(t),rBo=r(LAe," (Canine model)"),LAe.forEach(t),tBo=i(q),D6=n(q,"LI",{});var BAe=s(D6);Lse=n(BAe,"STRONG",{});var dot=s(Lse);aBo=r(dot,"convbert"),dot.forEach(t),nBo=r(BAe," \u2014 "),FD=n(BAe,"A",{href:!0});var cot=s(FD);sBo=r(cot,"ConvBertForTokenClassification"),cot.forEach(t),lBo=r(BAe," (ConvBERT model)"),BAe.forEach(t),iBo=i(q),j6=n(q,"LI",{});var xAe=s(j6);Bse=n(xAe,"STRONG",{});var fot=s(Bse);dBo=r(fot,"data2vec-text"),fot.forEach(t),cBo=r(xAe," \u2014 "),CD=n(xAe,"A",{href:!0});var mot=s(CD);fBo=r(mot,"Data2VecTextForTokenClassification"),mot.forEach(t),mBo=r(xAe," (Data2VecText model)"),xAe.forEach(t),gBo=i(q),q6=n(q,"LI",{});var kAe=s(q6);xse=n(kAe,"STRONG",{});var got=s(xse);hBo=r(got,"deberta"),got.forEach(t),pBo=r(kAe," \u2014 "),MD=n(kAe,"A",{href:!0});var hot=s(MD);_Bo=r(hot,"DebertaForTokenClassification"),hot.forEach(t),uBo=r(kAe," (DeBERTa model)"),kAe.forEach(t),bBo=i(q),G6=n(q,"LI",{});var RAe=s(G6);kse=n(RAe,"STRONG",{});var pot=s(kse);vBo=r(pot,"deberta-v2"),pot.forEach(t),TBo=r(RAe," \u2014 "),ED=n(RAe,"A",{href:!0});var _ot=s(ED);FBo=r(_ot,"DebertaV2ForTokenClassification"),_ot.forEach(t),CBo=r(RAe," (DeBERTa-v2 model)"),RAe.forEach(t),MBo=i(q),O6=n(q,"LI",{});var SAe=s(O6);Rse=n(SAe,"STRONG",{});var uot=s(Rse);EBo=r(uot,"distilbert"),uot.forEach(t),yBo=r(SAe," \u2014 "),yD=n(SAe,"A",{href:!0});var bot=s(yD);wBo=r(bot,"DistilBertForTokenClassification"),bot.forEach(t),ABo=r(SAe," (DistilBERT model)"),SAe.forEach(t),LBo=i(q),X6=n(q,"LI",{});var PAe=s(X6);Sse=n(PAe,"STRONG",{});var vot=s(Sse);BBo=r(vot,"electra"),vot.forEach(t),xBo=r(PAe," \u2014 "),wD=n(PAe,"A",{href:!0});var Tot=s(wD);kBo=r(Tot,"ElectraForTokenClassification"),Tot.forEach(t),RBo=r(PAe," (ELECTRA model)"),PAe.forEach(t),SBo=i(q),V6=n(q,"LI",{});var $Ae=s(V6);Pse=n($Ae,"STRONG",{});var Fot=s(Pse);PBo=r(Fot,"flaubert"),Fot.forEach(t),$Bo=r($Ae," \u2014 "),AD=n($Ae,"A",{href:!0});var Cot=s(AD);IBo=r(Cot,"FlaubertForTokenClassification"),Cot.forEach(t),NBo=r($Ae," (FlauBERT model)"),$Ae.forEach(t),DBo=i(q),z6=n(q,"LI",{});var IAe=s(z6);$se=n(IAe,"STRONG",{});var Mot=s($se);jBo=r(Mot,"fnet"),Mot.forEach(t),qBo=r(IAe," \u2014 "),LD=n(IAe,"A",{href:!0});var Eot=s(LD);GBo=r(Eot,"FNetForTokenClassification"),Eot.forEach(t),OBo=r(IAe," (FNet model)"),IAe.forEach(t),XBo=i(q),W6=n(q,"LI",{});var NAe=s(W6);Ise=n(NAe,"STRONG",{});var yot=s(Ise);VBo=r(yot,"funnel"),yot.forEach(t),zBo=r(NAe," \u2014 "),BD=n(NAe,"A",{href:!0});var wot=s(BD);WBo=r(wot,"FunnelForTokenClassification"),wot.forEach(t),QBo=r(NAe," (Funnel Transformer model)"),NAe.forEach(t),HBo=i(q),Q6=n(q,"LI",{});var DAe=s(Q6);Nse=n(DAe,"STRONG",{});var Aot=s(Nse);UBo=r(Aot,"gpt2"),Aot.forEach(t),JBo=r(DAe," \u2014 "),xD=n(DAe,"A",{href:!0});var Lot=s(xD);YBo=r(Lot,"GPT2ForTokenClassification"),Lot.forEach(t),KBo=r(DAe," (OpenAI GPT-2 model)"),DAe.forEach(t),ZBo=i(q),H6=n(q,"LI",{});var jAe=s(H6);Dse=n(jAe,"STRONG",{});var Bot=s(Dse);exo=r(Bot,"ibert"),Bot.forEach(t),oxo=r(jAe," \u2014 "),kD=n(jAe,"A",{href:!0});var xot=s(kD);rxo=r(xot,"IBertForTokenClassification"),xot.forEach(t),txo=r(jAe," (I-BERT model)"),jAe.forEach(t),axo=i(q),U6=n(q,"LI",{});var qAe=s(U6);jse=n(qAe,"STRONG",{});var kot=s(jse);nxo=r(kot,"layoutlm"),kot.forEach(t),sxo=r(qAe," \u2014 "),RD=n(qAe,"A",{href:!0});var Rot=s(RD);lxo=r(Rot,"LayoutLMForTokenClassification"),Rot.forEach(t),ixo=r(qAe," (LayoutLM model)"),qAe.forEach(t),dxo=i(q),J6=n(q,"LI",{});var GAe=s(J6);qse=n(GAe,"STRONG",{});var Sot=s(qse);cxo=r(Sot,"layoutlmv2"),Sot.forEach(t),fxo=r(GAe," \u2014 "),SD=n(GAe,"A",{href:!0});var Pot=s(SD);mxo=r(Pot,"LayoutLMv2ForTokenClassification"),Pot.forEach(t),gxo=r(GAe," (LayoutLMv2 model)"),GAe.forEach(t),hxo=i(q),Y6=n(q,"LI",{});var OAe=s(Y6);Gse=n(OAe,"STRONG",{});var $ot=s(Gse);pxo=r($ot,"longformer"),$ot.forEach(t),_xo=r(OAe," \u2014 "),PD=n(OAe,"A",{href:!0});var Iot=s(PD);uxo=r(Iot,"LongformerForTokenClassification"),Iot.forEach(t),bxo=r(OAe," (Longformer model)"),OAe.forEach(t),vxo=i(q),K6=n(q,"LI",{});var XAe=s(K6);Ose=n(XAe,"STRONG",{});var Not=s(Ose);Txo=r(Not,"megatron-bert"),Not.forEach(t),Fxo=r(XAe," \u2014 "),$D=n(XAe,"A",{href:!0});var Dot=s($D);Cxo=r(Dot,"MegatronBertForTokenClassification"),Dot.forEach(t),Mxo=r(XAe," (MegatronBert model)"),XAe.forEach(t),Exo=i(q),Z6=n(q,"LI",{});var VAe=s(Z6);Xse=n(VAe,"STRONG",{});var jot=s(Xse);yxo=r(jot,"mobilebert"),jot.forEach(t),wxo=r(VAe," \u2014 "),ID=n(VAe,"A",{href:!0});var qot=s(ID);Axo=r(qot,"MobileBertForTokenClassification"),qot.forEach(t),Lxo=r(VAe," (MobileBERT model)"),VAe.forEach(t),Bxo=i(q),eb=n(q,"LI",{});var zAe=s(eb);Vse=n(zAe,"STRONG",{});var Got=s(Vse);xxo=r(Got,"mpnet"),Got.forEach(t),kxo=r(zAe," \u2014 "),ND=n(zAe,"A",{href:!0});var Oot=s(ND);Rxo=r(Oot,"MPNetForTokenClassification"),Oot.forEach(t),Sxo=r(zAe," (MPNet model)"),zAe.forEach(t),Pxo=i(q),ob=n(q,"LI",{});var WAe=s(ob);zse=n(WAe,"STRONG",{});var Xot=s(zse);$xo=r(Xot,"nystromformer"),Xot.forEach(t),Ixo=r(WAe," \u2014 "),DD=n(WAe,"A",{href:!0});var Vot=s(DD);Nxo=r(Vot,"NystromformerForTokenClassification"),Vot.forEach(t),Dxo=r(WAe," (Nystromformer model)"),WAe.forEach(t),jxo=i(q),rb=n(q,"LI",{});var QAe=s(rb);Wse=n(QAe,"STRONG",{});var zot=s(Wse);qxo=r(zot,"qdqbert"),zot.forEach(t),Gxo=r(QAe," \u2014 "),jD=n(QAe,"A",{href:!0});var Wot=s(jD);Oxo=r(Wot,"QDQBertForTokenClassification"),Wot.forEach(t),Xxo=r(QAe," (QDQBert model)"),QAe.forEach(t),Vxo=i(q),tb=n(q,"LI",{});var HAe=s(tb);Qse=n(HAe,"STRONG",{});var Qot=s(Qse);zxo=r(Qot,"rembert"),Qot.forEach(t),Wxo=r(HAe," \u2014 "),qD=n(HAe,"A",{href:!0});var Hot=s(qD);Qxo=r(Hot,"RemBertForTokenClassification"),Hot.forEach(t),Hxo=r(HAe," (RemBERT model)"),HAe.forEach(t),Uxo=i(q),ab=n(q,"LI",{});var UAe=s(ab);Hse=n(UAe,"STRONG",{});var Uot=s(Hse);Jxo=r(Uot,"roberta"),Uot.forEach(t),Yxo=r(UAe," \u2014 "),GD=n(UAe,"A",{href:!0});var Jot=s(GD);Kxo=r(Jot,"RobertaForTokenClassification"),Jot.forEach(t),Zxo=r(UAe," (RoBERTa model)"),UAe.forEach(t),eko=i(q),nb=n(q,"LI",{});var JAe=s(nb);Use=n(JAe,"STRONG",{});var Yot=s(Use);oko=r(Yot,"roformer"),Yot.forEach(t),rko=r(JAe," \u2014 "),OD=n(JAe,"A",{href:!0});var Kot=s(OD);tko=r(Kot,"RoFormerForTokenClassification"),Kot.forEach(t),ako=r(JAe," (RoFormer model)"),JAe.forEach(t),nko=i(q),sb=n(q,"LI",{});var YAe=s(sb);Jse=n(YAe,"STRONG",{});var Zot=s(Jse);sko=r(Zot,"squeezebert"),Zot.forEach(t),lko=r(YAe," \u2014 "),XD=n(YAe,"A",{href:!0});var ert=s(XD);iko=r(ert,"SqueezeBertForTokenClassification"),ert.forEach(t),dko=r(YAe," (SqueezeBERT model)"),YAe.forEach(t),cko=i(q),lb=n(q,"LI",{});var KAe=s(lb);Yse=n(KAe,"STRONG",{});var ort=s(Yse);fko=r(ort,"xlm"),ort.forEach(t),mko=r(KAe," \u2014 "),VD=n(KAe,"A",{href:!0});var rrt=s(VD);gko=r(rrt,"XLMForTokenClassification"),rrt.forEach(t),hko=r(KAe," (XLM model)"),KAe.forEach(t),pko=i(q),ib=n(q,"LI",{});var ZAe=s(ib);Kse=n(ZAe,"STRONG",{});var trt=s(Kse);_ko=r(trt,"xlm-roberta"),trt.forEach(t),uko=r(ZAe," \u2014 "),zD=n(ZAe,"A",{href:!0});var art=s(zD);bko=r(art,"XLMRobertaForTokenClassification"),art.forEach(t),vko=r(ZAe," (XLM-RoBERTa model)"),ZAe.forEach(t),Tko=i(q),db=n(q,"LI",{});var e0e=s(db);Zse=n(e0e,"STRONG",{});var nrt=s(Zse);Fko=r(nrt,"xlm-roberta-xl"),nrt.forEach(t),Cko=r(e0e," \u2014 "),WD=n(e0e,"A",{href:!0});var srt=s(WD);Mko=r(srt,"XLMRobertaXLForTokenClassification"),srt.forEach(t),Eko=r(e0e," (XLM-RoBERTa-XL model)"),e0e.forEach(t),yko=i(q),cb=n(q,"LI",{});var o0e=s(cb);ele=n(o0e,"STRONG",{});var lrt=s(ele);wko=r(lrt,"xlnet"),lrt.forEach(t),Ako=r(o0e," \u2014 "),QD=n(o0e,"A",{href:!0});var irt=s(QD);Lko=r(irt,"XLNetForTokenClassification"),irt.forEach(t),Bko=r(o0e," (XLNet model)"),o0e.forEach(t),xko=i(q),fb=n(q,"LI",{});var r0e=s(fb);ole=n(r0e,"STRONG",{});var drt=s(ole);kko=r(drt,"yoso"),drt.forEach(t),Rko=r(r0e," \u2014 "),HD=n(r0e,"A",{href:!0});var crt=s(HD);Sko=r(crt,"YosoForTokenClassification"),crt.forEach(t),Pko=r(r0e," (YOSO model)"),r0e.forEach(t),q.forEach(t),$ko=i(Ht),mb=n(Ht,"P",{});var t0e=s(mb);Iko=r(t0e,"The model is set in evaluation mode by default using "),rle=n(t0e,"CODE",{});var frt=s(rle);Nko=r(frt,"model.eval()"),frt.forEach(t),Dko=r(t0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tle=n(t0e,"CODE",{});var mrt=s(tle);jko=r(mrt,"model.train()"),mrt.forEach(t),t0e.forEach(t),qko=i(Ht),ale=n(Ht,"P",{});var grt=s(ale);Gko=r(grt,"Examples:"),grt.forEach(t),Oko=i(Ht),m(Yy.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),Qke=i(c),Md=n(c,"H2",{class:!0});var rPe=s(Md);gb=n(rPe,"A",{id:!0,class:!0,href:!0});var hrt=s(gb);nle=n(hrt,"SPAN",{});var prt=s(nle);m(Ky.$$.fragment,prt),prt.forEach(t),hrt.forEach(t),Xko=i(rPe),sle=n(rPe,"SPAN",{});var _rt=s(sle);Vko=r(_rt,"AutoModelForQuestionAnswering"),_rt.forEach(t),rPe.forEach(t),Hke=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(Zy.$$.fragment,fl),zko=i(fl),Ed=n(fl,"P",{});var FW=s(Ed);Wko=r(FW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),lle=n(FW,"CODE",{});var urt=s(lle);Qko=r(urt,"from_pretrained()"),urt.forEach(t),Hko=r(FW,"class method or the "),ile=n(FW,"CODE",{});var brt=s(ile);Uko=r(brt,"from_config()"),brt.forEach(t),Jko=r(FW,`class
method.`),FW.forEach(t),Yko=i(fl),ew=n(fl,"P",{});var tPe=s(ew);Kko=r(tPe,"This class cannot be instantiated directly using "),dle=n(tPe,"CODE",{});var vrt=s(dle);Zko=r(vrt,"__init__()"),vrt.forEach(t),eRo=r(tPe," (throws an error)."),tPe.forEach(t),oRo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(ow.$$.fragment,ml),rRo=i(ml),cle=n(ml,"P",{});var Trt=s(cle);tRo=r(Trt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Trt.forEach(t),aRo=i(ml),yd=n(ml,"P",{});var CW=s(yd);nRo=r(CW,`Note:
Loading a model from its configuration file does `),fle=n(CW,"STRONG",{});var Frt=s(fle);sRo=r(Frt,"not"),Frt.forEach(t),lRo=r(CW,` load the model weights. It only affects the
model\u2019s configuration. Use `),mle=n(CW,"CODE",{});var Crt=s(mle);iRo=r(Crt,"from_pretrained()"),Crt.forEach(t),dRo=r(CW,"to load the model weights."),CW.forEach(t),cRo=i(ml),gle=n(ml,"P",{});var Mrt=s(gle);fRo=r(Mrt,"Examples:"),Mrt.forEach(t),mRo=i(ml),m(rw.$$.fragment,ml),ml.forEach(t),gRo=i(fl),We=n(fl,"DIV",{class:!0});var Ut=s(We);m(tw.$$.fragment,Ut),hRo=i(Ut),hle=n(Ut,"P",{});var Ert=s(hle);pRo=r(Ert,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ert.forEach(t),_Ro=i(Ut),Za=n(Ut,"P",{});var C3=s(Za);uRo=r(C3,"The model class to instantiate is selected based on the "),ple=n(C3,"CODE",{});var yrt=s(ple);bRo=r(yrt,"model_type"),yrt.forEach(t),vRo=r(C3,` property of the config object (either
passed as an argument or loaded from `),_le=n(C3,"CODE",{});var wrt=s(_le);TRo=r(wrt,"pretrained_model_name_or_path"),wrt.forEach(t),FRo=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ule=n(C3,"CODE",{});var Art=s(ule);CRo=r(Art,"pretrained_model_name_or_path"),Art.forEach(t),MRo=r(C3,":"),C3.forEach(t),ERo=i(Ut),R=n(Ut,"UL",{});var P=s(R);hb=n(P,"LI",{});var a0e=s(hb);ble=n(a0e,"STRONG",{});var Lrt=s(ble);yRo=r(Lrt,"albert"),Lrt.forEach(t),wRo=r(a0e," \u2014 "),UD=n(a0e,"A",{href:!0});var Brt=s(UD);ARo=r(Brt,"AlbertForQuestionAnswering"),Brt.forEach(t),LRo=r(a0e," (ALBERT model)"),a0e.forEach(t),BRo=i(P),pb=n(P,"LI",{});var n0e=s(pb);vle=n(n0e,"STRONG",{});var xrt=s(vle);xRo=r(xrt,"bart"),xrt.forEach(t),kRo=r(n0e," \u2014 "),JD=n(n0e,"A",{href:!0});var krt=s(JD);RRo=r(krt,"BartForQuestionAnswering"),krt.forEach(t),SRo=r(n0e," (BART model)"),n0e.forEach(t),PRo=i(P),_b=n(P,"LI",{});var s0e=s(_b);Tle=n(s0e,"STRONG",{});var Rrt=s(Tle);$Ro=r(Rrt,"bert"),Rrt.forEach(t),IRo=r(s0e," \u2014 "),YD=n(s0e,"A",{href:!0});var Srt=s(YD);NRo=r(Srt,"BertForQuestionAnswering"),Srt.forEach(t),DRo=r(s0e," (BERT model)"),s0e.forEach(t),jRo=i(P),ub=n(P,"LI",{});var l0e=s(ub);Fle=n(l0e,"STRONG",{});var Prt=s(Fle);qRo=r(Prt,"big_bird"),Prt.forEach(t),GRo=r(l0e," \u2014 "),KD=n(l0e,"A",{href:!0});var $rt=s(KD);ORo=r($rt,"BigBirdForQuestionAnswering"),$rt.forEach(t),XRo=r(l0e," (BigBird model)"),l0e.forEach(t),VRo=i(P),bb=n(P,"LI",{});var i0e=s(bb);Cle=n(i0e,"STRONG",{});var Irt=s(Cle);zRo=r(Irt,"bigbird_pegasus"),Irt.forEach(t),WRo=r(i0e," \u2014 "),ZD=n(i0e,"A",{href:!0});var Nrt=s(ZD);QRo=r(Nrt,"BigBirdPegasusForQuestionAnswering"),Nrt.forEach(t),HRo=r(i0e," (BigBirdPegasus model)"),i0e.forEach(t),URo=i(P),vb=n(P,"LI",{});var d0e=s(vb);Mle=n(d0e,"STRONG",{});var Drt=s(Mle);JRo=r(Drt,"camembert"),Drt.forEach(t),YRo=r(d0e," \u2014 "),ej=n(d0e,"A",{href:!0});var jrt=s(ej);KRo=r(jrt,"CamembertForQuestionAnswering"),jrt.forEach(t),ZRo=r(d0e," (CamemBERT model)"),d0e.forEach(t),eSo=i(P),Tb=n(P,"LI",{});var c0e=s(Tb);Ele=n(c0e,"STRONG",{});var qrt=s(Ele);oSo=r(qrt,"canine"),qrt.forEach(t),rSo=r(c0e," \u2014 "),oj=n(c0e,"A",{href:!0});var Grt=s(oj);tSo=r(Grt,"CanineForQuestionAnswering"),Grt.forEach(t),aSo=r(c0e," (Canine model)"),c0e.forEach(t),nSo=i(P),Fb=n(P,"LI",{});var f0e=s(Fb);yle=n(f0e,"STRONG",{});var Ort=s(yle);sSo=r(Ort,"convbert"),Ort.forEach(t),lSo=r(f0e," \u2014 "),rj=n(f0e,"A",{href:!0});var Xrt=s(rj);iSo=r(Xrt,"ConvBertForQuestionAnswering"),Xrt.forEach(t),dSo=r(f0e," (ConvBERT model)"),f0e.forEach(t),cSo=i(P),Cb=n(P,"LI",{});var m0e=s(Cb);wle=n(m0e,"STRONG",{});var Vrt=s(wle);fSo=r(Vrt,"data2vec-text"),Vrt.forEach(t),mSo=r(m0e," \u2014 "),tj=n(m0e,"A",{href:!0});var zrt=s(tj);gSo=r(zrt,"Data2VecTextForQuestionAnswering"),zrt.forEach(t),hSo=r(m0e," (Data2VecText model)"),m0e.forEach(t),pSo=i(P),Mb=n(P,"LI",{});var g0e=s(Mb);Ale=n(g0e,"STRONG",{});var Wrt=s(Ale);_So=r(Wrt,"deberta"),Wrt.forEach(t),uSo=r(g0e," \u2014 "),aj=n(g0e,"A",{href:!0});var Qrt=s(aj);bSo=r(Qrt,"DebertaForQuestionAnswering"),Qrt.forEach(t),vSo=r(g0e," (DeBERTa model)"),g0e.forEach(t),TSo=i(P),Eb=n(P,"LI",{});var h0e=s(Eb);Lle=n(h0e,"STRONG",{});var Hrt=s(Lle);FSo=r(Hrt,"deberta-v2"),Hrt.forEach(t),CSo=r(h0e," \u2014 "),nj=n(h0e,"A",{href:!0});var Urt=s(nj);MSo=r(Urt,"DebertaV2ForQuestionAnswering"),Urt.forEach(t),ESo=r(h0e," (DeBERTa-v2 model)"),h0e.forEach(t),ySo=i(P),yb=n(P,"LI",{});var p0e=s(yb);Ble=n(p0e,"STRONG",{});var Jrt=s(Ble);wSo=r(Jrt,"distilbert"),Jrt.forEach(t),ASo=r(p0e," \u2014 "),sj=n(p0e,"A",{href:!0});var Yrt=s(sj);LSo=r(Yrt,"DistilBertForQuestionAnswering"),Yrt.forEach(t),BSo=r(p0e," (DistilBERT model)"),p0e.forEach(t),xSo=i(P),wb=n(P,"LI",{});var _0e=s(wb);xle=n(_0e,"STRONG",{});var Krt=s(xle);kSo=r(Krt,"electra"),Krt.forEach(t),RSo=r(_0e," \u2014 "),lj=n(_0e,"A",{href:!0});var Zrt=s(lj);SSo=r(Zrt,"ElectraForQuestionAnswering"),Zrt.forEach(t),PSo=r(_0e," (ELECTRA model)"),_0e.forEach(t),$So=i(P),Ab=n(P,"LI",{});var u0e=s(Ab);kle=n(u0e,"STRONG",{});var ett=s(kle);ISo=r(ett,"flaubert"),ett.forEach(t),NSo=r(u0e," \u2014 "),ij=n(u0e,"A",{href:!0});var ott=s(ij);DSo=r(ott,"FlaubertForQuestionAnsweringSimple"),ott.forEach(t),jSo=r(u0e," (FlauBERT model)"),u0e.forEach(t),qSo=i(P),Lb=n(P,"LI",{});var b0e=s(Lb);Rle=n(b0e,"STRONG",{});var rtt=s(Rle);GSo=r(rtt,"fnet"),rtt.forEach(t),OSo=r(b0e," \u2014 "),dj=n(b0e,"A",{href:!0});var ttt=s(dj);XSo=r(ttt,"FNetForQuestionAnswering"),ttt.forEach(t),VSo=r(b0e," (FNet model)"),b0e.forEach(t),zSo=i(P),Bb=n(P,"LI",{});var v0e=s(Bb);Sle=n(v0e,"STRONG",{});var att=s(Sle);WSo=r(att,"funnel"),att.forEach(t),QSo=r(v0e," \u2014 "),cj=n(v0e,"A",{href:!0});var ntt=s(cj);HSo=r(ntt,"FunnelForQuestionAnswering"),ntt.forEach(t),USo=r(v0e," (Funnel Transformer model)"),v0e.forEach(t),JSo=i(P),xb=n(P,"LI",{});var T0e=s(xb);Ple=n(T0e,"STRONG",{});var stt=s(Ple);YSo=r(stt,"gptj"),stt.forEach(t),KSo=r(T0e," \u2014 "),fj=n(T0e,"A",{href:!0});var ltt=s(fj);ZSo=r(ltt,"GPTJForQuestionAnswering"),ltt.forEach(t),ePo=r(T0e," (GPT-J model)"),T0e.forEach(t),oPo=i(P),kb=n(P,"LI",{});var F0e=s(kb);$le=n(F0e,"STRONG",{});var itt=s($le);rPo=r(itt,"ibert"),itt.forEach(t),tPo=r(F0e," \u2014 "),mj=n(F0e,"A",{href:!0});var dtt=s(mj);aPo=r(dtt,"IBertForQuestionAnswering"),dtt.forEach(t),nPo=r(F0e," (I-BERT model)"),F0e.forEach(t),sPo=i(P),Rb=n(P,"LI",{});var C0e=s(Rb);Ile=n(C0e,"STRONG",{});var ctt=s(Ile);lPo=r(ctt,"layoutlmv2"),ctt.forEach(t),iPo=r(C0e," \u2014 "),gj=n(C0e,"A",{href:!0});var ftt=s(gj);dPo=r(ftt,"LayoutLMv2ForQuestionAnswering"),ftt.forEach(t),cPo=r(C0e," (LayoutLMv2 model)"),C0e.forEach(t),fPo=i(P),Sb=n(P,"LI",{});var M0e=s(Sb);Nle=n(M0e,"STRONG",{});var mtt=s(Nle);mPo=r(mtt,"led"),mtt.forEach(t),gPo=r(M0e," \u2014 "),hj=n(M0e,"A",{href:!0});var gtt=s(hj);hPo=r(gtt,"LEDForQuestionAnswering"),gtt.forEach(t),pPo=r(M0e," (LED model)"),M0e.forEach(t),_Po=i(P),Pb=n(P,"LI",{});var E0e=s(Pb);Dle=n(E0e,"STRONG",{});var htt=s(Dle);uPo=r(htt,"longformer"),htt.forEach(t),bPo=r(E0e," \u2014 "),pj=n(E0e,"A",{href:!0});var ptt=s(pj);vPo=r(ptt,"LongformerForQuestionAnswering"),ptt.forEach(t),TPo=r(E0e," (Longformer model)"),E0e.forEach(t),FPo=i(P),$b=n(P,"LI",{});var y0e=s($b);jle=n(y0e,"STRONG",{});var _tt=s(jle);CPo=r(_tt,"lxmert"),_tt.forEach(t),MPo=r(y0e," \u2014 "),_j=n(y0e,"A",{href:!0});var utt=s(_j);EPo=r(utt,"LxmertForQuestionAnswering"),utt.forEach(t),yPo=r(y0e," (LXMERT model)"),y0e.forEach(t),wPo=i(P),Ib=n(P,"LI",{});var w0e=s(Ib);qle=n(w0e,"STRONG",{});var btt=s(qle);APo=r(btt,"mbart"),btt.forEach(t),LPo=r(w0e," \u2014 "),uj=n(w0e,"A",{href:!0});var vtt=s(uj);BPo=r(vtt,"MBartForQuestionAnswering"),vtt.forEach(t),xPo=r(w0e," (mBART model)"),w0e.forEach(t),kPo=i(P),Nb=n(P,"LI",{});var A0e=s(Nb);Gle=n(A0e,"STRONG",{});var Ttt=s(Gle);RPo=r(Ttt,"megatron-bert"),Ttt.forEach(t),SPo=r(A0e," \u2014 "),bj=n(A0e,"A",{href:!0});var Ftt=s(bj);PPo=r(Ftt,"MegatronBertForQuestionAnswering"),Ftt.forEach(t),$Po=r(A0e," (MegatronBert model)"),A0e.forEach(t),IPo=i(P),Db=n(P,"LI",{});var L0e=s(Db);Ole=n(L0e,"STRONG",{});var Ctt=s(Ole);NPo=r(Ctt,"mobilebert"),Ctt.forEach(t),DPo=r(L0e," \u2014 "),vj=n(L0e,"A",{href:!0});var Mtt=s(vj);jPo=r(Mtt,"MobileBertForQuestionAnswering"),Mtt.forEach(t),qPo=r(L0e," (MobileBERT model)"),L0e.forEach(t),GPo=i(P),jb=n(P,"LI",{});var B0e=s(jb);Xle=n(B0e,"STRONG",{});var Ett=s(Xle);OPo=r(Ett,"mpnet"),Ett.forEach(t),XPo=r(B0e," \u2014 "),Tj=n(B0e,"A",{href:!0});var ytt=s(Tj);VPo=r(ytt,"MPNetForQuestionAnswering"),ytt.forEach(t),zPo=r(B0e," (MPNet model)"),B0e.forEach(t),WPo=i(P),qb=n(P,"LI",{});var x0e=s(qb);Vle=n(x0e,"STRONG",{});var wtt=s(Vle);QPo=r(wtt,"nystromformer"),wtt.forEach(t),HPo=r(x0e," \u2014 "),Fj=n(x0e,"A",{href:!0});var Att=s(Fj);UPo=r(Att,"NystromformerForQuestionAnswering"),Att.forEach(t),JPo=r(x0e," (Nystromformer model)"),x0e.forEach(t),YPo=i(P),Gb=n(P,"LI",{});var k0e=s(Gb);zle=n(k0e,"STRONG",{});var Ltt=s(zle);KPo=r(Ltt,"qdqbert"),Ltt.forEach(t),ZPo=r(k0e," \u2014 "),Cj=n(k0e,"A",{href:!0});var Btt=s(Cj);e$o=r(Btt,"QDQBertForQuestionAnswering"),Btt.forEach(t),o$o=r(k0e," (QDQBert model)"),k0e.forEach(t),r$o=i(P),Ob=n(P,"LI",{});var R0e=s(Ob);Wle=n(R0e,"STRONG",{});var xtt=s(Wle);t$o=r(xtt,"reformer"),xtt.forEach(t),a$o=r(R0e," \u2014 "),Mj=n(R0e,"A",{href:!0});var ktt=s(Mj);n$o=r(ktt,"ReformerForQuestionAnswering"),ktt.forEach(t),s$o=r(R0e," (Reformer model)"),R0e.forEach(t),l$o=i(P),Xb=n(P,"LI",{});var S0e=s(Xb);Qle=n(S0e,"STRONG",{});var Rtt=s(Qle);i$o=r(Rtt,"rembert"),Rtt.forEach(t),d$o=r(S0e," \u2014 "),Ej=n(S0e,"A",{href:!0});var Stt=s(Ej);c$o=r(Stt,"RemBertForQuestionAnswering"),Stt.forEach(t),f$o=r(S0e," (RemBERT model)"),S0e.forEach(t),m$o=i(P),Vb=n(P,"LI",{});var P0e=s(Vb);Hle=n(P0e,"STRONG",{});var Ptt=s(Hle);g$o=r(Ptt,"roberta"),Ptt.forEach(t),h$o=r(P0e," \u2014 "),yj=n(P0e,"A",{href:!0});var $tt=s(yj);p$o=r($tt,"RobertaForQuestionAnswering"),$tt.forEach(t),_$o=r(P0e," (RoBERTa model)"),P0e.forEach(t),u$o=i(P),zb=n(P,"LI",{});var $0e=s(zb);Ule=n($0e,"STRONG",{});var Itt=s(Ule);b$o=r(Itt,"roformer"),Itt.forEach(t),v$o=r($0e," \u2014 "),wj=n($0e,"A",{href:!0});var Ntt=s(wj);T$o=r(Ntt,"RoFormerForQuestionAnswering"),Ntt.forEach(t),F$o=r($0e," (RoFormer model)"),$0e.forEach(t),C$o=i(P),Wb=n(P,"LI",{});var I0e=s(Wb);Jle=n(I0e,"STRONG",{});var Dtt=s(Jle);M$o=r(Dtt,"splinter"),Dtt.forEach(t),E$o=r(I0e," \u2014 "),Aj=n(I0e,"A",{href:!0});var jtt=s(Aj);y$o=r(jtt,"SplinterForQuestionAnswering"),jtt.forEach(t),w$o=r(I0e," (Splinter model)"),I0e.forEach(t),A$o=i(P),Qb=n(P,"LI",{});var N0e=s(Qb);Yle=n(N0e,"STRONG",{});var qtt=s(Yle);L$o=r(qtt,"squeezebert"),qtt.forEach(t),B$o=r(N0e," \u2014 "),Lj=n(N0e,"A",{href:!0});var Gtt=s(Lj);x$o=r(Gtt,"SqueezeBertForQuestionAnswering"),Gtt.forEach(t),k$o=r(N0e," (SqueezeBERT model)"),N0e.forEach(t),R$o=i(P),Hb=n(P,"LI",{});var D0e=s(Hb);Kle=n(D0e,"STRONG",{});var Ott=s(Kle);S$o=r(Ott,"xlm"),Ott.forEach(t),P$o=r(D0e," \u2014 "),Bj=n(D0e,"A",{href:!0});var Xtt=s(Bj);$$o=r(Xtt,"XLMForQuestionAnsweringSimple"),Xtt.forEach(t),I$o=r(D0e," (XLM model)"),D0e.forEach(t),N$o=i(P),Ub=n(P,"LI",{});var j0e=s(Ub);Zle=n(j0e,"STRONG",{});var Vtt=s(Zle);D$o=r(Vtt,"xlm-roberta"),Vtt.forEach(t),j$o=r(j0e," \u2014 "),xj=n(j0e,"A",{href:!0});var ztt=s(xj);q$o=r(ztt,"XLMRobertaForQuestionAnswering"),ztt.forEach(t),G$o=r(j0e," (XLM-RoBERTa model)"),j0e.forEach(t),O$o=i(P),Jb=n(P,"LI",{});var q0e=s(Jb);eie=n(q0e,"STRONG",{});var Wtt=s(eie);X$o=r(Wtt,"xlm-roberta-xl"),Wtt.forEach(t),V$o=r(q0e," \u2014 "),kj=n(q0e,"A",{href:!0});var Qtt=s(kj);z$o=r(Qtt,"XLMRobertaXLForQuestionAnswering"),Qtt.forEach(t),W$o=r(q0e," (XLM-RoBERTa-XL model)"),q0e.forEach(t),Q$o=i(P),Yb=n(P,"LI",{});var G0e=s(Yb);oie=n(G0e,"STRONG",{});var Htt=s(oie);H$o=r(Htt,"xlnet"),Htt.forEach(t),U$o=r(G0e," \u2014 "),Rj=n(G0e,"A",{href:!0});var Utt=s(Rj);J$o=r(Utt,"XLNetForQuestionAnsweringSimple"),Utt.forEach(t),Y$o=r(G0e," (XLNet model)"),G0e.forEach(t),K$o=i(P),Kb=n(P,"LI",{});var O0e=s(Kb);rie=n(O0e,"STRONG",{});var Jtt=s(rie);Z$o=r(Jtt,"yoso"),Jtt.forEach(t),eIo=r(O0e," \u2014 "),Sj=n(O0e,"A",{href:!0});var Ytt=s(Sj);oIo=r(Ytt,"YosoForQuestionAnswering"),Ytt.forEach(t),rIo=r(O0e," (YOSO model)"),O0e.forEach(t),P.forEach(t),tIo=i(Ut),Zb=n(Ut,"P",{});var X0e=s(Zb);aIo=r(X0e,"The model is set in evaluation mode by default using "),tie=n(X0e,"CODE",{});var Ktt=s(tie);nIo=r(Ktt,"model.eval()"),Ktt.forEach(t),sIo=r(X0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aie=n(X0e,"CODE",{});var Ztt=s(aie);lIo=r(Ztt,"model.train()"),Ztt.forEach(t),X0e.forEach(t),iIo=i(Ut),nie=n(Ut,"P",{});var eat=s(nie);dIo=r(eat,"Examples:"),eat.forEach(t),cIo=i(Ut),m(aw.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),Uke=i(c),wd=n(c,"H2",{class:!0});var aPe=s(wd);ev=n(aPe,"A",{id:!0,class:!0,href:!0});var oat=s(ev);sie=n(oat,"SPAN",{});var rat=s(sie);m(nw.$$.fragment,rat),rat.forEach(t),oat.forEach(t),fIo=i(aPe),lie=n(aPe,"SPAN",{});var tat=s(lie);mIo=r(tat,"AutoModelForTableQuestionAnswering"),tat.forEach(t),aPe.forEach(t),Jke=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(sw.$$.fragment,gl),gIo=i(gl),Ad=n(gl,"P",{});var MW=s(Ad);hIo=r(MW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iie=n(MW,"CODE",{});var aat=s(iie);pIo=r(aat,"from_pretrained()"),aat.forEach(t),_Io=r(MW,"class method or the "),die=n(MW,"CODE",{});var nat=s(die);uIo=r(nat,"from_config()"),nat.forEach(t),bIo=r(MW,`class
method.`),MW.forEach(t),vIo=i(gl),lw=n(gl,"P",{});var nPe=s(lw);TIo=r(nPe,"This class cannot be instantiated directly using "),cie=n(nPe,"CODE",{});var sat=s(cie);FIo=r(sat,"__init__()"),sat.forEach(t),CIo=r(nPe," (throws an error)."),nPe.forEach(t),MIo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(iw.$$.fragment,hl),EIo=i(hl),fie=n(hl,"P",{});var lat=s(fie);yIo=r(lat,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),lat.forEach(t),wIo=i(hl),Ld=n(hl,"P",{});var EW=s(Ld);AIo=r(EW,`Note:
Loading a model from its configuration file does `),mie=n(EW,"STRONG",{});var iat=s(mie);LIo=r(iat,"not"),iat.forEach(t),BIo=r(EW,` load the model weights. It only affects the
model\u2019s configuration. Use `),gie=n(EW,"CODE",{});var dat=s(gie);xIo=r(dat,"from_pretrained()"),dat.forEach(t),kIo=r(EW,"to load the model weights."),EW.forEach(t),RIo=i(hl),hie=n(hl,"P",{});var cat=s(hie);SIo=r(cat,"Examples:"),cat.forEach(t),PIo=i(hl),m(dw.$$.fragment,hl),hl.forEach(t),$Io=i(gl),Qe=n(gl,"DIV",{class:!0});var Jt=s(Qe);m(cw.$$.fragment,Jt),IIo=i(Jt),pie=n(Jt,"P",{});var fat=s(pie);NIo=r(fat,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),fat.forEach(t),DIo=i(Jt),en=n(Jt,"P",{});var M3=s(en);jIo=r(M3,"The model class to instantiate is selected based on the "),_ie=n(M3,"CODE",{});var mat=s(_ie);qIo=r(mat,"model_type"),mat.forEach(t),GIo=r(M3,` property of the config object (either
passed as an argument or loaded from `),uie=n(M3,"CODE",{});var gat=s(uie);OIo=r(gat,"pretrained_model_name_or_path"),gat.forEach(t),XIo=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bie=n(M3,"CODE",{});var hat=s(bie);VIo=r(hat,"pretrained_model_name_or_path"),hat.forEach(t),zIo=r(M3,":"),M3.forEach(t),WIo=i(Jt),vie=n(Jt,"UL",{});var pat=s(vie);ov=n(pat,"LI",{});var V0e=s(ov);Tie=n(V0e,"STRONG",{});var _at=s(Tie);QIo=r(_at,"tapas"),_at.forEach(t),HIo=r(V0e," \u2014 "),Pj=n(V0e,"A",{href:!0});var uat=s(Pj);UIo=r(uat,"TapasForQuestionAnswering"),uat.forEach(t),JIo=r(V0e," (TAPAS model)"),V0e.forEach(t),pat.forEach(t),YIo=i(Jt),rv=n(Jt,"P",{});var z0e=s(rv);KIo=r(z0e,"The model is set in evaluation mode by default using "),Fie=n(z0e,"CODE",{});var bat=s(Fie);ZIo=r(bat,"model.eval()"),bat.forEach(t),eNo=r(z0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cie=n(z0e,"CODE",{});var vat=s(Cie);oNo=r(vat,"model.train()"),vat.forEach(t),z0e.forEach(t),rNo=i(Jt),Mie=n(Jt,"P",{});var Tat=s(Mie);tNo=r(Tat,"Examples:"),Tat.forEach(t),aNo=i(Jt),m(fw.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),Yke=i(c),Bd=n(c,"H2",{class:!0});var sPe=s(Bd);tv=n(sPe,"A",{id:!0,class:!0,href:!0});var Fat=s(tv);Eie=n(Fat,"SPAN",{});var Cat=s(Eie);m(mw.$$.fragment,Cat),Cat.forEach(t),Fat.forEach(t),nNo=i(sPe),yie=n(sPe,"SPAN",{});var Mat=s(yie);sNo=r(Mat,"AutoModelForImageClassification"),Mat.forEach(t),sPe.forEach(t),Kke=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(gw.$$.fragment,pl),lNo=i(pl),xd=n(pl,"P",{});var yW=s(xd);iNo=r(yW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wie=n(yW,"CODE",{});var Eat=s(wie);dNo=r(Eat,"from_pretrained()"),Eat.forEach(t),cNo=r(yW,"class method or the "),Aie=n(yW,"CODE",{});var yat=s(Aie);fNo=r(yat,"from_config()"),yat.forEach(t),mNo=r(yW,`class
method.`),yW.forEach(t),gNo=i(pl),hw=n(pl,"P",{});var lPe=s(hw);hNo=r(lPe,"This class cannot be instantiated directly using "),Lie=n(lPe,"CODE",{});var wat=s(Lie);pNo=r(wat,"__init__()"),wat.forEach(t),_No=r(lPe," (throws an error)."),lPe.forEach(t),uNo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(pw.$$.fragment,_l),bNo=i(_l),Bie=n(_l,"P",{});var Aat=s(Bie);vNo=r(Aat,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Aat.forEach(t),TNo=i(_l),kd=n(_l,"P",{});var wW=s(kd);FNo=r(wW,`Note:
Loading a model from its configuration file does `),xie=n(wW,"STRONG",{});var Lat=s(xie);CNo=r(Lat,"not"),Lat.forEach(t),MNo=r(wW,` load the model weights. It only affects the
model\u2019s configuration. Use `),kie=n(wW,"CODE",{});var Bat=s(kie);ENo=r(Bat,"from_pretrained()"),Bat.forEach(t),yNo=r(wW,"to load the model weights."),wW.forEach(t),wNo=i(_l),Rie=n(_l,"P",{});var xat=s(Rie);ANo=r(xat,"Examples:"),xat.forEach(t),LNo=i(_l),m(_w.$$.fragment,_l),_l.forEach(t),BNo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(uw.$$.fragment,Yt),xNo=i(Yt),Sie=n(Yt,"P",{});var kat=s(Sie);kNo=r(kat,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kat.forEach(t),RNo=i(Yt),on=n(Yt,"P",{});var E3=s(on);SNo=r(E3,"The model class to instantiate is selected based on the "),Pie=n(E3,"CODE",{});var Rat=s(Pie);PNo=r(Rat,"model_type"),Rat.forEach(t),$No=r(E3,` property of the config object (either
passed as an argument or loaded from `),$ie=n(E3,"CODE",{});var Sat=s($ie);INo=r(Sat,"pretrained_model_name_or_path"),Sat.forEach(t),NNo=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iie=n(E3,"CODE",{});var Pat=s(Iie);DNo=r(Pat,"pretrained_model_name_or_path"),Pat.forEach(t),jNo=r(E3,":"),E3.forEach(t),qNo=i(Yt),ce=n(Yt,"UL",{});var he=s(ce);av=n(he,"LI",{});var W0e=s(av);Nie=n(W0e,"STRONG",{});var $at=s(Nie);GNo=r($at,"beit"),$at.forEach(t),ONo=r(W0e," \u2014 "),$j=n(W0e,"A",{href:!0});var Iat=s($j);XNo=r(Iat,"BeitForImageClassification"),Iat.forEach(t),VNo=r(W0e," (BEiT model)"),W0e.forEach(t),zNo=i(he),nv=n(he,"LI",{});var Q0e=s(nv);Die=n(Q0e,"STRONG",{});var Nat=s(Die);WNo=r(Nat,"convnext"),Nat.forEach(t),QNo=r(Q0e," \u2014 "),Ij=n(Q0e,"A",{href:!0});var Dat=s(Ij);HNo=r(Dat,"ConvNextForImageClassification"),Dat.forEach(t),UNo=r(Q0e," (ConvNext model)"),Q0e.forEach(t),JNo=i(he),qs=n(he,"LI",{});var e9=s(qs);jie=n(e9,"STRONG",{});var jat=s(jie);YNo=r(jat,"deit"),jat.forEach(t),KNo=r(e9," \u2014 "),Nj=n(e9,"A",{href:!0});var qat=s(Nj);ZNo=r(qat,"DeiTForImageClassification"),qat.forEach(t),eDo=r(e9," or "),Dj=n(e9,"A",{href:!0});var Gat=s(Dj);oDo=r(Gat,"DeiTForImageClassificationWithTeacher"),Gat.forEach(t),rDo=r(e9," (DeiT model)"),e9.forEach(t),tDo=i(he),sv=n(he,"LI",{});var H0e=s(sv);qie=n(H0e,"STRONG",{});var Oat=s(qie);aDo=r(Oat,"imagegpt"),Oat.forEach(t),nDo=r(H0e," \u2014 "),jj=n(H0e,"A",{href:!0});var Xat=s(jj);sDo=r(Xat,"ImageGPTForImageClassification"),Xat.forEach(t),lDo=r(H0e," (ImageGPT model)"),H0e.forEach(t),iDo=i(he),ma=n(he,"LI",{});var Pf=s(ma);Gie=n(Pf,"STRONG",{});var Vat=s(Gie);dDo=r(Vat,"perceiver"),Vat.forEach(t),cDo=r(Pf," \u2014 "),qj=n(Pf,"A",{href:!0});var zat=s(qj);fDo=r(zat,"PerceiverForImageClassificationLearned"),zat.forEach(t),mDo=r(Pf," or "),Gj=n(Pf,"A",{href:!0});var Wat=s(Gj);gDo=r(Wat,"PerceiverForImageClassificationFourier"),Wat.forEach(t),hDo=r(Pf," or "),Oj=n(Pf,"A",{href:!0});var Qat=s(Oj);pDo=r(Qat,"PerceiverForImageClassificationConvProcessing"),Qat.forEach(t),_Do=r(Pf," (Perceiver model)"),Pf.forEach(t),uDo=i(he),lv=n(he,"LI",{});var U0e=s(lv);Oie=n(U0e,"STRONG",{});var Hat=s(Oie);bDo=r(Hat,"poolformer"),Hat.forEach(t),vDo=r(U0e," \u2014 "),Xj=n(U0e,"A",{href:!0});var Uat=s(Xj);TDo=r(Uat,"PoolFormerForImageClassification"),Uat.forEach(t),FDo=r(U0e," (PoolFormer model)"),U0e.forEach(t),CDo=i(he),iv=n(he,"LI",{});var J0e=s(iv);Xie=n(J0e,"STRONG",{});var Jat=s(Xie);MDo=r(Jat,"resnet"),Jat.forEach(t),EDo=r(J0e," \u2014 "),Vj=n(J0e,"A",{href:!0});var Yat=s(Vj);yDo=r(Yat,"ResNetForImageClassification"),Yat.forEach(t),wDo=r(J0e," (ResNet model)"),J0e.forEach(t),ADo=i(he),dv=n(he,"LI",{});var Y0e=s(dv);Vie=n(Y0e,"STRONG",{});var Kat=s(Vie);LDo=r(Kat,"resnetd"),Kat.forEach(t),BDo=r(Y0e," \u2014 "),zj=n(Y0e,"A",{href:!0});var Zat=s(zj);xDo=r(Zat,"ResNetDForImageClassification"),Zat.forEach(t),kDo=r(Y0e," (ResNet-D model)"),Y0e.forEach(t),RDo=i(he),cv=n(he,"LI",{});var K0e=s(cv);zie=n(K0e,"STRONG",{});var ent=s(zie);SDo=r(ent,"segformer"),ent.forEach(t),PDo=r(K0e," \u2014 "),Wj=n(K0e,"A",{href:!0});var ont=s(Wj);$Do=r(ont,"SegformerForImageClassification"),ont.forEach(t),IDo=r(K0e," (SegFormer model)"),K0e.forEach(t),NDo=i(he),fv=n(he,"LI",{});var Z0e=s(fv);Wie=n(Z0e,"STRONG",{});var rnt=s(Wie);DDo=r(rnt,"swin"),rnt.forEach(t),jDo=r(Z0e," \u2014 "),Qj=n(Z0e,"A",{href:!0});var tnt=s(Qj);qDo=r(tnt,"SwinForImageClassification"),tnt.forEach(t),GDo=r(Z0e," (Swin model)"),Z0e.forEach(t),ODo=i(he),mv=n(he,"LI",{});var eLe=s(mv);Qie=n(eLe,"STRONG",{});var ant=s(Qie);XDo=r(ant,"van"),ant.forEach(t),VDo=r(eLe," \u2014 "),Hj=n(eLe,"A",{href:!0});var nnt=s(Hj);zDo=r(nnt,"VanForImageClassification"),nnt.forEach(t),WDo=r(eLe," (VAN model)"),eLe.forEach(t),QDo=i(he),gv=n(he,"LI",{});var oLe=s(gv);Hie=n(oLe,"STRONG",{});var snt=s(Hie);HDo=r(snt,"vit"),snt.forEach(t),UDo=r(oLe," \u2014 "),Uj=n(oLe,"A",{href:!0});var lnt=s(Uj);JDo=r(lnt,"ViTForImageClassification"),lnt.forEach(t),YDo=r(oLe," (ViT model)"),oLe.forEach(t),he.forEach(t),KDo=i(Yt),hv=n(Yt,"P",{});var rLe=s(hv);ZDo=r(rLe,"The model is set in evaluation mode by default using "),Uie=n(rLe,"CODE",{});var int=s(Uie);ejo=r(int,"model.eval()"),int.forEach(t),ojo=r(rLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jie=n(rLe,"CODE",{});var dnt=s(Jie);rjo=r(dnt,"model.train()"),dnt.forEach(t),rLe.forEach(t),tjo=i(Yt),Yie=n(Yt,"P",{});var cnt=s(Yie);ajo=r(cnt,"Examples:"),cnt.forEach(t),njo=i(Yt),m(bw.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),Zke=i(c),Rd=n(c,"H2",{class:!0});var iPe=s(Rd);pv=n(iPe,"A",{id:!0,class:!0,href:!0});var fnt=s(pv);Kie=n(fnt,"SPAN",{});var mnt=s(Kie);m(vw.$$.fragment,mnt),mnt.forEach(t),fnt.forEach(t),sjo=i(iPe),Zie=n(iPe,"SPAN",{});var gnt=s(Zie);ljo=r(gnt,"AutoModelForVision2Seq"),gnt.forEach(t),iPe.forEach(t),eRe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(Tw.$$.fragment,ul),ijo=i(ul),Sd=n(ul,"P",{});var AW=s(Sd);djo=r(AW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ede=n(AW,"CODE",{});var hnt=s(ede);cjo=r(hnt,"from_pretrained()"),hnt.forEach(t),fjo=r(AW,"class method or the "),ode=n(AW,"CODE",{});var pnt=s(ode);mjo=r(pnt,"from_config()"),pnt.forEach(t),gjo=r(AW,`class
method.`),AW.forEach(t),hjo=i(ul),Fw=n(ul,"P",{});var dPe=s(Fw);pjo=r(dPe,"This class cannot be instantiated directly using "),rde=n(dPe,"CODE",{});var _nt=s(rde);_jo=r(_nt,"__init__()"),_nt.forEach(t),ujo=r(dPe," (throws an error)."),dPe.forEach(t),bjo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(Cw.$$.fragment,bl),vjo=i(bl),tde=n(bl,"P",{});var unt=s(tde);Tjo=r(unt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),unt.forEach(t),Fjo=i(bl),Pd=n(bl,"P",{});var LW=s(Pd);Cjo=r(LW,`Note:
Loading a model from its configuration file does `),ade=n(LW,"STRONG",{});var bnt=s(ade);Mjo=r(bnt,"not"),bnt.forEach(t),Ejo=r(LW,` load the model weights. It only affects the
model\u2019s configuration. Use `),nde=n(LW,"CODE",{});var vnt=s(nde);yjo=r(vnt,"from_pretrained()"),vnt.forEach(t),wjo=r(LW,"to load the model weights."),LW.forEach(t),Ajo=i(bl),sde=n(bl,"P",{});var Tnt=s(sde);Ljo=r(Tnt,"Examples:"),Tnt.forEach(t),Bjo=i(bl),m(Mw.$$.fragment,bl),bl.forEach(t),xjo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(Ew.$$.fragment,Kt),kjo=i(Kt),lde=n(Kt,"P",{});var Fnt=s(lde);Rjo=r(Fnt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Fnt.forEach(t),Sjo=i(Kt),rn=n(Kt,"P",{});var y3=s(rn);Pjo=r(y3,"The model class to instantiate is selected based on the "),ide=n(y3,"CODE",{});var Cnt=s(ide);$jo=r(Cnt,"model_type"),Cnt.forEach(t),Ijo=r(y3,` property of the config object (either
passed as an argument or loaded from `),dde=n(y3,"CODE",{});var Mnt=s(dde);Njo=r(Mnt,"pretrained_model_name_or_path"),Mnt.forEach(t),Djo=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=n(y3,"CODE",{});var Ent=s(cde);jjo=r(Ent,"pretrained_model_name_or_path"),Ent.forEach(t),qjo=r(y3,":"),y3.forEach(t),Gjo=i(Kt),fde=n(Kt,"UL",{});var ynt=s(fde);_v=n(ynt,"LI",{});var tLe=s(_v);mde=n(tLe,"STRONG",{});var wnt=s(mde);Ojo=r(wnt,"vision-encoder-decoder"),wnt.forEach(t),Xjo=r(tLe," \u2014 "),Jj=n(tLe,"A",{href:!0});var Ant=s(Jj);Vjo=r(Ant,"VisionEncoderDecoderModel"),Ant.forEach(t),zjo=r(tLe," (Vision Encoder decoder model)"),tLe.forEach(t),ynt.forEach(t),Wjo=i(Kt),uv=n(Kt,"P",{});var aLe=s(uv);Qjo=r(aLe,"The model is set in evaluation mode by default using "),gde=n(aLe,"CODE",{});var Lnt=s(gde);Hjo=r(Lnt,"model.eval()"),Lnt.forEach(t),Ujo=r(aLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hde=n(aLe,"CODE",{});var Bnt=s(hde);Jjo=r(Bnt,"model.train()"),Bnt.forEach(t),aLe.forEach(t),Yjo=i(Kt),pde=n(Kt,"P",{});var xnt=s(pde);Kjo=r(xnt,"Examples:"),xnt.forEach(t),Zjo=i(Kt),m(yw.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),oRe=i(c),$d=n(c,"H2",{class:!0});var cPe=s($d);bv=n(cPe,"A",{id:!0,class:!0,href:!0});var knt=s(bv);_de=n(knt,"SPAN",{});var Rnt=s(_de);m(ww.$$.fragment,Rnt),Rnt.forEach(t),knt.forEach(t),eqo=i(cPe),ude=n(cPe,"SPAN",{});var Snt=s(ude);oqo=r(Snt,"AutoModelForAudioClassification"),Snt.forEach(t),cPe.forEach(t),rRe=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(Aw.$$.fragment,vl),rqo=i(vl),Id=n(vl,"P",{});var BW=s(Id);tqo=r(BW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),bde=n(BW,"CODE",{});var Pnt=s(bde);aqo=r(Pnt,"from_pretrained()"),Pnt.forEach(t),nqo=r(BW,"class method or the "),vde=n(BW,"CODE",{});var $nt=s(vde);sqo=r($nt,"from_config()"),$nt.forEach(t),lqo=r(BW,`class
method.`),BW.forEach(t),iqo=i(vl),Lw=n(vl,"P",{});var fPe=s(Lw);dqo=r(fPe,"This class cannot be instantiated directly using "),Tde=n(fPe,"CODE",{});var Int=s(Tde);cqo=r(Int,"__init__()"),Int.forEach(t),fqo=r(fPe," (throws an error)."),fPe.forEach(t),mqo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(Bw.$$.fragment,Tl),gqo=i(Tl),Fde=n(Tl,"P",{});var Nnt=s(Fde);hqo=r(Nnt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Nnt.forEach(t),pqo=i(Tl),Nd=n(Tl,"P",{});var xW=s(Nd);_qo=r(xW,`Note:
Loading a model from its configuration file does `),Cde=n(xW,"STRONG",{});var Dnt=s(Cde);uqo=r(Dnt,"not"),Dnt.forEach(t),bqo=r(xW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mde=n(xW,"CODE",{});var jnt=s(Mde);vqo=r(jnt,"from_pretrained()"),jnt.forEach(t),Tqo=r(xW,"to load the model weights."),xW.forEach(t),Fqo=i(Tl),Ede=n(Tl,"P",{});var qnt=s(Ede);Cqo=r(qnt,"Examples:"),qnt.forEach(t),Mqo=i(Tl),m(xw.$$.fragment,Tl),Tl.forEach(t),Eqo=i(vl),Je=n(vl,"DIV",{class:!0});var Zt=s(Je);m(kw.$$.fragment,Zt),yqo=i(Zt),yde=n(Zt,"P",{});var Gnt=s(yde);wqo=r(Gnt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Gnt.forEach(t),Aqo=i(Zt),tn=n(Zt,"P",{});var w3=s(tn);Lqo=r(w3,"The model class to instantiate is selected based on the "),wde=n(w3,"CODE",{});var Ont=s(wde);Bqo=r(Ont,"model_type"),Ont.forEach(t),xqo=r(w3,` property of the config object (either
passed as an argument or loaded from `),Ade=n(w3,"CODE",{});var Xnt=s(Ade);kqo=r(Xnt,"pretrained_model_name_or_path"),Xnt.forEach(t),Rqo=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lde=n(w3,"CODE",{});var Vnt=s(Lde);Sqo=r(Vnt,"pretrained_model_name_or_path"),Vnt.forEach(t),Pqo=r(w3,":"),w3.forEach(t),$qo=i(Zt),ke=n(Zt,"UL",{});var qo=s(ke);vv=n(qo,"LI",{});var nLe=s(vv);Bde=n(nLe,"STRONG",{});var znt=s(Bde);Iqo=r(znt,"data2vec-audio"),znt.forEach(t),Nqo=r(nLe," \u2014 "),Yj=n(nLe,"A",{href:!0});var Wnt=s(Yj);Dqo=r(Wnt,"Data2VecAudioForSequenceClassification"),Wnt.forEach(t),jqo=r(nLe," (Data2VecAudio model)"),nLe.forEach(t),qqo=i(qo),Tv=n(qo,"LI",{});var sLe=s(Tv);xde=n(sLe,"STRONG",{});var Qnt=s(xde);Gqo=r(Qnt,"hubert"),Qnt.forEach(t),Oqo=r(sLe," \u2014 "),Kj=n(sLe,"A",{href:!0});var Hnt=s(Kj);Xqo=r(Hnt,"HubertForSequenceClassification"),Hnt.forEach(t),Vqo=r(sLe," (Hubert model)"),sLe.forEach(t),zqo=i(qo),Fv=n(qo,"LI",{});var lLe=s(Fv);kde=n(lLe,"STRONG",{});var Unt=s(kde);Wqo=r(Unt,"sew"),Unt.forEach(t),Qqo=r(lLe," \u2014 "),Zj=n(lLe,"A",{href:!0});var Jnt=s(Zj);Hqo=r(Jnt,"SEWForSequenceClassification"),Jnt.forEach(t),Uqo=r(lLe," (SEW model)"),lLe.forEach(t),Jqo=i(qo),Cv=n(qo,"LI",{});var iLe=s(Cv);Rde=n(iLe,"STRONG",{});var Ynt=s(Rde);Yqo=r(Ynt,"sew-d"),Ynt.forEach(t),Kqo=r(iLe," \u2014 "),eq=n(iLe,"A",{href:!0});var Knt=s(eq);Zqo=r(Knt,"SEWDForSequenceClassification"),Knt.forEach(t),eGo=r(iLe," (SEW-D model)"),iLe.forEach(t),oGo=i(qo),Mv=n(qo,"LI",{});var dLe=s(Mv);Sde=n(dLe,"STRONG",{});var Znt=s(Sde);rGo=r(Znt,"unispeech"),Znt.forEach(t),tGo=r(dLe," \u2014 "),oq=n(dLe,"A",{href:!0});var est=s(oq);aGo=r(est,"UniSpeechForSequenceClassification"),est.forEach(t),nGo=r(dLe," (UniSpeech model)"),dLe.forEach(t),sGo=i(qo),Ev=n(qo,"LI",{});var cLe=s(Ev);Pde=n(cLe,"STRONG",{});var ost=s(Pde);lGo=r(ost,"unispeech-sat"),ost.forEach(t),iGo=r(cLe," \u2014 "),rq=n(cLe,"A",{href:!0});var rst=s(rq);dGo=r(rst,"UniSpeechSatForSequenceClassification"),rst.forEach(t),cGo=r(cLe," (UniSpeechSat model)"),cLe.forEach(t),fGo=i(qo),yv=n(qo,"LI",{});var fLe=s(yv);$de=n(fLe,"STRONG",{});var tst=s($de);mGo=r(tst,"wav2vec2"),tst.forEach(t),gGo=r(fLe," \u2014 "),tq=n(fLe,"A",{href:!0});var ast=s(tq);hGo=r(ast,"Wav2Vec2ForSequenceClassification"),ast.forEach(t),pGo=r(fLe," (Wav2Vec2 model)"),fLe.forEach(t),_Go=i(qo),wv=n(qo,"LI",{});var mLe=s(wv);Ide=n(mLe,"STRONG",{});var nst=s(Ide);uGo=r(nst,"wavlm"),nst.forEach(t),bGo=r(mLe," \u2014 "),aq=n(mLe,"A",{href:!0});var sst=s(aq);vGo=r(sst,"WavLMForSequenceClassification"),sst.forEach(t),TGo=r(mLe," (WavLM model)"),mLe.forEach(t),qo.forEach(t),FGo=i(Zt),Av=n(Zt,"P",{});var gLe=s(Av);CGo=r(gLe,"The model is set in evaluation mode by default using "),Nde=n(gLe,"CODE",{});var lst=s(Nde);MGo=r(lst,"model.eval()"),lst.forEach(t),EGo=r(gLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dde=n(gLe,"CODE",{});var ist=s(Dde);yGo=r(ist,"model.train()"),ist.forEach(t),gLe.forEach(t),wGo=i(Zt),jde=n(Zt,"P",{});var dst=s(jde);AGo=r(dst,"Examples:"),dst.forEach(t),LGo=i(Zt),m(Rw.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),tRe=i(c),Dd=n(c,"H2",{class:!0});var mPe=s(Dd);Lv=n(mPe,"A",{id:!0,class:!0,href:!0});var cst=s(Lv);qde=n(cst,"SPAN",{});var fst=s(qde);m(Sw.$$.fragment,fst),fst.forEach(t),cst.forEach(t),BGo=i(mPe),Gde=n(mPe,"SPAN",{});var mst=s(Gde);xGo=r(mst,"AutoModelForAudioFrameClassification"),mst.forEach(t),mPe.forEach(t),aRe=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);m(Pw.$$.fragment,Fl),kGo=i(Fl),jd=n(Fl,"P",{});var kW=s(jd);RGo=r(kW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Ode=n(kW,"CODE",{});var gst=s(Ode);SGo=r(gst,"from_pretrained()"),gst.forEach(t),PGo=r(kW,"class method or the "),Xde=n(kW,"CODE",{});var hst=s(Xde);$Go=r(hst,"from_config()"),hst.forEach(t),IGo=r(kW,`class
method.`),kW.forEach(t),NGo=i(Fl),$w=n(Fl,"P",{});var gPe=s($w);DGo=r(gPe,"This class cannot be instantiated directly using "),Vde=n(gPe,"CODE",{});var pst=s(Vde);jGo=r(pst,"__init__()"),pst.forEach(t),qGo=r(gPe," (throws an error)."),gPe.forEach(t),GGo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);m(Iw.$$.fragment,Cl),OGo=i(Cl),zde=n(Cl,"P",{});var _st=s(zde);XGo=r(_st,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),_st.forEach(t),VGo=i(Cl),qd=n(Cl,"P",{});var RW=s(qd);zGo=r(RW,`Note:
Loading a model from its configuration file does `),Wde=n(RW,"STRONG",{});var ust=s(Wde);WGo=r(ust,"not"),ust.forEach(t),QGo=r(RW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qde=n(RW,"CODE",{});var bst=s(Qde);HGo=r(bst,"from_pretrained()"),bst.forEach(t),UGo=r(RW,"to load the model weights."),RW.forEach(t),JGo=i(Cl),Hde=n(Cl,"P",{});var vst=s(Hde);YGo=r(vst,"Examples:"),vst.forEach(t),KGo=i(Cl),m(Nw.$$.fragment,Cl),Cl.forEach(t),ZGo=i(Fl),Ye=n(Fl,"DIV",{class:!0});var ea=s(Ye);m(Dw.$$.fragment,ea),eOo=i(ea),Ude=n(ea,"P",{});var Tst=s(Ude);oOo=r(Tst,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Tst.forEach(t),rOo=i(ea),an=n(ea,"P",{});var A3=s(an);tOo=r(A3,"The model class to instantiate is selected based on the "),Jde=n(A3,"CODE",{});var Fst=s(Jde);aOo=r(Fst,"model_type"),Fst.forEach(t),nOo=r(A3,` property of the config object (either
passed as an argument or loaded from `),Yde=n(A3,"CODE",{});var Cst=s(Yde);sOo=r(Cst,"pretrained_model_name_or_path"),Cst.forEach(t),lOo=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kde=n(A3,"CODE",{});var Mst=s(Kde);iOo=r(Mst,"pretrained_model_name_or_path"),Mst.forEach(t),dOo=r(A3,":"),A3.forEach(t),cOo=i(ea),nn=n(ea,"UL",{});var L3=s(nn);Bv=n(L3,"LI",{});var hLe=s(Bv);Zde=n(hLe,"STRONG",{});var Est=s(Zde);fOo=r(Est,"data2vec-audio"),Est.forEach(t),mOo=r(hLe," \u2014 "),nq=n(hLe,"A",{href:!0});var yst=s(nq);gOo=r(yst,"Data2VecAudioForAudioFrameClassification"),yst.forEach(t),hOo=r(hLe," (Data2VecAudio model)"),hLe.forEach(t),pOo=i(L3),xv=n(L3,"LI",{});var pLe=s(xv);ece=n(pLe,"STRONG",{});var wst=s(ece);_Oo=r(wst,"unispeech-sat"),wst.forEach(t),uOo=r(pLe," \u2014 "),sq=n(pLe,"A",{href:!0});var Ast=s(sq);bOo=r(Ast,"UniSpeechSatForAudioFrameClassification"),Ast.forEach(t),vOo=r(pLe," (UniSpeechSat model)"),pLe.forEach(t),TOo=i(L3),kv=n(L3,"LI",{});var _Le=s(kv);oce=n(_Le,"STRONG",{});var Lst=s(oce);FOo=r(Lst,"wav2vec2"),Lst.forEach(t),COo=r(_Le," \u2014 "),lq=n(_Le,"A",{href:!0});var Bst=s(lq);MOo=r(Bst,"Wav2Vec2ForAudioFrameClassification"),Bst.forEach(t),EOo=r(_Le," (Wav2Vec2 model)"),_Le.forEach(t),yOo=i(L3),Rv=n(L3,"LI",{});var uLe=s(Rv);rce=n(uLe,"STRONG",{});var xst=s(rce);wOo=r(xst,"wavlm"),xst.forEach(t),AOo=r(uLe," \u2014 "),iq=n(uLe,"A",{href:!0});var kst=s(iq);LOo=r(kst,"WavLMForAudioFrameClassification"),kst.forEach(t),BOo=r(uLe," (WavLM model)"),uLe.forEach(t),L3.forEach(t),xOo=i(ea),Sv=n(ea,"P",{});var bLe=s(Sv);kOo=r(bLe,"The model is set in evaluation mode by default using "),tce=n(bLe,"CODE",{});var Rst=s(tce);ROo=r(Rst,"model.eval()"),Rst.forEach(t),SOo=r(bLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ace=n(bLe,"CODE",{});var Sst=s(ace);POo=r(Sst,"model.train()"),Sst.forEach(t),bLe.forEach(t),$Oo=i(ea),nce=n(ea,"P",{});var Pst=s(nce);IOo=r(Pst,"Examples:"),Pst.forEach(t),NOo=i(ea),m(jw.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),nRe=i(c),Gd=n(c,"H2",{class:!0});var hPe=s(Gd);Pv=n(hPe,"A",{id:!0,class:!0,href:!0});var $st=s(Pv);sce=n($st,"SPAN",{});var Ist=s(sce);m(qw.$$.fragment,Ist),Ist.forEach(t),$st.forEach(t),DOo=i(hPe),lce=n(hPe,"SPAN",{});var Nst=s(lce);jOo=r(Nst,"AutoModelForCTC"),Nst.forEach(t),hPe.forEach(t),sRe=i(c),fr=n(c,"DIV",{class:!0});var Ml=s(fr);m(Gw.$$.fragment,Ml),qOo=i(Ml),Od=n(Ml,"P",{});var SW=s(Od);GOo=r(SW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ice=n(SW,"CODE",{});var Dst=s(ice);OOo=r(Dst,"from_pretrained()"),Dst.forEach(t),XOo=r(SW,"class method or the "),dce=n(SW,"CODE",{});var jst=s(dce);VOo=r(jst,"from_config()"),jst.forEach(t),zOo=r(SW,`class
method.`),SW.forEach(t),WOo=i(Ml),Ow=n(Ml,"P",{});var pPe=s(Ow);QOo=r(pPe,"This class cannot be instantiated directly using "),cce=n(pPe,"CODE",{});var qst=s(cce);HOo=r(qst,"__init__()"),qst.forEach(t),UOo=r(pPe," (throws an error)."),pPe.forEach(t),JOo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);m(Xw.$$.fragment,El),YOo=i(El),fce=n(El,"P",{});var Gst=s(fce);KOo=r(Gst,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Gst.forEach(t),ZOo=i(El),Xd=n(El,"P",{});var PW=s(Xd);eXo=r(PW,`Note:
Loading a model from its configuration file does `),mce=n(PW,"STRONG",{});var Ost=s(mce);oXo=r(Ost,"not"),Ost.forEach(t),rXo=r(PW,` load the model weights. It only affects the
model\u2019s configuration. Use `),gce=n(PW,"CODE",{});var Xst=s(gce);tXo=r(Xst,"from_pretrained()"),Xst.forEach(t),aXo=r(PW,"to load the model weights."),PW.forEach(t),nXo=i(El),hce=n(El,"P",{});var Vst=s(hce);sXo=r(Vst,"Examples:"),Vst.forEach(t),lXo=i(El),m(Vw.$$.fragment,El),El.forEach(t),iXo=i(Ml),Ke=n(Ml,"DIV",{class:!0});var oa=s(Ke);m(zw.$$.fragment,oa),dXo=i(oa),pce=n(oa,"P",{});var zst=s(pce);cXo=r(zst,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),zst.forEach(t),fXo=i(oa),sn=n(oa,"P",{});var B3=s(sn);mXo=r(B3,"The model class to instantiate is selected based on the "),_ce=n(B3,"CODE",{});var Wst=s(_ce);gXo=r(Wst,"model_type"),Wst.forEach(t),hXo=r(B3,` property of the config object (either
passed as an argument or loaded from `),uce=n(B3,"CODE",{});var Qst=s(uce);pXo=r(Qst,"pretrained_model_name_or_path"),Qst.forEach(t),_Xo=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=n(B3,"CODE",{});var Hst=s(bce);uXo=r(Hst,"pretrained_model_name_or_path"),Hst.forEach(t),bXo=r(B3,":"),B3.forEach(t),vXo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);$v=n(Go,"LI",{});var vLe=s($v);vce=n(vLe,"STRONG",{});var Ust=s(vce);TXo=r(Ust,"data2vec-audio"),Ust.forEach(t),FXo=r(vLe," \u2014 "),dq=n(vLe,"A",{href:!0});var Jst=s(dq);CXo=r(Jst,"Data2VecAudioForCTC"),Jst.forEach(t),MXo=r(vLe," (Data2VecAudio model)"),vLe.forEach(t),EXo=i(Go),Iv=n(Go,"LI",{});var TLe=s(Iv);Tce=n(TLe,"STRONG",{});var Yst=s(Tce);yXo=r(Yst,"hubert"),Yst.forEach(t),wXo=r(TLe," \u2014 "),cq=n(TLe,"A",{href:!0});var Kst=s(cq);AXo=r(Kst,"HubertForCTC"),Kst.forEach(t),LXo=r(TLe," (Hubert model)"),TLe.forEach(t),BXo=i(Go),Nv=n(Go,"LI",{});var FLe=s(Nv);Fce=n(FLe,"STRONG",{});var Zst=s(Fce);xXo=r(Zst,"sew"),Zst.forEach(t),kXo=r(FLe," \u2014 "),fq=n(FLe,"A",{href:!0});var elt=s(fq);RXo=r(elt,"SEWForCTC"),elt.forEach(t),SXo=r(FLe," (SEW model)"),FLe.forEach(t),PXo=i(Go),Dv=n(Go,"LI",{});var CLe=s(Dv);Cce=n(CLe,"STRONG",{});var olt=s(Cce);$Xo=r(olt,"sew-d"),olt.forEach(t),IXo=r(CLe," \u2014 "),mq=n(CLe,"A",{href:!0});var rlt=s(mq);NXo=r(rlt,"SEWDForCTC"),rlt.forEach(t),DXo=r(CLe," (SEW-D model)"),CLe.forEach(t),jXo=i(Go),jv=n(Go,"LI",{});var MLe=s(jv);Mce=n(MLe,"STRONG",{});var tlt=s(Mce);qXo=r(tlt,"unispeech"),tlt.forEach(t),GXo=r(MLe," \u2014 "),gq=n(MLe,"A",{href:!0});var alt=s(gq);OXo=r(alt,"UniSpeechForCTC"),alt.forEach(t),XXo=r(MLe," (UniSpeech model)"),MLe.forEach(t),VXo=i(Go),qv=n(Go,"LI",{});var ELe=s(qv);Ece=n(ELe,"STRONG",{});var nlt=s(Ece);zXo=r(nlt,"unispeech-sat"),nlt.forEach(t),WXo=r(ELe," \u2014 "),hq=n(ELe,"A",{href:!0});var slt=s(hq);QXo=r(slt,"UniSpeechSatForCTC"),slt.forEach(t),HXo=r(ELe," (UniSpeechSat model)"),ELe.forEach(t),UXo=i(Go),Gv=n(Go,"LI",{});var yLe=s(Gv);yce=n(yLe,"STRONG",{});var llt=s(yce);JXo=r(llt,"wav2vec2"),llt.forEach(t),YXo=r(yLe," \u2014 "),pq=n(yLe,"A",{href:!0});var ilt=s(pq);KXo=r(ilt,"Wav2Vec2ForCTC"),ilt.forEach(t),ZXo=r(yLe," (Wav2Vec2 model)"),yLe.forEach(t),eVo=i(Go),Ov=n(Go,"LI",{});var wLe=s(Ov);wce=n(wLe,"STRONG",{});var dlt=s(wce);oVo=r(dlt,"wavlm"),dlt.forEach(t),rVo=r(wLe," \u2014 "),_q=n(wLe,"A",{href:!0});var clt=s(_q);tVo=r(clt,"WavLMForCTC"),clt.forEach(t),aVo=r(wLe," (WavLM model)"),wLe.forEach(t),Go.forEach(t),nVo=i(oa),Xv=n(oa,"P",{});var ALe=s(Xv);sVo=r(ALe,"The model is set in evaluation mode by default using "),Ace=n(ALe,"CODE",{});var flt=s(Ace);lVo=r(flt,"model.eval()"),flt.forEach(t),iVo=r(ALe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=n(ALe,"CODE",{});var mlt=s(Lce);dVo=r(mlt,"model.train()"),mlt.forEach(t),ALe.forEach(t),cVo=i(oa),Bce=n(oa,"P",{});var glt=s(Bce);fVo=r(glt,"Examples:"),glt.forEach(t),mVo=i(oa),m(Ww.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),lRe=i(c),Vd=n(c,"H2",{class:!0});var _Pe=s(Vd);Vv=n(_Pe,"A",{id:!0,class:!0,href:!0});var hlt=s(Vv);xce=n(hlt,"SPAN",{});var plt=s(xce);m(Qw.$$.fragment,plt),plt.forEach(t),hlt.forEach(t),gVo=i(_Pe),kce=n(_Pe,"SPAN",{});var _lt=s(kce);hVo=r(_lt,"AutoModelForSpeechSeq2Seq"),_lt.forEach(t),_Pe.forEach(t),iRe=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(Hw.$$.fragment,yl),pVo=i(yl),zd=n(yl,"P",{});var $W=s(zd);_Vo=r($W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Rce=n($W,"CODE",{});var ult=s(Rce);uVo=r(ult,"from_pretrained()"),ult.forEach(t),bVo=r($W,"class method or the "),Sce=n($W,"CODE",{});var blt=s(Sce);vVo=r(blt,"from_config()"),blt.forEach(t),TVo=r($W,`class
method.`),$W.forEach(t),FVo=i(yl),Uw=n(yl,"P",{});var uPe=s(Uw);CVo=r(uPe,"This class cannot be instantiated directly using "),Pce=n(uPe,"CODE",{});var vlt=s(Pce);MVo=r(vlt,"__init__()"),vlt.forEach(t),EVo=r(uPe," (throws an error)."),uPe.forEach(t),yVo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);m(Jw.$$.fragment,wl),wVo=i(wl),$ce=n(wl,"P",{});var Tlt=s($ce);AVo=r(Tlt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Tlt.forEach(t),LVo=i(wl),Wd=n(wl,"P",{});var IW=s(Wd);BVo=r(IW,`Note:
Loading a model from its configuration file does `),Ice=n(IW,"STRONG",{});var Flt=s(Ice);xVo=r(Flt,"not"),Flt.forEach(t),kVo=r(IW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nce=n(IW,"CODE",{});var Clt=s(Nce);RVo=r(Clt,"from_pretrained()"),Clt.forEach(t),SVo=r(IW,"to load the model weights."),IW.forEach(t),PVo=i(wl),Dce=n(wl,"P",{});var Mlt=s(Dce);$Vo=r(Mlt,"Examples:"),Mlt.forEach(t),IVo=i(wl),m(Yw.$$.fragment,wl),wl.forEach(t),NVo=i(yl),Ze=n(yl,"DIV",{class:!0});var ra=s(Ze);m(Kw.$$.fragment,ra),DVo=i(ra),jce=n(ra,"P",{});var Elt=s(jce);jVo=r(Elt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Elt.forEach(t),qVo=i(ra),ln=n(ra,"P",{});var x3=s(ln);GVo=r(x3,"The model class to instantiate is selected based on the "),qce=n(x3,"CODE",{});var ylt=s(qce);OVo=r(ylt,"model_type"),ylt.forEach(t),XVo=r(x3,` property of the config object (either
passed as an argument or loaded from `),Gce=n(x3,"CODE",{});var wlt=s(Gce);VVo=r(wlt,"pretrained_model_name_or_path"),wlt.forEach(t),zVo=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=n(x3,"CODE",{});var Alt=s(Oce);WVo=r(Alt,"pretrained_model_name_or_path"),Alt.forEach(t),QVo=r(x3,":"),x3.forEach(t),HVo=i(ra),Zw=n(ra,"UL",{});var bPe=s(Zw);zv=n(bPe,"LI",{});var LLe=s(zv);Xce=n(LLe,"STRONG",{});var Llt=s(Xce);UVo=r(Llt,"speech-encoder-decoder"),Llt.forEach(t),JVo=r(LLe," \u2014 "),uq=n(LLe,"A",{href:!0});var Blt=s(uq);YVo=r(Blt,"SpeechEncoderDecoderModel"),Blt.forEach(t),KVo=r(LLe," (Speech Encoder decoder model)"),LLe.forEach(t),ZVo=i(bPe),Wv=n(bPe,"LI",{});var BLe=s(Wv);Vce=n(BLe,"STRONG",{});var xlt=s(Vce);ezo=r(xlt,"speech_to_text"),xlt.forEach(t),ozo=r(BLe," \u2014 "),bq=n(BLe,"A",{href:!0});var klt=s(bq);rzo=r(klt,"Speech2TextForConditionalGeneration"),klt.forEach(t),tzo=r(BLe," (Speech2Text model)"),BLe.forEach(t),bPe.forEach(t),azo=i(ra),Qv=n(ra,"P",{});var xLe=s(Qv);nzo=r(xLe,"The model is set in evaluation mode by default using "),zce=n(xLe,"CODE",{});var Rlt=s(zce);szo=r(Rlt,"model.eval()"),Rlt.forEach(t),lzo=r(xLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wce=n(xLe,"CODE",{});var Slt=s(Wce);izo=r(Slt,"model.train()"),Slt.forEach(t),xLe.forEach(t),dzo=i(ra),Qce=n(ra,"P",{});var Plt=s(Qce);czo=r(Plt,"Examples:"),Plt.forEach(t),fzo=i(ra),m(eA.$$.fragment,ra),ra.forEach(t),yl.forEach(t),dRe=i(c),Qd=n(c,"H2",{class:!0});var vPe=s(Qd);Hv=n(vPe,"A",{id:!0,class:!0,href:!0});var $lt=s(Hv);Hce=n($lt,"SPAN",{});var Ilt=s(Hce);m(oA.$$.fragment,Ilt),Ilt.forEach(t),$lt.forEach(t),mzo=i(vPe),Uce=n(vPe,"SPAN",{});var Nlt=s(Uce);gzo=r(Nlt,"AutoModelForAudioXVector"),Nlt.forEach(t),vPe.forEach(t),cRe=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);m(rA.$$.fragment,Al),hzo=i(Al),Hd=n(Al,"P",{});var NW=s(Hd);pzo=r(NW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Jce=n(NW,"CODE",{});var Dlt=s(Jce);_zo=r(Dlt,"from_pretrained()"),Dlt.forEach(t),uzo=r(NW,"class method or the "),Yce=n(NW,"CODE",{});var jlt=s(Yce);bzo=r(jlt,"from_config()"),jlt.forEach(t),vzo=r(NW,`class
method.`),NW.forEach(t),Tzo=i(Al),tA=n(Al,"P",{});var TPe=s(tA);Fzo=r(TPe,"This class cannot be instantiated directly using "),Kce=n(TPe,"CODE",{});var qlt=s(Kce);Czo=r(qlt,"__init__()"),qlt.forEach(t),Mzo=r(TPe," (throws an error)."),TPe.forEach(t),Ezo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);m(aA.$$.fragment,Ll),yzo=i(Ll),Zce=n(Ll,"P",{});var Glt=s(Zce);wzo=r(Glt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Glt.forEach(t),Azo=i(Ll),Ud=n(Ll,"P",{});var DW=s(Ud);Lzo=r(DW,`Note:
Loading a model from its configuration file does `),efe=n(DW,"STRONG",{});var Olt=s(efe);Bzo=r(Olt,"not"),Olt.forEach(t),xzo=r(DW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ofe=n(DW,"CODE",{});var Xlt=s(ofe);kzo=r(Xlt,"from_pretrained()"),Xlt.forEach(t),Rzo=r(DW,"to load the model weights."),DW.forEach(t),Szo=i(Ll),rfe=n(Ll,"P",{});var Vlt=s(rfe);Pzo=r(Vlt,"Examples:"),Vlt.forEach(t),$zo=i(Ll),m(nA.$$.fragment,Ll),Ll.forEach(t),Izo=i(Al),eo=n(Al,"DIV",{class:!0});var ta=s(eo);m(sA.$$.fragment,ta),Nzo=i(ta),tfe=n(ta,"P",{});var zlt=s(tfe);Dzo=r(zlt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),zlt.forEach(t),jzo=i(ta),dn=n(ta,"P",{});var k3=s(dn);qzo=r(k3,"The model class to instantiate is selected based on the "),afe=n(k3,"CODE",{});var Wlt=s(afe);Gzo=r(Wlt,"model_type"),Wlt.forEach(t),Ozo=r(k3,` property of the config object (either
passed as an argument or loaded from `),nfe=n(k3,"CODE",{});var Qlt=s(nfe);Xzo=r(Qlt,"pretrained_model_name_or_path"),Qlt.forEach(t),Vzo=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sfe=n(k3,"CODE",{});var Hlt=s(sfe);zzo=r(Hlt,"pretrained_model_name_or_path"),Hlt.forEach(t),Wzo=r(k3,":"),k3.forEach(t),Qzo=i(ta),cn=n(ta,"UL",{});var R3=s(cn);Uv=n(R3,"LI",{});var kLe=s(Uv);lfe=n(kLe,"STRONG",{});var Ult=s(lfe);Hzo=r(Ult,"data2vec-audio"),Ult.forEach(t),Uzo=r(kLe," \u2014 "),vq=n(kLe,"A",{href:!0});var Jlt=s(vq);Jzo=r(Jlt,"Data2VecAudioForXVector"),Jlt.forEach(t),Yzo=r(kLe," (Data2VecAudio model)"),kLe.forEach(t),Kzo=i(R3),Jv=n(R3,"LI",{});var RLe=s(Jv);ife=n(RLe,"STRONG",{});var Ylt=s(ife);Zzo=r(Ylt,"unispeech-sat"),Ylt.forEach(t),eWo=r(RLe," \u2014 "),Tq=n(RLe,"A",{href:!0});var Klt=s(Tq);oWo=r(Klt,"UniSpeechSatForXVector"),Klt.forEach(t),rWo=r(RLe," (UniSpeechSat model)"),RLe.forEach(t),tWo=i(R3),Yv=n(R3,"LI",{});var SLe=s(Yv);dfe=n(SLe,"STRONG",{});var Zlt=s(dfe);aWo=r(Zlt,"wav2vec2"),Zlt.forEach(t),nWo=r(SLe," \u2014 "),Fq=n(SLe,"A",{href:!0});var eit=s(Fq);sWo=r(eit,"Wav2Vec2ForXVector"),eit.forEach(t),lWo=r(SLe," (Wav2Vec2 model)"),SLe.forEach(t),iWo=i(R3),Kv=n(R3,"LI",{});var PLe=s(Kv);cfe=n(PLe,"STRONG",{});var oit=s(cfe);dWo=r(oit,"wavlm"),oit.forEach(t),cWo=r(PLe," \u2014 "),Cq=n(PLe,"A",{href:!0});var rit=s(Cq);fWo=r(rit,"WavLMForXVector"),rit.forEach(t),mWo=r(PLe," (WavLM model)"),PLe.forEach(t),R3.forEach(t),gWo=i(ta),Zv=n(ta,"P",{});var $Le=s(Zv);hWo=r($Le,"The model is set in evaluation mode by default using "),ffe=n($Le,"CODE",{});var tit=s(ffe);pWo=r(tit,"model.eval()"),tit.forEach(t),_Wo=r($Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mfe=n($Le,"CODE",{});var ait=s(mfe);uWo=r(ait,"model.train()"),ait.forEach(t),$Le.forEach(t),bWo=i(ta),gfe=n(ta,"P",{});var nit=s(gfe);vWo=r(nit,"Examples:"),nit.forEach(t),TWo=i(ta),m(lA.$$.fragment,ta),ta.forEach(t),Al.forEach(t),fRe=i(c),Jd=n(c,"H2",{class:!0});var FPe=s(Jd);eT=n(FPe,"A",{id:!0,class:!0,href:!0});var sit=s(eT);hfe=n(sit,"SPAN",{});var lit=s(hfe);m(iA.$$.fragment,lit),lit.forEach(t),sit.forEach(t),FWo=i(FPe),pfe=n(FPe,"SPAN",{});var iit=s(pfe);CWo=r(iit,"AutoModelForMaskedImageModeling"),iit.forEach(t),FPe.forEach(t),mRe=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(dA.$$.fragment,Bl),MWo=i(Bl),Yd=n(Bl,"P",{});var jW=s(Yd);EWo=r(jW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),_fe=n(jW,"CODE",{});var dit=s(_fe);yWo=r(dit,"from_pretrained()"),dit.forEach(t),wWo=r(jW,"class method or the "),ufe=n(jW,"CODE",{});var cit=s(ufe);AWo=r(cit,"from_config()"),cit.forEach(t),LWo=r(jW,`class
method.`),jW.forEach(t),BWo=i(Bl),cA=n(Bl,"P",{});var CPe=s(cA);xWo=r(CPe,"This class cannot be instantiated directly using "),bfe=n(CPe,"CODE",{});var fit=s(bfe);kWo=r(fit,"__init__()"),fit.forEach(t),RWo=r(CPe," (throws an error)."),CPe.forEach(t),SWo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);m(fA.$$.fragment,xl),PWo=i(xl),vfe=n(xl,"P",{});var mit=s(vfe);$Wo=r(mit,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),mit.forEach(t),IWo=i(xl),Kd=n(xl,"P",{});var qW=s(Kd);NWo=r(qW,`Note:
Loading a model from its configuration file does `),Tfe=n(qW,"STRONG",{});var git=s(Tfe);DWo=r(git,"not"),git.forEach(t),jWo=r(qW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ffe=n(qW,"CODE",{});var hit=s(Ffe);qWo=r(hit,"from_pretrained()"),hit.forEach(t),GWo=r(qW,"to load the model weights."),qW.forEach(t),OWo=i(xl),Cfe=n(xl,"P",{});var pit=s(Cfe);XWo=r(pit,"Examples:"),pit.forEach(t),VWo=i(xl),m(mA.$$.fragment,xl),xl.forEach(t),zWo=i(Bl),oo=n(Bl,"DIV",{class:!0});var aa=s(oo);m(gA.$$.fragment,aa),WWo=i(aa),Mfe=n(aa,"P",{});var _it=s(Mfe);QWo=r(_it,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),_it.forEach(t),HWo=i(aa),fn=n(aa,"P",{});var S3=s(fn);UWo=r(S3,"The model class to instantiate is selected based on the "),Efe=n(S3,"CODE",{});var uit=s(Efe);JWo=r(uit,"model_type"),uit.forEach(t),YWo=r(S3,` property of the config object (either
passed as an argument or loaded from `),yfe=n(S3,"CODE",{});var bit=s(yfe);KWo=r(bit,"pretrained_model_name_or_path"),bit.forEach(t),ZWo=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=n(S3,"CODE",{});var vit=s(wfe);eQo=r(vit,"pretrained_model_name_or_path"),vit.forEach(t),oQo=r(S3,":"),S3.forEach(t),rQo=i(aa),Zd=n(aa,"UL",{});var GW=s(Zd);oT=n(GW,"LI",{});var ILe=s(oT);Afe=n(ILe,"STRONG",{});var Tit=s(Afe);tQo=r(Tit,"deit"),Tit.forEach(t),aQo=r(ILe," \u2014 "),Mq=n(ILe,"A",{href:!0});var Fit=s(Mq);nQo=r(Fit,"DeiTForMaskedImageModeling"),Fit.forEach(t),sQo=r(ILe," (DeiT model)"),ILe.forEach(t),lQo=i(GW),rT=n(GW,"LI",{});var NLe=s(rT);Lfe=n(NLe,"STRONG",{});var Cit=s(Lfe);iQo=r(Cit,"swin"),Cit.forEach(t),dQo=r(NLe," \u2014 "),Eq=n(NLe,"A",{href:!0});var Mit=s(Eq);cQo=r(Mit,"SwinForMaskedImageModeling"),Mit.forEach(t),fQo=r(NLe," (Swin model)"),NLe.forEach(t),mQo=i(GW),tT=n(GW,"LI",{});var DLe=s(tT);Bfe=n(DLe,"STRONG",{});var Eit=s(Bfe);gQo=r(Eit,"vit"),Eit.forEach(t),hQo=r(DLe," \u2014 "),yq=n(DLe,"A",{href:!0});var yit=s(yq);pQo=r(yit,"ViTForMaskedImageModeling"),yit.forEach(t),_Qo=r(DLe," (ViT model)"),DLe.forEach(t),GW.forEach(t),uQo=i(aa),aT=n(aa,"P",{});var jLe=s(aT);bQo=r(jLe,"The model is set in evaluation mode by default using "),xfe=n(jLe,"CODE",{});var wit=s(xfe);vQo=r(wit,"model.eval()"),wit.forEach(t),TQo=r(jLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kfe=n(jLe,"CODE",{});var Ait=s(kfe);FQo=r(Ait,"model.train()"),Ait.forEach(t),jLe.forEach(t),CQo=i(aa),Rfe=n(aa,"P",{});var Lit=s(Rfe);MQo=r(Lit,"Examples:"),Lit.forEach(t),EQo=i(aa),m(hA.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),gRe=i(c),ec=n(c,"H2",{class:!0});var MPe=s(ec);nT=n(MPe,"A",{id:!0,class:!0,href:!0});var Bit=s(nT);Sfe=n(Bit,"SPAN",{});var xit=s(Sfe);m(pA.$$.fragment,xit),xit.forEach(t),Bit.forEach(t),yQo=i(MPe),Pfe=n(MPe,"SPAN",{});var kit=s(Pfe);wQo=r(kit,"AutoModelForObjectDetection"),kit.forEach(t),MPe.forEach(t),hRe=i(c),pr=n(c,"DIV",{class:!0});var kl=s(pr);m(_A.$$.fragment,kl),AQo=i(kl),oc=n(kl,"P",{});var OW=s(oc);LQo=r(OW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),$fe=n(OW,"CODE",{});var Rit=s($fe);BQo=r(Rit,"from_pretrained()"),Rit.forEach(t),xQo=r(OW,"class method or the "),Ife=n(OW,"CODE",{});var Sit=s(Ife);kQo=r(Sit,"from_config()"),Sit.forEach(t),RQo=r(OW,`class
method.`),OW.forEach(t),SQo=i(kl),uA=n(kl,"P",{});var EPe=s(uA);PQo=r(EPe,"This class cannot be instantiated directly using "),Nfe=n(EPe,"CODE",{});var Pit=s(Nfe);$Qo=r(Pit,"__init__()"),Pit.forEach(t),IQo=r(EPe," (throws an error)."),EPe.forEach(t),NQo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);m(bA.$$.fragment,Rl),DQo=i(Rl),Dfe=n(Rl,"P",{});var $it=s(Dfe);jQo=r($it,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),$it.forEach(t),qQo=i(Rl),rc=n(Rl,"P",{});var XW=s(rc);GQo=r(XW,`Note:
Loading a model from its configuration file does `),jfe=n(XW,"STRONG",{});var Iit=s(jfe);OQo=r(Iit,"not"),Iit.forEach(t),XQo=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),qfe=n(XW,"CODE",{});var Nit=s(qfe);VQo=r(Nit,"from_pretrained()"),Nit.forEach(t),zQo=r(XW,"to load the model weights."),XW.forEach(t),WQo=i(Rl),Gfe=n(Rl,"P",{});var Dit=s(Gfe);QQo=r(Dit,"Examples:"),Dit.forEach(t),HQo=i(Rl),m(vA.$$.fragment,Rl),Rl.forEach(t),UQo=i(kl),ro=n(kl,"DIV",{class:!0});var na=s(ro);m(TA.$$.fragment,na),JQo=i(na),Ofe=n(na,"P",{});var jit=s(Ofe);YQo=r(jit,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),jit.forEach(t),KQo=i(na),mn=n(na,"P",{});var P3=s(mn);ZQo=r(P3,"The model class to instantiate is selected based on the "),Xfe=n(P3,"CODE",{});var qit=s(Xfe);eHo=r(qit,"model_type"),qit.forEach(t),oHo=r(P3,` property of the config object (either
passed as an argument or loaded from `),Vfe=n(P3,"CODE",{});var Git=s(Vfe);rHo=r(Git,"pretrained_model_name_or_path"),Git.forEach(t),tHo=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=n(P3,"CODE",{});var Oit=s(zfe);aHo=r(Oit,"pretrained_model_name_or_path"),Oit.forEach(t),nHo=r(P3,":"),P3.forEach(t),sHo=i(na),Wfe=n(na,"UL",{});var Xit=s(Wfe);sT=n(Xit,"LI",{});var qLe=s(sT);Qfe=n(qLe,"STRONG",{});var Vit=s(Qfe);lHo=r(Vit,"detr"),Vit.forEach(t),iHo=r(qLe," \u2014 "),wq=n(qLe,"A",{href:!0});var zit=s(wq);dHo=r(zit,"DetrForObjectDetection"),zit.forEach(t),cHo=r(qLe," (DETR model)"),qLe.forEach(t),Xit.forEach(t),fHo=i(na),lT=n(na,"P",{});var GLe=s(lT);mHo=r(GLe,"The model is set in evaluation mode by default using "),Hfe=n(GLe,"CODE",{});var Wit=s(Hfe);gHo=r(Wit,"model.eval()"),Wit.forEach(t),hHo=r(GLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ufe=n(GLe,"CODE",{});var Qit=s(Ufe);pHo=r(Qit,"model.train()"),Qit.forEach(t),GLe.forEach(t),_Ho=i(na),Jfe=n(na,"P",{});var Hit=s(Jfe);uHo=r(Hit,"Examples:"),Hit.forEach(t),bHo=i(na),m(FA.$$.fragment,na),na.forEach(t),kl.forEach(t),pRe=i(c),tc=n(c,"H2",{class:!0});var yPe=s(tc);iT=n(yPe,"A",{id:!0,class:!0,href:!0});var Uit=s(iT);Yfe=n(Uit,"SPAN",{});var Jit=s(Yfe);m(CA.$$.fragment,Jit),Jit.forEach(t),Uit.forEach(t),vHo=i(yPe),Kfe=n(yPe,"SPAN",{});var Yit=s(Kfe);THo=r(Yit,"AutoModelForImageSegmentation"),Yit.forEach(t),yPe.forEach(t),_Re=i(c),_r=n(c,"DIV",{class:!0});var Sl=s(_r);m(MA.$$.fragment,Sl),FHo=i(Sl),ac=n(Sl,"P",{});var VW=s(ac);CHo=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Zfe=n(VW,"CODE",{});var Kit=s(Zfe);MHo=r(Kit,"from_pretrained()"),Kit.forEach(t),EHo=r(VW,"class method or the "),eme=n(VW,"CODE",{});var Zit=s(eme);yHo=r(Zit,"from_config()"),Zit.forEach(t),wHo=r(VW,`class
method.`),VW.forEach(t),AHo=i(Sl),EA=n(Sl,"P",{});var wPe=s(EA);LHo=r(wPe,"This class cannot be instantiated directly using "),ome=n(wPe,"CODE",{});var edt=s(ome);BHo=r(edt,"__init__()"),edt.forEach(t),xHo=r(wPe," (throws an error)."),wPe.forEach(t),kHo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);m(yA.$$.fragment,Pl),RHo=i(Pl),rme=n(Pl,"P",{});var odt=s(rme);SHo=r(odt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),odt.forEach(t),PHo=i(Pl),nc=n(Pl,"P",{});var zW=s(nc);$Ho=r(zW,`Note:
Loading a model from its configuration file does `),tme=n(zW,"STRONG",{});var rdt=s(tme);IHo=r(rdt,"not"),rdt.forEach(t),NHo=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ame=n(zW,"CODE",{});var tdt=s(ame);DHo=r(tdt,"from_pretrained()"),tdt.forEach(t),jHo=r(zW,"to load the model weights."),zW.forEach(t),qHo=i(Pl),nme=n(Pl,"P",{});var adt=s(nme);GHo=r(adt,"Examples:"),adt.forEach(t),OHo=i(Pl),m(wA.$$.fragment,Pl),Pl.forEach(t),XHo=i(Sl),to=n(Sl,"DIV",{class:!0});var sa=s(to);m(AA.$$.fragment,sa),VHo=i(sa),sme=n(sa,"P",{});var ndt=s(sme);zHo=r(ndt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ndt.forEach(t),WHo=i(sa),gn=n(sa,"P",{});var $3=s(gn);QHo=r($3,"The model class to instantiate is selected based on the "),lme=n($3,"CODE",{});var sdt=s(lme);HHo=r(sdt,"model_type"),sdt.forEach(t),UHo=r($3,` property of the config object (either
passed as an argument or loaded from `),ime=n($3,"CODE",{});var ldt=s(ime);JHo=r(ldt,"pretrained_model_name_or_path"),ldt.forEach(t),YHo=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=n($3,"CODE",{});var idt=s(dme);KHo=r(idt,"pretrained_model_name_or_path"),idt.forEach(t),ZHo=r($3,":"),$3.forEach(t),eUo=i(sa),cme=n(sa,"UL",{});var ddt=s(cme);dT=n(ddt,"LI",{});var OLe=s(dT);fme=n(OLe,"STRONG",{});var cdt=s(fme);oUo=r(cdt,"detr"),cdt.forEach(t),rUo=r(OLe," \u2014 "),Aq=n(OLe,"A",{href:!0});var fdt=s(Aq);tUo=r(fdt,"DetrForSegmentation"),fdt.forEach(t),aUo=r(OLe," (DETR model)"),OLe.forEach(t),ddt.forEach(t),nUo=i(sa),cT=n(sa,"P",{});var XLe=s(cT);sUo=r(XLe,"The model is set in evaluation mode by default using "),mme=n(XLe,"CODE",{});var mdt=s(mme);lUo=r(mdt,"model.eval()"),mdt.forEach(t),iUo=r(XLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=n(XLe,"CODE",{});var gdt=s(gme);dUo=r(gdt,"model.train()"),gdt.forEach(t),XLe.forEach(t),cUo=i(sa),hme=n(sa,"P",{});var hdt=s(hme);fUo=r(hdt,"Examples:"),hdt.forEach(t),mUo=i(sa),m(LA.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),uRe=i(c),sc=n(c,"H2",{class:!0});var APe=s(sc);fT=n(APe,"A",{id:!0,class:!0,href:!0});var pdt=s(fT);pme=n(pdt,"SPAN",{});var _dt=s(pme);m(BA.$$.fragment,_dt),_dt.forEach(t),pdt.forEach(t),gUo=i(APe),_me=n(APe,"SPAN",{});var udt=s(_me);hUo=r(udt,"AutoModelForSemanticSegmentation"),udt.forEach(t),APe.forEach(t),bRe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(xA.$$.fragment,$l),pUo=i($l),lc=n($l,"P",{});var WW=s(lc);_Uo=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ume=n(WW,"CODE",{});var bdt=s(ume);uUo=r(bdt,"from_pretrained()"),bdt.forEach(t),bUo=r(WW,"class method or the "),bme=n(WW,"CODE",{});var vdt=s(bme);vUo=r(vdt,"from_config()"),vdt.forEach(t),TUo=r(WW,`class
method.`),WW.forEach(t),FUo=i($l),kA=n($l,"P",{});var LPe=s(kA);CUo=r(LPe,"This class cannot be instantiated directly using "),vme=n(LPe,"CODE",{});var Tdt=s(vme);MUo=r(Tdt,"__init__()"),Tdt.forEach(t),EUo=r(LPe," (throws an error)."),LPe.forEach(t),yUo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(RA.$$.fragment,Il),wUo=i(Il),Tme=n(Il,"P",{});var Fdt=s(Tme);AUo=r(Fdt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Fdt.forEach(t),LUo=i(Il),ic=n(Il,"P",{});var QW=s(ic);BUo=r(QW,`Note:
Loading a model from its configuration file does `),Fme=n(QW,"STRONG",{});var Cdt=s(Fme);xUo=r(Cdt,"not"),Cdt.forEach(t),kUo=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cme=n(QW,"CODE",{});var Mdt=s(Cme);RUo=r(Mdt,"from_pretrained()"),Mdt.forEach(t),SUo=r(QW,"to load the model weights."),QW.forEach(t),PUo=i(Il),Mme=n(Il,"P",{});var Edt=s(Mme);$Uo=r(Edt,"Examples:"),Edt.forEach(t),IUo=i(Il),m(SA.$$.fragment,Il),Il.forEach(t),NUo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(PA.$$.fragment,la),DUo=i(la),Eme=n(la,"P",{});var ydt=s(Eme);jUo=r(ydt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ydt.forEach(t),qUo=i(la),hn=n(la,"P",{});var I3=s(hn);GUo=r(I3,"The model class to instantiate is selected based on the "),yme=n(I3,"CODE",{});var wdt=s(yme);OUo=r(wdt,"model_type"),wdt.forEach(t),XUo=r(I3,` property of the config object (either
passed as an argument or loaded from `),wme=n(I3,"CODE",{});var Adt=s(wme);VUo=r(Adt,"pretrained_model_name_or_path"),Adt.forEach(t),zUo=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=n(I3,"CODE",{});var Ldt=s(Ame);WUo=r(Ldt,"pretrained_model_name_or_path"),Ldt.forEach(t),QUo=r(I3,":"),I3.forEach(t),HUo=i(la),$A=n(la,"UL",{});var BPe=s($A);mT=n(BPe,"LI",{});var VLe=s(mT);Lme=n(VLe,"STRONG",{});var Bdt=s(Lme);UUo=r(Bdt,"beit"),Bdt.forEach(t),JUo=r(VLe," \u2014 "),Lq=n(VLe,"A",{href:!0});var xdt=s(Lq);YUo=r(xdt,"BeitForSemanticSegmentation"),xdt.forEach(t),KUo=r(VLe," (BEiT model)"),VLe.forEach(t),ZUo=i(BPe),gT=n(BPe,"LI",{});var zLe=s(gT);Bme=n(zLe,"STRONG",{});var kdt=s(Bme);eJo=r(kdt,"segformer"),kdt.forEach(t),oJo=r(zLe," \u2014 "),Bq=n(zLe,"A",{href:!0});var Rdt=s(Bq);rJo=r(Rdt,"SegformerForSemanticSegmentation"),Rdt.forEach(t),tJo=r(zLe," (SegFormer model)"),zLe.forEach(t),BPe.forEach(t),aJo=i(la),hT=n(la,"P",{});var WLe=s(hT);nJo=r(WLe,"The model is set in evaluation mode by default using "),xme=n(WLe,"CODE",{});var Sdt=s(xme);sJo=r(Sdt,"model.eval()"),Sdt.forEach(t),lJo=r(WLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=n(WLe,"CODE",{});var Pdt=s(kme);iJo=r(Pdt,"model.train()"),Pdt.forEach(t),WLe.forEach(t),dJo=i(la),Rme=n(la,"P",{});var $dt=s(Rme);cJo=r($dt,"Examples:"),$dt.forEach(t),fJo=i(la),m(IA.$$.fragment,la),la.forEach(t),$l.forEach(t),vRe=i(c),dc=n(c,"H2",{class:!0});var xPe=s(dc);pT=n(xPe,"A",{id:!0,class:!0,href:!0});var Idt=s(pT);Sme=n(Idt,"SPAN",{});var Ndt=s(Sme);m(NA.$$.fragment,Ndt),Ndt.forEach(t),Idt.forEach(t),mJo=i(xPe),Pme=n(xPe,"SPAN",{});var Ddt=s(Pme);gJo=r(Ddt,"AutoModelForInstanceSegmentation"),Ddt.forEach(t),xPe.forEach(t),TRe=i(c),br=n(c,"DIV",{class:!0});var Nl=s(br);m(DA.$$.fragment,Nl),hJo=i(Nl),cc=n(Nl,"P",{});var HW=s(cc);pJo=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),$me=n(HW,"CODE",{});var jdt=s($me);_Jo=r(jdt,"from_pretrained()"),jdt.forEach(t),uJo=r(HW,"class method or the "),Ime=n(HW,"CODE",{});var qdt=s(Ime);bJo=r(qdt,"from_config()"),qdt.forEach(t),vJo=r(HW,`class
method.`),HW.forEach(t),TJo=i(Nl),jA=n(Nl,"P",{});var kPe=s(jA);FJo=r(kPe,"This class cannot be instantiated directly using "),Nme=n(kPe,"CODE",{});var Gdt=s(Nme);CJo=r(Gdt,"__init__()"),Gdt.forEach(t),MJo=r(kPe," (throws an error)."),kPe.forEach(t),EJo=i(Nl),mt=n(Nl,"DIV",{class:!0});var Dl=s(mt);m(qA.$$.fragment,Dl),yJo=i(Dl),Dme=n(Dl,"P",{});var Odt=s(Dme);wJo=r(Odt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Odt.forEach(t),AJo=i(Dl),fc=n(Dl,"P",{});var UW=s(fc);LJo=r(UW,`Note:
Loading a model from its configuration file does `),jme=n(UW,"STRONG",{});var Xdt=s(jme);BJo=r(Xdt,"not"),Xdt.forEach(t),xJo=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),qme=n(UW,"CODE",{});var Vdt=s(qme);kJo=r(Vdt,"from_pretrained()"),Vdt.forEach(t),RJo=r(UW,"to load the model weights."),UW.forEach(t),SJo=i(Dl),Gme=n(Dl,"P",{});var zdt=s(Gme);PJo=r(zdt,"Examples:"),zdt.forEach(t),$Jo=i(Dl),m(GA.$$.fragment,Dl),Dl.forEach(t),IJo=i(Nl),no=n(Nl,"DIV",{class:!0});var ia=s(no);m(OA.$$.fragment,ia),NJo=i(ia),Ome=n(ia,"P",{});var Wdt=s(Ome);DJo=r(Wdt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Wdt.forEach(t),jJo=i(ia),pn=n(ia,"P",{});var N3=s(pn);qJo=r(N3,"The model class to instantiate is selected based on the "),Xme=n(N3,"CODE",{});var Qdt=s(Xme);GJo=r(Qdt,"model_type"),Qdt.forEach(t),OJo=r(N3,` property of the config object (either
passed as an argument or loaded from `),Vme=n(N3,"CODE",{});var Hdt=s(Vme);XJo=r(Hdt,"pretrained_model_name_or_path"),Hdt.forEach(t),VJo=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=n(N3,"CODE",{});var Udt=s(zme);zJo=r(Udt,"pretrained_model_name_or_path"),Udt.forEach(t),WJo=r(N3,":"),N3.forEach(t),QJo=i(ia),Wme=n(ia,"UL",{});var Jdt=s(Wme);_T=n(Jdt,"LI",{});var QLe=s(_T);Qme=n(QLe,"STRONG",{});var Ydt=s(Qme);HJo=r(Ydt,"maskformer"),Ydt.forEach(t),UJo=r(QLe," \u2014 "),xq=n(QLe,"A",{href:!0});var Kdt=s(xq);JJo=r(Kdt,"MaskFormerForInstanceSegmentation"),Kdt.forEach(t),YJo=r(QLe," (MaskFormer model)"),QLe.forEach(t),Jdt.forEach(t),KJo=i(ia),uT=n(ia,"P",{});var HLe=s(uT);ZJo=r(HLe,"The model is set in evaluation mode by default using "),Hme=n(HLe,"CODE",{});var Zdt=s(Hme);eYo=r(Zdt,"model.eval()"),Zdt.forEach(t),oYo=r(HLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=n(HLe,"CODE",{});var ect=s(Ume);rYo=r(ect,"model.train()"),ect.forEach(t),HLe.forEach(t),tYo=i(ia),Jme=n(ia,"P",{});var oct=s(Jme);aYo=r(oct,"Examples:"),oct.forEach(t),nYo=i(ia),m(XA.$$.fragment,ia),ia.forEach(t),Nl.forEach(t),FRe=i(c),mc=n(c,"H2",{class:!0});var RPe=s(mc);bT=n(RPe,"A",{id:!0,class:!0,href:!0});var rct=s(bT);Yme=n(rct,"SPAN",{});var tct=s(Yme);m(VA.$$.fragment,tct),tct.forEach(t),rct.forEach(t),sYo=i(RPe),Kme=n(RPe,"SPAN",{});var act=s(Kme);lYo=r(act,"TFAutoModel"),act.forEach(t),RPe.forEach(t),CRe=i(c),vr=n(c,"DIV",{class:!0});var jl=s(vr);m(zA.$$.fragment,jl),iYo=i(jl),gc=n(jl,"P",{});var JW=s(gc);dYo=r(JW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Zme=n(JW,"CODE",{});var nct=s(Zme);cYo=r(nct,"from_pretrained()"),nct.forEach(t),fYo=r(JW,"class method or the "),ege=n(JW,"CODE",{});var sct=s(ege);mYo=r(sct,"from_config()"),sct.forEach(t),gYo=r(JW,`class
method.`),JW.forEach(t),hYo=i(jl),WA=n(jl,"P",{});var SPe=s(WA);pYo=r(SPe,"This class cannot be instantiated directly using "),oge=n(SPe,"CODE",{});var lct=s(oge);_Yo=r(lct,"__init__()"),lct.forEach(t),uYo=r(SPe," (throws an error)."),SPe.forEach(t),bYo=i(jl),gt=n(jl,"DIV",{class:!0});var ql=s(gt);m(QA.$$.fragment,ql),vYo=i(ql),rge=n(ql,"P",{});var ict=s(rge);TYo=r(ict,"Instantiates one of the base model classes of the library from a configuration."),ict.forEach(t),FYo=i(ql),hc=n(ql,"P",{});var YW=s(hc);CYo=r(YW,`Note:
Loading a model from its configuration file does `),tge=n(YW,"STRONG",{});var dct=s(tge);MYo=r(dct,"not"),dct.forEach(t),EYo=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),age=n(YW,"CODE",{});var cct=s(age);yYo=r(cct,"from_pretrained()"),cct.forEach(t),wYo=r(YW,"to load the model weights."),YW.forEach(t),AYo=i(ql),nge=n(ql,"P",{});var fct=s(nge);LYo=r(fct,"Examples:"),fct.forEach(t),BYo=i(ql),m(HA.$$.fragment,ql),ql.forEach(t),xYo=i(jl),ho=n(jl,"DIV",{class:!0});var pa=s(ho);m(UA.$$.fragment,pa),kYo=i(pa),sge=n(pa,"P",{});var mct=s(sge);RYo=r(mct,"Instantiate one of the base model classes of the library from a pretrained model."),mct.forEach(t),SYo=i(pa),_n=n(pa,"P",{});var D3=s(_n);PYo=r(D3,"The model class to instantiate is selected based on the "),lge=n(D3,"CODE",{});var gct=s(lge);$Yo=r(gct,"model_type"),gct.forEach(t),IYo=r(D3,` property of the config object (either
passed as an argument or loaded from `),ige=n(D3,"CODE",{});var hct=s(ige);NYo=r(hct,"pretrained_model_name_or_path"),hct.forEach(t),DYo=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dge=n(D3,"CODE",{});var pct=s(dge);jYo=r(pct,"pretrained_model_name_or_path"),pct.forEach(t),qYo=r(D3,":"),D3.forEach(t),GYo=i(pa),B=n(pa,"UL",{});var x=s(B);vT=n(x,"LI",{});var ULe=s(vT);cge=n(ULe,"STRONG",{});var _ct=s(cge);OYo=r(_ct,"albert"),_ct.forEach(t),XYo=r(ULe," \u2014 "),kq=n(ULe,"A",{href:!0});var uct=s(kq);VYo=r(uct,"TFAlbertModel"),uct.forEach(t),zYo=r(ULe," (ALBERT model)"),ULe.forEach(t),WYo=i(x),TT=n(x,"LI",{});var JLe=s(TT);fge=n(JLe,"STRONG",{});var bct=s(fge);QYo=r(bct,"bart"),bct.forEach(t),HYo=r(JLe," \u2014 "),Rq=n(JLe,"A",{href:!0});var vct=s(Rq);UYo=r(vct,"TFBartModel"),vct.forEach(t),JYo=r(JLe," (BART model)"),JLe.forEach(t),YYo=i(x),FT=n(x,"LI",{});var YLe=s(FT);mge=n(YLe,"STRONG",{});var Tct=s(mge);KYo=r(Tct,"bert"),Tct.forEach(t),ZYo=r(YLe," \u2014 "),Sq=n(YLe,"A",{href:!0});var Fct=s(Sq);eKo=r(Fct,"TFBertModel"),Fct.forEach(t),oKo=r(YLe," (BERT model)"),YLe.forEach(t),rKo=i(x),CT=n(x,"LI",{});var KLe=s(CT);gge=n(KLe,"STRONG",{});var Cct=s(gge);tKo=r(Cct,"blenderbot"),Cct.forEach(t),aKo=r(KLe," \u2014 "),Pq=n(KLe,"A",{href:!0});var Mct=s(Pq);nKo=r(Mct,"TFBlenderbotModel"),Mct.forEach(t),sKo=r(KLe," (Blenderbot model)"),KLe.forEach(t),lKo=i(x),MT=n(x,"LI",{});var ZLe=s(MT);hge=n(ZLe,"STRONG",{});var Ect=s(hge);iKo=r(Ect,"blenderbot-small"),Ect.forEach(t),dKo=r(ZLe," \u2014 "),$q=n(ZLe,"A",{href:!0});var yct=s($q);cKo=r(yct,"TFBlenderbotSmallModel"),yct.forEach(t),fKo=r(ZLe," (BlenderbotSmall model)"),ZLe.forEach(t),mKo=i(x),ET=n(x,"LI",{});var e7e=s(ET);pge=n(e7e,"STRONG",{});var wct=s(pge);gKo=r(wct,"camembert"),wct.forEach(t),hKo=r(e7e," \u2014 "),Iq=n(e7e,"A",{href:!0});var Act=s(Iq);pKo=r(Act,"TFCamembertModel"),Act.forEach(t),_Ko=r(e7e," (CamemBERT model)"),e7e.forEach(t),uKo=i(x),yT=n(x,"LI",{});var o7e=s(yT);_ge=n(o7e,"STRONG",{});var Lct=s(_ge);bKo=r(Lct,"clip"),Lct.forEach(t),vKo=r(o7e," \u2014 "),Nq=n(o7e,"A",{href:!0});var Bct=s(Nq);TKo=r(Bct,"TFCLIPModel"),Bct.forEach(t),FKo=r(o7e," (CLIP model)"),o7e.forEach(t),CKo=i(x),wT=n(x,"LI",{});var r7e=s(wT);uge=n(r7e,"STRONG",{});var xct=s(uge);MKo=r(xct,"convbert"),xct.forEach(t),EKo=r(r7e," \u2014 "),Dq=n(r7e,"A",{href:!0});var kct=s(Dq);yKo=r(kct,"TFConvBertModel"),kct.forEach(t),wKo=r(r7e," (ConvBERT model)"),r7e.forEach(t),AKo=i(x),AT=n(x,"LI",{});var t7e=s(AT);bge=n(t7e,"STRONG",{});var Rct=s(bge);LKo=r(Rct,"convnext"),Rct.forEach(t),BKo=r(t7e," \u2014 "),jq=n(t7e,"A",{href:!0});var Sct=s(jq);xKo=r(Sct,"TFConvNextModel"),Sct.forEach(t),kKo=r(t7e," (ConvNext model)"),t7e.forEach(t),RKo=i(x),LT=n(x,"LI",{});var a7e=s(LT);vge=n(a7e,"STRONG",{});var Pct=s(vge);SKo=r(Pct,"ctrl"),Pct.forEach(t),PKo=r(a7e," \u2014 "),qq=n(a7e,"A",{href:!0});var $ct=s(qq);$Ko=r($ct,"TFCTRLModel"),$ct.forEach(t),IKo=r(a7e," (CTRL model)"),a7e.forEach(t),NKo=i(x),BT=n(x,"LI",{});var n7e=s(BT);Tge=n(n7e,"STRONG",{});var Ict=s(Tge);DKo=r(Ict,"deberta"),Ict.forEach(t),jKo=r(n7e," \u2014 "),Gq=n(n7e,"A",{href:!0});var Nct=s(Gq);qKo=r(Nct,"TFDebertaModel"),Nct.forEach(t),GKo=r(n7e," (DeBERTa model)"),n7e.forEach(t),OKo=i(x),xT=n(x,"LI",{});var s7e=s(xT);Fge=n(s7e,"STRONG",{});var Dct=s(Fge);XKo=r(Dct,"deberta-v2"),Dct.forEach(t),VKo=r(s7e," \u2014 "),Oq=n(s7e,"A",{href:!0});var jct=s(Oq);zKo=r(jct,"TFDebertaV2Model"),jct.forEach(t),WKo=r(s7e," (DeBERTa-v2 model)"),s7e.forEach(t),QKo=i(x),kT=n(x,"LI",{});var l7e=s(kT);Cge=n(l7e,"STRONG",{});var qct=s(Cge);HKo=r(qct,"distilbert"),qct.forEach(t),UKo=r(l7e," \u2014 "),Xq=n(l7e,"A",{href:!0});var Gct=s(Xq);JKo=r(Gct,"TFDistilBertModel"),Gct.forEach(t),YKo=r(l7e," (DistilBERT model)"),l7e.forEach(t),KKo=i(x),RT=n(x,"LI",{});var i7e=s(RT);Mge=n(i7e,"STRONG",{});var Oct=s(Mge);ZKo=r(Oct,"dpr"),Oct.forEach(t),eZo=r(i7e," \u2014 "),Vq=n(i7e,"A",{href:!0});var Xct=s(Vq);oZo=r(Xct,"TFDPRQuestionEncoder"),Xct.forEach(t),rZo=r(i7e," (DPR model)"),i7e.forEach(t),tZo=i(x),ST=n(x,"LI",{});var d7e=s(ST);Ege=n(d7e,"STRONG",{});var Vct=s(Ege);aZo=r(Vct,"electra"),Vct.forEach(t),nZo=r(d7e," \u2014 "),zq=n(d7e,"A",{href:!0});var zct=s(zq);sZo=r(zct,"TFElectraModel"),zct.forEach(t),lZo=r(d7e," (ELECTRA model)"),d7e.forEach(t),iZo=i(x),PT=n(x,"LI",{});var c7e=s(PT);yge=n(c7e,"STRONG",{});var Wct=s(yge);dZo=r(Wct,"flaubert"),Wct.forEach(t),cZo=r(c7e," \u2014 "),Wq=n(c7e,"A",{href:!0});var Qct=s(Wq);fZo=r(Qct,"TFFlaubertModel"),Qct.forEach(t),mZo=r(c7e," (FlauBERT model)"),c7e.forEach(t),gZo=i(x),Gs=n(x,"LI",{});var o9=s(Gs);wge=n(o9,"STRONG",{});var Hct=s(wge);hZo=r(Hct,"funnel"),Hct.forEach(t),pZo=r(o9," \u2014 "),Qq=n(o9,"A",{href:!0});var Uct=s(Qq);_Zo=r(Uct,"TFFunnelModel"),Uct.forEach(t),uZo=r(o9," or "),Hq=n(o9,"A",{href:!0});var Jct=s(Hq);bZo=r(Jct,"TFFunnelBaseModel"),Jct.forEach(t),vZo=r(o9," (Funnel Transformer model)"),o9.forEach(t),TZo=i(x),$T=n(x,"LI",{});var f7e=s($T);Age=n(f7e,"STRONG",{});var Yct=s(Age);FZo=r(Yct,"gpt2"),Yct.forEach(t),CZo=r(f7e," \u2014 "),Uq=n(f7e,"A",{href:!0});var Kct=s(Uq);MZo=r(Kct,"TFGPT2Model"),Kct.forEach(t),EZo=r(f7e," (OpenAI GPT-2 model)"),f7e.forEach(t),yZo=i(x),IT=n(x,"LI",{});var m7e=s(IT);Lge=n(m7e,"STRONG",{});var Zct=s(Lge);wZo=r(Zct,"hubert"),Zct.forEach(t),AZo=r(m7e," \u2014 "),Jq=n(m7e,"A",{href:!0});var eft=s(Jq);LZo=r(eft,"TFHubertModel"),eft.forEach(t),BZo=r(m7e," (Hubert model)"),m7e.forEach(t),xZo=i(x),NT=n(x,"LI",{});var g7e=s(NT);Bge=n(g7e,"STRONG",{});var oft=s(Bge);kZo=r(oft,"layoutlm"),oft.forEach(t),RZo=r(g7e," \u2014 "),Yq=n(g7e,"A",{href:!0});var rft=s(Yq);SZo=r(rft,"TFLayoutLMModel"),rft.forEach(t),PZo=r(g7e," (LayoutLM model)"),g7e.forEach(t),$Zo=i(x),DT=n(x,"LI",{});var h7e=s(DT);xge=n(h7e,"STRONG",{});var tft=s(xge);IZo=r(tft,"led"),tft.forEach(t),NZo=r(h7e," \u2014 "),Kq=n(h7e,"A",{href:!0});var aft=s(Kq);DZo=r(aft,"TFLEDModel"),aft.forEach(t),jZo=r(h7e," (LED model)"),h7e.forEach(t),qZo=i(x),jT=n(x,"LI",{});var p7e=s(jT);kge=n(p7e,"STRONG",{});var nft=s(kge);GZo=r(nft,"longformer"),nft.forEach(t),OZo=r(p7e," \u2014 "),Zq=n(p7e,"A",{href:!0});var sft=s(Zq);XZo=r(sft,"TFLongformerModel"),sft.forEach(t),VZo=r(p7e," (Longformer model)"),p7e.forEach(t),zZo=i(x),qT=n(x,"LI",{});var _7e=s(qT);Rge=n(_7e,"STRONG",{});var lft=s(Rge);WZo=r(lft,"lxmert"),lft.forEach(t),QZo=r(_7e," \u2014 "),eG=n(_7e,"A",{href:!0});var ift=s(eG);HZo=r(ift,"TFLxmertModel"),ift.forEach(t),UZo=r(_7e," (LXMERT model)"),_7e.forEach(t),JZo=i(x),GT=n(x,"LI",{});var u7e=s(GT);Sge=n(u7e,"STRONG",{});var dft=s(Sge);YZo=r(dft,"marian"),dft.forEach(t),KZo=r(u7e," \u2014 "),oG=n(u7e,"A",{href:!0});var cft=s(oG);ZZo=r(cft,"TFMarianModel"),cft.forEach(t),eer=r(u7e," (Marian model)"),u7e.forEach(t),oer=i(x),OT=n(x,"LI",{});var b7e=s(OT);Pge=n(b7e,"STRONG",{});var fft=s(Pge);rer=r(fft,"mbart"),fft.forEach(t),ter=r(b7e," \u2014 "),rG=n(b7e,"A",{href:!0});var mft=s(rG);aer=r(mft,"TFMBartModel"),mft.forEach(t),ner=r(b7e," (mBART model)"),b7e.forEach(t),ser=i(x),XT=n(x,"LI",{});var v7e=s(XT);$ge=n(v7e,"STRONG",{});var gft=s($ge);ler=r(gft,"mobilebert"),gft.forEach(t),ier=r(v7e," \u2014 "),tG=n(v7e,"A",{href:!0});var hft=s(tG);der=r(hft,"TFMobileBertModel"),hft.forEach(t),cer=r(v7e," (MobileBERT model)"),v7e.forEach(t),fer=i(x),VT=n(x,"LI",{});var T7e=s(VT);Ige=n(T7e,"STRONG",{});var pft=s(Ige);mer=r(pft,"mpnet"),pft.forEach(t),ger=r(T7e," \u2014 "),aG=n(T7e,"A",{href:!0});var _ft=s(aG);her=r(_ft,"TFMPNetModel"),_ft.forEach(t),per=r(T7e," (MPNet model)"),T7e.forEach(t),_er=i(x),zT=n(x,"LI",{});var F7e=s(zT);Nge=n(F7e,"STRONG",{});var uft=s(Nge);uer=r(uft,"mt5"),uft.forEach(t),ber=r(F7e," \u2014 "),nG=n(F7e,"A",{href:!0});var bft=s(nG);ver=r(bft,"TFMT5Model"),bft.forEach(t),Ter=r(F7e," (mT5 model)"),F7e.forEach(t),Fer=i(x),WT=n(x,"LI",{});var C7e=s(WT);Dge=n(C7e,"STRONG",{});var vft=s(Dge);Cer=r(vft,"openai-gpt"),vft.forEach(t),Mer=r(C7e," \u2014 "),sG=n(C7e,"A",{href:!0});var Tft=s(sG);Eer=r(Tft,"TFOpenAIGPTModel"),Tft.forEach(t),yer=r(C7e," (OpenAI GPT model)"),C7e.forEach(t),wer=i(x),QT=n(x,"LI",{});var M7e=s(QT);jge=n(M7e,"STRONG",{});var Fft=s(jge);Aer=r(Fft,"pegasus"),Fft.forEach(t),Ler=r(M7e," \u2014 "),lG=n(M7e,"A",{href:!0});var Cft=s(lG);Ber=r(Cft,"TFPegasusModel"),Cft.forEach(t),xer=r(M7e," (Pegasus model)"),M7e.forEach(t),ker=i(x),HT=n(x,"LI",{});var E7e=s(HT);qge=n(E7e,"STRONG",{});var Mft=s(qge);Rer=r(Mft,"rembert"),Mft.forEach(t),Ser=r(E7e," \u2014 "),iG=n(E7e,"A",{href:!0});var Eft=s(iG);Per=r(Eft,"TFRemBertModel"),Eft.forEach(t),$er=r(E7e," (RemBERT model)"),E7e.forEach(t),Ier=i(x),UT=n(x,"LI",{});var y7e=s(UT);Gge=n(y7e,"STRONG",{});var yft=s(Gge);Ner=r(yft,"roberta"),yft.forEach(t),Der=r(y7e," \u2014 "),dG=n(y7e,"A",{href:!0});var wft=s(dG);jer=r(wft,"TFRobertaModel"),wft.forEach(t),qer=r(y7e," (RoBERTa model)"),y7e.forEach(t),Ger=i(x),JT=n(x,"LI",{});var w7e=s(JT);Oge=n(w7e,"STRONG",{});var Aft=s(Oge);Oer=r(Aft,"roformer"),Aft.forEach(t),Xer=r(w7e," \u2014 "),cG=n(w7e,"A",{href:!0});var Lft=s(cG);Ver=r(Lft,"TFRoFormerModel"),Lft.forEach(t),zer=r(w7e," (RoFormer model)"),w7e.forEach(t),Wer=i(x),YT=n(x,"LI",{});var A7e=s(YT);Xge=n(A7e,"STRONG",{});var Bft=s(Xge);Qer=r(Bft,"speech_to_text"),Bft.forEach(t),Her=r(A7e," \u2014 "),fG=n(A7e,"A",{href:!0});var xft=s(fG);Uer=r(xft,"TFSpeech2TextModel"),xft.forEach(t),Jer=r(A7e," (Speech2Text model)"),A7e.forEach(t),Yer=i(x),KT=n(x,"LI",{});var L7e=s(KT);Vge=n(L7e,"STRONG",{});var kft=s(Vge);Ker=r(kft,"t5"),kft.forEach(t),Zer=r(L7e," \u2014 "),mG=n(L7e,"A",{href:!0});var Rft=s(mG);eor=r(Rft,"TFT5Model"),Rft.forEach(t),oor=r(L7e," (T5 model)"),L7e.forEach(t),ror=i(x),ZT=n(x,"LI",{});var B7e=s(ZT);zge=n(B7e,"STRONG",{});var Sft=s(zge);tor=r(Sft,"tapas"),Sft.forEach(t),aor=r(B7e," \u2014 "),gG=n(B7e,"A",{href:!0});var Pft=s(gG);nor=r(Pft,"TFTapasModel"),Pft.forEach(t),sor=r(B7e," (TAPAS model)"),B7e.forEach(t),lor=i(x),eF=n(x,"LI",{});var x7e=s(eF);Wge=n(x7e,"STRONG",{});var $ft=s(Wge);ior=r($ft,"transfo-xl"),$ft.forEach(t),dor=r(x7e," \u2014 "),hG=n(x7e,"A",{href:!0});var Ift=s(hG);cor=r(Ift,"TFTransfoXLModel"),Ift.forEach(t),mor=r(x7e," (Transformer-XL model)"),x7e.forEach(t),gor=i(x),oF=n(x,"LI",{});var k7e=s(oF);Qge=n(k7e,"STRONG",{});var Nft=s(Qge);hor=r(Nft,"vit"),Nft.forEach(t),por=r(k7e," \u2014 "),pG=n(k7e,"A",{href:!0});var Dft=s(pG);_or=r(Dft,"TFViTModel"),Dft.forEach(t),uor=r(k7e," (ViT model)"),k7e.forEach(t),bor=i(x),rF=n(x,"LI",{});var R7e=s(rF);Hge=n(R7e,"STRONG",{});var jft=s(Hge);vor=r(jft,"wav2vec2"),jft.forEach(t),Tor=r(R7e," \u2014 "),_G=n(R7e,"A",{href:!0});var qft=s(_G);For=r(qft,"TFWav2Vec2Model"),qft.forEach(t),Cor=r(R7e," (Wav2Vec2 model)"),R7e.forEach(t),Mor=i(x),tF=n(x,"LI",{});var S7e=s(tF);Uge=n(S7e,"STRONG",{});var Gft=s(Uge);Eor=r(Gft,"xlm"),Gft.forEach(t),yor=r(S7e," \u2014 "),uG=n(S7e,"A",{href:!0});var Oft=s(uG);wor=r(Oft,"TFXLMModel"),Oft.forEach(t),Aor=r(S7e," (XLM model)"),S7e.forEach(t),Lor=i(x),aF=n(x,"LI",{});var P7e=s(aF);Jge=n(P7e,"STRONG",{});var Xft=s(Jge);Bor=r(Xft,"xlm-roberta"),Xft.forEach(t),xor=r(P7e," \u2014 "),bG=n(P7e,"A",{href:!0});var Vft=s(bG);kor=r(Vft,"TFXLMRobertaModel"),Vft.forEach(t),Ror=r(P7e," (XLM-RoBERTa model)"),P7e.forEach(t),Sor=i(x),nF=n(x,"LI",{});var $7e=s(nF);Yge=n($7e,"STRONG",{});var zft=s(Yge);Por=r(zft,"xlnet"),zft.forEach(t),$or=r($7e," \u2014 "),vG=n($7e,"A",{href:!0});var Wft=s(vG);Ior=r(Wft,"TFXLNetModel"),Wft.forEach(t),Nor=r($7e," (XLNet model)"),$7e.forEach(t),x.forEach(t),Dor=i(pa),Kge=n(pa,"P",{});var Qft=s(Kge);jor=r(Qft,"Examples:"),Qft.forEach(t),qor=i(pa),m(JA.$$.fragment,pa),pa.forEach(t),jl.forEach(t),MRe=i(c),pc=n(c,"H2",{class:!0});var PPe=s(pc);sF=n(PPe,"A",{id:!0,class:!0,href:!0});var Hft=s(sF);Zge=n(Hft,"SPAN",{});var Uft=s(Zge);m(YA.$$.fragment,Uft),Uft.forEach(t),Hft.forEach(t),Gor=i(PPe),ehe=n(PPe,"SPAN",{});var Jft=s(ehe);Oor=r(Jft,"TFAutoModelForPreTraining"),Jft.forEach(t),PPe.forEach(t),ERe=i(c),Tr=n(c,"DIV",{class:!0});var Gl=s(Tr);m(KA.$$.fragment,Gl),Xor=i(Gl),_c=n(Gl,"P",{});var KW=s(_c);Vor=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ohe=n(KW,"CODE",{});var Yft=s(ohe);zor=r(Yft,"from_pretrained()"),Yft.forEach(t),Wor=r(KW,"class method or the "),rhe=n(KW,"CODE",{});var Kft=s(rhe);Qor=r(Kft,"from_config()"),Kft.forEach(t),Hor=r(KW,`class
method.`),KW.forEach(t),Uor=i(Gl),ZA=n(Gl,"P",{});var $Pe=s(ZA);Jor=r($Pe,"This class cannot be instantiated directly using "),the=n($Pe,"CODE",{});var Zft=s(the);Yor=r(Zft,"__init__()"),Zft.forEach(t),Kor=r($Pe," (throws an error)."),$Pe.forEach(t),Zor=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(e0.$$.fragment,Ol),err=i(Ol),ahe=n(Ol,"P",{});var emt=s(ahe);orr=r(emt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),emt.forEach(t),rrr=i(Ol),uc=n(Ol,"P",{});var ZW=s(uc);trr=r(ZW,`Note:
Loading a model from its configuration file does `),nhe=n(ZW,"STRONG",{});var omt=s(nhe);arr=r(omt,"not"),omt.forEach(t),nrr=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),she=n(ZW,"CODE",{});var rmt=s(she);srr=r(rmt,"from_pretrained()"),rmt.forEach(t),lrr=r(ZW,"to load the model weights."),ZW.forEach(t),irr=i(Ol),lhe=n(Ol,"P",{});var tmt=s(lhe);drr=r(tmt,"Examples:"),tmt.forEach(t),crr=i(Ol),m(o0.$$.fragment,Ol),Ol.forEach(t),frr=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(r0.$$.fragment,_a),mrr=i(_a),ihe=n(_a,"P",{});var amt=s(ihe);grr=r(amt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),amt.forEach(t),hrr=i(_a),un=n(_a,"P",{});var j3=s(un);prr=r(j3,"The model class to instantiate is selected based on the "),dhe=n(j3,"CODE",{});var nmt=s(dhe);_rr=r(nmt,"model_type"),nmt.forEach(t),urr=r(j3,` property of the config object (either
passed as an argument or loaded from `),che=n(j3,"CODE",{});var smt=s(che);brr=r(smt,"pretrained_model_name_or_path"),smt.forEach(t),vrr=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fhe=n(j3,"CODE",{});var lmt=s(fhe);Trr=r(lmt,"pretrained_model_name_or_path"),lmt.forEach(t),Frr=r(j3,":"),j3.forEach(t),Crr=i(_a),H=n(_a,"UL",{});var U=s(H);lF=n(U,"LI",{});var I7e=s(lF);mhe=n(I7e,"STRONG",{});var imt=s(mhe);Mrr=r(imt,"albert"),imt.forEach(t),Err=r(I7e," \u2014 "),TG=n(I7e,"A",{href:!0});var dmt=s(TG);yrr=r(dmt,"TFAlbertForPreTraining"),dmt.forEach(t),wrr=r(I7e," (ALBERT model)"),I7e.forEach(t),Arr=i(U),iF=n(U,"LI",{});var N7e=s(iF);ghe=n(N7e,"STRONG",{});var cmt=s(ghe);Lrr=r(cmt,"bart"),cmt.forEach(t),Brr=r(N7e," \u2014 "),FG=n(N7e,"A",{href:!0});var fmt=s(FG);xrr=r(fmt,"TFBartForConditionalGeneration"),fmt.forEach(t),krr=r(N7e," (BART model)"),N7e.forEach(t),Rrr=i(U),dF=n(U,"LI",{});var D7e=s(dF);hhe=n(D7e,"STRONG",{});var mmt=s(hhe);Srr=r(mmt,"bert"),mmt.forEach(t),Prr=r(D7e," \u2014 "),CG=n(D7e,"A",{href:!0});var gmt=s(CG);$rr=r(gmt,"TFBertForPreTraining"),gmt.forEach(t),Irr=r(D7e," (BERT model)"),D7e.forEach(t),Nrr=i(U),cF=n(U,"LI",{});var j7e=s(cF);phe=n(j7e,"STRONG",{});var hmt=s(phe);Drr=r(hmt,"camembert"),hmt.forEach(t),jrr=r(j7e," \u2014 "),MG=n(j7e,"A",{href:!0});var pmt=s(MG);qrr=r(pmt,"TFCamembertForMaskedLM"),pmt.forEach(t),Grr=r(j7e," (CamemBERT model)"),j7e.forEach(t),Orr=i(U),fF=n(U,"LI",{});var q7e=s(fF);_he=n(q7e,"STRONG",{});var _mt=s(_he);Xrr=r(_mt,"ctrl"),_mt.forEach(t),Vrr=r(q7e," \u2014 "),EG=n(q7e,"A",{href:!0});var umt=s(EG);zrr=r(umt,"TFCTRLLMHeadModel"),umt.forEach(t),Wrr=r(q7e," (CTRL model)"),q7e.forEach(t),Qrr=i(U),mF=n(U,"LI",{});var G7e=s(mF);uhe=n(G7e,"STRONG",{});var bmt=s(uhe);Hrr=r(bmt,"distilbert"),bmt.forEach(t),Urr=r(G7e," \u2014 "),yG=n(G7e,"A",{href:!0});var vmt=s(yG);Jrr=r(vmt,"TFDistilBertForMaskedLM"),vmt.forEach(t),Yrr=r(G7e," (DistilBERT model)"),G7e.forEach(t),Krr=i(U),gF=n(U,"LI",{});var O7e=s(gF);bhe=n(O7e,"STRONG",{});var Tmt=s(bhe);Zrr=r(Tmt,"electra"),Tmt.forEach(t),etr=r(O7e," \u2014 "),wG=n(O7e,"A",{href:!0});var Fmt=s(wG);otr=r(Fmt,"TFElectraForPreTraining"),Fmt.forEach(t),rtr=r(O7e," (ELECTRA model)"),O7e.forEach(t),ttr=i(U),hF=n(U,"LI",{});var X7e=s(hF);vhe=n(X7e,"STRONG",{});var Cmt=s(vhe);atr=r(Cmt,"flaubert"),Cmt.forEach(t),ntr=r(X7e," \u2014 "),AG=n(X7e,"A",{href:!0});var Mmt=s(AG);str=r(Mmt,"TFFlaubertWithLMHeadModel"),Mmt.forEach(t),ltr=r(X7e," (FlauBERT model)"),X7e.forEach(t),itr=i(U),pF=n(U,"LI",{});var V7e=s(pF);The=n(V7e,"STRONG",{});var Emt=s(The);dtr=r(Emt,"funnel"),Emt.forEach(t),ctr=r(V7e," \u2014 "),LG=n(V7e,"A",{href:!0});var ymt=s(LG);ftr=r(ymt,"TFFunnelForPreTraining"),ymt.forEach(t),mtr=r(V7e," (Funnel Transformer model)"),V7e.forEach(t),gtr=i(U),_F=n(U,"LI",{});var z7e=s(_F);Fhe=n(z7e,"STRONG",{});var wmt=s(Fhe);htr=r(wmt,"gpt2"),wmt.forEach(t),ptr=r(z7e," \u2014 "),BG=n(z7e,"A",{href:!0});var Amt=s(BG);_tr=r(Amt,"TFGPT2LMHeadModel"),Amt.forEach(t),utr=r(z7e," (OpenAI GPT-2 model)"),z7e.forEach(t),btr=i(U),uF=n(U,"LI",{});var W7e=s(uF);Che=n(W7e,"STRONG",{});var Lmt=s(Che);vtr=r(Lmt,"layoutlm"),Lmt.forEach(t),Ttr=r(W7e," \u2014 "),xG=n(W7e,"A",{href:!0});var Bmt=s(xG);Ftr=r(Bmt,"TFLayoutLMForMaskedLM"),Bmt.forEach(t),Ctr=r(W7e," (LayoutLM model)"),W7e.forEach(t),Mtr=i(U),bF=n(U,"LI",{});var Q7e=s(bF);Mhe=n(Q7e,"STRONG",{});var xmt=s(Mhe);Etr=r(xmt,"lxmert"),xmt.forEach(t),ytr=r(Q7e," \u2014 "),kG=n(Q7e,"A",{href:!0});var kmt=s(kG);wtr=r(kmt,"TFLxmertForPreTraining"),kmt.forEach(t),Atr=r(Q7e," (LXMERT model)"),Q7e.forEach(t),Ltr=i(U),vF=n(U,"LI",{});var H7e=s(vF);Ehe=n(H7e,"STRONG",{});var Rmt=s(Ehe);Btr=r(Rmt,"mobilebert"),Rmt.forEach(t),xtr=r(H7e," \u2014 "),RG=n(H7e,"A",{href:!0});var Smt=s(RG);ktr=r(Smt,"TFMobileBertForPreTraining"),Smt.forEach(t),Rtr=r(H7e," (MobileBERT model)"),H7e.forEach(t),Str=i(U),TF=n(U,"LI",{});var U7e=s(TF);yhe=n(U7e,"STRONG",{});var Pmt=s(yhe);Ptr=r(Pmt,"mpnet"),Pmt.forEach(t),$tr=r(U7e," \u2014 "),SG=n(U7e,"A",{href:!0});var $mt=s(SG);Itr=r($mt,"TFMPNetForMaskedLM"),$mt.forEach(t),Ntr=r(U7e," (MPNet model)"),U7e.forEach(t),Dtr=i(U),FF=n(U,"LI",{});var J7e=s(FF);whe=n(J7e,"STRONG",{});var Imt=s(whe);jtr=r(Imt,"openai-gpt"),Imt.forEach(t),qtr=r(J7e," \u2014 "),PG=n(J7e,"A",{href:!0});var Nmt=s(PG);Gtr=r(Nmt,"TFOpenAIGPTLMHeadModel"),Nmt.forEach(t),Otr=r(J7e," (OpenAI GPT model)"),J7e.forEach(t),Xtr=i(U),CF=n(U,"LI",{});var Y7e=s(CF);Ahe=n(Y7e,"STRONG",{});var Dmt=s(Ahe);Vtr=r(Dmt,"roberta"),Dmt.forEach(t),ztr=r(Y7e," \u2014 "),$G=n(Y7e,"A",{href:!0});var jmt=s($G);Wtr=r(jmt,"TFRobertaForMaskedLM"),jmt.forEach(t),Qtr=r(Y7e," (RoBERTa model)"),Y7e.forEach(t),Htr=i(U),MF=n(U,"LI",{});var K7e=s(MF);Lhe=n(K7e,"STRONG",{});var qmt=s(Lhe);Utr=r(qmt,"t5"),qmt.forEach(t),Jtr=r(K7e," \u2014 "),IG=n(K7e,"A",{href:!0});var Gmt=s(IG);Ytr=r(Gmt,"TFT5ForConditionalGeneration"),Gmt.forEach(t),Ktr=r(K7e," (T5 model)"),K7e.forEach(t),Ztr=i(U),EF=n(U,"LI",{});var Z7e=s(EF);Bhe=n(Z7e,"STRONG",{});var Omt=s(Bhe);ear=r(Omt,"tapas"),Omt.forEach(t),oar=r(Z7e," \u2014 "),NG=n(Z7e,"A",{href:!0});var Xmt=s(NG);rar=r(Xmt,"TFTapasForMaskedLM"),Xmt.forEach(t),tar=r(Z7e," (TAPAS model)"),Z7e.forEach(t),aar=i(U),yF=n(U,"LI",{});var e8e=s(yF);xhe=n(e8e,"STRONG",{});var Vmt=s(xhe);nar=r(Vmt,"transfo-xl"),Vmt.forEach(t),sar=r(e8e," \u2014 "),DG=n(e8e,"A",{href:!0});var zmt=s(DG);lar=r(zmt,"TFTransfoXLLMHeadModel"),zmt.forEach(t),iar=r(e8e," (Transformer-XL model)"),e8e.forEach(t),dar=i(U),wF=n(U,"LI",{});var o8e=s(wF);khe=n(o8e,"STRONG",{});var Wmt=s(khe);car=r(Wmt,"xlm"),Wmt.forEach(t),far=r(o8e," \u2014 "),jG=n(o8e,"A",{href:!0});var Qmt=s(jG);mar=r(Qmt,"TFXLMWithLMHeadModel"),Qmt.forEach(t),gar=r(o8e," (XLM model)"),o8e.forEach(t),har=i(U),AF=n(U,"LI",{});var r8e=s(AF);Rhe=n(r8e,"STRONG",{});var Hmt=s(Rhe);par=r(Hmt,"xlm-roberta"),Hmt.forEach(t),_ar=r(r8e," \u2014 "),qG=n(r8e,"A",{href:!0});var Umt=s(qG);uar=r(Umt,"TFXLMRobertaForMaskedLM"),Umt.forEach(t),bar=r(r8e," (XLM-RoBERTa model)"),r8e.forEach(t),Tar=i(U),LF=n(U,"LI",{});var t8e=s(LF);She=n(t8e,"STRONG",{});var Jmt=s(She);Far=r(Jmt,"xlnet"),Jmt.forEach(t),Car=r(t8e," \u2014 "),GG=n(t8e,"A",{href:!0});var Ymt=s(GG);Mar=r(Ymt,"TFXLNetLMHeadModel"),Ymt.forEach(t),Ear=r(t8e," (XLNet model)"),t8e.forEach(t),U.forEach(t),yar=i(_a),Phe=n(_a,"P",{});var Kmt=s(Phe);war=r(Kmt,"Examples:"),Kmt.forEach(t),Aar=i(_a),m(t0.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),yRe=i(c),bc=n(c,"H2",{class:!0});var IPe=s(bc);BF=n(IPe,"A",{id:!0,class:!0,href:!0});var Zmt=s(BF);$he=n(Zmt,"SPAN",{});var egt=s($he);m(a0.$$.fragment,egt),egt.forEach(t),Zmt.forEach(t),Lar=i(IPe),Ihe=n(IPe,"SPAN",{});var ogt=s(Ihe);Bar=r(ogt,"TFAutoModelForCausalLM"),ogt.forEach(t),IPe.forEach(t),wRe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(n0.$$.fragment,Xl),xar=i(Xl),vc=n(Xl,"P",{});var eQ=s(vc);kar=r(eQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Nhe=n(eQ,"CODE",{});var rgt=s(Nhe);Rar=r(rgt,"from_pretrained()"),rgt.forEach(t),Sar=r(eQ,"class method or the "),Dhe=n(eQ,"CODE",{});var tgt=s(Dhe);Par=r(tgt,"from_config()"),tgt.forEach(t),$ar=r(eQ,`class
method.`),eQ.forEach(t),Iar=i(Xl),s0=n(Xl,"P",{});var NPe=s(s0);Nar=r(NPe,"This class cannot be instantiated directly using "),jhe=n(NPe,"CODE",{});var agt=s(jhe);Dar=r(agt,"__init__()"),agt.forEach(t),jar=r(NPe," (throws an error)."),NPe.forEach(t),qar=i(Xl),pt=n(Xl,"DIV",{class:!0});var Vl=s(pt);m(l0.$$.fragment,Vl),Gar=i(Vl),qhe=n(Vl,"P",{});var ngt=s(qhe);Oar=r(ngt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ngt.forEach(t),Xar=i(Vl),Tc=n(Vl,"P",{});var oQ=s(Tc);Var=r(oQ,`Note:
Loading a model from its configuration file does `),Ghe=n(oQ,"STRONG",{});var sgt=s(Ghe);zar=r(sgt,"not"),sgt.forEach(t),War=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ohe=n(oQ,"CODE",{});var lgt=s(Ohe);Qar=r(lgt,"from_pretrained()"),lgt.forEach(t),Har=r(oQ,"to load the model weights."),oQ.forEach(t),Uar=i(Vl),Xhe=n(Vl,"P",{});var igt=s(Xhe);Jar=r(igt,"Examples:"),igt.forEach(t),Yar=i(Vl),m(i0.$$.fragment,Vl),Vl.forEach(t),Kar=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(d0.$$.fragment,ua),Zar=i(ua),Vhe=n(ua,"P",{});var dgt=s(Vhe);enr=r(dgt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),dgt.forEach(t),onr=i(ua),bn=n(ua,"P",{});var q3=s(bn);rnr=r(q3,"The model class to instantiate is selected based on the "),zhe=n(q3,"CODE",{});var cgt=s(zhe);tnr=r(cgt,"model_type"),cgt.forEach(t),anr=r(q3,` property of the config object (either
passed as an argument or loaded from `),Whe=n(q3,"CODE",{});var fgt=s(Whe);nnr=r(fgt,"pretrained_model_name_or_path"),fgt.forEach(t),snr=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=n(q3,"CODE",{});var mgt=s(Qhe);lnr=r(mgt,"pretrained_model_name_or_path"),mgt.forEach(t),inr=r(q3,":"),q3.forEach(t),dnr=i(ua),ge=n(ua,"UL",{});var Fe=s(ge);xF=n(Fe,"LI",{});var a8e=s(xF);Hhe=n(a8e,"STRONG",{});var ggt=s(Hhe);cnr=r(ggt,"bert"),ggt.forEach(t),fnr=r(a8e," \u2014 "),OG=n(a8e,"A",{href:!0});var hgt=s(OG);mnr=r(hgt,"TFBertLMHeadModel"),hgt.forEach(t),gnr=r(a8e," (BERT model)"),a8e.forEach(t),hnr=i(Fe),kF=n(Fe,"LI",{});var n8e=s(kF);Uhe=n(n8e,"STRONG",{});var pgt=s(Uhe);pnr=r(pgt,"camembert"),pgt.forEach(t),_nr=r(n8e," \u2014 "),XG=n(n8e,"A",{href:!0});var _gt=s(XG);unr=r(_gt,"TFCamembertForCausalLM"),_gt.forEach(t),bnr=r(n8e," (CamemBERT model)"),n8e.forEach(t),vnr=i(Fe),RF=n(Fe,"LI",{});var s8e=s(RF);Jhe=n(s8e,"STRONG",{});var ugt=s(Jhe);Tnr=r(ugt,"ctrl"),ugt.forEach(t),Fnr=r(s8e," \u2014 "),VG=n(s8e,"A",{href:!0});var bgt=s(VG);Cnr=r(bgt,"TFCTRLLMHeadModel"),bgt.forEach(t),Mnr=r(s8e," (CTRL model)"),s8e.forEach(t),Enr=i(Fe),SF=n(Fe,"LI",{});var l8e=s(SF);Yhe=n(l8e,"STRONG",{});var vgt=s(Yhe);ynr=r(vgt,"gpt2"),vgt.forEach(t),wnr=r(l8e," \u2014 "),zG=n(l8e,"A",{href:!0});var Tgt=s(zG);Anr=r(Tgt,"TFGPT2LMHeadModel"),Tgt.forEach(t),Lnr=r(l8e," (OpenAI GPT-2 model)"),l8e.forEach(t),Bnr=i(Fe),PF=n(Fe,"LI",{});var i8e=s(PF);Khe=n(i8e,"STRONG",{});var Fgt=s(Khe);xnr=r(Fgt,"openai-gpt"),Fgt.forEach(t),knr=r(i8e," \u2014 "),WG=n(i8e,"A",{href:!0});var Cgt=s(WG);Rnr=r(Cgt,"TFOpenAIGPTLMHeadModel"),Cgt.forEach(t),Snr=r(i8e," (OpenAI GPT model)"),i8e.forEach(t),Pnr=i(Fe),$F=n(Fe,"LI",{});var d8e=s($F);Zhe=n(d8e,"STRONG",{});var Mgt=s(Zhe);$nr=r(Mgt,"rembert"),Mgt.forEach(t),Inr=r(d8e," \u2014 "),QG=n(d8e,"A",{href:!0});var Egt=s(QG);Nnr=r(Egt,"TFRemBertForCausalLM"),Egt.forEach(t),Dnr=r(d8e," (RemBERT model)"),d8e.forEach(t),jnr=i(Fe),IF=n(Fe,"LI",{});var c8e=s(IF);epe=n(c8e,"STRONG",{});var ygt=s(epe);qnr=r(ygt,"roberta"),ygt.forEach(t),Gnr=r(c8e," \u2014 "),HG=n(c8e,"A",{href:!0});var wgt=s(HG);Onr=r(wgt,"TFRobertaForCausalLM"),wgt.forEach(t),Xnr=r(c8e," (RoBERTa model)"),c8e.forEach(t),Vnr=i(Fe),NF=n(Fe,"LI",{});var f8e=s(NF);ope=n(f8e,"STRONG",{});var Agt=s(ope);znr=r(Agt,"roformer"),Agt.forEach(t),Wnr=r(f8e," \u2014 "),UG=n(f8e,"A",{href:!0});var Lgt=s(UG);Qnr=r(Lgt,"TFRoFormerForCausalLM"),Lgt.forEach(t),Hnr=r(f8e," (RoFormer model)"),f8e.forEach(t),Unr=i(Fe),DF=n(Fe,"LI",{});var m8e=s(DF);rpe=n(m8e,"STRONG",{});var Bgt=s(rpe);Jnr=r(Bgt,"transfo-xl"),Bgt.forEach(t),Ynr=r(m8e," \u2014 "),JG=n(m8e,"A",{href:!0});var xgt=s(JG);Knr=r(xgt,"TFTransfoXLLMHeadModel"),xgt.forEach(t),Znr=r(m8e," (Transformer-XL model)"),m8e.forEach(t),esr=i(Fe),jF=n(Fe,"LI",{});var g8e=s(jF);tpe=n(g8e,"STRONG",{});var kgt=s(tpe);osr=r(kgt,"xlm"),kgt.forEach(t),rsr=r(g8e," \u2014 "),YG=n(g8e,"A",{href:!0});var Rgt=s(YG);tsr=r(Rgt,"TFXLMWithLMHeadModel"),Rgt.forEach(t),asr=r(g8e," (XLM model)"),g8e.forEach(t),nsr=i(Fe),qF=n(Fe,"LI",{});var h8e=s(qF);ape=n(h8e,"STRONG",{});var Sgt=s(ape);ssr=r(Sgt,"xlnet"),Sgt.forEach(t),lsr=r(h8e," \u2014 "),KG=n(h8e,"A",{href:!0});var Pgt=s(KG);isr=r(Pgt,"TFXLNetLMHeadModel"),Pgt.forEach(t),dsr=r(h8e," (XLNet model)"),h8e.forEach(t),Fe.forEach(t),csr=i(ua),npe=n(ua,"P",{});var $gt=s(npe);fsr=r($gt,"Examples:"),$gt.forEach(t),msr=i(ua),m(c0.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),ARe=i(c),Fc=n(c,"H2",{class:!0});var DPe=s(Fc);GF=n(DPe,"A",{id:!0,class:!0,href:!0});var Igt=s(GF);spe=n(Igt,"SPAN",{});var Ngt=s(spe);m(f0.$$.fragment,Ngt),Ngt.forEach(t),Igt.forEach(t),gsr=i(DPe),lpe=n(DPe,"SPAN",{});var Dgt=s(lpe);hsr=r(Dgt,"TFAutoModelForImageClassification"),Dgt.forEach(t),DPe.forEach(t),LRe=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);m(m0.$$.fragment,zl),psr=i(zl),Cc=n(zl,"P",{});var rQ=s(Cc);_sr=r(rQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ipe=n(rQ,"CODE",{});var jgt=s(ipe);usr=r(jgt,"from_pretrained()"),jgt.forEach(t),bsr=r(rQ,"class method or the "),dpe=n(rQ,"CODE",{});var qgt=s(dpe);vsr=r(qgt,"from_config()"),qgt.forEach(t),Tsr=r(rQ,`class
method.`),rQ.forEach(t),Fsr=i(zl),g0=n(zl,"P",{});var jPe=s(g0);Csr=r(jPe,"This class cannot be instantiated directly using "),cpe=n(jPe,"CODE",{});var Ggt=s(cpe);Msr=r(Ggt,"__init__()"),Ggt.forEach(t),Esr=r(jPe," (throws an error)."),jPe.forEach(t),ysr=i(zl),_t=n(zl,"DIV",{class:!0});var Wl=s(_t);m(h0.$$.fragment,Wl),wsr=i(Wl),fpe=n(Wl,"P",{});var Ogt=s(fpe);Asr=r(Ogt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ogt.forEach(t),Lsr=i(Wl),Mc=n(Wl,"P",{});var tQ=s(Mc);Bsr=r(tQ,`Note:
Loading a model from its configuration file does `),mpe=n(tQ,"STRONG",{});var Xgt=s(mpe);xsr=r(Xgt,"not"),Xgt.forEach(t),ksr=r(tQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gpe=n(tQ,"CODE",{});var Vgt=s(gpe);Rsr=r(Vgt,"from_pretrained()"),Vgt.forEach(t),Ssr=r(tQ,"to load the model weights."),tQ.forEach(t),Psr=i(Wl),hpe=n(Wl,"P",{});var zgt=s(hpe);$sr=r(zgt,"Examples:"),zgt.forEach(t),Isr=i(Wl),m(p0.$$.fragment,Wl),Wl.forEach(t),Nsr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(_0.$$.fragment,ba),Dsr=i(ba),ppe=n(ba,"P",{});var Wgt=s(ppe);jsr=r(Wgt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Wgt.forEach(t),qsr=i(ba),vn=n(ba,"P",{});var G3=s(vn);Gsr=r(G3,"The model class to instantiate is selected based on the "),_pe=n(G3,"CODE",{});var Qgt=s(_pe);Osr=r(Qgt,"model_type"),Qgt.forEach(t),Xsr=r(G3,` property of the config object (either
passed as an argument or loaded from `),upe=n(G3,"CODE",{});var Hgt=s(upe);Vsr=r(Hgt,"pretrained_model_name_or_path"),Hgt.forEach(t),zsr=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bpe=n(G3,"CODE",{});var Ugt=s(bpe);Wsr=r(Ugt,"pretrained_model_name_or_path"),Ugt.forEach(t),Qsr=r(G3,":"),G3.forEach(t),Hsr=i(ba),u0=n(ba,"UL",{});var qPe=s(u0);OF=n(qPe,"LI",{});var p8e=s(OF);vpe=n(p8e,"STRONG",{});var Jgt=s(vpe);Usr=r(Jgt,"convnext"),Jgt.forEach(t),Jsr=r(p8e," \u2014 "),ZG=n(p8e,"A",{href:!0});var Ygt=s(ZG);Ysr=r(Ygt,"TFConvNextForImageClassification"),Ygt.forEach(t),Ksr=r(p8e," (ConvNext model)"),p8e.forEach(t),Zsr=i(qPe),XF=n(qPe,"LI",{});var _8e=s(XF);Tpe=n(_8e,"STRONG",{});var Kgt=s(Tpe);elr=r(Kgt,"vit"),Kgt.forEach(t),olr=r(_8e," \u2014 "),eO=n(_8e,"A",{href:!0});var Zgt=s(eO);rlr=r(Zgt,"TFViTForImageClassification"),Zgt.forEach(t),tlr=r(_8e," (ViT model)"),_8e.forEach(t),qPe.forEach(t),alr=i(ba),Fpe=n(ba,"P",{});var eht=s(Fpe);nlr=r(eht,"Examples:"),eht.forEach(t),slr=i(ba),m(b0.$$.fragment,ba),ba.forEach(t),zl.forEach(t),BRe=i(c),Ec=n(c,"H2",{class:!0});var GPe=s(Ec);VF=n(GPe,"A",{id:!0,class:!0,href:!0});var oht=s(VF);Cpe=n(oht,"SPAN",{});var rht=s(Cpe);m(v0.$$.fragment,rht),rht.forEach(t),oht.forEach(t),llr=i(GPe),Mpe=n(GPe,"SPAN",{});var tht=s(Mpe);ilr=r(tht,"TFAutoModelForMaskedLM"),tht.forEach(t),GPe.forEach(t),xRe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(T0.$$.fragment,Ql),dlr=i(Ql),yc=n(Ql,"P",{});var aQ=s(yc);clr=r(aQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Epe=n(aQ,"CODE",{});var aht=s(Epe);flr=r(aht,"from_pretrained()"),aht.forEach(t),mlr=r(aQ,"class method or the "),ype=n(aQ,"CODE",{});var nht=s(ype);glr=r(nht,"from_config()"),nht.forEach(t),hlr=r(aQ,`class
method.`),aQ.forEach(t),plr=i(Ql),F0=n(Ql,"P",{});var OPe=s(F0);_lr=r(OPe,"This class cannot be instantiated directly using "),wpe=n(OPe,"CODE",{});var sht=s(wpe);ulr=r(sht,"__init__()"),sht.forEach(t),blr=r(OPe," (throws an error)."),OPe.forEach(t),vlr=i(Ql),ut=n(Ql,"DIV",{class:!0});var Hl=s(ut);m(C0.$$.fragment,Hl),Tlr=i(Hl),Ape=n(Hl,"P",{});var lht=s(Ape);Flr=r(lht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lht.forEach(t),Clr=i(Hl),wc=n(Hl,"P",{});var nQ=s(wc);Mlr=r(nQ,`Note:
Loading a model from its configuration file does `),Lpe=n(nQ,"STRONG",{});var iht=s(Lpe);Elr=r(iht,"not"),iht.forEach(t),ylr=r(nQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bpe=n(nQ,"CODE",{});var dht=s(Bpe);wlr=r(dht,"from_pretrained()"),dht.forEach(t),Alr=r(nQ,"to load the model weights."),nQ.forEach(t),Llr=i(Hl),xpe=n(Hl,"P",{});var cht=s(xpe);Blr=r(cht,"Examples:"),cht.forEach(t),xlr=i(Hl),m(M0.$$.fragment,Hl),Hl.forEach(t),klr=i(Ql),bo=n(Ql,"DIV",{class:!0});var va=s(bo);m(E0.$$.fragment,va),Rlr=i(va),kpe=n(va,"P",{});var fht=s(kpe);Slr=r(fht,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),fht.forEach(t),Plr=i(va),Tn=n(va,"P",{});var O3=s(Tn);$lr=r(O3,"The model class to instantiate is selected based on the "),Rpe=n(O3,"CODE",{});var mht=s(Rpe);Ilr=r(mht,"model_type"),mht.forEach(t),Nlr=r(O3,` property of the config object (either
passed as an argument or loaded from `),Spe=n(O3,"CODE",{});var ght=s(Spe);Dlr=r(ght,"pretrained_model_name_or_path"),ght.forEach(t),jlr=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=n(O3,"CODE",{});var hht=s(Ppe);qlr=r(hht,"pretrained_model_name_or_path"),hht.forEach(t),Glr=r(O3,":"),O3.forEach(t),Olr=i(va),J=n(va,"UL",{});var oe=s(J);zF=n(oe,"LI",{});var u8e=s(zF);$pe=n(u8e,"STRONG",{});var pht=s($pe);Xlr=r(pht,"albert"),pht.forEach(t),Vlr=r(u8e," \u2014 "),oO=n(u8e,"A",{href:!0});var _ht=s(oO);zlr=r(_ht,"TFAlbertForMaskedLM"),_ht.forEach(t),Wlr=r(u8e," (ALBERT model)"),u8e.forEach(t),Qlr=i(oe),WF=n(oe,"LI",{});var b8e=s(WF);Ipe=n(b8e,"STRONG",{});var uht=s(Ipe);Hlr=r(uht,"bert"),uht.forEach(t),Ulr=r(b8e," \u2014 "),rO=n(b8e,"A",{href:!0});var bht=s(rO);Jlr=r(bht,"TFBertForMaskedLM"),bht.forEach(t),Ylr=r(b8e," (BERT model)"),b8e.forEach(t),Klr=i(oe),QF=n(oe,"LI",{});var v8e=s(QF);Npe=n(v8e,"STRONG",{});var vht=s(Npe);Zlr=r(vht,"camembert"),vht.forEach(t),eir=r(v8e," \u2014 "),tO=n(v8e,"A",{href:!0});var Tht=s(tO);oir=r(Tht,"TFCamembertForMaskedLM"),Tht.forEach(t),rir=r(v8e," (CamemBERT model)"),v8e.forEach(t),tir=i(oe),HF=n(oe,"LI",{});var T8e=s(HF);Dpe=n(T8e,"STRONG",{});var Fht=s(Dpe);air=r(Fht,"convbert"),Fht.forEach(t),nir=r(T8e," \u2014 "),aO=n(T8e,"A",{href:!0});var Cht=s(aO);sir=r(Cht,"TFConvBertForMaskedLM"),Cht.forEach(t),lir=r(T8e," (ConvBERT model)"),T8e.forEach(t),iir=i(oe),UF=n(oe,"LI",{});var F8e=s(UF);jpe=n(F8e,"STRONG",{});var Mht=s(jpe);dir=r(Mht,"deberta"),Mht.forEach(t),cir=r(F8e," \u2014 "),nO=n(F8e,"A",{href:!0});var Eht=s(nO);fir=r(Eht,"TFDebertaForMaskedLM"),Eht.forEach(t),mir=r(F8e," (DeBERTa model)"),F8e.forEach(t),gir=i(oe),JF=n(oe,"LI",{});var C8e=s(JF);qpe=n(C8e,"STRONG",{});var yht=s(qpe);hir=r(yht,"deberta-v2"),yht.forEach(t),pir=r(C8e," \u2014 "),sO=n(C8e,"A",{href:!0});var wht=s(sO);_ir=r(wht,"TFDebertaV2ForMaskedLM"),wht.forEach(t),uir=r(C8e," (DeBERTa-v2 model)"),C8e.forEach(t),bir=i(oe),YF=n(oe,"LI",{});var M8e=s(YF);Gpe=n(M8e,"STRONG",{});var Aht=s(Gpe);vir=r(Aht,"distilbert"),Aht.forEach(t),Tir=r(M8e," \u2014 "),lO=n(M8e,"A",{href:!0});var Lht=s(lO);Fir=r(Lht,"TFDistilBertForMaskedLM"),Lht.forEach(t),Cir=r(M8e," (DistilBERT model)"),M8e.forEach(t),Mir=i(oe),KF=n(oe,"LI",{});var E8e=s(KF);Ope=n(E8e,"STRONG",{});var Bht=s(Ope);Eir=r(Bht,"electra"),Bht.forEach(t),yir=r(E8e," \u2014 "),iO=n(E8e,"A",{href:!0});var xht=s(iO);wir=r(xht,"TFElectraForMaskedLM"),xht.forEach(t),Air=r(E8e," (ELECTRA model)"),E8e.forEach(t),Lir=i(oe),ZF=n(oe,"LI",{});var y8e=s(ZF);Xpe=n(y8e,"STRONG",{});var kht=s(Xpe);Bir=r(kht,"flaubert"),kht.forEach(t),xir=r(y8e," \u2014 "),dO=n(y8e,"A",{href:!0});var Rht=s(dO);kir=r(Rht,"TFFlaubertWithLMHeadModel"),Rht.forEach(t),Rir=r(y8e," (FlauBERT model)"),y8e.forEach(t),Sir=i(oe),eC=n(oe,"LI",{});var w8e=s(eC);Vpe=n(w8e,"STRONG",{});var Sht=s(Vpe);Pir=r(Sht,"funnel"),Sht.forEach(t),$ir=r(w8e," \u2014 "),cO=n(w8e,"A",{href:!0});var Pht=s(cO);Iir=r(Pht,"TFFunnelForMaskedLM"),Pht.forEach(t),Nir=r(w8e," (Funnel Transformer model)"),w8e.forEach(t),Dir=i(oe),oC=n(oe,"LI",{});var A8e=s(oC);zpe=n(A8e,"STRONG",{});var $ht=s(zpe);jir=r($ht,"layoutlm"),$ht.forEach(t),qir=r(A8e," \u2014 "),fO=n(A8e,"A",{href:!0});var Iht=s(fO);Gir=r(Iht,"TFLayoutLMForMaskedLM"),Iht.forEach(t),Oir=r(A8e," (LayoutLM model)"),A8e.forEach(t),Xir=i(oe),rC=n(oe,"LI",{});var L8e=s(rC);Wpe=n(L8e,"STRONG",{});var Nht=s(Wpe);Vir=r(Nht,"longformer"),Nht.forEach(t),zir=r(L8e," \u2014 "),mO=n(L8e,"A",{href:!0});var Dht=s(mO);Wir=r(Dht,"TFLongformerForMaskedLM"),Dht.forEach(t),Qir=r(L8e," (Longformer model)"),L8e.forEach(t),Hir=i(oe),tC=n(oe,"LI",{});var B8e=s(tC);Qpe=n(B8e,"STRONG",{});var jht=s(Qpe);Uir=r(jht,"mobilebert"),jht.forEach(t),Jir=r(B8e," \u2014 "),gO=n(B8e,"A",{href:!0});var qht=s(gO);Yir=r(qht,"TFMobileBertForMaskedLM"),qht.forEach(t),Kir=r(B8e," (MobileBERT model)"),B8e.forEach(t),Zir=i(oe),aC=n(oe,"LI",{});var x8e=s(aC);Hpe=n(x8e,"STRONG",{});var Ght=s(Hpe);edr=r(Ght,"mpnet"),Ght.forEach(t),odr=r(x8e," \u2014 "),hO=n(x8e,"A",{href:!0});var Oht=s(hO);rdr=r(Oht,"TFMPNetForMaskedLM"),Oht.forEach(t),tdr=r(x8e," (MPNet model)"),x8e.forEach(t),adr=i(oe),nC=n(oe,"LI",{});var k8e=s(nC);Upe=n(k8e,"STRONG",{});var Xht=s(Upe);ndr=r(Xht,"rembert"),Xht.forEach(t),sdr=r(k8e," \u2014 "),pO=n(k8e,"A",{href:!0});var Vht=s(pO);ldr=r(Vht,"TFRemBertForMaskedLM"),Vht.forEach(t),idr=r(k8e," (RemBERT model)"),k8e.forEach(t),ddr=i(oe),sC=n(oe,"LI",{});var R8e=s(sC);Jpe=n(R8e,"STRONG",{});var zht=s(Jpe);cdr=r(zht,"roberta"),zht.forEach(t),fdr=r(R8e," \u2014 "),_O=n(R8e,"A",{href:!0});var Wht=s(_O);mdr=r(Wht,"TFRobertaForMaskedLM"),Wht.forEach(t),gdr=r(R8e," (RoBERTa model)"),R8e.forEach(t),hdr=i(oe),lC=n(oe,"LI",{});var S8e=s(lC);Ype=n(S8e,"STRONG",{});var Qht=s(Ype);pdr=r(Qht,"roformer"),Qht.forEach(t),_dr=r(S8e," \u2014 "),uO=n(S8e,"A",{href:!0});var Hht=s(uO);udr=r(Hht,"TFRoFormerForMaskedLM"),Hht.forEach(t),bdr=r(S8e," (RoFormer model)"),S8e.forEach(t),vdr=i(oe),iC=n(oe,"LI",{});var P8e=s(iC);Kpe=n(P8e,"STRONG",{});var Uht=s(Kpe);Tdr=r(Uht,"tapas"),Uht.forEach(t),Fdr=r(P8e," \u2014 "),bO=n(P8e,"A",{href:!0});var Jht=s(bO);Cdr=r(Jht,"TFTapasForMaskedLM"),Jht.forEach(t),Mdr=r(P8e," (TAPAS model)"),P8e.forEach(t),Edr=i(oe),dC=n(oe,"LI",{});var $8e=s(dC);Zpe=n($8e,"STRONG",{});var Yht=s(Zpe);ydr=r(Yht,"xlm"),Yht.forEach(t),wdr=r($8e," \u2014 "),vO=n($8e,"A",{href:!0});var Kht=s(vO);Adr=r(Kht,"TFXLMWithLMHeadModel"),Kht.forEach(t),Ldr=r($8e," (XLM model)"),$8e.forEach(t),Bdr=i(oe),cC=n(oe,"LI",{});var I8e=s(cC);e_e=n(I8e,"STRONG",{});var Zht=s(e_e);xdr=r(Zht,"xlm-roberta"),Zht.forEach(t),kdr=r(I8e," \u2014 "),TO=n(I8e,"A",{href:!0});var ept=s(TO);Rdr=r(ept,"TFXLMRobertaForMaskedLM"),ept.forEach(t),Sdr=r(I8e," (XLM-RoBERTa model)"),I8e.forEach(t),oe.forEach(t),Pdr=i(va),o_e=n(va,"P",{});var opt=s(o_e);$dr=r(opt,"Examples:"),opt.forEach(t),Idr=i(va),m(y0.$$.fragment,va),va.forEach(t),Ql.forEach(t),kRe=i(c),Ac=n(c,"H2",{class:!0});var XPe=s(Ac);fC=n(XPe,"A",{id:!0,class:!0,href:!0});var rpt=s(fC);r_e=n(rpt,"SPAN",{});var tpt=s(r_e);m(w0.$$.fragment,tpt),tpt.forEach(t),rpt.forEach(t),Ndr=i(XPe),t_e=n(XPe,"SPAN",{});var apt=s(t_e);Ddr=r(apt,"TFAutoModelForSeq2SeqLM"),apt.forEach(t),XPe.forEach(t),RRe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(A0.$$.fragment,Ul),jdr=i(Ul),Lc=n(Ul,"P",{});var sQ=s(Lc);qdr=r(sQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),a_e=n(sQ,"CODE",{});var npt=s(a_e);Gdr=r(npt,"from_pretrained()"),npt.forEach(t),Odr=r(sQ,"class method or the "),n_e=n(sQ,"CODE",{});var spt=s(n_e);Xdr=r(spt,"from_config()"),spt.forEach(t),Vdr=r(sQ,`class
method.`),sQ.forEach(t),zdr=i(Ul),L0=n(Ul,"P",{});var VPe=s(L0);Wdr=r(VPe,"This class cannot be instantiated directly using "),s_e=n(VPe,"CODE",{});var lpt=s(s_e);Qdr=r(lpt,"__init__()"),lpt.forEach(t),Hdr=r(VPe," (throws an error)."),VPe.forEach(t),Udr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(B0.$$.fragment,Jl),Jdr=i(Jl),l_e=n(Jl,"P",{});var ipt=s(l_e);Ydr=r(ipt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ipt.forEach(t),Kdr=i(Jl),Bc=n(Jl,"P",{});var lQ=s(Bc);Zdr=r(lQ,`Note:
Loading a model from its configuration file does `),i_e=n(lQ,"STRONG",{});var dpt=s(i_e);ecr=r(dpt,"not"),dpt.forEach(t),ocr=r(lQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),d_e=n(lQ,"CODE",{});var cpt=s(d_e);rcr=r(cpt,"from_pretrained()"),cpt.forEach(t),tcr=r(lQ,"to load the model weights."),lQ.forEach(t),acr=i(Jl),c_e=n(Jl,"P",{});var fpt=s(c_e);ncr=r(fpt,"Examples:"),fpt.forEach(t),scr=i(Jl),m(x0.$$.fragment,Jl),Jl.forEach(t),lcr=i(Ul),vo=n(Ul,"DIV",{class:!0});var Ta=s(vo);m(k0.$$.fragment,Ta),icr=i(Ta),f_e=n(Ta,"P",{});var mpt=s(f_e);dcr=r(mpt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mpt.forEach(t),ccr=i(Ta),Fn=n(Ta,"P",{});var X3=s(Fn);fcr=r(X3,"The model class to instantiate is selected based on the "),m_e=n(X3,"CODE",{});var gpt=s(m_e);mcr=r(gpt,"model_type"),gpt.forEach(t),gcr=r(X3,` property of the config object (either
passed as an argument or loaded from `),g_e=n(X3,"CODE",{});var hpt=s(g_e);hcr=r(hpt,"pretrained_model_name_or_path"),hpt.forEach(t),pcr=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=n(X3,"CODE",{});var ppt=s(h_e);_cr=r(ppt,"pretrained_model_name_or_path"),ppt.forEach(t),ucr=r(X3,":"),X3.forEach(t),bcr=i(Ta),ue=n(Ta,"UL",{});var ye=s(ue);mC=n(ye,"LI",{});var N8e=s(mC);p_e=n(N8e,"STRONG",{});var _pt=s(p_e);vcr=r(_pt,"bart"),_pt.forEach(t),Tcr=r(N8e," \u2014 "),FO=n(N8e,"A",{href:!0});var upt=s(FO);Fcr=r(upt,"TFBartForConditionalGeneration"),upt.forEach(t),Ccr=r(N8e," (BART model)"),N8e.forEach(t),Mcr=i(ye),gC=n(ye,"LI",{});var D8e=s(gC);__e=n(D8e,"STRONG",{});var bpt=s(__e);Ecr=r(bpt,"blenderbot"),bpt.forEach(t),ycr=r(D8e," \u2014 "),CO=n(D8e,"A",{href:!0});var vpt=s(CO);wcr=r(vpt,"TFBlenderbotForConditionalGeneration"),vpt.forEach(t),Acr=r(D8e," (Blenderbot model)"),D8e.forEach(t),Lcr=i(ye),hC=n(ye,"LI",{});var j8e=s(hC);u_e=n(j8e,"STRONG",{});var Tpt=s(u_e);Bcr=r(Tpt,"blenderbot-small"),Tpt.forEach(t),xcr=r(j8e," \u2014 "),MO=n(j8e,"A",{href:!0});var Fpt=s(MO);kcr=r(Fpt,"TFBlenderbotSmallForConditionalGeneration"),Fpt.forEach(t),Rcr=r(j8e," (BlenderbotSmall model)"),j8e.forEach(t),Scr=i(ye),pC=n(ye,"LI",{});var q8e=s(pC);b_e=n(q8e,"STRONG",{});var Cpt=s(b_e);Pcr=r(Cpt,"encoder-decoder"),Cpt.forEach(t),$cr=r(q8e," \u2014 "),EO=n(q8e,"A",{href:!0});var Mpt=s(EO);Icr=r(Mpt,"TFEncoderDecoderModel"),Mpt.forEach(t),Ncr=r(q8e," (Encoder decoder model)"),q8e.forEach(t),Dcr=i(ye),_C=n(ye,"LI",{});var G8e=s(_C);v_e=n(G8e,"STRONG",{});var Ept=s(v_e);jcr=r(Ept,"led"),Ept.forEach(t),qcr=r(G8e," \u2014 "),yO=n(G8e,"A",{href:!0});var ypt=s(yO);Gcr=r(ypt,"TFLEDForConditionalGeneration"),ypt.forEach(t),Ocr=r(G8e," (LED model)"),G8e.forEach(t),Xcr=i(ye),uC=n(ye,"LI",{});var O8e=s(uC);T_e=n(O8e,"STRONG",{});var wpt=s(T_e);Vcr=r(wpt,"marian"),wpt.forEach(t),zcr=r(O8e," \u2014 "),wO=n(O8e,"A",{href:!0});var Apt=s(wO);Wcr=r(Apt,"TFMarianMTModel"),Apt.forEach(t),Qcr=r(O8e," (Marian model)"),O8e.forEach(t),Hcr=i(ye),bC=n(ye,"LI",{});var X8e=s(bC);F_e=n(X8e,"STRONG",{});var Lpt=s(F_e);Ucr=r(Lpt,"mbart"),Lpt.forEach(t),Jcr=r(X8e," \u2014 "),AO=n(X8e,"A",{href:!0});var Bpt=s(AO);Ycr=r(Bpt,"TFMBartForConditionalGeneration"),Bpt.forEach(t),Kcr=r(X8e," (mBART model)"),X8e.forEach(t),Zcr=i(ye),vC=n(ye,"LI",{});var V8e=s(vC);C_e=n(V8e,"STRONG",{});var xpt=s(C_e);efr=r(xpt,"mt5"),xpt.forEach(t),ofr=r(V8e," \u2014 "),LO=n(V8e,"A",{href:!0});var kpt=s(LO);rfr=r(kpt,"TFMT5ForConditionalGeneration"),kpt.forEach(t),tfr=r(V8e," (mT5 model)"),V8e.forEach(t),afr=i(ye),TC=n(ye,"LI",{});var z8e=s(TC);M_e=n(z8e,"STRONG",{});var Rpt=s(M_e);nfr=r(Rpt,"pegasus"),Rpt.forEach(t),sfr=r(z8e," \u2014 "),BO=n(z8e,"A",{href:!0});var Spt=s(BO);lfr=r(Spt,"TFPegasusForConditionalGeneration"),Spt.forEach(t),ifr=r(z8e," (Pegasus model)"),z8e.forEach(t),dfr=i(ye),FC=n(ye,"LI",{});var W8e=s(FC);E_e=n(W8e,"STRONG",{});var Ppt=s(E_e);cfr=r(Ppt,"t5"),Ppt.forEach(t),ffr=r(W8e," \u2014 "),xO=n(W8e,"A",{href:!0});var $pt=s(xO);mfr=r($pt,"TFT5ForConditionalGeneration"),$pt.forEach(t),gfr=r(W8e," (T5 model)"),W8e.forEach(t),ye.forEach(t),hfr=i(Ta),y_e=n(Ta,"P",{});var Ipt=s(y_e);pfr=r(Ipt,"Examples:"),Ipt.forEach(t),_fr=i(Ta),m(R0.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),SRe=i(c),xc=n(c,"H2",{class:!0});var zPe=s(xc);CC=n(zPe,"A",{id:!0,class:!0,href:!0});var Npt=s(CC);w_e=n(Npt,"SPAN",{});var Dpt=s(w_e);m(S0.$$.fragment,Dpt),Dpt.forEach(t),Npt.forEach(t),ufr=i(zPe),A_e=n(zPe,"SPAN",{});var jpt=s(A_e);bfr=r(jpt,"TFAutoModelForSequenceClassification"),jpt.forEach(t),zPe.forEach(t),PRe=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);m(P0.$$.fragment,Yl),vfr=i(Yl),kc=n(Yl,"P",{});var iQ=s(kc);Tfr=r(iQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),L_e=n(iQ,"CODE",{});var qpt=s(L_e);Ffr=r(qpt,"from_pretrained()"),qpt.forEach(t),Cfr=r(iQ,"class method or the "),B_e=n(iQ,"CODE",{});var Gpt=s(B_e);Mfr=r(Gpt,"from_config()"),Gpt.forEach(t),Efr=r(iQ,`class
method.`),iQ.forEach(t),yfr=i(Yl),$0=n(Yl,"P",{});var WPe=s($0);wfr=r(WPe,"This class cannot be instantiated directly using "),x_e=n(WPe,"CODE",{});var Opt=s(x_e);Afr=r(Opt,"__init__()"),Opt.forEach(t),Lfr=r(WPe," (throws an error)."),WPe.forEach(t),Bfr=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);m(I0.$$.fragment,Kl),xfr=i(Kl),k_e=n(Kl,"P",{});var Xpt=s(k_e);kfr=r(Xpt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Xpt.forEach(t),Rfr=i(Kl),Rc=n(Kl,"P",{});var dQ=s(Rc);Sfr=r(dQ,`Note:
Loading a model from its configuration file does `),R_e=n(dQ,"STRONG",{});var Vpt=s(R_e);Pfr=r(Vpt,"not"),Vpt.forEach(t),$fr=r(dQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),S_e=n(dQ,"CODE",{});var zpt=s(S_e);Ifr=r(zpt,"from_pretrained()"),zpt.forEach(t),Nfr=r(dQ,"to load the model weights."),dQ.forEach(t),Dfr=i(Kl),P_e=n(Kl,"P",{});var Wpt=s(P_e);jfr=r(Wpt,"Examples:"),Wpt.forEach(t),qfr=i(Kl),m(N0.$$.fragment,Kl),Kl.forEach(t),Gfr=i(Yl),To=n(Yl,"DIV",{class:!0});var Fa=s(To);m(D0.$$.fragment,Fa),Ofr=i(Fa),$_e=n(Fa,"P",{});var Qpt=s($_e);Xfr=r(Qpt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Qpt.forEach(t),Vfr=i(Fa),Cn=n(Fa,"P",{});var V3=s(Cn);zfr=r(V3,"The model class to instantiate is selected based on the "),I_e=n(V3,"CODE",{});var Hpt=s(I_e);Wfr=r(Hpt,"model_type"),Hpt.forEach(t),Qfr=r(V3,` property of the config object (either
passed as an argument or loaded from `),N_e=n(V3,"CODE",{});var Upt=s(N_e);Hfr=r(Upt,"pretrained_model_name_or_path"),Upt.forEach(t),Ufr=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=n(V3,"CODE",{});var Jpt=s(D_e);Jfr=r(Jpt,"pretrained_model_name_or_path"),Jpt.forEach(t),Yfr=r(V3,":"),V3.forEach(t),Kfr=i(Fa),V=n(Fa,"UL",{});var W=s(V);MC=n(W,"LI",{});var Q8e=s(MC);j_e=n(Q8e,"STRONG",{});var Ypt=s(j_e);Zfr=r(Ypt,"albert"),Ypt.forEach(t),emr=r(Q8e," \u2014 "),kO=n(Q8e,"A",{href:!0});var Kpt=s(kO);omr=r(Kpt,"TFAlbertForSequenceClassification"),Kpt.forEach(t),rmr=r(Q8e," (ALBERT model)"),Q8e.forEach(t),tmr=i(W),EC=n(W,"LI",{});var H8e=s(EC);q_e=n(H8e,"STRONG",{});var Zpt=s(q_e);amr=r(Zpt,"bert"),Zpt.forEach(t),nmr=r(H8e," \u2014 "),RO=n(H8e,"A",{href:!0});var e_t=s(RO);smr=r(e_t,"TFBertForSequenceClassification"),e_t.forEach(t),lmr=r(H8e," (BERT model)"),H8e.forEach(t),imr=i(W),yC=n(W,"LI",{});var U8e=s(yC);G_e=n(U8e,"STRONG",{});var o_t=s(G_e);dmr=r(o_t,"camembert"),o_t.forEach(t),cmr=r(U8e," \u2014 "),SO=n(U8e,"A",{href:!0});var r_t=s(SO);fmr=r(r_t,"TFCamembertForSequenceClassification"),r_t.forEach(t),mmr=r(U8e," (CamemBERT model)"),U8e.forEach(t),gmr=i(W),wC=n(W,"LI",{});var J8e=s(wC);O_e=n(J8e,"STRONG",{});var t_t=s(O_e);hmr=r(t_t,"convbert"),t_t.forEach(t),pmr=r(J8e," \u2014 "),PO=n(J8e,"A",{href:!0});var a_t=s(PO);_mr=r(a_t,"TFConvBertForSequenceClassification"),a_t.forEach(t),umr=r(J8e," (ConvBERT model)"),J8e.forEach(t),bmr=i(W),AC=n(W,"LI",{});var Y8e=s(AC);X_e=n(Y8e,"STRONG",{});var n_t=s(X_e);vmr=r(n_t,"ctrl"),n_t.forEach(t),Tmr=r(Y8e," \u2014 "),$O=n(Y8e,"A",{href:!0});var s_t=s($O);Fmr=r(s_t,"TFCTRLForSequenceClassification"),s_t.forEach(t),Cmr=r(Y8e," (CTRL model)"),Y8e.forEach(t),Mmr=i(W),LC=n(W,"LI",{});var K8e=s(LC);V_e=n(K8e,"STRONG",{});var l_t=s(V_e);Emr=r(l_t,"deberta"),l_t.forEach(t),ymr=r(K8e," \u2014 "),IO=n(K8e,"A",{href:!0});var i_t=s(IO);wmr=r(i_t,"TFDebertaForSequenceClassification"),i_t.forEach(t),Amr=r(K8e," (DeBERTa model)"),K8e.forEach(t),Lmr=i(W),BC=n(W,"LI",{});var Z8e=s(BC);z_e=n(Z8e,"STRONG",{});var d_t=s(z_e);Bmr=r(d_t,"deberta-v2"),d_t.forEach(t),xmr=r(Z8e," \u2014 "),NO=n(Z8e,"A",{href:!0});var c_t=s(NO);kmr=r(c_t,"TFDebertaV2ForSequenceClassification"),c_t.forEach(t),Rmr=r(Z8e," (DeBERTa-v2 model)"),Z8e.forEach(t),Smr=i(W),xC=n(W,"LI",{});var e9e=s(xC);W_e=n(e9e,"STRONG",{});var f_t=s(W_e);Pmr=r(f_t,"distilbert"),f_t.forEach(t),$mr=r(e9e," \u2014 "),DO=n(e9e,"A",{href:!0});var m_t=s(DO);Imr=r(m_t,"TFDistilBertForSequenceClassification"),m_t.forEach(t),Nmr=r(e9e," (DistilBERT model)"),e9e.forEach(t),Dmr=i(W),kC=n(W,"LI",{});var o9e=s(kC);Q_e=n(o9e,"STRONG",{});var g_t=s(Q_e);jmr=r(g_t,"electra"),g_t.forEach(t),qmr=r(o9e," \u2014 "),jO=n(o9e,"A",{href:!0});var h_t=s(jO);Gmr=r(h_t,"TFElectraForSequenceClassification"),h_t.forEach(t),Omr=r(o9e," (ELECTRA model)"),o9e.forEach(t),Xmr=i(W),RC=n(W,"LI",{});var r9e=s(RC);H_e=n(r9e,"STRONG",{});var p_t=s(H_e);Vmr=r(p_t,"flaubert"),p_t.forEach(t),zmr=r(r9e," \u2014 "),qO=n(r9e,"A",{href:!0});var __t=s(qO);Wmr=r(__t,"TFFlaubertForSequenceClassification"),__t.forEach(t),Qmr=r(r9e," (FlauBERT model)"),r9e.forEach(t),Hmr=i(W),SC=n(W,"LI",{});var t9e=s(SC);U_e=n(t9e,"STRONG",{});var u_t=s(U_e);Umr=r(u_t,"funnel"),u_t.forEach(t),Jmr=r(t9e," \u2014 "),GO=n(t9e,"A",{href:!0});var b_t=s(GO);Ymr=r(b_t,"TFFunnelForSequenceClassification"),b_t.forEach(t),Kmr=r(t9e," (Funnel Transformer model)"),t9e.forEach(t),Zmr=i(W),PC=n(W,"LI",{});var a9e=s(PC);J_e=n(a9e,"STRONG",{});var v_t=s(J_e);egr=r(v_t,"gpt2"),v_t.forEach(t),ogr=r(a9e," \u2014 "),OO=n(a9e,"A",{href:!0});var T_t=s(OO);rgr=r(T_t,"TFGPT2ForSequenceClassification"),T_t.forEach(t),tgr=r(a9e," (OpenAI GPT-2 model)"),a9e.forEach(t),agr=i(W),$C=n(W,"LI",{});var n9e=s($C);Y_e=n(n9e,"STRONG",{});var F_t=s(Y_e);ngr=r(F_t,"layoutlm"),F_t.forEach(t),sgr=r(n9e," \u2014 "),XO=n(n9e,"A",{href:!0});var C_t=s(XO);lgr=r(C_t,"TFLayoutLMForSequenceClassification"),C_t.forEach(t),igr=r(n9e," (LayoutLM model)"),n9e.forEach(t),dgr=i(W),IC=n(W,"LI",{});var s9e=s(IC);K_e=n(s9e,"STRONG",{});var M_t=s(K_e);cgr=r(M_t,"longformer"),M_t.forEach(t),fgr=r(s9e," \u2014 "),VO=n(s9e,"A",{href:!0});var E_t=s(VO);mgr=r(E_t,"TFLongformerForSequenceClassification"),E_t.forEach(t),ggr=r(s9e," (Longformer model)"),s9e.forEach(t),hgr=i(W),NC=n(W,"LI",{});var l9e=s(NC);Z_e=n(l9e,"STRONG",{});var y_t=s(Z_e);pgr=r(y_t,"mobilebert"),y_t.forEach(t),_gr=r(l9e," \u2014 "),zO=n(l9e,"A",{href:!0});var w_t=s(zO);ugr=r(w_t,"TFMobileBertForSequenceClassification"),w_t.forEach(t),bgr=r(l9e," (MobileBERT model)"),l9e.forEach(t),vgr=i(W),DC=n(W,"LI",{});var i9e=s(DC);eue=n(i9e,"STRONG",{});var A_t=s(eue);Tgr=r(A_t,"mpnet"),A_t.forEach(t),Fgr=r(i9e," \u2014 "),WO=n(i9e,"A",{href:!0});var L_t=s(WO);Cgr=r(L_t,"TFMPNetForSequenceClassification"),L_t.forEach(t),Mgr=r(i9e," (MPNet model)"),i9e.forEach(t),Egr=i(W),jC=n(W,"LI",{});var d9e=s(jC);oue=n(d9e,"STRONG",{});var B_t=s(oue);ygr=r(B_t,"openai-gpt"),B_t.forEach(t),wgr=r(d9e," \u2014 "),QO=n(d9e,"A",{href:!0});var x_t=s(QO);Agr=r(x_t,"TFOpenAIGPTForSequenceClassification"),x_t.forEach(t),Lgr=r(d9e," (OpenAI GPT model)"),d9e.forEach(t),Bgr=i(W),qC=n(W,"LI",{});var c9e=s(qC);rue=n(c9e,"STRONG",{});var k_t=s(rue);xgr=r(k_t,"rembert"),k_t.forEach(t),kgr=r(c9e," \u2014 "),HO=n(c9e,"A",{href:!0});var R_t=s(HO);Rgr=r(R_t,"TFRemBertForSequenceClassification"),R_t.forEach(t),Sgr=r(c9e," (RemBERT model)"),c9e.forEach(t),Pgr=i(W),GC=n(W,"LI",{});var f9e=s(GC);tue=n(f9e,"STRONG",{});var S_t=s(tue);$gr=r(S_t,"roberta"),S_t.forEach(t),Igr=r(f9e," \u2014 "),UO=n(f9e,"A",{href:!0});var P_t=s(UO);Ngr=r(P_t,"TFRobertaForSequenceClassification"),P_t.forEach(t),Dgr=r(f9e," (RoBERTa model)"),f9e.forEach(t),jgr=i(W),OC=n(W,"LI",{});var m9e=s(OC);aue=n(m9e,"STRONG",{});var $_t=s(aue);qgr=r($_t,"roformer"),$_t.forEach(t),Ggr=r(m9e," \u2014 "),JO=n(m9e,"A",{href:!0});var I_t=s(JO);Ogr=r(I_t,"TFRoFormerForSequenceClassification"),I_t.forEach(t),Xgr=r(m9e," (RoFormer model)"),m9e.forEach(t),Vgr=i(W),XC=n(W,"LI",{});var g9e=s(XC);nue=n(g9e,"STRONG",{});var N_t=s(nue);zgr=r(N_t,"tapas"),N_t.forEach(t),Wgr=r(g9e," \u2014 "),YO=n(g9e,"A",{href:!0});var D_t=s(YO);Qgr=r(D_t,"TFTapasForSequenceClassification"),D_t.forEach(t),Hgr=r(g9e," (TAPAS model)"),g9e.forEach(t),Ugr=i(W),VC=n(W,"LI",{});var h9e=s(VC);sue=n(h9e,"STRONG",{});var j_t=s(sue);Jgr=r(j_t,"transfo-xl"),j_t.forEach(t),Ygr=r(h9e," \u2014 "),KO=n(h9e,"A",{href:!0});var q_t=s(KO);Kgr=r(q_t,"TFTransfoXLForSequenceClassification"),q_t.forEach(t),Zgr=r(h9e," (Transformer-XL model)"),h9e.forEach(t),ehr=i(W),zC=n(W,"LI",{});var p9e=s(zC);lue=n(p9e,"STRONG",{});var G_t=s(lue);ohr=r(G_t,"xlm"),G_t.forEach(t),rhr=r(p9e," \u2014 "),ZO=n(p9e,"A",{href:!0});var O_t=s(ZO);thr=r(O_t,"TFXLMForSequenceClassification"),O_t.forEach(t),ahr=r(p9e," (XLM model)"),p9e.forEach(t),nhr=i(W),WC=n(W,"LI",{});var _9e=s(WC);iue=n(_9e,"STRONG",{});var X_t=s(iue);shr=r(X_t,"xlm-roberta"),X_t.forEach(t),lhr=r(_9e," \u2014 "),eX=n(_9e,"A",{href:!0});var V_t=s(eX);ihr=r(V_t,"TFXLMRobertaForSequenceClassification"),V_t.forEach(t),dhr=r(_9e," (XLM-RoBERTa model)"),_9e.forEach(t),chr=i(W),QC=n(W,"LI",{});var u9e=s(QC);due=n(u9e,"STRONG",{});var z_t=s(due);fhr=r(z_t,"xlnet"),z_t.forEach(t),mhr=r(u9e," \u2014 "),oX=n(u9e,"A",{href:!0});var W_t=s(oX);ghr=r(W_t,"TFXLNetForSequenceClassification"),W_t.forEach(t),hhr=r(u9e," (XLNet model)"),u9e.forEach(t),W.forEach(t),phr=i(Fa),cue=n(Fa,"P",{});var Q_t=s(cue);_hr=r(Q_t,"Examples:"),Q_t.forEach(t),uhr=i(Fa),m(j0.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),$Re=i(c),Sc=n(c,"H2",{class:!0});var QPe=s(Sc);HC=n(QPe,"A",{id:!0,class:!0,href:!0});var H_t=s(HC);fue=n(H_t,"SPAN",{});var U_t=s(fue);m(q0.$$.fragment,U_t),U_t.forEach(t),H_t.forEach(t),bhr=i(QPe),mue=n(QPe,"SPAN",{});var J_t=s(mue);vhr=r(J_t,"TFAutoModelForMultipleChoice"),J_t.forEach(t),QPe.forEach(t),IRe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(G0.$$.fragment,Zl),Thr=i(Zl),Pc=n(Zl,"P",{});var cQ=s(Pc);Fhr=r(cQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gue=n(cQ,"CODE",{});var Y_t=s(gue);Chr=r(Y_t,"from_pretrained()"),Y_t.forEach(t),Mhr=r(cQ,"class method or the "),hue=n(cQ,"CODE",{});var K_t=s(hue);Ehr=r(K_t,"from_config()"),K_t.forEach(t),yhr=r(cQ,`class
method.`),cQ.forEach(t),whr=i(Zl),O0=n(Zl,"P",{});var HPe=s(O0);Ahr=r(HPe,"This class cannot be instantiated directly using "),pue=n(HPe,"CODE",{});var Z_t=s(pue);Lhr=r(Z_t,"__init__()"),Z_t.forEach(t),Bhr=r(HPe," (throws an error)."),HPe.forEach(t),xhr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);m(X0.$$.fragment,ei),khr=i(ei),_ue=n(ei,"P",{});var eut=s(_ue);Rhr=r(eut,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eut.forEach(t),Shr=i(ei),$c=n(ei,"P",{});var fQ=s($c);Phr=r(fQ,`Note:
Loading a model from its configuration file does `),uue=n(fQ,"STRONG",{});var out=s(uue);$hr=r(out,"not"),out.forEach(t),Ihr=r(fQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bue=n(fQ,"CODE",{});var rut=s(bue);Nhr=r(rut,"from_pretrained()"),rut.forEach(t),Dhr=r(fQ,"to load the model weights."),fQ.forEach(t),jhr=i(ei),vue=n(ei,"P",{});var tut=s(vue);qhr=r(tut,"Examples:"),tut.forEach(t),Ghr=i(ei),m(V0.$$.fragment,ei),ei.forEach(t),Ohr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ca=s(Fo);m(z0.$$.fragment,Ca),Xhr=i(Ca),Tue=n(Ca,"P",{});var aut=s(Tue);Vhr=r(aut,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),aut.forEach(t),zhr=i(Ca),Mn=n(Ca,"P",{});var z3=s(Mn);Whr=r(z3,"The model class to instantiate is selected based on the "),Fue=n(z3,"CODE",{});var nut=s(Fue);Qhr=r(nut,"model_type"),nut.forEach(t),Hhr=r(z3,` property of the config object (either
passed as an argument or loaded from `),Cue=n(z3,"CODE",{});var sut=s(Cue);Uhr=r(sut,"pretrained_model_name_or_path"),sut.forEach(t),Jhr=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mue=n(z3,"CODE",{});var lut=s(Mue);Yhr=r(lut,"pretrained_model_name_or_path"),lut.forEach(t),Khr=r(z3,":"),z3.forEach(t),Zhr=i(Ca),ne=n(Ca,"UL",{});var le=s(ne);UC=n(le,"LI",{});var b9e=s(UC);Eue=n(b9e,"STRONG",{});var iut=s(Eue);epr=r(iut,"albert"),iut.forEach(t),opr=r(b9e," \u2014 "),rX=n(b9e,"A",{href:!0});var dut=s(rX);rpr=r(dut,"TFAlbertForMultipleChoice"),dut.forEach(t),tpr=r(b9e," (ALBERT model)"),b9e.forEach(t),apr=i(le),JC=n(le,"LI",{});var v9e=s(JC);yue=n(v9e,"STRONG",{});var cut=s(yue);npr=r(cut,"bert"),cut.forEach(t),spr=r(v9e," \u2014 "),tX=n(v9e,"A",{href:!0});var fut=s(tX);lpr=r(fut,"TFBertForMultipleChoice"),fut.forEach(t),ipr=r(v9e," (BERT model)"),v9e.forEach(t),dpr=i(le),YC=n(le,"LI",{});var T9e=s(YC);wue=n(T9e,"STRONG",{});var mut=s(wue);cpr=r(mut,"camembert"),mut.forEach(t),fpr=r(T9e," \u2014 "),aX=n(T9e,"A",{href:!0});var gut=s(aX);mpr=r(gut,"TFCamembertForMultipleChoice"),gut.forEach(t),gpr=r(T9e," (CamemBERT model)"),T9e.forEach(t),hpr=i(le),KC=n(le,"LI",{});var F9e=s(KC);Aue=n(F9e,"STRONG",{});var hut=s(Aue);ppr=r(hut,"convbert"),hut.forEach(t),_pr=r(F9e," \u2014 "),nX=n(F9e,"A",{href:!0});var put=s(nX);upr=r(put,"TFConvBertForMultipleChoice"),put.forEach(t),bpr=r(F9e," (ConvBERT model)"),F9e.forEach(t),vpr=i(le),ZC=n(le,"LI",{});var C9e=s(ZC);Lue=n(C9e,"STRONG",{});var _ut=s(Lue);Tpr=r(_ut,"distilbert"),_ut.forEach(t),Fpr=r(C9e," \u2014 "),sX=n(C9e,"A",{href:!0});var uut=s(sX);Cpr=r(uut,"TFDistilBertForMultipleChoice"),uut.forEach(t),Mpr=r(C9e," (DistilBERT model)"),C9e.forEach(t),Epr=i(le),eM=n(le,"LI",{});var M9e=s(eM);Bue=n(M9e,"STRONG",{});var but=s(Bue);ypr=r(but,"electra"),but.forEach(t),wpr=r(M9e," \u2014 "),lX=n(M9e,"A",{href:!0});var vut=s(lX);Apr=r(vut,"TFElectraForMultipleChoice"),vut.forEach(t),Lpr=r(M9e," (ELECTRA model)"),M9e.forEach(t),Bpr=i(le),oM=n(le,"LI",{});var E9e=s(oM);xue=n(E9e,"STRONG",{});var Tut=s(xue);xpr=r(Tut,"flaubert"),Tut.forEach(t),kpr=r(E9e," \u2014 "),iX=n(E9e,"A",{href:!0});var Fut=s(iX);Rpr=r(Fut,"TFFlaubertForMultipleChoice"),Fut.forEach(t),Spr=r(E9e," (FlauBERT model)"),E9e.forEach(t),Ppr=i(le),rM=n(le,"LI",{});var y9e=s(rM);kue=n(y9e,"STRONG",{});var Cut=s(kue);$pr=r(Cut,"funnel"),Cut.forEach(t),Ipr=r(y9e," \u2014 "),dX=n(y9e,"A",{href:!0});var Mut=s(dX);Npr=r(Mut,"TFFunnelForMultipleChoice"),Mut.forEach(t),Dpr=r(y9e," (Funnel Transformer model)"),y9e.forEach(t),jpr=i(le),tM=n(le,"LI",{});var w9e=s(tM);Rue=n(w9e,"STRONG",{});var Eut=s(Rue);qpr=r(Eut,"longformer"),Eut.forEach(t),Gpr=r(w9e," \u2014 "),cX=n(w9e,"A",{href:!0});var yut=s(cX);Opr=r(yut,"TFLongformerForMultipleChoice"),yut.forEach(t),Xpr=r(w9e," (Longformer model)"),w9e.forEach(t),Vpr=i(le),aM=n(le,"LI",{});var A9e=s(aM);Sue=n(A9e,"STRONG",{});var wut=s(Sue);zpr=r(wut,"mobilebert"),wut.forEach(t),Wpr=r(A9e," \u2014 "),fX=n(A9e,"A",{href:!0});var Aut=s(fX);Qpr=r(Aut,"TFMobileBertForMultipleChoice"),Aut.forEach(t),Hpr=r(A9e," (MobileBERT model)"),A9e.forEach(t),Upr=i(le),nM=n(le,"LI",{});var L9e=s(nM);Pue=n(L9e,"STRONG",{});var Lut=s(Pue);Jpr=r(Lut,"mpnet"),Lut.forEach(t),Ypr=r(L9e," \u2014 "),mX=n(L9e,"A",{href:!0});var But=s(mX);Kpr=r(But,"TFMPNetForMultipleChoice"),But.forEach(t),Zpr=r(L9e," (MPNet model)"),L9e.forEach(t),e_r=i(le),sM=n(le,"LI",{});var B9e=s(sM);$ue=n(B9e,"STRONG",{});var xut=s($ue);o_r=r(xut,"rembert"),xut.forEach(t),r_r=r(B9e," \u2014 "),gX=n(B9e,"A",{href:!0});var kut=s(gX);t_r=r(kut,"TFRemBertForMultipleChoice"),kut.forEach(t),a_r=r(B9e," (RemBERT model)"),B9e.forEach(t),n_r=i(le),lM=n(le,"LI",{});var x9e=s(lM);Iue=n(x9e,"STRONG",{});var Rut=s(Iue);s_r=r(Rut,"roberta"),Rut.forEach(t),l_r=r(x9e," \u2014 "),hX=n(x9e,"A",{href:!0});var Sut=s(hX);i_r=r(Sut,"TFRobertaForMultipleChoice"),Sut.forEach(t),d_r=r(x9e," (RoBERTa model)"),x9e.forEach(t),c_r=i(le),iM=n(le,"LI",{});var k9e=s(iM);Nue=n(k9e,"STRONG",{});var Put=s(Nue);f_r=r(Put,"roformer"),Put.forEach(t),m_r=r(k9e," \u2014 "),pX=n(k9e,"A",{href:!0});var $ut=s(pX);g_r=r($ut,"TFRoFormerForMultipleChoice"),$ut.forEach(t),h_r=r(k9e," (RoFormer model)"),k9e.forEach(t),p_r=i(le),dM=n(le,"LI",{});var R9e=s(dM);Due=n(R9e,"STRONG",{});var Iut=s(Due);__r=r(Iut,"xlm"),Iut.forEach(t),u_r=r(R9e," \u2014 "),_X=n(R9e,"A",{href:!0});var Nut=s(_X);b_r=r(Nut,"TFXLMForMultipleChoice"),Nut.forEach(t),v_r=r(R9e," (XLM model)"),R9e.forEach(t),T_r=i(le),cM=n(le,"LI",{});var S9e=s(cM);jue=n(S9e,"STRONG",{});var Dut=s(jue);F_r=r(Dut,"xlm-roberta"),Dut.forEach(t),C_r=r(S9e," \u2014 "),uX=n(S9e,"A",{href:!0});var jut=s(uX);M_r=r(jut,"TFXLMRobertaForMultipleChoice"),jut.forEach(t),E_r=r(S9e," (XLM-RoBERTa model)"),S9e.forEach(t),y_r=i(le),fM=n(le,"LI",{});var P9e=s(fM);que=n(P9e,"STRONG",{});var qut=s(que);w_r=r(qut,"xlnet"),qut.forEach(t),A_r=r(P9e," \u2014 "),bX=n(P9e,"A",{href:!0});var Gut=s(bX);L_r=r(Gut,"TFXLNetForMultipleChoice"),Gut.forEach(t),B_r=r(P9e," (XLNet model)"),P9e.forEach(t),le.forEach(t),x_r=i(Ca),Gue=n(Ca,"P",{});var Out=s(Gue);k_r=r(Out,"Examples:"),Out.forEach(t),R_r=i(Ca),m(W0.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),NRe=i(c),Ic=n(c,"H2",{class:!0});var UPe=s(Ic);mM=n(UPe,"A",{id:!0,class:!0,href:!0});var Xut=s(mM);Oue=n(Xut,"SPAN",{});var Vut=s(Oue);m(Q0.$$.fragment,Vut),Vut.forEach(t),Xut.forEach(t),S_r=i(UPe),Xue=n(UPe,"SPAN",{});var zut=s(Xue);P_r=r(zut,"TFAutoModelForTableQuestionAnswering"),zut.forEach(t),UPe.forEach(t),DRe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(H0.$$.fragment,oi),$_r=i(oi),Nc=n(oi,"P",{});var mQ=s(Nc);I_r=r(mQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Vue=n(mQ,"CODE",{});var Wut=s(Vue);N_r=r(Wut,"from_pretrained()"),Wut.forEach(t),D_r=r(mQ,"class method or the "),zue=n(mQ,"CODE",{});var Qut=s(zue);j_r=r(Qut,"from_config()"),Qut.forEach(t),q_r=r(mQ,`class
method.`),mQ.forEach(t),G_r=i(oi),U0=n(oi,"P",{});var JPe=s(U0);O_r=r(JPe,"This class cannot be instantiated directly using "),Wue=n(JPe,"CODE",{});var Hut=s(Wue);X_r=r(Hut,"__init__()"),Hut.forEach(t),V_r=r(JPe," (throws an error)."),JPe.forEach(t),z_r=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);m(J0.$$.fragment,ri),W_r=i(ri),Que=n(ri,"P",{});var Uut=s(Que);Q_r=r(Uut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Uut.forEach(t),H_r=i(ri),Dc=n(ri,"P",{});var gQ=s(Dc);U_r=r(gQ,`Note:
Loading a model from its configuration file does `),Hue=n(gQ,"STRONG",{});var Jut=s(Hue);J_r=r(Jut,"not"),Jut.forEach(t),Y_r=r(gQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uue=n(gQ,"CODE",{});var Yut=s(Uue);K_r=r(Yut,"from_pretrained()"),Yut.forEach(t),Z_r=r(gQ,"to load the model weights."),gQ.forEach(t),eur=i(ri),Jue=n(ri,"P",{});var Kut=s(Jue);our=r(Kut,"Examples:"),Kut.forEach(t),rur=i(ri),m(Y0.$$.fragment,ri),ri.forEach(t),tur=i(oi),Co=n(oi,"DIV",{class:!0});var Ma=s(Co);m(K0.$$.fragment,Ma),aur=i(Ma),Yue=n(Ma,"P",{});var Zut=s(Yue);nur=r(Zut,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Zut.forEach(t),sur=i(Ma),En=n(Ma,"P",{});var W3=s(En);lur=r(W3,"The model class to instantiate is selected based on the "),Kue=n(W3,"CODE",{});var e1t=s(Kue);iur=r(e1t,"model_type"),e1t.forEach(t),dur=r(W3,` property of the config object (either
passed as an argument or loaded from `),Zue=n(W3,"CODE",{});var o1t=s(Zue);cur=r(o1t,"pretrained_model_name_or_path"),o1t.forEach(t),fur=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=n(W3,"CODE",{});var r1t=s(e1e);mur=r(r1t,"pretrained_model_name_or_path"),r1t.forEach(t),gur=r(W3,":"),W3.forEach(t),hur=i(Ma),o1e=n(Ma,"UL",{});var t1t=s(o1e);gM=n(t1t,"LI",{});var $9e=s(gM);r1e=n($9e,"STRONG",{});var a1t=s(r1e);pur=r(a1t,"tapas"),a1t.forEach(t),_ur=r($9e," \u2014 "),vX=n($9e,"A",{href:!0});var n1t=s(vX);uur=r(n1t,"TFTapasForQuestionAnswering"),n1t.forEach(t),bur=r($9e," (TAPAS model)"),$9e.forEach(t),t1t.forEach(t),vur=i(Ma),t1e=n(Ma,"P",{});var s1t=s(t1e);Tur=r(s1t,"Examples:"),s1t.forEach(t),Fur=i(Ma),m(Z0.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),jRe=i(c),jc=n(c,"H2",{class:!0});var YPe=s(jc);hM=n(YPe,"A",{id:!0,class:!0,href:!0});var l1t=s(hM);a1e=n(l1t,"SPAN",{});var i1t=s(a1e);m(eL.$$.fragment,i1t),i1t.forEach(t),l1t.forEach(t),Cur=i(YPe),n1e=n(YPe,"SPAN",{});var d1t=s(n1e);Mur=r(d1t,"TFAutoModelForTokenClassification"),d1t.forEach(t),YPe.forEach(t),qRe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(oL.$$.fragment,ti),Eur=i(ti),qc=n(ti,"P",{});var hQ=s(qc);yur=r(hQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),s1e=n(hQ,"CODE",{});var c1t=s(s1e);wur=r(c1t,"from_pretrained()"),c1t.forEach(t),Aur=r(hQ,"class method or the "),l1e=n(hQ,"CODE",{});var f1t=s(l1e);Lur=r(f1t,"from_config()"),f1t.forEach(t),Bur=r(hQ,`class
method.`),hQ.forEach(t),xur=i(ti),rL=n(ti,"P",{});var KPe=s(rL);kur=r(KPe,"This class cannot be instantiated directly using "),i1e=n(KPe,"CODE",{});var m1t=s(i1e);Rur=r(m1t,"__init__()"),m1t.forEach(t),Sur=r(KPe," (throws an error)."),KPe.forEach(t),Pur=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);m(tL.$$.fragment,ai),$ur=i(ai),d1e=n(ai,"P",{});var g1t=s(d1e);Iur=r(g1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),g1t.forEach(t),Nur=i(ai),Gc=n(ai,"P",{});var pQ=s(Gc);Dur=r(pQ,`Note:
Loading a model from its configuration file does `),c1e=n(pQ,"STRONG",{});var h1t=s(c1e);jur=r(h1t,"not"),h1t.forEach(t),qur=r(pQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),f1e=n(pQ,"CODE",{});var p1t=s(f1e);Gur=r(p1t,"from_pretrained()"),p1t.forEach(t),Our=r(pQ,"to load the model weights."),pQ.forEach(t),Xur=i(ai),m1e=n(ai,"P",{});var _1t=s(m1e);Vur=r(_1t,"Examples:"),_1t.forEach(t),zur=i(ai),m(aL.$$.fragment,ai),ai.forEach(t),Wur=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);m(nL.$$.fragment,Ea),Qur=i(Ea),g1e=n(Ea,"P",{});var u1t=s(g1e);Hur=r(u1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),u1t.forEach(t),Uur=i(Ea),yn=n(Ea,"P",{});var Q3=s(yn);Jur=r(Q3,"The model class to instantiate is selected based on the "),h1e=n(Q3,"CODE",{});var b1t=s(h1e);Yur=r(b1t,"model_type"),b1t.forEach(t),Kur=r(Q3,` property of the config object (either
passed as an argument or loaded from `),p1e=n(Q3,"CODE",{});var v1t=s(p1e);Zur=r(v1t,"pretrained_model_name_or_path"),v1t.forEach(t),e1r=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=n(Q3,"CODE",{});var T1t=s(_1e);o1r=r(T1t,"pretrained_model_name_or_path"),T1t.forEach(t),r1r=r(Q3,":"),Q3.forEach(t),t1r=i(Ea),Y=n(Ea,"UL",{});var re=s(Y);pM=n(re,"LI",{});var I9e=s(pM);u1e=n(I9e,"STRONG",{});var F1t=s(u1e);a1r=r(F1t,"albert"),F1t.forEach(t),n1r=r(I9e," \u2014 "),TX=n(I9e,"A",{href:!0});var C1t=s(TX);s1r=r(C1t,"TFAlbertForTokenClassification"),C1t.forEach(t),l1r=r(I9e," (ALBERT model)"),I9e.forEach(t),i1r=i(re),_M=n(re,"LI",{});var N9e=s(_M);b1e=n(N9e,"STRONG",{});var M1t=s(b1e);d1r=r(M1t,"bert"),M1t.forEach(t),c1r=r(N9e," \u2014 "),FX=n(N9e,"A",{href:!0});var E1t=s(FX);f1r=r(E1t,"TFBertForTokenClassification"),E1t.forEach(t),m1r=r(N9e," (BERT model)"),N9e.forEach(t),g1r=i(re),uM=n(re,"LI",{});var D9e=s(uM);v1e=n(D9e,"STRONG",{});var y1t=s(v1e);h1r=r(y1t,"camembert"),y1t.forEach(t),p1r=r(D9e," \u2014 "),CX=n(D9e,"A",{href:!0});var w1t=s(CX);_1r=r(w1t,"TFCamembertForTokenClassification"),w1t.forEach(t),u1r=r(D9e," (CamemBERT model)"),D9e.forEach(t),b1r=i(re),bM=n(re,"LI",{});var j9e=s(bM);T1e=n(j9e,"STRONG",{});var A1t=s(T1e);v1r=r(A1t,"convbert"),A1t.forEach(t),T1r=r(j9e," \u2014 "),MX=n(j9e,"A",{href:!0});var L1t=s(MX);F1r=r(L1t,"TFConvBertForTokenClassification"),L1t.forEach(t),C1r=r(j9e," (ConvBERT model)"),j9e.forEach(t),M1r=i(re),vM=n(re,"LI",{});var q9e=s(vM);F1e=n(q9e,"STRONG",{});var B1t=s(F1e);E1r=r(B1t,"deberta"),B1t.forEach(t),y1r=r(q9e," \u2014 "),EX=n(q9e,"A",{href:!0});var x1t=s(EX);w1r=r(x1t,"TFDebertaForTokenClassification"),x1t.forEach(t),A1r=r(q9e," (DeBERTa model)"),q9e.forEach(t),L1r=i(re),TM=n(re,"LI",{});var G9e=s(TM);C1e=n(G9e,"STRONG",{});var k1t=s(C1e);B1r=r(k1t,"deberta-v2"),k1t.forEach(t),x1r=r(G9e," \u2014 "),yX=n(G9e,"A",{href:!0});var R1t=s(yX);k1r=r(R1t,"TFDebertaV2ForTokenClassification"),R1t.forEach(t),R1r=r(G9e," (DeBERTa-v2 model)"),G9e.forEach(t),S1r=i(re),FM=n(re,"LI",{});var O9e=s(FM);M1e=n(O9e,"STRONG",{});var S1t=s(M1e);P1r=r(S1t,"distilbert"),S1t.forEach(t),$1r=r(O9e," \u2014 "),wX=n(O9e,"A",{href:!0});var P1t=s(wX);I1r=r(P1t,"TFDistilBertForTokenClassification"),P1t.forEach(t),N1r=r(O9e," (DistilBERT model)"),O9e.forEach(t),D1r=i(re),CM=n(re,"LI",{});var X9e=s(CM);E1e=n(X9e,"STRONG",{});var $1t=s(E1e);j1r=r($1t,"electra"),$1t.forEach(t),q1r=r(X9e," \u2014 "),AX=n(X9e,"A",{href:!0});var I1t=s(AX);G1r=r(I1t,"TFElectraForTokenClassification"),I1t.forEach(t),O1r=r(X9e," (ELECTRA model)"),X9e.forEach(t),X1r=i(re),MM=n(re,"LI",{});var V9e=s(MM);y1e=n(V9e,"STRONG",{});var N1t=s(y1e);V1r=r(N1t,"flaubert"),N1t.forEach(t),z1r=r(V9e," \u2014 "),LX=n(V9e,"A",{href:!0});var D1t=s(LX);W1r=r(D1t,"TFFlaubertForTokenClassification"),D1t.forEach(t),Q1r=r(V9e," (FlauBERT model)"),V9e.forEach(t),H1r=i(re),EM=n(re,"LI",{});var z9e=s(EM);w1e=n(z9e,"STRONG",{});var j1t=s(w1e);U1r=r(j1t,"funnel"),j1t.forEach(t),J1r=r(z9e," \u2014 "),BX=n(z9e,"A",{href:!0});var q1t=s(BX);Y1r=r(q1t,"TFFunnelForTokenClassification"),q1t.forEach(t),K1r=r(z9e," (Funnel Transformer model)"),z9e.forEach(t),Z1r=i(re),yM=n(re,"LI",{});var W9e=s(yM);A1e=n(W9e,"STRONG",{});var G1t=s(A1e);e2r=r(G1t,"layoutlm"),G1t.forEach(t),o2r=r(W9e," \u2014 "),xX=n(W9e,"A",{href:!0});var O1t=s(xX);r2r=r(O1t,"TFLayoutLMForTokenClassification"),O1t.forEach(t),t2r=r(W9e," (LayoutLM model)"),W9e.forEach(t),a2r=i(re),wM=n(re,"LI",{});var Q9e=s(wM);L1e=n(Q9e,"STRONG",{});var X1t=s(L1e);n2r=r(X1t,"longformer"),X1t.forEach(t),s2r=r(Q9e," \u2014 "),kX=n(Q9e,"A",{href:!0});var V1t=s(kX);l2r=r(V1t,"TFLongformerForTokenClassification"),V1t.forEach(t),i2r=r(Q9e," (Longformer model)"),Q9e.forEach(t),d2r=i(re),AM=n(re,"LI",{});var H9e=s(AM);B1e=n(H9e,"STRONG",{});var z1t=s(B1e);c2r=r(z1t,"mobilebert"),z1t.forEach(t),f2r=r(H9e," \u2014 "),RX=n(H9e,"A",{href:!0});var W1t=s(RX);m2r=r(W1t,"TFMobileBertForTokenClassification"),W1t.forEach(t),g2r=r(H9e," (MobileBERT model)"),H9e.forEach(t),h2r=i(re),LM=n(re,"LI",{});var U9e=s(LM);x1e=n(U9e,"STRONG",{});var Q1t=s(x1e);p2r=r(Q1t,"mpnet"),Q1t.forEach(t),_2r=r(U9e," \u2014 "),SX=n(U9e,"A",{href:!0});var H1t=s(SX);u2r=r(H1t,"TFMPNetForTokenClassification"),H1t.forEach(t),b2r=r(U9e," (MPNet model)"),U9e.forEach(t),v2r=i(re),BM=n(re,"LI",{});var J9e=s(BM);k1e=n(J9e,"STRONG",{});var U1t=s(k1e);T2r=r(U1t,"rembert"),U1t.forEach(t),F2r=r(J9e," \u2014 "),PX=n(J9e,"A",{href:!0});var J1t=s(PX);C2r=r(J1t,"TFRemBertForTokenClassification"),J1t.forEach(t),M2r=r(J9e," (RemBERT model)"),J9e.forEach(t),E2r=i(re),xM=n(re,"LI",{});var Y9e=s(xM);R1e=n(Y9e,"STRONG",{});var Y1t=s(R1e);y2r=r(Y1t,"roberta"),Y1t.forEach(t),w2r=r(Y9e," \u2014 "),$X=n(Y9e,"A",{href:!0});var K1t=s($X);A2r=r(K1t,"TFRobertaForTokenClassification"),K1t.forEach(t),L2r=r(Y9e," (RoBERTa model)"),Y9e.forEach(t),B2r=i(re),kM=n(re,"LI",{});var K9e=s(kM);S1e=n(K9e,"STRONG",{});var Z1t=s(S1e);x2r=r(Z1t,"roformer"),Z1t.forEach(t),k2r=r(K9e," \u2014 "),IX=n(K9e,"A",{href:!0});var e2t=s(IX);R2r=r(e2t,"TFRoFormerForTokenClassification"),e2t.forEach(t),S2r=r(K9e," (RoFormer model)"),K9e.forEach(t),P2r=i(re),RM=n(re,"LI",{});var Z9e=s(RM);P1e=n(Z9e,"STRONG",{});var o2t=s(P1e);$2r=r(o2t,"xlm"),o2t.forEach(t),I2r=r(Z9e," \u2014 "),NX=n(Z9e,"A",{href:!0});var r2t=s(NX);N2r=r(r2t,"TFXLMForTokenClassification"),r2t.forEach(t),D2r=r(Z9e," (XLM model)"),Z9e.forEach(t),j2r=i(re),SM=n(re,"LI",{});var eBe=s(SM);$1e=n(eBe,"STRONG",{});var t2t=s($1e);q2r=r(t2t,"xlm-roberta"),t2t.forEach(t),G2r=r(eBe," \u2014 "),DX=n(eBe,"A",{href:!0});var a2t=s(DX);O2r=r(a2t,"TFXLMRobertaForTokenClassification"),a2t.forEach(t),X2r=r(eBe," (XLM-RoBERTa model)"),eBe.forEach(t),V2r=i(re),PM=n(re,"LI",{});var oBe=s(PM);I1e=n(oBe,"STRONG",{});var n2t=s(I1e);z2r=r(n2t,"xlnet"),n2t.forEach(t),W2r=r(oBe," \u2014 "),jX=n(oBe,"A",{href:!0});var s2t=s(jX);Q2r=r(s2t,"TFXLNetForTokenClassification"),s2t.forEach(t),H2r=r(oBe," (XLNet model)"),oBe.forEach(t),re.forEach(t),U2r=i(Ea),N1e=n(Ea,"P",{});var l2t=s(N1e);J2r=r(l2t,"Examples:"),l2t.forEach(t),Y2r=i(Ea),m(sL.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),GRe=i(c),Oc=n(c,"H2",{class:!0});var ZPe=s(Oc);$M=n(ZPe,"A",{id:!0,class:!0,href:!0});var i2t=s($M);D1e=n(i2t,"SPAN",{});var d2t=s(D1e);m(lL.$$.fragment,d2t),d2t.forEach(t),i2t.forEach(t),K2r=i(ZPe),j1e=n(ZPe,"SPAN",{});var c2t=s(j1e);Z2r=r(c2t,"TFAutoModelForQuestionAnswering"),c2t.forEach(t),ZPe.forEach(t),ORe=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);m(iL.$$.fragment,ni),e6r=i(ni),Xc=n(ni,"P",{});var _Q=s(Xc);o6r=r(_Q,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),q1e=n(_Q,"CODE",{});var f2t=s(q1e);r6r=r(f2t,"from_pretrained()"),f2t.forEach(t),t6r=r(_Q,"class method or the "),G1e=n(_Q,"CODE",{});var m2t=s(G1e);a6r=r(m2t,"from_config()"),m2t.forEach(t),n6r=r(_Q,`class
method.`),_Q.forEach(t),s6r=i(ni),dL=n(ni,"P",{});var e$e=s(dL);l6r=r(e$e,"This class cannot be instantiated directly using "),O1e=n(e$e,"CODE",{});var g2t=s(O1e);i6r=r(g2t,"__init__()"),g2t.forEach(t),d6r=r(e$e," (throws an error)."),e$e.forEach(t),c6r=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(cL.$$.fragment,si),f6r=i(si),X1e=n(si,"P",{});var h2t=s(X1e);m6r=r(h2t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),h2t.forEach(t),g6r=i(si),Vc=n(si,"P",{});var uQ=s(Vc);h6r=r(uQ,`Note:
Loading a model from its configuration file does `),V1e=n(uQ,"STRONG",{});var p2t=s(V1e);p6r=r(p2t,"not"),p2t.forEach(t),_6r=r(uQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),z1e=n(uQ,"CODE",{});var _2t=s(z1e);u6r=r(_2t,"from_pretrained()"),_2t.forEach(t),b6r=r(uQ,"to load the model weights."),uQ.forEach(t),v6r=i(si),W1e=n(si,"P",{});var u2t=s(W1e);T6r=r(u2t,"Examples:"),u2t.forEach(t),F6r=i(si),m(fL.$$.fragment,si),si.forEach(t),C6r=i(ni),Eo=n(ni,"DIV",{class:!0});var ya=s(Eo);m(mL.$$.fragment,ya),M6r=i(ya),Q1e=n(ya,"P",{});var b2t=s(Q1e);E6r=r(b2t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),b2t.forEach(t),y6r=i(ya),wn=n(ya,"P",{});var H3=s(wn);w6r=r(H3,"The model class to instantiate is selected based on the "),H1e=n(H3,"CODE",{});var v2t=s(H1e);A6r=r(v2t,"model_type"),v2t.forEach(t),L6r=r(H3,` property of the config object (either
passed as an argument or loaded from `),U1e=n(H3,"CODE",{});var T2t=s(U1e);B6r=r(T2t,"pretrained_model_name_or_path"),T2t.forEach(t),x6r=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=n(H3,"CODE",{});var F2t=s(J1e);k6r=r(F2t,"pretrained_model_name_or_path"),F2t.forEach(t),R6r=r(H3,":"),H3.forEach(t),S6r=i(ya),ee=n(ya,"UL",{});var ae=s(ee);IM=n(ae,"LI",{});var rBe=s(IM);Y1e=n(rBe,"STRONG",{});var C2t=s(Y1e);P6r=r(C2t,"albert"),C2t.forEach(t),$6r=r(rBe," \u2014 "),qX=n(rBe,"A",{href:!0});var M2t=s(qX);I6r=r(M2t,"TFAlbertForQuestionAnswering"),M2t.forEach(t),N6r=r(rBe," (ALBERT model)"),rBe.forEach(t),D6r=i(ae),NM=n(ae,"LI",{});var tBe=s(NM);K1e=n(tBe,"STRONG",{});var E2t=s(K1e);j6r=r(E2t,"bert"),E2t.forEach(t),q6r=r(tBe," \u2014 "),GX=n(tBe,"A",{href:!0});var y2t=s(GX);G6r=r(y2t,"TFBertForQuestionAnswering"),y2t.forEach(t),O6r=r(tBe," (BERT model)"),tBe.forEach(t),X6r=i(ae),DM=n(ae,"LI",{});var aBe=s(DM);Z1e=n(aBe,"STRONG",{});var w2t=s(Z1e);V6r=r(w2t,"camembert"),w2t.forEach(t),z6r=r(aBe," \u2014 "),OX=n(aBe,"A",{href:!0});var A2t=s(OX);W6r=r(A2t,"TFCamembertForQuestionAnswering"),A2t.forEach(t),Q6r=r(aBe," (CamemBERT model)"),aBe.forEach(t),H6r=i(ae),jM=n(ae,"LI",{});var nBe=s(jM);e2e=n(nBe,"STRONG",{});var L2t=s(e2e);U6r=r(L2t,"convbert"),L2t.forEach(t),J6r=r(nBe," \u2014 "),XX=n(nBe,"A",{href:!0});var B2t=s(XX);Y6r=r(B2t,"TFConvBertForQuestionAnswering"),B2t.forEach(t),K6r=r(nBe," (ConvBERT model)"),nBe.forEach(t),Z6r=i(ae),qM=n(ae,"LI",{});var sBe=s(qM);o2e=n(sBe,"STRONG",{});var x2t=s(o2e);ebr=r(x2t,"deberta"),x2t.forEach(t),obr=r(sBe," \u2014 "),VX=n(sBe,"A",{href:!0});var k2t=s(VX);rbr=r(k2t,"TFDebertaForQuestionAnswering"),k2t.forEach(t),tbr=r(sBe," (DeBERTa model)"),sBe.forEach(t),abr=i(ae),GM=n(ae,"LI",{});var lBe=s(GM);r2e=n(lBe,"STRONG",{});var R2t=s(r2e);nbr=r(R2t,"deberta-v2"),R2t.forEach(t),sbr=r(lBe," \u2014 "),zX=n(lBe,"A",{href:!0});var S2t=s(zX);lbr=r(S2t,"TFDebertaV2ForQuestionAnswering"),S2t.forEach(t),ibr=r(lBe," (DeBERTa-v2 model)"),lBe.forEach(t),dbr=i(ae),OM=n(ae,"LI",{});var iBe=s(OM);t2e=n(iBe,"STRONG",{});var P2t=s(t2e);cbr=r(P2t,"distilbert"),P2t.forEach(t),fbr=r(iBe," \u2014 "),WX=n(iBe,"A",{href:!0});var $2t=s(WX);mbr=r($2t,"TFDistilBertForQuestionAnswering"),$2t.forEach(t),gbr=r(iBe," (DistilBERT model)"),iBe.forEach(t),hbr=i(ae),XM=n(ae,"LI",{});var dBe=s(XM);a2e=n(dBe,"STRONG",{});var I2t=s(a2e);pbr=r(I2t,"electra"),I2t.forEach(t),_br=r(dBe," \u2014 "),QX=n(dBe,"A",{href:!0});var N2t=s(QX);ubr=r(N2t,"TFElectraForQuestionAnswering"),N2t.forEach(t),bbr=r(dBe," (ELECTRA model)"),dBe.forEach(t),vbr=i(ae),VM=n(ae,"LI",{});var cBe=s(VM);n2e=n(cBe,"STRONG",{});var D2t=s(n2e);Tbr=r(D2t,"flaubert"),D2t.forEach(t),Fbr=r(cBe," \u2014 "),HX=n(cBe,"A",{href:!0});var j2t=s(HX);Cbr=r(j2t,"TFFlaubertForQuestionAnsweringSimple"),j2t.forEach(t),Mbr=r(cBe," (FlauBERT model)"),cBe.forEach(t),Ebr=i(ae),zM=n(ae,"LI",{});var fBe=s(zM);s2e=n(fBe,"STRONG",{});var q2t=s(s2e);ybr=r(q2t,"funnel"),q2t.forEach(t),wbr=r(fBe," \u2014 "),UX=n(fBe,"A",{href:!0});var G2t=s(UX);Abr=r(G2t,"TFFunnelForQuestionAnswering"),G2t.forEach(t),Lbr=r(fBe," (Funnel Transformer model)"),fBe.forEach(t),Bbr=i(ae),WM=n(ae,"LI",{});var mBe=s(WM);l2e=n(mBe,"STRONG",{});var O2t=s(l2e);xbr=r(O2t,"longformer"),O2t.forEach(t),kbr=r(mBe," \u2014 "),JX=n(mBe,"A",{href:!0});var X2t=s(JX);Rbr=r(X2t,"TFLongformerForQuestionAnswering"),X2t.forEach(t),Sbr=r(mBe," (Longformer model)"),mBe.forEach(t),Pbr=i(ae),QM=n(ae,"LI",{});var gBe=s(QM);i2e=n(gBe,"STRONG",{});var V2t=s(i2e);$br=r(V2t,"mobilebert"),V2t.forEach(t),Ibr=r(gBe," \u2014 "),YX=n(gBe,"A",{href:!0});var z2t=s(YX);Nbr=r(z2t,"TFMobileBertForQuestionAnswering"),z2t.forEach(t),Dbr=r(gBe," (MobileBERT model)"),gBe.forEach(t),jbr=i(ae),HM=n(ae,"LI",{});var hBe=s(HM);d2e=n(hBe,"STRONG",{});var W2t=s(d2e);qbr=r(W2t,"mpnet"),W2t.forEach(t),Gbr=r(hBe," \u2014 "),KX=n(hBe,"A",{href:!0});var Q2t=s(KX);Obr=r(Q2t,"TFMPNetForQuestionAnswering"),Q2t.forEach(t),Xbr=r(hBe," (MPNet model)"),hBe.forEach(t),Vbr=i(ae),UM=n(ae,"LI",{});var pBe=s(UM);c2e=n(pBe,"STRONG",{});var H2t=s(c2e);zbr=r(H2t,"rembert"),H2t.forEach(t),Wbr=r(pBe," \u2014 "),ZX=n(pBe,"A",{href:!0});var U2t=s(ZX);Qbr=r(U2t,"TFRemBertForQuestionAnswering"),U2t.forEach(t),Hbr=r(pBe," (RemBERT model)"),pBe.forEach(t),Ubr=i(ae),JM=n(ae,"LI",{});var _Be=s(JM);f2e=n(_Be,"STRONG",{});var J2t=s(f2e);Jbr=r(J2t,"roberta"),J2t.forEach(t),Ybr=r(_Be," \u2014 "),eV=n(_Be,"A",{href:!0});var Y2t=s(eV);Kbr=r(Y2t,"TFRobertaForQuestionAnswering"),Y2t.forEach(t),Zbr=r(_Be," (RoBERTa model)"),_Be.forEach(t),evr=i(ae),YM=n(ae,"LI",{});var uBe=s(YM);m2e=n(uBe,"STRONG",{});var K2t=s(m2e);ovr=r(K2t,"roformer"),K2t.forEach(t),rvr=r(uBe," \u2014 "),oV=n(uBe,"A",{href:!0});var Z2t=s(oV);tvr=r(Z2t,"TFRoFormerForQuestionAnswering"),Z2t.forEach(t),avr=r(uBe," (RoFormer model)"),uBe.forEach(t),nvr=i(ae),KM=n(ae,"LI",{});var bBe=s(KM);g2e=n(bBe,"STRONG",{});var e6t=s(g2e);svr=r(e6t,"xlm"),e6t.forEach(t),lvr=r(bBe," \u2014 "),rV=n(bBe,"A",{href:!0});var o6t=s(rV);ivr=r(o6t,"TFXLMForQuestionAnsweringSimple"),o6t.forEach(t),dvr=r(bBe," (XLM model)"),bBe.forEach(t),cvr=i(ae),ZM=n(ae,"LI",{});var vBe=s(ZM);h2e=n(vBe,"STRONG",{});var r6t=s(h2e);fvr=r(r6t,"xlm-roberta"),r6t.forEach(t),mvr=r(vBe," \u2014 "),tV=n(vBe,"A",{href:!0});var t6t=s(tV);gvr=r(t6t,"TFXLMRobertaForQuestionAnswering"),t6t.forEach(t),hvr=r(vBe," (XLM-RoBERTa model)"),vBe.forEach(t),pvr=i(ae),e4=n(ae,"LI",{});var TBe=s(e4);p2e=n(TBe,"STRONG",{});var a6t=s(p2e);_vr=r(a6t,"xlnet"),a6t.forEach(t),uvr=r(TBe," \u2014 "),aV=n(TBe,"A",{href:!0});var n6t=s(aV);bvr=r(n6t,"TFXLNetForQuestionAnsweringSimple"),n6t.forEach(t),vvr=r(TBe," (XLNet model)"),TBe.forEach(t),ae.forEach(t),Tvr=i(ya),_2e=n(ya,"P",{});var s6t=s(_2e);Fvr=r(s6t,"Examples:"),s6t.forEach(t),Cvr=i(ya),m(gL.$$.fragment,ya),ya.forEach(t),ni.forEach(t),XRe=i(c),zc=n(c,"H2",{class:!0});var o$e=s(zc);o4=n(o$e,"A",{id:!0,class:!0,href:!0});var l6t=s(o4);u2e=n(l6t,"SPAN",{});var i6t=s(u2e);m(hL.$$.fragment,i6t),i6t.forEach(t),l6t.forEach(t),Mvr=i(o$e),b2e=n(o$e,"SPAN",{});var d6t=s(b2e);Evr=r(d6t,"TFAutoModelForVision2Seq"),d6t.forEach(t),o$e.forEach(t),VRe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(pL.$$.fragment,li),yvr=i(li),Wc=n(li,"P",{});var bQ=s(Wc);wvr=r(bQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),v2e=n(bQ,"CODE",{});var c6t=s(v2e);Avr=r(c6t,"from_pretrained()"),c6t.forEach(t),Lvr=r(bQ,"class method or the "),T2e=n(bQ,"CODE",{});var f6t=s(T2e);Bvr=r(f6t,"from_config()"),f6t.forEach(t),xvr=r(bQ,`class
method.`),bQ.forEach(t),kvr=i(li),_L=n(li,"P",{});var r$e=s(_L);Rvr=r(r$e,"This class cannot be instantiated directly using "),F2e=n(r$e,"CODE",{});var m6t=s(F2e);Svr=r(m6t,"__init__()"),m6t.forEach(t),Pvr=r(r$e," (throws an error)."),r$e.forEach(t),$vr=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(uL.$$.fragment,ii),Ivr=i(ii),C2e=n(ii,"P",{});var g6t=s(C2e);Nvr=r(g6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),g6t.forEach(t),Dvr=i(ii),Qc=n(ii,"P",{});var vQ=s(Qc);jvr=r(vQ,`Note:
Loading a model from its configuration file does `),M2e=n(vQ,"STRONG",{});var h6t=s(M2e);qvr=r(h6t,"not"),h6t.forEach(t),Gvr=r(vQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),E2e=n(vQ,"CODE",{});var p6t=s(E2e);Ovr=r(p6t,"from_pretrained()"),p6t.forEach(t),Xvr=r(vQ,"to load the model weights."),vQ.forEach(t),Vvr=i(ii),y2e=n(ii,"P",{});var _6t=s(y2e);zvr=r(_6t,"Examples:"),_6t.forEach(t),Wvr=i(ii),m(bL.$$.fragment,ii),ii.forEach(t),Qvr=i(li),yo=n(li,"DIV",{class:!0});var wa=s(yo);m(vL.$$.fragment,wa),Hvr=i(wa),w2e=n(wa,"P",{});var u6t=s(w2e);Uvr=r(u6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),u6t.forEach(t),Jvr=i(wa),An=n(wa,"P",{});var U3=s(An);Yvr=r(U3,"The model class to instantiate is selected based on the "),A2e=n(U3,"CODE",{});var b6t=s(A2e);Kvr=r(b6t,"model_type"),b6t.forEach(t),Zvr=r(U3,` property of the config object (either
passed as an argument or loaded from `),L2e=n(U3,"CODE",{});var v6t=s(L2e);eTr=r(v6t,"pretrained_model_name_or_path"),v6t.forEach(t),oTr=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=n(U3,"CODE",{});var T6t=s(B2e);rTr=r(T6t,"pretrained_model_name_or_path"),T6t.forEach(t),tTr=r(U3,":"),U3.forEach(t),aTr=i(wa),x2e=n(wa,"UL",{});var F6t=s(x2e);r4=n(F6t,"LI",{});var FBe=s(r4);k2e=n(FBe,"STRONG",{});var C6t=s(k2e);nTr=r(C6t,"vision-encoder-decoder"),C6t.forEach(t),sTr=r(FBe," \u2014 "),nV=n(FBe,"A",{href:!0});var M6t=s(nV);lTr=r(M6t,"TFVisionEncoderDecoderModel"),M6t.forEach(t),iTr=r(FBe," (Vision Encoder decoder model)"),FBe.forEach(t),F6t.forEach(t),dTr=i(wa),R2e=n(wa,"P",{});var E6t=s(R2e);cTr=r(E6t,"Examples:"),E6t.forEach(t),fTr=i(wa),m(TL.$$.fragment,wa),wa.forEach(t),li.forEach(t),zRe=i(c),Hc=n(c,"H2",{class:!0});var t$e=s(Hc);t4=n(t$e,"A",{id:!0,class:!0,href:!0});var y6t=s(t4);S2e=n(y6t,"SPAN",{});var w6t=s(S2e);m(FL.$$.fragment,w6t),w6t.forEach(t),y6t.forEach(t),mTr=i(t$e),P2e=n(t$e,"SPAN",{});var A6t=s(P2e);gTr=r(A6t,"TFAutoModelForSpeechSeq2Seq"),A6t.forEach(t),t$e.forEach(t),WRe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(CL.$$.fragment,di),hTr=i(di),Uc=n(di,"P",{});var TQ=s(Uc);pTr=r(TQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),$2e=n(TQ,"CODE",{});var L6t=s($2e);_Tr=r(L6t,"from_pretrained()"),L6t.forEach(t),uTr=r(TQ,"class method or the "),I2e=n(TQ,"CODE",{});var B6t=s(I2e);bTr=r(B6t,"from_config()"),B6t.forEach(t),vTr=r(TQ,`class
method.`),TQ.forEach(t),TTr=i(di),ML=n(di,"P",{});var a$e=s(ML);FTr=r(a$e,"This class cannot be instantiated directly using "),N2e=n(a$e,"CODE",{});var x6t=s(N2e);CTr=r(x6t,"__init__()"),x6t.forEach(t),MTr=r(a$e," (throws an error)."),a$e.forEach(t),ETr=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);m(EL.$$.fragment,ci),yTr=i(ci),D2e=n(ci,"P",{});var k6t=s(D2e);wTr=r(k6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),k6t.forEach(t),ATr=i(ci),Jc=n(ci,"P",{});var FQ=s(Jc);LTr=r(FQ,`Note:
Loading a model from its configuration file does `),j2e=n(FQ,"STRONG",{});var R6t=s(j2e);BTr=r(R6t,"not"),R6t.forEach(t),xTr=r(FQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),q2e=n(FQ,"CODE",{});var S6t=s(q2e);kTr=r(S6t,"from_pretrained()"),S6t.forEach(t),RTr=r(FQ,"to load the model weights."),FQ.forEach(t),STr=i(ci),G2e=n(ci,"P",{});var P6t=s(G2e);PTr=r(P6t,"Examples:"),P6t.forEach(t),$Tr=i(ci),m(yL.$$.fragment,ci),ci.forEach(t),ITr=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);m(wL.$$.fragment,Aa),NTr=i(Aa),O2e=n(Aa,"P",{});var $6t=s(O2e);DTr=r($6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),$6t.forEach(t),jTr=i(Aa),Ln=n(Aa,"P",{});var J3=s(Ln);qTr=r(J3,"The model class to instantiate is selected based on the "),X2e=n(J3,"CODE",{});var I6t=s(X2e);GTr=r(I6t,"model_type"),I6t.forEach(t),OTr=r(J3,` property of the config object (either
passed as an argument or loaded from `),V2e=n(J3,"CODE",{});var N6t=s(V2e);XTr=r(N6t,"pretrained_model_name_or_path"),N6t.forEach(t),VTr=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=n(J3,"CODE",{});var D6t=s(z2e);zTr=r(D6t,"pretrained_model_name_or_path"),D6t.forEach(t),WTr=r(J3,":"),J3.forEach(t),QTr=i(Aa),W2e=n(Aa,"UL",{});var j6t=s(W2e);a4=n(j6t,"LI",{});var CBe=s(a4);Q2e=n(CBe,"STRONG",{});var q6t=s(Q2e);HTr=r(q6t,"speech_to_text"),q6t.forEach(t),UTr=r(CBe," \u2014 "),sV=n(CBe,"A",{href:!0});var G6t=s(sV);JTr=r(G6t,"TFSpeech2TextForConditionalGeneration"),G6t.forEach(t),YTr=r(CBe," (Speech2Text model)"),CBe.forEach(t),j6t.forEach(t),KTr=i(Aa),H2e=n(Aa,"P",{});var O6t=s(H2e);ZTr=r(O6t,"Examples:"),O6t.forEach(t),eFr=i(Aa),m(AL.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),QRe=i(c),Yc=n(c,"H2",{class:!0});var n$e=s(Yc);n4=n(n$e,"A",{id:!0,class:!0,href:!0});var X6t=s(n4);U2e=n(X6t,"SPAN",{});var V6t=s(U2e);m(LL.$$.fragment,V6t),V6t.forEach(t),X6t.forEach(t),oFr=i(n$e),J2e=n(n$e,"SPAN",{});var z6t=s(J2e);rFr=r(z6t,"FlaxAutoModel"),z6t.forEach(t),n$e.forEach(t),HRe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(BL.$$.fragment,fi),tFr=i(fi),Kc=n(fi,"P",{});var CQ=s(Kc);aFr=r(CQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Y2e=n(CQ,"CODE",{});var W6t=s(Y2e);nFr=r(W6t,"from_pretrained()"),W6t.forEach(t),sFr=r(CQ,"class method or the "),K2e=n(CQ,"CODE",{});var Q6t=s(K2e);lFr=r(Q6t,"from_config()"),Q6t.forEach(t),iFr=r(CQ,`class
method.`),CQ.forEach(t),dFr=i(fi),xL=n(fi,"P",{});var s$e=s(xL);cFr=r(s$e,"This class cannot be instantiated directly using "),Z2e=n(s$e,"CODE",{});var H6t=s(Z2e);fFr=r(H6t,"__init__()"),H6t.forEach(t),mFr=r(s$e," (throws an error)."),s$e.forEach(t),gFr=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m(kL.$$.fragment,mi),hFr=i(mi),e6e=n(mi,"P",{});var U6t=s(e6e);pFr=r(U6t,"Instantiates one of the base model classes of the library from a configuration."),U6t.forEach(t),_Fr=i(mi),Zc=n(mi,"P",{});var MQ=s(Zc);uFr=r(MQ,`Note:
Loading a model from its configuration file does `),o6e=n(MQ,"STRONG",{});var J6t=s(o6e);bFr=r(J6t,"not"),J6t.forEach(t),vFr=r(MQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),r6e=n(MQ,"CODE",{});var Y6t=s(r6e);TFr=r(Y6t,"from_pretrained()"),Y6t.forEach(t),FFr=r(MQ,"to load the model weights."),MQ.forEach(t),CFr=i(mi),t6e=n(mi,"P",{});var K6t=s(t6e);MFr=r(K6t,"Examples:"),K6t.forEach(t),EFr=i(mi),m(RL.$$.fragment,mi),mi.forEach(t),yFr=i(fi),Ao=n(fi,"DIV",{class:!0});var La=s(Ao);m(SL.$$.fragment,La),wFr=i(La),a6e=n(La,"P",{});var Z6t=s(a6e);AFr=r(Z6t,"Instantiate one of the base model classes of the library from a pretrained model."),Z6t.forEach(t),LFr=i(La),Bn=n(La,"P",{});var Y3=s(Bn);BFr=r(Y3,"The model class to instantiate is selected based on the "),n6e=n(Y3,"CODE",{});var ebt=s(n6e);xFr=r(ebt,"model_type"),ebt.forEach(t),kFr=r(Y3,` property of the config object (either
passed as an argument or loaded from `),s6e=n(Y3,"CODE",{});var obt=s(s6e);RFr=r(obt,"pretrained_model_name_or_path"),obt.forEach(t),SFr=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l6e=n(Y3,"CODE",{});var rbt=s(l6e);PFr=r(rbt,"pretrained_model_name_or_path"),rbt.forEach(t),$Fr=r(Y3,":"),Y3.forEach(t),IFr=i(La),z=n(La,"UL",{});var Q=s(z);s4=n(Q,"LI",{});var MBe=s(s4);i6e=n(MBe,"STRONG",{});var tbt=s(i6e);NFr=r(tbt,"albert"),tbt.forEach(t),DFr=r(MBe," \u2014 "),lV=n(MBe,"A",{href:!0});var abt=s(lV);jFr=r(abt,"FlaxAlbertModel"),abt.forEach(t),qFr=r(MBe," (ALBERT model)"),MBe.forEach(t),GFr=i(Q),l4=n(Q,"LI",{});var EBe=s(l4);d6e=n(EBe,"STRONG",{});var nbt=s(d6e);OFr=r(nbt,"bart"),nbt.forEach(t),XFr=r(EBe," \u2014 "),iV=n(EBe,"A",{href:!0});var sbt=s(iV);VFr=r(sbt,"FlaxBartModel"),sbt.forEach(t),zFr=r(EBe," (BART model)"),EBe.forEach(t),WFr=i(Q),i4=n(Q,"LI",{});var yBe=s(i4);c6e=n(yBe,"STRONG",{});var lbt=s(c6e);QFr=r(lbt,"beit"),lbt.forEach(t),HFr=r(yBe," \u2014 "),dV=n(yBe,"A",{href:!0});var ibt=s(dV);UFr=r(ibt,"FlaxBeitModel"),ibt.forEach(t),JFr=r(yBe," (BEiT model)"),yBe.forEach(t),YFr=i(Q),d4=n(Q,"LI",{});var wBe=s(d4);f6e=n(wBe,"STRONG",{});var dbt=s(f6e);KFr=r(dbt,"bert"),dbt.forEach(t),ZFr=r(wBe," \u2014 "),cV=n(wBe,"A",{href:!0});var cbt=s(cV);eCr=r(cbt,"FlaxBertModel"),cbt.forEach(t),oCr=r(wBe," (BERT model)"),wBe.forEach(t),rCr=i(Q),c4=n(Q,"LI",{});var ABe=s(c4);m6e=n(ABe,"STRONG",{});var fbt=s(m6e);tCr=r(fbt,"big_bird"),fbt.forEach(t),aCr=r(ABe," \u2014 "),fV=n(ABe,"A",{href:!0});var mbt=s(fV);nCr=r(mbt,"FlaxBigBirdModel"),mbt.forEach(t),sCr=r(ABe," (BigBird model)"),ABe.forEach(t),lCr=i(Q),f4=n(Q,"LI",{});var LBe=s(f4);g6e=n(LBe,"STRONG",{});var gbt=s(g6e);iCr=r(gbt,"blenderbot"),gbt.forEach(t),dCr=r(LBe," \u2014 "),mV=n(LBe,"A",{href:!0});var hbt=s(mV);cCr=r(hbt,"FlaxBlenderbotModel"),hbt.forEach(t),fCr=r(LBe," (Blenderbot model)"),LBe.forEach(t),mCr=i(Q),m4=n(Q,"LI",{});var BBe=s(m4);h6e=n(BBe,"STRONG",{});var pbt=s(h6e);gCr=r(pbt,"blenderbot-small"),pbt.forEach(t),hCr=r(BBe," \u2014 "),gV=n(BBe,"A",{href:!0});var _bt=s(gV);pCr=r(_bt,"FlaxBlenderbotSmallModel"),_bt.forEach(t),_Cr=r(BBe," (BlenderbotSmall model)"),BBe.forEach(t),uCr=i(Q),g4=n(Q,"LI",{});var xBe=s(g4);p6e=n(xBe,"STRONG",{});var ubt=s(p6e);bCr=r(ubt,"clip"),ubt.forEach(t),vCr=r(xBe," \u2014 "),hV=n(xBe,"A",{href:!0});var bbt=s(hV);TCr=r(bbt,"FlaxCLIPModel"),bbt.forEach(t),FCr=r(xBe," (CLIP model)"),xBe.forEach(t),CCr=i(Q),h4=n(Q,"LI",{});var kBe=s(h4);_6e=n(kBe,"STRONG",{});var vbt=s(_6e);MCr=r(vbt,"distilbert"),vbt.forEach(t),ECr=r(kBe," \u2014 "),pV=n(kBe,"A",{href:!0});var Tbt=s(pV);yCr=r(Tbt,"FlaxDistilBertModel"),Tbt.forEach(t),wCr=r(kBe," (DistilBERT model)"),kBe.forEach(t),ACr=i(Q),p4=n(Q,"LI",{});var RBe=s(p4);u6e=n(RBe,"STRONG",{});var Fbt=s(u6e);LCr=r(Fbt,"electra"),Fbt.forEach(t),BCr=r(RBe," \u2014 "),_V=n(RBe,"A",{href:!0});var Cbt=s(_V);xCr=r(Cbt,"FlaxElectraModel"),Cbt.forEach(t),kCr=r(RBe," (ELECTRA model)"),RBe.forEach(t),RCr=i(Q),_4=n(Q,"LI",{});var SBe=s(_4);b6e=n(SBe,"STRONG",{});var Mbt=s(b6e);SCr=r(Mbt,"gpt2"),Mbt.forEach(t),PCr=r(SBe," \u2014 "),uV=n(SBe,"A",{href:!0});var Ebt=s(uV);$Cr=r(Ebt,"FlaxGPT2Model"),Ebt.forEach(t),ICr=r(SBe," (OpenAI GPT-2 model)"),SBe.forEach(t),NCr=i(Q),u4=n(Q,"LI",{});var PBe=s(u4);v6e=n(PBe,"STRONG",{});var ybt=s(v6e);DCr=r(ybt,"gpt_neo"),ybt.forEach(t),jCr=r(PBe," \u2014 "),bV=n(PBe,"A",{href:!0});var wbt=s(bV);qCr=r(wbt,"FlaxGPTNeoModel"),wbt.forEach(t),GCr=r(PBe," (GPT Neo model)"),PBe.forEach(t),OCr=i(Q),b4=n(Q,"LI",{});var $Be=s(b4);T6e=n($Be,"STRONG",{});var Abt=s(T6e);XCr=r(Abt,"gptj"),Abt.forEach(t),VCr=r($Be," \u2014 "),vV=n($Be,"A",{href:!0});var Lbt=s(vV);zCr=r(Lbt,"FlaxGPTJModel"),Lbt.forEach(t),WCr=r($Be," (GPT-J model)"),$Be.forEach(t),QCr=i(Q),v4=n(Q,"LI",{});var IBe=s(v4);F6e=n(IBe,"STRONG",{});var Bbt=s(F6e);HCr=r(Bbt,"marian"),Bbt.forEach(t),UCr=r(IBe," \u2014 "),TV=n(IBe,"A",{href:!0});var xbt=s(TV);JCr=r(xbt,"FlaxMarianModel"),xbt.forEach(t),YCr=r(IBe," (Marian model)"),IBe.forEach(t),KCr=i(Q),T4=n(Q,"LI",{});var NBe=s(T4);C6e=n(NBe,"STRONG",{});var kbt=s(C6e);ZCr=r(kbt,"mbart"),kbt.forEach(t),eMr=r(NBe," \u2014 "),FV=n(NBe,"A",{href:!0});var Rbt=s(FV);oMr=r(Rbt,"FlaxMBartModel"),Rbt.forEach(t),rMr=r(NBe," (mBART model)"),NBe.forEach(t),tMr=i(Q),F4=n(Q,"LI",{});var DBe=s(F4);M6e=n(DBe,"STRONG",{});var Sbt=s(M6e);aMr=r(Sbt,"mt5"),Sbt.forEach(t),nMr=r(DBe," \u2014 "),CV=n(DBe,"A",{href:!0});var Pbt=s(CV);sMr=r(Pbt,"FlaxMT5Model"),Pbt.forEach(t),lMr=r(DBe," (mT5 model)"),DBe.forEach(t),iMr=i(Q),C4=n(Q,"LI",{});var jBe=s(C4);E6e=n(jBe,"STRONG",{});var $bt=s(E6e);dMr=r($bt,"pegasus"),$bt.forEach(t),cMr=r(jBe," \u2014 "),MV=n(jBe,"A",{href:!0});var Ibt=s(MV);fMr=r(Ibt,"FlaxPegasusModel"),Ibt.forEach(t),mMr=r(jBe," (Pegasus model)"),jBe.forEach(t),gMr=i(Q),M4=n(Q,"LI",{});var qBe=s(M4);y6e=n(qBe,"STRONG",{});var Nbt=s(y6e);hMr=r(Nbt,"roberta"),Nbt.forEach(t),pMr=r(qBe," \u2014 "),EV=n(qBe,"A",{href:!0});var Dbt=s(EV);_Mr=r(Dbt,"FlaxRobertaModel"),Dbt.forEach(t),uMr=r(qBe," (RoBERTa model)"),qBe.forEach(t),bMr=i(Q),E4=n(Q,"LI",{});var GBe=s(E4);w6e=n(GBe,"STRONG",{});var jbt=s(w6e);vMr=r(jbt,"roformer"),jbt.forEach(t),TMr=r(GBe," \u2014 "),yV=n(GBe,"A",{href:!0});var qbt=s(yV);FMr=r(qbt,"FlaxRoFormerModel"),qbt.forEach(t),CMr=r(GBe," (RoFormer model)"),GBe.forEach(t),MMr=i(Q),y4=n(Q,"LI",{});var OBe=s(y4);A6e=n(OBe,"STRONG",{});var Gbt=s(A6e);EMr=r(Gbt,"t5"),Gbt.forEach(t),yMr=r(OBe," \u2014 "),wV=n(OBe,"A",{href:!0});var Obt=s(wV);wMr=r(Obt,"FlaxT5Model"),Obt.forEach(t),AMr=r(OBe," (T5 model)"),OBe.forEach(t),LMr=i(Q),w4=n(Q,"LI",{});var XBe=s(w4);L6e=n(XBe,"STRONG",{});var Xbt=s(L6e);BMr=r(Xbt,"vision-text-dual-encoder"),Xbt.forEach(t),xMr=r(XBe," \u2014 "),AV=n(XBe,"A",{href:!0});var Vbt=s(AV);kMr=r(Vbt,"FlaxVisionTextDualEncoderModel"),Vbt.forEach(t),RMr=r(XBe," (VisionTextDualEncoder model)"),XBe.forEach(t),SMr=i(Q),A4=n(Q,"LI",{});var VBe=s(A4);B6e=n(VBe,"STRONG",{});var zbt=s(B6e);PMr=r(zbt,"vit"),zbt.forEach(t),$Mr=r(VBe," \u2014 "),LV=n(VBe,"A",{href:!0});var Wbt=s(LV);IMr=r(Wbt,"FlaxViTModel"),Wbt.forEach(t),NMr=r(VBe," (ViT model)"),VBe.forEach(t),DMr=i(Q),L4=n(Q,"LI",{});var zBe=s(L4);x6e=n(zBe,"STRONG",{});var Qbt=s(x6e);jMr=r(Qbt,"wav2vec2"),Qbt.forEach(t),qMr=r(zBe," \u2014 "),BV=n(zBe,"A",{href:!0});var Hbt=s(BV);GMr=r(Hbt,"FlaxWav2Vec2Model"),Hbt.forEach(t),OMr=r(zBe," (Wav2Vec2 model)"),zBe.forEach(t),XMr=i(Q),B4=n(Q,"LI",{});var WBe=s(B4);k6e=n(WBe,"STRONG",{});var Ubt=s(k6e);VMr=r(Ubt,"xglm"),Ubt.forEach(t),zMr=r(WBe," \u2014 "),xV=n(WBe,"A",{href:!0});var Jbt=s(xV);WMr=r(Jbt,"FlaxXGLMModel"),Jbt.forEach(t),QMr=r(WBe," (XGLM model)"),WBe.forEach(t),HMr=i(Q),x4=n(Q,"LI",{});var QBe=s(x4);R6e=n(QBe,"STRONG",{});var Ybt=s(R6e);UMr=r(Ybt,"xlm-roberta"),Ybt.forEach(t),JMr=r(QBe," \u2014 "),kV=n(QBe,"A",{href:!0});var Kbt=s(kV);YMr=r(Kbt,"FlaxXLMRobertaModel"),Kbt.forEach(t),KMr=r(QBe," (XLM-RoBERTa model)"),QBe.forEach(t),Q.forEach(t),ZMr=i(La),S6e=n(La,"P",{});var Zbt=s(S6e);e4r=r(Zbt,"Examples:"),Zbt.forEach(t),o4r=i(La),m(PL.$$.fragment,La),La.forEach(t),fi.forEach(t),URe=i(c),ef=n(c,"H2",{class:!0});var l$e=s(ef);k4=n(l$e,"A",{id:!0,class:!0,href:!0});var evt=s(k4);P6e=n(evt,"SPAN",{});var ovt=s(P6e);m($L.$$.fragment,ovt),ovt.forEach(t),evt.forEach(t),r4r=i(l$e),$6e=n(l$e,"SPAN",{});var rvt=s($6e);t4r=r(rvt,"FlaxAutoModelForCausalLM"),rvt.forEach(t),l$e.forEach(t),JRe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m(IL.$$.fragment,gi),a4r=i(gi),of=n(gi,"P",{});var EQ=s(of);n4r=r(EQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),I6e=n(EQ,"CODE",{});var tvt=s(I6e);s4r=r(tvt,"from_pretrained()"),tvt.forEach(t),l4r=r(EQ,"class method or the "),N6e=n(EQ,"CODE",{});var avt=s(N6e);i4r=r(avt,"from_config()"),avt.forEach(t),d4r=r(EQ,`class
method.`),EQ.forEach(t),c4r=i(gi),NL=n(gi,"P",{});var i$e=s(NL);f4r=r(i$e,"This class cannot be instantiated directly using "),D6e=n(i$e,"CODE",{});var nvt=s(D6e);m4r=r(nvt,"__init__()"),nvt.forEach(t),g4r=r(i$e," (throws an error)."),i$e.forEach(t),h4r=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m(DL.$$.fragment,hi),p4r=i(hi),j6e=n(hi,"P",{});var svt=s(j6e);_4r=r(svt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),svt.forEach(t),u4r=i(hi),rf=n(hi,"P",{});var yQ=s(rf);b4r=r(yQ,`Note:
Loading a model from its configuration file does `),q6e=n(yQ,"STRONG",{});var lvt=s(q6e);v4r=r(lvt,"not"),lvt.forEach(t),T4r=r(yQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),G6e=n(yQ,"CODE",{});var ivt=s(G6e);F4r=r(ivt,"from_pretrained()"),ivt.forEach(t),C4r=r(yQ,"to load the model weights."),yQ.forEach(t),M4r=i(hi),O6e=n(hi,"P",{});var dvt=s(O6e);E4r=r(dvt,"Examples:"),dvt.forEach(t),y4r=i(hi),m(jL.$$.fragment,hi),hi.forEach(t),w4r=i(gi),Lo=n(gi,"DIV",{class:!0});var Ba=s(Lo);m(qL.$$.fragment,Ba),A4r=i(Ba),X6e=n(Ba,"P",{});var cvt=s(X6e);L4r=r(cvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),cvt.forEach(t),B4r=i(Ba),xn=n(Ba,"P",{});var K3=s(xn);x4r=r(K3,"The model class to instantiate is selected based on the "),V6e=n(K3,"CODE",{});var fvt=s(V6e);k4r=r(fvt,"model_type"),fvt.forEach(t),R4r=r(K3,` property of the config object (either
passed as an argument or loaded from `),z6e=n(K3,"CODE",{});var mvt=s(z6e);S4r=r(mvt,"pretrained_model_name_or_path"),mvt.forEach(t),P4r=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W6e=n(K3,"CODE",{});var gvt=s(W6e);$4r=r(gvt,"pretrained_model_name_or_path"),gvt.forEach(t),I4r=r(K3,":"),K3.forEach(t),N4r=i(Ba),ca=n(Ba,"UL",{});var pi=s(ca);R4=n(pi,"LI",{});var HBe=s(R4);Q6e=n(HBe,"STRONG",{});var hvt=s(Q6e);D4r=r(hvt,"bart"),hvt.forEach(t),j4r=r(HBe," \u2014 "),RV=n(HBe,"A",{href:!0});var pvt=s(RV);q4r=r(pvt,"FlaxBartForCausalLM"),pvt.forEach(t),G4r=r(HBe," (BART model)"),HBe.forEach(t),O4r=i(pi),S4=n(pi,"LI",{});var UBe=s(S4);H6e=n(UBe,"STRONG",{});var _vt=s(H6e);X4r=r(_vt,"gpt2"),_vt.forEach(t),V4r=r(UBe," \u2014 "),SV=n(UBe,"A",{href:!0});var uvt=s(SV);z4r=r(uvt,"FlaxGPT2LMHeadModel"),uvt.forEach(t),W4r=r(UBe," (OpenAI GPT-2 model)"),UBe.forEach(t),Q4r=i(pi),P4=n(pi,"LI",{});var JBe=s(P4);U6e=n(JBe,"STRONG",{});var bvt=s(U6e);H4r=r(bvt,"gpt_neo"),bvt.forEach(t),U4r=r(JBe," \u2014 "),PV=n(JBe,"A",{href:!0});var vvt=s(PV);J4r=r(vvt,"FlaxGPTNeoForCausalLM"),vvt.forEach(t),Y4r=r(JBe," (GPT Neo model)"),JBe.forEach(t),K4r=i(pi),$4=n(pi,"LI",{});var YBe=s($4);J6e=n(YBe,"STRONG",{});var Tvt=s(J6e);Z4r=r(Tvt,"gptj"),Tvt.forEach(t),eEr=r(YBe," \u2014 "),$V=n(YBe,"A",{href:!0});var Fvt=s($V);oEr=r(Fvt,"FlaxGPTJForCausalLM"),Fvt.forEach(t),rEr=r(YBe," (GPT-J model)"),YBe.forEach(t),tEr=i(pi),I4=n(pi,"LI",{});var KBe=s(I4);Y6e=n(KBe,"STRONG",{});var Cvt=s(Y6e);aEr=r(Cvt,"xglm"),Cvt.forEach(t),nEr=r(KBe," \u2014 "),IV=n(KBe,"A",{href:!0});var Mvt=s(IV);sEr=r(Mvt,"FlaxXGLMForCausalLM"),Mvt.forEach(t),lEr=r(KBe," (XGLM model)"),KBe.forEach(t),pi.forEach(t),iEr=i(Ba),K6e=n(Ba,"P",{});var Evt=s(K6e);dEr=r(Evt,"Examples:"),Evt.forEach(t),cEr=i(Ba),m(GL.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),YRe=i(c),tf=n(c,"H2",{class:!0});var d$e=s(tf);N4=n(d$e,"A",{id:!0,class:!0,href:!0});var yvt=s(N4);Z6e=n(yvt,"SPAN",{});var wvt=s(Z6e);m(OL.$$.fragment,wvt),wvt.forEach(t),yvt.forEach(t),fEr=i(d$e),ebe=n(d$e,"SPAN",{});var Avt=s(ebe);mEr=r(Avt,"FlaxAutoModelForPreTraining"),Avt.forEach(t),d$e.forEach(t),KRe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(XL.$$.fragment,_i),gEr=i(_i),af=n(_i,"P",{});var wQ=s(af);hEr=r(wQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),obe=n(wQ,"CODE",{});var Lvt=s(obe);pEr=r(Lvt,"from_pretrained()"),Lvt.forEach(t),_Er=r(wQ,"class method or the "),rbe=n(wQ,"CODE",{});var Bvt=s(rbe);uEr=r(Bvt,"from_config()"),Bvt.forEach(t),bEr=r(wQ,`class
method.`),wQ.forEach(t),vEr=i(_i),VL=n(_i,"P",{});var c$e=s(VL);TEr=r(c$e,"This class cannot be instantiated directly using "),tbe=n(c$e,"CODE",{});var xvt=s(tbe);FEr=r(xvt,"__init__()"),xvt.forEach(t),CEr=r(c$e," (throws an error)."),c$e.forEach(t),MEr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(zL.$$.fragment,ui),EEr=i(ui),abe=n(ui,"P",{});var kvt=s(abe);yEr=r(kvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kvt.forEach(t),wEr=i(ui),nf=n(ui,"P",{});var AQ=s(nf);AEr=r(AQ,`Note:
Loading a model from its configuration file does `),nbe=n(AQ,"STRONG",{});var Rvt=s(nbe);LEr=r(Rvt,"not"),Rvt.forEach(t),BEr=r(AQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sbe=n(AQ,"CODE",{});var Svt=s(sbe);xEr=r(Svt,"from_pretrained()"),Svt.forEach(t),kEr=r(AQ,"to load the model weights."),AQ.forEach(t),REr=i(ui),lbe=n(ui,"P",{});var Pvt=s(lbe);SEr=r(Pvt,"Examples:"),Pvt.forEach(t),PEr=i(ui),m(WL.$$.fragment,ui),ui.forEach(t),$Er=i(_i),Bo=n(_i,"DIV",{class:!0});var xa=s(Bo);m(QL.$$.fragment,xa),IEr=i(xa),ibe=n(xa,"P",{});var $vt=s(ibe);NEr=r($vt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$vt.forEach(t),DEr=i(xa),kn=n(xa,"P",{});var Z3=s(kn);jEr=r(Z3,"The model class to instantiate is selected based on the "),dbe=n(Z3,"CODE",{});var Ivt=s(dbe);qEr=r(Ivt,"model_type"),Ivt.forEach(t),GEr=r(Z3,` property of the config object (either
passed as an argument or loaded from `),cbe=n(Z3,"CODE",{});var Nvt=s(cbe);OEr=r(Nvt,"pretrained_model_name_or_path"),Nvt.forEach(t),XEr=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=n(Z3,"CODE",{});var Dvt=s(fbe);VEr=r(Dvt,"pretrained_model_name_or_path"),Dvt.forEach(t),zEr=r(Z3,":"),Z3.forEach(t),WEr=i(xa),fe=n(xa,"UL",{});var pe=s(fe);D4=n(pe,"LI",{});var ZBe=s(D4);mbe=n(ZBe,"STRONG",{});var jvt=s(mbe);QEr=r(jvt,"albert"),jvt.forEach(t),HEr=r(ZBe," \u2014 "),NV=n(ZBe,"A",{href:!0});var qvt=s(NV);UEr=r(qvt,"FlaxAlbertForPreTraining"),qvt.forEach(t),JEr=r(ZBe," (ALBERT model)"),ZBe.forEach(t),YEr=i(pe),j4=n(pe,"LI",{});var exe=s(j4);gbe=n(exe,"STRONG",{});var Gvt=s(gbe);KEr=r(Gvt,"bart"),Gvt.forEach(t),ZEr=r(exe," \u2014 "),DV=n(exe,"A",{href:!0});var Ovt=s(DV);e3r=r(Ovt,"FlaxBartForConditionalGeneration"),Ovt.forEach(t),o3r=r(exe," (BART model)"),exe.forEach(t),r3r=i(pe),q4=n(pe,"LI",{});var oxe=s(q4);hbe=n(oxe,"STRONG",{});var Xvt=s(hbe);t3r=r(Xvt,"bert"),Xvt.forEach(t),a3r=r(oxe," \u2014 "),jV=n(oxe,"A",{href:!0});var Vvt=s(jV);n3r=r(Vvt,"FlaxBertForPreTraining"),Vvt.forEach(t),s3r=r(oxe," (BERT model)"),oxe.forEach(t),l3r=i(pe),G4=n(pe,"LI",{});var rxe=s(G4);pbe=n(rxe,"STRONG",{});var zvt=s(pbe);i3r=r(zvt,"big_bird"),zvt.forEach(t),d3r=r(rxe," \u2014 "),qV=n(rxe,"A",{href:!0});var Wvt=s(qV);c3r=r(Wvt,"FlaxBigBirdForPreTraining"),Wvt.forEach(t),f3r=r(rxe," (BigBird model)"),rxe.forEach(t),m3r=i(pe),O4=n(pe,"LI",{});var txe=s(O4);_be=n(txe,"STRONG",{});var Qvt=s(_be);g3r=r(Qvt,"electra"),Qvt.forEach(t),h3r=r(txe," \u2014 "),GV=n(txe,"A",{href:!0});var Hvt=s(GV);p3r=r(Hvt,"FlaxElectraForPreTraining"),Hvt.forEach(t),_3r=r(txe," (ELECTRA model)"),txe.forEach(t),u3r=i(pe),X4=n(pe,"LI",{});var axe=s(X4);ube=n(axe,"STRONG",{});var Uvt=s(ube);b3r=r(Uvt,"mbart"),Uvt.forEach(t),v3r=r(axe," \u2014 "),OV=n(axe,"A",{href:!0});var Jvt=s(OV);T3r=r(Jvt,"FlaxMBartForConditionalGeneration"),Jvt.forEach(t),F3r=r(axe," (mBART model)"),axe.forEach(t),C3r=i(pe),V4=n(pe,"LI",{});var nxe=s(V4);bbe=n(nxe,"STRONG",{});var Yvt=s(bbe);M3r=r(Yvt,"mt5"),Yvt.forEach(t),E3r=r(nxe," \u2014 "),XV=n(nxe,"A",{href:!0});var Kvt=s(XV);y3r=r(Kvt,"FlaxMT5ForConditionalGeneration"),Kvt.forEach(t),w3r=r(nxe," (mT5 model)"),nxe.forEach(t),A3r=i(pe),z4=n(pe,"LI",{});var sxe=s(z4);vbe=n(sxe,"STRONG",{});var Zvt=s(vbe);L3r=r(Zvt,"roberta"),Zvt.forEach(t),B3r=r(sxe," \u2014 "),VV=n(sxe,"A",{href:!0});var eTt=s(VV);x3r=r(eTt,"FlaxRobertaForMaskedLM"),eTt.forEach(t),k3r=r(sxe," (RoBERTa model)"),sxe.forEach(t),R3r=i(pe),W4=n(pe,"LI",{});var lxe=s(W4);Tbe=n(lxe,"STRONG",{});var oTt=s(Tbe);S3r=r(oTt,"roformer"),oTt.forEach(t),P3r=r(lxe," \u2014 "),zV=n(lxe,"A",{href:!0});var rTt=s(zV);$3r=r(rTt,"FlaxRoFormerForMaskedLM"),rTt.forEach(t),I3r=r(lxe," (RoFormer model)"),lxe.forEach(t),N3r=i(pe),Q4=n(pe,"LI",{});var ixe=s(Q4);Fbe=n(ixe,"STRONG",{});var tTt=s(Fbe);D3r=r(tTt,"t5"),tTt.forEach(t),j3r=r(ixe," \u2014 "),WV=n(ixe,"A",{href:!0});var aTt=s(WV);q3r=r(aTt,"FlaxT5ForConditionalGeneration"),aTt.forEach(t),G3r=r(ixe," (T5 model)"),ixe.forEach(t),O3r=i(pe),H4=n(pe,"LI",{});var dxe=s(H4);Cbe=n(dxe,"STRONG",{});var nTt=s(Cbe);X3r=r(nTt,"wav2vec2"),nTt.forEach(t),V3r=r(dxe," \u2014 "),QV=n(dxe,"A",{href:!0});var sTt=s(QV);z3r=r(sTt,"FlaxWav2Vec2ForPreTraining"),sTt.forEach(t),W3r=r(dxe," (Wav2Vec2 model)"),dxe.forEach(t),Q3r=i(pe),U4=n(pe,"LI",{});var cxe=s(U4);Mbe=n(cxe,"STRONG",{});var lTt=s(Mbe);H3r=r(lTt,"xlm-roberta"),lTt.forEach(t),U3r=r(cxe," \u2014 "),HV=n(cxe,"A",{href:!0});var iTt=s(HV);J3r=r(iTt,"FlaxXLMRobertaForMaskedLM"),iTt.forEach(t),Y3r=r(cxe," (XLM-RoBERTa model)"),cxe.forEach(t),pe.forEach(t),K3r=i(xa),Ebe=n(xa,"P",{});var dTt=s(Ebe);Z3r=r(dTt,"Examples:"),dTt.forEach(t),e5r=i(xa),m(HL.$$.fragment,xa),xa.forEach(t),_i.forEach(t),ZRe=i(c),sf=n(c,"H2",{class:!0});var f$e=s(sf);J4=n(f$e,"A",{id:!0,class:!0,href:!0});var cTt=s(J4);ybe=n(cTt,"SPAN",{});var fTt=s(ybe);m(UL.$$.fragment,fTt),fTt.forEach(t),cTt.forEach(t),o5r=i(f$e),wbe=n(f$e,"SPAN",{});var mTt=s(wbe);r5r=r(mTt,"FlaxAutoModelForMaskedLM"),mTt.forEach(t),f$e.forEach(t),eSe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(JL.$$.fragment,bi),t5r=i(bi),lf=n(bi,"P",{});var LQ=s(lf);a5r=r(LQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Abe=n(LQ,"CODE",{});var gTt=s(Abe);n5r=r(gTt,"from_pretrained()"),gTt.forEach(t),s5r=r(LQ,"class method or the "),Lbe=n(LQ,"CODE",{});var hTt=s(Lbe);l5r=r(hTt,"from_config()"),hTt.forEach(t),i5r=r(LQ,`class
method.`),LQ.forEach(t),d5r=i(bi),YL=n(bi,"P",{});var m$e=s(YL);c5r=r(m$e,"This class cannot be instantiated directly using "),Bbe=n(m$e,"CODE",{});var pTt=s(Bbe);f5r=r(pTt,"__init__()"),pTt.forEach(t),m5r=r(m$e," (throws an error)."),m$e.forEach(t),g5r=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(KL.$$.fragment,vi),h5r=i(vi),xbe=n(vi,"P",{});var _Tt=s(xbe);p5r=r(_Tt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Tt.forEach(t),_5r=i(vi),df=n(vi,"P",{});var BQ=s(df);u5r=r(BQ,`Note:
Loading a model from its configuration file does `),kbe=n(BQ,"STRONG",{});var uTt=s(kbe);b5r=r(uTt,"not"),uTt.forEach(t),v5r=r(BQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rbe=n(BQ,"CODE",{});var bTt=s(Rbe);T5r=r(bTt,"from_pretrained()"),bTt.forEach(t),F5r=r(BQ,"to load the model weights."),BQ.forEach(t),C5r=i(vi),Sbe=n(vi,"P",{});var vTt=s(Sbe);M5r=r(vTt,"Examples:"),vTt.forEach(t),E5r=i(vi),m(ZL.$$.fragment,vi),vi.forEach(t),y5r=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);m(e7.$$.fragment,ka),w5r=i(ka),Pbe=n(ka,"P",{});var TTt=s(Pbe);A5r=r(TTt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),TTt.forEach(t),L5r=i(ka),Rn=n(ka,"P",{});var e5=s(Rn);B5r=r(e5,"The model class to instantiate is selected based on the "),$be=n(e5,"CODE",{});var FTt=s($be);x5r=r(FTt,"model_type"),FTt.forEach(t),k5r=r(e5,` property of the config object (either
passed as an argument or loaded from `),Ibe=n(e5,"CODE",{});var CTt=s(Ibe);R5r=r(CTt,"pretrained_model_name_or_path"),CTt.forEach(t),S5r=r(e5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=n(e5,"CODE",{});var MTt=s(Nbe);P5r=r(MTt,"pretrained_model_name_or_path"),MTt.forEach(t),$5r=r(e5,":"),e5.forEach(t),I5r=i(ka),be=n(ka,"UL",{});var we=s(be);Y4=n(we,"LI",{});var fxe=s(Y4);Dbe=n(fxe,"STRONG",{});var ETt=s(Dbe);N5r=r(ETt,"albert"),ETt.forEach(t),D5r=r(fxe," \u2014 "),UV=n(fxe,"A",{href:!0});var yTt=s(UV);j5r=r(yTt,"FlaxAlbertForMaskedLM"),yTt.forEach(t),q5r=r(fxe," (ALBERT model)"),fxe.forEach(t),G5r=i(we),K4=n(we,"LI",{});var mxe=s(K4);jbe=n(mxe,"STRONG",{});var wTt=s(jbe);O5r=r(wTt,"bart"),wTt.forEach(t),X5r=r(mxe," \u2014 "),JV=n(mxe,"A",{href:!0});var ATt=s(JV);V5r=r(ATt,"FlaxBartForConditionalGeneration"),ATt.forEach(t),z5r=r(mxe," (BART model)"),mxe.forEach(t),W5r=i(we),Z4=n(we,"LI",{});var gxe=s(Z4);qbe=n(gxe,"STRONG",{});var LTt=s(qbe);Q5r=r(LTt,"bert"),LTt.forEach(t),H5r=r(gxe," \u2014 "),YV=n(gxe,"A",{href:!0});var BTt=s(YV);U5r=r(BTt,"FlaxBertForMaskedLM"),BTt.forEach(t),J5r=r(gxe," (BERT model)"),gxe.forEach(t),Y5r=i(we),eE=n(we,"LI",{});var hxe=s(eE);Gbe=n(hxe,"STRONG",{});var xTt=s(Gbe);K5r=r(xTt,"big_bird"),xTt.forEach(t),Z5r=r(hxe," \u2014 "),KV=n(hxe,"A",{href:!0});var kTt=s(KV);eyr=r(kTt,"FlaxBigBirdForMaskedLM"),kTt.forEach(t),oyr=r(hxe," (BigBird model)"),hxe.forEach(t),ryr=i(we),oE=n(we,"LI",{});var pxe=s(oE);Obe=n(pxe,"STRONG",{});var RTt=s(Obe);tyr=r(RTt,"distilbert"),RTt.forEach(t),ayr=r(pxe," \u2014 "),ZV=n(pxe,"A",{href:!0});var STt=s(ZV);nyr=r(STt,"FlaxDistilBertForMaskedLM"),STt.forEach(t),syr=r(pxe," (DistilBERT model)"),pxe.forEach(t),lyr=i(we),rE=n(we,"LI",{});var _xe=s(rE);Xbe=n(_xe,"STRONG",{});var PTt=s(Xbe);iyr=r(PTt,"electra"),PTt.forEach(t),dyr=r(_xe," \u2014 "),ez=n(_xe,"A",{href:!0});var $Tt=s(ez);cyr=r($Tt,"FlaxElectraForMaskedLM"),$Tt.forEach(t),fyr=r(_xe," (ELECTRA model)"),_xe.forEach(t),myr=i(we),tE=n(we,"LI",{});var uxe=s(tE);Vbe=n(uxe,"STRONG",{});var ITt=s(Vbe);gyr=r(ITt,"mbart"),ITt.forEach(t),hyr=r(uxe," \u2014 "),oz=n(uxe,"A",{href:!0});var NTt=s(oz);pyr=r(NTt,"FlaxMBartForConditionalGeneration"),NTt.forEach(t),_yr=r(uxe," (mBART model)"),uxe.forEach(t),uyr=i(we),aE=n(we,"LI",{});var bxe=s(aE);zbe=n(bxe,"STRONG",{});var DTt=s(zbe);byr=r(DTt,"roberta"),DTt.forEach(t),vyr=r(bxe," \u2014 "),rz=n(bxe,"A",{href:!0});var jTt=s(rz);Tyr=r(jTt,"FlaxRobertaForMaskedLM"),jTt.forEach(t),Fyr=r(bxe," (RoBERTa model)"),bxe.forEach(t),Cyr=i(we),nE=n(we,"LI",{});var vxe=s(nE);Wbe=n(vxe,"STRONG",{});var qTt=s(Wbe);Myr=r(qTt,"roformer"),qTt.forEach(t),Eyr=r(vxe," \u2014 "),tz=n(vxe,"A",{href:!0});var GTt=s(tz);yyr=r(GTt,"FlaxRoFormerForMaskedLM"),GTt.forEach(t),wyr=r(vxe," (RoFormer model)"),vxe.forEach(t),Ayr=i(we),sE=n(we,"LI",{});var Txe=s(sE);Qbe=n(Txe,"STRONG",{});var OTt=s(Qbe);Lyr=r(OTt,"xlm-roberta"),OTt.forEach(t),Byr=r(Txe," \u2014 "),az=n(Txe,"A",{href:!0});var XTt=s(az);xyr=r(XTt,"FlaxXLMRobertaForMaskedLM"),XTt.forEach(t),kyr=r(Txe," (XLM-RoBERTa model)"),Txe.forEach(t),we.forEach(t),Ryr=i(ka),Hbe=n(ka,"P",{});var VTt=s(Hbe);Syr=r(VTt,"Examples:"),VTt.forEach(t),Pyr=i(ka),m(o7.$$.fragment,ka),ka.forEach(t),bi.forEach(t),oSe=i(c),cf=n(c,"H2",{class:!0});var g$e=s(cf);lE=n(g$e,"A",{id:!0,class:!0,href:!0});var zTt=s(lE);Ube=n(zTt,"SPAN",{});var WTt=s(Ube);m(r7.$$.fragment,WTt),WTt.forEach(t),zTt.forEach(t),$yr=i(g$e),Jbe=n(g$e,"SPAN",{});var QTt=s(Jbe);Iyr=r(QTt,"FlaxAutoModelForSeq2SeqLM"),QTt.forEach(t),g$e.forEach(t),rSe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(t7.$$.fragment,Ti),Nyr=i(Ti),ff=n(Ti,"P",{});var xQ=s(ff);Dyr=r(xQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ybe=n(xQ,"CODE",{});var HTt=s(Ybe);jyr=r(HTt,"from_pretrained()"),HTt.forEach(t),qyr=r(xQ,"class method or the "),Kbe=n(xQ,"CODE",{});var UTt=s(Kbe);Gyr=r(UTt,"from_config()"),UTt.forEach(t),Oyr=r(xQ,`class
method.`),xQ.forEach(t),Xyr=i(Ti),a7=n(Ti,"P",{});var h$e=s(a7);Vyr=r(h$e,"This class cannot be instantiated directly using "),Zbe=n(h$e,"CODE",{});var JTt=s(Zbe);zyr=r(JTt,"__init__()"),JTt.forEach(t),Wyr=r(h$e," (throws an error)."),h$e.forEach(t),Qyr=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);m(n7.$$.fragment,Fi),Hyr=i(Fi),eve=n(Fi,"P",{});var YTt=s(eve);Uyr=r(YTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),YTt.forEach(t),Jyr=i(Fi),mf=n(Fi,"P",{});var kQ=s(mf);Yyr=r(kQ,`Note:
Loading a model from its configuration file does `),ove=n(kQ,"STRONG",{});var KTt=s(ove);Kyr=r(KTt,"not"),KTt.forEach(t),Zyr=r(kQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rve=n(kQ,"CODE",{});var ZTt=s(rve);ewr=r(ZTt,"from_pretrained()"),ZTt.forEach(t),owr=r(kQ,"to load the model weights."),kQ.forEach(t),rwr=i(Fi),tve=n(Fi,"P",{});var eFt=s(tve);twr=r(eFt,"Examples:"),eFt.forEach(t),awr=i(Fi),m(s7.$$.fragment,Fi),Fi.forEach(t),nwr=i(Ti),ko=n(Ti,"DIV",{class:!0});var Ra=s(ko);m(l7.$$.fragment,Ra),swr=i(Ra),ave=n(Ra,"P",{});var oFt=s(ave);lwr=r(oFt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),oFt.forEach(t),iwr=i(Ra),Sn=n(Ra,"P",{});var o5=s(Sn);dwr=r(o5,"The model class to instantiate is selected based on the "),nve=n(o5,"CODE",{});var rFt=s(nve);cwr=r(rFt,"model_type"),rFt.forEach(t),fwr=r(o5,` property of the config object (either
passed as an argument or loaded from `),sve=n(o5,"CODE",{});var tFt=s(sve);mwr=r(tFt,"pretrained_model_name_or_path"),tFt.forEach(t),gwr=r(o5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=n(o5,"CODE",{});var aFt=s(lve);hwr=r(aFt,"pretrained_model_name_or_path"),aFt.forEach(t),pwr=r(o5,":"),o5.forEach(t),_wr=i(Ra),Me=n(Ra,"UL",{});var so=s(Me);iE=n(so,"LI",{});var Fxe=s(iE);ive=n(Fxe,"STRONG",{});var nFt=s(ive);uwr=r(nFt,"bart"),nFt.forEach(t),bwr=r(Fxe," \u2014 "),nz=n(Fxe,"A",{href:!0});var sFt=s(nz);vwr=r(sFt,"FlaxBartForConditionalGeneration"),sFt.forEach(t),Twr=r(Fxe," (BART model)"),Fxe.forEach(t),Fwr=i(so),dE=n(so,"LI",{});var Cxe=s(dE);dve=n(Cxe,"STRONG",{});var lFt=s(dve);Cwr=r(lFt,"blenderbot"),lFt.forEach(t),Mwr=r(Cxe," \u2014 "),sz=n(Cxe,"A",{href:!0});var iFt=s(sz);Ewr=r(iFt,"FlaxBlenderbotForConditionalGeneration"),iFt.forEach(t),ywr=r(Cxe," (Blenderbot model)"),Cxe.forEach(t),wwr=i(so),cE=n(so,"LI",{});var Mxe=s(cE);cve=n(Mxe,"STRONG",{});var dFt=s(cve);Awr=r(dFt,"blenderbot-small"),dFt.forEach(t),Lwr=r(Mxe," \u2014 "),lz=n(Mxe,"A",{href:!0});var cFt=s(lz);Bwr=r(cFt,"FlaxBlenderbotSmallForConditionalGeneration"),cFt.forEach(t),xwr=r(Mxe," (BlenderbotSmall model)"),Mxe.forEach(t),kwr=i(so),fE=n(so,"LI",{});var Exe=s(fE);fve=n(Exe,"STRONG",{});var fFt=s(fve);Rwr=r(fFt,"encoder-decoder"),fFt.forEach(t),Swr=r(Exe," \u2014 "),iz=n(Exe,"A",{href:!0});var mFt=s(iz);Pwr=r(mFt,"FlaxEncoderDecoderModel"),mFt.forEach(t),$wr=r(Exe," (Encoder decoder model)"),Exe.forEach(t),Iwr=i(so),mE=n(so,"LI",{});var yxe=s(mE);mve=n(yxe,"STRONG",{});var gFt=s(mve);Nwr=r(gFt,"marian"),gFt.forEach(t),Dwr=r(yxe," \u2014 "),dz=n(yxe,"A",{href:!0});var hFt=s(dz);jwr=r(hFt,"FlaxMarianMTModel"),hFt.forEach(t),qwr=r(yxe," (Marian model)"),yxe.forEach(t),Gwr=i(so),gE=n(so,"LI",{});var wxe=s(gE);gve=n(wxe,"STRONG",{});var pFt=s(gve);Owr=r(pFt,"mbart"),pFt.forEach(t),Xwr=r(wxe," \u2014 "),cz=n(wxe,"A",{href:!0});var _Ft=s(cz);Vwr=r(_Ft,"FlaxMBartForConditionalGeneration"),_Ft.forEach(t),zwr=r(wxe," (mBART model)"),wxe.forEach(t),Wwr=i(so),hE=n(so,"LI",{});var Axe=s(hE);hve=n(Axe,"STRONG",{});var uFt=s(hve);Qwr=r(uFt,"mt5"),uFt.forEach(t),Hwr=r(Axe," \u2014 "),fz=n(Axe,"A",{href:!0});var bFt=s(fz);Uwr=r(bFt,"FlaxMT5ForConditionalGeneration"),bFt.forEach(t),Jwr=r(Axe," (mT5 model)"),Axe.forEach(t),Ywr=i(so),pE=n(so,"LI",{});var Lxe=s(pE);pve=n(Lxe,"STRONG",{});var vFt=s(pve);Kwr=r(vFt,"pegasus"),vFt.forEach(t),Zwr=r(Lxe," \u2014 "),mz=n(Lxe,"A",{href:!0});var TFt=s(mz);eAr=r(TFt,"FlaxPegasusForConditionalGeneration"),TFt.forEach(t),oAr=r(Lxe," (Pegasus model)"),Lxe.forEach(t),rAr=i(so),_E=n(so,"LI",{});var Bxe=s(_E);_ve=n(Bxe,"STRONG",{});var FFt=s(_ve);tAr=r(FFt,"t5"),FFt.forEach(t),aAr=r(Bxe," \u2014 "),gz=n(Bxe,"A",{href:!0});var CFt=s(gz);nAr=r(CFt,"FlaxT5ForConditionalGeneration"),CFt.forEach(t),sAr=r(Bxe," (T5 model)"),Bxe.forEach(t),so.forEach(t),lAr=i(Ra),uve=n(Ra,"P",{});var MFt=s(uve);iAr=r(MFt,"Examples:"),MFt.forEach(t),dAr=i(Ra),m(i7.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),tSe=i(c),gf=n(c,"H2",{class:!0});var p$e=s(gf);uE=n(p$e,"A",{id:!0,class:!0,href:!0});var EFt=s(uE);bve=n(EFt,"SPAN",{});var yFt=s(bve);m(d7.$$.fragment,yFt),yFt.forEach(t),EFt.forEach(t),cAr=i(p$e),vve=n(p$e,"SPAN",{});var wFt=s(vve);fAr=r(wFt,"FlaxAutoModelForSequenceClassification"),wFt.forEach(t),p$e.forEach(t),aSe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);m(c7.$$.fragment,Ci),mAr=i(Ci),hf=n(Ci,"P",{});var RQ=s(hf);gAr=r(RQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Tve=n(RQ,"CODE",{});var AFt=s(Tve);hAr=r(AFt,"from_pretrained()"),AFt.forEach(t),pAr=r(RQ,"class method or the "),Fve=n(RQ,"CODE",{});var LFt=s(Fve);_Ar=r(LFt,"from_config()"),LFt.forEach(t),uAr=r(RQ,`class
method.`),RQ.forEach(t),bAr=i(Ci),f7=n(Ci,"P",{});var _$e=s(f7);vAr=r(_$e,"This class cannot be instantiated directly using "),Cve=n(_$e,"CODE",{});var BFt=s(Cve);TAr=r(BFt,"__init__()"),BFt.forEach(t),FAr=r(_$e," (throws an error)."),_$e.forEach(t),CAr=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);m(m7.$$.fragment,Mi),MAr=i(Mi),Mve=n(Mi,"P",{});var xFt=s(Mve);EAr=r(xFt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),xFt.forEach(t),yAr=i(Mi),pf=n(Mi,"P",{});var SQ=s(pf);wAr=r(SQ,`Note:
Loading a model from its configuration file does `),Eve=n(SQ,"STRONG",{});var kFt=s(Eve);AAr=r(kFt,"not"),kFt.forEach(t),LAr=r(SQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yve=n(SQ,"CODE",{});var RFt=s(yve);BAr=r(RFt,"from_pretrained()"),RFt.forEach(t),xAr=r(SQ,"to load the model weights."),SQ.forEach(t),kAr=i(Mi),wve=n(Mi,"P",{});var SFt=s(wve);RAr=r(SFt,"Examples:"),SFt.forEach(t),SAr=i(Mi),m(g7.$$.fragment,Mi),Mi.forEach(t),PAr=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Sa=s(Ro);m(h7.$$.fragment,Sa),$Ar=i(Sa),Ave=n(Sa,"P",{});var PFt=s(Ave);IAr=r(PFt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),PFt.forEach(t),NAr=i(Sa),Pn=n(Sa,"P",{});var r5=s(Pn);DAr=r(r5,"The model class to instantiate is selected based on the "),Lve=n(r5,"CODE",{});var $Ft=s(Lve);jAr=r($Ft,"model_type"),$Ft.forEach(t),qAr=r(r5,` property of the config object (either
passed as an argument or loaded from `),Bve=n(r5,"CODE",{});var IFt=s(Bve);GAr=r(IFt,"pretrained_model_name_or_path"),IFt.forEach(t),OAr=r(r5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=n(r5,"CODE",{});var NFt=s(xve);XAr=r(NFt,"pretrained_model_name_or_path"),NFt.forEach(t),VAr=r(r5,":"),r5.forEach(t),zAr=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);bE=n(Ae,"LI",{});var xxe=s(bE);kve=n(xxe,"STRONG",{});var DFt=s(kve);WAr=r(DFt,"albert"),DFt.forEach(t),QAr=r(xxe," \u2014 "),hz=n(xxe,"A",{href:!0});var jFt=s(hz);HAr=r(jFt,"FlaxAlbertForSequenceClassification"),jFt.forEach(t),UAr=r(xxe," (ALBERT model)"),xxe.forEach(t),JAr=i(Ae),vE=n(Ae,"LI",{});var kxe=s(vE);Rve=n(kxe,"STRONG",{});var qFt=s(Rve);YAr=r(qFt,"bart"),qFt.forEach(t),KAr=r(kxe," \u2014 "),pz=n(kxe,"A",{href:!0});var GFt=s(pz);ZAr=r(GFt,"FlaxBartForSequenceClassification"),GFt.forEach(t),e0r=r(kxe," (BART model)"),kxe.forEach(t),o0r=i(Ae),TE=n(Ae,"LI",{});var Rxe=s(TE);Sve=n(Rxe,"STRONG",{});var OFt=s(Sve);r0r=r(OFt,"bert"),OFt.forEach(t),t0r=r(Rxe," \u2014 "),_z=n(Rxe,"A",{href:!0});var XFt=s(_z);a0r=r(XFt,"FlaxBertForSequenceClassification"),XFt.forEach(t),n0r=r(Rxe," (BERT model)"),Rxe.forEach(t),s0r=i(Ae),FE=n(Ae,"LI",{});var Sxe=s(FE);Pve=n(Sxe,"STRONG",{});var VFt=s(Pve);l0r=r(VFt,"big_bird"),VFt.forEach(t),i0r=r(Sxe," \u2014 "),uz=n(Sxe,"A",{href:!0});var zFt=s(uz);d0r=r(zFt,"FlaxBigBirdForSequenceClassification"),zFt.forEach(t),c0r=r(Sxe," (BigBird model)"),Sxe.forEach(t),f0r=i(Ae),CE=n(Ae,"LI",{});var Pxe=s(CE);$ve=n(Pxe,"STRONG",{});var WFt=s($ve);m0r=r(WFt,"distilbert"),WFt.forEach(t),g0r=r(Pxe," \u2014 "),bz=n(Pxe,"A",{href:!0});var QFt=s(bz);h0r=r(QFt,"FlaxDistilBertForSequenceClassification"),QFt.forEach(t),p0r=r(Pxe," (DistilBERT model)"),Pxe.forEach(t),_0r=i(Ae),ME=n(Ae,"LI",{});var $xe=s(ME);Ive=n($xe,"STRONG",{});var HFt=s(Ive);u0r=r(HFt,"electra"),HFt.forEach(t),b0r=r($xe," \u2014 "),vz=n($xe,"A",{href:!0});var UFt=s(vz);v0r=r(UFt,"FlaxElectraForSequenceClassification"),UFt.forEach(t),T0r=r($xe," (ELECTRA model)"),$xe.forEach(t),F0r=i(Ae),EE=n(Ae,"LI",{});var Ixe=s(EE);Nve=n(Ixe,"STRONG",{});var JFt=s(Nve);C0r=r(JFt,"mbart"),JFt.forEach(t),M0r=r(Ixe," \u2014 "),Tz=n(Ixe,"A",{href:!0});var YFt=s(Tz);E0r=r(YFt,"FlaxMBartForSequenceClassification"),YFt.forEach(t),y0r=r(Ixe," (mBART model)"),Ixe.forEach(t),w0r=i(Ae),yE=n(Ae,"LI",{});var Nxe=s(yE);Dve=n(Nxe,"STRONG",{});var KFt=s(Dve);A0r=r(KFt,"roberta"),KFt.forEach(t),L0r=r(Nxe," \u2014 "),Fz=n(Nxe,"A",{href:!0});var ZFt=s(Fz);B0r=r(ZFt,"FlaxRobertaForSequenceClassification"),ZFt.forEach(t),x0r=r(Nxe," (RoBERTa model)"),Nxe.forEach(t),k0r=i(Ae),wE=n(Ae,"LI",{});var Dxe=s(wE);jve=n(Dxe,"STRONG",{});var eCt=s(jve);R0r=r(eCt,"roformer"),eCt.forEach(t),S0r=r(Dxe," \u2014 "),Cz=n(Dxe,"A",{href:!0});var oCt=s(Cz);P0r=r(oCt,"FlaxRoFormerForSequenceClassification"),oCt.forEach(t),$0r=r(Dxe," (RoFormer model)"),Dxe.forEach(t),I0r=i(Ae),AE=n(Ae,"LI",{});var jxe=s(AE);qve=n(jxe,"STRONG",{});var rCt=s(qve);N0r=r(rCt,"xlm-roberta"),rCt.forEach(t),D0r=r(jxe," \u2014 "),Mz=n(jxe,"A",{href:!0});var tCt=s(Mz);j0r=r(tCt,"FlaxXLMRobertaForSequenceClassification"),tCt.forEach(t),q0r=r(jxe," (XLM-RoBERTa model)"),jxe.forEach(t),Ae.forEach(t),G0r=i(Sa),Gve=n(Sa,"P",{});var aCt=s(Gve);O0r=r(aCt,"Examples:"),aCt.forEach(t),X0r=i(Sa),m(p7.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),nSe=i(c),_f=n(c,"H2",{class:!0});var u$e=s(_f);LE=n(u$e,"A",{id:!0,class:!0,href:!0});var nCt=s(LE);Ove=n(nCt,"SPAN",{});var sCt=s(Ove);m(_7.$$.fragment,sCt),sCt.forEach(t),nCt.forEach(t),V0r=i(u$e),Xve=n(u$e,"SPAN",{});var lCt=s(Xve);z0r=r(lCt,"FlaxAutoModelForQuestionAnswering"),lCt.forEach(t),u$e.forEach(t),sSe=i(c),Dr=n(c,"DIV",{class:!0});var Ei=s(Dr);m(u7.$$.fragment,Ei),W0r=i(Ei),uf=n(Ei,"P",{});var PQ=s(uf);Q0r=r(PQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Vve=n(PQ,"CODE",{});var iCt=s(Vve);H0r=r(iCt,"from_pretrained()"),iCt.forEach(t),U0r=r(PQ,"class method or the "),zve=n(PQ,"CODE",{});var dCt=s(zve);J0r=r(dCt,"from_config()"),dCt.forEach(t),Y0r=r(PQ,`class
method.`),PQ.forEach(t),K0r=i(Ei),b7=n(Ei,"P",{});var b$e=s(b7);Z0r=r(b$e,"This class cannot be instantiated directly using "),Wve=n(b$e,"CODE",{});var cCt=s(Wve);eLr=r(cCt,"__init__()"),cCt.forEach(t),oLr=r(b$e," (throws an error)."),b$e.forEach(t),rLr=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);m(v7.$$.fragment,yi),tLr=i(yi),Qve=n(yi,"P",{});var fCt=s(Qve);aLr=r(fCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fCt.forEach(t),nLr=i(yi),bf=n(yi,"P",{});var $Q=s(bf);sLr=r($Q,`Note:
Loading a model from its configuration file does `),Hve=n($Q,"STRONG",{});var mCt=s(Hve);lLr=r(mCt,"not"),mCt.forEach(t),iLr=r($Q,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uve=n($Q,"CODE",{});var gCt=s(Uve);dLr=r(gCt,"from_pretrained()"),gCt.forEach(t),cLr=r($Q,"to load the model weights."),$Q.forEach(t),fLr=i(yi),Jve=n(yi,"P",{});var hCt=s(Jve);mLr=r(hCt,"Examples:"),hCt.forEach(t),gLr=i(yi),m(T7.$$.fragment,yi),yi.forEach(t),hLr=i(Ei),So=n(Ei,"DIV",{class:!0});var Pa=s(So);m(F7.$$.fragment,Pa),pLr=i(Pa),Yve=n(Pa,"P",{});var pCt=s(Yve);_Lr=r(pCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),pCt.forEach(t),uLr=i(Pa),$n=n(Pa,"P",{});var t5=s($n);bLr=r(t5,"The model class to instantiate is selected based on the "),Kve=n(t5,"CODE",{});var _Ct=s(Kve);vLr=r(_Ct,"model_type"),_Ct.forEach(t),TLr=r(t5,` property of the config object (either
passed as an argument or loaded from `),Zve=n(t5,"CODE",{});var uCt=s(Zve);FLr=r(uCt,"pretrained_model_name_or_path"),uCt.forEach(t),CLr=r(t5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eTe=n(t5,"CODE",{});var bCt=s(eTe);MLr=r(bCt,"pretrained_model_name_or_path"),bCt.forEach(t),ELr=r(t5,":"),t5.forEach(t),yLr=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);BE=n(Le,"LI",{});var qxe=s(BE);oTe=n(qxe,"STRONG",{});var vCt=s(oTe);wLr=r(vCt,"albert"),vCt.forEach(t),ALr=r(qxe," \u2014 "),Ez=n(qxe,"A",{href:!0});var TCt=s(Ez);LLr=r(TCt,"FlaxAlbertForQuestionAnswering"),TCt.forEach(t),BLr=r(qxe," (ALBERT model)"),qxe.forEach(t),xLr=i(Le),xE=n(Le,"LI",{});var Gxe=s(xE);rTe=n(Gxe,"STRONG",{});var FCt=s(rTe);kLr=r(FCt,"bart"),FCt.forEach(t),RLr=r(Gxe," \u2014 "),yz=n(Gxe,"A",{href:!0});var CCt=s(yz);SLr=r(CCt,"FlaxBartForQuestionAnswering"),CCt.forEach(t),PLr=r(Gxe," (BART model)"),Gxe.forEach(t),$Lr=i(Le),kE=n(Le,"LI",{});var Oxe=s(kE);tTe=n(Oxe,"STRONG",{});var MCt=s(tTe);ILr=r(MCt,"bert"),MCt.forEach(t),NLr=r(Oxe," \u2014 "),wz=n(Oxe,"A",{href:!0});var ECt=s(wz);DLr=r(ECt,"FlaxBertForQuestionAnswering"),ECt.forEach(t),jLr=r(Oxe," (BERT model)"),Oxe.forEach(t),qLr=i(Le),RE=n(Le,"LI",{});var Xxe=s(RE);aTe=n(Xxe,"STRONG",{});var yCt=s(aTe);GLr=r(yCt,"big_bird"),yCt.forEach(t),OLr=r(Xxe," \u2014 "),Az=n(Xxe,"A",{href:!0});var wCt=s(Az);XLr=r(wCt,"FlaxBigBirdForQuestionAnswering"),wCt.forEach(t),VLr=r(Xxe," (BigBird model)"),Xxe.forEach(t),zLr=i(Le),SE=n(Le,"LI",{});var Vxe=s(SE);nTe=n(Vxe,"STRONG",{});var ACt=s(nTe);WLr=r(ACt,"distilbert"),ACt.forEach(t),QLr=r(Vxe," \u2014 "),Lz=n(Vxe,"A",{href:!0});var LCt=s(Lz);HLr=r(LCt,"FlaxDistilBertForQuestionAnswering"),LCt.forEach(t),ULr=r(Vxe," (DistilBERT model)"),Vxe.forEach(t),JLr=i(Le),PE=n(Le,"LI",{});var zxe=s(PE);sTe=n(zxe,"STRONG",{});var BCt=s(sTe);YLr=r(BCt,"electra"),BCt.forEach(t),KLr=r(zxe," \u2014 "),Bz=n(zxe,"A",{href:!0});var xCt=s(Bz);ZLr=r(xCt,"FlaxElectraForQuestionAnswering"),xCt.forEach(t),e7r=r(zxe," (ELECTRA model)"),zxe.forEach(t),o7r=i(Le),$E=n(Le,"LI",{});var Wxe=s($E);lTe=n(Wxe,"STRONG",{});var kCt=s(lTe);r7r=r(kCt,"mbart"),kCt.forEach(t),t7r=r(Wxe," \u2014 "),xz=n(Wxe,"A",{href:!0});var RCt=s(xz);a7r=r(RCt,"FlaxMBartForQuestionAnswering"),RCt.forEach(t),n7r=r(Wxe," (mBART model)"),Wxe.forEach(t),s7r=i(Le),IE=n(Le,"LI",{});var Qxe=s(IE);iTe=n(Qxe,"STRONG",{});var SCt=s(iTe);l7r=r(SCt,"roberta"),SCt.forEach(t),i7r=r(Qxe," \u2014 "),kz=n(Qxe,"A",{href:!0});var PCt=s(kz);d7r=r(PCt,"FlaxRobertaForQuestionAnswering"),PCt.forEach(t),c7r=r(Qxe," (RoBERTa model)"),Qxe.forEach(t),f7r=i(Le),NE=n(Le,"LI",{});var Hxe=s(NE);dTe=n(Hxe,"STRONG",{});var $Ct=s(dTe);m7r=r($Ct,"roformer"),$Ct.forEach(t),g7r=r(Hxe," \u2014 "),Rz=n(Hxe,"A",{href:!0});var ICt=s(Rz);h7r=r(ICt,"FlaxRoFormerForQuestionAnswering"),ICt.forEach(t),p7r=r(Hxe," (RoFormer model)"),Hxe.forEach(t),_7r=i(Le),DE=n(Le,"LI",{});var Uxe=s(DE);cTe=n(Uxe,"STRONG",{});var NCt=s(cTe);u7r=r(NCt,"xlm-roberta"),NCt.forEach(t),b7r=r(Uxe," \u2014 "),Sz=n(Uxe,"A",{href:!0});var DCt=s(Sz);v7r=r(DCt,"FlaxXLMRobertaForQuestionAnswering"),DCt.forEach(t),T7r=r(Uxe," (XLM-RoBERTa model)"),Uxe.forEach(t),Le.forEach(t),F7r=i(Pa),fTe=n(Pa,"P",{});var jCt=s(fTe);C7r=r(jCt,"Examples:"),jCt.forEach(t),M7r=i(Pa),m(C7.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),lSe=i(c),vf=n(c,"H2",{class:!0});var v$e=s(vf);jE=n(v$e,"A",{id:!0,class:!0,href:!0});var qCt=s(jE);mTe=n(qCt,"SPAN",{});var GCt=s(mTe);m(M7.$$.fragment,GCt),GCt.forEach(t),qCt.forEach(t),E7r=i(v$e),gTe=n(v$e,"SPAN",{});var OCt=s(gTe);y7r=r(OCt,"FlaxAutoModelForTokenClassification"),OCt.forEach(t),v$e.forEach(t),iSe=i(c),jr=n(c,"DIV",{class:!0});var wi=s(jr);m(E7.$$.fragment,wi),w7r=i(wi),Tf=n(wi,"P",{});var IQ=s(Tf);A7r=r(IQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hTe=n(IQ,"CODE",{});var XCt=s(hTe);L7r=r(XCt,"from_pretrained()"),XCt.forEach(t),B7r=r(IQ,"class method or the "),pTe=n(IQ,"CODE",{});var VCt=s(pTe);x7r=r(VCt,"from_config()"),VCt.forEach(t),k7r=r(IQ,`class
method.`),IQ.forEach(t),R7r=i(wi),y7=n(wi,"P",{});var T$e=s(y7);S7r=r(T$e,"This class cannot be instantiated directly using "),_Te=n(T$e,"CODE",{});var zCt=s(_Te);P7r=r(zCt,"__init__()"),zCt.forEach(t),$7r=r(T$e," (throws an error)."),T$e.forEach(t),I7r=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(w7.$$.fragment,Ai),N7r=i(Ai),uTe=n(Ai,"P",{});var WCt=s(uTe);D7r=r(WCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),WCt.forEach(t),j7r=i(Ai),Ff=n(Ai,"P",{});var NQ=s(Ff);q7r=r(NQ,`Note:
Loading a model from its configuration file does `),bTe=n(NQ,"STRONG",{});var QCt=s(bTe);G7r=r(QCt,"not"),QCt.forEach(t),O7r=r(NQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vTe=n(NQ,"CODE",{});var HCt=s(vTe);X7r=r(HCt,"from_pretrained()"),HCt.forEach(t),V7r=r(NQ,"to load the model weights."),NQ.forEach(t),z7r=i(Ai),TTe=n(Ai,"P",{});var UCt=s(TTe);W7r=r(UCt,"Examples:"),UCt.forEach(t),Q7r=i(Ai),m(A7.$$.fragment,Ai),Ai.forEach(t),H7r=i(wi),Po=n(wi,"DIV",{class:!0});var $a=s(Po);m(L7.$$.fragment,$a),U7r=i($a),FTe=n($a,"P",{});var JCt=s(FTe);J7r=r(JCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JCt.forEach(t),Y7r=i($a),In=n($a,"P",{});var a5=s(In);K7r=r(a5,"The model class to instantiate is selected based on the "),CTe=n(a5,"CODE",{});var YCt=s(CTe);Z7r=r(YCt,"model_type"),YCt.forEach(t),e8r=r(a5,` property of the config object (either
passed as an argument or loaded from `),MTe=n(a5,"CODE",{});var KCt=s(MTe);o8r=r(KCt,"pretrained_model_name_or_path"),KCt.forEach(t),r8r=r(a5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=n(a5,"CODE",{});var ZCt=s(ETe);t8r=r(ZCt,"pretrained_model_name_or_path"),ZCt.forEach(t),a8r=r(a5,":"),a5.forEach(t),n8r=i($a),Se=n($a,"UL",{});var Oo=s(Se);qE=n(Oo,"LI",{});var Jxe=s(qE);yTe=n(Jxe,"STRONG",{});var eMt=s(yTe);s8r=r(eMt,"albert"),eMt.forEach(t),l8r=r(Jxe," \u2014 "),Pz=n(Jxe,"A",{href:!0});var oMt=s(Pz);i8r=r(oMt,"FlaxAlbertForTokenClassification"),oMt.forEach(t),d8r=r(Jxe," (ALBERT model)"),Jxe.forEach(t),c8r=i(Oo),GE=n(Oo,"LI",{});var Yxe=s(GE);wTe=n(Yxe,"STRONG",{});var rMt=s(wTe);f8r=r(rMt,"bert"),rMt.forEach(t),m8r=r(Yxe," \u2014 "),$z=n(Yxe,"A",{href:!0});var tMt=s($z);g8r=r(tMt,"FlaxBertForTokenClassification"),tMt.forEach(t),h8r=r(Yxe," (BERT model)"),Yxe.forEach(t),p8r=i(Oo),OE=n(Oo,"LI",{});var Kxe=s(OE);ATe=n(Kxe,"STRONG",{});var aMt=s(ATe);_8r=r(aMt,"big_bird"),aMt.forEach(t),u8r=r(Kxe," \u2014 "),Iz=n(Kxe,"A",{href:!0});var nMt=s(Iz);b8r=r(nMt,"FlaxBigBirdForTokenClassification"),nMt.forEach(t),v8r=r(Kxe," (BigBird model)"),Kxe.forEach(t),T8r=i(Oo),XE=n(Oo,"LI",{});var Zxe=s(XE);LTe=n(Zxe,"STRONG",{});var sMt=s(LTe);F8r=r(sMt,"distilbert"),sMt.forEach(t),C8r=r(Zxe," \u2014 "),Nz=n(Zxe,"A",{href:!0});var lMt=s(Nz);M8r=r(lMt,"FlaxDistilBertForTokenClassification"),lMt.forEach(t),E8r=r(Zxe," (DistilBERT model)"),Zxe.forEach(t),y8r=i(Oo),VE=n(Oo,"LI",{});var eke=s(VE);BTe=n(eke,"STRONG",{});var iMt=s(BTe);w8r=r(iMt,"electra"),iMt.forEach(t),A8r=r(eke," \u2014 "),Dz=n(eke,"A",{href:!0});var dMt=s(Dz);L8r=r(dMt,"FlaxElectraForTokenClassification"),dMt.forEach(t),B8r=r(eke," (ELECTRA model)"),eke.forEach(t),x8r=i(Oo),zE=n(Oo,"LI",{});var oke=s(zE);xTe=n(oke,"STRONG",{});var cMt=s(xTe);k8r=r(cMt,"roberta"),cMt.forEach(t),R8r=r(oke," \u2014 "),jz=n(oke,"A",{href:!0});var fMt=s(jz);S8r=r(fMt,"FlaxRobertaForTokenClassification"),fMt.forEach(t),P8r=r(oke," (RoBERTa model)"),oke.forEach(t),$8r=i(Oo),WE=n(Oo,"LI",{});var rke=s(WE);kTe=n(rke,"STRONG",{});var mMt=s(kTe);I8r=r(mMt,"roformer"),mMt.forEach(t),N8r=r(rke," \u2014 "),qz=n(rke,"A",{href:!0});var gMt=s(qz);D8r=r(gMt,"FlaxRoFormerForTokenClassification"),gMt.forEach(t),j8r=r(rke," (RoFormer model)"),rke.forEach(t),q8r=i(Oo),QE=n(Oo,"LI",{});var tke=s(QE);RTe=n(tke,"STRONG",{});var hMt=s(RTe);G8r=r(hMt,"xlm-roberta"),hMt.forEach(t),O8r=r(tke," \u2014 "),Gz=n(tke,"A",{href:!0});var pMt=s(Gz);X8r=r(pMt,"FlaxXLMRobertaForTokenClassification"),pMt.forEach(t),V8r=r(tke," (XLM-RoBERTa model)"),tke.forEach(t),Oo.forEach(t),z8r=i($a),STe=n($a,"P",{});var _Mt=s(STe);W8r=r(_Mt,"Examples:"),_Mt.forEach(t),Q8r=i($a),m(B7.$$.fragment,$a),$a.forEach(t),wi.forEach(t),dSe=i(c),Cf=n(c,"H2",{class:!0});var F$e=s(Cf);HE=n(F$e,"A",{id:!0,class:!0,href:!0});var uMt=s(HE);PTe=n(uMt,"SPAN",{});var bMt=s(PTe);m(x7.$$.fragment,bMt),bMt.forEach(t),uMt.forEach(t),H8r=i(F$e),$Te=n(F$e,"SPAN",{});var vMt=s($Te);U8r=r(vMt,"FlaxAutoModelForMultipleChoice"),vMt.forEach(t),F$e.forEach(t),cSe=i(c),qr=n(c,"DIV",{class:!0});var Li=s(qr);m(k7.$$.fragment,Li),J8r=i(Li),Mf=n(Li,"P",{});var DQ=s(Mf);Y8r=r(DQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ITe=n(DQ,"CODE",{});var TMt=s(ITe);K8r=r(TMt,"from_pretrained()"),TMt.forEach(t),Z8r=r(DQ,"class method or the "),NTe=n(DQ,"CODE",{});var FMt=s(NTe);e9r=r(FMt,"from_config()"),FMt.forEach(t),o9r=r(DQ,`class
method.`),DQ.forEach(t),r9r=i(Li),R7=n(Li,"P",{});var C$e=s(R7);t9r=r(C$e,"This class cannot be instantiated directly using "),DTe=n(C$e,"CODE",{});var CMt=s(DTe);a9r=r(CMt,"__init__()"),CMt.forEach(t),n9r=r(C$e," (throws an error)."),C$e.forEach(t),s9r=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);m(S7.$$.fragment,Bi),l9r=i(Bi),jTe=n(Bi,"P",{});var MMt=s(jTe);i9r=r(MMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),MMt.forEach(t),d9r=i(Bi),Ef=n(Bi,"P",{});var jQ=s(Ef);c9r=r(jQ,`Note:
Loading a model from its configuration file does `),qTe=n(jQ,"STRONG",{});var EMt=s(qTe);f9r=r(EMt,"not"),EMt.forEach(t),m9r=r(jQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GTe=n(jQ,"CODE",{});var yMt=s(GTe);g9r=r(yMt,"from_pretrained()"),yMt.forEach(t),h9r=r(jQ,"to load the model weights."),jQ.forEach(t),p9r=i(Bi),OTe=n(Bi,"P",{});var wMt=s(OTe);_9r=r(wMt,"Examples:"),wMt.forEach(t),u9r=i(Bi),m(P7.$$.fragment,Bi),Bi.forEach(t),b9r=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m($7.$$.fragment,Ia),v9r=i(Ia),XTe=n(Ia,"P",{});var AMt=s(XTe);T9r=r(AMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),AMt.forEach(t),F9r=i(Ia),Nn=n(Ia,"P",{});var n5=s(Nn);C9r=r(n5,"The model class to instantiate is selected based on the "),VTe=n(n5,"CODE",{});var LMt=s(VTe);M9r=r(LMt,"model_type"),LMt.forEach(t),E9r=r(n5,` property of the config object (either
passed as an argument or loaded from `),zTe=n(n5,"CODE",{});var BMt=s(zTe);y9r=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),w9r=r(n5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=n(n5,"CODE",{});var xMt=s(WTe);A9r=r(xMt,"pretrained_model_name_or_path"),xMt.forEach(t),L9r=r(n5,":"),n5.forEach(t),B9r=i(Ia),Pe=n(Ia,"UL",{});var Xo=s(Pe);UE=n(Xo,"LI",{});var ake=s(UE);QTe=n(ake,"STRONG",{});var kMt=s(QTe);x9r=r(kMt,"albert"),kMt.forEach(t),k9r=r(ake," \u2014 "),Oz=n(ake,"A",{href:!0});var RMt=s(Oz);R9r=r(RMt,"FlaxAlbertForMultipleChoice"),RMt.forEach(t),S9r=r(ake," (ALBERT model)"),ake.forEach(t),P9r=i(Xo),JE=n(Xo,"LI",{});var nke=s(JE);HTe=n(nke,"STRONG",{});var SMt=s(HTe);$9r=r(SMt,"bert"),SMt.forEach(t),I9r=r(nke," \u2014 "),Xz=n(nke,"A",{href:!0});var PMt=s(Xz);N9r=r(PMt,"FlaxBertForMultipleChoice"),PMt.forEach(t),D9r=r(nke," (BERT model)"),nke.forEach(t),j9r=i(Xo),YE=n(Xo,"LI",{});var ske=s(YE);UTe=n(ske,"STRONG",{});var $Mt=s(UTe);q9r=r($Mt,"big_bird"),$Mt.forEach(t),G9r=r(ske," \u2014 "),Vz=n(ske,"A",{href:!0});var IMt=s(Vz);O9r=r(IMt,"FlaxBigBirdForMultipleChoice"),IMt.forEach(t),X9r=r(ske," (BigBird model)"),ske.forEach(t),V9r=i(Xo),KE=n(Xo,"LI",{});var lke=s(KE);JTe=n(lke,"STRONG",{});var NMt=s(JTe);z9r=r(NMt,"distilbert"),NMt.forEach(t),W9r=r(lke," \u2014 "),zz=n(lke,"A",{href:!0});var DMt=s(zz);Q9r=r(DMt,"FlaxDistilBertForMultipleChoice"),DMt.forEach(t),H9r=r(lke," (DistilBERT model)"),lke.forEach(t),U9r=i(Xo),ZE=n(Xo,"LI",{});var ike=s(ZE);YTe=n(ike,"STRONG",{});var jMt=s(YTe);J9r=r(jMt,"electra"),jMt.forEach(t),Y9r=r(ike," \u2014 "),Wz=n(ike,"A",{href:!0});var qMt=s(Wz);K9r=r(qMt,"FlaxElectraForMultipleChoice"),qMt.forEach(t),Z9r=r(ike," (ELECTRA model)"),ike.forEach(t),eBr=i(Xo),e3=n(Xo,"LI",{});var dke=s(e3);KTe=n(dke,"STRONG",{});var GMt=s(KTe);oBr=r(GMt,"roberta"),GMt.forEach(t),rBr=r(dke," \u2014 "),Qz=n(dke,"A",{href:!0});var OMt=s(Qz);tBr=r(OMt,"FlaxRobertaForMultipleChoice"),OMt.forEach(t),aBr=r(dke," (RoBERTa model)"),dke.forEach(t),nBr=i(Xo),o3=n(Xo,"LI",{});var cke=s(o3);ZTe=n(cke,"STRONG",{});var XMt=s(ZTe);sBr=r(XMt,"roformer"),XMt.forEach(t),lBr=r(cke," \u2014 "),Hz=n(cke,"A",{href:!0});var VMt=s(Hz);iBr=r(VMt,"FlaxRoFormerForMultipleChoice"),VMt.forEach(t),dBr=r(cke," (RoFormer model)"),cke.forEach(t),cBr=i(Xo),r3=n(Xo,"LI",{});var fke=s(r3);eFe=n(fke,"STRONG",{});var zMt=s(eFe);fBr=r(zMt,"xlm-roberta"),zMt.forEach(t),mBr=r(fke," \u2014 "),Uz=n(fke,"A",{href:!0});var WMt=s(Uz);gBr=r(WMt,"FlaxXLMRobertaForMultipleChoice"),WMt.forEach(t),hBr=r(fke," (XLM-RoBERTa model)"),fke.forEach(t),Xo.forEach(t),pBr=i(Ia),oFe=n(Ia,"P",{});var QMt=s(oFe);_Br=r(QMt,"Examples:"),QMt.forEach(t),uBr=i(Ia),m(I7.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),fSe=i(c),yf=n(c,"H2",{class:!0});var M$e=s(yf);t3=n(M$e,"A",{id:!0,class:!0,href:!0});var HMt=s(t3);rFe=n(HMt,"SPAN",{});var UMt=s(rFe);m(N7.$$.fragment,UMt),UMt.forEach(t),HMt.forEach(t),bBr=i(M$e),tFe=n(M$e,"SPAN",{});var JMt=s(tFe);vBr=r(JMt,"FlaxAutoModelForNextSentencePrediction"),JMt.forEach(t),M$e.forEach(t),mSe=i(c),Gr=n(c,"DIV",{class:!0});var xi=s(Gr);m(D7.$$.fragment,xi),TBr=i(xi),wf=n(xi,"P",{});var qQ=s(wf);FBr=r(qQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aFe=n(qQ,"CODE",{});var YMt=s(aFe);CBr=r(YMt,"from_pretrained()"),YMt.forEach(t),MBr=r(qQ,"class method or the "),nFe=n(qQ,"CODE",{});var KMt=s(nFe);EBr=r(KMt,"from_config()"),KMt.forEach(t),yBr=r(qQ,`class
method.`),qQ.forEach(t),wBr=i(xi),j7=n(xi,"P",{});var E$e=s(j7);ABr=r(E$e,"This class cannot be instantiated directly using "),sFe=n(E$e,"CODE",{});var ZMt=s(sFe);LBr=r(ZMt,"__init__()"),ZMt.forEach(t),BBr=r(E$e," (throws an error)."),E$e.forEach(t),xBr=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);m(q7.$$.fragment,ki),kBr=i(ki),lFe=n(ki,"P",{});var e4t=s(lFe);RBr=r(e4t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),e4t.forEach(t),SBr=i(ki),Af=n(ki,"P",{});var GQ=s(Af);PBr=r(GQ,`Note:
Loading a model from its configuration file does `),iFe=n(GQ,"STRONG",{});var o4t=s(iFe);$Br=r(o4t,"not"),o4t.forEach(t),IBr=r(GQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dFe=n(GQ,"CODE",{});var r4t=s(dFe);NBr=r(r4t,"from_pretrained()"),r4t.forEach(t),DBr=r(GQ,"to load the model weights."),GQ.forEach(t),jBr=i(ki),cFe=n(ki,"P",{});var t4t=s(cFe);qBr=r(t4t,"Examples:"),t4t.forEach(t),GBr=i(ki),m(G7.$$.fragment,ki),ki.forEach(t),OBr=i(xi),Io=n(xi,"DIV",{class:!0});var Na=s(Io);m(O7.$$.fragment,Na),XBr=i(Na),fFe=n(Na,"P",{});var a4t=s(fFe);VBr=r(a4t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),a4t.forEach(t),zBr=i(Na),Dn=n(Na,"P",{});var s5=s(Dn);WBr=r(s5,"The model class to instantiate is selected based on the "),mFe=n(s5,"CODE",{});var n4t=s(mFe);QBr=r(n4t,"model_type"),n4t.forEach(t),HBr=r(s5,` property of the config object (either
passed as an argument or loaded from `),gFe=n(s5,"CODE",{});var s4t=s(gFe);UBr=r(s4t,"pretrained_model_name_or_path"),s4t.forEach(t),JBr=r(s5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=n(s5,"CODE",{});var l4t=s(hFe);YBr=r(l4t,"pretrained_model_name_or_path"),l4t.forEach(t),KBr=r(s5,":"),s5.forEach(t),ZBr=i(Na),pFe=n(Na,"UL",{});var i4t=s(pFe);a3=n(i4t,"LI",{});var mke=s(a3);_Fe=n(mke,"STRONG",{});var d4t=s(_Fe);exr=r(d4t,"bert"),d4t.forEach(t),oxr=r(mke," \u2014 "),Jz=n(mke,"A",{href:!0});var c4t=s(Jz);rxr=r(c4t,"FlaxBertForNextSentencePrediction"),c4t.forEach(t),txr=r(mke," (BERT model)"),mke.forEach(t),i4t.forEach(t),axr=i(Na),uFe=n(Na,"P",{});var f4t=s(uFe);nxr=r(f4t,"Examples:"),f4t.forEach(t),sxr=i(Na),m(X7.$$.fragment,Na),Na.forEach(t),xi.forEach(t),gSe=i(c),Lf=n(c,"H2",{class:!0});var y$e=s(Lf);n3=n(y$e,"A",{id:!0,class:!0,href:!0});var m4t=s(n3);bFe=n(m4t,"SPAN",{});var g4t=s(bFe);m(V7.$$.fragment,g4t),g4t.forEach(t),m4t.forEach(t),lxr=i(y$e),vFe=n(y$e,"SPAN",{});var h4t=s(vFe);ixr=r(h4t,"FlaxAutoModelForImageClassification"),h4t.forEach(t),y$e.forEach(t),hSe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(z7.$$.fragment,Ri),dxr=i(Ri),Bf=n(Ri,"P",{});var OQ=s(Bf);cxr=r(OQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TFe=n(OQ,"CODE",{});var p4t=s(TFe);fxr=r(p4t,"from_pretrained()"),p4t.forEach(t),mxr=r(OQ,"class method or the "),FFe=n(OQ,"CODE",{});var _4t=s(FFe);gxr=r(_4t,"from_config()"),_4t.forEach(t),hxr=r(OQ,`class
method.`),OQ.forEach(t),pxr=i(Ri),W7=n(Ri,"P",{});var w$e=s(W7);_xr=r(w$e,"This class cannot be instantiated directly using "),CFe=n(w$e,"CODE",{});var u4t=s(CFe);uxr=r(u4t,"__init__()"),u4t.forEach(t),bxr=r(w$e," (throws an error)."),w$e.forEach(t),vxr=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);m(Q7.$$.fragment,Si),Txr=i(Si),MFe=n(Si,"P",{});var b4t=s(MFe);Fxr=r(b4t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),b4t.forEach(t),Cxr=i(Si),xf=n(Si,"P",{});var XQ=s(xf);Mxr=r(XQ,`Note:
Loading a model from its configuration file does `),EFe=n(XQ,"STRONG",{});var v4t=s(EFe);Exr=r(v4t,"not"),v4t.forEach(t),yxr=r(XQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yFe=n(XQ,"CODE",{});var T4t=s(yFe);wxr=r(T4t,"from_pretrained()"),T4t.forEach(t),Axr=r(XQ,"to load the model weights."),XQ.forEach(t),Lxr=i(Si),wFe=n(Si,"P",{});var F4t=s(wFe);Bxr=r(F4t,"Examples:"),F4t.forEach(t),xxr=i(Si),m(H7.$$.fragment,Si),Si.forEach(t),kxr=i(Ri),No=n(Ri,"DIV",{class:!0});var Da=s(No);m(U7.$$.fragment,Da),Rxr=i(Da),AFe=n(Da,"P",{});var C4t=s(AFe);Sxr=r(C4t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),C4t.forEach(t),Pxr=i(Da),jn=n(Da,"P",{});var l5=s(jn);$xr=r(l5,"The model class to instantiate is selected based on the "),LFe=n(l5,"CODE",{});var M4t=s(LFe);Ixr=r(M4t,"model_type"),M4t.forEach(t),Nxr=r(l5,` property of the config object (either
passed as an argument or loaded from `),BFe=n(l5,"CODE",{});var E4t=s(BFe);Dxr=r(E4t,"pretrained_model_name_or_path"),E4t.forEach(t),jxr=r(l5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=n(l5,"CODE",{});var y4t=s(xFe);qxr=r(y4t,"pretrained_model_name_or_path"),y4t.forEach(t),Gxr=r(l5,":"),l5.forEach(t),Oxr=i(Da),J7=n(Da,"UL",{});var A$e=s(J7);s3=n(A$e,"LI",{});var gke=s(s3);kFe=n(gke,"STRONG",{});var w4t=s(kFe);Xxr=r(w4t,"beit"),w4t.forEach(t),Vxr=r(gke," \u2014 "),Yz=n(gke,"A",{href:!0});var A4t=s(Yz);zxr=r(A4t,"FlaxBeitForImageClassification"),A4t.forEach(t),Wxr=r(gke," (BEiT model)"),gke.forEach(t),Qxr=i(A$e),l3=n(A$e,"LI",{});var hke=s(l3);RFe=n(hke,"STRONG",{});var L4t=s(RFe);Hxr=r(L4t,"vit"),L4t.forEach(t),Uxr=r(hke," \u2014 "),Kz=n(hke,"A",{href:!0});var B4t=s(Kz);Jxr=r(B4t,"FlaxViTForImageClassification"),B4t.forEach(t),Yxr=r(hke," (ViT model)"),hke.forEach(t),A$e.forEach(t),Kxr=i(Da),SFe=n(Da,"P",{});var x4t=s(SFe);Zxr=r(x4t,"Examples:"),x4t.forEach(t),ekr=i(Da),m(Y7.$$.fragment,Da),Da.forEach(t),Ri.forEach(t),pSe=i(c),kf=n(c,"H2",{class:!0});var L$e=s(kf);i3=n(L$e,"A",{id:!0,class:!0,href:!0});var k4t=s(i3);PFe=n(k4t,"SPAN",{});var R4t=s(PFe);m(K7.$$.fragment,R4t),R4t.forEach(t),k4t.forEach(t),okr=i(L$e),$Fe=n(L$e,"SPAN",{});var S4t=s($Fe);rkr=r(S4t,"FlaxAutoModelForVision2Seq"),S4t.forEach(t),L$e.forEach(t),_Se=i(c),Xr=n(c,"DIV",{class:!0});var Pi=s(Xr);m(Z7.$$.fragment,Pi),tkr=i(Pi),Rf=n(Pi,"P",{});var VQ=s(Rf);akr=r(VQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IFe=n(VQ,"CODE",{});var P4t=s(IFe);nkr=r(P4t,"from_pretrained()"),P4t.forEach(t),skr=r(VQ,"class method or the "),NFe=n(VQ,"CODE",{});var $4t=s(NFe);lkr=r($4t,"from_config()"),$4t.forEach(t),ikr=r(VQ,`class
method.`),VQ.forEach(t),dkr=i(Pi),e8=n(Pi,"P",{});var B$e=s(e8);ckr=r(B$e,"This class cannot be instantiated directly using "),DFe=n(B$e,"CODE",{});var I4t=s(DFe);fkr=r(I4t,"__init__()"),I4t.forEach(t),mkr=r(B$e," (throws an error)."),B$e.forEach(t),gkr=i(Pi),Nt=n(Pi,"DIV",{class:!0});var $i=s(Nt);m(o8.$$.fragment,$i),hkr=i($i),jFe=n($i,"P",{});var N4t=s(jFe);pkr=r(N4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),N4t.forEach(t),_kr=i($i),Sf=n($i,"P",{});var zQ=s(Sf);ukr=r(zQ,`Note:
Loading a model from its configuration file does `),qFe=n(zQ,"STRONG",{});var D4t=s(qFe);bkr=r(D4t,"not"),D4t.forEach(t),vkr=r(zQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GFe=n(zQ,"CODE",{});var j4t=s(GFe);Tkr=r(j4t,"from_pretrained()"),j4t.forEach(t),Fkr=r(zQ,"to load the model weights."),zQ.forEach(t),Ckr=i($i),OFe=n($i,"P",{});var q4t=s(OFe);Mkr=r(q4t,"Examples:"),q4t.forEach(t),Ekr=i($i),m(r8.$$.fragment,$i),$i.forEach(t),ykr=i(Pi),Do=n(Pi,"DIV",{class:!0});var ja=s(Do);m(t8.$$.fragment,ja),wkr=i(ja),XFe=n(ja,"P",{});var G4t=s(XFe);Akr=r(G4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),G4t.forEach(t),Lkr=i(ja),qn=n(ja,"P",{});var i5=s(qn);Bkr=r(i5,"The model class to instantiate is selected based on the "),VFe=n(i5,"CODE",{});var O4t=s(VFe);xkr=r(O4t,"model_type"),O4t.forEach(t),kkr=r(i5,` property of the config object (either
passed as an argument or loaded from `),zFe=n(i5,"CODE",{});var X4t=s(zFe);Rkr=r(X4t,"pretrained_model_name_or_path"),X4t.forEach(t),Skr=r(i5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=n(i5,"CODE",{});var V4t=s(WFe);Pkr=r(V4t,"pretrained_model_name_or_path"),V4t.forEach(t),$kr=r(i5,":"),i5.forEach(t),Ikr=i(ja),QFe=n(ja,"UL",{});var z4t=s(QFe);d3=n(z4t,"LI",{});var pke=s(d3);HFe=n(pke,"STRONG",{});var W4t=s(HFe);Nkr=r(W4t,"vision-encoder-decoder"),W4t.forEach(t),Dkr=r(pke," \u2014 "),Zz=n(pke,"A",{href:!0});var Q4t=s(Zz);jkr=r(Q4t,"FlaxVisionEncoderDecoderModel"),Q4t.forEach(t),qkr=r(pke," (Vision Encoder decoder model)"),pke.forEach(t),z4t.forEach(t),Gkr=i(ja),UFe=n(ja,"P",{});var H4t=s(UFe);Okr=r(H4t,"Examples:"),H4t.forEach(t),Xkr=i(ja),m(a8.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(K,"name","hf:doc:metadata"),d(K,"content",JSON.stringify(aEt)),d(Ee,"id","auto-classes"),d(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ee,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_16162/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_16162/en/model_doc/auto#transformers.AutoModel"),d(Vn,"href","/docs/transformers/pr_16162/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertModel"),d(qf,"id","extending-the-auto-classes"),d(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qf,"href","#extending-the-auto-classes"),d(Xi,"class","relative group"),d(Of,"id","transformers.AutoConfig"),d(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Of,"href","#transformers.AutoConfig"),d(Vi,"class","relative group"),d(i9,"href","/docs/transformers/pr_16162/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(d9,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertConfig"),d(c9,"href","/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartConfig"),d(f9,"href","/docs/transformers/pr_16162/en/model_doc/beit#transformers.BeitConfig"),d(m9,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertConfig"),d(g9,"href","/docs/transformers/pr_16162/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(h9,"href","/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdConfig"),d(p9,"href","/docs/transformers/pr_16162/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(_9,"href","/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(u9,"href","/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(b9,"href","/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertConfig"),d(v9,"href","/docs/transformers/pr_16162/en/model_doc/canine#transformers.CanineConfig"),d(T9,"href","/docs/transformers/pr_16162/en/model_doc/clip#transformers.CLIPConfig"),d(F9,"href","/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertConfig"),d(C9,"href","/docs/transformers/pr_16162/en/model_doc/convnext#transformers.ConvNextConfig"),d(M9,"href","/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.CTRLConfig"),d(E9,"href","/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(y9,"href","/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(w9,"href","/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaConfig"),d(A9,"href","/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(L9,"href","/docs/transformers/pr_16162/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(B9,"href","/docs/transformers/pr_16162/en/model_doc/deit#transformers.DeiTConfig"),d(x9,"href","/docs/transformers/pr_16162/en/model_doc/detr#transformers.DetrConfig"),d(k9,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertConfig"),d(R9,"href","/docs/transformers/pr_16162/en/model_doc/dpr#transformers.DPRConfig"),d(S9,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraConfig"),d(P9,"href","/docs/transformers/pr_16162/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d($9,"href","/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertConfig"),d(I9,"href","/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetConfig"),d(N9,"href","/docs/transformers/pr_16162/en/model_doc/fsmt#transformers.FSMTConfig"),d(D9,"href","/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelConfig"),d(j9,"href","/docs/transformers/pr_16162/en/model_doc/glpn#transformers.GLPNConfig"),d(q9,"href","/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2Config"),d(G9,"href","/docs/transformers/pr_16162/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(O9,"href","/docs/transformers/pr_16162/en/model_doc/gptj#transformers.GPTJConfig"),d(X9,"href","/docs/transformers/pr_16162/en/model_doc/hubert#transformers.HubertConfig"),d(V9,"href","/docs/transformers/pr_16162/en/model_doc/ibert#transformers.IBertConfig"),d(z9,"href","/docs/transformers/pr_16162/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(W9,"href","/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(Q9,"href","/docs/transformers/pr_16162/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(H9,"href","/docs/transformers/pr_16162/en/model_doc/led#transformers.LEDConfig"),d(U9,"href","/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerConfig"),d(J9,"href","/docs/transformers/pr_16162/en/model_doc/luke#transformers.LukeConfig"),d(Y9,"href","/docs/transformers/pr_16162/en/model_doc/lxmert#transformers.LxmertConfig"),d(K9,"href","/docs/transformers/pr_16162/en/model_doc/m2m_100#transformers.M2M100Config"),d(Z9,"href","/docs/transformers/pr_16162/en/model_doc/marian#transformers.MarianConfig"),d(eB,"href","/docs/transformers/pr_16162/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(oB,"href","/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartConfig"),d(rB,"href","/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(tB,"href","/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(aB,"href","/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetConfig"),d(nB,"href","/docs/transformers/pr_16162/en/model_doc/mt5#transformers.MT5Config"),d(sB,"href","/docs/transformers/pr_16162/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(lB,"href","/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(iB,"href","/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.PegasusConfig"),d(dB,"href","/docs/transformers/pr_16162/en/model_doc/perceiver#transformers.PerceiverConfig"),d(cB,"href","/docs/transformers/pr_16162/en/model_doc/plbart#transformers.PLBartConfig"),d(fB,"href","/docs/transformers/pr_16162/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(mB,"href","/docs/transformers/pr_16162/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(gB,"href","/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(hB,"href","/docs/transformers/pr_16162/en/model_doc/rag#transformers.RagConfig"),d(pB,"href","/docs/transformers/pr_16162/en/model_doc/realm#transformers.RealmConfig"),d(_B,"href","/docs/transformers/pr_16162/en/model_doc/reformer#transformers.ReformerConfig"),d(uB,"href","/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertConfig"),d(bB,"href","/docs/transformers/pr_16162/en/model_doc/resnet#transformers.ResNetConfig"),d(vB,"href","/docs/transformers/pr_16162/en/model_doc/resnetd#transformers.ResNetDConfig"),d(TB,"href","/docs/transformers/pr_16162/en/model_doc/retribert#transformers.RetriBertConfig"),d(FB,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaConfig"),d(CB,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerConfig"),d(MB,"href","/docs/transformers/pr_16162/en/model_doc/segformer#transformers.SegformerConfig"),d(EB,"href","/docs/transformers/pr_16162/en/model_doc/sew#transformers.SEWConfig"),d(yB,"href","/docs/transformers/pr_16162/en/model_doc/sew-d#transformers.SEWDConfig"),d(wB,"href","/docs/transformers/pr_16162/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(AB,"href","/docs/transformers/pr_16162/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(LB,"href","/docs/transformers/pr_16162/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(BB,"href","/docs/transformers/pr_16162/en/model_doc/splinter#transformers.SplinterConfig"),d(xB,"href","/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(kB,"href","/docs/transformers/pr_16162/en/model_doc/swin#transformers.SwinConfig"),d(RB,"href","/docs/transformers/pr_16162/en/model_doc/t5#transformers.T5Config"),d(SB,"href","/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TapasConfig"),d(PB,"href","/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d($B,"href","/docs/transformers/pr_16162/en/model_doc/trocr#transformers.TrOCRConfig"),d(IB,"href","/docs/transformers/pr_16162/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(NB,"href","/docs/transformers/pr_16162/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(DB,"href","/docs/transformers/pr_16162/en/model_doc/van#transformers.VanConfig"),d(jB,"href","/docs/transformers/pr_16162/en/model_doc/vilt#transformers.ViltConfig"),d(qB,"href","/docs/transformers/pr_16162/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(GB,"href","/docs/transformers/pr_16162/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(OB,"href","/docs/transformers/pr_16162/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(XB,"href","/docs/transformers/pr_16162/en/model_doc/vit#transformers.ViTConfig"),d(VB,"href","/docs/transformers/pr_16162/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(zB,"href","/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(WB,"href","/docs/transformers/pr_16162/en/model_doc/wavlm#transformers.WavLMConfig"),d(QB,"href","/docs/transformers/pr_16162/en/model_doc/xglm#transformers.XGLMConfig"),d(HB,"href","/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMConfig"),d(UB,"href","/docs/transformers/pr_16162/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(JB,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(YB,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(KB,"href","/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetConfig"),d(ZB,"href","/docs/transformers/pr_16162/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(Pg,"class","docstring"),d(Wo,"class","docstring"),d($g,"id","transformers.AutoTokenizer"),d($g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($g,"href","#transformers.AutoTokenizer"),d(Wi,"class","relative group"),d(ex,"href","/docs/transformers/pr_16162/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(ox,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertTokenizer"),d(rx,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(tx,"href","/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartTokenizer"),d(ax,"href","/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartTokenizerFast"),d(nx,"href","/docs/transformers/pr_16162/en/model_doc/barthez#transformers.BarthezTokenizer"),d(sx,"href","/docs/transformers/pr_16162/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(lx,"href","/docs/transformers/pr_16162/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(ix,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertTokenizer"),d(dx,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertTokenizerFast"),d(cx,"href","/docs/transformers/pr_16162/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(fx,"href","/docs/transformers/pr_16162/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(mx,"href","/docs/transformers/pr_16162/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(gx,"href","/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(hx,"href","/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(px,"href","/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(_x,"href","/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(ux,"href","/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(bx,"href","/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(vx,"href","/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Tx,"href","/docs/transformers/pr_16162/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Fx,"href","/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Cx,"href","/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Mx,"href","/docs/transformers/pr_16162/en/model_doc/canine#transformers.CanineTokenizer"),d(Ex,"href","/docs/transformers/pr_16162/en/model_doc/clip#transformers.CLIPTokenizer"),d(yx,"href","/docs/transformers/pr_16162/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(wx,"href","/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Ax,"href","/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Lx,"href","/docs/transformers/pr_16162/en/model_doc/cpm#transformers.CpmTokenizer"),d(Bx,"href","/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(xx,"href","/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaTokenizer"),d(kx,"href","/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Rx,"href","/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Sx,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Px,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d($x,"href","/docs/transformers/pr_16162/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Ix,"href","/docs/transformers/pr_16162/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Nx,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraTokenizer"),d(Dx,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(jx,"href","/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(qx,"href","/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetTokenizer"),d(Gx,"href","/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Ox,"href","/docs/transformers/pr_16162/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Xx,"href","/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Vx,"href","/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(zx,"href","/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Wx,"href","/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Qx,"href","/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Hx,"href","/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Ux,"href","/docs/transformers/pr_16162/en/model_doc/herbert#transformers.HerbertTokenizer"),d(Jx,"href","/docs/transformers/pr_16162/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(Yx,"href","/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Kx,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Zx,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(ek,"href","/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(ok,"href","/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(rk,"href","/docs/transformers/pr_16162/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(tk,"href","/docs/transformers/pr_16162/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(ak,"href","/docs/transformers/pr_16162/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(nk,"href","/docs/transformers/pr_16162/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(sk,"href","/docs/transformers/pr_16162/en/model_doc/led#transformers.LEDTokenizer"),d(lk,"href","/docs/transformers/pr_16162/en/model_doc/led#transformers.LEDTokenizerFast"),d(ik,"href","/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerTokenizer"),d(dk,"href","/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(ck,"href","/docs/transformers/pr_16162/en/model_doc/luke#transformers.LukeTokenizer"),d(fk,"href","/docs/transformers/pr_16162/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(mk,"href","/docs/transformers/pr_16162/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(gk,"href","/docs/transformers/pr_16162/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(hk,"href","/docs/transformers/pr_16162/en/model_doc/marian#transformers.MarianTokenizer"),d(pk,"href","/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartTokenizer"),d(_k,"href","/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(uk,"href","/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(bk,"href","/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(vk,"href","/docs/transformers/pr_16162/en/model_doc/mluke#transformers.MLukeTokenizer"),d(Tk,"href","/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(Fk,"href","/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(Ck,"href","/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(Mk,"href","/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(Ek,"href","/docs/transformers/pr_16162/en/model_doc/mt5#transformers.T5Tokenizer"),d(yk,"href","/docs/transformers/pr_16162/en/model_doc/mt5#transformers.T5TokenizerFast"),d(wk,"href","/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(Ak,"href","/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(Lk,"href","/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Bk,"href","/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(xk,"href","/docs/transformers/pr_16162/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(kk,"href","/docs/transformers/pr_16162/en/model_doc/phobert#transformers.PhobertTokenizer"),d(Rk,"href","/docs/transformers/pr_16162/en/model_doc/plbart#transformers.PLBartTokenizer"),d(Sk,"href","/docs/transformers/pr_16162/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(Pk,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertTokenizer"),d($k,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertTokenizerFast"),d(Ik,"href","/docs/transformers/pr_16162/en/model_doc/rag#transformers.RagTokenizer"),d(Nk,"href","/docs/transformers/pr_16162/en/model_doc/realm#transformers.RealmTokenizer"),d(Dk,"href","/docs/transformers/pr_16162/en/model_doc/realm#transformers.RealmTokenizerFast"),d(jk,"href","/docs/transformers/pr_16162/en/model_doc/reformer#transformers.ReformerTokenizer"),d(qk,"href","/docs/transformers/pr_16162/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(Gk,"href","/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertTokenizer"),d(Ok,"href","/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(Xk,"href","/docs/transformers/pr_16162/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(Vk,"href","/docs/transformers/pr_16162/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(zk,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Wk,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Qk,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Hk,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Uk,"href","/docs/transformers/pr_16162/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Jk,"href","/docs/transformers/pr_16162/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(Yk,"href","/docs/transformers/pr_16162/en/model_doc/splinter#transformers.SplinterTokenizer"),d(Kk,"href","/docs/transformers/pr_16162/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(Zk,"href","/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(eR,"href","/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(oR,"href","/docs/transformers/pr_16162/en/model_doc/mt5#transformers.T5Tokenizer"),d(rR,"href","/docs/transformers/pr_16162/en/model_doc/mt5#transformers.T5TokenizerFast"),d(tR,"href","/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TapasTokenizer"),d(aR,"href","/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(nR,"href","/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(sR,"href","/docs/transformers/pr_16162/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(lR,"href","/docs/transformers/pr_16162/en/model_doc/xglm#transformers.XGLMTokenizer"),d(iR,"href","/docs/transformers/pr_16162/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(dR,"href","/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMTokenizer"),d(cR,"href","/docs/transformers/pr_16162/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(fR,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(mR,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(gR,"href","/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(hR,"href","/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(fh,"class","docstring"),d(Qo,"class","docstring"),d(mh,"id","transformers.AutoFeatureExtractor"),d(mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mh,"href","#transformers.AutoFeatureExtractor"),d(Qi,"class","relative group"),d(pR,"href","/docs/transformers/pr_16162/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(_R,"href","/docs/transformers/pr_16162/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(uR,"href","/docs/transformers/pr_16162/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(bR,"href","/docs/transformers/pr_16162/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(vR,"href","/docs/transformers/pr_16162/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(TR,"href","/docs/transformers/pr_16162/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(FR,"href","/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(CR,"href","/docs/transformers/pr_16162/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(MR,"href","/docs/transformers/pr_16162/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(ER,"href","/docs/transformers/pr_16162/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(yR,"href","/docs/transformers/pr_16162/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(wR,"href","/docs/transformers/pr_16162/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(AR,"href","/docs/transformers/pr_16162/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(LR,"href","/docs/transformers/pr_16162/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(BR,"href","/docs/transformers/pr_16162/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(xR,"href","/docs/transformers/pr_16162/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(kR,"href","/docs/transformers/pr_16162/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(RR,"href","/docs/transformers/pr_16162/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(SR,"href","/docs/transformers/pr_16162/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(PR,"href","/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(Sh,"class","docstring"),d(Ho,"class","docstring"),d(Ph,"id","transformers.AutoProcessor"),d(Ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ph,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d($R,"href","/docs/transformers/pr_16162/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(IR,"href","/docs/transformers/pr_16162/en/model_doc/clip#transformers.CLIPProcessor"),d(NR,"href","/docs/transformers/pr_16162/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(DR,"href","/docs/transformers/pr_16162/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(jR,"href","/docs/transformers/pr_16162/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(qR,"href","/docs/transformers/pr_16162/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(GR,"href","/docs/transformers/pr_16162/en/model_doc/trocr#transformers.TrOCRProcessor"),d(OR,"href","/docs/transformers/pr_16162/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(XR,"href","/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Vh,"class","docstring"),d(Uo,"class","docstring"),d(zh,"id","transformers.AutoModel"),d(zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(Vr,"class","docstring"),d(VR,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertModel"),d(zR,"href","/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartModel"),d(WR,"href","/docs/transformers/pr_16162/en/model_doc/beit#transformers.BeitModel"),d(QR,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertModel"),d(HR,"href","/docs/transformers/pr_16162/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(UR,"href","/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdModel"),d(JR,"href","/docs/transformers/pr_16162/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(YR,"href","/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(KR,"href","/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(ZR,"href","/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertModel"),d(eS,"href","/docs/transformers/pr_16162/en/model_doc/canine#transformers.CanineModel"),d(oS,"href","/docs/transformers/pr_16162/en/model_doc/clip#transformers.CLIPModel"),d(rS,"href","/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertModel"),d(tS,"href","/docs/transformers/pr_16162/en/model_doc/convnext#transformers.ConvNextModel"),d(aS,"href","/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.CTRLModel"),d(nS,"href","/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(sS,"href","/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(lS,"href","/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaModel"),d(iS,"href","/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(dS,"href","/docs/transformers/pr_16162/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(cS,"href","/docs/transformers/pr_16162/en/model_doc/deit#transformers.DeiTModel"),d(fS,"href","/docs/transformers/pr_16162/en/model_doc/detr#transformers.DetrModel"),d(mS,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertModel"),d(gS,"href","/docs/transformers/pr_16162/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(hS,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraModel"),d(pS,"href","/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertModel"),d(_S,"href","/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetModel"),d(uS,"href","/docs/transformers/pr_16162/en/model_doc/fsmt#transformers.FSMTModel"),d(bS,"href","/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelModel"),d(vS,"href","/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelBaseModel"),d(TS,"href","/docs/transformers/pr_16162/en/model_doc/glpn#transformers.GLPNModel"),d(FS,"href","/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2Model"),d(CS,"href","/docs/transformers/pr_16162/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(MS,"href","/docs/transformers/pr_16162/en/model_doc/gptj#transformers.GPTJModel"),d(ES,"href","/docs/transformers/pr_16162/en/model_doc/hubert#transformers.HubertModel"),d(yS,"href","/docs/transformers/pr_16162/en/model_doc/ibert#transformers.IBertModel"),d(wS,"href","/docs/transformers/pr_16162/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(AS,"href","/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(LS,"href","/docs/transformers/pr_16162/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(BS,"href","/docs/transformers/pr_16162/en/model_doc/led#transformers.LEDModel"),d(xS,"href","/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerModel"),d(kS,"href","/docs/transformers/pr_16162/en/model_doc/luke#transformers.LukeModel"),d(RS,"href","/docs/transformers/pr_16162/en/model_doc/lxmert#transformers.LxmertModel"),d(SS,"href","/docs/transformers/pr_16162/en/model_doc/m2m_100#transformers.M2M100Model"),d(PS,"href","/docs/transformers/pr_16162/en/model_doc/marian#transformers.MarianModel"),d($S,"href","/docs/transformers/pr_16162/en/model_doc/maskformer#transformers.MaskFormerModel"),d(IS,"href","/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartModel"),d(NS,"href","/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(DS,"href","/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertModel"),d(jS,"href","/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetModel"),d(qS,"href","/docs/transformers/pr_16162/en/model_doc/mt5#transformers.MT5Model"),d(GS,"href","/docs/transformers/pr_16162/en/model_doc/nystromformer#transformers.NystromformerModel"),d(OS,"href","/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(XS,"href","/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.PegasusModel"),d(VS,"href","/docs/transformers/pr_16162/en/model_doc/perceiver#transformers.PerceiverModel"),d(zS,"href","/docs/transformers/pr_16162/en/model_doc/plbart#transformers.PLBartModel"),d(WS,"href","/docs/transformers/pr_16162/en/model_doc/poolformer#transformers.PoolFormerModel"),d(QS,"href","/docs/transformers/pr_16162/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(HS,"href","/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertModel"),d(US,"href","/docs/transformers/pr_16162/en/model_doc/reformer#transformers.ReformerModel"),d(JS,"href","/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertModel"),d(YS,"href","/docs/transformers/pr_16162/en/model_doc/resnet#transformers.ResNetModel"),d(KS,"href","/docs/transformers/pr_16162/en/model_doc/resnetd#transformers.ResNetDModel"),d(ZS,"href","/docs/transformers/pr_16162/en/model_doc/retribert#transformers.RetriBertModel"),d(eP,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaModel"),d(oP,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerModel"),d(rP,"href","/docs/transformers/pr_16162/en/model_doc/segformer#transformers.SegformerModel"),d(tP,"href","/docs/transformers/pr_16162/en/model_doc/sew#transformers.SEWModel"),d(aP,"href","/docs/transformers/pr_16162/en/model_doc/sew-d#transformers.SEWDModel"),d(nP,"href","/docs/transformers/pr_16162/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(sP,"href","/docs/transformers/pr_16162/en/model_doc/splinter#transformers.SplinterModel"),d(lP,"href","/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(iP,"href","/docs/transformers/pr_16162/en/model_doc/swin#transformers.SwinModel"),d(dP,"href","/docs/transformers/pr_16162/en/model_doc/t5#transformers.T5Model"),d(cP,"href","/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TapasModel"),d(fP,"href","/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(mP,"href","/docs/transformers/pr_16162/en/model_doc/unispeech#transformers.UniSpeechModel"),d(gP,"href","/docs/transformers/pr_16162/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(hP,"href","/docs/transformers/pr_16162/en/model_doc/van#transformers.VanModel"),d(pP,"href","/docs/transformers/pr_16162/en/model_doc/vilt#transformers.ViltModel"),d(_P,"href","/docs/transformers/pr_16162/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(uP,"href","/docs/transformers/pr_16162/en/model_doc/visual_bert#transformers.VisualBertModel"),d(bP,"href","/docs/transformers/pr_16162/en/model_doc/vit#transformers.ViTModel"),d(vP,"href","/docs/transformers/pr_16162/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(TP,"href","/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(FP,"href","/docs/transformers/pr_16162/en/model_doc/wavlm#transformers.WavLMModel"),d(CP,"href","/docs/transformers/pr_16162/en/model_doc/xglm#transformers.XGLMModel"),d(MP,"href","/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMModel"),d(EP,"href","/docs/transformers/pr_16162/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(yP,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(wP,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(AP,"href","/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetModel"),d(LP,"href","/docs/transformers/pr_16162/en/model_doc/yoso#transformers.YosoModel"),d(Ne,"class","docstring"),d(Jo,"class","docstring"),d(x_,"id","transformers.AutoModelForPreTraining"),d(x_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(zr,"class","docstring"),d(BP,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertForPreTraining"),d(xP,"href","/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(kP,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertForPreTraining"),d(RP,"href","/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(SP,"href","/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(PP,"href","/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d($P,"href","/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(IP,"href","/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(NP,"href","/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(DP,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(jP,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraForPreTraining"),d(qP,"href","/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(GP,"href","/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetForPreTraining"),d(OP,"href","/docs/transformers/pr_16162/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(XP,"href","/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(VP,"href","/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(zP,"href","/docs/transformers/pr_16162/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(WP,"href","/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(QP,"href","/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(HP,"href","/docs/transformers/pr_16162/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(UP,"href","/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(JP,"href","/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(YP,"href","/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(KP,"href","/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(ZP,"href","/docs/transformers/pr_16162/en/model_doc/retribert#transformers.RetriBertModel"),d(e$,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(o$,"href","/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(r$,"href","/docs/transformers/pr_16162/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(t$,"href","/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(a$,"href","/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(n$,"href","/docs/transformers/pr_16162/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(s$,"href","/docs/transformers/pr_16162/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(l$,"href","/docs/transformers/pr_16162/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(i$,"href","/docs/transformers/pr_16162/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(d$,"href","/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(c$,"href","/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(f$,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(m$,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(g$,"href","/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(De,"class","docstring"),d(Yo,"class","docstring"),d(uu,"id","transformers.AutoModelForCausalLM"),d(uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uu,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(Wr,"class","docstring"),d(h$,"href","/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartForCausalLM"),d(p$,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertLMHeadModel"),d(_$,"href","/docs/transformers/pr_16162/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(u$,"href","/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(b$,"href","/docs/transformers/pr_16162/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(v$,"href","/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(T$,"href","/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(F$,"href","/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(C$,"href","/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(M$,"href","/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(E$,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraForCausalLM"),d(y$,"href","/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(w$,"href","/docs/transformers/pr_16162/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(A$,"href","/docs/transformers/pr_16162/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(L$,"href","/docs/transformers/pr_16162/en/model_doc/marian#transformers.MarianForCausalLM"),d(B$,"href","/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartForCausalLM"),d(x$,"href","/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(k$,"href","/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(R$,"href","/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(S$,"href","/docs/transformers/pr_16162/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(P$,"href","/docs/transformers/pr_16162/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d($$,"href","/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(I$,"href","/docs/transformers/pr_16162/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(N$,"href","/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(D$,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(j$,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(q$,"href","/docs/transformers/pr_16162/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(G$,"href","/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(O$,"href","/docs/transformers/pr_16162/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(X$,"href","/docs/transformers/pr_16162/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(V$,"href","/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(z$,"href","/docs/transformers/pr_16162/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(W$,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(Q$,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(H$,"href","/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(e1,"id","transformers.AutoModelForMaskedLM"),d(e1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e1,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(Qr,"class","docstring"),d(U$,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(J$,"href","/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Y$,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertForMaskedLM"),d(K$,"href","/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(Z$,"href","/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(eI,"href","/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(oI,"href","/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(rI,"href","/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(tI,"href","/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(aI,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(nI,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(sI,"href","/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(lI,"href","/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(iI,"href","/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(dI,"href","/docs/transformers/pr_16162/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(cI,"href","/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(fI,"href","/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(mI,"href","/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(gI,"href","/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(hI,"href","/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(pI,"href","/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(_I,"href","/docs/transformers/pr_16162/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(uI,"href","/docs/transformers/pr_16162/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(bI,"href","/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(vI,"href","/docs/transformers/pr_16162/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(TI,"href","/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(FI,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(CI,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(MI,"href","/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(EI,"href","/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(yI,"href","/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(wI,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(AI,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(LI,"href","/docs/transformers/pr_16162/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(qe,"class","docstring"),d(Zo,"class","docstring"),d(N1,"id","transformers.AutoModelForSeq2SeqLM"),d(N1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N1,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(Hr,"class","docstring"),d(BI,"href","/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(xI,"href","/docs/transformers/pr_16162/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(kI,"href","/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(RI,"href","/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(SI,"href","/docs/transformers/pr_16162/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(PI,"href","/docs/transformers/pr_16162/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d($I,"href","/docs/transformers/pr_16162/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(II,"href","/docs/transformers/pr_16162/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(NI,"href","/docs/transformers/pr_16162/en/model_doc/marian#transformers.MarianMTModel"),d(DI,"href","/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(jI,"href","/docs/transformers/pr_16162/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(qI,"href","/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(GI,"href","/docs/transformers/pr_16162/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(OI,"href","/docs/transformers/pr_16162/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(XI,"href","/docs/transformers/pr_16162/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(VI,"href","/docs/transformers/pr_16162/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(o2,"id","transformers.AutoModelForSequenceClassification"),d(o2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o2,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(Ur,"class","docstring"),d(zI,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(WI,"href","/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartForSequenceClassification"),d(QI,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertForSequenceClassification"),d(HI,"href","/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(UI,"href","/docs/transformers/pr_16162/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(JI,"href","/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(YI,"href","/docs/transformers/pr_16162/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(KI,"href","/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(ZI,"href","/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(lN,"href","/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(iN,"href","/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(dN,"href","/docs/transformers/pr_16162/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(cN,"href","/docs/transformers/pr_16162/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(fN,"href","/docs/transformers/pr_16162/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(mN,"href","/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(gN,"href","/docs/transformers/pr_16162/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(hN,"href","/docs/transformers/pr_16162/en/model_doc/led#transformers.LEDForSequenceClassification"),d(pN,"href","/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(_N,"href","/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(uN,"href","/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(bN,"href","/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(vN,"href","/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(TN,"href","/docs/transformers/pr_16162/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(FN,"href","/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(CN,"href","/docs/transformers/pr_16162/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(MN,"href","/docs/transformers/pr_16162/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(EN,"href","/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(yN,"href","/docs/transformers/pr_16162/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(wN,"href","/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(AN,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(LN,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(BN,"href","/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(xN,"href","/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(kN,"href","/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(RN,"href","/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(SN,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(PN,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d($N,"href","/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(IN,"href","/docs/transformers/pr_16162/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(U2,"id","transformers.AutoModelForMultipleChoice"),d(U2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U2,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(Jr,"class","docstring"),d(NN,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(DN,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertForMultipleChoice"),d(jN,"href","/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(qN,"href","/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(GN,"href","/docs/transformers/pr_16162/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(ON,"href","/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(XN,"href","/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(VN,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(zN,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(WN,"href","/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(QN,"href","/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(HN,"href","/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(UN,"href","/docs/transformers/pr_16162/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(JN,"href","/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(YN,"href","/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(KN,"href","/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(ZN,"href","/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(eD,"href","/docs/transformers/pr_16162/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(oD,"href","/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(rD,"href","/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(tD,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(aD,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(nD,"href","/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(sD,"href","/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(lD,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(iD,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(dD,"href","/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(cD,"href","/docs/transformers/pr_16162/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Xe,"class","docstring"),d(rr,"class","docstring"),d(y6,"id","transformers.AutoModelForNextSentencePrediction"),d(y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y6,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(Yr,"class","docstring"),d(fD,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(mD,"href","/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(gD,"href","/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(hD,"href","/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(pD,"href","/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Ve,"class","docstring"),d(tr,"class","docstring"),d(R6,"id","transformers.AutoModelForTokenClassification"),d(R6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R6,"href","#transformers.AutoModelForTokenClassification"),d(Td,"class","relative group"),d(Kr,"class","docstring"),d(_D,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(uD,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertForTokenClassification"),d(bD,"href","/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(vD,"href","/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(TD,"href","/docs/transformers/pr_16162/en/model_doc/canine#transformers.CanineForTokenClassification"),d(FD,"href","/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(CD,"href","/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(MD,"href","/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(ED,"href","/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(yD,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(wD,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(AD,"href","/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(LD,"href","/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(BD,"href","/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(xD,"href","/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(kD,"href","/docs/transformers/pr_16162/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(RD,"href","/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(SD,"href","/docs/transformers/pr_16162/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(PD,"href","/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d($D,"href","/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(ID,"href","/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(ND,"href","/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(DD,"href","/docs/transformers/pr_16162/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(jD,"href","/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(qD,"href","/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(GD,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(OD,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(XD,"href","/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(VD,"href","/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(zD,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(WD,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(QD,"href","/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(HD,"href","/docs/transformers/pr_16162/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(gb,"id","transformers.AutoModelForQuestionAnswering"),d(gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gb,"href","#transformers.AutoModelForQuestionAnswering"),d(Md,"class","relative group"),d(Zr,"class","docstring"),d(UD,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(JD,"href","/docs/transformers/pr_16162/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(YD,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(KD,"href","/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(ZD,"href","/docs/transformers/pr_16162/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(ej,"href","/docs/transformers/pr_16162/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(oj,"href","/docs/transformers/pr_16162/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(rj,"href","/docs/transformers/pr_16162/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(tj,"href","/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(aj,"href","/docs/transformers/pr_16162/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(nj,"href","/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(sj,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(lj,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(ij,"href","/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(dj,"href","/docs/transformers/pr_16162/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(cj,"href","/docs/transformers/pr_16162/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(fj,"href","/docs/transformers/pr_16162/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(mj,"href","/docs/transformers/pr_16162/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(gj,"href","/docs/transformers/pr_16162/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(hj,"href","/docs/transformers/pr_16162/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(pj,"href","/docs/transformers/pr_16162/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(_j,"href","/docs/transformers/pr_16162/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(uj,"href","/docs/transformers/pr_16162/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(bj,"href","/docs/transformers/pr_16162/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(vj,"href","/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(Tj,"href","/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(Fj,"href","/docs/transformers/pr_16162/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(Cj,"href","/docs/transformers/pr_16162/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(Mj,"href","/docs/transformers/pr_16162/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(Ej,"href","/docs/transformers/pr_16162/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(yj,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(wj,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(Aj,"href","/docs/transformers/pr_16162/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(Lj,"href","/docs/transformers/pr_16162/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(Bj,"href","/docs/transformers/pr_16162/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(xj,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(kj,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(Rj,"href","/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(Sj,"href","/docs/transformers/pr_16162/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(We,"class","docstring"),d(nr,"class","docstring"),d(ev,"id","transformers.AutoModelForTableQuestionAnswering"),d(ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ev,"href","#transformers.AutoModelForTableQuestionAnswering"),d(wd,"class","relative group"),d(et,"class","docstring"),d(Pj,"href","/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(Qe,"class","docstring"),d(sr,"class","docstring"),d(tv,"id","transformers.AutoModelForImageClassification"),d(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tv,"href","#transformers.AutoModelForImageClassification"),d(Bd,"class","relative group"),d(ot,"class","docstring"),d($j,"href","/docs/transformers/pr_16162/en/model_doc/beit#transformers.BeitForImageClassification"),d(Ij,"href","/docs/transformers/pr_16162/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(Nj,"href","/docs/transformers/pr_16162/en/model_doc/deit#transformers.DeiTForImageClassification"),d(Dj,"href","/docs/transformers/pr_16162/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(jj,"href","/docs/transformers/pr_16162/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(qj,"href","/docs/transformers/pr_16162/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(Gj,"href","/docs/transformers/pr_16162/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(Oj,"href","/docs/transformers/pr_16162/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(Xj,"href","/docs/transformers/pr_16162/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(Vj,"href","/docs/transformers/pr_16162/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(zj,"href","/docs/transformers/pr_16162/en/model_doc/resnetd#transformers.ResNetDForImageClassification"),d(Wj,"href","/docs/transformers/pr_16162/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(Qj,"href","/docs/transformers/pr_16162/en/model_doc/swin#transformers.SwinForImageClassification"),d(Hj,"href","/docs/transformers/pr_16162/en/model_doc/van#transformers.VanForImageClassification"),d(Uj,"href","/docs/transformers/pr_16162/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(pv,"id","transformers.AutoModelForVision2Seq"),d(pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pv,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(rt,"class","docstring"),d(Jj,"href","/docs/transformers/pr_16162/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(bv,"id","transformers.AutoModelForAudioClassification"),d(bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bv,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(tt,"class","docstring"),d(Yj,"href","/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(Kj,"href","/docs/transformers/pr_16162/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(Zj,"href","/docs/transformers/pr_16162/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(eq,"href","/docs/transformers/pr_16162/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(oq,"href","/docs/transformers/pr_16162/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(rq,"href","/docs/transformers/pr_16162/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(tq,"href","/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(aq,"href","/docs/transformers/pr_16162/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(Lv,"id","transformers.AutoModelForAudioFrameClassification"),d(Lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lv,"href","#transformers.AutoModelForAudioFrameClassification"),d(Dd,"class","relative group"),d(at,"class","docstring"),d(nq,"href","/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(sq,"href","/docs/transformers/pr_16162/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(lq,"href","/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(iq,"href","/docs/transformers/pr_16162/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(Pv,"id","transformers.AutoModelForCTC"),d(Pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Pv,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(nt,"class","docstring"),d(dq,"href","/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(cq,"href","/docs/transformers/pr_16162/en/model_doc/hubert#transformers.HubertForCTC"),d(fq,"href","/docs/transformers/pr_16162/en/model_doc/sew#transformers.SEWForCTC"),d(mq,"href","/docs/transformers/pr_16162/en/model_doc/sew-d#transformers.SEWDForCTC"),d(gq,"href","/docs/transformers/pr_16162/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(hq,"href","/docs/transformers/pr_16162/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(pq,"href","/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(_q,"href","/docs/transformers/pr_16162/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(Vv,"id","transformers.AutoModelForSpeechSeq2Seq"),d(Vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vv,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Vd,"class","relative group"),d(st,"class","docstring"),d(uq,"href","/docs/transformers/pr_16162/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(bq,"href","/docs/transformers/pr_16162/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(Hv,"id","transformers.AutoModelForAudioXVector"),d(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Hv,"href","#transformers.AutoModelForAudioXVector"),d(Qd,"class","relative group"),d(lt,"class","docstring"),d(vq,"href","/docs/transformers/pr_16162/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(Tq,"href","/docs/transformers/pr_16162/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(Fq,"href","/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(Cq,"href","/docs/transformers/pr_16162/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(eT,"id","transformers.AutoModelForMaskedImageModeling"),d(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eT,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(it,"class","docstring"),d(Mq,"href","/docs/transformers/pr_16162/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(Eq,"href","/docs/transformers/pr_16162/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(yq,"href","/docs/transformers/pr_16162/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(nT,"id","transformers.AutoModelForObjectDetection"),d(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nT,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(dt,"class","docstring"),d(wq,"href","/docs/transformers/pr_16162/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(iT,"id","transformers.AutoModelForImageSegmentation"),d(iT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iT,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(ct,"class","docstring"),d(Aq,"href","/docs/transformers/pr_16162/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(fT,"id","transformers.AutoModelForSemanticSegmentation"),d(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fT,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(ft,"class","docstring"),d(Lq,"href","/docs/transformers/pr_16162/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(Bq,"href","/docs/transformers/pr_16162/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(pT,"id","transformers.AutoModelForInstanceSegmentation"),d(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pT,"href","#transformers.AutoModelForInstanceSegmentation"),d(dc,"class","relative group"),d(mt,"class","docstring"),d(xq,"href","/docs/transformers/pr_16162/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(bT,"id","transformers.TFAutoModel"),d(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bT,"href","#transformers.TFAutoModel"),d(mc,"class","relative group"),d(gt,"class","docstring"),d(kq,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.TFAlbertModel"),d(Rq,"href","/docs/transformers/pr_16162/en/model_doc/bart#transformers.TFBartModel"),d(Sq,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.TFBertModel"),d(Pq,"href","/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d($q,"href","/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(Iq,"href","/docs/transformers/pr_16162/en/model_doc/camembert#transformers.TFCamembertModel"),d(Nq,"href","/docs/transformers/pr_16162/en/model_doc/clip#transformers.TFCLIPModel"),d(Dq,"href","/docs/transformers/pr_16162/en/model_doc/convbert#transformers.TFConvBertModel"),d(jq,"href","/docs/transformers/pr_16162/en/model_doc/convnext#transformers.TFConvNextModel"),d(qq,"href","/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.TFCTRLModel"),d(Gq,"href","/docs/transformers/pr_16162/en/model_doc/deberta#transformers.TFDebertaModel"),d(Oq,"href","/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(Xq,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(Vq,"href","/docs/transformers/pr_16162/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(zq,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.TFElectraModel"),d(Wq,"href","/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(Qq,"href","/docs/transformers/pr_16162/en/model_doc/funnel#transformers.TFFunnelModel"),d(Hq,"href","/docs/transformers/pr_16162/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(Uq,"href","/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.TFGPT2Model"),d(Jq,"href","/docs/transformers/pr_16162/en/model_doc/hubert#transformers.TFHubertModel"),d(Yq,"href","/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(Kq,"href","/docs/transformers/pr_16162/en/model_doc/led#transformers.TFLEDModel"),d(Zq,"href","/docs/transformers/pr_16162/en/model_doc/longformer#transformers.TFLongformerModel"),d(eG,"href","/docs/transformers/pr_16162/en/model_doc/lxmert#transformers.TFLxmertModel"),d(oG,"href","/docs/transformers/pr_16162/en/model_doc/marian#transformers.TFMarianModel"),d(rG,"href","/docs/transformers/pr_16162/en/model_doc/mbart#transformers.TFMBartModel"),d(tG,"href","/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(aG,"href","/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.TFMPNetModel"),d(nG,"href","/docs/transformers/pr_16162/en/model_doc/mt5#transformers.TFMT5Model"),d(sG,"href","/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(lG,"href","/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.TFPegasusModel"),d(iG,"href","/docs/transformers/pr_16162/en/model_doc/rembert#transformers.TFRemBertModel"),d(dG,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.TFRobertaModel"),d(cG,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.TFRoFormerModel"),d(fG,"href","/docs/transformers/pr_16162/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(mG,"href","/docs/transformers/pr_16162/en/model_doc/t5#transformers.TFT5Model"),d(gG,"href","/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TFTapasModel"),d(hG,"href","/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(pG,"href","/docs/transformers/pr_16162/en/model_doc/vit#transformers.TFViTModel"),d(_G,"href","/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(uG,"href","/docs/transformers/pr_16162/en/model_doc/xlm#transformers.TFXLMModel"),d(bG,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(vG,"href","/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(sF,"id","transformers.TFAutoModelForPreTraining"),d(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sF,"href","#transformers.TFAutoModelForPreTraining"),d(pc,"class","relative group"),d(ht,"class","docstring"),d(TG,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(FG,"href","/docs/transformers/pr_16162/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(CG,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.TFBertForPreTraining"),d(MG,"href","/docs/transformers/pr_16162/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(EG,"href","/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(yG,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(wG,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(AG,"href","/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(LG,"href","/docs/transformers/pr_16162/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(BG,"href","/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(xG,"href","/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(kG,"href","/docs/transformers/pr_16162/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(RG,"href","/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(SG,"href","/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(PG,"href","/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d($G,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(IG,"href","/docs/transformers/pr_16162/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(NG,"href","/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(DG,"href","/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(jG,"href","/docs/transformers/pr_16162/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(qG,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(GG,"href","/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Tr,"class","docstring"),d(BF,"id","transformers.TFAutoModelForCausalLM"),d(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BF,"href","#transformers.TFAutoModelForCausalLM"),d(bc,"class","relative group"),d(pt,"class","docstring"),d(OG,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(XG,"href","/docs/transformers/pr_16162/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(VG,"href","/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(zG,"href","/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(WG,"href","/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(QG,"href","/docs/transformers/pr_16162/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(HG,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(UG,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(JG,"href","/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(YG,"href","/docs/transformers/pr_16162/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(KG,"href","/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Fr,"class","docstring"),d(GF,"id","transformers.TFAutoModelForImageClassification"),d(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(GF,"href","#transformers.TFAutoModelForImageClassification"),d(Fc,"class","relative group"),d(_t,"class","docstring"),d(ZG,"href","/docs/transformers/pr_16162/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(eO,"href","/docs/transformers/pr_16162/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Cr,"class","docstring"),d(VF,"id","transformers.TFAutoModelForMaskedLM"),d(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VF,"href","#transformers.TFAutoModelForMaskedLM"),d(Ec,"class","relative group"),d(ut,"class","docstring"),d(oO,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(rO,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(tO,"href","/docs/transformers/pr_16162/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(aO,"href","/docs/transformers/pr_16162/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(nO,"href","/docs/transformers/pr_16162/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(sO,"href","/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(lO,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(iO,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(dO,"href","/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(cO,"href","/docs/transformers/pr_16162/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(fO,"href","/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(mO,"href","/docs/transformers/pr_16162/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(gO,"href","/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(hO,"href","/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(pO,"href","/docs/transformers/pr_16162/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(_O,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(uO,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(bO,"href","/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(vO,"href","/docs/transformers/pr_16162/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(TO,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Mr,"class","docstring"),d(fC,"id","transformers.TFAutoModelForSeq2SeqLM"),d(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fC,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Ac,"class","relative group"),d(bt,"class","docstring"),d(FO,"href","/docs/transformers/pr_16162/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(CO,"href","/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(MO,"href","/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(EO,"href","/docs/transformers/pr_16162/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(yO,"href","/docs/transformers/pr_16162/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(wO,"href","/docs/transformers/pr_16162/en/model_doc/marian#transformers.TFMarianMTModel"),d(AO,"href","/docs/transformers/pr_16162/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(LO,"href","/docs/transformers/pr_16162/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(BO,"href","/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(xO,"href","/docs/transformers/pr_16162/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Er,"class","docstring"),d(CC,"id","transformers.TFAutoModelForSequenceClassification"),d(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CC,"href","#transformers.TFAutoModelForSequenceClassification"),d(xc,"class","relative group"),d(vt,"class","docstring"),d(kO,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(RO,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(SO,"href","/docs/transformers/pr_16162/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(PO,"href","/docs/transformers/pr_16162/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d($O,"href","/docs/transformers/pr_16162/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(IO,"href","/docs/transformers/pr_16162/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(NO,"href","/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(DO,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(jO,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(qO,"href","/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(GO,"href","/docs/transformers/pr_16162/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(OO,"href","/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(XO,"href","/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(VO,"href","/docs/transformers/pr_16162/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(zO,"href","/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(WO,"href","/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(QO,"href","/docs/transformers/pr_16162/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(HO,"href","/docs/transformers/pr_16162/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(UO,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(JO,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(YO,"href","/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(KO,"href","/docs/transformers/pr_16162/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(ZO,"href","/docs/transformers/pr_16162/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(eX,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(oX,"href","/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring"),d(yr,"class","docstring"),d(HC,"id","transformers.TFAutoModelForMultipleChoice"),d(HC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(HC,"href","#transformers.TFAutoModelForMultipleChoice"),d(Sc,"class","relative group"),d(Tt,"class","docstring"),d(rX,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(tX,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(aX,"href","/docs/transformers/pr_16162/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(nX,"href","/docs/transformers/pr_16162/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(sX,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(lX,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(iX,"href","/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(dX,"href","/docs/transformers/pr_16162/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(cX,"href","/docs/transformers/pr_16162/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(fX,"href","/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(mX,"href","/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(gX,"href","/docs/transformers/pr_16162/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(hX,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(pX,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(_X,"href","/docs/transformers/pr_16162/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(uX,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(bX,"href","/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(mM,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(mM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Ic,"class","relative group"),d(Ft,"class","docstring"),d(vX,"href","/docs/transformers/pr_16162/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Co,"class","docstring"),d(Ar,"class","docstring"),d(hM,"id","transformers.TFAutoModelForTokenClassification"),d(hM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hM,"href","#transformers.TFAutoModelForTokenClassification"),d(jc,"class","relative group"),d(Ct,"class","docstring"),d(TX,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(FX,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(CX,"href","/docs/transformers/pr_16162/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(MX,"href","/docs/transformers/pr_16162/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(EX,"href","/docs/transformers/pr_16162/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(yX,"href","/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(wX,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(AX,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(LX,"href","/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(BX,"href","/docs/transformers/pr_16162/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(xX,"href","/docs/transformers/pr_16162/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(kX,"href","/docs/transformers/pr_16162/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(RX,"href","/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(SX,"href","/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(PX,"href","/docs/transformers/pr_16162/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d($X,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(IX,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(NX,"href","/docs/transformers/pr_16162/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(DX,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(jX,"href","/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Mo,"class","docstring"),d(Lr,"class","docstring"),d($M,"id","transformers.TFAutoModelForQuestionAnswering"),d($M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($M,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Oc,"class","relative group"),d(Mt,"class","docstring"),d(qX,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(GX,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(OX,"href","/docs/transformers/pr_16162/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(XX,"href","/docs/transformers/pr_16162/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(VX,"href","/docs/transformers/pr_16162/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(zX,"href","/docs/transformers/pr_16162/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(WX,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(QX,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(HX,"href","/docs/transformers/pr_16162/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(UX,"href","/docs/transformers/pr_16162/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(JX,"href","/docs/transformers/pr_16162/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(YX,"href","/docs/transformers/pr_16162/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(KX,"href","/docs/transformers/pr_16162/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(ZX,"href","/docs/transformers/pr_16162/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(eV,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(oV,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(rV,"href","/docs/transformers/pr_16162/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(tV,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(aV,"href","/docs/transformers/pr_16162/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Eo,"class","docstring"),d(Br,"class","docstring"),d(o4,"id","transformers.TFAutoModelForVision2Seq"),d(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o4,"href","#transformers.TFAutoModelForVision2Seq"),d(zc,"class","relative group"),d(Et,"class","docstring"),d(nV,"href","/docs/transformers/pr_16162/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(yo,"class","docstring"),d(xr,"class","docstring"),d(t4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Hc,"class","relative group"),d(yt,"class","docstring"),d(sV,"href","/docs/transformers/pr_16162/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(n4,"id","transformers.FlaxAutoModel"),d(n4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n4,"href","#transformers.FlaxAutoModel"),d(Yc,"class","relative group"),d(wt,"class","docstring"),d(lV,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.FlaxAlbertModel"),d(iV,"href","/docs/transformers/pr_16162/en/model_doc/bart#transformers.FlaxBartModel"),d(dV,"href","/docs/transformers/pr_16162/en/model_doc/beit#transformers.FlaxBeitModel"),d(cV,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.FlaxBertModel"),d(fV,"href","/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(mV,"href","/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(gV,"href","/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(hV,"href","/docs/transformers/pr_16162/en/model_doc/clip#transformers.FlaxCLIPModel"),d(pV,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(_V,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.FlaxElectraModel"),d(uV,"href","/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(bV,"href","/docs/transformers/pr_16162/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(vV,"href","/docs/transformers/pr_16162/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(TV,"href","/docs/transformers/pr_16162/en/model_doc/marian#transformers.FlaxMarianModel"),d(FV,"href","/docs/transformers/pr_16162/en/model_doc/mbart#transformers.FlaxMBartModel"),d(CV,"href","/docs/transformers/pr_16162/en/model_doc/mt5#transformers.FlaxMT5Model"),d(MV,"href","/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(EV,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(yV,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(wV,"href","/docs/transformers/pr_16162/en/model_doc/t5#transformers.FlaxT5Model"),d(AV,"href","/docs/transformers/pr_16162/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(LV,"href","/docs/transformers/pr_16162/en/model_doc/vit#transformers.FlaxViTModel"),d(BV,"href","/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(xV,"href","/docs/transformers/pr_16162/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(kV,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Ao,"class","docstring"),d(Rr,"class","docstring"),d(k4,"id","transformers.FlaxAutoModelForCausalLM"),d(k4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k4,"href","#transformers.FlaxAutoModelForCausalLM"),d(ef,"class","relative group"),d(At,"class","docstring"),d(RV,"href","/docs/transformers/pr_16162/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(SV,"href","/docs/transformers/pr_16162/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(PV,"href","/docs/transformers/pr_16162/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d($V,"href","/docs/transformers/pr_16162/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(IV,"href","/docs/transformers/pr_16162/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Sr,"class","docstring"),d(N4,"id","transformers.FlaxAutoModelForPreTraining"),d(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N4,"href","#transformers.FlaxAutoModelForPreTraining"),d(tf,"class","relative group"),d(Lt,"class","docstring"),d(NV,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(DV,"href","/docs/transformers/pr_16162/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(jV,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(qV,"href","/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(GV,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(OV,"href","/docs/transformers/pr_16162/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(XV,"href","/docs/transformers/pr_16162/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(VV,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(zV,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(WV,"href","/docs/transformers/pr_16162/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(QV,"href","/docs/transformers/pr_16162/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(HV,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Bo,"class","docstring"),d(Pr,"class","docstring"),d(J4,"id","transformers.FlaxAutoModelForMaskedLM"),d(J4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J4,"href","#transformers.FlaxAutoModelForMaskedLM"),d(sf,"class","relative group"),d(Bt,"class","docstring"),d(UV,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(JV,"href","/docs/transformers/pr_16162/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(YV,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(KV,"href","/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(ZV,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(ez,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(oz,"href","/docs/transformers/pr_16162/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(rz,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(tz,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(az,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d($r,"class","docstring"),d(lE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(cf,"class","relative group"),d(xt,"class","docstring"),d(nz,"href","/docs/transformers/pr_16162/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(sz,"href","/docs/transformers/pr_16162/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(lz,"href","/docs/transformers/pr_16162/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(iz,"href","/docs/transformers/pr_16162/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(dz,"href","/docs/transformers/pr_16162/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(cz,"href","/docs/transformers/pr_16162/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(fz,"href","/docs/transformers/pr_16162/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(mz,"href","/docs/transformers/pr_16162/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(gz,"href","/docs/transformers/pr_16162/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ko,"class","docstring"),d(Ir,"class","docstring"),d(uE,"id","transformers.FlaxAutoModelForSequenceClassification"),d(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uE,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(gf,"class","relative group"),d(kt,"class","docstring"),d(hz,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(pz,"href","/docs/transformers/pr_16162/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(_z,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(uz,"href","/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(bz,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(vz,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(Tz,"href","/docs/transformers/pr_16162/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(Fz,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(Cz,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(Mz,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(Nr,"class","docstring"),d(LE,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LE,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(_f,"class","relative group"),d(Rt,"class","docstring"),d(Ez,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(yz,"href","/docs/transformers/pr_16162/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(wz,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(Az,"href","/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(Lz,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(Bz,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(xz,"href","/docs/transformers/pr_16162/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(kz,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(Rz,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Sz,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(So,"class","docstring"),d(Dr,"class","docstring"),d(jE,"id","transformers.FlaxAutoModelForTokenClassification"),d(jE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jE,"href","#transformers.FlaxAutoModelForTokenClassification"),d(vf,"class","relative group"),d(St,"class","docstring"),d(Pz,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d($z,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(Iz,"href","/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(Nz,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(Dz,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(jz,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(qz,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(Gz,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(HE,"id","transformers.FlaxAutoModelForMultipleChoice"),d(HE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(HE,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Cf,"class","relative group"),d(Pt,"class","docstring"),d(Oz,"href","/docs/transformers/pr_16162/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(Xz,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Vz,"href","/docs/transformers/pr_16162/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(zz,"href","/docs/transformers/pr_16162/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Wz,"href","/docs/transformers/pr_16162/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(Qz,"href","/docs/transformers/pr_16162/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Hz,"href","/docs/transformers/pr_16162/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Uz,"href","/docs/transformers/pr_16162/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(qr,"class","docstring"),d(t3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(yf,"class","relative group"),d($t,"class","docstring"),d(Jz,"href","/docs/transformers/pr_16162/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(n3,"id","transformers.FlaxAutoModelForImageClassification"),d(n3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n3,"href","#transformers.FlaxAutoModelForImageClassification"),d(Lf,"class","relative group"),d(It,"class","docstring"),d(Yz,"href","/docs/transformers/pr_16162/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(Kz,"href","/docs/transformers/pr_16162/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(No,"class","docstring"),d(Or,"class","docstring"),d(i3,"id","transformers.FlaxAutoModelForVision2Seq"),d(i3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i3,"href","#transformers.FlaxAutoModelForVision2Seq"),d(kf,"class","relative group"),d(Nt,"class","docstring"),d(Zz,"href","/docs/transformers/pr_16162/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(Do,"class","docstring"),d(Xr,"class","docstring")},m(c,u){e(document.head,K),b(c,io,u),b(c,de,u),e(de,Ee),e(Ee,lo),g(me,lo,null),e(de,Ce),e(de,Vo),e(Vo,Ii),b(c,If,u),b(c,fa,u),e(fa,Ni),e(fa,Di),e(Di,d5),e(fa,Nf),b(c,Be,u),b(c,co,u),e(co,ji),e(co,Gn),e(Gn,c5),e(co,On),e(co,Xn),e(Xn,f5),e(co,qi),e(co,Vn),e(Vn,m5),e(co,Gi),b(c,Df,u),g(qa,c,u),b(c,fo,u),b(c,_e,u),e(_e,r9),e(_e,Oi),e(Oi,t9),e(_e,a9),b(c,zo,u),b(c,Ga,u),e(Ga,n9),e(Ga,jf),e(jf,s9),e(Ga,x$e),b(c,_ke,u),b(c,Xi,u),e(Xi,qf),e(qf,WQ),g(g5,WQ,null),e(Xi,k$e),e(Xi,QQ),e(QQ,R$e),b(c,uke,u),b(c,zn,u),e(zn,S$e),e(zn,HQ),e(HQ,P$e),e(zn,$$e),e(zn,UQ),e(UQ,I$e),e(zn,N$e),b(c,bke,u),g(h5,c,u),b(c,vke,u),b(c,l9,u),e(l9,D$e),b(c,Tke,u),g(Gf,c,u),b(c,Fke,u),b(c,Vi,u),e(Vi,Of),e(Of,JQ),g(p5,JQ,null),e(Vi,j$e),e(Vi,YQ),e(YQ,q$e),b(c,Cke,u),b(c,Wo,u),g(_5,Wo,null),e(Wo,G$e),e(Wo,u5),e(u5,O$e),e(u5,i9),e(i9,X$e),e(u5,V$e),e(Wo,z$e),e(Wo,b5),e(b5,W$e),e(b5,KQ),e(KQ,Q$e),e(b5,H$e),e(Wo,U$e),e(Wo,mo),g(v5,mo,null),e(mo,J$e),e(mo,ZQ),e(ZQ,Y$e),e(mo,K$e),e(mo,zi),e(zi,Z$e),e(zi,eH),e(eH,eIe),e(zi,oIe),e(zi,oH),e(oH,rIe),e(zi,tIe),e(mo,aIe),e(mo,v),e(v,Xf),e(Xf,rH),e(rH,nIe),e(Xf,sIe),e(Xf,d9),e(d9,lIe),e(Xf,iIe),e(v,dIe),e(v,Vf),e(Vf,tH),e(tH,cIe),e(Vf,fIe),e(Vf,c9),e(c9,mIe),e(Vf,gIe),e(v,hIe),e(v,zf),e(zf,aH),e(aH,pIe),e(zf,_Ie),e(zf,f9),e(f9,uIe),e(zf,bIe),e(v,vIe),e(v,Wf),e(Wf,nH),e(nH,TIe),e(Wf,FIe),e(Wf,m9),e(m9,CIe),e(Wf,MIe),e(v,EIe),e(v,Qf),e(Qf,sH),e(sH,yIe),e(Qf,wIe),e(Qf,g9),e(g9,AIe),e(Qf,LIe),e(v,BIe),e(v,Hf),e(Hf,lH),e(lH,xIe),e(Hf,kIe),e(Hf,h9),e(h9,RIe),e(Hf,SIe),e(v,PIe),e(v,Uf),e(Uf,iH),e(iH,$Ie),e(Uf,IIe),e(Uf,p9),e(p9,NIe),e(Uf,DIe),e(v,jIe),e(v,Jf),e(Jf,dH),e(dH,qIe),e(Jf,GIe),e(Jf,_9),e(_9,OIe),e(Jf,XIe),e(v,VIe),e(v,Yf),e(Yf,cH),e(cH,zIe),e(Yf,WIe),e(Yf,u9),e(u9,QIe),e(Yf,HIe),e(v,UIe),e(v,Kf),e(Kf,fH),e(fH,JIe),e(Kf,YIe),e(Kf,b9),e(b9,KIe),e(Kf,ZIe),e(v,eNe),e(v,Zf),e(Zf,mH),e(mH,oNe),e(Zf,rNe),e(Zf,v9),e(v9,tNe),e(Zf,aNe),e(v,nNe),e(v,em),e(em,gH),e(gH,sNe),e(em,lNe),e(em,T9),e(T9,iNe),e(em,dNe),e(v,cNe),e(v,om),e(om,hH),e(hH,fNe),e(om,mNe),e(om,F9),e(F9,gNe),e(om,hNe),e(v,pNe),e(v,rm),e(rm,pH),e(pH,_Ne),e(rm,uNe),e(rm,C9),e(C9,bNe),e(rm,vNe),e(v,TNe),e(v,tm),e(tm,_H),e(_H,FNe),e(tm,CNe),e(tm,M9),e(M9,MNe),e(tm,ENe),e(v,yNe),e(v,am),e(am,uH),e(uH,wNe),e(am,ANe),e(am,E9),e(E9,LNe),e(am,BNe),e(v,xNe),e(v,nm),e(nm,bH),e(bH,kNe),e(nm,RNe),e(nm,y9),e(y9,SNe),e(nm,PNe),e(v,$Ne),e(v,sm),e(sm,vH),e(vH,INe),e(sm,NNe),e(sm,w9),e(w9,DNe),e(sm,jNe),e(v,qNe),e(v,lm),e(lm,TH),e(TH,GNe),e(lm,ONe),e(lm,A9),e(A9,XNe),e(lm,VNe),e(v,zNe),e(v,im),e(im,FH),e(FH,WNe),e(im,QNe),e(im,L9),e(L9,HNe),e(im,UNe),e(v,JNe),e(v,dm),e(dm,CH),e(CH,YNe),e(dm,KNe),e(dm,B9),e(B9,ZNe),e(dm,eDe),e(v,oDe),e(v,cm),e(cm,MH),e(MH,rDe),e(cm,tDe),e(cm,x9),e(x9,aDe),e(cm,nDe),e(v,sDe),e(v,fm),e(fm,EH),e(EH,lDe),e(fm,iDe),e(fm,k9),e(k9,dDe),e(fm,cDe),e(v,fDe),e(v,mm),e(mm,yH),e(yH,mDe),e(mm,gDe),e(mm,R9),e(R9,hDe),e(mm,pDe),e(v,_De),e(v,gm),e(gm,wH),e(wH,uDe),e(gm,bDe),e(gm,S9),e(S9,vDe),e(gm,TDe),e(v,FDe),e(v,hm),e(hm,AH),e(AH,CDe),e(hm,MDe),e(hm,P9),e(P9,EDe),e(hm,yDe),e(v,wDe),e(v,pm),e(pm,LH),e(LH,ADe),e(pm,LDe),e(pm,$9),e($9,BDe),e(pm,xDe),e(v,kDe),e(v,_m),e(_m,BH),e(BH,RDe),e(_m,SDe),e(_m,I9),e(I9,PDe),e(_m,$De),e(v,IDe),e(v,um),e(um,xH),e(xH,NDe),e(um,DDe),e(um,N9),e(N9,jDe),e(um,qDe),e(v,GDe),e(v,bm),e(bm,kH),e(kH,ODe),e(bm,XDe),e(bm,D9),e(D9,VDe),e(bm,zDe),e(v,WDe),e(v,vm),e(vm,RH),e(RH,QDe),e(vm,HDe),e(vm,j9),e(j9,UDe),e(vm,JDe),e(v,YDe),e(v,Tm),e(Tm,SH),e(SH,KDe),e(Tm,ZDe),e(Tm,q9),e(q9,eje),e(Tm,oje),e(v,rje),e(v,Fm),e(Fm,PH),e(PH,tje),e(Fm,aje),e(Fm,G9),e(G9,nje),e(Fm,sje),e(v,lje),e(v,Cm),e(Cm,$H),e($H,ije),e(Cm,dje),e(Cm,O9),e(O9,cje),e(Cm,fje),e(v,mje),e(v,Mm),e(Mm,IH),e(IH,gje),e(Mm,hje),e(Mm,X9),e(X9,pje),e(Mm,_je),e(v,uje),e(v,Em),e(Em,NH),e(NH,bje),e(Em,vje),e(Em,V9),e(V9,Tje),e(Em,Fje),e(v,Cje),e(v,ym),e(ym,DH),e(DH,Mje),e(ym,Eje),e(ym,z9),e(z9,yje),e(ym,wje),e(v,Aje),e(v,wm),e(wm,jH),e(jH,Lje),e(wm,Bje),e(wm,W9),e(W9,xje),e(wm,kje),e(v,Rje),e(v,Am),e(Am,qH),e(qH,Sje),e(Am,Pje),e(Am,Q9),e(Q9,$je),e(Am,Ije),e(v,Nje),e(v,Lm),e(Lm,GH),e(GH,Dje),e(Lm,jje),e(Lm,H9),e(H9,qje),e(Lm,Gje),e(v,Oje),e(v,Bm),e(Bm,OH),e(OH,Xje),e(Bm,Vje),e(Bm,U9),e(U9,zje),e(Bm,Wje),e(v,Qje),e(v,xm),e(xm,XH),e(XH,Hje),e(xm,Uje),e(xm,J9),e(J9,Jje),e(xm,Yje),e(v,Kje),e(v,km),e(km,VH),e(VH,Zje),e(km,eqe),e(km,Y9),e(Y9,oqe),e(km,rqe),e(v,tqe),e(v,Rm),e(Rm,zH),e(zH,aqe),e(Rm,nqe),e(Rm,K9),e(K9,sqe),e(Rm,lqe),e(v,iqe),e(v,Sm),e(Sm,WH),e(WH,dqe),e(Sm,cqe),e(Sm,Z9),e(Z9,fqe),e(Sm,mqe),e(v,gqe),e(v,Pm),e(Pm,QH),e(QH,hqe),e(Pm,pqe),e(Pm,eB),e(eB,_qe),e(Pm,uqe),e(v,bqe),e(v,$m),e($m,HH),e(HH,vqe),e($m,Tqe),e($m,oB),e(oB,Fqe),e($m,Cqe),e(v,Mqe),e(v,Im),e(Im,UH),e(UH,Eqe),e(Im,yqe),e(Im,rB),e(rB,wqe),e(Im,Aqe),e(v,Lqe),e(v,Nm),e(Nm,JH),e(JH,Bqe),e(Nm,xqe),e(Nm,tB),e(tB,kqe),e(Nm,Rqe),e(v,Sqe),e(v,Dm),e(Dm,YH),e(YH,Pqe),e(Dm,$qe),e(Dm,aB),e(aB,Iqe),e(Dm,Nqe),e(v,Dqe),e(v,jm),e(jm,KH),e(KH,jqe),e(jm,qqe),e(jm,nB),e(nB,Gqe),e(jm,Oqe),e(v,Xqe),e(v,qm),e(qm,ZH),e(ZH,Vqe),e(qm,zqe),e(qm,sB),e(sB,Wqe),e(qm,Qqe),e(v,Hqe),e(v,Gm),e(Gm,eU),e(eU,Uqe),e(Gm,Jqe),e(Gm,lB),e(lB,Yqe),e(Gm,Kqe),e(v,Zqe),e(v,Om),e(Om,oU),e(oU,eGe),e(Om,oGe),e(Om,iB),e(iB,rGe),e(Om,tGe),e(v,aGe),e(v,Xm),e(Xm,rU),e(rU,nGe),e(Xm,sGe),e(Xm,dB),e(dB,lGe),e(Xm,iGe),e(v,dGe),e(v,Vm),e(Vm,tU),e(tU,cGe),e(Vm,fGe),e(Vm,cB),e(cB,mGe),e(Vm,gGe),e(v,hGe),e(v,zm),e(zm,aU),e(aU,pGe),e(zm,_Ge),e(zm,fB),e(fB,uGe),e(zm,bGe),e(v,vGe),e(v,Wm),e(Wm,nU),e(nU,TGe),e(Wm,FGe),e(Wm,mB),e(mB,CGe),e(Wm,MGe),e(v,EGe),e(v,Qm),e(Qm,sU),e(sU,yGe),e(Qm,wGe),e(Qm,gB),e(gB,AGe),e(Qm,LGe),e(v,BGe),e(v,Hm),e(Hm,lU),e(lU,xGe),e(Hm,kGe),e(Hm,hB),e(hB,RGe),e(Hm,SGe),e(v,PGe),e(v,Um),e(Um,iU),e(iU,$Ge),e(Um,IGe),e(Um,pB),e(pB,NGe),e(Um,DGe),e(v,jGe),e(v,Jm),e(Jm,dU),e(dU,qGe),e(Jm,GGe),e(Jm,_B),e(_B,OGe),e(Jm,XGe),e(v,VGe),e(v,Ym),e(Ym,cU),e(cU,zGe),e(Ym,WGe),e(Ym,uB),e(uB,QGe),e(Ym,HGe),e(v,UGe),e(v,Km),e(Km,fU),e(fU,JGe),e(Km,YGe),e(Km,bB),e(bB,KGe),e(Km,ZGe),e(v,eOe),e(v,Zm),e(Zm,mU),e(mU,oOe),e(Zm,rOe),e(Zm,vB),e(vB,tOe),e(Zm,aOe),e(v,nOe),e(v,eg),e(eg,gU),e(gU,sOe),e(eg,lOe),e(eg,TB),e(TB,iOe),e(eg,dOe),e(v,cOe),e(v,og),e(og,hU),e(hU,fOe),e(og,mOe),e(og,FB),e(FB,gOe),e(og,hOe),e(v,pOe),e(v,rg),e(rg,pU),e(pU,_Oe),e(rg,uOe),e(rg,CB),e(CB,bOe),e(rg,vOe),e(v,TOe),e(v,tg),e(tg,_U),e(_U,FOe),e(tg,COe),e(tg,MB),e(MB,MOe),e(tg,EOe),e(v,yOe),e(v,ag),e(ag,uU),e(uU,wOe),e(ag,AOe),e(ag,EB),e(EB,LOe),e(ag,BOe),e(v,xOe),e(v,ng),e(ng,bU),e(bU,kOe),e(ng,ROe),e(ng,yB),e(yB,SOe),e(ng,POe),e(v,$Oe),e(v,sg),e(sg,vU),e(vU,IOe),e(sg,NOe),e(sg,wB),e(wB,DOe),e(sg,jOe),e(v,qOe),e(v,lg),e(lg,TU),e(TU,GOe),e(lg,OOe),e(lg,AB),e(AB,XOe),e(lg,VOe),e(v,zOe),e(v,ig),e(ig,FU),e(FU,WOe),e(ig,QOe),e(ig,LB),e(LB,HOe),e(ig,UOe),e(v,JOe),e(v,dg),e(dg,CU),e(CU,YOe),e(dg,KOe),e(dg,BB),e(BB,ZOe),e(dg,eXe),e(v,oXe),e(v,cg),e(cg,MU),e(MU,rXe),e(cg,tXe),e(cg,xB),e(xB,aXe),e(cg,nXe),e(v,sXe),e(v,fg),e(fg,EU),e(EU,lXe),e(fg,iXe),e(fg,kB),e(kB,dXe),e(fg,cXe),e(v,fXe),e(v,mg),e(mg,yU),e(yU,mXe),e(mg,gXe),e(mg,RB),e(RB,hXe),e(mg,pXe),e(v,_Xe),e(v,gg),e(gg,wU),e(wU,uXe),e(gg,bXe),e(gg,SB),e(SB,vXe),e(gg,TXe),e(v,FXe),e(v,hg),e(hg,AU),e(AU,CXe),e(hg,MXe),e(hg,PB),e(PB,EXe),e(hg,yXe),e(v,wXe),e(v,pg),e(pg,LU),e(LU,AXe),e(pg,LXe),e(pg,$B),e($B,BXe),e(pg,xXe),e(v,kXe),e(v,_g),e(_g,BU),e(BU,RXe),e(_g,SXe),e(_g,IB),e(IB,PXe),e(_g,$Xe),e(v,IXe),e(v,ug),e(ug,xU),e(xU,NXe),e(ug,DXe),e(ug,NB),e(NB,jXe),e(ug,qXe),e(v,GXe),e(v,bg),e(bg,kU),e(kU,OXe),e(bg,XXe),e(bg,DB),e(DB,VXe),e(bg,zXe),e(v,WXe),e(v,vg),e(vg,RU),e(RU,QXe),e(vg,HXe),e(vg,jB),e(jB,UXe),e(vg,JXe),e(v,YXe),e(v,Tg),e(Tg,SU),e(SU,KXe),e(Tg,ZXe),e(Tg,qB),e(qB,eVe),e(Tg,oVe),e(v,rVe),e(v,Fg),e(Fg,PU),e(PU,tVe),e(Fg,aVe),e(Fg,GB),e(GB,nVe),e(Fg,sVe),e(v,lVe),e(v,Cg),e(Cg,$U),e($U,iVe),e(Cg,dVe),e(Cg,OB),e(OB,cVe),e(Cg,fVe),e(v,mVe),e(v,Mg),e(Mg,IU),e(IU,gVe),e(Mg,hVe),e(Mg,XB),e(XB,pVe),e(Mg,_Ve),e(v,uVe),e(v,Eg),e(Eg,NU),e(NU,bVe),e(Eg,vVe),e(Eg,VB),e(VB,TVe),e(Eg,FVe),e(v,CVe),e(v,yg),e(yg,DU),e(DU,MVe),e(yg,EVe),e(yg,zB),e(zB,yVe),e(yg,wVe),e(v,AVe),e(v,wg),e(wg,jU),e(jU,LVe),e(wg,BVe),e(wg,WB),e(WB,xVe),e(wg,kVe),e(v,RVe),e(v,Ag),e(Ag,qU),e(qU,SVe),e(Ag,PVe),e(Ag,QB),e(QB,$Ve),e(Ag,IVe),e(v,NVe),e(v,Lg),e(Lg,GU),e(GU,DVe),e(Lg,jVe),e(Lg,HB),e(HB,qVe),e(Lg,GVe),e(v,OVe),e(v,Bg),e(Bg,OU),e(OU,XVe),e(Bg,VVe),e(Bg,UB),e(UB,zVe),e(Bg,WVe),e(v,QVe),e(v,xg),e(xg,XU),e(XU,HVe),e(xg,UVe),e(xg,JB),e(JB,JVe),e(xg,YVe),e(v,KVe),e(v,kg),e(kg,VU),e(VU,ZVe),e(kg,eze),e(kg,YB),e(YB,oze),e(kg,rze),e(v,tze),e(v,Rg),e(Rg,zU),e(zU,aze),e(Rg,nze),e(Rg,KB),e(KB,sze),e(Rg,lze),e(v,ize),e(v,Sg),e(Sg,WU),e(WU,dze),e(Sg,cze),e(Sg,ZB),e(ZB,fze),e(Sg,mze),e(mo,gze),e(mo,QU),e(QU,hze),e(mo,pze),g(T5,mo,null),e(Wo,_ze),e(Wo,Pg),g(F5,Pg,null),e(Pg,uze),e(Pg,HU),e(HU,bze),b(c,Mke,u),b(c,Wi,u),e(Wi,$g),e($g,UU),g(C5,UU,null),e(Wi,vze),e(Wi,JU),e(JU,Tze),b(c,Eke,u),b(c,Qo,u),g(M5,Qo,null),e(Qo,Fze),e(Qo,E5),e(E5,Cze),e(E5,ex),e(ex,Mze),e(E5,Eze),e(Qo,yze),e(Qo,y5),e(y5,wze),e(y5,YU),e(YU,Aze),e(y5,Lze),e(Qo,Bze),e(Qo,go),g(w5,go,null),e(go,xze),e(go,KU),e(KU,kze),e(go,Rze),e(go,Oa),e(Oa,Sze),e(Oa,ZU),e(ZU,Pze),e(Oa,$ze),e(Oa,eJ),e(eJ,Ize),e(Oa,Nze),e(Oa,oJ),e(oJ,Dze),e(Oa,jze),e(go,qze),e(go,E),e(E,Wn),e(Wn,rJ),e(rJ,Gze),e(Wn,Oze),e(Wn,ox),e(ox,Xze),e(Wn,Vze),e(Wn,rx),e(rx,zze),e(Wn,Wze),e(E,Qze),e(E,Qn),e(Qn,tJ),e(tJ,Hze),e(Qn,Uze),e(Qn,tx),e(tx,Jze),e(Qn,Yze),e(Qn,ax),e(ax,Kze),e(Qn,Zze),e(E,eWe),e(E,Hn),e(Hn,aJ),e(aJ,oWe),e(Hn,rWe),e(Hn,nx),e(nx,tWe),e(Hn,aWe),e(Hn,sx),e(sx,nWe),e(Hn,sWe),e(E,lWe),e(E,Ig),e(Ig,nJ),e(nJ,iWe),e(Ig,dWe),e(Ig,lx),e(lx,cWe),e(Ig,fWe),e(E,mWe),e(E,Un),e(Un,sJ),e(sJ,gWe),e(Un,hWe),e(Un,ix),e(ix,pWe),e(Un,_We),e(Un,dx),e(dx,uWe),e(Un,bWe),e(E,vWe),e(E,Ng),e(Ng,lJ),e(lJ,TWe),e(Ng,FWe),e(Ng,cx),e(cx,CWe),e(Ng,MWe),e(E,EWe),e(E,Dg),e(Dg,iJ),e(iJ,yWe),e(Dg,wWe),e(Dg,fx),e(fx,AWe),e(Dg,LWe),e(E,BWe),e(E,jg),e(jg,dJ),e(dJ,xWe),e(jg,kWe),e(jg,mx),e(mx,RWe),e(jg,SWe),e(E,PWe),e(E,Jn),e(Jn,cJ),e(cJ,$We),e(Jn,IWe),e(Jn,gx),e(gx,NWe),e(Jn,DWe),e(Jn,hx),e(hx,jWe),e(Jn,qWe),e(E,GWe),e(E,Yn),e(Yn,fJ),e(fJ,OWe),e(Yn,XWe),e(Yn,px),e(px,VWe),e(Yn,zWe),e(Yn,_x),e(_x,WWe),e(Yn,QWe),e(E,HWe),e(E,Kn),e(Kn,mJ),e(mJ,UWe),e(Kn,JWe),e(Kn,ux),e(ux,YWe),e(Kn,KWe),e(Kn,bx),e(bx,ZWe),e(Kn,eQe),e(E,oQe),e(E,qg),e(qg,gJ),e(gJ,rQe),e(qg,tQe),e(qg,vx),e(vx,aQe),e(qg,nQe),e(E,sQe),e(E,Gg),e(Gg,hJ),e(hJ,lQe),e(Gg,iQe),e(Gg,Tx),e(Tx,dQe),e(Gg,cQe),e(E,fQe),e(E,Zn),e(Zn,pJ),e(pJ,mQe),e(Zn,gQe),e(Zn,Fx),e(Fx,hQe),e(Zn,pQe),e(Zn,Cx),e(Cx,_Qe),e(Zn,uQe),e(E,bQe),e(E,Og),e(Og,_J),e(_J,vQe),e(Og,TQe),e(Og,Mx),e(Mx,FQe),e(Og,CQe),e(E,MQe),e(E,es),e(es,uJ),e(uJ,EQe),e(es,yQe),e(es,Ex),e(Ex,wQe),e(es,AQe),e(es,yx),e(yx,LQe),e(es,BQe),e(E,xQe),e(E,os),e(os,bJ),e(bJ,kQe),e(os,RQe),e(os,wx),e(wx,SQe),e(os,PQe),e(os,Ax),e(Ax,$Qe),e(os,IQe),e(E,NQe),e(E,rs),e(rs,vJ),e(vJ,DQe),e(rs,jQe),e(rs,Lx),e(Lx,qQe),e(rs,GQe),e(rs,TJ),e(TJ,OQe),e(rs,XQe),e(E,VQe),e(E,Xg),e(Xg,FJ),e(FJ,zQe),e(Xg,WQe),e(Xg,Bx),e(Bx,QQe),e(Xg,HQe),e(E,UQe),e(E,ts),e(ts,CJ),e(CJ,JQe),e(ts,YQe),e(ts,xx),e(xx,KQe),e(ts,ZQe),e(ts,kx),e(kx,eHe),e(ts,oHe),e(E,rHe),e(E,Vg),e(Vg,MJ),e(MJ,tHe),e(Vg,aHe),e(Vg,Rx),e(Rx,nHe),e(Vg,sHe),e(E,lHe),e(E,as),e(as,EJ),e(EJ,iHe),e(as,dHe),e(as,Sx),e(Sx,cHe),e(as,fHe),e(as,Px),e(Px,mHe),e(as,gHe),e(E,hHe),e(E,ns),e(ns,yJ),e(yJ,pHe),e(ns,_He),e(ns,$x),e($x,uHe),e(ns,bHe),e(ns,Ix),e(Ix,vHe),e(ns,THe),e(E,FHe),e(E,ss),e(ss,wJ),e(wJ,CHe),e(ss,MHe),e(ss,Nx),e(Nx,EHe),e(ss,yHe),e(ss,Dx),e(Dx,wHe),e(ss,AHe),e(E,LHe),e(E,zg),e(zg,AJ),e(AJ,BHe),e(zg,xHe),e(zg,jx),e(jx,kHe),e(zg,RHe),e(E,SHe),e(E,ls),e(ls,LJ),e(LJ,PHe),e(ls,$He),e(ls,qx),e(qx,IHe),e(ls,NHe),e(ls,Gx),e(Gx,DHe),e(ls,jHe),e(E,qHe),e(E,Wg),e(Wg,BJ),e(BJ,GHe),e(Wg,OHe),e(Wg,Ox),e(Ox,XHe),e(Wg,VHe),e(E,zHe),e(E,is),e(is,xJ),e(xJ,WHe),e(is,QHe),e(is,Xx),e(Xx,HHe),e(is,UHe),e(is,Vx),e(Vx,JHe),e(is,YHe),e(E,KHe),e(E,ds),e(ds,kJ),e(kJ,ZHe),e(ds,eUe),e(ds,zx),e(zx,oUe),e(ds,rUe),e(ds,Wx),e(Wx,tUe),e(ds,aUe),e(E,nUe),e(E,cs),e(cs,RJ),e(RJ,sUe),e(cs,lUe),e(cs,Qx),e(Qx,iUe),e(cs,dUe),e(cs,Hx),e(Hx,cUe),e(cs,fUe),e(E,mUe),e(E,fs),e(fs,SJ),e(SJ,gUe),e(fs,hUe),e(fs,Ux),e(Ux,pUe),e(fs,_Ue),e(fs,Jx),e(Jx,uUe),e(fs,bUe),e(E,vUe),e(E,Qg),e(Qg,PJ),e(PJ,TUe),e(Qg,FUe),e(Qg,Yx),e(Yx,CUe),e(Qg,MUe),e(E,EUe),e(E,ms),e(ms,$J),e($J,yUe),e(ms,wUe),e(ms,Kx),e(Kx,AUe),e(ms,LUe),e(ms,Zx),e(Zx,BUe),e(ms,xUe),e(E,kUe),e(E,gs),e(gs,IJ),e(IJ,RUe),e(gs,SUe),e(gs,ek),e(ek,PUe),e(gs,$Ue),e(gs,ok),e(ok,IUe),e(gs,NUe),e(E,DUe),e(E,hs),e(hs,NJ),e(NJ,jUe),e(hs,qUe),e(hs,rk),e(rk,GUe),e(hs,OUe),e(hs,tk),e(tk,XUe),e(hs,VUe),e(E,zUe),e(E,ps),e(ps,DJ),e(DJ,WUe),e(ps,QUe),e(ps,ak),e(ak,HUe),e(ps,UUe),e(ps,nk),e(nk,JUe),e(ps,YUe),e(E,KUe),e(E,_s),e(_s,jJ),e(jJ,ZUe),e(_s,eJe),e(_s,sk),e(sk,oJe),e(_s,rJe),e(_s,lk),e(lk,tJe),e(_s,aJe),e(E,nJe),e(E,us),e(us,qJ),e(qJ,sJe),e(us,lJe),e(us,ik),e(ik,iJe),e(us,dJe),e(us,dk),e(dk,cJe),e(us,fJe),e(E,mJe),e(E,Hg),e(Hg,GJ),e(GJ,gJe),e(Hg,hJe),e(Hg,ck),e(ck,pJe),e(Hg,_Je),e(E,uJe),e(E,bs),e(bs,OJ),e(OJ,bJe),e(bs,vJe),e(bs,fk),e(fk,TJe),e(bs,FJe),e(bs,mk),e(mk,CJe),e(bs,MJe),e(E,EJe),e(E,Ug),e(Ug,XJ),e(XJ,yJe),e(Ug,wJe),e(Ug,gk),e(gk,AJe),e(Ug,LJe),e(E,BJe),e(E,Jg),e(Jg,VJ),e(VJ,xJe),e(Jg,kJe),e(Jg,hk),e(hk,RJe),e(Jg,SJe),e(E,PJe),e(E,vs),e(vs,zJ),e(zJ,$Je),e(vs,IJe),e(vs,pk),e(pk,NJe),e(vs,DJe),e(vs,_k),e(_k,jJe),e(vs,qJe),e(E,GJe),e(E,Ts),e(Ts,WJ),e(WJ,OJe),e(Ts,XJe),e(Ts,uk),e(uk,VJe),e(Ts,zJe),e(Ts,bk),e(bk,WJe),e(Ts,QJe),e(E,HJe),e(E,Yg),e(Yg,QJ),e(QJ,UJe),e(Yg,JJe),e(Yg,vk),e(vk,YJe),e(Yg,KJe),e(E,ZJe),e(E,Fs),e(Fs,HJ),e(HJ,eYe),e(Fs,oYe),e(Fs,Tk),e(Tk,rYe),e(Fs,tYe),e(Fs,Fk),e(Fk,aYe),e(Fs,nYe),e(E,sYe),e(E,Cs),e(Cs,UJ),e(UJ,lYe),e(Cs,iYe),e(Cs,Ck),e(Ck,dYe),e(Cs,cYe),e(Cs,Mk),e(Mk,fYe),e(Cs,mYe),e(E,gYe),e(E,Ms),e(Ms,JJ),e(JJ,hYe),e(Ms,pYe),e(Ms,Ek),e(Ek,_Ye),e(Ms,uYe),e(Ms,yk),e(yk,bYe),e(Ms,vYe),e(E,TYe),e(E,Es),e(Es,YJ),e(YJ,FYe),e(Es,CYe),e(Es,wk),e(wk,MYe),e(Es,EYe),e(Es,Ak),e(Ak,yYe),e(Es,wYe),e(E,AYe),e(E,ys),e(ys,KJ),e(KJ,LYe),e(ys,BYe),e(ys,Lk),e(Lk,xYe),e(ys,kYe),e(ys,Bk),e(Bk,RYe),e(ys,SYe),e(E,PYe),e(E,Kg),e(Kg,ZJ),e(ZJ,$Ye),e(Kg,IYe),e(Kg,xk),e(xk,NYe),e(Kg,DYe),e(E,jYe),e(E,Zg),e(Zg,eY),e(eY,qYe),e(Zg,GYe),e(Zg,kk),e(kk,OYe),e(Zg,XYe),e(E,VYe),e(E,eh),e(eh,oY),e(oY,zYe),e(eh,WYe),e(eh,Rk),e(Rk,QYe),e(eh,HYe),e(E,UYe),e(E,oh),e(oh,rY),e(rY,JYe),e(oh,YYe),e(oh,Sk),e(Sk,KYe),e(oh,ZYe),e(E,eKe),e(E,ws),e(ws,tY),e(tY,oKe),e(ws,rKe),e(ws,Pk),e(Pk,tKe),e(ws,aKe),e(ws,$k),e($k,nKe),e(ws,sKe),e(E,lKe),e(E,rh),e(rh,aY),e(aY,iKe),e(rh,dKe),e(rh,Ik),e(Ik,cKe),e(rh,fKe),e(E,mKe),e(E,As),e(As,nY),e(nY,gKe),e(As,hKe),e(As,Nk),e(Nk,pKe),e(As,_Ke),e(As,Dk),e(Dk,uKe),e(As,bKe),e(E,vKe),e(E,Ls),e(Ls,sY),e(sY,TKe),e(Ls,FKe),e(Ls,jk),e(jk,CKe),e(Ls,MKe),e(Ls,qk),e(qk,EKe),e(Ls,yKe),e(E,wKe),e(E,Bs),e(Bs,lY),e(lY,AKe),e(Bs,LKe),e(Bs,Gk),e(Gk,BKe),e(Bs,xKe),e(Bs,Ok),e(Ok,kKe),e(Bs,RKe),e(E,SKe),e(E,xs),e(xs,iY),e(iY,PKe),e(xs,$Ke),e(xs,Xk),e(Xk,IKe),e(xs,NKe),e(xs,Vk),e(Vk,DKe),e(xs,jKe),e(E,qKe),e(E,ks),e(ks,dY),e(dY,GKe),e(ks,OKe),e(ks,zk),e(zk,XKe),e(ks,VKe),e(ks,Wk),e(Wk,zKe),e(ks,WKe),e(E,QKe),e(E,Rs),e(Rs,cY),e(cY,HKe),e(Rs,UKe),e(Rs,Qk),e(Qk,JKe),e(Rs,YKe),e(Rs,Hk),e(Hk,KKe),e(Rs,ZKe),e(E,eZe),e(E,th),e(th,fY),e(fY,oZe),e(th,rZe),e(th,Uk),e(Uk,tZe),e(th,aZe),e(E,nZe),e(E,ah),e(ah,mY),e(mY,sZe),e(ah,lZe),e(ah,Jk),e(Jk,iZe),e(ah,dZe),e(E,cZe),e(E,Ss),e(Ss,gY),e(gY,fZe),e(Ss,mZe),e(Ss,Yk),e(Yk,gZe),e(Ss,hZe),e(Ss,Kk),e(Kk,pZe),e(Ss,_Ze),e(E,uZe),e(E,Ps),e(Ps,hY),e(hY,bZe),e(Ps,vZe),e(Ps,Zk),e(Zk,TZe),e(Ps,FZe),e(Ps,eR),e(eR,CZe),e(Ps,MZe),e(E,EZe),e(E,$s),e($s,pY),e(pY,yZe),e($s,wZe),e($s,oR),e(oR,AZe),e($s,LZe),e($s,rR),e(rR,BZe),e($s,xZe),e(E,kZe),e(E,nh),e(nh,_Y),e(_Y,RZe),e(nh,SZe),e(nh,tR),e(tR,PZe),e(nh,$Ze),e(E,IZe),e(E,sh),e(sh,uY),e(uY,NZe),e(sh,DZe),e(sh,aR),e(aR,jZe),e(sh,qZe),e(E,GZe),e(E,lh),e(lh,bY),e(bY,OZe),e(lh,XZe),e(lh,nR),e(nR,VZe),e(lh,zZe),e(E,WZe),e(E,ih),e(ih,vY),e(vY,QZe),e(ih,HZe),e(ih,sR),e(sR,UZe),e(ih,JZe),e(E,YZe),e(E,Is),e(Is,TY),e(TY,KZe),e(Is,ZZe),e(Is,lR),e(lR,eeo),e(Is,oeo),e(Is,iR),e(iR,reo),e(Is,teo),e(E,aeo),e(E,dh),e(dh,FY),e(FY,neo),e(dh,seo),e(dh,dR),e(dR,leo),e(dh,ieo),e(E,deo),e(E,ch),e(ch,CY),e(CY,ceo),e(ch,feo),e(ch,cR),e(cR,meo),e(ch,geo),e(E,heo),e(E,Ns),e(Ns,MY),e(MY,peo),e(Ns,_eo),e(Ns,fR),e(fR,ueo),e(Ns,beo),e(Ns,mR),e(mR,veo),e(Ns,Teo),e(E,Feo),e(E,Ds),e(Ds,EY),e(EY,Ceo),e(Ds,Meo),e(Ds,gR),e(gR,Eeo),e(Ds,yeo),e(Ds,hR),e(hR,weo),e(Ds,Aeo),e(go,Leo),e(go,yY),e(yY,Beo),e(go,xeo),g(A5,go,null),e(Qo,keo),e(Qo,fh),g(L5,fh,null),e(fh,Reo),e(fh,wY),e(wY,Seo),b(c,yke,u),b(c,Qi,u),e(Qi,mh),e(mh,AY),g(B5,AY,null),e(Qi,Peo),e(Qi,LY),e(LY,$eo),b(c,wke,u),b(c,Ho,u),g(x5,Ho,null),e(Ho,Ieo),e(Ho,k5),e(k5,Neo),e(k5,pR),e(pR,Deo),e(k5,jeo),e(Ho,qeo),e(Ho,R5),e(R5,Geo),e(R5,BY),e(BY,Oeo),e(R5,Xeo),e(Ho,Veo),e(Ho,$e),g(S5,$e,null),e($e,zeo),e($e,xY),e(xY,Weo),e($e,Qeo),e($e,Xa),e(Xa,Heo),e(Xa,kY),e(kY,Ueo),e(Xa,Jeo),e(Xa,RY),e(RY,Yeo),e(Xa,Keo),e(Xa,SY),e(SY,Zeo),e(Xa,eoo),e($e,ooo),e($e,Z),e(Z,gh),e(gh,PY),e(PY,roo),e(gh,too),e(gh,_R),e(_R,aoo),e(gh,noo),e(Z,soo),e(Z,hh),e(hh,$Y),e($Y,loo),e(hh,ioo),e(hh,uR),e(uR,doo),e(hh,coo),e(Z,foo),e(Z,ph),e(ph,IY),e(IY,moo),e(ph,goo),e(ph,bR),e(bR,hoo),e(ph,poo),e(Z,_oo),e(Z,_h),e(_h,NY),e(NY,uoo),e(_h,boo),e(_h,vR),e(vR,voo),e(_h,Too),e(Z,Foo),e(Z,uh),e(uh,DY),e(DY,Coo),e(uh,Moo),e(uh,TR),e(TR,Eoo),e(uh,yoo),e(Z,woo),e(Z,bh),e(bh,jY),e(jY,Aoo),e(bh,Loo),e(bh,FR),e(FR,Boo),e(bh,xoo),e(Z,koo),e(Z,vh),e(vh,qY),e(qY,Roo),e(vh,Soo),e(vh,CR),e(CR,Poo),e(vh,$oo),e(Z,Ioo),e(Z,Th),e(Th,GY),e(GY,Noo),e(Th,Doo),e(Th,MR),e(MR,joo),e(Th,qoo),e(Z,Goo),e(Z,Fh),e(Fh,OY),e(OY,Ooo),e(Fh,Xoo),e(Fh,ER),e(ER,Voo),e(Fh,zoo),e(Z,Woo),e(Z,Ch),e(Ch,XY),e(XY,Qoo),e(Ch,Hoo),e(Ch,yR),e(yR,Uoo),e(Ch,Joo),e(Z,Yoo),e(Z,Mh),e(Mh,VY),e(VY,Koo),e(Mh,Zoo),e(Mh,wR),e(wR,ero),e(Mh,oro),e(Z,rro),e(Z,Eh),e(Eh,zY),e(zY,tro),e(Eh,aro),e(Eh,AR),e(AR,nro),e(Eh,sro),e(Z,lro),e(Z,yh),e(yh,WY),e(WY,iro),e(yh,dro),e(yh,LR),e(LR,cro),e(yh,fro),e(Z,mro),e(Z,wh),e(wh,QY),e(QY,gro),e(wh,hro),e(wh,BR),e(BR,pro),e(wh,_ro),e(Z,uro),e(Z,Ah),e(Ah,HY),e(HY,bro),e(Ah,vro),e(Ah,xR),e(xR,Tro),e(Ah,Fro),e(Z,Cro),e(Z,Lh),e(Lh,UY),e(UY,Mro),e(Lh,Ero),e(Lh,kR),e(kR,yro),e(Lh,wro),e(Z,Aro),e(Z,Bh),e(Bh,JY),e(JY,Lro),e(Bh,Bro),e(Bh,RR),e(RR,xro),e(Bh,kro),e(Z,Rro),e(Z,xh),e(xh,YY),e(YY,Sro),e(xh,Pro),e(xh,SR),e(SR,$ro),e(xh,Iro),e(Z,Nro),e(Z,kh),e(kh,KY),e(KY,Dro),e(kh,jro),e(kh,PR),e(PR,qro),e(kh,Gro),e($e,Oro),g(Rh,$e,null),e($e,Xro),e($e,ZY),e(ZY,Vro),e($e,zro),g(P5,$e,null),e(Ho,Wro),e(Ho,Sh),g($5,Sh,null),e(Sh,Qro),e(Sh,eK),e(eK,Hro),b(c,Ake,u),b(c,Hi,u),e(Hi,Ph),e(Ph,oK),g(I5,oK,null),e(Hi,Uro),e(Hi,rK),e(rK,Jro),b(c,Lke,u),b(c,Uo,u),g(N5,Uo,null),e(Uo,Yro),e(Uo,D5),e(D5,Kro),e(D5,$R),e($R,Zro),e(D5,eto),e(Uo,oto),e(Uo,j5),e(j5,rto),e(j5,tK),e(tK,tto),e(j5,ato),e(Uo,nto),e(Uo,Ie),g(q5,Ie,null),e(Ie,sto),e(Ie,aK),e(aK,lto),e(Ie,ito),e(Ie,Ui),e(Ui,dto),e(Ui,nK),e(nK,cto),e(Ui,fto),e(Ui,sK),e(sK,mto),e(Ui,gto),e(Ie,hto),e(Ie,xe),e(xe,$h),e($h,lK),e(lK,pto),e($h,_to),e($h,IR),e(IR,uto),e($h,bto),e(xe,vto),e(xe,Ih),e(Ih,iK),e(iK,Tto),e(Ih,Fto),e(Ih,NR),e(NR,Cto),e(Ih,Mto),e(xe,Eto),e(xe,Nh),e(Nh,dK),e(dK,yto),e(Nh,wto),e(Nh,DR),e(DR,Ato),e(Nh,Lto),e(xe,Bto),e(xe,Dh),e(Dh,cK),e(cK,xto),e(Dh,kto),e(Dh,jR),e(jR,Rto),e(Dh,Sto),e(xe,Pto),e(xe,jh),e(jh,fK),e(fK,$to),e(jh,Ito),e(jh,qR),e(qR,Nto),e(jh,Dto),e(xe,jto),e(xe,qh),e(qh,mK),e(mK,qto),e(qh,Gto),e(qh,GR),e(GR,Oto),e(qh,Xto),e(xe,Vto),e(xe,Gh),e(Gh,gK),e(gK,zto),e(Gh,Wto),e(Gh,OR),e(OR,Qto),e(Gh,Hto),e(xe,Uto),e(xe,Oh),e(Oh,hK),e(hK,Jto),e(Oh,Yto),e(Oh,XR),e(XR,Kto),e(Oh,Zto),e(Ie,eao),g(Xh,Ie,null),e(Ie,oao),e(Ie,pK),e(pK,rao),e(Ie,tao),g(G5,Ie,null),e(Uo,aao),e(Uo,Vh),g(O5,Vh,null),e(Vh,nao),e(Vh,_K),e(_K,sao),b(c,Bke,u),b(c,Ji,u),e(Ji,zh),e(zh,uK),g(X5,uK,null),e(Ji,lao),e(Ji,bK),e(bK,iao),b(c,xke,u),b(c,Jo,u),g(V5,Jo,null),e(Jo,dao),e(Jo,Yi),e(Yi,cao),e(Yi,vK),e(vK,fao),e(Yi,mao),e(Yi,TK),e(TK,gao),e(Yi,hao),e(Jo,pao),e(Jo,z5),e(z5,_ao),e(z5,FK),e(FK,uao),e(z5,bao),e(Jo,vao),e(Jo,Vr),g(W5,Vr,null),e(Vr,Tao),e(Vr,CK),e(CK,Fao),e(Vr,Cao),e(Vr,Ki),e(Ki,Mao),e(Ki,MK),e(MK,Eao),e(Ki,yao),e(Ki,EK),e(EK,wao),e(Ki,Aao),e(Vr,Lao),e(Vr,yK),e(yK,Bao),e(Vr,xao),g(Q5,Vr,null),e(Jo,kao),e(Jo,Ne),g(H5,Ne,null),e(Ne,Rao),e(Ne,wK),e(wK,Sao),e(Ne,Pao),e(Ne,Va),e(Va,$ao),e(Va,AK),e(AK,Iao),e(Va,Nao),e(Va,LK),e(LK,Dao),e(Va,jao),e(Va,BK),e(BK,qao),e(Va,Gao),e(Ne,Oao),e(Ne,F),e(F,Wh),e(Wh,xK),e(xK,Xao),e(Wh,Vao),e(Wh,VR),e(VR,zao),e(Wh,Wao),e(F,Qao),e(F,Qh),e(Qh,kK),e(kK,Hao),e(Qh,Uao),e(Qh,zR),e(zR,Jao),e(Qh,Yao),e(F,Kao),e(F,Hh),e(Hh,RK),e(RK,Zao),e(Hh,eno),e(Hh,WR),e(WR,ono),e(Hh,rno),e(F,tno),e(F,Uh),e(Uh,SK),e(SK,ano),e(Uh,nno),e(Uh,QR),e(QR,sno),e(Uh,lno),e(F,ino),e(F,Jh),e(Jh,PK),e(PK,dno),e(Jh,cno),e(Jh,HR),e(HR,fno),e(Jh,mno),e(F,gno),e(F,Yh),e(Yh,$K),e($K,hno),e(Yh,pno),e(Yh,UR),e(UR,_no),e(Yh,uno),e(F,bno),e(F,Kh),e(Kh,IK),e(IK,vno),e(Kh,Tno),e(Kh,JR),e(JR,Fno),e(Kh,Cno),e(F,Mno),e(F,Zh),e(Zh,NK),e(NK,Eno),e(Zh,yno),e(Zh,YR),e(YR,wno),e(Zh,Ano),e(F,Lno),e(F,ep),e(ep,DK),e(DK,Bno),e(ep,xno),e(ep,KR),e(KR,kno),e(ep,Rno),e(F,Sno),e(F,op),e(op,jK),e(jK,Pno),e(op,$no),e(op,ZR),e(ZR,Ino),e(op,Nno),e(F,Dno),e(F,rp),e(rp,qK),e(qK,jno),e(rp,qno),e(rp,eS),e(eS,Gno),e(rp,Ono),e(F,Xno),e(F,tp),e(tp,GK),e(GK,Vno),e(tp,zno),e(tp,oS),e(oS,Wno),e(tp,Qno),e(F,Hno),e(F,ap),e(ap,OK),e(OK,Uno),e(ap,Jno),e(ap,rS),e(rS,Yno),e(ap,Kno),e(F,Zno),e(F,np),e(np,XK),e(XK,eso),e(np,oso),e(np,tS),e(tS,rso),e(np,tso),e(F,aso),e(F,sp),e(sp,VK),e(VK,nso),e(sp,sso),e(sp,aS),e(aS,lso),e(sp,iso),e(F,dso),e(F,lp),e(lp,zK),e(zK,cso),e(lp,fso),e(lp,nS),e(nS,mso),e(lp,gso),e(F,hso),e(F,ip),e(ip,WK),e(WK,pso),e(ip,_so),e(ip,sS),e(sS,uso),e(ip,bso),e(F,vso),e(F,dp),e(dp,QK),e(QK,Tso),e(dp,Fso),e(dp,lS),e(lS,Cso),e(dp,Mso),e(F,Eso),e(F,cp),e(cp,HK),e(HK,yso),e(cp,wso),e(cp,iS),e(iS,Aso),e(cp,Lso),e(F,Bso),e(F,fp),e(fp,UK),e(UK,xso),e(fp,kso),e(fp,dS),e(dS,Rso),e(fp,Sso),e(F,Pso),e(F,mp),e(mp,JK),e(JK,$so),e(mp,Iso),e(mp,cS),e(cS,Nso),e(mp,Dso),e(F,jso),e(F,gp),e(gp,YK),e(YK,qso),e(gp,Gso),e(gp,fS),e(fS,Oso),e(gp,Xso),e(F,Vso),e(F,hp),e(hp,KK),e(KK,zso),e(hp,Wso),e(hp,mS),e(mS,Qso),e(hp,Hso),e(F,Uso),e(F,pp),e(pp,ZK),e(ZK,Jso),e(pp,Yso),e(pp,gS),e(gS,Kso),e(pp,Zso),e(F,elo),e(F,_p),e(_p,eZ),e(eZ,olo),e(_p,rlo),e(_p,hS),e(hS,tlo),e(_p,alo),e(F,nlo),e(F,up),e(up,oZ),e(oZ,slo),e(up,llo),e(up,pS),e(pS,ilo),e(up,dlo),e(F,clo),e(F,bp),e(bp,rZ),e(rZ,flo),e(bp,mlo),e(bp,_S),e(_S,glo),e(bp,hlo),e(F,plo),e(F,vp),e(vp,tZ),e(tZ,_lo),e(vp,ulo),e(vp,uS),e(uS,blo),e(vp,vlo),e(F,Tlo),e(F,js),e(js,aZ),e(aZ,Flo),e(js,Clo),e(js,bS),e(bS,Mlo),e(js,Elo),e(js,vS),e(vS,ylo),e(js,wlo),e(F,Alo),e(F,Tp),e(Tp,nZ),e(nZ,Llo),e(Tp,Blo),e(Tp,TS),e(TS,xlo),e(Tp,klo),e(F,Rlo),e(F,Fp),e(Fp,sZ),e(sZ,Slo),e(Fp,Plo),e(Fp,FS),e(FS,$lo),e(Fp,Ilo),e(F,Nlo),e(F,Cp),e(Cp,lZ),e(lZ,Dlo),e(Cp,jlo),e(Cp,CS),e(CS,qlo),e(Cp,Glo),e(F,Olo),e(F,Mp),e(Mp,iZ),e(iZ,Xlo),e(Mp,Vlo),e(Mp,MS),e(MS,zlo),e(Mp,Wlo),e(F,Qlo),e(F,Ep),e(Ep,dZ),e(dZ,Hlo),e(Ep,Ulo),e(Ep,ES),e(ES,Jlo),e(Ep,Ylo),e(F,Klo),e(F,yp),e(yp,cZ),e(cZ,Zlo),e(yp,eio),e(yp,yS),e(yS,oio),e(yp,rio),e(F,tio),e(F,wp),e(wp,fZ),e(fZ,aio),e(wp,nio),e(wp,wS),e(wS,sio),e(wp,lio),e(F,iio),e(F,Ap),e(Ap,mZ),e(mZ,dio),e(Ap,cio),e(Ap,AS),e(AS,fio),e(Ap,mio),e(F,gio),e(F,Lp),e(Lp,gZ),e(gZ,hio),e(Lp,pio),e(Lp,LS),e(LS,_io),e(Lp,uio),e(F,bio),e(F,Bp),e(Bp,hZ),e(hZ,vio),e(Bp,Tio),e(Bp,BS),e(BS,Fio),e(Bp,Cio),e(F,Mio),e(F,xp),e(xp,pZ),e(pZ,Eio),e(xp,yio),e(xp,xS),e(xS,wio),e(xp,Aio),e(F,Lio),e(F,kp),e(kp,_Z),e(_Z,Bio),e(kp,xio),e(kp,kS),e(kS,kio),e(kp,Rio),e(F,Sio),e(F,Rp),e(Rp,uZ),e(uZ,Pio),e(Rp,$io),e(Rp,RS),e(RS,Iio),e(Rp,Nio),e(F,Dio),e(F,Sp),e(Sp,bZ),e(bZ,jio),e(Sp,qio),e(Sp,SS),e(SS,Gio),e(Sp,Oio),e(F,Xio),e(F,Pp),e(Pp,vZ),e(vZ,Vio),e(Pp,zio),e(Pp,PS),e(PS,Wio),e(Pp,Qio),e(F,Hio),e(F,$p),e($p,TZ),e(TZ,Uio),e($p,Jio),e($p,$S),e($S,Yio),e($p,Kio),e(F,Zio),e(F,Ip),e(Ip,FZ),e(FZ,edo),e(Ip,odo),e(Ip,IS),e(IS,rdo),e(Ip,tdo),e(F,ado),e(F,Np),e(Np,CZ),e(CZ,ndo),e(Np,sdo),e(Np,NS),e(NS,ldo),e(Np,ido),e(F,ddo),e(F,Dp),e(Dp,MZ),e(MZ,cdo),e(Dp,fdo),e(Dp,DS),e(DS,mdo),e(Dp,gdo),e(F,hdo),e(F,jp),e(jp,EZ),e(EZ,pdo),e(jp,_do),e(jp,jS),e(jS,udo),e(jp,bdo),e(F,vdo),e(F,qp),e(qp,yZ),e(yZ,Tdo),e(qp,Fdo),e(qp,qS),e(qS,Cdo),e(qp,Mdo),e(F,Edo),e(F,Gp),e(Gp,wZ),e(wZ,ydo),e(Gp,wdo),e(Gp,GS),e(GS,Ado),e(Gp,Ldo),e(F,Bdo),e(F,Op),e(Op,AZ),e(AZ,xdo),e(Op,kdo),e(Op,OS),e(OS,Rdo),e(Op,Sdo),e(F,Pdo),e(F,Xp),e(Xp,LZ),e(LZ,$do),e(Xp,Ido),e(Xp,XS),e(XS,Ndo),e(Xp,Ddo),e(F,jdo),e(F,Vp),e(Vp,BZ),e(BZ,qdo),e(Vp,Gdo),e(Vp,VS),e(VS,Odo),e(Vp,Xdo),e(F,Vdo),e(F,zp),e(zp,xZ),e(xZ,zdo),e(zp,Wdo),e(zp,zS),e(zS,Qdo),e(zp,Hdo),e(F,Udo),e(F,Wp),e(Wp,kZ),e(kZ,Jdo),e(Wp,Ydo),e(Wp,WS),e(WS,Kdo),e(Wp,Zdo),e(F,eco),e(F,Qp),e(Qp,RZ),e(RZ,oco),e(Qp,rco),e(Qp,QS),e(QS,tco),e(Qp,aco),e(F,nco),e(F,Hp),e(Hp,SZ),e(SZ,sco),e(Hp,lco),e(Hp,HS),e(HS,ico),e(Hp,dco),e(F,cco),e(F,Up),e(Up,PZ),e(PZ,fco),e(Up,mco),e(Up,US),e(US,gco),e(Up,hco),e(F,pco),e(F,Jp),e(Jp,$Z),e($Z,_co),e(Jp,uco),e(Jp,JS),e(JS,bco),e(Jp,vco),e(F,Tco),e(F,Yp),e(Yp,IZ),e(IZ,Fco),e(Yp,Cco),e(Yp,YS),e(YS,Mco),e(Yp,Eco),e(F,yco),e(F,Kp),e(Kp,NZ),e(NZ,wco),e(Kp,Aco),e(Kp,KS),e(KS,Lco),e(Kp,Bco),e(F,xco),e(F,Zp),e(Zp,DZ),e(DZ,kco),e(Zp,Rco),e(Zp,ZS),e(ZS,Sco),e(Zp,Pco),e(F,$co),e(F,e_),e(e_,jZ),e(jZ,Ico),e(e_,Nco),e(e_,eP),e(eP,Dco),e(e_,jco),e(F,qco),e(F,o_),e(o_,qZ),e(qZ,Gco),e(o_,Oco),e(o_,oP),e(oP,Xco),e(o_,Vco),e(F,zco),e(F,r_),e(r_,GZ),e(GZ,Wco),e(r_,Qco),e(r_,rP),e(rP,Hco),e(r_,Uco),e(F,Jco),e(F,t_),e(t_,OZ),e(OZ,Yco),e(t_,Kco),e(t_,tP),e(tP,Zco),e(t_,efo),e(F,ofo),e(F,a_),e(a_,XZ),e(XZ,rfo),e(a_,tfo),e(a_,aP),e(aP,afo),e(a_,nfo),e(F,sfo),e(F,n_),e(n_,VZ),e(VZ,lfo),e(n_,ifo),e(n_,nP),e(nP,dfo),e(n_,cfo),e(F,ffo),e(F,s_),e(s_,zZ),e(zZ,mfo),e(s_,gfo),e(s_,sP),e(sP,hfo),e(s_,pfo),e(F,_fo),e(F,l_),e(l_,WZ),e(WZ,ufo),e(l_,bfo),e(l_,lP),e(lP,vfo),e(l_,Tfo),e(F,Ffo),e(F,i_),e(i_,QZ),e(QZ,Cfo),e(i_,Mfo),e(i_,iP),e(iP,Efo),e(i_,yfo),e(F,wfo),e(F,d_),e(d_,HZ),e(HZ,Afo),e(d_,Lfo),e(d_,dP),e(dP,Bfo),e(d_,xfo),e(F,kfo),e(F,c_),e(c_,UZ),e(UZ,Rfo),e(c_,Sfo),e(c_,cP),e(cP,Pfo),e(c_,$fo),e(F,Ifo),e(F,f_),e(f_,JZ),e(JZ,Nfo),e(f_,Dfo),e(f_,fP),e(fP,jfo),e(f_,qfo),e(F,Gfo),e(F,m_),e(m_,YZ),e(YZ,Ofo),e(m_,Xfo),e(m_,mP),e(mP,Vfo),e(m_,zfo),e(F,Wfo),e(F,g_),e(g_,KZ),e(KZ,Qfo),e(g_,Hfo),e(g_,gP),e(gP,Ufo),e(g_,Jfo),e(F,Yfo),e(F,h_),e(h_,ZZ),e(ZZ,Kfo),e(h_,Zfo),e(h_,hP),e(hP,emo),e(h_,omo),e(F,rmo),e(F,p_),e(p_,eee),e(eee,tmo),e(p_,amo),e(p_,pP),e(pP,nmo),e(p_,smo),e(F,lmo),e(F,__),e(__,oee),e(oee,imo),e(__,dmo),e(__,_P),e(_P,cmo),e(__,fmo),e(F,mmo),e(F,u_),e(u_,ree),e(ree,gmo),e(u_,hmo),e(u_,uP),e(uP,pmo),e(u_,_mo),e(F,umo),e(F,b_),e(b_,tee),e(tee,bmo),e(b_,vmo),e(b_,bP),e(bP,Tmo),e(b_,Fmo),e(F,Cmo),e(F,v_),e(v_,aee),e(aee,Mmo),e(v_,Emo),e(v_,vP),e(vP,ymo),e(v_,wmo),e(F,Amo),e(F,T_),e(T_,nee),e(nee,Lmo),e(T_,Bmo),e(T_,TP),e(TP,xmo),e(T_,kmo),e(F,Rmo),e(F,F_),e(F_,see),e(see,Smo),e(F_,Pmo),e(F_,FP),e(FP,$mo),e(F_,Imo),e(F,Nmo),e(F,C_),e(C_,lee),e(lee,Dmo),e(C_,jmo),e(C_,CP),e(CP,qmo),e(C_,Gmo),e(F,Omo),e(F,M_),e(M_,iee),e(iee,Xmo),e(M_,Vmo),e(M_,MP),e(MP,zmo),e(M_,Wmo),e(F,Qmo),e(F,E_),e(E_,dee),e(dee,Hmo),e(E_,Umo),e(E_,EP),e(EP,Jmo),e(E_,Ymo),e(F,Kmo),e(F,y_),e(y_,cee),e(cee,Zmo),e(y_,ego),e(y_,yP),e(yP,ogo),e(y_,rgo),e(F,tgo),e(F,w_),e(w_,fee),e(fee,ago),e(w_,ngo),e(w_,wP),e(wP,sgo),e(w_,lgo),e(F,igo),e(F,A_),e(A_,mee),e(mee,dgo),e(A_,cgo),e(A_,AP),e(AP,fgo),e(A_,mgo),e(F,ggo),e(F,L_),e(L_,gee),e(gee,hgo),e(L_,pgo),e(L_,LP),e(LP,_go),e(L_,ugo),e(Ne,bgo),e(Ne,B_),e(B_,vgo),e(B_,hee),e(hee,Tgo),e(B_,Fgo),e(B_,pee),e(pee,Cgo),e(Ne,Mgo),e(Ne,_ee),e(_ee,Ego),e(Ne,ygo),g(U5,Ne,null),b(c,kke,u),b(c,Zi,u),e(Zi,x_),e(x_,uee),g(J5,uee,null),e(Zi,wgo),e(Zi,bee),e(bee,Ago),b(c,Rke,u),b(c,Yo,u),g(Y5,Yo,null),e(Yo,Lgo),e(Yo,ed),e(ed,Bgo),e(ed,vee),e(vee,xgo),e(ed,kgo),e(ed,Tee),e(Tee,Rgo),e(ed,Sgo),e(Yo,Pgo),e(Yo,K5),e(K5,$go),e(K5,Fee),e(Fee,Igo),e(K5,Ngo),e(Yo,Dgo),e(Yo,zr),g(Z5,zr,null),e(zr,jgo),e(zr,Cee),e(Cee,qgo),e(zr,Ggo),e(zr,od),e(od,Ogo),e(od,Mee),e(Mee,Xgo),e(od,Vgo),e(od,Eee),e(Eee,zgo),e(od,Wgo),e(zr,Qgo),e(zr,yee),e(yee,Hgo),e(zr,Ugo),g(ey,zr,null),e(Yo,Jgo),e(Yo,De),g(oy,De,null),e(De,Ygo),e(De,wee),e(wee,Kgo),e(De,Zgo),e(De,za),e(za,eho),e(za,Aee),e(Aee,oho),e(za,rho),e(za,Lee),e(Lee,tho),e(za,aho),e(za,Bee),e(Bee,nho),e(za,sho),e(De,lho),e(De,k),e(k,k_),e(k_,xee),e(xee,iho),e(k_,dho),e(k_,BP),e(BP,cho),e(k_,fho),e(k,mho),e(k,R_),e(R_,kee),e(kee,gho),e(R_,hho),e(R_,xP),e(xP,pho),e(R_,_ho),e(k,uho),e(k,S_),e(S_,Ree),e(Ree,bho),e(S_,vho),e(S_,kP),e(kP,Tho),e(S_,Fho),e(k,Cho),e(k,P_),e(P_,See),e(See,Mho),e(P_,Eho),e(P_,RP),e(RP,yho),e(P_,who),e(k,Aho),e(k,$_),e($_,Pee),e(Pee,Lho),e($_,Bho),e($_,SP),e(SP,xho),e($_,kho),e(k,Rho),e(k,I_),e(I_,$ee),e($ee,Sho),e(I_,Pho),e(I_,PP),e(PP,$ho),e(I_,Iho),e(k,Nho),e(k,N_),e(N_,Iee),e(Iee,Dho),e(N_,jho),e(N_,$P),e($P,qho),e(N_,Gho),e(k,Oho),e(k,D_),e(D_,Nee),e(Nee,Xho),e(D_,Vho),e(D_,IP),e(IP,zho),e(D_,Who),e(k,Qho),e(k,j_),e(j_,Dee),e(Dee,Hho),e(j_,Uho),e(j_,NP),e(NP,Jho),e(j_,Yho),e(k,Kho),e(k,q_),e(q_,jee),e(jee,Zho),e(q_,epo),e(q_,DP),e(DP,opo),e(q_,rpo),e(k,tpo),e(k,G_),e(G_,qee),e(qee,apo),e(G_,npo),e(G_,jP),e(jP,spo),e(G_,lpo),e(k,ipo),e(k,O_),e(O_,Gee),e(Gee,dpo),e(O_,cpo),e(O_,qP),e(qP,fpo),e(O_,mpo),e(k,gpo),e(k,X_),e(X_,Oee),e(Oee,hpo),e(X_,ppo),e(X_,GP),e(GP,_po),e(X_,upo),e(k,bpo),e(k,V_),e(V_,Xee),e(Xee,vpo),e(V_,Tpo),e(V_,OP),e(OP,Fpo),e(V_,Cpo),e(k,Mpo),e(k,z_),e(z_,Vee),e(Vee,Epo),e(z_,ypo),e(z_,XP),e(XP,wpo),e(z_,Apo),e(k,Lpo),e(k,W_),e(W_,zee),e(zee,Bpo),e(W_,xpo),e(W_,VP),e(VP,kpo),e(W_,Rpo),e(k,Spo),e(k,Q_),e(Q_,Wee),e(Wee,Ppo),e(Q_,$po),e(Q_,zP),e(zP,Ipo),e(Q_,Npo),e(k,Dpo),e(k,H_),e(H_,Qee),e(Qee,jpo),e(H_,qpo),e(H_,WP),e(WP,Gpo),e(H_,Opo),e(k,Xpo),e(k,U_),e(U_,Hee),e(Hee,Vpo),e(U_,zpo),e(U_,QP),e(QP,Wpo),e(U_,Qpo),e(k,Hpo),e(k,J_),e(J_,Uee),e(Uee,Upo),e(J_,Jpo),e(J_,HP),e(HP,Ypo),e(J_,Kpo),e(k,Zpo),e(k,Y_),e(Y_,Jee),e(Jee,e_o),e(Y_,o_o),e(Y_,UP),e(UP,r_o),e(Y_,t_o),e(k,a_o),e(k,K_),e(K_,Yee),e(Yee,n_o),e(K_,s_o),e(K_,JP),e(JP,l_o),e(K_,i_o),e(k,d_o),e(k,Z_),e(Z_,Kee),e(Kee,c_o),e(Z_,f_o),e(Z_,YP),e(YP,m_o),e(Z_,g_o),e(k,h_o),e(k,eu),e(eu,Zee),e(Zee,p_o),e(eu,__o),e(eu,KP),e(KP,u_o),e(eu,b_o),e(k,v_o),e(k,ou),e(ou,eoe),e(eoe,T_o),e(ou,F_o),e(ou,ZP),e(ZP,C_o),e(ou,M_o),e(k,E_o),e(k,ru),e(ru,ooe),e(ooe,y_o),e(ru,w_o),e(ru,e$),e(e$,A_o),e(ru,L_o),e(k,B_o),e(k,tu),e(tu,roe),e(roe,x_o),e(tu,k_o),e(tu,o$),e(o$,R_o),e(tu,S_o),e(k,P_o),e(k,au),e(au,toe),e(toe,$_o),e(au,I_o),e(au,r$),e(r$,N_o),e(au,D_o),e(k,j_o),e(k,nu),e(nu,aoe),e(aoe,q_o),e(nu,G_o),e(nu,t$),e(t$,O_o),e(nu,X_o),e(k,V_o),e(k,su),e(su,noe),e(noe,z_o),e(su,W_o),e(su,a$),e(a$,Q_o),e(su,H_o),e(k,U_o),e(k,lu),e(lu,soe),e(soe,J_o),e(lu,Y_o),e(lu,n$),e(n$,K_o),e(lu,Z_o),e(k,euo),e(k,iu),e(iu,loe),e(loe,ouo),e(iu,ruo),e(iu,s$),e(s$,tuo),e(iu,auo),e(k,nuo),e(k,du),e(du,ioe),e(ioe,suo),e(du,luo),e(du,l$),e(l$,iuo),e(du,duo),e(k,cuo),e(k,cu),e(cu,doe),e(doe,fuo),e(cu,muo),e(cu,i$),e(i$,guo),e(cu,huo),e(k,puo),e(k,fu),e(fu,coe),e(coe,_uo),e(fu,uuo),e(fu,d$),e(d$,buo),e(fu,vuo),e(k,Tuo),e(k,mu),e(mu,foe),e(foe,Fuo),e(mu,Cuo),e(mu,c$),e(c$,Muo),e(mu,Euo),e(k,yuo),e(k,gu),e(gu,moe),e(moe,wuo),e(gu,Auo),e(gu,f$),e(f$,Luo),e(gu,Buo),e(k,xuo),e(k,hu),e(hu,goe),e(goe,kuo),e(hu,Ruo),e(hu,m$),e(m$,Suo),e(hu,Puo),e(k,$uo),e(k,pu),e(pu,hoe),e(hoe,Iuo),e(pu,Nuo),e(pu,g$),e(g$,Duo),e(pu,juo),e(De,quo),e(De,_u),e(_u,Guo),e(_u,poe),e(poe,Ouo),e(_u,Xuo),e(_u,_oe),e(_oe,Vuo),e(De,zuo),e(De,uoe),e(uoe,Wuo),e(De,Quo),g(ry,De,null),b(c,Ske,u),b(c,rd,u),e(rd,uu),e(uu,boe),g(ty,boe,null),e(rd,Huo),e(rd,voe),e(voe,Uuo),b(c,Pke,u),b(c,Ko,u),g(ay,Ko,null),e(Ko,Juo),e(Ko,td),e(td,Yuo),e(td,Toe),e(Toe,Kuo),e(td,Zuo),e(td,Foe),e(Foe,e1o),e(td,o1o),e(Ko,r1o),e(Ko,ny),e(ny,t1o),e(ny,Coe),e(Coe,a1o),e(ny,n1o),e(Ko,s1o),e(Ko,Wr),g(sy,Wr,null),e(Wr,l1o),e(Wr,Moe),e(Moe,i1o),e(Wr,d1o),e(Wr,ad),e(ad,c1o),e(ad,Eoe),e(Eoe,f1o),e(ad,m1o),e(ad,yoe),e(yoe,g1o),e(ad,h1o),e(Wr,p1o),e(Wr,woe),e(woe,_1o),e(Wr,u1o),g(ly,Wr,null),e(Ko,b1o),e(Ko,je),g(iy,je,null),e(je,v1o),e(je,Aoe),e(Aoe,T1o),e(je,F1o),e(je,Wa),e(Wa,C1o),e(Wa,Loe),e(Loe,M1o),e(Wa,E1o),e(Wa,Boe),e(Boe,y1o),e(Wa,w1o),e(Wa,xoe),e(xoe,A1o),e(Wa,L1o),e(je,B1o),e(je,$),e($,bu),e(bu,koe),e(koe,x1o),e(bu,k1o),e(bu,h$),e(h$,R1o),e(bu,S1o),e($,P1o),e($,vu),e(vu,Roe),e(Roe,$1o),e(vu,I1o),e(vu,p$),e(p$,N1o),e(vu,D1o),e($,j1o),e($,Tu),e(Tu,Soe),e(Soe,q1o),e(Tu,G1o),e(Tu,_$),e(_$,O1o),e(Tu,X1o),e($,V1o),e($,Fu),e(Fu,Poe),e(Poe,z1o),e(Fu,W1o),e(Fu,u$),e(u$,Q1o),e(Fu,H1o),e($,U1o),e($,Cu),e(Cu,$oe),e($oe,J1o),e(Cu,Y1o),e(Cu,b$),e(b$,K1o),e(Cu,Z1o),e($,e2o),e($,Mu),e(Mu,Ioe),e(Ioe,o2o),e(Mu,r2o),e(Mu,v$),e(v$,t2o),e(Mu,a2o),e($,n2o),e($,Eu),e(Eu,Noe),e(Noe,s2o),e(Eu,l2o),e(Eu,T$),e(T$,i2o),e(Eu,d2o),e($,c2o),e($,yu),e(yu,Doe),e(Doe,f2o),e(yu,m2o),e(yu,F$),e(F$,g2o),e(yu,h2o),e($,p2o),e($,wu),e(wu,joe),e(joe,_2o),e(wu,u2o),e(wu,C$),e(C$,b2o),e(wu,v2o),e($,T2o),e($,Au),e(Au,qoe),e(qoe,F2o),e(Au,C2o),e(Au,M$),e(M$,M2o),e(Au,E2o),e($,y2o),e($,Lu),e(Lu,Goe),e(Goe,w2o),e(Lu,A2o),e(Lu,E$),e(E$,L2o),e(Lu,B2o),e($,x2o),e($,Bu),e(Bu,Ooe),e(Ooe,k2o),e(Bu,R2o),e(Bu,y$),e(y$,S2o),e(Bu,P2o),e($,$2o),e($,xu),e(xu,Xoe),e(Xoe,I2o),e(xu,N2o),e(xu,w$),e(w$,D2o),e(xu,j2o),e($,q2o),e($,ku),e(ku,Voe),e(Voe,G2o),e(ku,O2o),e(ku,A$),e(A$,X2o),e(ku,V2o),e($,z2o),e($,Ru),e(Ru,zoe),e(zoe,W2o),e(Ru,Q2o),e(Ru,L$),e(L$,H2o),e(Ru,U2o),e($,J2o),e($,Su),e(Su,Woe),e(Woe,Y2o),e(Su,K2o),e(Su,B$),e(B$,Z2o),e(Su,e6o),e($,o6o),e($,Pu),e(Pu,Qoe),e(Qoe,r6o),e(Pu,t6o),e(Pu,x$),e(x$,a6o),e(Pu,n6o),e($,s6o),e($,$u),e($u,Hoe),e(Hoe,l6o),e($u,i6o),e($u,k$),e(k$,d6o),e($u,c6o),e($,f6o),e($,Iu),e(Iu,Uoe),e(Uoe,m6o),e(Iu,g6o),e(Iu,R$),e(R$,h6o),e(Iu,p6o),e($,_6o),e($,Nu),e(Nu,Joe),e(Joe,u6o),e(Nu,b6o),e(Nu,S$),e(S$,v6o),e(Nu,T6o),e($,F6o),e($,Du),e(Du,Yoe),e(Yoe,C6o),e(Du,M6o),e(Du,P$),e(P$,E6o),e(Du,y6o),e($,w6o),e($,ju),e(ju,Koe),e(Koe,A6o),e(ju,L6o),e(ju,$$),e($$,B6o),e(ju,x6o),e($,k6o),e($,qu),e(qu,Zoe),e(Zoe,R6o),e(qu,S6o),e(qu,I$),e(I$,P6o),e(qu,$6o),e($,I6o),e($,Gu),e(Gu,ere),e(ere,N6o),e(Gu,D6o),e(Gu,N$),e(N$,j6o),e(Gu,q6o),e($,G6o),e($,Ou),e(Ou,ore),e(ore,O6o),e(Ou,X6o),e(Ou,D$),e(D$,V6o),e(Ou,z6o),e($,W6o),e($,Xu),e(Xu,rre),e(rre,Q6o),e(Xu,H6o),e(Xu,j$),e(j$,U6o),e(Xu,J6o),e($,Y6o),e($,Vu),e(Vu,tre),e(tre,K6o),e(Vu,Z6o),e(Vu,q$),e(q$,ebo),e(Vu,obo),e($,rbo),e($,zu),e(zu,are),e(are,tbo),e(zu,abo),e(zu,G$),e(G$,nbo),e(zu,sbo),e($,lbo),e($,Wu),e(Wu,nre),e(nre,ibo),e(Wu,dbo),e(Wu,O$),e(O$,cbo),e(Wu,fbo),e($,mbo),e($,Qu),e(Qu,sre),e(sre,gbo),e(Qu,hbo),e(Qu,X$),e(X$,pbo),e(Qu,_bo),e($,ubo),e($,Hu),e(Hu,lre),e(lre,bbo),e(Hu,vbo),e(Hu,V$),e(V$,Tbo),e(Hu,Fbo),e($,Cbo),e($,Uu),e(Uu,ire),e(ire,Mbo),e(Uu,Ebo),e(Uu,z$),e(z$,ybo),e(Uu,wbo),e($,Abo),e($,Ju),e(Ju,dre),e(dre,Lbo),e(Ju,Bbo),e(Ju,W$),e(W$,xbo),e(Ju,kbo),e($,Rbo),e($,Yu),e(Yu,cre),e(cre,Sbo),e(Yu,Pbo),e(Yu,Q$),e(Q$,$bo),e(Yu,Ibo),e($,Nbo),e($,Ku),e(Ku,fre),e(fre,Dbo),e(Ku,jbo),e(Ku,H$),e(H$,qbo),e(Ku,Gbo),e(je,Obo),e(je,Zu),e(Zu,Xbo),e(Zu,mre),e(mre,Vbo),e(Zu,zbo),e(Zu,gre),e(gre,Wbo),e(je,Qbo),e(je,hre),e(hre,Hbo),e(je,Ubo),g(dy,je,null),b(c,$ke,u),b(c,nd,u),e(nd,e1),e(e1,pre),g(cy,pre,null),e(nd,Jbo),e(nd,_re),e(_re,Ybo),b(c,Ike,u),b(c,Zo,u),g(fy,Zo,null),e(Zo,Kbo),e(Zo,sd),e(sd,Zbo),e(sd,ure),e(ure,evo),e(sd,ovo),e(sd,bre),e(bre,rvo),e(sd,tvo),e(Zo,avo),e(Zo,my),e(my,nvo),e(my,vre),e(vre,svo),e(my,lvo),e(Zo,ivo),e(Zo,Qr),g(gy,Qr,null),e(Qr,dvo),e(Qr,Tre),e(Tre,cvo),e(Qr,fvo),e(Qr,ld),e(ld,mvo),e(ld,Fre),e(Fre,gvo),e(ld,hvo),e(ld,Cre),e(Cre,pvo),e(ld,_vo),e(Qr,uvo),e(Qr,Mre),e(Mre,bvo),e(Qr,vvo),g(hy,Qr,null),e(Zo,Tvo),e(Zo,qe),g(py,qe,null),e(qe,Fvo),e(qe,Ere),e(Ere,Cvo),e(qe,Mvo),e(qe,Qa),e(Qa,Evo),e(Qa,yre),e(yre,yvo),e(Qa,wvo),e(Qa,wre),e(wre,Avo),e(Qa,Lvo),e(Qa,Are),e(Are,Bvo),e(Qa,xvo),e(qe,kvo),e(qe,I),e(I,o1),e(o1,Lre),e(Lre,Rvo),e(o1,Svo),e(o1,U$),e(U$,Pvo),e(o1,$vo),e(I,Ivo),e(I,r1),e(r1,Bre),e(Bre,Nvo),e(r1,Dvo),e(r1,J$),e(J$,jvo),e(r1,qvo),e(I,Gvo),e(I,t1),e(t1,xre),e(xre,Ovo),e(t1,Xvo),e(t1,Y$),e(Y$,Vvo),e(t1,zvo),e(I,Wvo),e(I,a1),e(a1,kre),e(kre,Qvo),e(a1,Hvo),e(a1,K$),e(K$,Uvo),e(a1,Jvo),e(I,Yvo),e(I,n1),e(n1,Rre),e(Rre,Kvo),e(n1,Zvo),e(n1,Z$),e(Z$,eTo),e(n1,oTo),e(I,rTo),e(I,s1),e(s1,Sre),e(Sre,tTo),e(s1,aTo),e(s1,eI),e(eI,nTo),e(s1,sTo),e(I,lTo),e(I,l1),e(l1,Pre),e(Pre,iTo),e(l1,dTo),e(l1,oI),e(oI,cTo),e(l1,fTo),e(I,mTo),e(I,i1),e(i1,$re),e($re,gTo),e(i1,hTo),e(i1,rI),e(rI,pTo),e(i1,_To),e(I,uTo),e(I,d1),e(d1,Ire),e(Ire,bTo),e(d1,vTo),e(d1,tI),e(tI,TTo),e(d1,FTo),e(I,CTo),e(I,c1),e(c1,Nre),e(Nre,MTo),e(c1,ETo),e(c1,aI),e(aI,yTo),e(c1,wTo),e(I,ATo),e(I,f1),e(f1,Dre),e(Dre,LTo),e(f1,BTo),e(f1,nI),e(nI,xTo),e(f1,kTo),e(I,RTo),e(I,m1),e(m1,jre),e(jre,STo),e(m1,PTo),e(m1,sI),e(sI,$To),e(m1,ITo),e(I,NTo),e(I,g1),e(g1,qre),e(qre,DTo),e(g1,jTo),e(g1,lI),e(lI,qTo),e(g1,GTo),e(I,OTo),e(I,h1),e(h1,Gre),e(Gre,XTo),e(h1,VTo),e(h1,iI),e(iI,zTo),e(h1,WTo),e(I,QTo),e(I,p1),e(p1,Ore),e(Ore,HTo),e(p1,UTo),e(p1,dI),e(dI,JTo),e(p1,YTo),e(I,KTo),e(I,_1),e(_1,Xre),e(Xre,ZTo),e(_1,eFo),e(_1,cI),e(cI,oFo),e(_1,rFo),e(I,tFo),e(I,u1),e(u1,Vre),e(Vre,aFo),e(u1,nFo),e(u1,fI),e(fI,sFo),e(u1,lFo),e(I,iFo),e(I,b1),e(b1,zre),e(zre,dFo),e(b1,cFo),e(b1,mI),e(mI,fFo),e(b1,mFo),e(I,gFo),e(I,v1),e(v1,Wre),e(Wre,hFo),e(v1,pFo),e(v1,gI),e(gI,_Fo),e(v1,uFo),e(I,bFo),e(I,T1),e(T1,Qre),e(Qre,vFo),e(T1,TFo),e(T1,hI),e(hI,FFo),e(T1,CFo),e(I,MFo),e(I,F1),e(F1,Hre),e(Hre,EFo),e(F1,yFo),e(F1,pI),e(pI,wFo),e(F1,AFo),e(I,LFo),e(I,C1),e(C1,Ure),e(Ure,BFo),e(C1,xFo),e(C1,_I),e(_I,kFo),e(C1,RFo),e(I,SFo),e(I,M1),e(M1,Jre),e(Jre,PFo),e(M1,$Fo),e(M1,uI),e(uI,IFo),e(M1,NFo),e(I,DFo),e(I,E1),e(E1,Yre),e(Yre,jFo),e(E1,qFo),e(E1,bI),e(bI,GFo),e(E1,OFo),e(I,XFo),e(I,y1),e(y1,Kre),e(Kre,VFo),e(y1,zFo),e(y1,vI),e(vI,WFo),e(y1,QFo),e(I,HFo),e(I,w1),e(w1,Zre),e(Zre,UFo),e(w1,JFo),e(w1,TI),e(TI,YFo),e(w1,KFo),e(I,ZFo),e(I,A1),e(A1,ete),e(ete,eCo),e(A1,oCo),e(A1,FI),e(FI,rCo),e(A1,tCo),e(I,aCo),e(I,L1),e(L1,ote),e(ote,nCo),e(L1,sCo),e(L1,CI),e(CI,lCo),e(L1,iCo),e(I,dCo),e(I,B1),e(B1,rte),e(rte,cCo),e(B1,fCo),e(B1,MI),e(MI,mCo),e(B1,gCo),e(I,hCo),e(I,x1),e(x1,tte),e(tte,pCo),e(x1,_Co),e(x1,EI),e(EI,uCo),e(x1,bCo),e(I,vCo),e(I,k1),e(k1,ate),e(ate,TCo),e(k1,FCo),e(k1,nte),e(nte,CCo),e(k1,MCo),e(I,ECo),e(I,R1),e(R1,ste),e(ste,yCo),e(R1,wCo),e(R1,yI),e(yI,ACo),e(R1,LCo),e(I,BCo),e(I,S1),e(S1,lte),e(lte,xCo),e(S1,kCo),e(S1,wI),e(wI,RCo),e(S1,SCo),e(I,PCo),e(I,P1),e(P1,ite),e(ite,$Co),e(P1,ICo),e(P1,AI),e(AI,NCo),e(P1,DCo),e(I,jCo),e(I,$1),e($1,dte),e(dte,qCo),e($1,GCo),e($1,LI),e(LI,OCo),e($1,XCo),e(qe,VCo),e(qe,I1),e(I1,zCo),e(I1,cte),e(cte,WCo),e(I1,QCo),e(I1,fte),e(fte,HCo),e(qe,UCo),e(qe,mte),e(mte,JCo),e(qe,YCo),g(_y,qe,null),b(c,Nke,u),b(c,id,u),e(id,N1),e(N1,gte),g(uy,gte,null),e(id,KCo),e(id,hte),e(hte,ZCo),b(c,Dke,u),b(c,er,u),g(by,er,null),e(er,eMo),e(er,dd),e(dd,oMo),e(dd,pte),e(pte,rMo),e(dd,tMo),e(dd,_te),e(_te,aMo),e(dd,nMo),e(er,sMo),e(er,vy),e(vy,lMo),e(vy,ute),e(ute,iMo),e(vy,dMo),e(er,cMo),e(er,Hr),g(Ty,Hr,null),e(Hr,fMo),e(Hr,bte),e(bte,mMo),e(Hr,gMo),e(Hr,cd),e(cd,hMo),e(cd,vte),e(vte,pMo),e(cd,_Mo),e(cd,Tte),e(Tte,uMo),e(cd,bMo),e(Hr,vMo),e(Hr,Fte),e(Fte,TMo),e(Hr,FMo),g(Fy,Hr,null),e(er,CMo),e(er,Ge),g(Cy,Ge,null),e(Ge,MMo),e(Ge,Cte),e(Cte,EMo),e(Ge,yMo),e(Ge,Ha),e(Ha,wMo),e(Ha,Mte),e(Mte,AMo),e(Ha,LMo),e(Ha,Ete),e(Ete,BMo),e(Ha,xMo),e(Ha,yte),e(yte,kMo),e(Ha,RMo),e(Ge,SMo),e(Ge,se),e(se,D1),e(D1,wte),e(wte,PMo),e(D1,$Mo),e(D1,BI),e(BI,IMo),e(D1,NMo),e(se,DMo),e(se,j1),e(j1,Ate),e(Ate,jMo),e(j1,qMo),e(j1,xI),e(xI,GMo),e(j1,OMo),e(se,XMo),e(se,q1),e(q1,Lte),e(Lte,VMo),e(q1,zMo),e(q1,kI),e(kI,WMo),e(q1,QMo),e(se,HMo),e(se,G1),e(G1,Bte),e(Bte,UMo),e(G1,JMo),e(G1,RI),e(RI,YMo),e(G1,KMo),e(se,ZMo),e(se,O1),e(O1,xte),e(xte,e4o),e(O1,o4o),e(O1,SI),e(SI,r4o),e(O1,t4o),e(se,a4o),e(se,X1),e(X1,kte),e(kte,n4o),e(X1,s4o),e(X1,PI),e(PI,l4o),e(X1,i4o),e(se,d4o),e(se,V1),e(V1,Rte),e(Rte,c4o),e(V1,f4o),e(V1,$I),e($I,m4o),e(V1,g4o),e(se,h4o),e(se,z1),e(z1,Ste),e(Ste,p4o),e(z1,_4o),e(z1,II),e(II,u4o),e(z1,b4o),e(se,v4o),e(se,W1),e(W1,Pte),e(Pte,T4o),e(W1,F4o),e(W1,NI),e(NI,C4o),e(W1,M4o),e(se,E4o),e(se,Q1),e(Q1,$te),e($te,y4o),e(Q1,w4o),e(Q1,DI),e(DI,A4o),e(Q1,L4o),e(se,B4o),e(se,H1),e(H1,Ite),e(Ite,x4o),e(H1,k4o),e(H1,jI),e(jI,R4o),e(H1,S4o),e(se,P4o),e(se,U1),e(U1,Nte),e(Nte,$4o),e(U1,I4o),e(U1,qI),e(qI,N4o),e(U1,D4o),e(se,j4o),e(se,J1),e(J1,Dte),e(Dte,q4o),e(J1,G4o),e(J1,GI),e(GI,O4o),e(J1,X4o),e(se,V4o),e(se,Y1),e(Y1,jte),e(jte,z4o),e(Y1,W4o),e(Y1,OI),e(OI,Q4o),e(Y1,H4o),e(se,U4o),e(se,K1),e(K1,qte),e(qte,J4o),e(K1,Y4o),e(K1,XI),e(XI,K4o),e(K1,Z4o),e(se,eEo),e(se,Z1),e(Z1,Gte),e(Gte,oEo),e(Z1,rEo),e(Z1,VI),e(VI,tEo),e(Z1,aEo),e(Ge,nEo),e(Ge,e2),e(e2,sEo),e(e2,Ote),e(Ote,lEo),e(e2,iEo),e(e2,Xte),e(Xte,dEo),e(Ge,cEo),e(Ge,Vte),e(Vte,fEo),e(Ge,mEo),g(My,Ge,null),b(c,jke,u),b(c,fd,u),e(fd,o2),e(o2,zte),g(Ey,zte,null),e(fd,gEo),e(fd,Wte),e(Wte,hEo),b(c,qke,u),b(c,or,u),g(yy,or,null),e(or,pEo),e(or,md),e(md,_Eo),e(md,Qte),e(Qte,uEo),e(md,bEo),e(md,Hte),e(Hte,vEo),e(md,TEo),e(or,FEo),e(or,wy),e(wy,CEo),e(wy,Ute),e(Ute,MEo),e(wy,EEo),e(or,yEo),e(or,Ur),g(Ay,Ur,null),e(Ur,wEo),e(Ur,Jte),e(Jte,AEo),e(Ur,LEo),e(Ur,gd),e(gd,BEo),e(gd,Yte),e(Yte,xEo),e(gd,kEo),e(gd,Kte),e(Kte,REo),e(gd,SEo),e(Ur,PEo),e(Ur,Zte),e(Zte,$Eo),e(Ur,IEo),g(Ly,Ur,null),e(or,NEo),e(or,Oe),g(By,Oe,null),e(Oe,DEo),e(Oe,eae),e(eae,jEo),e(Oe,qEo),e(Oe,Ua),e(Ua,GEo),e(Ua,oae),e(oae,OEo),e(Ua,XEo),e(Ua,rae),e(rae,VEo),e(Ua,zEo),e(Ua,tae),e(tae,WEo),e(Ua,QEo),e(Oe,HEo),e(Oe,A),e(A,r2),e(r2,aae),e(aae,UEo),e(r2,JEo),e(r2,zI),e(zI,YEo),e(r2,KEo),e(A,ZEo),e(A,t2),e(t2,nae),e(nae,e3o),e(t2,o3o),e(t2,WI),e(WI,r3o),e(t2,t3o),e(A,a3o),e(A,a2),e(a2,sae),e(sae,n3o),e(a2,s3o),e(a2,QI),e(QI,l3o),e(a2,i3o),e(A,d3o),e(A,n2),e(n2,lae),e(lae,c3o),e(n2,f3o),e(n2,HI),e(HI,m3o),e(n2,g3o),e(A,h3o),e(A,s2),e(s2,iae),e(iae,p3o),e(s2,_3o),e(s2,UI),e(UI,u3o),e(s2,b3o),e(A,v3o),e(A,l2),e(l2,dae),e(dae,T3o),e(l2,F3o),e(l2,JI),e(JI,C3o),e(l2,M3o),e(A,E3o),e(A,i2),e(i2,cae),e(cae,y3o),e(i2,w3o),e(i2,YI),e(YI,A3o),e(i2,L3o),e(A,B3o),e(A,d2),e(d2,fae),e(fae,x3o),e(d2,k3o),e(d2,KI),e(KI,R3o),e(d2,S3o),e(A,P3o),e(A,c2),e(c2,mae),e(mae,$3o),e(c2,I3o),e(c2,ZI),e(ZI,N3o),e(c2,D3o),e(A,j3o),e(A,f2),e(f2,gae),e(gae,q3o),e(f2,G3o),e(f2,eN),e(eN,O3o),e(f2,X3o),e(A,V3o),e(A,m2),e(m2,hae),e(hae,z3o),e(m2,W3o),e(m2,oN),e(oN,Q3o),e(m2,H3o),e(A,U3o),e(A,g2),e(g2,pae),e(pae,J3o),e(g2,Y3o),e(g2,rN),e(rN,K3o),e(g2,Z3o),e(A,e5o),e(A,h2),e(h2,_ae),e(_ae,o5o),e(h2,r5o),e(h2,tN),e(tN,t5o),e(h2,a5o),e(A,n5o),e(A,p2),e(p2,uae),e(uae,s5o),e(p2,l5o),e(p2,aN),e(aN,i5o),e(p2,d5o),e(A,c5o),e(A,_2),e(_2,bae),e(bae,f5o),e(_2,m5o),e(_2,nN),e(nN,g5o),e(_2,h5o),e(A,p5o),e(A,u2),e(u2,vae),e(vae,_5o),e(u2,u5o),e(u2,sN),e(sN,b5o),e(u2,v5o),e(A,T5o),e(A,b2),e(b2,Tae),e(Tae,F5o),e(b2,C5o),e(b2,lN),e(lN,M5o),e(b2,E5o),e(A,y5o),e(A,v2),e(v2,Fae),e(Fae,w5o),e(v2,A5o),e(v2,iN),e(iN,L5o),e(v2,B5o),e(A,x5o),e(A,T2),e(T2,Cae),e(Cae,k5o),e(T2,R5o),e(T2,dN),e(dN,S5o),e(T2,P5o),e(A,$5o),e(A,F2),e(F2,Mae),e(Mae,I5o),e(F2,N5o),e(F2,cN),e(cN,D5o),e(F2,j5o),e(A,q5o),e(A,C2),e(C2,Eae),e(Eae,G5o),e(C2,O5o),e(C2,fN),e(fN,X5o),e(C2,V5o),e(A,z5o),e(A,M2),e(M2,yae),e(yae,W5o),e(M2,Q5o),e(M2,mN),e(mN,H5o),e(M2,U5o),e(A,J5o),e(A,E2),e(E2,wae),e(wae,Y5o),e(E2,K5o),e(E2,gN),e(gN,Z5o),e(E2,eyo),e(A,oyo),e(A,y2),e(y2,Aae),e(Aae,ryo),e(y2,tyo),e(y2,hN),e(hN,ayo),e(y2,nyo),e(A,syo),e(A,w2),e(w2,Lae),e(Lae,lyo),e(w2,iyo),e(w2,pN),e(pN,dyo),e(w2,cyo),e(A,fyo),e(A,A2),e(A2,Bae),e(Bae,myo),e(A2,gyo),e(A2,_N),e(_N,hyo),e(A2,pyo),e(A,_yo),e(A,L2),e(L2,xae),e(xae,uyo),e(L2,byo),e(L2,uN),e(uN,vyo),e(L2,Tyo),e(A,Fyo),e(A,B2),e(B2,kae),e(kae,Cyo),e(B2,Myo),e(B2,bN),e(bN,Eyo),e(B2,yyo),e(A,wyo),e(A,x2),e(x2,Rae),e(Rae,Ayo),e(x2,Lyo),e(x2,vN),e(vN,Byo),e(x2,xyo),e(A,kyo),e(A,k2),e(k2,Sae),e(Sae,Ryo),e(k2,Syo),e(k2,TN),e(TN,Pyo),e(k2,$yo),e(A,Iyo),e(A,R2),e(R2,Pae),e(Pae,Nyo),e(R2,Dyo),e(R2,FN),e(FN,jyo),e(R2,qyo),e(A,Gyo),e(A,S2),e(S2,$ae),e($ae,Oyo),e(S2,Xyo),e(S2,CN),e(CN,Vyo),e(S2,zyo),e(A,Wyo),e(A,P2),e(P2,Iae),e(Iae,Qyo),e(P2,Hyo),e(P2,MN),e(MN,Uyo),e(P2,Jyo),e(A,Yyo),e(A,$2),e($2,Nae),e(Nae,Kyo),e($2,Zyo),e($2,EN),e(EN,ewo),e($2,owo),e(A,rwo),e(A,I2),e(I2,Dae),e(Dae,two),e(I2,awo),e(I2,yN),e(yN,nwo),e(I2,swo),e(A,lwo),e(A,N2),e(N2,jae),e(jae,iwo),e(N2,dwo),e(N2,wN),e(wN,cwo),e(N2,fwo),e(A,mwo),e(A,D2),e(D2,qae),e(qae,gwo),e(D2,hwo),e(D2,AN),e(AN,pwo),e(D2,_wo),e(A,uwo),e(A,j2),e(j2,Gae),e(Gae,bwo),e(j2,vwo),e(j2,LN),e(LN,Two),e(j2,Fwo),e(A,Cwo),e(A,q2),e(q2,Oae),e(Oae,Mwo),e(q2,Ewo),e(q2,BN),e(BN,ywo),e(q2,wwo),e(A,Awo),e(A,G2),e(G2,Xae),e(Xae,Lwo),e(G2,Bwo),e(G2,xN),e(xN,xwo),e(G2,kwo),e(A,Rwo),e(A,O2),e(O2,Vae),e(Vae,Swo),e(O2,Pwo),e(O2,kN),e(kN,$wo),e(O2,Iwo),e(A,Nwo),e(A,X2),e(X2,zae),e(zae,Dwo),e(X2,jwo),e(X2,RN),e(RN,qwo),e(X2,Gwo),e(A,Owo),e(A,V2),e(V2,Wae),e(Wae,Xwo),e(V2,Vwo),e(V2,SN),e(SN,zwo),e(V2,Wwo),e(A,Qwo),e(A,z2),e(z2,Qae),e(Qae,Hwo),e(z2,Uwo),e(z2,PN),e(PN,Jwo),e(z2,Ywo),e(A,Kwo),e(A,W2),e(W2,Hae),e(Hae,Zwo),e(W2,eAo),e(W2,$N),e($N,oAo),e(W2,rAo),e(A,tAo),e(A,Q2),e(Q2,Uae),e(Uae,aAo),e(Q2,nAo),e(Q2,IN),e(IN,sAo),e(Q2,lAo),e(Oe,iAo),e(Oe,H2),e(H2,dAo),e(H2,Jae),e(Jae,cAo),e(H2,fAo),e(H2,Yae),e(Yae,mAo),e(Oe,gAo),e(Oe,Kae),e(Kae,hAo),e(Oe,pAo),g(xy,Oe,null),b(c,Gke,u),b(c,hd,u),e(hd,U2),e(U2,Zae),g(ky,Zae,null),e(hd,_Ao),e(hd,ene),e(ene,uAo),b(c,Oke,u),b(c,rr,u),g(Ry,rr,null),e(rr,bAo),e(rr,pd),e(pd,vAo),e(pd,one),e(one,TAo),e(pd,FAo),e(pd,rne),e(rne,CAo),e(pd,MAo),e(rr,EAo),e(rr,Sy),e(Sy,yAo),e(Sy,tne),e(tne,wAo),e(Sy,AAo),e(rr,LAo),e(rr,Jr),g(Py,Jr,null),e(Jr,BAo),e(Jr,ane),e(ane,xAo),e(Jr,kAo),e(Jr,_d),e(_d,RAo),e(_d,nne),e(nne,SAo),e(_d,PAo),e(_d,sne),e(sne,$Ao),e(_d,IAo),e(Jr,NAo),e(Jr,lne),e(lne,DAo),e(Jr,jAo),g($y,Jr,null),e(rr,qAo),e(rr,Xe),g(Iy,Xe,null),e(Xe,GAo),e(Xe,ine),e(ine,OAo),e(Xe,XAo),e(Xe,Ja),e(Ja,VAo),e(Ja,dne),e(dne,zAo),e(Ja,WAo),e(Ja,cne),e(cne,QAo),e(Ja,HAo),e(Ja,fne),e(fne,UAo),e(Ja,JAo),e(Xe,YAo),e(Xe,G),e(G,J2),e(J2,mne),e(mne,KAo),e(J2,ZAo),e(J2,NN),e(NN,e0o),e(J2,o0o),e(G,r0o),e(G,Y2),e(Y2,gne),e(gne,t0o),e(Y2,a0o),e(Y2,DN),e(DN,n0o),e(Y2,s0o),e(G,l0o),e(G,K2),e(K2,hne),e(hne,i0o),e(K2,d0o),e(K2,jN),e(jN,c0o),e(K2,f0o),e(G,m0o),e(G,Z2),e(Z2,pne),e(pne,g0o),e(Z2,h0o),e(Z2,qN),e(qN,p0o),e(Z2,_0o),e(G,u0o),e(G,e6),e(e6,_ne),e(_ne,b0o),e(e6,v0o),e(e6,GN),e(GN,T0o),e(e6,F0o),e(G,C0o),e(G,o6),e(o6,une),e(une,M0o),e(o6,E0o),e(o6,ON),e(ON,y0o),e(o6,w0o),e(G,A0o),e(G,r6),e(r6,bne),e(bne,L0o),e(r6,B0o),e(r6,XN),e(XN,x0o),e(r6,k0o),e(G,R0o),e(G,t6),e(t6,vne),e(vne,S0o),e(t6,P0o),e(t6,VN),e(VN,$0o),e(t6,I0o),e(G,N0o),e(G,a6),e(a6,Tne),e(Tne,D0o),e(a6,j0o),e(a6,zN),e(zN,q0o),e(a6,G0o),e(G,O0o),e(G,n6),e(n6,Fne),e(Fne,X0o),e(n6,V0o),e(n6,WN),e(WN,z0o),e(n6,W0o),e(G,Q0o),e(G,s6),e(s6,Cne),e(Cne,H0o),e(s6,U0o),e(s6,QN),e(QN,J0o),e(s6,Y0o),e(G,K0o),e(G,l6),e(l6,Mne),e(Mne,Z0o),e(l6,eLo),e(l6,HN),e(HN,oLo),e(l6,rLo),e(G,tLo),e(G,i6),e(i6,Ene),e(Ene,aLo),e(i6,nLo),e(i6,UN),e(UN,sLo),e(i6,lLo),e(G,iLo),e(G,d6),e(d6,yne),e(yne,dLo),e(d6,cLo),e(d6,JN),e(JN,fLo),e(d6,mLo),e(G,gLo),e(G,c6),e(c6,wne),e(wne,hLo),e(c6,pLo),e(c6,YN),e(YN,_Lo),e(c6,uLo),e(G,bLo),e(G,f6),e(f6,Ane),e(Ane,vLo),e(f6,TLo),e(f6,KN),e(KN,FLo),e(f6,CLo),e(G,MLo),e(G,m6),e(m6,Lne),e(Lne,ELo),e(m6,yLo),e(m6,ZN),e(ZN,wLo),e(m6,ALo),e(G,LLo),e(G,g6),e(g6,Bne),e(Bne,BLo),e(g6,xLo),e(g6,eD),e(eD,kLo),e(g6,RLo),e(G,SLo),e(G,h6),e(h6,xne),e(xne,PLo),e(h6,$Lo),e(h6,oD),e(oD,ILo),e(h6,NLo),e(G,DLo),e(G,p6),e(p6,kne),e(kne,jLo),e(p6,qLo),e(p6,rD),e(rD,GLo),e(p6,OLo),e(G,XLo),e(G,_6),e(_6,Rne),e(Rne,VLo),e(_6,zLo),e(_6,tD),e(tD,WLo),e(_6,QLo),e(G,HLo),e(G,u6),e(u6,Sne),e(Sne,ULo),e(u6,JLo),e(u6,aD),e(aD,YLo),e(u6,KLo),e(G,ZLo),e(G,b6),e(b6,Pne),e(Pne,e7o),e(b6,o7o),e(b6,nD),e(nD,r7o),e(b6,t7o),e(G,a7o),e(G,v6),e(v6,$ne),e($ne,n7o),e(v6,s7o),e(v6,sD),e(sD,l7o),e(v6,i7o),e(G,d7o),e(G,T6),e(T6,Ine),e(Ine,c7o),e(T6,f7o),e(T6,lD),e(lD,m7o),e(T6,g7o),e(G,h7o),e(G,F6),e(F6,Nne),e(Nne,p7o),e(F6,_7o),e(F6,iD),e(iD,u7o),e(F6,b7o),e(G,v7o),e(G,C6),e(C6,Dne),e(Dne,T7o),e(C6,F7o),e(C6,dD),e(dD,C7o),e(C6,M7o),e(G,E7o),e(G,M6),e(M6,jne),e(jne,y7o),e(M6,w7o),e(M6,cD),e(cD,A7o),e(M6,L7o),e(Xe,B7o),e(Xe,E6),e(E6,x7o),e(E6,qne),e(qne,k7o),e(E6,R7o),e(E6,Gne),e(Gne,S7o),e(Xe,P7o),e(Xe,One),e(One,$7o),e(Xe,I7o),g(Ny,Xe,null),b(c,Xke,u),b(c,ud,u),e(ud,y6),e(y6,Xne),g(Dy,Xne,null),e(ud,N7o),e(ud,Vne),e(Vne,D7o),b(c,Vke,u),b(c,tr,u),g(jy,tr,null),e(tr,j7o),e(tr,bd),e(bd,q7o),e(bd,zne),e(zne,G7o),e(bd,O7o),e(bd,Wne),e(Wne,X7o),e(bd,V7o),e(tr,z7o),e(tr,qy),e(qy,W7o),e(qy,Qne),e(Qne,Q7o),e(qy,H7o),e(tr,U7o),e(tr,Yr),g(Gy,Yr,null),e(Yr,J7o),e(Yr,Hne),e(Hne,Y7o),e(Yr,K7o),e(Yr,vd),e(vd,Z7o),e(vd,Une),e(Une,e8o),e(vd,o8o),e(vd,Jne),e(Jne,r8o),e(vd,t8o),e(Yr,a8o),e(Yr,Yne),e(Yne,n8o),e(Yr,s8o),g(Oy,Yr,null),e(tr,l8o),e(tr,Ve),g(Xy,Ve,null),e(Ve,i8o),e(Ve,Kne),e(Kne,d8o),e(Ve,c8o),e(Ve,Ya),e(Ya,f8o),e(Ya,Zne),e(Zne,m8o),e(Ya,g8o),e(Ya,ese),e(ese,h8o),e(Ya,p8o),e(Ya,ose),e(ose,_8o),e(Ya,u8o),e(Ve,b8o),e(Ve,da),e(da,w6),e(w6,rse),e(rse,v8o),e(w6,T8o),e(w6,fD),e(fD,F8o),e(w6,C8o),e(da,M8o),e(da,A6),e(A6,tse),e(tse,E8o),e(A6,y8o),e(A6,mD),e(mD,w8o),e(A6,A8o),e(da,L8o),e(da,L6),e(L6,ase),e(ase,B8o),e(L6,x8o),e(L6,gD),e(gD,k8o),e(L6,R8o),e(da,S8o),e(da,B6),e(B6,nse),e(nse,P8o),e(B6,$8o),e(B6,hD),e(hD,I8o),e(B6,N8o),e(da,D8o),e(da,x6),e(x6,sse),e(sse,j8o),e(x6,q8o),e(x6,pD),e(pD,G8o),e(x6,O8o),e(Ve,X8o),e(Ve,k6),e(k6,V8o),e(k6,lse),e(lse,z8o),e(k6,W8o),e(k6,ise),e(ise,Q8o),e(Ve,H8o),e(Ve,dse),e(dse,U8o),e(Ve,J8o),g(Vy,Ve,null),b(c,zke,u),b(c,Td,u),e(Td,R6),e(R6,cse),g(zy,cse,null),e(Td,Y8o),e(Td,fse),e(fse,K8o),b(c,Wke,u),b(c,ar,u),g(Wy,ar,null),e(ar,Z8o),e(ar,Fd),e(Fd,e9o),e(Fd,mse),e(mse,o9o),e(Fd,r9o),e(Fd,gse),e(gse,t9o),e(Fd,a9o),e(ar,n9o),e(ar,Qy),e(Qy,s9o),e(Qy,hse),e(hse,l9o),e(Qy,i9o),e(ar,d9o),e(ar,Kr),g(Hy,Kr,null),e(Kr,c9o),e(Kr,pse),e(pse,f9o),e(Kr,m9o),e(Kr,Cd),e(Cd,g9o),e(Cd,_se),e(_se,h9o),e(Cd,p9o),e(Cd,use),e(use,_9o),e(Cd,u9o),e(Kr,b9o),e(Kr,bse),e(bse,v9o),e(Kr,T9o),g(Uy,Kr,null),e(ar,F9o),e(ar,ze),g(Jy,ze,null),e(ze,C9o),e(ze,vse),e(vse,M9o),e(ze,E9o),e(ze,Ka),e(Ka,y9o),e(Ka,Tse),e(Tse,w9o),e(Ka,A9o),e(Ka,Fse),e(Fse,L9o),e(Ka,B9o),e(Ka,Cse),e(Cse,x9o),e(Ka,k9o),e(ze,R9o),e(ze,j),e(j,S6),e(S6,Mse),e(Mse,S9o),e(S6,P9o),e(S6,_D),e(_D,$9o),e(S6,I9o),e(j,N9o),e(j,P6),e(P6,Ese),e(Ese,D9o),e(P6,j9o),e(P6,uD),e(uD,q9o),e(P6,G9o),e(j,O9o),e(j,$6),e($6,yse),e(yse,X9o),e($6,V9o),e($6,bD),e(bD,z9o),e($6,W9o),e(j,Q9o),e(j,I6),e(I6,wse),e(wse,H9o),e(I6,U9o),e(I6,vD),e(vD,J9o),e(I6,Y9o),e(j,K9o),e(j,N6),e(N6,Ase),e(Ase,Z9o),e(N6,eBo),e(N6,TD),e(TD,oBo),e(N6,rBo),e(j,tBo),e(j,D6),e(D6,Lse),e(Lse,aBo),e(D6,nBo),e(D6,FD),e(FD,sBo),e(D6,lBo),e(j,iBo),e(j,j6),e(j6,Bse),e(Bse,dBo),e(j6,cBo),e(j6,CD),e(CD,fBo),e(j6,mBo),e(j,gBo),e(j,q6),e(q6,xse),e(xse,hBo),e(q6,pBo),e(q6,MD),e(MD,_Bo),e(q6,uBo),e(j,bBo),e(j,G6),e(G6,kse),e(kse,vBo),e(G6,TBo),e(G6,ED),e(ED,FBo),e(G6,CBo),e(j,MBo),e(j,O6),e(O6,Rse),e(Rse,EBo),e(O6,yBo),e(O6,yD),e(yD,wBo),e(O6,ABo),e(j,LBo),e(j,X6),e(X6,Sse),e(Sse,BBo),e(X6,xBo),e(X6,wD),e(wD,kBo),e(X6,RBo),e(j,SBo),e(j,V6),e(V6,Pse),e(Pse,PBo),e(V6,$Bo),e(V6,AD),e(AD,IBo),e(V6,NBo),e(j,DBo),e(j,z6),e(z6,$se),e($se,jBo),e(z6,qBo),e(z6,LD),e(LD,GBo),e(z6,OBo),e(j,XBo),e(j,W6),e(W6,Ise),e(Ise,VBo),e(W6,zBo),e(W6,BD),e(BD,WBo),e(W6,QBo),e(j,HBo),e(j,Q6),e(Q6,Nse),e(Nse,UBo),e(Q6,JBo),e(Q6,xD),e(xD,YBo),e(Q6,KBo),e(j,ZBo),e(j,H6),e(H6,Dse),e(Dse,exo),e(H6,oxo),e(H6,kD),e(kD,rxo),e(H6,txo),e(j,axo),e(j,U6),e(U6,jse),e(jse,nxo),e(U6,sxo),e(U6,RD),e(RD,lxo),e(U6,ixo),e(j,dxo),e(j,J6),e(J6,qse),e(qse,cxo),e(J6,fxo),e(J6,SD),e(SD,mxo),e(J6,gxo),e(j,hxo),e(j,Y6),e(Y6,Gse),e(Gse,pxo),e(Y6,_xo),e(Y6,PD),e(PD,uxo),e(Y6,bxo),e(j,vxo),e(j,K6),e(K6,Ose),e(Ose,Txo),e(K6,Fxo),e(K6,$D),e($D,Cxo),e(K6,Mxo),e(j,Exo),e(j,Z6),e(Z6,Xse),e(Xse,yxo),e(Z6,wxo),e(Z6,ID),e(ID,Axo),e(Z6,Lxo),e(j,Bxo),e(j,eb),e(eb,Vse),e(Vse,xxo),e(eb,kxo),e(eb,ND),e(ND,Rxo),e(eb,Sxo),e(j,Pxo),e(j,ob),e(ob,zse),e(zse,$xo),e(ob,Ixo),e(ob,DD),e(DD,Nxo),e(ob,Dxo),e(j,jxo),e(j,rb),e(rb,Wse),e(Wse,qxo),e(rb,Gxo),e(rb,jD),e(jD,Oxo),e(rb,Xxo),e(j,Vxo),e(j,tb),e(tb,Qse),e(Qse,zxo),e(tb,Wxo),e(tb,qD),e(qD,Qxo),e(tb,Hxo),e(j,Uxo),e(j,ab),e(ab,Hse),e(Hse,Jxo),e(ab,Yxo),e(ab,GD),e(GD,Kxo),e(ab,Zxo),e(j,eko),e(j,nb),e(nb,Use),e(Use,oko),e(nb,rko),e(nb,OD),e(OD,tko),e(nb,ako),e(j,nko),e(j,sb),e(sb,Jse),e(Jse,sko),e(sb,lko),e(sb,XD),e(XD,iko),e(sb,dko),e(j,cko),e(j,lb),e(lb,Yse),e(Yse,fko),e(lb,mko),e(lb,VD),e(VD,gko),e(lb,hko),e(j,pko),e(j,ib),e(ib,Kse),e(Kse,_ko),e(ib,uko),e(ib,zD),e(zD,bko),e(ib,vko),e(j,Tko),e(j,db),e(db,Zse),e(Zse,Fko),e(db,Cko),e(db,WD),e(WD,Mko),e(db,Eko),e(j,yko),e(j,cb),e(cb,ele),e(ele,wko),e(cb,Ako),e(cb,QD),e(QD,Lko),e(cb,Bko),e(j,xko),e(j,fb),e(fb,ole),e(ole,kko),e(fb,Rko),e(fb,HD),e(HD,Sko),e(fb,Pko),e(ze,$ko),e(ze,mb),e(mb,Iko),e(mb,rle),e(rle,Nko),e(mb,Dko),e(mb,tle),e(tle,jko),e(ze,qko),e(ze,ale),e(ale,Gko),e(ze,Oko),g(Yy,ze,null),b(c,Qke,u),b(c,Md,u),e(Md,gb),e(gb,nle),g(Ky,nle,null),e(Md,Xko),e(Md,sle),e(sle,Vko),b(c,Hke,u),b(c,nr,u),g(Zy,nr,null),e(nr,zko),e(nr,Ed),e(Ed,Wko),e(Ed,lle),e(lle,Qko),e(Ed,Hko),e(Ed,ile),e(ile,Uko),e(Ed,Jko),e(nr,Yko),e(nr,ew),e(ew,Kko),e(ew,dle),e(dle,Zko),e(ew,eRo),e(nr,oRo),e(nr,Zr),g(ow,Zr,null),e(Zr,rRo),e(Zr,cle),e(cle,tRo),e(Zr,aRo),e(Zr,yd),e(yd,nRo),e(yd,fle),e(fle,sRo),e(yd,lRo),e(yd,mle),e(mle,iRo),e(yd,dRo),e(Zr,cRo),e(Zr,gle),e(gle,fRo),e(Zr,mRo),g(rw,Zr,null),e(nr,gRo),e(nr,We),g(tw,We,null),e(We,hRo),e(We,hle),e(hle,pRo),e(We,_Ro),e(We,Za),e(Za,uRo),e(Za,ple),e(ple,bRo),e(Za,vRo),e(Za,_le),e(_le,TRo),e(Za,FRo),e(Za,ule),e(ule,CRo),e(Za,MRo),e(We,ERo),e(We,R),e(R,hb),e(hb,ble),e(ble,yRo),e(hb,wRo),e(hb,UD),e(UD,ARo),e(hb,LRo),e(R,BRo),e(R,pb),e(pb,vle),e(vle,xRo),e(pb,kRo),e(pb,JD),e(JD,RRo),e(pb,SRo),e(R,PRo),e(R,_b),e(_b,Tle),e(Tle,$Ro),e(_b,IRo),e(_b,YD),e(YD,NRo),e(_b,DRo),e(R,jRo),e(R,ub),e(ub,Fle),e(Fle,qRo),e(ub,GRo),e(ub,KD),e(KD,ORo),e(ub,XRo),e(R,VRo),e(R,bb),e(bb,Cle),e(Cle,zRo),e(bb,WRo),e(bb,ZD),e(ZD,QRo),e(bb,HRo),e(R,URo),e(R,vb),e(vb,Mle),e(Mle,JRo),e(vb,YRo),e(vb,ej),e(ej,KRo),e(vb,ZRo),e(R,eSo),e(R,Tb),e(Tb,Ele),e(Ele,oSo),e(Tb,rSo),e(Tb,oj),e(oj,tSo),e(Tb,aSo),e(R,nSo),e(R,Fb),e(Fb,yle),e(yle,sSo),e(Fb,lSo),e(Fb,rj),e(rj,iSo),e(Fb,dSo),e(R,cSo),e(R,Cb),e(Cb,wle),e(wle,fSo),e(Cb,mSo),e(Cb,tj),e(tj,gSo),e(Cb,hSo),e(R,pSo),e(R,Mb),e(Mb,Ale),e(Ale,_So),e(Mb,uSo),e(Mb,aj),e(aj,bSo),e(Mb,vSo),e(R,TSo),e(R,Eb),e(Eb,Lle),e(Lle,FSo),e(Eb,CSo),e(Eb,nj),e(nj,MSo),e(Eb,ESo),e(R,ySo),e(R,yb),e(yb,Ble),e(Ble,wSo),e(yb,ASo),e(yb,sj),e(sj,LSo),e(yb,BSo),e(R,xSo),e(R,wb),e(wb,xle),e(xle,kSo),e(wb,RSo),e(wb,lj),e(lj,SSo),e(wb,PSo),e(R,$So),e(R,Ab),e(Ab,kle),e(kle,ISo),e(Ab,NSo),e(Ab,ij),e(ij,DSo),e(Ab,jSo),e(R,qSo),e(R,Lb),e(Lb,Rle),e(Rle,GSo),e(Lb,OSo),e(Lb,dj),e(dj,XSo),e(Lb,VSo),e(R,zSo),e(R,Bb),e(Bb,Sle),e(Sle,WSo),e(Bb,QSo),e(Bb,cj),e(cj,HSo),e(Bb,USo),e(R,JSo),e(R,xb),e(xb,Ple),e(Ple,YSo),e(xb,KSo),e(xb,fj),e(fj,ZSo),e(xb,ePo),e(R,oPo),e(R,kb),e(kb,$le),e($le,rPo),e(kb,tPo),e(kb,mj),e(mj,aPo),e(kb,nPo),e(R,sPo),e(R,Rb),e(Rb,Ile),e(Ile,lPo),e(Rb,iPo),e(Rb,gj),e(gj,dPo),e(Rb,cPo),e(R,fPo),e(R,Sb),e(Sb,Nle),e(Nle,mPo),e(Sb,gPo),e(Sb,hj),e(hj,hPo),e(Sb,pPo),e(R,_Po),e(R,Pb),e(Pb,Dle),e(Dle,uPo),e(Pb,bPo),e(Pb,pj),e(pj,vPo),e(Pb,TPo),e(R,FPo),e(R,$b),e($b,jle),e(jle,CPo),e($b,MPo),e($b,_j),e(_j,EPo),e($b,yPo),e(R,wPo),e(R,Ib),e(Ib,qle),e(qle,APo),e(Ib,LPo),e(Ib,uj),e(uj,BPo),e(Ib,xPo),e(R,kPo),e(R,Nb),e(Nb,Gle),e(Gle,RPo),e(Nb,SPo),e(Nb,bj),e(bj,PPo),e(Nb,$Po),e(R,IPo),e(R,Db),e(Db,Ole),e(Ole,NPo),e(Db,DPo),e(Db,vj),e(vj,jPo),e(Db,qPo),e(R,GPo),e(R,jb),e(jb,Xle),e(Xle,OPo),e(jb,XPo),e(jb,Tj),e(Tj,VPo),e(jb,zPo),e(R,WPo),e(R,qb),e(qb,Vle),e(Vle,QPo),e(qb,HPo),e(qb,Fj),e(Fj,UPo),e(qb,JPo),e(R,YPo),e(R,Gb),e(Gb,zle),e(zle,KPo),e(Gb,ZPo),e(Gb,Cj),e(Cj,e$o),e(Gb,o$o),e(R,r$o),e(R,Ob),e(Ob,Wle),e(Wle,t$o),e(Ob,a$o),e(Ob,Mj),e(Mj,n$o),e(Ob,s$o),e(R,l$o),e(R,Xb),e(Xb,Qle),e(Qle,i$o),e(Xb,d$o),e(Xb,Ej),e(Ej,c$o),e(Xb,f$o),e(R,m$o),e(R,Vb),e(Vb,Hle),e(Hle,g$o),e(Vb,h$o),e(Vb,yj),e(yj,p$o),e(Vb,_$o),e(R,u$o),e(R,zb),e(zb,Ule),e(Ule,b$o),e(zb,v$o),e(zb,wj),e(wj,T$o),e(zb,F$o),e(R,C$o),e(R,Wb),e(Wb,Jle),e(Jle,M$o),e(Wb,E$o),e(Wb,Aj),e(Aj,y$o),e(Wb,w$o),e(R,A$o),e(R,Qb),e(Qb,Yle),e(Yle,L$o),e(Qb,B$o),e(Qb,Lj),e(Lj,x$o),e(Qb,k$o),e(R,R$o),e(R,Hb),e(Hb,Kle),e(Kle,S$o),e(Hb,P$o),e(Hb,Bj),e(Bj,$$o),e(Hb,I$o),e(R,N$o),e(R,Ub),e(Ub,Zle),e(Zle,D$o),e(Ub,j$o),e(Ub,xj),e(xj,q$o),e(Ub,G$o),e(R,O$o),e(R,Jb),e(Jb,eie),e(eie,X$o),e(Jb,V$o),e(Jb,kj),e(kj,z$o),e(Jb,W$o),e(R,Q$o),e(R,Yb),e(Yb,oie),e(oie,H$o),e(Yb,U$o),e(Yb,Rj),e(Rj,J$o),e(Yb,Y$o),e(R,K$o),e(R,Kb),e(Kb,rie),e(rie,Z$o),e(Kb,eIo),e(Kb,Sj),e(Sj,oIo),e(Kb,rIo),e(We,tIo),e(We,Zb),e(Zb,aIo),e(Zb,tie),e(tie,nIo),e(Zb,sIo),e(Zb,aie),e(aie,lIo),e(We,iIo),e(We,nie),e(nie,dIo),e(We,cIo),g(aw,We,null),b(c,Uke,u),b(c,wd,u),e(wd,ev),e(ev,sie),g(nw,sie,null),e(wd,fIo),e(wd,lie),e(lie,mIo),b(c,Jke,u),b(c,sr,u),g(sw,sr,null),e(sr,gIo),e(sr,Ad),e(Ad,hIo),e(Ad,iie),e(iie,pIo),e(Ad,_Io),e(Ad,die),e(die,uIo),e(Ad,bIo),e(sr,vIo),e(sr,lw),e(lw,TIo),e(lw,cie),e(cie,FIo),e(lw,CIo),e(sr,MIo),e(sr,et),g(iw,et,null),e(et,EIo),e(et,fie),e(fie,yIo),e(et,wIo),e(et,Ld),e(Ld,AIo),e(Ld,mie),e(mie,LIo),e(Ld,BIo),e(Ld,gie),e(gie,xIo),e(Ld,kIo),e(et,RIo),e(et,hie),e(hie,SIo),e(et,PIo),g(dw,et,null),e(sr,$Io),e(sr,Qe),g(cw,Qe,null),e(Qe,IIo),e(Qe,pie),e(pie,NIo),e(Qe,DIo),e(Qe,en),e(en,jIo),e(en,_ie),e(_ie,qIo),e(en,GIo),e(en,uie),e(uie,OIo),e(en,XIo),e(en,bie),e(bie,VIo),e(en,zIo),e(Qe,WIo),e(Qe,vie),e(vie,ov),e(ov,Tie),e(Tie,QIo),e(ov,HIo),e(ov,Pj),e(Pj,UIo),e(ov,JIo),e(Qe,YIo),e(Qe,rv),e(rv,KIo),e(rv,Fie),e(Fie,ZIo),e(rv,eNo),e(rv,Cie),e(Cie,oNo),e(Qe,rNo),e(Qe,Mie),e(Mie,tNo),e(Qe,aNo),g(fw,Qe,null),b(c,Yke,u),b(c,Bd,u),e(Bd,tv),e(tv,Eie),g(mw,Eie,null),e(Bd,nNo),e(Bd,yie),e(yie,sNo),b(c,Kke,u),b(c,lr,u),g(gw,lr,null),e(lr,lNo),e(lr,xd),e(xd,iNo),e(xd,wie),e(wie,dNo),e(xd,cNo),e(xd,Aie),e(Aie,fNo),e(xd,mNo),e(lr,gNo),e(lr,hw),e(hw,hNo),e(hw,Lie),e(Lie,pNo),e(hw,_No),e(lr,uNo),e(lr,ot),g(pw,ot,null),e(ot,bNo),e(ot,Bie),e(Bie,vNo),e(ot,TNo),e(ot,kd),e(kd,FNo),e(kd,xie),e(xie,CNo),e(kd,MNo),e(kd,kie),e(kie,ENo),e(kd,yNo),e(ot,wNo),e(ot,Rie),e(Rie,ANo),e(ot,LNo),g(_w,ot,null),e(lr,BNo),e(lr,He),g(uw,He,null),e(He,xNo),e(He,Sie),e(Sie,kNo),e(He,RNo),e(He,on),e(on,SNo),e(on,Pie),e(Pie,PNo),e(on,$No),e(on,$ie),e($ie,INo),e(on,NNo),e(on,Iie),e(Iie,DNo),e(on,jNo),e(He,qNo),e(He,ce),e(ce,av),e(av,Nie),e(Nie,GNo),e(av,ONo),e(av,$j),e($j,XNo),e(av,VNo),e(ce,zNo),e(ce,nv),e(nv,Die),e(Die,WNo),e(nv,QNo),e(nv,Ij),e(Ij,HNo),e(nv,UNo),e(ce,JNo),e(ce,qs),e(qs,jie),e(jie,YNo),e(qs,KNo),e(qs,Nj),e(Nj,ZNo),e(qs,eDo),e(qs,Dj),e(Dj,oDo),e(qs,rDo),e(ce,tDo),e(ce,sv),e(sv,qie),e(qie,aDo),e(sv,nDo),e(sv,jj),e(jj,sDo),e(sv,lDo),e(ce,iDo),e(ce,ma),e(ma,Gie),e(Gie,dDo),e(ma,cDo),e(ma,qj),e(qj,fDo),e(ma,mDo),e(ma,Gj),e(Gj,gDo),e(ma,hDo),e(ma,Oj),e(Oj,pDo),e(ma,_Do),e(ce,uDo),e(ce,lv),e(lv,Oie),e(Oie,bDo),e(lv,vDo),e(lv,Xj),e(Xj,TDo),e(lv,FDo),e(ce,CDo),e(ce,iv),e(iv,Xie),e(Xie,MDo),e(iv,EDo),e(iv,Vj),e(Vj,yDo),e(iv,wDo),e(ce,ADo),e(ce,dv),e(dv,Vie),e(Vie,LDo),e(dv,BDo),e(dv,zj),e(zj,xDo),e(dv,kDo),e(ce,RDo),e(ce,cv),e(cv,zie),e(zie,SDo),e(cv,PDo),e(cv,Wj),e(Wj,$Do),e(cv,IDo),e(ce,NDo),e(ce,fv),e(fv,Wie),e(Wie,DDo),e(fv,jDo),e(fv,Qj),e(Qj,qDo),e(fv,GDo),e(ce,ODo),e(ce,mv),e(mv,Qie),e(Qie,XDo),e(mv,VDo),e(mv,Hj),e(Hj,zDo),e(mv,WDo),e(ce,QDo),e(ce,gv),e(gv,Hie),e(Hie,HDo),e(gv,UDo),e(gv,Uj),e(Uj,JDo),e(gv,YDo),e(He,KDo),e(He,hv),e(hv,ZDo),e(hv,Uie),e(Uie,ejo),e(hv,ojo),e(hv,Jie),e(Jie,rjo),e(He,tjo),e(He,Yie),e(Yie,ajo),e(He,njo),g(bw,He,null),b(c,Zke,u),b(c,Rd,u),e(Rd,pv),e(pv,Kie),g(vw,Kie,null),e(Rd,sjo),e(Rd,Zie),e(Zie,ljo),b(c,eRe,u),b(c,ir,u),g(Tw,ir,null),e(ir,ijo),e(ir,Sd),e(Sd,djo),e(Sd,ede),e(ede,cjo),e(Sd,fjo),e(Sd,ode),e(ode,mjo),e(Sd,gjo),e(ir,hjo),e(ir,Fw),e(Fw,pjo),e(Fw,rde),e(rde,_jo),e(Fw,ujo),e(ir,bjo),e(ir,rt),g(Cw,rt,null),e(rt,vjo),e(rt,tde),e(tde,Tjo),e(rt,Fjo),e(rt,Pd),e(Pd,Cjo),e(Pd,ade),e(ade,Mjo),e(Pd,Ejo),e(Pd,nde),e(nde,yjo),e(Pd,wjo),e(rt,Ajo),e(rt,sde),e(sde,Ljo),e(rt,Bjo),g(Mw,rt,null),e(ir,xjo),e(ir,Ue),g(Ew,Ue,null),e(Ue,kjo),e(Ue,lde),e(lde,Rjo),e(Ue,Sjo),e(Ue,rn),e(rn,Pjo),e(rn,ide),e(ide,$jo),e(rn,Ijo),e(rn,dde),e(dde,Njo),e(rn,Djo),e(rn,cde),e(cde,jjo),e(rn,qjo),e(Ue,Gjo),e(Ue,fde),e(fde,_v),e(_v,mde),e(mde,Ojo),e(_v,Xjo),e(_v,Jj),e(Jj,Vjo),e(_v,zjo),e(Ue,Wjo),e(Ue,uv),e(uv,Qjo),e(uv,gde),e(gde,Hjo),e(uv,Ujo),e(uv,hde),e(hde,Jjo),e(Ue,Yjo),e(Ue,pde),e(pde,Kjo),e(Ue,Zjo),g(yw,Ue,null),b(c,oRe,u),b(c,$d,u),e($d,bv),e(bv,_de),g(ww,_de,null),e($d,eqo),e($d,ude),e(ude,oqo),b(c,rRe,u),b(c,dr,u),g(Aw,dr,null),e(dr,rqo),e(dr,Id),e(Id,tqo),e(Id,bde),e(bde,aqo),e(Id,nqo),e(Id,vde),e(vde,sqo),e(Id,lqo),e(dr,iqo),e(dr,Lw),e(Lw,dqo),e(Lw,Tde),e(Tde,cqo),e(Lw,fqo),e(dr,mqo),e(dr,tt),g(Bw,tt,null),e(tt,gqo),e(tt,Fde),e(Fde,hqo),e(tt,pqo),e(tt,Nd),e(Nd,_qo),e(Nd,Cde),e(Cde,uqo),e(Nd,bqo),e(Nd,Mde),e(Mde,vqo),e(Nd,Tqo),e(tt,Fqo),e(tt,Ede),e(Ede,Cqo),e(tt,Mqo),g(xw,tt,null),e(dr,Eqo),e(dr,Je),g(kw,Je,null),e(Je,yqo),e(Je,yde),e(yde,wqo),e(Je,Aqo),e(Je,tn),e(tn,Lqo),e(tn,wde),e(wde,Bqo),e(tn,xqo),e(tn,Ade),e(Ade,kqo),e(tn,Rqo),e(tn,Lde),e(Lde,Sqo),e(tn,Pqo),e(Je,$qo),e(Je,ke),e(ke,vv),e(vv,Bde),e(Bde,Iqo),e(vv,Nqo),e(vv,Yj),e(Yj,Dqo),e(vv,jqo),e(ke,qqo),e(ke,Tv),e(Tv,xde),e(xde,Gqo),e(Tv,Oqo),e(Tv,Kj),e(Kj,Xqo),e(Tv,Vqo),e(ke,zqo),e(ke,Fv),e(Fv,kde),e(kde,Wqo),e(Fv,Qqo),e(Fv,Zj),e(Zj,Hqo),e(Fv,Uqo),e(ke,Jqo),e(ke,Cv),e(Cv,Rde),e(Rde,Yqo),e(Cv,Kqo),e(Cv,eq),e(eq,Zqo),e(Cv,eGo),e(ke,oGo),e(ke,Mv),e(Mv,Sde),e(Sde,rGo),e(Mv,tGo),e(Mv,oq),e(oq,aGo),e(Mv,nGo),e(ke,sGo),e(ke,Ev),e(Ev,Pde),e(Pde,lGo),e(Ev,iGo),e(Ev,rq),e(rq,dGo),e(Ev,cGo),e(ke,fGo),e(ke,yv),e(yv,$de),e($de,mGo),e(yv,gGo),e(yv,tq),e(tq,hGo),e(yv,pGo),e(ke,_Go),e(ke,wv),e(wv,Ide),e(Ide,uGo),e(wv,bGo),e(wv,aq),e(aq,vGo),e(wv,TGo),e(Je,FGo),e(Je,Av),e(Av,CGo),e(Av,Nde),e(Nde,MGo),e(Av,EGo),e(Av,Dde),e(Dde,yGo),e(Je,wGo),e(Je,jde),e(jde,AGo),e(Je,LGo),g(Rw,Je,null),b(c,tRe,u),b(c,Dd,u),e(Dd,Lv),e(Lv,qde),g(Sw,qde,null),e(Dd,BGo),e(Dd,Gde),e(Gde,xGo),b(c,aRe,u),b(c,cr,u),g(Pw,cr,null),e(cr,kGo),e(cr,jd),e(jd,RGo),e(jd,Ode),e(Ode,SGo),e(jd,PGo),e(jd,Xde),e(Xde,$Go),e(jd,IGo),e(cr,NGo),e(cr,$w),e($w,DGo),e($w,Vde),e(Vde,jGo),e($w,qGo),e(cr,GGo),e(cr,at),g(Iw,at,null),e(at,OGo),e(at,zde),e(zde,XGo),e(at,VGo),e(at,qd),e(qd,zGo),e(qd,Wde),e(Wde,WGo),e(qd,QGo),e(qd,Qde),e(Qde,HGo),e(qd,UGo),e(at,JGo),e(at,Hde),e(Hde,YGo),e(at,KGo),g(Nw,at,null),e(cr,ZGo),e(cr,Ye),g(Dw,Ye,null),e(Ye,eOo),e(Ye,Ude),e(Ude,oOo),e(Ye,rOo),e(Ye,an),e(an,tOo),e(an,Jde),e(Jde,aOo),e(an,nOo),e(an,Yde),e(Yde,sOo),e(an,lOo),e(an,Kde),e(Kde,iOo),e(an,dOo),e(Ye,cOo),e(Ye,nn),e(nn,Bv),e(Bv,Zde),e(Zde,fOo),e(Bv,mOo),e(Bv,nq),e(nq,gOo),e(Bv,hOo),e(nn,pOo),e(nn,xv),e(xv,ece),e(ece,_Oo),e(xv,uOo),e(xv,sq),e(sq,bOo),e(xv,vOo),e(nn,TOo),e(nn,kv),e(kv,oce),e(oce,FOo),e(kv,COo),e(kv,lq),e(lq,MOo),e(kv,EOo),e(nn,yOo),e(nn,Rv),e(Rv,rce),e(rce,wOo),e(Rv,AOo),e(Rv,iq),e(iq,LOo),e(Rv,BOo),e(Ye,xOo),e(Ye,Sv),e(Sv,kOo),e(Sv,tce),e(tce,ROo),e(Sv,SOo),e(Sv,ace),e(ace,POo),e(Ye,$Oo),e(Ye,nce),e(nce,IOo),e(Ye,NOo),g(jw,Ye,null),b(c,nRe,u),b(c,Gd,u),e(Gd,Pv),e(Pv,sce),g(qw,sce,null),e(Gd,DOo),e(Gd,lce),e(lce,jOo),b(c,sRe,u),b(c,fr,u),g(Gw,fr,null),e(fr,qOo),e(fr,Od),e(Od,GOo),e(Od,ice),e(ice,OOo),e(Od,XOo),e(Od,dce),e(dce,VOo),e(Od,zOo),e(fr,WOo),e(fr,Ow),e(Ow,QOo),e(Ow,cce),e(cce,HOo),e(Ow,UOo),e(fr,JOo),e(fr,nt),g(Xw,nt,null),e(nt,YOo),e(nt,fce),e(fce,KOo),e(nt,ZOo),e(nt,Xd),e(Xd,eXo),e(Xd,mce),e(mce,oXo),e(Xd,rXo),e(Xd,gce),e(gce,tXo),e(Xd,aXo),e(nt,nXo),e(nt,hce),e(hce,sXo),e(nt,lXo),g(Vw,nt,null),e(fr,iXo),e(fr,Ke),g(zw,Ke,null),e(Ke,dXo),e(Ke,pce),e(pce,cXo),e(Ke,fXo),e(Ke,sn),e(sn,mXo),e(sn,_ce),e(_ce,gXo),e(sn,hXo),e(sn,uce),e(uce,pXo),e(sn,_Xo),e(sn,bce),e(bce,uXo),e(sn,bXo),e(Ke,vXo),e(Ke,Re),e(Re,$v),e($v,vce),e(vce,TXo),e($v,FXo),e($v,dq),e(dq,CXo),e($v,MXo),e(Re,EXo),e(Re,Iv),e(Iv,Tce),e(Tce,yXo),e(Iv,wXo),e(Iv,cq),e(cq,AXo),e(Iv,LXo),e(Re,BXo),e(Re,Nv),e(Nv,Fce),e(Fce,xXo),e(Nv,kXo),e(Nv,fq),e(fq,RXo),e(Nv,SXo),e(Re,PXo),e(Re,Dv),e(Dv,Cce),e(Cce,$Xo),e(Dv,IXo),e(Dv,mq),e(mq,NXo),e(Dv,DXo),e(Re,jXo),e(Re,jv),e(jv,Mce),e(Mce,qXo),e(jv,GXo),e(jv,gq),e(gq,OXo),e(jv,XXo),e(Re,VXo),e(Re,qv),e(qv,Ece),e(Ece,zXo),e(qv,WXo),e(qv,hq),e(hq,QXo),e(qv,HXo),e(Re,UXo),e(Re,Gv),e(Gv,yce),e(yce,JXo),e(Gv,YXo),e(Gv,pq),e(pq,KXo),e(Gv,ZXo),e(Re,eVo),e(Re,Ov),e(Ov,wce),e(wce,oVo),e(Ov,rVo),e(Ov,_q),e(_q,tVo),e(Ov,aVo),e(Ke,nVo),e(Ke,Xv),e(Xv,sVo),e(Xv,Ace),e(Ace,lVo),e(Xv,iVo),e(Xv,Lce),e(Lce,dVo),e(Ke,cVo),e(Ke,Bce),e(Bce,fVo),e(Ke,mVo),g(Ww,Ke,null),b(c,lRe,u),b(c,Vd,u),e(Vd,Vv),e(Vv,xce),g(Qw,xce,null),e(Vd,gVo),e(Vd,kce),e(kce,hVo),b(c,iRe,u),b(c,mr,u),g(Hw,mr,null),e(mr,pVo),e(mr,zd),e(zd,_Vo),e(zd,Rce),e(Rce,uVo),e(zd,bVo),e(zd,Sce),e(Sce,vVo),e(zd,TVo),e(mr,FVo),e(mr,Uw),e(Uw,CVo),e(Uw,Pce),e(Pce,MVo),e(Uw,EVo),e(mr,yVo),e(mr,st),g(Jw,st,null),e(st,wVo),e(st,$ce),e($ce,AVo),e(st,LVo),e(st,Wd),e(Wd,BVo),e(Wd,Ice),e(Ice,xVo),e(Wd,kVo),e(Wd,Nce),e(Nce,RVo),e(Wd,SVo),e(st,PVo),e(st,Dce),e(Dce,$Vo),e(st,IVo),g(Yw,st,null),e(mr,NVo),e(mr,Ze),g(Kw,Ze,null),e(Ze,DVo),e(Ze,jce),e(jce,jVo),e(Ze,qVo),e(Ze,ln),e(ln,GVo),e(ln,qce),e(qce,OVo),e(ln,XVo),e(ln,Gce),e(Gce,VVo),e(ln,zVo),e(ln,Oce),e(Oce,WVo),e(ln,QVo),e(Ze,HVo),e(Ze,Zw),e(Zw,zv),e(zv,Xce),e(Xce,UVo),e(zv,JVo),e(zv,uq),e(uq,YVo),e(zv,KVo),e(Zw,ZVo),e(Zw,Wv),e(Wv,Vce),e(Vce,ezo),e(Wv,ozo),e(Wv,bq),e(bq,rzo),e(Wv,tzo),e(Ze,azo),e(Ze,Qv),e(Qv,nzo),e(Qv,zce),e(zce,szo),e(Qv,lzo),e(Qv,Wce),e(Wce,izo),e(Ze,dzo),e(Ze,Qce),e(Qce,czo),e(Ze,fzo),g(eA,Ze,null),b(c,dRe,u),b(c,Qd,u),e(Qd,Hv),e(Hv,Hce),g(oA,Hce,null),e(Qd,mzo),e(Qd,Uce),e(Uce,gzo),b(c,cRe,u),b(c,gr,u),g(rA,gr,null),e(gr,hzo),e(gr,Hd),e(Hd,pzo),e(Hd,Jce),e(Jce,_zo),e(Hd,uzo),e(Hd,Yce),e(Yce,bzo),e(Hd,vzo),e(gr,Tzo),e(gr,tA),e(tA,Fzo),e(tA,Kce),e(Kce,Czo),e(tA,Mzo),e(gr,Ezo),e(gr,lt),g(aA,lt,null),e(lt,yzo),e(lt,Zce),e(Zce,wzo),e(lt,Azo),e(lt,Ud),e(Ud,Lzo),e(Ud,efe),e(efe,Bzo),e(Ud,xzo),e(Ud,ofe),e(ofe,kzo),e(Ud,Rzo),e(lt,Szo),e(lt,rfe),e(rfe,Pzo),e(lt,$zo),g(nA,lt,null),e(gr,Izo),e(gr,eo),g(sA,eo,null),e(eo,Nzo),e(eo,tfe),e(tfe,Dzo),e(eo,jzo),e(eo,dn),e(dn,qzo),e(dn,afe),e(afe,Gzo),e(dn,Ozo),e(dn,nfe),e(nfe,Xzo),e(dn,Vzo),e(dn,sfe),e(sfe,zzo),e(dn,Wzo),e(eo,Qzo),e(eo,cn),e(cn,Uv),e(Uv,lfe),e(lfe,Hzo),e(Uv,Uzo),e(Uv,vq),e(vq,Jzo),e(Uv,Yzo),e(cn,Kzo),e(cn,Jv),e(Jv,ife),e(ife,Zzo),e(Jv,eWo),e(Jv,Tq),e(Tq,oWo),e(Jv,rWo),e(cn,tWo),e(cn,Yv),e(Yv,dfe),e(dfe,aWo),e(Yv,nWo),e(Yv,Fq),e(Fq,sWo),e(Yv,lWo),e(cn,iWo),e(cn,Kv),e(Kv,cfe),e(cfe,dWo),e(Kv,cWo),e(Kv,Cq),e(Cq,fWo),e(Kv,mWo),e(eo,gWo),e(eo,Zv),e(Zv,hWo),e(Zv,ffe),e(ffe,pWo),e(Zv,_Wo),e(Zv,mfe),e(mfe,uWo),e(eo,bWo),e(eo,gfe),e(gfe,vWo),e(eo,TWo),g(lA,eo,null),b(c,fRe,u),b(c,Jd,u),e(Jd,eT),e(eT,hfe),g(iA,hfe,null),e(Jd,FWo),e(Jd,pfe),e(pfe,CWo),b(c,mRe,u),b(c,hr,u),g(dA,hr,null),e(hr,MWo),e(hr,Yd),e(Yd,EWo),e(Yd,_fe),e(_fe,yWo),e(Yd,wWo),e(Yd,ufe),e(ufe,AWo),e(Yd,LWo),e(hr,BWo),e(hr,cA),e(cA,xWo),e(cA,bfe),e(bfe,kWo),e(cA,RWo),e(hr,SWo),e(hr,it),g(fA,it,null),e(it,PWo),e(it,vfe),e(vfe,$Wo),e(it,IWo),e(it,Kd),e(Kd,NWo),e(Kd,Tfe),e(Tfe,DWo),e(Kd,jWo),e(Kd,Ffe),e(Ffe,qWo),e(Kd,GWo),e(it,OWo),e(it,Cfe),e(Cfe,XWo),e(it,VWo),g(mA,it,null),e(hr,zWo),e(hr,oo),g(gA,oo,null),e(oo,WWo),e(oo,Mfe),e(Mfe,QWo),e(oo,HWo),e(oo,fn),e(fn,UWo),e(fn,Efe),e(Efe,JWo),e(fn,YWo),e(fn,yfe),e(yfe,KWo),e(fn,ZWo),e(fn,wfe),e(wfe,eQo),e(fn,oQo),e(oo,rQo),e(oo,Zd),e(Zd,oT),e(oT,Afe),e(Afe,tQo),e(oT,aQo),e(oT,Mq),e(Mq,nQo),e(oT,sQo),e(Zd,lQo),e(Zd,rT),e(rT,Lfe),e(Lfe,iQo),e(rT,dQo),e(rT,Eq),e(Eq,cQo),e(rT,fQo),e(Zd,mQo),e(Zd,tT),e(tT,Bfe),e(Bfe,gQo),e(tT,hQo),e(tT,yq),e(yq,pQo),e(tT,_Qo),e(oo,uQo),e(oo,aT),e(aT,bQo),e(aT,xfe),e(xfe,vQo),e(aT,TQo),e(aT,kfe),e(kfe,FQo),e(oo,CQo),e(oo,Rfe),e(Rfe,MQo),e(oo,EQo),g(hA,oo,null),b(c,gRe,u),b(c,ec,u),e(ec,nT),e(nT,Sfe),g(pA,Sfe,null),e(ec,yQo),e(ec,Pfe),e(Pfe,wQo),b(c,hRe,u),b(c,pr,u),g(_A,pr,null),e(pr,AQo),e(pr,oc),e(oc,LQo),e(oc,$fe),e($fe,BQo),e(oc,xQo),e(oc,Ife),e(Ife,kQo),e(oc,RQo),e(pr,SQo),e(pr,uA),e(uA,PQo),e(uA,Nfe),e(Nfe,$Qo),e(uA,IQo),e(pr,NQo),e(pr,dt),g(bA,dt,null),e(dt,DQo),e(dt,Dfe),e(Dfe,jQo),e(dt,qQo),e(dt,rc),e(rc,GQo),e(rc,jfe),e(jfe,OQo),e(rc,XQo),e(rc,qfe),e(qfe,VQo),e(rc,zQo),e(dt,WQo),e(dt,Gfe),e(Gfe,QQo),e(dt,HQo),g(vA,dt,null),e(pr,UQo),e(pr,ro),g(TA,ro,null),e(ro,JQo),e(ro,Ofe),e(Ofe,YQo),e(ro,KQo),e(ro,mn),e(mn,ZQo),e(mn,Xfe),e(Xfe,eHo),e(mn,oHo),e(mn,Vfe),e(Vfe,rHo),e(mn,tHo),e(mn,zfe),e(zfe,aHo),e(mn,nHo),e(ro,sHo),e(ro,Wfe),e(Wfe,sT),e(sT,Qfe),e(Qfe,lHo),e(sT,iHo),e(sT,wq),e(wq,dHo),e(sT,cHo),e(ro,fHo),e(ro,lT),e(lT,mHo),e(lT,Hfe),e(Hfe,gHo),e(lT,hHo),e(lT,Ufe),e(Ufe,pHo),e(ro,_Ho),e(ro,Jfe),e(Jfe,uHo),e(ro,bHo),g(FA,ro,null),b(c,pRe,u),b(c,tc,u),e(tc,iT),e(iT,Yfe),g(CA,Yfe,null),e(tc,vHo),e(tc,Kfe),e(Kfe,THo),b(c,_Re,u),b(c,_r,u),g(MA,_r,null),e(_r,FHo),e(_r,ac),e(ac,CHo),e(ac,Zfe),e(Zfe,MHo),e(ac,EHo),e(ac,eme),e(eme,yHo),e(ac,wHo),e(_r,AHo),e(_r,EA),e(EA,LHo),e(EA,ome),e(ome,BHo),e(EA,xHo),e(_r,kHo),e(_r,ct),g(yA,ct,null),e(ct,RHo),e(ct,rme),e(rme,SHo),e(ct,PHo),e(ct,nc),e(nc,$Ho),e(nc,tme),e(tme,IHo),e(nc,NHo),e(nc,ame),e(ame,DHo),e(nc,jHo),e(ct,qHo),e(ct,nme),e(nme,GHo),e(ct,OHo),g(wA,ct,null),e(_r,XHo),e(_r,to),g(AA,to,null),e(to,VHo),e(to,sme),e(sme,zHo),e(to,WHo),e(to,gn),e(gn,QHo),e(gn,lme),e(lme,HHo),e(gn,UHo),e(gn,ime),e(ime,JHo),e(gn,YHo),e(gn,dme),e(dme,KHo),e(gn,ZHo),e(to,eUo),e(to,cme),e(cme,dT),e(dT,fme),e(fme,oUo),e(dT,rUo),e(dT,Aq),e(Aq,tUo),e(dT,aUo),e(to,nUo),e(to,cT),e(cT,sUo),e(cT,mme),e(mme,lUo),e(cT,iUo),e(cT,gme),e(gme,dUo),e(to,cUo),e(to,hme),e(hme,fUo),e(to,mUo),g(LA,to,null),b(c,uRe,u),b(c,sc,u),e(sc,fT),e(fT,pme),g(BA,pme,null),e(sc,gUo),e(sc,_me),e(_me,hUo),b(c,bRe,u),b(c,ur,u),g(xA,ur,null),e(ur,pUo),e(ur,lc),e(lc,_Uo),e(lc,ume),e(ume,uUo),e(lc,bUo),e(lc,bme),e(bme,vUo),e(lc,TUo),e(ur,FUo),e(ur,kA),e(kA,CUo),e(kA,vme),e(vme,MUo),e(kA,EUo),e(ur,yUo),e(ur,ft),g(RA,ft,null),e(ft,wUo),e(ft,Tme),e(Tme,AUo),e(ft,LUo),e(ft,ic),e(ic,BUo),e(ic,Fme),e(Fme,xUo),e(ic,kUo),e(ic,Cme),e(Cme,RUo),e(ic,SUo),e(ft,PUo),e(ft,Mme),e(Mme,$Uo),e(ft,IUo),g(SA,ft,null),e(ur,NUo),e(ur,ao),g(PA,ao,null),e(ao,DUo),e(ao,Eme),e(Eme,jUo),e(ao,qUo),e(ao,hn),e(hn,GUo),e(hn,yme),e(yme,OUo),e(hn,XUo),e(hn,wme),e(wme,VUo),e(hn,zUo),e(hn,Ame),e(Ame,WUo),e(hn,QUo),e(ao,HUo),e(ao,$A),e($A,mT),e(mT,Lme),e(Lme,UUo),e(mT,JUo),e(mT,Lq),e(Lq,YUo),e(mT,KUo),e($A,ZUo),e($A,gT),e(gT,Bme),e(Bme,eJo),e(gT,oJo),e(gT,Bq),e(Bq,rJo),e(gT,tJo),e(ao,aJo),e(ao,hT),e(hT,nJo),e(hT,xme),e(xme,sJo),e(hT,lJo),e(hT,kme),e(kme,iJo),e(ao,dJo),e(ao,Rme),e(Rme,cJo),e(ao,fJo),g(IA,ao,null),b(c,vRe,u),b(c,dc,u),e(dc,pT),e(pT,Sme),g(NA,Sme,null),e(dc,mJo),e(dc,Pme),e(Pme,gJo),b(c,TRe,u),b(c,br,u),g(DA,br,null),e(br,hJo),e(br,cc),e(cc,pJo),e(cc,$me),e($me,_Jo),e(cc,uJo),e(cc,Ime),e(Ime,bJo),e(cc,vJo),e(br,TJo),e(br,jA),e(jA,FJo),e(jA,Nme),e(Nme,CJo),e(jA,MJo),e(br,EJo),e(br,mt),g(qA,mt,null),e(mt,yJo),e(mt,Dme),e(Dme,wJo),e(mt,AJo),e(mt,fc),e(fc,LJo),e(fc,jme),e(jme,BJo),e(fc,xJo),e(fc,qme),e(qme,kJo),e(fc,RJo),e(mt,SJo),e(mt,Gme),e(Gme,PJo),e(mt,$Jo),g(GA,mt,null),e(br,IJo),e(br,no),g(OA,no,null),e(no,NJo),e(no,Ome),e(Ome,DJo),e(no,jJo),e(no,pn),e(pn,qJo),e(pn,Xme),e(Xme,GJo),e(pn,OJo),e(pn,Vme),e(Vme,XJo),e(pn,VJo),e(pn,zme),e(zme,zJo),e(pn,WJo),e(no,QJo),e(no,Wme),e(Wme,_T),e(_T,Qme),e(Qme,HJo),e(_T,UJo),e(_T,xq),e(xq,JJo),e(_T,YJo),e(no,KJo),e(no,uT),e(uT,ZJo),e(uT,Hme),e(Hme,eYo),e(uT,oYo),e(uT,Ume),e(Ume,rYo),e(no,tYo),e(no,Jme),e(Jme,aYo),e(no,nYo),g(XA,no,null),b(c,FRe,u),b(c,mc,u),e(mc,bT),e(bT,Yme),g(VA,Yme,null),e(mc,sYo),e(mc,Kme),e(Kme,lYo),b(c,CRe,u),b(c,vr,u),g(zA,vr,null),e(vr,iYo),e(vr,gc),e(gc,dYo),e(gc,Zme),e(Zme,cYo),e(gc,fYo),e(gc,ege),e(ege,mYo),e(gc,gYo),e(vr,hYo),e(vr,WA),e(WA,pYo),e(WA,oge),e(oge,_Yo),e(WA,uYo),e(vr,bYo),e(vr,gt),g(QA,gt,null),e(gt,vYo),e(gt,rge),e(rge,TYo),e(gt,FYo),e(gt,hc),e(hc,CYo),e(hc,tge),e(tge,MYo),e(hc,EYo),e(hc,age),e(age,yYo),e(hc,wYo),e(gt,AYo),e(gt,nge),e(nge,LYo),e(gt,BYo),g(HA,gt,null),e(vr,xYo),e(vr,ho),g(UA,ho,null),e(ho,kYo),e(ho,sge),e(sge,RYo),e(ho,SYo),e(ho,_n),e(_n,PYo),e(_n,lge),e(lge,$Yo),e(_n,IYo),e(_n,ige),e(ige,NYo),e(_n,DYo),e(_n,dge),e(dge,jYo),e(_n,qYo),e(ho,GYo),e(ho,B),e(B,vT),e(vT,cge),e(cge,OYo),e(vT,XYo),e(vT,kq),e(kq,VYo),e(vT,zYo),e(B,WYo),e(B,TT),e(TT,fge),e(fge,QYo),e(TT,HYo),e(TT,Rq),e(Rq,UYo),e(TT,JYo),e(B,YYo),e(B,FT),e(FT,mge),e(mge,KYo),e(FT,ZYo),e(FT,Sq),e(Sq,eKo),e(FT,oKo),e(B,rKo),e(B,CT),e(CT,gge),e(gge,tKo),e(CT,aKo),e(CT,Pq),e(Pq,nKo),e(CT,sKo),e(B,lKo),e(B,MT),e(MT,hge),e(hge,iKo),e(MT,dKo),e(MT,$q),e($q,cKo),e(MT,fKo),e(B,mKo),e(B,ET),e(ET,pge),e(pge,gKo),e(ET,hKo),e(ET,Iq),e(Iq,pKo),e(ET,_Ko),e(B,uKo),e(B,yT),e(yT,_ge),e(_ge,bKo),e(yT,vKo),e(yT,Nq),e(Nq,TKo),e(yT,FKo),e(B,CKo),e(B,wT),e(wT,uge),e(uge,MKo),e(wT,EKo),e(wT,Dq),e(Dq,yKo),e(wT,wKo),e(B,AKo),e(B,AT),e(AT,bge),e(bge,LKo),e(AT,BKo),e(AT,jq),e(jq,xKo),e(AT,kKo),e(B,RKo),e(B,LT),e(LT,vge),e(vge,SKo),e(LT,PKo),e(LT,qq),e(qq,$Ko),e(LT,IKo),e(B,NKo),e(B,BT),e(BT,Tge),e(Tge,DKo),e(BT,jKo),e(BT,Gq),e(Gq,qKo),e(BT,GKo),e(B,OKo),e(B,xT),e(xT,Fge),e(Fge,XKo),e(xT,VKo),e(xT,Oq),e(Oq,zKo),e(xT,WKo),e(B,QKo),e(B,kT),e(kT,Cge),e(Cge,HKo),e(kT,UKo),e(kT,Xq),e(Xq,JKo),e(kT,YKo),e(B,KKo),e(B,RT),e(RT,Mge),e(Mge,ZKo),e(RT,eZo),e(RT,Vq),e(Vq,oZo),e(RT,rZo),e(B,tZo),e(B,ST),e(ST,Ege),e(Ege,aZo),e(ST,nZo),e(ST,zq),e(zq,sZo),e(ST,lZo),e(B,iZo),e(B,PT),e(PT,yge),e(yge,dZo),e(PT,cZo),e(PT,Wq),e(Wq,fZo),e(PT,mZo),e(B,gZo),e(B,Gs),e(Gs,wge),e(wge,hZo),e(Gs,pZo),e(Gs,Qq),e(Qq,_Zo),e(Gs,uZo),e(Gs,Hq),e(Hq,bZo),e(Gs,vZo),e(B,TZo),e(B,$T),e($T,Age),e(Age,FZo),e($T,CZo),e($T,Uq),e(Uq,MZo),e($T,EZo),e(B,yZo),e(B,IT),e(IT,Lge),e(Lge,wZo),e(IT,AZo),e(IT,Jq),e(Jq,LZo),e(IT,BZo),e(B,xZo),e(B,NT),e(NT,Bge),e(Bge,kZo),e(NT,RZo),e(NT,Yq),e(Yq,SZo),e(NT,PZo),e(B,$Zo),e(B,DT),e(DT,xge),e(xge,IZo),e(DT,NZo),e(DT,Kq),e(Kq,DZo),e(DT,jZo),e(B,qZo),e(B,jT),e(jT,kge),e(kge,GZo),e(jT,OZo),e(jT,Zq),e(Zq,XZo),e(jT,VZo),e(B,zZo),e(B,qT),e(qT,Rge),e(Rge,WZo),e(qT,QZo),e(qT,eG),e(eG,HZo),e(qT,UZo),e(B,JZo),e(B,GT),e(GT,Sge),e(Sge,YZo),e(GT,KZo),e(GT,oG),e(oG,ZZo),e(GT,eer),e(B,oer),e(B,OT),e(OT,Pge),e(Pge,rer),e(OT,ter),e(OT,rG),e(rG,aer),e(OT,ner),e(B,ser),e(B,XT),e(XT,$ge),e($ge,ler),e(XT,ier),e(XT,tG),e(tG,der),e(XT,cer),e(B,fer),e(B,VT),e(VT,Ige),e(Ige,mer),e(VT,ger),e(VT,aG),e(aG,her),e(VT,per),e(B,_er),e(B,zT),e(zT,Nge),e(Nge,uer),e(zT,ber),e(zT,nG),e(nG,ver),e(zT,Ter),e(B,Fer),e(B,WT),e(WT,Dge),e(Dge,Cer),e(WT,Mer),e(WT,sG),e(sG,Eer),e(WT,yer),e(B,wer),e(B,QT),e(QT,jge),e(jge,Aer),e(QT,Ler),e(QT,lG),e(lG,Ber),e(QT,xer),e(B,ker),e(B,HT),e(HT,qge),e(qge,Rer),e(HT,Ser),e(HT,iG),e(iG,Per),e(HT,$er),e(B,Ier),e(B,UT),e(UT,Gge),e(Gge,Ner),e(UT,Der),e(UT,dG),e(dG,jer),e(UT,qer),e(B,Ger),e(B,JT),e(JT,Oge),e(Oge,Oer),e(JT,Xer),e(JT,cG),e(cG,Ver),e(JT,zer),e(B,Wer),e(B,YT),e(YT,Xge),e(Xge,Qer),e(YT,Her),e(YT,fG),e(fG,Uer),e(YT,Jer),e(B,Yer),e(B,KT),e(KT,Vge),e(Vge,Ker),e(KT,Zer),e(KT,mG),e(mG,eor),e(KT,oor),e(B,ror),e(B,ZT),e(ZT,zge),e(zge,tor),e(ZT,aor),e(ZT,gG),e(gG,nor),e(ZT,sor),e(B,lor),e(B,eF),e(eF,Wge),e(Wge,ior),e(eF,dor),e(eF,hG),e(hG,cor),e(eF,mor),e(B,gor),e(B,oF),e(oF,Qge),e(Qge,hor),e(oF,por),e(oF,pG),e(pG,_or),e(oF,uor),e(B,bor),e(B,rF),e(rF,Hge),e(Hge,vor),e(rF,Tor),e(rF,_G),e(_G,For),e(rF,Cor),e(B,Mor),e(B,tF),e(tF,Uge),e(Uge,Eor),e(tF,yor),e(tF,uG),e(uG,wor),e(tF,Aor),e(B,Lor),e(B,aF),e(aF,Jge),e(Jge,Bor),e(aF,xor),e(aF,bG),e(bG,kor),e(aF,Ror),e(B,Sor),e(B,nF),e(nF,Yge),e(Yge,Por),e(nF,$or),e(nF,vG),e(vG,Ior),e(nF,Nor),e(ho,Dor),e(ho,Kge),e(Kge,jor),e(ho,qor),g(JA,ho,null),b(c,MRe,u),b(c,pc,u),e(pc,sF),e(sF,Zge),g(YA,Zge,null),e(pc,Gor),e(pc,ehe),e(ehe,Oor),b(c,ERe,u),b(c,Tr,u),g(KA,Tr,null),e(Tr,Xor),e(Tr,_c),e(_c,Vor),e(_c,ohe),e(ohe,zor),e(_c,Wor),e(_c,rhe),e(rhe,Qor),e(_c,Hor),e(Tr,Uor),e(Tr,ZA),e(ZA,Jor),e(ZA,the),e(the,Yor),e(ZA,Kor),e(Tr,Zor),e(Tr,ht),g(e0,ht,null),e(ht,err),e(ht,ahe),e(ahe,orr),e(ht,rrr),e(ht,uc),e(uc,trr),e(uc,nhe),e(nhe,arr),e(uc,nrr),e(uc,she),e(she,srr),e(uc,lrr),e(ht,irr),e(ht,lhe),e(lhe,drr),e(ht,crr),g(o0,ht,null),e(Tr,frr),e(Tr,po),g(r0,po,null),e(po,mrr),e(po,ihe),e(ihe,grr),e(po,hrr),e(po,un),e(un,prr),e(un,dhe),e(dhe,_rr),e(un,urr),e(un,che),e(che,brr),e(un,vrr),e(un,fhe),e(fhe,Trr),e(un,Frr),e(po,Crr),e(po,H),e(H,lF),e(lF,mhe),e(mhe,Mrr),e(lF,Err),e(lF,TG),e(TG,yrr),e(lF,wrr),e(H,Arr),e(H,iF),e(iF,ghe),e(ghe,Lrr),e(iF,Brr),e(iF,FG),e(FG,xrr),e(iF,krr),e(H,Rrr),e(H,dF),e(dF,hhe),e(hhe,Srr),e(dF,Prr),e(dF,CG),e(CG,$rr),e(dF,Irr),e(H,Nrr),e(H,cF),e(cF,phe),e(phe,Drr),e(cF,jrr),e(cF,MG),e(MG,qrr),e(cF,Grr),e(H,Orr),e(H,fF),e(fF,_he),e(_he,Xrr),e(fF,Vrr),e(fF,EG),e(EG,zrr),e(fF,Wrr),e(H,Qrr),e(H,mF),e(mF,uhe),e(uhe,Hrr),e(mF,Urr),e(mF,yG),e(yG,Jrr),e(mF,Yrr),e(H,Krr),e(H,gF),e(gF,bhe),e(bhe,Zrr),e(gF,etr),e(gF,wG),e(wG,otr),e(gF,rtr),e(H,ttr),e(H,hF),e(hF,vhe),e(vhe,atr),e(hF,ntr),e(hF,AG),e(AG,str),e(hF,ltr),e(H,itr),e(H,pF),e(pF,The),e(The,dtr),e(pF,ctr),e(pF,LG),e(LG,ftr),e(pF,mtr),e(H,gtr),e(H,_F),e(_F,Fhe),e(Fhe,htr),e(_F,ptr),e(_F,BG),e(BG,_tr),e(_F,utr),e(H,btr),e(H,uF),e(uF,Che),e(Che,vtr),e(uF,Ttr),e(uF,xG),e(xG,Ftr),e(uF,Ctr),e(H,Mtr),e(H,bF),e(bF,Mhe),e(Mhe,Etr),e(bF,ytr),e(bF,kG),e(kG,wtr),e(bF,Atr),e(H,Ltr),e(H,vF),e(vF,Ehe),e(Ehe,Btr),e(vF,xtr),e(vF,RG),e(RG,ktr),e(vF,Rtr),e(H,Str),e(H,TF),e(TF,yhe),e(yhe,Ptr),e(TF,$tr),e(TF,SG),e(SG,Itr),e(TF,Ntr),e(H,Dtr),e(H,FF),e(FF,whe),e(whe,jtr),e(FF,qtr),e(FF,PG),e(PG,Gtr),e(FF,Otr),e(H,Xtr),e(H,CF),e(CF,Ahe),e(Ahe,Vtr),e(CF,ztr),e(CF,$G),e($G,Wtr),e(CF,Qtr),e(H,Htr),e(H,MF),e(MF,Lhe),e(Lhe,Utr),e(MF,Jtr),e(MF,IG),e(IG,Ytr),e(MF,Ktr),e(H,Ztr),e(H,EF),e(EF,Bhe),e(Bhe,ear),e(EF,oar),e(EF,NG),e(NG,rar),e(EF,tar),e(H,aar),e(H,yF),e(yF,xhe),e(xhe,nar),e(yF,sar),e(yF,DG),e(DG,lar),e(yF,iar),e(H,dar),e(H,wF),e(wF,khe),e(khe,car),e(wF,far),e(wF,jG),e(jG,mar),e(wF,gar),e(H,har),e(H,AF),e(AF,Rhe),e(Rhe,par),e(AF,_ar),e(AF,qG),e(qG,uar),e(AF,bar),e(H,Tar),e(H,LF),e(LF,She),e(She,Far),e(LF,Car),e(LF,GG),e(GG,Mar),e(LF,Ear),e(po,yar),e(po,Phe),e(Phe,war),e(po,Aar),g(t0,po,null),b(c,yRe,u),b(c,bc,u),e(bc,BF),e(BF,$he),g(a0,$he,null),e(bc,Lar),e(bc,Ihe),e(Ihe,Bar),b(c,wRe,u),b(c,Fr,u),g(n0,Fr,null),e(Fr,xar),e(Fr,vc),e(vc,kar),e(vc,Nhe),e(Nhe,Rar),e(vc,Sar),e(vc,Dhe),e(Dhe,Par),e(vc,$ar),e(Fr,Iar),e(Fr,s0),e(s0,Nar),e(s0,jhe),e(jhe,Dar),e(s0,jar),e(Fr,qar),e(Fr,pt),g(l0,pt,null),e(pt,Gar),e(pt,qhe),e(qhe,Oar),e(pt,Xar),e(pt,Tc),e(Tc,Var),e(Tc,Ghe),e(Ghe,zar),e(Tc,War),e(Tc,Ohe),e(Ohe,Qar),e(Tc,Har),e(pt,Uar),e(pt,Xhe),e(Xhe,Jar),e(pt,Yar),g(i0,pt,null),e(Fr,Kar),e(Fr,_o),g(d0,_o,null),e(_o,Zar),e(_o,Vhe),e(Vhe,enr),e(_o,onr),e(_o,bn),e(bn,rnr),e(bn,zhe),e(zhe,tnr),e(bn,anr),e(bn,Whe),e(Whe,nnr),e(bn,snr),e(bn,Qhe),e(Qhe,lnr),e(bn,inr),e(_o,dnr),e(_o,ge),e(ge,xF),e(xF,Hhe),e(Hhe,cnr),e(xF,fnr),e(xF,OG),e(OG,mnr),e(xF,gnr),e(ge,hnr),e(ge,kF),e(kF,Uhe),e(Uhe,pnr),e(kF,_nr),e(kF,XG),e(XG,unr),e(kF,bnr),e(ge,vnr),e(ge,RF),e(RF,Jhe),e(Jhe,Tnr),e(RF,Fnr),e(RF,VG),e(VG,Cnr),e(RF,Mnr),e(ge,Enr),e(ge,SF),e(SF,Yhe),e(Yhe,ynr),e(SF,wnr),e(SF,zG),e(zG,Anr),e(SF,Lnr),e(ge,Bnr),e(ge,PF),e(PF,Khe),e(Khe,xnr),e(PF,knr),e(PF,WG),e(WG,Rnr),e(PF,Snr),e(ge,Pnr),e(ge,$F),e($F,Zhe),e(Zhe,$nr),e($F,Inr),e($F,QG),e(QG,Nnr),e($F,Dnr),e(ge,jnr),e(ge,IF),e(IF,epe),e(epe,qnr),e(IF,Gnr),e(IF,HG),e(HG,Onr),e(IF,Xnr),e(ge,Vnr),e(ge,NF),e(NF,ope),e(ope,znr),e(NF,Wnr),e(NF,UG),e(UG,Qnr),e(NF,Hnr),e(ge,Unr),e(ge,DF),e(DF,rpe),e(rpe,Jnr),e(DF,Ynr),e(DF,JG),e(JG,Knr),e(DF,Znr),e(ge,esr),e(ge,jF),e(jF,tpe),e(tpe,osr),e(jF,rsr),e(jF,YG),e(YG,tsr),e(jF,asr),e(ge,nsr),e(ge,qF),e(qF,ape),e(ape,ssr),e(qF,lsr),e(qF,KG),e(KG,isr),e(qF,dsr),e(_o,csr),e(_o,npe),e(npe,fsr),e(_o,msr),g(c0,_o,null),b(c,ARe,u),b(c,Fc,u),e(Fc,GF),e(GF,spe),g(f0,spe,null),e(Fc,gsr),e(Fc,lpe),e(lpe,hsr),b(c,LRe,u),b(c,Cr,u),g(m0,Cr,null),e(Cr,psr),e(Cr,Cc),e(Cc,_sr),e(Cc,ipe),e(ipe,usr),e(Cc,bsr),e(Cc,dpe),e(dpe,vsr),e(Cc,Tsr),e(Cr,Fsr),e(Cr,g0),e(g0,Csr),e(g0,cpe),e(cpe,Msr),e(g0,Esr),e(Cr,ysr),e(Cr,_t),g(h0,_t,null),e(_t,wsr),e(_t,fpe),e(fpe,Asr),e(_t,Lsr),e(_t,Mc),e(Mc,Bsr),e(Mc,mpe),e(mpe,xsr),e(Mc,ksr),e(Mc,gpe),e(gpe,Rsr),e(Mc,Ssr),e(_t,Psr),e(_t,hpe),e(hpe,$sr),e(_t,Isr),g(p0,_t,null),e(Cr,Nsr),e(Cr,uo),g(_0,uo,null),e(uo,Dsr),e(uo,ppe),e(ppe,jsr),e(uo,qsr),e(uo,vn),e(vn,Gsr),e(vn,_pe),e(_pe,Osr),e(vn,Xsr),e(vn,upe),e(upe,Vsr),e(vn,zsr),e(vn,bpe),e(bpe,Wsr),e(vn,Qsr),e(uo,Hsr),e(uo,u0),e(u0,OF),e(OF,vpe),e(vpe,Usr),e(OF,Jsr),e(OF,ZG),e(ZG,Ysr),e(OF,Ksr),e(u0,Zsr),e(u0,XF),e(XF,Tpe),e(Tpe,elr),e(XF,olr),e(XF,eO),e(eO,rlr),e(XF,tlr),e(uo,alr),e(uo,Fpe),e(Fpe,nlr),e(uo,slr),g(b0,uo,null),b(c,BRe,u),b(c,Ec,u),e(Ec,VF),e(VF,Cpe),g(v0,Cpe,null),e(Ec,llr),e(Ec,Mpe),e(Mpe,ilr),b(c,xRe,u),b(c,Mr,u),g(T0,Mr,null),e(Mr,dlr),e(Mr,yc),e(yc,clr),e(yc,Epe),e(Epe,flr),e(yc,mlr),e(yc,ype),e(ype,glr),e(yc,hlr),e(Mr,plr),e(Mr,F0),e(F0,_lr),e(F0,wpe),e(wpe,ulr),e(F0,blr),e(Mr,vlr),e(Mr,ut),g(C0,ut,null),e(ut,Tlr),e(ut,Ape),e(Ape,Flr),e(ut,Clr),e(ut,wc),e(wc,Mlr),e(wc,Lpe),e(Lpe,Elr),e(wc,ylr),e(wc,Bpe),e(Bpe,wlr),e(wc,Alr),e(ut,Llr),e(ut,xpe),e(xpe,Blr),e(ut,xlr),g(M0,ut,null),e(Mr,klr),e(Mr,bo),g(E0,bo,null),e(bo,Rlr),e(bo,kpe),e(kpe,Slr),e(bo,Plr),e(bo,Tn),e(Tn,$lr),e(Tn,Rpe),e(Rpe,Ilr),e(Tn,Nlr),e(Tn,Spe),e(Spe,Dlr),e(Tn,jlr),e(Tn,Ppe),e(Ppe,qlr),e(Tn,Glr),e(bo,Olr),e(bo,J),e(J,zF),e(zF,$pe),e($pe,Xlr),e(zF,Vlr),e(zF,oO),e(oO,zlr),e(zF,Wlr),e(J,Qlr),e(J,WF),e(WF,Ipe),e(Ipe,Hlr),e(WF,Ulr),e(WF,rO),e(rO,Jlr),e(WF,Ylr),e(J,Klr),e(J,QF),e(QF,Npe),e(Npe,Zlr),e(QF,eir),e(QF,tO),e(tO,oir),e(QF,rir),e(J,tir),e(J,HF),e(HF,Dpe),e(Dpe,air),e(HF,nir),e(HF,aO),e(aO,sir),e(HF,lir),e(J,iir),e(J,UF),e(UF,jpe),e(jpe,dir),e(UF,cir),e(UF,nO),e(nO,fir),e(UF,mir),e(J,gir),e(J,JF),e(JF,qpe),e(qpe,hir),e(JF,pir),e(JF,sO),e(sO,_ir),e(JF,uir),e(J,bir),e(J,YF),e(YF,Gpe),e(Gpe,vir),e(YF,Tir),e(YF,lO),e(lO,Fir),e(YF,Cir),e(J,Mir),e(J,KF),e(KF,Ope),e(Ope,Eir),e(KF,yir),e(KF,iO),e(iO,wir),e(KF,Air),e(J,Lir),e(J,ZF),e(ZF,Xpe),e(Xpe,Bir),e(ZF,xir),e(ZF,dO),e(dO,kir),e(ZF,Rir),e(J,Sir),e(J,eC),e(eC,Vpe),e(Vpe,Pir),e(eC,$ir),e(eC,cO),e(cO,Iir),e(eC,Nir),e(J,Dir),e(J,oC),e(oC,zpe),e(zpe,jir),e(oC,qir),e(oC,fO),e(fO,Gir),e(oC,Oir),e(J,Xir),e(J,rC),e(rC,Wpe),e(Wpe,Vir),e(rC,zir),e(rC,mO),e(mO,Wir),e(rC,Qir),e(J,Hir),e(J,tC),e(tC,Qpe),e(Qpe,Uir),e(tC,Jir),e(tC,gO),e(gO,Yir),e(tC,Kir),e(J,Zir),e(J,aC),e(aC,Hpe),e(Hpe,edr),e(aC,odr),e(aC,hO),e(hO,rdr),e(aC,tdr),e(J,adr),e(J,nC),e(nC,Upe),e(Upe,ndr),e(nC,sdr),e(nC,pO),e(pO,ldr),e(nC,idr),e(J,ddr),e(J,sC),e(sC,Jpe),e(Jpe,cdr),e(sC,fdr),e(sC,_O),e(_O,mdr),e(sC,gdr),e(J,hdr),e(J,lC),e(lC,Ype),e(Ype,pdr),e(lC,_dr),e(lC,uO),e(uO,udr),e(lC,bdr),e(J,vdr),e(J,iC),e(iC,Kpe),e(Kpe,Tdr),e(iC,Fdr),e(iC,bO),e(bO,Cdr),e(iC,Mdr),e(J,Edr),e(J,dC),e(dC,Zpe),e(Zpe,ydr),e(dC,wdr),e(dC,vO),e(vO,Adr),e(dC,Ldr),e(J,Bdr),e(J,cC),e(cC,e_e),e(e_e,xdr),e(cC,kdr),e(cC,TO),e(TO,Rdr),e(cC,Sdr),e(bo,Pdr),e(bo,o_e),e(o_e,$dr),e(bo,Idr),g(y0,bo,null),b(c,kRe,u),b(c,Ac,u),e(Ac,fC),e(fC,r_e),g(w0,r_e,null),e(Ac,Ndr),e(Ac,t_e),e(t_e,Ddr),b(c,RRe,u),b(c,Er,u),g(A0,Er,null),e(Er,jdr),e(Er,Lc),e(Lc,qdr),e(Lc,a_e),e(a_e,Gdr),e(Lc,Odr),e(Lc,n_e),e(n_e,Xdr),e(Lc,Vdr),e(Er,zdr),e(Er,L0),e(L0,Wdr),e(L0,s_e),e(s_e,Qdr),e(L0,Hdr),e(Er,Udr),e(Er,bt),g(B0,bt,null),e(bt,Jdr),e(bt,l_e),e(l_e,Ydr),e(bt,Kdr),e(bt,Bc),e(Bc,Zdr),e(Bc,i_e),e(i_e,ecr),e(Bc,ocr),e(Bc,d_e),e(d_e,rcr),e(Bc,tcr),e(bt,acr),e(bt,c_e),e(c_e,ncr),e(bt,scr),g(x0,bt,null),e(Er,lcr),e(Er,vo),g(k0,vo,null),e(vo,icr),e(vo,f_e),e(f_e,dcr),e(vo,ccr),e(vo,Fn),e(Fn,fcr),e(Fn,m_e),e(m_e,mcr),e(Fn,gcr),e(Fn,g_e),e(g_e,hcr),e(Fn,pcr),e(Fn,h_e),e(h_e,_cr),e(Fn,ucr),e(vo,bcr),e(vo,ue),e(ue,mC),e(mC,p_e),e(p_e,vcr),e(mC,Tcr),e(mC,FO),e(FO,Fcr),e(mC,Ccr),e(ue,Mcr),e(ue,gC),e(gC,__e),e(__e,Ecr),e(gC,ycr),e(gC,CO),e(CO,wcr),e(gC,Acr),e(ue,Lcr),e(ue,hC),e(hC,u_e),e(u_e,Bcr),e(hC,xcr),e(hC,MO),e(MO,kcr),e(hC,Rcr),e(ue,Scr),e(ue,pC),e(pC,b_e),e(b_e,Pcr),e(pC,$cr),e(pC,EO),e(EO,Icr),e(pC,Ncr),e(ue,Dcr),e(ue,_C),e(_C,v_e),e(v_e,jcr),e(_C,qcr),e(_C,yO),e(yO,Gcr),e(_C,Ocr),e(ue,Xcr),e(ue,uC),e(uC,T_e),e(T_e,Vcr),e(uC,zcr),e(uC,wO),e(wO,Wcr),e(uC,Qcr),e(ue,Hcr),e(ue,bC),e(bC,F_e),e(F_e,Ucr),e(bC,Jcr),e(bC,AO),e(AO,Ycr),e(bC,Kcr),e(ue,Zcr),e(ue,vC),e(vC,C_e),e(C_e,efr),e(vC,ofr),e(vC,LO),e(LO,rfr),e(vC,tfr),e(ue,afr),e(ue,TC),e(TC,M_e),e(M_e,nfr),e(TC,sfr),e(TC,BO),e(BO,lfr),e(TC,ifr),e(ue,dfr),e(ue,FC),e(FC,E_e),e(E_e,cfr),e(FC,ffr),e(FC,xO),e(xO,mfr),e(FC,gfr),e(vo,hfr),e(vo,y_e),e(y_e,pfr),e(vo,_fr),g(R0,vo,null),b(c,SRe,u),b(c,xc,u),e(xc,CC),e(CC,w_e),g(S0,w_e,null),e(xc,ufr),e(xc,A_e),e(A_e,bfr),b(c,PRe,u),b(c,yr,u),g(P0,yr,null),e(yr,vfr),e(yr,kc),e(kc,Tfr),e(kc,L_e),e(L_e,Ffr),e(kc,Cfr),e(kc,B_e),e(B_e,Mfr),e(kc,Efr),e(yr,yfr),e(yr,$0),e($0,wfr),e($0,x_e),e(x_e,Afr),e($0,Lfr),e(yr,Bfr),e(yr,vt),g(I0,vt,null),e(vt,xfr),e(vt,k_e),e(k_e,kfr),e(vt,Rfr),e(vt,Rc),e(Rc,Sfr),e(Rc,R_e),e(R_e,Pfr),e(Rc,$fr),e(Rc,S_e),e(S_e,Ifr),e(Rc,Nfr),e(vt,Dfr),e(vt,P_e),e(P_e,jfr),e(vt,qfr),g(N0,vt,null),e(yr,Gfr),e(yr,To),g(D0,To,null),e(To,Ofr),e(To,$_e),e($_e,Xfr),e(To,Vfr),e(To,Cn),e(Cn,zfr),e(Cn,I_e),e(I_e,Wfr),e(Cn,Qfr),e(Cn,N_e),e(N_e,Hfr),e(Cn,Ufr),e(Cn,D_e),e(D_e,Jfr),e(Cn,Yfr),e(To,Kfr),e(To,V),e(V,MC),e(MC,j_e),e(j_e,Zfr),e(MC,emr),e(MC,kO),e(kO,omr),e(MC,rmr),e(V,tmr),e(V,EC),e(EC,q_e),e(q_e,amr),e(EC,nmr),e(EC,RO),e(RO,smr),e(EC,lmr),e(V,imr),e(V,yC),e(yC,G_e),e(G_e,dmr),e(yC,cmr),e(yC,SO),e(SO,fmr),e(yC,mmr),e(V,gmr),e(V,wC),e(wC,O_e),e(O_e,hmr),e(wC,pmr),e(wC,PO),e(PO,_mr),e(wC,umr),e(V,bmr),e(V,AC),e(AC,X_e),e(X_e,vmr),e(AC,Tmr),e(AC,$O),e($O,Fmr),e(AC,Cmr),e(V,Mmr),e(V,LC),e(LC,V_e),e(V_e,Emr),e(LC,ymr),e(LC,IO),e(IO,wmr),e(LC,Amr),e(V,Lmr),e(V,BC),e(BC,z_e),e(z_e,Bmr),e(BC,xmr),e(BC,NO),e(NO,kmr),e(BC,Rmr),e(V,Smr),e(V,xC),e(xC,W_e),e(W_e,Pmr),e(xC,$mr),e(xC,DO),e(DO,Imr),e(xC,Nmr),e(V,Dmr),e(V,kC),e(kC,Q_e),e(Q_e,jmr),e(kC,qmr),e(kC,jO),e(jO,Gmr),e(kC,Omr),e(V,Xmr),e(V,RC),e(RC,H_e),e(H_e,Vmr),e(RC,zmr),e(RC,qO),e(qO,Wmr),e(RC,Qmr),e(V,Hmr),e(V,SC),e(SC,U_e),e(U_e,Umr),e(SC,Jmr),e(SC,GO),e(GO,Ymr),e(SC,Kmr),e(V,Zmr),e(V,PC),e(PC,J_e),e(J_e,egr),e(PC,ogr),e(PC,OO),e(OO,rgr),e(PC,tgr),e(V,agr),e(V,$C),e($C,Y_e),e(Y_e,ngr),e($C,sgr),e($C,XO),e(XO,lgr),e($C,igr),e(V,dgr),e(V,IC),e(IC,K_e),e(K_e,cgr),e(IC,fgr),e(IC,VO),e(VO,mgr),e(IC,ggr),e(V,hgr),e(V,NC),e(NC,Z_e),e(Z_e,pgr),e(NC,_gr),e(NC,zO),e(zO,ugr),e(NC,bgr),e(V,vgr),e(V,DC),e(DC,eue),e(eue,Tgr),e(DC,Fgr),e(DC,WO),e(WO,Cgr),e(DC,Mgr),e(V,Egr),e(V,jC),e(jC,oue),e(oue,ygr),e(jC,wgr),e(jC,QO),e(QO,Agr),e(jC,Lgr),e(V,Bgr),e(V,qC),e(qC,rue),e(rue,xgr),e(qC,kgr),e(qC,HO),e(HO,Rgr),e(qC,Sgr),e(V,Pgr),e(V,GC),e(GC,tue),e(tue,$gr),e(GC,Igr),e(GC,UO),e(UO,Ngr),e(GC,Dgr),e(V,jgr),e(V,OC),e(OC,aue),e(aue,qgr),e(OC,Ggr),e(OC,JO),e(JO,Ogr),e(OC,Xgr),e(V,Vgr),e(V,XC),e(XC,nue),e(nue,zgr),e(XC,Wgr),e(XC,YO),e(YO,Qgr),e(XC,Hgr),e(V,Ugr),e(V,VC),e(VC,sue),e(sue,Jgr),e(VC,Ygr),e(VC,KO),e(KO,Kgr),e(VC,Zgr),e(V,ehr),e(V,zC),e(zC,lue),e(lue,ohr),e(zC,rhr),e(zC,ZO),e(ZO,thr),e(zC,ahr),e(V,nhr),e(V,WC),e(WC,iue),e(iue,shr),e(WC,lhr),e(WC,eX),e(eX,ihr),e(WC,dhr),e(V,chr),e(V,QC),e(QC,due),e(due,fhr),e(QC,mhr),e(QC,oX),e(oX,ghr),e(QC,hhr),e(To,phr),e(To,cue),e(cue,_hr),e(To,uhr),g(j0,To,null),b(c,$Re,u),b(c,Sc,u),e(Sc,HC),e(HC,fue),g(q0,fue,null),e(Sc,bhr),e(Sc,mue),e(mue,vhr),b(c,IRe,u),b(c,wr,u),g(G0,wr,null),e(wr,Thr),e(wr,Pc),e(Pc,Fhr),e(Pc,gue),e(gue,Chr),e(Pc,Mhr),e(Pc,hue),e(hue,Ehr),e(Pc,yhr),e(wr,whr),e(wr,O0),e(O0,Ahr),e(O0,pue),e(pue,Lhr),e(O0,Bhr),e(wr,xhr),e(wr,Tt),g(X0,Tt,null),e(Tt,khr),e(Tt,_ue),e(_ue,Rhr),e(Tt,Shr),e(Tt,$c),e($c,Phr),e($c,uue),e(uue,$hr),e($c,Ihr),e($c,bue),e(bue,Nhr),e($c,Dhr),e(Tt,jhr),e(Tt,vue),e(vue,qhr),e(Tt,Ghr),g(V0,Tt,null),e(wr,Ohr),e(wr,Fo),g(z0,Fo,null),e(Fo,Xhr),e(Fo,Tue),e(Tue,Vhr),e(Fo,zhr),e(Fo,Mn),e(Mn,Whr),e(Mn,Fue),e(Fue,Qhr),e(Mn,Hhr),e(Mn,Cue),e(Cue,Uhr),e(Mn,Jhr),e(Mn,Mue),e(Mue,Yhr),e(Mn,Khr),e(Fo,Zhr),e(Fo,ne),e(ne,UC),e(UC,Eue),e(Eue,epr),e(UC,opr),e(UC,rX),e(rX,rpr),e(UC,tpr),e(ne,apr),e(ne,JC),e(JC,yue),e(yue,npr),e(JC,spr),e(JC,tX),e(tX,lpr),e(JC,ipr),e(ne,dpr),e(ne,YC),e(YC,wue),e(wue,cpr),e(YC,fpr),e(YC,aX),e(aX,mpr),e(YC,gpr),e(ne,hpr),e(ne,KC),e(KC,Aue),e(Aue,ppr),e(KC,_pr),e(KC,nX),e(nX,upr),e(KC,bpr),e(ne,vpr),e(ne,ZC),e(ZC,Lue),e(Lue,Tpr),e(ZC,Fpr),e(ZC,sX),e(sX,Cpr),e(ZC,Mpr),e(ne,Epr),e(ne,eM),e(eM,Bue),e(Bue,ypr),e(eM,wpr),e(eM,lX),e(lX,Apr),e(eM,Lpr),e(ne,Bpr),e(ne,oM),e(oM,xue),e(xue,xpr),e(oM,kpr),e(oM,iX),e(iX,Rpr),e(oM,Spr),e(ne,Ppr),e(ne,rM),e(rM,kue),e(kue,$pr),e(rM,Ipr),e(rM,dX),e(dX,Npr),e(rM,Dpr),e(ne,jpr),e(ne,tM),e(tM,Rue),e(Rue,qpr),e(tM,Gpr),e(tM,cX),e(cX,Opr),e(tM,Xpr),e(ne,Vpr),e(ne,aM),e(aM,Sue),e(Sue,zpr),e(aM,Wpr),e(aM,fX),e(fX,Qpr),e(aM,Hpr),e(ne,Upr),e(ne,nM),e(nM,Pue),e(Pue,Jpr),e(nM,Ypr),e(nM,mX),e(mX,Kpr),e(nM,Zpr),e(ne,e_r),e(ne,sM),e(sM,$ue),e($ue,o_r),e(sM,r_r),e(sM,gX),e(gX,t_r),e(sM,a_r),e(ne,n_r),e(ne,lM),e(lM,Iue),e(Iue,s_r),e(lM,l_r),e(lM,hX),e(hX,i_r),e(lM,d_r),e(ne,c_r),e(ne,iM),e(iM,Nue),e(Nue,f_r),e(iM,m_r),e(iM,pX),e(pX,g_r),e(iM,h_r),e(ne,p_r),e(ne,dM),e(dM,Due),e(Due,__r),e(dM,u_r),e(dM,_X),e(_X,b_r),e(dM,v_r),e(ne,T_r),e(ne,cM),e(cM,jue),e(jue,F_r),e(cM,C_r),e(cM,uX),e(uX,M_r),e(cM,E_r),e(ne,y_r),e(ne,fM),e(fM,que),e(que,w_r),e(fM,A_r),e(fM,bX),e(bX,L_r),e(fM,B_r),e(Fo,x_r),e(Fo,Gue),e(Gue,k_r),e(Fo,R_r),g(W0,Fo,null),b(c,NRe,u),b(c,Ic,u),e(Ic,mM),e(mM,Oue),g(Q0,Oue,null),e(Ic,S_r),e(Ic,Xue),e(Xue,P_r),b(c,DRe,u),b(c,Ar,u),g(H0,Ar,null),e(Ar,$_r),e(Ar,Nc),e(Nc,I_r),e(Nc,Vue),e(Vue,N_r),e(Nc,D_r),e(Nc,zue),e(zue,j_r),e(Nc,q_r),e(Ar,G_r),e(Ar,U0),e(U0,O_r),e(U0,Wue),e(Wue,X_r),e(U0,V_r),e(Ar,z_r),e(Ar,Ft),g(J0,Ft,null),e(Ft,W_r),e(Ft,Que),e(Que,Q_r),e(Ft,H_r),e(Ft,Dc),e(Dc,U_r),e(Dc,Hue),e(Hue,J_r),e(Dc,Y_r),e(Dc,Uue),e(Uue,K_r),e(Dc,Z_r),e(Ft,eur),e(Ft,Jue),e(Jue,our),e(Ft,rur),g(Y0,Ft,null),e(Ar,tur),e(Ar,Co),g(K0,Co,null),e(Co,aur),e(Co,Yue),e(Yue,nur),e(Co,sur),e(Co,En),e(En,lur),e(En,Kue),e(Kue,iur),e(En,dur),e(En,Zue),e(Zue,cur),e(En,fur),e(En,e1e),e(e1e,mur),e(En,gur),e(Co,hur),e(Co,o1e),e(o1e,gM),e(gM,r1e),e(r1e,pur),e(gM,_ur),e(gM,vX),e(vX,uur),e(gM,bur),e(Co,vur),e(Co,t1e),e(t1e,Tur),e(Co,Fur),g(Z0,Co,null),b(c,jRe,u),b(c,jc,u),e(jc,hM),e(hM,a1e),g(eL,a1e,null),e(jc,Cur),e(jc,n1e),e(n1e,Mur),b(c,qRe,u),b(c,Lr,u),g(oL,Lr,null),e(Lr,Eur),e(Lr,qc),e(qc,yur),e(qc,s1e),e(s1e,wur),e(qc,Aur),e(qc,l1e),e(l1e,Lur),e(qc,Bur),e(Lr,xur),e(Lr,rL),e(rL,kur),e(rL,i1e),e(i1e,Rur),e(rL,Sur),e(Lr,Pur),e(Lr,Ct),g(tL,Ct,null),e(Ct,$ur),e(Ct,d1e),e(d1e,Iur),e(Ct,Nur),e(Ct,Gc),e(Gc,Dur),e(Gc,c1e),e(c1e,jur),e(Gc,qur),e(Gc,f1e),e(f1e,Gur),e(Gc,Our),e(Ct,Xur),e(Ct,m1e),e(m1e,Vur),e(Ct,zur),g(aL,Ct,null),e(Lr,Wur),e(Lr,Mo),g(nL,Mo,null),e(Mo,Qur),e(Mo,g1e),e(g1e,Hur),e(Mo,Uur),e(Mo,yn),e(yn,Jur),e(yn,h1e),e(h1e,Yur),e(yn,Kur),e(yn,p1e),e(p1e,Zur),e(yn,e1r),e(yn,_1e),e(_1e,o1r),e(yn,r1r),e(Mo,t1r),e(Mo,Y),e(Y,pM),e(pM,u1e),e(u1e,a1r),e(pM,n1r),e(pM,TX),e(TX,s1r),e(pM,l1r),e(Y,i1r),e(Y,_M),e(_M,b1e),e(b1e,d1r),e(_M,c1r),e(_M,FX),e(FX,f1r),e(_M,m1r),e(Y,g1r),e(Y,uM),e(uM,v1e),e(v1e,h1r),e(uM,p1r),e(uM,CX),e(CX,_1r),e(uM,u1r),e(Y,b1r),e(Y,bM),e(bM,T1e),e(T1e,v1r),e(bM,T1r),e(bM,MX),e(MX,F1r),e(bM,C1r),e(Y,M1r),e(Y,vM),e(vM,F1e),e(F1e,E1r),e(vM,y1r),e(vM,EX),e(EX,w1r),e(vM,A1r),e(Y,L1r),e(Y,TM),e(TM,C1e),e(C1e,B1r),e(TM,x1r),e(TM,yX),e(yX,k1r),e(TM,R1r),e(Y,S1r),e(Y,FM),e(FM,M1e),e(M1e,P1r),e(FM,$1r),e(FM,wX),e(wX,I1r),e(FM,N1r),e(Y,D1r),e(Y,CM),e(CM,E1e),e(E1e,j1r),e(CM,q1r),e(CM,AX),e(AX,G1r),e(CM,O1r),e(Y,X1r),e(Y,MM),e(MM,y1e),e(y1e,V1r),e(MM,z1r),e(MM,LX),e(LX,W1r),e(MM,Q1r),e(Y,H1r),e(Y,EM),e(EM,w1e),e(w1e,U1r),e(EM,J1r),e(EM,BX),e(BX,Y1r),e(EM,K1r),e(Y,Z1r),e(Y,yM),e(yM,A1e),e(A1e,e2r),e(yM,o2r),e(yM,xX),e(xX,r2r),e(yM,t2r),e(Y,a2r),e(Y,wM),e(wM,L1e),e(L1e,n2r),e(wM,s2r),e(wM,kX),e(kX,l2r),e(wM,i2r),e(Y,d2r),e(Y,AM),e(AM,B1e),e(B1e,c2r),e(AM,f2r),e(AM,RX),e(RX,m2r),e(AM,g2r),e(Y,h2r),e(Y,LM),e(LM,x1e),e(x1e,p2r),e(LM,_2r),e(LM,SX),e(SX,u2r),e(LM,b2r),e(Y,v2r),e(Y,BM),e(BM,k1e),e(k1e,T2r),e(BM,F2r),e(BM,PX),e(PX,C2r),e(BM,M2r),e(Y,E2r),e(Y,xM),e(xM,R1e),e(R1e,y2r),e(xM,w2r),e(xM,$X),e($X,A2r),e(xM,L2r),e(Y,B2r),e(Y,kM),e(kM,S1e),e(S1e,x2r),e(kM,k2r),e(kM,IX),e(IX,R2r),e(kM,S2r),e(Y,P2r),e(Y,RM),e(RM,P1e),e(P1e,$2r),e(RM,I2r),e(RM,NX),e(NX,N2r),e(RM,D2r),e(Y,j2r),e(Y,SM),e(SM,$1e),e($1e,q2r),e(SM,G2r),e(SM,DX),e(DX,O2r),e(SM,X2r),e(Y,V2r),e(Y,PM),e(PM,I1e),e(I1e,z2r),e(PM,W2r),e(PM,jX),e(jX,Q2r),e(PM,H2r),e(Mo,U2r),e(Mo,N1e),e(N1e,J2r),e(Mo,Y2r),g(sL,Mo,null),b(c,GRe,u),b(c,Oc,u),e(Oc,$M),e($M,D1e),g(lL,D1e,null),e(Oc,K2r),e(Oc,j1e),e(j1e,Z2r),b(c,ORe,u),b(c,Br,u),g(iL,Br,null),e(Br,e6r),e(Br,Xc),e(Xc,o6r),e(Xc,q1e),e(q1e,r6r),e(Xc,t6r),e(Xc,G1e),e(G1e,a6r),e(Xc,n6r),e(Br,s6r),e(Br,dL),e(dL,l6r),e(dL,O1e),e(O1e,i6r),e(dL,d6r),e(Br,c6r),e(Br,Mt),g(cL,Mt,null),e(Mt,f6r),e(Mt,X1e),e(X1e,m6r),e(Mt,g6r),e(Mt,Vc),e(Vc,h6r),e(Vc,V1e),e(V1e,p6r),e(Vc,_6r),e(Vc,z1e),e(z1e,u6r),e(Vc,b6r),e(Mt,v6r),e(Mt,W1e),e(W1e,T6r),e(Mt,F6r),g(fL,Mt,null),e(Br,C6r),e(Br,Eo),g(mL,Eo,null),e(Eo,M6r),e(Eo,Q1e),e(Q1e,E6r),e(Eo,y6r),e(Eo,wn),e(wn,w6r),e(wn,H1e),e(H1e,A6r),e(wn,L6r),e(wn,U1e),e(U1e,B6r),e(wn,x6r),e(wn,J1e),e(J1e,k6r),e(wn,R6r),e(Eo,S6r),e(Eo,ee),e(ee,IM),e(IM,Y1e),e(Y1e,P6r),e(IM,$6r),e(IM,qX),e(qX,I6r),e(IM,N6r),e(ee,D6r),e(ee,NM),e(NM,K1e),e(K1e,j6r),e(NM,q6r),e(NM,GX),e(GX,G6r),e(NM,O6r),e(ee,X6r),e(ee,DM),e(DM,Z1e),e(Z1e,V6r),e(DM,z6r),e(DM,OX),e(OX,W6r),e(DM,Q6r),e(ee,H6r),e(ee,jM),e(jM,e2e),e(e2e,U6r),e(jM,J6r),e(jM,XX),e(XX,Y6r),e(jM,K6r),e(ee,Z6r),e(ee,qM),e(qM,o2e),e(o2e,ebr),e(qM,obr),e(qM,VX),e(VX,rbr),e(qM,tbr),e(ee,abr),e(ee,GM),e(GM,r2e),e(r2e,nbr),e(GM,sbr),e(GM,zX),e(zX,lbr),e(GM,ibr),e(ee,dbr),e(ee,OM),e(OM,t2e),e(t2e,cbr),e(OM,fbr),e(OM,WX),e(WX,mbr),e(OM,gbr),e(ee,hbr),e(ee,XM),e(XM,a2e),e(a2e,pbr),e(XM,_br),e(XM,QX),e(QX,ubr),e(XM,bbr),e(ee,vbr),e(ee,VM),e(VM,n2e),e(n2e,Tbr),e(VM,Fbr),e(VM,HX),e(HX,Cbr),e(VM,Mbr),e(ee,Ebr),e(ee,zM),e(zM,s2e),e(s2e,ybr),e(zM,wbr),e(zM,UX),e(UX,Abr),e(zM,Lbr),e(ee,Bbr),e(ee,WM),e(WM,l2e),e(l2e,xbr),e(WM,kbr),e(WM,JX),e(JX,Rbr),e(WM,Sbr),e(ee,Pbr),e(ee,QM),e(QM,i2e),e(i2e,$br),e(QM,Ibr),e(QM,YX),e(YX,Nbr),e(QM,Dbr),e(ee,jbr),e(ee,HM),e(HM,d2e),e(d2e,qbr),e(HM,Gbr),e(HM,KX),e(KX,Obr),e(HM,Xbr),e(ee,Vbr),e(ee,UM),e(UM,c2e),e(c2e,zbr),e(UM,Wbr),e(UM,ZX),e(ZX,Qbr),e(UM,Hbr),e(ee,Ubr),e(ee,JM),e(JM,f2e),e(f2e,Jbr),e(JM,Ybr),e(JM,eV),e(eV,Kbr),e(JM,Zbr),e(ee,evr),e(ee,YM),e(YM,m2e),e(m2e,ovr),e(YM,rvr),e(YM,oV),e(oV,tvr),e(YM,avr),e(ee,nvr),e(ee,KM),e(KM,g2e),e(g2e,svr),e(KM,lvr),e(KM,rV),e(rV,ivr),e(KM,dvr),e(ee,cvr),e(ee,ZM),e(ZM,h2e),e(h2e,fvr),e(ZM,mvr),e(ZM,tV),e(tV,gvr),e(ZM,hvr),e(ee,pvr),e(ee,e4),e(e4,p2e),e(p2e,_vr),e(e4,uvr),e(e4,aV),e(aV,bvr),e(e4,vvr),e(Eo,Tvr),e(Eo,_2e),e(_2e,Fvr),e(Eo,Cvr),g(gL,Eo,null),b(c,XRe,u),b(c,zc,u),e(zc,o4),e(o4,u2e),g(hL,u2e,null),e(zc,Mvr),e(zc,b2e),e(b2e,Evr),b(c,VRe,u),b(c,xr,u),g(pL,xr,null),e(xr,yvr),e(xr,Wc),e(Wc,wvr),e(Wc,v2e),e(v2e,Avr),e(Wc,Lvr),e(Wc,T2e),e(T2e,Bvr),e(Wc,xvr),e(xr,kvr),e(xr,_L),e(_L,Rvr),e(_L,F2e),e(F2e,Svr),e(_L,Pvr),e(xr,$vr),e(xr,Et),g(uL,Et,null),e(Et,Ivr),e(Et,C2e),e(C2e,Nvr),e(Et,Dvr),e(Et,Qc),e(Qc,jvr),e(Qc,M2e),e(M2e,qvr),e(Qc,Gvr),e(Qc,E2e),e(E2e,Ovr),e(Qc,Xvr),e(Et,Vvr),e(Et,y2e),e(y2e,zvr),e(Et,Wvr),g(bL,Et,null),e(xr,Qvr),e(xr,yo),g(vL,yo,null),e(yo,Hvr),e(yo,w2e),e(w2e,Uvr),e(yo,Jvr),e(yo,An),e(An,Yvr),e(An,A2e),e(A2e,Kvr),e(An,Zvr),e(An,L2e),e(L2e,eTr),e(An,oTr),e(An,B2e),e(B2e,rTr),e(An,tTr),e(yo,aTr),e(yo,x2e),e(x2e,r4),e(r4,k2e),e(k2e,nTr),e(r4,sTr),e(r4,nV),e(nV,lTr),e(r4,iTr),e(yo,dTr),e(yo,R2e),e(R2e,cTr),e(yo,fTr),g(TL,yo,null),b(c,zRe,u),b(c,Hc,u),e(Hc,t4),e(t4,S2e),g(FL,S2e,null),e(Hc,mTr),e(Hc,P2e),e(P2e,gTr),b(c,WRe,u),b(c,kr,u),g(CL,kr,null),e(kr,hTr),e(kr,Uc),e(Uc,pTr),e(Uc,$2e),e($2e,_Tr),e(Uc,uTr),e(Uc,I2e),e(I2e,bTr),e(Uc,vTr),e(kr,TTr),e(kr,ML),e(ML,FTr),e(ML,N2e),e(N2e,CTr),e(ML,MTr),e(kr,ETr),e(kr,yt),g(EL,yt,null),e(yt,yTr),e(yt,D2e),e(D2e,wTr),e(yt,ATr),e(yt,Jc),e(Jc,LTr),e(Jc,j2e),e(j2e,BTr),e(Jc,xTr),e(Jc,q2e),e(q2e,kTr),e(Jc,RTr),e(yt,STr),e(yt,G2e),e(G2e,PTr),e(yt,$Tr),g(yL,yt,null),e(kr,ITr),e(kr,wo),g(wL,wo,null),e(wo,NTr),e(wo,O2e),e(O2e,DTr),e(wo,jTr),e(wo,Ln),e(Ln,qTr),e(Ln,X2e),e(X2e,GTr),e(Ln,OTr),e(Ln,V2e),e(V2e,XTr),e(Ln,VTr),e(Ln,z2e),e(z2e,zTr),e(Ln,WTr),e(wo,QTr),e(wo,W2e),e(W2e,a4),e(a4,Q2e),e(Q2e,HTr),e(a4,UTr),e(a4,sV),e(sV,JTr),e(a4,YTr),e(wo,KTr),e(wo,H2e),e(H2e,ZTr),e(wo,eFr),g(AL,wo,null),b(c,QRe,u),b(c,Yc,u),e(Yc,n4),e(n4,U2e),g(LL,U2e,null),e(Yc,oFr),e(Yc,J2e),e(J2e,rFr),b(c,HRe,u),b(c,Rr,u),g(BL,Rr,null),e(Rr,tFr),e(Rr,Kc),e(Kc,aFr),e(Kc,Y2e),e(Y2e,nFr),e(Kc,sFr),e(Kc,K2e),e(K2e,lFr),e(Kc,iFr),e(Rr,dFr),e(Rr,xL),e(xL,cFr),e(xL,Z2e),e(Z2e,fFr),e(xL,mFr),e(Rr,gFr),e(Rr,wt),g(kL,wt,null),e(wt,hFr),e(wt,e6e),e(e6e,pFr),e(wt,_Fr),e(wt,Zc),e(Zc,uFr),e(Zc,o6e),e(o6e,bFr),e(Zc,vFr),e(Zc,r6e),e(r6e,TFr),e(Zc,FFr),e(wt,CFr),e(wt,t6e),e(t6e,MFr),e(wt,EFr),g(RL,wt,null),e(Rr,yFr),e(Rr,Ao),g(SL,Ao,null),e(Ao,wFr),e(Ao,a6e),e(a6e,AFr),e(Ao,LFr),e(Ao,Bn),e(Bn,BFr),e(Bn,n6e),e(n6e,xFr),e(Bn,kFr),e(Bn,s6e),e(s6e,RFr),e(Bn,SFr),e(Bn,l6e),e(l6e,PFr),e(Bn,$Fr),e(Ao,IFr),e(Ao,z),e(z,s4),e(s4,i6e),e(i6e,NFr),e(s4,DFr),e(s4,lV),e(lV,jFr),e(s4,qFr),e(z,GFr),e(z,l4),e(l4,d6e),e(d6e,OFr),e(l4,XFr),e(l4,iV),e(iV,VFr),e(l4,zFr),e(z,WFr),e(z,i4),e(i4,c6e),e(c6e,QFr),e(i4,HFr),e(i4,dV),e(dV,UFr),e(i4,JFr),e(z,YFr),e(z,d4),e(d4,f6e),e(f6e,KFr),e(d4,ZFr),e(d4,cV),e(cV,eCr),e(d4,oCr),e(z,rCr),e(z,c4),e(c4,m6e),e(m6e,tCr),e(c4,aCr),e(c4,fV),e(fV,nCr),e(c4,sCr),e(z,lCr),e(z,f4),e(f4,g6e),e(g6e,iCr),e(f4,dCr),e(f4,mV),e(mV,cCr),e(f4,fCr),e(z,mCr),e(z,m4),e(m4,h6e),e(h6e,gCr),e(m4,hCr),e(m4,gV),e(gV,pCr),e(m4,_Cr),e(z,uCr),e(z,g4),e(g4,p6e),e(p6e,bCr),e(g4,vCr),e(g4,hV),e(hV,TCr),e(g4,FCr),e(z,CCr),e(z,h4),e(h4,_6e),e(_6e,MCr),e(h4,ECr),e(h4,pV),e(pV,yCr),e(h4,wCr),e(z,ACr),e(z,p4),e(p4,u6e),e(u6e,LCr),e(p4,BCr),e(p4,_V),e(_V,xCr),e(p4,kCr),e(z,RCr),e(z,_4),e(_4,b6e),e(b6e,SCr),e(_4,PCr),e(_4,uV),e(uV,$Cr),e(_4,ICr),e(z,NCr),e(z,u4),e(u4,v6e),e(v6e,DCr),e(u4,jCr),e(u4,bV),e(bV,qCr),e(u4,GCr),e(z,OCr),e(z,b4),e(b4,T6e),e(T6e,XCr),e(b4,VCr),e(b4,vV),e(vV,zCr),e(b4,WCr),e(z,QCr),e(z,v4),e(v4,F6e),e(F6e,HCr),e(v4,UCr),e(v4,TV),e(TV,JCr),e(v4,YCr),e(z,KCr),e(z,T4),e(T4,C6e),e(C6e,ZCr),e(T4,eMr),e(T4,FV),e(FV,oMr),e(T4,rMr),e(z,tMr),e(z,F4),e(F4,M6e),e(M6e,aMr),e(F4,nMr),e(F4,CV),e(CV,sMr),e(F4,lMr),e(z,iMr),e(z,C4),e(C4,E6e),e(E6e,dMr),e(C4,cMr),e(C4,MV),e(MV,fMr),e(C4,mMr),e(z,gMr),e(z,M4),e(M4,y6e),e(y6e,hMr),e(M4,pMr),e(M4,EV),e(EV,_Mr),e(M4,uMr),e(z,bMr),e(z,E4),e(E4,w6e),e(w6e,vMr),e(E4,TMr),e(E4,yV),e(yV,FMr),e(E4,CMr),e(z,MMr),e(z,y4),e(y4,A6e),e(A6e,EMr),e(y4,yMr),e(y4,wV),e(wV,wMr),e(y4,AMr),e(z,LMr),e(z,w4),e(w4,L6e),e(L6e,BMr),e(w4,xMr),e(w4,AV),e(AV,kMr),e(w4,RMr),e(z,SMr),e(z,A4),e(A4,B6e),e(B6e,PMr),e(A4,$Mr),e(A4,LV),e(LV,IMr),e(A4,NMr),e(z,DMr),e(z,L4),e(L4,x6e),e(x6e,jMr),e(L4,qMr),e(L4,BV),e(BV,GMr),e(L4,OMr),e(z,XMr),e(z,B4),e(B4,k6e),e(k6e,VMr),e(B4,zMr),e(B4,xV),e(xV,WMr),e(B4,QMr),e(z,HMr),e(z,x4),e(x4,R6e),e(R6e,UMr),e(x4,JMr),e(x4,kV),e(kV,YMr),e(x4,KMr),e(Ao,ZMr),e(Ao,S6e),e(S6e,e4r),e(Ao,o4r),g(PL,Ao,null),b(c,URe,u),b(c,ef,u),e(ef,k4),e(k4,P6e),g($L,P6e,null),e(ef,r4r),e(ef,$6e),e($6e,t4r),b(c,JRe,u),b(c,Sr,u),g(IL,Sr,null),e(Sr,a4r),e(Sr,of),e(of,n4r),e(of,I6e),e(I6e,s4r),e(of,l4r),e(of,N6e),e(N6e,i4r),e(of,d4r),e(Sr,c4r),e(Sr,NL),e(NL,f4r),e(NL,D6e),e(D6e,m4r),e(NL,g4r),e(Sr,h4r),e(Sr,At),g(DL,At,null),e(At,p4r),e(At,j6e),e(j6e,_4r),e(At,u4r),e(At,rf),e(rf,b4r),e(rf,q6e),e(q6e,v4r),e(rf,T4r),e(rf,G6e),e(G6e,F4r),e(rf,C4r),e(At,M4r),e(At,O6e),e(O6e,E4r),e(At,y4r),g(jL,At,null),e(Sr,w4r),e(Sr,Lo),g(qL,Lo,null),e(Lo,A4r),e(Lo,X6e),e(X6e,L4r),e(Lo,B4r),e(Lo,xn),e(xn,x4r),e(xn,V6e),e(V6e,k4r),e(xn,R4r),e(xn,z6e),e(z6e,S4r),e(xn,P4r),e(xn,W6e),e(W6e,$4r),e(xn,I4r),e(Lo,N4r),e(Lo,ca),e(ca,R4),e(R4,Q6e),e(Q6e,D4r),e(R4,j4r),e(R4,RV),e(RV,q4r),e(R4,G4r),e(ca,O4r),e(ca,S4),e(S4,H6e),e(H6e,X4r),e(S4,V4r),e(S4,SV),e(SV,z4r),e(S4,W4r),e(ca,Q4r),e(ca,P4),e(P4,U6e),e(U6e,H4r),e(P4,U4r),e(P4,PV),e(PV,J4r),e(P4,Y4r),e(ca,K4r),e(ca,$4),e($4,J6e),e(J6e,Z4r),e($4,eEr),e($4,$V),e($V,oEr),e($4,rEr),e(ca,tEr),e(ca,I4),e(I4,Y6e),e(Y6e,aEr),e(I4,nEr),e(I4,IV),e(IV,sEr),e(I4,lEr),e(Lo,iEr),e(Lo,K6e),e(K6e,dEr),e(Lo,cEr),g(GL,Lo,null),b(c,YRe,u),b(c,tf,u),e(tf,N4),e(N4,Z6e),g(OL,Z6e,null),e(tf,fEr),e(tf,ebe),e(ebe,mEr),b(c,KRe,u),b(c,Pr,u),g(XL,Pr,null),e(Pr,gEr),e(Pr,af),e(af,hEr),e(af,obe),e(obe,pEr),e(af,_Er),e(af,rbe),e(rbe,uEr),e(af,bEr),e(Pr,vEr),e(Pr,VL),e(VL,TEr),e(VL,tbe),e(tbe,FEr),e(VL,CEr),e(Pr,MEr),e(Pr,Lt),g(zL,Lt,null),e(Lt,EEr),e(Lt,abe),e(abe,yEr),e(Lt,wEr),e(Lt,nf),e(nf,AEr),e(nf,nbe),e(nbe,LEr),e(nf,BEr),e(nf,sbe),e(sbe,xEr),e(nf,kEr),e(Lt,REr),e(Lt,lbe),e(lbe,SEr),e(Lt,PEr),g(WL,Lt,null),e(Pr,$Er),e(Pr,Bo),g(QL,Bo,null),e(Bo,IEr),e(Bo,ibe),e(ibe,NEr),e(Bo,DEr),e(Bo,kn),e(kn,jEr),e(kn,dbe),e(dbe,qEr),e(kn,GEr),e(kn,cbe),e(cbe,OEr),e(kn,XEr),e(kn,fbe),e(fbe,VEr),e(kn,zEr),e(Bo,WEr),e(Bo,fe),e(fe,D4),e(D4,mbe),e(mbe,QEr),e(D4,HEr),e(D4,NV),e(NV,UEr),e(D4,JEr),e(fe,YEr),e(fe,j4),e(j4,gbe),e(gbe,KEr),e(j4,ZEr),e(j4,DV),e(DV,e3r),e(j4,o3r),e(fe,r3r),e(fe,q4),e(q4,hbe),e(hbe,t3r),e(q4,a3r),e(q4,jV),e(jV,n3r),e(q4,s3r),e(fe,l3r),e(fe,G4),e(G4,pbe),e(pbe,i3r),e(G4,d3r),e(G4,qV),e(qV,c3r),e(G4,f3r),e(fe,m3r),e(fe,O4),e(O4,_be),e(_be,g3r),e(O4,h3r),e(O4,GV),e(GV,p3r),e(O4,_3r),e(fe,u3r),e(fe,X4),e(X4,ube),e(ube,b3r),e(X4,v3r),e(X4,OV),e(OV,T3r),e(X4,F3r),e(fe,C3r),e(fe,V4),e(V4,bbe),e(bbe,M3r),e(V4,E3r),e(V4,XV),e(XV,y3r),e(V4,w3r),e(fe,A3r),e(fe,z4),e(z4,vbe),e(vbe,L3r),e(z4,B3r),e(z4,VV),e(VV,x3r),e(z4,k3r),e(fe,R3r),e(fe,W4),e(W4,Tbe),e(Tbe,S3r),e(W4,P3r),e(W4,zV),e(zV,$3r),e(W4,I3r),e(fe,N3r),e(fe,Q4),e(Q4,Fbe),e(Fbe,D3r),e(Q4,j3r),e(Q4,WV),e(WV,q3r),e(Q4,G3r),e(fe,O3r),e(fe,H4),e(H4,Cbe),e(Cbe,X3r),e(H4,V3r),e(H4,QV),e(QV,z3r),e(H4,W3r),e(fe,Q3r),e(fe,U4),e(U4,Mbe),e(Mbe,H3r),e(U4,U3r),e(U4,HV),e(HV,J3r),e(U4,Y3r),e(Bo,K3r),e(Bo,Ebe),e(Ebe,Z3r),e(Bo,e5r),g(HL,Bo,null),b(c,ZRe,u),b(c,sf,u),e(sf,J4),e(J4,ybe),g(UL,ybe,null),e(sf,o5r),e(sf,wbe),e(wbe,r5r),b(c,eSe,u),b(c,$r,u),g(JL,$r,null),e($r,t5r),e($r,lf),e(lf,a5r),e(lf,Abe),e(Abe,n5r),e(lf,s5r),e(lf,Lbe),e(Lbe,l5r),e(lf,i5r),e($r,d5r),e($r,YL),e(YL,c5r),e(YL,Bbe),e(Bbe,f5r),e(YL,m5r),e($r,g5r),e($r,Bt),g(KL,Bt,null),e(Bt,h5r),e(Bt,xbe),e(xbe,p5r),e(Bt,_5r),e(Bt,df),e(df,u5r),e(df,kbe),e(kbe,b5r),e(df,v5r),e(df,Rbe),e(Rbe,T5r),e(df,F5r),e(Bt,C5r),e(Bt,Sbe),e(Sbe,M5r),e(Bt,E5r),g(ZL,Bt,null),e($r,y5r),e($r,xo),g(e7,xo,null),e(xo,w5r),e(xo,Pbe),e(Pbe,A5r),e(xo,L5r),e(xo,Rn),e(Rn,B5r),e(Rn,$be),e($be,x5r),e(Rn,k5r),e(Rn,Ibe),e(Ibe,R5r),e(Rn,S5r),e(Rn,Nbe),e(Nbe,P5r),e(Rn,$5r),e(xo,I5r),e(xo,be),e(be,Y4),e(Y4,Dbe),e(Dbe,N5r),e(Y4,D5r),e(Y4,UV),e(UV,j5r),e(Y4,q5r),e(be,G5r),e(be,K4),e(K4,jbe),e(jbe,O5r),e(K4,X5r),e(K4,JV),e(JV,V5r),e(K4,z5r),e(be,W5r),e(be,Z4),e(Z4,qbe),e(qbe,Q5r),e(Z4,H5r),e(Z4,YV),e(YV,U5r),e(Z4,J5r),e(be,Y5r),e(be,eE),e(eE,Gbe),e(Gbe,K5r),e(eE,Z5r),e(eE,KV),e(KV,eyr),e(eE,oyr),e(be,ryr),e(be,oE),e(oE,Obe),e(Obe,tyr),e(oE,ayr),e(oE,ZV),e(ZV,nyr),e(oE,syr),e(be,lyr),e(be,rE),e(rE,Xbe),e(Xbe,iyr),e(rE,dyr),e(rE,ez),e(ez,cyr),e(rE,fyr),e(be,myr),e(be,tE),e(tE,Vbe),e(Vbe,gyr),e(tE,hyr),e(tE,oz),e(oz,pyr),e(tE,_yr),e(be,uyr),e(be,aE),e(aE,zbe),e(zbe,byr),e(aE,vyr),e(aE,rz),e(rz,Tyr),e(aE,Fyr),e(be,Cyr),e(be,nE),e(nE,Wbe),e(Wbe,Myr),e(nE,Eyr),e(nE,tz),e(tz,yyr),e(nE,wyr),e(be,Ayr),e(be,sE),e(sE,Qbe),e(Qbe,Lyr),e(sE,Byr),e(sE,az),e(az,xyr),e(sE,kyr),e(xo,Ryr),e(xo,Hbe),e(Hbe,Syr),e(xo,Pyr),g(o7,xo,null),b(c,oSe,u),b(c,cf,u),e(cf,lE),e(lE,Ube),g(r7,Ube,null),e(cf,$yr),e(cf,Jbe),e(Jbe,Iyr),b(c,rSe,u),b(c,Ir,u),g(t7,Ir,null),e(Ir,Nyr),e(Ir,ff),e(ff,Dyr),e(ff,Ybe),e(Ybe,jyr),e(ff,qyr),e(ff,Kbe),e(Kbe,Gyr),e(ff,Oyr),e(Ir,Xyr),e(Ir,a7),e(a7,Vyr),e(a7,Zbe),e(Zbe,zyr),e(a7,Wyr),e(Ir,Qyr),e(Ir,xt),g(n7,xt,null),e(xt,Hyr),e(xt,eve),e(eve,Uyr),e(xt,Jyr),e(xt,mf),e(mf,Yyr),e(mf,ove),e(ove,Kyr),e(mf,Zyr),e(mf,rve),e(rve,ewr),e(mf,owr),e(xt,rwr),e(xt,tve),e(tve,twr),e(xt,awr),g(s7,xt,null),e(Ir,nwr),e(Ir,ko),g(l7,ko,null),e(ko,swr),e(ko,ave),e(ave,lwr),e(ko,iwr),e(ko,Sn),e(Sn,dwr),e(Sn,nve),e(nve,cwr),e(Sn,fwr),e(Sn,sve),e(sve,mwr),e(Sn,gwr),e(Sn,lve),e(lve,hwr),e(Sn,pwr),e(ko,_wr),e(ko,Me),e(Me,iE),e(iE,ive),e(ive,uwr),e(iE,bwr),e(iE,nz),e(nz,vwr),e(iE,Twr),e(Me,Fwr),e(Me,dE),e(dE,dve),e(dve,Cwr),e(dE,Mwr),e(dE,sz),e(sz,Ewr),e(dE,ywr),e(Me,wwr),e(Me,cE),e(cE,cve),e(cve,Awr),e(cE,Lwr),e(cE,lz),e(lz,Bwr),e(cE,xwr),e(Me,kwr),e(Me,fE),e(fE,fve),e(fve,Rwr),e(fE,Swr),e(fE,iz),e(iz,Pwr),e(fE,$wr),e(Me,Iwr),e(Me,mE),e(mE,mve),e(mve,Nwr),e(mE,Dwr),e(mE,dz),e(dz,jwr),e(mE,qwr),e(Me,Gwr),e(Me,gE),e(gE,gve),e(gve,Owr),e(gE,Xwr),e(gE,cz),e(cz,Vwr),e(gE,zwr),e(Me,Wwr),e(Me,hE),e(hE,hve),e(hve,Qwr),e(hE,Hwr),e(hE,fz),e(fz,Uwr),e(hE,Jwr),e(Me,Ywr),e(Me,pE),e(pE,pve),e(pve,Kwr),e(pE,Zwr),e(pE,mz),e(mz,eAr),e(pE,oAr),e(Me,rAr),e(Me,_E),e(_E,_ve),e(_ve,tAr),e(_E,aAr),e(_E,gz),e(gz,nAr),e(_E,sAr),e(ko,lAr),e(ko,uve),e(uve,iAr),e(ko,dAr),g(i7,ko,null),b(c,tSe,u),b(c,gf,u),e(gf,uE),e(uE,bve),g(d7,bve,null),e(gf,cAr),e(gf,vve),e(vve,fAr),b(c,aSe,u),b(c,Nr,u),g(c7,Nr,null),e(Nr,mAr),e(Nr,hf),e(hf,gAr),e(hf,Tve),e(Tve,hAr),e(hf,pAr),e(hf,Fve),e(Fve,_Ar),e(hf,uAr),e(Nr,bAr),e(Nr,f7),e(f7,vAr),e(f7,Cve),e(Cve,TAr),e(f7,FAr),e(Nr,CAr),e(Nr,kt),g(m7,kt,null),e(kt,MAr),e(kt,Mve),e(Mve,EAr),e(kt,yAr),e(kt,pf),e(pf,wAr),e(pf,Eve),e(Eve,AAr),e(pf,LAr),e(pf,yve),e(yve,BAr),e(pf,xAr),e(kt,kAr),e(kt,wve),e(wve,RAr),e(kt,SAr),g(g7,kt,null),e(Nr,PAr),e(Nr,Ro),g(h7,Ro,null),e(Ro,$Ar),e(Ro,Ave),e(Ave,IAr),e(Ro,NAr),e(Ro,Pn),e(Pn,DAr),e(Pn,Lve),e(Lve,jAr),e(Pn,qAr),e(Pn,Bve),e(Bve,GAr),e(Pn,OAr),e(Pn,xve),e(xve,XAr),e(Pn,VAr),e(Ro,zAr),e(Ro,ve),e(ve,bE),e(bE,kve),e(kve,WAr),e(bE,QAr),e(bE,hz),e(hz,HAr),e(bE,UAr),e(ve,JAr),e(ve,vE),e(vE,Rve),e(Rve,YAr),e(vE,KAr),e(vE,pz),e(pz,ZAr),e(vE,e0r),e(ve,o0r),e(ve,TE),e(TE,Sve),e(Sve,r0r),e(TE,t0r),e(TE,_z),e(_z,a0r),e(TE,n0r),e(ve,s0r),e(ve,FE),e(FE,Pve),e(Pve,l0r),e(FE,i0r),e(FE,uz),e(uz,d0r),e(FE,c0r),e(ve,f0r),e(ve,CE),e(CE,$ve),e($ve,m0r),e(CE,g0r),e(CE,bz),e(bz,h0r),e(CE,p0r),e(ve,_0r),e(ve,ME),e(ME,Ive),e(Ive,u0r),e(ME,b0r),e(ME,vz),e(vz,v0r),e(ME,T0r),e(ve,F0r),e(ve,EE),e(EE,Nve),e(Nve,C0r),e(EE,M0r),e(EE,Tz),e(Tz,E0r),e(EE,y0r),e(ve,w0r),e(ve,yE),e(yE,Dve),e(Dve,A0r),e(yE,L0r),e(yE,Fz),e(Fz,B0r),e(yE,x0r),e(ve,k0r),e(ve,wE),e(wE,jve),e(jve,R0r),e(wE,S0r),e(wE,Cz),e(Cz,P0r),e(wE,$0r),e(ve,I0r),e(ve,AE),e(AE,qve),e(qve,N0r),e(AE,D0r),e(AE,Mz),e(Mz,j0r),e(AE,q0r),e(Ro,G0r),e(Ro,Gve),e(Gve,O0r),e(Ro,X0r),g(p7,Ro,null),b(c,nSe,u),b(c,_f,u),e(_f,LE),e(LE,Ove),g(_7,Ove,null),e(_f,V0r),e(_f,Xve),e(Xve,z0r),b(c,sSe,u),b(c,Dr,u),g(u7,Dr,null),e(Dr,W0r),e(Dr,uf),e(uf,Q0r),e(uf,Vve),e(Vve,H0r),e(uf,U0r),e(uf,zve),e(zve,J0r),e(uf,Y0r),e(Dr,K0r),e(Dr,b7),e(b7,Z0r),e(b7,Wve),e(Wve,eLr),e(b7,oLr),e(Dr,rLr),e(Dr,Rt),g(v7,Rt,null),e(Rt,tLr),e(Rt,Qve),e(Qve,aLr),e(Rt,nLr),e(Rt,bf),e(bf,sLr),e(bf,Hve),e(Hve,lLr),e(bf,iLr),e(bf,Uve),e(Uve,dLr),e(bf,cLr),e(Rt,fLr),e(Rt,Jve),e(Jve,mLr),e(Rt,gLr),g(T7,Rt,null),e(Dr,hLr),e(Dr,So),g(F7,So,null),e(So,pLr),e(So,Yve),e(Yve,_Lr),e(So,uLr),e(So,$n),e($n,bLr),e($n,Kve),e(Kve,vLr),e($n,TLr),e($n,Zve),e(Zve,FLr),e($n,CLr),e($n,eTe),e(eTe,MLr),e($n,ELr),e(So,yLr),e(So,Te),e(Te,BE),e(BE,oTe),e(oTe,wLr),e(BE,ALr),e(BE,Ez),e(Ez,LLr),e(BE,BLr),e(Te,xLr),e(Te,xE),e(xE,rTe),e(rTe,kLr),e(xE,RLr),e(xE,yz),e(yz,SLr),e(xE,PLr),e(Te,$Lr),e(Te,kE),e(kE,tTe),e(tTe,ILr),e(kE,NLr),e(kE,wz),e(wz,DLr),e(kE,jLr),e(Te,qLr),e(Te,RE),e(RE,aTe),e(aTe,GLr),e(RE,OLr),e(RE,Az),e(Az,XLr),e(RE,VLr),e(Te,zLr),e(Te,SE),e(SE,nTe),e(nTe,WLr),e(SE,QLr),e(SE,Lz),e(Lz,HLr),e(SE,ULr),e(Te,JLr),e(Te,PE),e(PE,sTe),e(sTe,YLr),e(PE,KLr),e(PE,Bz),e(Bz,ZLr),e(PE,e7r),e(Te,o7r),e(Te,$E),e($E,lTe),e(lTe,r7r),e($E,t7r),e($E,xz),e(xz,a7r),e($E,n7r),e(Te,s7r),e(Te,IE),e(IE,iTe),e(iTe,l7r),e(IE,i7r),e(IE,kz),e(kz,d7r),e(IE,c7r),e(Te,f7r),e(Te,NE),e(NE,dTe),e(dTe,m7r),e(NE,g7r),e(NE,Rz),e(Rz,h7r),e(NE,p7r),e(Te,_7r),e(Te,DE),e(DE,cTe),e(cTe,u7r),e(DE,b7r),e(DE,Sz),e(Sz,v7r),e(DE,T7r),e(So,F7r),e(So,fTe),e(fTe,C7r),e(So,M7r),g(C7,So,null),b(c,lSe,u),b(c,vf,u),e(vf,jE),e(jE,mTe),g(M7,mTe,null),e(vf,E7r),e(vf,gTe),e(gTe,y7r),b(c,iSe,u),b(c,jr,u),g(E7,jr,null),e(jr,w7r),e(jr,Tf),e(Tf,A7r),e(Tf,hTe),e(hTe,L7r),e(Tf,B7r),e(Tf,pTe),e(pTe,x7r),e(Tf,k7r),e(jr,R7r),e(jr,y7),e(y7,S7r),e(y7,_Te),e(_Te,P7r),e(y7,$7r),e(jr,I7r),e(jr,St),g(w7,St,null),e(St,N7r),e(St,uTe),e(uTe,D7r),e(St,j7r),e(St,Ff),e(Ff,q7r),e(Ff,bTe),e(bTe,G7r),e(Ff,O7r),e(Ff,vTe),e(vTe,X7r),e(Ff,V7r),e(St,z7r),e(St,TTe),e(TTe,W7r),e(St,Q7r),g(A7,St,null),e(jr,H7r),e(jr,Po),g(L7,Po,null),e(Po,U7r),e(Po,FTe),e(FTe,J7r),e(Po,Y7r),e(Po,In),e(In,K7r),e(In,CTe),e(CTe,Z7r),e(In,e8r),e(In,MTe),e(MTe,o8r),e(In,r8r),e(In,ETe),e(ETe,t8r),e(In,a8r),e(Po,n8r),e(Po,Se),e(Se,qE),e(qE,yTe),e(yTe,s8r),e(qE,l8r),e(qE,Pz),e(Pz,i8r),e(qE,d8r),e(Se,c8r),e(Se,GE),e(GE,wTe),e(wTe,f8r),e(GE,m8r),e(GE,$z),e($z,g8r),e(GE,h8r),e(Se,p8r),e(Se,OE),e(OE,ATe),e(ATe,_8r),e(OE,u8r),e(OE,Iz),e(Iz,b8r),e(OE,v8r),e(Se,T8r),e(Se,XE),e(XE,LTe),e(LTe,F8r),e(XE,C8r),e(XE,Nz),e(Nz,M8r),e(XE,E8r),e(Se,y8r),e(Se,VE),e(VE,BTe),e(BTe,w8r),e(VE,A8r),e(VE,Dz),e(Dz,L8r),e(VE,B8r),e(Se,x8r),e(Se,zE),e(zE,xTe),e(xTe,k8r),e(zE,R8r),e(zE,jz),e(jz,S8r),e(zE,P8r),e(Se,$8r),e(Se,WE),e(WE,kTe),e(kTe,I8r),e(WE,N8r),e(WE,qz),e(qz,D8r),e(WE,j8r),e(Se,q8r),e(Se,QE),e(QE,RTe),e(RTe,G8r),e(QE,O8r),e(QE,Gz),e(Gz,X8r),e(QE,V8r),e(Po,z8r),e(Po,STe),e(STe,W8r),e(Po,Q8r),g(B7,Po,null),b(c,dSe,u),b(c,Cf,u),e(Cf,HE),e(HE,PTe),g(x7,PTe,null),e(Cf,H8r),e(Cf,$Te),e($Te,U8r),b(c,cSe,u),b(c,qr,u),g(k7,qr,null),e(qr,J8r),e(qr,Mf),e(Mf,Y8r),e(Mf,ITe),e(ITe,K8r),e(Mf,Z8r),e(Mf,NTe),e(NTe,e9r),e(Mf,o9r),e(qr,r9r),e(qr,R7),e(R7,t9r),e(R7,DTe),e(DTe,a9r),e(R7,n9r),e(qr,s9r),e(qr,Pt),g(S7,Pt,null),e(Pt,l9r),e(Pt,jTe),e(jTe,i9r),e(Pt,d9r),e(Pt,Ef),e(Ef,c9r),e(Ef,qTe),e(qTe,f9r),e(Ef,m9r),e(Ef,GTe),e(GTe,g9r),e(Ef,h9r),e(Pt,p9r),e(Pt,OTe),e(OTe,_9r),e(Pt,u9r),g(P7,Pt,null),e(qr,b9r),e(qr,$o),g($7,$o,null),e($o,v9r),e($o,XTe),e(XTe,T9r),e($o,F9r),e($o,Nn),e(Nn,C9r),e(Nn,VTe),e(VTe,M9r),e(Nn,E9r),e(Nn,zTe),e(zTe,y9r),e(Nn,w9r),e(Nn,WTe),e(WTe,A9r),e(Nn,L9r),e($o,B9r),e($o,Pe),e(Pe,UE),e(UE,QTe),e(QTe,x9r),e(UE,k9r),e(UE,Oz),e(Oz,R9r),e(UE,S9r),e(Pe,P9r),e(Pe,JE),e(JE,HTe),e(HTe,$9r),e(JE,I9r),e(JE,Xz),e(Xz,N9r),e(JE,D9r),e(Pe,j9r),e(Pe,YE),e(YE,UTe),e(UTe,q9r),e(YE,G9r),e(YE,Vz),e(Vz,O9r),e(YE,X9r),e(Pe,V9r),e(Pe,KE),e(KE,JTe),e(JTe,z9r),e(KE,W9r),e(KE,zz),e(zz,Q9r),e(KE,H9r),e(Pe,U9r),e(Pe,ZE),e(ZE,YTe),e(YTe,J9r),e(ZE,Y9r),e(ZE,Wz),e(Wz,K9r),e(ZE,Z9r),e(Pe,eBr),e(Pe,e3),e(e3,KTe),e(KTe,oBr),e(e3,rBr),e(e3,Qz),e(Qz,tBr),e(e3,aBr),e(Pe,nBr),e(Pe,o3),e(o3,ZTe),e(ZTe,sBr),e(o3,lBr),e(o3,Hz),e(Hz,iBr),e(o3,dBr),e(Pe,cBr),e(Pe,r3),e(r3,eFe),e(eFe,fBr),e(r3,mBr),e(r3,Uz),e(Uz,gBr),e(r3,hBr),e($o,pBr),e($o,oFe),e(oFe,_Br),e($o,uBr),g(I7,$o,null),b(c,fSe,u),b(c,yf,u),e(yf,t3),e(t3,rFe),g(N7,rFe,null),e(yf,bBr),e(yf,tFe),e(tFe,vBr),b(c,mSe,u),b(c,Gr,u),g(D7,Gr,null),e(Gr,TBr),e(Gr,wf),e(wf,FBr),e(wf,aFe),e(aFe,CBr),e(wf,MBr),e(wf,nFe),e(nFe,EBr),e(wf,yBr),e(Gr,wBr),e(Gr,j7),e(j7,ABr),e(j7,sFe),e(sFe,LBr),e(j7,BBr),e(Gr,xBr),e(Gr,$t),g(q7,$t,null),e($t,kBr),e($t,lFe),e(lFe,RBr),e($t,SBr),e($t,Af),e(Af,PBr),e(Af,iFe),e(iFe,$Br),e(Af,IBr),e(Af,dFe),e(dFe,NBr),e(Af,DBr),e($t,jBr),e($t,cFe),e(cFe,qBr),e($t,GBr),g(G7,$t,null),e(Gr,OBr),e(Gr,Io),g(O7,Io,null),e(Io,XBr),e(Io,fFe),e(fFe,VBr),e(Io,zBr),e(Io,Dn),e(Dn,WBr),e(Dn,mFe),e(mFe,QBr),e(Dn,HBr),e(Dn,gFe),e(gFe,UBr),e(Dn,JBr),e(Dn,hFe),e(hFe,YBr),e(Dn,KBr),e(Io,ZBr),e(Io,pFe),e(pFe,a3),e(a3,_Fe),e(_Fe,exr),e(a3,oxr),e(a3,Jz),e(Jz,rxr),e(a3,txr),e(Io,axr),e(Io,uFe),e(uFe,nxr),e(Io,sxr),g(X7,Io,null),b(c,gSe,u),b(c,Lf,u),e(Lf,n3),e(n3,bFe),g(V7,bFe,null),e(Lf,lxr),e(Lf,vFe),e(vFe,ixr),b(c,hSe,u),b(c,Or,u),g(z7,Or,null),e(Or,dxr),e(Or,Bf),e(Bf,cxr),e(Bf,TFe),e(TFe,fxr),e(Bf,mxr),e(Bf,FFe),e(FFe,gxr),e(Bf,hxr),e(Or,pxr),e(Or,W7),e(W7,_xr),e(W7,CFe),e(CFe,uxr),e(W7,bxr),e(Or,vxr),e(Or,It),g(Q7,It,null),e(It,Txr),e(It,MFe),e(MFe,Fxr),e(It,Cxr),e(It,xf),e(xf,Mxr),e(xf,EFe),e(EFe,Exr),e(xf,yxr),e(xf,yFe),e(yFe,wxr),e(xf,Axr),e(It,Lxr),e(It,wFe),e(wFe,Bxr),e(It,xxr),g(H7,It,null),e(Or,kxr),e(Or,No),g(U7,No,null),e(No,Rxr),e(No,AFe),e(AFe,Sxr),e(No,Pxr),e(No,jn),e(jn,$xr),e(jn,LFe),e(LFe,Ixr),e(jn,Nxr),e(jn,BFe),e(BFe,Dxr),e(jn,jxr),e(jn,xFe),e(xFe,qxr),e(jn,Gxr),e(No,Oxr),e(No,J7),e(J7,s3),e(s3,kFe),e(kFe,Xxr),e(s3,Vxr),e(s3,Yz),e(Yz,zxr),e(s3,Wxr),e(J7,Qxr),e(J7,l3),e(l3,RFe),e(RFe,Hxr),e(l3,Uxr),e(l3,Kz),e(Kz,Jxr),e(l3,Yxr),e(No,Kxr),e(No,SFe),e(SFe,Zxr),e(No,ekr),g(Y7,No,null),b(c,pSe,u),b(c,kf,u),e(kf,i3),e(i3,PFe),g(K7,PFe,null),e(kf,okr),e(kf,$Fe),e($Fe,rkr),b(c,_Se,u),b(c,Xr,u),g(Z7,Xr,null),e(Xr,tkr),e(Xr,Rf),e(Rf,akr),e(Rf,IFe),e(IFe,nkr),e(Rf,skr),e(Rf,NFe),e(NFe,lkr),e(Rf,ikr),e(Xr,dkr),e(Xr,e8),e(e8,ckr),e(e8,DFe),e(DFe,fkr),e(e8,mkr),e(Xr,gkr),e(Xr,Nt),g(o8,Nt,null),e(Nt,hkr),e(Nt,jFe),e(jFe,pkr),e(Nt,_kr),e(Nt,Sf),e(Sf,ukr),e(Sf,qFe),e(qFe,bkr),e(Sf,vkr),e(Sf,GFe),e(GFe,Tkr),e(Sf,Fkr),e(Nt,Ckr),e(Nt,OFe),e(OFe,Mkr),e(Nt,Ekr),g(r8,Nt,null),e(Xr,ykr),e(Xr,Do),g(t8,Do,null),e(Do,wkr),e(Do,XFe),e(XFe,Akr),e(Do,Lkr),e(Do,qn),e(qn,Bkr),e(qn,VFe),e(VFe,xkr),e(qn,kkr),e(qn,zFe),e(zFe,Rkr),e(qn,Skr),e(qn,WFe),e(WFe,Pkr),e(qn,$kr),e(Do,Ikr),e(Do,QFe),e(QFe,d3),e(d3,HFe),e(HFe,Nkr),e(d3,Dkr),e(d3,Zz),e(Zz,jkr),e(d3,qkr),e(Do,Gkr),e(Do,UFe),e(UFe,Okr),e(Do,Xkr),g(a8,Do,null),uSe=!0},p(c,[u]){const n8={};u&2&&(n8.$$scope={dirty:u,ctx:c}),Gf.$set(n8);const JFe={};u&2&&(JFe.$$scope={dirty:u,ctx:c}),Rh.$set(JFe);const YFe={};u&2&&(YFe.$$scope={dirty:u,ctx:c}),Xh.$set(YFe)},i(c){uSe||(h(me.$$.fragment,c),h(qa.$$.fragment,c),h(g5.$$.fragment,c),h(h5.$$.fragment,c),h(Gf.$$.fragment,c),h(p5.$$.fragment,c),h(_5.$$.fragment,c),h(v5.$$.fragment,c),h(T5.$$.fragment,c),h(F5.$$.fragment,c),h(C5.$$.fragment,c),h(M5.$$.fragment,c),h(w5.$$.fragment,c),h(A5.$$.fragment,c),h(L5.$$.fragment,c),h(B5.$$.fragment,c),h(x5.$$.fragment,c),h(S5.$$.fragment,c),h(Rh.$$.fragment,c),h(P5.$$.fragment,c),h($5.$$.fragment,c),h(I5.$$.fragment,c),h(N5.$$.fragment,c),h(q5.$$.fragment,c),h(Xh.$$.fragment,c),h(G5.$$.fragment,c),h(O5.$$.fragment,c),h(X5.$$.fragment,c),h(V5.$$.fragment,c),h(W5.$$.fragment,c),h(Q5.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(J5.$$.fragment,c),h(Y5.$$.fragment,c),h(Z5.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(Ty.$$.fragment,c),h(Fy.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(yy.$$.fragment,c),h(Ay.$$.fragment,c),h(Ly.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(Ny.$$.fragment,c),h(Dy.$$.fragment,c),h(jy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Cw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Bw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h(Iw.$$.fragment,c),h(Nw.$$.fragment,c),h(Dw.$$.fragment,c),h(jw.$$.fragment,c),h(qw.$$.fragment,c),h(Gw.$$.fragment,c),h(Xw.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(MA.$$.fragment,c),h(yA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(RA.$$.fragment,c),h(SA.$$.fragment,c),h(PA.$$.fragment,c),h(IA.$$.fragment,c),h(NA.$$.fragment,c),h(DA.$$.fragment,c),h(qA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(C0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(y0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(B0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(R0.$$.fragment,c),h(S0.$$.fragment,c),h(P0.$$.fragment,c),h(I0.$$.fragment,c),h(N0.$$.fragment,c),h(D0.$$.fragment,c),h(j0.$$.fragment,c),h(q0.$$.fragment,c),h(G0.$$.fragment,c),h(X0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(W0.$$.fragment,c),h(Q0.$$.fragment,c),h(H0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(FL.$$.fragment,c),h(CL.$$.fragment,c),h(EL.$$.fragment,c),h(yL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(LL.$$.fragment,c),h(BL.$$.fragment,c),h(kL.$$.fragment,c),h(RL.$$.fragment,c),h(SL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(DL.$$.fragment,c),h(jL.$$.fragment,c),h(qL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(XL.$$.fragment,c),h(zL.$$.fragment,c),h(WL.$$.fragment,c),h(QL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(e7.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(t7.$$.fragment,c),h(n7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),h(i7.$$.fragment,c),h(d7.$$.fragment,c),h(c7.$$.fragment,c),h(m7.$$.fragment,c),h(g7.$$.fragment,c),h(h7.$$.fragment,c),h(p7.$$.fragment,c),h(_7.$$.fragment,c),h(u7.$$.fragment,c),h(v7.$$.fragment,c),h(T7.$$.fragment,c),h(F7.$$.fragment,c),h(C7.$$.fragment,c),h(M7.$$.fragment,c),h(E7.$$.fragment,c),h(w7.$$.fragment,c),h(A7.$$.fragment,c),h(L7.$$.fragment,c),h(B7.$$.fragment,c),h(x7.$$.fragment,c),h(k7.$$.fragment,c),h(S7.$$.fragment,c),h(P7.$$.fragment,c),h($7.$$.fragment,c),h(I7.$$.fragment,c),h(N7.$$.fragment,c),h(D7.$$.fragment,c),h(q7.$$.fragment,c),h(G7.$$.fragment,c),h(O7.$$.fragment,c),h(X7.$$.fragment,c),h(V7.$$.fragment,c),h(z7.$$.fragment,c),h(Q7.$$.fragment,c),h(H7.$$.fragment,c),h(U7.$$.fragment,c),h(Y7.$$.fragment,c),h(K7.$$.fragment,c),h(Z7.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(a8.$$.fragment,c),uSe=!0)},o(c){p(me.$$.fragment,c),p(qa.$$.fragment,c),p(g5.$$.fragment,c),p(h5.$$.fragment,c),p(Gf.$$.fragment,c),p(p5.$$.fragment,c),p(_5.$$.fragment,c),p(v5.$$.fragment,c),p(T5.$$.fragment,c),p(F5.$$.fragment,c),p(C5.$$.fragment,c),p(M5.$$.fragment,c),p(w5.$$.fragment,c),p(A5.$$.fragment,c),p(L5.$$.fragment,c),p(B5.$$.fragment,c),p(x5.$$.fragment,c),p(S5.$$.fragment,c),p(Rh.$$.fragment,c),p(P5.$$.fragment,c),p($5.$$.fragment,c),p(I5.$$.fragment,c),p(N5.$$.fragment,c),p(q5.$$.fragment,c),p(Xh.$$.fragment,c),p(G5.$$.fragment,c),p(O5.$$.fragment,c),p(X5.$$.fragment,c),p(V5.$$.fragment,c),p(W5.$$.fragment,c),p(Q5.$$.fragment,c),p(H5.$$.fragment,c),p(U5.$$.fragment,c),p(J5.$$.fragment,c),p(Y5.$$.fragment,c),p(Z5.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(Ty.$$.fragment,c),p(Fy.$$.fragment,c),p(Cy.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(yy.$$.fragment,c),p(Ay.$$.fragment,c),p(Ly.$$.fragment,c),p(By.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Ry.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(Ny.$$.fragment,c),p(Dy.$$.fragment,c),p(jy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Xy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Cw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(yw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Bw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Rw.$$.fragment,c),p(Sw.$$.fragment,c),p(Pw.$$.fragment,c),p(Iw.$$.fragment,c),p(Nw.$$.fragment,c),p(Dw.$$.fragment,c),p(jw.$$.fragment,c),p(qw.$$.fragment,c),p(Gw.$$.fragment,c),p(Xw.$$.fragment,c),p(Vw.$$.fragment,c),p(zw.$$.fragment,c),p(Ww.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(FA.$$.fragment,c),p(CA.$$.fragment,c),p(MA.$$.fragment,c),p(yA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(LA.$$.fragment,c),p(BA.$$.fragment,c),p(xA.$$.fragment,c),p(RA.$$.fragment,c),p(SA.$$.fragment,c),p(PA.$$.fragment,c),p(IA.$$.fragment,c),p(NA.$$.fragment,c),p(DA.$$.fragment,c),p(qA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(XA.$$.fragment,c),p(VA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(b0.$$.fragment,c),p(v0.$$.fragment,c),p(T0.$$.fragment,c),p(C0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(y0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(B0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(R0.$$.fragment,c),p(S0.$$.fragment,c),p(P0.$$.fragment,c),p(I0.$$.fragment,c),p(N0.$$.fragment,c),p(D0.$$.fragment,c),p(j0.$$.fragment,c),p(q0.$$.fragment,c),p(G0.$$.fragment,c),p(X0.$$.fragment,c),p(V0.$$.fragment,c),p(z0.$$.fragment,c),p(W0.$$.fragment,c),p(Q0.$$.fragment,c),p(H0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(FL.$$.fragment,c),p(CL.$$.fragment,c),p(EL.$$.fragment,c),p(yL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(LL.$$.fragment,c),p(BL.$$.fragment,c),p(kL.$$.fragment,c),p(RL.$$.fragment,c),p(SL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(IL.$$.fragment,c),p(DL.$$.fragment,c),p(jL.$$.fragment,c),p(qL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(XL.$$.fragment,c),p(zL.$$.fragment,c),p(WL.$$.fragment,c),p(QL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(JL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(e7.$$.fragment,c),p(o7.$$.fragment,c),p(r7.$$.fragment,c),p(t7.$$.fragment,c),p(n7.$$.fragment,c),p(s7.$$.fragment,c),p(l7.$$.fragment,c),p(i7.$$.fragment,c),p(d7.$$.fragment,c),p(c7.$$.fragment,c),p(m7.$$.fragment,c),p(g7.$$.fragment,c),p(h7.$$.fragment,c),p(p7.$$.fragment,c),p(_7.$$.fragment,c),p(u7.$$.fragment,c),p(v7.$$.fragment,c),p(T7.$$.fragment,c),p(F7.$$.fragment,c),p(C7.$$.fragment,c),p(M7.$$.fragment,c),p(E7.$$.fragment,c),p(w7.$$.fragment,c),p(A7.$$.fragment,c),p(L7.$$.fragment,c),p(B7.$$.fragment,c),p(x7.$$.fragment,c),p(k7.$$.fragment,c),p(S7.$$.fragment,c),p(P7.$$.fragment,c),p($7.$$.fragment,c),p(I7.$$.fragment,c),p(N7.$$.fragment,c),p(D7.$$.fragment,c),p(q7.$$.fragment,c),p(G7.$$.fragment,c),p(O7.$$.fragment,c),p(X7.$$.fragment,c),p(V7.$$.fragment,c),p(z7.$$.fragment,c),p(Q7.$$.fragment,c),p(H7.$$.fragment,c),p(U7.$$.fragment,c),p(Y7.$$.fragment,c),p(K7.$$.fragment,c),p(Z7.$$.fragment,c),p(o8.$$.fragment,c),p(r8.$$.fragment,c),p(t8.$$.fragment,c),p(a8.$$.fragment,c),uSe=!1},d(c){t(K),c&&t(io),c&&t(de),_(me),c&&t(If),c&&t(fa),c&&t(Be),c&&t(co),c&&t(Df),_(qa,c),c&&t(fo),c&&t(_e),c&&t(zo),c&&t(Ga),c&&t(_ke),c&&t(Xi),_(g5),c&&t(uke),c&&t(zn),c&&t(bke),_(h5,c),c&&t(vke),c&&t(l9),c&&t(Tke),_(Gf,c),c&&t(Fke),c&&t(Vi),_(p5),c&&t(Cke),c&&t(Wo),_(_5),_(v5),_(T5),_(F5),c&&t(Mke),c&&t(Wi),_(C5),c&&t(Eke),c&&t(Qo),_(M5),_(w5),_(A5),_(L5),c&&t(yke),c&&t(Qi),_(B5),c&&t(wke),c&&t(Ho),_(x5),_(S5),_(Rh),_(P5),_($5),c&&t(Ake),c&&t(Hi),_(I5),c&&t(Lke),c&&t(Uo),_(N5),_(q5),_(Xh),_(G5),_(O5),c&&t(Bke),c&&t(Ji),_(X5),c&&t(xke),c&&t(Jo),_(V5),_(W5),_(Q5),_(H5),_(U5),c&&t(kke),c&&t(Zi),_(J5),c&&t(Rke),c&&t(Yo),_(Y5),_(Z5),_(ey),_(oy),_(ry),c&&t(Ske),c&&t(rd),_(ty),c&&t(Pke),c&&t(Ko),_(ay),_(sy),_(ly),_(iy),_(dy),c&&t($ke),c&&t(nd),_(cy),c&&t(Ike),c&&t(Zo),_(fy),_(gy),_(hy),_(py),_(_y),c&&t(Nke),c&&t(id),_(uy),c&&t(Dke),c&&t(er),_(by),_(Ty),_(Fy),_(Cy),_(My),c&&t(jke),c&&t(fd),_(Ey),c&&t(qke),c&&t(or),_(yy),_(Ay),_(Ly),_(By),_(xy),c&&t(Gke),c&&t(hd),_(ky),c&&t(Oke),c&&t(rr),_(Ry),_(Py),_($y),_(Iy),_(Ny),c&&t(Xke),c&&t(ud),_(Dy),c&&t(Vke),c&&t(tr),_(jy),_(Gy),_(Oy),_(Xy),_(Vy),c&&t(zke),c&&t(Td),_(zy),c&&t(Wke),c&&t(ar),_(Wy),_(Hy),_(Uy),_(Jy),_(Yy),c&&t(Qke),c&&t(Md),_(Ky),c&&t(Hke),c&&t(nr),_(Zy),_(ow),_(rw),_(tw),_(aw),c&&t(Uke),c&&t(wd),_(nw),c&&t(Jke),c&&t(sr),_(sw),_(iw),_(dw),_(cw),_(fw),c&&t(Yke),c&&t(Bd),_(mw),c&&t(Kke),c&&t(lr),_(gw),_(pw),_(_w),_(uw),_(bw),c&&t(Zke),c&&t(Rd),_(vw),c&&t(eRe),c&&t(ir),_(Tw),_(Cw),_(Mw),_(Ew),_(yw),c&&t(oRe),c&&t($d),_(ww),c&&t(rRe),c&&t(dr),_(Aw),_(Bw),_(xw),_(kw),_(Rw),c&&t(tRe),c&&t(Dd),_(Sw),c&&t(aRe),c&&t(cr),_(Pw),_(Iw),_(Nw),_(Dw),_(jw),c&&t(nRe),c&&t(Gd),_(qw),c&&t(sRe),c&&t(fr),_(Gw),_(Xw),_(Vw),_(zw),_(Ww),c&&t(lRe),c&&t(Vd),_(Qw),c&&t(iRe),c&&t(mr),_(Hw),_(Jw),_(Yw),_(Kw),_(eA),c&&t(dRe),c&&t(Qd),_(oA),c&&t(cRe),c&&t(gr),_(rA),_(aA),_(nA),_(sA),_(lA),c&&t(fRe),c&&t(Jd),_(iA),c&&t(mRe),c&&t(hr),_(dA),_(fA),_(mA),_(gA),_(hA),c&&t(gRe),c&&t(ec),_(pA),c&&t(hRe),c&&t(pr),_(_A),_(bA),_(vA),_(TA),_(FA),c&&t(pRe),c&&t(tc),_(CA),c&&t(_Re),c&&t(_r),_(MA),_(yA),_(wA),_(AA),_(LA),c&&t(uRe),c&&t(sc),_(BA),c&&t(bRe),c&&t(ur),_(xA),_(RA),_(SA),_(PA),_(IA),c&&t(vRe),c&&t(dc),_(NA),c&&t(TRe),c&&t(br),_(DA),_(qA),_(GA),_(OA),_(XA),c&&t(FRe),c&&t(mc),_(VA),c&&t(CRe),c&&t(vr),_(zA),_(QA),_(HA),_(UA),_(JA),c&&t(MRe),c&&t(pc),_(YA),c&&t(ERe),c&&t(Tr),_(KA),_(e0),_(o0),_(r0),_(t0),c&&t(yRe),c&&t(bc),_(a0),c&&t(wRe),c&&t(Fr),_(n0),_(l0),_(i0),_(d0),_(c0),c&&t(ARe),c&&t(Fc),_(f0),c&&t(LRe),c&&t(Cr),_(m0),_(h0),_(p0),_(_0),_(b0),c&&t(BRe),c&&t(Ec),_(v0),c&&t(xRe),c&&t(Mr),_(T0),_(C0),_(M0),_(E0),_(y0),c&&t(kRe),c&&t(Ac),_(w0),c&&t(RRe),c&&t(Er),_(A0),_(B0),_(x0),_(k0),_(R0),c&&t(SRe),c&&t(xc),_(S0),c&&t(PRe),c&&t(yr),_(P0),_(I0),_(N0),_(D0),_(j0),c&&t($Re),c&&t(Sc),_(q0),c&&t(IRe),c&&t(wr),_(G0),_(X0),_(V0),_(z0),_(W0),c&&t(NRe),c&&t(Ic),_(Q0),c&&t(DRe),c&&t(Ar),_(H0),_(J0),_(Y0),_(K0),_(Z0),c&&t(jRe),c&&t(jc),_(eL),c&&t(qRe),c&&t(Lr),_(oL),_(tL),_(aL),_(nL),_(sL),c&&t(GRe),c&&t(Oc),_(lL),c&&t(ORe),c&&t(Br),_(iL),_(cL),_(fL),_(mL),_(gL),c&&t(XRe),c&&t(zc),_(hL),c&&t(VRe),c&&t(xr),_(pL),_(uL),_(bL),_(vL),_(TL),c&&t(zRe),c&&t(Hc),_(FL),c&&t(WRe),c&&t(kr),_(CL),_(EL),_(yL),_(wL),_(AL),c&&t(QRe),c&&t(Yc),_(LL),c&&t(HRe),c&&t(Rr),_(BL),_(kL),_(RL),_(SL),_(PL),c&&t(URe),c&&t(ef),_($L),c&&t(JRe),c&&t(Sr),_(IL),_(DL),_(jL),_(qL),_(GL),c&&t(YRe),c&&t(tf),_(OL),c&&t(KRe),c&&t(Pr),_(XL),_(zL),_(WL),_(QL),_(HL),c&&t(ZRe),c&&t(sf),_(UL),c&&t(eSe),c&&t($r),_(JL),_(KL),_(ZL),_(e7),_(o7),c&&t(oSe),c&&t(cf),_(r7),c&&t(rSe),c&&t(Ir),_(t7),_(n7),_(s7),_(l7),_(i7),c&&t(tSe),c&&t(gf),_(d7),c&&t(aSe),c&&t(Nr),_(c7),_(m7),_(g7),_(h7),_(p7),c&&t(nSe),c&&t(_f),_(_7),c&&t(sSe),c&&t(Dr),_(u7),_(v7),_(T7),_(F7),_(C7),c&&t(lSe),c&&t(vf),_(M7),c&&t(iSe),c&&t(jr),_(E7),_(w7),_(A7),_(L7),_(B7),c&&t(dSe),c&&t(Cf),_(x7),c&&t(cSe),c&&t(qr),_(k7),_(S7),_(P7),_($7),_(I7),c&&t(fSe),c&&t(yf),_(N7),c&&t(mSe),c&&t(Gr),_(D7),_(q7),_(G7),_(O7),_(X7),c&&t(gSe),c&&t(Lf),_(V7),c&&t(hSe),c&&t(Or),_(z7),_(Q7),_(H7),_(U7),_(Y7),c&&t(pSe),c&&t(kf),_(K7),c&&t(_Se),c&&t(Xr),_(Z7),_(o8),_(r8),_(t8),_(a8)}}}const aEt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function nEt($f){return Z4t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class fEt extends U4t{constructor(K){super();J4t(this,K,nEt,tEt,Y4t,{})}}export{fEt as default,aEt as metadata};
