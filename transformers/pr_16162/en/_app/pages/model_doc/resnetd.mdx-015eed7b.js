import{S as jo,i as To,s as Fo,e as o,k as c,w,t as n,M as Mo,c as a,d as s,m as h,a as r,x as b,h as i,b as l,F as t,g as p,y as $,q as y,o as N,B as D,v as Io}from"../../chunks/vendor-6b77c823.js";import{T as Co}from"../../chunks/Tip-39098574.js";import{D as Ye}from"../../chunks/Docstring-abef54e3.js";import{C as Hs}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as et}from"../../chunks/IconCopyLink-7a11ce68.js";function Ao(be){let f,j,m,_,x;return{c(){f=o("p"),j=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),m=o("code"),_=n("Module"),x=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(u){f=a(u,"P",{});var g=r(f);j=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),m=a(g,"CODE",{});var T=r(m);_=i(T,"Module"),T.forEach(s),x=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(s)},m(u,g){p(u,f,g),t(f,j),t(f,m),t(m,_),t(f,x)},d(u){u&&s(f)}}}function Po(be){let f,j,m,_,x;return{c(){f=o("p"),j=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),m=o("code"),_=n("Module"),x=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(u){f=a(u,"P",{});var g=r(f);j=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),m=a(g,"CODE",{});var T=r(m);_=i(T,"Module"),T.forEach(s),x=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(s)},m(u,g){p(u,f,g),t(f,j),t(f,m),t(m,_),t(f,x)},d(u){u&&s(f)}}}function ko(be){let f,j,m,_,x,u,g,T,Et,tt,P,H,ke,Y,xt,qe,Ct,st,Z,jt,ee,Tt,Ft,ot,B,Mt,ze,It,At,at,$e,Pt,rt,ye,Oe,kt,nt,Ne,qt,it,De,te,zt,Re,Ot,St,lt,U,Lt,se,Wt,Ht,dt,k,V,Se,oe,Zt,Le,Bt,ct,v,ae,Ut,q,Vt,Ee,Jt,Xt,re,Gt,Kt,Qt,z,Yt,xe,es,ts,Ce,ss,os,as,We,rs,ns,ne,ht,O,J,He,ie,is,Ze,ls,pt,F,le,ds,de,cs,ce,hs,ps,fs,R,he,ms,S,us,je,gs,_s,Be,vs,ws,bs,X,$s,Ue,ys,Ns,pe,ft,L,G,Ve,fe,Ds,Je,Rs,mt,C,me,Es,Xe,xs,Cs,ue,js,ge,Ts,Fs,Ms,E,_e,Is,W,As,Te,Ps,ks,Ge,qs,zs,Os,K,Ss,Ke,Ls,Ws,ve,ut;return u=new et({}),Y=new et({}),oe=new et({}),ae=new Ye({props:{name:"class transformers.ResNetDConfig",anchor:"transformers.ResNetDConfig",parameters:[{name:"num_channels",val:" = 3"},{name:"embedding_size",val:" = 64"},{name:"hidden_sizes",val:" = [256, 512, 1024, 2048]"},{name:"depths",val:" = [3, 4, 6, 3]"},{name:"layer_type",val:" = 'bottleneck'"},{name:"hidden_act",val:" = 'relu'"},{name:"downsample_in_first_stage",val:" = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/resnetd/configuration_resnetd.py#L28",parametersDescription:[{anchor:"transformers.ResNetDConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.ResNetDConfig.embedding_size",description:`<strong>embedding_size</strong> (<code>int</code>, <em>optional</em>, defaults to 64) &#x2014;
Dimensionality (hidden size) for the embedding layer.`,name:"embedding_size"},{anchor:"transformers.ResNetDConfig.hidden_sizes",description:`<strong>hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[256, 512, 1024, 2048]</code>) &#x2014;
Dimensionality (hidden size) at each stage.`,name:"hidden_sizes"},{anchor:"transformers.ResNetDConfig.depths",description:`<strong>depths</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[3, 4, 6, 3]</code>) &#x2014;
Depth (number of layers) for each stage.`,name:"depths"},{anchor:"transformers.ResNetDConfig.layer_type",description:`<strong>layer_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;bottleneck&quot;</code>) &#x2014;
The layer to use, it can be either <code>&quot;basic&quot;</code> (used for smaller models, like resnetd-18 or resnetd-34) or
<code>&quot;bottleneck&quot;</code> (used for larger models like resnetd-50 and above).`,name:"layer_type"},{anchor:"transformers.ResNetDConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;relu&quot;</code>) &#x2014;
The non-linear activation function in each block. If string, <code>&quot;gelu&quot;</code>, <code>&quot;relu&quot;</code>, <code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code>
are supported.`,name:"hidden_act"},{anchor:"transformers.ResNetDConfig.downsample_in_first_stage",description:`<strong>downsample_in_first_stage</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, the first stage will downsample the inputs using a <code>stride</code> of 2.`,name:"downsample_in_first_stage"}]}}),ne=new Hs({props:{code:`from transformers import ResNetDConfig, ResNetDModel

# Initializing a ResNetD resnetd-50 style configuration
configuration = ResNetDConfig()
# Initializing a model from the resnetd-50 style configuration
model = ResNetDModel(configuration)
# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ResNetDConfig, ResNetDModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a ResNetD resnetd-50 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = ResNetDConfig()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the resnetd-50 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ResNetDModel(configuration)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),ie=new et({}),le=new Ye({props:{name:"class transformers.ResNetDModel",anchor:"transformers.ResNetDModel",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/resnetd/modeling_resnetd.py#L280",parametersDescription:[{anchor:"transformers.ResNetDModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/model_doc/resnetd#transformers.ResNetDConfig">ResNetDConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),he=new Ye({props:{name:"forward",anchor:"transformers.ResNetDModel.forward",parameters:[{name:"pixel_values",val:": Tensor"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/resnetd/modeling_resnetd.py#L290",parametersDescription:[{anchor:"transformers.ResNetDModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_16162/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.ResNetDModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ResNetDModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16162/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],returnDescription:`
<p>A <code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code>or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16162/en/model_doc/resnetd#transformers.ResNetDConfig"
>ResNetDConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state after a pooling operation on the spatial dimensions.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, num_channels, height, width)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code>or <code>tuple(torch.FloatTensor)</code></p>
`}}),X=new Co({props:{$$slots:{default:[Ao]},$$scope:{ctx:be}}}),pe=new Hs({props:{code:`from transformers import AutoFeatureExtractor, ResNetDModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = AutoFeatureExtractor.from_pretrained("zuppif/resnetd-50")
model = ResNetDModel.from_pretrained("zuppif/resnetd-50")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor, ResNetDModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;zuppif/resnetd-50&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ResNetDModel.from_pretrained(<span class="hljs-string">&quot;zuppif/resnetd-50&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">2048</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>]`}}),fe=new et({}),me=new Ye({props:{name:"class transformers.ResNetDForImageClassification",anchor:"transformers.ResNetDForImageClassification",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/resnetd/modeling_resnetd.py#L335",parametersDescription:[{anchor:"transformers.ResNetDForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16162/en/model_doc/resnetd#transformers.ResNetDConfig">ResNetDConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16162/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),_e=new Ye({props:{name:"forward",anchor:"transformers.ResNetDForImageClassification.forward",parameters:[{name:"pixel_values",val:": Tensor = None"},{name:"labels",val:": Tensor = None"},{name:"output_hidden_states",val:": bool = None"},{name:"return_dict",val:": bool = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16162/src/transformers/models/resnetd/modeling_resnetd.py#L348",parametersDescription:[{anchor:"transformers.ResNetDForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_16162/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.ResNetDForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ResNetDForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16162/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.ResNetDForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],returnDescription:`
<p>A <code>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</code>or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16162/en/model_doc/resnetd#transformers.ResNetDConfig"
>ResNetDConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also
called feature maps) of the model at the output of each stage.</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</code>or <code>tuple(torch.FloatTensor)</code></p>
`}}),K=new Co({props:{$$slots:{default:[Po]},$$scope:{ctx:be}}}),ve=new Hs({props:{code:`from transformers import AutoFeatureExtractor, ResNetDForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = AutoFeatureExtractor.from_pretrained("zuppif/resnetd-50")
model = ResNetDForImageClassification.from_pretrained("zuppif/resnetd-50")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor, ResNetDForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;zuppif/resnetd-50&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ResNetDForImageClassification.from_pretrained(<span class="hljs-string">&quot;zuppif/resnetd-50&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
<span class="hljs-string">&#x27;tabby, tabby cat&#x27;</span>`}}),{c(){f=o("meta"),j=c(),m=o("h1"),_=o("a"),x=o("span"),w(u.$$.fragment),g=c(),T=o("span"),Et=n("ResNet-D"),tt=c(),P=o("h2"),H=o("a"),ke=o("span"),w(Y.$$.fragment),xt=c(),qe=o("span"),Ct=n("Overview"),st=c(),Z=o("p"),jt=n("The resnetd model was proposed in "),ee=o("a"),Tt=n("Bag of Tricks for Image Classification with Convolutional Neural Networks"),Ft=n(" by Tong He, Zhi Zhang, Hang Zhang, Zhongyue Zhang, Junyuan Xie, Mu Li."),ot=c(),B=o("p"),Mt=n("ResNet-D is a modification on the ResNet architecture. It utilises an embedding layer (stem) composed by three "),ze=o("code"),It=n("3x3"),At=n(" convolution layers  and an average pooling in the shortcut to downsample the input."),at=c(),$e=o("p"),Pt=n("The abstract from the paper is the following:"),rt=c(),ye=o("p"),Oe=o("em"),kt=n("Much of the recent progress made in image classification research can be credited to training procedure refinements, such as changes in data augmentations and optimization methods. In the literature, however, most refinements are either briefly mentioned as implementation details or only visible in source code. In this paper, we will examine a collection of such refinements and empirically evaluate their impact on the final model accuracy through ablation study. We will show that, by combining these refinements together, we are able to improve various CNN models significantly. For example, we raise ResNet-50\u2019s top-1 validation accuracy from 75.3% to 79.29% on ImageNet. We will also demonstrate that improvement on image classification accuracy leads to better transfer learning performance in other application domains such as object detection and semantic segmentation."),nt=c(),Ne=o("p"),qt=n("Tips:"),it=c(),De=o("ul"),te=o("li"),zt=n("One can use "),Re=o("a"),Ot=n("AutoFeatureExtractor"),St=n(" to prepare images for the model."),lt=c(),U=o("p"),Lt=n("This model was contributed by "),se=o("a"),Wt=n("Francesco"),Ht=n("."),dt=c(),k=o("h2"),V=o("a"),Se=o("span"),w(oe.$$.fragment),Zt=c(),Le=o("span"),Bt=n("ResNetDConfig"),ct=c(),v=o("div"),w(ae.$$.fragment),Ut=c(),q=o("p"),Vt=n("This is the configuration class to store the configuration of a "),Ee=o("a"),Jt=n("ResNetDModel"),Xt=n(`. It is used to instantiate an
ResNetD model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the
`),re=o("a"),Gt=n("resnetd-50"),Kt=n(" architecture."),Qt=c(),z=o("p"),Yt=n("Configuration objects inherit from "),xe=o("a"),es=n("PretrainedConfig"),ts=n(` and can be used to control the model outputs. Read the
documentation from `),Ce=o("a"),ss=n("PretrainedConfig"),os=n(" for more information."),as=c(),We=o("p"),rs=n("Example:"),ns=c(),w(ne.$$.fragment),ht=c(),O=o("h2"),J=o("a"),He=o("span"),w(ie.$$.fragment),is=c(),Ze=o("span"),ls=n("ResNetDModel"),pt=c(),F=o("div"),w(le.$$.fragment),ds=c(),de=o("p"),cs=n(`The bare ResNetD model outputting raw features without any specific head on top.
This model is a PyTorch `),ce=o("a"),hs=n("torch.nn.Module"),ps=n(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),fs=c(),R=o("div"),w(he.$$.fragment),ms=c(),S=o("p"),us=n("The "),je=o("a"),gs=n("ResNetDModel"),_s=n(" forward method, overrides the "),Be=o("code"),vs=n("__call__"),ws=n(" special method."),bs=c(),w(X.$$.fragment),$s=c(),Ue=o("p"),ys=n("Example:"),Ns=c(),w(pe.$$.fragment),ft=c(),L=o("h2"),G=o("a"),Ve=o("span"),w(fe.$$.fragment),Ds=c(),Je=o("span"),Rs=n("ResNetDForImageClassification"),mt=c(),C=o("div"),w(me.$$.fragment),Es=c(),Xe=o("p"),xs=n(`ResNetD Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),Cs=c(),ue=o("p"),js=n("This model is a PyTorch "),ge=o("a"),Ts=n("torch.nn.Module"),Fs=n(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Ms=c(),E=o("div"),w(_e.$$.fragment),Is=c(),W=o("p"),As=n("The "),Te=o("a"),Ps=n("ResNetDForImageClassification"),ks=n(" forward method, overrides the "),Ge=o("code"),qs=n("__call__"),zs=n(" special method."),Os=c(),w(K.$$.fragment),Ss=c(),Ke=o("p"),Ls=n("Example:"),Ws=c(),w(ve.$$.fragment),this.h()},l(e){const d=Mo('[data-svelte="svelte-1phssyn"]',document.head);f=a(d,"META",{name:!0,content:!0}),d.forEach(s),j=h(e),m=a(e,"H1",{class:!0});var we=r(m);_=a(we,"A",{id:!0,class:!0,href:!0});var Qe=r(_);x=a(Qe,"SPAN",{});var Zs=r(x);b(u.$$.fragment,Zs),Zs.forEach(s),Qe.forEach(s),g=h(we),T=a(we,"SPAN",{});var Bs=r(T);Et=i(Bs,"ResNet-D"),Bs.forEach(s),we.forEach(s),tt=h(e),P=a(e,"H2",{class:!0});var gt=r(P);H=a(gt,"A",{id:!0,class:!0,href:!0});var Us=r(H);ke=a(Us,"SPAN",{});var Vs=r(ke);b(Y.$$.fragment,Vs),Vs.forEach(s),Us.forEach(s),xt=h(gt),qe=a(gt,"SPAN",{});var Js=r(qe);Ct=i(Js,"Overview"),Js.forEach(s),gt.forEach(s),st=h(e),Z=a(e,"P",{});var _t=r(Z);jt=i(_t,"The resnetd model was proposed in "),ee=a(_t,"A",{href:!0,rel:!0});var Xs=r(ee);Tt=i(Xs,"Bag of Tricks for Image Classification with Convolutional Neural Networks"),Xs.forEach(s),Ft=i(_t," by Tong He, Zhi Zhang, Hang Zhang, Zhongyue Zhang, Junyuan Xie, Mu Li."),_t.forEach(s),ot=h(e),B=a(e,"P",{});var vt=r(B);Mt=i(vt,"ResNet-D is a modification on the ResNet architecture. It utilises an embedding layer (stem) composed by three "),ze=a(vt,"CODE",{});var Gs=r(ze);It=i(Gs,"3x3"),Gs.forEach(s),At=i(vt," convolution layers  and an average pooling in the shortcut to downsample the input."),vt.forEach(s),at=h(e),$e=a(e,"P",{});var Ks=r($e);Pt=i(Ks,"The abstract from the paper is the following:"),Ks.forEach(s),rt=h(e),ye=a(e,"P",{});var Qs=r(ye);Oe=a(Qs,"EM",{});var Ys=r(Oe);kt=i(Ys,"Much of the recent progress made in image classification research can be credited to training procedure refinements, such as changes in data augmentations and optimization methods. In the literature, however, most refinements are either briefly mentioned as implementation details or only visible in source code. In this paper, we will examine a collection of such refinements and empirically evaluate their impact on the final model accuracy through ablation study. We will show that, by combining these refinements together, we are able to improve various CNN models significantly. For example, we raise ResNet-50\u2019s top-1 validation accuracy from 75.3% to 79.29% on ImageNet. We will also demonstrate that improvement on image classification accuracy leads to better transfer learning performance in other application domains such as object detection and semantic segmentation."),Ys.forEach(s),Qs.forEach(s),nt=h(e),Ne=a(e,"P",{});var eo=r(Ne);qt=i(eo,"Tips:"),eo.forEach(s),it=h(e),De=a(e,"UL",{});var to=r(De);te=a(to,"LI",{});var wt=r(te);zt=i(wt,"One can use "),Re=a(wt,"A",{href:!0});var so=r(Re);Ot=i(so,"AutoFeatureExtractor"),so.forEach(s),St=i(wt," to prepare images for the model."),wt.forEach(s),to.forEach(s),lt=h(e),U=a(e,"P",{});var bt=r(U);Lt=i(bt,"This model was contributed by "),se=a(bt,"A",{href:!0,rel:!0});var oo=r(se);Wt=i(oo,"Francesco"),oo.forEach(s),Ht=i(bt,"."),bt.forEach(s),dt=h(e),k=a(e,"H2",{class:!0});var $t=r(k);V=a($t,"A",{id:!0,class:!0,href:!0});var ao=r(V);Se=a(ao,"SPAN",{});var ro=r(Se);b(oe.$$.fragment,ro),ro.forEach(s),ao.forEach(s),Zt=h($t),Le=a($t,"SPAN",{});var no=r(Le);Bt=i(no,"ResNetDConfig"),no.forEach(s),$t.forEach(s),ct=h(e),v=a(e,"DIV",{class:!0});var M=r(v);b(ae.$$.fragment,M),Ut=h(M),q=a(M,"P",{});var Fe=r(q);Vt=i(Fe,"This is the configuration class to store the configuration of a "),Ee=a(Fe,"A",{href:!0});var io=r(Ee);Jt=i(io,"ResNetDModel"),io.forEach(s),Xt=i(Fe,`. It is used to instantiate an
ResNetD model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the
`),re=a(Fe,"A",{href:!0,rel:!0});var lo=r(re);Gt=i(lo,"resnetd-50"),lo.forEach(s),Kt=i(Fe," architecture."),Fe.forEach(s),Qt=h(M),z=a(M,"P",{});var Me=r(z);Yt=i(Me,"Configuration objects inherit from "),xe=a(Me,"A",{href:!0});var co=r(xe);es=i(co,"PretrainedConfig"),co.forEach(s),ts=i(Me,` and can be used to control the model outputs. Read the
documentation from `),Ce=a(Me,"A",{href:!0});var ho=r(Ce);ss=i(ho,"PretrainedConfig"),ho.forEach(s),os=i(Me," for more information."),Me.forEach(s),as=h(M),We=a(M,"P",{});var po=r(We);rs=i(po,"Example:"),po.forEach(s),ns=h(M),b(ne.$$.fragment,M),M.forEach(s),ht=h(e),O=a(e,"H2",{class:!0});var yt=r(O);J=a(yt,"A",{id:!0,class:!0,href:!0});var fo=r(J);He=a(fo,"SPAN",{});var mo=r(He);b(ie.$$.fragment,mo),mo.forEach(s),fo.forEach(s),is=h(yt),Ze=a(yt,"SPAN",{});var uo=r(Ze);ls=i(uo,"ResNetDModel"),uo.forEach(s),yt.forEach(s),pt=h(e),F=a(e,"DIV",{class:!0});var Ie=r(F);b(le.$$.fragment,Ie),ds=h(Ie),de=a(Ie,"P",{});var Nt=r(de);cs=i(Nt,`The bare ResNetD model outputting raw features without any specific head on top.
This model is a PyTorch `),ce=a(Nt,"A",{href:!0,rel:!0});var go=r(ce);hs=i(go,"torch.nn.Module"),go.forEach(s),ps=i(Nt,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Nt.forEach(s),fs=h(Ie),R=a(Ie,"DIV",{class:!0});var I=r(R);b(he.$$.fragment,I),ms=h(I),S=a(I,"P",{});var Ae=r(S);us=i(Ae,"The "),je=a(Ae,"A",{href:!0});var _o=r(je);gs=i(_o,"ResNetDModel"),_o.forEach(s),_s=i(Ae," forward method, overrides the "),Be=a(Ae,"CODE",{});var vo=r(Be);vs=i(vo,"__call__"),vo.forEach(s),ws=i(Ae," special method."),Ae.forEach(s),bs=h(I),b(X.$$.fragment,I),$s=h(I),Ue=a(I,"P",{});var wo=r(Ue);ys=i(wo,"Example:"),wo.forEach(s),Ns=h(I),b(pe.$$.fragment,I),I.forEach(s),Ie.forEach(s),ft=h(e),L=a(e,"H2",{class:!0});var Dt=r(L);G=a(Dt,"A",{id:!0,class:!0,href:!0});var bo=r(G);Ve=a(bo,"SPAN",{});var $o=r(Ve);b(fe.$$.fragment,$o),$o.forEach(s),bo.forEach(s),Ds=h(Dt),Je=a(Dt,"SPAN",{});var yo=r(Je);Rs=i(yo,"ResNetDForImageClassification"),yo.forEach(s),Dt.forEach(s),mt=h(e),C=a(e,"DIV",{class:!0});var Q=r(C);b(me.$$.fragment,Q),Es=h(Q),Xe=a(Q,"P",{});var No=r(Xe);xs=i(No,`ResNetD Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),No.forEach(s),Cs=h(Q),ue=a(Q,"P",{});var Rt=r(ue);js=i(Rt,"This model is a PyTorch "),ge=a(Rt,"A",{href:!0,rel:!0});var Do=r(ge);Ts=i(Do,"torch.nn.Module"),Do.forEach(s),Fs=i(Rt,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Rt.forEach(s),Ms=h(Q),E=a(Q,"DIV",{class:!0});var A=r(E);b(_e.$$.fragment,A),Is=h(A),W=a(A,"P",{});var Pe=r(W);As=i(Pe,"The "),Te=a(Pe,"A",{href:!0});var Ro=r(Te);Ps=i(Ro,"ResNetDForImageClassification"),Ro.forEach(s),ks=i(Pe," forward method, overrides the "),Ge=a(Pe,"CODE",{});var Eo=r(Ge);qs=i(Eo,"__call__"),Eo.forEach(s),zs=i(Pe," special method."),Pe.forEach(s),Os=h(A),b(K.$$.fragment,A),Ss=h(A),Ke=a(A,"P",{});var xo=r(Ke);Ls=i(xo,"Example:"),xo.forEach(s),Ws=h(A),b(ve.$$.fragment,A),A.forEach(s),Q.forEach(s),this.h()},h(){l(f,"name","hf:doc:metadata"),l(f,"content",JSON.stringify(qo)),l(_,"id","resnetd"),l(_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(_,"href","#resnetd"),l(m,"class","relative group"),l(H,"id","overview"),l(H,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(H,"href","#overview"),l(P,"class","relative group"),l(ee,"href","https://arxiv.org/abs/1812.01187"),l(ee,"rel","nofollow"),l(Re,"href","/docs/transformers/pr_16162/en/model_doc/auto#transformers.AutoFeatureExtractor"),l(se,"href","https://huggingface.co/Francesco"),l(se,"rel","nofollow"),l(V,"id","transformers.ResNetDConfig"),l(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(V,"href","#transformers.ResNetDConfig"),l(k,"class","relative group"),l(Ee,"href","/docs/transformers/pr_16162/en/model_doc/resnetd#transformers.ResNetDModel"),l(re,"href","https://huggingface.co/microsoft/resnetd-50"),l(re,"rel","nofollow"),l(xe,"href","/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig"),l(Ce,"href","/docs/transformers/pr_16162/en/main_classes/configuration#transformers.PretrainedConfig"),l(v,"class","docstring"),l(J,"id","transformers.ResNetDModel"),l(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(J,"href","#transformers.ResNetDModel"),l(O,"class","relative group"),l(ce,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(ce,"rel","nofollow"),l(je,"href","/docs/transformers/pr_16162/en/model_doc/resnetd#transformers.ResNetDModel"),l(R,"class","docstring"),l(F,"class","docstring"),l(G,"id","transformers.ResNetDForImageClassification"),l(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(G,"href","#transformers.ResNetDForImageClassification"),l(L,"class","relative group"),l(ge,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(ge,"rel","nofollow"),l(Te,"href","/docs/transformers/pr_16162/en/model_doc/resnetd#transformers.ResNetDForImageClassification"),l(E,"class","docstring"),l(C,"class","docstring")},m(e,d){t(document.head,f),p(e,j,d),p(e,m,d),t(m,_),t(_,x),$(u,x,null),t(m,g),t(m,T),t(T,Et),p(e,tt,d),p(e,P,d),t(P,H),t(H,ke),$(Y,ke,null),t(P,xt),t(P,qe),t(qe,Ct),p(e,st,d),p(e,Z,d),t(Z,jt),t(Z,ee),t(ee,Tt),t(Z,Ft),p(e,ot,d),p(e,B,d),t(B,Mt),t(B,ze),t(ze,It),t(B,At),p(e,at,d),p(e,$e,d),t($e,Pt),p(e,rt,d),p(e,ye,d),t(ye,Oe),t(Oe,kt),p(e,nt,d),p(e,Ne,d),t(Ne,qt),p(e,it,d),p(e,De,d),t(De,te),t(te,zt),t(te,Re),t(Re,Ot),t(te,St),p(e,lt,d),p(e,U,d),t(U,Lt),t(U,se),t(se,Wt),t(U,Ht),p(e,dt,d),p(e,k,d),t(k,V),t(V,Se),$(oe,Se,null),t(k,Zt),t(k,Le),t(Le,Bt),p(e,ct,d),p(e,v,d),$(ae,v,null),t(v,Ut),t(v,q),t(q,Vt),t(q,Ee),t(Ee,Jt),t(q,Xt),t(q,re),t(re,Gt),t(q,Kt),t(v,Qt),t(v,z),t(z,Yt),t(z,xe),t(xe,es),t(z,ts),t(z,Ce),t(Ce,ss),t(z,os),t(v,as),t(v,We),t(We,rs),t(v,ns),$(ne,v,null),p(e,ht,d),p(e,O,d),t(O,J),t(J,He),$(ie,He,null),t(O,is),t(O,Ze),t(Ze,ls),p(e,pt,d),p(e,F,d),$(le,F,null),t(F,ds),t(F,de),t(de,cs),t(de,ce),t(ce,hs),t(de,ps),t(F,fs),t(F,R),$(he,R,null),t(R,ms),t(R,S),t(S,us),t(S,je),t(je,gs),t(S,_s),t(S,Be),t(Be,vs),t(S,ws),t(R,bs),$(X,R,null),t(R,$s),t(R,Ue),t(Ue,ys),t(R,Ns),$(pe,R,null),p(e,ft,d),p(e,L,d),t(L,G),t(G,Ve),$(fe,Ve,null),t(L,Ds),t(L,Je),t(Je,Rs),p(e,mt,d),p(e,C,d),$(me,C,null),t(C,Es),t(C,Xe),t(Xe,xs),t(C,Cs),t(C,ue),t(ue,js),t(ue,ge),t(ge,Ts),t(ue,Fs),t(C,Ms),t(C,E),$(_e,E,null),t(E,Is),t(E,W),t(W,As),t(W,Te),t(Te,Ps),t(W,ks),t(W,Ge),t(Ge,qs),t(W,zs),t(E,Os),$(K,E,null),t(E,Ss),t(E,Ke),t(Ke,Ls),t(E,Ws),$(ve,E,null),ut=!0},p(e,[d]){const we={};d&2&&(we.$$scope={dirty:d,ctx:e}),X.$set(we);const Qe={};d&2&&(Qe.$$scope={dirty:d,ctx:e}),K.$set(Qe)},i(e){ut||(y(u.$$.fragment,e),y(Y.$$.fragment,e),y(oe.$$.fragment,e),y(ae.$$.fragment,e),y(ne.$$.fragment,e),y(ie.$$.fragment,e),y(le.$$.fragment,e),y(he.$$.fragment,e),y(X.$$.fragment,e),y(pe.$$.fragment,e),y(fe.$$.fragment,e),y(me.$$.fragment,e),y(_e.$$.fragment,e),y(K.$$.fragment,e),y(ve.$$.fragment,e),ut=!0)},o(e){N(u.$$.fragment,e),N(Y.$$.fragment,e),N(oe.$$.fragment,e),N(ae.$$.fragment,e),N(ne.$$.fragment,e),N(ie.$$.fragment,e),N(le.$$.fragment,e),N(he.$$.fragment,e),N(X.$$.fragment,e),N(pe.$$.fragment,e),N(fe.$$.fragment,e),N(me.$$.fragment,e),N(_e.$$.fragment,e),N(K.$$.fragment,e),N(ve.$$.fragment,e),ut=!1},d(e){s(f),e&&s(j),e&&s(m),D(u),e&&s(tt),e&&s(P),D(Y),e&&s(st),e&&s(Z),e&&s(ot),e&&s(B),e&&s(at),e&&s($e),e&&s(rt),e&&s(ye),e&&s(nt),e&&s(Ne),e&&s(it),e&&s(De),e&&s(lt),e&&s(U),e&&s(dt),e&&s(k),D(oe),e&&s(ct),e&&s(v),D(ae),D(ne),e&&s(ht),e&&s(O),D(ie),e&&s(pt),e&&s(F),D(le),D(he),D(X),D(pe),e&&s(ft),e&&s(L),D(fe),e&&s(mt),e&&s(C),D(me),D(_e),D(K),D(ve)}}}const qo={local:"resnetd",sections:[{local:"overview",title:"Overview"},{local:"transformers.ResNetDConfig",title:"ResNetDConfig"},{local:"transformers.ResNetDModel",title:"ResNetDModel"},{local:"transformers.ResNetDForImageClassification",title:"ResNetDForImageClassification"}],title:"ResNet-D"};function zo(be){return Io(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Zo extends jo{constructor(f){super();To(this,f,zo,ko,Fo,{})}}export{Zo as default,qo as metadata};
