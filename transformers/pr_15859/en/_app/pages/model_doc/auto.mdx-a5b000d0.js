import{S as D_t,i as q_t,s as G_t,e as a,k as l,w as f,t as o,M as O_t,c as n,d as t,m as i,a as s,x as m,h as r,b as c,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-4833417e.js";import{T as $yr}from"../../chunks/Tip-fffd6df1.js";import{D as E}from"../../chunks/Docstring-44c5af16.js";import{C as w}from"../../chunks/CodeBlock-90ffda97.js";import{I as z}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-04a16537.js";function X_t(yi){let J,Ae,ie,me,to,ce,ue,Do,wi,Ef,sa,Ai,Li,tM,yf,ye,io,Bi,Pn,aM,$n,In,nM,xi,jn,sM,ki,wf,$a;return{c(){J=a("p"),Ae=o("If your "),ie=a("code"),me=o("NewModelConfig"),to=o(" is a subclass of "),ce=a("code"),ue=o("PretrainedConfig"),Do=o(`, make sure its
`),wi=a("code"),Ef=o("model_type"),sa=o(" attribute is set to the same key you use when registering the config (here "),Ai=a("code"),Li=o('"new-model"'),tM=o(")."),yf=l(),ye=a("p"),io=o("Likewise, if your "),Bi=a("code"),Pn=o("NewModel"),aM=o(" is a subclass of "),$n=a("a"),In=o("PreTrainedModel"),nM=o(`, make sure its
`),xi=a("code"),jn=o("config_class"),sM=o(` attribute is set to the same class you use when registering the model (here
`),ki=a("code"),wf=o("NewModelConfig"),$a=o(")."),this.h()},l(co){J=n(co,"P",{});var ge=s(J);Ae=r(ge,"If your "),ie=n(ge,"CODE",{});var O0=s(ie);me=r(O0,"NewModelConfig"),O0.forEach(t),to=r(ge," is a subclass of "),ce=n(ge,"CODE",{});var Ri=s(ce);ue=r(Ri,"PretrainedConfig"),Ri.forEach(t),Do=r(ge,`, make sure its
`),wi=n(ge,"CODE",{});var X0=s(wi);Ef=r(X0,"model_type"),X0.forEach(t),sa=r(ge," attribute is set to the same key you use when registering the config (here "),Ai=n(ge,"CODE",{});var z0=s(Ai);Li=r(z0,'"new-model"'),z0.forEach(t),tM=r(ge,")."),ge.forEach(t),yf=i(co),ye=n(co,"P",{});var qo=s(ye);io=r(qo,"Likewise, if your "),Bi=n(qo,"CODE",{});var Ia=s(Bi);Pn=r(Ia,"NewModel"),Ia.forEach(t),aM=r(qo," is a subclass of "),$n=n(qo,"A",{href:!0});var V0=s($n);In=r(V0,"PreTrainedModel"),V0.forEach(t),nM=r(qo,`, make sure its
`),xi=n(qo,"CODE",{});var Af=s(xi);jn=r(Af,"config_class"),Af.forEach(t),sM=r(qo,` attribute is set to the same class you use when registering the model (here
`),ki=n(qo,"CODE",{});var W0=s(ki);wf=r(W0,"NewModelConfig"),W0.forEach(t),$a=r(qo,")."),qo.forEach(t),this.h()},h(){c($n,"href","/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel")},m(co,ge){b(co,J,ge),e(J,Ae),e(J,ie),e(ie,me),e(J,to),e(J,ce),e(ce,ue),e(J,Do),e(J,wi),e(wi,Ef),e(J,sa),e(J,Ai),e(Ai,Li),e(J,tM),b(co,yf,ge),b(co,ye,ge),e(ye,io),e(ye,Bi),e(Bi,Pn),e(ye,aM),e(ye,$n),e($n,In),e(ye,nM),e(ye,xi),e(xi,jn),e(ye,sM),e(ye,ki),e(ki,wf),e(ye,$a)},d(co){co&&t(J),co&&t(yf),co&&t(ye)}}}function z_t(yi){let J,Ae,ie,me,to;return{c(){J=a("p"),Ae=o("Passing "),ie=a("code"),me=o("use_auth_token=True"),to=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Ae=r(ue,"Passing "),ie=n(ue,"CODE",{});var Do=s(ie);me=r(Do,"use_auth_token=True"),Do.forEach(t),to=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Ae),e(J,ie),e(ie,me),e(J,to)},d(ce){ce&&t(J)}}}function V_t(yi){let J,Ae,ie,me,to;return{c(){J=a("p"),Ae=o("Passing "),ie=a("code"),me=o("use_auth_token=True"),to=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Ae=r(ue,"Passing "),ie=n(ue,"CODE",{});var Do=s(ie);me=r(Do,"use_auth_token=True"),Do.forEach(t),to=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Ae),e(J,ie),e(ie,me),e(J,to)},d(ce){ce&&t(J)}}}function W_t(yi){let J,Ae,ie,me,to,ce,ue,Do,wi,Ef,sa,Ai,Li,tM,yf,ye,io,Bi,Pn,aM,$n,In,nM,xi,jn,sM,ki,wf,$a,co,ge,O0,Ri,X0,z0,qo,Ia,V0,Af,W0,Fke,fLe,Si,Lf,qV,lM,Cke,GV,Mke,mLe,Nn,Eke,OV,yke,wke,XV,Ake,Lke,gLe,iM,hLe,Q0,Bke,pLe,Bf,_Le,Pi,xf,zV,dM,xke,VV,kke,uLe,Go,cM,Rke,fM,Ske,H0,Pke,$ke,Ike,mM,jke,WV,Nke,Dke,qke,fo,gM,Gke,QV,Oke,Xke,$i,zke,HV,Vke,Wke,UV,Qke,Hke,Uke,v,kf,JV,Jke,Yke,U0,Kke,Zke,eRe,Rf,YV,oRe,rRe,J0,tRe,aRe,nRe,Sf,KV,sRe,lRe,Y0,iRe,dRe,cRe,Pf,ZV,fRe,mRe,K0,gRe,hRe,pRe,$f,eW,_Re,uRe,Z0,bRe,vRe,TRe,If,oW,FRe,CRe,eL,MRe,ERe,yRe,jf,rW,wRe,ARe,oL,LRe,BRe,xRe,Nf,tW,kRe,RRe,rL,SRe,PRe,$Re,Df,aW,IRe,jRe,tL,NRe,DRe,qRe,qf,nW,GRe,ORe,aL,XRe,zRe,VRe,Gf,sW,WRe,QRe,nL,HRe,URe,JRe,Of,lW,YRe,KRe,sL,ZRe,eSe,oSe,Xf,iW,rSe,tSe,lL,aSe,nSe,sSe,zf,dW,lSe,iSe,iL,dSe,cSe,fSe,Vf,cW,mSe,gSe,dL,hSe,pSe,_Se,Wf,fW,uSe,bSe,cL,vSe,TSe,FSe,Qf,mW,CSe,MSe,fL,ESe,ySe,wSe,Hf,gW,ASe,LSe,mL,BSe,xSe,kSe,Uf,hW,RSe,SSe,gL,PSe,$Se,ISe,Jf,pW,jSe,NSe,hL,DSe,qSe,GSe,Yf,_W,OSe,XSe,pL,zSe,VSe,WSe,Kf,uW,QSe,HSe,_L,USe,JSe,YSe,Zf,bW,KSe,ZSe,uL,ePe,oPe,rPe,em,vW,tPe,aPe,bL,nPe,sPe,lPe,om,TW,iPe,dPe,vL,cPe,fPe,mPe,rm,FW,gPe,hPe,TL,pPe,_Pe,uPe,tm,CW,bPe,vPe,FL,TPe,FPe,CPe,am,MW,MPe,EPe,CL,yPe,wPe,APe,nm,EW,LPe,BPe,ML,xPe,kPe,RPe,sm,yW,SPe,PPe,EL,$Pe,IPe,jPe,lm,wW,NPe,DPe,yL,qPe,GPe,OPe,im,AW,XPe,zPe,wL,VPe,WPe,QPe,dm,LW,HPe,UPe,AL,JPe,YPe,KPe,cm,BW,ZPe,e$e,LL,o$e,r$e,t$e,fm,xW,a$e,n$e,BL,s$e,l$e,i$e,mm,kW,d$e,c$e,xL,f$e,m$e,g$e,gm,RW,h$e,p$e,kL,_$e,u$e,b$e,hm,SW,v$e,T$e,RL,F$e,C$e,M$e,pm,PW,E$e,y$e,SL,w$e,A$e,L$e,_m,$W,B$e,x$e,PL,k$e,R$e,S$e,um,IW,P$e,$$e,$L,I$e,j$e,N$e,bm,jW,D$e,q$e,IL,G$e,O$e,X$e,vm,NW,z$e,V$e,jL,W$e,Q$e,H$e,Tm,DW,U$e,J$e,NL,Y$e,K$e,Z$e,Fm,qW,eIe,oIe,DL,rIe,tIe,aIe,Cm,GW,nIe,sIe,qL,lIe,iIe,dIe,Mm,OW,cIe,fIe,GL,mIe,gIe,hIe,Em,XW,pIe,_Ie,OL,uIe,bIe,vIe,ym,zW,TIe,FIe,XL,CIe,MIe,EIe,wm,VW,yIe,wIe,zL,AIe,LIe,BIe,Am,WW,xIe,kIe,VL,RIe,SIe,PIe,Lm,QW,$Ie,IIe,WL,jIe,NIe,DIe,Bm,HW,qIe,GIe,QL,OIe,XIe,zIe,xm,UW,VIe,WIe,HL,QIe,HIe,UIe,km,JW,JIe,YIe,UL,KIe,ZIe,eje,Rm,YW,oje,rje,JL,tje,aje,nje,Sm,KW,sje,lje,YL,ije,dje,cje,Pm,ZW,fje,mje,KL,gje,hje,pje,$m,eQ,_je,uje,ZL,bje,vje,Tje,Im,oQ,Fje,Cje,e7,Mje,Eje,yje,jm,rQ,wje,Aje,o7,Lje,Bje,xje,Nm,tQ,kje,Rje,r7,Sje,Pje,$je,Dm,aQ,Ije,jje,t7,Nje,Dje,qje,qm,nQ,Gje,Oje,a7,Xje,zje,Vje,Gm,sQ,Wje,Qje,n7,Hje,Uje,Jje,Om,lQ,Yje,Kje,s7,Zje,eNe,oNe,Xm,iQ,rNe,tNe,l7,aNe,nNe,sNe,zm,dQ,lNe,iNe,i7,dNe,cNe,fNe,Vm,cQ,mNe,gNe,d7,hNe,pNe,_Ne,Wm,fQ,uNe,bNe,c7,vNe,TNe,FNe,Qm,mQ,CNe,MNe,f7,ENe,yNe,wNe,Hm,gQ,ANe,LNe,m7,BNe,xNe,kNe,Um,hQ,RNe,SNe,g7,PNe,$Ne,INe,Jm,pQ,jNe,NNe,h7,DNe,qNe,GNe,Ym,_Q,ONe,XNe,p7,zNe,VNe,WNe,Km,uQ,QNe,HNe,_7,UNe,JNe,YNe,Zm,bQ,KNe,ZNe,u7,eDe,oDe,rDe,eg,vQ,tDe,aDe,b7,nDe,sDe,lDe,og,TQ,iDe,dDe,v7,cDe,fDe,mDe,rg,FQ,gDe,hDe,T7,pDe,_De,uDe,tg,CQ,bDe,vDe,F7,TDe,FDe,CDe,ag,MQ,MDe,EDe,C7,yDe,wDe,ADe,ng,EQ,LDe,BDe,M7,xDe,kDe,RDe,sg,yQ,SDe,PDe,E7,$De,IDe,jDe,lg,wQ,NDe,DDe,y7,qDe,GDe,ODe,ig,AQ,XDe,zDe,w7,VDe,WDe,QDe,dg,LQ,HDe,UDe,A7,JDe,YDe,KDe,cg,BQ,ZDe,eqe,L7,oqe,rqe,tqe,fg,xQ,aqe,nqe,B7,sqe,lqe,iqe,mg,kQ,dqe,cqe,x7,fqe,mqe,gqe,gg,RQ,hqe,pqe,k7,_qe,uqe,bqe,SQ,vqe,Tqe,hM,Fqe,hg,pM,Cqe,PQ,Mqe,bLe,Ii,pg,$Q,_M,Eqe,IQ,yqe,vLe,Oo,uM,wqe,bM,Aqe,R7,Lqe,Bqe,xqe,vM,kqe,jQ,Rqe,Sqe,Pqe,mo,TM,$qe,NQ,Iqe,jqe,ja,Nqe,DQ,Dqe,qqe,qQ,Gqe,Oqe,GQ,Xqe,zqe,Vqe,M,Dn,OQ,Wqe,Qqe,S7,Hqe,Uqe,P7,Jqe,Yqe,Kqe,qn,XQ,Zqe,eGe,$7,oGe,rGe,I7,tGe,aGe,nGe,Gn,zQ,sGe,lGe,j7,iGe,dGe,N7,cGe,fGe,mGe,_g,VQ,gGe,hGe,D7,pGe,_Ge,uGe,On,WQ,bGe,vGe,q7,TGe,FGe,G7,CGe,MGe,EGe,ug,QQ,yGe,wGe,O7,AGe,LGe,BGe,bg,HQ,xGe,kGe,X7,RGe,SGe,PGe,vg,UQ,$Ge,IGe,z7,jGe,NGe,DGe,Xn,JQ,qGe,GGe,V7,OGe,XGe,W7,zGe,VGe,WGe,zn,YQ,QGe,HGe,Q7,UGe,JGe,H7,YGe,KGe,ZGe,Vn,KQ,eOe,oOe,U7,rOe,tOe,J7,aOe,nOe,sOe,Tg,ZQ,lOe,iOe,Y7,dOe,cOe,fOe,Fg,eH,mOe,gOe,K7,hOe,pOe,_Oe,Wn,oH,uOe,bOe,Z7,vOe,TOe,eB,FOe,COe,MOe,Cg,rH,EOe,yOe,oB,wOe,AOe,LOe,Qn,tH,BOe,xOe,rB,kOe,ROe,tB,SOe,POe,$Oe,Hn,aH,IOe,jOe,aB,NOe,DOe,nB,qOe,GOe,OOe,Un,nH,XOe,zOe,sB,VOe,WOe,sH,QOe,HOe,UOe,Mg,lH,JOe,YOe,lB,KOe,ZOe,eXe,Jn,iH,oXe,rXe,iB,tXe,aXe,dB,nXe,sXe,lXe,Eg,dH,iXe,dXe,cB,cXe,fXe,mXe,Yn,cH,gXe,hXe,fB,pXe,_Xe,mB,uXe,bXe,vXe,Kn,fH,TXe,FXe,gB,CXe,MXe,hB,EXe,yXe,wXe,Zn,mH,AXe,LXe,pB,BXe,xXe,_B,kXe,RXe,SXe,yg,gH,PXe,$Xe,uB,IXe,jXe,NXe,es,hH,DXe,qXe,bB,GXe,OXe,vB,XXe,zXe,VXe,wg,pH,WXe,QXe,TB,HXe,UXe,JXe,os,_H,YXe,KXe,FB,ZXe,eze,CB,oze,rze,tze,rs,uH,aze,nze,MB,sze,lze,EB,ize,dze,cze,ts,bH,fze,mze,yB,gze,hze,wB,pze,_ze,uze,as,vH,bze,vze,AB,Tze,Fze,LB,Cze,Mze,Eze,Ag,TH,yze,wze,BB,Aze,Lze,Bze,ns,FH,xze,kze,xB,Rze,Sze,kB,Pze,$ze,Ize,ss,CH,jze,Nze,RB,Dze,qze,SB,Gze,Oze,Xze,ls,MH,zze,Vze,PB,Wze,Qze,$B,Hze,Uze,Jze,is,EH,Yze,Kze,IB,Zze,eVe,jB,oVe,rVe,tVe,ds,yH,aVe,nVe,NB,sVe,lVe,DB,iVe,dVe,cVe,cs,wH,fVe,mVe,qB,gVe,hVe,GB,pVe,_Ve,uVe,Lg,AH,bVe,vVe,OB,TVe,FVe,CVe,fs,LH,MVe,EVe,XB,yVe,wVe,zB,AVe,LVe,BVe,Bg,BH,xVe,kVe,VB,RVe,SVe,PVe,xg,xH,$Ve,IVe,WB,jVe,NVe,DVe,ms,kH,qVe,GVe,QB,OVe,XVe,HB,zVe,VVe,WVe,gs,RH,QVe,HVe,UB,UVe,JVe,JB,YVe,KVe,ZVe,kg,SH,eWe,oWe,YB,rWe,tWe,aWe,hs,PH,nWe,sWe,KB,lWe,iWe,ZB,dWe,cWe,fWe,ps,$H,mWe,gWe,ex,hWe,pWe,ox,_We,uWe,bWe,_s,IH,vWe,TWe,rx,FWe,CWe,tx,MWe,EWe,yWe,us,jH,wWe,AWe,ax,LWe,BWe,nx,xWe,kWe,RWe,bs,NH,SWe,PWe,sx,$We,IWe,lx,jWe,NWe,DWe,Rg,DH,qWe,GWe,ix,OWe,XWe,zWe,Sg,qH,VWe,WWe,dx,QWe,HWe,UWe,Pg,GH,JWe,YWe,cx,KWe,ZWe,eQe,$g,OH,oQe,rQe,fx,tQe,aQe,nQe,vs,XH,sQe,lQe,mx,iQe,dQe,gx,cQe,fQe,mQe,Ig,zH,gQe,hQe,hx,pQe,_Qe,uQe,Ts,VH,bQe,vQe,px,TQe,FQe,_x,CQe,MQe,EQe,Fs,WH,yQe,wQe,ux,AQe,LQe,bx,BQe,xQe,kQe,Cs,QH,RQe,SQe,vx,PQe,$Qe,Tx,IQe,jQe,NQe,Ms,HH,DQe,qQe,Fx,GQe,OQe,Cx,XQe,zQe,VQe,Es,UH,WQe,QQe,Mx,HQe,UQe,Ex,JQe,YQe,KQe,jg,JH,ZQe,eHe,yx,oHe,rHe,tHe,Ng,YH,aHe,nHe,wx,sHe,lHe,iHe,ys,KH,dHe,cHe,Ax,fHe,mHe,Lx,gHe,hHe,pHe,ws,ZH,_He,uHe,Bx,bHe,vHe,xx,THe,FHe,CHe,As,eU,MHe,EHe,kx,yHe,wHe,Rx,AHe,LHe,BHe,Dg,oU,xHe,kHe,Sx,RHe,SHe,PHe,qg,rU,$He,IHe,Px,jHe,NHe,DHe,Gg,tU,qHe,GHe,$x,OHe,XHe,zHe,Og,aU,VHe,WHe,Ix,QHe,HHe,UHe,Ls,nU,JHe,YHe,jx,KHe,ZHe,Nx,eUe,oUe,rUe,Xg,sU,tUe,aUe,Dx,nUe,sUe,lUe,zg,lU,iUe,dUe,qx,cUe,fUe,mUe,Bs,iU,gUe,hUe,Gx,pUe,_Ue,Ox,uUe,bUe,vUe,xs,dU,TUe,FUe,Xx,CUe,MUe,zx,EUe,yUe,wUe,cU,AUe,LUe,FM,BUe,Vg,CM,xUe,fU,kUe,TLe,ji,Wg,mU,MM,RUe,gU,SUe,FLe,Xo,EM,PUe,yM,$Ue,Vx,IUe,jUe,NUe,wM,DUe,hU,qUe,GUe,OUe,Le,AM,XUe,pU,zUe,VUe,Na,WUe,_U,QUe,HUe,uU,UUe,JUe,bU,YUe,KUe,ZUe,se,Qg,vU,eJe,oJe,Wx,rJe,tJe,aJe,Hg,TU,nJe,sJe,Qx,lJe,iJe,dJe,Ug,FU,cJe,fJe,Hx,mJe,gJe,hJe,Jg,CU,pJe,_Je,Ux,uJe,bJe,vJe,Yg,MU,TJe,FJe,Jx,CJe,MJe,EJe,Kg,EU,yJe,wJe,Yx,AJe,LJe,BJe,Zg,yU,xJe,kJe,Kx,RJe,SJe,PJe,eh,wU,$Je,IJe,Zx,jJe,NJe,DJe,oh,AU,qJe,GJe,ek,OJe,XJe,zJe,rh,LU,VJe,WJe,ok,QJe,HJe,UJe,th,BU,JJe,YJe,rk,KJe,ZJe,eYe,ah,xU,oYe,rYe,tk,tYe,aYe,nYe,nh,kU,sYe,lYe,ak,iYe,dYe,cYe,sh,RU,fYe,mYe,nk,gYe,hYe,pYe,lh,SU,_Ye,uYe,sk,bYe,vYe,TYe,ih,FYe,PU,CYe,MYe,LM,EYe,dh,BM,yYe,$U,wYe,CLe,Ni,ch,IU,xM,AYe,jU,LYe,MLe,zo,kM,BYe,RM,xYe,lk,kYe,RYe,SYe,SM,PYe,NU,$Ye,IYe,jYe,Be,PM,NYe,DU,DYe,qYe,Di,GYe,qU,OYe,XYe,GU,zYe,VYe,WYe,we,fh,OU,QYe,HYe,ik,UYe,JYe,YYe,mh,XU,KYe,ZYe,dk,eKe,oKe,rKe,gh,zU,tKe,aKe,ck,nKe,sKe,lKe,hh,VU,iKe,dKe,fk,cKe,fKe,mKe,ph,WU,gKe,hKe,mk,pKe,_Ke,uKe,_h,QU,bKe,vKe,gk,TKe,FKe,CKe,uh,HU,MKe,EKe,hk,yKe,wKe,AKe,bh,UU,LKe,BKe,pk,xKe,kKe,RKe,vh,SKe,JU,PKe,$Ke,$M,IKe,Th,IM,jKe,YU,NKe,ELe,qi,Fh,KU,jM,DKe,ZU,qKe,yLe,Vo,NM,GKe,Gi,OKe,eJ,XKe,zKe,oJ,VKe,WKe,QKe,DM,HKe,rJ,UKe,JKe,YKe,Nr,qM,KKe,tJ,ZKe,eZe,Oi,oZe,aJ,rZe,tZe,nJ,aZe,nZe,sZe,sJ,lZe,iZe,GM,dZe,xe,OM,cZe,lJ,fZe,mZe,Da,gZe,iJ,hZe,pZe,dJ,_Ze,uZe,cJ,bZe,vZe,TZe,F,Ch,fJ,FZe,CZe,_k,MZe,EZe,yZe,Mh,mJ,wZe,AZe,uk,LZe,BZe,xZe,Eh,gJ,kZe,RZe,bk,SZe,PZe,$Ze,yh,hJ,IZe,jZe,vk,NZe,DZe,qZe,wh,pJ,GZe,OZe,Tk,XZe,zZe,VZe,Ah,_J,WZe,QZe,Fk,HZe,UZe,JZe,Lh,uJ,YZe,KZe,Ck,ZZe,eeo,oeo,Bh,bJ,reo,teo,Mk,aeo,neo,seo,xh,vJ,leo,ieo,Ek,deo,ceo,feo,kh,TJ,meo,geo,yk,heo,peo,_eo,Rh,FJ,ueo,beo,wk,veo,Teo,Feo,Sh,CJ,Ceo,Meo,Ak,Eeo,yeo,weo,Ph,MJ,Aeo,Leo,Lk,Beo,xeo,keo,$h,EJ,Reo,Seo,Bk,Peo,$eo,Ieo,Ih,yJ,jeo,Neo,xk,Deo,qeo,Geo,jh,wJ,Oeo,Xeo,kk,zeo,Veo,Weo,Nh,AJ,Qeo,Heo,Rk,Ueo,Jeo,Yeo,Dh,LJ,Keo,Zeo,Sk,eoo,ooo,roo,qh,BJ,too,aoo,Pk,noo,soo,loo,Gh,xJ,ioo,doo,$k,coo,foo,moo,Oh,kJ,goo,hoo,Ik,poo,_oo,uoo,Xh,RJ,boo,voo,jk,Too,Foo,Coo,zh,SJ,Moo,Eoo,Nk,yoo,woo,Aoo,Vh,PJ,Loo,Boo,Dk,xoo,koo,Roo,Wh,$J,Soo,Poo,qk,$oo,Ioo,joo,ks,IJ,Noo,Doo,Gk,qoo,Goo,Ok,Ooo,Xoo,zoo,Qh,jJ,Voo,Woo,Xk,Qoo,Hoo,Uoo,Hh,NJ,Joo,Yoo,zk,Koo,Zoo,ero,Uh,DJ,oro,rro,Vk,tro,aro,nro,Jh,qJ,sro,lro,Wk,iro,dro,cro,Yh,GJ,fro,mro,Qk,gro,hro,pro,Kh,OJ,_ro,uro,Hk,bro,vro,Tro,Zh,XJ,Fro,Cro,Uk,Mro,Ero,yro,ep,zJ,wro,Aro,Jk,Lro,Bro,xro,op,VJ,kro,Rro,Yk,Sro,Pro,$ro,rp,WJ,Iro,jro,Kk,Nro,Dro,qro,tp,QJ,Gro,Oro,Zk,Xro,zro,Vro,ap,HJ,Wro,Qro,eR,Hro,Uro,Jro,np,UJ,Yro,Kro,oR,Zro,eto,oto,sp,JJ,rto,tto,rR,ato,nto,sto,lp,YJ,lto,ito,tR,dto,cto,fto,ip,KJ,mto,gto,aR,hto,pto,_to,dp,ZJ,uto,bto,nR,vto,Tto,Fto,cp,eY,Cto,Mto,sR,Eto,yto,wto,fp,oY,Ato,Lto,lR,Bto,xto,kto,mp,rY,Rto,Sto,iR,Pto,$to,Ito,gp,tY,jto,Nto,dR,Dto,qto,Gto,hp,aY,Oto,Xto,cR,zto,Vto,Wto,pp,nY,Qto,Hto,fR,Uto,Jto,Yto,_p,sY,Kto,Zto,mR,eao,oao,rao,up,lY,tao,aao,gR,nao,sao,lao,bp,iY,iao,dao,hR,cao,fao,mao,vp,dY,gao,hao,pR,pao,_ao,uao,Tp,cY,bao,vao,_R,Tao,Fao,Cao,Fp,fY,Mao,Eao,uR,yao,wao,Aao,Cp,mY,Lao,Bao,bR,xao,kao,Rao,Mp,gY,Sao,Pao,vR,$ao,Iao,jao,Ep,hY,Nao,Dao,TR,qao,Gao,Oao,yp,pY,Xao,zao,FR,Vao,Wao,Qao,wp,_Y,Hao,Uao,CR,Jao,Yao,Kao,Ap,uY,Zao,eno,MR,ono,rno,tno,Lp,bY,ano,nno,ER,sno,lno,ino,Bp,vY,dno,cno,yR,fno,mno,gno,xp,TY,hno,pno,wR,_no,uno,bno,kp,FY,vno,Tno,AR,Fno,Cno,Mno,Rp,CY,Eno,yno,LR,wno,Ano,Lno,Sp,MY,Bno,xno,BR,kno,Rno,Sno,Pp,EY,Pno,$no,xR,Ino,jno,Nno,$p,yY,Dno,qno,kR,Gno,Ono,Xno,Ip,wY,zno,Vno,RR,Wno,Qno,Hno,jp,AY,Uno,Jno,SR,Yno,Kno,Zno,Np,LY,eso,oso,PR,rso,tso,aso,Dp,BY,nso,sso,$R,lso,iso,dso,qp,xY,cso,fso,IR,mso,gso,hso,Gp,kY,pso,_so,jR,uso,bso,vso,Op,RY,Tso,Fso,NR,Cso,Mso,Eso,Xp,SY,yso,wso,DR,Aso,Lso,Bso,zp,PY,xso,kso,qR,Rso,Sso,Pso,Vp,$Y,$so,Iso,GR,jso,Nso,Dso,Wp,IY,qso,Gso,OR,Oso,Xso,zso,Qp,jY,Vso,Wso,XR,Qso,Hso,Uso,Hp,NY,Jso,Yso,zR,Kso,Zso,elo,Up,DY,olo,rlo,VR,tlo,alo,nlo,Jp,qY,slo,llo,WR,ilo,dlo,clo,Yp,flo,GY,mlo,glo,OY,hlo,plo,XY,_lo,ulo,XM,wLe,Xi,Kp,zY,zM,blo,VY,vlo,ALe,Wo,VM,Tlo,zi,Flo,WY,Clo,Mlo,QY,Elo,ylo,wlo,WM,Alo,HY,Llo,Blo,xlo,Dr,QM,klo,UY,Rlo,Slo,Vi,Plo,JY,$lo,Ilo,YY,jlo,Nlo,Dlo,KY,qlo,Glo,HM,Olo,ke,UM,Xlo,ZY,zlo,Vlo,qa,Wlo,eK,Qlo,Hlo,oK,Ulo,Jlo,rK,Ylo,Klo,Zlo,k,Zp,tK,eio,oio,QR,rio,tio,aio,e_,aK,nio,sio,HR,lio,iio,dio,o_,nK,cio,fio,UR,mio,gio,hio,r_,sK,pio,_io,JR,uio,bio,vio,t_,lK,Tio,Fio,YR,Cio,Mio,Eio,a_,iK,yio,wio,KR,Aio,Lio,Bio,n_,dK,xio,kio,ZR,Rio,Sio,Pio,s_,cK,$io,Iio,eS,jio,Nio,Dio,l_,fK,qio,Gio,oS,Oio,Xio,zio,i_,mK,Vio,Wio,rS,Qio,Hio,Uio,d_,gK,Jio,Yio,tS,Kio,Zio,edo,c_,hK,odo,rdo,aS,tdo,ado,ndo,f_,pK,sdo,ldo,nS,ido,ddo,cdo,m_,_K,fdo,mdo,sS,gdo,hdo,pdo,g_,uK,_do,udo,lS,bdo,vdo,Tdo,h_,bK,Fdo,Cdo,iS,Mdo,Edo,ydo,p_,vK,wdo,Ado,dS,Ldo,Bdo,xdo,__,TK,kdo,Rdo,cS,Sdo,Pdo,$do,u_,FK,Ido,jdo,fS,Ndo,Ddo,qdo,b_,CK,Gdo,Odo,mS,Xdo,zdo,Vdo,v_,MK,Wdo,Qdo,gS,Hdo,Udo,Jdo,T_,EK,Ydo,Kdo,hS,Zdo,eco,oco,F_,yK,rco,tco,pS,aco,nco,sco,C_,wK,lco,ico,_S,dco,cco,fco,M_,AK,mco,gco,uS,hco,pco,_co,E_,LK,uco,bco,bS,vco,Tco,Fco,y_,BK,Cco,Mco,vS,Eco,yco,wco,w_,xK,Aco,Lco,TS,Bco,xco,kco,A_,kK,Rco,Sco,FS,Pco,$co,Ico,L_,RK,jco,Nco,CS,Dco,qco,Gco,B_,SK,Oco,Xco,MS,zco,Vco,Wco,x_,PK,Qco,Hco,ES,Uco,Jco,Yco,k_,$K,Kco,Zco,yS,efo,ofo,rfo,R_,IK,tfo,afo,wS,nfo,sfo,lfo,S_,jK,ifo,dfo,AS,cfo,ffo,mfo,P_,NK,gfo,hfo,LS,pfo,_fo,ufo,$_,DK,bfo,vfo,BS,Tfo,Ffo,Cfo,I_,qK,Mfo,Efo,xS,yfo,wfo,Afo,j_,Lfo,GK,Bfo,xfo,OK,kfo,Rfo,XK,Sfo,Pfo,JM,LLe,Wi,N_,zK,YM,$fo,VK,Ifo,BLe,Qo,KM,jfo,Qi,Nfo,WK,Dfo,qfo,QK,Gfo,Ofo,Xfo,ZM,zfo,HK,Vfo,Wfo,Qfo,qr,eE,Hfo,UK,Ufo,Jfo,Hi,Yfo,JK,Kfo,Zfo,YK,emo,omo,rmo,KK,tmo,amo,oE,nmo,Re,rE,smo,ZK,lmo,imo,Ga,dmo,eZ,cmo,fmo,oZ,mmo,gmo,rZ,hmo,pmo,_mo,$,D_,tZ,umo,bmo,kS,vmo,Tmo,Fmo,q_,aZ,Cmo,Mmo,RS,Emo,ymo,wmo,G_,nZ,Amo,Lmo,SS,Bmo,xmo,kmo,O_,sZ,Rmo,Smo,PS,Pmo,$mo,Imo,X_,lZ,jmo,Nmo,$S,Dmo,qmo,Gmo,z_,iZ,Omo,Xmo,IS,zmo,Vmo,Wmo,V_,dZ,Qmo,Hmo,jS,Umo,Jmo,Ymo,W_,cZ,Kmo,Zmo,NS,ego,ogo,rgo,Q_,fZ,tgo,ago,DS,ngo,sgo,lgo,H_,mZ,igo,dgo,qS,cgo,fgo,mgo,U_,gZ,ggo,hgo,GS,pgo,_go,ugo,J_,hZ,bgo,vgo,OS,Tgo,Fgo,Cgo,Y_,pZ,Mgo,Ego,XS,ygo,wgo,Ago,K_,_Z,Lgo,Bgo,zS,xgo,kgo,Rgo,Z_,uZ,Sgo,Pgo,VS,$go,Igo,jgo,eu,bZ,Ngo,Dgo,WS,qgo,Ggo,Ogo,ou,vZ,Xgo,zgo,QS,Vgo,Wgo,Qgo,ru,TZ,Hgo,Ugo,HS,Jgo,Ygo,Kgo,tu,FZ,Zgo,eho,US,oho,rho,tho,au,CZ,aho,nho,JS,sho,lho,iho,nu,MZ,dho,cho,YS,fho,mho,gho,su,EZ,hho,pho,KS,_ho,uho,bho,lu,yZ,vho,Tho,ZS,Fho,Cho,Mho,iu,wZ,Eho,yho,eP,who,Aho,Lho,du,AZ,Bho,xho,oP,kho,Rho,Sho,cu,LZ,Pho,$ho,rP,Iho,jho,Nho,fu,BZ,Dho,qho,tP,Gho,Oho,Xho,mu,xZ,zho,Vho,aP,Who,Qho,Hho,gu,kZ,Uho,Jho,nP,Yho,Kho,Zho,hu,RZ,epo,opo,sP,rpo,tpo,apo,pu,SZ,npo,spo,lP,lpo,ipo,dpo,_u,PZ,cpo,fpo,iP,mpo,gpo,hpo,uu,$Z,ppo,_po,dP,upo,bpo,vpo,bu,IZ,Tpo,Fpo,cP,Cpo,Mpo,Epo,vu,ypo,jZ,wpo,Apo,NZ,Lpo,Bpo,DZ,xpo,kpo,tE,xLe,Ui,Tu,qZ,aE,Rpo,GZ,Spo,kLe,Ho,nE,Ppo,Ji,$po,OZ,Ipo,jpo,XZ,Npo,Dpo,qpo,sE,Gpo,zZ,Opo,Xpo,zpo,Gr,lE,Vpo,VZ,Wpo,Qpo,Yi,Hpo,WZ,Upo,Jpo,QZ,Ypo,Kpo,Zpo,HZ,e_o,o_o,iE,r_o,Se,dE,t_o,UZ,a_o,n_o,Oa,s_o,JZ,l_o,i_o,YZ,d_o,c_o,KZ,f_o,m_o,g_o,I,Fu,ZZ,h_o,p_o,fP,__o,u_o,b_o,Cu,eee,v_o,T_o,mP,F_o,C_o,M_o,Mu,oee,E_o,y_o,gP,w_o,A_o,L_o,Eu,ree,B_o,x_o,hP,k_o,R_o,S_o,yu,tee,P_o,$_o,pP,I_o,j_o,N_o,wu,aee,D_o,q_o,_P,G_o,O_o,X_o,Au,nee,z_o,V_o,uP,W_o,Q_o,H_o,Lu,see,U_o,J_o,bP,Y_o,K_o,Z_o,Bu,lee,euo,ouo,vP,ruo,tuo,auo,xu,iee,nuo,suo,TP,luo,iuo,duo,ku,dee,cuo,fuo,FP,muo,guo,huo,Ru,cee,puo,_uo,CP,uuo,buo,vuo,Su,fee,Tuo,Fuo,MP,Cuo,Muo,Euo,Pu,mee,yuo,wuo,EP,Auo,Luo,Buo,$u,gee,xuo,kuo,yP,Ruo,Suo,Puo,Iu,hee,$uo,Iuo,wP,juo,Nuo,Duo,ju,pee,quo,Guo,AP,Ouo,Xuo,zuo,Nu,_ee,Vuo,Wuo,LP,Quo,Huo,Uuo,Du,uee,Juo,Yuo,BP,Kuo,Zuo,e5o,qu,bee,o5o,r5o,xP,t5o,a5o,n5o,Gu,vee,s5o,l5o,kP,i5o,d5o,c5o,Ou,Tee,f5o,m5o,RP,g5o,h5o,p5o,Xu,Fee,_5o,u5o,SP,b5o,v5o,T5o,zu,Cee,F5o,C5o,PP,M5o,E5o,y5o,Vu,Mee,w5o,A5o,$P,L5o,B5o,x5o,Wu,Eee,k5o,R5o,IP,S5o,P5o,$5o,Qu,yee,I5o,j5o,jP,N5o,D5o,q5o,Hu,wee,G5o,O5o,NP,X5o,z5o,V5o,Uu,Aee,W5o,Q5o,DP,H5o,U5o,J5o,Ju,Lee,Y5o,K5o,Bee,Z5o,e1o,o1o,Yu,xee,r1o,t1o,qP,a1o,n1o,s1o,Ku,kee,l1o,i1o,GP,d1o,c1o,f1o,Zu,Ree,m1o,g1o,OP,h1o,p1o,_1o,e5,See,u1o,b1o,XP,v1o,T1o,F1o,o5,C1o,Pee,M1o,E1o,$ee,y1o,w1o,Iee,A1o,L1o,cE,RLe,Ki,r5,jee,fE,B1o,Nee,x1o,SLe,Uo,mE,k1o,Zi,R1o,Dee,S1o,P1o,qee,$1o,I1o,j1o,gE,N1o,Gee,D1o,q1o,G1o,Or,hE,O1o,Oee,X1o,z1o,ed,V1o,Xee,W1o,Q1o,zee,H1o,U1o,J1o,Vee,Y1o,K1o,pE,Z1o,Pe,_E,ebo,Wee,obo,rbo,Xa,tbo,Qee,abo,nbo,Hee,sbo,lbo,Uee,ibo,dbo,cbo,ae,t5,Jee,fbo,mbo,zP,gbo,hbo,pbo,a5,Yee,_bo,ubo,VP,bbo,vbo,Tbo,n5,Kee,Fbo,Cbo,WP,Mbo,Ebo,ybo,s5,Zee,wbo,Abo,QP,Lbo,Bbo,xbo,l5,eoe,kbo,Rbo,HP,Sbo,Pbo,$bo,i5,ooe,Ibo,jbo,UP,Nbo,Dbo,qbo,d5,roe,Gbo,Obo,JP,Xbo,zbo,Vbo,c5,toe,Wbo,Qbo,YP,Hbo,Ubo,Jbo,f5,aoe,Ybo,Kbo,KP,Zbo,e2o,o2o,m5,noe,r2o,t2o,ZP,a2o,n2o,s2o,g5,soe,l2o,i2o,e$,d2o,c2o,f2o,h5,loe,m2o,g2o,o$,h2o,p2o,_2o,p5,ioe,u2o,b2o,r$,v2o,T2o,F2o,_5,doe,C2o,M2o,t$,E2o,y2o,w2o,u5,coe,A2o,L2o,a$,B2o,x2o,k2o,b5,foe,R2o,S2o,n$,P2o,$2o,I2o,v5,j2o,moe,N2o,D2o,goe,q2o,G2o,hoe,O2o,X2o,uE,PLe,od,T5,poe,bE,z2o,_oe,V2o,$Le,Jo,vE,W2o,rd,Q2o,uoe,H2o,U2o,boe,J2o,Y2o,K2o,TE,Z2o,voe,evo,ovo,rvo,Xr,FE,tvo,Toe,avo,nvo,td,svo,Foe,lvo,ivo,Coe,dvo,cvo,fvo,Moe,mvo,gvo,CE,hvo,$e,ME,pvo,Eoe,_vo,uvo,za,bvo,yoe,vvo,Tvo,woe,Fvo,Cvo,Aoe,Mvo,Evo,yvo,A,F5,Loe,wvo,Avo,s$,Lvo,Bvo,xvo,C5,Boe,kvo,Rvo,l$,Svo,Pvo,$vo,M5,xoe,Ivo,jvo,i$,Nvo,Dvo,qvo,E5,koe,Gvo,Ovo,d$,Xvo,zvo,Vvo,y5,Roe,Wvo,Qvo,c$,Hvo,Uvo,Jvo,w5,Soe,Yvo,Kvo,f$,Zvo,eTo,oTo,A5,Poe,rTo,tTo,m$,aTo,nTo,sTo,L5,$oe,lTo,iTo,g$,dTo,cTo,fTo,B5,Ioe,mTo,gTo,h$,hTo,pTo,_To,x5,joe,uTo,bTo,p$,vTo,TTo,FTo,k5,Noe,CTo,MTo,_$,ETo,yTo,wTo,R5,Doe,ATo,LTo,u$,BTo,xTo,kTo,S5,qoe,RTo,STo,b$,PTo,$To,ITo,P5,Goe,jTo,NTo,v$,DTo,qTo,GTo,$5,Ooe,OTo,XTo,T$,zTo,VTo,WTo,I5,Xoe,QTo,HTo,F$,UTo,JTo,YTo,j5,zoe,KTo,ZTo,C$,e8o,o8o,r8o,N5,Voe,t8o,a8o,M$,n8o,s8o,l8o,D5,Woe,i8o,d8o,E$,c8o,f8o,m8o,q5,Qoe,g8o,h8o,y$,p8o,_8o,u8o,G5,Hoe,b8o,v8o,w$,T8o,F8o,C8o,O5,Uoe,M8o,E8o,A$,y8o,w8o,A8o,X5,Joe,L8o,B8o,L$,x8o,k8o,R8o,z5,Yoe,S8o,P8o,B$,$8o,I8o,j8o,V5,Koe,N8o,D8o,x$,q8o,G8o,O8o,W5,Zoe,X8o,z8o,k$,V8o,W8o,Q8o,Q5,ere,H8o,U8o,R$,J8o,Y8o,K8o,H5,ore,Z8o,eFo,S$,oFo,rFo,tFo,U5,rre,aFo,nFo,P$,sFo,lFo,iFo,J5,tre,dFo,cFo,$$,fFo,mFo,gFo,Y5,are,hFo,pFo,I$,_Fo,uFo,bFo,K5,nre,vFo,TFo,j$,FFo,CFo,MFo,Z5,sre,EFo,yFo,N$,wFo,AFo,LFo,e1,lre,BFo,xFo,D$,kFo,RFo,SFo,o1,ire,PFo,$Fo,q$,IFo,jFo,NFo,r1,dre,DFo,qFo,G$,GFo,OFo,XFo,t1,cre,zFo,VFo,O$,WFo,QFo,HFo,a1,fre,UFo,JFo,X$,YFo,KFo,ZFo,n1,mre,e9o,o9o,z$,r9o,t9o,a9o,s1,gre,n9o,s9o,V$,l9o,i9o,d9o,l1,hre,c9o,f9o,W$,m9o,g9o,h9o,i1,pre,p9o,_9o,Q$,u9o,b9o,v9o,d1,_re,T9o,F9o,H$,C9o,M9o,E9o,c1,ure,y9o,w9o,U$,A9o,L9o,B9o,f1,bre,x9o,k9o,J$,R9o,S9o,P9o,m1,$9o,vre,I9o,j9o,Tre,N9o,D9o,Fre,q9o,G9o,EE,ILe,ad,g1,Cre,yE,O9o,Mre,X9o,jLe,Yo,wE,z9o,nd,V9o,Ere,W9o,Q9o,yre,H9o,U9o,J9o,AE,Y9o,wre,K9o,Z9o,eCo,zr,LE,oCo,Are,rCo,tCo,sd,aCo,Lre,nCo,sCo,Bre,lCo,iCo,dCo,xre,cCo,fCo,BE,mCo,Ie,xE,gCo,kre,hCo,pCo,Va,_Co,Rre,uCo,bCo,Sre,vCo,TCo,Pre,FCo,CCo,MCo,G,h1,$re,ECo,yCo,Y$,wCo,ACo,LCo,p1,Ire,BCo,xCo,K$,kCo,RCo,SCo,_1,jre,PCo,$Co,Z$,ICo,jCo,NCo,u1,Nre,DCo,qCo,eI,GCo,OCo,XCo,b1,Dre,zCo,VCo,oI,WCo,QCo,HCo,v1,qre,UCo,JCo,rI,YCo,KCo,ZCo,T1,Gre,e4o,o4o,tI,r4o,t4o,a4o,F1,Ore,n4o,s4o,aI,l4o,i4o,d4o,C1,Xre,c4o,f4o,nI,m4o,g4o,h4o,M1,zre,p4o,_4o,sI,u4o,b4o,v4o,E1,Vre,T4o,F4o,lI,C4o,M4o,E4o,y1,Wre,y4o,w4o,iI,A4o,L4o,B4o,w1,Qre,x4o,k4o,dI,R4o,S4o,P4o,A1,Hre,$4o,I4o,cI,j4o,N4o,D4o,L1,Ure,q4o,G4o,fI,O4o,X4o,z4o,B1,Jre,V4o,W4o,mI,Q4o,H4o,U4o,x1,Yre,J4o,Y4o,gI,K4o,Z4o,eMo,k1,Kre,oMo,rMo,hI,tMo,aMo,nMo,R1,Zre,sMo,lMo,pI,iMo,dMo,cMo,S1,ete,fMo,mMo,_I,gMo,hMo,pMo,P1,ote,_Mo,uMo,uI,bMo,vMo,TMo,$1,rte,FMo,CMo,bI,MMo,EMo,yMo,I1,tte,wMo,AMo,vI,LMo,BMo,xMo,j1,ate,kMo,RMo,TI,SMo,PMo,$Mo,N1,nte,IMo,jMo,FI,NMo,DMo,qMo,D1,ste,GMo,OMo,CI,XMo,zMo,VMo,q1,lte,WMo,QMo,MI,HMo,UMo,JMo,G1,YMo,ite,KMo,ZMo,dte,eEo,oEo,cte,rEo,tEo,kE,NLe,ld,O1,fte,RE,aEo,mte,nEo,DLe,Ko,SE,sEo,id,lEo,gte,iEo,dEo,hte,cEo,fEo,mEo,PE,gEo,pte,hEo,pEo,_Eo,Vr,$E,uEo,_te,bEo,vEo,dd,TEo,ute,FEo,CEo,bte,MEo,EEo,yEo,vte,wEo,AEo,IE,LEo,je,jE,BEo,Tte,xEo,kEo,Wa,REo,Fte,SEo,PEo,Cte,$Eo,IEo,Mte,jEo,NEo,DEo,na,X1,Ete,qEo,GEo,EI,OEo,XEo,zEo,z1,yte,VEo,WEo,yI,QEo,HEo,UEo,V1,wte,JEo,YEo,wI,KEo,ZEo,e3o,W1,Ate,o3o,r3o,AI,t3o,a3o,n3o,Q1,Lte,s3o,l3o,LI,i3o,d3o,c3o,H1,f3o,Bte,m3o,g3o,xte,h3o,p3o,kte,_3o,u3o,NE,qLe,cd,U1,Rte,DE,b3o,Ste,v3o,GLe,Zo,qE,T3o,fd,F3o,Pte,C3o,M3o,$te,E3o,y3o,w3o,GE,A3o,Ite,L3o,B3o,x3o,Wr,OE,k3o,jte,R3o,S3o,md,P3o,Nte,$3o,I3o,Dte,j3o,N3o,D3o,qte,q3o,G3o,XE,O3o,Ne,zE,X3o,Gte,z3o,V3o,Qa,W3o,Ote,Q3o,H3o,Xte,U3o,J3o,zte,Y3o,K3o,Z3o,D,J1,Vte,eyo,oyo,BI,ryo,tyo,ayo,Y1,Wte,nyo,syo,xI,lyo,iyo,dyo,K1,Qte,cyo,fyo,kI,myo,gyo,hyo,Z1,Hte,pyo,_yo,RI,uyo,byo,vyo,eb,Ute,Tyo,Fyo,SI,Cyo,Myo,Eyo,ob,Jte,yyo,wyo,PI,Ayo,Lyo,Byo,rb,Yte,xyo,kyo,$I,Ryo,Syo,Pyo,tb,Kte,$yo,Iyo,II,jyo,Nyo,Dyo,ab,Zte,qyo,Gyo,jI,Oyo,Xyo,zyo,nb,eae,Vyo,Wyo,NI,Qyo,Hyo,Uyo,sb,oae,Jyo,Yyo,DI,Kyo,Zyo,ewo,lb,rae,owo,rwo,qI,two,awo,nwo,ib,tae,swo,lwo,GI,iwo,dwo,cwo,db,aae,fwo,mwo,OI,gwo,hwo,pwo,cb,nae,_wo,uwo,XI,bwo,vwo,Two,fb,sae,Fwo,Cwo,zI,Mwo,Ewo,ywo,mb,lae,wwo,Awo,VI,Lwo,Bwo,xwo,gb,iae,kwo,Rwo,WI,Swo,Pwo,$wo,hb,dae,Iwo,jwo,QI,Nwo,Dwo,qwo,pb,cae,Gwo,Owo,HI,Xwo,zwo,Vwo,_b,fae,Wwo,Qwo,UI,Hwo,Uwo,Jwo,ub,mae,Ywo,Kwo,JI,Zwo,eAo,oAo,bb,gae,rAo,tAo,YI,aAo,nAo,sAo,vb,hae,lAo,iAo,KI,dAo,cAo,fAo,Tb,pae,mAo,gAo,ZI,hAo,pAo,_Ao,Fb,_ae,uAo,bAo,ej,vAo,TAo,FAo,Cb,uae,CAo,MAo,oj,EAo,yAo,wAo,Mb,bae,AAo,LAo,rj,BAo,xAo,kAo,Eb,vae,RAo,SAo,tj,PAo,$Ao,IAo,yb,Tae,jAo,NAo,aj,DAo,qAo,GAo,wb,Fae,OAo,XAo,nj,zAo,VAo,WAo,Ab,Cae,QAo,HAo,sj,UAo,JAo,YAo,Lb,KAo,Mae,ZAo,e6o,Eae,o6o,r6o,yae,t6o,a6o,VE,OLe,gd,Bb,wae,WE,n6o,Aae,s6o,XLe,er,QE,l6o,hd,i6o,Lae,d6o,c6o,Bae,f6o,m6o,g6o,HE,h6o,xae,p6o,_6o,u6o,Qr,UE,b6o,kae,v6o,T6o,pd,F6o,Rae,C6o,M6o,Sae,E6o,y6o,w6o,Pae,A6o,L6o,JE,B6o,De,YE,x6o,$ae,k6o,R6o,Ha,S6o,Iae,P6o,$6o,jae,I6o,j6o,Nae,N6o,D6o,q6o,R,xb,Dae,G6o,O6o,lj,X6o,z6o,V6o,kb,qae,W6o,Q6o,ij,H6o,U6o,J6o,Rb,Gae,Y6o,K6o,dj,Z6o,e0o,o0o,Sb,Oae,r0o,t0o,cj,a0o,n0o,s0o,Pb,Xae,l0o,i0o,fj,d0o,c0o,f0o,$b,zae,m0o,g0o,mj,h0o,p0o,_0o,Ib,Vae,u0o,b0o,gj,v0o,T0o,F0o,jb,Wae,C0o,M0o,hj,E0o,y0o,w0o,Nb,Qae,A0o,L0o,pj,B0o,x0o,k0o,Db,Hae,R0o,S0o,_j,P0o,$0o,I0o,qb,Uae,j0o,N0o,uj,D0o,q0o,G0o,Gb,Jae,O0o,X0o,bj,z0o,V0o,W0o,Ob,Yae,Q0o,H0o,vj,U0o,J0o,Y0o,Xb,Kae,K0o,Z0o,Tj,eLo,oLo,rLo,zb,Zae,tLo,aLo,Fj,nLo,sLo,lLo,Vb,ene,iLo,dLo,Cj,cLo,fLo,mLo,Wb,one,gLo,hLo,Mj,pLo,_Lo,uLo,Qb,rne,bLo,vLo,Ej,TLo,FLo,CLo,Hb,tne,MLo,ELo,yj,yLo,wLo,ALo,Ub,ane,LLo,BLo,wj,xLo,kLo,RLo,Jb,nne,SLo,PLo,Aj,$Lo,ILo,jLo,Yb,sne,NLo,DLo,Lj,qLo,GLo,OLo,Kb,lne,XLo,zLo,Bj,VLo,WLo,QLo,Zb,ine,HLo,ULo,xj,JLo,YLo,KLo,e2,dne,ZLo,e7o,kj,o7o,r7o,t7o,o2,cne,a7o,n7o,Rj,s7o,l7o,i7o,r2,fne,d7o,c7o,Sj,f7o,m7o,g7o,t2,mne,h7o,p7o,Pj,_7o,u7o,b7o,a2,gne,v7o,T7o,$j,F7o,C7o,M7o,n2,hne,E7o,y7o,Ij,w7o,A7o,L7o,s2,pne,B7o,x7o,jj,k7o,R7o,S7o,l2,_ne,P7o,$7o,Nj,I7o,j7o,N7o,i2,une,D7o,q7o,Dj,G7o,O7o,X7o,d2,bne,z7o,V7o,qj,W7o,Q7o,H7o,c2,vne,U7o,J7o,Gj,Y7o,K7o,Z7o,f2,Tne,eBo,oBo,Oj,rBo,tBo,aBo,m2,Fne,nBo,sBo,Xj,lBo,iBo,dBo,g2,Cne,cBo,fBo,zj,mBo,gBo,hBo,h2,pBo,Mne,_Bo,uBo,Ene,bBo,vBo,yne,TBo,FBo,KE,zLe,_d,p2,wne,ZE,CBo,Ane,MBo,VLe,or,e3,EBo,ud,yBo,Lne,wBo,ABo,Bne,LBo,BBo,xBo,o3,kBo,xne,RBo,SBo,PBo,Hr,r3,$Bo,kne,IBo,jBo,bd,NBo,Rne,DBo,qBo,Sne,GBo,OBo,XBo,Pne,zBo,VBo,t3,WBo,qe,a3,QBo,$ne,HBo,UBo,Ua,JBo,Ine,YBo,KBo,jne,ZBo,exo,Nne,oxo,rxo,txo,Dne,_2,qne,axo,nxo,Vj,sxo,lxo,ixo,u2,dxo,Gne,cxo,fxo,One,mxo,gxo,Xne,hxo,pxo,n3,WLe,vd,b2,zne,s3,_xo,Vne,uxo,QLe,rr,l3,bxo,Td,vxo,Wne,Txo,Fxo,Qne,Cxo,Mxo,Exo,i3,yxo,Hne,wxo,Axo,Lxo,Ur,d3,Bxo,Une,xxo,kxo,Fd,Rxo,Jne,Sxo,Pxo,Yne,$xo,Ixo,jxo,Kne,Nxo,Dxo,c3,qxo,Ge,f3,Gxo,Zne,Oxo,Xxo,Ja,zxo,ese,Vxo,Wxo,ose,Qxo,Hxo,rse,Uxo,Jxo,Yxo,be,v2,tse,Kxo,Zxo,Wj,eko,oko,rko,T2,ase,tko,ako,Qj,nko,sko,lko,Rs,nse,iko,dko,Hj,cko,fko,Uj,mko,gko,hko,F2,sse,pko,_ko,Jj,uko,bko,vko,la,lse,Tko,Fko,Yj,Cko,Mko,Kj,Eko,yko,Zj,wko,Ako,Lko,C2,ise,Bko,xko,eN,kko,Rko,Sko,M2,dse,Pko,$ko,oN,Iko,jko,Nko,E2,cse,Dko,qko,rN,Gko,Oko,Xko,y2,fse,zko,Vko,tN,Wko,Qko,Hko,w2,Uko,mse,Jko,Yko,gse,Kko,Zko,hse,eRo,oRo,m3,HLe,Cd,A2,pse,g3,rRo,_se,tRo,ULe,tr,h3,aRo,Md,nRo,use,sRo,lRo,bse,iRo,dRo,cRo,p3,fRo,vse,mRo,gRo,hRo,Jr,_3,pRo,Tse,_Ro,uRo,Ed,bRo,Fse,vRo,TRo,Cse,FRo,CRo,MRo,Mse,ERo,yRo,u3,wRo,Oe,b3,ARo,Ese,LRo,BRo,Ya,xRo,yse,kRo,RRo,wse,SRo,PRo,Ase,$Ro,IRo,jRo,Lse,L2,Bse,NRo,DRo,aN,qRo,GRo,ORo,B2,XRo,xse,zRo,VRo,kse,WRo,QRo,Rse,HRo,URo,v3,JLe,yd,x2,Sse,T3,JRo,Pse,YRo,YLe,ar,F3,KRo,wd,ZRo,$se,eSo,oSo,Ise,rSo,tSo,aSo,C3,nSo,jse,sSo,lSo,iSo,Yr,M3,dSo,Nse,cSo,fSo,Ad,mSo,Dse,gSo,hSo,qse,pSo,_So,uSo,Gse,bSo,vSo,E3,TSo,Xe,y3,FSo,Ose,CSo,MSo,Ka,ESo,Xse,ySo,wSo,zse,ASo,LSo,Vse,BSo,xSo,kSo,ao,k2,Wse,RSo,SSo,nN,PSo,$So,ISo,R2,Qse,jSo,NSo,sN,DSo,qSo,GSo,S2,Hse,OSo,XSo,lN,zSo,VSo,WSo,P2,Use,QSo,HSo,iN,USo,JSo,YSo,$2,Jse,KSo,ZSo,dN,ePo,oPo,rPo,I2,Yse,tPo,aPo,cN,nPo,sPo,lPo,j2,Kse,iPo,dPo,fN,cPo,fPo,mPo,N2,gPo,Zse,hPo,pPo,ele,_Po,uPo,ole,bPo,vPo,w3,KLe,Ld,D2,rle,A3,TPo,tle,FPo,ZLe,nr,L3,CPo,Bd,MPo,ale,EPo,yPo,nle,wPo,APo,LPo,B3,BPo,sle,xPo,kPo,RPo,Kr,x3,SPo,lle,PPo,$Po,xd,IPo,ile,jPo,NPo,dle,DPo,qPo,GPo,cle,OPo,XPo,k3,zPo,ze,R3,VPo,fle,WPo,QPo,Za,HPo,mle,UPo,JPo,gle,YPo,KPo,hle,ZPo,e$o,o$o,kd,q2,ple,r$o,t$o,mN,a$o,n$o,s$o,G2,_le,l$o,i$o,gN,d$o,c$o,f$o,O2,ule,m$o,g$o,hN,h$o,p$o,_$o,X2,u$o,ble,b$o,v$o,vle,T$o,F$o,Tle,C$o,M$o,S3,e7e,Rd,z2,Fle,P3,E$o,Cle,y$o,o7e,sr,$3,w$o,Sd,A$o,Mle,L$o,B$o,Ele,x$o,k$o,R$o,I3,S$o,yle,P$o,$$o,I$o,Zr,j3,j$o,wle,N$o,D$o,Pd,q$o,Ale,G$o,O$o,Lle,X$o,z$o,V$o,Ble,W$o,Q$o,N3,H$o,Ve,D3,U$o,xle,J$o,Y$o,en,K$o,kle,Z$o,eIo,Rle,oIo,rIo,Sle,tIo,aIo,nIo,no,V2,Ple,sIo,lIo,pN,iIo,dIo,cIo,W2,$le,fIo,mIo,_N,gIo,hIo,pIo,Q2,Ile,_Io,uIo,uN,bIo,vIo,TIo,H2,jle,FIo,CIo,bN,MIo,EIo,yIo,U2,Nle,wIo,AIo,vN,LIo,BIo,xIo,J2,Dle,kIo,RIo,TN,SIo,PIo,$Io,Y2,qle,IIo,jIo,FN,NIo,DIo,qIo,K2,GIo,Gle,OIo,XIo,Ole,zIo,VIo,Xle,WIo,QIo,q3,r7e,$d,Z2,zle,G3,HIo,Vle,UIo,t7e,lr,O3,JIo,Id,YIo,Wle,KIo,ZIo,Qle,ejo,ojo,rjo,X3,tjo,Hle,ajo,njo,sjo,et,z3,ljo,Ule,ijo,djo,jd,cjo,Jle,fjo,mjo,Yle,gjo,hjo,pjo,Kle,_jo,ujo,V3,bjo,We,W3,vjo,Zle,Tjo,Fjo,on,Cjo,eie,Mjo,Ejo,oie,yjo,wjo,rie,Ajo,Ljo,Bjo,Q3,ev,tie,xjo,kjo,CN,Rjo,Sjo,Pjo,ov,aie,$jo,Ijo,MN,jjo,Njo,Djo,rv,qjo,nie,Gjo,Ojo,sie,Xjo,zjo,lie,Vjo,Wjo,H3,a7e,Nd,tv,iie,U3,Qjo,die,Hjo,n7e,ir,J3,Ujo,Dd,Jjo,cie,Yjo,Kjo,fie,Zjo,eNo,oNo,Y3,rNo,mie,tNo,aNo,nNo,ot,K3,sNo,gie,lNo,iNo,qd,dNo,hie,cNo,fNo,pie,mNo,gNo,hNo,_ie,pNo,_No,Z3,uNo,Qe,ey,bNo,uie,vNo,TNo,rn,FNo,bie,CNo,MNo,vie,ENo,yNo,Tie,wNo,ANo,LNo,Gd,av,Fie,BNo,xNo,EN,kNo,RNo,SNo,nv,Cie,PNo,$No,yN,INo,jNo,NNo,sv,Mie,DNo,qNo,wN,GNo,ONo,XNo,lv,zNo,Eie,VNo,WNo,yie,QNo,HNo,wie,UNo,JNo,oy,s7e,Od,iv,Aie,ry,YNo,Lie,KNo,l7e,dr,ty,ZNo,Xd,eDo,Bie,oDo,rDo,xie,tDo,aDo,nDo,ay,sDo,kie,lDo,iDo,dDo,rt,ny,cDo,Rie,fDo,mDo,zd,gDo,Sie,hDo,pDo,Pie,_Do,uDo,bDo,$ie,vDo,TDo,sy,FDo,He,ly,CDo,Iie,MDo,EDo,tn,yDo,jie,wDo,ADo,Nie,LDo,BDo,Die,xDo,kDo,RDo,Vd,dv,qie,SDo,PDo,AN,$Do,IDo,jDo,cv,Gie,NDo,DDo,LN,qDo,GDo,ODo,fv,Oie,XDo,zDo,BN,VDo,WDo,QDo,mv,HDo,Xie,UDo,JDo,zie,YDo,KDo,Vie,ZDo,eqo,iy,i7e,Wd,gv,Wie,dy,oqo,Qie,rqo,d7e,cr,cy,tqo,Qd,aqo,Hie,nqo,sqo,Uie,lqo,iqo,dqo,fy,cqo,Jie,fqo,mqo,gqo,tt,my,hqo,Yie,pqo,_qo,Hd,uqo,Kie,bqo,vqo,Zie,Tqo,Fqo,Cqo,ede,Mqo,Eqo,gy,yqo,Ue,hy,wqo,ode,Aqo,Lqo,an,Bqo,rde,xqo,kqo,tde,Rqo,Sqo,ade,Pqo,$qo,Iqo,nde,hv,sde,jqo,Nqo,xN,Dqo,qqo,Gqo,pv,Oqo,lde,Xqo,zqo,ide,Vqo,Wqo,dde,Qqo,Hqo,py,c7e,Ud,_v,cde,_y,Uqo,fde,Jqo,f7e,fr,uy,Yqo,Jd,Kqo,mde,Zqo,eGo,gde,oGo,rGo,tGo,by,aGo,hde,nGo,sGo,lGo,at,vy,iGo,pde,dGo,cGo,Yd,fGo,_de,mGo,gGo,ude,hGo,pGo,_Go,bde,uGo,bGo,Ty,vGo,Je,Fy,TGo,vde,FGo,CGo,nn,MGo,Tde,EGo,yGo,Fde,wGo,AGo,Cde,LGo,BGo,xGo,Mde,uv,Ede,kGo,RGo,kN,SGo,PGo,$Go,bv,IGo,yde,jGo,NGo,wde,DGo,qGo,Ade,GGo,OGo,Cy,m7e,Kd,vv,Lde,My,XGo,Bde,zGo,g7e,mr,Ey,VGo,Zd,WGo,xde,QGo,HGo,kde,UGo,JGo,YGo,yy,KGo,Rde,ZGo,eOo,oOo,nt,wy,rOo,Sde,tOo,aOo,ec,nOo,Pde,sOo,lOo,$de,iOo,dOo,cOo,Ide,fOo,mOo,Ay,gOo,Ye,Ly,hOo,jde,pOo,_Oo,sn,uOo,Nde,bOo,vOo,Dde,TOo,FOo,qde,COo,MOo,EOo,By,Tv,Gde,yOo,wOo,RN,AOo,LOo,BOo,Fv,Ode,xOo,kOo,SN,ROo,SOo,POo,Cv,$Oo,Xde,IOo,jOo,zde,NOo,DOo,Vde,qOo,GOo,xy,h7e,oc,Mv,Wde,ky,OOo,Qde,XOo,p7e,gr,Ry,zOo,rc,VOo,Hde,WOo,QOo,Ude,HOo,UOo,JOo,Sy,YOo,Jde,KOo,ZOo,eXo,st,Py,oXo,Yde,rXo,tXo,tc,aXo,Kde,nXo,sXo,Zde,lXo,iXo,dXo,ece,cXo,fXo,$y,mXo,go,Iy,gXo,oce,hXo,pXo,ln,_Xo,rce,uXo,bXo,tce,vXo,TXo,ace,FXo,CXo,MXo,B,Ev,nce,EXo,yXo,PN,wXo,AXo,LXo,yv,sce,BXo,xXo,$N,kXo,RXo,SXo,wv,lce,PXo,$Xo,IN,IXo,jXo,NXo,Av,ice,DXo,qXo,jN,GXo,OXo,XXo,Lv,dce,zXo,VXo,NN,WXo,QXo,HXo,Bv,cce,UXo,JXo,DN,YXo,KXo,ZXo,xv,fce,ezo,ozo,qN,rzo,tzo,azo,kv,mce,nzo,szo,GN,lzo,izo,dzo,Rv,gce,czo,fzo,ON,mzo,gzo,hzo,Sv,hce,pzo,_zo,XN,uzo,bzo,vzo,Pv,pce,Tzo,Fzo,zN,Czo,Mzo,Ezo,$v,_ce,yzo,wzo,VN,Azo,Lzo,Bzo,Iv,uce,xzo,kzo,WN,Rzo,Szo,Pzo,jv,bce,$zo,Izo,QN,jzo,Nzo,Dzo,Nv,vce,qzo,Gzo,HN,Ozo,Xzo,zzo,Dv,Tce,Vzo,Wzo,UN,Qzo,Hzo,Uzo,Ss,Fce,Jzo,Yzo,JN,Kzo,Zzo,YN,eVo,oVo,rVo,qv,Cce,tVo,aVo,KN,nVo,sVo,lVo,Gv,Mce,iVo,dVo,ZN,cVo,fVo,mVo,Ov,Ece,gVo,hVo,eD,pVo,_Vo,uVo,Xv,yce,bVo,vVo,oD,TVo,FVo,CVo,zv,wce,MVo,EVo,rD,yVo,wVo,AVo,Vv,Ace,LVo,BVo,tD,xVo,kVo,RVo,Wv,Lce,SVo,PVo,aD,$Vo,IVo,jVo,Qv,Bce,NVo,DVo,nD,qVo,GVo,OVo,Hv,xce,XVo,zVo,sD,VVo,WVo,QVo,Uv,kce,HVo,UVo,lD,JVo,YVo,KVo,Jv,Rce,ZVo,eWo,iD,oWo,rWo,tWo,Yv,Sce,aWo,nWo,dD,sWo,lWo,iWo,Kv,Pce,dWo,cWo,cD,fWo,mWo,gWo,Zv,$ce,hWo,pWo,fD,_Wo,uWo,bWo,eT,Ice,vWo,TWo,mD,FWo,CWo,MWo,oT,jce,EWo,yWo,gD,wWo,AWo,LWo,rT,Nce,BWo,xWo,hD,kWo,RWo,SWo,tT,Dce,PWo,$Wo,pD,IWo,jWo,NWo,aT,qce,DWo,qWo,_D,GWo,OWo,XWo,nT,Gce,zWo,VWo,uD,WWo,QWo,HWo,sT,Oce,UWo,JWo,bD,YWo,KWo,ZWo,lT,Xce,eQo,oQo,vD,rQo,tQo,aQo,iT,zce,nQo,sQo,TD,lQo,iQo,dQo,dT,Vce,cQo,fQo,FD,mQo,gQo,hQo,cT,Wce,pQo,_Qo,CD,uQo,bQo,vQo,Qce,TQo,FQo,jy,_7e,ac,fT,Hce,Ny,CQo,Uce,MQo,u7e,hr,Dy,EQo,nc,yQo,Jce,wQo,AQo,Yce,LQo,BQo,xQo,qy,kQo,Kce,RQo,SQo,PQo,lt,Gy,$Qo,Zce,IQo,jQo,sc,NQo,efe,DQo,qQo,ofe,GQo,OQo,XQo,rfe,zQo,VQo,Oy,WQo,ho,Xy,QQo,tfe,HQo,UQo,dn,JQo,afe,YQo,KQo,nfe,ZQo,eHo,sfe,oHo,rHo,tHo,H,mT,lfe,aHo,nHo,MD,sHo,lHo,iHo,gT,ife,dHo,cHo,ED,fHo,mHo,gHo,hT,dfe,hHo,pHo,yD,_Ho,uHo,bHo,pT,cfe,vHo,THo,wD,FHo,CHo,MHo,_T,ffe,EHo,yHo,AD,wHo,AHo,LHo,uT,mfe,BHo,xHo,LD,kHo,RHo,SHo,bT,gfe,PHo,$Ho,BD,IHo,jHo,NHo,vT,hfe,DHo,qHo,xD,GHo,OHo,XHo,TT,pfe,zHo,VHo,kD,WHo,QHo,HHo,FT,_fe,UHo,JHo,RD,YHo,KHo,ZHo,CT,ufe,eUo,oUo,SD,rUo,tUo,aUo,MT,bfe,nUo,sUo,PD,lUo,iUo,dUo,ET,vfe,cUo,fUo,$D,mUo,gUo,hUo,yT,Tfe,pUo,_Uo,ID,uUo,bUo,vUo,wT,Ffe,TUo,FUo,jD,CUo,MUo,EUo,AT,Cfe,yUo,wUo,ND,AUo,LUo,BUo,LT,Mfe,xUo,kUo,DD,RUo,SUo,PUo,BT,Efe,$Uo,IUo,qD,jUo,NUo,DUo,xT,yfe,qUo,GUo,GD,OUo,XUo,zUo,kT,wfe,VUo,WUo,OD,QUo,HUo,UUo,RT,Afe,JUo,YUo,XD,KUo,ZUo,eJo,ST,Lfe,oJo,rJo,zD,tJo,aJo,nJo,Bfe,sJo,lJo,zy,b7e,lc,PT,xfe,Vy,iJo,kfe,dJo,v7e,pr,Wy,cJo,ic,fJo,Rfe,mJo,gJo,Sfe,hJo,pJo,_Jo,Qy,uJo,Pfe,bJo,vJo,TJo,it,Hy,FJo,$fe,CJo,MJo,dc,EJo,Ife,yJo,wJo,jfe,AJo,LJo,BJo,Nfe,xJo,kJo,Uy,RJo,po,Jy,SJo,Dfe,PJo,$Jo,cn,IJo,qfe,jJo,NJo,Gfe,DJo,qJo,Ofe,GJo,OJo,XJo,he,$T,Xfe,zJo,VJo,VD,WJo,QJo,HJo,IT,zfe,UJo,JJo,WD,YJo,KJo,ZJo,jT,Vfe,eYo,oYo,QD,rYo,tYo,aYo,NT,Wfe,nYo,sYo,HD,lYo,iYo,dYo,DT,Qfe,cYo,fYo,UD,mYo,gYo,hYo,qT,Hfe,pYo,_Yo,JD,uYo,bYo,vYo,GT,Ufe,TYo,FYo,YD,CYo,MYo,EYo,OT,Jfe,yYo,wYo,KD,AYo,LYo,BYo,XT,Yfe,xYo,kYo,ZD,RYo,SYo,PYo,zT,Kfe,$Yo,IYo,eq,jYo,NYo,DYo,Zfe,qYo,GYo,Yy,T7e,cc,VT,eme,Ky,OYo,ome,XYo,F7e,_r,Zy,zYo,fc,VYo,rme,WYo,QYo,tme,HYo,UYo,JYo,ew,YYo,ame,KYo,ZYo,eKo,dt,ow,oKo,nme,rKo,tKo,mc,aKo,sme,nKo,sKo,lme,lKo,iKo,dKo,ime,cKo,fKo,rw,mKo,_o,tw,gKo,dme,hKo,pKo,fn,_Ko,cme,uKo,bKo,fme,vKo,TKo,mme,FKo,CKo,MKo,aw,WT,gme,EKo,yKo,oq,wKo,AKo,LKo,QT,hme,BKo,xKo,rq,kKo,RKo,SKo,pme,PKo,$Ko,nw,C7e,gc,HT,_me,sw,IKo,ume,jKo,M7e,ur,lw,NKo,hc,DKo,bme,qKo,GKo,vme,OKo,XKo,zKo,iw,VKo,Tme,WKo,QKo,HKo,ct,dw,UKo,Fme,JKo,YKo,pc,KKo,Cme,ZKo,eZo,Mme,oZo,rZo,tZo,Eme,aZo,nZo,cw,sZo,uo,fw,lZo,yme,iZo,dZo,mn,cZo,wme,fZo,mZo,Ame,gZo,hZo,Lme,pZo,_Zo,uZo,Y,UT,Bme,bZo,vZo,tq,TZo,FZo,CZo,JT,xme,MZo,EZo,aq,yZo,wZo,AZo,YT,kme,LZo,BZo,nq,xZo,kZo,RZo,KT,Rme,SZo,PZo,sq,$Zo,IZo,jZo,ZT,Sme,NZo,DZo,lq,qZo,GZo,OZo,e8,Pme,XZo,zZo,iq,VZo,WZo,QZo,o8,$me,HZo,UZo,dq,JZo,YZo,KZo,r8,Ime,ZZo,eer,cq,oer,rer,ter,t8,jme,aer,ner,fq,ser,ler,ier,a8,Nme,der,cer,mq,fer,mer,ger,n8,Dme,her,per,gq,_er,uer,ber,s8,qme,ver,Ter,hq,Fer,Cer,Mer,l8,Gme,Eer,yer,pq,wer,Aer,Ler,i8,Ome,Ber,xer,_q,ker,Rer,Ser,d8,Xme,Per,$er,uq,Ier,jer,Ner,c8,zme,Der,qer,bq,Ger,Oer,Xer,f8,Vme,zer,Ver,vq,Wer,Qer,Her,m8,Wme,Uer,Jer,Tq,Yer,Ker,Zer,g8,Qme,eor,oor,Fq,ror,tor,aor,h8,Hme,nor,sor,Cq,lor,ior,dor,Ume,cor,mor,mw,E7e,_c,p8,Jme,gw,gor,Yme,hor,y7e,br,hw,por,uc,_or,Kme,uor,bor,Zme,vor,Tor,For,pw,Cor,ege,Mor,Eor,yor,ft,_w,wor,oge,Aor,Lor,bc,Bor,rge,xor,kor,tge,Ror,Sor,Por,age,$or,Ior,uw,jor,bo,bw,Nor,nge,Dor,qor,gn,Gor,sge,Oor,Xor,lge,zor,Vor,ige,Wor,Qor,Hor,pe,_8,dge,Uor,Jor,Mq,Yor,Kor,Zor,u8,cge,err,orr,Eq,rrr,trr,arr,b8,fge,nrr,srr,yq,lrr,irr,drr,v8,mge,crr,frr,wq,mrr,grr,hrr,T8,gge,prr,_rr,Aq,urr,brr,vrr,F8,hge,Trr,Frr,Lq,Crr,Mrr,Err,C8,pge,yrr,wrr,Bq,Arr,Lrr,Brr,M8,_ge,xrr,krr,xq,Rrr,Srr,Prr,E8,uge,$rr,Irr,kq,jrr,Nrr,Drr,y8,bge,qrr,Grr,Rq,Orr,Xrr,zrr,vge,Vrr,Wrr,vw,w7e,vc,w8,Tge,Tw,Qrr,Fge,Hrr,A7e,vr,Fw,Urr,Tc,Jrr,Cge,Yrr,Krr,Mge,Zrr,etr,otr,Cw,rtr,Ege,ttr,atr,ntr,mt,Mw,str,yge,ltr,itr,Fc,dtr,wge,ctr,ftr,Age,mtr,gtr,htr,Lge,ptr,_tr,Ew,utr,vo,yw,btr,Bge,vtr,Ttr,hn,Ftr,xge,Ctr,Mtr,kge,Etr,ytr,Rge,wtr,Atr,Ltr,X,A8,Sge,Btr,xtr,Sq,ktr,Rtr,Str,L8,Pge,Ptr,$tr,Pq,Itr,jtr,Ntr,B8,$ge,Dtr,qtr,$q,Gtr,Otr,Xtr,x8,Ige,ztr,Vtr,Iq,Wtr,Qtr,Htr,k8,jge,Utr,Jtr,jq,Ytr,Ktr,Ztr,R8,Nge,ear,oar,Nq,rar,tar,aar,S8,Dge,nar,sar,Dq,lar,iar,dar,P8,qge,car,far,qq,mar,gar,har,$8,Gge,par,_ar,Gq,uar,bar,Tar,I8,Oge,Far,Car,Oq,Mar,Ear,yar,j8,Xge,war,Aar,Xq,Lar,Bar,xar,N8,zge,kar,Rar,zq,Sar,Par,$ar,D8,Vge,Iar,jar,Vq,Nar,Dar,qar,q8,Wge,Gar,Oar,Wq,Xar,zar,Var,G8,Qge,War,Qar,Qq,Har,Uar,Jar,O8,Hge,Yar,Kar,Hq,Zar,enr,onr,X8,Uge,rnr,tnr,Uq,anr,nnr,snr,z8,Jge,lnr,inr,Jq,dnr,cnr,fnr,V8,Yge,mnr,gnr,Yq,hnr,pnr,_nr,W8,Kge,unr,bnr,Kq,vnr,Tnr,Fnr,Q8,Zge,Cnr,Mnr,Zq,Enr,ynr,wnr,H8,ehe,Anr,Lnr,eG,Bnr,xnr,knr,U8,ohe,Rnr,Snr,oG,Pnr,$nr,Inr,J8,rhe,jnr,Nnr,rG,Dnr,qnr,Gnr,Y8,the,Onr,Xnr,tG,znr,Vnr,Wnr,ahe,Qnr,Hnr,ww,L7e,Cc,K8,nhe,Aw,Unr,she,Jnr,B7e,Tr,Lw,Ynr,Mc,Knr,lhe,Znr,esr,ihe,osr,rsr,tsr,Bw,asr,dhe,nsr,ssr,lsr,gt,xw,isr,che,dsr,csr,Ec,fsr,fhe,msr,gsr,mhe,hsr,psr,_sr,ghe,usr,bsr,kw,vsr,To,Rw,Tsr,hhe,Fsr,Csr,pn,Msr,phe,Esr,ysr,_he,wsr,Asr,uhe,Lsr,Bsr,xsr,te,Z8,bhe,ksr,Rsr,aG,Ssr,Psr,$sr,eF,vhe,Isr,jsr,nG,Nsr,Dsr,qsr,oF,The,Gsr,Osr,sG,Xsr,zsr,Vsr,rF,Fhe,Wsr,Qsr,lG,Hsr,Usr,Jsr,tF,Che,Ysr,Ksr,iG,Zsr,elr,olr,aF,Mhe,rlr,tlr,dG,alr,nlr,slr,nF,Ehe,llr,ilr,cG,dlr,clr,flr,sF,yhe,mlr,glr,fG,hlr,plr,_lr,lF,whe,ulr,blr,mG,vlr,Tlr,Flr,iF,Ahe,Clr,Mlr,gG,Elr,ylr,wlr,dF,Lhe,Alr,Llr,hG,Blr,xlr,klr,cF,Bhe,Rlr,Slr,pG,Plr,$lr,Ilr,fF,xhe,jlr,Nlr,_G,Dlr,qlr,Glr,mF,khe,Olr,Xlr,uG,zlr,Vlr,Wlr,gF,Rhe,Qlr,Hlr,bG,Ulr,Jlr,Ylr,hF,She,Klr,Zlr,vG,eir,oir,rir,pF,Phe,tir,air,TG,nir,sir,lir,$he,iir,dir,Sw,x7e,yc,_F,Ihe,Pw,cir,jhe,fir,k7e,Fr,$w,mir,wc,gir,Nhe,hir,pir,Dhe,_ir,uir,bir,Iw,vir,qhe,Tir,Fir,Cir,ht,jw,Mir,Ghe,Eir,yir,Ac,wir,Ohe,Air,Lir,Xhe,Bir,xir,kir,zhe,Rir,Sir,Nw,Pir,Fo,Dw,$ir,Vhe,Iir,jir,_n,Nir,Whe,Dir,qir,Qhe,Gir,Oir,Hhe,Xir,zir,Vir,Uhe,uF,Jhe,Wir,Qir,FG,Hir,Uir,Jir,Yhe,Yir,Kir,qw,R7e,Lc,bF,Khe,Gw,Zir,Zhe,edr,S7e,Cr,Ow,odr,Bc,rdr,epe,tdr,adr,ope,ndr,sdr,ldr,Xw,idr,rpe,ddr,cdr,fdr,pt,zw,mdr,tpe,gdr,hdr,xc,pdr,ape,_dr,udr,npe,bdr,vdr,Tdr,spe,Fdr,Cdr,Vw,Mdr,Co,Ww,Edr,lpe,ydr,wdr,un,Adr,ipe,Ldr,Bdr,dpe,xdr,kdr,cpe,Rdr,Sdr,Pdr,K,vF,fpe,$dr,Idr,CG,jdr,Ndr,Ddr,TF,mpe,qdr,Gdr,MG,Odr,Xdr,zdr,FF,gpe,Vdr,Wdr,EG,Qdr,Hdr,Udr,CF,hpe,Jdr,Ydr,yG,Kdr,Zdr,ecr,MF,ppe,ocr,rcr,wG,tcr,acr,ncr,EF,_pe,scr,lcr,AG,icr,dcr,ccr,yF,upe,fcr,mcr,LG,gcr,hcr,pcr,wF,bpe,_cr,ucr,BG,bcr,vcr,Tcr,AF,vpe,Fcr,Ccr,xG,Mcr,Ecr,ycr,LF,Tpe,wcr,Acr,kG,Lcr,Bcr,xcr,BF,Fpe,kcr,Rcr,RG,Scr,Pcr,$cr,xF,Cpe,Icr,jcr,SG,Ncr,Dcr,qcr,kF,Mpe,Gcr,Ocr,PG,Xcr,zcr,Vcr,RF,Epe,Wcr,Qcr,$G,Hcr,Ucr,Jcr,SF,ype,Ycr,Kcr,IG,Zcr,efr,ofr,PF,wpe,rfr,tfr,jG,afr,nfr,sfr,$F,Ape,lfr,ifr,NG,dfr,cfr,ffr,IF,Lpe,mfr,gfr,DG,hfr,pfr,_fr,jF,Bpe,ufr,bfr,qG,vfr,Tfr,Ffr,NF,xpe,Cfr,Mfr,GG,Efr,yfr,wfr,kpe,Afr,Lfr,Qw,P7e,kc,DF,Rpe,Hw,Bfr,Spe,xfr,$7e,Mr,Uw,kfr,Rc,Rfr,Ppe,Sfr,Pfr,$pe,$fr,Ifr,jfr,Jw,Nfr,Ipe,Dfr,qfr,Gfr,_t,Yw,Ofr,jpe,Xfr,zfr,Sc,Vfr,Npe,Wfr,Qfr,Dpe,Hfr,Ufr,Jfr,qpe,Yfr,Kfr,Kw,Zfr,Mo,Zw,emr,Gpe,omr,rmr,bn,tmr,Ope,amr,nmr,Xpe,smr,lmr,zpe,imr,dmr,cmr,Z,qF,Vpe,fmr,mmr,OG,gmr,hmr,pmr,GF,Wpe,_mr,umr,XG,bmr,vmr,Tmr,OF,Qpe,Fmr,Cmr,zG,Mmr,Emr,ymr,XF,Hpe,wmr,Amr,VG,Lmr,Bmr,xmr,zF,Upe,kmr,Rmr,WG,Smr,Pmr,$mr,VF,Jpe,Imr,jmr,QG,Nmr,Dmr,qmr,WF,Ype,Gmr,Omr,HG,Xmr,zmr,Vmr,QF,Kpe,Wmr,Qmr,UG,Hmr,Umr,Jmr,HF,Zpe,Ymr,Kmr,JG,Zmr,egr,ogr,UF,e_e,rgr,tgr,YG,agr,ngr,sgr,JF,o_e,lgr,igr,KG,dgr,cgr,fgr,YF,r_e,mgr,ggr,ZG,hgr,pgr,_gr,KF,t_e,ugr,bgr,eO,vgr,Tgr,Fgr,ZF,a_e,Cgr,Mgr,oO,Egr,ygr,wgr,e9,n_e,Agr,Lgr,rO,Bgr,xgr,kgr,o9,s_e,Rgr,Sgr,tO,Pgr,$gr,Igr,r9,l_e,jgr,Ngr,aO,Dgr,qgr,Ggr,t9,i_e,Ogr,Xgr,nO,zgr,Vgr,Wgr,a9,d_e,Qgr,Hgr,sO,Ugr,Jgr,Ygr,c_e,Kgr,Zgr,eA,I7e,Pc,n9,f_e,oA,ehr,m_e,ohr,j7e,Er,rA,rhr,$c,thr,g_e,ahr,nhr,h_e,shr,lhr,ihr,tA,dhr,p_e,chr,fhr,mhr,ut,aA,ghr,__e,hhr,phr,Ic,_hr,u_e,uhr,bhr,b_e,vhr,Thr,Fhr,v_e,Chr,Mhr,nA,Ehr,Eo,sA,yhr,T_e,whr,Ahr,vn,Lhr,F_e,Bhr,xhr,C_e,khr,Rhr,M_e,Shr,Phr,$hr,E_e,s9,y_e,Ihr,jhr,lO,Nhr,Dhr,qhr,w_e,Ghr,Ohr,lA,N7e,jc,l9,A_e,iA,Xhr,L_e,zhr,D7e,yr,dA,Vhr,Nc,Whr,B_e,Qhr,Hhr,x_e,Uhr,Jhr,Yhr,cA,Khr,k_e,Zhr,epr,opr,bt,fA,rpr,R_e,tpr,apr,Dc,npr,S_e,spr,lpr,P_e,ipr,dpr,cpr,$_e,fpr,mpr,mA,gpr,yo,gA,hpr,I_e,ppr,_pr,Tn,upr,j_e,bpr,vpr,N_e,Tpr,Fpr,D_e,Cpr,Mpr,Epr,q_e,i9,G_e,ypr,wpr,iO,Apr,Lpr,Bpr,O_e,xpr,kpr,hA,q7e,qc,d9,X_e,pA,Rpr,z_e,Spr,G7e,wr,_A,Ppr,Gc,$pr,V_e,Ipr,jpr,W_e,Npr,Dpr,qpr,uA,Gpr,Q_e,Opr,Xpr,zpr,vt,bA,Vpr,H_e,Wpr,Qpr,Oc,Hpr,U_e,Upr,Jpr,J_e,Ypr,Kpr,Zpr,Y_e,e_r,o_r,vA,r_r,wo,TA,t_r,K_e,a_r,n_r,Fn,s_r,Z_e,l_r,i_r,eue,d_r,c_r,oue,f_r,m_r,g_r,V,c9,rue,h_r,p_r,dO,__r,u_r,b_r,f9,tue,v_r,T_r,cO,F_r,C_r,M_r,m9,aue,E_r,y_r,fO,w_r,A_r,L_r,g9,nue,B_r,x_r,mO,k_r,R_r,S_r,h9,sue,P_r,$_r,gO,I_r,j_r,N_r,p9,lue,D_r,q_r,hO,G_r,O_r,X_r,_9,iue,z_r,V_r,pO,W_r,Q_r,H_r,u9,due,U_r,J_r,_O,Y_r,K_r,Z_r,b9,cue,eur,our,uO,rur,tur,aur,v9,fue,nur,sur,bO,lur,iur,dur,T9,mue,cur,fur,vO,mur,gur,hur,F9,gue,pur,_ur,TO,uur,bur,vur,C9,hue,Tur,Fur,FO,Cur,Mur,Eur,M9,pue,yur,wur,CO,Aur,Lur,Bur,E9,_ue,xur,kur,MO,Rur,Sur,Pur,y9,uue,$ur,Iur,EO,jur,Nur,Dur,w9,bue,qur,Gur,yO,Our,Xur,zur,A9,vue,Vur,Wur,wO,Qur,Hur,Uur,L9,Tue,Jur,Yur,AO,Kur,Zur,e5r,B9,Fue,o5r,r5r,LO,t5r,a5r,n5r,x9,Cue,s5r,l5r,BO,i5r,d5r,c5r,k9,Mue,f5r,m5r,xO,g5r,h5r,p5r,R9,Eue,_5r,u5r,kO,b5r,v5r,T5r,S9,yue,F5r,C5r,RO,M5r,E5r,y5r,wue,w5r,A5r,FA,O7e,Xc,P9,Aue,CA,L5r,Lue,B5r,X7e,Ar,MA,x5r,zc,k5r,Bue,R5r,S5r,xue,P5r,$5r,I5r,EA,j5r,kue,N5r,D5r,q5r,Tt,yA,G5r,Rue,O5r,X5r,Vc,z5r,Sue,V5r,W5r,Pue,Q5r,H5r,U5r,$ue,J5r,Y5r,wA,K5r,Ao,AA,Z5r,Iue,e1r,o1r,Cn,r1r,jue,t1r,a1r,Nue,n1r,s1r,Due,l1r,i1r,d1r,Mn,$9,que,c1r,f1r,SO,m1r,g1r,h1r,I9,Gue,p1r,_1r,PO,u1r,b1r,v1r,j9,Oue,T1r,F1r,$O,C1r,M1r,E1r,N9,Xue,y1r,w1r,IO,A1r,L1r,B1r,zue,x1r,k1r,LA,z7e,Wc,D9,Vue,BA,R1r,Wue,S1r,V7e,Lr,xA,P1r,Qc,$1r,Que,I1r,j1r,Hue,N1r,D1r,q1r,kA,G1r,Uue,O1r,X1r,z1r,Ft,RA,V1r,Jue,W1r,Q1r,Hc,H1r,Yue,U1r,J1r,Kue,Y1r,K1r,Z1r,Zue,ebr,obr,SA,rbr,Lo,PA,tbr,e5e,abr,nbr,En,sbr,o5e,lbr,ibr,r5e,dbr,cbr,t5e,fbr,mbr,gbr,fe,q9,a5e,hbr,pbr,jO,_br,ubr,bbr,G9,n5e,vbr,Tbr,NO,Fbr,Cbr,Mbr,O9,s5e,Ebr,ybr,DO,wbr,Abr,Lbr,X9,l5e,Bbr,xbr,qO,kbr,Rbr,Sbr,z9,i5e,Pbr,$br,GO,Ibr,jbr,Nbr,V9,d5e,Dbr,qbr,OO,Gbr,Obr,Xbr,W9,c5e,zbr,Vbr,XO,Wbr,Qbr,Hbr,Q9,f5e,Ubr,Jbr,zO,Ybr,Kbr,Zbr,H9,m5e,e2r,o2r,VO,r2r,t2r,a2r,U9,g5e,n2r,s2r,WO,l2r,i2r,d2r,J9,h5e,c2r,f2r,QO,m2r,g2r,h2r,p5e,p2r,_2r,$A,W7e,Uc,Y9,_5e,IA,u2r,u5e,b2r,Q7e,Br,jA,v2r,Jc,T2r,b5e,F2r,C2r,v5e,M2r,E2r,y2r,NA,w2r,T5e,A2r,L2r,B2r,Ct,DA,x2r,F5e,k2r,R2r,Yc,S2r,C5e,P2r,$2r,M5e,I2r,j2r,N2r,E5e,D2r,q2r,qA,G2r,Bo,GA,O2r,y5e,X2r,z2r,yn,V2r,w5e,W2r,Q2r,A5e,H2r,U2r,L5e,J2r,Y2r,K2r,ve,K9,B5e,Z2r,evr,HO,ovr,rvr,tvr,Z9,x5e,avr,nvr,UO,svr,lvr,ivr,eC,k5e,dvr,cvr,JO,fvr,mvr,gvr,oC,R5e,hvr,pvr,YO,_vr,uvr,bvr,rC,S5e,vvr,Tvr,KO,Fvr,Cvr,Mvr,tC,P5e,Evr,yvr,ZO,wvr,Avr,Lvr,aC,$5e,Bvr,xvr,eX,kvr,Rvr,Svr,nC,I5e,Pvr,$vr,oX,Ivr,jvr,Nvr,sC,j5e,Dvr,qvr,rX,Gvr,Ovr,Xvr,N5e,zvr,Vvr,OA,H7e,Kc,lC,D5e,XA,Wvr,q5e,Qvr,U7e,xr,zA,Hvr,Zc,Uvr,G5e,Jvr,Yvr,O5e,Kvr,Zvr,eTr,VA,oTr,X5e,rTr,tTr,aTr,Mt,WA,nTr,z5e,sTr,lTr,ef,iTr,V5e,dTr,cTr,W5e,fTr,mTr,gTr,Q5e,hTr,pTr,QA,_Tr,xo,HA,uTr,H5e,bTr,vTr,wn,TTr,U5e,FTr,CTr,J5e,MTr,ETr,Y5e,yTr,wTr,ATr,Te,iC,K5e,LTr,BTr,tX,xTr,kTr,RTr,dC,Z5e,STr,PTr,aX,$Tr,ITr,jTr,cC,e1e,NTr,DTr,nX,qTr,GTr,OTr,fC,o1e,XTr,zTr,sX,VTr,WTr,QTr,mC,r1e,HTr,UTr,lX,JTr,YTr,KTr,gC,t1e,ZTr,e8r,iX,o8r,r8r,t8r,hC,a1e,a8r,n8r,dX,s8r,l8r,i8r,pC,n1e,d8r,c8r,cX,f8r,m8r,g8r,_C,s1e,h8r,p8r,fX,_8r,u8r,b8r,l1e,v8r,T8r,UA,J7e,of,uC,i1e,JA,F8r,d1e,C8r,Y7e,kr,YA,M8r,rf,E8r,c1e,y8r,w8r,f1e,A8r,L8r,B8r,KA,x8r,m1e,k8r,R8r,S8r,Et,ZA,P8r,g1e,$8r,I8r,tf,j8r,h1e,N8r,D8r,p1e,q8r,G8r,O8r,_1e,X8r,z8r,e6,V8r,ko,o6,W8r,u1e,Q8r,H8r,An,U8r,b1e,J8r,Y8r,v1e,K8r,Z8r,T1e,eFr,oFr,rFr,Fe,bC,F1e,tFr,aFr,mX,nFr,sFr,lFr,vC,C1e,iFr,dFr,gX,cFr,fFr,mFr,TC,M1e,gFr,hFr,hX,pFr,_Fr,uFr,FC,E1e,bFr,vFr,pX,TFr,FFr,CFr,CC,y1e,MFr,EFr,_X,yFr,wFr,AFr,MC,w1e,LFr,BFr,uX,xFr,kFr,RFr,EC,A1e,SFr,PFr,bX,$Fr,IFr,jFr,yC,L1e,NFr,DFr,vX,qFr,GFr,OFr,wC,B1e,XFr,zFr,TX,VFr,WFr,QFr,x1e,HFr,UFr,r6,K7e,af,AC,k1e,t6,JFr,R1e,YFr,Z7e,Rr,a6,KFr,nf,ZFr,S1e,e9r,o9r,P1e,r9r,t9r,a9r,n6,n9r,$1e,s9r,l9r,i9r,yt,s6,d9r,I1e,c9r,f9r,sf,m9r,j1e,g9r,h9r,N1e,p9r,_9r,u9r,D1e,b9r,v9r,l6,T9r,Ro,i6,F9r,q1e,C9r,M9r,Ln,E9r,G1e,y9r,w9r,O1e,A9r,L9r,X1e,B9r,x9r,k9r,Ce,LC,z1e,R9r,S9r,FX,P9r,$9r,I9r,BC,V1e,j9r,N9r,CX,D9r,q9r,G9r,xC,W1e,O9r,X9r,MX,z9r,V9r,W9r,kC,Q1e,Q9r,H9r,EX,U9r,J9r,Y9r,RC,H1e,K9r,Z9r,yX,eCr,oCr,rCr,SC,U1e,tCr,aCr,wX,nCr,sCr,lCr,PC,J1e,iCr,dCr,AX,cCr,fCr,mCr,$C,Y1e,gCr,hCr,LX,pCr,_Cr,uCr,IC,K1e,bCr,vCr,BX,TCr,FCr,CCr,Z1e,MCr,ECr,d6,eBe,lf,jC,ebe,c6,yCr,obe,wCr,oBe,Sr,f6,ACr,df,LCr,rbe,BCr,xCr,tbe,kCr,RCr,SCr,m6,PCr,abe,$Cr,ICr,jCr,wt,g6,NCr,nbe,DCr,qCr,cf,GCr,sbe,OCr,XCr,lbe,zCr,VCr,WCr,ibe,QCr,HCr,h6,UCr,So,p6,JCr,dbe,YCr,KCr,Bn,ZCr,cbe,e4r,o4r,fbe,r4r,t4r,mbe,a4r,n4r,s4r,so,NC,gbe,l4r,i4r,xX,d4r,c4r,f4r,DC,hbe,m4r,g4r,kX,h4r,p4r,_4r,qC,pbe,u4r,b4r,RX,v4r,T4r,F4r,GC,_be,C4r,M4r,SX,E4r,y4r,w4r,OC,ube,A4r,L4r,PX,B4r,x4r,k4r,XC,bbe,R4r,S4r,$X,P4r,$4r,I4r,zC,vbe,j4r,N4r,IX,D4r,q4r,G4r,Tbe,O4r,X4r,_6,rBe,ff,VC,Fbe,u6,z4r,Cbe,V4r,tBe,Pr,b6,W4r,mf,Q4r,Mbe,H4r,U4r,Ebe,J4r,Y4r,K4r,v6,Z4r,ybe,eMr,oMr,rMr,At,T6,tMr,wbe,aMr,nMr,gf,sMr,Abe,lMr,iMr,Lbe,dMr,cMr,fMr,Bbe,mMr,gMr,F6,hMr,Po,C6,pMr,xbe,_Mr,uMr,xn,bMr,kbe,vMr,TMr,Rbe,FMr,CMr,Sbe,MMr,EMr,yMr,lo,WC,Pbe,wMr,AMr,jX,LMr,BMr,xMr,QC,$be,kMr,RMr,NX,SMr,PMr,$Mr,HC,Ibe,IMr,jMr,DX,NMr,DMr,qMr,UC,jbe,GMr,OMr,qX,XMr,zMr,VMr,JC,Nbe,WMr,QMr,GX,HMr,UMr,JMr,YC,Dbe,YMr,KMr,OX,ZMr,eEr,oEr,KC,qbe,rEr,tEr,XX,aEr,nEr,sEr,Gbe,lEr,iEr,M6,aBe,hf,ZC,Obe,E6,dEr,Xbe,cEr,nBe,$r,y6,fEr,pf,mEr,zbe,gEr,hEr,Vbe,pEr,_Er,uEr,w6,bEr,Wbe,vEr,TEr,FEr,Lt,A6,CEr,Qbe,MEr,EEr,_f,yEr,Hbe,wEr,AEr,Ube,LEr,BEr,xEr,Jbe,kEr,REr,L6,SEr,$o,B6,PEr,Ybe,$Er,IEr,kn,jEr,Kbe,NEr,DEr,Zbe,qEr,GEr,e2e,OEr,XEr,zEr,o2e,e4,r2e,VEr,WEr,zX,QEr,HEr,UEr,t2e,JEr,YEr,x6,sBe,uf,o4,a2e,k6,KEr,n2e,ZEr,lBe,Ir,R6,e3r,bf,o3r,s2e,r3r,t3r,l2e,a3r,n3r,s3r,S6,l3r,i2e,i3r,d3r,c3r,Bt,P6,f3r,d2e,m3r,g3r,vf,h3r,c2e,p3r,_3r,f2e,u3r,b3r,v3r,m2e,T3r,F3r,$6,C3r,Io,I6,M3r,g2e,E3r,y3r,Rn,w3r,h2e,A3r,L3r,p2e,B3r,x3r,_2e,k3r,R3r,S3r,j6,r4,u2e,P3r,$3r,VX,I3r,j3r,N3r,t4,b2e,D3r,q3r,WX,G3r,O3r,X3r,v2e,z3r,V3r,N6,iBe,Tf,a4,T2e,D6,W3r,F2e,Q3r,dBe,jr,q6,H3r,Ff,U3r,C2e,J3r,Y3r,M2e,K3r,Z3r,eyr,G6,oyr,E2e,ryr,tyr,ayr,xt,O6,nyr,y2e,syr,lyr,Cf,iyr,w2e,dyr,cyr,A2e,fyr,myr,gyr,L2e,hyr,pyr,X6,_yr,jo,z6,uyr,B2e,byr,vyr,Sn,Tyr,x2e,Fyr,Cyr,k2e,Myr,Eyr,R2e,yyr,wyr,Ayr,S2e,n4,P2e,Lyr,Byr,QX,xyr,kyr,Ryr,$2e,Syr,Pyr,V6,cBe;return ce=new z({}),$a=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased"),',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),lM=new z({}),iM=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel),`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Bf=new $yr({props:{warning:"&lcub;true}",$$slots:{default:[X_t]},$$scope:{ctx:yi}}}),dM=new z({}),cM=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/configuration_auto.py#L515"}}),gM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/configuration_auto.py#L538",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),hM=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),pM=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/configuration_auto.py#L660",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),_M=new z({}),uM=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/tokenization_auto.py#L351"}}),TM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15859/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),FM=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),CM=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),MM=new z({}),EM=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/feature_extraction_auto.py#L169"}}),AM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/feature_extraction_auto.py#L183",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15859/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),ih=new $yr({props:{$$slots:{default:[z_t]},$$scope:{ctx:yi}}}),LM=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),BM=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/feature_extraction_auto.py#L310",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),xM=new z({}),kM=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/processing_auto.py#L71"}}),PM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),vh=new $yr({props:{$$slots:{default:[V_t]},$$scope:{ctx:yi}}}),$M=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),IM=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),jM=new z({}),NM=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_auto.py#L672"}}),qM=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),GM=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),OM=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),XM=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zM=new z({}),VM=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_auto.py#L679"}}),QM=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),HM=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),UM=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),JM=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YM=new z({}),KM=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_auto.py#L694"}}),eE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),oE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),rE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aE=new z({}),nE=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_auto.py#L701"}}),lE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),iE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),dE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fE=new z({}),mE=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_auto.py#L708"}}),hE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),pE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),_E=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bE=new z({}),vE=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_auto.py#L717"}}),FE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),CE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),ME=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),EE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yE=new z({}),wE=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_auto.py#L751"}}),LE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),BE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),xE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RE=new z({}),SE=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_auto.py#L758"}}),$E=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),IE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),jE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DE=new z({}),qE=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_auto.py#L744"}}),OE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),XE=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),zE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),VE=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WE=new z({}),QE=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_auto.py#L726"}}),UE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),JE=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),YE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),KE=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZE=new z({}),e3=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_auto.py#L733"}}),r3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),t3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),a3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),n3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s3=new z({}),l3=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_auto.py#L767"}}),d3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15859/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15859/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15859/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),c3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),f3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g3=new z({}),h3=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_auto.py#L797"}}),_3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),u3=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),b3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v3=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T3=new z({}),F3=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_auto.py#L804"}}),M3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),E3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),y3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),w3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A3=new z({}),L3=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_auto.py#L827"}}),x3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),k3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),R3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P3=new z({}),$3=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_auto.py#L811"}}),j3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),N3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),D3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G3=new z({}),O3=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_auto.py#L818"}}),z3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),V3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),W3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),H3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U3=new z({}),J3=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_auto.py#L836"}}),K3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Z3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),ey=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ry=new z({}),ty=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_auto.py#L843"}}),ny=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),sy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),ly=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dy=new z({}),cy=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_auto.py#L790"}}),my=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),gy=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),hy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),py=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_y=new z({}),uy=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_auto.py#L774"}}),vy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Fy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),My=new z({}),Ey=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_auto.py#L781"}}),wy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),Ay=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Ly=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ky=new z({}),Ry=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_tf_auto.py#L373"}}),Py=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),$y=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),Iy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jy=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ny=new z({}),Dy=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_tf_auto.py#L380"}}),Gy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Oy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),Xy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vy=new z({}),Wy=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_tf_auto.py#L395"}}),Hy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Uy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),Jy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Yy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ky=new z({}),Zy=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_tf_auto.py#L402"}}),ow=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),rw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),tw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sw=new z({}),lw=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),dw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),cw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),fw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gw=new z({}),hw=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),_w=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),uw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),bw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Tw=new z({}),Fw=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),Mw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Ew=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),yw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ww=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Aw=new z({}),Lw=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),xw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),kw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Rw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Pw=new z({}),$w=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),jw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Nw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),Dw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gw=new z({}),Ow=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),zw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Vw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),Ww=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hw=new z({}),Uw=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),Yw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Kw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),Zw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oA=new z({}),rA=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),aA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),nA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),sA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iA=new z({}),dA=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),fA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),mA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),gA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pA=new z({}),_A=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_flax_auto.py#L229"}}),bA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),vA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),TA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CA=new z({}),MA=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),yA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),wA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),AA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BA=new z({}),xA=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_flax_auto.py#L236"}}),RA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
</ul>`,name:"config"}]}}),SA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),PA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$A=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IA=new z({}),jA=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),DA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),qA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),GA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),OA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XA=new z({}),zA=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),WA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),QA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),HA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JA=new z({}),YA=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_flax_auto.py#L266"}}),ZA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),e6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),o6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t6=new z({}),a6=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_flax_auto.py#L275"}}),s6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),l6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),i6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c6=new z({}),f6=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_flax_auto.py#L282"}}),g6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),h6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),p6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u6=new z({}),b6=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_flax_auto.py#L291"}}),T6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),F6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),C6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),M6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E6=new z({}),y6=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_flax_auto.py#L298"}}),A6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),L6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),B6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k6=new z({}),R6=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_flax_auto.py#L307"}}),P6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15859/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),$6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),I6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D6=new z({}),q6=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/modeling_flax_auto.py#L316"}}),O6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15859/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15859/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),X6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),z6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15859/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15859/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15859/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),V6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Ae=l(),ie=a("h1"),me=a("a"),to=a("span"),f(ce.$$.fragment),ue=l(),Do=a("span"),wi=o("Auto Classes"),Ef=l(),sa=a("p"),Ai=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Li=a("code"),tM=o("from_pretrained()"),yf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ye=l(),io=a("p"),Bi=o("Instantiating one of "),Pn=a("a"),aM=o("AutoConfig"),$n=o(", "),In=a("a"),nM=o("AutoModel"),xi=o(`, and
`),jn=a("a"),sM=o("AutoTokenizer"),ki=o(" will directly create a class of the relevant architecture. For instance"),wf=l(),f($a.$$.fragment),co=l(),ge=a("p"),O0=o("will create a model that is an instance of "),Ri=a("a"),X0=o("BertModel"),z0=o("."),qo=l(),Ia=a("p"),V0=o("There is one class of "),Af=a("code"),W0=o("AutoModel"),Fke=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),fLe=l(),Si=a("h2"),Lf=a("a"),qV=a("span"),f(lM.$$.fragment),Cke=l(),GV=a("span"),Mke=o("Extending the Auto Classes"),mLe=l(),Nn=a("p"),Eke=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),OV=a("code"),yke=o("NewModel"),wke=o(", make sure you have a "),XV=a("code"),Ake=o("NewModelConfig"),Lke=o(` then you can add those to the auto
classes like this:`),gLe=l(),f(iM.$$.fragment),hLe=l(),Q0=a("p"),Bke=o("You will then be able to use the auto classes like you would usually do!"),pLe=l(),f(Bf.$$.fragment),_Le=l(),Pi=a("h2"),xf=a("a"),zV=a("span"),f(dM.$$.fragment),xke=l(),VV=a("span"),kke=o("AutoConfig"),uLe=l(),Go=a("div"),f(cM.$$.fragment),Rke=l(),fM=a("p"),Ske=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),H0=a("a"),Pke=o("from_pretrained()"),$ke=o(" class method."),Ike=l(),mM=a("p"),jke=o("This class cannot be instantiated directly using "),WV=a("code"),Nke=o("__init__()"),Dke=o(" (throws an error)."),qke=l(),fo=a("div"),f(gM.$$.fragment),Gke=l(),QV=a("p"),Oke=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Xke=l(),$i=a("p"),zke=o("The configuration class to instantiate is selected based on the "),HV=a("code"),Vke=o("model_type"),Wke=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),UV=a("code"),Qke=o("pretrained_model_name_or_path"),Hke=o(":"),Uke=l(),v=a("ul"),kf=a("li"),JV=a("strong"),Jke=o("albert"),Yke=o(" \u2014 "),U0=a("a"),Kke=o("AlbertConfig"),Zke=o(" (ALBERT model)"),eRe=l(),Rf=a("li"),YV=a("strong"),oRe=o("bart"),rRe=o(" \u2014 "),J0=a("a"),tRe=o("BartConfig"),aRe=o(" (BART model)"),nRe=l(),Sf=a("li"),KV=a("strong"),sRe=o("beit"),lRe=o(" \u2014 "),Y0=a("a"),iRe=o("BeitConfig"),dRe=o(" (BEiT model)"),cRe=l(),Pf=a("li"),ZV=a("strong"),fRe=o("bert"),mRe=o(" \u2014 "),K0=a("a"),gRe=o("BertConfig"),hRe=o(" (BERT model)"),pRe=l(),$f=a("li"),eW=a("strong"),_Re=o("bert-generation"),uRe=o(" \u2014 "),Z0=a("a"),bRe=o("BertGenerationConfig"),vRe=o(" (Bert Generation model)"),TRe=l(),If=a("li"),oW=a("strong"),FRe=o("big_bird"),CRe=o(" \u2014 "),eL=a("a"),MRe=o("BigBirdConfig"),ERe=o(" (BigBird model)"),yRe=l(),jf=a("li"),rW=a("strong"),wRe=o("bigbird_pegasus"),ARe=o(" \u2014 "),oL=a("a"),LRe=o("BigBirdPegasusConfig"),BRe=o(" (BigBirdPegasus model)"),xRe=l(),Nf=a("li"),tW=a("strong"),kRe=o("blenderbot"),RRe=o(" \u2014 "),rL=a("a"),SRe=o("BlenderbotConfig"),PRe=o(" (Blenderbot model)"),$Re=l(),Df=a("li"),aW=a("strong"),IRe=o("blenderbot-small"),jRe=o(" \u2014 "),tL=a("a"),NRe=o("BlenderbotSmallConfig"),DRe=o(" (BlenderbotSmall model)"),qRe=l(),qf=a("li"),nW=a("strong"),GRe=o("camembert"),ORe=o(" \u2014 "),aL=a("a"),XRe=o("CamembertConfig"),zRe=o(" (CamemBERT model)"),VRe=l(),Gf=a("li"),sW=a("strong"),WRe=o("canine"),QRe=o(" \u2014 "),nL=a("a"),HRe=o("CanineConfig"),URe=o(" (Canine model)"),JRe=l(),Of=a("li"),lW=a("strong"),YRe=o("clip"),KRe=o(" \u2014 "),sL=a("a"),ZRe=o("CLIPConfig"),eSe=o(" (CLIP model)"),oSe=l(),Xf=a("li"),iW=a("strong"),rSe=o("convbert"),tSe=o(" \u2014 "),lL=a("a"),aSe=o("ConvBertConfig"),nSe=o(" (ConvBERT model)"),sSe=l(),zf=a("li"),dW=a("strong"),lSe=o("convnext"),iSe=o(" \u2014 "),iL=a("a"),dSe=o("ConvNextConfig"),cSe=o(" (ConvNext model)"),fSe=l(),Vf=a("li"),cW=a("strong"),mSe=o("ctrl"),gSe=o(" \u2014 "),dL=a("a"),hSe=o("CTRLConfig"),pSe=o(" (CTRL model)"),_Se=l(),Wf=a("li"),fW=a("strong"),uSe=o("deberta"),bSe=o(" \u2014 "),cL=a("a"),vSe=o("DebertaConfig"),TSe=o(" (DeBERTa model)"),FSe=l(),Qf=a("li"),mW=a("strong"),CSe=o("deberta-v2"),MSe=o(" \u2014 "),fL=a("a"),ESe=o("DebertaV2Config"),ySe=o(" (DeBERTa-v2 model)"),wSe=l(),Hf=a("li"),gW=a("strong"),ASe=o("deit"),LSe=o(" \u2014 "),mL=a("a"),BSe=o("DeiTConfig"),xSe=o(" (DeiT model)"),kSe=l(),Uf=a("li"),hW=a("strong"),RSe=o("detr"),SSe=o(" \u2014 "),gL=a("a"),PSe=o("DetrConfig"),$Se=o(" (DETR model)"),ISe=l(),Jf=a("li"),pW=a("strong"),jSe=o("distilbert"),NSe=o(" \u2014 "),hL=a("a"),DSe=o("DistilBertConfig"),qSe=o(" (DistilBERT model)"),GSe=l(),Yf=a("li"),_W=a("strong"),OSe=o("dpr"),XSe=o(" \u2014 "),pL=a("a"),zSe=o("DPRConfig"),VSe=o(" (DPR model)"),WSe=l(),Kf=a("li"),uW=a("strong"),QSe=o("electra"),HSe=o(" \u2014 "),_L=a("a"),USe=o("ElectraConfig"),JSe=o(" (ELECTRA model)"),YSe=l(),Zf=a("li"),bW=a("strong"),KSe=o("encoder-decoder"),ZSe=o(" \u2014 "),uL=a("a"),ePe=o("EncoderDecoderConfig"),oPe=o(" (Encoder decoder model)"),rPe=l(),em=a("li"),vW=a("strong"),tPe=o("flaubert"),aPe=o(" \u2014 "),bL=a("a"),nPe=o("FlaubertConfig"),sPe=o(" (FlauBERT model)"),lPe=l(),om=a("li"),TW=a("strong"),iPe=o("fnet"),dPe=o(" \u2014 "),vL=a("a"),cPe=o("FNetConfig"),fPe=o(" (FNet model)"),mPe=l(),rm=a("li"),FW=a("strong"),gPe=o("fsmt"),hPe=o(" \u2014 "),TL=a("a"),pPe=o("FSMTConfig"),_Pe=o(" (FairSeq Machine-Translation model)"),uPe=l(),tm=a("li"),CW=a("strong"),bPe=o("funnel"),vPe=o(" \u2014 "),FL=a("a"),TPe=o("FunnelConfig"),FPe=o(" (Funnel Transformer model)"),CPe=l(),am=a("li"),MW=a("strong"),MPe=o("gpt2"),EPe=o(" \u2014 "),CL=a("a"),yPe=o("GPT2Config"),wPe=o(" (OpenAI GPT-2 model)"),APe=l(),nm=a("li"),EW=a("strong"),LPe=o("gpt_neo"),BPe=o(" \u2014 "),ML=a("a"),xPe=o("GPTNeoConfig"),kPe=o(" (GPT Neo model)"),RPe=l(),sm=a("li"),yW=a("strong"),SPe=o("gptj"),PPe=o(" \u2014 "),EL=a("a"),$Pe=o("GPTJConfig"),IPe=o(" (GPT-J model)"),jPe=l(),lm=a("li"),wW=a("strong"),NPe=o("hubert"),DPe=o(" \u2014 "),yL=a("a"),qPe=o("HubertConfig"),GPe=o(" (Hubert model)"),OPe=l(),im=a("li"),AW=a("strong"),XPe=o("ibert"),zPe=o(" \u2014 "),wL=a("a"),VPe=o("IBertConfig"),WPe=o(" (I-BERT model)"),QPe=l(),dm=a("li"),LW=a("strong"),HPe=o("imagegpt"),UPe=o(" \u2014 "),AL=a("a"),JPe=o("ImageGPTConfig"),YPe=o(" (ImageGPT model)"),KPe=l(),cm=a("li"),BW=a("strong"),ZPe=o("layoutlm"),e$e=o(" \u2014 "),LL=a("a"),o$e=o("LayoutLMConfig"),r$e=o(" (LayoutLM model)"),t$e=l(),fm=a("li"),xW=a("strong"),a$e=o("layoutlmv2"),n$e=o(" \u2014 "),BL=a("a"),s$e=o("LayoutLMv2Config"),l$e=o(" (LayoutLMv2 model)"),i$e=l(),mm=a("li"),kW=a("strong"),d$e=o("led"),c$e=o(" \u2014 "),xL=a("a"),f$e=o("LEDConfig"),m$e=o(" (LED model)"),g$e=l(),gm=a("li"),RW=a("strong"),h$e=o("longformer"),p$e=o(" \u2014 "),kL=a("a"),_$e=o("LongformerConfig"),u$e=o(" (Longformer model)"),b$e=l(),hm=a("li"),SW=a("strong"),v$e=o("luke"),T$e=o(" \u2014 "),RL=a("a"),F$e=o("LukeConfig"),C$e=o(" (LUKE model)"),M$e=l(),pm=a("li"),PW=a("strong"),E$e=o("lxmert"),y$e=o(" \u2014 "),SL=a("a"),w$e=o("LxmertConfig"),A$e=o(" (LXMERT model)"),L$e=l(),_m=a("li"),$W=a("strong"),B$e=o("m2m_100"),x$e=o(" \u2014 "),PL=a("a"),k$e=o("M2M100Config"),R$e=o(" (M2M100 model)"),S$e=l(),um=a("li"),IW=a("strong"),P$e=o("marian"),$$e=o(" \u2014 "),$L=a("a"),I$e=o("MarianConfig"),j$e=o(" (Marian model)"),N$e=l(),bm=a("li"),jW=a("strong"),D$e=o("mbart"),q$e=o(" \u2014 "),IL=a("a"),G$e=o("MBartConfig"),O$e=o(" (mBART model)"),X$e=l(),vm=a("li"),NW=a("strong"),z$e=o("megatron-bert"),V$e=o(" \u2014 "),jL=a("a"),W$e=o("MegatronBertConfig"),Q$e=o(" (MegatronBert model)"),H$e=l(),Tm=a("li"),DW=a("strong"),U$e=o("mobilebert"),J$e=o(" \u2014 "),NL=a("a"),Y$e=o("MobileBertConfig"),K$e=o(" (MobileBERT model)"),Z$e=l(),Fm=a("li"),qW=a("strong"),eIe=o("mpnet"),oIe=o(" \u2014 "),DL=a("a"),rIe=o("MPNetConfig"),tIe=o(" (MPNet model)"),aIe=l(),Cm=a("li"),GW=a("strong"),nIe=o("mt5"),sIe=o(" \u2014 "),qL=a("a"),lIe=o("MT5Config"),iIe=o(" (mT5 model)"),dIe=l(),Mm=a("li"),OW=a("strong"),cIe=o("nystromformer"),fIe=o(" \u2014 "),GL=a("a"),mIe=o("NystromformerConfig"),gIe=o(" (Nystromformer model)"),hIe=l(),Em=a("li"),XW=a("strong"),pIe=o("openai-gpt"),_Ie=o(" \u2014 "),OL=a("a"),uIe=o("OpenAIGPTConfig"),bIe=o(" (OpenAI GPT model)"),vIe=l(),ym=a("li"),zW=a("strong"),TIe=o("pegasus"),FIe=o(" \u2014 "),XL=a("a"),CIe=o("PegasusConfig"),MIe=o(" (Pegasus model)"),EIe=l(),wm=a("li"),VW=a("strong"),yIe=o("perceiver"),wIe=o(" \u2014 "),zL=a("a"),AIe=o("PerceiverConfig"),LIe=o(" (Perceiver model)"),BIe=l(),Am=a("li"),WW=a("strong"),xIe=o("plbart"),kIe=o(" \u2014 "),VL=a("a"),RIe=o("PLBartConfig"),SIe=o(" (PLBart model)"),PIe=l(),Lm=a("li"),QW=a("strong"),$Ie=o("poolformer"),IIe=o(" \u2014 "),WL=a("a"),jIe=o("PoolFormerConfig"),NIe=o(" (PoolFormer model)"),DIe=l(),Bm=a("li"),HW=a("strong"),qIe=o("prophetnet"),GIe=o(" \u2014 "),QL=a("a"),OIe=o("ProphetNetConfig"),XIe=o(" (ProphetNet model)"),zIe=l(),xm=a("li"),UW=a("strong"),VIe=o("qdqbert"),WIe=o(" \u2014 "),HL=a("a"),QIe=o("QDQBertConfig"),HIe=o(" (QDQBert model)"),UIe=l(),km=a("li"),JW=a("strong"),JIe=o("rag"),YIe=o(" \u2014 "),UL=a("a"),KIe=o("RagConfig"),ZIe=o(" (RAG model)"),eje=l(),Rm=a("li"),YW=a("strong"),oje=o("realm"),rje=o(" \u2014 "),JL=a("a"),tje=o("RealmConfig"),aje=o(" (Realm model)"),nje=l(),Sm=a("li"),KW=a("strong"),sje=o("reformer"),lje=o(" \u2014 "),YL=a("a"),ije=o("ReformerConfig"),dje=o(" (Reformer model)"),cje=l(),Pm=a("li"),ZW=a("strong"),fje=o("rembert"),mje=o(" \u2014 "),KL=a("a"),gje=o("RemBertConfig"),hje=o(" (RemBERT model)"),pje=l(),$m=a("li"),eQ=a("strong"),_je=o("retribert"),uje=o(" \u2014 "),ZL=a("a"),bje=o("RetriBertConfig"),vje=o(" (RetriBERT model)"),Tje=l(),Im=a("li"),oQ=a("strong"),Fje=o("roberta"),Cje=o(" \u2014 "),e7=a("a"),Mje=o("RobertaConfig"),Eje=o(" (RoBERTa model)"),yje=l(),jm=a("li"),rQ=a("strong"),wje=o("roformer"),Aje=o(" \u2014 "),o7=a("a"),Lje=o("RoFormerConfig"),Bje=o(" (RoFormer model)"),xje=l(),Nm=a("li"),tQ=a("strong"),kje=o("segformer"),Rje=o(" \u2014 "),r7=a("a"),Sje=o("SegformerConfig"),Pje=o(" (SegFormer model)"),$je=l(),Dm=a("li"),aQ=a("strong"),Ije=o("sew"),jje=o(" \u2014 "),t7=a("a"),Nje=o("SEWConfig"),Dje=o(" (SEW model)"),qje=l(),qm=a("li"),nQ=a("strong"),Gje=o("sew-d"),Oje=o(" \u2014 "),a7=a("a"),Xje=o("SEWDConfig"),zje=o(" (SEW-D model)"),Vje=l(),Gm=a("li"),sQ=a("strong"),Wje=o("speech-encoder-decoder"),Qje=o(" \u2014 "),n7=a("a"),Hje=o("SpeechEncoderDecoderConfig"),Uje=o(" (Speech Encoder decoder model)"),Jje=l(),Om=a("li"),lQ=a("strong"),Yje=o("speech_to_text"),Kje=o(" \u2014 "),s7=a("a"),Zje=o("Speech2TextConfig"),eNe=o(" (Speech2Text model)"),oNe=l(),Xm=a("li"),iQ=a("strong"),rNe=o("speech_to_text_2"),tNe=o(" \u2014 "),l7=a("a"),aNe=o("Speech2Text2Config"),nNe=o(" (Speech2Text2 model)"),sNe=l(),zm=a("li"),dQ=a("strong"),lNe=o("splinter"),iNe=o(" \u2014 "),i7=a("a"),dNe=o("SplinterConfig"),cNe=o(" (Splinter model)"),fNe=l(),Vm=a("li"),cQ=a("strong"),mNe=o("squeezebert"),gNe=o(" \u2014 "),d7=a("a"),hNe=o("SqueezeBertConfig"),pNe=o(" (SqueezeBERT model)"),_Ne=l(),Wm=a("li"),fQ=a("strong"),uNe=o("swin"),bNe=o(" \u2014 "),c7=a("a"),vNe=o("SwinConfig"),TNe=o(" (Swin model)"),FNe=l(),Qm=a("li"),mQ=a("strong"),CNe=o("t5"),MNe=o(" \u2014 "),f7=a("a"),ENe=o("T5Config"),yNe=o(" (T5 model)"),wNe=l(),Hm=a("li"),gQ=a("strong"),ANe=o("tapas"),LNe=o(" \u2014 "),m7=a("a"),BNe=o("TapasConfig"),xNe=o(" (TAPAS model)"),kNe=l(),Um=a("li"),hQ=a("strong"),RNe=o("transfo-xl"),SNe=o(" \u2014 "),g7=a("a"),PNe=o("TransfoXLConfig"),$Ne=o(" (Transformer-XL model)"),INe=l(),Jm=a("li"),pQ=a("strong"),jNe=o("trocr"),NNe=o(" \u2014 "),h7=a("a"),DNe=o("TrOCRConfig"),qNe=o(" (TrOCR model)"),GNe=l(),Ym=a("li"),_Q=a("strong"),ONe=o("unispeech"),XNe=o(" \u2014 "),p7=a("a"),zNe=o("UniSpeechConfig"),VNe=o(" (UniSpeech model)"),WNe=l(),Km=a("li"),uQ=a("strong"),QNe=o("unispeech-sat"),HNe=o(" \u2014 "),_7=a("a"),UNe=o("UniSpeechSatConfig"),JNe=o(" (UniSpeechSat model)"),YNe=l(),Zm=a("li"),bQ=a("strong"),KNe=o("vilt"),ZNe=o(" \u2014 "),u7=a("a"),eDe=o("ViltConfig"),oDe=o(" (ViLT model)"),rDe=l(),eg=a("li"),vQ=a("strong"),tDe=o("vision-encoder-decoder"),aDe=o(" \u2014 "),b7=a("a"),nDe=o("VisionEncoderDecoderConfig"),sDe=o(" (Vision Encoder decoder model)"),lDe=l(),og=a("li"),TQ=a("strong"),iDe=o("vision-text-dual-encoder"),dDe=o(" \u2014 "),v7=a("a"),cDe=o("VisionTextDualEncoderConfig"),fDe=o(" (VisionTextDualEncoder model)"),mDe=l(),rg=a("li"),FQ=a("strong"),gDe=o("visual_bert"),hDe=o(" \u2014 "),T7=a("a"),pDe=o("VisualBertConfig"),_De=o(" (VisualBert model)"),uDe=l(),tg=a("li"),CQ=a("strong"),bDe=o("vit"),vDe=o(" \u2014 "),F7=a("a"),TDe=o("ViTConfig"),FDe=o(" (ViT model)"),CDe=l(),ag=a("li"),MQ=a("strong"),MDe=o("vit_mae"),EDe=o(" \u2014 "),C7=a("a"),yDe=o("ViTMAEConfig"),wDe=o(" (ViTMAE model)"),ADe=l(),ng=a("li"),EQ=a("strong"),LDe=o("wav2vec2"),BDe=o(" \u2014 "),M7=a("a"),xDe=o("Wav2Vec2Config"),kDe=o(" (Wav2Vec2 model)"),RDe=l(),sg=a("li"),yQ=a("strong"),SDe=o("wavlm"),PDe=o(" \u2014 "),E7=a("a"),$De=o("WavLMConfig"),IDe=o(" (WavLM model)"),jDe=l(),lg=a("li"),wQ=a("strong"),NDe=o("xglm"),DDe=o(" \u2014 "),y7=a("a"),qDe=o("XGLMConfig"),GDe=o(" (XGLM model)"),ODe=l(),ig=a("li"),AQ=a("strong"),XDe=o("xlm"),zDe=o(" \u2014 "),w7=a("a"),VDe=o("XLMConfig"),WDe=o(" (XLM model)"),QDe=l(),dg=a("li"),LQ=a("strong"),HDe=o("xlm-prophetnet"),UDe=o(" \u2014 "),A7=a("a"),JDe=o("XLMProphetNetConfig"),YDe=o(" (XLMProphetNet model)"),KDe=l(),cg=a("li"),BQ=a("strong"),ZDe=o("xlm-roberta"),eqe=o(" \u2014 "),L7=a("a"),oqe=o("XLMRobertaConfig"),rqe=o(" (XLM-RoBERTa model)"),tqe=l(),fg=a("li"),xQ=a("strong"),aqe=o("xlm-roberta-xl"),nqe=o(" \u2014 "),B7=a("a"),sqe=o("XLMRobertaXLConfig"),lqe=o(" (XLM-RoBERTa-XL model)"),iqe=l(),mg=a("li"),kQ=a("strong"),dqe=o("xlnet"),cqe=o(" \u2014 "),x7=a("a"),fqe=o("XLNetConfig"),mqe=o(" (XLNet model)"),gqe=l(),gg=a("li"),RQ=a("strong"),hqe=o("yoso"),pqe=o(" \u2014 "),k7=a("a"),_qe=o("YosoConfig"),uqe=o(" (YOSO model)"),bqe=l(),SQ=a("p"),vqe=o("Examples:"),Tqe=l(),f(hM.$$.fragment),Fqe=l(),hg=a("div"),f(pM.$$.fragment),Cqe=l(),PQ=a("p"),Mqe=o("Register a new configuration for this class."),bLe=l(),Ii=a("h2"),pg=a("a"),$Q=a("span"),f(_M.$$.fragment),Eqe=l(),IQ=a("span"),yqe=o("AutoTokenizer"),vLe=l(),Oo=a("div"),f(uM.$$.fragment),wqe=l(),bM=a("p"),Aqe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),R7=a("a"),Lqe=o("AutoTokenizer.from_pretrained()"),Bqe=o(" class method."),xqe=l(),vM=a("p"),kqe=o("This class cannot be instantiated directly using "),jQ=a("code"),Rqe=o("__init__()"),Sqe=o(" (throws an error)."),Pqe=l(),mo=a("div"),f(TM.$$.fragment),$qe=l(),NQ=a("p"),Iqe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),jqe=l(),ja=a("p"),Nqe=o("The tokenizer class to instantiate is selected based on the "),DQ=a("code"),Dqe=o("model_type"),qqe=o(` property of the config object (either
passed as an argument or loaded from `),qQ=a("code"),Gqe=o("pretrained_model_name_or_path"),Oqe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GQ=a("code"),Xqe=o("pretrained_model_name_or_path"),zqe=o(":"),Vqe=l(),M=a("ul"),Dn=a("li"),OQ=a("strong"),Wqe=o("albert"),Qqe=o(" \u2014 "),S7=a("a"),Hqe=o("AlbertTokenizer"),Uqe=o(" or "),P7=a("a"),Jqe=o("AlbertTokenizerFast"),Yqe=o(" (ALBERT model)"),Kqe=l(),qn=a("li"),XQ=a("strong"),Zqe=o("bart"),eGe=o(" \u2014 "),$7=a("a"),oGe=o("BartTokenizer"),rGe=o(" or "),I7=a("a"),tGe=o("BartTokenizerFast"),aGe=o(" (BART model)"),nGe=l(),Gn=a("li"),zQ=a("strong"),sGe=o("barthez"),lGe=o(" \u2014 "),j7=a("a"),iGe=o("BarthezTokenizer"),dGe=o(" or "),N7=a("a"),cGe=o("BarthezTokenizerFast"),fGe=o(" (BARThez model)"),mGe=l(),_g=a("li"),VQ=a("strong"),gGe=o("bartpho"),hGe=o(" \u2014 "),D7=a("a"),pGe=o("BartphoTokenizer"),_Ge=o(" (BARTpho model)"),uGe=l(),On=a("li"),WQ=a("strong"),bGe=o("bert"),vGe=o(" \u2014 "),q7=a("a"),TGe=o("BertTokenizer"),FGe=o(" or "),G7=a("a"),CGe=o("BertTokenizerFast"),MGe=o(" (BERT model)"),EGe=l(),ug=a("li"),QQ=a("strong"),yGe=o("bert-generation"),wGe=o(" \u2014 "),O7=a("a"),AGe=o("BertGenerationTokenizer"),LGe=o(" (Bert Generation model)"),BGe=l(),bg=a("li"),HQ=a("strong"),xGe=o("bert-japanese"),kGe=o(" \u2014 "),X7=a("a"),RGe=o("BertJapaneseTokenizer"),SGe=o(" (BertJapanese model)"),PGe=l(),vg=a("li"),UQ=a("strong"),$Ge=o("bertweet"),IGe=o(" \u2014 "),z7=a("a"),jGe=o("BertweetTokenizer"),NGe=o(" (Bertweet model)"),DGe=l(),Xn=a("li"),JQ=a("strong"),qGe=o("big_bird"),GGe=o(" \u2014 "),V7=a("a"),OGe=o("BigBirdTokenizer"),XGe=o(" or "),W7=a("a"),zGe=o("BigBirdTokenizerFast"),VGe=o(" (BigBird model)"),WGe=l(),zn=a("li"),YQ=a("strong"),QGe=o("bigbird_pegasus"),HGe=o(" \u2014 "),Q7=a("a"),UGe=o("PegasusTokenizer"),JGe=o(" or "),H7=a("a"),YGe=o("PegasusTokenizerFast"),KGe=o(" (BigBirdPegasus model)"),ZGe=l(),Vn=a("li"),KQ=a("strong"),eOe=o("blenderbot"),oOe=o(" \u2014 "),U7=a("a"),rOe=o("BlenderbotTokenizer"),tOe=o(" or "),J7=a("a"),aOe=o("BlenderbotTokenizerFast"),nOe=o(" (Blenderbot model)"),sOe=l(),Tg=a("li"),ZQ=a("strong"),lOe=o("blenderbot-small"),iOe=o(" \u2014 "),Y7=a("a"),dOe=o("BlenderbotSmallTokenizer"),cOe=o(" (BlenderbotSmall model)"),fOe=l(),Fg=a("li"),eH=a("strong"),mOe=o("byt5"),gOe=o(" \u2014 "),K7=a("a"),hOe=o("ByT5Tokenizer"),pOe=o(" (ByT5 model)"),_Oe=l(),Wn=a("li"),oH=a("strong"),uOe=o("camembert"),bOe=o(" \u2014 "),Z7=a("a"),vOe=o("CamembertTokenizer"),TOe=o(" or "),eB=a("a"),FOe=o("CamembertTokenizerFast"),COe=o(" (CamemBERT model)"),MOe=l(),Cg=a("li"),rH=a("strong"),EOe=o("canine"),yOe=o(" \u2014 "),oB=a("a"),wOe=o("CanineTokenizer"),AOe=o(" (Canine model)"),LOe=l(),Qn=a("li"),tH=a("strong"),BOe=o("clip"),xOe=o(" \u2014 "),rB=a("a"),kOe=o("CLIPTokenizer"),ROe=o(" or "),tB=a("a"),SOe=o("CLIPTokenizerFast"),POe=o(" (CLIP model)"),$Oe=l(),Hn=a("li"),aH=a("strong"),IOe=o("convbert"),jOe=o(" \u2014 "),aB=a("a"),NOe=o("ConvBertTokenizer"),DOe=o(" or "),nB=a("a"),qOe=o("ConvBertTokenizerFast"),GOe=o(" (ConvBERT model)"),OOe=l(),Un=a("li"),nH=a("strong"),XOe=o("cpm"),zOe=o(" \u2014 "),sB=a("a"),VOe=o("CpmTokenizer"),WOe=o(" or "),sH=a("code"),QOe=o("CpmTokenizerFast"),HOe=o(" (CPM model)"),UOe=l(),Mg=a("li"),lH=a("strong"),JOe=o("ctrl"),YOe=o(" \u2014 "),lB=a("a"),KOe=o("CTRLTokenizer"),ZOe=o(" (CTRL model)"),eXe=l(),Jn=a("li"),iH=a("strong"),oXe=o("deberta"),rXe=o(" \u2014 "),iB=a("a"),tXe=o("DebertaTokenizer"),aXe=o(" or "),dB=a("a"),nXe=o("DebertaTokenizerFast"),sXe=o(" (DeBERTa model)"),lXe=l(),Eg=a("li"),dH=a("strong"),iXe=o("deberta-v2"),dXe=o(" \u2014 "),cB=a("a"),cXe=o("DebertaV2Tokenizer"),fXe=o(" (DeBERTa-v2 model)"),mXe=l(),Yn=a("li"),cH=a("strong"),gXe=o("distilbert"),hXe=o(" \u2014 "),fB=a("a"),pXe=o("DistilBertTokenizer"),_Xe=o(" or "),mB=a("a"),uXe=o("DistilBertTokenizerFast"),bXe=o(" (DistilBERT model)"),vXe=l(),Kn=a("li"),fH=a("strong"),TXe=o("dpr"),FXe=o(" \u2014 "),gB=a("a"),CXe=o("DPRQuestionEncoderTokenizer"),MXe=o(" or "),hB=a("a"),EXe=o("DPRQuestionEncoderTokenizerFast"),yXe=o(" (DPR model)"),wXe=l(),Zn=a("li"),mH=a("strong"),AXe=o("electra"),LXe=o(" \u2014 "),pB=a("a"),BXe=o("ElectraTokenizer"),xXe=o(" or "),_B=a("a"),kXe=o("ElectraTokenizerFast"),RXe=o(" (ELECTRA model)"),SXe=l(),yg=a("li"),gH=a("strong"),PXe=o("flaubert"),$Xe=o(" \u2014 "),uB=a("a"),IXe=o("FlaubertTokenizer"),jXe=o(" (FlauBERT model)"),NXe=l(),es=a("li"),hH=a("strong"),DXe=o("fnet"),qXe=o(" \u2014 "),bB=a("a"),GXe=o("FNetTokenizer"),OXe=o(" or "),vB=a("a"),XXe=o("FNetTokenizerFast"),zXe=o(" (FNet model)"),VXe=l(),wg=a("li"),pH=a("strong"),WXe=o("fsmt"),QXe=o(" \u2014 "),TB=a("a"),HXe=o("FSMTTokenizer"),UXe=o(" (FairSeq Machine-Translation model)"),JXe=l(),os=a("li"),_H=a("strong"),YXe=o("funnel"),KXe=o(" \u2014 "),FB=a("a"),ZXe=o("FunnelTokenizer"),eze=o(" or "),CB=a("a"),oze=o("FunnelTokenizerFast"),rze=o(" (Funnel Transformer model)"),tze=l(),rs=a("li"),uH=a("strong"),aze=o("gpt2"),nze=o(" \u2014 "),MB=a("a"),sze=o("GPT2Tokenizer"),lze=o(" or "),EB=a("a"),ize=o("GPT2TokenizerFast"),dze=o(" (OpenAI GPT-2 model)"),cze=l(),ts=a("li"),bH=a("strong"),fze=o("gpt_neo"),mze=o(" \u2014 "),yB=a("a"),gze=o("GPT2Tokenizer"),hze=o(" or "),wB=a("a"),pze=o("GPT2TokenizerFast"),_ze=o(" (GPT Neo model)"),uze=l(),as=a("li"),vH=a("strong"),bze=o("herbert"),vze=o(" \u2014 "),AB=a("a"),Tze=o("HerbertTokenizer"),Fze=o(" or "),LB=a("a"),Cze=o("HerbertTokenizerFast"),Mze=o(" (HerBERT model)"),Eze=l(),Ag=a("li"),TH=a("strong"),yze=o("hubert"),wze=o(" \u2014 "),BB=a("a"),Aze=o("Wav2Vec2CTCTokenizer"),Lze=o(" (Hubert model)"),Bze=l(),ns=a("li"),FH=a("strong"),xze=o("ibert"),kze=o(" \u2014 "),xB=a("a"),Rze=o("RobertaTokenizer"),Sze=o(" or "),kB=a("a"),Pze=o("RobertaTokenizerFast"),$ze=o(" (I-BERT model)"),Ize=l(),ss=a("li"),CH=a("strong"),jze=o("layoutlm"),Nze=o(" \u2014 "),RB=a("a"),Dze=o("LayoutLMTokenizer"),qze=o(" or "),SB=a("a"),Gze=o("LayoutLMTokenizerFast"),Oze=o(" (LayoutLM model)"),Xze=l(),ls=a("li"),MH=a("strong"),zze=o("layoutlmv2"),Vze=o(" \u2014 "),PB=a("a"),Wze=o("LayoutLMv2Tokenizer"),Qze=o(" or "),$B=a("a"),Hze=o("LayoutLMv2TokenizerFast"),Uze=o(" (LayoutLMv2 model)"),Jze=l(),is=a("li"),EH=a("strong"),Yze=o("layoutxlm"),Kze=o(" \u2014 "),IB=a("a"),Zze=o("LayoutXLMTokenizer"),eVe=o(" or "),jB=a("a"),oVe=o("LayoutXLMTokenizerFast"),rVe=o(" (LayoutXLM model)"),tVe=l(),ds=a("li"),yH=a("strong"),aVe=o("led"),nVe=o(" \u2014 "),NB=a("a"),sVe=o("LEDTokenizer"),lVe=o(" or "),DB=a("a"),iVe=o("LEDTokenizerFast"),dVe=o(" (LED model)"),cVe=l(),cs=a("li"),wH=a("strong"),fVe=o("longformer"),mVe=o(" \u2014 "),qB=a("a"),gVe=o("LongformerTokenizer"),hVe=o(" or "),GB=a("a"),pVe=o("LongformerTokenizerFast"),_Ve=o(" (Longformer model)"),uVe=l(),Lg=a("li"),AH=a("strong"),bVe=o("luke"),vVe=o(" \u2014 "),OB=a("a"),TVe=o("LukeTokenizer"),FVe=o(" (LUKE model)"),CVe=l(),fs=a("li"),LH=a("strong"),MVe=o("lxmert"),EVe=o(" \u2014 "),XB=a("a"),yVe=o("LxmertTokenizer"),wVe=o(" or "),zB=a("a"),AVe=o("LxmertTokenizerFast"),LVe=o(" (LXMERT model)"),BVe=l(),Bg=a("li"),BH=a("strong"),xVe=o("m2m_100"),kVe=o(" \u2014 "),VB=a("a"),RVe=o("M2M100Tokenizer"),SVe=o(" (M2M100 model)"),PVe=l(),xg=a("li"),xH=a("strong"),$Ve=o("marian"),IVe=o(" \u2014 "),WB=a("a"),jVe=o("MarianTokenizer"),NVe=o(" (Marian model)"),DVe=l(),ms=a("li"),kH=a("strong"),qVe=o("mbart"),GVe=o(" \u2014 "),QB=a("a"),OVe=o("MBartTokenizer"),XVe=o(" or "),HB=a("a"),zVe=o("MBartTokenizerFast"),VVe=o(" (mBART model)"),WVe=l(),gs=a("li"),RH=a("strong"),QVe=o("mbart50"),HVe=o(" \u2014 "),UB=a("a"),UVe=o("MBart50Tokenizer"),JVe=o(" or "),JB=a("a"),YVe=o("MBart50TokenizerFast"),KVe=o(" (mBART-50 model)"),ZVe=l(),kg=a("li"),SH=a("strong"),eWe=o("mluke"),oWe=o(" \u2014 "),YB=a("a"),rWe=o("MLukeTokenizer"),tWe=o(" (mLUKE model)"),aWe=l(),hs=a("li"),PH=a("strong"),nWe=o("mobilebert"),sWe=o(" \u2014 "),KB=a("a"),lWe=o("MobileBertTokenizer"),iWe=o(" or "),ZB=a("a"),dWe=o("MobileBertTokenizerFast"),cWe=o(" (MobileBERT model)"),fWe=l(),ps=a("li"),$H=a("strong"),mWe=o("mpnet"),gWe=o(" \u2014 "),ex=a("a"),hWe=o("MPNetTokenizer"),pWe=o(" or "),ox=a("a"),_We=o("MPNetTokenizerFast"),uWe=o(" (MPNet model)"),bWe=l(),_s=a("li"),IH=a("strong"),vWe=o("mt5"),TWe=o(" \u2014 "),rx=a("a"),FWe=o("MT5Tokenizer"),CWe=o(" or "),tx=a("a"),MWe=o("MT5TokenizerFast"),EWe=o(" (mT5 model)"),yWe=l(),us=a("li"),jH=a("strong"),wWe=o("openai-gpt"),AWe=o(" \u2014 "),ax=a("a"),LWe=o("OpenAIGPTTokenizer"),BWe=o(" or "),nx=a("a"),xWe=o("OpenAIGPTTokenizerFast"),kWe=o(" (OpenAI GPT model)"),RWe=l(),bs=a("li"),NH=a("strong"),SWe=o("pegasus"),PWe=o(" \u2014 "),sx=a("a"),$We=o("PegasusTokenizer"),IWe=o(" or "),lx=a("a"),jWe=o("PegasusTokenizerFast"),NWe=o(" (Pegasus model)"),DWe=l(),Rg=a("li"),DH=a("strong"),qWe=o("perceiver"),GWe=o(" \u2014 "),ix=a("a"),OWe=o("PerceiverTokenizer"),XWe=o(" (Perceiver model)"),zWe=l(),Sg=a("li"),qH=a("strong"),VWe=o("phobert"),WWe=o(" \u2014 "),dx=a("a"),QWe=o("PhobertTokenizer"),HWe=o(" (PhoBERT model)"),UWe=l(),Pg=a("li"),GH=a("strong"),JWe=o("plbart"),YWe=o(" \u2014 "),cx=a("a"),KWe=o("PLBartTokenizer"),ZWe=o(" (PLBart model)"),eQe=l(),$g=a("li"),OH=a("strong"),oQe=o("prophetnet"),rQe=o(" \u2014 "),fx=a("a"),tQe=o("ProphetNetTokenizer"),aQe=o(" (ProphetNet model)"),nQe=l(),vs=a("li"),XH=a("strong"),sQe=o("qdqbert"),lQe=o(" \u2014 "),mx=a("a"),iQe=o("BertTokenizer"),dQe=o(" or "),gx=a("a"),cQe=o("BertTokenizerFast"),fQe=o(" (QDQBert model)"),mQe=l(),Ig=a("li"),zH=a("strong"),gQe=o("rag"),hQe=o(" \u2014 "),hx=a("a"),pQe=o("RagTokenizer"),_Qe=o(" (RAG model)"),uQe=l(),Ts=a("li"),VH=a("strong"),bQe=o("reformer"),vQe=o(" \u2014 "),px=a("a"),TQe=o("ReformerTokenizer"),FQe=o(" or "),_x=a("a"),CQe=o("ReformerTokenizerFast"),MQe=o(" (Reformer model)"),EQe=l(),Fs=a("li"),WH=a("strong"),yQe=o("rembert"),wQe=o(" \u2014 "),ux=a("a"),AQe=o("RemBertTokenizer"),LQe=o(" or "),bx=a("a"),BQe=o("RemBertTokenizerFast"),xQe=o(" (RemBERT model)"),kQe=l(),Cs=a("li"),QH=a("strong"),RQe=o("retribert"),SQe=o(" \u2014 "),vx=a("a"),PQe=o("RetriBertTokenizer"),$Qe=o(" or "),Tx=a("a"),IQe=o("RetriBertTokenizerFast"),jQe=o(" (RetriBERT model)"),NQe=l(),Ms=a("li"),HH=a("strong"),DQe=o("roberta"),qQe=o(" \u2014 "),Fx=a("a"),GQe=o("RobertaTokenizer"),OQe=o(" or "),Cx=a("a"),XQe=o("RobertaTokenizerFast"),zQe=o(" (RoBERTa model)"),VQe=l(),Es=a("li"),UH=a("strong"),WQe=o("roformer"),QQe=o(" \u2014 "),Mx=a("a"),HQe=o("RoFormerTokenizer"),UQe=o(" or "),Ex=a("a"),JQe=o("RoFormerTokenizerFast"),YQe=o(" (RoFormer model)"),KQe=l(),jg=a("li"),JH=a("strong"),ZQe=o("speech_to_text"),eHe=o(" \u2014 "),yx=a("a"),oHe=o("Speech2TextTokenizer"),rHe=o(" (Speech2Text model)"),tHe=l(),Ng=a("li"),YH=a("strong"),aHe=o("speech_to_text_2"),nHe=o(" \u2014 "),wx=a("a"),sHe=o("Speech2Text2Tokenizer"),lHe=o(" (Speech2Text2 model)"),iHe=l(),ys=a("li"),KH=a("strong"),dHe=o("splinter"),cHe=o(" \u2014 "),Ax=a("a"),fHe=o("SplinterTokenizer"),mHe=o(" or "),Lx=a("a"),gHe=o("SplinterTokenizerFast"),hHe=o(" (Splinter model)"),pHe=l(),ws=a("li"),ZH=a("strong"),_He=o("squeezebert"),uHe=o(" \u2014 "),Bx=a("a"),bHe=o("SqueezeBertTokenizer"),vHe=o(" or "),xx=a("a"),THe=o("SqueezeBertTokenizerFast"),FHe=o(" (SqueezeBERT model)"),CHe=l(),As=a("li"),eU=a("strong"),MHe=o("t5"),EHe=o(" \u2014 "),kx=a("a"),yHe=o("T5Tokenizer"),wHe=o(" or "),Rx=a("a"),AHe=o("T5TokenizerFast"),LHe=o(" (T5 model)"),BHe=l(),Dg=a("li"),oU=a("strong"),xHe=o("tapas"),kHe=o(" \u2014 "),Sx=a("a"),RHe=o("TapasTokenizer"),SHe=o(" (TAPAS model)"),PHe=l(),qg=a("li"),rU=a("strong"),$He=o("transfo-xl"),IHe=o(" \u2014 "),Px=a("a"),jHe=o("TransfoXLTokenizer"),NHe=o(" (Transformer-XL model)"),DHe=l(),Gg=a("li"),tU=a("strong"),qHe=o("wav2vec2"),GHe=o(" \u2014 "),$x=a("a"),OHe=o("Wav2Vec2CTCTokenizer"),XHe=o(" (Wav2Vec2 model)"),zHe=l(),Og=a("li"),aU=a("strong"),VHe=o("wav2vec2_phoneme"),WHe=o(" \u2014 "),Ix=a("a"),QHe=o("Wav2Vec2PhonemeCTCTokenizer"),HHe=o(" (Wav2Vec2Phoneme model)"),UHe=l(),Ls=a("li"),nU=a("strong"),JHe=o("xglm"),YHe=o(" \u2014 "),jx=a("a"),KHe=o("XGLMTokenizer"),ZHe=o(" or "),Nx=a("a"),eUe=o("XGLMTokenizerFast"),oUe=o(" (XGLM model)"),rUe=l(),Xg=a("li"),sU=a("strong"),tUe=o("xlm"),aUe=o(" \u2014 "),Dx=a("a"),nUe=o("XLMTokenizer"),sUe=o(" (XLM model)"),lUe=l(),zg=a("li"),lU=a("strong"),iUe=o("xlm-prophetnet"),dUe=o(" \u2014 "),qx=a("a"),cUe=o("XLMProphetNetTokenizer"),fUe=o(" (XLMProphetNet model)"),mUe=l(),Bs=a("li"),iU=a("strong"),gUe=o("xlm-roberta"),hUe=o(" \u2014 "),Gx=a("a"),pUe=o("XLMRobertaTokenizer"),_Ue=o(" or "),Ox=a("a"),uUe=o("XLMRobertaTokenizerFast"),bUe=o(" (XLM-RoBERTa model)"),vUe=l(),xs=a("li"),dU=a("strong"),TUe=o("xlnet"),FUe=o(" \u2014 "),Xx=a("a"),CUe=o("XLNetTokenizer"),MUe=o(" or "),zx=a("a"),EUe=o("XLNetTokenizerFast"),yUe=o(" (XLNet model)"),wUe=l(),cU=a("p"),AUe=o("Examples:"),LUe=l(),f(FM.$$.fragment),BUe=l(),Vg=a("div"),f(CM.$$.fragment),xUe=l(),fU=a("p"),kUe=o("Register a new tokenizer in this mapping."),TLe=l(),ji=a("h2"),Wg=a("a"),mU=a("span"),f(MM.$$.fragment),RUe=l(),gU=a("span"),SUe=o("AutoFeatureExtractor"),FLe=l(),Xo=a("div"),f(EM.$$.fragment),PUe=l(),yM=a("p"),$Ue=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Vx=a("a"),IUe=o("AutoFeatureExtractor.from_pretrained()"),jUe=o(" class method."),NUe=l(),wM=a("p"),DUe=o("This class cannot be instantiated directly using "),hU=a("code"),qUe=o("__init__()"),GUe=o(" (throws an error)."),OUe=l(),Le=a("div"),f(AM.$$.fragment),XUe=l(),pU=a("p"),zUe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),VUe=l(),Na=a("p"),WUe=o("The feature extractor class to instantiate is selected based on the "),_U=a("code"),QUe=o("model_type"),HUe=o(` property of the config object
(either passed as an argument or loaded from `),uU=a("code"),UUe=o("pretrained_model_name_or_path"),JUe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),bU=a("code"),YUe=o("pretrained_model_name_or_path"),KUe=o(":"),ZUe=l(),se=a("ul"),Qg=a("li"),vU=a("strong"),eJe=o("beit"),oJe=o(" \u2014 "),Wx=a("a"),rJe=o("BeitFeatureExtractor"),tJe=o(" (BEiT model)"),aJe=l(),Hg=a("li"),TU=a("strong"),nJe=o("clip"),sJe=o(" \u2014 "),Qx=a("a"),lJe=o("CLIPFeatureExtractor"),iJe=o(" (CLIP model)"),dJe=l(),Ug=a("li"),FU=a("strong"),cJe=o("convnext"),fJe=o(" \u2014 "),Hx=a("a"),mJe=o("ConvNextFeatureExtractor"),gJe=o(" (ConvNext model)"),hJe=l(),Jg=a("li"),CU=a("strong"),pJe=o("deit"),_Je=o(" \u2014 "),Ux=a("a"),uJe=o("DeiTFeatureExtractor"),bJe=o(" (DeiT model)"),vJe=l(),Yg=a("li"),MU=a("strong"),TJe=o("detr"),FJe=o(" \u2014 "),Jx=a("a"),CJe=o("DetrFeatureExtractor"),MJe=o(" (DETR model)"),EJe=l(),Kg=a("li"),EU=a("strong"),yJe=o("hubert"),wJe=o(" \u2014 "),Yx=a("a"),AJe=o("Wav2Vec2FeatureExtractor"),LJe=o(" (Hubert model)"),BJe=l(),Zg=a("li"),yU=a("strong"),xJe=o("layoutlmv2"),kJe=o(" \u2014 "),Kx=a("a"),RJe=o("LayoutLMv2FeatureExtractor"),SJe=o(" (LayoutLMv2 model)"),PJe=l(),eh=a("li"),wU=a("strong"),$Je=o("perceiver"),IJe=o(" \u2014 "),Zx=a("a"),jJe=o("PerceiverFeatureExtractor"),NJe=o(" (Perceiver model)"),DJe=l(),oh=a("li"),AU=a("strong"),qJe=o("poolformer"),GJe=o(" \u2014 "),ek=a("a"),OJe=o("PoolFormerFeatureExtractor"),XJe=o(" (PoolFormer model)"),zJe=l(),rh=a("li"),LU=a("strong"),VJe=o("segformer"),WJe=o(" \u2014 "),ok=a("a"),QJe=o("SegformerFeatureExtractor"),HJe=o(" (SegFormer model)"),UJe=l(),th=a("li"),BU=a("strong"),JJe=o("speech_to_text"),YJe=o(" \u2014 "),rk=a("a"),KJe=o("Speech2TextFeatureExtractor"),ZJe=o(" (Speech2Text model)"),eYe=l(),ah=a("li"),xU=a("strong"),oYe=o("swin"),rYe=o(" \u2014 "),tk=a("a"),tYe=o("ViTFeatureExtractor"),aYe=o(" (Swin model)"),nYe=l(),nh=a("li"),kU=a("strong"),sYe=o("vit"),lYe=o(" \u2014 "),ak=a("a"),iYe=o("ViTFeatureExtractor"),dYe=o(" (ViT model)"),cYe=l(),sh=a("li"),RU=a("strong"),fYe=o("vit_mae"),mYe=o(" \u2014 "),nk=a("a"),gYe=o("ViTFeatureExtractor"),hYe=o(" (ViTMAE model)"),pYe=l(),lh=a("li"),SU=a("strong"),_Ye=o("wav2vec2"),uYe=o(" \u2014 "),sk=a("a"),bYe=o("Wav2Vec2FeatureExtractor"),vYe=o(" (Wav2Vec2 model)"),TYe=l(),f(ih.$$.fragment),FYe=l(),PU=a("p"),CYe=o("Examples:"),MYe=l(),f(LM.$$.fragment),EYe=l(),dh=a("div"),f(BM.$$.fragment),yYe=l(),$U=a("p"),wYe=o("Register a new feature extractor for this class."),CLe=l(),Ni=a("h2"),ch=a("a"),IU=a("span"),f(xM.$$.fragment),AYe=l(),jU=a("span"),LYe=o("AutoProcessor"),MLe=l(),zo=a("div"),f(kM.$$.fragment),BYe=l(),RM=a("p"),xYe=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),lk=a("a"),kYe=o("AutoProcessor.from_pretrained()"),RYe=o(" class method."),SYe=l(),SM=a("p"),PYe=o("This class cannot be instantiated directly using "),NU=a("code"),$Ye=o("__init__()"),IYe=o(" (throws an error)."),jYe=l(),Be=a("div"),f(PM.$$.fragment),NYe=l(),DU=a("p"),DYe=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),qYe=l(),Di=a("p"),GYe=o("The processor class to instantiate is selected based on the "),qU=a("code"),OYe=o("model_type"),XYe=o(` property of the config object (either
passed as an argument or loaded from `),GU=a("code"),zYe=o("pretrained_model_name_or_path"),VYe=o(" if possible):"),WYe=l(),we=a("ul"),fh=a("li"),OU=a("strong"),QYe=o("clip"),HYe=o(" \u2014 "),ik=a("a"),UYe=o("CLIPProcessor"),JYe=o(" (CLIP model)"),YYe=l(),mh=a("li"),XU=a("strong"),KYe=o("layoutlmv2"),ZYe=o(" \u2014 "),dk=a("a"),eKe=o("LayoutLMv2Processor"),oKe=o(" (LayoutLMv2 model)"),rKe=l(),gh=a("li"),zU=a("strong"),tKe=o("layoutxlm"),aKe=o(" \u2014 "),ck=a("a"),nKe=o("LayoutXLMProcessor"),sKe=o(" (LayoutXLM model)"),lKe=l(),hh=a("li"),VU=a("strong"),iKe=o("speech_to_text"),dKe=o(" \u2014 "),fk=a("a"),cKe=o("Speech2TextProcessor"),fKe=o(" (Speech2Text model)"),mKe=l(),ph=a("li"),WU=a("strong"),gKe=o("speech_to_text_2"),hKe=o(" \u2014 "),mk=a("a"),pKe=o("Speech2Text2Processor"),_Ke=o(" (Speech2Text2 model)"),uKe=l(),_h=a("li"),QU=a("strong"),bKe=o("trocr"),vKe=o(" \u2014 "),gk=a("a"),TKe=o("TrOCRProcessor"),FKe=o(" (TrOCR model)"),CKe=l(),uh=a("li"),HU=a("strong"),MKe=o("vision-text-dual-encoder"),EKe=o(" \u2014 "),hk=a("a"),yKe=o("VisionTextDualEncoderProcessor"),wKe=o(" (VisionTextDualEncoder model)"),AKe=l(),bh=a("li"),UU=a("strong"),LKe=o("wav2vec2"),BKe=o(" \u2014 "),pk=a("a"),xKe=o("Wav2Vec2Processor"),kKe=o(" (Wav2Vec2 model)"),RKe=l(),f(vh.$$.fragment),SKe=l(),JU=a("p"),PKe=o("Examples:"),$Ke=l(),f($M.$$.fragment),IKe=l(),Th=a("div"),f(IM.$$.fragment),jKe=l(),YU=a("p"),NKe=o("Register a new processor for this class."),ELe=l(),qi=a("h2"),Fh=a("a"),KU=a("span"),f(jM.$$.fragment),DKe=l(),ZU=a("span"),qKe=o("AutoModel"),yLe=l(),Vo=a("div"),f(NM.$$.fragment),GKe=l(),Gi=a("p"),OKe=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eJ=a("code"),XKe=o("from_pretrained()"),zKe=o("class method or the "),oJ=a("code"),VKe=o("from_config()"),WKe=o(`class
method.`),QKe=l(),DM=a("p"),HKe=o("This class cannot be instantiated directly using "),rJ=a("code"),UKe=o("__init__()"),JKe=o(" (throws an error)."),YKe=l(),Nr=a("div"),f(qM.$$.fragment),KKe=l(),tJ=a("p"),ZKe=o("Instantiates one of the base model classes of the library from a configuration."),eZe=l(),Oi=a("p"),oZe=o(`Note:
Loading a model from its configuration file does `),aJ=a("strong"),rZe=o("not"),tZe=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("code"),aZe=o("from_pretrained()"),nZe=o("to load the model weights."),sZe=l(),sJ=a("p"),lZe=o("Examples:"),iZe=l(),f(GM.$$.fragment),dZe=l(),xe=a("div"),f(OM.$$.fragment),cZe=l(),lJ=a("p"),fZe=o("Instantiate one of the base model classes of the library from a pretrained model."),mZe=l(),Da=a("p"),gZe=o("The model class to instantiate is selected based on the "),iJ=a("code"),hZe=o("model_type"),pZe=o(` property of the config object (either
passed as an argument or loaded from `),dJ=a("code"),_Ze=o("pretrained_model_name_or_path"),uZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cJ=a("code"),bZe=o("pretrained_model_name_or_path"),vZe=o(":"),TZe=l(),F=a("ul"),Ch=a("li"),fJ=a("strong"),FZe=o("albert"),CZe=o(" \u2014 "),_k=a("a"),MZe=o("AlbertModel"),EZe=o(" (ALBERT model)"),yZe=l(),Mh=a("li"),mJ=a("strong"),wZe=o("bart"),AZe=o(" \u2014 "),uk=a("a"),LZe=o("BartModel"),BZe=o(" (BART model)"),xZe=l(),Eh=a("li"),gJ=a("strong"),kZe=o("beit"),RZe=o(" \u2014 "),bk=a("a"),SZe=o("BeitModel"),PZe=o(" (BEiT model)"),$Ze=l(),yh=a("li"),hJ=a("strong"),IZe=o("bert"),jZe=o(" \u2014 "),vk=a("a"),NZe=o("BertModel"),DZe=o(" (BERT model)"),qZe=l(),wh=a("li"),pJ=a("strong"),GZe=o("bert-generation"),OZe=o(" \u2014 "),Tk=a("a"),XZe=o("BertGenerationEncoder"),zZe=o(" (Bert Generation model)"),VZe=l(),Ah=a("li"),_J=a("strong"),WZe=o("big_bird"),QZe=o(" \u2014 "),Fk=a("a"),HZe=o("BigBirdModel"),UZe=o(" (BigBird model)"),JZe=l(),Lh=a("li"),uJ=a("strong"),YZe=o("bigbird_pegasus"),KZe=o(" \u2014 "),Ck=a("a"),ZZe=o("BigBirdPegasusModel"),eeo=o(" (BigBirdPegasus model)"),oeo=l(),Bh=a("li"),bJ=a("strong"),reo=o("blenderbot"),teo=o(" \u2014 "),Mk=a("a"),aeo=o("BlenderbotModel"),neo=o(" (Blenderbot model)"),seo=l(),xh=a("li"),vJ=a("strong"),leo=o("blenderbot-small"),ieo=o(" \u2014 "),Ek=a("a"),deo=o("BlenderbotSmallModel"),ceo=o(" (BlenderbotSmall model)"),feo=l(),kh=a("li"),TJ=a("strong"),meo=o("camembert"),geo=o(" \u2014 "),yk=a("a"),heo=o("CamembertModel"),peo=o(" (CamemBERT model)"),_eo=l(),Rh=a("li"),FJ=a("strong"),ueo=o("canine"),beo=o(" \u2014 "),wk=a("a"),veo=o("CanineModel"),Teo=o(" (Canine model)"),Feo=l(),Sh=a("li"),CJ=a("strong"),Ceo=o("clip"),Meo=o(" \u2014 "),Ak=a("a"),Eeo=o("CLIPModel"),yeo=o(" (CLIP model)"),weo=l(),Ph=a("li"),MJ=a("strong"),Aeo=o("convbert"),Leo=o(" \u2014 "),Lk=a("a"),Beo=o("ConvBertModel"),xeo=o(" (ConvBERT model)"),keo=l(),$h=a("li"),EJ=a("strong"),Reo=o("convnext"),Seo=o(" \u2014 "),Bk=a("a"),Peo=o("ConvNextModel"),$eo=o(" (ConvNext model)"),Ieo=l(),Ih=a("li"),yJ=a("strong"),jeo=o("ctrl"),Neo=o(" \u2014 "),xk=a("a"),Deo=o("CTRLModel"),qeo=o(" (CTRL model)"),Geo=l(),jh=a("li"),wJ=a("strong"),Oeo=o("deberta"),Xeo=o(" \u2014 "),kk=a("a"),zeo=o("DebertaModel"),Veo=o(" (DeBERTa model)"),Weo=l(),Nh=a("li"),AJ=a("strong"),Qeo=o("deberta-v2"),Heo=o(" \u2014 "),Rk=a("a"),Ueo=o("DebertaV2Model"),Jeo=o(" (DeBERTa-v2 model)"),Yeo=l(),Dh=a("li"),LJ=a("strong"),Keo=o("deit"),Zeo=o(" \u2014 "),Sk=a("a"),eoo=o("DeiTModel"),ooo=o(" (DeiT model)"),roo=l(),qh=a("li"),BJ=a("strong"),too=o("detr"),aoo=o(" \u2014 "),Pk=a("a"),noo=o("DetrModel"),soo=o(" (DETR model)"),loo=l(),Gh=a("li"),xJ=a("strong"),ioo=o("distilbert"),doo=o(" \u2014 "),$k=a("a"),coo=o("DistilBertModel"),foo=o(" (DistilBERT model)"),moo=l(),Oh=a("li"),kJ=a("strong"),goo=o("dpr"),hoo=o(" \u2014 "),Ik=a("a"),poo=o("DPRQuestionEncoder"),_oo=o(" (DPR model)"),uoo=l(),Xh=a("li"),RJ=a("strong"),boo=o("electra"),voo=o(" \u2014 "),jk=a("a"),Too=o("ElectraModel"),Foo=o(" (ELECTRA model)"),Coo=l(),zh=a("li"),SJ=a("strong"),Moo=o("flaubert"),Eoo=o(" \u2014 "),Nk=a("a"),yoo=o("FlaubertModel"),woo=o(" (FlauBERT model)"),Aoo=l(),Vh=a("li"),PJ=a("strong"),Loo=o("fnet"),Boo=o(" \u2014 "),Dk=a("a"),xoo=o("FNetModel"),koo=o(" (FNet model)"),Roo=l(),Wh=a("li"),$J=a("strong"),Soo=o("fsmt"),Poo=o(" \u2014 "),qk=a("a"),$oo=o("FSMTModel"),Ioo=o(" (FairSeq Machine-Translation model)"),joo=l(),ks=a("li"),IJ=a("strong"),Noo=o("funnel"),Doo=o(" \u2014 "),Gk=a("a"),qoo=o("FunnelModel"),Goo=o(" or "),Ok=a("a"),Ooo=o("FunnelBaseModel"),Xoo=o(" (Funnel Transformer model)"),zoo=l(),Qh=a("li"),jJ=a("strong"),Voo=o("gpt2"),Woo=o(" \u2014 "),Xk=a("a"),Qoo=o("GPT2Model"),Hoo=o(" (OpenAI GPT-2 model)"),Uoo=l(),Hh=a("li"),NJ=a("strong"),Joo=o("gpt_neo"),Yoo=o(" \u2014 "),zk=a("a"),Koo=o("GPTNeoModel"),Zoo=o(" (GPT Neo model)"),ero=l(),Uh=a("li"),DJ=a("strong"),oro=o("gptj"),rro=o(" \u2014 "),Vk=a("a"),tro=o("GPTJModel"),aro=o(" (GPT-J model)"),nro=l(),Jh=a("li"),qJ=a("strong"),sro=o("hubert"),lro=o(" \u2014 "),Wk=a("a"),iro=o("HubertModel"),dro=o(" (Hubert model)"),cro=l(),Yh=a("li"),GJ=a("strong"),fro=o("ibert"),mro=o(" \u2014 "),Qk=a("a"),gro=o("IBertModel"),hro=o(" (I-BERT model)"),pro=l(),Kh=a("li"),OJ=a("strong"),_ro=o("imagegpt"),uro=o(" \u2014 "),Hk=a("a"),bro=o("ImageGPTModel"),vro=o(" (ImageGPT model)"),Tro=l(),Zh=a("li"),XJ=a("strong"),Fro=o("layoutlm"),Cro=o(" \u2014 "),Uk=a("a"),Mro=o("LayoutLMModel"),Ero=o(" (LayoutLM model)"),yro=l(),ep=a("li"),zJ=a("strong"),wro=o("layoutlmv2"),Aro=o(" \u2014 "),Jk=a("a"),Lro=o("LayoutLMv2Model"),Bro=o(" (LayoutLMv2 model)"),xro=l(),op=a("li"),VJ=a("strong"),kro=o("led"),Rro=o(" \u2014 "),Yk=a("a"),Sro=o("LEDModel"),Pro=o(" (LED model)"),$ro=l(),rp=a("li"),WJ=a("strong"),Iro=o("longformer"),jro=o(" \u2014 "),Kk=a("a"),Nro=o("LongformerModel"),Dro=o(" (Longformer model)"),qro=l(),tp=a("li"),QJ=a("strong"),Gro=o("luke"),Oro=o(" \u2014 "),Zk=a("a"),Xro=o("LukeModel"),zro=o(" (LUKE model)"),Vro=l(),ap=a("li"),HJ=a("strong"),Wro=o("lxmert"),Qro=o(" \u2014 "),eR=a("a"),Hro=o("LxmertModel"),Uro=o(" (LXMERT model)"),Jro=l(),np=a("li"),UJ=a("strong"),Yro=o("m2m_100"),Kro=o(" \u2014 "),oR=a("a"),Zro=o("M2M100Model"),eto=o(" (M2M100 model)"),oto=l(),sp=a("li"),JJ=a("strong"),rto=o("marian"),tto=o(" \u2014 "),rR=a("a"),ato=o("MarianModel"),nto=o(" (Marian model)"),sto=l(),lp=a("li"),YJ=a("strong"),lto=o("mbart"),ito=o(" \u2014 "),tR=a("a"),dto=o("MBartModel"),cto=o(" (mBART model)"),fto=l(),ip=a("li"),KJ=a("strong"),mto=o("megatron-bert"),gto=o(" \u2014 "),aR=a("a"),hto=o("MegatronBertModel"),pto=o(" (MegatronBert model)"),_to=l(),dp=a("li"),ZJ=a("strong"),uto=o("mobilebert"),bto=o(" \u2014 "),nR=a("a"),vto=o("MobileBertModel"),Tto=o(" (MobileBERT model)"),Fto=l(),cp=a("li"),eY=a("strong"),Cto=o("mpnet"),Mto=o(" \u2014 "),sR=a("a"),Eto=o("MPNetModel"),yto=o(" (MPNet model)"),wto=l(),fp=a("li"),oY=a("strong"),Ato=o("mt5"),Lto=o(" \u2014 "),lR=a("a"),Bto=o("MT5Model"),xto=o(" (mT5 model)"),kto=l(),mp=a("li"),rY=a("strong"),Rto=o("nystromformer"),Sto=o(" \u2014 "),iR=a("a"),Pto=o("NystromformerModel"),$to=o(" (Nystromformer model)"),Ito=l(),gp=a("li"),tY=a("strong"),jto=o("openai-gpt"),Nto=o(" \u2014 "),dR=a("a"),Dto=o("OpenAIGPTModel"),qto=o(" (OpenAI GPT model)"),Gto=l(),hp=a("li"),aY=a("strong"),Oto=o("pegasus"),Xto=o(" \u2014 "),cR=a("a"),zto=o("PegasusModel"),Vto=o(" (Pegasus model)"),Wto=l(),pp=a("li"),nY=a("strong"),Qto=o("perceiver"),Hto=o(" \u2014 "),fR=a("a"),Uto=o("PerceiverModel"),Jto=o(" (Perceiver model)"),Yto=l(),_p=a("li"),sY=a("strong"),Kto=o("plbart"),Zto=o(" \u2014 "),mR=a("a"),eao=o("PLBartModel"),oao=o(" (PLBart model)"),rao=l(),up=a("li"),lY=a("strong"),tao=o("poolformer"),aao=o(" \u2014 "),gR=a("a"),nao=o("PoolFormerModel"),sao=o(" (PoolFormer model)"),lao=l(),bp=a("li"),iY=a("strong"),iao=o("prophetnet"),dao=o(" \u2014 "),hR=a("a"),cao=o("ProphetNetModel"),fao=o(" (ProphetNet model)"),mao=l(),vp=a("li"),dY=a("strong"),gao=o("qdqbert"),hao=o(" \u2014 "),pR=a("a"),pao=o("QDQBertModel"),_ao=o(" (QDQBert model)"),uao=l(),Tp=a("li"),cY=a("strong"),bao=o("reformer"),vao=o(" \u2014 "),_R=a("a"),Tao=o("ReformerModel"),Fao=o(" (Reformer model)"),Cao=l(),Fp=a("li"),fY=a("strong"),Mao=o("rembert"),Eao=o(" \u2014 "),uR=a("a"),yao=o("RemBertModel"),wao=o(" (RemBERT model)"),Aao=l(),Cp=a("li"),mY=a("strong"),Lao=o("retribert"),Bao=o(" \u2014 "),bR=a("a"),xao=o("RetriBertModel"),kao=o(" (RetriBERT model)"),Rao=l(),Mp=a("li"),gY=a("strong"),Sao=o("roberta"),Pao=o(" \u2014 "),vR=a("a"),$ao=o("RobertaModel"),Iao=o(" (RoBERTa model)"),jao=l(),Ep=a("li"),hY=a("strong"),Nao=o("roformer"),Dao=o(" \u2014 "),TR=a("a"),qao=o("RoFormerModel"),Gao=o(" (RoFormer model)"),Oao=l(),yp=a("li"),pY=a("strong"),Xao=o("segformer"),zao=o(" \u2014 "),FR=a("a"),Vao=o("SegformerModel"),Wao=o(" (SegFormer model)"),Qao=l(),wp=a("li"),_Y=a("strong"),Hao=o("sew"),Uao=o(" \u2014 "),CR=a("a"),Jao=o("SEWModel"),Yao=o(" (SEW model)"),Kao=l(),Ap=a("li"),uY=a("strong"),Zao=o("sew-d"),eno=o(" \u2014 "),MR=a("a"),ono=o("SEWDModel"),rno=o(" (SEW-D model)"),tno=l(),Lp=a("li"),bY=a("strong"),ano=o("speech_to_text"),nno=o(" \u2014 "),ER=a("a"),sno=o("Speech2TextModel"),lno=o(" (Speech2Text model)"),ino=l(),Bp=a("li"),vY=a("strong"),dno=o("splinter"),cno=o(" \u2014 "),yR=a("a"),fno=o("SplinterModel"),mno=o(" (Splinter model)"),gno=l(),xp=a("li"),TY=a("strong"),hno=o("squeezebert"),pno=o(" \u2014 "),wR=a("a"),_no=o("SqueezeBertModel"),uno=o(" (SqueezeBERT model)"),bno=l(),kp=a("li"),FY=a("strong"),vno=o("swin"),Tno=o(" \u2014 "),AR=a("a"),Fno=o("SwinModel"),Cno=o(" (Swin model)"),Mno=l(),Rp=a("li"),CY=a("strong"),Eno=o("t5"),yno=o(" \u2014 "),LR=a("a"),wno=o("T5Model"),Ano=o(" (T5 model)"),Lno=l(),Sp=a("li"),MY=a("strong"),Bno=o("tapas"),xno=o(" \u2014 "),BR=a("a"),kno=o("TapasModel"),Rno=o(" (TAPAS model)"),Sno=l(),Pp=a("li"),EY=a("strong"),Pno=o("transfo-xl"),$no=o(" \u2014 "),xR=a("a"),Ino=o("TransfoXLModel"),jno=o(" (Transformer-XL model)"),Nno=l(),$p=a("li"),yY=a("strong"),Dno=o("unispeech"),qno=o(" \u2014 "),kR=a("a"),Gno=o("UniSpeechModel"),Ono=o(" (UniSpeech model)"),Xno=l(),Ip=a("li"),wY=a("strong"),zno=o("unispeech-sat"),Vno=o(" \u2014 "),RR=a("a"),Wno=o("UniSpeechSatModel"),Qno=o(" (UniSpeechSat model)"),Hno=l(),jp=a("li"),AY=a("strong"),Uno=o("vilt"),Jno=o(" \u2014 "),SR=a("a"),Yno=o("ViltModel"),Kno=o(" (ViLT model)"),Zno=l(),Np=a("li"),LY=a("strong"),eso=o("vision-text-dual-encoder"),oso=o(" \u2014 "),PR=a("a"),rso=o("VisionTextDualEncoderModel"),tso=o(" (VisionTextDualEncoder model)"),aso=l(),Dp=a("li"),BY=a("strong"),nso=o("visual_bert"),sso=o(" \u2014 "),$R=a("a"),lso=o("VisualBertModel"),iso=o(" (VisualBert model)"),dso=l(),qp=a("li"),xY=a("strong"),cso=o("vit"),fso=o(" \u2014 "),IR=a("a"),mso=o("ViTModel"),gso=o(" (ViT model)"),hso=l(),Gp=a("li"),kY=a("strong"),pso=o("vit_mae"),_so=o(" \u2014 "),jR=a("a"),uso=o("ViTMAEModel"),bso=o(" (ViTMAE model)"),vso=l(),Op=a("li"),RY=a("strong"),Tso=o("wav2vec2"),Fso=o(" \u2014 "),NR=a("a"),Cso=o("Wav2Vec2Model"),Mso=o(" (Wav2Vec2 model)"),Eso=l(),Xp=a("li"),SY=a("strong"),yso=o("wavlm"),wso=o(" \u2014 "),DR=a("a"),Aso=o("WavLMModel"),Lso=o(" (WavLM model)"),Bso=l(),zp=a("li"),PY=a("strong"),xso=o("xglm"),kso=o(" \u2014 "),qR=a("a"),Rso=o("XGLMModel"),Sso=o(" (XGLM model)"),Pso=l(),Vp=a("li"),$Y=a("strong"),$so=o("xlm"),Iso=o(" \u2014 "),GR=a("a"),jso=o("XLMModel"),Nso=o(" (XLM model)"),Dso=l(),Wp=a("li"),IY=a("strong"),qso=o("xlm-prophetnet"),Gso=o(" \u2014 "),OR=a("a"),Oso=o("XLMProphetNetModel"),Xso=o(" (XLMProphetNet model)"),zso=l(),Qp=a("li"),jY=a("strong"),Vso=o("xlm-roberta"),Wso=o(" \u2014 "),XR=a("a"),Qso=o("XLMRobertaModel"),Hso=o(" (XLM-RoBERTa model)"),Uso=l(),Hp=a("li"),NY=a("strong"),Jso=o("xlm-roberta-xl"),Yso=o(" \u2014 "),zR=a("a"),Kso=o("XLMRobertaXLModel"),Zso=o(" (XLM-RoBERTa-XL model)"),elo=l(),Up=a("li"),DY=a("strong"),olo=o("xlnet"),rlo=o(" \u2014 "),VR=a("a"),tlo=o("XLNetModel"),alo=o(" (XLNet model)"),nlo=l(),Jp=a("li"),qY=a("strong"),slo=o("yoso"),llo=o(" \u2014 "),WR=a("a"),ilo=o("YosoModel"),dlo=o(" (YOSO model)"),clo=l(),Yp=a("p"),flo=o("The model is set in evaluation mode by default using "),GY=a("code"),mlo=o("model.eval()"),glo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OY=a("code"),hlo=o("model.train()"),plo=l(),XY=a("p"),_lo=o("Examples:"),ulo=l(),f(XM.$$.fragment),wLe=l(),Xi=a("h2"),Kp=a("a"),zY=a("span"),f(zM.$$.fragment),blo=l(),VY=a("span"),vlo=o("AutoModelForPreTraining"),ALe=l(),Wo=a("div"),f(VM.$$.fragment),Tlo=l(),zi=a("p"),Flo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WY=a("code"),Clo=o("from_pretrained()"),Mlo=o("class method or the "),QY=a("code"),Elo=o("from_config()"),ylo=o(`class
method.`),wlo=l(),WM=a("p"),Alo=o("This class cannot be instantiated directly using "),HY=a("code"),Llo=o("__init__()"),Blo=o(" (throws an error)."),xlo=l(),Dr=a("div"),f(QM.$$.fragment),klo=l(),UY=a("p"),Rlo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Slo=l(),Vi=a("p"),Plo=o(`Note:
Loading a model from its configuration file does `),JY=a("strong"),$lo=o("not"),Ilo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=a("code"),jlo=o("from_pretrained()"),Nlo=o("to load the model weights."),Dlo=l(),KY=a("p"),qlo=o("Examples:"),Glo=l(),f(HM.$$.fragment),Olo=l(),ke=a("div"),f(UM.$$.fragment),Xlo=l(),ZY=a("p"),zlo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Vlo=l(),qa=a("p"),Wlo=o("The model class to instantiate is selected based on the "),eK=a("code"),Qlo=o("model_type"),Hlo=o(` property of the config object (either
passed as an argument or loaded from `),oK=a("code"),Ulo=o("pretrained_model_name_or_path"),Jlo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rK=a("code"),Ylo=o("pretrained_model_name_or_path"),Klo=o(":"),Zlo=l(),k=a("ul"),Zp=a("li"),tK=a("strong"),eio=o("albert"),oio=o(" \u2014 "),QR=a("a"),rio=o("AlbertForPreTraining"),tio=o(" (ALBERT model)"),aio=l(),e_=a("li"),aK=a("strong"),nio=o("bart"),sio=o(" \u2014 "),HR=a("a"),lio=o("BartForConditionalGeneration"),iio=o(" (BART model)"),dio=l(),o_=a("li"),nK=a("strong"),cio=o("bert"),fio=o(" \u2014 "),UR=a("a"),mio=o("BertForPreTraining"),gio=o(" (BERT model)"),hio=l(),r_=a("li"),sK=a("strong"),pio=o("big_bird"),_io=o(" \u2014 "),JR=a("a"),uio=o("BigBirdForPreTraining"),bio=o(" (BigBird model)"),vio=l(),t_=a("li"),lK=a("strong"),Tio=o("camembert"),Fio=o(" \u2014 "),YR=a("a"),Cio=o("CamembertForMaskedLM"),Mio=o(" (CamemBERT model)"),Eio=l(),a_=a("li"),iK=a("strong"),yio=o("ctrl"),wio=o(" \u2014 "),KR=a("a"),Aio=o("CTRLLMHeadModel"),Lio=o(" (CTRL model)"),Bio=l(),n_=a("li"),dK=a("strong"),xio=o("deberta"),kio=o(" \u2014 "),ZR=a("a"),Rio=o("DebertaForMaskedLM"),Sio=o(" (DeBERTa model)"),Pio=l(),s_=a("li"),cK=a("strong"),$io=o("deberta-v2"),Iio=o(" \u2014 "),eS=a("a"),jio=o("DebertaV2ForMaskedLM"),Nio=o(" (DeBERTa-v2 model)"),Dio=l(),l_=a("li"),fK=a("strong"),qio=o("distilbert"),Gio=o(" \u2014 "),oS=a("a"),Oio=o("DistilBertForMaskedLM"),Xio=o(" (DistilBERT model)"),zio=l(),i_=a("li"),mK=a("strong"),Vio=o("electra"),Wio=o(" \u2014 "),rS=a("a"),Qio=o("ElectraForPreTraining"),Hio=o(" (ELECTRA model)"),Uio=l(),d_=a("li"),gK=a("strong"),Jio=o("flaubert"),Yio=o(" \u2014 "),tS=a("a"),Kio=o("FlaubertWithLMHeadModel"),Zio=o(" (FlauBERT model)"),edo=l(),c_=a("li"),hK=a("strong"),odo=o("fnet"),rdo=o(" \u2014 "),aS=a("a"),tdo=o("FNetForPreTraining"),ado=o(" (FNet model)"),ndo=l(),f_=a("li"),pK=a("strong"),sdo=o("fsmt"),ldo=o(" \u2014 "),nS=a("a"),ido=o("FSMTForConditionalGeneration"),ddo=o(" (FairSeq Machine-Translation model)"),cdo=l(),m_=a("li"),_K=a("strong"),fdo=o("funnel"),mdo=o(" \u2014 "),sS=a("a"),gdo=o("FunnelForPreTraining"),hdo=o(" (Funnel Transformer model)"),pdo=l(),g_=a("li"),uK=a("strong"),_do=o("gpt2"),udo=o(" \u2014 "),lS=a("a"),bdo=o("GPT2LMHeadModel"),vdo=o(" (OpenAI GPT-2 model)"),Tdo=l(),h_=a("li"),bK=a("strong"),Fdo=o("ibert"),Cdo=o(" \u2014 "),iS=a("a"),Mdo=o("IBertForMaskedLM"),Edo=o(" (I-BERT model)"),ydo=l(),p_=a("li"),vK=a("strong"),wdo=o("layoutlm"),Ado=o(" \u2014 "),dS=a("a"),Ldo=o("LayoutLMForMaskedLM"),Bdo=o(" (LayoutLM model)"),xdo=l(),__=a("li"),TK=a("strong"),kdo=o("longformer"),Rdo=o(" \u2014 "),cS=a("a"),Sdo=o("LongformerForMaskedLM"),Pdo=o(" (Longformer model)"),$do=l(),u_=a("li"),FK=a("strong"),Ido=o("lxmert"),jdo=o(" \u2014 "),fS=a("a"),Ndo=o("LxmertForPreTraining"),Ddo=o(" (LXMERT model)"),qdo=l(),b_=a("li"),CK=a("strong"),Gdo=o("megatron-bert"),Odo=o(" \u2014 "),mS=a("a"),Xdo=o("MegatronBertForPreTraining"),zdo=o(" (MegatronBert model)"),Vdo=l(),v_=a("li"),MK=a("strong"),Wdo=o("mobilebert"),Qdo=o(" \u2014 "),gS=a("a"),Hdo=o("MobileBertForPreTraining"),Udo=o(" (MobileBERT model)"),Jdo=l(),T_=a("li"),EK=a("strong"),Ydo=o("mpnet"),Kdo=o(" \u2014 "),hS=a("a"),Zdo=o("MPNetForMaskedLM"),eco=o(" (MPNet model)"),oco=l(),F_=a("li"),yK=a("strong"),rco=o("openai-gpt"),tco=o(" \u2014 "),pS=a("a"),aco=o("OpenAIGPTLMHeadModel"),nco=o(" (OpenAI GPT model)"),sco=l(),C_=a("li"),wK=a("strong"),lco=o("retribert"),ico=o(" \u2014 "),_S=a("a"),dco=o("RetriBertModel"),cco=o(" (RetriBERT model)"),fco=l(),M_=a("li"),AK=a("strong"),mco=o("roberta"),gco=o(" \u2014 "),uS=a("a"),hco=o("RobertaForMaskedLM"),pco=o(" (RoBERTa model)"),_co=l(),E_=a("li"),LK=a("strong"),uco=o("squeezebert"),bco=o(" \u2014 "),bS=a("a"),vco=o("SqueezeBertForMaskedLM"),Tco=o(" (SqueezeBERT model)"),Fco=l(),y_=a("li"),BK=a("strong"),Cco=o("t5"),Mco=o(" \u2014 "),vS=a("a"),Eco=o("T5ForConditionalGeneration"),yco=o(" (T5 model)"),wco=l(),w_=a("li"),xK=a("strong"),Aco=o("tapas"),Lco=o(" \u2014 "),TS=a("a"),Bco=o("TapasForMaskedLM"),xco=o(" (TAPAS model)"),kco=l(),A_=a("li"),kK=a("strong"),Rco=o("transfo-xl"),Sco=o(" \u2014 "),FS=a("a"),Pco=o("TransfoXLLMHeadModel"),$co=o(" (Transformer-XL model)"),Ico=l(),L_=a("li"),RK=a("strong"),jco=o("unispeech"),Nco=o(" \u2014 "),CS=a("a"),Dco=o("UniSpeechForPreTraining"),qco=o(" (UniSpeech model)"),Gco=l(),B_=a("li"),SK=a("strong"),Oco=o("unispeech-sat"),Xco=o(" \u2014 "),MS=a("a"),zco=o("UniSpeechSatForPreTraining"),Vco=o(" (UniSpeechSat model)"),Wco=l(),x_=a("li"),PK=a("strong"),Qco=o("visual_bert"),Hco=o(" \u2014 "),ES=a("a"),Uco=o("VisualBertForPreTraining"),Jco=o(" (VisualBert model)"),Yco=l(),k_=a("li"),$K=a("strong"),Kco=o("vit_mae"),Zco=o(" \u2014 "),yS=a("a"),efo=o("ViTMAEForPreTraining"),ofo=o(" (ViTMAE model)"),rfo=l(),R_=a("li"),IK=a("strong"),tfo=o("wav2vec2"),afo=o(" \u2014 "),wS=a("a"),nfo=o("Wav2Vec2ForPreTraining"),sfo=o(" (Wav2Vec2 model)"),lfo=l(),S_=a("li"),jK=a("strong"),ifo=o("xlm"),dfo=o(" \u2014 "),AS=a("a"),cfo=o("XLMWithLMHeadModel"),ffo=o(" (XLM model)"),mfo=l(),P_=a("li"),NK=a("strong"),gfo=o("xlm-roberta"),hfo=o(" \u2014 "),LS=a("a"),pfo=o("XLMRobertaForMaskedLM"),_fo=o(" (XLM-RoBERTa model)"),ufo=l(),$_=a("li"),DK=a("strong"),bfo=o("xlm-roberta-xl"),vfo=o(" \u2014 "),BS=a("a"),Tfo=o("XLMRobertaXLForMaskedLM"),Ffo=o(" (XLM-RoBERTa-XL model)"),Cfo=l(),I_=a("li"),qK=a("strong"),Mfo=o("xlnet"),Efo=o(" \u2014 "),xS=a("a"),yfo=o("XLNetLMHeadModel"),wfo=o(" (XLNet model)"),Afo=l(),j_=a("p"),Lfo=o("The model is set in evaluation mode by default using "),GK=a("code"),Bfo=o("model.eval()"),xfo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OK=a("code"),kfo=o("model.train()"),Rfo=l(),XK=a("p"),Sfo=o("Examples:"),Pfo=l(),f(JM.$$.fragment),LLe=l(),Wi=a("h2"),N_=a("a"),zK=a("span"),f(YM.$$.fragment),$fo=l(),VK=a("span"),Ifo=o("AutoModelForCausalLM"),BLe=l(),Qo=a("div"),f(KM.$$.fragment),jfo=l(),Qi=a("p"),Nfo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WK=a("code"),Dfo=o("from_pretrained()"),qfo=o("class method or the "),QK=a("code"),Gfo=o("from_config()"),Ofo=o(`class
method.`),Xfo=l(),ZM=a("p"),zfo=o("This class cannot be instantiated directly using "),HK=a("code"),Vfo=o("__init__()"),Wfo=o(" (throws an error)."),Qfo=l(),qr=a("div"),f(eE.$$.fragment),Hfo=l(),UK=a("p"),Ufo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Jfo=l(),Hi=a("p"),Yfo=o(`Note:
Loading a model from its configuration file does `),JK=a("strong"),Kfo=o("not"),Zfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=a("code"),emo=o("from_pretrained()"),omo=o("to load the model weights."),rmo=l(),KK=a("p"),tmo=o("Examples:"),amo=l(),f(oE.$$.fragment),nmo=l(),Re=a("div"),f(rE.$$.fragment),smo=l(),ZK=a("p"),lmo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),imo=l(),Ga=a("p"),dmo=o("The model class to instantiate is selected based on the "),eZ=a("code"),cmo=o("model_type"),fmo=o(` property of the config object (either
passed as an argument or loaded from `),oZ=a("code"),mmo=o("pretrained_model_name_or_path"),gmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rZ=a("code"),hmo=o("pretrained_model_name_or_path"),pmo=o(":"),_mo=l(),$=a("ul"),D_=a("li"),tZ=a("strong"),umo=o("bart"),bmo=o(" \u2014 "),kS=a("a"),vmo=o("BartForCausalLM"),Tmo=o(" (BART model)"),Fmo=l(),q_=a("li"),aZ=a("strong"),Cmo=o("bert"),Mmo=o(" \u2014 "),RS=a("a"),Emo=o("BertLMHeadModel"),ymo=o(" (BERT model)"),wmo=l(),G_=a("li"),nZ=a("strong"),Amo=o("bert-generation"),Lmo=o(" \u2014 "),SS=a("a"),Bmo=o("BertGenerationDecoder"),xmo=o(" (Bert Generation model)"),kmo=l(),O_=a("li"),sZ=a("strong"),Rmo=o("big_bird"),Smo=o(" \u2014 "),PS=a("a"),Pmo=o("BigBirdForCausalLM"),$mo=o(" (BigBird model)"),Imo=l(),X_=a("li"),lZ=a("strong"),jmo=o("bigbird_pegasus"),Nmo=o(" \u2014 "),$S=a("a"),Dmo=o("BigBirdPegasusForCausalLM"),qmo=o(" (BigBirdPegasus model)"),Gmo=l(),z_=a("li"),iZ=a("strong"),Omo=o("blenderbot"),Xmo=o(" \u2014 "),IS=a("a"),zmo=o("BlenderbotForCausalLM"),Vmo=o(" (Blenderbot model)"),Wmo=l(),V_=a("li"),dZ=a("strong"),Qmo=o("blenderbot-small"),Hmo=o(" \u2014 "),jS=a("a"),Umo=o("BlenderbotSmallForCausalLM"),Jmo=o(" (BlenderbotSmall model)"),Ymo=l(),W_=a("li"),cZ=a("strong"),Kmo=o("camembert"),Zmo=o(" \u2014 "),NS=a("a"),ego=o("CamembertForCausalLM"),ogo=o(" (CamemBERT model)"),rgo=l(),Q_=a("li"),fZ=a("strong"),tgo=o("ctrl"),ago=o(" \u2014 "),DS=a("a"),ngo=o("CTRLLMHeadModel"),sgo=o(" (CTRL model)"),lgo=l(),H_=a("li"),mZ=a("strong"),igo=o("electra"),dgo=o(" \u2014 "),qS=a("a"),cgo=o("ElectraForCausalLM"),fgo=o(" (ELECTRA model)"),mgo=l(),U_=a("li"),gZ=a("strong"),ggo=o("gpt2"),hgo=o(" \u2014 "),GS=a("a"),pgo=o("GPT2LMHeadModel"),_go=o(" (OpenAI GPT-2 model)"),ugo=l(),J_=a("li"),hZ=a("strong"),bgo=o("gpt_neo"),vgo=o(" \u2014 "),OS=a("a"),Tgo=o("GPTNeoForCausalLM"),Fgo=o(" (GPT Neo model)"),Cgo=l(),Y_=a("li"),pZ=a("strong"),Mgo=o("gptj"),Ego=o(" \u2014 "),XS=a("a"),ygo=o("GPTJForCausalLM"),wgo=o(" (GPT-J model)"),Ago=l(),K_=a("li"),_Z=a("strong"),Lgo=o("marian"),Bgo=o(" \u2014 "),zS=a("a"),xgo=o("MarianForCausalLM"),kgo=o(" (Marian model)"),Rgo=l(),Z_=a("li"),uZ=a("strong"),Sgo=o("mbart"),Pgo=o(" \u2014 "),VS=a("a"),$go=o("MBartForCausalLM"),Igo=o(" (mBART model)"),jgo=l(),eu=a("li"),bZ=a("strong"),Ngo=o("megatron-bert"),Dgo=o(" \u2014 "),WS=a("a"),qgo=o("MegatronBertForCausalLM"),Ggo=o(" (MegatronBert model)"),Ogo=l(),ou=a("li"),vZ=a("strong"),Xgo=o("openai-gpt"),zgo=o(" \u2014 "),QS=a("a"),Vgo=o("OpenAIGPTLMHeadModel"),Wgo=o(" (OpenAI GPT model)"),Qgo=l(),ru=a("li"),TZ=a("strong"),Hgo=o("pegasus"),Ugo=o(" \u2014 "),HS=a("a"),Jgo=o("PegasusForCausalLM"),Ygo=o(" (Pegasus model)"),Kgo=l(),tu=a("li"),FZ=a("strong"),Zgo=o("plbart"),eho=o(" \u2014 "),US=a("a"),oho=o("PLBartForCausalLM"),rho=o(" (PLBart model)"),tho=l(),au=a("li"),CZ=a("strong"),aho=o("prophetnet"),nho=o(" \u2014 "),JS=a("a"),sho=o("ProphetNetForCausalLM"),lho=o(" (ProphetNet model)"),iho=l(),nu=a("li"),MZ=a("strong"),dho=o("qdqbert"),cho=o(" \u2014 "),YS=a("a"),fho=o("QDQBertLMHeadModel"),mho=o(" (QDQBert model)"),gho=l(),su=a("li"),EZ=a("strong"),hho=o("reformer"),pho=o(" \u2014 "),KS=a("a"),_ho=o("ReformerModelWithLMHead"),uho=o(" (Reformer model)"),bho=l(),lu=a("li"),yZ=a("strong"),vho=o("rembert"),Tho=o(" \u2014 "),ZS=a("a"),Fho=o("RemBertForCausalLM"),Cho=o(" (RemBERT model)"),Mho=l(),iu=a("li"),wZ=a("strong"),Eho=o("roberta"),yho=o(" \u2014 "),eP=a("a"),who=o("RobertaForCausalLM"),Aho=o(" (RoBERTa model)"),Lho=l(),du=a("li"),AZ=a("strong"),Bho=o("roformer"),xho=o(" \u2014 "),oP=a("a"),kho=o("RoFormerForCausalLM"),Rho=o(" (RoFormer model)"),Sho=l(),cu=a("li"),LZ=a("strong"),Pho=o("speech_to_text_2"),$ho=o(" \u2014 "),rP=a("a"),Iho=o("Speech2Text2ForCausalLM"),jho=o(" (Speech2Text2 model)"),Nho=l(),fu=a("li"),BZ=a("strong"),Dho=o("transfo-xl"),qho=o(" \u2014 "),tP=a("a"),Gho=o("TransfoXLLMHeadModel"),Oho=o(" (Transformer-XL model)"),Xho=l(),mu=a("li"),xZ=a("strong"),zho=o("trocr"),Vho=o(" \u2014 "),aP=a("a"),Who=o("TrOCRForCausalLM"),Qho=o(" (TrOCR model)"),Hho=l(),gu=a("li"),kZ=a("strong"),Uho=o("xglm"),Jho=o(" \u2014 "),nP=a("a"),Yho=o("XGLMForCausalLM"),Kho=o(" (XGLM model)"),Zho=l(),hu=a("li"),RZ=a("strong"),epo=o("xlm"),opo=o(" \u2014 "),sP=a("a"),rpo=o("XLMWithLMHeadModel"),tpo=o(" (XLM model)"),apo=l(),pu=a("li"),SZ=a("strong"),npo=o("xlm-prophetnet"),spo=o(" \u2014 "),lP=a("a"),lpo=o("XLMProphetNetForCausalLM"),ipo=o(" (XLMProphetNet model)"),dpo=l(),_u=a("li"),PZ=a("strong"),cpo=o("xlm-roberta"),fpo=o(" \u2014 "),iP=a("a"),mpo=o("XLMRobertaForCausalLM"),gpo=o(" (XLM-RoBERTa model)"),hpo=l(),uu=a("li"),$Z=a("strong"),ppo=o("xlm-roberta-xl"),_po=o(" \u2014 "),dP=a("a"),upo=o("XLMRobertaXLForCausalLM"),bpo=o(" (XLM-RoBERTa-XL model)"),vpo=l(),bu=a("li"),IZ=a("strong"),Tpo=o("xlnet"),Fpo=o(" \u2014 "),cP=a("a"),Cpo=o("XLNetLMHeadModel"),Mpo=o(" (XLNet model)"),Epo=l(),vu=a("p"),ypo=o("The model is set in evaluation mode by default using "),jZ=a("code"),wpo=o("model.eval()"),Apo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),NZ=a("code"),Lpo=o("model.train()"),Bpo=l(),DZ=a("p"),xpo=o("Examples:"),kpo=l(),f(tE.$$.fragment),xLe=l(),Ui=a("h2"),Tu=a("a"),qZ=a("span"),f(aE.$$.fragment),Rpo=l(),GZ=a("span"),Spo=o("AutoModelForMaskedLM"),kLe=l(),Ho=a("div"),f(nE.$$.fragment),Ppo=l(),Ji=a("p"),$po=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OZ=a("code"),Ipo=o("from_pretrained()"),jpo=o("class method or the "),XZ=a("code"),Npo=o("from_config()"),Dpo=o(`class
method.`),qpo=l(),sE=a("p"),Gpo=o("This class cannot be instantiated directly using "),zZ=a("code"),Opo=o("__init__()"),Xpo=o(" (throws an error)."),zpo=l(),Gr=a("div"),f(lE.$$.fragment),Vpo=l(),VZ=a("p"),Wpo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Qpo=l(),Yi=a("p"),Hpo=o(`Note:
Loading a model from its configuration file does `),WZ=a("strong"),Upo=o("not"),Jpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=a("code"),Ypo=o("from_pretrained()"),Kpo=o("to load the model weights."),Zpo=l(),HZ=a("p"),e_o=o("Examples:"),o_o=l(),f(iE.$$.fragment),r_o=l(),Se=a("div"),f(dE.$$.fragment),t_o=l(),UZ=a("p"),a_o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),n_o=l(),Oa=a("p"),s_o=o("The model class to instantiate is selected based on the "),JZ=a("code"),l_o=o("model_type"),i_o=o(` property of the config object (either
passed as an argument or loaded from `),YZ=a("code"),d_o=o("pretrained_model_name_or_path"),c_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KZ=a("code"),f_o=o("pretrained_model_name_or_path"),m_o=o(":"),g_o=l(),I=a("ul"),Fu=a("li"),ZZ=a("strong"),h_o=o("albert"),p_o=o(" \u2014 "),fP=a("a"),__o=o("AlbertForMaskedLM"),u_o=o(" (ALBERT model)"),b_o=l(),Cu=a("li"),eee=a("strong"),v_o=o("bart"),T_o=o(" \u2014 "),mP=a("a"),F_o=o("BartForConditionalGeneration"),C_o=o(" (BART model)"),M_o=l(),Mu=a("li"),oee=a("strong"),E_o=o("bert"),y_o=o(" \u2014 "),gP=a("a"),w_o=o("BertForMaskedLM"),A_o=o(" (BERT model)"),L_o=l(),Eu=a("li"),ree=a("strong"),B_o=o("big_bird"),x_o=o(" \u2014 "),hP=a("a"),k_o=o("BigBirdForMaskedLM"),R_o=o(" (BigBird model)"),S_o=l(),yu=a("li"),tee=a("strong"),P_o=o("camembert"),$_o=o(" \u2014 "),pP=a("a"),I_o=o("CamembertForMaskedLM"),j_o=o(" (CamemBERT model)"),N_o=l(),wu=a("li"),aee=a("strong"),D_o=o("convbert"),q_o=o(" \u2014 "),_P=a("a"),G_o=o("ConvBertForMaskedLM"),O_o=o(" (ConvBERT model)"),X_o=l(),Au=a("li"),nee=a("strong"),z_o=o("deberta"),V_o=o(" \u2014 "),uP=a("a"),W_o=o("DebertaForMaskedLM"),Q_o=o(" (DeBERTa model)"),H_o=l(),Lu=a("li"),see=a("strong"),U_o=o("deberta-v2"),J_o=o(" \u2014 "),bP=a("a"),Y_o=o("DebertaV2ForMaskedLM"),K_o=o(" (DeBERTa-v2 model)"),Z_o=l(),Bu=a("li"),lee=a("strong"),euo=o("distilbert"),ouo=o(" \u2014 "),vP=a("a"),ruo=o("DistilBertForMaskedLM"),tuo=o(" (DistilBERT model)"),auo=l(),xu=a("li"),iee=a("strong"),nuo=o("electra"),suo=o(" \u2014 "),TP=a("a"),luo=o("ElectraForMaskedLM"),iuo=o(" (ELECTRA model)"),duo=l(),ku=a("li"),dee=a("strong"),cuo=o("flaubert"),fuo=o(" \u2014 "),FP=a("a"),muo=o("FlaubertWithLMHeadModel"),guo=o(" (FlauBERT model)"),huo=l(),Ru=a("li"),cee=a("strong"),puo=o("fnet"),_uo=o(" \u2014 "),CP=a("a"),uuo=o("FNetForMaskedLM"),buo=o(" (FNet model)"),vuo=l(),Su=a("li"),fee=a("strong"),Tuo=o("funnel"),Fuo=o(" \u2014 "),MP=a("a"),Cuo=o("FunnelForMaskedLM"),Muo=o(" (Funnel Transformer model)"),Euo=l(),Pu=a("li"),mee=a("strong"),yuo=o("ibert"),wuo=o(" \u2014 "),EP=a("a"),Auo=o("IBertForMaskedLM"),Luo=o(" (I-BERT model)"),Buo=l(),$u=a("li"),gee=a("strong"),xuo=o("layoutlm"),kuo=o(" \u2014 "),yP=a("a"),Ruo=o("LayoutLMForMaskedLM"),Suo=o(" (LayoutLM model)"),Puo=l(),Iu=a("li"),hee=a("strong"),$uo=o("longformer"),Iuo=o(" \u2014 "),wP=a("a"),juo=o("LongformerForMaskedLM"),Nuo=o(" (Longformer model)"),Duo=l(),ju=a("li"),pee=a("strong"),quo=o("mbart"),Guo=o(" \u2014 "),AP=a("a"),Ouo=o("MBartForConditionalGeneration"),Xuo=o(" (mBART model)"),zuo=l(),Nu=a("li"),_ee=a("strong"),Vuo=o("megatron-bert"),Wuo=o(" \u2014 "),LP=a("a"),Quo=o("MegatronBertForMaskedLM"),Huo=o(" (MegatronBert model)"),Uuo=l(),Du=a("li"),uee=a("strong"),Juo=o("mobilebert"),Yuo=o(" \u2014 "),BP=a("a"),Kuo=o("MobileBertForMaskedLM"),Zuo=o(" (MobileBERT model)"),e5o=l(),qu=a("li"),bee=a("strong"),o5o=o("mpnet"),r5o=o(" \u2014 "),xP=a("a"),t5o=o("MPNetForMaskedLM"),a5o=o(" (MPNet model)"),n5o=l(),Gu=a("li"),vee=a("strong"),s5o=o("nystromformer"),l5o=o(" \u2014 "),kP=a("a"),i5o=o("NystromformerForMaskedLM"),d5o=o(" (Nystromformer model)"),c5o=l(),Ou=a("li"),Tee=a("strong"),f5o=o("perceiver"),m5o=o(" \u2014 "),RP=a("a"),g5o=o("PerceiverForMaskedLM"),h5o=o(" (Perceiver model)"),p5o=l(),Xu=a("li"),Fee=a("strong"),_5o=o("qdqbert"),u5o=o(" \u2014 "),SP=a("a"),b5o=o("QDQBertForMaskedLM"),v5o=o(" (QDQBert model)"),T5o=l(),zu=a("li"),Cee=a("strong"),F5o=o("reformer"),C5o=o(" \u2014 "),PP=a("a"),M5o=o("ReformerForMaskedLM"),E5o=o(" (Reformer model)"),y5o=l(),Vu=a("li"),Mee=a("strong"),w5o=o("rembert"),A5o=o(" \u2014 "),$P=a("a"),L5o=o("RemBertForMaskedLM"),B5o=o(" (RemBERT model)"),x5o=l(),Wu=a("li"),Eee=a("strong"),k5o=o("roberta"),R5o=o(" \u2014 "),IP=a("a"),S5o=o("RobertaForMaskedLM"),P5o=o(" (RoBERTa model)"),$5o=l(),Qu=a("li"),yee=a("strong"),I5o=o("roformer"),j5o=o(" \u2014 "),jP=a("a"),N5o=o("RoFormerForMaskedLM"),D5o=o(" (RoFormer model)"),q5o=l(),Hu=a("li"),wee=a("strong"),G5o=o("squeezebert"),O5o=o(" \u2014 "),NP=a("a"),X5o=o("SqueezeBertForMaskedLM"),z5o=o(" (SqueezeBERT model)"),V5o=l(),Uu=a("li"),Aee=a("strong"),W5o=o("tapas"),Q5o=o(" \u2014 "),DP=a("a"),H5o=o("TapasForMaskedLM"),U5o=o(" (TAPAS model)"),J5o=l(),Ju=a("li"),Lee=a("strong"),Y5o=o("wav2vec2"),K5o=o(" \u2014 "),Bee=a("code"),Z5o=o("Wav2Vec2ForMaskedLM"),e1o=o("(Wav2Vec2 model)"),o1o=l(),Yu=a("li"),xee=a("strong"),r1o=o("xlm"),t1o=o(" \u2014 "),qP=a("a"),a1o=o("XLMWithLMHeadModel"),n1o=o(" (XLM model)"),s1o=l(),Ku=a("li"),kee=a("strong"),l1o=o("xlm-roberta"),i1o=o(" \u2014 "),GP=a("a"),d1o=o("XLMRobertaForMaskedLM"),c1o=o(" (XLM-RoBERTa model)"),f1o=l(),Zu=a("li"),Ree=a("strong"),m1o=o("xlm-roberta-xl"),g1o=o(" \u2014 "),OP=a("a"),h1o=o("XLMRobertaXLForMaskedLM"),p1o=o(" (XLM-RoBERTa-XL model)"),_1o=l(),e5=a("li"),See=a("strong"),u1o=o("yoso"),b1o=o(" \u2014 "),XP=a("a"),v1o=o("YosoForMaskedLM"),T1o=o(" (YOSO model)"),F1o=l(),o5=a("p"),C1o=o("The model is set in evaluation mode by default using "),Pee=a("code"),M1o=o("model.eval()"),E1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ee=a("code"),y1o=o("model.train()"),w1o=l(),Iee=a("p"),A1o=o("Examples:"),L1o=l(),f(cE.$$.fragment),RLe=l(),Ki=a("h2"),r5=a("a"),jee=a("span"),f(fE.$$.fragment),B1o=l(),Nee=a("span"),x1o=o("AutoModelForSeq2SeqLM"),SLe=l(),Uo=a("div"),f(mE.$$.fragment),k1o=l(),Zi=a("p"),R1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Dee=a("code"),S1o=o("from_pretrained()"),P1o=o("class method or the "),qee=a("code"),$1o=o("from_config()"),I1o=o(`class
method.`),j1o=l(),gE=a("p"),N1o=o("This class cannot be instantiated directly using "),Gee=a("code"),D1o=o("__init__()"),q1o=o(" (throws an error)."),G1o=l(),Or=a("div"),f(hE.$$.fragment),O1o=l(),Oee=a("p"),X1o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),z1o=l(),ed=a("p"),V1o=o(`Note:
Loading a model from its configuration file does `),Xee=a("strong"),W1o=o("not"),Q1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=a("code"),H1o=o("from_pretrained()"),U1o=o("to load the model weights."),J1o=l(),Vee=a("p"),Y1o=o("Examples:"),K1o=l(),f(pE.$$.fragment),Z1o=l(),Pe=a("div"),f(_E.$$.fragment),ebo=l(),Wee=a("p"),obo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rbo=l(),Xa=a("p"),tbo=o("The model class to instantiate is selected based on the "),Qee=a("code"),abo=o("model_type"),nbo=o(` property of the config object (either
passed as an argument or loaded from `),Hee=a("code"),sbo=o("pretrained_model_name_or_path"),lbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uee=a("code"),ibo=o("pretrained_model_name_or_path"),dbo=o(":"),cbo=l(),ae=a("ul"),t5=a("li"),Jee=a("strong"),fbo=o("bart"),mbo=o(" \u2014 "),zP=a("a"),gbo=o("BartForConditionalGeneration"),hbo=o(" (BART model)"),pbo=l(),a5=a("li"),Yee=a("strong"),_bo=o("bigbird_pegasus"),ubo=o(" \u2014 "),VP=a("a"),bbo=o("BigBirdPegasusForConditionalGeneration"),vbo=o(" (BigBirdPegasus model)"),Tbo=l(),n5=a("li"),Kee=a("strong"),Fbo=o("blenderbot"),Cbo=o(" \u2014 "),WP=a("a"),Mbo=o("BlenderbotForConditionalGeneration"),Ebo=o(" (Blenderbot model)"),ybo=l(),s5=a("li"),Zee=a("strong"),wbo=o("blenderbot-small"),Abo=o(" \u2014 "),QP=a("a"),Lbo=o("BlenderbotSmallForConditionalGeneration"),Bbo=o(" (BlenderbotSmall model)"),xbo=l(),l5=a("li"),eoe=a("strong"),kbo=o("encoder-decoder"),Rbo=o(" \u2014 "),HP=a("a"),Sbo=o("EncoderDecoderModel"),Pbo=o(" (Encoder decoder model)"),$bo=l(),i5=a("li"),ooe=a("strong"),Ibo=o("fsmt"),jbo=o(" \u2014 "),UP=a("a"),Nbo=o("FSMTForConditionalGeneration"),Dbo=o(" (FairSeq Machine-Translation model)"),qbo=l(),d5=a("li"),roe=a("strong"),Gbo=o("led"),Obo=o(" \u2014 "),JP=a("a"),Xbo=o("LEDForConditionalGeneration"),zbo=o(" (LED model)"),Vbo=l(),c5=a("li"),toe=a("strong"),Wbo=o("m2m_100"),Qbo=o(" \u2014 "),YP=a("a"),Hbo=o("M2M100ForConditionalGeneration"),Ubo=o(" (M2M100 model)"),Jbo=l(),f5=a("li"),aoe=a("strong"),Ybo=o("marian"),Kbo=o(" \u2014 "),KP=a("a"),Zbo=o("MarianMTModel"),e2o=o(" (Marian model)"),o2o=l(),m5=a("li"),noe=a("strong"),r2o=o("mbart"),t2o=o(" \u2014 "),ZP=a("a"),a2o=o("MBartForConditionalGeneration"),n2o=o(" (mBART model)"),s2o=l(),g5=a("li"),soe=a("strong"),l2o=o("mt5"),i2o=o(" \u2014 "),e$=a("a"),d2o=o("MT5ForConditionalGeneration"),c2o=o(" (mT5 model)"),f2o=l(),h5=a("li"),loe=a("strong"),m2o=o("pegasus"),g2o=o(" \u2014 "),o$=a("a"),h2o=o("PegasusForConditionalGeneration"),p2o=o(" (Pegasus model)"),_2o=l(),p5=a("li"),ioe=a("strong"),u2o=o("plbart"),b2o=o(" \u2014 "),r$=a("a"),v2o=o("PLBartForConditionalGeneration"),T2o=o(" (PLBart model)"),F2o=l(),_5=a("li"),doe=a("strong"),C2o=o("prophetnet"),M2o=o(" \u2014 "),t$=a("a"),E2o=o("ProphetNetForConditionalGeneration"),y2o=o(" (ProphetNet model)"),w2o=l(),u5=a("li"),coe=a("strong"),A2o=o("t5"),L2o=o(" \u2014 "),a$=a("a"),B2o=o("T5ForConditionalGeneration"),x2o=o(" (T5 model)"),k2o=l(),b5=a("li"),foe=a("strong"),R2o=o("xlm-prophetnet"),S2o=o(" \u2014 "),n$=a("a"),P2o=o("XLMProphetNetForConditionalGeneration"),$2o=o(" (XLMProphetNet model)"),I2o=l(),v5=a("p"),j2o=o("The model is set in evaluation mode by default using "),moe=a("code"),N2o=o("model.eval()"),D2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),goe=a("code"),q2o=o("model.train()"),G2o=l(),hoe=a("p"),O2o=o("Examples:"),X2o=l(),f(uE.$$.fragment),PLe=l(),od=a("h2"),T5=a("a"),poe=a("span"),f(bE.$$.fragment),z2o=l(),_oe=a("span"),V2o=o("AutoModelForSequenceClassification"),$Le=l(),Jo=a("div"),f(vE.$$.fragment),W2o=l(),rd=a("p"),Q2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uoe=a("code"),H2o=o("from_pretrained()"),U2o=o("class method or the "),boe=a("code"),J2o=o("from_config()"),Y2o=o(`class
method.`),K2o=l(),TE=a("p"),Z2o=o("This class cannot be instantiated directly using "),voe=a("code"),evo=o("__init__()"),ovo=o(" (throws an error)."),rvo=l(),Xr=a("div"),f(FE.$$.fragment),tvo=l(),Toe=a("p"),avo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nvo=l(),td=a("p"),svo=o(`Note:
Loading a model from its configuration file does `),Foe=a("strong"),lvo=o("not"),ivo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Coe=a("code"),dvo=o("from_pretrained()"),cvo=o("to load the model weights."),fvo=l(),Moe=a("p"),mvo=o("Examples:"),gvo=l(),f(CE.$$.fragment),hvo=l(),$e=a("div"),f(ME.$$.fragment),pvo=l(),Eoe=a("p"),_vo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uvo=l(),za=a("p"),bvo=o("The model class to instantiate is selected based on the "),yoe=a("code"),vvo=o("model_type"),Tvo=o(` property of the config object (either
passed as an argument or loaded from `),woe=a("code"),Fvo=o("pretrained_model_name_or_path"),Cvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aoe=a("code"),Mvo=o("pretrained_model_name_or_path"),Evo=o(":"),yvo=l(),A=a("ul"),F5=a("li"),Loe=a("strong"),wvo=o("albert"),Avo=o(" \u2014 "),s$=a("a"),Lvo=o("AlbertForSequenceClassification"),Bvo=o(" (ALBERT model)"),xvo=l(),C5=a("li"),Boe=a("strong"),kvo=o("bart"),Rvo=o(" \u2014 "),l$=a("a"),Svo=o("BartForSequenceClassification"),Pvo=o(" (BART model)"),$vo=l(),M5=a("li"),xoe=a("strong"),Ivo=o("bert"),jvo=o(" \u2014 "),i$=a("a"),Nvo=o("BertForSequenceClassification"),Dvo=o(" (BERT model)"),qvo=l(),E5=a("li"),koe=a("strong"),Gvo=o("big_bird"),Ovo=o(" \u2014 "),d$=a("a"),Xvo=o("BigBirdForSequenceClassification"),zvo=o(" (BigBird model)"),Vvo=l(),y5=a("li"),Roe=a("strong"),Wvo=o("bigbird_pegasus"),Qvo=o(" \u2014 "),c$=a("a"),Hvo=o("BigBirdPegasusForSequenceClassification"),Uvo=o(" (BigBirdPegasus model)"),Jvo=l(),w5=a("li"),Soe=a("strong"),Yvo=o("camembert"),Kvo=o(" \u2014 "),f$=a("a"),Zvo=o("CamembertForSequenceClassification"),eTo=o(" (CamemBERT model)"),oTo=l(),A5=a("li"),Poe=a("strong"),rTo=o("canine"),tTo=o(" \u2014 "),m$=a("a"),aTo=o("CanineForSequenceClassification"),nTo=o(" (Canine model)"),sTo=l(),L5=a("li"),$oe=a("strong"),lTo=o("convbert"),iTo=o(" \u2014 "),g$=a("a"),dTo=o("ConvBertForSequenceClassification"),cTo=o(" (ConvBERT model)"),fTo=l(),B5=a("li"),Ioe=a("strong"),mTo=o("ctrl"),gTo=o(" \u2014 "),h$=a("a"),hTo=o("CTRLForSequenceClassification"),pTo=o(" (CTRL model)"),_To=l(),x5=a("li"),joe=a("strong"),uTo=o("deberta"),bTo=o(" \u2014 "),p$=a("a"),vTo=o("DebertaForSequenceClassification"),TTo=o(" (DeBERTa model)"),FTo=l(),k5=a("li"),Noe=a("strong"),CTo=o("deberta-v2"),MTo=o(" \u2014 "),_$=a("a"),ETo=o("DebertaV2ForSequenceClassification"),yTo=o(" (DeBERTa-v2 model)"),wTo=l(),R5=a("li"),Doe=a("strong"),ATo=o("distilbert"),LTo=o(" \u2014 "),u$=a("a"),BTo=o("DistilBertForSequenceClassification"),xTo=o(" (DistilBERT model)"),kTo=l(),S5=a("li"),qoe=a("strong"),RTo=o("electra"),STo=o(" \u2014 "),b$=a("a"),PTo=o("ElectraForSequenceClassification"),$To=o(" (ELECTRA model)"),ITo=l(),P5=a("li"),Goe=a("strong"),jTo=o("flaubert"),NTo=o(" \u2014 "),v$=a("a"),DTo=o("FlaubertForSequenceClassification"),qTo=o(" (FlauBERT model)"),GTo=l(),$5=a("li"),Ooe=a("strong"),OTo=o("fnet"),XTo=o(" \u2014 "),T$=a("a"),zTo=o("FNetForSequenceClassification"),VTo=o(" (FNet model)"),WTo=l(),I5=a("li"),Xoe=a("strong"),QTo=o("funnel"),HTo=o(" \u2014 "),F$=a("a"),UTo=o("FunnelForSequenceClassification"),JTo=o(" (Funnel Transformer model)"),YTo=l(),j5=a("li"),zoe=a("strong"),KTo=o("gpt2"),ZTo=o(" \u2014 "),C$=a("a"),e8o=o("GPT2ForSequenceClassification"),o8o=o(" (OpenAI GPT-2 model)"),r8o=l(),N5=a("li"),Voe=a("strong"),t8o=o("gpt_neo"),a8o=o(" \u2014 "),M$=a("a"),n8o=o("GPTNeoForSequenceClassification"),s8o=o(" (GPT Neo model)"),l8o=l(),D5=a("li"),Woe=a("strong"),i8o=o("gptj"),d8o=o(" \u2014 "),E$=a("a"),c8o=o("GPTJForSequenceClassification"),f8o=o(" (GPT-J model)"),m8o=l(),q5=a("li"),Qoe=a("strong"),g8o=o("ibert"),h8o=o(" \u2014 "),y$=a("a"),p8o=o("IBertForSequenceClassification"),_8o=o(" (I-BERT model)"),u8o=l(),G5=a("li"),Hoe=a("strong"),b8o=o("layoutlm"),v8o=o(" \u2014 "),w$=a("a"),T8o=o("LayoutLMForSequenceClassification"),F8o=o(" (LayoutLM model)"),C8o=l(),O5=a("li"),Uoe=a("strong"),M8o=o("layoutlmv2"),E8o=o(" \u2014 "),A$=a("a"),y8o=o("LayoutLMv2ForSequenceClassification"),w8o=o(" (LayoutLMv2 model)"),A8o=l(),X5=a("li"),Joe=a("strong"),L8o=o("led"),B8o=o(" \u2014 "),L$=a("a"),x8o=o("LEDForSequenceClassification"),k8o=o(" (LED model)"),R8o=l(),z5=a("li"),Yoe=a("strong"),S8o=o("longformer"),P8o=o(" \u2014 "),B$=a("a"),$8o=o("LongformerForSequenceClassification"),I8o=o(" (Longformer model)"),j8o=l(),V5=a("li"),Koe=a("strong"),N8o=o("mbart"),D8o=o(" \u2014 "),x$=a("a"),q8o=o("MBartForSequenceClassification"),G8o=o(" (mBART model)"),O8o=l(),W5=a("li"),Zoe=a("strong"),X8o=o("megatron-bert"),z8o=o(" \u2014 "),k$=a("a"),V8o=o("MegatronBertForSequenceClassification"),W8o=o(" (MegatronBert model)"),Q8o=l(),Q5=a("li"),ere=a("strong"),H8o=o("mobilebert"),U8o=o(" \u2014 "),R$=a("a"),J8o=o("MobileBertForSequenceClassification"),Y8o=o(" (MobileBERT model)"),K8o=l(),H5=a("li"),ore=a("strong"),Z8o=o("mpnet"),eFo=o(" \u2014 "),S$=a("a"),oFo=o("MPNetForSequenceClassification"),rFo=o(" (MPNet model)"),tFo=l(),U5=a("li"),rre=a("strong"),aFo=o("nystromformer"),nFo=o(" \u2014 "),P$=a("a"),sFo=o("NystromformerForSequenceClassification"),lFo=o(" (Nystromformer model)"),iFo=l(),J5=a("li"),tre=a("strong"),dFo=o("openai-gpt"),cFo=o(" \u2014 "),$$=a("a"),fFo=o("OpenAIGPTForSequenceClassification"),mFo=o(" (OpenAI GPT model)"),gFo=l(),Y5=a("li"),are=a("strong"),hFo=o("perceiver"),pFo=o(" \u2014 "),I$=a("a"),_Fo=o("PerceiverForSequenceClassification"),uFo=o(" (Perceiver model)"),bFo=l(),K5=a("li"),nre=a("strong"),vFo=o("plbart"),TFo=o(" \u2014 "),j$=a("a"),FFo=o("PLBartForSequenceClassification"),CFo=o(" (PLBart model)"),MFo=l(),Z5=a("li"),sre=a("strong"),EFo=o("qdqbert"),yFo=o(" \u2014 "),N$=a("a"),wFo=o("QDQBertForSequenceClassification"),AFo=o(" (QDQBert model)"),LFo=l(),e1=a("li"),lre=a("strong"),BFo=o("reformer"),xFo=o(" \u2014 "),D$=a("a"),kFo=o("ReformerForSequenceClassification"),RFo=o(" (Reformer model)"),SFo=l(),o1=a("li"),ire=a("strong"),PFo=o("rembert"),$Fo=o(" \u2014 "),q$=a("a"),IFo=o("RemBertForSequenceClassification"),jFo=o(" (RemBERT model)"),NFo=l(),r1=a("li"),dre=a("strong"),DFo=o("roberta"),qFo=o(" \u2014 "),G$=a("a"),GFo=o("RobertaForSequenceClassification"),OFo=o(" (RoBERTa model)"),XFo=l(),t1=a("li"),cre=a("strong"),zFo=o("roformer"),VFo=o(" \u2014 "),O$=a("a"),WFo=o("RoFormerForSequenceClassification"),QFo=o(" (RoFormer model)"),HFo=l(),a1=a("li"),fre=a("strong"),UFo=o("squeezebert"),JFo=o(" \u2014 "),X$=a("a"),YFo=o("SqueezeBertForSequenceClassification"),KFo=o(" (SqueezeBERT model)"),ZFo=l(),n1=a("li"),mre=a("strong"),e9o=o("tapas"),o9o=o(" \u2014 "),z$=a("a"),r9o=o("TapasForSequenceClassification"),t9o=o(" (TAPAS model)"),a9o=l(),s1=a("li"),gre=a("strong"),n9o=o("transfo-xl"),s9o=o(" \u2014 "),V$=a("a"),l9o=o("TransfoXLForSequenceClassification"),i9o=o(" (Transformer-XL model)"),d9o=l(),l1=a("li"),hre=a("strong"),c9o=o("xlm"),f9o=o(" \u2014 "),W$=a("a"),m9o=o("XLMForSequenceClassification"),g9o=o(" (XLM model)"),h9o=l(),i1=a("li"),pre=a("strong"),p9o=o("xlm-roberta"),_9o=o(" \u2014 "),Q$=a("a"),u9o=o("XLMRobertaForSequenceClassification"),b9o=o(" (XLM-RoBERTa model)"),v9o=l(),d1=a("li"),_re=a("strong"),T9o=o("xlm-roberta-xl"),F9o=o(" \u2014 "),H$=a("a"),C9o=o("XLMRobertaXLForSequenceClassification"),M9o=o(" (XLM-RoBERTa-XL model)"),E9o=l(),c1=a("li"),ure=a("strong"),y9o=o("xlnet"),w9o=o(" \u2014 "),U$=a("a"),A9o=o("XLNetForSequenceClassification"),L9o=o(" (XLNet model)"),B9o=l(),f1=a("li"),bre=a("strong"),x9o=o("yoso"),k9o=o(" \u2014 "),J$=a("a"),R9o=o("YosoForSequenceClassification"),S9o=o(" (YOSO model)"),P9o=l(),m1=a("p"),$9o=o("The model is set in evaluation mode by default using "),vre=a("code"),I9o=o("model.eval()"),j9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tre=a("code"),N9o=o("model.train()"),D9o=l(),Fre=a("p"),q9o=o("Examples:"),G9o=l(),f(EE.$$.fragment),ILe=l(),ad=a("h2"),g1=a("a"),Cre=a("span"),f(yE.$$.fragment),O9o=l(),Mre=a("span"),X9o=o("AutoModelForMultipleChoice"),jLe=l(),Yo=a("div"),f(wE.$$.fragment),z9o=l(),nd=a("p"),V9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Ere=a("code"),W9o=o("from_pretrained()"),Q9o=o("class method or the "),yre=a("code"),H9o=o("from_config()"),U9o=o(`class
method.`),J9o=l(),AE=a("p"),Y9o=o("This class cannot be instantiated directly using "),wre=a("code"),K9o=o("__init__()"),Z9o=o(" (throws an error)."),eCo=l(),zr=a("div"),f(LE.$$.fragment),oCo=l(),Are=a("p"),rCo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tCo=l(),sd=a("p"),aCo=o(`Note:
Loading a model from its configuration file does `),Lre=a("strong"),nCo=o("not"),sCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=a("code"),lCo=o("from_pretrained()"),iCo=o("to load the model weights."),dCo=l(),xre=a("p"),cCo=o("Examples:"),fCo=l(),f(BE.$$.fragment),mCo=l(),Ie=a("div"),f(xE.$$.fragment),gCo=l(),kre=a("p"),hCo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pCo=l(),Va=a("p"),_Co=o("The model class to instantiate is selected based on the "),Rre=a("code"),uCo=o("model_type"),bCo=o(` property of the config object (either
passed as an argument or loaded from `),Sre=a("code"),vCo=o("pretrained_model_name_or_path"),TCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pre=a("code"),FCo=o("pretrained_model_name_or_path"),CCo=o(":"),MCo=l(),G=a("ul"),h1=a("li"),$re=a("strong"),ECo=o("albert"),yCo=o(" \u2014 "),Y$=a("a"),wCo=o("AlbertForMultipleChoice"),ACo=o(" (ALBERT model)"),LCo=l(),p1=a("li"),Ire=a("strong"),BCo=o("bert"),xCo=o(" \u2014 "),K$=a("a"),kCo=o("BertForMultipleChoice"),RCo=o(" (BERT model)"),SCo=l(),_1=a("li"),jre=a("strong"),PCo=o("big_bird"),$Co=o(" \u2014 "),Z$=a("a"),ICo=o("BigBirdForMultipleChoice"),jCo=o(" (BigBird model)"),NCo=l(),u1=a("li"),Nre=a("strong"),DCo=o("camembert"),qCo=o(" \u2014 "),eI=a("a"),GCo=o("CamembertForMultipleChoice"),OCo=o(" (CamemBERT model)"),XCo=l(),b1=a("li"),Dre=a("strong"),zCo=o("canine"),VCo=o(" \u2014 "),oI=a("a"),WCo=o("CanineForMultipleChoice"),QCo=o(" (Canine model)"),HCo=l(),v1=a("li"),qre=a("strong"),UCo=o("convbert"),JCo=o(" \u2014 "),rI=a("a"),YCo=o("ConvBertForMultipleChoice"),KCo=o(" (ConvBERT model)"),ZCo=l(),T1=a("li"),Gre=a("strong"),e4o=o("distilbert"),o4o=o(" \u2014 "),tI=a("a"),r4o=o("DistilBertForMultipleChoice"),t4o=o(" (DistilBERT model)"),a4o=l(),F1=a("li"),Ore=a("strong"),n4o=o("electra"),s4o=o(" \u2014 "),aI=a("a"),l4o=o("ElectraForMultipleChoice"),i4o=o(" (ELECTRA model)"),d4o=l(),C1=a("li"),Xre=a("strong"),c4o=o("flaubert"),f4o=o(" \u2014 "),nI=a("a"),m4o=o("FlaubertForMultipleChoice"),g4o=o(" (FlauBERT model)"),h4o=l(),M1=a("li"),zre=a("strong"),p4o=o("fnet"),_4o=o(" \u2014 "),sI=a("a"),u4o=o("FNetForMultipleChoice"),b4o=o(" (FNet model)"),v4o=l(),E1=a("li"),Vre=a("strong"),T4o=o("funnel"),F4o=o(" \u2014 "),lI=a("a"),C4o=o("FunnelForMultipleChoice"),M4o=o(" (Funnel Transformer model)"),E4o=l(),y1=a("li"),Wre=a("strong"),y4o=o("ibert"),w4o=o(" \u2014 "),iI=a("a"),A4o=o("IBertForMultipleChoice"),L4o=o(" (I-BERT model)"),B4o=l(),w1=a("li"),Qre=a("strong"),x4o=o("longformer"),k4o=o(" \u2014 "),dI=a("a"),R4o=o("LongformerForMultipleChoice"),S4o=o(" (Longformer model)"),P4o=l(),A1=a("li"),Hre=a("strong"),$4o=o("megatron-bert"),I4o=o(" \u2014 "),cI=a("a"),j4o=o("MegatronBertForMultipleChoice"),N4o=o(" (MegatronBert model)"),D4o=l(),L1=a("li"),Ure=a("strong"),q4o=o("mobilebert"),G4o=o(" \u2014 "),fI=a("a"),O4o=o("MobileBertForMultipleChoice"),X4o=o(" (MobileBERT model)"),z4o=l(),B1=a("li"),Jre=a("strong"),V4o=o("mpnet"),W4o=o(" \u2014 "),mI=a("a"),Q4o=o("MPNetForMultipleChoice"),H4o=o(" (MPNet model)"),U4o=l(),x1=a("li"),Yre=a("strong"),J4o=o("nystromformer"),Y4o=o(" \u2014 "),gI=a("a"),K4o=o("NystromformerForMultipleChoice"),Z4o=o(" (Nystromformer model)"),eMo=l(),k1=a("li"),Kre=a("strong"),oMo=o("qdqbert"),rMo=o(" \u2014 "),hI=a("a"),tMo=o("QDQBertForMultipleChoice"),aMo=o(" (QDQBert model)"),nMo=l(),R1=a("li"),Zre=a("strong"),sMo=o("rembert"),lMo=o(" \u2014 "),pI=a("a"),iMo=o("RemBertForMultipleChoice"),dMo=o(" (RemBERT model)"),cMo=l(),S1=a("li"),ete=a("strong"),fMo=o("roberta"),mMo=o(" \u2014 "),_I=a("a"),gMo=o("RobertaForMultipleChoice"),hMo=o(" (RoBERTa model)"),pMo=l(),P1=a("li"),ote=a("strong"),_Mo=o("roformer"),uMo=o(" \u2014 "),uI=a("a"),bMo=o("RoFormerForMultipleChoice"),vMo=o(" (RoFormer model)"),TMo=l(),$1=a("li"),rte=a("strong"),FMo=o("squeezebert"),CMo=o(" \u2014 "),bI=a("a"),MMo=o("SqueezeBertForMultipleChoice"),EMo=o(" (SqueezeBERT model)"),yMo=l(),I1=a("li"),tte=a("strong"),wMo=o("xlm"),AMo=o(" \u2014 "),vI=a("a"),LMo=o("XLMForMultipleChoice"),BMo=o(" (XLM model)"),xMo=l(),j1=a("li"),ate=a("strong"),kMo=o("xlm-roberta"),RMo=o(" \u2014 "),TI=a("a"),SMo=o("XLMRobertaForMultipleChoice"),PMo=o(" (XLM-RoBERTa model)"),$Mo=l(),N1=a("li"),nte=a("strong"),IMo=o("xlm-roberta-xl"),jMo=o(" \u2014 "),FI=a("a"),NMo=o("XLMRobertaXLForMultipleChoice"),DMo=o(" (XLM-RoBERTa-XL model)"),qMo=l(),D1=a("li"),ste=a("strong"),GMo=o("xlnet"),OMo=o(" \u2014 "),CI=a("a"),XMo=o("XLNetForMultipleChoice"),zMo=o(" (XLNet model)"),VMo=l(),q1=a("li"),lte=a("strong"),WMo=o("yoso"),QMo=o(" \u2014 "),MI=a("a"),HMo=o("YosoForMultipleChoice"),UMo=o(" (YOSO model)"),JMo=l(),G1=a("p"),YMo=o("The model is set in evaluation mode by default using "),ite=a("code"),KMo=o("model.eval()"),ZMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dte=a("code"),eEo=o("model.train()"),oEo=l(),cte=a("p"),rEo=o("Examples:"),tEo=l(),f(kE.$$.fragment),NLe=l(),ld=a("h2"),O1=a("a"),fte=a("span"),f(RE.$$.fragment),aEo=l(),mte=a("span"),nEo=o("AutoModelForNextSentencePrediction"),DLe=l(),Ko=a("div"),f(SE.$$.fragment),sEo=l(),id=a("p"),lEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gte=a("code"),iEo=o("from_pretrained()"),dEo=o("class method or the "),hte=a("code"),cEo=o("from_config()"),fEo=o(`class
method.`),mEo=l(),PE=a("p"),gEo=o("This class cannot be instantiated directly using "),pte=a("code"),hEo=o("__init__()"),pEo=o(" (throws an error)."),_Eo=l(),Vr=a("div"),f($E.$$.fragment),uEo=l(),_te=a("p"),bEo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vEo=l(),dd=a("p"),TEo=o(`Note:
Loading a model from its configuration file does `),ute=a("strong"),FEo=o("not"),CEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bte=a("code"),MEo=o("from_pretrained()"),EEo=o("to load the model weights."),yEo=l(),vte=a("p"),wEo=o("Examples:"),AEo=l(),f(IE.$$.fragment),LEo=l(),je=a("div"),f(jE.$$.fragment),BEo=l(),Tte=a("p"),xEo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kEo=l(),Wa=a("p"),REo=o("The model class to instantiate is selected based on the "),Fte=a("code"),SEo=o("model_type"),PEo=o(` property of the config object (either
passed as an argument or loaded from `),Cte=a("code"),$Eo=o("pretrained_model_name_or_path"),IEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mte=a("code"),jEo=o("pretrained_model_name_or_path"),NEo=o(":"),DEo=l(),na=a("ul"),X1=a("li"),Ete=a("strong"),qEo=o("bert"),GEo=o(" \u2014 "),EI=a("a"),OEo=o("BertForNextSentencePrediction"),XEo=o(" (BERT model)"),zEo=l(),z1=a("li"),yte=a("strong"),VEo=o("fnet"),WEo=o(" \u2014 "),yI=a("a"),QEo=o("FNetForNextSentencePrediction"),HEo=o(" (FNet model)"),UEo=l(),V1=a("li"),wte=a("strong"),JEo=o("megatron-bert"),YEo=o(" \u2014 "),wI=a("a"),KEo=o("MegatronBertForNextSentencePrediction"),ZEo=o(" (MegatronBert model)"),e3o=l(),W1=a("li"),Ate=a("strong"),o3o=o("mobilebert"),r3o=o(" \u2014 "),AI=a("a"),t3o=o("MobileBertForNextSentencePrediction"),a3o=o(" (MobileBERT model)"),n3o=l(),Q1=a("li"),Lte=a("strong"),s3o=o("qdqbert"),l3o=o(" \u2014 "),LI=a("a"),i3o=o("QDQBertForNextSentencePrediction"),d3o=o(" (QDQBert model)"),c3o=l(),H1=a("p"),f3o=o("The model is set in evaluation mode by default using "),Bte=a("code"),m3o=o("model.eval()"),g3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xte=a("code"),h3o=o("model.train()"),p3o=l(),kte=a("p"),_3o=o("Examples:"),u3o=l(),f(NE.$$.fragment),qLe=l(),cd=a("h2"),U1=a("a"),Rte=a("span"),f(DE.$$.fragment),b3o=l(),Ste=a("span"),v3o=o("AutoModelForTokenClassification"),GLe=l(),Zo=a("div"),f(qE.$$.fragment),T3o=l(),fd=a("p"),F3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Pte=a("code"),C3o=o("from_pretrained()"),M3o=o("class method or the "),$te=a("code"),E3o=o("from_config()"),y3o=o(`class
method.`),w3o=l(),GE=a("p"),A3o=o("This class cannot be instantiated directly using "),Ite=a("code"),L3o=o("__init__()"),B3o=o(" (throws an error)."),x3o=l(),Wr=a("div"),f(OE.$$.fragment),k3o=l(),jte=a("p"),R3o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),S3o=l(),md=a("p"),P3o=o(`Note:
Loading a model from its configuration file does `),Nte=a("strong"),$3o=o("not"),I3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dte=a("code"),j3o=o("from_pretrained()"),N3o=o("to load the model weights."),D3o=l(),qte=a("p"),q3o=o("Examples:"),G3o=l(),f(XE.$$.fragment),O3o=l(),Ne=a("div"),f(zE.$$.fragment),X3o=l(),Gte=a("p"),z3o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),V3o=l(),Qa=a("p"),W3o=o("The model class to instantiate is selected based on the "),Ote=a("code"),Q3o=o("model_type"),H3o=o(` property of the config object (either
passed as an argument or loaded from `),Xte=a("code"),U3o=o("pretrained_model_name_or_path"),J3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zte=a("code"),Y3o=o("pretrained_model_name_or_path"),K3o=o(":"),Z3o=l(),D=a("ul"),J1=a("li"),Vte=a("strong"),eyo=o("albert"),oyo=o(" \u2014 "),BI=a("a"),ryo=o("AlbertForTokenClassification"),tyo=o(" (ALBERT model)"),ayo=l(),Y1=a("li"),Wte=a("strong"),nyo=o("bert"),syo=o(" \u2014 "),xI=a("a"),lyo=o("BertForTokenClassification"),iyo=o(" (BERT model)"),dyo=l(),K1=a("li"),Qte=a("strong"),cyo=o("big_bird"),fyo=o(" \u2014 "),kI=a("a"),myo=o("BigBirdForTokenClassification"),gyo=o(" (BigBird model)"),hyo=l(),Z1=a("li"),Hte=a("strong"),pyo=o("camembert"),_yo=o(" \u2014 "),RI=a("a"),uyo=o("CamembertForTokenClassification"),byo=o(" (CamemBERT model)"),vyo=l(),eb=a("li"),Ute=a("strong"),Tyo=o("canine"),Fyo=o(" \u2014 "),SI=a("a"),Cyo=o("CanineForTokenClassification"),Myo=o(" (Canine model)"),Eyo=l(),ob=a("li"),Jte=a("strong"),yyo=o("convbert"),wyo=o(" \u2014 "),PI=a("a"),Ayo=o("ConvBertForTokenClassification"),Lyo=o(" (ConvBERT model)"),Byo=l(),rb=a("li"),Yte=a("strong"),xyo=o("deberta"),kyo=o(" \u2014 "),$I=a("a"),Ryo=o("DebertaForTokenClassification"),Syo=o(" (DeBERTa model)"),Pyo=l(),tb=a("li"),Kte=a("strong"),$yo=o("deberta-v2"),Iyo=o(" \u2014 "),II=a("a"),jyo=o("DebertaV2ForTokenClassification"),Nyo=o(" (DeBERTa-v2 model)"),Dyo=l(),ab=a("li"),Zte=a("strong"),qyo=o("distilbert"),Gyo=o(" \u2014 "),jI=a("a"),Oyo=o("DistilBertForTokenClassification"),Xyo=o(" (DistilBERT model)"),zyo=l(),nb=a("li"),eae=a("strong"),Vyo=o("electra"),Wyo=o(" \u2014 "),NI=a("a"),Qyo=o("ElectraForTokenClassification"),Hyo=o(" (ELECTRA model)"),Uyo=l(),sb=a("li"),oae=a("strong"),Jyo=o("flaubert"),Yyo=o(" \u2014 "),DI=a("a"),Kyo=o("FlaubertForTokenClassification"),Zyo=o(" (FlauBERT model)"),ewo=l(),lb=a("li"),rae=a("strong"),owo=o("fnet"),rwo=o(" \u2014 "),qI=a("a"),two=o("FNetForTokenClassification"),awo=o(" (FNet model)"),nwo=l(),ib=a("li"),tae=a("strong"),swo=o("funnel"),lwo=o(" \u2014 "),GI=a("a"),iwo=o("FunnelForTokenClassification"),dwo=o(" (Funnel Transformer model)"),cwo=l(),db=a("li"),aae=a("strong"),fwo=o("gpt2"),mwo=o(" \u2014 "),OI=a("a"),gwo=o("GPT2ForTokenClassification"),hwo=o(" (OpenAI GPT-2 model)"),pwo=l(),cb=a("li"),nae=a("strong"),_wo=o("ibert"),uwo=o(" \u2014 "),XI=a("a"),bwo=o("IBertForTokenClassification"),vwo=o(" (I-BERT model)"),Two=l(),fb=a("li"),sae=a("strong"),Fwo=o("layoutlm"),Cwo=o(" \u2014 "),zI=a("a"),Mwo=o("LayoutLMForTokenClassification"),Ewo=o(" (LayoutLM model)"),ywo=l(),mb=a("li"),lae=a("strong"),wwo=o("layoutlmv2"),Awo=o(" \u2014 "),VI=a("a"),Lwo=o("LayoutLMv2ForTokenClassification"),Bwo=o(" (LayoutLMv2 model)"),xwo=l(),gb=a("li"),iae=a("strong"),kwo=o("longformer"),Rwo=o(" \u2014 "),WI=a("a"),Swo=o("LongformerForTokenClassification"),Pwo=o(" (Longformer model)"),$wo=l(),hb=a("li"),dae=a("strong"),Iwo=o("megatron-bert"),jwo=o(" \u2014 "),QI=a("a"),Nwo=o("MegatronBertForTokenClassification"),Dwo=o(" (MegatronBert model)"),qwo=l(),pb=a("li"),cae=a("strong"),Gwo=o("mobilebert"),Owo=o(" \u2014 "),HI=a("a"),Xwo=o("MobileBertForTokenClassification"),zwo=o(" (MobileBERT model)"),Vwo=l(),_b=a("li"),fae=a("strong"),Wwo=o("mpnet"),Qwo=o(" \u2014 "),UI=a("a"),Hwo=o("MPNetForTokenClassification"),Uwo=o(" (MPNet model)"),Jwo=l(),ub=a("li"),mae=a("strong"),Ywo=o("nystromformer"),Kwo=o(" \u2014 "),JI=a("a"),Zwo=o("NystromformerForTokenClassification"),eAo=o(" (Nystromformer model)"),oAo=l(),bb=a("li"),gae=a("strong"),rAo=o("qdqbert"),tAo=o(" \u2014 "),YI=a("a"),aAo=o("QDQBertForTokenClassification"),nAo=o(" (QDQBert model)"),sAo=l(),vb=a("li"),hae=a("strong"),lAo=o("rembert"),iAo=o(" \u2014 "),KI=a("a"),dAo=o("RemBertForTokenClassification"),cAo=o(" (RemBERT model)"),fAo=l(),Tb=a("li"),pae=a("strong"),mAo=o("roberta"),gAo=o(" \u2014 "),ZI=a("a"),hAo=o("RobertaForTokenClassification"),pAo=o(" (RoBERTa model)"),_Ao=l(),Fb=a("li"),_ae=a("strong"),uAo=o("roformer"),bAo=o(" \u2014 "),ej=a("a"),vAo=o("RoFormerForTokenClassification"),TAo=o(" (RoFormer model)"),FAo=l(),Cb=a("li"),uae=a("strong"),CAo=o("squeezebert"),MAo=o(" \u2014 "),oj=a("a"),EAo=o("SqueezeBertForTokenClassification"),yAo=o(" (SqueezeBERT model)"),wAo=l(),Mb=a("li"),bae=a("strong"),AAo=o("xlm"),LAo=o(" \u2014 "),rj=a("a"),BAo=o("XLMForTokenClassification"),xAo=o(" (XLM model)"),kAo=l(),Eb=a("li"),vae=a("strong"),RAo=o("xlm-roberta"),SAo=o(" \u2014 "),tj=a("a"),PAo=o("XLMRobertaForTokenClassification"),$Ao=o(" (XLM-RoBERTa model)"),IAo=l(),yb=a("li"),Tae=a("strong"),jAo=o("xlm-roberta-xl"),NAo=o(" \u2014 "),aj=a("a"),DAo=o("XLMRobertaXLForTokenClassification"),qAo=o(" (XLM-RoBERTa-XL model)"),GAo=l(),wb=a("li"),Fae=a("strong"),OAo=o("xlnet"),XAo=o(" \u2014 "),nj=a("a"),zAo=o("XLNetForTokenClassification"),VAo=o(" (XLNet model)"),WAo=l(),Ab=a("li"),Cae=a("strong"),QAo=o("yoso"),HAo=o(" \u2014 "),sj=a("a"),UAo=o("YosoForTokenClassification"),JAo=o(" (YOSO model)"),YAo=l(),Lb=a("p"),KAo=o("The model is set in evaluation mode by default using "),Mae=a("code"),ZAo=o("model.eval()"),e6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eae=a("code"),o6o=o("model.train()"),r6o=l(),yae=a("p"),t6o=o("Examples:"),a6o=l(),f(VE.$$.fragment),OLe=l(),gd=a("h2"),Bb=a("a"),wae=a("span"),f(WE.$$.fragment),n6o=l(),Aae=a("span"),s6o=o("AutoModelForQuestionAnswering"),XLe=l(),er=a("div"),f(QE.$$.fragment),l6o=l(),hd=a("p"),i6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Lae=a("code"),d6o=o("from_pretrained()"),c6o=o("class method or the "),Bae=a("code"),f6o=o("from_config()"),m6o=o(`class
method.`),g6o=l(),HE=a("p"),h6o=o("This class cannot be instantiated directly using "),xae=a("code"),p6o=o("__init__()"),_6o=o(" (throws an error)."),u6o=l(),Qr=a("div"),f(UE.$$.fragment),b6o=l(),kae=a("p"),v6o=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),T6o=l(),pd=a("p"),F6o=o(`Note:
Loading a model from its configuration file does `),Rae=a("strong"),C6o=o("not"),M6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sae=a("code"),E6o=o("from_pretrained()"),y6o=o("to load the model weights."),w6o=l(),Pae=a("p"),A6o=o("Examples:"),L6o=l(),f(JE.$$.fragment),B6o=l(),De=a("div"),f(YE.$$.fragment),x6o=l(),$ae=a("p"),k6o=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),R6o=l(),Ha=a("p"),S6o=o("The model class to instantiate is selected based on the "),Iae=a("code"),P6o=o("model_type"),$6o=o(` property of the config object (either
passed as an argument or loaded from `),jae=a("code"),I6o=o("pretrained_model_name_or_path"),j6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nae=a("code"),N6o=o("pretrained_model_name_or_path"),D6o=o(":"),q6o=l(),R=a("ul"),xb=a("li"),Dae=a("strong"),G6o=o("albert"),O6o=o(" \u2014 "),lj=a("a"),X6o=o("AlbertForQuestionAnswering"),z6o=o(" (ALBERT model)"),V6o=l(),kb=a("li"),qae=a("strong"),W6o=o("bart"),Q6o=o(" \u2014 "),ij=a("a"),H6o=o("BartForQuestionAnswering"),U6o=o(" (BART model)"),J6o=l(),Rb=a("li"),Gae=a("strong"),Y6o=o("bert"),K6o=o(" \u2014 "),dj=a("a"),Z6o=o("BertForQuestionAnswering"),e0o=o(" (BERT model)"),o0o=l(),Sb=a("li"),Oae=a("strong"),r0o=o("big_bird"),t0o=o(" \u2014 "),cj=a("a"),a0o=o("BigBirdForQuestionAnswering"),n0o=o(" (BigBird model)"),s0o=l(),Pb=a("li"),Xae=a("strong"),l0o=o("bigbird_pegasus"),i0o=o(" \u2014 "),fj=a("a"),d0o=o("BigBirdPegasusForQuestionAnswering"),c0o=o(" (BigBirdPegasus model)"),f0o=l(),$b=a("li"),zae=a("strong"),m0o=o("camembert"),g0o=o(" \u2014 "),mj=a("a"),h0o=o("CamembertForQuestionAnswering"),p0o=o(" (CamemBERT model)"),_0o=l(),Ib=a("li"),Vae=a("strong"),u0o=o("canine"),b0o=o(" \u2014 "),gj=a("a"),v0o=o("CanineForQuestionAnswering"),T0o=o(" (Canine model)"),F0o=l(),jb=a("li"),Wae=a("strong"),C0o=o("convbert"),M0o=o(" \u2014 "),hj=a("a"),E0o=o("ConvBertForQuestionAnswering"),y0o=o(" (ConvBERT model)"),w0o=l(),Nb=a("li"),Qae=a("strong"),A0o=o("deberta"),L0o=o(" \u2014 "),pj=a("a"),B0o=o("DebertaForQuestionAnswering"),x0o=o(" (DeBERTa model)"),k0o=l(),Db=a("li"),Hae=a("strong"),R0o=o("deberta-v2"),S0o=o(" \u2014 "),_j=a("a"),P0o=o("DebertaV2ForQuestionAnswering"),$0o=o(" (DeBERTa-v2 model)"),I0o=l(),qb=a("li"),Uae=a("strong"),j0o=o("distilbert"),N0o=o(" \u2014 "),uj=a("a"),D0o=o("DistilBertForQuestionAnswering"),q0o=o(" (DistilBERT model)"),G0o=l(),Gb=a("li"),Jae=a("strong"),O0o=o("electra"),X0o=o(" \u2014 "),bj=a("a"),z0o=o("ElectraForQuestionAnswering"),V0o=o(" (ELECTRA model)"),W0o=l(),Ob=a("li"),Yae=a("strong"),Q0o=o("flaubert"),H0o=o(" \u2014 "),vj=a("a"),U0o=o("FlaubertForQuestionAnsweringSimple"),J0o=o(" (FlauBERT model)"),Y0o=l(),Xb=a("li"),Kae=a("strong"),K0o=o("fnet"),Z0o=o(" \u2014 "),Tj=a("a"),eLo=o("FNetForQuestionAnswering"),oLo=o(" (FNet model)"),rLo=l(),zb=a("li"),Zae=a("strong"),tLo=o("funnel"),aLo=o(" \u2014 "),Fj=a("a"),nLo=o("FunnelForQuestionAnswering"),sLo=o(" (Funnel Transformer model)"),lLo=l(),Vb=a("li"),ene=a("strong"),iLo=o("gptj"),dLo=o(" \u2014 "),Cj=a("a"),cLo=o("GPTJForQuestionAnswering"),fLo=o(" (GPT-J model)"),mLo=l(),Wb=a("li"),one=a("strong"),gLo=o("ibert"),hLo=o(" \u2014 "),Mj=a("a"),pLo=o("IBertForQuestionAnswering"),_Lo=o(" (I-BERT model)"),uLo=l(),Qb=a("li"),rne=a("strong"),bLo=o("layoutlmv2"),vLo=o(" \u2014 "),Ej=a("a"),TLo=o("LayoutLMv2ForQuestionAnswering"),FLo=o(" (LayoutLMv2 model)"),CLo=l(),Hb=a("li"),tne=a("strong"),MLo=o("led"),ELo=o(" \u2014 "),yj=a("a"),yLo=o("LEDForQuestionAnswering"),wLo=o(" (LED model)"),ALo=l(),Ub=a("li"),ane=a("strong"),LLo=o("longformer"),BLo=o(" \u2014 "),wj=a("a"),xLo=o("LongformerForQuestionAnswering"),kLo=o(" (Longformer model)"),RLo=l(),Jb=a("li"),nne=a("strong"),SLo=o("lxmert"),PLo=o(" \u2014 "),Aj=a("a"),$Lo=o("LxmertForQuestionAnswering"),ILo=o(" (LXMERT model)"),jLo=l(),Yb=a("li"),sne=a("strong"),NLo=o("mbart"),DLo=o(" \u2014 "),Lj=a("a"),qLo=o("MBartForQuestionAnswering"),GLo=o(" (mBART model)"),OLo=l(),Kb=a("li"),lne=a("strong"),XLo=o("megatron-bert"),zLo=o(" \u2014 "),Bj=a("a"),VLo=o("MegatronBertForQuestionAnswering"),WLo=o(" (MegatronBert model)"),QLo=l(),Zb=a("li"),ine=a("strong"),HLo=o("mobilebert"),ULo=o(" \u2014 "),xj=a("a"),JLo=o("MobileBertForQuestionAnswering"),YLo=o(" (MobileBERT model)"),KLo=l(),e2=a("li"),dne=a("strong"),ZLo=o("mpnet"),e7o=o(" \u2014 "),kj=a("a"),o7o=o("MPNetForQuestionAnswering"),r7o=o(" (MPNet model)"),t7o=l(),o2=a("li"),cne=a("strong"),a7o=o("nystromformer"),n7o=o(" \u2014 "),Rj=a("a"),s7o=o("NystromformerForQuestionAnswering"),l7o=o(" (Nystromformer model)"),i7o=l(),r2=a("li"),fne=a("strong"),d7o=o("qdqbert"),c7o=o(" \u2014 "),Sj=a("a"),f7o=o("QDQBertForQuestionAnswering"),m7o=o(" (QDQBert model)"),g7o=l(),t2=a("li"),mne=a("strong"),h7o=o("reformer"),p7o=o(" \u2014 "),Pj=a("a"),_7o=o("ReformerForQuestionAnswering"),u7o=o(" (Reformer model)"),b7o=l(),a2=a("li"),gne=a("strong"),v7o=o("rembert"),T7o=o(" \u2014 "),$j=a("a"),F7o=o("RemBertForQuestionAnswering"),C7o=o(" (RemBERT model)"),M7o=l(),n2=a("li"),hne=a("strong"),E7o=o("roberta"),y7o=o(" \u2014 "),Ij=a("a"),w7o=o("RobertaForQuestionAnswering"),A7o=o(" (RoBERTa model)"),L7o=l(),s2=a("li"),pne=a("strong"),B7o=o("roformer"),x7o=o(" \u2014 "),jj=a("a"),k7o=o("RoFormerForQuestionAnswering"),R7o=o(" (RoFormer model)"),S7o=l(),l2=a("li"),_ne=a("strong"),P7o=o("splinter"),$7o=o(" \u2014 "),Nj=a("a"),I7o=o("SplinterForQuestionAnswering"),j7o=o(" (Splinter model)"),N7o=l(),i2=a("li"),une=a("strong"),D7o=o("squeezebert"),q7o=o(" \u2014 "),Dj=a("a"),G7o=o("SqueezeBertForQuestionAnswering"),O7o=o(" (SqueezeBERT model)"),X7o=l(),d2=a("li"),bne=a("strong"),z7o=o("xlm"),V7o=o(" \u2014 "),qj=a("a"),W7o=o("XLMForQuestionAnsweringSimple"),Q7o=o(" (XLM model)"),H7o=l(),c2=a("li"),vne=a("strong"),U7o=o("xlm-roberta"),J7o=o(" \u2014 "),Gj=a("a"),Y7o=o("XLMRobertaForQuestionAnswering"),K7o=o(" (XLM-RoBERTa model)"),Z7o=l(),f2=a("li"),Tne=a("strong"),eBo=o("xlm-roberta-xl"),oBo=o(" \u2014 "),Oj=a("a"),rBo=o("XLMRobertaXLForQuestionAnswering"),tBo=o(" (XLM-RoBERTa-XL model)"),aBo=l(),m2=a("li"),Fne=a("strong"),nBo=o("xlnet"),sBo=o(" \u2014 "),Xj=a("a"),lBo=o("XLNetForQuestionAnsweringSimple"),iBo=o(" (XLNet model)"),dBo=l(),g2=a("li"),Cne=a("strong"),cBo=o("yoso"),fBo=o(" \u2014 "),zj=a("a"),mBo=o("YosoForQuestionAnswering"),gBo=o(" (YOSO model)"),hBo=l(),h2=a("p"),pBo=o("The model is set in evaluation mode by default using "),Mne=a("code"),_Bo=o("model.eval()"),uBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ene=a("code"),bBo=o("model.train()"),vBo=l(),yne=a("p"),TBo=o("Examples:"),FBo=l(),f(KE.$$.fragment),zLe=l(),_d=a("h2"),p2=a("a"),wne=a("span"),f(ZE.$$.fragment),CBo=l(),Ane=a("span"),MBo=o("AutoModelForTableQuestionAnswering"),VLe=l(),or=a("div"),f(e3.$$.fragment),EBo=l(),ud=a("p"),yBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Lne=a("code"),wBo=o("from_pretrained()"),ABo=o("class method or the "),Bne=a("code"),LBo=o("from_config()"),BBo=o(`class
method.`),xBo=l(),o3=a("p"),kBo=o("This class cannot be instantiated directly using "),xne=a("code"),RBo=o("__init__()"),SBo=o(" (throws an error)."),PBo=l(),Hr=a("div"),f(r3.$$.fragment),$Bo=l(),kne=a("p"),IBo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),jBo=l(),bd=a("p"),NBo=o(`Note:
Loading a model from its configuration file does `),Rne=a("strong"),DBo=o("not"),qBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sne=a("code"),GBo=o("from_pretrained()"),OBo=o("to load the model weights."),XBo=l(),Pne=a("p"),zBo=o("Examples:"),VBo=l(),f(t3.$$.fragment),WBo=l(),qe=a("div"),f(a3.$$.fragment),QBo=l(),$ne=a("p"),HBo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),UBo=l(),Ua=a("p"),JBo=o("The model class to instantiate is selected based on the "),Ine=a("code"),YBo=o("model_type"),KBo=o(` property of the config object (either
passed as an argument or loaded from `),jne=a("code"),ZBo=o("pretrained_model_name_or_path"),exo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nne=a("code"),oxo=o("pretrained_model_name_or_path"),rxo=o(":"),txo=l(),Dne=a("ul"),_2=a("li"),qne=a("strong"),axo=o("tapas"),nxo=o(" \u2014 "),Vj=a("a"),sxo=o("TapasForQuestionAnswering"),lxo=o(" (TAPAS model)"),ixo=l(),u2=a("p"),dxo=o("The model is set in evaluation mode by default using "),Gne=a("code"),cxo=o("model.eval()"),fxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),One=a("code"),mxo=o("model.train()"),gxo=l(),Xne=a("p"),hxo=o("Examples:"),pxo=l(),f(n3.$$.fragment),WLe=l(),vd=a("h2"),b2=a("a"),zne=a("span"),f(s3.$$.fragment),_xo=l(),Vne=a("span"),uxo=o("AutoModelForImageClassification"),QLe=l(),rr=a("div"),f(l3.$$.fragment),bxo=l(),Td=a("p"),vxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Wne=a("code"),Txo=o("from_pretrained()"),Fxo=o("class method or the "),Qne=a("code"),Cxo=o("from_config()"),Mxo=o(`class
method.`),Exo=l(),i3=a("p"),yxo=o("This class cannot be instantiated directly using "),Hne=a("code"),wxo=o("__init__()"),Axo=o(" (throws an error)."),Lxo=l(),Ur=a("div"),f(d3.$$.fragment),Bxo=l(),Une=a("p"),xxo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kxo=l(),Fd=a("p"),Rxo=o(`Note:
Loading a model from its configuration file does `),Jne=a("strong"),Sxo=o("not"),Pxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yne=a("code"),$xo=o("from_pretrained()"),Ixo=o("to load the model weights."),jxo=l(),Kne=a("p"),Nxo=o("Examples:"),Dxo=l(),f(c3.$$.fragment),qxo=l(),Ge=a("div"),f(f3.$$.fragment),Gxo=l(),Zne=a("p"),Oxo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Xxo=l(),Ja=a("p"),zxo=o("The model class to instantiate is selected based on the "),ese=a("code"),Vxo=o("model_type"),Wxo=o(` property of the config object (either
passed as an argument or loaded from `),ose=a("code"),Qxo=o("pretrained_model_name_or_path"),Hxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rse=a("code"),Uxo=o("pretrained_model_name_or_path"),Jxo=o(":"),Yxo=l(),be=a("ul"),v2=a("li"),tse=a("strong"),Kxo=o("beit"),Zxo=o(" \u2014 "),Wj=a("a"),eko=o("BeitForImageClassification"),oko=o(" (BEiT model)"),rko=l(),T2=a("li"),ase=a("strong"),tko=o("convnext"),ako=o(" \u2014 "),Qj=a("a"),nko=o("ConvNextForImageClassification"),sko=o(" (ConvNext model)"),lko=l(),Rs=a("li"),nse=a("strong"),iko=o("deit"),dko=o(" \u2014 "),Hj=a("a"),cko=o("DeiTForImageClassification"),fko=o(" or "),Uj=a("a"),mko=o("DeiTForImageClassificationWithTeacher"),gko=o(" (DeiT model)"),hko=l(),F2=a("li"),sse=a("strong"),pko=o("imagegpt"),_ko=o(" \u2014 "),Jj=a("a"),uko=o("ImageGPTForImageClassification"),bko=o(" (ImageGPT model)"),vko=l(),la=a("li"),lse=a("strong"),Tko=o("perceiver"),Fko=o(" \u2014 "),Yj=a("a"),Cko=o("PerceiverForImageClassificationLearned"),Mko=o(" or "),Kj=a("a"),Eko=o("PerceiverForImageClassificationFourier"),yko=o(" or "),Zj=a("a"),wko=o("PerceiverForImageClassificationConvProcessing"),Ako=o(" (Perceiver model)"),Lko=l(),C2=a("li"),ise=a("strong"),Bko=o("poolformer"),xko=o(" \u2014 "),eN=a("a"),kko=o("PoolFormerForImageClassification"),Rko=o(" (PoolFormer model)"),Sko=l(),M2=a("li"),dse=a("strong"),Pko=o("segformer"),$ko=o(" \u2014 "),oN=a("a"),Iko=o("SegformerForImageClassification"),jko=o(" (SegFormer model)"),Nko=l(),E2=a("li"),cse=a("strong"),Dko=o("swin"),qko=o(" \u2014 "),rN=a("a"),Gko=o("SwinForImageClassification"),Oko=o(" (Swin model)"),Xko=l(),y2=a("li"),fse=a("strong"),zko=o("vit"),Vko=o(" \u2014 "),tN=a("a"),Wko=o("ViTForImageClassification"),Qko=o(" (ViT model)"),Hko=l(),w2=a("p"),Uko=o("The model is set in evaluation mode by default using "),mse=a("code"),Jko=o("model.eval()"),Yko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gse=a("code"),Kko=o("model.train()"),Zko=l(),hse=a("p"),eRo=o("Examples:"),oRo=l(),f(m3.$$.fragment),HLe=l(),Cd=a("h2"),A2=a("a"),pse=a("span"),f(g3.$$.fragment),rRo=l(),_se=a("span"),tRo=o("AutoModelForVision2Seq"),ULe=l(),tr=a("div"),f(h3.$$.fragment),aRo=l(),Md=a("p"),nRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),use=a("code"),sRo=o("from_pretrained()"),lRo=o("class method or the "),bse=a("code"),iRo=o("from_config()"),dRo=o(`class
method.`),cRo=l(),p3=a("p"),fRo=o("This class cannot be instantiated directly using "),vse=a("code"),mRo=o("__init__()"),gRo=o(" (throws an error)."),hRo=l(),Jr=a("div"),f(_3.$$.fragment),pRo=l(),Tse=a("p"),_Ro=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uRo=l(),Ed=a("p"),bRo=o(`Note:
Loading a model from its configuration file does `),Fse=a("strong"),vRo=o("not"),TRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cse=a("code"),FRo=o("from_pretrained()"),CRo=o("to load the model weights."),MRo=l(),Mse=a("p"),ERo=o("Examples:"),yRo=l(),f(u3.$$.fragment),wRo=l(),Oe=a("div"),f(b3.$$.fragment),ARo=l(),Ese=a("p"),LRo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),BRo=l(),Ya=a("p"),xRo=o("The model class to instantiate is selected based on the "),yse=a("code"),kRo=o("model_type"),RRo=o(` property of the config object (either
passed as an argument or loaded from `),wse=a("code"),SRo=o("pretrained_model_name_or_path"),PRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ase=a("code"),$Ro=o("pretrained_model_name_or_path"),IRo=o(":"),jRo=l(),Lse=a("ul"),L2=a("li"),Bse=a("strong"),NRo=o("vision-encoder-decoder"),DRo=o(" \u2014 "),aN=a("a"),qRo=o("VisionEncoderDecoderModel"),GRo=o(" (Vision Encoder decoder model)"),ORo=l(),B2=a("p"),XRo=o("The model is set in evaluation mode by default using "),xse=a("code"),zRo=o("model.eval()"),VRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kse=a("code"),WRo=o("model.train()"),QRo=l(),Rse=a("p"),HRo=o("Examples:"),URo=l(),f(v3.$$.fragment),JLe=l(),yd=a("h2"),x2=a("a"),Sse=a("span"),f(T3.$$.fragment),JRo=l(),Pse=a("span"),YRo=o("AutoModelForAudioClassification"),YLe=l(),ar=a("div"),f(F3.$$.fragment),KRo=l(),wd=a("p"),ZRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),$se=a("code"),eSo=o("from_pretrained()"),oSo=o("class method or the "),Ise=a("code"),rSo=o("from_config()"),tSo=o(`class
method.`),aSo=l(),C3=a("p"),nSo=o("This class cannot be instantiated directly using "),jse=a("code"),sSo=o("__init__()"),lSo=o(" (throws an error)."),iSo=l(),Yr=a("div"),f(M3.$$.fragment),dSo=l(),Nse=a("p"),cSo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),fSo=l(),Ad=a("p"),mSo=o(`Note:
Loading a model from its configuration file does `),Dse=a("strong"),gSo=o("not"),hSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qse=a("code"),pSo=o("from_pretrained()"),_So=o("to load the model weights."),uSo=l(),Gse=a("p"),bSo=o("Examples:"),vSo=l(),f(E3.$$.fragment),TSo=l(),Xe=a("div"),f(y3.$$.fragment),FSo=l(),Ose=a("p"),CSo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),MSo=l(),Ka=a("p"),ESo=o("The model class to instantiate is selected based on the "),Xse=a("code"),ySo=o("model_type"),wSo=o(` property of the config object (either
passed as an argument or loaded from `),zse=a("code"),ASo=o("pretrained_model_name_or_path"),LSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vse=a("code"),BSo=o("pretrained_model_name_or_path"),xSo=o(":"),kSo=l(),ao=a("ul"),k2=a("li"),Wse=a("strong"),RSo=o("hubert"),SSo=o(" \u2014 "),nN=a("a"),PSo=o("HubertForSequenceClassification"),$So=o(" (Hubert model)"),ISo=l(),R2=a("li"),Qse=a("strong"),jSo=o("sew"),NSo=o(" \u2014 "),sN=a("a"),DSo=o("SEWForSequenceClassification"),qSo=o(" (SEW model)"),GSo=l(),S2=a("li"),Hse=a("strong"),OSo=o("sew-d"),XSo=o(" \u2014 "),lN=a("a"),zSo=o("SEWDForSequenceClassification"),VSo=o(" (SEW-D model)"),WSo=l(),P2=a("li"),Use=a("strong"),QSo=o("unispeech"),HSo=o(" \u2014 "),iN=a("a"),USo=o("UniSpeechForSequenceClassification"),JSo=o(" (UniSpeech model)"),YSo=l(),$2=a("li"),Jse=a("strong"),KSo=o("unispeech-sat"),ZSo=o(" \u2014 "),dN=a("a"),ePo=o("UniSpeechSatForSequenceClassification"),oPo=o(" (UniSpeechSat model)"),rPo=l(),I2=a("li"),Yse=a("strong"),tPo=o("wav2vec2"),aPo=o(" \u2014 "),cN=a("a"),nPo=o("Wav2Vec2ForSequenceClassification"),sPo=o(" (Wav2Vec2 model)"),lPo=l(),j2=a("li"),Kse=a("strong"),iPo=o("wavlm"),dPo=o(" \u2014 "),fN=a("a"),cPo=o("WavLMForSequenceClassification"),fPo=o(" (WavLM model)"),mPo=l(),N2=a("p"),gPo=o("The model is set in evaluation mode by default using "),Zse=a("code"),hPo=o("model.eval()"),pPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ele=a("code"),_Po=o("model.train()"),uPo=l(),ole=a("p"),bPo=o("Examples:"),vPo=l(),f(w3.$$.fragment),KLe=l(),Ld=a("h2"),D2=a("a"),rle=a("span"),f(A3.$$.fragment),TPo=l(),tle=a("span"),FPo=o("AutoModelForAudioFrameClassification"),ZLe=l(),nr=a("div"),f(L3.$$.fragment),CPo=l(),Bd=a("p"),MPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ale=a("code"),EPo=o("from_pretrained()"),yPo=o("class method or the "),nle=a("code"),wPo=o("from_config()"),APo=o(`class
method.`),LPo=l(),B3=a("p"),BPo=o("This class cannot be instantiated directly using "),sle=a("code"),xPo=o("__init__()"),kPo=o(" (throws an error)."),RPo=l(),Kr=a("div"),f(x3.$$.fragment),SPo=l(),lle=a("p"),PPo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),$Po=l(),xd=a("p"),IPo=o(`Note:
Loading a model from its configuration file does `),ile=a("strong"),jPo=o("not"),NPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dle=a("code"),DPo=o("from_pretrained()"),qPo=o("to load the model weights."),GPo=l(),cle=a("p"),OPo=o("Examples:"),XPo=l(),f(k3.$$.fragment),zPo=l(),ze=a("div"),f(R3.$$.fragment),VPo=l(),fle=a("p"),WPo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),QPo=l(),Za=a("p"),HPo=o("The model class to instantiate is selected based on the "),mle=a("code"),UPo=o("model_type"),JPo=o(` property of the config object (either
passed as an argument or loaded from `),gle=a("code"),YPo=o("pretrained_model_name_or_path"),KPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hle=a("code"),ZPo=o("pretrained_model_name_or_path"),e$o=o(":"),o$o=l(),kd=a("ul"),q2=a("li"),ple=a("strong"),r$o=o("unispeech-sat"),t$o=o(" \u2014 "),mN=a("a"),a$o=o("UniSpeechSatForAudioFrameClassification"),n$o=o(" (UniSpeechSat model)"),s$o=l(),G2=a("li"),_le=a("strong"),l$o=o("wav2vec2"),i$o=o(" \u2014 "),gN=a("a"),d$o=o("Wav2Vec2ForAudioFrameClassification"),c$o=o(" (Wav2Vec2 model)"),f$o=l(),O2=a("li"),ule=a("strong"),m$o=o("wavlm"),g$o=o(" \u2014 "),hN=a("a"),h$o=o("WavLMForAudioFrameClassification"),p$o=o(" (WavLM model)"),_$o=l(),X2=a("p"),u$o=o("The model is set in evaluation mode by default using "),ble=a("code"),b$o=o("model.eval()"),v$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vle=a("code"),T$o=o("model.train()"),F$o=l(),Tle=a("p"),C$o=o("Examples:"),M$o=l(),f(S3.$$.fragment),e7e=l(),Rd=a("h2"),z2=a("a"),Fle=a("span"),f(P3.$$.fragment),E$o=l(),Cle=a("span"),y$o=o("AutoModelForCTC"),o7e=l(),sr=a("div"),f($3.$$.fragment),w$o=l(),Sd=a("p"),A$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Mle=a("code"),L$o=o("from_pretrained()"),B$o=o("class method or the "),Ele=a("code"),x$o=o("from_config()"),k$o=o(`class
method.`),R$o=l(),I3=a("p"),S$o=o("This class cannot be instantiated directly using "),yle=a("code"),P$o=o("__init__()"),$$o=o(" (throws an error)."),I$o=l(),Zr=a("div"),f(j3.$$.fragment),j$o=l(),wle=a("p"),N$o=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),D$o=l(),Pd=a("p"),q$o=o(`Note:
Loading a model from its configuration file does `),Ale=a("strong"),G$o=o("not"),O$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lle=a("code"),X$o=o("from_pretrained()"),z$o=o("to load the model weights."),V$o=l(),Ble=a("p"),W$o=o("Examples:"),Q$o=l(),f(N3.$$.fragment),H$o=l(),Ve=a("div"),f(D3.$$.fragment),U$o=l(),xle=a("p"),J$o=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Y$o=l(),en=a("p"),K$o=o("The model class to instantiate is selected based on the "),kle=a("code"),Z$o=o("model_type"),eIo=o(` property of the config object (either
passed as an argument or loaded from `),Rle=a("code"),oIo=o("pretrained_model_name_or_path"),rIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sle=a("code"),tIo=o("pretrained_model_name_or_path"),aIo=o(":"),nIo=l(),no=a("ul"),V2=a("li"),Ple=a("strong"),sIo=o("hubert"),lIo=o(" \u2014 "),pN=a("a"),iIo=o("HubertForCTC"),dIo=o(" (Hubert model)"),cIo=l(),W2=a("li"),$le=a("strong"),fIo=o("sew"),mIo=o(" \u2014 "),_N=a("a"),gIo=o("SEWForCTC"),hIo=o(" (SEW model)"),pIo=l(),Q2=a("li"),Ile=a("strong"),_Io=o("sew-d"),uIo=o(" \u2014 "),uN=a("a"),bIo=o("SEWDForCTC"),vIo=o(" (SEW-D model)"),TIo=l(),H2=a("li"),jle=a("strong"),FIo=o("unispeech"),CIo=o(" \u2014 "),bN=a("a"),MIo=o("UniSpeechForCTC"),EIo=o(" (UniSpeech model)"),yIo=l(),U2=a("li"),Nle=a("strong"),wIo=o("unispeech-sat"),AIo=o(" \u2014 "),vN=a("a"),LIo=o("UniSpeechSatForCTC"),BIo=o(" (UniSpeechSat model)"),xIo=l(),J2=a("li"),Dle=a("strong"),kIo=o("wav2vec2"),RIo=o(" \u2014 "),TN=a("a"),SIo=o("Wav2Vec2ForCTC"),PIo=o(" (Wav2Vec2 model)"),$Io=l(),Y2=a("li"),qle=a("strong"),IIo=o("wavlm"),jIo=o(" \u2014 "),FN=a("a"),NIo=o("WavLMForCTC"),DIo=o(" (WavLM model)"),qIo=l(),K2=a("p"),GIo=o("The model is set in evaluation mode by default using "),Gle=a("code"),OIo=o("model.eval()"),XIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ole=a("code"),zIo=o("model.train()"),VIo=l(),Xle=a("p"),WIo=o("Examples:"),QIo=l(),f(q3.$$.fragment),r7e=l(),$d=a("h2"),Z2=a("a"),zle=a("span"),f(G3.$$.fragment),HIo=l(),Vle=a("span"),UIo=o("AutoModelForSpeechSeq2Seq"),t7e=l(),lr=a("div"),f(O3.$$.fragment),JIo=l(),Id=a("p"),YIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Wle=a("code"),KIo=o("from_pretrained()"),ZIo=o("class method or the "),Qle=a("code"),ejo=o("from_config()"),ojo=o(`class
method.`),rjo=l(),X3=a("p"),tjo=o("This class cannot be instantiated directly using "),Hle=a("code"),ajo=o("__init__()"),njo=o(" (throws an error)."),sjo=l(),et=a("div"),f(z3.$$.fragment),ljo=l(),Ule=a("p"),ijo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),djo=l(),jd=a("p"),cjo=o(`Note:
Loading a model from its configuration file does `),Jle=a("strong"),fjo=o("not"),mjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yle=a("code"),gjo=o("from_pretrained()"),hjo=o("to load the model weights."),pjo=l(),Kle=a("p"),_jo=o("Examples:"),ujo=l(),f(V3.$$.fragment),bjo=l(),We=a("div"),f(W3.$$.fragment),vjo=l(),Zle=a("p"),Tjo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Fjo=l(),on=a("p"),Cjo=o("The model class to instantiate is selected based on the "),eie=a("code"),Mjo=o("model_type"),Ejo=o(` property of the config object (either
passed as an argument or loaded from `),oie=a("code"),yjo=o("pretrained_model_name_or_path"),wjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rie=a("code"),Ajo=o("pretrained_model_name_or_path"),Ljo=o(":"),Bjo=l(),Q3=a("ul"),ev=a("li"),tie=a("strong"),xjo=o("speech-encoder-decoder"),kjo=o(" \u2014 "),CN=a("a"),Rjo=o("SpeechEncoderDecoderModel"),Sjo=o(" (Speech Encoder decoder model)"),Pjo=l(),ov=a("li"),aie=a("strong"),$jo=o("speech_to_text"),Ijo=o(" \u2014 "),MN=a("a"),jjo=o("Speech2TextForConditionalGeneration"),Njo=o(" (Speech2Text model)"),Djo=l(),rv=a("p"),qjo=o("The model is set in evaluation mode by default using "),nie=a("code"),Gjo=o("model.eval()"),Ojo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sie=a("code"),Xjo=o("model.train()"),zjo=l(),lie=a("p"),Vjo=o("Examples:"),Wjo=l(),f(H3.$$.fragment),a7e=l(),Nd=a("h2"),tv=a("a"),iie=a("span"),f(U3.$$.fragment),Qjo=l(),die=a("span"),Hjo=o("AutoModelForAudioXVector"),n7e=l(),ir=a("div"),f(J3.$$.fragment),Ujo=l(),Dd=a("p"),Jjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),cie=a("code"),Yjo=o("from_pretrained()"),Kjo=o("class method or the "),fie=a("code"),Zjo=o("from_config()"),eNo=o(`class
method.`),oNo=l(),Y3=a("p"),rNo=o("This class cannot be instantiated directly using "),mie=a("code"),tNo=o("__init__()"),aNo=o(" (throws an error)."),nNo=l(),ot=a("div"),f(K3.$$.fragment),sNo=l(),gie=a("p"),lNo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),iNo=l(),qd=a("p"),dNo=o(`Note:
Loading a model from its configuration file does `),hie=a("strong"),cNo=o("not"),fNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pie=a("code"),mNo=o("from_pretrained()"),gNo=o("to load the model weights."),hNo=l(),_ie=a("p"),pNo=o("Examples:"),_No=l(),f(Z3.$$.fragment),uNo=l(),Qe=a("div"),f(ey.$$.fragment),bNo=l(),uie=a("p"),vNo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),TNo=l(),rn=a("p"),FNo=o("The model class to instantiate is selected based on the "),bie=a("code"),CNo=o("model_type"),MNo=o(` property of the config object (either
passed as an argument or loaded from `),vie=a("code"),ENo=o("pretrained_model_name_or_path"),yNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tie=a("code"),wNo=o("pretrained_model_name_or_path"),ANo=o(":"),LNo=l(),Gd=a("ul"),av=a("li"),Fie=a("strong"),BNo=o("unispeech-sat"),xNo=o(" \u2014 "),EN=a("a"),kNo=o("UniSpeechSatForXVector"),RNo=o(" (UniSpeechSat model)"),SNo=l(),nv=a("li"),Cie=a("strong"),PNo=o("wav2vec2"),$No=o(" \u2014 "),yN=a("a"),INo=o("Wav2Vec2ForXVector"),jNo=o(" (Wav2Vec2 model)"),NNo=l(),sv=a("li"),Mie=a("strong"),DNo=o("wavlm"),qNo=o(" \u2014 "),wN=a("a"),GNo=o("WavLMForXVector"),ONo=o(" (WavLM model)"),XNo=l(),lv=a("p"),zNo=o("The model is set in evaluation mode by default using "),Eie=a("code"),VNo=o("model.eval()"),WNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yie=a("code"),QNo=o("model.train()"),HNo=l(),wie=a("p"),UNo=o("Examples:"),JNo=l(),f(oy.$$.fragment),s7e=l(),Od=a("h2"),iv=a("a"),Aie=a("span"),f(ry.$$.fragment),YNo=l(),Lie=a("span"),KNo=o("AutoModelForMaskedImageModeling"),l7e=l(),dr=a("div"),f(ty.$$.fragment),ZNo=l(),Xd=a("p"),eDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Bie=a("code"),oDo=o("from_pretrained()"),rDo=o("class method or the "),xie=a("code"),tDo=o("from_config()"),aDo=o(`class
method.`),nDo=l(),ay=a("p"),sDo=o("This class cannot be instantiated directly using "),kie=a("code"),lDo=o("__init__()"),iDo=o(" (throws an error)."),dDo=l(),rt=a("div"),f(ny.$$.fragment),cDo=l(),Rie=a("p"),fDo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),mDo=l(),zd=a("p"),gDo=o(`Note:
Loading a model from its configuration file does `),Sie=a("strong"),hDo=o("not"),pDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pie=a("code"),_Do=o("from_pretrained()"),uDo=o("to load the model weights."),bDo=l(),$ie=a("p"),vDo=o("Examples:"),TDo=l(),f(sy.$$.fragment),FDo=l(),He=a("div"),f(ly.$$.fragment),CDo=l(),Iie=a("p"),MDo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),EDo=l(),tn=a("p"),yDo=o("The model class to instantiate is selected based on the "),jie=a("code"),wDo=o("model_type"),ADo=o(` property of the config object (either
passed as an argument or loaded from `),Nie=a("code"),LDo=o("pretrained_model_name_or_path"),BDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=a("code"),xDo=o("pretrained_model_name_or_path"),kDo=o(":"),RDo=l(),Vd=a("ul"),dv=a("li"),qie=a("strong"),SDo=o("deit"),PDo=o(" \u2014 "),AN=a("a"),$Do=o("DeiTForMaskedImageModeling"),IDo=o(" (DeiT model)"),jDo=l(),cv=a("li"),Gie=a("strong"),NDo=o("swin"),DDo=o(" \u2014 "),LN=a("a"),qDo=o("SwinForMaskedImageModeling"),GDo=o(" (Swin model)"),ODo=l(),fv=a("li"),Oie=a("strong"),XDo=o("vit"),zDo=o(" \u2014 "),BN=a("a"),VDo=o("ViTForMaskedImageModeling"),WDo=o(" (ViT model)"),QDo=l(),mv=a("p"),HDo=o("The model is set in evaluation mode by default using "),Xie=a("code"),UDo=o("model.eval()"),JDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zie=a("code"),YDo=o("model.train()"),KDo=l(),Vie=a("p"),ZDo=o("Examples:"),eqo=l(),f(iy.$$.fragment),i7e=l(),Wd=a("h2"),gv=a("a"),Wie=a("span"),f(dy.$$.fragment),oqo=l(),Qie=a("span"),rqo=o("AutoModelForObjectDetection"),d7e=l(),cr=a("div"),f(cy.$$.fragment),tqo=l(),Qd=a("p"),aqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Hie=a("code"),nqo=o("from_pretrained()"),sqo=o("class method or the "),Uie=a("code"),lqo=o("from_config()"),iqo=o(`class
method.`),dqo=l(),fy=a("p"),cqo=o("This class cannot be instantiated directly using "),Jie=a("code"),fqo=o("__init__()"),mqo=o(" (throws an error)."),gqo=l(),tt=a("div"),f(my.$$.fragment),hqo=l(),Yie=a("p"),pqo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),_qo=l(),Hd=a("p"),uqo=o(`Note:
Loading a model from its configuration file does `),Kie=a("strong"),bqo=o("not"),vqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zie=a("code"),Tqo=o("from_pretrained()"),Fqo=o("to load the model weights."),Cqo=l(),ede=a("p"),Mqo=o("Examples:"),Eqo=l(),f(gy.$$.fragment),yqo=l(),Ue=a("div"),f(hy.$$.fragment),wqo=l(),ode=a("p"),Aqo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Lqo=l(),an=a("p"),Bqo=o("The model class to instantiate is selected based on the "),rde=a("code"),xqo=o("model_type"),kqo=o(` property of the config object (either
passed as an argument or loaded from `),tde=a("code"),Rqo=o("pretrained_model_name_or_path"),Sqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=a("code"),Pqo=o("pretrained_model_name_or_path"),$qo=o(":"),Iqo=l(),nde=a("ul"),hv=a("li"),sde=a("strong"),jqo=o("detr"),Nqo=o(" \u2014 "),xN=a("a"),Dqo=o("DetrForObjectDetection"),qqo=o(" (DETR model)"),Gqo=l(),pv=a("p"),Oqo=o("The model is set in evaluation mode by default using "),lde=a("code"),Xqo=o("model.eval()"),zqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ide=a("code"),Vqo=o("model.train()"),Wqo=l(),dde=a("p"),Qqo=o("Examples:"),Hqo=l(),f(py.$$.fragment),c7e=l(),Ud=a("h2"),_v=a("a"),cde=a("span"),f(_y.$$.fragment),Uqo=l(),fde=a("span"),Jqo=o("AutoModelForImageSegmentation"),f7e=l(),fr=a("div"),f(uy.$$.fragment),Yqo=l(),Jd=a("p"),Kqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),mde=a("code"),Zqo=o("from_pretrained()"),eGo=o("class method or the "),gde=a("code"),oGo=o("from_config()"),rGo=o(`class
method.`),tGo=l(),by=a("p"),aGo=o("This class cannot be instantiated directly using "),hde=a("code"),nGo=o("__init__()"),sGo=o(" (throws an error)."),lGo=l(),at=a("div"),f(vy.$$.fragment),iGo=l(),pde=a("p"),dGo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),cGo=l(),Yd=a("p"),fGo=o(`Note:
Loading a model from its configuration file does `),_de=a("strong"),mGo=o("not"),gGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ude=a("code"),hGo=o("from_pretrained()"),pGo=o("to load the model weights."),_Go=l(),bde=a("p"),uGo=o("Examples:"),bGo=l(),f(Ty.$$.fragment),vGo=l(),Je=a("div"),f(Fy.$$.fragment),TGo=l(),vde=a("p"),FGo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),CGo=l(),nn=a("p"),MGo=o("The model class to instantiate is selected based on the "),Tde=a("code"),EGo=o("model_type"),yGo=o(` property of the config object (either
passed as an argument or loaded from `),Fde=a("code"),wGo=o("pretrained_model_name_or_path"),AGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cde=a("code"),LGo=o("pretrained_model_name_or_path"),BGo=o(":"),xGo=l(),Mde=a("ul"),uv=a("li"),Ede=a("strong"),kGo=o("detr"),RGo=o(" \u2014 "),kN=a("a"),SGo=o("DetrForSegmentation"),PGo=o(" (DETR model)"),$Go=l(),bv=a("p"),IGo=o("The model is set in evaluation mode by default using "),yde=a("code"),jGo=o("model.eval()"),NGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wde=a("code"),DGo=o("model.train()"),qGo=l(),Ade=a("p"),GGo=o("Examples:"),OGo=l(),f(Cy.$$.fragment),m7e=l(),Kd=a("h2"),vv=a("a"),Lde=a("span"),f(My.$$.fragment),XGo=l(),Bde=a("span"),zGo=o("AutoModelForSemanticSegmentation"),g7e=l(),mr=a("div"),f(Ey.$$.fragment),VGo=l(),Zd=a("p"),WGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),xde=a("code"),QGo=o("from_pretrained()"),HGo=o("class method or the "),kde=a("code"),UGo=o("from_config()"),JGo=o(`class
method.`),YGo=l(),yy=a("p"),KGo=o("This class cannot be instantiated directly using "),Rde=a("code"),ZGo=o("__init__()"),eOo=o(" (throws an error)."),oOo=l(),nt=a("div"),f(wy.$$.fragment),rOo=l(),Sde=a("p"),tOo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),aOo=l(),ec=a("p"),nOo=o(`Note:
Loading a model from its configuration file does `),Pde=a("strong"),sOo=o("not"),lOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$de=a("code"),iOo=o("from_pretrained()"),dOo=o("to load the model weights."),cOo=l(),Ide=a("p"),fOo=o("Examples:"),mOo=l(),f(Ay.$$.fragment),gOo=l(),Ye=a("div"),f(Ly.$$.fragment),hOo=l(),jde=a("p"),pOo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),_Oo=l(),sn=a("p"),uOo=o("The model class to instantiate is selected based on the "),Nde=a("code"),bOo=o("model_type"),vOo=o(` property of the config object (either
passed as an argument or loaded from `),Dde=a("code"),TOo=o("pretrained_model_name_or_path"),FOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qde=a("code"),COo=o("pretrained_model_name_or_path"),MOo=o(":"),EOo=l(),By=a("ul"),Tv=a("li"),Gde=a("strong"),yOo=o("beit"),wOo=o(" \u2014 "),RN=a("a"),AOo=o("BeitForSemanticSegmentation"),LOo=o(" (BEiT model)"),BOo=l(),Fv=a("li"),Ode=a("strong"),xOo=o("segformer"),kOo=o(" \u2014 "),SN=a("a"),ROo=o("SegformerForSemanticSegmentation"),SOo=o(" (SegFormer model)"),POo=l(),Cv=a("p"),$Oo=o("The model is set in evaluation mode by default using "),Xde=a("code"),IOo=o("model.eval()"),jOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zde=a("code"),NOo=o("model.train()"),DOo=l(),Vde=a("p"),qOo=o("Examples:"),GOo=l(),f(xy.$$.fragment),h7e=l(),oc=a("h2"),Mv=a("a"),Wde=a("span"),f(ky.$$.fragment),OOo=l(),Qde=a("span"),XOo=o("TFAutoModel"),p7e=l(),gr=a("div"),f(Ry.$$.fragment),zOo=l(),rc=a("p"),VOo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Hde=a("code"),WOo=o("from_pretrained()"),QOo=o("class method or the "),Ude=a("code"),HOo=o("from_config()"),UOo=o(`class
method.`),JOo=l(),Sy=a("p"),YOo=o("This class cannot be instantiated directly using "),Jde=a("code"),KOo=o("__init__()"),ZOo=o(" (throws an error)."),eXo=l(),st=a("div"),f(Py.$$.fragment),oXo=l(),Yde=a("p"),rXo=o("Instantiates one of the base model classes of the library from a configuration."),tXo=l(),tc=a("p"),aXo=o(`Note:
Loading a model from its configuration file does `),Kde=a("strong"),nXo=o("not"),sXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zde=a("code"),lXo=o("from_pretrained()"),iXo=o("to load the model weights."),dXo=l(),ece=a("p"),cXo=o("Examples:"),fXo=l(),f($y.$$.fragment),mXo=l(),go=a("div"),f(Iy.$$.fragment),gXo=l(),oce=a("p"),hXo=o("Instantiate one of the base model classes of the library from a pretrained model."),pXo=l(),ln=a("p"),_Xo=o("The model class to instantiate is selected based on the "),rce=a("code"),uXo=o("model_type"),bXo=o(` property of the config object (either
passed as an argument or loaded from `),tce=a("code"),vXo=o("pretrained_model_name_or_path"),TXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ace=a("code"),FXo=o("pretrained_model_name_or_path"),CXo=o(":"),MXo=l(),B=a("ul"),Ev=a("li"),nce=a("strong"),EXo=o("albert"),yXo=o(" \u2014 "),PN=a("a"),wXo=o("TFAlbertModel"),AXo=o(" (ALBERT model)"),LXo=l(),yv=a("li"),sce=a("strong"),BXo=o("bart"),xXo=o(" \u2014 "),$N=a("a"),kXo=o("TFBartModel"),RXo=o(" (BART model)"),SXo=l(),wv=a("li"),lce=a("strong"),PXo=o("bert"),$Xo=o(" \u2014 "),IN=a("a"),IXo=o("TFBertModel"),jXo=o(" (BERT model)"),NXo=l(),Av=a("li"),ice=a("strong"),DXo=o("blenderbot"),qXo=o(" \u2014 "),jN=a("a"),GXo=o("TFBlenderbotModel"),OXo=o(" (Blenderbot model)"),XXo=l(),Lv=a("li"),dce=a("strong"),zXo=o("blenderbot-small"),VXo=o(" \u2014 "),NN=a("a"),WXo=o("TFBlenderbotSmallModel"),QXo=o(" (BlenderbotSmall model)"),HXo=l(),Bv=a("li"),cce=a("strong"),UXo=o("camembert"),JXo=o(" \u2014 "),DN=a("a"),YXo=o("TFCamembertModel"),KXo=o(" (CamemBERT model)"),ZXo=l(),xv=a("li"),fce=a("strong"),ezo=o("clip"),ozo=o(" \u2014 "),qN=a("a"),rzo=o("TFCLIPModel"),tzo=o(" (CLIP model)"),azo=l(),kv=a("li"),mce=a("strong"),nzo=o("convbert"),szo=o(" \u2014 "),GN=a("a"),lzo=o("TFConvBertModel"),izo=o(" (ConvBERT model)"),dzo=l(),Rv=a("li"),gce=a("strong"),czo=o("convnext"),fzo=o(" \u2014 "),ON=a("a"),mzo=o("TFConvNextModel"),gzo=o(" (ConvNext model)"),hzo=l(),Sv=a("li"),hce=a("strong"),pzo=o("ctrl"),_zo=o(" \u2014 "),XN=a("a"),uzo=o("TFCTRLModel"),bzo=o(" (CTRL model)"),vzo=l(),Pv=a("li"),pce=a("strong"),Tzo=o("deberta"),Fzo=o(" \u2014 "),zN=a("a"),Czo=o("TFDebertaModel"),Mzo=o(" (DeBERTa model)"),Ezo=l(),$v=a("li"),_ce=a("strong"),yzo=o("deberta-v2"),wzo=o(" \u2014 "),VN=a("a"),Azo=o("TFDebertaV2Model"),Lzo=o(" (DeBERTa-v2 model)"),Bzo=l(),Iv=a("li"),uce=a("strong"),xzo=o("distilbert"),kzo=o(" \u2014 "),WN=a("a"),Rzo=o("TFDistilBertModel"),Szo=o(" (DistilBERT model)"),Pzo=l(),jv=a("li"),bce=a("strong"),$zo=o("dpr"),Izo=o(" \u2014 "),QN=a("a"),jzo=o("TFDPRQuestionEncoder"),Nzo=o(" (DPR model)"),Dzo=l(),Nv=a("li"),vce=a("strong"),qzo=o("electra"),Gzo=o(" \u2014 "),HN=a("a"),Ozo=o("TFElectraModel"),Xzo=o(" (ELECTRA model)"),zzo=l(),Dv=a("li"),Tce=a("strong"),Vzo=o("flaubert"),Wzo=o(" \u2014 "),UN=a("a"),Qzo=o("TFFlaubertModel"),Hzo=o(" (FlauBERT model)"),Uzo=l(),Ss=a("li"),Fce=a("strong"),Jzo=o("funnel"),Yzo=o(" \u2014 "),JN=a("a"),Kzo=o("TFFunnelModel"),Zzo=o(" or "),YN=a("a"),eVo=o("TFFunnelBaseModel"),oVo=o(" (Funnel Transformer model)"),rVo=l(),qv=a("li"),Cce=a("strong"),tVo=o("gpt2"),aVo=o(" \u2014 "),KN=a("a"),nVo=o("TFGPT2Model"),sVo=o(" (OpenAI GPT-2 model)"),lVo=l(),Gv=a("li"),Mce=a("strong"),iVo=o("hubert"),dVo=o(" \u2014 "),ZN=a("a"),cVo=o("TFHubertModel"),fVo=o(" (Hubert model)"),mVo=l(),Ov=a("li"),Ece=a("strong"),gVo=o("layoutlm"),hVo=o(" \u2014 "),eD=a("a"),pVo=o("TFLayoutLMModel"),_Vo=o(" (LayoutLM model)"),uVo=l(),Xv=a("li"),yce=a("strong"),bVo=o("led"),vVo=o(" \u2014 "),oD=a("a"),TVo=o("TFLEDModel"),FVo=o(" (LED model)"),CVo=l(),zv=a("li"),wce=a("strong"),MVo=o("longformer"),EVo=o(" \u2014 "),rD=a("a"),yVo=o("TFLongformerModel"),wVo=o(" (Longformer model)"),AVo=l(),Vv=a("li"),Ace=a("strong"),LVo=o("lxmert"),BVo=o(" \u2014 "),tD=a("a"),xVo=o("TFLxmertModel"),kVo=o(" (LXMERT model)"),RVo=l(),Wv=a("li"),Lce=a("strong"),SVo=o("marian"),PVo=o(" \u2014 "),aD=a("a"),$Vo=o("TFMarianModel"),IVo=o(" (Marian model)"),jVo=l(),Qv=a("li"),Bce=a("strong"),NVo=o("mbart"),DVo=o(" \u2014 "),nD=a("a"),qVo=o("TFMBartModel"),GVo=o(" (mBART model)"),OVo=l(),Hv=a("li"),xce=a("strong"),XVo=o("mobilebert"),zVo=o(" \u2014 "),sD=a("a"),VVo=o("TFMobileBertModel"),WVo=o(" (MobileBERT model)"),QVo=l(),Uv=a("li"),kce=a("strong"),HVo=o("mpnet"),UVo=o(" \u2014 "),lD=a("a"),JVo=o("TFMPNetModel"),YVo=o(" (MPNet model)"),KVo=l(),Jv=a("li"),Rce=a("strong"),ZVo=o("mt5"),eWo=o(" \u2014 "),iD=a("a"),oWo=o("TFMT5Model"),rWo=o(" (mT5 model)"),tWo=l(),Yv=a("li"),Sce=a("strong"),aWo=o("openai-gpt"),nWo=o(" \u2014 "),dD=a("a"),sWo=o("TFOpenAIGPTModel"),lWo=o(" (OpenAI GPT model)"),iWo=l(),Kv=a("li"),Pce=a("strong"),dWo=o("pegasus"),cWo=o(" \u2014 "),cD=a("a"),fWo=o("TFPegasusModel"),mWo=o(" (Pegasus model)"),gWo=l(),Zv=a("li"),$ce=a("strong"),hWo=o("rembert"),pWo=o(" \u2014 "),fD=a("a"),_Wo=o("TFRemBertModel"),uWo=o(" (RemBERT model)"),bWo=l(),eT=a("li"),Ice=a("strong"),vWo=o("roberta"),TWo=o(" \u2014 "),mD=a("a"),FWo=o("TFRobertaModel"),CWo=o(" (RoBERTa model)"),MWo=l(),oT=a("li"),jce=a("strong"),EWo=o("roformer"),yWo=o(" \u2014 "),gD=a("a"),wWo=o("TFRoFormerModel"),AWo=o(" (RoFormer model)"),LWo=l(),rT=a("li"),Nce=a("strong"),BWo=o("speech_to_text"),xWo=o(" \u2014 "),hD=a("a"),kWo=o("TFSpeech2TextModel"),RWo=o(" (Speech2Text model)"),SWo=l(),tT=a("li"),Dce=a("strong"),PWo=o("t5"),$Wo=o(" \u2014 "),pD=a("a"),IWo=o("TFT5Model"),jWo=o(" (T5 model)"),NWo=l(),aT=a("li"),qce=a("strong"),DWo=o("tapas"),qWo=o(" \u2014 "),_D=a("a"),GWo=o("TFTapasModel"),OWo=o(" (TAPAS model)"),XWo=l(),nT=a("li"),Gce=a("strong"),zWo=o("transfo-xl"),VWo=o(" \u2014 "),uD=a("a"),WWo=o("TFTransfoXLModel"),QWo=o(" (Transformer-XL model)"),HWo=l(),sT=a("li"),Oce=a("strong"),UWo=o("vit"),JWo=o(" \u2014 "),bD=a("a"),YWo=o("TFViTModel"),KWo=o(" (ViT model)"),ZWo=l(),lT=a("li"),Xce=a("strong"),eQo=o("wav2vec2"),oQo=o(" \u2014 "),vD=a("a"),rQo=o("TFWav2Vec2Model"),tQo=o(" (Wav2Vec2 model)"),aQo=l(),iT=a("li"),zce=a("strong"),nQo=o("xlm"),sQo=o(" \u2014 "),TD=a("a"),lQo=o("TFXLMModel"),iQo=o(" (XLM model)"),dQo=l(),dT=a("li"),Vce=a("strong"),cQo=o("xlm-roberta"),fQo=o(" \u2014 "),FD=a("a"),mQo=o("TFXLMRobertaModel"),gQo=o(" (XLM-RoBERTa model)"),hQo=l(),cT=a("li"),Wce=a("strong"),pQo=o("xlnet"),_Qo=o(" \u2014 "),CD=a("a"),uQo=o("TFXLNetModel"),bQo=o(" (XLNet model)"),vQo=l(),Qce=a("p"),TQo=o("Examples:"),FQo=l(),f(jy.$$.fragment),_7e=l(),ac=a("h2"),fT=a("a"),Hce=a("span"),f(Ny.$$.fragment),CQo=l(),Uce=a("span"),MQo=o("TFAutoModelForPreTraining"),u7e=l(),hr=a("div"),f(Dy.$$.fragment),EQo=l(),nc=a("p"),yQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jce=a("code"),wQo=o("from_pretrained()"),AQo=o("class method or the "),Yce=a("code"),LQo=o("from_config()"),BQo=o(`class
method.`),xQo=l(),qy=a("p"),kQo=o("This class cannot be instantiated directly using "),Kce=a("code"),RQo=o("__init__()"),SQo=o(" (throws an error)."),PQo=l(),lt=a("div"),f(Gy.$$.fragment),$Qo=l(),Zce=a("p"),IQo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),jQo=l(),sc=a("p"),NQo=o(`Note:
Loading a model from its configuration file does `),efe=a("strong"),DQo=o("not"),qQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ofe=a("code"),GQo=o("from_pretrained()"),OQo=o("to load the model weights."),XQo=l(),rfe=a("p"),zQo=o("Examples:"),VQo=l(),f(Oy.$$.fragment),WQo=l(),ho=a("div"),f(Xy.$$.fragment),QQo=l(),tfe=a("p"),HQo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),UQo=l(),dn=a("p"),JQo=o("The model class to instantiate is selected based on the "),afe=a("code"),YQo=o("model_type"),KQo=o(` property of the config object (either
passed as an argument or loaded from `),nfe=a("code"),ZQo=o("pretrained_model_name_or_path"),eHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sfe=a("code"),oHo=o("pretrained_model_name_or_path"),rHo=o(":"),tHo=l(),H=a("ul"),mT=a("li"),lfe=a("strong"),aHo=o("albert"),nHo=o(" \u2014 "),MD=a("a"),sHo=o("TFAlbertForPreTraining"),lHo=o(" (ALBERT model)"),iHo=l(),gT=a("li"),ife=a("strong"),dHo=o("bart"),cHo=o(" \u2014 "),ED=a("a"),fHo=o("TFBartForConditionalGeneration"),mHo=o(" (BART model)"),gHo=l(),hT=a("li"),dfe=a("strong"),hHo=o("bert"),pHo=o(" \u2014 "),yD=a("a"),_Ho=o("TFBertForPreTraining"),uHo=o(" (BERT model)"),bHo=l(),pT=a("li"),cfe=a("strong"),vHo=o("camembert"),THo=o(" \u2014 "),wD=a("a"),FHo=o("TFCamembertForMaskedLM"),CHo=o(" (CamemBERT model)"),MHo=l(),_T=a("li"),ffe=a("strong"),EHo=o("ctrl"),yHo=o(" \u2014 "),AD=a("a"),wHo=o("TFCTRLLMHeadModel"),AHo=o(" (CTRL model)"),LHo=l(),uT=a("li"),mfe=a("strong"),BHo=o("distilbert"),xHo=o(" \u2014 "),LD=a("a"),kHo=o("TFDistilBertForMaskedLM"),RHo=o(" (DistilBERT model)"),SHo=l(),bT=a("li"),gfe=a("strong"),PHo=o("electra"),$Ho=o(" \u2014 "),BD=a("a"),IHo=o("TFElectraForPreTraining"),jHo=o(" (ELECTRA model)"),NHo=l(),vT=a("li"),hfe=a("strong"),DHo=o("flaubert"),qHo=o(" \u2014 "),xD=a("a"),GHo=o("TFFlaubertWithLMHeadModel"),OHo=o(" (FlauBERT model)"),XHo=l(),TT=a("li"),pfe=a("strong"),zHo=o("funnel"),VHo=o(" \u2014 "),kD=a("a"),WHo=o("TFFunnelForPreTraining"),QHo=o(" (Funnel Transformer model)"),HHo=l(),FT=a("li"),_fe=a("strong"),UHo=o("gpt2"),JHo=o(" \u2014 "),RD=a("a"),YHo=o("TFGPT2LMHeadModel"),KHo=o(" (OpenAI GPT-2 model)"),ZHo=l(),CT=a("li"),ufe=a("strong"),eUo=o("layoutlm"),oUo=o(" \u2014 "),SD=a("a"),rUo=o("TFLayoutLMForMaskedLM"),tUo=o(" (LayoutLM model)"),aUo=l(),MT=a("li"),bfe=a("strong"),nUo=o("lxmert"),sUo=o(" \u2014 "),PD=a("a"),lUo=o("TFLxmertForPreTraining"),iUo=o(" (LXMERT model)"),dUo=l(),ET=a("li"),vfe=a("strong"),cUo=o("mobilebert"),fUo=o(" \u2014 "),$D=a("a"),mUo=o("TFMobileBertForPreTraining"),gUo=o(" (MobileBERT model)"),hUo=l(),yT=a("li"),Tfe=a("strong"),pUo=o("mpnet"),_Uo=o(" \u2014 "),ID=a("a"),uUo=o("TFMPNetForMaskedLM"),bUo=o(" (MPNet model)"),vUo=l(),wT=a("li"),Ffe=a("strong"),TUo=o("openai-gpt"),FUo=o(" \u2014 "),jD=a("a"),CUo=o("TFOpenAIGPTLMHeadModel"),MUo=o(" (OpenAI GPT model)"),EUo=l(),AT=a("li"),Cfe=a("strong"),yUo=o("roberta"),wUo=o(" \u2014 "),ND=a("a"),AUo=o("TFRobertaForMaskedLM"),LUo=o(" (RoBERTa model)"),BUo=l(),LT=a("li"),Mfe=a("strong"),xUo=o("t5"),kUo=o(" \u2014 "),DD=a("a"),RUo=o("TFT5ForConditionalGeneration"),SUo=o(" (T5 model)"),PUo=l(),BT=a("li"),Efe=a("strong"),$Uo=o("tapas"),IUo=o(" \u2014 "),qD=a("a"),jUo=o("TFTapasForMaskedLM"),NUo=o(" (TAPAS model)"),DUo=l(),xT=a("li"),yfe=a("strong"),qUo=o("transfo-xl"),GUo=o(" \u2014 "),GD=a("a"),OUo=o("TFTransfoXLLMHeadModel"),XUo=o(" (Transformer-XL model)"),zUo=l(),kT=a("li"),wfe=a("strong"),VUo=o("xlm"),WUo=o(" \u2014 "),OD=a("a"),QUo=o("TFXLMWithLMHeadModel"),HUo=o(" (XLM model)"),UUo=l(),RT=a("li"),Afe=a("strong"),JUo=o("xlm-roberta"),YUo=o(" \u2014 "),XD=a("a"),KUo=o("TFXLMRobertaForMaskedLM"),ZUo=o(" (XLM-RoBERTa model)"),eJo=l(),ST=a("li"),Lfe=a("strong"),oJo=o("xlnet"),rJo=o(" \u2014 "),zD=a("a"),tJo=o("TFXLNetLMHeadModel"),aJo=o(" (XLNet model)"),nJo=l(),Bfe=a("p"),sJo=o("Examples:"),lJo=l(),f(zy.$$.fragment),b7e=l(),lc=a("h2"),PT=a("a"),xfe=a("span"),f(Vy.$$.fragment),iJo=l(),kfe=a("span"),dJo=o("TFAutoModelForCausalLM"),v7e=l(),pr=a("div"),f(Wy.$$.fragment),cJo=l(),ic=a("p"),fJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Rfe=a("code"),mJo=o("from_pretrained()"),gJo=o("class method or the "),Sfe=a("code"),hJo=o("from_config()"),pJo=o(`class
method.`),_Jo=l(),Qy=a("p"),uJo=o("This class cannot be instantiated directly using "),Pfe=a("code"),bJo=o("__init__()"),vJo=o(" (throws an error)."),TJo=l(),it=a("div"),f(Hy.$$.fragment),FJo=l(),$fe=a("p"),CJo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),MJo=l(),dc=a("p"),EJo=o(`Note:
Loading a model from its configuration file does `),Ife=a("strong"),yJo=o("not"),wJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jfe=a("code"),AJo=o("from_pretrained()"),LJo=o("to load the model weights."),BJo=l(),Nfe=a("p"),xJo=o("Examples:"),kJo=l(),f(Uy.$$.fragment),RJo=l(),po=a("div"),f(Jy.$$.fragment),SJo=l(),Dfe=a("p"),PJo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Jo=l(),cn=a("p"),IJo=o("The model class to instantiate is selected based on the "),qfe=a("code"),jJo=o("model_type"),NJo=o(` property of the config object (either
passed as an argument or loaded from `),Gfe=a("code"),DJo=o("pretrained_model_name_or_path"),qJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ofe=a("code"),GJo=o("pretrained_model_name_or_path"),OJo=o(":"),XJo=l(),he=a("ul"),$T=a("li"),Xfe=a("strong"),zJo=o("bert"),VJo=o(" \u2014 "),VD=a("a"),WJo=o("TFBertLMHeadModel"),QJo=o(" (BERT model)"),HJo=l(),IT=a("li"),zfe=a("strong"),UJo=o("ctrl"),JJo=o(" \u2014 "),WD=a("a"),YJo=o("TFCTRLLMHeadModel"),KJo=o(" (CTRL model)"),ZJo=l(),jT=a("li"),Vfe=a("strong"),eYo=o("gpt2"),oYo=o(" \u2014 "),QD=a("a"),rYo=o("TFGPT2LMHeadModel"),tYo=o(" (OpenAI GPT-2 model)"),aYo=l(),NT=a("li"),Wfe=a("strong"),nYo=o("openai-gpt"),sYo=o(" \u2014 "),HD=a("a"),lYo=o("TFOpenAIGPTLMHeadModel"),iYo=o(" (OpenAI GPT model)"),dYo=l(),DT=a("li"),Qfe=a("strong"),cYo=o("rembert"),fYo=o(" \u2014 "),UD=a("a"),mYo=o("TFRemBertForCausalLM"),gYo=o(" (RemBERT model)"),hYo=l(),qT=a("li"),Hfe=a("strong"),pYo=o("roberta"),_Yo=o(" \u2014 "),JD=a("a"),uYo=o("TFRobertaForCausalLM"),bYo=o(" (RoBERTa model)"),vYo=l(),GT=a("li"),Ufe=a("strong"),TYo=o("roformer"),FYo=o(" \u2014 "),YD=a("a"),CYo=o("TFRoFormerForCausalLM"),MYo=o(" (RoFormer model)"),EYo=l(),OT=a("li"),Jfe=a("strong"),yYo=o("transfo-xl"),wYo=o(" \u2014 "),KD=a("a"),AYo=o("TFTransfoXLLMHeadModel"),LYo=o(" (Transformer-XL model)"),BYo=l(),XT=a("li"),Yfe=a("strong"),xYo=o("xlm"),kYo=o(" \u2014 "),ZD=a("a"),RYo=o("TFXLMWithLMHeadModel"),SYo=o(" (XLM model)"),PYo=l(),zT=a("li"),Kfe=a("strong"),$Yo=o("xlnet"),IYo=o(" \u2014 "),eq=a("a"),jYo=o("TFXLNetLMHeadModel"),NYo=o(" (XLNet model)"),DYo=l(),Zfe=a("p"),qYo=o("Examples:"),GYo=l(),f(Yy.$$.fragment),T7e=l(),cc=a("h2"),VT=a("a"),eme=a("span"),f(Ky.$$.fragment),OYo=l(),ome=a("span"),XYo=o("TFAutoModelForImageClassification"),F7e=l(),_r=a("div"),f(Zy.$$.fragment),zYo=l(),fc=a("p"),VYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rme=a("code"),WYo=o("from_pretrained()"),QYo=o("class method or the "),tme=a("code"),HYo=o("from_config()"),UYo=o(`class
method.`),JYo=l(),ew=a("p"),YYo=o("This class cannot be instantiated directly using "),ame=a("code"),KYo=o("__init__()"),ZYo=o(" (throws an error)."),eKo=l(),dt=a("div"),f(ow.$$.fragment),oKo=l(),nme=a("p"),rKo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),tKo=l(),mc=a("p"),aKo=o(`Note:
Loading a model from its configuration file does `),sme=a("strong"),nKo=o("not"),sKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lme=a("code"),lKo=o("from_pretrained()"),iKo=o("to load the model weights."),dKo=l(),ime=a("p"),cKo=o("Examples:"),fKo=l(),f(rw.$$.fragment),mKo=l(),_o=a("div"),f(tw.$$.fragment),gKo=l(),dme=a("p"),hKo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),pKo=l(),fn=a("p"),_Ko=o("The model class to instantiate is selected based on the "),cme=a("code"),uKo=o("model_type"),bKo=o(` property of the config object (either
passed as an argument or loaded from `),fme=a("code"),vKo=o("pretrained_model_name_or_path"),TKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mme=a("code"),FKo=o("pretrained_model_name_or_path"),CKo=o(":"),MKo=l(),aw=a("ul"),WT=a("li"),gme=a("strong"),EKo=o("convnext"),yKo=o(" \u2014 "),oq=a("a"),wKo=o("TFConvNextForImageClassification"),AKo=o(" (ConvNext model)"),LKo=l(),QT=a("li"),hme=a("strong"),BKo=o("vit"),xKo=o(" \u2014 "),rq=a("a"),kKo=o("TFViTForImageClassification"),RKo=o(" (ViT model)"),SKo=l(),pme=a("p"),PKo=o("Examples:"),$Ko=l(),f(nw.$$.fragment),C7e=l(),gc=a("h2"),HT=a("a"),_me=a("span"),f(sw.$$.fragment),IKo=l(),ume=a("span"),jKo=o("TFAutoModelForMaskedLM"),M7e=l(),ur=a("div"),f(lw.$$.fragment),NKo=l(),hc=a("p"),DKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bme=a("code"),qKo=o("from_pretrained()"),GKo=o("class method or the "),vme=a("code"),OKo=o("from_config()"),XKo=o(`class
method.`),zKo=l(),iw=a("p"),VKo=o("This class cannot be instantiated directly using "),Tme=a("code"),WKo=o("__init__()"),QKo=o(" (throws an error)."),HKo=l(),ct=a("div"),f(dw.$$.fragment),UKo=l(),Fme=a("p"),JKo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),YKo=l(),pc=a("p"),KKo=o(`Note:
Loading a model from its configuration file does `),Cme=a("strong"),ZKo=o("not"),eZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mme=a("code"),oZo=o("from_pretrained()"),rZo=o("to load the model weights."),tZo=l(),Eme=a("p"),aZo=o("Examples:"),nZo=l(),f(cw.$$.fragment),sZo=l(),uo=a("div"),f(fw.$$.fragment),lZo=l(),yme=a("p"),iZo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dZo=l(),mn=a("p"),cZo=o("The model class to instantiate is selected based on the "),wme=a("code"),fZo=o("model_type"),mZo=o(` property of the config object (either
passed as an argument or loaded from `),Ame=a("code"),gZo=o("pretrained_model_name_or_path"),hZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=a("code"),pZo=o("pretrained_model_name_or_path"),_Zo=o(":"),uZo=l(),Y=a("ul"),UT=a("li"),Bme=a("strong"),bZo=o("albert"),vZo=o(" \u2014 "),tq=a("a"),TZo=o("TFAlbertForMaskedLM"),FZo=o(" (ALBERT model)"),CZo=l(),JT=a("li"),xme=a("strong"),MZo=o("bert"),EZo=o(" \u2014 "),aq=a("a"),yZo=o("TFBertForMaskedLM"),wZo=o(" (BERT model)"),AZo=l(),YT=a("li"),kme=a("strong"),LZo=o("camembert"),BZo=o(" \u2014 "),nq=a("a"),xZo=o("TFCamembertForMaskedLM"),kZo=o(" (CamemBERT model)"),RZo=l(),KT=a("li"),Rme=a("strong"),SZo=o("convbert"),PZo=o(" \u2014 "),sq=a("a"),$Zo=o("TFConvBertForMaskedLM"),IZo=o(" (ConvBERT model)"),jZo=l(),ZT=a("li"),Sme=a("strong"),NZo=o("deberta"),DZo=o(" \u2014 "),lq=a("a"),qZo=o("TFDebertaForMaskedLM"),GZo=o(" (DeBERTa model)"),OZo=l(),e8=a("li"),Pme=a("strong"),XZo=o("deberta-v2"),zZo=o(" \u2014 "),iq=a("a"),VZo=o("TFDebertaV2ForMaskedLM"),WZo=o(" (DeBERTa-v2 model)"),QZo=l(),o8=a("li"),$me=a("strong"),HZo=o("distilbert"),UZo=o(" \u2014 "),dq=a("a"),JZo=o("TFDistilBertForMaskedLM"),YZo=o(" (DistilBERT model)"),KZo=l(),r8=a("li"),Ime=a("strong"),ZZo=o("electra"),eer=o(" \u2014 "),cq=a("a"),oer=o("TFElectraForMaskedLM"),rer=o(" (ELECTRA model)"),ter=l(),t8=a("li"),jme=a("strong"),aer=o("flaubert"),ner=o(" \u2014 "),fq=a("a"),ser=o("TFFlaubertWithLMHeadModel"),ler=o(" (FlauBERT model)"),ier=l(),a8=a("li"),Nme=a("strong"),der=o("funnel"),cer=o(" \u2014 "),mq=a("a"),fer=o("TFFunnelForMaskedLM"),mer=o(" (Funnel Transformer model)"),ger=l(),n8=a("li"),Dme=a("strong"),her=o("layoutlm"),per=o(" \u2014 "),gq=a("a"),_er=o("TFLayoutLMForMaskedLM"),uer=o(" (LayoutLM model)"),ber=l(),s8=a("li"),qme=a("strong"),ver=o("longformer"),Ter=o(" \u2014 "),hq=a("a"),Fer=o("TFLongformerForMaskedLM"),Cer=o(" (Longformer model)"),Mer=l(),l8=a("li"),Gme=a("strong"),Eer=o("mobilebert"),yer=o(" \u2014 "),pq=a("a"),wer=o("TFMobileBertForMaskedLM"),Aer=o(" (MobileBERT model)"),Ler=l(),i8=a("li"),Ome=a("strong"),Ber=o("mpnet"),xer=o(" \u2014 "),_q=a("a"),ker=o("TFMPNetForMaskedLM"),Rer=o(" (MPNet model)"),Ser=l(),d8=a("li"),Xme=a("strong"),Per=o("rembert"),$er=o(" \u2014 "),uq=a("a"),Ier=o("TFRemBertForMaskedLM"),jer=o(" (RemBERT model)"),Ner=l(),c8=a("li"),zme=a("strong"),Der=o("roberta"),qer=o(" \u2014 "),bq=a("a"),Ger=o("TFRobertaForMaskedLM"),Oer=o(" (RoBERTa model)"),Xer=l(),f8=a("li"),Vme=a("strong"),zer=o("roformer"),Ver=o(" \u2014 "),vq=a("a"),Wer=o("TFRoFormerForMaskedLM"),Qer=o(" (RoFormer model)"),Her=l(),m8=a("li"),Wme=a("strong"),Uer=o("tapas"),Jer=o(" \u2014 "),Tq=a("a"),Yer=o("TFTapasForMaskedLM"),Ker=o(" (TAPAS model)"),Zer=l(),g8=a("li"),Qme=a("strong"),eor=o("xlm"),oor=o(" \u2014 "),Fq=a("a"),ror=o("TFXLMWithLMHeadModel"),tor=o(" (XLM model)"),aor=l(),h8=a("li"),Hme=a("strong"),nor=o("xlm-roberta"),sor=o(" \u2014 "),Cq=a("a"),lor=o("TFXLMRobertaForMaskedLM"),ior=o(" (XLM-RoBERTa model)"),dor=l(),Ume=a("p"),cor=o("Examples:"),mor=l(),f(mw.$$.fragment),E7e=l(),_c=a("h2"),p8=a("a"),Jme=a("span"),f(gw.$$.fragment),gor=l(),Yme=a("span"),hor=o("TFAutoModelForSeq2SeqLM"),y7e=l(),br=a("div"),f(hw.$$.fragment),por=l(),uc=a("p"),_or=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Kme=a("code"),uor=o("from_pretrained()"),bor=o("class method or the "),Zme=a("code"),vor=o("from_config()"),Tor=o(`class
method.`),For=l(),pw=a("p"),Cor=o("This class cannot be instantiated directly using "),ege=a("code"),Mor=o("__init__()"),Eor=o(" (throws an error)."),yor=l(),ft=a("div"),f(_w.$$.fragment),wor=l(),oge=a("p"),Aor=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Lor=l(),bc=a("p"),Bor=o(`Note:
Loading a model from its configuration file does `),rge=a("strong"),xor=o("not"),kor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tge=a("code"),Ror=o("from_pretrained()"),Sor=o("to load the model weights."),Por=l(),age=a("p"),$or=o("Examples:"),Ior=l(),f(uw.$$.fragment),jor=l(),bo=a("div"),f(bw.$$.fragment),Nor=l(),nge=a("p"),Dor=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qor=l(),gn=a("p"),Gor=o("The model class to instantiate is selected based on the "),sge=a("code"),Oor=o("model_type"),Xor=o(` property of the config object (either
passed as an argument or loaded from `),lge=a("code"),zor=o("pretrained_model_name_or_path"),Vor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=a("code"),Wor=o("pretrained_model_name_or_path"),Qor=o(":"),Hor=l(),pe=a("ul"),_8=a("li"),dge=a("strong"),Uor=o("bart"),Jor=o(" \u2014 "),Mq=a("a"),Yor=o("TFBartForConditionalGeneration"),Kor=o(" (BART model)"),Zor=l(),u8=a("li"),cge=a("strong"),err=o("blenderbot"),orr=o(" \u2014 "),Eq=a("a"),rrr=o("TFBlenderbotForConditionalGeneration"),trr=o(" (Blenderbot model)"),arr=l(),b8=a("li"),fge=a("strong"),nrr=o("blenderbot-small"),srr=o(" \u2014 "),yq=a("a"),lrr=o("TFBlenderbotSmallForConditionalGeneration"),irr=o(" (BlenderbotSmall model)"),drr=l(),v8=a("li"),mge=a("strong"),crr=o("encoder-decoder"),frr=o(" \u2014 "),wq=a("a"),mrr=o("TFEncoderDecoderModel"),grr=o(" (Encoder decoder model)"),hrr=l(),T8=a("li"),gge=a("strong"),prr=o("led"),_rr=o(" \u2014 "),Aq=a("a"),urr=o("TFLEDForConditionalGeneration"),brr=o(" (LED model)"),vrr=l(),F8=a("li"),hge=a("strong"),Trr=o("marian"),Frr=o(" \u2014 "),Lq=a("a"),Crr=o("TFMarianMTModel"),Mrr=o(" (Marian model)"),Err=l(),C8=a("li"),pge=a("strong"),yrr=o("mbart"),wrr=o(" \u2014 "),Bq=a("a"),Arr=o("TFMBartForConditionalGeneration"),Lrr=o(" (mBART model)"),Brr=l(),M8=a("li"),_ge=a("strong"),xrr=o("mt5"),krr=o(" \u2014 "),xq=a("a"),Rrr=o("TFMT5ForConditionalGeneration"),Srr=o(" (mT5 model)"),Prr=l(),E8=a("li"),uge=a("strong"),$rr=o("pegasus"),Irr=o(" \u2014 "),kq=a("a"),jrr=o("TFPegasusForConditionalGeneration"),Nrr=o(" (Pegasus model)"),Drr=l(),y8=a("li"),bge=a("strong"),qrr=o("t5"),Grr=o(" \u2014 "),Rq=a("a"),Orr=o("TFT5ForConditionalGeneration"),Xrr=o(" (T5 model)"),zrr=l(),vge=a("p"),Vrr=o("Examples:"),Wrr=l(),f(vw.$$.fragment),w7e=l(),vc=a("h2"),w8=a("a"),Tge=a("span"),f(Tw.$$.fragment),Qrr=l(),Fge=a("span"),Hrr=o("TFAutoModelForSequenceClassification"),A7e=l(),vr=a("div"),f(Fw.$$.fragment),Urr=l(),Tc=a("p"),Jrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Cge=a("code"),Yrr=o("from_pretrained()"),Krr=o("class method or the "),Mge=a("code"),Zrr=o("from_config()"),etr=o(`class
method.`),otr=l(),Cw=a("p"),rtr=o("This class cannot be instantiated directly using "),Ege=a("code"),ttr=o("__init__()"),atr=o(" (throws an error)."),ntr=l(),mt=a("div"),f(Mw.$$.fragment),str=l(),yge=a("p"),ltr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),itr=l(),Fc=a("p"),dtr=o(`Note:
Loading a model from its configuration file does `),wge=a("strong"),ctr=o("not"),ftr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Age=a("code"),mtr=o("from_pretrained()"),gtr=o("to load the model weights."),htr=l(),Lge=a("p"),ptr=o("Examples:"),_tr=l(),f(Ew.$$.fragment),utr=l(),vo=a("div"),f(yw.$$.fragment),btr=l(),Bge=a("p"),vtr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ttr=l(),hn=a("p"),Ftr=o("The model class to instantiate is selected based on the "),xge=a("code"),Ctr=o("model_type"),Mtr=o(` property of the config object (either
passed as an argument or loaded from `),kge=a("code"),Etr=o("pretrained_model_name_or_path"),ytr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=a("code"),wtr=o("pretrained_model_name_or_path"),Atr=o(":"),Ltr=l(),X=a("ul"),A8=a("li"),Sge=a("strong"),Btr=o("albert"),xtr=o(" \u2014 "),Sq=a("a"),ktr=o("TFAlbertForSequenceClassification"),Rtr=o(" (ALBERT model)"),Str=l(),L8=a("li"),Pge=a("strong"),Ptr=o("bert"),$tr=o(" \u2014 "),Pq=a("a"),Itr=o("TFBertForSequenceClassification"),jtr=o(" (BERT model)"),Ntr=l(),B8=a("li"),$ge=a("strong"),Dtr=o("camembert"),qtr=o(" \u2014 "),$q=a("a"),Gtr=o("TFCamembertForSequenceClassification"),Otr=o(" (CamemBERT model)"),Xtr=l(),x8=a("li"),Ige=a("strong"),ztr=o("convbert"),Vtr=o(" \u2014 "),Iq=a("a"),Wtr=o("TFConvBertForSequenceClassification"),Qtr=o(" (ConvBERT model)"),Htr=l(),k8=a("li"),jge=a("strong"),Utr=o("ctrl"),Jtr=o(" \u2014 "),jq=a("a"),Ytr=o("TFCTRLForSequenceClassification"),Ktr=o(" (CTRL model)"),Ztr=l(),R8=a("li"),Nge=a("strong"),ear=o("deberta"),oar=o(" \u2014 "),Nq=a("a"),rar=o("TFDebertaForSequenceClassification"),tar=o(" (DeBERTa model)"),aar=l(),S8=a("li"),Dge=a("strong"),nar=o("deberta-v2"),sar=o(" \u2014 "),Dq=a("a"),lar=o("TFDebertaV2ForSequenceClassification"),iar=o(" (DeBERTa-v2 model)"),dar=l(),P8=a("li"),qge=a("strong"),car=o("distilbert"),far=o(" \u2014 "),qq=a("a"),mar=o("TFDistilBertForSequenceClassification"),gar=o(" (DistilBERT model)"),har=l(),$8=a("li"),Gge=a("strong"),par=o("electra"),_ar=o(" \u2014 "),Gq=a("a"),uar=o("TFElectraForSequenceClassification"),bar=o(" (ELECTRA model)"),Tar=l(),I8=a("li"),Oge=a("strong"),Far=o("flaubert"),Car=o(" \u2014 "),Oq=a("a"),Mar=o("TFFlaubertForSequenceClassification"),Ear=o(" (FlauBERT model)"),yar=l(),j8=a("li"),Xge=a("strong"),war=o("funnel"),Aar=o(" \u2014 "),Xq=a("a"),Lar=o("TFFunnelForSequenceClassification"),Bar=o(" (Funnel Transformer model)"),xar=l(),N8=a("li"),zge=a("strong"),kar=o("gpt2"),Rar=o(" \u2014 "),zq=a("a"),Sar=o("TFGPT2ForSequenceClassification"),Par=o(" (OpenAI GPT-2 model)"),$ar=l(),D8=a("li"),Vge=a("strong"),Iar=o("layoutlm"),jar=o(" \u2014 "),Vq=a("a"),Nar=o("TFLayoutLMForSequenceClassification"),Dar=o(" (LayoutLM model)"),qar=l(),q8=a("li"),Wge=a("strong"),Gar=o("longformer"),Oar=o(" \u2014 "),Wq=a("a"),Xar=o("TFLongformerForSequenceClassification"),zar=o(" (Longformer model)"),Var=l(),G8=a("li"),Qge=a("strong"),War=o("mobilebert"),Qar=o(" \u2014 "),Qq=a("a"),Har=o("TFMobileBertForSequenceClassification"),Uar=o(" (MobileBERT model)"),Jar=l(),O8=a("li"),Hge=a("strong"),Yar=o("mpnet"),Kar=o(" \u2014 "),Hq=a("a"),Zar=o("TFMPNetForSequenceClassification"),enr=o(" (MPNet model)"),onr=l(),X8=a("li"),Uge=a("strong"),rnr=o("openai-gpt"),tnr=o(" \u2014 "),Uq=a("a"),anr=o("TFOpenAIGPTForSequenceClassification"),nnr=o(" (OpenAI GPT model)"),snr=l(),z8=a("li"),Jge=a("strong"),lnr=o("rembert"),inr=o(" \u2014 "),Jq=a("a"),dnr=o("TFRemBertForSequenceClassification"),cnr=o(" (RemBERT model)"),fnr=l(),V8=a("li"),Yge=a("strong"),mnr=o("roberta"),gnr=o(" \u2014 "),Yq=a("a"),hnr=o("TFRobertaForSequenceClassification"),pnr=o(" (RoBERTa model)"),_nr=l(),W8=a("li"),Kge=a("strong"),unr=o("roformer"),bnr=o(" \u2014 "),Kq=a("a"),vnr=o("TFRoFormerForSequenceClassification"),Tnr=o(" (RoFormer model)"),Fnr=l(),Q8=a("li"),Zge=a("strong"),Cnr=o("tapas"),Mnr=o(" \u2014 "),Zq=a("a"),Enr=o("TFTapasForSequenceClassification"),ynr=o(" (TAPAS model)"),wnr=l(),H8=a("li"),ehe=a("strong"),Anr=o("transfo-xl"),Lnr=o(" \u2014 "),eG=a("a"),Bnr=o("TFTransfoXLForSequenceClassification"),xnr=o(" (Transformer-XL model)"),knr=l(),U8=a("li"),ohe=a("strong"),Rnr=o("xlm"),Snr=o(" \u2014 "),oG=a("a"),Pnr=o("TFXLMForSequenceClassification"),$nr=o(" (XLM model)"),Inr=l(),J8=a("li"),rhe=a("strong"),jnr=o("xlm-roberta"),Nnr=o(" \u2014 "),rG=a("a"),Dnr=o("TFXLMRobertaForSequenceClassification"),qnr=o(" (XLM-RoBERTa model)"),Gnr=l(),Y8=a("li"),the=a("strong"),Onr=o("xlnet"),Xnr=o(" \u2014 "),tG=a("a"),znr=o("TFXLNetForSequenceClassification"),Vnr=o(" (XLNet model)"),Wnr=l(),ahe=a("p"),Qnr=o("Examples:"),Hnr=l(),f(ww.$$.fragment),L7e=l(),Cc=a("h2"),K8=a("a"),nhe=a("span"),f(Aw.$$.fragment),Unr=l(),she=a("span"),Jnr=o("TFAutoModelForMultipleChoice"),B7e=l(),Tr=a("div"),f(Lw.$$.fragment),Ynr=l(),Mc=a("p"),Knr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lhe=a("code"),Znr=o("from_pretrained()"),esr=o("class method or the "),ihe=a("code"),osr=o("from_config()"),rsr=o(`class
method.`),tsr=l(),Bw=a("p"),asr=o("This class cannot be instantiated directly using "),dhe=a("code"),nsr=o("__init__()"),ssr=o(" (throws an error)."),lsr=l(),gt=a("div"),f(xw.$$.fragment),isr=l(),che=a("p"),dsr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),csr=l(),Ec=a("p"),fsr=o(`Note:
Loading a model from its configuration file does `),fhe=a("strong"),msr=o("not"),gsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mhe=a("code"),hsr=o("from_pretrained()"),psr=o("to load the model weights."),_sr=l(),ghe=a("p"),usr=o("Examples:"),bsr=l(),f(kw.$$.fragment),vsr=l(),To=a("div"),f(Rw.$$.fragment),Tsr=l(),hhe=a("p"),Fsr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Csr=l(),pn=a("p"),Msr=o("The model class to instantiate is selected based on the "),phe=a("code"),Esr=o("model_type"),ysr=o(` property of the config object (either
passed as an argument or loaded from `),_he=a("code"),wsr=o("pretrained_model_name_or_path"),Asr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=a("code"),Lsr=o("pretrained_model_name_or_path"),Bsr=o(":"),xsr=l(),te=a("ul"),Z8=a("li"),bhe=a("strong"),ksr=o("albert"),Rsr=o(" \u2014 "),aG=a("a"),Ssr=o("TFAlbertForMultipleChoice"),Psr=o(" (ALBERT model)"),$sr=l(),eF=a("li"),vhe=a("strong"),Isr=o("bert"),jsr=o(" \u2014 "),nG=a("a"),Nsr=o("TFBertForMultipleChoice"),Dsr=o(" (BERT model)"),qsr=l(),oF=a("li"),The=a("strong"),Gsr=o("camembert"),Osr=o(" \u2014 "),sG=a("a"),Xsr=o("TFCamembertForMultipleChoice"),zsr=o(" (CamemBERT model)"),Vsr=l(),rF=a("li"),Fhe=a("strong"),Wsr=o("convbert"),Qsr=o(" \u2014 "),lG=a("a"),Hsr=o("TFConvBertForMultipleChoice"),Usr=o(" (ConvBERT model)"),Jsr=l(),tF=a("li"),Che=a("strong"),Ysr=o("distilbert"),Ksr=o(" \u2014 "),iG=a("a"),Zsr=o("TFDistilBertForMultipleChoice"),elr=o(" (DistilBERT model)"),olr=l(),aF=a("li"),Mhe=a("strong"),rlr=o("electra"),tlr=o(" \u2014 "),dG=a("a"),alr=o("TFElectraForMultipleChoice"),nlr=o(" (ELECTRA model)"),slr=l(),nF=a("li"),Ehe=a("strong"),llr=o("flaubert"),ilr=o(" \u2014 "),cG=a("a"),dlr=o("TFFlaubertForMultipleChoice"),clr=o(" (FlauBERT model)"),flr=l(),sF=a("li"),yhe=a("strong"),mlr=o("funnel"),glr=o(" \u2014 "),fG=a("a"),hlr=o("TFFunnelForMultipleChoice"),plr=o(" (Funnel Transformer model)"),_lr=l(),lF=a("li"),whe=a("strong"),ulr=o("longformer"),blr=o(" \u2014 "),mG=a("a"),vlr=o("TFLongformerForMultipleChoice"),Tlr=o(" (Longformer model)"),Flr=l(),iF=a("li"),Ahe=a("strong"),Clr=o("mobilebert"),Mlr=o(" \u2014 "),gG=a("a"),Elr=o("TFMobileBertForMultipleChoice"),ylr=o(" (MobileBERT model)"),wlr=l(),dF=a("li"),Lhe=a("strong"),Alr=o("mpnet"),Llr=o(" \u2014 "),hG=a("a"),Blr=o("TFMPNetForMultipleChoice"),xlr=o(" (MPNet model)"),klr=l(),cF=a("li"),Bhe=a("strong"),Rlr=o("rembert"),Slr=o(" \u2014 "),pG=a("a"),Plr=o("TFRemBertForMultipleChoice"),$lr=o(" (RemBERT model)"),Ilr=l(),fF=a("li"),xhe=a("strong"),jlr=o("roberta"),Nlr=o(" \u2014 "),_G=a("a"),Dlr=o("TFRobertaForMultipleChoice"),qlr=o(" (RoBERTa model)"),Glr=l(),mF=a("li"),khe=a("strong"),Olr=o("roformer"),Xlr=o(" \u2014 "),uG=a("a"),zlr=o("TFRoFormerForMultipleChoice"),Vlr=o(" (RoFormer model)"),Wlr=l(),gF=a("li"),Rhe=a("strong"),Qlr=o("xlm"),Hlr=o(" \u2014 "),bG=a("a"),Ulr=o("TFXLMForMultipleChoice"),Jlr=o(" (XLM model)"),Ylr=l(),hF=a("li"),She=a("strong"),Klr=o("xlm-roberta"),Zlr=o(" \u2014 "),vG=a("a"),eir=o("TFXLMRobertaForMultipleChoice"),oir=o(" (XLM-RoBERTa model)"),rir=l(),pF=a("li"),Phe=a("strong"),tir=o("xlnet"),air=o(" \u2014 "),TG=a("a"),nir=o("TFXLNetForMultipleChoice"),sir=o(" (XLNet model)"),lir=l(),$he=a("p"),iir=o("Examples:"),dir=l(),f(Sw.$$.fragment),x7e=l(),yc=a("h2"),_F=a("a"),Ihe=a("span"),f(Pw.$$.fragment),cir=l(),jhe=a("span"),fir=o("TFAutoModelForTableQuestionAnswering"),k7e=l(),Fr=a("div"),f($w.$$.fragment),mir=l(),wc=a("p"),gir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Nhe=a("code"),hir=o("from_pretrained()"),pir=o("class method or the "),Dhe=a("code"),_ir=o("from_config()"),uir=o(`class
method.`),bir=l(),Iw=a("p"),vir=o("This class cannot be instantiated directly using "),qhe=a("code"),Tir=o("__init__()"),Fir=o(" (throws an error)."),Cir=l(),ht=a("div"),f(jw.$$.fragment),Mir=l(),Ghe=a("p"),Eir=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),yir=l(),Ac=a("p"),wir=o(`Note:
Loading a model from its configuration file does `),Ohe=a("strong"),Air=o("not"),Lir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xhe=a("code"),Bir=o("from_pretrained()"),xir=o("to load the model weights."),kir=l(),zhe=a("p"),Rir=o("Examples:"),Sir=l(),f(Nw.$$.fragment),Pir=l(),Fo=a("div"),f(Dw.$$.fragment),$ir=l(),Vhe=a("p"),Iir=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jir=l(),_n=a("p"),Nir=o("The model class to instantiate is selected based on the "),Whe=a("code"),Dir=o("model_type"),qir=o(` property of the config object (either
passed as an argument or loaded from `),Qhe=a("code"),Gir=o("pretrained_model_name_or_path"),Oir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=a("code"),Xir=o("pretrained_model_name_or_path"),zir=o(":"),Vir=l(),Uhe=a("ul"),uF=a("li"),Jhe=a("strong"),Wir=o("tapas"),Qir=o(" \u2014 "),FG=a("a"),Hir=o("TFTapasForQuestionAnswering"),Uir=o(" (TAPAS model)"),Jir=l(),Yhe=a("p"),Yir=o("Examples:"),Kir=l(),f(qw.$$.fragment),R7e=l(),Lc=a("h2"),bF=a("a"),Khe=a("span"),f(Gw.$$.fragment),Zir=l(),Zhe=a("span"),edr=o("TFAutoModelForTokenClassification"),S7e=l(),Cr=a("div"),f(Ow.$$.fragment),odr=l(),Bc=a("p"),rdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),epe=a("code"),tdr=o("from_pretrained()"),adr=o("class method or the "),ope=a("code"),ndr=o("from_config()"),sdr=o(`class
method.`),ldr=l(),Xw=a("p"),idr=o("This class cannot be instantiated directly using "),rpe=a("code"),ddr=o("__init__()"),cdr=o(" (throws an error)."),fdr=l(),pt=a("div"),f(zw.$$.fragment),mdr=l(),tpe=a("p"),gdr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hdr=l(),xc=a("p"),pdr=o(`Note:
Loading a model from its configuration file does `),ape=a("strong"),_dr=o("not"),udr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),npe=a("code"),bdr=o("from_pretrained()"),vdr=o("to load the model weights."),Tdr=l(),spe=a("p"),Fdr=o("Examples:"),Cdr=l(),f(Vw.$$.fragment),Mdr=l(),Co=a("div"),f(Ww.$$.fragment),Edr=l(),lpe=a("p"),ydr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wdr=l(),un=a("p"),Adr=o("The model class to instantiate is selected based on the "),ipe=a("code"),Ldr=o("model_type"),Bdr=o(` property of the config object (either
passed as an argument or loaded from `),dpe=a("code"),xdr=o("pretrained_model_name_or_path"),kdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=a("code"),Rdr=o("pretrained_model_name_or_path"),Sdr=o(":"),Pdr=l(),K=a("ul"),vF=a("li"),fpe=a("strong"),$dr=o("albert"),Idr=o(" \u2014 "),CG=a("a"),jdr=o("TFAlbertForTokenClassification"),Ndr=o(" (ALBERT model)"),Ddr=l(),TF=a("li"),mpe=a("strong"),qdr=o("bert"),Gdr=o(" \u2014 "),MG=a("a"),Odr=o("TFBertForTokenClassification"),Xdr=o(" (BERT model)"),zdr=l(),FF=a("li"),gpe=a("strong"),Vdr=o("camembert"),Wdr=o(" \u2014 "),EG=a("a"),Qdr=o("TFCamembertForTokenClassification"),Hdr=o(" (CamemBERT model)"),Udr=l(),CF=a("li"),hpe=a("strong"),Jdr=o("convbert"),Ydr=o(" \u2014 "),yG=a("a"),Kdr=o("TFConvBertForTokenClassification"),Zdr=o(" (ConvBERT model)"),ecr=l(),MF=a("li"),ppe=a("strong"),ocr=o("deberta"),rcr=o(" \u2014 "),wG=a("a"),tcr=o("TFDebertaForTokenClassification"),acr=o(" (DeBERTa model)"),ncr=l(),EF=a("li"),_pe=a("strong"),scr=o("deberta-v2"),lcr=o(" \u2014 "),AG=a("a"),icr=o("TFDebertaV2ForTokenClassification"),dcr=o(" (DeBERTa-v2 model)"),ccr=l(),yF=a("li"),upe=a("strong"),fcr=o("distilbert"),mcr=o(" \u2014 "),LG=a("a"),gcr=o("TFDistilBertForTokenClassification"),hcr=o(" (DistilBERT model)"),pcr=l(),wF=a("li"),bpe=a("strong"),_cr=o("electra"),ucr=o(" \u2014 "),BG=a("a"),bcr=o("TFElectraForTokenClassification"),vcr=o(" (ELECTRA model)"),Tcr=l(),AF=a("li"),vpe=a("strong"),Fcr=o("flaubert"),Ccr=o(" \u2014 "),xG=a("a"),Mcr=o("TFFlaubertForTokenClassification"),Ecr=o(" (FlauBERT model)"),ycr=l(),LF=a("li"),Tpe=a("strong"),wcr=o("funnel"),Acr=o(" \u2014 "),kG=a("a"),Lcr=o("TFFunnelForTokenClassification"),Bcr=o(" (Funnel Transformer model)"),xcr=l(),BF=a("li"),Fpe=a("strong"),kcr=o("layoutlm"),Rcr=o(" \u2014 "),RG=a("a"),Scr=o("TFLayoutLMForTokenClassification"),Pcr=o(" (LayoutLM model)"),$cr=l(),xF=a("li"),Cpe=a("strong"),Icr=o("longformer"),jcr=o(" \u2014 "),SG=a("a"),Ncr=o("TFLongformerForTokenClassification"),Dcr=o(" (Longformer model)"),qcr=l(),kF=a("li"),Mpe=a("strong"),Gcr=o("mobilebert"),Ocr=o(" \u2014 "),PG=a("a"),Xcr=o("TFMobileBertForTokenClassification"),zcr=o(" (MobileBERT model)"),Vcr=l(),RF=a("li"),Epe=a("strong"),Wcr=o("mpnet"),Qcr=o(" \u2014 "),$G=a("a"),Hcr=o("TFMPNetForTokenClassification"),Ucr=o(" (MPNet model)"),Jcr=l(),SF=a("li"),ype=a("strong"),Ycr=o("rembert"),Kcr=o(" \u2014 "),IG=a("a"),Zcr=o("TFRemBertForTokenClassification"),efr=o(" (RemBERT model)"),ofr=l(),PF=a("li"),wpe=a("strong"),rfr=o("roberta"),tfr=o(" \u2014 "),jG=a("a"),afr=o("TFRobertaForTokenClassification"),nfr=o(" (RoBERTa model)"),sfr=l(),$F=a("li"),Ape=a("strong"),lfr=o("roformer"),ifr=o(" \u2014 "),NG=a("a"),dfr=o("TFRoFormerForTokenClassification"),cfr=o(" (RoFormer model)"),ffr=l(),IF=a("li"),Lpe=a("strong"),mfr=o("xlm"),gfr=o(" \u2014 "),DG=a("a"),hfr=o("TFXLMForTokenClassification"),pfr=o(" (XLM model)"),_fr=l(),jF=a("li"),Bpe=a("strong"),ufr=o("xlm-roberta"),bfr=o(" \u2014 "),qG=a("a"),vfr=o("TFXLMRobertaForTokenClassification"),Tfr=o(" (XLM-RoBERTa model)"),Ffr=l(),NF=a("li"),xpe=a("strong"),Cfr=o("xlnet"),Mfr=o(" \u2014 "),GG=a("a"),Efr=o("TFXLNetForTokenClassification"),yfr=o(" (XLNet model)"),wfr=l(),kpe=a("p"),Afr=o("Examples:"),Lfr=l(),f(Qw.$$.fragment),P7e=l(),kc=a("h2"),DF=a("a"),Rpe=a("span"),f(Hw.$$.fragment),Bfr=l(),Spe=a("span"),xfr=o("TFAutoModelForQuestionAnswering"),$7e=l(),Mr=a("div"),f(Uw.$$.fragment),kfr=l(),Rc=a("p"),Rfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ppe=a("code"),Sfr=o("from_pretrained()"),Pfr=o("class method or the "),$pe=a("code"),$fr=o("from_config()"),Ifr=o(`class
method.`),jfr=l(),Jw=a("p"),Nfr=o("This class cannot be instantiated directly using "),Ipe=a("code"),Dfr=o("__init__()"),qfr=o(" (throws an error)."),Gfr=l(),_t=a("div"),f(Yw.$$.fragment),Ofr=l(),jpe=a("p"),Xfr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zfr=l(),Sc=a("p"),Vfr=o(`Note:
Loading a model from its configuration file does `),Npe=a("strong"),Wfr=o("not"),Qfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dpe=a("code"),Hfr=o("from_pretrained()"),Ufr=o("to load the model weights."),Jfr=l(),qpe=a("p"),Yfr=o("Examples:"),Kfr=l(),f(Kw.$$.fragment),Zfr=l(),Mo=a("div"),f(Zw.$$.fragment),emr=l(),Gpe=a("p"),omr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rmr=l(),bn=a("p"),tmr=o("The model class to instantiate is selected based on the "),Ope=a("code"),amr=o("model_type"),nmr=o(` property of the config object (either
passed as an argument or loaded from `),Xpe=a("code"),smr=o("pretrained_model_name_or_path"),lmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=a("code"),imr=o("pretrained_model_name_or_path"),dmr=o(":"),cmr=l(),Z=a("ul"),qF=a("li"),Vpe=a("strong"),fmr=o("albert"),mmr=o(" \u2014 "),OG=a("a"),gmr=o("TFAlbertForQuestionAnswering"),hmr=o(" (ALBERT model)"),pmr=l(),GF=a("li"),Wpe=a("strong"),_mr=o("bert"),umr=o(" \u2014 "),XG=a("a"),bmr=o("TFBertForQuestionAnswering"),vmr=o(" (BERT model)"),Tmr=l(),OF=a("li"),Qpe=a("strong"),Fmr=o("camembert"),Cmr=o(" \u2014 "),zG=a("a"),Mmr=o("TFCamembertForQuestionAnswering"),Emr=o(" (CamemBERT model)"),ymr=l(),XF=a("li"),Hpe=a("strong"),wmr=o("convbert"),Amr=o(" \u2014 "),VG=a("a"),Lmr=o("TFConvBertForQuestionAnswering"),Bmr=o(" (ConvBERT model)"),xmr=l(),zF=a("li"),Upe=a("strong"),kmr=o("deberta"),Rmr=o(" \u2014 "),WG=a("a"),Smr=o("TFDebertaForQuestionAnswering"),Pmr=o(" (DeBERTa model)"),$mr=l(),VF=a("li"),Jpe=a("strong"),Imr=o("deberta-v2"),jmr=o(" \u2014 "),QG=a("a"),Nmr=o("TFDebertaV2ForQuestionAnswering"),Dmr=o(" (DeBERTa-v2 model)"),qmr=l(),WF=a("li"),Ype=a("strong"),Gmr=o("distilbert"),Omr=o(" \u2014 "),HG=a("a"),Xmr=o("TFDistilBertForQuestionAnswering"),zmr=o(" (DistilBERT model)"),Vmr=l(),QF=a("li"),Kpe=a("strong"),Wmr=o("electra"),Qmr=o(" \u2014 "),UG=a("a"),Hmr=o("TFElectraForQuestionAnswering"),Umr=o(" (ELECTRA model)"),Jmr=l(),HF=a("li"),Zpe=a("strong"),Ymr=o("flaubert"),Kmr=o(" \u2014 "),JG=a("a"),Zmr=o("TFFlaubertForQuestionAnsweringSimple"),egr=o(" (FlauBERT model)"),ogr=l(),UF=a("li"),e_e=a("strong"),rgr=o("funnel"),tgr=o(" \u2014 "),YG=a("a"),agr=o("TFFunnelForQuestionAnswering"),ngr=o(" (Funnel Transformer model)"),sgr=l(),JF=a("li"),o_e=a("strong"),lgr=o("longformer"),igr=o(" \u2014 "),KG=a("a"),dgr=o("TFLongformerForQuestionAnswering"),cgr=o(" (Longformer model)"),fgr=l(),YF=a("li"),r_e=a("strong"),mgr=o("mobilebert"),ggr=o(" \u2014 "),ZG=a("a"),hgr=o("TFMobileBertForQuestionAnswering"),pgr=o(" (MobileBERT model)"),_gr=l(),KF=a("li"),t_e=a("strong"),ugr=o("mpnet"),bgr=o(" \u2014 "),eO=a("a"),vgr=o("TFMPNetForQuestionAnswering"),Tgr=o(" (MPNet model)"),Fgr=l(),ZF=a("li"),a_e=a("strong"),Cgr=o("rembert"),Mgr=o(" \u2014 "),oO=a("a"),Egr=o("TFRemBertForQuestionAnswering"),ygr=o(" (RemBERT model)"),wgr=l(),e9=a("li"),n_e=a("strong"),Agr=o("roberta"),Lgr=o(" \u2014 "),rO=a("a"),Bgr=o("TFRobertaForQuestionAnswering"),xgr=o(" (RoBERTa model)"),kgr=l(),o9=a("li"),s_e=a("strong"),Rgr=o("roformer"),Sgr=o(" \u2014 "),tO=a("a"),Pgr=o("TFRoFormerForQuestionAnswering"),$gr=o(" (RoFormer model)"),Igr=l(),r9=a("li"),l_e=a("strong"),jgr=o("xlm"),Ngr=o(" \u2014 "),aO=a("a"),Dgr=o("TFXLMForQuestionAnsweringSimple"),qgr=o(" (XLM model)"),Ggr=l(),t9=a("li"),i_e=a("strong"),Ogr=o("xlm-roberta"),Xgr=o(" \u2014 "),nO=a("a"),zgr=o("TFXLMRobertaForQuestionAnswering"),Vgr=o(" (XLM-RoBERTa model)"),Wgr=l(),a9=a("li"),d_e=a("strong"),Qgr=o("xlnet"),Hgr=o(" \u2014 "),sO=a("a"),Ugr=o("TFXLNetForQuestionAnsweringSimple"),Jgr=o(" (XLNet model)"),Ygr=l(),c_e=a("p"),Kgr=o("Examples:"),Zgr=l(),f(eA.$$.fragment),I7e=l(),Pc=a("h2"),n9=a("a"),f_e=a("span"),f(oA.$$.fragment),ehr=l(),m_e=a("span"),ohr=o("TFAutoModelForVision2Seq"),j7e=l(),Er=a("div"),f(rA.$$.fragment),rhr=l(),$c=a("p"),thr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),g_e=a("code"),ahr=o("from_pretrained()"),nhr=o("class method or the "),h_e=a("code"),shr=o("from_config()"),lhr=o(`class
method.`),ihr=l(),tA=a("p"),dhr=o("This class cannot be instantiated directly using "),p_e=a("code"),chr=o("__init__()"),fhr=o(" (throws an error)."),mhr=l(),ut=a("div"),f(aA.$$.fragment),ghr=l(),__e=a("p"),hhr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),phr=l(),Ic=a("p"),_hr=o(`Note:
Loading a model from its configuration file does `),u_e=a("strong"),uhr=o("not"),bhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),b_e=a("code"),vhr=o("from_pretrained()"),Thr=o("to load the model weights."),Fhr=l(),v_e=a("p"),Chr=o("Examples:"),Mhr=l(),f(nA.$$.fragment),Ehr=l(),Eo=a("div"),f(sA.$$.fragment),yhr=l(),T_e=a("p"),whr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ahr=l(),vn=a("p"),Lhr=o("The model class to instantiate is selected based on the "),F_e=a("code"),Bhr=o("model_type"),xhr=o(` property of the config object (either
passed as an argument or loaded from `),C_e=a("code"),khr=o("pretrained_model_name_or_path"),Rhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M_e=a("code"),Shr=o("pretrained_model_name_or_path"),Phr=o(":"),$hr=l(),E_e=a("ul"),s9=a("li"),y_e=a("strong"),Ihr=o("vision-encoder-decoder"),jhr=o(" \u2014 "),lO=a("a"),Nhr=o("TFVisionEncoderDecoderModel"),Dhr=o(" (Vision Encoder decoder model)"),qhr=l(),w_e=a("p"),Ghr=o("Examples:"),Ohr=l(),f(lA.$$.fragment),N7e=l(),jc=a("h2"),l9=a("a"),A_e=a("span"),f(iA.$$.fragment),Xhr=l(),L_e=a("span"),zhr=o("TFAutoModelForSpeechSeq2Seq"),D7e=l(),yr=a("div"),f(dA.$$.fragment),Vhr=l(),Nc=a("p"),Whr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),B_e=a("code"),Qhr=o("from_pretrained()"),Hhr=o("class method or the "),x_e=a("code"),Uhr=o("from_config()"),Jhr=o(`class
method.`),Yhr=l(),cA=a("p"),Khr=o("This class cannot be instantiated directly using "),k_e=a("code"),Zhr=o("__init__()"),epr=o(" (throws an error)."),opr=l(),bt=a("div"),f(fA.$$.fragment),rpr=l(),R_e=a("p"),tpr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),apr=l(),Dc=a("p"),npr=o(`Note:
Loading a model from its configuration file does `),S_e=a("strong"),spr=o("not"),lpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),P_e=a("code"),ipr=o("from_pretrained()"),dpr=o("to load the model weights."),cpr=l(),$_e=a("p"),fpr=o("Examples:"),mpr=l(),f(mA.$$.fragment),gpr=l(),yo=a("div"),f(gA.$$.fragment),hpr=l(),I_e=a("p"),ppr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_pr=l(),Tn=a("p"),upr=o("The model class to instantiate is selected based on the "),j_e=a("code"),bpr=o("model_type"),vpr=o(` property of the config object (either
passed as an argument or loaded from `),N_e=a("code"),Tpr=o("pretrained_model_name_or_path"),Fpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=a("code"),Cpr=o("pretrained_model_name_or_path"),Mpr=o(":"),Epr=l(),q_e=a("ul"),i9=a("li"),G_e=a("strong"),ypr=o("speech_to_text"),wpr=o(" \u2014 "),iO=a("a"),Apr=o("TFSpeech2TextForConditionalGeneration"),Lpr=o(" (Speech2Text model)"),Bpr=l(),O_e=a("p"),xpr=o("Examples:"),kpr=l(),f(hA.$$.fragment),q7e=l(),qc=a("h2"),d9=a("a"),X_e=a("span"),f(pA.$$.fragment),Rpr=l(),z_e=a("span"),Spr=o("FlaxAutoModel"),G7e=l(),wr=a("div"),f(_A.$$.fragment),Ppr=l(),Gc=a("p"),$pr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),V_e=a("code"),Ipr=o("from_pretrained()"),jpr=o("class method or the "),W_e=a("code"),Npr=o("from_config()"),Dpr=o(`class
method.`),qpr=l(),uA=a("p"),Gpr=o("This class cannot be instantiated directly using "),Q_e=a("code"),Opr=o("__init__()"),Xpr=o(" (throws an error)."),zpr=l(),vt=a("div"),f(bA.$$.fragment),Vpr=l(),H_e=a("p"),Wpr=o("Instantiates one of the base model classes of the library from a configuration."),Qpr=l(),Oc=a("p"),Hpr=o(`Note:
Loading a model from its configuration file does `),U_e=a("strong"),Upr=o("not"),Jpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),J_e=a("code"),Ypr=o("from_pretrained()"),Kpr=o("to load the model weights."),Zpr=l(),Y_e=a("p"),e_r=o("Examples:"),o_r=l(),f(vA.$$.fragment),r_r=l(),wo=a("div"),f(TA.$$.fragment),t_r=l(),K_e=a("p"),a_r=o("Instantiate one of the base model classes of the library from a pretrained model."),n_r=l(),Fn=a("p"),s_r=o("The model class to instantiate is selected based on the "),Z_e=a("code"),l_r=o("model_type"),i_r=o(` property of the config object (either
passed as an argument or loaded from `),eue=a("code"),d_r=o("pretrained_model_name_or_path"),c_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=a("code"),f_r=o("pretrained_model_name_or_path"),m_r=o(":"),g_r=l(),V=a("ul"),c9=a("li"),rue=a("strong"),h_r=o("albert"),p_r=o(" \u2014 "),dO=a("a"),__r=o("FlaxAlbertModel"),u_r=o(" (ALBERT model)"),b_r=l(),f9=a("li"),tue=a("strong"),v_r=o("bart"),T_r=o(" \u2014 "),cO=a("a"),F_r=o("FlaxBartModel"),C_r=o(" (BART model)"),M_r=l(),m9=a("li"),aue=a("strong"),E_r=o("beit"),y_r=o(" \u2014 "),fO=a("a"),w_r=o("FlaxBeitModel"),A_r=o(" (BEiT model)"),L_r=l(),g9=a("li"),nue=a("strong"),B_r=o("bert"),x_r=o(" \u2014 "),mO=a("a"),k_r=o("FlaxBertModel"),R_r=o(" (BERT model)"),S_r=l(),h9=a("li"),sue=a("strong"),P_r=o("big_bird"),$_r=o(" \u2014 "),gO=a("a"),I_r=o("FlaxBigBirdModel"),j_r=o(" (BigBird model)"),N_r=l(),p9=a("li"),lue=a("strong"),D_r=o("blenderbot"),q_r=o(" \u2014 "),hO=a("a"),G_r=o("FlaxBlenderbotModel"),O_r=o(" (Blenderbot model)"),X_r=l(),_9=a("li"),iue=a("strong"),z_r=o("blenderbot-small"),V_r=o(" \u2014 "),pO=a("a"),W_r=o("FlaxBlenderbotSmallModel"),Q_r=o(" (BlenderbotSmall model)"),H_r=l(),u9=a("li"),due=a("strong"),U_r=o("clip"),J_r=o(" \u2014 "),_O=a("a"),Y_r=o("FlaxCLIPModel"),K_r=o(" (CLIP model)"),Z_r=l(),b9=a("li"),cue=a("strong"),eur=o("distilbert"),our=o(" \u2014 "),uO=a("a"),rur=o("FlaxDistilBertModel"),tur=o(" (DistilBERT model)"),aur=l(),v9=a("li"),fue=a("strong"),nur=o("electra"),sur=o(" \u2014 "),bO=a("a"),lur=o("FlaxElectraModel"),iur=o(" (ELECTRA model)"),dur=l(),T9=a("li"),mue=a("strong"),cur=o("gpt2"),fur=o(" \u2014 "),vO=a("a"),mur=o("FlaxGPT2Model"),gur=o(" (OpenAI GPT-2 model)"),hur=l(),F9=a("li"),gue=a("strong"),pur=o("gpt_neo"),_ur=o(" \u2014 "),TO=a("a"),uur=o("FlaxGPTNeoModel"),bur=o(" (GPT Neo model)"),vur=l(),C9=a("li"),hue=a("strong"),Tur=o("gptj"),Fur=o(" \u2014 "),FO=a("a"),Cur=o("FlaxGPTJModel"),Mur=o(" (GPT-J model)"),Eur=l(),M9=a("li"),pue=a("strong"),yur=o("marian"),wur=o(" \u2014 "),CO=a("a"),Aur=o("FlaxMarianModel"),Lur=o(" (Marian model)"),Bur=l(),E9=a("li"),_ue=a("strong"),xur=o("mbart"),kur=o(" \u2014 "),MO=a("a"),Rur=o("FlaxMBartModel"),Sur=o(" (mBART model)"),Pur=l(),y9=a("li"),uue=a("strong"),$ur=o("mt5"),Iur=o(" \u2014 "),EO=a("a"),jur=o("FlaxMT5Model"),Nur=o(" (mT5 model)"),Dur=l(),w9=a("li"),bue=a("strong"),qur=o("pegasus"),Gur=o(" \u2014 "),yO=a("a"),Our=o("FlaxPegasusModel"),Xur=o(" (Pegasus model)"),zur=l(),A9=a("li"),vue=a("strong"),Vur=o("roberta"),Wur=o(" \u2014 "),wO=a("a"),Qur=o("FlaxRobertaModel"),Hur=o(" (RoBERTa model)"),Uur=l(),L9=a("li"),Tue=a("strong"),Jur=o("roformer"),Yur=o(" \u2014 "),AO=a("a"),Kur=o("FlaxRoFormerModel"),Zur=o(" (RoFormer model)"),e5r=l(),B9=a("li"),Fue=a("strong"),o5r=o("t5"),r5r=o(" \u2014 "),LO=a("a"),t5r=o("FlaxT5Model"),a5r=o(" (T5 model)"),n5r=l(),x9=a("li"),Cue=a("strong"),s5r=o("vision-text-dual-encoder"),l5r=o(" \u2014 "),BO=a("a"),i5r=o("FlaxVisionTextDualEncoderModel"),d5r=o(" (VisionTextDualEncoder model)"),c5r=l(),k9=a("li"),Mue=a("strong"),f5r=o("vit"),m5r=o(" \u2014 "),xO=a("a"),g5r=o("FlaxViTModel"),h5r=o(" (ViT model)"),p5r=l(),R9=a("li"),Eue=a("strong"),_5r=o("wav2vec2"),u5r=o(" \u2014 "),kO=a("a"),b5r=o("FlaxWav2Vec2Model"),v5r=o(" (Wav2Vec2 model)"),T5r=l(),S9=a("li"),yue=a("strong"),F5r=o("xglm"),C5r=o(" \u2014 "),RO=a("a"),M5r=o("FlaxXGLMModel"),E5r=o(" (XGLM model)"),y5r=l(),wue=a("p"),w5r=o("Examples:"),A5r=l(),f(FA.$$.fragment),O7e=l(),Xc=a("h2"),P9=a("a"),Aue=a("span"),f(CA.$$.fragment),L5r=l(),Lue=a("span"),B5r=o("FlaxAutoModelForCausalLM"),X7e=l(),Ar=a("div"),f(MA.$$.fragment),x5r=l(),zc=a("p"),k5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bue=a("code"),R5r=o("from_pretrained()"),S5r=o("class method or the "),xue=a("code"),P5r=o("from_config()"),$5r=o(`class
method.`),I5r=l(),EA=a("p"),j5r=o("This class cannot be instantiated directly using "),kue=a("code"),N5r=o("__init__()"),D5r=o(" (throws an error)."),q5r=l(),Tt=a("div"),f(yA.$$.fragment),G5r=l(),Rue=a("p"),O5r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),X5r=l(),Vc=a("p"),z5r=o(`Note:
Loading a model from its configuration file does `),Sue=a("strong"),V5r=o("not"),W5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pue=a("code"),Q5r=o("from_pretrained()"),H5r=o("to load the model weights."),U5r=l(),$ue=a("p"),J5r=o("Examples:"),Y5r=l(),f(wA.$$.fragment),K5r=l(),Ao=a("div"),f(AA.$$.fragment),Z5r=l(),Iue=a("p"),e1r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),o1r=l(),Cn=a("p"),r1r=o("The model class to instantiate is selected based on the "),jue=a("code"),t1r=o("model_type"),a1r=o(` property of the config object (either
passed as an argument or loaded from `),Nue=a("code"),n1r=o("pretrained_model_name_or_path"),s1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=a("code"),l1r=o("pretrained_model_name_or_path"),i1r=o(":"),d1r=l(),Mn=a("ul"),$9=a("li"),que=a("strong"),c1r=o("gpt2"),f1r=o(" \u2014 "),SO=a("a"),m1r=o("FlaxGPT2LMHeadModel"),g1r=o(" (OpenAI GPT-2 model)"),h1r=l(),I9=a("li"),Gue=a("strong"),p1r=o("gpt_neo"),_1r=o(" \u2014 "),PO=a("a"),u1r=o("FlaxGPTNeoForCausalLM"),b1r=o(" (GPT Neo model)"),v1r=l(),j9=a("li"),Oue=a("strong"),T1r=o("gptj"),F1r=o(" \u2014 "),$O=a("a"),C1r=o("FlaxGPTJForCausalLM"),M1r=o(" (GPT-J model)"),E1r=l(),N9=a("li"),Xue=a("strong"),y1r=o("xglm"),w1r=o(" \u2014 "),IO=a("a"),A1r=o("FlaxXGLMForCausalLM"),L1r=o(" (XGLM model)"),B1r=l(),zue=a("p"),x1r=o("Examples:"),k1r=l(),f(LA.$$.fragment),z7e=l(),Wc=a("h2"),D9=a("a"),Vue=a("span"),f(BA.$$.fragment),R1r=l(),Wue=a("span"),S1r=o("FlaxAutoModelForPreTraining"),V7e=l(),Lr=a("div"),f(xA.$$.fragment),P1r=l(),Qc=a("p"),$1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Que=a("code"),I1r=o("from_pretrained()"),j1r=o("class method or the "),Hue=a("code"),N1r=o("from_config()"),D1r=o(`class
method.`),q1r=l(),kA=a("p"),G1r=o("This class cannot be instantiated directly using "),Uue=a("code"),O1r=o("__init__()"),X1r=o(" (throws an error)."),z1r=l(),Ft=a("div"),f(RA.$$.fragment),V1r=l(),Jue=a("p"),W1r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Q1r=l(),Hc=a("p"),H1r=o(`Note:
Loading a model from its configuration file does `),Yue=a("strong"),U1r=o("not"),J1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kue=a("code"),Y1r=o("from_pretrained()"),K1r=o("to load the model weights."),Z1r=l(),Zue=a("p"),ebr=o("Examples:"),obr=l(),f(SA.$$.fragment),rbr=l(),Lo=a("div"),f(PA.$$.fragment),tbr=l(),e5e=a("p"),abr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nbr=l(),En=a("p"),sbr=o("The model class to instantiate is selected based on the "),o5e=a("code"),lbr=o("model_type"),ibr=o(` property of the config object (either
passed as an argument or loaded from `),r5e=a("code"),dbr=o("pretrained_model_name_or_path"),cbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=a("code"),fbr=o("pretrained_model_name_or_path"),mbr=o(":"),gbr=l(),fe=a("ul"),q9=a("li"),a5e=a("strong"),hbr=o("albert"),pbr=o(" \u2014 "),jO=a("a"),_br=o("FlaxAlbertForPreTraining"),ubr=o(" (ALBERT model)"),bbr=l(),G9=a("li"),n5e=a("strong"),vbr=o("bart"),Tbr=o(" \u2014 "),NO=a("a"),Fbr=o("FlaxBartForConditionalGeneration"),Cbr=o(" (BART model)"),Mbr=l(),O9=a("li"),s5e=a("strong"),Ebr=o("bert"),ybr=o(" \u2014 "),DO=a("a"),wbr=o("FlaxBertForPreTraining"),Abr=o(" (BERT model)"),Lbr=l(),X9=a("li"),l5e=a("strong"),Bbr=o("big_bird"),xbr=o(" \u2014 "),qO=a("a"),kbr=o("FlaxBigBirdForPreTraining"),Rbr=o(" (BigBird model)"),Sbr=l(),z9=a("li"),i5e=a("strong"),Pbr=o("electra"),$br=o(" \u2014 "),GO=a("a"),Ibr=o("FlaxElectraForPreTraining"),jbr=o(" (ELECTRA model)"),Nbr=l(),V9=a("li"),d5e=a("strong"),Dbr=o("mbart"),qbr=o(" \u2014 "),OO=a("a"),Gbr=o("FlaxMBartForConditionalGeneration"),Obr=o(" (mBART model)"),Xbr=l(),W9=a("li"),c5e=a("strong"),zbr=o("mt5"),Vbr=o(" \u2014 "),XO=a("a"),Wbr=o("FlaxMT5ForConditionalGeneration"),Qbr=o(" (mT5 model)"),Hbr=l(),Q9=a("li"),f5e=a("strong"),Ubr=o("roberta"),Jbr=o(" \u2014 "),zO=a("a"),Ybr=o("FlaxRobertaForMaskedLM"),Kbr=o(" (RoBERTa model)"),Zbr=l(),H9=a("li"),m5e=a("strong"),e2r=o("roformer"),o2r=o(" \u2014 "),VO=a("a"),r2r=o("FlaxRoFormerForMaskedLM"),t2r=o(" (RoFormer model)"),a2r=l(),U9=a("li"),g5e=a("strong"),n2r=o("t5"),s2r=o(" \u2014 "),WO=a("a"),l2r=o("FlaxT5ForConditionalGeneration"),i2r=o(" (T5 model)"),d2r=l(),J9=a("li"),h5e=a("strong"),c2r=o("wav2vec2"),f2r=o(" \u2014 "),QO=a("a"),m2r=o("FlaxWav2Vec2ForPreTraining"),g2r=o(" (Wav2Vec2 model)"),h2r=l(),p5e=a("p"),p2r=o("Examples:"),_2r=l(),f($A.$$.fragment),W7e=l(),Uc=a("h2"),Y9=a("a"),_5e=a("span"),f(IA.$$.fragment),u2r=l(),u5e=a("span"),b2r=o("FlaxAutoModelForMaskedLM"),Q7e=l(),Br=a("div"),f(jA.$$.fragment),v2r=l(),Jc=a("p"),T2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),b5e=a("code"),F2r=o("from_pretrained()"),C2r=o("class method or the "),v5e=a("code"),M2r=o("from_config()"),E2r=o(`class
method.`),y2r=l(),NA=a("p"),w2r=o("This class cannot be instantiated directly using "),T5e=a("code"),A2r=o("__init__()"),L2r=o(" (throws an error)."),B2r=l(),Ct=a("div"),f(DA.$$.fragment),x2r=l(),F5e=a("p"),k2r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),R2r=l(),Yc=a("p"),S2r=o(`Note:
Loading a model from its configuration file does `),C5e=a("strong"),P2r=o("not"),$2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),M5e=a("code"),I2r=o("from_pretrained()"),j2r=o("to load the model weights."),N2r=l(),E5e=a("p"),D2r=o("Examples:"),q2r=l(),f(qA.$$.fragment),G2r=l(),Bo=a("div"),f(GA.$$.fragment),O2r=l(),y5e=a("p"),X2r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),z2r=l(),yn=a("p"),V2r=o("The model class to instantiate is selected based on the "),w5e=a("code"),W2r=o("model_type"),Q2r=o(` property of the config object (either
passed as an argument or loaded from `),A5e=a("code"),H2r=o("pretrained_model_name_or_path"),U2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L5e=a("code"),J2r=o("pretrained_model_name_or_path"),Y2r=o(":"),K2r=l(),ve=a("ul"),K9=a("li"),B5e=a("strong"),Z2r=o("albert"),evr=o(" \u2014 "),HO=a("a"),ovr=o("FlaxAlbertForMaskedLM"),rvr=o(" (ALBERT model)"),tvr=l(),Z9=a("li"),x5e=a("strong"),avr=o("bart"),nvr=o(" \u2014 "),UO=a("a"),svr=o("FlaxBartForConditionalGeneration"),lvr=o(" (BART model)"),ivr=l(),eC=a("li"),k5e=a("strong"),dvr=o("bert"),cvr=o(" \u2014 "),JO=a("a"),fvr=o("FlaxBertForMaskedLM"),mvr=o(" (BERT model)"),gvr=l(),oC=a("li"),R5e=a("strong"),hvr=o("big_bird"),pvr=o(" \u2014 "),YO=a("a"),_vr=o("FlaxBigBirdForMaskedLM"),uvr=o(" (BigBird model)"),bvr=l(),rC=a("li"),S5e=a("strong"),vvr=o("distilbert"),Tvr=o(" \u2014 "),KO=a("a"),Fvr=o("FlaxDistilBertForMaskedLM"),Cvr=o(" (DistilBERT model)"),Mvr=l(),tC=a("li"),P5e=a("strong"),Evr=o("electra"),yvr=o(" \u2014 "),ZO=a("a"),wvr=o("FlaxElectraForMaskedLM"),Avr=o(" (ELECTRA model)"),Lvr=l(),aC=a("li"),$5e=a("strong"),Bvr=o("mbart"),xvr=o(" \u2014 "),eX=a("a"),kvr=o("FlaxMBartForConditionalGeneration"),Rvr=o(" (mBART model)"),Svr=l(),nC=a("li"),I5e=a("strong"),Pvr=o("roberta"),$vr=o(" \u2014 "),oX=a("a"),Ivr=o("FlaxRobertaForMaskedLM"),jvr=o(" (RoBERTa model)"),Nvr=l(),sC=a("li"),j5e=a("strong"),Dvr=o("roformer"),qvr=o(" \u2014 "),rX=a("a"),Gvr=o("FlaxRoFormerForMaskedLM"),Ovr=o(" (RoFormer model)"),Xvr=l(),N5e=a("p"),zvr=o("Examples:"),Vvr=l(),f(OA.$$.fragment),H7e=l(),Kc=a("h2"),lC=a("a"),D5e=a("span"),f(XA.$$.fragment),Wvr=l(),q5e=a("span"),Qvr=o("FlaxAutoModelForSeq2SeqLM"),U7e=l(),xr=a("div"),f(zA.$$.fragment),Hvr=l(),Zc=a("p"),Uvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),G5e=a("code"),Jvr=o("from_pretrained()"),Yvr=o("class method or the "),O5e=a("code"),Kvr=o("from_config()"),Zvr=o(`class
method.`),eTr=l(),VA=a("p"),oTr=o("This class cannot be instantiated directly using "),X5e=a("code"),rTr=o("__init__()"),tTr=o(" (throws an error)."),aTr=l(),Mt=a("div"),f(WA.$$.fragment),nTr=l(),z5e=a("p"),sTr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lTr=l(),ef=a("p"),iTr=o(`Note:
Loading a model from its configuration file does `),V5e=a("strong"),dTr=o("not"),cTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),W5e=a("code"),fTr=o("from_pretrained()"),mTr=o("to load the model weights."),gTr=l(),Q5e=a("p"),hTr=o("Examples:"),pTr=l(),f(QA.$$.fragment),_Tr=l(),xo=a("div"),f(HA.$$.fragment),uTr=l(),H5e=a("p"),bTr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),vTr=l(),wn=a("p"),TTr=o("The model class to instantiate is selected based on the "),U5e=a("code"),FTr=o("model_type"),CTr=o(` property of the config object (either
passed as an argument or loaded from `),J5e=a("code"),MTr=o("pretrained_model_name_or_path"),ETr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=a("code"),yTr=o("pretrained_model_name_or_path"),wTr=o(":"),ATr=l(),Te=a("ul"),iC=a("li"),K5e=a("strong"),LTr=o("bart"),BTr=o(" \u2014 "),tX=a("a"),xTr=o("FlaxBartForConditionalGeneration"),kTr=o(" (BART model)"),RTr=l(),dC=a("li"),Z5e=a("strong"),STr=o("blenderbot"),PTr=o(" \u2014 "),aX=a("a"),$Tr=o("FlaxBlenderbotForConditionalGeneration"),ITr=o(" (Blenderbot model)"),jTr=l(),cC=a("li"),e1e=a("strong"),NTr=o("blenderbot-small"),DTr=o(" \u2014 "),nX=a("a"),qTr=o("FlaxBlenderbotSmallForConditionalGeneration"),GTr=o(" (BlenderbotSmall model)"),OTr=l(),fC=a("li"),o1e=a("strong"),XTr=o("encoder-decoder"),zTr=o(" \u2014 "),sX=a("a"),VTr=o("FlaxEncoderDecoderModel"),WTr=o(" (Encoder decoder model)"),QTr=l(),mC=a("li"),r1e=a("strong"),HTr=o("marian"),UTr=o(" \u2014 "),lX=a("a"),JTr=o("FlaxMarianMTModel"),YTr=o(" (Marian model)"),KTr=l(),gC=a("li"),t1e=a("strong"),ZTr=o("mbart"),e8r=o(" \u2014 "),iX=a("a"),o8r=o("FlaxMBartForConditionalGeneration"),r8r=o(" (mBART model)"),t8r=l(),hC=a("li"),a1e=a("strong"),a8r=o("mt5"),n8r=o(" \u2014 "),dX=a("a"),s8r=o("FlaxMT5ForConditionalGeneration"),l8r=o(" (mT5 model)"),i8r=l(),pC=a("li"),n1e=a("strong"),d8r=o("pegasus"),c8r=o(" \u2014 "),cX=a("a"),f8r=o("FlaxPegasusForConditionalGeneration"),m8r=o(" (Pegasus model)"),g8r=l(),_C=a("li"),s1e=a("strong"),h8r=o("t5"),p8r=o(" \u2014 "),fX=a("a"),_8r=o("FlaxT5ForConditionalGeneration"),u8r=o(" (T5 model)"),b8r=l(),l1e=a("p"),v8r=o("Examples:"),T8r=l(),f(UA.$$.fragment),J7e=l(),of=a("h2"),uC=a("a"),i1e=a("span"),f(JA.$$.fragment),F8r=l(),d1e=a("span"),C8r=o("FlaxAutoModelForSequenceClassification"),Y7e=l(),kr=a("div"),f(YA.$$.fragment),M8r=l(),rf=a("p"),E8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),c1e=a("code"),y8r=o("from_pretrained()"),w8r=o("class method or the "),f1e=a("code"),A8r=o("from_config()"),L8r=o(`class
method.`),B8r=l(),KA=a("p"),x8r=o("This class cannot be instantiated directly using "),m1e=a("code"),k8r=o("__init__()"),R8r=o(" (throws an error)."),S8r=l(),Et=a("div"),f(ZA.$$.fragment),P8r=l(),g1e=a("p"),$8r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),I8r=l(),tf=a("p"),j8r=o(`Note:
Loading a model from its configuration file does `),h1e=a("strong"),N8r=o("not"),D8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),p1e=a("code"),q8r=o("from_pretrained()"),G8r=o("to load the model weights."),O8r=l(),_1e=a("p"),X8r=o("Examples:"),z8r=l(),f(e6.$$.fragment),V8r=l(),ko=a("div"),f(o6.$$.fragment),W8r=l(),u1e=a("p"),Q8r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),H8r=l(),An=a("p"),U8r=o("The model class to instantiate is selected based on the "),b1e=a("code"),J8r=o("model_type"),Y8r=o(` property of the config object (either
passed as an argument or loaded from `),v1e=a("code"),K8r=o("pretrained_model_name_or_path"),Z8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T1e=a("code"),eFr=o("pretrained_model_name_or_path"),oFr=o(":"),rFr=l(),Fe=a("ul"),bC=a("li"),F1e=a("strong"),tFr=o("albert"),aFr=o(" \u2014 "),mX=a("a"),nFr=o("FlaxAlbertForSequenceClassification"),sFr=o(" (ALBERT model)"),lFr=l(),vC=a("li"),C1e=a("strong"),iFr=o("bart"),dFr=o(" \u2014 "),gX=a("a"),cFr=o("FlaxBartForSequenceClassification"),fFr=o(" (BART model)"),mFr=l(),TC=a("li"),M1e=a("strong"),gFr=o("bert"),hFr=o(" \u2014 "),hX=a("a"),pFr=o("FlaxBertForSequenceClassification"),_Fr=o(" (BERT model)"),uFr=l(),FC=a("li"),E1e=a("strong"),bFr=o("big_bird"),vFr=o(" \u2014 "),pX=a("a"),TFr=o("FlaxBigBirdForSequenceClassification"),FFr=o(" (BigBird model)"),CFr=l(),CC=a("li"),y1e=a("strong"),MFr=o("distilbert"),EFr=o(" \u2014 "),_X=a("a"),yFr=o("FlaxDistilBertForSequenceClassification"),wFr=o(" (DistilBERT model)"),AFr=l(),MC=a("li"),w1e=a("strong"),LFr=o("electra"),BFr=o(" \u2014 "),uX=a("a"),xFr=o("FlaxElectraForSequenceClassification"),kFr=o(" (ELECTRA model)"),RFr=l(),EC=a("li"),A1e=a("strong"),SFr=o("mbart"),PFr=o(" \u2014 "),bX=a("a"),$Fr=o("FlaxMBartForSequenceClassification"),IFr=o(" (mBART model)"),jFr=l(),yC=a("li"),L1e=a("strong"),NFr=o("roberta"),DFr=o(" \u2014 "),vX=a("a"),qFr=o("FlaxRobertaForSequenceClassification"),GFr=o(" (RoBERTa model)"),OFr=l(),wC=a("li"),B1e=a("strong"),XFr=o("roformer"),zFr=o(" \u2014 "),TX=a("a"),VFr=o("FlaxRoFormerForSequenceClassification"),WFr=o(" (RoFormer model)"),QFr=l(),x1e=a("p"),HFr=o("Examples:"),UFr=l(),f(r6.$$.fragment),K7e=l(),af=a("h2"),AC=a("a"),k1e=a("span"),f(t6.$$.fragment),JFr=l(),R1e=a("span"),YFr=o("FlaxAutoModelForQuestionAnswering"),Z7e=l(),Rr=a("div"),f(a6.$$.fragment),KFr=l(),nf=a("p"),ZFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),S1e=a("code"),e9r=o("from_pretrained()"),o9r=o("class method or the "),P1e=a("code"),r9r=o("from_config()"),t9r=o(`class
method.`),a9r=l(),n6=a("p"),n9r=o("This class cannot be instantiated directly using "),$1e=a("code"),s9r=o("__init__()"),l9r=o(" (throws an error)."),i9r=l(),yt=a("div"),f(s6.$$.fragment),d9r=l(),I1e=a("p"),c9r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),f9r=l(),sf=a("p"),m9r=o(`Note:
Loading a model from its configuration file does `),j1e=a("strong"),g9r=o("not"),h9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),N1e=a("code"),p9r=o("from_pretrained()"),_9r=o("to load the model weights."),u9r=l(),D1e=a("p"),b9r=o("Examples:"),v9r=l(),f(l6.$$.fragment),T9r=l(),Ro=a("div"),f(i6.$$.fragment),F9r=l(),q1e=a("p"),C9r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),M9r=l(),Ln=a("p"),E9r=o("The model class to instantiate is selected based on the "),G1e=a("code"),y9r=o("model_type"),w9r=o(` property of the config object (either
passed as an argument or loaded from `),O1e=a("code"),A9r=o("pretrained_model_name_or_path"),L9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X1e=a("code"),B9r=o("pretrained_model_name_or_path"),x9r=o(":"),k9r=l(),Ce=a("ul"),LC=a("li"),z1e=a("strong"),R9r=o("albert"),S9r=o(" \u2014 "),FX=a("a"),P9r=o("FlaxAlbertForQuestionAnswering"),$9r=o(" (ALBERT model)"),I9r=l(),BC=a("li"),V1e=a("strong"),j9r=o("bart"),N9r=o(" \u2014 "),CX=a("a"),D9r=o("FlaxBartForQuestionAnswering"),q9r=o(" (BART model)"),G9r=l(),xC=a("li"),W1e=a("strong"),O9r=o("bert"),X9r=o(" \u2014 "),MX=a("a"),z9r=o("FlaxBertForQuestionAnswering"),V9r=o(" (BERT model)"),W9r=l(),kC=a("li"),Q1e=a("strong"),Q9r=o("big_bird"),H9r=o(" \u2014 "),EX=a("a"),U9r=o("FlaxBigBirdForQuestionAnswering"),J9r=o(" (BigBird model)"),Y9r=l(),RC=a("li"),H1e=a("strong"),K9r=o("distilbert"),Z9r=o(" \u2014 "),yX=a("a"),eCr=o("FlaxDistilBertForQuestionAnswering"),oCr=o(" (DistilBERT model)"),rCr=l(),SC=a("li"),U1e=a("strong"),tCr=o("electra"),aCr=o(" \u2014 "),wX=a("a"),nCr=o("FlaxElectraForQuestionAnswering"),sCr=o(" (ELECTRA model)"),lCr=l(),PC=a("li"),J1e=a("strong"),iCr=o("mbart"),dCr=o(" \u2014 "),AX=a("a"),cCr=o("FlaxMBartForQuestionAnswering"),fCr=o(" (mBART model)"),mCr=l(),$C=a("li"),Y1e=a("strong"),gCr=o("roberta"),hCr=o(" \u2014 "),LX=a("a"),pCr=o("FlaxRobertaForQuestionAnswering"),_Cr=o(" (RoBERTa model)"),uCr=l(),IC=a("li"),K1e=a("strong"),bCr=o("roformer"),vCr=o(" \u2014 "),BX=a("a"),TCr=o("FlaxRoFormerForQuestionAnswering"),FCr=o(" (RoFormer model)"),CCr=l(),Z1e=a("p"),MCr=o("Examples:"),ECr=l(),f(d6.$$.fragment),eBe=l(),lf=a("h2"),jC=a("a"),ebe=a("span"),f(c6.$$.fragment),yCr=l(),obe=a("span"),wCr=o("FlaxAutoModelForTokenClassification"),oBe=l(),Sr=a("div"),f(f6.$$.fragment),ACr=l(),df=a("p"),LCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rbe=a("code"),BCr=o("from_pretrained()"),xCr=o("class method or the "),tbe=a("code"),kCr=o("from_config()"),RCr=o(`class
method.`),SCr=l(),m6=a("p"),PCr=o("This class cannot be instantiated directly using "),abe=a("code"),$Cr=o("__init__()"),ICr=o(" (throws an error)."),jCr=l(),wt=a("div"),f(g6.$$.fragment),NCr=l(),nbe=a("p"),DCr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qCr=l(),cf=a("p"),GCr=o(`Note:
Loading a model from its configuration file does `),sbe=a("strong"),OCr=o("not"),XCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lbe=a("code"),zCr=o("from_pretrained()"),VCr=o("to load the model weights."),WCr=l(),ibe=a("p"),QCr=o("Examples:"),HCr=l(),f(h6.$$.fragment),UCr=l(),So=a("div"),f(p6.$$.fragment),JCr=l(),dbe=a("p"),YCr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),KCr=l(),Bn=a("p"),ZCr=o("The model class to instantiate is selected based on the "),cbe=a("code"),e4r=o("model_type"),o4r=o(` property of the config object (either
passed as an argument or loaded from `),fbe=a("code"),r4r=o("pretrained_model_name_or_path"),t4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=a("code"),a4r=o("pretrained_model_name_or_path"),n4r=o(":"),s4r=l(),so=a("ul"),NC=a("li"),gbe=a("strong"),l4r=o("albert"),i4r=o(" \u2014 "),xX=a("a"),d4r=o("FlaxAlbertForTokenClassification"),c4r=o(" (ALBERT model)"),f4r=l(),DC=a("li"),hbe=a("strong"),m4r=o("bert"),g4r=o(" \u2014 "),kX=a("a"),h4r=o("FlaxBertForTokenClassification"),p4r=o(" (BERT model)"),_4r=l(),qC=a("li"),pbe=a("strong"),u4r=o("big_bird"),b4r=o(" \u2014 "),RX=a("a"),v4r=o("FlaxBigBirdForTokenClassification"),T4r=o(" (BigBird model)"),F4r=l(),GC=a("li"),_be=a("strong"),C4r=o("distilbert"),M4r=o(" \u2014 "),SX=a("a"),E4r=o("FlaxDistilBertForTokenClassification"),y4r=o(" (DistilBERT model)"),w4r=l(),OC=a("li"),ube=a("strong"),A4r=o("electra"),L4r=o(" \u2014 "),PX=a("a"),B4r=o("FlaxElectraForTokenClassification"),x4r=o(" (ELECTRA model)"),k4r=l(),XC=a("li"),bbe=a("strong"),R4r=o("roberta"),S4r=o(" \u2014 "),$X=a("a"),P4r=o("FlaxRobertaForTokenClassification"),$4r=o(" (RoBERTa model)"),I4r=l(),zC=a("li"),vbe=a("strong"),j4r=o("roformer"),N4r=o(" \u2014 "),IX=a("a"),D4r=o("FlaxRoFormerForTokenClassification"),q4r=o(" (RoFormer model)"),G4r=l(),Tbe=a("p"),O4r=o("Examples:"),X4r=l(),f(_6.$$.fragment),rBe=l(),ff=a("h2"),VC=a("a"),Fbe=a("span"),f(u6.$$.fragment),z4r=l(),Cbe=a("span"),V4r=o("FlaxAutoModelForMultipleChoice"),tBe=l(),Pr=a("div"),f(b6.$$.fragment),W4r=l(),mf=a("p"),Q4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Mbe=a("code"),H4r=o("from_pretrained()"),U4r=o("class method or the "),Ebe=a("code"),J4r=o("from_config()"),Y4r=o(`class
method.`),K4r=l(),v6=a("p"),Z4r=o("This class cannot be instantiated directly using "),ybe=a("code"),eMr=o("__init__()"),oMr=o(" (throws an error)."),rMr=l(),At=a("div"),f(T6.$$.fragment),tMr=l(),wbe=a("p"),aMr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nMr=l(),gf=a("p"),sMr=o(`Note:
Loading a model from its configuration file does `),Abe=a("strong"),lMr=o("not"),iMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lbe=a("code"),dMr=o("from_pretrained()"),cMr=o("to load the model weights."),fMr=l(),Bbe=a("p"),mMr=o("Examples:"),gMr=l(),f(F6.$$.fragment),hMr=l(),Po=a("div"),f(C6.$$.fragment),pMr=l(),xbe=a("p"),_Mr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uMr=l(),xn=a("p"),bMr=o("The model class to instantiate is selected based on the "),kbe=a("code"),vMr=o("model_type"),TMr=o(` property of the config object (either
passed as an argument or loaded from `),Rbe=a("code"),FMr=o("pretrained_model_name_or_path"),CMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sbe=a("code"),MMr=o("pretrained_model_name_or_path"),EMr=o(":"),yMr=l(),lo=a("ul"),WC=a("li"),Pbe=a("strong"),wMr=o("albert"),AMr=o(" \u2014 "),jX=a("a"),LMr=o("FlaxAlbertForMultipleChoice"),BMr=o(" (ALBERT model)"),xMr=l(),QC=a("li"),$be=a("strong"),kMr=o("bert"),RMr=o(" \u2014 "),NX=a("a"),SMr=o("FlaxBertForMultipleChoice"),PMr=o(" (BERT model)"),$Mr=l(),HC=a("li"),Ibe=a("strong"),IMr=o("big_bird"),jMr=o(" \u2014 "),DX=a("a"),NMr=o("FlaxBigBirdForMultipleChoice"),DMr=o(" (BigBird model)"),qMr=l(),UC=a("li"),jbe=a("strong"),GMr=o("distilbert"),OMr=o(" \u2014 "),qX=a("a"),XMr=o("FlaxDistilBertForMultipleChoice"),zMr=o(" (DistilBERT model)"),VMr=l(),JC=a("li"),Nbe=a("strong"),WMr=o("electra"),QMr=o(" \u2014 "),GX=a("a"),HMr=o("FlaxElectraForMultipleChoice"),UMr=o(" (ELECTRA model)"),JMr=l(),YC=a("li"),Dbe=a("strong"),YMr=o("roberta"),KMr=o(" \u2014 "),OX=a("a"),ZMr=o("FlaxRobertaForMultipleChoice"),eEr=o(" (RoBERTa model)"),oEr=l(),KC=a("li"),qbe=a("strong"),rEr=o("roformer"),tEr=o(" \u2014 "),XX=a("a"),aEr=o("FlaxRoFormerForMultipleChoice"),nEr=o(" (RoFormer model)"),sEr=l(),Gbe=a("p"),lEr=o("Examples:"),iEr=l(),f(M6.$$.fragment),aBe=l(),hf=a("h2"),ZC=a("a"),Obe=a("span"),f(E6.$$.fragment),dEr=l(),Xbe=a("span"),cEr=o("FlaxAutoModelForNextSentencePrediction"),nBe=l(),$r=a("div"),f(y6.$$.fragment),fEr=l(),pf=a("p"),mEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zbe=a("code"),gEr=o("from_pretrained()"),hEr=o("class method or the "),Vbe=a("code"),pEr=o("from_config()"),_Er=o(`class
method.`),uEr=l(),w6=a("p"),bEr=o("This class cannot be instantiated directly using "),Wbe=a("code"),vEr=o("__init__()"),TEr=o(" (throws an error)."),FEr=l(),Lt=a("div"),f(A6.$$.fragment),CEr=l(),Qbe=a("p"),MEr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),EEr=l(),_f=a("p"),yEr=o(`Note:
Loading a model from its configuration file does `),Hbe=a("strong"),wEr=o("not"),AEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ube=a("code"),LEr=o("from_pretrained()"),BEr=o("to load the model weights."),xEr=l(),Jbe=a("p"),kEr=o("Examples:"),REr=l(),f(L6.$$.fragment),SEr=l(),$o=a("div"),f(B6.$$.fragment),PEr=l(),Ybe=a("p"),$Er=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),IEr=l(),kn=a("p"),jEr=o("The model class to instantiate is selected based on the "),Kbe=a("code"),NEr=o("model_type"),DEr=o(` property of the config object (either
passed as an argument or loaded from `),Zbe=a("code"),qEr=o("pretrained_model_name_or_path"),GEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=a("code"),OEr=o("pretrained_model_name_or_path"),XEr=o(":"),zEr=l(),o2e=a("ul"),e4=a("li"),r2e=a("strong"),VEr=o("bert"),WEr=o(" \u2014 "),zX=a("a"),QEr=o("FlaxBertForNextSentencePrediction"),HEr=o(" (BERT model)"),UEr=l(),t2e=a("p"),JEr=o("Examples:"),YEr=l(),f(x6.$$.fragment),sBe=l(),uf=a("h2"),o4=a("a"),a2e=a("span"),f(k6.$$.fragment),KEr=l(),n2e=a("span"),ZEr=o("FlaxAutoModelForImageClassification"),lBe=l(),Ir=a("div"),f(R6.$$.fragment),e3r=l(),bf=a("p"),o3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),s2e=a("code"),r3r=o("from_pretrained()"),t3r=o("class method or the "),l2e=a("code"),a3r=o("from_config()"),n3r=o(`class
method.`),s3r=l(),S6=a("p"),l3r=o("This class cannot be instantiated directly using "),i2e=a("code"),i3r=o("__init__()"),d3r=o(" (throws an error)."),c3r=l(),Bt=a("div"),f(P6.$$.fragment),f3r=l(),d2e=a("p"),m3r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),g3r=l(),vf=a("p"),h3r=o(`Note:
Loading a model from its configuration file does `),c2e=a("strong"),p3r=o("not"),_3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),f2e=a("code"),u3r=o("from_pretrained()"),b3r=o("to load the model weights."),v3r=l(),m2e=a("p"),T3r=o("Examples:"),F3r=l(),f($6.$$.fragment),C3r=l(),Io=a("div"),f(I6.$$.fragment),M3r=l(),g2e=a("p"),E3r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),y3r=l(),Rn=a("p"),w3r=o("The model class to instantiate is selected based on the "),h2e=a("code"),A3r=o("model_type"),L3r=o(` property of the config object (either
passed as an argument or loaded from `),p2e=a("code"),B3r=o("pretrained_model_name_or_path"),x3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=a("code"),k3r=o("pretrained_model_name_or_path"),R3r=o(":"),S3r=l(),j6=a("ul"),r4=a("li"),u2e=a("strong"),P3r=o("beit"),$3r=o(" \u2014 "),VX=a("a"),I3r=o("FlaxBeitForImageClassification"),j3r=o(" (BEiT model)"),N3r=l(),t4=a("li"),b2e=a("strong"),D3r=o("vit"),q3r=o(" \u2014 "),WX=a("a"),G3r=o("FlaxViTForImageClassification"),O3r=o(" (ViT model)"),X3r=l(),v2e=a("p"),z3r=o("Examples:"),V3r=l(),f(N6.$$.fragment),iBe=l(),Tf=a("h2"),a4=a("a"),T2e=a("span"),f(D6.$$.fragment),W3r=l(),F2e=a("span"),Q3r=o("FlaxAutoModelForVision2Seq"),dBe=l(),jr=a("div"),f(q6.$$.fragment),H3r=l(),Ff=a("p"),U3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),C2e=a("code"),J3r=o("from_pretrained()"),Y3r=o("class method or the "),M2e=a("code"),K3r=o("from_config()"),Z3r=o(`class
method.`),eyr=l(),G6=a("p"),oyr=o("This class cannot be instantiated directly using "),E2e=a("code"),ryr=o("__init__()"),tyr=o(" (throws an error)."),ayr=l(),xt=a("div"),f(O6.$$.fragment),nyr=l(),y2e=a("p"),syr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lyr=l(),Cf=a("p"),iyr=o(`Note:
Loading a model from its configuration file does `),w2e=a("strong"),dyr=o("not"),cyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),A2e=a("code"),fyr=o("from_pretrained()"),myr=o("to load the model weights."),gyr=l(),L2e=a("p"),hyr=o("Examples:"),pyr=l(),f(X6.$$.fragment),_yr=l(),jo=a("div"),f(z6.$$.fragment),uyr=l(),B2e=a("p"),byr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vyr=l(),Sn=a("p"),Tyr=o("The model class to instantiate is selected based on the "),x2e=a("code"),Fyr=o("model_type"),Cyr=o(` property of the config object (either
passed as an argument or loaded from `),k2e=a("code"),Myr=o("pretrained_model_name_or_path"),Eyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=a("code"),yyr=o("pretrained_model_name_or_path"),wyr=o(":"),Ayr=l(),S2e=a("ul"),n4=a("li"),P2e=a("strong"),Lyr=o("vision-encoder-decoder"),Byr=o(" \u2014 "),QX=a("a"),xyr=o("FlaxVisionEncoderDecoderModel"),kyr=o(" (Vision Encoder decoder model)"),Ryr=l(),$2e=a("p"),Syr=o("Examples:"),Pyr=l(),f(V6.$$.fragment),this.h()},l(d){const u=O_t('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),Ae=i(d),ie=n(d,"H1",{class:!0});var W6=s(ie);me=n(W6,"A",{id:!0,class:!0,href:!0});var I2e=s(me);to=n(I2e,"SPAN",{});var j2e=s(to);m(ce.$$.fragment,j2e),j2e.forEach(t),I2e.forEach(t),ue=i(W6),Do=n(W6,"SPAN",{});var Iyr=s(Do);wi=r(Iyr,"Auto Classes"),Iyr.forEach(t),W6.forEach(t),Ef=i(d),sa=n(d,"P",{});var fBe=s(sa);Ai=r(fBe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Li=n(fBe,"CODE",{});var jyr=s(Li);tM=r(jyr,"from_pretrained()"),jyr.forEach(t),yf=r(fBe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),fBe.forEach(t),ye=i(d),io=n(d,"P",{});var s4=s(io);Bi=r(s4,"Instantiating one of "),Pn=n(s4,"A",{href:!0});var Nyr=s(Pn);aM=r(Nyr,"AutoConfig"),Nyr.forEach(t),$n=r(s4,", "),In=n(s4,"A",{href:!0});var Dyr=s(In);nM=r(Dyr,"AutoModel"),Dyr.forEach(t),xi=r(s4,`, and
`),jn=n(s4,"A",{href:!0});var qyr=s(jn);sM=r(qyr,"AutoTokenizer"),qyr.forEach(t),ki=r(s4," will directly create a class of the relevant architecture. For instance"),s4.forEach(t),wf=i(d),m($a.$$.fragment,d),co=i(d),ge=n(d,"P",{});var mBe=s(ge);O0=r(mBe,"will create a model that is an instance of "),Ri=n(mBe,"A",{href:!0});var Gyr=s(Ri);X0=r(Gyr,"BertModel"),Gyr.forEach(t),z0=r(mBe,"."),mBe.forEach(t),qo=i(d),Ia=n(d,"P",{});var gBe=s(Ia);V0=r(gBe,"There is one class of "),Af=n(gBe,"CODE",{});var Oyr=s(Af);W0=r(Oyr,"AutoModel"),Oyr.forEach(t),Fke=r(gBe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),gBe.forEach(t),fLe=i(d),Si=n(d,"H2",{class:!0});var hBe=s(Si);Lf=n(hBe,"A",{id:!0,class:!0,href:!0});var Xyr=s(Lf);qV=n(Xyr,"SPAN",{});var zyr=s(qV);m(lM.$$.fragment,zyr),zyr.forEach(t),Xyr.forEach(t),Cke=i(hBe),GV=n(hBe,"SPAN",{});var Vyr=s(GV);Mke=r(Vyr,"Extending the Auto Classes"),Vyr.forEach(t),hBe.forEach(t),mLe=i(d),Nn=n(d,"P",{});var HX=s(Nn);Eke=r(HX,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),OV=n(HX,"CODE",{});var Wyr=s(OV);yke=r(Wyr,"NewModel"),Wyr.forEach(t),wke=r(HX,", make sure you have a "),XV=n(HX,"CODE",{});var Qyr=s(XV);Ake=r(Qyr,"NewModelConfig"),Qyr.forEach(t),Lke=r(HX,` then you can add those to the auto
classes like this:`),HX.forEach(t),gLe=i(d),m(iM.$$.fragment,d),hLe=i(d),Q0=n(d,"P",{});var Hyr=s(Q0);Bke=r(Hyr,"You will then be able to use the auto classes like you would usually do!"),Hyr.forEach(t),pLe=i(d),m(Bf.$$.fragment,d),_Le=i(d),Pi=n(d,"H2",{class:!0});var pBe=s(Pi);xf=n(pBe,"A",{id:!0,class:!0,href:!0});var Uyr=s(xf);zV=n(Uyr,"SPAN",{});var Jyr=s(zV);m(dM.$$.fragment,Jyr),Jyr.forEach(t),Uyr.forEach(t),xke=i(pBe),VV=n(pBe,"SPAN",{});var Yyr=s(VV);kke=r(Yyr,"AutoConfig"),Yyr.forEach(t),pBe.forEach(t),uLe=i(d),Go=n(d,"DIV",{class:!0});var Ps=s(Go);m(cM.$$.fragment,Ps),Rke=i(Ps),fM=n(Ps,"P",{});var _Be=s(fM);Ske=r(_Be,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),H0=n(_Be,"A",{href:!0});var Kyr=s(H0);Pke=r(Kyr,"from_pretrained()"),Kyr.forEach(t),$ke=r(_Be," class method."),_Be.forEach(t),Ike=i(Ps),mM=n(Ps,"P",{});var uBe=s(mM);jke=r(uBe,"This class cannot be instantiated directly using "),WV=n(uBe,"CODE",{});var Zyr=s(WV);Nke=r(Zyr,"__init__()"),Zyr.forEach(t),Dke=r(uBe," (throws an error)."),uBe.forEach(t),qke=i(Ps),fo=n(Ps,"DIV",{class:!0});var ia=s(fo);m(gM.$$.fragment,ia),Gke=i(ia),QV=n(ia,"P",{});var ewr=s(QV);Oke=r(ewr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),ewr.forEach(t),Xke=i(ia),$i=n(ia,"P",{});var UX=s($i);zke=r(UX,"The configuration class to instantiate is selected based on the "),HV=n(UX,"CODE",{});var owr=s(HV);Vke=r(owr,"model_type"),owr.forEach(t),Wke=r(UX,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),UV=n(UX,"CODE",{});var rwr=s(UV);Qke=r(rwr,"pretrained_model_name_or_path"),rwr.forEach(t),Hke=r(UX,":"),UX.forEach(t),Uke=i(ia),v=n(ia,"UL",{});var T=s(v);kf=n(T,"LI",{});var N2e=s(kf);JV=n(N2e,"STRONG",{});var twr=s(JV);Jke=r(twr,"albert"),twr.forEach(t),Yke=r(N2e," \u2014 "),U0=n(N2e,"A",{href:!0});var awr=s(U0);Kke=r(awr,"AlbertConfig"),awr.forEach(t),Zke=r(N2e," (ALBERT model)"),N2e.forEach(t),eRe=i(T),Rf=n(T,"LI",{});var D2e=s(Rf);YV=n(D2e,"STRONG",{});var nwr=s(YV);oRe=r(nwr,"bart"),nwr.forEach(t),rRe=r(D2e," \u2014 "),J0=n(D2e,"A",{href:!0});var swr=s(J0);tRe=r(swr,"BartConfig"),swr.forEach(t),aRe=r(D2e," (BART model)"),D2e.forEach(t),nRe=i(T),Sf=n(T,"LI",{});var q2e=s(Sf);KV=n(q2e,"STRONG",{});var lwr=s(KV);sRe=r(lwr,"beit"),lwr.forEach(t),lRe=r(q2e," \u2014 "),Y0=n(q2e,"A",{href:!0});var iwr=s(Y0);iRe=r(iwr,"BeitConfig"),iwr.forEach(t),dRe=r(q2e," (BEiT model)"),q2e.forEach(t),cRe=i(T),Pf=n(T,"LI",{});var G2e=s(Pf);ZV=n(G2e,"STRONG",{});var dwr=s(ZV);fRe=r(dwr,"bert"),dwr.forEach(t),mRe=r(G2e," \u2014 "),K0=n(G2e,"A",{href:!0});var cwr=s(K0);gRe=r(cwr,"BertConfig"),cwr.forEach(t),hRe=r(G2e," (BERT model)"),G2e.forEach(t),pRe=i(T),$f=n(T,"LI",{});var O2e=s($f);eW=n(O2e,"STRONG",{});var fwr=s(eW);_Re=r(fwr,"bert-generation"),fwr.forEach(t),uRe=r(O2e," \u2014 "),Z0=n(O2e,"A",{href:!0});var mwr=s(Z0);bRe=r(mwr,"BertGenerationConfig"),mwr.forEach(t),vRe=r(O2e," (Bert Generation model)"),O2e.forEach(t),TRe=i(T),If=n(T,"LI",{});var X2e=s(If);oW=n(X2e,"STRONG",{});var gwr=s(oW);FRe=r(gwr,"big_bird"),gwr.forEach(t),CRe=r(X2e," \u2014 "),eL=n(X2e,"A",{href:!0});var hwr=s(eL);MRe=r(hwr,"BigBirdConfig"),hwr.forEach(t),ERe=r(X2e," (BigBird model)"),X2e.forEach(t),yRe=i(T),jf=n(T,"LI",{});var z2e=s(jf);rW=n(z2e,"STRONG",{});var pwr=s(rW);wRe=r(pwr,"bigbird_pegasus"),pwr.forEach(t),ARe=r(z2e," \u2014 "),oL=n(z2e,"A",{href:!0});var _wr=s(oL);LRe=r(_wr,"BigBirdPegasusConfig"),_wr.forEach(t),BRe=r(z2e," (BigBirdPegasus model)"),z2e.forEach(t),xRe=i(T),Nf=n(T,"LI",{});var V2e=s(Nf);tW=n(V2e,"STRONG",{});var uwr=s(tW);kRe=r(uwr,"blenderbot"),uwr.forEach(t),RRe=r(V2e," \u2014 "),rL=n(V2e,"A",{href:!0});var bwr=s(rL);SRe=r(bwr,"BlenderbotConfig"),bwr.forEach(t),PRe=r(V2e," (Blenderbot model)"),V2e.forEach(t),$Re=i(T),Df=n(T,"LI",{});var W2e=s(Df);aW=n(W2e,"STRONG",{});var vwr=s(aW);IRe=r(vwr,"blenderbot-small"),vwr.forEach(t),jRe=r(W2e," \u2014 "),tL=n(W2e,"A",{href:!0});var Twr=s(tL);NRe=r(Twr,"BlenderbotSmallConfig"),Twr.forEach(t),DRe=r(W2e," (BlenderbotSmall model)"),W2e.forEach(t),qRe=i(T),qf=n(T,"LI",{});var Q2e=s(qf);nW=n(Q2e,"STRONG",{});var Fwr=s(nW);GRe=r(Fwr,"camembert"),Fwr.forEach(t),ORe=r(Q2e," \u2014 "),aL=n(Q2e,"A",{href:!0});var Cwr=s(aL);XRe=r(Cwr,"CamembertConfig"),Cwr.forEach(t),zRe=r(Q2e," (CamemBERT model)"),Q2e.forEach(t),VRe=i(T),Gf=n(T,"LI",{});var H2e=s(Gf);sW=n(H2e,"STRONG",{});var Mwr=s(sW);WRe=r(Mwr,"canine"),Mwr.forEach(t),QRe=r(H2e," \u2014 "),nL=n(H2e,"A",{href:!0});var Ewr=s(nL);HRe=r(Ewr,"CanineConfig"),Ewr.forEach(t),URe=r(H2e," (Canine model)"),H2e.forEach(t),JRe=i(T),Of=n(T,"LI",{});var U2e=s(Of);lW=n(U2e,"STRONG",{});var ywr=s(lW);YRe=r(ywr,"clip"),ywr.forEach(t),KRe=r(U2e," \u2014 "),sL=n(U2e,"A",{href:!0});var wwr=s(sL);ZRe=r(wwr,"CLIPConfig"),wwr.forEach(t),eSe=r(U2e," (CLIP model)"),U2e.forEach(t),oSe=i(T),Xf=n(T,"LI",{});var J2e=s(Xf);iW=n(J2e,"STRONG",{});var Awr=s(iW);rSe=r(Awr,"convbert"),Awr.forEach(t),tSe=r(J2e," \u2014 "),lL=n(J2e,"A",{href:!0});var Lwr=s(lL);aSe=r(Lwr,"ConvBertConfig"),Lwr.forEach(t),nSe=r(J2e," (ConvBERT model)"),J2e.forEach(t),sSe=i(T),zf=n(T,"LI",{});var Y2e=s(zf);dW=n(Y2e,"STRONG",{});var Bwr=s(dW);lSe=r(Bwr,"convnext"),Bwr.forEach(t),iSe=r(Y2e," \u2014 "),iL=n(Y2e,"A",{href:!0});var xwr=s(iL);dSe=r(xwr,"ConvNextConfig"),xwr.forEach(t),cSe=r(Y2e," (ConvNext model)"),Y2e.forEach(t),fSe=i(T),Vf=n(T,"LI",{});var K2e=s(Vf);cW=n(K2e,"STRONG",{});var kwr=s(cW);mSe=r(kwr,"ctrl"),kwr.forEach(t),gSe=r(K2e," \u2014 "),dL=n(K2e,"A",{href:!0});var Rwr=s(dL);hSe=r(Rwr,"CTRLConfig"),Rwr.forEach(t),pSe=r(K2e," (CTRL model)"),K2e.forEach(t),_Se=i(T),Wf=n(T,"LI",{});var Z2e=s(Wf);fW=n(Z2e,"STRONG",{});var Swr=s(fW);uSe=r(Swr,"deberta"),Swr.forEach(t),bSe=r(Z2e," \u2014 "),cL=n(Z2e,"A",{href:!0});var Pwr=s(cL);vSe=r(Pwr,"DebertaConfig"),Pwr.forEach(t),TSe=r(Z2e," (DeBERTa model)"),Z2e.forEach(t),FSe=i(T),Qf=n(T,"LI",{});var eve=s(Qf);mW=n(eve,"STRONG",{});var $wr=s(mW);CSe=r($wr,"deberta-v2"),$wr.forEach(t),MSe=r(eve," \u2014 "),fL=n(eve,"A",{href:!0});var Iwr=s(fL);ESe=r(Iwr,"DebertaV2Config"),Iwr.forEach(t),ySe=r(eve," (DeBERTa-v2 model)"),eve.forEach(t),wSe=i(T),Hf=n(T,"LI",{});var ove=s(Hf);gW=n(ove,"STRONG",{});var jwr=s(gW);ASe=r(jwr,"deit"),jwr.forEach(t),LSe=r(ove," \u2014 "),mL=n(ove,"A",{href:!0});var Nwr=s(mL);BSe=r(Nwr,"DeiTConfig"),Nwr.forEach(t),xSe=r(ove," (DeiT model)"),ove.forEach(t),kSe=i(T),Uf=n(T,"LI",{});var rve=s(Uf);hW=n(rve,"STRONG",{});var Dwr=s(hW);RSe=r(Dwr,"detr"),Dwr.forEach(t),SSe=r(rve," \u2014 "),gL=n(rve,"A",{href:!0});var qwr=s(gL);PSe=r(qwr,"DetrConfig"),qwr.forEach(t),$Se=r(rve," (DETR model)"),rve.forEach(t),ISe=i(T),Jf=n(T,"LI",{});var tve=s(Jf);pW=n(tve,"STRONG",{});var Gwr=s(pW);jSe=r(Gwr,"distilbert"),Gwr.forEach(t),NSe=r(tve," \u2014 "),hL=n(tve,"A",{href:!0});var Owr=s(hL);DSe=r(Owr,"DistilBertConfig"),Owr.forEach(t),qSe=r(tve," (DistilBERT model)"),tve.forEach(t),GSe=i(T),Yf=n(T,"LI",{});var ave=s(Yf);_W=n(ave,"STRONG",{});var Xwr=s(_W);OSe=r(Xwr,"dpr"),Xwr.forEach(t),XSe=r(ave," \u2014 "),pL=n(ave,"A",{href:!0});var zwr=s(pL);zSe=r(zwr,"DPRConfig"),zwr.forEach(t),VSe=r(ave," (DPR model)"),ave.forEach(t),WSe=i(T),Kf=n(T,"LI",{});var nve=s(Kf);uW=n(nve,"STRONG",{});var Vwr=s(uW);QSe=r(Vwr,"electra"),Vwr.forEach(t),HSe=r(nve," \u2014 "),_L=n(nve,"A",{href:!0});var Wwr=s(_L);USe=r(Wwr,"ElectraConfig"),Wwr.forEach(t),JSe=r(nve," (ELECTRA model)"),nve.forEach(t),YSe=i(T),Zf=n(T,"LI",{});var sve=s(Zf);bW=n(sve,"STRONG",{});var Qwr=s(bW);KSe=r(Qwr,"encoder-decoder"),Qwr.forEach(t),ZSe=r(sve," \u2014 "),uL=n(sve,"A",{href:!0});var Hwr=s(uL);ePe=r(Hwr,"EncoderDecoderConfig"),Hwr.forEach(t),oPe=r(sve," (Encoder decoder model)"),sve.forEach(t),rPe=i(T),em=n(T,"LI",{});var lve=s(em);vW=n(lve,"STRONG",{});var Uwr=s(vW);tPe=r(Uwr,"flaubert"),Uwr.forEach(t),aPe=r(lve," \u2014 "),bL=n(lve,"A",{href:!0});var Jwr=s(bL);nPe=r(Jwr,"FlaubertConfig"),Jwr.forEach(t),sPe=r(lve," (FlauBERT model)"),lve.forEach(t),lPe=i(T),om=n(T,"LI",{});var ive=s(om);TW=n(ive,"STRONG",{});var Ywr=s(TW);iPe=r(Ywr,"fnet"),Ywr.forEach(t),dPe=r(ive," \u2014 "),vL=n(ive,"A",{href:!0});var Kwr=s(vL);cPe=r(Kwr,"FNetConfig"),Kwr.forEach(t),fPe=r(ive," (FNet model)"),ive.forEach(t),mPe=i(T),rm=n(T,"LI",{});var dve=s(rm);FW=n(dve,"STRONG",{});var Zwr=s(FW);gPe=r(Zwr,"fsmt"),Zwr.forEach(t),hPe=r(dve," \u2014 "),TL=n(dve,"A",{href:!0});var eAr=s(TL);pPe=r(eAr,"FSMTConfig"),eAr.forEach(t),_Pe=r(dve," (FairSeq Machine-Translation model)"),dve.forEach(t),uPe=i(T),tm=n(T,"LI",{});var cve=s(tm);CW=n(cve,"STRONG",{});var oAr=s(CW);bPe=r(oAr,"funnel"),oAr.forEach(t),vPe=r(cve," \u2014 "),FL=n(cve,"A",{href:!0});var rAr=s(FL);TPe=r(rAr,"FunnelConfig"),rAr.forEach(t),FPe=r(cve," (Funnel Transformer model)"),cve.forEach(t),CPe=i(T),am=n(T,"LI",{});var fve=s(am);MW=n(fve,"STRONG",{});var tAr=s(MW);MPe=r(tAr,"gpt2"),tAr.forEach(t),EPe=r(fve," \u2014 "),CL=n(fve,"A",{href:!0});var aAr=s(CL);yPe=r(aAr,"GPT2Config"),aAr.forEach(t),wPe=r(fve," (OpenAI GPT-2 model)"),fve.forEach(t),APe=i(T),nm=n(T,"LI",{});var mve=s(nm);EW=n(mve,"STRONG",{});var nAr=s(EW);LPe=r(nAr,"gpt_neo"),nAr.forEach(t),BPe=r(mve," \u2014 "),ML=n(mve,"A",{href:!0});var sAr=s(ML);xPe=r(sAr,"GPTNeoConfig"),sAr.forEach(t),kPe=r(mve," (GPT Neo model)"),mve.forEach(t),RPe=i(T),sm=n(T,"LI",{});var gve=s(sm);yW=n(gve,"STRONG",{});var lAr=s(yW);SPe=r(lAr,"gptj"),lAr.forEach(t),PPe=r(gve," \u2014 "),EL=n(gve,"A",{href:!0});var iAr=s(EL);$Pe=r(iAr,"GPTJConfig"),iAr.forEach(t),IPe=r(gve," (GPT-J model)"),gve.forEach(t),jPe=i(T),lm=n(T,"LI",{});var hve=s(lm);wW=n(hve,"STRONG",{});var dAr=s(wW);NPe=r(dAr,"hubert"),dAr.forEach(t),DPe=r(hve," \u2014 "),yL=n(hve,"A",{href:!0});var cAr=s(yL);qPe=r(cAr,"HubertConfig"),cAr.forEach(t),GPe=r(hve," (Hubert model)"),hve.forEach(t),OPe=i(T),im=n(T,"LI",{});var pve=s(im);AW=n(pve,"STRONG",{});var fAr=s(AW);XPe=r(fAr,"ibert"),fAr.forEach(t),zPe=r(pve," \u2014 "),wL=n(pve,"A",{href:!0});var mAr=s(wL);VPe=r(mAr,"IBertConfig"),mAr.forEach(t),WPe=r(pve," (I-BERT model)"),pve.forEach(t),QPe=i(T),dm=n(T,"LI",{});var _ve=s(dm);LW=n(_ve,"STRONG",{});var gAr=s(LW);HPe=r(gAr,"imagegpt"),gAr.forEach(t),UPe=r(_ve," \u2014 "),AL=n(_ve,"A",{href:!0});var hAr=s(AL);JPe=r(hAr,"ImageGPTConfig"),hAr.forEach(t),YPe=r(_ve," (ImageGPT model)"),_ve.forEach(t),KPe=i(T),cm=n(T,"LI",{});var uve=s(cm);BW=n(uve,"STRONG",{});var pAr=s(BW);ZPe=r(pAr,"layoutlm"),pAr.forEach(t),e$e=r(uve," \u2014 "),LL=n(uve,"A",{href:!0});var _Ar=s(LL);o$e=r(_Ar,"LayoutLMConfig"),_Ar.forEach(t),r$e=r(uve," (LayoutLM model)"),uve.forEach(t),t$e=i(T),fm=n(T,"LI",{});var bve=s(fm);xW=n(bve,"STRONG",{});var uAr=s(xW);a$e=r(uAr,"layoutlmv2"),uAr.forEach(t),n$e=r(bve," \u2014 "),BL=n(bve,"A",{href:!0});var bAr=s(BL);s$e=r(bAr,"LayoutLMv2Config"),bAr.forEach(t),l$e=r(bve," (LayoutLMv2 model)"),bve.forEach(t),i$e=i(T),mm=n(T,"LI",{});var vve=s(mm);kW=n(vve,"STRONG",{});var vAr=s(kW);d$e=r(vAr,"led"),vAr.forEach(t),c$e=r(vve," \u2014 "),xL=n(vve,"A",{href:!0});var TAr=s(xL);f$e=r(TAr,"LEDConfig"),TAr.forEach(t),m$e=r(vve," (LED model)"),vve.forEach(t),g$e=i(T),gm=n(T,"LI",{});var Tve=s(gm);RW=n(Tve,"STRONG",{});var FAr=s(RW);h$e=r(FAr,"longformer"),FAr.forEach(t),p$e=r(Tve," \u2014 "),kL=n(Tve,"A",{href:!0});var CAr=s(kL);_$e=r(CAr,"LongformerConfig"),CAr.forEach(t),u$e=r(Tve," (Longformer model)"),Tve.forEach(t),b$e=i(T),hm=n(T,"LI",{});var Fve=s(hm);SW=n(Fve,"STRONG",{});var MAr=s(SW);v$e=r(MAr,"luke"),MAr.forEach(t),T$e=r(Fve," \u2014 "),RL=n(Fve,"A",{href:!0});var EAr=s(RL);F$e=r(EAr,"LukeConfig"),EAr.forEach(t),C$e=r(Fve," (LUKE model)"),Fve.forEach(t),M$e=i(T),pm=n(T,"LI",{});var Cve=s(pm);PW=n(Cve,"STRONG",{});var yAr=s(PW);E$e=r(yAr,"lxmert"),yAr.forEach(t),y$e=r(Cve," \u2014 "),SL=n(Cve,"A",{href:!0});var wAr=s(SL);w$e=r(wAr,"LxmertConfig"),wAr.forEach(t),A$e=r(Cve," (LXMERT model)"),Cve.forEach(t),L$e=i(T),_m=n(T,"LI",{});var Mve=s(_m);$W=n(Mve,"STRONG",{});var AAr=s($W);B$e=r(AAr,"m2m_100"),AAr.forEach(t),x$e=r(Mve," \u2014 "),PL=n(Mve,"A",{href:!0});var LAr=s(PL);k$e=r(LAr,"M2M100Config"),LAr.forEach(t),R$e=r(Mve," (M2M100 model)"),Mve.forEach(t),S$e=i(T),um=n(T,"LI",{});var Eve=s(um);IW=n(Eve,"STRONG",{});var BAr=s(IW);P$e=r(BAr,"marian"),BAr.forEach(t),$$e=r(Eve," \u2014 "),$L=n(Eve,"A",{href:!0});var xAr=s($L);I$e=r(xAr,"MarianConfig"),xAr.forEach(t),j$e=r(Eve," (Marian model)"),Eve.forEach(t),N$e=i(T),bm=n(T,"LI",{});var yve=s(bm);jW=n(yve,"STRONG",{});var kAr=s(jW);D$e=r(kAr,"mbart"),kAr.forEach(t),q$e=r(yve," \u2014 "),IL=n(yve,"A",{href:!0});var RAr=s(IL);G$e=r(RAr,"MBartConfig"),RAr.forEach(t),O$e=r(yve," (mBART model)"),yve.forEach(t),X$e=i(T),vm=n(T,"LI",{});var wve=s(vm);NW=n(wve,"STRONG",{});var SAr=s(NW);z$e=r(SAr,"megatron-bert"),SAr.forEach(t),V$e=r(wve," \u2014 "),jL=n(wve,"A",{href:!0});var PAr=s(jL);W$e=r(PAr,"MegatronBertConfig"),PAr.forEach(t),Q$e=r(wve," (MegatronBert model)"),wve.forEach(t),H$e=i(T),Tm=n(T,"LI",{});var Ave=s(Tm);DW=n(Ave,"STRONG",{});var $Ar=s(DW);U$e=r($Ar,"mobilebert"),$Ar.forEach(t),J$e=r(Ave," \u2014 "),NL=n(Ave,"A",{href:!0});var IAr=s(NL);Y$e=r(IAr,"MobileBertConfig"),IAr.forEach(t),K$e=r(Ave," (MobileBERT model)"),Ave.forEach(t),Z$e=i(T),Fm=n(T,"LI",{});var Lve=s(Fm);qW=n(Lve,"STRONG",{});var jAr=s(qW);eIe=r(jAr,"mpnet"),jAr.forEach(t),oIe=r(Lve," \u2014 "),DL=n(Lve,"A",{href:!0});var NAr=s(DL);rIe=r(NAr,"MPNetConfig"),NAr.forEach(t),tIe=r(Lve," (MPNet model)"),Lve.forEach(t),aIe=i(T),Cm=n(T,"LI",{});var Bve=s(Cm);GW=n(Bve,"STRONG",{});var DAr=s(GW);nIe=r(DAr,"mt5"),DAr.forEach(t),sIe=r(Bve," \u2014 "),qL=n(Bve,"A",{href:!0});var qAr=s(qL);lIe=r(qAr,"MT5Config"),qAr.forEach(t),iIe=r(Bve," (mT5 model)"),Bve.forEach(t),dIe=i(T),Mm=n(T,"LI",{});var xve=s(Mm);OW=n(xve,"STRONG",{});var GAr=s(OW);cIe=r(GAr,"nystromformer"),GAr.forEach(t),fIe=r(xve," \u2014 "),GL=n(xve,"A",{href:!0});var OAr=s(GL);mIe=r(OAr,"NystromformerConfig"),OAr.forEach(t),gIe=r(xve," (Nystromformer model)"),xve.forEach(t),hIe=i(T),Em=n(T,"LI",{});var kve=s(Em);XW=n(kve,"STRONG",{});var XAr=s(XW);pIe=r(XAr,"openai-gpt"),XAr.forEach(t),_Ie=r(kve," \u2014 "),OL=n(kve,"A",{href:!0});var zAr=s(OL);uIe=r(zAr,"OpenAIGPTConfig"),zAr.forEach(t),bIe=r(kve," (OpenAI GPT model)"),kve.forEach(t),vIe=i(T),ym=n(T,"LI",{});var Rve=s(ym);zW=n(Rve,"STRONG",{});var VAr=s(zW);TIe=r(VAr,"pegasus"),VAr.forEach(t),FIe=r(Rve," \u2014 "),XL=n(Rve,"A",{href:!0});var WAr=s(XL);CIe=r(WAr,"PegasusConfig"),WAr.forEach(t),MIe=r(Rve," (Pegasus model)"),Rve.forEach(t),EIe=i(T),wm=n(T,"LI",{});var Sve=s(wm);VW=n(Sve,"STRONG",{});var QAr=s(VW);yIe=r(QAr,"perceiver"),QAr.forEach(t),wIe=r(Sve," \u2014 "),zL=n(Sve,"A",{href:!0});var HAr=s(zL);AIe=r(HAr,"PerceiverConfig"),HAr.forEach(t),LIe=r(Sve," (Perceiver model)"),Sve.forEach(t),BIe=i(T),Am=n(T,"LI",{});var Pve=s(Am);WW=n(Pve,"STRONG",{});var UAr=s(WW);xIe=r(UAr,"plbart"),UAr.forEach(t),kIe=r(Pve," \u2014 "),VL=n(Pve,"A",{href:!0});var JAr=s(VL);RIe=r(JAr,"PLBartConfig"),JAr.forEach(t),SIe=r(Pve," (PLBart model)"),Pve.forEach(t),PIe=i(T),Lm=n(T,"LI",{});var $ve=s(Lm);QW=n($ve,"STRONG",{});var YAr=s(QW);$Ie=r(YAr,"poolformer"),YAr.forEach(t),IIe=r($ve," \u2014 "),WL=n($ve,"A",{href:!0});var KAr=s(WL);jIe=r(KAr,"PoolFormerConfig"),KAr.forEach(t),NIe=r($ve," (PoolFormer model)"),$ve.forEach(t),DIe=i(T),Bm=n(T,"LI",{});var Ive=s(Bm);HW=n(Ive,"STRONG",{});var ZAr=s(HW);qIe=r(ZAr,"prophetnet"),ZAr.forEach(t),GIe=r(Ive," \u2014 "),QL=n(Ive,"A",{href:!0});var e6r=s(QL);OIe=r(e6r,"ProphetNetConfig"),e6r.forEach(t),XIe=r(Ive," (ProphetNet model)"),Ive.forEach(t),zIe=i(T),xm=n(T,"LI",{});var jve=s(xm);UW=n(jve,"STRONG",{});var o6r=s(UW);VIe=r(o6r,"qdqbert"),o6r.forEach(t),WIe=r(jve," \u2014 "),HL=n(jve,"A",{href:!0});var r6r=s(HL);QIe=r(r6r,"QDQBertConfig"),r6r.forEach(t),HIe=r(jve," (QDQBert model)"),jve.forEach(t),UIe=i(T),km=n(T,"LI",{});var Nve=s(km);JW=n(Nve,"STRONG",{});var t6r=s(JW);JIe=r(t6r,"rag"),t6r.forEach(t),YIe=r(Nve," \u2014 "),UL=n(Nve,"A",{href:!0});var a6r=s(UL);KIe=r(a6r,"RagConfig"),a6r.forEach(t),ZIe=r(Nve," (RAG model)"),Nve.forEach(t),eje=i(T),Rm=n(T,"LI",{});var Dve=s(Rm);YW=n(Dve,"STRONG",{});var n6r=s(YW);oje=r(n6r,"realm"),n6r.forEach(t),rje=r(Dve," \u2014 "),JL=n(Dve,"A",{href:!0});var s6r=s(JL);tje=r(s6r,"RealmConfig"),s6r.forEach(t),aje=r(Dve," (Realm model)"),Dve.forEach(t),nje=i(T),Sm=n(T,"LI",{});var qve=s(Sm);KW=n(qve,"STRONG",{});var l6r=s(KW);sje=r(l6r,"reformer"),l6r.forEach(t),lje=r(qve," \u2014 "),YL=n(qve,"A",{href:!0});var i6r=s(YL);ije=r(i6r,"ReformerConfig"),i6r.forEach(t),dje=r(qve," (Reformer model)"),qve.forEach(t),cje=i(T),Pm=n(T,"LI",{});var Gve=s(Pm);ZW=n(Gve,"STRONG",{});var d6r=s(ZW);fje=r(d6r,"rembert"),d6r.forEach(t),mje=r(Gve," \u2014 "),KL=n(Gve,"A",{href:!0});var c6r=s(KL);gje=r(c6r,"RemBertConfig"),c6r.forEach(t),hje=r(Gve," (RemBERT model)"),Gve.forEach(t),pje=i(T),$m=n(T,"LI",{});var Ove=s($m);eQ=n(Ove,"STRONG",{});var f6r=s(eQ);_je=r(f6r,"retribert"),f6r.forEach(t),uje=r(Ove," \u2014 "),ZL=n(Ove,"A",{href:!0});var m6r=s(ZL);bje=r(m6r,"RetriBertConfig"),m6r.forEach(t),vje=r(Ove," (RetriBERT model)"),Ove.forEach(t),Tje=i(T),Im=n(T,"LI",{});var Xve=s(Im);oQ=n(Xve,"STRONG",{});var g6r=s(oQ);Fje=r(g6r,"roberta"),g6r.forEach(t),Cje=r(Xve," \u2014 "),e7=n(Xve,"A",{href:!0});var h6r=s(e7);Mje=r(h6r,"RobertaConfig"),h6r.forEach(t),Eje=r(Xve," (RoBERTa model)"),Xve.forEach(t),yje=i(T),jm=n(T,"LI",{});var zve=s(jm);rQ=n(zve,"STRONG",{});var p6r=s(rQ);wje=r(p6r,"roformer"),p6r.forEach(t),Aje=r(zve," \u2014 "),o7=n(zve,"A",{href:!0});var _6r=s(o7);Lje=r(_6r,"RoFormerConfig"),_6r.forEach(t),Bje=r(zve," (RoFormer model)"),zve.forEach(t),xje=i(T),Nm=n(T,"LI",{});var Vve=s(Nm);tQ=n(Vve,"STRONG",{});var u6r=s(tQ);kje=r(u6r,"segformer"),u6r.forEach(t),Rje=r(Vve," \u2014 "),r7=n(Vve,"A",{href:!0});var b6r=s(r7);Sje=r(b6r,"SegformerConfig"),b6r.forEach(t),Pje=r(Vve," (SegFormer model)"),Vve.forEach(t),$je=i(T),Dm=n(T,"LI",{});var Wve=s(Dm);aQ=n(Wve,"STRONG",{});var v6r=s(aQ);Ije=r(v6r,"sew"),v6r.forEach(t),jje=r(Wve," \u2014 "),t7=n(Wve,"A",{href:!0});var T6r=s(t7);Nje=r(T6r,"SEWConfig"),T6r.forEach(t),Dje=r(Wve," (SEW model)"),Wve.forEach(t),qje=i(T),qm=n(T,"LI",{});var Qve=s(qm);nQ=n(Qve,"STRONG",{});var F6r=s(nQ);Gje=r(F6r,"sew-d"),F6r.forEach(t),Oje=r(Qve," \u2014 "),a7=n(Qve,"A",{href:!0});var C6r=s(a7);Xje=r(C6r,"SEWDConfig"),C6r.forEach(t),zje=r(Qve," (SEW-D model)"),Qve.forEach(t),Vje=i(T),Gm=n(T,"LI",{});var Hve=s(Gm);sQ=n(Hve,"STRONG",{});var M6r=s(sQ);Wje=r(M6r,"speech-encoder-decoder"),M6r.forEach(t),Qje=r(Hve," \u2014 "),n7=n(Hve,"A",{href:!0});var E6r=s(n7);Hje=r(E6r,"SpeechEncoderDecoderConfig"),E6r.forEach(t),Uje=r(Hve," (Speech Encoder decoder model)"),Hve.forEach(t),Jje=i(T),Om=n(T,"LI",{});var Uve=s(Om);lQ=n(Uve,"STRONG",{});var y6r=s(lQ);Yje=r(y6r,"speech_to_text"),y6r.forEach(t),Kje=r(Uve," \u2014 "),s7=n(Uve,"A",{href:!0});var w6r=s(s7);Zje=r(w6r,"Speech2TextConfig"),w6r.forEach(t),eNe=r(Uve," (Speech2Text model)"),Uve.forEach(t),oNe=i(T),Xm=n(T,"LI",{});var Jve=s(Xm);iQ=n(Jve,"STRONG",{});var A6r=s(iQ);rNe=r(A6r,"speech_to_text_2"),A6r.forEach(t),tNe=r(Jve," \u2014 "),l7=n(Jve,"A",{href:!0});var L6r=s(l7);aNe=r(L6r,"Speech2Text2Config"),L6r.forEach(t),nNe=r(Jve," (Speech2Text2 model)"),Jve.forEach(t),sNe=i(T),zm=n(T,"LI",{});var Yve=s(zm);dQ=n(Yve,"STRONG",{});var B6r=s(dQ);lNe=r(B6r,"splinter"),B6r.forEach(t),iNe=r(Yve," \u2014 "),i7=n(Yve,"A",{href:!0});var x6r=s(i7);dNe=r(x6r,"SplinterConfig"),x6r.forEach(t),cNe=r(Yve," (Splinter model)"),Yve.forEach(t),fNe=i(T),Vm=n(T,"LI",{});var Kve=s(Vm);cQ=n(Kve,"STRONG",{});var k6r=s(cQ);mNe=r(k6r,"squeezebert"),k6r.forEach(t),gNe=r(Kve," \u2014 "),d7=n(Kve,"A",{href:!0});var R6r=s(d7);hNe=r(R6r,"SqueezeBertConfig"),R6r.forEach(t),pNe=r(Kve," (SqueezeBERT model)"),Kve.forEach(t),_Ne=i(T),Wm=n(T,"LI",{});var Zve=s(Wm);fQ=n(Zve,"STRONG",{});var S6r=s(fQ);uNe=r(S6r,"swin"),S6r.forEach(t),bNe=r(Zve," \u2014 "),c7=n(Zve,"A",{href:!0});var P6r=s(c7);vNe=r(P6r,"SwinConfig"),P6r.forEach(t),TNe=r(Zve," (Swin model)"),Zve.forEach(t),FNe=i(T),Qm=n(T,"LI",{});var eTe=s(Qm);mQ=n(eTe,"STRONG",{});var $6r=s(mQ);CNe=r($6r,"t5"),$6r.forEach(t),MNe=r(eTe," \u2014 "),f7=n(eTe,"A",{href:!0});var I6r=s(f7);ENe=r(I6r,"T5Config"),I6r.forEach(t),yNe=r(eTe," (T5 model)"),eTe.forEach(t),wNe=i(T),Hm=n(T,"LI",{});var oTe=s(Hm);gQ=n(oTe,"STRONG",{});var j6r=s(gQ);ANe=r(j6r,"tapas"),j6r.forEach(t),LNe=r(oTe," \u2014 "),m7=n(oTe,"A",{href:!0});var N6r=s(m7);BNe=r(N6r,"TapasConfig"),N6r.forEach(t),xNe=r(oTe," (TAPAS model)"),oTe.forEach(t),kNe=i(T),Um=n(T,"LI",{});var rTe=s(Um);hQ=n(rTe,"STRONG",{});var D6r=s(hQ);RNe=r(D6r,"transfo-xl"),D6r.forEach(t),SNe=r(rTe," \u2014 "),g7=n(rTe,"A",{href:!0});var q6r=s(g7);PNe=r(q6r,"TransfoXLConfig"),q6r.forEach(t),$Ne=r(rTe," (Transformer-XL model)"),rTe.forEach(t),INe=i(T),Jm=n(T,"LI",{});var tTe=s(Jm);pQ=n(tTe,"STRONG",{});var G6r=s(pQ);jNe=r(G6r,"trocr"),G6r.forEach(t),NNe=r(tTe," \u2014 "),h7=n(tTe,"A",{href:!0});var O6r=s(h7);DNe=r(O6r,"TrOCRConfig"),O6r.forEach(t),qNe=r(tTe," (TrOCR model)"),tTe.forEach(t),GNe=i(T),Ym=n(T,"LI",{});var aTe=s(Ym);_Q=n(aTe,"STRONG",{});var X6r=s(_Q);ONe=r(X6r,"unispeech"),X6r.forEach(t),XNe=r(aTe," \u2014 "),p7=n(aTe,"A",{href:!0});var z6r=s(p7);zNe=r(z6r,"UniSpeechConfig"),z6r.forEach(t),VNe=r(aTe," (UniSpeech model)"),aTe.forEach(t),WNe=i(T),Km=n(T,"LI",{});var nTe=s(Km);uQ=n(nTe,"STRONG",{});var V6r=s(uQ);QNe=r(V6r,"unispeech-sat"),V6r.forEach(t),HNe=r(nTe," \u2014 "),_7=n(nTe,"A",{href:!0});var W6r=s(_7);UNe=r(W6r,"UniSpeechSatConfig"),W6r.forEach(t),JNe=r(nTe," (UniSpeechSat model)"),nTe.forEach(t),YNe=i(T),Zm=n(T,"LI",{});var sTe=s(Zm);bQ=n(sTe,"STRONG",{});var Q6r=s(bQ);KNe=r(Q6r,"vilt"),Q6r.forEach(t),ZNe=r(sTe," \u2014 "),u7=n(sTe,"A",{href:!0});var H6r=s(u7);eDe=r(H6r,"ViltConfig"),H6r.forEach(t),oDe=r(sTe," (ViLT model)"),sTe.forEach(t),rDe=i(T),eg=n(T,"LI",{});var lTe=s(eg);vQ=n(lTe,"STRONG",{});var U6r=s(vQ);tDe=r(U6r,"vision-encoder-decoder"),U6r.forEach(t),aDe=r(lTe," \u2014 "),b7=n(lTe,"A",{href:!0});var J6r=s(b7);nDe=r(J6r,"VisionEncoderDecoderConfig"),J6r.forEach(t),sDe=r(lTe," (Vision Encoder decoder model)"),lTe.forEach(t),lDe=i(T),og=n(T,"LI",{});var iTe=s(og);TQ=n(iTe,"STRONG",{});var Y6r=s(TQ);iDe=r(Y6r,"vision-text-dual-encoder"),Y6r.forEach(t),dDe=r(iTe," \u2014 "),v7=n(iTe,"A",{href:!0});var K6r=s(v7);cDe=r(K6r,"VisionTextDualEncoderConfig"),K6r.forEach(t),fDe=r(iTe," (VisionTextDualEncoder model)"),iTe.forEach(t),mDe=i(T),rg=n(T,"LI",{});var dTe=s(rg);FQ=n(dTe,"STRONG",{});var Z6r=s(FQ);gDe=r(Z6r,"visual_bert"),Z6r.forEach(t),hDe=r(dTe," \u2014 "),T7=n(dTe,"A",{href:!0});var e0r=s(T7);pDe=r(e0r,"VisualBertConfig"),e0r.forEach(t),_De=r(dTe," (VisualBert model)"),dTe.forEach(t),uDe=i(T),tg=n(T,"LI",{});var cTe=s(tg);CQ=n(cTe,"STRONG",{});var o0r=s(CQ);bDe=r(o0r,"vit"),o0r.forEach(t),vDe=r(cTe," \u2014 "),F7=n(cTe,"A",{href:!0});var r0r=s(F7);TDe=r(r0r,"ViTConfig"),r0r.forEach(t),FDe=r(cTe," (ViT model)"),cTe.forEach(t),CDe=i(T),ag=n(T,"LI",{});var fTe=s(ag);MQ=n(fTe,"STRONG",{});var t0r=s(MQ);MDe=r(t0r,"vit_mae"),t0r.forEach(t),EDe=r(fTe," \u2014 "),C7=n(fTe,"A",{href:!0});var a0r=s(C7);yDe=r(a0r,"ViTMAEConfig"),a0r.forEach(t),wDe=r(fTe," (ViTMAE model)"),fTe.forEach(t),ADe=i(T),ng=n(T,"LI",{});var mTe=s(ng);EQ=n(mTe,"STRONG",{});var n0r=s(EQ);LDe=r(n0r,"wav2vec2"),n0r.forEach(t),BDe=r(mTe," \u2014 "),M7=n(mTe,"A",{href:!0});var s0r=s(M7);xDe=r(s0r,"Wav2Vec2Config"),s0r.forEach(t),kDe=r(mTe," (Wav2Vec2 model)"),mTe.forEach(t),RDe=i(T),sg=n(T,"LI",{});var gTe=s(sg);yQ=n(gTe,"STRONG",{});var l0r=s(yQ);SDe=r(l0r,"wavlm"),l0r.forEach(t),PDe=r(gTe," \u2014 "),E7=n(gTe,"A",{href:!0});var i0r=s(E7);$De=r(i0r,"WavLMConfig"),i0r.forEach(t),IDe=r(gTe," (WavLM model)"),gTe.forEach(t),jDe=i(T),lg=n(T,"LI",{});var hTe=s(lg);wQ=n(hTe,"STRONG",{});var d0r=s(wQ);NDe=r(d0r,"xglm"),d0r.forEach(t),DDe=r(hTe," \u2014 "),y7=n(hTe,"A",{href:!0});var c0r=s(y7);qDe=r(c0r,"XGLMConfig"),c0r.forEach(t),GDe=r(hTe," (XGLM model)"),hTe.forEach(t),ODe=i(T),ig=n(T,"LI",{});var pTe=s(ig);AQ=n(pTe,"STRONG",{});var f0r=s(AQ);XDe=r(f0r,"xlm"),f0r.forEach(t),zDe=r(pTe," \u2014 "),w7=n(pTe,"A",{href:!0});var m0r=s(w7);VDe=r(m0r,"XLMConfig"),m0r.forEach(t),WDe=r(pTe," (XLM model)"),pTe.forEach(t),QDe=i(T),dg=n(T,"LI",{});var _Te=s(dg);LQ=n(_Te,"STRONG",{});var g0r=s(LQ);HDe=r(g0r,"xlm-prophetnet"),g0r.forEach(t),UDe=r(_Te," \u2014 "),A7=n(_Te,"A",{href:!0});var h0r=s(A7);JDe=r(h0r,"XLMProphetNetConfig"),h0r.forEach(t),YDe=r(_Te," (XLMProphetNet model)"),_Te.forEach(t),KDe=i(T),cg=n(T,"LI",{});var uTe=s(cg);BQ=n(uTe,"STRONG",{});var p0r=s(BQ);ZDe=r(p0r,"xlm-roberta"),p0r.forEach(t),eqe=r(uTe," \u2014 "),L7=n(uTe,"A",{href:!0});var _0r=s(L7);oqe=r(_0r,"XLMRobertaConfig"),_0r.forEach(t),rqe=r(uTe," (XLM-RoBERTa model)"),uTe.forEach(t),tqe=i(T),fg=n(T,"LI",{});var bTe=s(fg);xQ=n(bTe,"STRONG",{});var u0r=s(xQ);aqe=r(u0r,"xlm-roberta-xl"),u0r.forEach(t),nqe=r(bTe," \u2014 "),B7=n(bTe,"A",{href:!0});var b0r=s(B7);sqe=r(b0r,"XLMRobertaXLConfig"),b0r.forEach(t),lqe=r(bTe," (XLM-RoBERTa-XL model)"),bTe.forEach(t),iqe=i(T),mg=n(T,"LI",{});var vTe=s(mg);kQ=n(vTe,"STRONG",{});var v0r=s(kQ);dqe=r(v0r,"xlnet"),v0r.forEach(t),cqe=r(vTe," \u2014 "),x7=n(vTe,"A",{href:!0});var T0r=s(x7);fqe=r(T0r,"XLNetConfig"),T0r.forEach(t),mqe=r(vTe," (XLNet model)"),vTe.forEach(t),gqe=i(T),gg=n(T,"LI",{});var TTe=s(gg);RQ=n(TTe,"STRONG",{});var F0r=s(RQ);hqe=r(F0r,"yoso"),F0r.forEach(t),pqe=r(TTe," \u2014 "),k7=n(TTe,"A",{href:!0});var C0r=s(k7);_qe=r(C0r,"YosoConfig"),C0r.forEach(t),uqe=r(TTe," (YOSO model)"),TTe.forEach(t),T.forEach(t),bqe=i(ia),SQ=n(ia,"P",{});var M0r=s(SQ);vqe=r(M0r,"Examples:"),M0r.forEach(t),Tqe=i(ia),m(hM.$$.fragment,ia),ia.forEach(t),Fqe=i(Ps),hg=n(Ps,"DIV",{class:!0});var bBe=s(hg);m(pM.$$.fragment,bBe),Cqe=i(bBe),PQ=n(bBe,"P",{});var E0r=s(PQ);Mqe=r(E0r,"Register a new configuration for this class."),E0r.forEach(t),bBe.forEach(t),Ps.forEach(t),bLe=i(d),Ii=n(d,"H2",{class:!0});var vBe=s(Ii);pg=n(vBe,"A",{id:!0,class:!0,href:!0});var y0r=s(pg);$Q=n(y0r,"SPAN",{});var w0r=s($Q);m(_M.$$.fragment,w0r),w0r.forEach(t),y0r.forEach(t),Eqe=i(vBe),IQ=n(vBe,"SPAN",{});var A0r=s(IQ);yqe=r(A0r,"AutoTokenizer"),A0r.forEach(t),vBe.forEach(t),vLe=i(d),Oo=n(d,"DIV",{class:!0});var $s=s(Oo);m(uM.$$.fragment,$s),wqe=i($s),bM=n($s,"P",{});var TBe=s(bM);Aqe=r(TBe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),R7=n(TBe,"A",{href:!0});var L0r=s(R7);Lqe=r(L0r,"AutoTokenizer.from_pretrained()"),L0r.forEach(t),Bqe=r(TBe," class method."),TBe.forEach(t),xqe=i($s),vM=n($s,"P",{});var FBe=s(vM);kqe=r(FBe,"This class cannot be instantiated directly using "),jQ=n(FBe,"CODE",{});var B0r=s(jQ);Rqe=r(B0r,"__init__()"),B0r.forEach(t),Sqe=r(FBe," (throws an error)."),FBe.forEach(t),Pqe=i($s),mo=n($s,"DIV",{class:!0});var da=s(mo);m(TM.$$.fragment,da),$qe=i(da),NQ=n(da,"P",{});var x0r=s(NQ);Iqe=r(x0r,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),x0r.forEach(t),jqe=i(da),ja=n(da,"P",{});var l4=s(ja);Nqe=r(l4,"The tokenizer class to instantiate is selected based on the "),DQ=n(l4,"CODE",{});var k0r=s(DQ);Dqe=r(k0r,"model_type"),k0r.forEach(t),qqe=r(l4,` property of the config object (either
passed as an argument or loaded from `),qQ=n(l4,"CODE",{});var R0r=s(qQ);Gqe=r(R0r,"pretrained_model_name_or_path"),R0r.forEach(t),Oqe=r(l4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GQ=n(l4,"CODE",{});var S0r=s(GQ);Xqe=r(S0r,"pretrained_model_name_or_path"),S0r.forEach(t),zqe=r(l4,":"),l4.forEach(t),Vqe=i(da),M=n(da,"UL",{});var y=s(M);Dn=n(y,"LI",{});var Q6=s(Dn);OQ=n(Q6,"STRONG",{});var P0r=s(OQ);Wqe=r(P0r,"albert"),P0r.forEach(t),Qqe=r(Q6," \u2014 "),S7=n(Q6,"A",{href:!0});var $0r=s(S7);Hqe=r($0r,"AlbertTokenizer"),$0r.forEach(t),Uqe=r(Q6," or "),P7=n(Q6,"A",{href:!0});var I0r=s(P7);Jqe=r(I0r,"AlbertTokenizerFast"),I0r.forEach(t),Yqe=r(Q6," (ALBERT model)"),Q6.forEach(t),Kqe=i(y),qn=n(y,"LI",{});var H6=s(qn);XQ=n(H6,"STRONG",{});var j0r=s(XQ);Zqe=r(j0r,"bart"),j0r.forEach(t),eGe=r(H6," \u2014 "),$7=n(H6,"A",{href:!0});var N0r=s($7);oGe=r(N0r,"BartTokenizer"),N0r.forEach(t),rGe=r(H6," or "),I7=n(H6,"A",{href:!0});var D0r=s(I7);tGe=r(D0r,"BartTokenizerFast"),D0r.forEach(t),aGe=r(H6," (BART model)"),H6.forEach(t),nGe=i(y),Gn=n(y,"LI",{});var U6=s(Gn);zQ=n(U6,"STRONG",{});var q0r=s(zQ);sGe=r(q0r,"barthez"),q0r.forEach(t),lGe=r(U6," \u2014 "),j7=n(U6,"A",{href:!0});var G0r=s(j7);iGe=r(G0r,"BarthezTokenizer"),G0r.forEach(t),dGe=r(U6," or "),N7=n(U6,"A",{href:!0});var O0r=s(N7);cGe=r(O0r,"BarthezTokenizerFast"),O0r.forEach(t),fGe=r(U6," (BARThez model)"),U6.forEach(t),mGe=i(y),_g=n(y,"LI",{});var FTe=s(_g);VQ=n(FTe,"STRONG",{});var X0r=s(VQ);gGe=r(X0r,"bartpho"),X0r.forEach(t),hGe=r(FTe," \u2014 "),D7=n(FTe,"A",{href:!0});var z0r=s(D7);pGe=r(z0r,"BartphoTokenizer"),z0r.forEach(t),_Ge=r(FTe," (BARTpho model)"),FTe.forEach(t),uGe=i(y),On=n(y,"LI",{});var J6=s(On);WQ=n(J6,"STRONG",{});var V0r=s(WQ);bGe=r(V0r,"bert"),V0r.forEach(t),vGe=r(J6," \u2014 "),q7=n(J6,"A",{href:!0});var W0r=s(q7);TGe=r(W0r,"BertTokenizer"),W0r.forEach(t),FGe=r(J6," or "),G7=n(J6,"A",{href:!0});var Q0r=s(G7);CGe=r(Q0r,"BertTokenizerFast"),Q0r.forEach(t),MGe=r(J6," (BERT model)"),J6.forEach(t),EGe=i(y),ug=n(y,"LI",{});var CTe=s(ug);QQ=n(CTe,"STRONG",{});var H0r=s(QQ);yGe=r(H0r,"bert-generation"),H0r.forEach(t),wGe=r(CTe," \u2014 "),O7=n(CTe,"A",{href:!0});var U0r=s(O7);AGe=r(U0r,"BertGenerationTokenizer"),U0r.forEach(t),LGe=r(CTe," (Bert Generation model)"),CTe.forEach(t),BGe=i(y),bg=n(y,"LI",{});var MTe=s(bg);HQ=n(MTe,"STRONG",{});var J0r=s(HQ);xGe=r(J0r,"bert-japanese"),J0r.forEach(t),kGe=r(MTe," \u2014 "),X7=n(MTe,"A",{href:!0});var Y0r=s(X7);RGe=r(Y0r,"BertJapaneseTokenizer"),Y0r.forEach(t),SGe=r(MTe," (BertJapanese model)"),MTe.forEach(t),PGe=i(y),vg=n(y,"LI",{});var ETe=s(vg);UQ=n(ETe,"STRONG",{});var K0r=s(UQ);$Ge=r(K0r,"bertweet"),K0r.forEach(t),IGe=r(ETe," \u2014 "),z7=n(ETe,"A",{href:!0});var Z0r=s(z7);jGe=r(Z0r,"BertweetTokenizer"),Z0r.forEach(t),NGe=r(ETe," (Bertweet model)"),ETe.forEach(t),DGe=i(y),Xn=n(y,"LI",{});var Y6=s(Xn);JQ=n(Y6,"STRONG",{});var eLr=s(JQ);qGe=r(eLr,"big_bird"),eLr.forEach(t),GGe=r(Y6," \u2014 "),V7=n(Y6,"A",{href:!0});var oLr=s(V7);OGe=r(oLr,"BigBirdTokenizer"),oLr.forEach(t),XGe=r(Y6," or "),W7=n(Y6,"A",{href:!0});var rLr=s(W7);zGe=r(rLr,"BigBirdTokenizerFast"),rLr.forEach(t),VGe=r(Y6," (BigBird model)"),Y6.forEach(t),WGe=i(y),zn=n(y,"LI",{});var K6=s(zn);YQ=n(K6,"STRONG",{});var tLr=s(YQ);QGe=r(tLr,"bigbird_pegasus"),tLr.forEach(t),HGe=r(K6," \u2014 "),Q7=n(K6,"A",{href:!0});var aLr=s(Q7);UGe=r(aLr,"PegasusTokenizer"),aLr.forEach(t),JGe=r(K6," or "),H7=n(K6,"A",{href:!0});var nLr=s(H7);YGe=r(nLr,"PegasusTokenizerFast"),nLr.forEach(t),KGe=r(K6," (BigBirdPegasus model)"),K6.forEach(t),ZGe=i(y),Vn=n(y,"LI",{});var Z6=s(Vn);KQ=n(Z6,"STRONG",{});var sLr=s(KQ);eOe=r(sLr,"blenderbot"),sLr.forEach(t),oOe=r(Z6," \u2014 "),U7=n(Z6,"A",{href:!0});var lLr=s(U7);rOe=r(lLr,"BlenderbotTokenizer"),lLr.forEach(t),tOe=r(Z6," or "),J7=n(Z6,"A",{href:!0});var iLr=s(J7);aOe=r(iLr,"BlenderbotTokenizerFast"),iLr.forEach(t),nOe=r(Z6," (Blenderbot model)"),Z6.forEach(t),sOe=i(y),Tg=n(y,"LI",{});var yTe=s(Tg);ZQ=n(yTe,"STRONG",{});var dLr=s(ZQ);lOe=r(dLr,"blenderbot-small"),dLr.forEach(t),iOe=r(yTe," \u2014 "),Y7=n(yTe,"A",{href:!0});var cLr=s(Y7);dOe=r(cLr,"BlenderbotSmallTokenizer"),cLr.forEach(t),cOe=r(yTe," (BlenderbotSmall model)"),yTe.forEach(t),fOe=i(y),Fg=n(y,"LI",{});var wTe=s(Fg);eH=n(wTe,"STRONG",{});var fLr=s(eH);mOe=r(fLr,"byt5"),fLr.forEach(t),gOe=r(wTe," \u2014 "),K7=n(wTe,"A",{href:!0});var mLr=s(K7);hOe=r(mLr,"ByT5Tokenizer"),mLr.forEach(t),pOe=r(wTe," (ByT5 model)"),wTe.forEach(t),_Oe=i(y),Wn=n(y,"LI",{});var e0=s(Wn);oH=n(e0,"STRONG",{});var gLr=s(oH);uOe=r(gLr,"camembert"),gLr.forEach(t),bOe=r(e0," \u2014 "),Z7=n(e0,"A",{href:!0});var hLr=s(Z7);vOe=r(hLr,"CamembertTokenizer"),hLr.forEach(t),TOe=r(e0," or "),eB=n(e0,"A",{href:!0});var pLr=s(eB);FOe=r(pLr,"CamembertTokenizerFast"),pLr.forEach(t),COe=r(e0," (CamemBERT model)"),e0.forEach(t),MOe=i(y),Cg=n(y,"LI",{});var ATe=s(Cg);rH=n(ATe,"STRONG",{});var _Lr=s(rH);EOe=r(_Lr,"canine"),_Lr.forEach(t),yOe=r(ATe," \u2014 "),oB=n(ATe,"A",{href:!0});var uLr=s(oB);wOe=r(uLr,"CanineTokenizer"),uLr.forEach(t),AOe=r(ATe," (Canine model)"),ATe.forEach(t),LOe=i(y),Qn=n(y,"LI",{});var o0=s(Qn);tH=n(o0,"STRONG",{});var bLr=s(tH);BOe=r(bLr,"clip"),bLr.forEach(t),xOe=r(o0," \u2014 "),rB=n(o0,"A",{href:!0});var vLr=s(rB);kOe=r(vLr,"CLIPTokenizer"),vLr.forEach(t),ROe=r(o0," or "),tB=n(o0,"A",{href:!0});var TLr=s(tB);SOe=r(TLr,"CLIPTokenizerFast"),TLr.forEach(t),POe=r(o0," (CLIP model)"),o0.forEach(t),$Oe=i(y),Hn=n(y,"LI",{});var r0=s(Hn);aH=n(r0,"STRONG",{});var FLr=s(aH);IOe=r(FLr,"convbert"),FLr.forEach(t),jOe=r(r0," \u2014 "),aB=n(r0,"A",{href:!0});var CLr=s(aB);NOe=r(CLr,"ConvBertTokenizer"),CLr.forEach(t),DOe=r(r0," or "),nB=n(r0,"A",{href:!0});var MLr=s(nB);qOe=r(MLr,"ConvBertTokenizerFast"),MLr.forEach(t),GOe=r(r0," (ConvBERT model)"),r0.forEach(t),OOe=i(y),Un=n(y,"LI",{});var t0=s(Un);nH=n(t0,"STRONG",{});var ELr=s(nH);XOe=r(ELr,"cpm"),ELr.forEach(t),zOe=r(t0," \u2014 "),sB=n(t0,"A",{href:!0});var yLr=s(sB);VOe=r(yLr,"CpmTokenizer"),yLr.forEach(t),WOe=r(t0," or "),sH=n(t0,"CODE",{});var wLr=s(sH);QOe=r(wLr,"CpmTokenizerFast"),wLr.forEach(t),HOe=r(t0," (CPM model)"),t0.forEach(t),UOe=i(y),Mg=n(y,"LI",{});var LTe=s(Mg);lH=n(LTe,"STRONG",{});var ALr=s(lH);JOe=r(ALr,"ctrl"),ALr.forEach(t),YOe=r(LTe," \u2014 "),lB=n(LTe,"A",{href:!0});var LLr=s(lB);KOe=r(LLr,"CTRLTokenizer"),LLr.forEach(t),ZOe=r(LTe," (CTRL model)"),LTe.forEach(t),eXe=i(y),Jn=n(y,"LI",{});var a0=s(Jn);iH=n(a0,"STRONG",{});var BLr=s(iH);oXe=r(BLr,"deberta"),BLr.forEach(t),rXe=r(a0," \u2014 "),iB=n(a0,"A",{href:!0});var xLr=s(iB);tXe=r(xLr,"DebertaTokenizer"),xLr.forEach(t),aXe=r(a0," or "),dB=n(a0,"A",{href:!0});var kLr=s(dB);nXe=r(kLr,"DebertaTokenizerFast"),kLr.forEach(t),sXe=r(a0," (DeBERTa model)"),a0.forEach(t),lXe=i(y),Eg=n(y,"LI",{});var BTe=s(Eg);dH=n(BTe,"STRONG",{});var RLr=s(dH);iXe=r(RLr,"deberta-v2"),RLr.forEach(t),dXe=r(BTe," \u2014 "),cB=n(BTe,"A",{href:!0});var SLr=s(cB);cXe=r(SLr,"DebertaV2Tokenizer"),SLr.forEach(t),fXe=r(BTe," (DeBERTa-v2 model)"),BTe.forEach(t),mXe=i(y),Yn=n(y,"LI",{});var n0=s(Yn);cH=n(n0,"STRONG",{});var PLr=s(cH);gXe=r(PLr,"distilbert"),PLr.forEach(t),hXe=r(n0," \u2014 "),fB=n(n0,"A",{href:!0});var $Lr=s(fB);pXe=r($Lr,"DistilBertTokenizer"),$Lr.forEach(t),_Xe=r(n0," or "),mB=n(n0,"A",{href:!0});var ILr=s(mB);uXe=r(ILr,"DistilBertTokenizerFast"),ILr.forEach(t),bXe=r(n0," (DistilBERT model)"),n0.forEach(t),vXe=i(y),Kn=n(y,"LI",{});var s0=s(Kn);fH=n(s0,"STRONG",{});var jLr=s(fH);TXe=r(jLr,"dpr"),jLr.forEach(t),FXe=r(s0," \u2014 "),gB=n(s0,"A",{href:!0});var NLr=s(gB);CXe=r(NLr,"DPRQuestionEncoderTokenizer"),NLr.forEach(t),MXe=r(s0," or "),hB=n(s0,"A",{href:!0});var DLr=s(hB);EXe=r(DLr,"DPRQuestionEncoderTokenizerFast"),DLr.forEach(t),yXe=r(s0," (DPR model)"),s0.forEach(t),wXe=i(y),Zn=n(y,"LI",{});var l0=s(Zn);mH=n(l0,"STRONG",{});var qLr=s(mH);AXe=r(qLr,"electra"),qLr.forEach(t),LXe=r(l0," \u2014 "),pB=n(l0,"A",{href:!0});var GLr=s(pB);BXe=r(GLr,"ElectraTokenizer"),GLr.forEach(t),xXe=r(l0," or "),_B=n(l0,"A",{href:!0});var OLr=s(_B);kXe=r(OLr,"ElectraTokenizerFast"),OLr.forEach(t),RXe=r(l0," (ELECTRA model)"),l0.forEach(t),SXe=i(y),yg=n(y,"LI",{});var xTe=s(yg);gH=n(xTe,"STRONG",{});var XLr=s(gH);PXe=r(XLr,"flaubert"),XLr.forEach(t),$Xe=r(xTe," \u2014 "),uB=n(xTe,"A",{href:!0});var zLr=s(uB);IXe=r(zLr,"FlaubertTokenizer"),zLr.forEach(t),jXe=r(xTe," (FlauBERT model)"),xTe.forEach(t),NXe=i(y),es=n(y,"LI",{});var i0=s(es);hH=n(i0,"STRONG",{});var VLr=s(hH);DXe=r(VLr,"fnet"),VLr.forEach(t),qXe=r(i0," \u2014 "),bB=n(i0,"A",{href:!0});var WLr=s(bB);GXe=r(WLr,"FNetTokenizer"),WLr.forEach(t),OXe=r(i0," or "),vB=n(i0,"A",{href:!0});var QLr=s(vB);XXe=r(QLr,"FNetTokenizerFast"),QLr.forEach(t),zXe=r(i0," (FNet model)"),i0.forEach(t),VXe=i(y),wg=n(y,"LI",{});var kTe=s(wg);pH=n(kTe,"STRONG",{});var HLr=s(pH);WXe=r(HLr,"fsmt"),HLr.forEach(t),QXe=r(kTe," \u2014 "),TB=n(kTe,"A",{href:!0});var ULr=s(TB);HXe=r(ULr,"FSMTTokenizer"),ULr.forEach(t),UXe=r(kTe," (FairSeq Machine-Translation model)"),kTe.forEach(t),JXe=i(y),os=n(y,"LI",{});var d0=s(os);_H=n(d0,"STRONG",{});var JLr=s(_H);YXe=r(JLr,"funnel"),JLr.forEach(t),KXe=r(d0," \u2014 "),FB=n(d0,"A",{href:!0});var YLr=s(FB);ZXe=r(YLr,"FunnelTokenizer"),YLr.forEach(t),eze=r(d0," or "),CB=n(d0,"A",{href:!0});var KLr=s(CB);oze=r(KLr,"FunnelTokenizerFast"),KLr.forEach(t),rze=r(d0," (Funnel Transformer model)"),d0.forEach(t),tze=i(y),rs=n(y,"LI",{});var c0=s(rs);uH=n(c0,"STRONG",{});var ZLr=s(uH);aze=r(ZLr,"gpt2"),ZLr.forEach(t),nze=r(c0," \u2014 "),MB=n(c0,"A",{href:!0});var e7r=s(MB);sze=r(e7r,"GPT2Tokenizer"),e7r.forEach(t),lze=r(c0," or "),EB=n(c0,"A",{href:!0});var o7r=s(EB);ize=r(o7r,"GPT2TokenizerFast"),o7r.forEach(t),dze=r(c0," (OpenAI GPT-2 model)"),c0.forEach(t),cze=i(y),ts=n(y,"LI",{});var f0=s(ts);bH=n(f0,"STRONG",{});var r7r=s(bH);fze=r(r7r,"gpt_neo"),r7r.forEach(t),mze=r(f0," \u2014 "),yB=n(f0,"A",{href:!0});var t7r=s(yB);gze=r(t7r,"GPT2Tokenizer"),t7r.forEach(t),hze=r(f0," or "),wB=n(f0,"A",{href:!0});var a7r=s(wB);pze=r(a7r,"GPT2TokenizerFast"),a7r.forEach(t),_ze=r(f0," (GPT Neo model)"),f0.forEach(t),uze=i(y),as=n(y,"LI",{});var m0=s(as);vH=n(m0,"STRONG",{});var n7r=s(vH);bze=r(n7r,"herbert"),n7r.forEach(t),vze=r(m0," \u2014 "),AB=n(m0,"A",{href:!0});var s7r=s(AB);Tze=r(s7r,"HerbertTokenizer"),s7r.forEach(t),Fze=r(m0," or "),LB=n(m0,"A",{href:!0});var l7r=s(LB);Cze=r(l7r,"HerbertTokenizerFast"),l7r.forEach(t),Mze=r(m0," (HerBERT model)"),m0.forEach(t),Eze=i(y),Ag=n(y,"LI",{});var RTe=s(Ag);TH=n(RTe,"STRONG",{});var i7r=s(TH);yze=r(i7r,"hubert"),i7r.forEach(t),wze=r(RTe," \u2014 "),BB=n(RTe,"A",{href:!0});var d7r=s(BB);Aze=r(d7r,"Wav2Vec2CTCTokenizer"),d7r.forEach(t),Lze=r(RTe," (Hubert model)"),RTe.forEach(t),Bze=i(y),ns=n(y,"LI",{});var g0=s(ns);FH=n(g0,"STRONG",{});var c7r=s(FH);xze=r(c7r,"ibert"),c7r.forEach(t),kze=r(g0," \u2014 "),xB=n(g0,"A",{href:!0});var f7r=s(xB);Rze=r(f7r,"RobertaTokenizer"),f7r.forEach(t),Sze=r(g0," or "),kB=n(g0,"A",{href:!0});var m7r=s(kB);Pze=r(m7r,"RobertaTokenizerFast"),m7r.forEach(t),$ze=r(g0," (I-BERT model)"),g0.forEach(t),Ize=i(y),ss=n(y,"LI",{});var h0=s(ss);CH=n(h0,"STRONG",{});var g7r=s(CH);jze=r(g7r,"layoutlm"),g7r.forEach(t),Nze=r(h0," \u2014 "),RB=n(h0,"A",{href:!0});var h7r=s(RB);Dze=r(h7r,"LayoutLMTokenizer"),h7r.forEach(t),qze=r(h0," or "),SB=n(h0,"A",{href:!0});var p7r=s(SB);Gze=r(p7r,"LayoutLMTokenizerFast"),p7r.forEach(t),Oze=r(h0," (LayoutLM model)"),h0.forEach(t),Xze=i(y),ls=n(y,"LI",{});var p0=s(ls);MH=n(p0,"STRONG",{});var _7r=s(MH);zze=r(_7r,"layoutlmv2"),_7r.forEach(t),Vze=r(p0," \u2014 "),PB=n(p0,"A",{href:!0});var u7r=s(PB);Wze=r(u7r,"LayoutLMv2Tokenizer"),u7r.forEach(t),Qze=r(p0," or "),$B=n(p0,"A",{href:!0});var b7r=s($B);Hze=r(b7r,"LayoutLMv2TokenizerFast"),b7r.forEach(t),Uze=r(p0," (LayoutLMv2 model)"),p0.forEach(t),Jze=i(y),is=n(y,"LI",{});var _0=s(is);EH=n(_0,"STRONG",{});var v7r=s(EH);Yze=r(v7r,"layoutxlm"),v7r.forEach(t),Kze=r(_0," \u2014 "),IB=n(_0,"A",{href:!0});var T7r=s(IB);Zze=r(T7r,"LayoutXLMTokenizer"),T7r.forEach(t),eVe=r(_0," or "),jB=n(_0,"A",{href:!0});var F7r=s(jB);oVe=r(F7r,"LayoutXLMTokenizerFast"),F7r.forEach(t),rVe=r(_0," (LayoutXLM model)"),_0.forEach(t),tVe=i(y),ds=n(y,"LI",{});var u0=s(ds);yH=n(u0,"STRONG",{});var C7r=s(yH);aVe=r(C7r,"led"),C7r.forEach(t),nVe=r(u0," \u2014 "),NB=n(u0,"A",{href:!0});var M7r=s(NB);sVe=r(M7r,"LEDTokenizer"),M7r.forEach(t),lVe=r(u0," or "),DB=n(u0,"A",{href:!0});var E7r=s(DB);iVe=r(E7r,"LEDTokenizerFast"),E7r.forEach(t),dVe=r(u0," (LED model)"),u0.forEach(t),cVe=i(y),cs=n(y,"LI",{});var b0=s(cs);wH=n(b0,"STRONG",{});var y7r=s(wH);fVe=r(y7r,"longformer"),y7r.forEach(t),mVe=r(b0," \u2014 "),qB=n(b0,"A",{href:!0});var w7r=s(qB);gVe=r(w7r,"LongformerTokenizer"),w7r.forEach(t),hVe=r(b0," or "),GB=n(b0,"A",{href:!0});var A7r=s(GB);pVe=r(A7r,"LongformerTokenizerFast"),A7r.forEach(t),_Ve=r(b0," (Longformer model)"),b0.forEach(t),uVe=i(y),Lg=n(y,"LI",{});var STe=s(Lg);AH=n(STe,"STRONG",{});var L7r=s(AH);bVe=r(L7r,"luke"),L7r.forEach(t),vVe=r(STe," \u2014 "),OB=n(STe,"A",{href:!0});var B7r=s(OB);TVe=r(B7r,"LukeTokenizer"),B7r.forEach(t),FVe=r(STe," (LUKE model)"),STe.forEach(t),CVe=i(y),fs=n(y,"LI",{});var v0=s(fs);LH=n(v0,"STRONG",{});var x7r=s(LH);MVe=r(x7r,"lxmert"),x7r.forEach(t),EVe=r(v0," \u2014 "),XB=n(v0,"A",{href:!0});var k7r=s(XB);yVe=r(k7r,"LxmertTokenizer"),k7r.forEach(t),wVe=r(v0," or "),zB=n(v0,"A",{href:!0});var R7r=s(zB);AVe=r(R7r,"LxmertTokenizerFast"),R7r.forEach(t),LVe=r(v0," (LXMERT model)"),v0.forEach(t),BVe=i(y),Bg=n(y,"LI",{});var PTe=s(Bg);BH=n(PTe,"STRONG",{});var S7r=s(BH);xVe=r(S7r,"m2m_100"),S7r.forEach(t),kVe=r(PTe," \u2014 "),VB=n(PTe,"A",{href:!0});var P7r=s(VB);RVe=r(P7r,"M2M100Tokenizer"),P7r.forEach(t),SVe=r(PTe," (M2M100 model)"),PTe.forEach(t),PVe=i(y),xg=n(y,"LI",{});var $Te=s(xg);xH=n($Te,"STRONG",{});var $7r=s(xH);$Ve=r($7r,"marian"),$7r.forEach(t),IVe=r($Te," \u2014 "),WB=n($Te,"A",{href:!0});var I7r=s(WB);jVe=r(I7r,"MarianTokenizer"),I7r.forEach(t),NVe=r($Te," (Marian model)"),$Te.forEach(t),DVe=i(y),ms=n(y,"LI",{});var T0=s(ms);kH=n(T0,"STRONG",{});var j7r=s(kH);qVe=r(j7r,"mbart"),j7r.forEach(t),GVe=r(T0," \u2014 "),QB=n(T0,"A",{href:!0});var N7r=s(QB);OVe=r(N7r,"MBartTokenizer"),N7r.forEach(t),XVe=r(T0," or "),HB=n(T0,"A",{href:!0});var D7r=s(HB);zVe=r(D7r,"MBartTokenizerFast"),D7r.forEach(t),VVe=r(T0," (mBART model)"),T0.forEach(t),WVe=i(y),gs=n(y,"LI",{});var F0=s(gs);RH=n(F0,"STRONG",{});var q7r=s(RH);QVe=r(q7r,"mbart50"),q7r.forEach(t),HVe=r(F0," \u2014 "),UB=n(F0,"A",{href:!0});var G7r=s(UB);UVe=r(G7r,"MBart50Tokenizer"),G7r.forEach(t),JVe=r(F0," or "),JB=n(F0,"A",{href:!0});var O7r=s(JB);YVe=r(O7r,"MBart50TokenizerFast"),O7r.forEach(t),KVe=r(F0," (mBART-50 model)"),F0.forEach(t),ZVe=i(y),kg=n(y,"LI",{});var ITe=s(kg);SH=n(ITe,"STRONG",{});var X7r=s(SH);eWe=r(X7r,"mluke"),X7r.forEach(t),oWe=r(ITe," \u2014 "),YB=n(ITe,"A",{href:!0});var z7r=s(YB);rWe=r(z7r,"MLukeTokenizer"),z7r.forEach(t),tWe=r(ITe," (mLUKE model)"),ITe.forEach(t),aWe=i(y),hs=n(y,"LI",{});var C0=s(hs);PH=n(C0,"STRONG",{});var V7r=s(PH);nWe=r(V7r,"mobilebert"),V7r.forEach(t),sWe=r(C0," \u2014 "),KB=n(C0,"A",{href:!0});var W7r=s(KB);lWe=r(W7r,"MobileBertTokenizer"),W7r.forEach(t),iWe=r(C0," or "),ZB=n(C0,"A",{href:!0});var Q7r=s(ZB);dWe=r(Q7r,"MobileBertTokenizerFast"),Q7r.forEach(t),cWe=r(C0," (MobileBERT model)"),C0.forEach(t),fWe=i(y),ps=n(y,"LI",{});var M0=s(ps);$H=n(M0,"STRONG",{});var H7r=s($H);mWe=r(H7r,"mpnet"),H7r.forEach(t),gWe=r(M0," \u2014 "),ex=n(M0,"A",{href:!0});var U7r=s(ex);hWe=r(U7r,"MPNetTokenizer"),U7r.forEach(t),pWe=r(M0," or "),ox=n(M0,"A",{href:!0});var J7r=s(ox);_We=r(J7r,"MPNetTokenizerFast"),J7r.forEach(t),uWe=r(M0," (MPNet model)"),M0.forEach(t),bWe=i(y),_s=n(y,"LI",{});var E0=s(_s);IH=n(E0,"STRONG",{});var Y7r=s(IH);vWe=r(Y7r,"mt5"),Y7r.forEach(t),TWe=r(E0," \u2014 "),rx=n(E0,"A",{href:!0});var K7r=s(rx);FWe=r(K7r,"MT5Tokenizer"),K7r.forEach(t),CWe=r(E0," or "),tx=n(E0,"A",{href:!0});var Z7r=s(tx);MWe=r(Z7r,"MT5TokenizerFast"),Z7r.forEach(t),EWe=r(E0," (mT5 model)"),E0.forEach(t),yWe=i(y),us=n(y,"LI",{});var y0=s(us);jH=n(y0,"STRONG",{});var eBr=s(jH);wWe=r(eBr,"openai-gpt"),eBr.forEach(t),AWe=r(y0," \u2014 "),ax=n(y0,"A",{href:!0});var oBr=s(ax);LWe=r(oBr,"OpenAIGPTTokenizer"),oBr.forEach(t),BWe=r(y0," or "),nx=n(y0,"A",{href:!0});var rBr=s(nx);xWe=r(rBr,"OpenAIGPTTokenizerFast"),rBr.forEach(t),kWe=r(y0," (OpenAI GPT model)"),y0.forEach(t),RWe=i(y),bs=n(y,"LI",{});var w0=s(bs);NH=n(w0,"STRONG",{});var tBr=s(NH);SWe=r(tBr,"pegasus"),tBr.forEach(t),PWe=r(w0," \u2014 "),sx=n(w0,"A",{href:!0});var aBr=s(sx);$We=r(aBr,"PegasusTokenizer"),aBr.forEach(t),IWe=r(w0," or "),lx=n(w0,"A",{href:!0});var nBr=s(lx);jWe=r(nBr,"PegasusTokenizerFast"),nBr.forEach(t),NWe=r(w0," (Pegasus model)"),w0.forEach(t),DWe=i(y),Rg=n(y,"LI",{});var jTe=s(Rg);DH=n(jTe,"STRONG",{});var sBr=s(DH);qWe=r(sBr,"perceiver"),sBr.forEach(t),GWe=r(jTe," \u2014 "),ix=n(jTe,"A",{href:!0});var lBr=s(ix);OWe=r(lBr,"PerceiverTokenizer"),lBr.forEach(t),XWe=r(jTe," (Perceiver model)"),jTe.forEach(t),zWe=i(y),Sg=n(y,"LI",{});var NTe=s(Sg);qH=n(NTe,"STRONG",{});var iBr=s(qH);VWe=r(iBr,"phobert"),iBr.forEach(t),WWe=r(NTe," \u2014 "),dx=n(NTe,"A",{href:!0});var dBr=s(dx);QWe=r(dBr,"PhobertTokenizer"),dBr.forEach(t),HWe=r(NTe," (PhoBERT model)"),NTe.forEach(t),UWe=i(y),Pg=n(y,"LI",{});var DTe=s(Pg);GH=n(DTe,"STRONG",{});var cBr=s(GH);JWe=r(cBr,"plbart"),cBr.forEach(t),YWe=r(DTe," \u2014 "),cx=n(DTe,"A",{href:!0});var fBr=s(cx);KWe=r(fBr,"PLBartTokenizer"),fBr.forEach(t),ZWe=r(DTe," (PLBart model)"),DTe.forEach(t),eQe=i(y),$g=n(y,"LI",{});var qTe=s($g);OH=n(qTe,"STRONG",{});var mBr=s(OH);oQe=r(mBr,"prophetnet"),mBr.forEach(t),rQe=r(qTe," \u2014 "),fx=n(qTe,"A",{href:!0});var gBr=s(fx);tQe=r(gBr,"ProphetNetTokenizer"),gBr.forEach(t),aQe=r(qTe," (ProphetNet model)"),qTe.forEach(t),nQe=i(y),vs=n(y,"LI",{});var A0=s(vs);XH=n(A0,"STRONG",{});var hBr=s(XH);sQe=r(hBr,"qdqbert"),hBr.forEach(t),lQe=r(A0," \u2014 "),mx=n(A0,"A",{href:!0});var pBr=s(mx);iQe=r(pBr,"BertTokenizer"),pBr.forEach(t),dQe=r(A0," or "),gx=n(A0,"A",{href:!0});var _Br=s(gx);cQe=r(_Br,"BertTokenizerFast"),_Br.forEach(t),fQe=r(A0," (QDQBert model)"),A0.forEach(t),mQe=i(y),Ig=n(y,"LI",{});var GTe=s(Ig);zH=n(GTe,"STRONG",{});var uBr=s(zH);gQe=r(uBr,"rag"),uBr.forEach(t),hQe=r(GTe," \u2014 "),hx=n(GTe,"A",{href:!0});var bBr=s(hx);pQe=r(bBr,"RagTokenizer"),bBr.forEach(t),_Qe=r(GTe," (RAG model)"),GTe.forEach(t),uQe=i(y),Ts=n(y,"LI",{});var L0=s(Ts);VH=n(L0,"STRONG",{});var vBr=s(VH);bQe=r(vBr,"reformer"),vBr.forEach(t),vQe=r(L0," \u2014 "),px=n(L0,"A",{href:!0});var TBr=s(px);TQe=r(TBr,"ReformerTokenizer"),TBr.forEach(t),FQe=r(L0," or "),_x=n(L0,"A",{href:!0});var FBr=s(_x);CQe=r(FBr,"ReformerTokenizerFast"),FBr.forEach(t),MQe=r(L0," (Reformer model)"),L0.forEach(t),EQe=i(y),Fs=n(y,"LI",{});var B0=s(Fs);WH=n(B0,"STRONG",{});var CBr=s(WH);yQe=r(CBr,"rembert"),CBr.forEach(t),wQe=r(B0," \u2014 "),ux=n(B0,"A",{href:!0});var MBr=s(ux);AQe=r(MBr,"RemBertTokenizer"),MBr.forEach(t),LQe=r(B0," or "),bx=n(B0,"A",{href:!0});var EBr=s(bx);BQe=r(EBr,"RemBertTokenizerFast"),EBr.forEach(t),xQe=r(B0," (RemBERT model)"),B0.forEach(t),kQe=i(y),Cs=n(y,"LI",{});var x0=s(Cs);QH=n(x0,"STRONG",{});var yBr=s(QH);RQe=r(yBr,"retribert"),yBr.forEach(t),SQe=r(x0," \u2014 "),vx=n(x0,"A",{href:!0});var wBr=s(vx);PQe=r(wBr,"RetriBertTokenizer"),wBr.forEach(t),$Qe=r(x0," or "),Tx=n(x0,"A",{href:!0});var ABr=s(Tx);IQe=r(ABr,"RetriBertTokenizerFast"),ABr.forEach(t),jQe=r(x0," (RetriBERT model)"),x0.forEach(t),NQe=i(y),Ms=n(y,"LI",{});var k0=s(Ms);HH=n(k0,"STRONG",{});var LBr=s(HH);DQe=r(LBr,"roberta"),LBr.forEach(t),qQe=r(k0," \u2014 "),Fx=n(k0,"A",{href:!0});var BBr=s(Fx);GQe=r(BBr,"RobertaTokenizer"),BBr.forEach(t),OQe=r(k0," or "),Cx=n(k0,"A",{href:!0});var xBr=s(Cx);XQe=r(xBr,"RobertaTokenizerFast"),xBr.forEach(t),zQe=r(k0," (RoBERTa model)"),k0.forEach(t),VQe=i(y),Es=n(y,"LI",{});var R0=s(Es);UH=n(R0,"STRONG",{});var kBr=s(UH);WQe=r(kBr,"roformer"),kBr.forEach(t),QQe=r(R0," \u2014 "),Mx=n(R0,"A",{href:!0});var RBr=s(Mx);HQe=r(RBr,"RoFormerTokenizer"),RBr.forEach(t),UQe=r(R0," or "),Ex=n(R0,"A",{href:!0});var SBr=s(Ex);JQe=r(SBr,"RoFormerTokenizerFast"),SBr.forEach(t),YQe=r(R0," (RoFormer model)"),R0.forEach(t),KQe=i(y),jg=n(y,"LI",{});var OTe=s(jg);JH=n(OTe,"STRONG",{});var PBr=s(JH);ZQe=r(PBr,"speech_to_text"),PBr.forEach(t),eHe=r(OTe," \u2014 "),yx=n(OTe,"A",{href:!0});var $Br=s(yx);oHe=r($Br,"Speech2TextTokenizer"),$Br.forEach(t),rHe=r(OTe," (Speech2Text model)"),OTe.forEach(t),tHe=i(y),Ng=n(y,"LI",{});var XTe=s(Ng);YH=n(XTe,"STRONG",{});var IBr=s(YH);aHe=r(IBr,"speech_to_text_2"),IBr.forEach(t),nHe=r(XTe," \u2014 "),wx=n(XTe,"A",{href:!0});var jBr=s(wx);sHe=r(jBr,"Speech2Text2Tokenizer"),jBr.forEach(t),lHe=r(XTe," (Speech2Text2 model)"),XTe.forEach(t),iHe=i(y),ys=n(y,"LI",{});var S0=s(ys);KH=n(S0,"STRONG",{});var NBr=s(KH);dHe=r(NBr,"splinter"),NBr.forEach(t),cHe=r(S0," \u2014 "),Ax=n(S0,"A",{href:!0});var DBr=s(Ax);fHe=r(DBr,"SplinterTokenizer"),DBr.forEach(t),mHe=r(S0," or "),Lx=n(S0,"A",{href:!0});var qBr=s(Lx);gHe=r(qBr,"SplinterTokenizerFast"),qBr.forEach(t),hHe=r(S0," (Splinter model)"),S0.forEach(t),pHe=i(y),ws=n(y,"LI",{});var P0=s(ws);ZH=n(P0,"STRONG",{});var GBr=s(ZH);_He=r(GBr,"squeezebert"),GBr.forEach(t),uHe=r(P0," \u2014 "),Bx=n(P0,"A",{href:!0});var OBr=s(Bx);bHe=r(OBr,"SqueezeBertTokenizer"),OBr.forEach(t),vHe=r(P0," or "),xx=n(P0,"A",{href:!0});var XBr=s(xx);THe=r(XBr,"SqueezeBertTokenizerFast"),XBr.forEach(t),FHe=r(P0," (SqueezeBERT model)"),P0.forEach(t),CHe=i(y),As=n(y,"LI",{});var $0=s(As);eU=n($0,"STRONG",{});var zBr=s(eU);MHe=r(zBr,"t5"),zBr.forEach(t),EHe=r($0," \u2014 "),kx=n($0,"A",{href:!0});var VBr=s(kx);yHe=r(VBr,"T5Tokenizer"),VBr.forEach(t),wHe=r($0," or "),Rx=n($0,"A",{href:!0});var WBr=s(Rx);AHe=r(WBr,"T5TokenizerFast"),WBr.forEach(t),LHe=r($0," (T5 model)"),$0.forEach(t),BHe=i(y),Dg=n(y,"LI",{});var zTe=s(Dg);oU=n(zTe,"STRONG",{});var QBr=s(oU);xHe=r(QBr,"tapas"),QBr.forEach(t),kHe=r(zTe," \u2014 "),Sx=n(zTe,"A",{href:!0});var HBr=s(Sx);RHe=r(HBr,"TapasTokenizer"),HBr.forEach(t),SHe=r(zTe," (TAPAS model)"),zTe.forEach(t),PHe=i(y),qg=n(y,"LI",{});var VTe=s(qg);rU=n(VTe,"STRONG",{});var UBr=s(rU);$He=r(UBr,"transfo-xl"),UBr.forEach(t),IHe=r(VTe," \u2014 "),Px=n(VTe,"A",{href:!0});var JBr=s(Px);jHe=r(JBr,"TransfoXLTokenizer"),JBr.forEach(t),NHe=r(VTe," (Transformer-XL model)"),VTe.forEach(t),DHe=i(y),Gg=n(y,"LI",{});var WTe=s(Gg);tU=n(WTe,"STRONG",{});var YBr=s(tU);qHe=r(YBr,"wav2vec2"),YBr.forEach(t),GHe=r(WTe," \u2014 "),$x=n(WTe,"A",{href:!0});var KBr=s($x);OHe=r(KBr,"Wav2Vec2CTCTokenizer"),KBr.forEach(t),XHe=r(WTe," (Wav2Vec2 model)"),WTe.forEach(t),zHe=i(y),Og=n(y,"LI",{});var QTe=s(Og);aU=n(QTe,"STRONG",{});var ZBr=s(aU);VHe=r(ZBr,"wav2vec2_phoneme"),ZBr.forEach(t),WHe=r(QTe," \u2014 "),Ix=n(QTe,"A",{href:!0});var exr=s(Ix);QHe=r(exr,"Wav2Vec2PhonemeCTCTokenizer"),exr.forEach(t),HHe=r(QTe," (Wav2Vec2Phoneme model)"),QTe.forEach(t),UHe=i(y),Ls=n(y,"LI",{});var I0=s(Ls);nU=n(I0,"STRONG",{});var oxr=s(nU);JHe=r(oxr,"xglm"),oxr.forEach(t),YHe=r(I0," \u2014 "),jx=n(I0,"A",{href:!0});var rxr=s(jx);KHe=r(rxr,"XGLMTokenizer"),rxr.forEach(t),ZHe=r(I0," or "),Nx=n(I0,"A",{href:!0});var txr=s(Nx);eUe=r(txr,"XGLMTokenizerFast"),txr.forEach(t),oUe=r(I0," (XGLM model)"),I0.forEach(t),rUe=i(y),Xg=n(y,"LI",{});var HTe=s(Xg);sU=n(HTe,"STRONG",{});var axr=s(sU);tUe=r(axr,"xlm"),axr.forEach(t),aUe=r(HTe," \u2014 "),Dx=n(HTe,"A",{href:!0});var nxr=s(Dx);nUe=r(nxr,"XLMTokenizer"),nxr.forEach(t),sUe=r(HTe," (XLM model)"),HTe.forEach(t),lUe=i(y),zg=n(y,"LI",{});var UTe=s(zg);lU=n(UTe,"STRONG",{});var sxr=s(lU);iUe=r(sxr,"xlm-prophetnet"),sxr.forEach(t),dUe=r(UTe," \u2014 "),qx=n(UTe,"A",{href:!0});var lxr=s(qx);cUe=r(lxr,"XLMProphetNetTokenizer"),lxr.forEach(t),fUe=r(UTe," (XLMProphetNet model)"),UTe.forEach(t),mUe=i(y),Bs=n(y,"LI",{});var j0=s(Bs);iU=n(j0,"STRONG",{});var ixr=s(iU);gUe=r(ixr,"xlm-roberta"),ixr.forEach(t),hUe=r(j0," \u2014 "),Gx=n(j0,"A",{href:!0});var dxr=s(Gx);pUe=r(dxr,"XLMRobertaTokenizer"),dxr.forEach(t),_Ue=r(j0," or "),Ox=n(j0,"A",{href:!0});var cxr=s(Ox);uUe=r(cxr,"XLMRobertaTokenizerFast"),cxr.forEach(t),bUe=r(j0," (XLM-RoBERTa model)"),j0.forEach(t),vUe=i(y),xs=n(y,"LI",{});var N0=s(xs);dU=n(N0,"STRONG",{});var fxr=s(dU);TUe=r(fxr,"xlnet"),fxr.forEach(t),FUe=r(N0," \u2014 "),Xx=n(N0,"A",{href:!0});var mxr=s(Xx);CUe=r(mxr,"XLNetTokenizer"),mxr.forEach(t),MUe=r(N0," or "),zx=n(N0,"A",{href:!0});var gxr=s(zx);EUe=r(gxr,"XLNetTokenizerFast"),gxr.forEach(t),yUe=r(N0," (XLNet model)"),N0.forEach(t),y.forEach(t),wUe=i(da),cU=n(da,"P",{});var hxr=s(cU);AUe=r(hxr,"Examples:"),hxr.forEach(t),LUe=i(da),m(FM.$$.fragment,da),da.forEach(t),BUe=i($s),Vg=n($s,"DIV",{class:!0});var CBe=s(Vg);m(CM.$$.fragment,CBe),xUe=i(CBe),fU=n(CBe,"P",{});var pxr=s(fU);kUe=r(pxr,"Register a new tokenizer in this mapping."),pxr.forEach(t),CBe.forEach(t),$s.forEach(t),TLe=i(d),ji=n(d,"H2",{class:!0});var MBe=s(ji);Wg=n(MBe,"A",{id:!0,class:!0,href:!0});var _xr=s(Wg);mU=n(_xr,"SPAN",{});var uxr=s(mU);m(MM.$$.fragment,uxr),uxr.forEach(t),_xr.forEach(t),RUe=i(MBe),gU=n(MBe,"SPAN",{});var bxr=s(gU);SUe=r(bxr,"AutoFeatureExtractor"),bxr.forEach(t),MBe.forEach(t),FLe=i(d),Xo=n(d,"DIV",{class:!0});var Is=s(Xo);m(EM.$$.fragment,Is),PUe=i(Is),yM=n(Is,"P",{});var EBe=s(yM);$Ue=r(EBe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Vx=n(EBe,"A",{href:!0});var vxr=s(Vx);IUe=r(vxr,"AutoFeatureExtractor.from_pretrained()"),vxr.forEach(t),jUe=r(EBe," class method."),EBe.forEach(t),NUe=i(Is),wM=n(Is,"P",{});var yBe=s(wM);DUe=r(yBe,"This class cannot be instantiated directly using "),hU=n(yBe,"CODE",{});var Txr=s(hU);qUe=r(Txr,"__init__()"),Txr.forEach(t),GUe=r(yBe," (throws an error)."),yBe.forEach(t),OUe=i(Is),Le=n(Is,"DIV",{class:!0});var kt=s(Le);m(AM.$$.fragment,kt),XUe=i(kt),pU=n(kt,"P",{});var Fxr=s(pU);zUe=r(Fxr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Fxr.forEach(t),VUe=i(kt),Na=n(kt,"P",{});var i4=s(Na);WUe=r(i4,"The feature extractor class to instantiate is selected based on the "),_U=n(i4,"CODE",{});var Cxr=s(_U);QUe=r(Cxr,"model_type"),Cxr.forEach(t),HUe=r(i4,` property of the config object
(either passed as an argument or loaded from `),uU=n(i4,"CODE",{});var Mxr=s(uU);UUe=r(Mxr,"pretrained_model_name_or_path"),Mxr.forEach(t),JUe=r(i4,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),bU=n(i4,"CODE",{});var Exr=s(bU);YUe=r(Exr,"pretrained_model_name_or_path"),Exr.forEach(t),KUe=r(i4,":"),i4.forEach(t),ZUe=i(kt),se=n(kt,"UL",{});var de=s(se);Qg=n(de,"LI",{});var JTe=s(Qg);vU=n(JTe,"STRONG",{});var yxr=s(vU);eJe=r(yxr,"beit"),yxr.forEach(t),oJe=r(JTe," \u2014 "),Wx=n(JTe,"A",{href:!0});var wxr=s(Wx);rJe=r(wxr,"BeitFeatureExtractor"),wxr.forEach(t),tJe=r(JTe," (BEiT model)"),JTe.forEach(t),aJe=i(de),Hg=n(de,"LI",{});var YTe=s(Hg);TU=n(YTe,"STRONG",{});var Axr=s(TU);nJe=r(Axr,"clip"),Axr.forEach(t),sJe=r(YTe," \u2014 "),Qx=n(YTe,"A",{href:!0});var Lxr=s(Qx);lJe=r(Lxr,"CLIPFeatureExtractor"),Lxr.forEach(t),iJe=r(YTe," (CLIP model)"),YTe.forEach(t),dJe=i(de),Ug=n(de,"LI",{});var KTe=s(Ug);FU=n(KTe,"STRONG",{});var Bxr=s(FU);cJe=r(Bxr,"convnext"),Bxr.forEach(t),fJe=r(KTe," \u2014 "),Hx=n(KTe,"A",{href:!0});var xxr=s(Hx);mJe=r(xxr,"ConvNextFeatureExtractor"),xxr.forEach(t),gJe=r(KTe," (ConvNext model)"),KTe.forEach(t),hJe=i(de),Jg=n(de,"LI",{});var ZTe=s(Jg);CU=n(ZTe,"STRONG",{});var kxr=s(CU);pJe=r(kxr,"deit"),kxr.forEach(t),_Je=r(ZTe," \u2014 "),Ux=n(ZTe,"A",{href:!0});var Rxr=s(Ux);uJe=r(Rxr,"DeiTFeatureExtractor"),Rxr.forEach(t),bJe=r(ZTe," (DeiT model)"),ZTe.forEach(t),vJe=i(de),Yg=n(de,"LI",{});var e8e=s(Yg);MU=n(e8e,"STRONG",{});var Sxr=s(MU);TJe=r(Sxr,"detr"),Sxr.forEach(t),FJe=r(e8e," \u2014 "),Jx=n(e8e,"A",{href:!0});var Pxr=s(Jx);CJe=r(Pxr,"DetrFeatureExtractor"),Pxr.forEach(t),MJe=r(e8e," (DETR model)"),e8e.forEach(t),EJe=i(de),Kg=n(de,"LI",{});var o8e=s(Kg);EU=n(o8e,"STRONG",{});var $xr=s(EU);yJe=r($xr,"hubert"),$xr.forEach(t),wJe=r(o8e," \u2014 "),Yx=n(o8e,"A",{href:!0});var Ixr=s(Yx);AJe=r(Ixr,"Wav2Vec2FeatureExtractor"),Ixr.forEach(t),LJe=r(o8e," (Hubert model)"),o8e.forEach(t),BJe=i(de),Zg=n(de,"LI",{});var r8e=s(Zg);yU=n(r8e,"STRONG",{});var jxr=s(yU);xJe=r(jxr,"layoutlmv2"),jxr.forEach(t),kJe=r(r8e," \u2014 "),Kx=n(r8e,"A",{href:!0});var Nxr=s(Kx);RJe=r(Nxr,"LayoutLMv2FeatureExtractor"),Nxr.forEach(t),SJe=r(r8e," (LayoutLMv2 model)"),r8e.forEach(t),PJe=i(de),eh=n(de,"LI",{});var t8e=s(eh);wU=n(t8e,"STRONG",{});var Dxr=s(wU);$Je=r(Dxr,"perceiver"),Dxr.forEach(t),IJe=r(t8e," \u2014 "),Zx=n(t8e,"A",{href:!0});var qxr=s(Zx);jJe=r(qxr,"PerceiverFeatureExtractor"),qxr.forEach(t),NJe=r(t8e," (Perceiver model)"),t8e.forEach(t),DJe=i(de),oh=n(de,"LI",{});var a8e=s(oh);AU=n(a8e,"STRONG",{});var Gxr=s(AU);qJe=r(Gxr,"poolformer"),Gxr.forEach(t),GJe=r(a8e," \u2014 "),ek=n(a8e,"A",{href:!0});var Oxr=s(ek);OJe=r(Oxr,"PoolFormerFeatureExtractor"),Oxr.forEach(t),XJe=r(a8e," (PoolFormer model)"),a8e.forEach(t),zJe=i(de),rh=n(de,"LI",{});var n8e=s(rh);LU=n(n8e,"STRONG",{});var Xxr=s(LU);VJe=r(Xxr,"segformer"),Xxr.forEach(t),WJe=r(n8e," \u2014 "),ok=n(n8e,"A",{href:!0});var zxr=s(ok);QJe=r(zxr,"SegformerFeatureExtractor"),zxr.forEach(t),HJe=r(n8e," (SegFormer model)"),n8e.forEach(t),UJe=i(de),th=n(de,"LI",{});var s8e=s(th);BU=n(s8e,"STRONG",{});var Vxr=s(BU);JJe=r(Vxr,"speech_to_text"),Vxr.forEach(t),YJe=r(s8e," \u2014 "),rk=n(s8e,"A",{href:!0});var Wxr=s(rk);KJe=r(Wxr,"Speech2TextFeatureExtractor"),Wxr.forEach(t),ZJe=r(s8e," (Speech2Text model)"),s8e.forEach(t),eYe=i(de),ah=n(de,"LI",{});var l8e=s(ah);xU=n(l8e,"STRONG",{});var Qxr=s(xU);oYe=r(Qxr,"swin"),Qxr.forEach(t),rYe=r(l8e," \u2014 "),tk=n(l8e,"A",{href:!0});var Hxr=s(tk);tYe=r(Hxr,"ViTFeatureExtractor"),Hxr.forEach(t),aYe=r(l8e," (Swin model)"),l8e.forEach(t),nYe=i(de),nh=n(de,"LI",{});var i8e=s(nh);kU=n(i8e,"STRONG",{});var Uxr=s(kU);sYe=r(Uxr,"vit"),Uxr.forEach(t),lYe=r(i8e," \u2014 "),ak=n(i8e,"A",{href:!0});var Jxr=s(ak);iYe=r(Jxr,"ViTFeatureExtractor"),Jxr.forEach(t),dYe=r(i8e," (ViT model)"),i8e.forEach(t),cYe=i(de),sh=n(de,"LI",{});var d8e=s(sh);RU=n(d8e,"STRONG",{});var Yxr=s(RU);fYe=r(Yxr,"vit_mae"),Yxr.forEach(t),mYe=r(d8e," \u2014 "),nk=n(d8e,"A",{href:!0});var Kxr=s(nk);gYe=r(Kxr,"ViTFeatureExtractor"),Kxr.forEach(t),hYe=r(d8e," (ViTMAE model)"),d8e.forEach(t),pYe=i(de),lh=n(de,"LI",{});var c8e=s(lh);SU=n(c8e,"STRONG",{});var Zxr=s(SU);_Ye=r(Zxr,"wav2vec2"),Zxr.forEach(t),uYe=r(c8e," \u2014 "),sk=n(c8e,"A",{href:!0});var ekr=s(sk);bYe=r(ekr,"Wav2Vec2FeatureExtractor"),ekr.forEach(t),vYe=r(c8e," (Wav2Vec2 model)"),c8e.forEach(t),de.forEach(t),TYe=i(kt),m(ih.$$.fragment,kt),FYe=i(kt),PU=n(kt,"P",{});var okr=s(PU);CYe=r(okr,"Examples:"),okr.forEach(t),MYe=i(kt),m(LM.$$.fragment,kt),kt.forEach(t),EYe=i(Is),dh=n(Is,"DIV",{class:!0});var wBe=s(dh);m(BM.$$.fragment,wBe),yYe=i(wBe),$U=n(wBe,"P",{});var rkr=s($U);wYe=r(rkr,"Register a new feature extractor for this class."),rkr.forEach(t),wBe.forEach(t),Is.forEach(t),CLe=i(d),Ni=n(d,"H2",{class:!0});var ABe=s(Ni);ch=n(ABe,"A",{id:!0,class:!0,href:!0});var tkr=s(ch);IU=n(tkr,"SPAN",{});var akr=s(IU);m(xM.$$.fragment,akr),akr.forEach(t),tkr.forEach(t),AYe=i(ABe),jU=n(ABe,"SPAN",{});var nkr=s(jU);LYe=r(nkr,"AutoProcessor"),nkr.forEach(t),ABe.forEach(t),MLe=i(d),zo=n(d,"DIV",{class:!0});var js=s(zo);m(kM.$$.fragment,js),BYe=i(js),RM=n(js,"P",{});var LBe=s(RM);xYe=r(LBe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),lk=n(LBe,"A",{href:!0});var skr=s(lk);kYe=r(skr,"AutoProcessor.from_pretrained()"),skr.forEach(t),RYe=r(LBe," class method."),LBe.forEach(t),SYe=i(js),SM=n(js,"P",{});var BBe=s(SM);PYe=r(BBe,"This class cannot be instantiated directly using "),NU=n(BBe,"CODE",{});var lkr=s(NU);$Ye=r(lkr,"__init__()"),lkr.forEach(t),IYe=r(BBe," (throws an error)."),BBe.forEach(t),jYe=i(js),Be=n(js,"DIV",{class:!0});var Rt=s(Be);m(PM.$$.fragment,Rt),NYe=i(Rt),DU=n(Rt,"P",{});var ikr=s(DU);DYe=r(ikr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ikr.forEach(t),qYe=i(Rt),Di=n(Rt,"P",{});var JX=s(Di);GYe=r(JX,"The processor class to instantiate is selected based on the "),qU=n(JX,"CODE",{});var dkr=s(qU);OYe=r(dkr,"model_type"),dkr.forEach(t),XYe=r(JX,` property of the config object (either
passed as an argument or loaded from `),GU=n(JX,"CODE",{});var ckr=s(GU);zYe=r(ckr,"pretrained_model_name_or_path"),ckr.forEach(t),VYe=r(JX," if possible):"),JX.forEach(t),WYe=i(Rt),we=n(Rt,"UL",{});var No=s(we);fh=n(No,"LI",{});var f8e=s(fh);OU=n(f8e,"STRONG",{});var fkr=s(OU);QYe=r(fkr,"clip"),fkr.forEach(t),HYe=r(f8e," \u2014 "),ik=n(f8e,"A",{href:!0});var mkr=s(ik);UYe=r(mkr,"CLIPProcessor"),mkr.forEach(t),JYe=r(f8e," (CLIP model)"),f8e.forEach(t),YYe=i(No),mh=n(No,"LI",{});var m8e=s(mh);XU=n(m8e,"STRONG",{});var gkr=s(XU);KYe=r(gkr,"layoutlmv2"),gkr.forEach(t),ZYe=r(m8e," \u2014 "),dk=n(m8e,"A",{href:!0});var hkr=s(dk);eKe=r(hkr,"LayoutLMv2Processor"),hkr.forEach(t),oKe=r(m8e," (LayoutLMv2 model)"),m8e.forEach(t),rKe=i(No),gh=n(No,"LI",{});var g8e=s(gh);zU=n(g8e,"STRONG",{});var pkr=s(zU);tKe=r(pkr,"layoutxlm"),pkr.forEach(t),aKe=r(g8e," \u2014 "),ck=n(g8e,"A",{href:!0});var _kr=s(ck);nKe=r(_kr,"LayoutXLMProcessor"),_kr.forEach(t),sKe=r(g8e," (LayoutXLM model)"),g8e.forEach(t),lKe=i(No),hh=n(No,"LI",{});var h8e=s(hh);VU=n(h8e,"STRONG",{});var ukr=s(VU);iKe=r(ukr,"speech_to_text"),ukr.forEach(t),dKe=r(h8e," \u2014 "),fk=n(h8e,"A",{href:!0});var bkr=s(fk);cKe=r(bkr,"Speech2TextProcessor"),bkr.forEach(t),fKe=r(h8e," (Speech2Text model)"),h8e.forEach(t),mKe=i(No),ph=n(No,"LI",{});var p8e=s(ph);WU=n(p8e,"STRONG",{});var vkr=s(WU);gKe=r(vkr,"speech_to_text_2"),vkr.forEach(t),hKe=r(p8e," \u2014 "),mk=n(p8e,"A",{href:!0});var Tkr=s(mk);pKe=r(Tkr,"Speech2Text2Processor"),Tkr.forEach(t),_Ke=r(p8e," (Speech2Text2 model)"),p8e.forEach(t),uKe=i(No),_h=n(No,"LI",{});var _8e=s(_h);QU=n(_8e,"STRONG",{});var Fkr=s(QU);bKe=r(Fkr,"trocr"),Fkr.forEach(t),vKe=r(_8e," \u2014 "),gk=n(_8e,"A",{href:!0});var Ckr=s(gk);TKe=r(Ckr,"TrOCRProcessor"),Ckr.forEach(t),FKe=r(_8e," (TrOCR model)"),_8e.forEach(t),CKe=i(No),uh=n(No,"LI",{});var u8e=s(uh);HU=n(u8e,"STRONG",{});var Mkr=s(HU);MKe=r(Mkr,"vision-text-dual-encoder"),Mkr.forEach(t),EKe=r(u8e," \u2014 "),hk=n(u8e,"A",{href:!0});var Ekr=s(hk);yKe=r(Ekr,"VisionTextDualEncoderProcessor"),Ekr.forEach(t),wKe=r(u8e," (VisionTextDualEncoder model)"),u8e.forEach(t),AKe=i(No),bh=n(No,"LI",{});var b8e=s(bh);UU=n(b8e,"STRONG",{});var ykr=s(UU);LKe=r(ykr,"wav2vec2"),ykr.forEach(t),BKe=r(b8e," \u2014 "),pk=n(b8e,"A",{href:!0});var wkr=s(pk);xKe=r(wkr,"Wav2Vec2Processor"),wkr.forEach(t),kKe=r(b8e," (Wav2Vec2 model)"),b8e.forEach(t),No.forEach(t),RKe=i(Rt),m(vh.$$.fragment,Rt),SKe=i(Rt),JU=n(Rt,"P",{});var Akr=s(JU);PKe=r(Akr,"Examples:"),Akr.forEach(t),$Ke=i(Rt),m($M.$$.fragment,Rt),Rt.forEach(t),IKe=i(js),Th=n(js,"DIV",{class:!0});var xBe=s(Th);m(IM.$$.fragment,xBe),jKe=i(xBe),YU=n(xBe,"P",{});var Lkr=s(YU);NKe=r(Lkr,"Register a new processor for this class."),Lkr.forEach(t),xBe.forEach(t),js.forEach(t),ELe=i(d),qi=n(d,"H2",{class:!0});var kBe=s(qi);Fh=n(kBe,"A",{id:!0,class:!0,href:!0});var Bkr=s(Fh);KU=n(Bkr,"SPAN",{});var xkr=s(KU);m(jM.$$.fragment,xkr),xkr.forEach(t),Bkr.forEach(t),DKe=i(kBe),ZU=n(kBe,"SPAN",{});var kkr=s(ZU);qKe=r(kkr,"AutoModel"),kkr.forEach(t),kBe.forEach(t),yLe=i(d),Vo=n(d,"DIV",{class:!0});var Ns=s(Vo);m(NM.$$.fragment,Ns),GKe=i(Ns),Gi=n(Ns,"P",{});var YX=s(Gi);OKe=r(YX,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eJ=n(YX,"CODE",{});var Rkr=s(eJ);XKe=r(Rkr,"from_pretrained()"),Rkr.forEach(t),zKe=r(YX,"class method or the "),oJ=n(YX,"CODE",{});var Skr=s(oJ);VKe=r(Skr,"from_config()"),Skr.forEach(t),WKe=r(YX,`class
method.`),YX.forEach(t),QKe=i(Ns),DM=n(Ns,"P",{});var RBe=s(DM);HKe=r(RBe,"This class cannot be instantiated directly using "),rJ=n(RBe,"CODE",{});var Pkr=s(rJ);UKe=r(Pkr,"__init__()"),Pkr.forEach(t),JKe=r(RBe," (throws an error)."),RBe.forEach(t),YKe=i(Ns),Nr=n(Ns,"DIV",{class:!0});var Ds=s(Nr);m(qM.$$.fragment,Ds),KKe=i(Ds),tJ=n(Ds,"P",{});var $kr=s(tJ);ZKe=r($kr,"Instantiates one of the base model classes of the library from a configuration."),$kr.forEach(t),eZe=i(Ds),Oi=n(Ds,"P",{});var KX=s(Oi);oZe=r(KX,`Note:
Loading a model from its configuration file does `),aJ=n(KX,"STRONG",{});var Ikr=s(aJ);rZe=r(Ikr,"not"),Ikr.forEach(t),tZe=r(KX,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(KX,"CODE",{});var jkr=s(nJ);aZe=r(jkr,"from_pretrained()"),jkr.forEach(t),nZe=r(KX,"to load the model weights."),KX.forEach(t),sZe=i(Ds),sJ=n(Ds,"P",{});var Nkr=s(sJ);lZe=r(Nkr,"Examples:"),Nkr.forEach(t),iZe=i(Ds),m(GM.$$.fragment,Ds),Ds.forEach(t),dZe=i(Ns),xe=n(Ns,"DIV",{class:!0});var St=s(xe);m(OM.$$.fragment,St),cZe=i(St),lJ=n(St,"P",{});var Dkr=s(lJ);fZe=r(Dkr,"Instantiate one of the base model classes of the library from a pretrained model."),Dkr.forEach(t),mZe=i(St),Da=n(St,"P",{});var d4=s(Da);gZe=r(d4,"The model class to instantiate is selected based on the "),iJ=n(d4,"CODE",{});var qkr=s(iJ);hZe=r(qkr,"model_type"),qkr.forEach(t),pZe=r(d4,` property of the config object (either
passed as an argument or loaded from `),dJ=n(d4,"CODE",{});var Gkr=s(dJ);_Ze=r(Gkr,"pretrained_model_name_or_path"),Gkr.forEach(t),uZe=r(d4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cJ=n(d4,"CODE",{});var Okr=s(cJ);bZe=r(Okr,"pretrained_model_name_or_path"),Okr.forEach(t),vZe=r(d4,":"),d4.forEach(t),TZe=i(St),F=n(St,"UL",{});var C=s(F);Ch=n(C,"LI",{});var v8e=s(Ch);fJ=n(v8e,"STRONG",{});var Xkr=s(fJ);FZe=r(Xkr,"albert"),Xkr.forEach(t),CZe=r(v8e," \u2014 "),_k=n(v8e,"A",{href:!0});var zkr=s(_k);MZe=r(zkr,"AlbertModel"),zkr.forEach(t),EZe=r(v8e," (ALBERT model)"),v8e.forEach(t),yZe=i(C),Mh=n(C,"LI",{});var T8e=s(Mh);mJ=n(T8e,"STRONG",{});var Vkr=s(mJ);wZe=r(Vkr,"bart"),Vkr.forEach(t),AZe=r(T8e," \u2014 "),uk=n(T8e,"A",{href:!0});var Wkr=s(uk);LZe=r(Wkr,"BartModel"),Wkr.forEach(t),BZe=r(T8e," (BART model)"),T8e.forEach(t),xZe=i(C),Eh=n(C,"LI",{});var F8e=s(Eh);gJ=n(F8e,"STRONG",{});var Qkr=s(gJ);kZe=r(Qkr,"beit"),Qkr.forEach(t),RZe=r(F8e," \u2014 "),bk=n(F8e,"A",{href:!0});var Hkr=s(bk);SZe=r(Hkr,"BeitModel"),Hkr.forEach(t),PZe=r(F8e," (BEiT model)"),F8e.forEach(t),$Ze=i(C),yh=n(C,"LI",{});var C8e=s(yh);hJ=n(C8e,"STRONG",{});var Ukr=s(hJ);IZe=r(Ukr,"bert"),Ukr.forEach(t),jZe=r(C8e," \u2014 "),vk=n(C8e,"A",{href:!0});var Jkr=s(vk);NZe=r(Jkr,"BertModel"),Jkr.forEach(t),DZe=r(C8e," (BERT model)"),C8e.forEach(t),qZe=i(C),wh=n(C,"LI",{});var M8e=s(wh);pJ=n(M8e,"STRONG",{});var Ykr=s(pJ);GZe=r(Ykr,"bert-generation"),Ykr.forEach(t),OZe=r(M8e," \u2014 "),Tk=n(M8e,"A",{href:!0});var Kkr=s(Tk);XZe=r(Kkr,"BertGenerationEncoder"),Kkr.forEach(t),zZe=r(M8e," (Bert Generation model)"),M8e.forEach(t),VZe=i(C),Ah=n(C,"LI",{});var E8e=s(Ah);_J=n(E8e,"STRONG",{});var Zkr=s(_J);WZe=r(Zkr,"big_bird"),Zkr.forEach(t),QZe=r(E8e," \u2014 "),Fk=n(E8e,"A",{href:!0});var eRr=s(Fk);HZe=r(eRr,"BigBirdModel"),eRr.forEach(t),UZe=r(E8e," (BigBird model)"),E8e.forEach(t),JZe=i(C),Lh=n(C,"LI",{});var y8e=s(Lh);uJ=n(y8e,"STRONG",{});var oRr=s(uJ);YZe=r(oRr,"bigbird_pegasus"),oRr.forEach(t),KZe=r(y8e," \u2014 "),Ck=n(y8e,"A",{href:!0});var rRr=s(Ck);ZZe=r(rRr,"BigBirdPegasusModel"),rRr.forEach(t),eeo=r(y8e," (BigBirdPegasus model)"),y8e.forEach(t),oeo=i(C),Bh=n(C,"LI",{});var w8e=s(Bh);bJ=n(w8e,"STRONG",{});var tRr=s(bJ);reo=r(tRr,"blenderbot"),tRr.forEach(t),teo=r(w8e," \u2014 "),Mk=n(w8e,"A",{href:!0});var aRr=s(Mk);aeo=r(aRr,"BlenderbotModel"),aRr.forEach(t),neo=r(w8e," (Blenderbot model)"),w8e.forEach(t),seo=i(C),xh=n(C,"LI",{});var A8e=s(xh);vJ=n(A8e,"STRONG",{});var nRr=s(vJ);leo=r(nRr,"blenderbot-small"),nRr.forEach(t),ieo=r(A8e," \u2014 "),Ek=n(A8e,"A",{href:!0});var sRr=s(Ek);deo=r(sRr,"BlenderbotSmallModel"),sRr.forEach(t),ceo=r(A8e," (BlenderbotSmall model)"),A8e.forEach(t),feo=i(C),kh=n(C,"LI",{});var L8e=s(kh);TJ=n(L8e,"STRONG",{});var lRr=s(TJ);meo=r(lRr,"camembert"),lRr.forEach(t),geo=r(L8e," \u2014 "),yk=n(L8e,"A",{href:!0});var iRr=s(yk);heo=r(iRr,"CamembertModel"),iRr.forEach(t),peo=r(L8e," (CamemBERT model)"),L8e.forEach(t),_eo=i(C),Rh=n(C,"LI",{});var B8e=s(Rh);FJ=n(B8e,"STRONG",{});var dRr=s(FJ);ueo=r(dRr,"canine"),dRr.forEach(t),beo=r(B8e," \u2014 "),wk=n(B8e,"A",{href:!0});var cRr=s(wk);veo=r(cRr,"CanineModel"),cRr.forEach(t),Teo=r(B8e," (Canine model)"),B8e.forEach(t),Feo=i(C),Sh=n(C,"LI",{});var x8e=s(Sh);CJ=n(x8e,"STRONG",{});var fRr=s(CJ);Ceo=r(fRr,"clip"),fRr.forEach(t),Meo=r(x8e," \u2014 "),Ak=n(x8e,"A",{href:!0});var mRr=s(Ak);Eeo=r(mRr,"CLIPModel"),mRr.forEach(t),yeo=r(x8e," (CLIP model)"),x8e.forEach(t),weo=i(C),Ph=n(C,"LI",{});var k8e=s(Ph);MJ=n(k8e,"STRONG",{});var gRr=s(MJ);Aeo=r(gRr,"convbert"),gRr.forEach(t),Leo=r(k8e," \u2014 "),Lk=n(k8e,"A",{href:!0});var hRr=s(Lk);Beo=r(hRr,"ConvBertModel"),hRr.forEach(t),xeo=r(k8e," (ConvBERT model)"),k8e.forEach(t),keo=i(C),$h=n(C,"LI",{});var R8e=s($h);EJ=n(R8e,"STRONG",{});var pRr=s(EJ);Reo=r(pRr,"convnext"),pRr.forEach(t),Seo=r(R8e," \u2014 "),Bk=n(R8e,"A",{href:!0});var _Rr=s(Bk);Peo=r(_Rr,"ConvNextModel"),_Rr.forEach(t),$eo=r(R8e," (ConvNext model)"),R8e.forEach(t),Ieo=i(C),Ih=n(C,"LI",{});var S8e=s(Ih);yJ=n(S8e,"STRONG",{});var uRr=s(yJ);jeo=r(uRr,"ctrl"),uRr.forEach(t),Neo=r(S8e," \u2014 "),xk=n(S8e,"A",{href:!0});var bRr=s(xk);Deo=r(bRr,"CTRLModel"),bRr.forEach(t),qeo=r(S8e," (CTRL model)"),S8e.forEach(t),Geo=i(C),jh=n(C,"LI",{});var P8e=s(jh);wJ=n(P8e,"STRONG",{});var vRr=s(wJ);Oeo=r(vRr,"deberta"),vRr.forEach(t),Xeo=r(P8e," \u2014 "),kk=n(P8e,"A",{href:!0});var TRr=s(kk);zeo=r(TRr,"DebertaModel"),TRr.forEach(t),Veo=r(P8e," (DeBERTa model)"),P8e.forEach(t),Weo=i(C),Nh=n(C,"LI",{});var $8e=s(Nh);AJ=n($8e,"STRONG",{});var FRr=s(AJ);Qeo=r(FRr,"deberta-v2"),FRr.forEach(t),Heo=r($8e," \u2014 "),Rk=n($8e,"A",{href:!0});var CRr=s(Rk);Ueo=r(CRr,"DebertaV2Model"),CRr.forEach(t),Jeo=r($8e," (DeBERTa-v2 model)"),$8e.forEach(t),Yeo=i(C),Dh=n(C,"LI",{});var I8e=s(Dh);LJ=n(I8e,"STRONG",{});var MRr=s(LJ);Keo=r(MRr,"deit"),MRr.forEach(t),Zeo=r(I8e," \u2014 "),Sk=n(I8e,"A",{href:!0});var ERr=s(Sk);eoo=r(ERr,"DeiTModel"),ERr.forEach(t),ooo=r(I8e," (DeiT model)"),I8e.forEach(t),roo=i(C),qh=n(C,"LI",{});var j8e=s(qh);BJ=n(j8e,"STRONG",{});var yRr=s(BJ);too=r(yRr,"detr"),yRr.forEach(t),aoo=r(j8e," \u2014 "),Pk=n(j8e,"A",{href:!0});var wRr=s(Pk);noo=r(wRr,"DetrModel"),wRr.forEach(t),soo=r(j8e," (DETR model)"),j8e.forEach(t),loo=i(C),Gh=n(C,"LI",{});var N8e=s(Gh);xJ=n(N8e,"STRONG",{});var ARr=s(xJ);ioo=r(ARr,"distilbert"),ARr.forEach(t),doo=r(N8e," \u2014 "),$k=n(N8e,"A",{href:!0});var LRr=s($k);coo=r(LRr,"DistilBertModel"),LRr.forEach(t),foo=r(N8e," (DistilBERT model)"),N8e.forEach(t),moo=i(C),Oh=n(C,"LI",{});var D8e=s(Oh);kJ=n(D8e,"STRONG",{});var BRr=s(kJ);goo=r(BRr,"dpr"),BRr.forEach(t),hoo=r(D8e," \u2014 "),Ik=n(D8e,"A",{href:!0});var xRr=s(Ik);poo=r(xRr,"DPRQuestionEncoder"),xRr.forEach(t),_oo=r(D8e," (DPR model)"),D8e.forEach(t),uoo=i(C),Xh=n(C,"LI",{});var q8e=s(Xh);RJ=n(q8e,"STRONG",{});var kRr=s(RJ);boo=r(kRr,"electra"),kRr.forEach(t),voo=r(q8e," \u2014 "),jk=n(q8e,"A",{href:!0});var RRr=s(jk);Too=r(RRr,"ElectraModel"),RRr.forEach(t),Foo=r(q8e," (ELECTRA model)"),q8e.forEach(t),Coo=i(C),zh=n(C,"LI",{});var G8e=s(zh);SJ=n(G8e,"STRONG",{});var SRr=s(SJ);Moo=r(SRr,"flaubert"),SRr.forEach(t),Eoo=r(G8e," \u2014 "),Nk=n(G8e,"A",{href:!0});var PRr=s(Nk);yoo=r(PRr,"FlaubertModel"),PRr.forEach(t),woo=r(G8e," (FlauBERT model)"),G8e.forEach(t),Aoo=i(C),Vh=n(C,"LI",{});var O8e=s(Vh);PJ=n(O8e,"STRONG",{});var $Rr=s(PJ);Loo=r($Rr,"fnet"),$Rr.forEach(t),Boo=r(O8e," \u2014 "),Dk=n(O8e,"A",{href:!0});var IRr=s(Dk);xoo=r(IRr,"FNetModel"),IRr.forEach(t),koo=r(O8e," (FNet model)"),O8e.forEach(t),Roo=i(C),Wh=n(C,"LI",{});var X8e=s(Wh);$J=n(X8e,"STRONG",{});var jRr=s($J);Soo=r(jRr,"fsmt"),jRr.forEach(t),Poo=r(X8e," \u2014 "),qk=n(X8e,"A",{href:!0});var NRr=s(qk);$oo=r(NRr,"FSMTModel"),NRr.forEach(t),Ioo=r(X8e," (FairSeq Machine-Translation model)"),X8e.forEach(t),joo=i(C),ks=n(C,"LI",{});var D0=s(ks);IJ=n(D0,"STRONG",{});var DRr=s(IJ);Noo=r(DRr,"funnel"),DRr.forEach(t),Doo=r(D0," \u2014 "),Gk=n(D0,"A",{href:!0});var qRr=s(Gk);qoo=r(qRr,"FunnelModel"),qRr.forEach(t),Goo=r(D0," or "),Ok=n(D0,"A",{href:!0});var GRr=s(Ok);Ooo=r(GRr,"FunnelBaseModel"),GRr.forEach(t),Xoo=r(D0," (Funnel Transformer model)"),D0.forEach(t),zoo=i(C),Qh=n(C,"LI",{});var z8e=s(Qh);jJ=n(z8e,"STRONG",{});var ORr=s(jJ);Voo=r(ORr,"gpt2"),ORr.forEach(t),Woo=r(z8e," \u2014 "),Xk=n(z8e,"A",{href:!0});var XRr=s(Xk);Qoo=r(XRr,"GPT2Model"),XRr.forEach(t),Hoo=r(z8e," (OpenAI GPT-2 model)"),z8e.forEach(t),Uoo=i(C),Hh=n(C,"LI",{});var V8e=s(Hh);NJ=n(V8e,"STRONG",{});var zRr=s(NJ);Joo=r(zRr,"gpt_neo"),zRr.forEach(t),Yoo=r(V8e," \u2014 "),zk=n(V8e,"A",{href:!0});var VRr=s(zk);Koo=r(VRr,"GPTNeoModel"),VRr.forEach(t),Zoo=r(V8e," (GPT Neo model)"),V8e.forEach(t),ero=i(C),Uh=n(C,"LI",{});var W8e=s(Uh);DJ=n(W8e,"STRONG",{});var WRr=s(DJ);oro=r(WRr,"gptj"),WRr.forEach(t),rro=r(W8e," \u2014 "),Vk=n(W8e,"A",{href:!0});var QRr=s(Vk);tro=r(QRr,"GPTJModel"),QRr.forEach(t),aro=r(W8e," (GPT-J model)"),W8e.forEach(t),nro=i(C),Jh=n(C,"LI",{});var Q8e=s(Jh);qJ=n(Q8e,"STRONG",{});var HRr=s(qJ);sro=r(HRr,"hubert"),HRr.forEach(t),lro=r(Q8e," \u2014 "),Wk=n(Q8e,"A",{href:!0});var URr=s(Wk);iro=r(URr,"HubertModel"),URr.forEach(t),dro=r(Q8e," (Hubert model)"),Q8e.forEach(t),cro=i(C),Yh=n(C,"LI",{});var H8e=s(Yh);GJ=n(H8e,"STRONG",{});var JRr=s(GJ);fro=r(JRr,"ibert"),JRr.forEach(t),mro=r(H8e," \u2014 "),Qk=n(H8e,"A",{href:!0});var YRr=s(Qk);gro=r(YRr,"IBertModel"),YRr.forEach(t),hro=r(H8e," (I-BERT model)"),H8e.forEach(t),pro=i(C),Kh=n(C,"LI",{});var U8e=s(Kh);OJ=n(U8e,"STRONG",{});var KRr=s(OJ);_ro=r(KRr,"imagegpt"),KRr.forEach(t),uro=r(U8e," \u2014 "),Hk=n(U8e,"A",{href:!0});var ZRr=s(Hk);bro=r(ZRr,"ImageGPTModel"),ZRr.forEach(t),vro=r(U8e," (ImageGPT model)"),U8e.forEach(t),Tro=i(C),Zh=n(C,"LI",{});var J8e=s(Zh);XJ=n(J8e,"STRONG",{});var eSr=s(XJ);Fro=r(eSr,"layoutlm"),eSr.forEach(t),Cro=r(J8e," \u2014 "),Uk=n(J8e,"A",{href:!0});var oSr=s(Uk);Mro=r(oSr,"LayoutLMModel"),oSr.forEach(t),Ero=r(J8e," (LayoutLM model)"),J8e.forEach(t),yro=i(C),ep=n(C,"LI",{});var Y8e=s(ep);zJ=n(Y8e,"STRONG",{});var rSr=s(zJ);wro=r(rSr,"layoutlmv2"),rSr.forEach(t),Aro=r(Y8e," \u2014 "),Jk=n(Y8e,"A",{href:!0});var tSr=s(Jk);Lro=r(tSr,"LayoutLMv2Model"),tSr.forEach(t),Bro=r(Y8e," (LayoutLMv2 model)"),Y8e.forEach(t),xro=i(C),op=n(C,"LI",{});var K8e=s(op);VJ=n(K8e,"STRONG",{});var aSr=s(VJ);kro=r(aSr,"led"),aSr.forEach(t),Rro=r(K8e," \u2014 "),Yk=n(K8e,"A",{href:!0});var nSr=s(Yk);Sro=r(nSr,"LEDModel"),nSr.forEach(t),Pro=r(K8e," (LED model)"),K8e.forEach(t),$ro=i(C),rp=n(C,"LI",{});var Z8e=s(rp);WJ=n(Z8e,"STRONG",{});var sSr=s(WJ);Iro=r(sSr,"longformer"),sSr.forEach(t),jro=r(Z8e," \u2014 "),Kk=n(Z8e,"A",{href:!0});var lSr=s(Kk);Nro=r(lSr,"LongformerModel"),lSr.forEach(t),Dro=r(Z8e," (Longformer model)"),Z8e.forEach(t),qro=i(C),tp=n(C,"LI",{});var eFe=s(tp);QJ=n(eFe,"STRONG",{});var iSr=s(QJ);Gro=r(iSr,"luke"),iSr.forEach(t),Oro=r(eFe," \u2014 "),Zk=n(eFe,"A",{href:!0});var dSr=s(Zk);Xro=r(dSr,"LukeModel"),dSr.forEach(t),zro=r(eFe," (LUKE model)"),eFe.forEach(t),Vro=i(C),ap=n(C,"LI",{});var oFe=s(ap);HJ=n(oFe,"STRONG",{});var cSr=s(HJ);Wro=r(cSr,"lxmert"),cSr.forEach(t),Qro=r(oFe," \u2014 "),eR=n(oFe,"A",{href:!0});var fSr=s(eR);Hro=r(fSr,"LxmertModel"),fSr.forEach(t),Uro=r(oFe," (LXMERT model)"),oFe.forEach(t),Jro=i(C),np=n(C,"LI",{});var rFe=s(np);UJ=n(rFe,"STRONG",{});var mSr=s(UJ);Yro=r(mSr,"m2m_100"),mSr.forEach(t),Kro=r(rFe," \u2014 "),oR=n(rFe,"A",{href:!0});var gSr=s(oR);Zro=r(gSr,"M2M100Model"),gSr.forEach(t),eto=r(rFe," (M2M100 model)"),rFe.forEach(t),oto=i(C),sp=n(C,"LI",{});var tFe=s(sp);JJ=n(tFe,"STRONG",{});var hSr=s(JJ);rto=r(hSr,"marian"),hSr.forEach(t),tto=r(tFe," \u2014 "),rR=n(tFe,"A",{href:!0});var pSr=s(rR);ato=r(pSr,"MarianModel"),pSr.forEach(t),nto=r(tFe," (Marian model)"),tFe.forEach(t),sto=i(C),lp=n(C,"LI",{});var aFe=s(lp);YJ=n(aFe,"STRONG",{});var _Sr=s(YJ);lto=r(_Sr,"mbart"),_Sr.forEach(t),ito=r(aFe," \u2014 "),tR=n(aFe,"A",{href:!0});var uSr=s(tR);dto=r(uSr,"MBartModel"),uSr.forEach(t),cto=r(aFe," (mBART model)"),aFe.forEach(t),fto=i(C),ip=n(C,"LI",{});var nFe=s(ip);KJ=n(nFe,"STRONG",{});var bSr=s(KJ);mto=r(bSr,"megatron-bert"),bSr.forEach(t),gto=r(nFe," \u2014 "),aR=n(nFe,"A",{href:!0});var vSr=s(aR);hto=r(vSr,"MegatronBertModel"),vSr.forEach(t),pto=r(nFe," (MegatronBert model)"),nFe.forEach(t),_to=i(C),dp=n(C,"LI",{});var sFe=s(dp);ZJ=n(sFe,"STRONG",{});var TSr=s(ZJ);uto=r(TSr,"mobilebert"),TSr.forEach(t),bto=r(sFe," \u2014 "),nR=n(sFe,"A",{href:!0});var FSr=s(nR);vto=r(FSr,"MobileBertModel"),FSr.forEach(t),Tto=r(sFe," (MobileBERT model)"),sFe.forEach(t),Fto=i(C),cp=n(C,"LI",{});var lFe=s(cp);eY=n(lFe,"STRONG",{});var CSr=s(eY);Cto=r(CSr,"mpnet"),CSr.forEach(t),Mto=r(lFe," \u2014 "),sR=n(lFe,"A",{href:!0});var MSr=s(sR);Eto=r(MSr,"MPNetModel"),MSr.forEach(t),yto=r(lFe," (MPNet model)"),lFe.forEach(t),wto=i(C),fp=n(C,"LI",{});var iFe=s(fp);oY=n(iFe,"STRONG",{});var ESr=s(oY);Ato=r(ESr,"mt5"),ESr.forEach(t),Lto=r(iFe," \u2014 "),lR=n(iFe,"A",{href:!0});var ySr=s(lR);Bto=r(ySr,"MT5Model"),ySr.forEach(t),xto=r(iFe," (mT5 model)"),iFe.forEach(t),kto=i(C),mp=n(C,"LI",{});var dFe=s(mp);rY=n(dFe,"STRONG",{});var wSr=s(rY);Rto=r(wSr,"nystromformer"),wSr.forEach(t),Sto=r(dFe," \u2014 "),iR=n(dFe,"A",{href:!0});var ASr=s(iR);Pto=r(ASr,"NystromformerModel"),ASr.forEach(t),$to=r(dFe," (Nystromformer model)"),dFe.forEach(t),Ito=i(C),gp=n(C,"LI",{});var cFe=s(gp);tY=n(cFe,"STRONG",{});var LSr=s(tY);jto=r(LSr,"openai-gpt"),LSr.forEach(t),Nto=r(cFe," \u2014 "),dR=n(cFe,"A",{href:!0});var BSr=s(dR);Dto=r(BSr,"OpenAIGPTModel"),BSr.forEach(t),qto=r(cFe," (OpenAI GPT model)"),cFe.forEach(t),Gto=i(C),hp=n(C,"LI",{});var fFe=s(hp);aY=n(fFe,"STRONG",{});var xSr=s(aY);Oto=r(xSr,"pegasus"),xSr.forEach(t),Xto=r(fFe," \u2014 "),cR=n(fFe,"A",{href:!0});var kSr=s(cR);zto=r(kSr,"PegasusModel"),kSr.forEach(t),Vto=r(fFe," (Pegasus model)"),fFe.forEach(t),Wto=i(C),pp=n(C,"LI",{});var mFe=s(pp);nY=n(mFe,"STRONG",{});var RSr=s(nY);Qto=r(RSr,"perceiver"),RSr.forEach(t),Hto=r(mFe," \u2014 "),fR=n(mFe,"A",{href:!0});var SSr=s(fR);Uto=r(SSr,"PerceiverModel"),SSr.forEach(t),Jto=r(mFe," (Perceiver model)"),mFe.forEach(t),Yto=i(C),_p=n(C,"LI",{});var gFe=s(_p);sY=n(gFe,"STRONG",{});var PSr=s(sY);Kto=r(PSr,"plbart"),PSr.forEach(t),Zto=r(gFe," \u2014 "),mR=n(gFe,"A",{href:!0});var $Sr=s(mR);eao=r($Sr,"PLBartModel"),$Sr.forEach(t),oao=r(gFe," (PLBart model)"),gFe.forEach(t),rao=i(C),up=n(C,"LI",{});var hFe=s(up);lY=n(hFe,"STRONG",{});var ISr=s(lY);tao=r(ISr,"poolformer"),ISr.forEach(t),aao=r(hFe," \u2014 "),gR=n(hFe,"A",{href:!0});var jSr=s(gR);nao=r(jSr,"PoolFormerModel"),jSr.forEach(t),sao=r(hFe," (PoolFormer model)"),hFe.forEach(t),lao=i(C),bp=n(C,"LI",{});var pFe=s(bp);iY=n(pFe,"STRONG",{});var NSr=s(iY);iao=r(NSr,"prophetnet"),NSr.forEach(t),dao=r(pFe," \u2014 "),hR=n(pFe,"A",{href:!0});var DSr=s(hR);cao=r(DSr,"ProphetNetModel"),DSr.forEach(t),fao=r(pFe," (ProphetNet model)"),pFe.forEach(t),mao=i(C),vp=n(C,"LI",{});var _Fe=s(vp);dY=n(_Fe,"STRONG",{});var qSr=s(dY);gao=r(qSr,"qdqbert"),qSr.forEach(t),hao=r(_Fe," \u2014 "),pR=n(_Fe,"A",{href:!0});var GSr=s(pR);pao=r(GSr,"QDQBertModel"),GSr.forEach(t),_ao=r(_Fe," (QDQBert model)"),_Fe.forEach(t),uao=i(C),Tp=n(C,"LI",{});var uFe=s(Tp);cY=n(uFe,"STRONG",{});var OSr=s(cY);bao=r(OSr,"reformer"),OSr.forEach(t),vao=r(uFe," \u2014 "),_R=n(uFe,"A",{href:!0});var XSr=s(_R);Tao=r(XSr,"ReformerModel"),XSr.forEach(t),Fao=r(uFe," (Reformer model)"),uFe.forEach(t),Cao=i(C),Fp=n(C,"LI",{});var bFe=s(Fp);fY=n(bFe,"STRONG",{});var zSr=s(fY);Mao=r(zSr,"rembert"),zSr.forEach(t),Eao=r(bFe," \u2014 "),uR=n(bFe,"A",{href:!0});var VSr=s(uR);yao=r(VSr,"RemBertModel"),VSr.forEach(t),wao=r(bFe," (RemBERT model)"),bFe.forEach(t),Aao=i(C),Cp=n(C,"LI",{});var vFe=s(Cp);mY=n(vFe,"STRONG",{});var WSr=s(mY);Lao=r(WSr,"retribert"),WSr.forEach(t),Bao=r(vFe," \u2014 "),bR=n(vFe,"A",{href:!0});var QSr=s(bR);xao=r(QSr,"RetriBertModel"),QSr.forEach(t),kao=r(vFe," (RetriBERT model)"),vFe.forEach(t),Rao=i(C),Mp=n(C,"LI",{});var TFe=s(Mp);gY=n(TFe,"STRONG",{});var HSr=s(gY);Sao=r(HSr,"roberta"),HSr.forEach(t),Pao=r(TFe," \u2014 "),vR=n(TFe,"A",{href:!0});var USr=s(vR);$ao=r(USr,"RobertaModel"),USr.forEach(t),Iao=r(TFe," (RoBERTa model)"),TFe.forEach(t),jao=i(C),Ep=n(C,"LI",{});var FFe=s(Ep);hY=n(FFe,"STRONG",{});var JSr=s(hY);Nao=r(JSr,"roformer"),JSr.forEach(t),Dao=r(FFe," \u2014 "),TR=n(FFe,"A",{href:!0});var YSr=s(TR);qao=r(YSr,"RoFormerModel"),YSr.forEach(t),Gao=r(FFe," (RoFormer model)"),FFe.forEach(t),Oao=i(C),yp=n(C,"LI",{});var CFe=s(yp);pY=n(CFe,"STRONG",{});var KSr=s(pY);Xao=r(KSr,"segformer"),KSr.forEach(t),zao=r(CFe," \u2014 "),FR=n(CFe,"A",{href:!0});var ZSr=s(FR);Vao=r(ZSr,"SegformerModel"),ZSr.forEach(t),Wao=r(CFe," (SegFormer model)"),CFe.forEach(t),Qao=i(C),wp=n(C,"LI",{});var MFe=s(wp);_Y=n(MFe,"STRONG",{});var ePr=s(_Y);Hao=r(ePr,"sew"),ePr.forEach(t),Uao=r(MFe," \u2014 "),CR=n(MFe,"A",{href:!0});var oPr=s(CR);Jao=r(oPr,"SEWModel"),oPr.forEach(t),Yao=r(MFe," (SEW model)"),MFe.forEach(t),Kao=i(C),Ap=n(C,"LI",{});var EFe=s(Ap);uY=n(EFe,"STRONG",{});var rPr=s(uY);Zao=r(rPr,"sew-d"),rPr.forEach(t),eno=r(EFe," \u2014 "),MR=n(EFe,"A",{href:!0});var tPr=s(MR);ono=r(tPr,"SEWDModel"),tPr.forEach(t),rno=r(EFe," (SEW-D model)"),EFe.forEach(t),tno=i(C),Lp=n(C,"LI",{});var yFe=s(Lp);bY=n(yFe,"STRONG",{});var aPr=s(bY);ano=r(aPr,"speech_to_text"),aPr.forEach(t),nno=r(yFe," \u2014 "),ER=n(yFe,"A",{href:!0});var nPr=s(ER);sno=r(nPr,"Speech2TextModel"),nPr.forEach(t),lno=r(yFe," (Speech2Text model)"),yFe.forEach(t),ino=i(C),Bp=n(C,"LI",{});var wFe=s(Bp);vY=n(wFe,"STRONG",{});var sPr=s(vY);dno=r(sPr,"splinter"),sPr.forEach(t),cno=r(wFe," \u2014 "),yR=n(wFe,"A",{href:!0});var lPr=s(yR);fno=r(lPr,"SplinterModel"),lPr.forEach(t),mno=r(wFe," (Splinter model)"),wFe.forEach(t),gno=i(C),xp=n(C,"LI",{});var AFe=s(xp);TY=n(AFe,"STRONG",{});var iPr=s(TY);hno=r(iPr,"squeezebert"),iPr.forEach(t),pno=r(AFe," \u2014 "),wR=n(AFe,"A",{href:!0});var dPr=s(wR);_no=r(dPr,"SqueezeBertModel"),dPr.forEach(t),uno=r(AFe," (SqueezeBERT model)"),AFe.forEach(t),bno=i(C),kp=n(C,"LI",{});var LFe=s(kp);FY=n(LFe,"STRONG",{});var cPr=s(FY);vno=r(cPr,"swin"),cPr.forEach(t),Tno=r(LFe," \u2014 "),AR=n(LFe,"A",{href:!0});var fPr=s(AR);Fno=r(fPr,"SwinModel"),fPr.forEach(t),Cno=r(LFe," (Swin model)"),LFe.forEach(t),Mno=i(C),Rp=n(C,"LI",{});var BFe=s(Rp);CY=n(BFe,"STRONG",{});var mPr=s(CY);Eno=r(mPr,"t5"),mPr.forEach(t),yno=r(BFe," \u2014 "),LR=n(BFe,"A",{href:!0});var gPr=s(LR);wno=r(gPr,"T5Model"),gPr.forEach(t),Ano=r(BFe," (T5 model)"),BFe.forEach(t),Lno=i(C),Sp=n(C,"LI",{});var xFe=s(Sp);MY=n(xFe,"STRONG",{});var hPr=s(MY);Bno=r(hPr,"tapas"),hPr.forEach(t),xno=r(xFe," \u2014 "),BR=n(xFe,"A",{href:!0});var pPr=s(BR);kno=r(pPr,"TapasModel"),pPr.forEach(t),Rno=r(xFe," (TAPAS model)"),xFe.forEach(t),Sno=i(C),Pp=n(C,"LI",{});var kFe=s(Pp);EY=n(kFe,"STRONG",{});var _Pr=s(EY);Pno=r(_Pr,"transfo-xl"),_Pr.forEach(t),$no=r(kFe," \u2014 "),xR=n(kFe,"A",{href:!0});var uPr=s(xR);Ino=r(uPr,"TransfoXLModel"),uPr.forEach(t),jno=r(kFe," (Transformer-XL model)"),kFe.forEach(t),Nno=i(C),$p=n(C,"LI",{});var RFe=s($p);yY=n(RFe,"STRONG",{});var bPr=s(yY);Dno=r(bPr,"unispeech"),bPr.forEach(t),qno=r(RFe," \u2014 "),kR=n(RFe,"A",{href:!0});var vPr=s(kR);Gno=r(vPr,"UniSpeechModel"),vPr.forEach(t),Ono=r(RFe," (UniSpeech model)"),RFe.forEach(t),Xno=i(C),Ip=n(C,"LI",{});var SFe=s(Ip);wY=n(SFe,"STRONG",{});var TPr=s(wY);zno=r(TPr,"unispeech-sat"),TPr.forEach(t),Vno=r(SFe," \u2014 "),RR=n(SFe,"A",{href:!0});var FPr=s(RR);Wno=r(FPr,"UniSpeechSatModel"),FPr.forEach(t),Qno=r(SFe," (UniSpeechSat model)"),SFe.forEach(t),Hno=i(C),jp=n(C,"LI",{});var PFe=s(jp);AY=n(PFe,"STRONG",{});var CPr=s(AY);Uno=r(CPr,"vilt"),CPr.forEach(t),Jno=r(PFe," \u2014 "),SR=n(PFe,"A",{href:!0});var MPr=s(SR);Yno=r(MPr,"ViltModel"),MPr.forEach(t),Kno=r(PFe," (ViLT model)"),PFe.forEach(t),Zno=i(C),Np=n(C,"LI",{});var $Fe=s(Np);LY=n($Fe,"STRONG",{});var EPr=s(LY);eso=r(EPr,"vision-text-dual-encoder"),EPr.forEach(t),oso=r($Fe," \u2014 "),PR=n($Fe,"A",{href:!0});var yPr=s(PR);rso=r(yPr,"VisionTextDualEncoderModel"),yPr.forEach(t),tso=r($Fe," (VisionTextDualEncoder model)"),$Fe.forEach(t),aso=i(C),Dp=n(C,"LI",{});var IFe=s(Dp);BY=n(IFe,"STRONG",{});var wPr=s(BY);nso=r(wPr,"visual_bert"),wPr.forEach(t),sso=r(IFe," \u2014 "),$R=n(IFe,"A",{href:!0});var APr=s($R);lso=r(APr,"VisualBertModel"),APr.forEach(t),iso=r(IFe," (VisualBert model)"),IFe.forEach(t),dso=i(C),qp=n(C,"LI",{});var jFe=s(qp);xY=n(jFe,"STRONG",{});var LPr=s(xY);cso=r(LPr,"vit"),LPr.forEach(t),fso=r(jFe," \u2014 "),IR=n(jFe,"A",{href:!0});var BPr=s(IR);mso=r(BPr,"ViTModel"),BPr.forEach(t),gso=r(jFe," (ViT model)"),jFe.forEach(t),hso=i(C),Gp=n(C,"LI",{});var NFe=s(Gp);kY=n(NFe,"STRONG",{});var xPr=s(kY);pso=r(xPr,"vit_mae"),xPr.forEach(t),_so=r(NFe," \u2014 "),jR=n(NFe,"A",{href:!0});var kPr=s(jR);uso=r(kPr,"ViTMAEModel"),kPr.forEach(t),bso=r(NFe," (ViTMAE model)"),NFe.forEach(t),vso=i(C),Op=n(C,"LI",{});var DFe=s(Op);RY=n(DFe,"STRONG",{});var RPr=s(RY);Tso=r(RPr,"wav2vec2"),RPr.forEach(t),Fso=r(DFe," \u2014 "),NR=n(DFe,"A",{href:!0});var SPr=s(NR);Cso=r(SPr,"Wav2Vec2Model"),SPr.forEach(t),Mso=r(DFe," (Wav2Vec2 model)"),DFe.forEach(t),Eso=i(C),Xp=n(C,"LI",{});var qFe=s(Xp);SY=n(qFe,"STRONG",{});var PPr=s(SY);yso=r(PPr,"wavlm"),PPr.forEach(t),wso=r(qFe," \u2014 "),DR=n(qFe,"A",{href:!0});var $Pr=s(DR);Aso=r($Pr,"WavLMModel"),$Pr.forEach(t),Lso=r(qFe," (WavLM model)"),qFe.forEach(t),Bso=i(C),zp=n(C,"LI",{});var GFe=s(zp);PY=n(GFe,"STRONG",{});var IPr=s(PY);xso=r(IPr,"xglm"),IPr.forEach(t),kso=r(GFe," \u2014 "),qR=n(GFe,"A",{href:!0});var jPr=s(qR);Rso=r(jPr,"XGLMModel"),jPr.forEach(t),Sso=r(GFe," (XGLM model)"),GFe.forEach(t),Pso=i(C),Vp=n(C,"LI",{});var OFe=s(Vp);$Y=n(OFe,"STRONG",{});var NPr=s($Y);$so=r(NPr,"xlm"),NPr.forEach(t),Iso=r(OFe," \u2014 "),GR=n(OFe,"A",{href:!0});var DPr=s(GR);jso=r(DPr,"XLMModel"),DPr.forEach(t),Nso=r(OFe," (XLM model)"),OFe.forEach(t),Dso=i(C),Wp=n(C,"LI",{});var XFe=s(Wp);IY=n(XFe,"STRONG",{});var qPr=s(IY);qso=r(qPr,"xlm-prophetnet"),qPr.forEach(t),Gso=r(XFe," \u2014 "),OR=n(XFe,"A",{href:!0});var GPr=s(OR);Oso=r(GPr,"XLMProphetNetModel"),GPr.forEach(t),Xso=r(XFe," (XLMProphetNet model)"),XFe.forEach(t),zso=i(C),Qp=n(C,"LI",{});var zFe=s(Qp);jY=n(zFe,"STRONG",{});var OPr=s(jY);Vso=r(OPr,"xlm-roberta"),OPr.forEach(t),Wso=r(zFe," \u2014 "),XR=n(zFe,"A",{href:!0});var XPr=s(XR);Qso=r(XPr,"XLMRobertaModel"),XPr.forEach(t),Hso=r(zFe," (XLM-RoBERTa model)"),zFe.forEach(t),Uso=i(C),Hp=n(C,"LI",{});var VFe=s(Hp);NY=n(VFe,"STRONG",{});var zPr=s(NY);Jso=r(zPr,"xlm-roberta-xl"),zPr.forEach(t),Yso=r(VFe," \u2014 "),zR=n(VFe,"A",{href:!0});var VPr=s(zR);Kso=r(VPr,"XLMRobertaXLModel"),VPr.forEach(t),Zso=r(VFe," (XLM-RoBERTa-XL model)"),VFe.forEach(t),elo=i(C),Up=n(C,"LI",{});var WFe=s(Up);DY=n(WFe,"STRONG",{});var WPr=s(DY);olo=r(WPr,"xlnet"),WPr.forEach(t),rlo=r(WFe," \u2014 "),VR=n(WFe,"A",{href:!0});var QPr=s(VR);tlo=r(QPr,"XLNetModel"),QPr.forEach(t),alo=r(WFe," (XLNet model)"),WFe.forEach(t),nlo=i(C),Jp=n(C,"LI",{});var QFe=s(Jp);qY=n(QFe,"STRONG",{});var HPr=s(qY);slo=r(HPr,"yoso"),HPr.forEach(t),llo=r(QFe," \u2014 "),WR=n(QFe,"A",{href:!0});var UPr=s(WR);ilo=r(UPr,"YosoModel"),UPr.forEach(t),dlo=r(QFe," (YOSO model)"),QFe.forEach(t),C.forEach(t),clo=i(St),Yp=n(St,"P",{});var HFe=s(Yp);flo=r(HFe,"The model is set in evaluation mode by default using "),GY=n(HFe,"CODE",{});var JPr=s(GY);mlo=r(JPr,"model.eval()"),JPr.forEach(t),glo=r(HFe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OY=n(HFe,"CODE",{});var YPr=s(OY);hlo=r(YPr,"model.train()"),YPr.forEach(t),HFe.forEach(t),plo=i(St),XY=n(St,"P",{});var KPr=s(XY);_lo=r(KPr,"Examples:"),KPr.forEach(t),ulo=i(St),m(XM.$$.fragment,St),St.forEach(t),Ns.forEach(t),wLe=i(d),Xi=n(d,"H2",{class:!0});var SBe=s(Xi);Kp=n(SBe,"A",{id:!0,class:!0,href:!0});var ZPr=s(Kp);zY=n(ZPr,"SPAN",{});var e$r=s(zY);m(zM.$$.fragment,e$r),e$r.forEach(t),ZPr.forEach(t),blo=i(SBe),VY=n(SBe,"SPAN",{});var o$r=s(VY);vlo=r(o$r,"AutoModelForPreTraining"),o$r.forEach(t),SBe.forEach(t),ALe=i(d),Wo=n(d,"DIV",{class:!0});var qs=s(Wo);m(VM.$$.fragment,qs),Tlo=i(qs),zi=n(qs,"P",{});var ZX=s(zi);Flo=r(ZX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WY=n(ZX,"CODE",{});var r$r=s(WY);Clo=r(r$r,"from_pretrained()"),r$r.forEach(t),Mlo=r(ZX,"class method or the "),QY=n(ZX,"CODE",{});var t$r=s(QY);Elo=r(t$r,"from_config()"),t$r.forEach(t),ylo=r(ZX,`class
method.`),ZX.forEach(t),wlo=i(qs),WM=n(qs,"P",{});var PBe=s(WM);Alo=r(PBe,"This class cannot be instantiated directly using "),HY=n(PBe,"CODE",{});var a$r=s(HY);Llo=r(a$r,"__init__()"),a$r.forEach(t),Blo=r(PBe," (throws an error)."),PBe.forEach(t),xlo=i(qs),Dr=n(qs,"DIV",{class:!0});var Gs=s(Dr);m(QM.$$.fragment,Gs),klo=i(Gs),UY=n(Gs,"P",{});var n$r=s(UY);Rlo=r(n$r,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),n$r.forEach(t),Slo=i(Gs),Vi=n(Gs,"P",{});var ez=s(Vi);Plo=r(ez,`Note:
Loading a model from its configuration file does `),JY=n(ez,"STRONG",{});var s$r=s(JY);$lo=r(s$r,"not"),s$r.forEach(t),Ilo=r(ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=n(ez,"CODE",{});var l$r=s(YY);jlo=r(l$r,"from_pretrained()"),l$r.forEach(t),Nlo=r(ez,"to load the model weights."),ez.forEach(t),Dlo=i(Gs),KY=n(Gs,"P",{});var i$r=s(KY);qlo=r(i$r,"Examples:"),i$r.forEach(t),Glo=i(Gs),m(HM.$$.fragment,Gs),Gs.forEach(t),Olo=i(qs),ke=n(qs,"DIV",{class:!0});var Pt=s(ke);m(UM.$$.fragment,Pt),Xlo=i(Pt),ZY=n(Pt,"P",{});var d$r=s(ZY);zlo=r(d$r,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),d$r.forEach(t),Vlo=i(Pt),qa=n(Pt,"P",{});var c4=s(qa);Wlo=r(c4,"The model class to instantiate is selected based on the "),eK=n(c4,"CODE",{});var c$r=s(eK);Qlo=r(c$r,"model_type"),c$r.forEach(t),Hlo=r(c4,` property of the config object (either
passed as an argument or loaded from `),oK=n(c4,"CODE",{});var f$r=s(oK);Ulo=r(f$r,"pretrained_model_name_or_path"),f$r.forEach(t),Jlo=r(c4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rK=n(c4,"CODE",{});var m$r=s(rK);Ylo=r(m$r,"pretrained_model_name_or_path"),m$r.forEach(t),Klo=r(c4,":"),c4.forEach(t),Zlo=i(Pt),k=n(Pt,"UL",{});var S=s(k);Zp=n(S,"LI",{});var UFe=s(Zp);tK=n(UFe,"STRONG",{});var g$r=s(tK);eio=r(g$r,"albert"),g$r.forEach(t),oio=r(UFe," \u2014 "),QR=n(UFe,"A",{href:!0});var h$r=s(QR);rio=r(h$r,"AlbertForPreTraining"),h$r.forEach(t),tio=r(UFe," (ALBERT model)"),UFe.forEach(t),aio=i(S),e_=n(S,"LI",{});var JFe=s(e_);aK=n(JFe,"STRONG",{});var p$r=s(aK);nio=r(p$r,"bart"),p$r.forEach(t),sio=r(JFe," \u2014 "),HR=n(JFe,"A",{href:!0});var _$r=s(HR);lio=r(_$r,"BartForConditionalGeneration"),_$r.forEach(t),iio=r(JFe," (BART model)"),JFe.forEach(t),dio=i(S),o_=n(S,"LI",{});var YFe=s(o_);nK=n(YFe,"STRONG",{});var u$r=s(nK);cio=r(u$r,"bert"),u$r.forEach(t),fio=r(YFe," \u2014 "),UR=n(YFe,"A",{href:!0});var b$r=s(UR);mio=r(b$r,"BertForPreTraining"),b$r.forEach(t),gio=r(YFe," (BERT model)"),YFe.forEach(t),hio=i(S),r_=n(S,"LI",{});var KFe=s(r_);sK=n(KFe,"STRONG",{});var v$r=s(sK);pio=r(v$r,"big_bird"),v$r.forEach(t),_io=r(KFe," \u2014 "),JR=n(KFe,"A",{href:!0});var T$r=s(JR);uio=r(T$r,"BigBirdForPreTraining"),T$r.forEach(t),bio=r(KFe," (BigBird model)"),KFe.forEach(t),vio=i(S),t_=n(S,"LI",{});var ZFe=s(t_);lK=n(ZFe,"STRONG",{});var F$r=s(lK);Tio=r(F$r,"camembert"),F$r.forEach(t),Fio=r(ZFe," \u2014 "),YR=n(ZFe,"A",{href:!0});var C$r=s(YR);Cio=r(C$r,"CamembertForMaskedLM"),C$r.forEach(t),Mio=r(ZFe," (CamemBERT model)"),ZFe.forEach(t),Eio=i(S),a_=n(S,"LI",{});var e9e=s(a_);iK=n(e9e,"STRONG",{});var M$r=s(iK);yio=r(M$r,"ctrl"),M$r.forEach(t),wio=r(e9e," \u2014 "),KR=n(e9e,"A",{href:!0});var E$r=s(KR);Aio=r(E$r,"CTRLLMHeadModel"),E$r.forEach(t),Lio=r(e9e," (CTRL model)"),e9e.forEach(t),Bio=i(S),n_=n(S,"LI",{});var o9e=s(n_);dK=n(o9e,"STRONG",{});var y$r=s(dK);xio=r(y$r,"deberta"),y$r.forEach(t),kio=r(o9e," \u2014 "),ZR=n(o9e,"A",{href:!0});var w$r=s(ZR);Rio=r(w$r,"DebertaForMaskedLM"),w$r.forEach(t),Sio=r(o9e," (DeBERTa model)"),o9e.forEach(t),Pio=i(S),s_=n(S,"LI",{});var r9e=s(s_);cK=n(r9e,"STRONG",{});var A$r=s(cK);$io=r(A$r,"deberta-v2"),A$r.forEach(t),Iio=r(r9e," \u2014 "),eS=n(r9e,"A",{href:!0});var L$r=s(eS);jio=r(L$r,"DebertaV2ForMaskedLM"),L$r.forEach(t),Nio=r(r9e," (DeBERTa-v2 model)"),r9e.forEach(t),Dio=i(S),l_=n(S,"LI",{});var t9e=s(l_);fK=n(t9e,"STRONG",{});var B$r=s(fK);qio=r(B$r,"distilbert"),B$r.forEach(t),Gio=r(t9e," \u2014 "),oS=n(t9e,"A",{href:!0});var x$r=s(oS);Oio=r(x$r,"DistilBertForMaskedLM"),x$r.forEach(t),Xio=r(t9e," (DistilBERT model)"),t9e.forEach(t),zio=i(S),i_=n(S,"LI",{});var a9e=s(i_);mK=n(a9e,"STRONG",{});var k$r=s(mK);Vio=r(k$r,"electra"),k$r.forEach(t),Wio=r(a9e," \u2014 "),rS=n(a9e,"A",{href:!0});var R$r=s(rS);Qio=r(R$r,"ElectraForPreTraining"),R$r.forEach(t),Hio=r(a9e," (ELECTRA model)"),a9e.forEach(t),Uio=i(S),d_=n(S,"LI",{});var n9e=s(d_);gK=n(n9e,"STRONG",{});var S$r=s(gK);Jio=r(S$r,"flaubert"),S$r.forEach(t),Yio=r(n9e," \u2014 "),tS=n(n9e,"A",{href:!0});var P$r=s(tS);Kio=r(P$r,"FlaubertWithLMHeadModel"),P$r.forEach(t),Zio=r(n9e," (FlauBERT model)"),n9e.forEach(t),edo=i(S),c_=n(S,"LI",{});var s9e=s(c_);hK=n(s9e,"STRONG",{});var $$r=s(hK);odo=r($$r,"fnet"),$$r.forEach(t),rdo=r(s9e," \u2014 "),aS=n(s9e,"A",{href:!0});var I$r=s(aS);tdo=r(I$r,"FNetForPreTraining"),I$r.forEach(t),ado=r(s9e," (FNet model)"),s9e.forEach(t),ndo=i(S),f_=n(S,"LI",{});var l9e=s(f_);pK=n(l9e,"STRONG",{});var j$r=s(pK);sdo=r(j$r,"fsmt"),j$r.forEach(t),ldo=r(l9e," \u2014 "),nS=n(l9e,"A",{href:!0});var N$r=s(nS);ido=r(N$r,"FSMTForConditionalGeneration"),N$r.forEach(t),ddo=r(l9e," (FairSeq Machine-Translation model)"),l9e.forEach(t),cdo=i(S),m_=n(S,"LI",{});var i9e=s(m_);_K=n(i9e,"STRONG",{});var D$r=s(_K);fdo=r(D$r,"funnel"),D$r.forEach(t),mdo=r(i9e," \u2014 "),sS=n(i9e,"A",{href:!0});var q$r=s(sS);gdo=r(q$r,"FunnelForPreTraining"),q$r.forEach(t),hdo=r(i9e," (Funnel Transformer model)"),i9e.forEach(t),pdo=i(S),g_=n(S,"LI",{});var d9e=s(g_);uK=n(d9e,"STRONG",{});var G$r=s(uK);_do=r(G$r,"gpt2"),G$r.forEach(t),udo=r(d9e," \u2014 "),lS=n(d9e,"A",{href:!0});var O$r=s(lS);bdo=r(O$r,"GPT2LMHeadModel"),O$r.forEach(t),vdo=r(d9e," (OpenAI GPT-2 model)"),d9e.forEach(t),Tdo=i(S),h_=n(S,"LI",{});var c9e=s(h_);bK=n(c9e,"STRONG",{});var X$r=s(bK);Fdo=r(X$r,"ibert"),X$r.forEach(t),Cdo=r(c9e," \u2014 "),iS=n(c9e,"A",{href:!0});var z$r=s(iS);Mdo=r(z$r,"IBertForMaskedLM"),z$r.forEach(t),Edo=r(c9e," (I-BERT model)"),c9e.forEach(t),ydo=i(S),p_=n(S,"LI",{});var f9e=s(p_);vK=n(f9e,"STRONG",{});var V$r=s(vK);wdo=r(V$r,"layoutlm"),V$r.forEach(t),Ado=r(f9e," \u2014 "),dS=n(f9e,"A",{href:!0});var W$r=s(dS);Ldo=r(W$r,"LayoutLMForMaskedLM"),W$r.forEach(t),Bdo=r(f9e," (LayoutLM model)"),f9e.forEach(t),xdo=i(S),__=n(S,"LI",{});var m9e=s(__);TK=n(m9e,"STRONG",{});var Q$r=s(TK);kdo=r(Q$r,"longformer"),Q$r.forEach(t),Rdo=r(m9e," \u2014 "),cS=n(m9e,"A",{href:!0});var H$r=s(cS);Sdo=r(H$r,"LongformerForMaskedLM"),H$r.forEach(t),Pdo=r(m9e," (Longformer model)"),m9e.forEach(t),$do=i(S),u_=n(S,"LI",{});var g9e=s(u_);FK=n(g9e,"STRONG",{});var U$r=s(FK);Ido=r(U$r,"lxmert"),U$r.forEach(t),jdo=r(g9e," \u2014 "),fS=n(g9e,"A",{href:!0});var J$r=s(fS);Ndo=r(J$r,"LxmertForPreTraining"),J$r.forEach(t),Ddo=r(g9e," (LXMERT model)"),g9e.forEach(t),qdo=i(S),b_=n(S,"LI",{});var h9e=s(b_);CK=n(h9e,"STRONG",{});var Y$r=s(CK);Gdo=r(Y$r,"megatron-bert"),Y$r.forEach(t),Odo=r(h9e," \u2014 "),mS=n(h9e,"A",{href:!0});var K$r=s(mS);Xdo=r(K$r,"MegatronBertForPreTraining"),K$r.forEach(t),zdo=r(h9e," (MegatronBert model)"),h9e.forEach(t),Vdo=i(S),v_=n(S,"LI",{});var p9e=s(v_);MK=n(p9e,"STRONG",{});var Z$r=s(MK);Wdo=r(Z$r,"mobilebert"),Z$r.forEach(t),Qdo=r(p9e," \u2014 "),gS=n(p9e,"A",{href:!0});var eIr=s(gS);Hdo=r(eIr,"MobileBertForPreTraining"),eIr.forEach(t),Udo=r(p9e," (MobileBERT model)"),p9e.forEach(t),Jdo=i(S),T_=n(S,"LI",{});var _9e=s(T_);EK=n(_9e,"STRONG",{});var oIr=s(EK);Ydo=r(oIr,"mpnet"),oIr.forEach(t),Kdo=r(_9e," \u2014 "),hS=n(_9e,"A",{href:!0});var rIr=s(hS);Zdo=r(rIr,"MPNetForMaskedLM"),rIr.forEach(t),eco=r(_9e," (MPNet model)"),_9e.forEach(t),oco=i(S),F_=n(S,"LI",{});var u9e=s(F_);yK=n(u9e,"STRONG",{});var tIr=s(yK);rco=r(tIr,"openai-gpt"),tIr.forEach(t),tco=r(u9e," \u2014 "),pS=n(u9e,"A",{href:!0});var aIr=s(pS);aco=r(aIr,"OpenAIGPTLMHeadModel"),aIr.forEach(t),nco=r(u9e," (OpenAI GPT model)"),u9e.forEach(t),sco=i(S),C_=n(S,"LI",{});var b9e=s(C_);wK=n(b9e,"STRONG",{});var nIr=s(wK);lco=r(nIr,"retribert"),nIr.forEach(t),ico=r(b9e," \u2014 "),_S=n(b9e,"A",{href:!0});var sIr=s(_S);dco=r(sIr,"RetriBertModel"),sIr.forEach(t),cco=r(b9e," (RetriBERT model)"),b9e.forEach(t),fco=i(S),M_=n(S,"LI",{});var v9e=s(M_);AK=n(v9e,"STRONG",{});var lIr=s(AK);mco=r(lIr,"roberta"),lIr.forEach(t),gco=r(v9e," \u2014 "),uS=n(v9e,"A",{href:!0});var iIr=s(uS);hco=r(iIr,"RobertaForMaskedLM"),iIr.forEach(t),pco=r(v9e," (RoBERTa model)"),v9e.forEach(t),_co=i(S),E_=n(S,"LI",{});var T9e=s(E_);LK=n(T9e,"STRONG",{});var dIr=s(LK);uco=r(dIr,"squeezebert"),dIr.forEach(t),bco=r(T9e," \u2014 "),bS=n(T9e,"A",{href:!0});var cIr=s(bS);vco=r(cIr,"SqueezeBertForMaskedLM"),cIr.forEach(t),Tco=r(T9e," (SqueezeBERT model)"),T9e.forEach(t),Fco=i(S),y_=n(S,"LI",{});var F9e=s(y_);BK=n(F9e,"STRONG",{});var fIr=s(BK);Cco=r(fIr,"t5"),fIr.forEach(t),Mco=r(F9e," \u2014 "),vS=n(F9e,"A",{href:!0});var mIr=s(vS);Eco=r(mIr,"T5ForConditionalGeneration"),mIr.forEach(t),yco=r(F9e," (T5 model)"),F9e.forEach(t),wco=i(S),w_=n(S,"LI",{});var C9e=s(w_);xK=n(C9e,"STRONG",{});var gIr=s(xK);Aco=r(gIr,"tapas"),gIr.forEach(t),Lco=r(C9e," \u2014 "),TS=n(C9e,"A",{href:!0});var hIr=s(TS);Bco=r(hIr,"TapasForMaskedLM"),hIr.forEach(t),xco=r(C9e," (TAPAS model)"),C9e.forEach(t),kco=i(S),A_=n(S,"LI",{});var M9e=s(A_);kK=n(M9e,"STRONG",{});var pIr=s(kK);Rco=r(pIr,"transfo-xl"),pIr.forEach(t),Sco=r(M9e," \u2014 "),FS=n(M9e,"A",{href:!0});var _Ir=s(FS);Pco=r(_Ir,"TransfoXLLMHeadModel"),_Ir.forEach(t),$co=r(M9e," (Transformer-XL model)"),M9e.forEach(t),Ico=i(S),L_=n(S,"LI",{});var E9e=s(L_);RK=n(E9e,"STRONG",{});var uIr=s(RK);jco=r(uIr,"unispeech"),uIr.forEach(t),Nco=r(E9e," \u2014 "),CS=n(E9e,"A",{href:!0});var bIr=s(CS);Dco=r(bIr,"UniSpeechForPreTraining"),bIr.forEach(t),qco=r(E9e," (UniSpeech model)"),E9e.forEach(t),Gco=i(S),B_=n(S,"LI",{});var y9e=s(B_);SK=n(y9e,"STRONG",{});var vIr=s(SK);Oco=r(vIr,"unispeech-sat"),vIr.forEach(t),Xco=r(y9e," \u2014 "),MS=n(y9e,"A",{href:!0});var TIr=s(MS);zco=r(TIr,"UniSpeechSatForPreTraining"),TIr.forEach(t),Vco=r(y9e," (UniSpeechSat model)"),y9e.forEach(t),Wco=i(S),x_=n(S,"LI",{});var w9e=s(x_);PK=n(w9e,"STRONG",{});var FIr=s(PK);Qco=r(FIr,"visual_bert"),FIr.forEach(t),Hco=r(w9e," \u2014 "),ES=n(w9e,"A",{href:!0});var CIr=s(ES);Uco=r(CIr,"VisualBertForPreTraining"),CIr.forEach(t),Jco=r(w9e," (VisualBert model)"),w9e.forEach(t),Yco=i(S),k_=n(S,"LI",{});var A9e=s(k_);$K=n(A9e,"STRONG",{});var MIr=s($K);Kco=r(MIr,"vit_mae"),MIr.forEach(t),Zco=r(A9e," \u2014 "),yS=n(A9e,"A",{href:!0});var EIr=s(yS);efo=r(EIr,"ViTMAEForPreTraining"),EIr.forEach(t),ofo=r(A9e," (ViTMAE model)"),A9e.forEach(t),rfo=i(S),R_=n(S,"LI",{});var L9e=s(R_);IK=n(L9e,"STRONG",{});var yIr=s(IK);tfo=r(yIr,"wav2vec2"),yIr.forEach(t),afo=r(L9e," \u2014 "),wS=n(L9e,"A",{href:!0});var wIr=s(wS);nfo=r(wIr,"Wav2Vec2ForPreTraining"),wIr.forEach(t),sfo=r(L9e," (Wav2Vec2 model)"),L9e.forEach(t),lfo=i(S),S_=n(S,"LI",{});var B9e=s(S_);jK=n(B9e,"STRONG",{});var AIr=s(jK);ifo=r(AIr,"xlm"),AIr.forEach(t),dfo=r(B9e," \u2014 "),AS=n(B9e,"A",{href:!0});var LIr=s(AS);cfo=r(LIr,"XLMWithLMHeadModel"),LIr.forEach(t),ffo=r(B9e," (XLM model)"),B9e.forEach(t),mfo=i(S),P_=n(S,"LI",{});var x9e=s(P_);NK=n(x9e,"STRONG",{});var BIr=s(NK);gfo=r(BIr,"xlm-roberta"),BIr.forEach(t),hfo=r(x9e," \u2014 "),LS=n(x9e,"A",{href:!0});var xIr=s(LS);pfo=r(xIr,"XLMRobertaForMaskedLM"),xIr.forEach(t),_fo=r(x9e," (XLM-RoBERTa model)"),x9e.forEach(t),ufo=i(S),$_=n(S,"LI",{});var k9e=s($_);DK=n(k9e,"STRONG",{});var kIr=s(DK);bfo=r(kIr,"xlm-roberta-xl"),kIr.forEach(t),vfo=r(k9e," \u2014 "),BS=n(k9e,"A",{href:!0});var RIr=s(BS);Tfo=r(RIr,"XLMRobertaXLForMaskedLM"),RIr.forEach(t),Ffo=r(k9e," (XLM-RoBERTa-XL model)"),k9e.forEach(t),Cfo=i(S),I_=n(S,"LI",{});var R9e=s(I_);qK=n(R9e,"STRONG",{});var SIr=s(qK);Mfo=r(SIr,"xlnet"),SIr.forEach(t),Efo=r(R9e," \u2014 "),xS=n(R9e,"A",{href:!0});var PIr=s(xS);yfo=r(PIr,"XLNetLMHeadModel"),PIr.forEach(t),wfo=r(R9e," (XLNet model)"),R9e.forEach(t),S.forEach(t),Afo=i(Pt),j_=n(Pt,"P",{});var S9e=s(j_);Lfo=r(S9e,"The model is set in evaluation mode by default using "),GK=n(S9e,"CODE",{});var $Ir=s(GK);Bfo=r($Ir,"model.eval()"),$Ir.forEach(t),xfo=r(S9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OK=n(S9e,"CODE",{});var IIr=s(OK);kfo=r(IIr,"model.train()"),IIr.forEach(t),S9e.forEach(t),Rfo=i(Pt),XK=n(Pt,"P",{});var jIr=s(XK);Sfo=r(jIr,"Examples:"),jIr.forEach(t),Pfo=i(Pt),m(JM.$$.fragment,Pt),Pt.forEach(t),qs.forEach(t),LLe=i(d),Wi=n(d,"H2",{class:!0});var $Be=s(Wi);N_=n($Be,"A",{id:!0,class:!0,href:!0});var NIr=s(N_);zK=n(NIr,"SPAN",{});var DIr=s(zK);m(YM.$$.fragment,DIr),DIr.forEach(t),NIr.forEach(t),$fo=i($Be),VK=n($Be,"SPAN",{});var qIr=s(VK);Ifo=r(qIr,"AutoModelForCausalLM"),qIr.forEach(t),$Be.forEach(t),BLe=i(d),Qo=n(d,"DIV",{class:!0});var Os=s(Qo);m(KM.$$.fragment,Os),jfo=i(Os),Qi=n(Os,"P",{});var oz=s(Qi);Nfo=r(oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WK=n(oz,"CODE",{});var GIr=s(WK);Dfo=r(GIr,"from_pretrained()"),GIr.forEach(t),qfo=r(oz,"class method or the "),QK=n(oz,"CODE",{});var OIr=s(QK);Gfo=r(OIr,"from_config()"),OIr.forEach(t),Ofo=r(oz,`class
method.`),oz.forEach(t),Xfo=i(Os),ZM=n(Os,"P",{});var IBe=s(ZM);zfo=r(IBe,"This class cannot be instantiated directly using "),HK=n(IBe,"CODE",{});var XIr=s(HK);Vfo=r(XIr,"__init__()"),XIr.forEach(t),Wfo=r(IBe," (throws an error)."),IBe.forEach(t),Qfo=i(Os),qr=n(Os,"DIV",{class:!0});var Xs=s(qr);m(eE.$$.fragment,Xs),Hfo=i(Xs),UK=n(Xs,"P",{});var zIr=s(UK);Ufo=r(zIr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zIr.forEach(t),Jfo=i(Xs),Hi=n(Xs,"P",{});var rz=s(Hi);Yfo=r(rz,`Note:
Loading a model from its configuration file does `),JK=n(rz,"STRONG",{});var VIr=s(JK);Kfo=r(VIr,"not"),VIr.forEach(t),Zfo=r(rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=n(rz,"CODE",{});var WIr=s(YK);emo=r(WIr,"from_pretrained()"),WIr.forEach(t),omo=r(rz,"to load the model weights."),rz.forEach(t),rmo=i(Xs),KK=n(Xs,"P",{});var QIr=s(KK);tmo=r(QIr,"Examples:"),QIr.forEach(t),amo=i(Xs),m(oE.$$.fragment,Xs),Xs.forEach(t),nmo=i(Os),Re=n(Os,"DIV",{class:!0});var $t=s(Re);m(rE.$$.fragment,$t),smo=i($t),ZK=n($t,"P",{});var HIr=s(ZK);lmo=r(HIr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),HIr.forEach(t),imo=i($t),Ga=n($t,"P",{});var f4=s(Ga);dmo=r(f4,"The model class to instantiate is selected based on the "),eZ=n(f4,"CODE",{});var UIr=s(eZ);cmo=r(UIr,"model_type"),UIr.forEach(t),fmo=r(f4,` property of the config object (either
passed as an argument or loaded from `),oZ=n(f4,"CODE",{});var JIr=s(oZ);mmo=r(JIr,"pretrained_model_name_or_path"),JIr.forEach(t),gmo=r(f4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rZ=n(f4,"CODE",{});var YIr=s(rZ);hmo=r(YIr,"pretrained_model_name_or_path"),YIr.forEach(t),pmo=r(f4,":"),f4.forEach(t),_mo=i($t),$=n($t,"UL",{});var j=s($);D_=n(j,"LI",{});var P9e=s(D_);tZ=n(P9e,"STRONG",{});var KIr=s(tZ);umo=r(KIr,"bart"),KIr.forEach(t),bmo=r(P9e," \u2014 "),kS=n(P9e,"A",{href:!0});var ZIr=s(kS);vmo=r(ZIr,"BartForCausalLM"),ZIr.forEach(t),Tmo=r(P9e," (BART model)"),P9e.forEach(t),Fmo=i(j),q_=n(j,"LI",{});var $9e=s(q_);aZ=n($9e,"STRONG",{});var ejr=s(aZ);Cmo=r(ejr,"bert"),ejr.forEach(t),Mmo=r($9e," \u2014 "),RS=n($9e,"A",{href:!0});var ojr=s(RS);Emo=r(ojr,"BertLMHeadModel"),ojr.forEach(t),ymo=r($9e," (BERT model)"),$9e.forEach(t),wmo=i(j),G_=n(j,"LI",{});var I9e=s(G_);nZ=n(I9e,"STRONG",{});var rjr=s(nZ);Amo=r(rjr,"bert-generation"),rjr.forEach(t),Lmo=r(I9e," \u2014 "),SS=n(I9e,"A",{href:!0});var tjr=s(SS);Bmo=r(tjr,"BertGenerationDecoder"),tjr.forEach(t),xmo=r(I9e," (Bert Generation model)"),I9e.forEach(t),kmo=i(j),O_=n(j,"LI",{});var j9e=s(O_);sZ=n(j9e,"STRONG",{});var ajr=s(sZ);Rmo=r(ajr,"big_bird"),ajr.forEach(t),Smo=r(j9e," \u2014 "),PS=n(j9e,"A",{href:!0});var njr=s(PS);Pmo=r(njr,"BigBirdForCausalLM"),njr.forEach(t),$mo=r(j9e," (BigBird model)"),j9e.forEach(t),Imo=i(j),X_=n(j,"LI",{});var N9e=s(X_);lZ=n(N9e,"STRONG",{});var sjr=s(lZ);jmo=r(sjr,"bigbird_pegasus"),sjr.forEach(t),Nmo=r(N9e," \u2014 "),$S=n(N9e,"A",{href:!0});var ljr=s($S);Dmo=r(ljr,"BigBirdPegasusForCausalLM"),ljr.forEach(t),qmo=r(N9e," (BigBirdPegasus model)"),N9e.forEach(t),Gmo=i(j),z_=n(j,"LI",{});var D9e=s(z_);iZ=n(D9e,"STRONG",{});var ijr=s(iZ);Omo=r(ijr,"blenderbot"),ijr.forEach(t),Xmo=r(D9e," \u2014 "),IS=n(D9e,"A",{href:!0});var djr=s(IS);zmo=r(djr,"BlenderbotForCausalLM"),djr.forEach(t),Vmo=r(D9e," (Blenderbot model)"),D9e.forEach(t),Wmo=i(j),V_=n(j,"LI",{});var q9e=s(V_);dZ=n(q9e,"STRONG",{});var cjr=s(dZ);Qmo=r(cjr,"blenderbot-small"),cjr.forEach(t),Hmo=r(q9e," \u2014 "),jS=n(q9e,"A",{href:!0});var fjr=s(jS);Umo=r(fjr,"BlenderbotSmallForCausalLM"),fjr.forEach(t),Jmo=r(q9e," (BlenderbotSmall model)"),q9e.forEach(t),Ymo=i(j),W_=n(j,"LI",{});var G9e=s(W_);cZ=n(G9e,"STRONG",{});var mjr=s(cZ);Kmo=r(mjr,"camembert"),mjr.forEach(t),Zmo=r(G9e," \u2014 "),NS=n(G9e,"A",{href:!0});var gjr=s(NS);ego=r(gjr,"CamembertForCausalLM"),gjr.forEach(t),ogo=r(G9e," (CamemBERT model)"),G9e.forEach(t),rgo=i(j),Q_=n(j,"LI",{});var O9e=s(Q_);fZ=n(O9e,"STRONG",{});var hjr=s(fZ);tgo=r(hjr,"ctrl"),hjr.forEach(t),ago=r(O9e," \u2014 "),DS=n(O9e,"A",{href:!0});var pjr=s(DS);ngo=r(pjr,"CTRLLMHeadModel"),pjr.forEach(t),sgo=r(O9e," (CTRL model)"),O9e.forEach(t),lgo=i(j),H_=n(j,"LI",{});var X9e=s(H_);mZ=n(X9e,"STRONG",{});var _jr=s(mZ);igo=r(_jr,"electra"),_jr.forEach(t),dgo=r(X9e," \u2014 "),qS=n(X9e,"A",{href:!0});var ujr=s(qS);cgo=r(ujr,"ElectraForCausalLM"),ujr.forEach(t),fgo=r(X9e," (ELECTRA model)"),X9e.forEach(t),mgo=i(j),U_=n(j,"LI",{});var z9e=s(U_);gZ=n(z9e,"STRONG",{});var bjr=s(gZ);ggo=r(bjr,"gpt2"),bjr.forEach(t),hgo=r(z9e," \u2014 "),GS=n(z9e,"A",{href:!0});var vjr=s(GS);pgo=r(vjr,"GPT2LMHeadModel"),vjr.forEach(t),_go=r(z9e," (OpenAI GPT-2 model)"),z9e.forEach(t),ugo=i(j),J_=n(j,"LI",{});var V9e=s(J_);hZ=n(V9e,"STRONG",{});var Tjr=s(hZ);bgo=r(Tjr,"gpt_neo"),Tjr.forEach(t),vgo=r(V9e," \u2014 "),OS=n(V9e,"A",{href:!0});var Fjr=s(OS);Tgo=r(Fjr,"GPTNeoForCausalLM"),Fjr.forEach(t),Fgo=r(V9e," (GPT Neo model)"),V9e.forEach(t),Cgo=i(j),Y_=n(j,"LI",{});var W9e=s(Y_);pZ=n(W9e,"STRONG",{});var Cjr=s(pZ);Mgo=r(Cjr,"gptj"),Cjr.forEach(t),Ego=r(W9e," \u2014 "),XS=n(W9e,"A",{href:!0});var Mjr=s(XS);ygo=r(Mjr,"GPTJForCausalLM"),Mjr.forEach(t),wgo=r(W9e," (GPT-J model)"),W9e.forEach(t),Ago=i(j),K_=n(j,"LI",{});var Q9e=s(K_);_Z=n(Q9e,"STRONG",{});var Ejr=s(_Z);Lgo=r(Ejr,"marian"),Ejr.forEach(t),Bgo=r(Q9e," \u2014 "),zS=n(Q9e,"A",{href:!0});var yjr=s(zS);xgo=r(yjr,"MarianForCausalLM"),yjr.forEach(t),kgo=r(Q9e," (Marian model)"),Q9e.forEach(t),Rgo=i(j),Z_=n(j,"LI",{});var H9e=s(Z_);uZ=n(H9e,"STRONG",{});var wjr=s(uZ);Sgo=r(wjr,"mbart"),wjr.forEach(t),Pgo=r(H9e," \u2014 "),VS=n(H9e,"A",{href:!0});var Ajr=s(VS);$go=r(Ajr,"MBartForCausalLM"),Ajr.forEach(t),Igo=r(H9e," (mBART model)"),H9e.forEach(t),jgo=i(j),eu=n(j,"LI",{});var U9e=s(eu);bZ=n(U9e,"STRONG",{});var Ljr=s(bZ);Ngo=r(Ljr,"megatron-bert"),Ljr.forEach(t),Dgo=r(U9e," \u2014 "),WS=n(U9e,"A",{href:!0});var Bjr=s(WS);qgo=r(Bjr,"MegatronBertForCausalLM"),Bjr.forEach(t),Ggo=r(U9e," (MegatronBert model)"),U9e.forEach(t),Ogo=i(j),ou=n(j,"LI",{});var J9e=s(ou);vZ=n(J9e,"STRONG",{});var xjr=s(vZ);Xgo=r(xjr,"openai-gpt"),xjr.forEach(t),zgo=r(J9e," \u2014 "),QS=n(J9e,"A",{href:!0});var kjr=s(QS);Vgo=r(kjr,"OpenAIGPTLMHeadModel"),kjr.forEach(t),Wgo=r(J9e," (OpenAI GPT model)"),J9e.forEach(t),Qgo=i(j),ru=n(j,"LI",{});var Y9e=s(ru);TZ=n(Y9e,"STRONG",{});var Rjr=s(TZ);Hgo=r(Rjr,"pegasus"),Rjr.forEach(t),Ugo=r(Y9e," \u2014 "),HS=n(Y9e,"A",{href:!0});var Sjr=s(HS);Jgo=r(Sjr,"PegasusForCausalLM"),Sjr.forEach(t),Ygo=r(Y9e," (Pegasus model)"),Y9e.forEach(t),Kgo=i(j),tu=n(j,"LI",{});var K9e=s(tu);FZ=n(K9e,"STRONG",{});var Pjr=s(FZ);Zgo=r(Pjr,"plbart"),Pjr.forEach(t),eho=r(K9e," \u2014 "),US=n(K9e,"A",{href:!0});var $jr=s(US);oho=r($jr,"PLBartForCausalLM"),$jr.forEach(t),rho=r(K9e," (PLBart model)"),K9e.forEach(t),tho=i(j),au=n(j,"LI",{});var Z9e=s(au);CZ=n(Z9e,"STRONG",{});var Ijr=s(CZ);aho=r(Ijr,"prophetnet"),Ijr.forEach(t),nho=r(Z9e," \u2014 "),JS=n(Z9e,"A",{href:!0});var jjr=s(JS);sho=r(jjr,"ProphetNetForCausalLM"),jjr.forEach(t),lho=r(Z9e," (ProphetNet model)"),Z9e.forEach(t),iho=i(j),nu=n(j,"LI",{});var eCe=s(nu);MZ=n(eCe,"STRONG",{});var Njr=s(MZ);dho=r(Njr,"qdqbert"),Njr.forEach(t),cho=r(eCe," \u2014 "),YS=n(eCe,"A",{href:!0});var Djr=s(YS);fho=r(Djr,"QDQBertLMHeadModel"),Djr.forEach(t),mho=r(eCe," (QDQBert model)"),eCe.forEach(t),gho=i(j),su=n(j,"LI",{});var oCe=s(su);EZ=n(oCe,"STRONG",{});var qjr=s(EZ);hho=r(qjr,"reformer"),qjr.forEach(t),pho=r(oCe," \u2014 "),KS=n(oCe,"A",{href:!0});var Gjr=s(KS);_ho=r(Gjr,"ReformerModelWithLMHead"),Gjr.forEach(t),uho=r(oCe," (Reformer model)"),oCe.forEach(t),bho=i(j),lu=n(j,"LI",{});var rCe=s(lu);yZ=n(rCe,"STRONG",{});var Ojr=s(yZ);vho=r(Ojr,"rembert"),Ojr.forEach(t),Tho=r(rCe," \u2014 "),ZS=n(rCe,"A",{href:!0});var Xjr=s(ZS);Fho=r(Xjr,"RemBertForCausalLM"),Xjr.forEach(t),Cho=r(rCe," (RemBERT model)"),rCe.forEach(t),Mho=i(j),iu=n(j,"LI",{});var tCe=s(iu);wZ=n(tCe,"STRONG",{});var zjr=s(wZ);Eho=r(zjr,"roberta"),zjr.forEach(t),yho=r(tCe," \u2014 "),eP=n(tCe,"A",{href:!0});var Vjr=s(eP);who=r(Vjr,"RobertaForCausalLM"),Vjr.forEach(t),Aho=r(tCe," (RoBERTa model)"),tCe.forEach(t),Lho=i(j),du=n(j,"LI",{});var aCe=s(du);AZ=n(aCe,"STRONG",{});var Wjr=s(AZ);Bho=r(Wjr,"roformer"),Wjr.forEach(t),xho=r(aCe," \u2014 "),oP=n(aCe,"A",{href:!0});var Qjr=s(oP);kho=r(Qjr,"RoFormerForCausalLM"),Qjr.forEach(t),Rho=r(aCe," (RoFormer model)"),aCe.forEach(t),Sho=i(j),cu=n(j,"LI",{});var nCe=s(cu);LZ=n(nCe,"STRONG",{});var Hjr=s(LZ);Pho=r(Hjr,"speech_to_text_2"),Hjr.forEach(t),$ho=r(nCe," \u2014 "),rP=n(nCe,"A",{href:!0});var Ujr=s(rP);Iho=r(Ujr,"Speech2Text2ForCausalLM"),Ujr.forEach(t),jho=r(nCe," (Speech2Text2 model)"),nCe.forEach(t),Nho=i(j),fu=n(j,"LI",{});var sCe=s(fu);BZ=n(sCe,"STRONG",{});var Jjr=s(BZ);Dho=r(Jjr,"transfo-xl"),Jjr.forEach(t),qho=r(sCe," \u2014 "),tP=n(sCe,"A",{href:!0});var Yjr=s(tP);Gho=r(Yjr,"TransfoXLLMHeadModel"),Yjr.forEach(t),Oho=r(sCe," (Transformer-XL model)"),sCe.forEach(t),Xho=i(j),mu=n(j,"LI",{});var lCe=s(mu);xZ=n(lCe,"STRONG",{});var Kjr=s(xZ);zho=r(Kjr,"trocr"),Kjr.forEach(t),Vho=r(lCe," \u2014 "),aP=n(lCe,"A",{href:!0});var Zjr=s(aP);Who=r(Zjr,"TrOCRForCausalLM"),Zjr.forEach(t),Qho=r(lCe," (TrOCR model)"),lCe.forEach(t),Hho=i(j),gu=n(j,"LI",{});var iCe=s(gu);kZ=n(iCe,"STRONG",{});var eNr=s(kZ);Uho=r(eNr,"xglm"),eNr.forEach(t),Jho=r(iCe," \u2014 "),nP=n(iCe,"A",{href:!0});var oNr=s(nP);Yho=r(oNr,"XGLMForCausalLM"),oNr.forEach(t),Kho=r(iCe," (XGLM model)"),iCe.forEach(t),Zho=i(j),hu=n(j,"LI",{});var dCe=s(hu);RZ=n(dCe,"STRONG",{});var rNr=s(RZ);epo=r(rNr,"xlm"),rNr.forEach(t),opo=r(dCe," \u2014 "),sP=n(dCe,"A",{href:!0});var tNr=s(sP);rpo=r(tNr,"XLMWithLMHeadModel"),tNr.forEach(t),tpo=r(dCe," (XLM model)"),dCe.forEach(t),apo=i(j),pu=n(j,"LI",{});var cCe=s(pu);SZ=n(cCe,"STRONG",{});var aNr=s(SZ);npo=r(aNr,"xlm-prophetnet"),aNr.forEach(t),spo=r(cCe," \u2014 "),lP=n(cCe,"A",{href:!0});var nNr=s(lP);lpo=r(nNr,"XLMProphetNetForCausalLM"),nNr.forEach(t),ipo=r(cCe," (XLMProphetNet model)"),cCe.forEach(t),dpo=i(j),_u=n(j,"LI",{});var fCe=s(_u);PZ=n(fCe,"STRONG",{});var sNr=s(PZ);cpo=r(sNr,"xlm-roberta"),sNr.forEach(t),fpo=r(fCe," \u2014 "),iP=n(fCe,"A",{href:!0});var lNr=s(iP);mpo=r(lNr,"XLMRobertaForCausalLM"),lNr.forEach(t),gpo=r(fCe," (XLM-RoBERTa model)"),fCe.forEach(t),hpo=i(j),uu=n(j,"LI",{});var mCe=s(uu);$Z=n(mCe,"STRONG",{});var iNr=s($Z);ppo=r(iNr,"xlm-roberta-xl"),iNr.forEach(t),_po=r(mCe," \u2014 "),dP=n(mCe,"A",{href:!0});var dNr=s(dP);upo=r(dNr,"XLMRobertaXLForCausalLM"),dNr.forEach(t),bpo=r(mCe," (XLM-RoBERTa-XL model)"),mCe.forEach(t),vpo=i(j),bu=n(j,"LI",{});var gCe=s(bu);IZ=n(gCe,"STRONG",{});var cNr=s(IZ);Tpo=r(cNr,"xlnet"),cNr.forEach(t),Fpo=r(gCe," \u2014 "),cP=n(gCe,"A",{href:!0});var fNr=s(cP);Cpo=r(fNr,"XLNetLMHeadModel"),fNr.forEach(t),Mpo=r(gCe," (XLNet model)"),gCe.forEach(t),j.forEach(t),Epo=i($t),vu=n($t,"P",{});var hCe=s(vu);ypo=r(hCe,"The model is set in evaluation mode by default using "),jZ=n(hCe,"CODE",{});var mNr=s(jZ);wpo=r(mNr,"model.eval()"),mNr.forEach(t),Apo=r(hCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),NZ=n(hCe,"CODE",{});var gNr=s(NZ);Lpo=r(gNr,"model.train()"),gNr.forEach(t),hCe.forEach(t),Bpo=i($t),DZ=n($t,"P",{});var hNr=s(DZ);xpo=r(hNr,"Examples:"),hNr.forEach(t),kpo=i($t),m(tE.$$.fragment,$t),$t.forEach(t),Os.forEach(t),xLe=i(d),Ui=n(d,"H2",{class:!0});var jBe=s(Ui);Tu=n(jBe,"A",{id:!0,class:!0,href:!0});var pNr=s(Tu);qZ=n(pNr,"SPAN",{});var _Nr=s(qZ);m(aE.$$.fragment,_Nr),_Nr.forEach(t),pNr.forEach(t),Rpo=i(jBe),GZ=n(jBe,"SPAN",{});var uNr=s(GZ);Spo=r(uNr,"AutoModelForMaskedLM"),uNr.forEach(t),jBe.forEach(t),kLe=i(d),Ho=n(d,"DIV",{class:!0});var zs=s(Ho);m(nE.$$.fragment,zs),Ppo=i(zs),Ji=n(zs,"P",{});var tz=s(Ji);$po=r(tz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OZ=n(tz,"CODE",{});var bNr=s(OZ);Ipo=r(bNr,"from_pretrained()"),bNr.forEach(t),jpo=r(tz,"class method or the "),XZ=n(tz,"CODE",{});var vNr=s(XZ);Npo=r(vNr,"from_config()"),vNr.forEach(t),Dpo=r(tz,`class
method.`),tz.forEach(t),qpo=i(zs),sE=n(zs,"P",{});var NBe=s(sE);Gpo=r(NBe,"This class cannot be instantiated directly using "),zZ=n(NBe,"CODE",{});var TNr=s(zZ);Opo=r(TNr,"__init__()"),TNr.forEach(t),Xpo=r(NBe," (throws an error)."),NBe.forEach(t),zpo=i(zs),Gr=n(zs,"DIV",{class:!0});var Vs=s(Gr);m(lE.$$.fragment,Vs),Vpo=i(Vs),VZ=n(Vs,"P",{});var FNr=s(VZ);Wpo=r(FNr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),FNr.forEach(t),Qpo=i(Vs),Yi=n(Vs,"P",{});var az=s(Yi);Hpo=r(az,`Note:
Loading a model from its configuration file does `),WZ=n(az,"STRONG",{});var CNr=s(WZ);Upo=r(CNr,"not"),CNr.forEach(t),Jpo=r(az,` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=n(az,"CODE",{});var MNr=s(QZ);Ypo=r(MNr,"from_pretrained()"),MNr.forEach(t),Kpo=r(az,"to load the model weights."),az.forEach(t),Zpo=i(Vs),HZ=n(Vs,"P",{});var ENr=s(HZ);e_o=r(ENr,"Examples:"),ENr.forEach(t),o_o=i(Vs),m(iE.$$.fragment,Vs),Vs.forEach(t),r_o=i(zs),Se=n(zs,"DIV",{class:!0});var It=s(Se);m(dE.$$.fragment,It),t_o=i(It),UZ=n(It,"P",{});var yNr=s(UZ);a_o=r(yNr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),yNr.forEach(t),n_o=i(It),Oa=n(It,"P",{});var m4=s(Oa);s_o=r(m4,"The model class to instantiate is selected based on the "),JZ=n(m4,"CODE",{});var wNr=s(JZ);l_o=r(wNr,"model_type"),wNr.forEach(t),i_o=r(m4,` property of the config object (either
passed as an argument or loaded from `),YZ=n(m4,"CODE",{});var ANr=s(YZ);d_o=r(ANr,"pretrained_model_name_or_path"),ANr.forEach(t),c_o=r(m4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KZ=n(m4,"CODE",{});var LNr=s(KZ);f_o=r(LNr,"pretrained_model_name_or_path"),LNr.forEach(t),m_o=r(m4,":"),m4.forEach(t),g_o=i(It),I=n(It,"UL",{});var N=s(I);Fu=n(N,"LI",{});var pCe=s(Fu);ZZ=n(pCe,"STRONG",{});var BNr=s(ZZ);h_o=r(BNr,"albert"),BNr.forEach(t),p_o=r(pCe," \u2014 "),fP=n(pCe,"A",{href:!0});var xNr=s(fP);__o=r(xNr,"AlbertForMaskedLM"),xNr.forEach(t),u_o=r(pCe," (ALBERT model)"),pCe.forEach(t),b_o=i(N),Cu=n(N,"LI",{});var _Ce=s(Cu);eee=n(_Ce,"STRONG",{});var kNr=s(eee);v_o=r(kNr,"bart"),kNr.forEach(t),T_o=r(_Ce," \u2014 "),mP=n(_Ce,"A",{href:!0});var RNr=s(mP);F_o=r(RNr,"BartForConditionalGeneration"),RNr.forEach(t),C_o=r(_Ce," (BART model)"),_Ce.forEach(t),M_o=i(N),Mu=n(N,"LI",{});var uCe=s(Mu);oee=n(uCe,"STRONG",{});var SNr=s(oee);E_o=r(SNr,"bert"),SNr.forEach(t),y_o=r(uCe," \u2014 "),gP=n(uCe,"A",{href:!0});var PNr=s(gP);w_o=r(PNr,"BertForMaskedLM"),PNr.forEach(t),A_o=r(uCe," (BERT model)"),uCe.forEach(t),L_o=i(N),Eu=n(N,"LI",{});var bCe=s(Eu);ree=n(bCe,"STRONG",{});var $Nr=s(ree);B_o=r($Nr,"big_bird"),$Nr.forEach(t),x_o=r(bCe," \u2014 "),hP=n(bCe,"A",{href:!0});var INr=s(hP);k_o=r(INr,"BigBirdForMaskedLM"),INr.forEach(t),R_o=r(bCe," (BigBird model)"),bCe.forEach(t),S_o=i(N),yu=n(N,"LI",{});var vCe=s(yu);tee=n(vCe,"STRONG",{});var jNr=s(tee);P_o=r(jNr,"camembert"),jNr.forEach(t),$_o=r(vCe," \u2014 "),pP=n(vCe,"A",{href:!0});var NNr=s(pP);I_o=r(NNr,"CamembertForMaskedLM"),NNr.forEach(t),j_o=r(vCe," (CamemBERT model)"),vCe.forEach(t),N_o=i(N),wu=n(N,"LI",{});var TCe=s(wu);aee=n(TCe,"STRONG",{});var DNr=s(aee);D_o=r(DNr,"convbert"),DNr.forEach(t),q_o=r(TCe," \u2014 "),_P=n(TCe,"A",{href:!0});var qNr=s(_P);G_o=r(qNr,"ConvBertForMaskedLM"),qNr.forEach(t),O_o=r(TCe," (ConvBERT model)"),TCe.forEach(t),X_o=i(N),Au=n(N,"LI",{});var FCe=s(Au);nee=n(FCe,"STRONG",{});var GNr=s(nee);z_o=r(GNr,"deberta"),GNr.forEach(t),V_o=r(FCe," \u2014 "),uP=n(FCe,"A",{href:!0});var ONr=s(uP);W_o=r(ONr,"DebertaForMaskedLM"),ONr.forEach(t),Q_o=r(FCe," (DeBERTa model)"),FCe.forEach(t),H_o=i(N),Lu=n(N,"LI",{});var CCe=s(Lu);see=n(CCe,"STRONG",{});var XNr=s(see);U_o=r(XNr,"deberta-v2"),XNr.forEach(t),J_o=r(CCe," \u2014 "),bP=n(CCe,"A",{href:!0});var zNr=s(bP);Y_o=r(zNr,"DebertaV2ForMaskedLM"),zNr.forEach(t),K_o=r(CCe," (DeBERTa-v2 model)"),CCe.forEach(t),Z_o=i(N),Bu=n(N,"LI",{});var MCe=s(Bu);lee=n(MCe,"STRONG",{});var VNr=s(lee);euo=r(VNr,"distilbert"),VNr.forEach(t),ouo=r(MCe," \u2014 "),vP=n(MCe,"A",{href:!0});var WNr=s(vP);ruo=r(WNr,"DistilBertForMaskedLM"),WNr.forEach(t),tuo=r(MCe," (DistilBERT model)"),MCe.forEach(t),auo=i(N),xu=n(N,"LI",{});var ECe=s(xu);iee=n(ECe,"STRONG",{});var QNr=s(iee);nuo=r(QNr,"electra"),QNr.forEach(t),suo=r(ECe," \u2014 "),TP=n(ECe,"A",{href:!0});var HNr=s(TP);luo=r(HNr,"ElectraForMaskedLM"),HNr.forEach(t),iuo=r(ECe," (ELECTRA model)"),ECe.forEach(t),duo=i(N),ku=n(N,"LI",{});var yCe=s(ku);dee=n(yCe,"STRONG",{});var UNr=s(dee);cuo=r(UNr,"flaubert"),UNr.forEach(t),fuo=r(yCe," \u2014 "),FP=n(yCe,"A",{href:!0});var JNr=s(FP);muo=r(JNr,"FlaubertWithLMHeadModel"),JNr.forEach(t),guo=r(yCe," (FlauBERT model)"),yCe.forEach(t),huo=i(N),Ru=n(N,"LI",{});var wCe=s(Ru);cee=n(wCe,"STRONG",{});var YNr=s(cee);puo=r(YNr,"fnet"),YNr.forEach(t),_uo=r(wCe," \u2014 "),CP=n(wCe,"A",{href:!0});var KNr=s(CP);uuo=r(KNr,"FNetForMaskedLM"),KNr.forEach(t),buo=r(wCe," (FNet model)"),wCe.forEach(t),vuo=i(N),Su=n(N,"LI",{});var ACe=s(Su);fee=n(ACe,"STRONG",{});var ZNr=s(fee);Tuo=r(ZNr,"funnel"),ZNr.forEach(t),Fuo=r(ACe," \u2014 "),MP=n(ACe,"A",{href:!0});var eDr=s(MP);Cuo=r(eDr,"FunnelForMaskedLM"),eDr.forEach(t),Muo=r(ACe," (Funnel Transformer model)"),ACe.forEach(t),Euo=i(N),Pu=n(N,"LI",{});var LCe=s(Pu);mee=n(LCe,"STRONG",{});var oDr=s(mee);yuo=r(oDr,"ibert"),oDr.forEach(t),wuo=r(LCe," \u2014 "),EP=n(LCe,"A",{href:!0});var rDr=s(EP);Auo=r(rDr,"IBertForMaskedLM"),rDr.forEach(t),Luo=r(LCe," (I-BERT model)"),LCe.forEach(t),Buo=i(N),$u=n(N,"LI",{});var BCe=s($u);gee=n(BCe,"STRONG",{});var tDr=s(gee);xuo=r(tDr,"layoutlm"),tDr.forEach(t),kuo=r(BCe," \u2014 "),yP=n(BCe,"A",{href:!0});var aDr=s(yP);Ruo=r(aDr,"LayoutLMForMaskedLM"),aDr.forEach(t),Suo=r(BCe," (LayoutLM model)"),BCe.forEach(t),Puo=i(N),Iu=n(N,"LI",{});var xCe=s(Iu);hee=n(xCe,"STRONG",{});var nDr=s(hee);$uo=r(nDr,"longformer"),nDr.forEach(t),Iuo=r(xCe," \u2014 "),wP=n(xCe,"A",{href:!0});var sDr=s(wP);juo=r(sDr,"LongformerForMaskedLM"),sDr.forEach(t),Nuo=r(xCe," (Longformer model)"),xCe.forEach(t),Duo=i(N),ju=n(N,"LI",{});var kCe=s(ju);pee=n(kCe,"STRONG",{});var lDr=s(pee);quo=r(lDr,"mbart"),lDr.forEach(t),Guo=r(kCe," \u2014 "),AP=n(kCe,"A",{href:!0});var iDr=s(AP);Ouo=r(iDr,"MBartForConditionalGeneration"),iDr.forEach(t),Xuo=r(kCe," (mBART model)"),kCe.forEach(t),zuo=i(N),Nu=n(N,"LI",{});var RCe=s(Nu);_ee=n(RCe,"STRONG",{});var dDr=s(_ee);Vuo=r(dDr,"megatron-bert"),dDr.forEach(t),Wuo=r(RCe," \u2014 "),LP=n(RCe,"A",{href:!0});var cDr=s(LP);Quo=r(cDr,"MegatronBertForMaskedLM"),cDr.forEach(t),Huo=r(RCe," (MegatronBert model)"),RCe.forEach(t),Uuo=i(N),Du=n(N,"LI",{});var SCe=s(Du);uee=n(SCe,"STRONG",{});var fDr=s(uee);Juo=r(fDr,"mobilebert"),fDr.forEach(t),Yuo=r(SCe," \u2014 "),BP=n(SCe,"A",{href:!0});var mDr=s(BP);Kuo=r(mDr,"MobileBertForMaskedLM"),mDr.forEach(t),Zuo=r(SCe," (MobileBERT model)"),SCe.forEach(t),e5o=i(N),qu=n(N,"LI",{});var PCe=s(qu);bee=n(PCe,"STRONG",{});var gDr=s(bee);o5o=r(gDr,"mpnet"),gDr.forEach(t),r5o=r(PCe," \u2014 "),xP=n(PCe,"A",{href:!0});var hDr=s(xP);t5o=r(hDr,"MPNetForMaskedLM"),hDr.forEach(t),a5o=r(PCe," (MPNet model)"),PCe.forEach(t),n5o=i(N),Gu=n(N,"LI",{});var $Ce=s(Gu);vee=n($Ce,"STRONG",{});var pDr=s(vee);s5o=r(pDr,"nystromformer"),pDr.forEach(t),l5o=r($Ce," \u2014 "),kP=n($Ce,"A",{href:!0});var _Dr=s(kP);i5o=r(_Dr,"NystromformerForMaskedLM"),_Dr.forEach(t),d5o=r($Ce," (Nystromformer model)"),$Ce.forEach(t),c5o=i(N),Ou=n(N,"LI",{});var ICe=s(Ou);Tee=n(ICe,"STRONG",{});var uDr=s(Tee);f5o=r(uDr,"perceiver"),uDr.forEach(t),m5o=r(ICe," \u2014 "),RP=n(ICe,"A",{href:!0});var bDr=s(RP);g5o=r(bDr,"PerceiverForMaskedLM"),bDr.forEach(t),h5o=r(ICe," (Perceiver model)"),ICe.forEach(t),p5o=i(N),Xu=n(N,"LI",{});var jCe=s(Xu);Fee=n(jCe,"STRONG",{});var vDr=s(Fee);_5o=r(vDr,"qdqbert"),vDr.forEach(t),u5o=r(jCe," \u2014 "),SP=n(jCe,"A",{href:!0});var TDr=s(SP);b5o=r(TDr,"QDQBertForMaskedLM"),TDr.forEach(t),v5o=r(jCe," (QDQBert model)"),jCe.forEach(t),T5o=i(N),zu=n(N,"LI",{});var NCe=s(zu);Cee=n(NCe,"STRONG",{});var FDr=s(Cee);F5o=r(FDr,"reformer"),FDr.forEach(t),C5o=r(NCe," \u2014 "),PP=n(NCe,"A",{href:!0});var CDr=s(PP);M5o=r(CDr,"ReformerForMaskedLM"),CDr.forEach(t),E5o=r(NCe," (Reformer model)"),NCe.forEach(t),y5o=i(N),Vu=n(N,"LI",{});var DCe=s(Vu);Mee=n(DCe,"STRONG",{});var MDr=s(Mee);w5o=r(MDr,"rembert"),MDr.forEach(t),A5o=r(DCe," \u2014 "),$P=n(DCe,"A",{href:!0});var EDr=s($P);L5o=r(EDr,"RemBertForMaskedLM"),EDr.forEach(t),B5o=r(DCe," (RemBERT model)"),DCe.forEach(t),x5o=i(N),Wu=n(N,"LI",{});var qCe=s(Wu);Eee=n(qCe,"STRONG",{});var yDr=s(Eee);k5o=r(yDr,"roberta"),yDr.forEach(t),R5o=r(qCe," \u2014 "),IP=n(qCe,"A",{href:!0});var wDr=s(IP);S5o=r(wDr,"RobertaForMaskedLM"),wDr.forEach(t),P5o=r(qCe," (RoBERTa model)"),qCe.forEach(t),$5o=i(N),Qu=n(N,"LI",{});var GCe=s(Qu);yee=n(GCe,"STRONG",{});var ADr=s(yee);I5o=r(ADr,"roformer"),ADr.forEach(t),j5o=r(GCe," \u2014 "),jP=n(GCe,"A",{href:!0});var LDr=s(jP);N5o=r(LDr,"RoFormerForMaskedLM"),LDr.forEach(t),D5o=r(GCe," (RoFormer model)"),GCe.forEach(t),q5o=i(N),Hu=n(N,"LI",{});var OCe=s(Hu);wee=n(OCe,"STRONG",{});var BDr=s(wee);G5o=r(BDr,"squeezebert"),BDr.forEach(t),O5o=r(OCe," \u2014 "),NP=n(OCe,"A",{href:!0});var xDr=s(NP);X5o=r(xDr,"SqueezeBertForMaskedLM"),xDr.forEach(t),z5o=r(OCe," (SqueezeBERT model)"),OCe.forEach(t),V5o=i(N),Uu=n(N,"LI",{});var XCe=s(Uu);Aee=n(XCe,"STRONG",{});var kDr=s(Aee);W5o=r(kDr,"tapas"),kDr.forEach(t),Q5o=r(XCe," \u2014 "),DP=n(XCe,"A",{href:!0});var RDr=s(DP);H5o=r(RDr,"TapasForMaskedLM"),RDr.forEach(t),U5o=r(XCe," (TAPAS model)"),XCe.forEach(t),J5o=i(N),Ju=n(N,"LI",{});var zCe=s(Ju);Lee=n(zCe,"STRONG",{});var SDr=s(Lee);Y5o=r(SDr,"wav2vec2"),SDr.forEach(t),K5o=r(zCe," \u2014 "),Bee=n(zCe,"CODE",{});var PDr=s(Bee);Z5o=r(PDr,"Wav2Vec2ForMaskedLM"),PDr.forEach(t),e1o=r(zCe,"(Wav2Vec2 model)"),zCe.forEach(t),o1o=i(N),Yu=n(N,"LI",{});var VCe=s(Yu);xee=n(VCe,"STRONG",{});var $Dr=s(xee);r1o=r($Dr,"xlm"),$Dr.forEach(t),t1o=r(VCe," \u2014 "),qP=n(VCe,"A",{href:!0});var IDr=s(qP);a1o=r(IDr,"XLMWithLMHeadModel"),IDr.forEach(t),n1o=r(VCe," (XLM model)"),VCe.forEach(t),s1o=i(N),Ku=n(N,"LI",{});var WCe=s(Ku);kee=n(WCe,"STRONG",{});var jDr=s(kee);l1o=r(jDr,"xlm-roberta"),jDr.forEach(t),i1o=r(WCe," \u2014 "),GP=n(WCe,"A",{href:!0});var NDr=s(GP);d1o=r(NDr,"XLMRobertaForMaskedLM"),NDr.forEach(t),c1o=r(WCe," (XLM-RoBERTa model)"),WCe.forEach(t),f1o=i(N),Zu=n(N,"LI",{});var QCe=s(Zu);Ree=n(QCe,"STRONG",{});var DDr=s(Ree);m1o=r(DDr,"xlm-roberta-xl"),DDr.forEach(t),g1o=r(QCe," \u2014 "),OP=n(QCe,"A",{href:!0});var qDr=s(OP);h1o=r(qDr,"XLMRobertaXLForMaskedLM"),qDr.forEach(t),p1o=r(QCe," (XLM-RoBERTa-XL model)"),QCe.forEach(t),_1o=i(N),e5=n(N,"LI",{});var HCe=s(e5);See=n(HCe,"STRONG",{});var GDr=s(See);u1o=r(GDr,"yoso"),GDr.forEach(t),b1o=r(HCe," \u2014 "),XP=n(HCe,"A",{href:!0});var ODr=s(XP);v1o=r(ODr,"YosoForMaskedLM"),ODr.forEach(t),T1o=r(HCe," (YOSO model)"),HCe.forEach(t),N.forEach(t),F1o=i(It),o5=n(It,"P",{});var UCe=s(o5);C1o=r(UCe,"The model is set in evaluation mode by default using "),Pee=n(UCe,"CODE",{});var XDr=s(Pee);M1o=r(XDr,"model.eval()"),XDr.forEach(t),E1o=r(UCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ee=n(UCe,"CODE",{});var zDr=s($ee);y1o=r(zDr,"model.train()"),zDr.forEach(t),UCe.forEach(t),w1o=i(It),Iee=n(It,"P",{});var VDr=s(Iee);A1o=r(VDr,"Examples:"),VDr.forEach(t),L1o=i(It),m(cE.$$.fragment,It),It.forEach(t),zs.forEach(t),RLe=i(d),Ki=n(d,"H2",{class:!0});var DBe=s(Ki);r5=n(DBe,"A",{id:!0,class:!0,href:!0});var WDr=s(r5);jee=n(WDr,"SPAN",{});var QDr=s(jee);m(fE.$$.fragment,QDr),QDr.forEach(t),WDr.forEach(t),B1o=i(DBe),Nee=n(DBe,"SPAN",{});var HDr=s(Nee);x1o=r(HDr,"AutoModelForSeq2SeqLM"),HDr.forEach(t),DBe.forEach(t),SLe=i(d),Uo=n(d,"DIV",{class:!0});var Ws=s(Uo);m(mE.$$.fragment,Ws),k1o=i(Ws),Zi=n(Ws,"P",{});var nz=s(Zi);R1o=r(nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Dee=n(nz,"CODE",{});var UDr=s(Dee);S1o=r(UDr,"from_pretrained()"),UDr.forEach(t),P1o=r(nz,"class method or the "),qee=n(nz,"CODE",{});var JDr=s(qee);$1o=r(JDr,"from_config()"),JDr.forEach(t),I1o=r(nz,`class
method.`),nz.forEach(t),j1o=i(Ws),gE=n(Ws,"P",{});var qBe=s(gE);N1o=r(qBe,"This class cannot be instantiated directly using "),Gee=n(qBe,"CODE",{});var YDr=s(Gee);D1o=r(YDr,"__init__()"),YDr.forEach(t),q1o=r(qBe," (throws an error)."),qBe.forEach(t),G1o=i(Ws),Or=n(Ws,"DIV",{class:!0});var Qs=s(Or);m(hE.$$.fragment,Qs),O1o=i(Qs),Oee=n(Qs,"P",{});var KDr=s(Oee);X1o=r(KDr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),KDr.forEach(t),z1o=i(Qs),ed=n(Qs,"P",{});var sz=s(ed);V1o=r(sz,`Note:
Loading a model from its configuration file does `),Xee=n(sz,"STRONG",{});var ZDr=s(Xee);W1o=r(ZDr,"not"),ZDr.forEach(t),Q1o=r(sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=n(sz,"CODE",{});var eqr=s(zee);H1o=r(eqr,"from_pretrained()"),eqr.forEach(t),U1o=r(sz,"to load the model weights."),sz.forEach(t),J1o=i(Qs),Vee=n(Qs,"P",{});var oqr=s(Vee);Y1o=r(oqr,"Examples:"),oqr.forEach(t),K1o=i(Qs),m(pE.$$.fragment,Qs),Qs.forEach(t),Z1o=i(Ws),Pe=n(Ws,"DIV",{class:!0});var jt=s(Pe);m(_E.$$.fragment,jt),ebo=i(jt),Wee=n(jt,"P",{});var rqr=s(Wee);obo=r(rqr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rqr.forEach(t),rbo=i(jt),Xa=n(jt,"P",{});var g4=s(Xa);tbo=r(g4,"The model class to instantiate is selected based on the "),Qee=n(g4,"CODE",{});var tqr=s(Qee);abo=r(tqr,"model_type"),tqr.forEach(t),nbo=r(g4,` property of the config object (either
passed as an argument or loaded from `),Hee=n(g4,"CODE",{});var aqr=s(Hee);sbo=r(aqr,"pretrained_model_name_or_path"),aqr.forEach(t),lbo=r(g4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uee=n(g4,"CODE",{});var nqr=s(Uee);ibo=r(nqr,"pretrained_model_name_or_path"),nqr.forEach(t),dbo=r(g4,":"),g4.forEach(t),cbo=i(jt),ae=n(jt,"UL",{});var le=s(ae);t5=n(le,"LI",{});var JCe=s(t5);Jee=n(JCe,"STRONG",{});var sqr=s(Jee);fbo=r(sqr,"bart"),sqr.forEach(t),mbo=r(JCe," \u2014 "),zP=n(JCe,"A",{href:!0});var lqr=s(zP);gbo=r(lqr,"BartForConditionalGeneration"),lqr.forEach(t),hbo=r(JCe," (BART model)"),JCe.forEach(t),pbo=i(le),a5=n(le,"LI",{});var YCe=s(a5);Yee=n(YCe,"STRONG",{});var iqr=s(Yee);_bo=r(iqr,"bigbird_pegasus"),iqr.forEach(t),ubo=r(YCe," \u2014 "),VP=n(YCe,"A",{href:!0});var dqr=s(VP);bbo=r(dqr,"BigBirdPegasusForConditionalGeneration"),dqr.forEach(t),vbo=r(YCe," (BigBirdPegasus model)"),YCe.forEach(t),Tbo=i(le),n5=n(le,"LI",{});var KCe=s(n5);Kee=n(KCe,"STRONG",{});var cqr=s(Kee);Fbo=r(cqr,"blenderbot"),cqr.forEach(t),Cbo=r(KCe," \u2014 "),WP=n(KCe,"A",{href:!0});var fqr=s(WP);Mbo=r(fqr,"BlenderbotForConditionalGeneration"),fqr.forEach(t),Ebo=r(KCe," (Blenderbot model)"),KCe.forEach(t),ybo=i(le),s5=n(le,"LI",{});var ZCe=s(s5);Zee=n(ZCe,"STRONG",{});var mqr=s(Zee);wbo=r(mqr,"blenderbot-small"),mqr.forEach(t),Abo=r(ZCe," \u2014 "),QP=n(ZCe,"A",{href:!0});var gqr=s(QP);Lbo=r(gqr,"BlenderbotSmallForConditionalGeneration"),gqr.forEach(t),Bbo=r(ZCe," (BlenderbotSmall model)"),ZCe.forEach(t),xbo=i(le),l5=n(le,"LI",{});var e4e=s(l5);eoe=n(e4e,"STRONG",{});var hqr=s(eoe);kbo=r(hqr,"encoder-decoder"),hqr.forEach(t),Rbo=r(e4e," \u2014 "),HP=n(e4e,"A",{href:!0});var pqr=s(HP);Sbo=r(pqr,"EncoderDecoderModel"),pqr.forEach(t),Pbo=r(e4e," (Encoder decoder model)"),e4e.forEach(t),$bo=i(le),i5=n(le,"LI",{});var o4e=s(i5);ooe=n(o4e,"STRONG",{});var _qr=s(ooe);Ibo=r(_qr,"fsmt"),_qr.forEach(t),jbo=r(o4e," \u2014 "),UP=n(o4e,"A",{href:!0});var uqr=s(UP);Nbo=r(uqr,"FSMTForConditionalGeneration"),uqr.forEach(t),Dbo=r(o4e," (FairSeq Machine-Translation model)"),o4e.forEach(t),qbo=i(le),d5=n(le,"LI",{});var r4e=s(d5);roe=n(r4e,"STRONG",{});var bqr=s(roe);Gbo=r(bqr,"led"),bqr.forEach(t),Obo=r(r4e," \u2014 "),JP=n(r4e,"A",{href:!0});var vqr=s(JP);Xbo=r(vqr,"LEDForConditionalGeneration"),vqr.forEach(t),zbo=r(r4e," (LED model)"),r4e.forEach(t),Vbo=i(le),c5=n(le,"LI",{});var t4e=s(c5);toe=n(t4e,"STRONG",{});var Tqr=s(toe);Wbo=r(Tqr,"m2m_100"),Tqr.forEach(t),Qbo=r(t4e," \u2014 "),YP=n(t4e,"A",{href:!0});var Fqr=s(YP);Hbo=r(Fqr,"M2M100ForConditionalGeneration"),Fqr.forEach(t),Ubo=r(t4e," (M2M100 model)"),t4e.forEach(t),Jbo=i(le),f5=n(le,"LI",{});var a4e=s(f5);aoe=n(a4e,"STRONG",{});var Cqr=s(aoe);Ybo=r(Cqr,"marian"),Cqr.forEach(t),Kbo=r(a4e," \u2014 "),KP=n(a4e,"A",{href:!0});var Mqr=s(KP);Zbo=r(Mqr,"MarianMTModel"),Mqr.forEach(t),e2o=r(a4e," (Marian model)"),a4e.forEach(t),o2o=i(le),m5=n(le,"LI",{});var n4e=s(m5);noe=n(n4e,"STRONG",{});var Eqr=s(noe);r2o=r(Eqr,"mbart"),Eqr.forEach(t),t2o=r(n4e," \u2014 "),ZP=n(n4e,"A",{href:!0});var yqr=s(ZP);a2o=r(yqr,"MBartForConditionalGeneration"),yqr.forEach(t),n2o=r(n4e," (mBART model)"),n4e.forEach(t),s2o=i(le),g5=n(le,"LI",{});var s4e=s(g5);soe=n(s4e,"STRONG",{});var wqr=s(soe);l2o=r(wqr,"mt5"),wqr.forEach(t),i2o=r(s4e," \u2014 "),e$=n(s4e,"A",{href:!0});var Aqr=s(e$);d2o=r(Aqr,"MT5ForConditionalGeneration"),Aqr.forEach(t),c2o=r(s4e," (mT5 model)"),s4e.forEach(t),f2o=i(le),h5=n(le,"LI",{});var l4e=s(h5);loe=n(l4e,"STRONG",{});var Lqr=s(loe);m2o=r(Lqr,"pegasus"),Lqr.forEach(t),g2o=r(l4e," \u2014 "),o$=n(l4e,"A",{href:!0});var Bqr=s(o$);h2o=r(Bqr,"PegasusForConditionalGeneration"),Bqr.forEach(t),p2o=r(l4e," (Pegasus model)"),l4e.forEach(t),_2o=i(le),p5=n(le,"LI",{});var i4e=s(p5);ioe=n(i4e,"STRONG",{});var xqr=s(ioe);u2o=r(xqr,"plbart"),xqr.forEach(t),b2o=r(i4e," \u2014 "),r$=n(i4e,"A",{href:!0});var kqr=s(r$);v2o=r(kqr,"PLBartForConditionalGeneration"),kqr.forEach(t),T2o=r(i4e," (PLBart model)"),i4e.forEach(t),F2o=i(le),_5=n(le,"LI",{});var d4e=s(_5);doe=n(d4e,"STRONG",{});var Rqr=s(doe);C2o=r(Rqr,"prophetnet"),Rqr.forEach(t),M2o=r(d4e," \u2014 "),t$=n(d4e,"A",{href:!0});var Sqr=s(t$);E2o=r(Sqr,"ProphetNetForConditionalGeneration"),Sqr.forEach(t),y2o=r(d4e," (ProphetNet model)"),d4e.forEach(t),w2o=i(le),u5=n(le,"LI",{});var c4e=s(u5);coe=n(c4e,"STRONG",{});var Pqr=s(coe);A2o=r(Pqr,"t5"),Pqr.forEach(t),L2o=r(c4e," \u2014 "),a$=n(c4e,"A",{href:!0});var $qr=s(a$);B2o=r($qr,"T5ForConditionalGeneration"),$qr.forEach(t),x2o=r(c4e," (T5 model)"),c4e.forEach(t),k2o=i(le),b5=n(le,"LI",{});var f4e=s(b5);foe=n(f4e,"STRONG",{});var Iqr=s(foe);R2o=r(Iqr,"xlm-prophetnet"),Iqr.forEach(t),S2o=r(f4e," \u2014 "),n$=n(f4e,"A",{href:!0});var jqr=s(n$);P2o=r(jqr,"XLMProphetNetForConditionalGeneration"),jqr.forEach(t),$2o=r(f4e," (XLMProphetNet model)"),f4e.forEach(t),le.forEach(t),I2o=i(jt),v5=n(jt,"P",{});var m4e=s(v5);j2o=r(m4e,"The model is set in evaluation mode by default using "),moe=n(m4e,"CODE",{});var Nqr=s(moe);N2o=r(Nqr,"model.eval()"),Nqr.forEach(t),D2o=r(m4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),goe=n(m4e,"CODE",{});var Dqr=s(goe);q2o=r(Dqr,"model.train()"),Dqr.forEach(t),m4e.forEach(t),G2o=i(jt),hoe=n(jt,"P",{});var qqr=s(hoe);O2o=r(qqr,"Examples:"),qqr.forEach(t),X2o=i(jt),m(uE.$$.fragment,jt),jt.forEach(t),Ws.forEach(t),PLe=i(d),od=n(d,"H2",{class:!0});var GBe=s(od);T5=n(GBe,"A",{id:!0,class:!0,href:!0});var Gqr=s(T5);poe=n(Gqr,"SPAN",{});var Oqr=s(poe);m(bE.$$.fragment,Oqr),Oqr.forEach(t),Gqr.forEach(t),z2o=i(GBe),_oe=n(GBe,"SPAN",{});var Xqr=s(_oe);V2o=r(Xqr,"AutoModelForSequenceClassification"),Xqr.forEach(t),GBe.forEach(t),$Le=i(d),Jo=n(d,"DIV",{class:!0});var Hs=s(Jo);m(vE.$$.fragment,Hs),W2o=i(Hs),rd=n(Hs,"P",{});var lz=s(rd);Q2o=r(lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uoe=n(lz,"CODE",{});var zqr=s(uoe);H2o=r(zqr,"from_pretrained()"),zqr.forEach(t),U2o=r(lz,"class method or the "),boe=n(lz,"CODE",{});var Vqr=s(boe);J2o=r(Vqr,"from_config()"),Vqr.forEach(t),Y2o=r(lz,`class
method.`),lz.forEach(t),K2o=i(Hs),TE=n(Hs,"P",{});var OBe=s(TE);Z2o=r(OBe,"This class cannot be instantiated directly using "),voe=n(OBe,"CODE",{});var Wqr=s(voe);evo=r(Wqr,"__init__()"),Wqr.forEach(t),ovo=r(OBe," (throws an error)."),OBe.forEach(t),rvo=i(Hs),Xr=n(Hs,"DIV",{class:!0});var Us=s(Xr);m(FE.$$.fragment,Us),tvo=i(Us),Toe=n(Us,"P",{});var Qqr=s(Toe);avo=r(Qqr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Qqr.forEach(t),nvo=i(Us),td=n(Us,"P",{});var iz=s(td);svo=r(iz,`Note:
Loading a model from its configuration file does `),Foe=n(iz,"STRONG",{});var Hqr=s(Foe);lvo=r(Hqr,"not"),Hqr.forEach(t),ivo=r(iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Coe=n(iz,"CODE",{});var Uqr=s(Coe);dvo=r(Uqr,"from_pretrained()"),Uqr.forEach(t),cvo=r(iz,"to load the model weights."),iz.forEach(t),fvo=i(Us),Moe=n(Us,"P",{});var Jqr=s(Moe);mvo=r(Jqr,"Examples:"),Jqr.forEach(t),gvo=i(Us),m(CE.$$.fragment,Us),Us.forEach(t),hvo=i(Hs),$e=n(Hs,"DIV",{class:!0});var Nt=s($e);m(ME.$$.fragment,Nt),pvo=i(Nt),Eoe=n(Nt,"P",{});var Yqr=s(Eoe);_vo=r(Yqr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Yqr.forEach(t),uvo=i(Nt),za=n(Nt,"P",{});var h4=s(za);bvo=r(h4,"The model class to instantiate is selected based on the "),yoe=n(h4,"CODE",{});var Kqr=s(yoe);vvo=r(Kqr,"model_type"),Kqr.forEach(t),Tvo=r(h4,` property of the config object (either
passed as an argument or loaded from `),woe=n(h4,"CODE",{});var Zqr=s(woe);Fvo=r(Zqr,"pretrained_model_name_or_path"),Zqr.forEach(t),Cvo=r(h4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aoe=n(h4,"CODE",{});var eGr=s(Aoe);Mvo=r(eGr,"pretrained_model_name_or_path"),eGr.forEach(t),Evo=r(h4,":"),h4.forEach(t),yvo=i(Nt),A=n(Nt,"UL",{});var L=s(A);F5=n(L,"LI",{});var g4e=s(F5);Loe=n(g4e,"STRONG",{});var oGr=s(Loe);wvo=r(oGr,"albert"),oGr.forEach(t),Avo=r(g4e," \u2014 "),s$=n(g4e,"A",{href:!0});var rGr=s(s$);Lvo=r(rGr,"AlbertForSequenceClassification"),rGr.forEach(t),Bvo=r(g4e," (ALBERT model)"),g4e.forEach(t),xvo=i(L),C5=n(L,"LI",{});var h4e=s(C5);Boe=n(h4e,"STRONG",{});var tGr=s(Boe);kvo=r(tGr,"bart"),tGr.forEach(t),Rvo=r(h4e," \u2014 "),l$=n(h4e,"A",{href:!0});var aGr=s(l$);Svo=r(aGr,"BartForSequenceClassification"),aGr.forEach(t),Pvo=r(h4e," (BART model)"),h4e.forEach(t),$vo=i(L),M5=n(L,"LI",{});var p4e=s(M5);xoe=n(p4e,"STRONG",{});var nGr=s(xoe);Ivo=r(nGr,"bert"),nGr.forEach(t),jvo=r(p4e," \u2014 "),i$=n(p4e,"A",{href:!0});var sGr=s(i$);Nvo=r(sGr,"BertForSequenceClassification"),sGr.forEach(t),Dvo=r(p4e," (BERT model)"),p4e.forEach(t),qvo=i(L),E5=n(L,"LI",{});var _4e=s(E5);koe=n(_4e,"STRONG",{});var lGr=s(koe);Gvo=r(lGr,"big_bird"),lGr.forEach(t),Ovo=r(_4e," \u2014 "),d$=n(_4e,"A",{href:!0});var iGr=s(d$);Xvo=r(iGr,"BigBirdForSequenceClassification"),iGr.forEach(t),zvo=r(_4e," (BigBird model)"),_4e.forEach(t),Vvo=i(L),y5=n(L,"LI",{});var u4e=s(y5);Roe=n(u4e,"STRONG",{});var dGr=s(Roe);Wvo=r(dGr,"bigbird_pegasus"),dGr.forEach(t),Qvo=r(u4e," \u2014 "),c$=n(u4e,"A",{href:!0});var cGr=s(c$);Hvo=r(cGr,"BigBirdPegasusForSequenceClassification"),cGr.forEach(t),Uvo=r(u4e," (BigBirdPegasus model)"),u4e.forEach(t),Jvo=i(L),w5=n(L,"LI",{});var b4e=s(w5);Soe=n(b4e,"STRONG",{});var fGr=s(Soe);Yvo=r(fGr,"camembert"),fGr.forEach(t),Kvo=r(b4e," \u2014 "),f$=n(b4e,"A",{href:!0});var mGr=s(f$);Zvo=r(mGr,"CamembertForSequenceClassification"),mGr.forEach(t),eTo=r(b4e," (CamemBERT model)"),b4e.forEach(t),oTo=i(L),A5=n(L,"LI",{});var v4e=s(A5);Poe=n(v4e,"STRONG",{});var gGr=s(Poe);rTo=r(gGr,"canine"),gGr.forEach(t),tTo=r(v4e," \u2014 "),m$=n(v4e,"A",{href:!0});var hGr=s(m$);aTo=r(hGr,"CanineForSequenceClassification"),hGr.forEach(t),nTo=r(v4e," (Canine model)"),v4e.forEach(t),sTo=i(L),L5=n(L,"LI",{});var T4e=s(L5);$oe=n(T4e,"STRONG",{});var pGr=s($oe);lTo=r(pGr,"convbert"),pGr.forEach(t),iTo=r(T4e," \u2014 "),g$=n(T4e,"A",{href:!0});var _Gr=s(g$);dTo=r(_Gr,"ConvBertForSequenceClassification"),_Gr.forEach(t),cTo=r(T4e," (ConvBERT model)"),T4e.forEach(t),fTo=i(L),B5=n(L,"LI",{});var F4e=s(B5);Ioe=n(F4e,"STRONG",{});var uGr=s(Ioe);mTo=r(uGr,"ctrl"),uGr.forEach(t),gTo=r(F4e," \u2014 "),h$=n(F4e,"A",{href:!0});var bGr=s(h$);hTo=r(bGr,"CTRLForSequenceClassification"),bGr.forEach(t),pTo=r(F4e," (CTRL model)"),F4e.forEach(t),_To=i(L),x5=n(L,"LI",{});var C4e=s(x5);joe=n(C4e,"STRONG",{});var vGr=s(joe);uTo=r(vGr,"deberta"),vGr.forEach(t),bTo=r(C4e," \u2014 "),p$=n(C4e,"A",{href:!0});var TGr=s(p$);vTo=r(TGr,"DebertaForSequenceClassification"),TGr.forEach(t),TTo=r(C4e," (DeBERTa model)"),C4e.forEach(t),FTo=i(L),k5=n(L,"LI",{});var M4e=s(k5);Noe=n(M4e,"STRONG",{});var FGr=s(Noe);CTo=r(FGr,"deberta-v2"),FGr.forEach(t),MTo=r(M4e," \u2014 "),_$=n(M4e,"A",{href:!0});var CGr=s(_$);ETo=r(CGr,"DebertaV2ForSequenceClassification"),CGr.forEach(t),yTo=r(M4e," (DeBERTa-v2 model)"),M4e.forEach(t),wTo=i(L),R5=n(L,"LI",{});var E4e=s(R5);Doe=n(E4e,"STRONG",{});var MGr=s(Doe);ATo=r(MGr,"distilbert"),MGr.forEach(t),LTo=r(E4e," \u2014 "),u$=n(E4e,"A",{href:!0});var EGr=s(u$);BTo=r(EGr,"DistilBertForSequenceClassification"),EGr.forEach(t),xTo=r(E4e," (DistilBERT model)"),E4e.forEach(t),kTo=i(L),S5=n(L,"LI",{});var y4e=s(S5);qoe=n(y4e,"STRONG",{});var yGr=s(qoe);RTo=r(yGr,"electra"),yGr.forEach(t),STo=r(y4e," \u2014 "),b$=n(y4e,"A",{href:!0});var wGr=s(b$);PTo=r(wGr,"ElectraForSequenceClassification"),wGr.forEach(t),$To=r(y4e," (ELECTRA model)"),y4e.forEach(t),ITo=i(L),P5=n(L,"LI",{});var w4e=s(P5);Goe=n(w4e,"STRONG",{});var AGr=s(Goe);jTo=r(AGr,"flaubert"),AGr.forEach(t),NTo=r(w4e," \u2014 "),v$=n(w4e,"A",{href:!0});var LGr=s(v$);DTo=r(LGr,"FlaubertForSequenceClassification"),LGr.forEach(t),qTo=r(w4e," (FlauBERT model)"),w4e.forEach(t),GTo=i(L),$5=n(L,"LI",{});var A4e=s($5);Ooe=n(A4e,"STRONG",{});var BGr=s(Ooe);OTo=r(BGr,"fnet"),BGr.forEach(t),XTo=r(A4e," \u2014 "),T$=n(A4e,"A",{href:!0});var xGr=s(T$);zTo=r(xGr,"FNetForSequenceClassification"),xGr.forEach(t),VTo=r(A4e," (FNet model)"),A4e.forEach(t),WTo=i(L),I5=n(L,"LI",{});var L4e=s(I5);Xoe=n(L4e,"STRONG",{});var kGr=s(Xoe);QTo=r(kGr,"funnel"),kGr.forEach(t),HTo=r(L4e," \u2014 "),F$=n(L4e,"A",{href:!0});var RGr=s(F$);UTo=r(RGr,"FunnelForSequenceClassification"),RGr.forEach(t),JTo=r(L4e," (Funnel Transformer model)"),L4e.forEach(t),YTo=i(L),j5=n(L,"LI",{});var B4e=s(j5);zoe=n(B4e,"STRONG",{});var SGr=s(zoe);KTo=r(SGr,"gpt2"),SGr.forEach(t),ZTo=r(B4e," \u2014 "),C$=n(B4e,"A",{href:!0});var PGr=s(C$);e8o=r(PGr,"GPT2ForSequenceClassification"),PGr.forEach(t),o8o=r(B4e," (OpenAI GPT-2 model)"),B4e.forEach(t),r8o=i(L),N5=n(L,"LI",{});var x4e=s(N5);Voe=n(x4e,"STRONG",{});var $Gr=s(Voe);t8o=r($Gr,"gpt_neo"),$Gr.forEach(t),a8o=r(x4e," \u2014 "),M$=n(x4e,"A",{href:!0});var IGr=s(M$);n8o=r(IGr,"GPTNeoForSequenceClassification"),IGr.forEach(t),s8o=r(x4e," (GPT Neo model)"),x4e.forEach(t),l8o=i(L),D5=n(L,"LI",{});var k4e=s(D5);Woe=n(k4e,"STRONG",{});var jGr=s(Woe);i8o=r(jGr,"gptj"),jGr.forEach(t),d8o=r(k4e," \u2014 "),E$=n(k4e,"A",{href:!0});var NGr=s(E$);c8o=r(NGr,"GPTJForSequenceClassification"),NGr.forEach(t),f8o=r(k4e," (GPT-J model)"),k4e.forEach(t),m8o=i(L),q5=n(L,"LI",{});var R4e=s(q5);Qoe=n(R4e,"STRONG",{});var DGr=s(Qoe);g8o=r(DGr,"ibert"),DGr.forEach(t),h8o=r(R4e," \u2014 "),y$=n(R4e,"A",{href:!0});var qGr=s(y$);p8o=r(qGr,"IBertForSequenceClassification"),qGr.forEach(t),_8o=r(R4e," (I-BERT model)"),R4e.forEach(t),u8o=i(L),G5=n(L,"LI",{});var S4e=s(G5);Hoe=n(S4e,"STRONG",{});var GGr=s(Hoe);b8o=r(GGr,"layoutlm"),GGr.forEach(t),v8o=r(S4e," \u2014 "),w$=n(S4e,"A",{href:!0});var OGr=s(w$);T8o=r(OGr,"LayoutLMForSequenceClassification"),OGr.forEach(t),F8o=r(S4e," (LayoutLM model)"),S4e.forEach(t),C8o=i(L),O5=n(L,"LI",{});var P4e=s(O5);Uoe=n(P4e,"STRONG",{});var XGr=s(Uoe);M8o=r(XGr,"layoutlmv2"),XGr.forEach(t),E8o=r(P4e," \u2014 "),A$=n(P4e,"A",{href:!0});var zGr=s(A$);y8o=r(zGr,"LayoutLMv2ForSequenceClassification"),zGr.forEach(t),w8o=r(P4e," (LayoutLMv2 model)"),P4e.forEach(t),A8o=i(L),X5=n(L,"LI",{});var $4e=s(X5);Joe=n($4e,"STRONG",{});var VGr=s(Joe);L8o=r(VGr,"led"),VGr.forEach(t),B8o=r($4e," \u2014 "),L$=n($4e,"A",{href:!0});var WGr=s(L$);x8o=r(WGr,"LEDForSequenceClassification"),WGr.forEach(t),k8o=r($4e," (LED model)"),$4e.forEach(t),R8o=i(L),z5=n(L,"LI",{});var I4e=s(z5);Yoe=n(I4e,"STRONG",{});var QGr=s(Yoe);S8o=r(QGr,"longformer"),QGr.forEach(t),P8o=r(I4e," \u2014 "),B$=n(I4e,"A",{href:!0});var HGr=s(B$);$8o=r(HGr,"LongformerForSequenceClassification"),HGr.forEach(t),I8o=r(I4e," (Longformer model)"),I4e.forEach(t),j8o=i(L),V5=n(L,"LI",{});var j4e=s(V5);Koe=n(j4e,"STRONG",{});var UGr=s(Koe);N8o=r(UGr,"mbart"),UGr.forEach(t),D8o=r(j4e," \u2014 "),x$=n(j4e,"A",{href:!0});var JGr=s(x$);q8o=r(JGr,"MBartForSequenceClassification"),JGr.forEach(t),G8o=r(j4e," (mBART model)"),j4e.forEach(t),O8o=i(L),W5=n(L,"LI",{});var N4e=s(W5);Zoe=n(N4e,"STRONG",{});var YGr=s(Zoe);X8o=r(YGr,"megatron-bert"),YGr.forEach(t),z8o=r(N4e," \u2014 "),k$=n(N4e,"A",{href:!0});var KGr=s(k$);V8o=r(KGr,"MegatronBertForSequenceClassification"),KGr.forEach(t),W8o=r(N4e," (MegatronBert model)"),N4e.forEach(t),Q8o=i(L),Q5=n(L,"LI",{});var D4e=s(Q5);ere=n(D4e,"STRONG",{});var ZGr=s(ere);H8o=r(ZGr,"mobilebert"),ZGr.forEach(t),U8o=r(D4e," \u2014 "),R$=n(D4e,"A",{href:!0});var eOr=s(R$);J8o=r(eOr,"MobileBertForSequenceClassification"),eOr.forEach(t),Y8o=r(D4e," (MobileBERT model)"),D4e.forEach(t),K8o=i(L),H5=n(L,"LI",{});var q4e=s(H5);ore=n(q4e,"STRONG",{});var oOr=s(ore);Z8o=r(oOr,"mpnet"),oOr.forEach(t),eFo=r(q4e," \u2014 "),S$=n(q4e,"A",{href:!0});var rOr=s(S$);oFo=r(rOr,"MPNetForSequenceClassification"),rOr.forEach(t),rFo=r(q4e," (MPNet model)"),q4e.forEach(t),tFo=i(L),U5=n(L,"LI",{});var G4e=s(U5);rre=n(G4e,"STRONG",{});var tOr=s(rre);aFo=r(tOr,"nystromformer"),tOr.forEach(t),nFo=r(G4e," \u2014 "),P$=n(G4e,"A",{href:!0});var aOr=s(P$);sFo=r(aOr,"NystromformerForSequenceClassification"),aOr.forEach(t),lFo=r(G4e," (Nystromformer model)"),G4e.forEach(t),iFo=i(L),J5=n(L,"LI",{});var O4e=s(J5);tre=n(O4e,"STRONG",{});var nOr=s(tre);dFo=r(nOr,"openai-gpt"),nOr.forEach(t),cFo=r(O4e," \u2014 "),$$=n(O4e,"A",{href:!0});var sOr=s($$);fFo=r(sOr,"OpenAIGPTForSequenceClassification"),sOr.forEach(t),mFo=r(O4e," (OpenAI GPT model)"),O4e.forEach(t),gFo=i(L),Y5=n(L,"LI",{});var X4e=s(Y5);are=n(X4e,"STRONG",{});var lOr=s(are);hFo=r(lOr,"perceiver"),lOr.forEach(t),pFo=r(X4e," \u2014 "),I$=n(X4e,"A",{href:!0});var iOr=s(I$);_Fo=r(iOr,"PerceiverForSequenceClassification"),iOr.forEach(t),uFo=r(X4e," (Perceiver model)"),X4e.forEach(t),bFo=i(L),K5=n(L,"LI",{});var z4e=s(K5);nre=n(z4e,"STRONG",{});var dOr=s(nre);vFo=r(dOr,"plbart"),dOr.forEach(t),TFo=r(z4e," \u2014 "),j$=n(z4e,"A",{href:!0});var cOr=s(j$);FFo=r(cOr,"PLBartForSequenceClassification"),cOr.forEach(t),CFo=r(z4e," (PLBart model)"),z4e.forEach(t),MFo=i(L),Z5=n(L,"LI",{});var V4e=s(Z5);sre=n(V4e,"STRONG",{});var fOr=s(sre);EFo=r(fOr,"qdqbert"),fOr.forEach(t),yFo=r(V4e," \u2014 "),N$=n(V4e,"A",{href:!0});var mOr=s(N$);wFo=r(mOr,"QDQBertForSequenceClassification"),mOr.forEach(t),AFo=r(V4e," (QDQBert model)"),V4e.forEach(t),LFo=i(L),e1=n(L,"LI",{});var W4e=s(e1);lre=n(W4e,"STRONG",{});var gOr=s(lre);BFo=r(gOr,"reformer"),gOr.forEach(t),xFo=r(W4e," \u2014 "),D$=n(W4e,"A",{href:!0});var hOr=s(D$);kFo=r(hOr,"ReformerForSequenceClassification"),hOr.forEach(t),RFo=r(W4e," (Reformer model)"),W4e.forEach(t),SFo=i(L),o1=n(L,"LI",{});var Q4e=s(o1);ire=n(Q4e,"STRONG",{});var pOr=s(ire);PFo=r(pOr,"rembert"),pOr.forEach(t),$Fo=r(Q4e," \u2014 "),q$=n(Q4e,"A",{href:!0});var _Or=s(q$);IFo=r(_Or,"RemBertForSequenceClassification"),_Or.forEach(t),jFo=r(Q4e," (RemBERT model)"),Q4e.forEach(t),NFo=i(L),r1=n(L,"LI",{});var H4e=s(r1);dre=n(H4e,"STRONG",{});var uOr=s(dre);DFo=r(uOr,"roberta"),uOr.forEach(t),qFo=r(H4e," \u2014 "),G$=n(H4e,"A",{href:!0});var bOr=s(G$);GFo=r(bOr,"RobertaForSequenceClassification"),bOr.forEach(t),OFo=r(H4e," (RoBERTa model)"),H4e.forEach(t),XFo=i(L),t1=n(L,"LI",{});var U4e=s(t1);cre=n(U4e,"STRONG",{});var vOr=s(cre);zFo=r(vOr,"roformer"),vOr.forEach(t),VFo=r(U4e," \u2014 "),O$=n(U4e,"A",{href:!0});var TOr=s(O$);WFo=r(TOr,"RoFormerForSequenceClassification"),TOr.forEach(t),QFo=r(U4e," (RoFormer model)"),U4e.forEach(t),HFo=i(L),a1=n(L,"LI",{});var J4e=s(a1);fre=n(J4e,"STRONG",{});var FOr=s(fre);UFo=r(FOr,"squeezebert"),FOr.forEach(t),JFo=r(J4e," \u2014 "),X$=n(J4e,"A",{href:!0});var COr=s(X$);YFo=r(COr,"SqueezeBertForSequenceClassification"),COr.forEach(t),KFo=r(J4e," (SqueezeBERT model)"),J4e.forEach(t),ZFo=i(L),n1=n(L,"LI",{});var Y4e=s(n1);mre=n(Y4e,"STRONG",{});var MOr=s(mre);e9o=r(MOr,"tapas"),MOr.forEach(t),o9o=r(Y4e," \u2014 "),z$=n(Y4e,"A",{href:!0});var EOr=s(z$);r9o=r(EOr,"TapasForSequenceClassification"),EOr.forEach(t),t9o=r(Y4e," (TAPAS model)"),Y4e.forEach(t),a9o=i(L),s1=n(L,"LI",{});var K4e=s(s1);gre=n(K4e,"STRONG",{});var yOr=s(gre);n9o=r(yOr,"transfo-xl"),yOr.forEach(t),s9o=r(K4e," \u2014 "),V$=n(K4e,"A",{href:!0});var wOr=s(V$);l9o=r(wOr,"TransfoXLForSequenceClassification"),wOr.forEach(t),i9o=r(K4e," (Transformer-XL model)"),K4e.forEach(t),d9o=i(L),l1=n(L,"LI",{});var Z4e=s(l1);hre=n(Z4e,"STRONG",{});var AOr=s(hre);c9o=r(AOr,"xlm"),AOr.forEach(t),f9o=r(Z4e," \u2014 "),W$=n(Z4e,"A",{href:!0});var LOr=s(W$);m9o=r(LOr,"XLMForSequenceClassification"),LOr.forEach(t),g9o=r(Z4e," (XLM model)"),Z4e.forEach(t),h9o=i(L),i1=n(L,"LI",{});var eMe=s(i1);pre=n(eMe,"STRONG",{});var BOr=s(pre);p9o=r(BOr,"xlm-roberta"),BOr.forEach(t),_9o=r(eMe," \u2014 "),Q$=n(eMe,"A",{href:!0});var xOr=s(Q$);u9o=r(xOr,"XLMRobertaForSequenceClassification"),xOr.forEach(t),b9o=r(eMe," (XLM-RoBERTa model)"),eMe.forEach(t),v9o=i(L),d1=n(L,"LI",{});var oMe=s(d1);_re=n(oMe,"STRONG",{});var kOr=s(_re);T9o=r(kOr,"xlm-roberta-xl"),kOr.forEach(t),F9o=r(oMe," \u2014 "),H$=n(oMe,"A",{href:!0});var ROr=s(H$);C9o=r(ROr,"XLMRobertaXLForSequenceClassification"),ROr.forEach(t),M9o=r(oMe," (XLM-RoBERTa-XL model)"),oMe.forEach(t),E9o=i(L),c1=n(L,"LI",{});var rMe=s(c1);ure=n(rMe,"STRONG",{});var SOr=s(ure);y9o=r(SOr,"xlnet"),SOr.forEach(t),w9o=r(rMe," \u2014 "),U$=n(rMe,"A",{href:!0});var POr=s(U$);A9o=r(POr,"XLNetForSequenceClassification"),POr.forEach(t),L9o=r(rMe," (XLNet model)"),rMe.forEach(t),B9o=i(L),f1=n(L,"LI",{});var tMe=s(f1);bre=n(tMe,"STRONG",{});var $Or=s(bre);x9o=r($Or,"yoso"),$Or.forEach(t),k9o=r(tMe," \u2014 "),J$=n(tMe,"A",{href:!0});var IOr=s(J$);R9o=r(IOr,"YosoForSequenceClassification"),IOr.forEach(t),S9o=r(tMe," (YOSO model)"),tMe.forEach(t),L.forEach(t),P9o=i(Nt),m1=n(Nt,"P",{});var aMe=s(m1);$9o=r(aMe,"The model is set in evaluation mode by default using "),vre=n(aMe,"CODE",{});var jOr=s(vre);I9o=r(jOr,"model.eval()"),jOr.forEach(t),j9o=r(aMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tre=n(aMe,"CODE",{});var NOr=s(Tre);N9o=r(NOr,"model.train()"),NOr.forEach(t),aMe.forEach(t),D9o=i(Nt),Fre=n(Nt,"P",{});var DOr=s(Fre);q9o=r(DOr,"Examples:"),DOr.forEach(t),G9o=i(Nt),m(EE.$$.fragment,Nt),Nt.forEach(t),Hs.forEach(t),ILe=i(d),ad=n(d,"H2",{class:!0});var XBe=s(ad);g1=n(XBe,"A",{id:!0,class:!0,href:!0});var qOr=s(g1);Cre=n(qOr,"SPAN",{});var GOr=s(Cre);m(yE.$$.fragment,GOr),GOr.forEach(t),qOr.forEach(t),O9o=i(XBe),Mre=n(XBe,"SPAN",{});var OOr=s(Mre);X9o=r(OOr,"AutoModelForMultipleChoice"),OOr.forEach(t),XBe.forEach(t),jLe=i(d),Yo=n(d,"DIV",{class:!0});var Js=s(Yo);m(wE.$$.fragment,Js),z9o=i(Js),nd=n(Js,"P",{});var dz=s(nd);V9o=r(dz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Ere=n(dz,"CODE",{});var XOr=s(Ere);W9o=r(XOr,"from_pretrained()"),XOr.forEach(t),Q9o=r(dz,"class method or the "),yre=n(dz,"CODE",{});var zOr=s(yre);H9o=r(zOr,"from_config()"),zOr.forEach(t),U9o=r(dz,`class
method.`),dz.forEach(t),J9o=i(Js),AE=n(Js,"P",{});var zBe=s(AE);Y9o=r(zBe,"This class cannot be instantiated directly using "),wre=n(zBe,"CODE",{});var VOr=s(wre);K9o=r(VOr,"__init__()"),VOr.forEach(t),Z9o=r(zBe," (throws an error)."),zBe.forEach(t),eCo=i(Js),zr=n(Js,"DIV",{class:!0});var Ys=s(zr);m(LE.$$.fragment,Ys),oCo=i(Ys),Are=n(Ys,"P",{});var WOr=s(Are);rCo=r(WOr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),WOr.forEach(t),tCo=i(Ys),sd=n(Ys,"P",{});var cz=s(sd);aCo=r(cz,`Note:
Loading a model from its configuration file does `),Lre=n(cz,"STRONG",{});var QOr=s(Lre);nCo=r(QOr,"not"),QOr.forEach(t),sCo=r(cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=n(cz,"CODE",{});var HOr=s(Bre);lCo=r(HOr,"from_pretrained()"),HOr.forEach(t),iCo=r(cz,"to load the model weights."),cz.forEach(t),dCo=i(Ys),xre=n(Ys,"P",{});var UOr=s(xre);cCo=r(UOr,"Examples:"),UOr.forEach(t),fCo=i(Ys),m(BE.$$.fragment,Ys),Ys.forEach(t),mCo=i(Js),Ie=n(Js,"DIV",{class:!0});var Dt=s(Ie);m(xE.$$.fragment,Dt),gCo=i(Dt),kre=n(Dt,"P",{});var JOr=s(kre);hCo=r(JOr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),JOr.forEach(t),pCo=i(Dt),Va=n(Dt,"P",{});var p4=s(Va);_Co=r(p4,"The model class to instantiate is selected based on the "),Rre=n(p4,"CODE",{});var YOr=s(Rre);uCo=r(YOr,"model_type"),YOr.forEach(t),bCo=r(p4,` property of the config object (either
passed as an argument or loaded from `),Sre=n(p4,"CODE",{});var KOr=s(Sre);vCo=r(KOr,"pretrained_model_name_or_path"),KOr.forEach(t),TCo=r(p4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pre=n(p4,"CODE",{});var ZOr=s(Pre);FCo=r(ZOr,"pretrained_model_name_or_path"),ZOr.forEach(t),CCo=r(p4,":"),p4.forEach(t),MCo=i(Dt),G=n(Dt,"UL",{});var O=s(G);h1=n(O,"LI",{});var nMe=s(h1);$re=n(nMe,"STRONG",{});var eXr=s($re);ECo=r(eXr,"albert"),eXr.forEach(t),yCo=r(nMe," \u2014 "),Y$=n(nMe,"A",{href:!0});var oXr=s(Y$);wCo=r(oXr,"AlbertForMultipleChoice"),oXr.forEach(t),ACo=r(nMe," (ALBERT model)"),nMe.forEach(t),LCo=i(O),p1=n(O,"LI",{});var sMe=s(p1);Ire=n(sMe,"STRONG",{});var rXr=s(Ire);BCo=r(rXr,"bert"),rXr.forEach(t),xCo=r(sMe," \u2014 "),K$=n(sMe,"A",{href:!0});var tXr=s(K$);kCo=r(tXr,"BertForMultipleChoice"),tXr.forEach(t),RCo=r(sMe," (BERT model)"),sMe.forEach(t),SCo=i(O),_1=n(O,"LI",{});var lMe=s(_1);jre=n(lMe,"STRONG",{});var aXr=s(jre);PCo=r(aXr,"big_bird"),aXr.forEach(t),$Co=r(lMe," \u2014 "),Z$=n(lMe,"A",{href:!0});var nXr=s(Z$);ICo=r(nXr,"BigBirdForMultipleChoice"),nXr.forEach(t),jCo=r(lMe," (BigBird model)"),lMe.forEach(t),NCo=i(O),u1=n(O,"LI",{});var iMe=s(u1);Nre=n(iMe,"STRONG",{});var sXr=s(Nre);DCo=r(sXr,"camembert"),sXr.forEach(t),qCo=r(iMe," \u2014 "),eI=n(iMe,"A",{href:!0});var lXr=s(eI);GCo=r(lXr,"CamembertForMultipleChoice"),lXr.forEach(t),OCo=r(iMe," (CamemBERT model)"),iMe.forEach(t),XCo=i(O),b1=n(O,"LI",{});var dMe=s(b1);Dre=n(dMe,"STRONG",{});var iXr=s(Dre);zCo=r(iXr,"canine"),iXr.forEach(t),VCo=r(dMe," \u2014 "),oI=n(dMe,"A",{href:!0});var dXr=s(oI);WCo=r(dXr,"CanineForMultipleChoice"),dXr.forEach(t),QCo=r(dMe," (Canine model)"),dMe.forEach(t),HCo=i(O),v1=n(O,"LI",{});var cMe=s(v1);qre=n(cMe,"STRONG",{});var cXr=s(qre);UCo=r(cXr,"convbert"),cXr.forEach(t),JCo=r(cMe," \u2014 "),rI=n(cMe,"A",{href:!0});var fXr=s(rI);YCo=r(fXr,"ConvBertForMultipleChoice"),fXr.forEach(t),KCo=r(cMe," (ConvBERT model)"),cMe.forEach(t),ZCo=i(O),T1=n(O,"LI",{});var fMe=s(T1);Gre=n(fMe,"STRONG",{});var mXr=s(Gre);e4o=r(mXr,"distilbert"),mXr.forEach(t),o4o=r(fMe," \u2014 "),tI=n(fMe,"A",{href:!0});var gXr=s(tI);r4o=r(gXr,"DistilBertForMultipleChoice"),gXr.forEach(t),t4o=r(fMe," (DistilBERT model)"),fMe.forEach(t),a4o=i(O),F1=n(O,"LI",{});var mMe=s(F1);Ore=n(mMe,"STRONG",{});var hXr=s(Ore);n4o=r(hXr,"electra"),hXr.forEach(t),s4o=r(mMe," \u2014 "),aI=n(mMe,"A",{href:!0});var pXr=s(aI);l4o=r(pXr,"ElectraForMultipleChoice"),pXr.forEach(t),i4o=r(mMe," (ELECTRA model)"),mMe.forEach(t),d4o=i(O),C1=n(O,"LI",{});var gMe=s(C1);Xre=n(gMe,"STRONG",{});var _Xr=s(Xre);c4o=r(_Xr,"flaubert"),_Xr.forEach(t),f4o=r(gMe," \u2014 "),nI=n(gMe,"A",{href:!0});var uXr=s(nI);m4o=r(uXr,"FlaubertForMultipleChoice"),uXr.forEach(t),g4o=r(gMe," (FlauBERT model)"),gMe.forEach(t),h4o=i(O),M1=n(O,"LI",{});var hMe=s(M1);zre=n(hMe,"STRONG",{});var bXr=s(zre);p4o=r(bXr,"fnet"),bXr.forEach(t),_4o=r(hMe," \u2014 "),sI=n(hMe,"A",{href:!0});var vXr=s(sI);u4o=r(vXr,"FNetForMultipleChoice"),vXr.forEach(t),b4o=r(hMe," (FNet model)"),hMe.forEach(t),v4o=i(O),E1=n(O,"LI",{});var pMe=s(E1);Vre=n(pMe,"STRONG",{});var TXr=s(Vre);T4o=r(TXr,"funnel"),TXr.forEach(t),F4o=r(pMe," \u2014 "),lI=n(pMe,"A",{href:!0});var FXr=s(lI);C4o=r(FXr,"FunnelForMultipleChoice"),FXr.forEach(t),M4o=r(pMe," (Funnel Transformer model)"),pMe.forEach(t),E4o=i(O),y1=n(O,"LI",{});var _Me=s(y1);Wre=n(_Me,"STRONG",{});var CXr=s(Wre);y4o=r(CXr,"ibert"),CXr.forEach(t),w4o=r(_Me," \u2014 "),iI=n(_Me,"A",{href:!0});var MXr=s(iI);A4o=r(MXr,"IBertForMultipleChoice"),MXr.forEach(t),L4o=r(_Me," (I-BERT model)"),_Me.forEach(t),B4o=i(O),w1=n(O,"LI",{});var uMe=s(w1);Qre=n(uMe,"STRONG",{});var EXr=s(Qre);x4o=r(EXr,"longformer"),EXr.forEach(t),k4o=r(uMe," \u2014 "),dI=n(uMe,"A",{href:!0});var yXr=s(dI);R4o=r(yXr,"LongformerForMultipleChoice"),yXr.forEach(t),S4o=r(uMe," (Longformer model)"),uMe.forEach(t),P4o=i(O),A1=n(O,"LI",{});var bMe=s(A1);Hre=n(bMe,"STRONG",{});var wXr=s(Hre);$4o=r(wXr,"megatron-bert"),wXr.forEach(t),I4o=r(bMe," \u2014 "),cI=n(bMe,"A",{href:!0});var AXr=s(cI);j4o=r(AXr,"MegatronBertForMultipleChoice"),AXr.forEach(t),N4o=r(bMe," (MegatronBert model)"),bMe.forEach(t),D4o=i(O),L1=n(O,"LI",{});var vMe=s(L1);Ure=n(vMe,"STRONG",{});var LXr=s(Ure);q4o=r(LXr,"mobilebert"),LXr.forEach(t),G4o=r(vMe," \u2014 "),fI=n(vMe,"A",{href:!0});var BXr=s(fI);O4o=r(BXr,"MobileBertForMultipleChoice"),BXr.forEach(t),X4o=r(vMe," (MobileBERT model)"),vMe.forEach(t),z4o=i(O),B1=n(O,"LI",{});var TMe=s(B1);Jre=n(TMe,"STRONG",{});var xXr=s(Jre);V4o=r(xXr,"mpnet"),xXr.forEach(t),W4o=r(TMe," \u2014 "),mI=n(TMe,"A",{href:!0});var kXr=s(mI);Q4o=r(kXr,"MPNetForMultipleChoice"),kXr.forEach(t),H4o=r(TMe," (MPNet model)"),TMe.forEach(t),U4o=i(O),x1=n(O,"LI",{});var FMe=s(x1);Yre=n(FMe,"STRONG",{});var RXr=s(Yre);J4o=r(RXr,"nystromformer"),RXr.forEach(t),Y4o=r(FMe," \u2014 "),gI=n(FMe,"A",{href:!0});var SXr=s(gI);K4o=r(SXr,"NystromformerForMultipleChoice"),SXr.forEach(t),Z4o=r(FMe," (Nystromformer model)"),FMe.forEach(t),eMo=i(O),k1=n(O,"LI",{});var CMe=s(k1);Kre=n(CMe,"STRONG",{});var PXr=s(Kre);oMo=r(PXr,"qdqbert"),PXr.forEach(t),rMo=r(CMe," \u2014 "),hI=n(CMe,"A",{href:!0});var $Xr=s(hI);tMo=r($Xr,"QDQBertForMultipleChoice"),$Xr.forEach(t),aMo=r(CMe," (QDQBert model)"),CMe.forEach(t),nMo=i(O),R1=n(O,"LI",{});var MMe=s(R1);Zre=n(MMe,"STRONG",{});var IXr=s(Zre);sMo=r(IXr,"rembert"),IXr.forEach(t),lMo=r(MMe," \u2014 "),pI=n(MMe,"A",{href:!0});var jXr=s(pI);iMo=r(jXr,"RemBertForMultipleChoice"),jXr.forEach(t),dMo=r(MMe," (RemBERT model)"),MMe.forEach(t),cMo=i(O),S1=n(O,"LI",{});var EMe=s(S1);ete=n(EMe,"STRONG",{});var NXr=s(ete);fMo=r(NXr,"roberta"),NXr.forEach(t),mMo=r(EMe," \u2014 "),_I=n(EMe,"A",{href:!0});var DXr=s(_I);gMo=r(DXr,"RobertaForMultipleChoice"),DXr.forEach(t),hMo=r(EMe," (RoBERTa model)"),EMe.forEach(t),pMo=i(O),P1=n(O,"LI",{});var yMe=s(P1);ote=n(yMe,"STRONG",{});var qXr=s(ote);_Mo=r(qXr,"roformer"),qXr.forEach(t),uMo=r(yMe," \u2014 "),uI=n(yMe,"A",{href:!0});var GXr=s(uI);bMo=r(GXr,"RoFormerForMultipleChoice"),GXr.forEach(t),vMo=r(yMe," (RoFormer model)"),yMe.forEach(t),TMo=i(O),$1=n(O,"LI",{});var wMe=s($1);rte=n(wMe,"STRONG",{});var OXr=s(rte);FMo=r(OXr,"squeezebert"),OXr.forEach(t),CMo=r(wMe," \u2014 "),bI=n(wMe,"A",{href:!0});var XXr=s(bI);MMo=r(XXr,"SqueezeBertForMultipleChoice"),XXr.forEach(t),EMo=r(wMe," (SqueezeBERT model)"),wMe.forEach(t),yMo=i(O),I1=n(O,"LI",{});var AMe=s(I1);tte=n(AMe,"STRONG",{});var zXr=s(tte);wMo=r(zXr,"xlm"),zXr.forEach(t),AMo=r(AMe," \u2014 "),vI=n(AMe,"A",{href:!0});var VXr=s(vI);LMo=r(VXr,"XLMForMultipleChoice"),VXr.forEach(t),BMo=r(AMe," (XLM model)"),AMe.forEach(t),xMo=i(O),j1=n(O,"LI",{});var LMe=s(j1);ate=n(LMe,"STRONG",{});var WXr=s(ate);kMo=r(WXr,"xlm-roberta"),WXr.forEach(t),RMo=r(LMe," \u2014 "),TI=n(LMe,"A",{href:!0});var QXr=s(TI);SMo=r(QXr,"XLMRobertaForMultipleChoice"),QXr.forEach(t),PMo=r(LMe," (XLM-RoBERTa model)"),LMe.forEach(t),$Mo=i(O),N1=n(O,"LI",{});var BMe=s(N1);nte=n(BMe,"STRONG",{});var HXr=s(nte);IMo=r(HXr,"xlm-roberta-xl"),HXr.forEach(t),jMo=r(BMe," \u2014 "),FI=n(BMe,"A",{href:!0});var UXr=s(FI);NMo=r(UXr,"XLMRobertaXLForMultipleChoice"),UXr.forEach(t),DMo=r(BMe," (XLM-RoBERTa-XL model)"),BMe.forEach(t),qMo=i(O),D1=n(O,"LI",{});var xMe=s(D1);ste=n(xMe,"STRONG",{});var JXr=s(ste);GMo=r(JXr,"xlnet"),JXr.forEach(t),OMo=r(xMe," \u2014 "),CI=n(xMe,"A",{href:!0});var YXr=s(CI);XMo=r(YXr,"XLNetForMultipleChoice"),YXr.forEach(t),zMo=r(xMe," (XLNet model)"),xMe.forEach(t),VMo=i(O),q1=n(O,"LI",{});var kMe=s(q1);lte=n(kMe,"STRONG",{});var KXr=s(lte);WMo=r(KXr,"yoso"),KXr.forEach(t),QMo=r(kMe," \u2014 "),MI=n(kMe,"A",{href:!0});var ZXr=s(MI);HMo=r(ZXr,"YosoForMultipleChoice"),ZXr.forEach(t),UMo=r(kMe," (YOSO model)"),kMe.forEach(t),O.forEach(t),JMo=i(Dt),G1=n(Dt,"P",{});var RMe=s(G1);YMo=r(RMe,"The model is set in evaluation mode by default using "),ite=n(RMe,"CODE",{});var ezr=s(ite);KMo=r(ezr,"model.eval()"),ezr.forEach(t),ZMo=r(RMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dte=n(RMe,"CODE",{});var ozr=s(dte);eEo=r(ozr,"model.train()"),ozr.forEach(t),RMe.forEach(t),oEo=i(Dt),cte=n(Dt,"P",{});var rzr=s(cte);rEo=r(rzr,"Examples:"),rzr.forEach(t),tEo=i(Dt),m(kE.$$.fragment,Dt),Dt.forEach(t),Js.forEach(t),NLe=i(d),ld=n(d,"H2",{class:!0});var VBe=s(ld);O1=n(VBe,"A",{id:!0,class:!0,href:!0});var tzr=s(O1);fte=n(tzr,"SPAN",{});var azr=s(fte);m(RE.$$.fragment,azr),azr.forEach(t),tzr.forEach(t),aEo=i(VBe),mte=n(VBe,"SPAN",{});var nzr=s(mte);nEo=r(nzr,"AutoModelForNextSentencePrediction"),nzr.forEach(t),VBe.forEach(t),DLe=i(d),Ko=n(d,"DIV",{class:!0});var Ks=s(Ko);m(SE.$$.fragment,Ks),sEo=i(Ks),id=n(Ks,"P",{});var fz=s(id);lEo=r(fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gte=n(fz,"CODE",{});var szr=s(gte);iEo=r(szr,"from_pretrained()"),szr.forEach(t),dEo=r(fz,"class method or the "),hte=n(fz,"CODE",{});var lzr=s(hte);cEo=r(lzr,"from_config()"),lzr.forEach(t),fEo=r(fz,`class
method.`),fz.forEach(t),mEo=i(Ks),PE=n(Ks,"P",{});var WBe=s(PE);gEo=r(WBe,"This class cannot be instantiated directly using "),pte=n(WBe,"CODE",{});var izr=s(pte);hEo=r(izr,"__init__()"),izr.forEach(t),pEo=r(WBe," (throws an error)."),WBe.forEach(t),_Eo=i(Ks),Vr=n(Ks,"DIV",{class:!0});var Zs=s(Vr);m($E.$$.fragment,Zs),uEo=i(Zs),_te=n(Zs,"P",{});var dzr=s(_te);bEo=r(dzr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dzr.forEach(t),vEo=i(Zs),dd=n(Zs,"P",{});var mz=s(dd);TEo=r(mz,`Note:
Loading a model from its configuration file does `),ute=n(mz,"STRONG",{});var czr=s(ute);FEo=r(czr,"not"),czr.forEach(t),CEo=r(mz,` load the model weights. It only affects the
model\u2019s configuration. Use `),bte=n(mz,"CODE",{});var fzr=s(bte);MEo=r(fzr,"from_pretrained()"),fzr.forEach(t),EEo=r(mz,"to load the model weights."),mz.forEach(t),yEo=i(Zs),vte=n(Zs,"P",{});var mzr=s(vte);wEo=r(mzr,"Examples:"),mzr.forEach(t),AEo=i(Zs),m(IE.$$.fragment,Zs),Zs.forEach(t),LEo=i(Ks),je=n(Ks,"DIV",{class:!0});var qt=s(je);m(jE.$$.fragment,qt),BEo=i(qt),Tte=n(qt,"P",{});var gzr=s(Tte);xEo=r(gzr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gzr.forEach(t),kEo=i(qt),Wa=n(qt,"P",{});var _4=s(Wa);REo=r(_4,"The model class to instantiate is selected based on the "),Fte=n(_4,"CODE",{});var hzr=s(Fte);SEo=r(hzr,"model_type"),hzr.forEach(t),PEo=r(_4,` property of the config object (either
passed as an argument or loaded from `),Cte=n(_4,"CODE",{});var pzr=s(Cte);$Eo=r(pzr,"pretrained_model_name_or_path"),pzr.forEach(t),IEo=r(_4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mte=n(_4,"CODE",{});var _zr=s(Mte);jEo=r(_zr,"pretrained_model_name_or_path"),_zr.forEach(t),NEo=r(_4,":"),_4.forEach(t),DEo=i(qt),na=n(qt,"UL",{});var el=s(na);X1=n(el,"LI",{});var SMe=s(X1);Ete=n(SMe,"STRONG",{});var uzr=s(Ete);qEo=r(uzr,"bert"),uzr.forEach(t),GEo=r(SMe," \u2014 "),EI=n(SMe,"A",{href:!0});var bzr=s(EI);OEo=r(bzr,"BertForNextSentencePrediction"),bzr.forEach(t),XEo=r(SMe," (BERT model)"),SMe.forEach(t),zEo=i(el),z1=n(el,"LI",{});var PMe=s(z1);yte=n(PMe,"STRONG",{});var vzr=s(yte);VEo=r(vzr,"fnet"),vzr.forEach(t),WEo=r(PMe," \u2014 "),yI=n(PMe,"A",{href:!0});var Tzr=s(yI);QEo=r(Tzr,"FNetForNextSentencePrediction"),Tzr.forEach(t),HEo=r(PMe," (FNet model)"),PMe.forEach(t),UEo=i(el),V1=n(el,"LI",{});var $Me=s(V1);wte=n($Me,"STRONG",{});var Fzr=s(wte);JEo=r(Fzr,"megatron-bert"),Fzr.forEach(t),YEo=r($Me," \u2014 "),wI=n($Me,"A",{href:!0});var Czr=s(wI);KEo=r(Czr,"MegatronBertForNextSentencePrediction"),Czr.forEach(t),ZEo=r($Me," (MegatronBert model)"),$Me.forEach(t),e3o=i(el),W1=n(el,"LI",{});var IMe=s(W1);Ate=n(IMe,"STRONG",{});var Mzr=s(Ate);o3o=r(Mzr,"mobilebert"),Mzr.forEach(t),r3o=r(IMe," \u2014 "),AI=n(IMe,"A",{href:!0});var Ezr=s(AI);t3o=r(Ezr,"MobileBertForNextSentencePrediction"),Ezr.forEach(t),a3o=r(IMe," (MobileBERT model)"),IMe.forEach(t),n3o=i(el),Q1=n(el,"LI",{});var jMe=s(Q1);Lte=n(jMe,"STRONG",{});var yzr=s(Lte);s3o=r(yzr,"qdqbert"),yzr.forEach(t),l3o=r(jMe," \u2014 "),LI=n(jMe,"A",{href:!0});var wzr=s(LI);i3o=r(wzr,"QDQBertForNextSentencePrediction"),wzr.forEach(t),d3o=r(jMe," (QDQBert model)"),jMe.forEach(t),el.forEach(t),c3o=i(qt),H1=n(qt,"P",{});var NMe=s(H1);f3o=r(NMe,"The model is set in evaluation mode by default using "),Bte=n(NMe,"CODE",{});var Azr=s(Bte);m3o=r(Azr,"model.eval()"),Azr.forEach(t),g3o=r(NMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xte=n(NMe,"CODE",{});var Lzr=s(xte);h3o=r(Lzr,"model.train()"),Lzr.forEach(t),NMe.forEach(t),p3o=i(qt),kte=n(qt,"P",{});var Bzr=s(kte);_3o=r(Bzr,"Examples:"),Bzr.forEach(t),u3o=i(qt),m(NE.$$.fragment,qt),qt.forEach(t),Ks.forEach(t),qLe=i(d),cd=n(d,"H2",{class:!0});var QBe=s(cd);U1=n(QBe,"A",{id:!0,class:!0,href:!0});var xzr=s(U1);Rte=n(xzr,"SPAN",{});var kzr=s(Rte);m(DE.$$.fragment,kzr),kzr.forEach(t),xzr.forEach(t),b3o=i(QBe),Ste=n(QBe,"SPAN",{});var Rzr=s(Ste);v3o=r(Rzr,"AutoModelForTokenClassification"),Rzr.forEach(t),QBe.forEach(t),GLe=i(d),Zo=n(d,"DIV",{class:!0});var ol=s(Zo);m(qE.$$.fragment,ol),T3o=i(ol),fd=n(ol,"P",{});var gz=s(fd);F3o=r(gz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Pte=n(gz,"CODE",{});var Szr=s(Pte);C3o=r(Szr,"from_pretrained()"),Szr.forEach(t),M3o=r(gz,"class method or the "),$te=n(gz,"CODE",{});var Pzr=s($te);E3o=r(Pzr,"from_config()"),Pzr.forEach(t),y3o=r(gz,`class
method.`),gz.forEach(t),w3o=i(ol),GE=n(ol,"P",{});var HBe=s(GE);A3o=r(HBe,"This class cannot be instantiated directly using "),Ite=n(HBe,"CODE",{});var $zr=s(Ite);L3o=r($zr,"__init__()"),$zr.forEach(t),B3o=r(HBe," (throws an error)."),HBe.forEach(t),x3o=i(ol),Wr=n(ol,"DIV",{class:!0});var rl=s(Wr);m(OE.$$.fragment,rl),k3o=i(rl),jte=n(rl,"P",{});var Izr=s(jte);R3o=r(Izr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Izr.forEach(t),S3o=i(rl),md=n(rl,"P",{});var hz=s(md);P3o=r(hz,`Note:
Loading a model from its configuration file does `),Nte=n(hz,"STRONG",{});var jzr=s(Nte);$3o=r(jzr,"not"),jzr.forEach(t),I3o=r(hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dte=n(hz,"CODE",{});var Nzr=s(Dte);j3o=r(Nzr,"from_pretrained()"),Nzr.forEach(t),N3o=r(hz,"to load the model weights."),hz.forEach(t),D3o=i(rl),qte=n(rl,"P",{});var Dzr=s(qte);q3o=r(Dzr,"Examples:"),Dzr.forEach(t),G3o=i(rl),m(XE.$$.fragment,rl),rl.forEach(t),O3o=i(ol),Ne=n(ol,"DIV",{class:!0});var Gt=s(Ne);m(zE.$$.fragment,Gt),X3o=i(Gt),Gte=n(Gt,"P",{});var qzr=s(Gte);z3o=r(qzr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qzr.forEach(t),V3o=i(Gt),Qa=n(Gt,"P",{});var u4=s(Qa);W3o=r(u4,"The model class to instantiate is selected based on the "),Ote=n(u4,"CODE",{});var Gzr=s(Ote);Q3o=r(Gzr,"model_type"),Gzr.forEach(t),H3o=r(u4,` property of the config object (either
passed as an argument or loaded from `),Xte=n(u4,"CODE",{});var Ozr=s(Xte);U3o=r(Ozr,"pretrained_model_name_or_path"),Ozr.forEach(t),J3o=r(u4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zte=n(u4,"CODE",{});var Xzr=s(zte);Y3o=r(Xzr,"pretrained_model_name_or_path"),Xzr.forEach(t),K3o=r(u4,":"),u4.forEach(t),Z3o=i(Gt),D=n(Gt,"UL",{});var q=s(D);J1=n(q,"LI",{});var DMe=s(J1);Vte=n(DMe,"STRONG",{});var zzr=s(Vte);eyo=r(zzr,"albert"),zzr.forEach(t),oyo=r(DMe," \u2014 "),BI=n(DMe,"A",{href:!0});var Vzr=s(BI);ryo=r(Vzr,"AlbertForTokenClassification"),Vzr.forEach(t),tyo=r(DMe," (ALBERT model)"),DMe.forEach(t),ayo=i(q),Y1=n(q,"LI",{});var qMe=s(Y1);Wte=n(qMe,"STRONG",{});var Wzr=s(Wte);nyo=r(Wzr,"bert"),Wzr.forEach(t),syo=r(qMe," \u2014 "),xI=n(qMe,"A",{href:!0});var Qzr=s(xI);lyo=r(Qzr,"BertForTokenClassification"),Qzr.forEach(t),iyo=r(qMe," (BERT model)"),qMe.forEach(t),dyo=i(q),K1=n(q,"LI",{});var GMe=s(K1);Qte=n(GMe,"STRONG",{});var Hzr=s(Qte);cyo=r(Hzr,"big_bird"),Hzr.forEach(t),fyo=r(GMe," \u2014 "),kI=n(GMe,"A",{href:!0});var Uzr=s(kI);myo=r(Uzr,"BigBirdForTokenClassification"),Uzr.forEach(t),gyo=r(GMe," (BigBird model)"),GMe.forEach(t),hyo=i(q),Z1=n(q,"LI",{});var OMe=s(Z1);Hte=n(OMe,"STRONG",{});var Jzr=s(Hte);pyo=r(Jzr,"camembert"),Jzr.forEach(t),_yo=r(OMe," \u2014 "),RI=n(OMe,"A",{href:!0});var Yzr=s(RI);uyo=r(Yzr,"CamembertForTokenClassification"),Yzr.forEach(t),byo=r(OMe," (CamemBERT model)"),OMe.forEach(t),vyo=i(q),eb=n(q,"LI",{});var XMe=s(eb);Ute=n(XMe,"STRONG",{});var Kzr=s(Ute);Tyo=r(Kzr,"canine"),Kzr.forEach(t),Fyo=r(XMe," \u2014 "),SI=n(XMe,"A",{href:!0});var Zzr=s(SI);Cyo=r(Zzr,"CanineForTokenClassification"),Zzr.forEach(t),Myo=r(XMe," (Canine model)"),XMe.forEach(t),Eyo=i(q),ob=n(q,"LI",{});var zMe=s(ob);Jte=n(zMe,"STRONG",{});var eVr=s(Jte);yyo=r(eVr,"convbert"),eVr.forEach(t),wyo=r(zMe," \u2014 "),PI=n(zMe,"A",{href:!0});var oVr=s(PI);Ayo=r(oVr,"ConvBertForTokenClassification"),oVr.forEach(t),Lyo=r(zMe," (ConvBERT model)"),zMe.forEach(t),Byo=i(q),rb=n(q,"LI",{});var VMe=s(rb);Yte=n(VMe,"STRONG",{});var rVr=s(Yte);xyo=r(rVr,"deberta"),rVr.forEach(t),kyo=r(VMe," \u2014 "),$I=n(VMe,"A",{href:!0});var tVr=s($I);Ryo=r(tVr,"DebertaForTokenClassification"),tVr.forEach(t),Syo=r(VMe," (DeBERTa model)"),VMe.forEach(t),Pyo=i(q),tb=n(q,"LI",{});var WMe=s(tb);Kte=n(WMe,"STRONG",{});var aVr=s(Kte);$yo=r(aVr,"deberta-v2"),aVr.forEach(t),Iyo=r(WMe," \u2014 "),II=n(WMe,"A",{href:!0});var nVr=s(II);jyo=r(nVr,"DebertaV2ForTokenClassification"),nVr.forEach(t),Nyo=r(WMe," (DeBERTa-v2 model)"),WMe.forEach(t),Dyo=i(q),ab=n(q,"LI",{});var QMe=s(ab);Zte=n(QMe,"STRONG",{});var sVr=s(Zte);qyo=r(sVr,"distilbert"),sVr.forEach(t),Gyo=r(QMe," \u2014 "),jI=n(QMe,"A",{href:!0});var lVr=s(jI);Oyo=r(lVr,"DistilBertForTokenClassification"),lVr.forEach(t),Xyo=r(QMe," (DistilBERT model)"),QMe.forEach(t),zyo=i(q),nb=n(q,"LI",{});var HMe=s(nb);eae=n(HMe,"STRONG",{});var iVr=s(eae);Vyo=r(iVr,"electra"),iVr.forEach(t),Wyo=r(HMe," \u2014 "),NI=n(HMe,"A",{href:!0});var dVr=s(NI);Qyo=r(dVr,"ElectraForTokenClassification"),dVr.forEach(t),Hyo=r(HMe," (ELECTRA model)"),HMe.forEach(t),Uyo=i(q),sb=n(q,"LI",{});var UMe=s(sb);oae=n(UMe,"STRONG",{});var cVr=s(oae);Jyo=r(cVr,"flaubert"),cVr.forEach(t),Yyo=r(UMe," \u2014 "),DI=n(UMe,"A",{href:!0});var fVr=s(DI);Kyo=r(fVr,"FlaubertForTokenClassification"),fVr.forEach(t),Zyo=r(UMe," (FlauBERT model)"),UMe.forEach(t),ewo=i(q),lb=n(q,"LI",{});var JMe=s(lb);rae=n(JMe,"STRONG",{});var mVr=s(rae);owo=r(mVr,"fnet"),mVr.forEach(t),rwo=r(JMe," \u2014 "),qI=n(JMe,"A",{href:!0});var gVr=s(qI);two=r(gVr,"FNetForTokenClassification"),gVr.forEach(t),awo=r(JMe," (FNet model)"),JMe.forEach(t),nwo=i(q),ib=n(q,"LI",{});var YMe=s(ib);tae=n(YMe,"STRONG",{});var hVr=s(tae);swo=r(hVr,"funnel"),hVr.forEach(t),lwo=r(YMe," \u2014 "),GI=n(YMe,"A",{href:!0});var pVr=s(GI);iwo=r(pVr,"FunnelForTokenClassification"),pVr.forEach(t),dwo=r(YMe," (Funnel Transformer model)"),YMe.forEach(t),cwo=i(q),db=n(q,"LI",{});var KMe=s(db);aae=n(KMe,"STRONG",{});var _Vr=s(aae);fwo=r(_Vr,"gpt2"),_Vr.forEach(t),mwo=r(KMe," \u2014 "),OI=n(KMe,"A",{href:!0});var uVr=s(OI);gwo=r(uVr,"GPT2ForTokenClassification"),uVr.forEach(t),hwo=r(KMe," (OpenAI GPT-2 model)"),KMe.forEach(t),pwo=i(q),cb=n(q,"LI",{});var ZMe=s(cb);nae=n(ZMe,"STRONG",{});var bVr=s(nae);_wo=r(bVr,"ibert"),bVr.forEach(t),uwo=r(ZMe," \u2014 "),XI=n(ZMe,"A",{href:!0});var vVr=s(XI);bwo=r(vVr,"IBertForTokenClassification"),vVr.forEach(t),vwo=r(ZMe," (I-BERT model)"),ZMe.forEach(t),Two=i(q),fb=n(q,"LI",{});var eEe=s(fb);sae=n(eEe,"STRONG",{});var TVr=s(sae);Fwo=r(TVr,"layoutlm"),TVr.forEach(t),Cwo=r(eEe," \u2014 "),zI=n(eEe,"A",{href:!0});var FVr=s(zI);Mwo=r(FVr,"LayoutLMForTokenClassification"),FVr.forEach(t),Ewo=r(eEe," (LayoutLM model)"),eEe.forEach(t),ywo=i(q),mb=n(q,"LI",{});var oEe=s(mb);lae=n(oEe,"STRONG",{});var CVr=s(lae);wwo=r(CVr,"layoutlmv2"),CVr.forEach(t),Awo=r(oEe," \u2014 "),VI=n(oEe,"A",{href:!0});var MVr=s(VI);Lwo=r(MVr,"LayoutLMv2ForTokenClassification"),MVr.forEach(t),Bwo=r(oEe," (LayoutLMv2 model)"),oEe.forEach(t),xwo=i(q),gb=n(q,"LI",{});var rEe=s(gb);iae=n(rEe,"STRONG",{});var EVr=s(iae);kwo=r(EVr,"longformer"),EVr.forEach(t),Rwo=r(rEe," \u2014 "),WI=n(rEe,"A",{href:!0});var yVr=s(WI);Swo=r(yVr,"LongformerForTokenClassification"),yVr.forEach(t),Pwo=r(rEe," (Longformer model)"),rEe.forEach(t),$wo=i(q),hb=n(q,"LI",{});var tEe=s(hb);dae=n(tEe,"STRONG",{});var wVr=s(dae);Iwo=r(wVr,"megatron-bert"),wVr.forEach(t),jwo=r(tEe," \u2014 "),QI=n(tEe,"A",{href:!0});var AVr=s(QI);Nwo=r(AVr,"MegatronBertForTokenClassification"),AVr.forEach(t),Dwo=r(tEe," (MegatronBert model)"),tEe.forEach(t),qwo=i(q),pb=n(q,"LI",{});var aEe=s(pb);cae=n(aEe,"STRONG",{});var LVr=s(cae);Gwo=r(LVr,"mobilebert"),LVr.forEach(t),Owo=r(aEe," \u2014 "),HI=n(aEe,"A",{href:!0});var BVr=s(HI);Xwo=r(BVr,"MobileBertForTokenClassification"),BVr.forEach(t),zwo=r(aEe," (MobileBERT model)"),aEe.forEach(t),Vwo=i(q),_b=n(q,"LI",{});var nEe=s(_b);fae=n(nEe,"STRONG",{});var xVr=s(fae);Wwo=r(xVr,"mpnet"),xVr.forEach(t),Qwo=r(nEe," \u2014 "),UI=n(nEe,"A",{href:!0});var kVr=s(UI);Hwo=r(kVr,"MPNetForTokenClassification"),kVr.forEach(t),Uwo=r(nEe," (MPNet model)"),nEe.forEach(t),Jwo=i(q),ub=n(q,"LI",{});var sEe=s(ub);mae=n(sEe,"STRONG",{});var RVr=s(mae);Ywo=r(RVr,"nystromformer"),RVr.forEach(t),Kwo=r(sEe," \u2014 "),JI=n(sEe,"A",{href:!0});var SVr=s(JI);Zwo=r(SVr,"NystromformerForTokenClassification"),SVr.forEach(t),eAo=r(sEe," (Nystromformer model)"),sEe.forEach(t),oAo=i(q),bb=n(q,"LI",{});var lEe=s(bb);gae=n(lEe,"STRONG",{});var PVr=s(gae);rAo=r(PVr,"qdqbert"),PVr.forEach(t),tAo=r(lEe," \u2014 "),YI=n(lEe,"A",{href:!0});var $Vr=s(YI);aAo=r($Vr,"QDQBertForTokenClassification"),$Vr.forEach(t),nAo=r(lEe," (QDQBert model)"),lEe.forEach(t),sAo=i(q),vb=n(q,"LI",{});var iEe=s(vb);hae=n(iEe,"STRONG",{});var IVr=s(hae);lAo=r(IVr,"rembert"),IVr.forEach(t),iAo=r(iEe," \u2014 "),KI=n(iEe,"A",{href:!0});var jVr=s(KI);dAo=r(jVr,"RemBertForTokenClassification"),jVr.forEach(t),cAo=r(iEe," (RemBERT model)"),iEe.forEach(t),fAo=i(q),Tb=n(q,"LI",{});var dEe=s(Tb);pae=n(dEe,"STRONG",{});var NVr=s(pae);mAo=r(NVr,"roberta"),NVr.forEach(t),gAo=r(dEe," \u2014 "),ZI=n(dEe,"A",{href:!0});var DVr=s(ZI);hAo=r(DVr,"RobertaForTokenClassification"),DVr.forEach(t),pAo=r(dEe," (RoBERTa model)"),dEe.forEach(t),_Ao=i(q),Fb=n(q,"LI",{});var cEe=s(Fb);_ae=n(cEe,"STRONG",{});var qVr=s(_ae);uAo=r(qVr,"roformer"),qVr.forEach(t),bAo=r(cEe," \u2014 "),ej=n(cEe,"A",{href:!0});var GVr=s(ej);vAo=r(GVr,"RoFormerForTokenClassification"),GVr.forEach(t),TAo=r(cEe," (RoFormer model)"),cEe.forEach(t),FAo=i(q),Cb=n(q,"LI",{});var fEe=s(Cb);uae=n(fEe,"STRONG",{});var OVr=s(uae);CAo=r(OVr,"squeezebert"),OVr.forEach(t),MAo=r(fEe," \u2014 "),oj=n(fEe,"A",{href:!0});var XVr=s(oj);EAo=r(XVr,"SqueezeBertForTokenClassification"),XVr.forEach(t),yAo=r(fEe," (SqueezeBERT model)"),fEe.forEach(t),wAo=i(q),Mb=n(q,"LI",{});var mEe=s(Mb);bae=n(mEe,"STRONG",{});var zVr=s(bae);AAo=r(zVr,"xlm"),zVr.forEach(t),LAo=r(mEe," \u2014 "),rj=n(mEe,"A",{href:!0});var VVr=s(rj);BAo=r(VVr,"XLMForTokenClassification"),VVr.forEach(t),xAo=r(mEe," (XLM model)"),mEe.forEach(t),kAo=i(q),Eb=n(q,"LI",{});var gEe=s(Eb);vae=n(gEe,"STRONG",{});var WVr=s(vae);RAo=r(WVr,"xlm-roberta"),WVr.forEach(t),SAo=r(gEe," \u2014 "),tj=n(gEe,"A",{href:!0});var QVr=s(tj);PAo=r(QVr,"XLMRobertaForTokenClassification"),QVr.forEach(t),$Ao=r(gEe," (XLM-RoBERTa model)"),gEe.forEach(t),IAo=i(q),yb=n(q,"LI",{});var hEe=s(yb);Tae=n(hEe,"STRONG",{});var HVr=s(Tae);jAo=r(HVr,"xlm-roberta-xl"),HVr.forEach(t),NAo=r(hEe," \u2014 "),aj=n(hEe,"A",{href:!0});var UVr=s(aj);DAo=r(UVr,"XLMRobertaXLForTokenClassification"),UVr.forEach(t),qAo=r(hEe," (XLM-RoBERTa-XL model)"),hEe.forEach(t),GAo=i(q),wb=n(q,"LI",{});var pEe=s(wb);Fae=n(pEe,"STRONG",{});var JVr=s(Fae);OAo=r(JVr,"xlnet"),JVr.forEach(t),XAo=r(pEe," \u2014 "),nj=n(pEe,"A",{href:!0});var YVr=s(nj);zAo=r(YVr,"XLNetForTokenClassification"),YVr.forEach(t),VAo=r(pEe," (XLNet model)"),pEe.forEach(t),WAo=i(q),Ab=n(q,"LI",{});var _Ee=s(Ab);Cae=n(_Ee,"STRONG",{});var KVr=s(Cae);QAo=r(KVr,"yoso"),KVr.forEach(t),HAo=r(_Ee," \u2014 "),sj=n(_Ee,"A",{href:!0});var ZVr=s(sj);UAo=r(ZVr,"YosoForTokenClassification"),ZVr.forEach(t),JAo=r(_Ee," (YOSO model)"),_Ee.forEach(t),q.forEach(t),YAo=i(Gt),Lb=n(Gt,"P",{});var uEe=s(Lb);KAo=r(uEe,"The model is set in evaluation mode by default using "),Mae=n(uEe,"CODE",{});var eWr=s(Mae);ZAo=r(eWr,"model.eval()"),eWr.forEach(t),e6o=r(uEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eae=n(uEe,"CODE",{});var oWr=s(Eae);o6o=r(oWr,"model.train()"),oWr.forEach(t),uEe.forEach(t),r6o=i(Gt),yae=n(Gt,"P",{});var rWr=s(yae);t6o=r(rWr,"Examples:"),rWr.forEach(t),a6o=i(Gt),m(VE.$$.fragment,Gt),Gt.forEach(t),ol.forEach(t),OLe=i(d),gd=n(d,"H2",{class:!0});var UBe=s(gd);Bb=n(UBe,"A",{id:!0,class:!0,href:!0});var tWr=s(Bb);wae=n(tWr,"SPAN",{});var aWr=s(wae);m(WE.$$.fragment,aWr),aWr.forEach(t),tWr.forEach(t),n6o=i(UBe),Aae=n(UBe,"SPAN",{});var nWr=s(Aae);s6o=r(nWr,"AutoModelForQuestionAnswering"),nWr.forEach(t),UBe.forEach(t),XLe=i(d),er=n(d,"DIV",{class:!0});var tl=s(er);m(QE.$$.fragment,tl),l6o=i(tl),hd=n(tl,"P",{});var pz=s(hd);i6o=r(pz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Lae=n(pz,"CODE",{});var sWr=s(Lae);d6o=r(sWr,"from_pretrained()"),sWr.forEach(t),c6o=r(pz,"class method or the "),Bae=n(pz,"CODE",{});var lWr=s(Bae);f6o=r(lWr,"from_config()"),lWr.forEach(t),m6o=r(pz,`class
method.`),pz.forEach(t),g6o=i(tl),HE=n(tl,"P",{});var JBe=s(HE);h6o=r(JBe,"This class cannot be instantiated directly using "),xae=n(JBe,"CODE",{});var iWr=s(xae);p6o=r(iWr,"__init__()"),iWr.forEach(t),_6o=r(JBe," (throws an error)."),JBe.forEach(t),u6o=i(tl),Qr=n(tl,"DIV",{class:!0});var al=s(Qr);m(UE.$$.fragment,al),b6o=i(al),kae=n(al,"P",{});var dWr=s(kae);v6o=r(dWr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dWr.forEach(t),T6o=i(al),pd=n(al,"P",{});var _z=s(pd);F6o=r(_z,`Note:
Loading a model from its configuration file does `),Rae=n(_z,"STRONG",{});var cWr=s(Rae);C6o=r(cWr,"not"),cWr.forEach(t),M6o=r(_z,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sae=n(_z,"CODE",{});var fWr=s(Sae);E6o=r(fWr,"from_pretrained()"),fWr.forEach(t),y6o=r(_z,"to load the model weights."),_z.forEach(t),w6o=i(al),Pae=n(al,"P",{});var mWr=s(Pae);A6o=r(mWr,"Examples:"),mWr.forEach(t),L6o=i(al),m(JE.$$.fragment,al),al.forEach(t),B6o=i(tl),De=n(tl,"DIV",{class:!0});var Ot=s(De);m(YE.$$.fragment,Ot),x6o=i(Ot),$ae=n(Ot,"P",{});var gWr=s($ae);k6o=r(gWr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gWr.forEach(t),R6o=i(Ot),Ha=n(Ot,"P",{});var b4=s(Ha);S6o=r(b4,"The model class to instantiate is selected based on the "),Iae=n(b4,"CODE",{});var hWr=s(Iae);P6o=r(hWr,"model_type"),hWr.forEach(t),$6o=r(b4,` property of the config object (either
passed as an argument or loaded from `),jae=n(b4,"CODE",{});var pWr=s(jae);I6o=r(pWr,"pretrained_model_name_or_path"),pWr.forEach(t),j6o=r(b4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nae=n(b4,"CODE",{});var _Wr=s(Nae);N6o=r(_Wr,"pretrained_model_name_or_path"),_Wr.forEach(t),D6o=r(b4,":"),b4.forEach(t),q6o=i(Ot),R=n(Ot,"UL",{});var P=s(R);xb=n(P,"LI",{});var bEe=s(xb);Dae=n(bEe,"STRONG",{});var uWr=s(Dae);G6o=r(uWr,"albert"),uWr.forEach(t),O6o=r(bEe," \u2014 "),lj=n(bEe,"A",{href:!0});var bWr=s(lj);X6o=r(bWr,"AlbertForQuestionAnswering"),bWr.forEach(t),z6o=r(bEe," (ALBERT model)"),bEe.forEach(t),V6o=i(P),kb=n(P,"LI",{});var vEe=s(kb);qae=n(vEe,"STRONG",{});var vWr=s(qae);W6o=r(vWr,"bart"),vWr.forEach(t),Q6o=r(vEe," \u2014 "),ij=n(vEe,"A",{href:!0});var TWr=s(ij);H6o=r(TWr,"BartForQuestionAnswering"),TWr.forEach(t),U6o=r(vEe," (BART model)"),vEe.forEach(t),J6o=i(P),Rb=n(P,"LI",{});var TEe=s(Rb);Gae=n(TEe,"STRONG",{});var FWr=s(Gae);Y6o=r(FWr,"bert"),FWr.forEach(t),K6o=r(TEe," \u2014 "),dj=n(TEe,"A",{href:!0});var CWr=s(dj);Z6o=r(CWr,"BertForQuestionAnswering"),CWr.forEach(t),e0o=r(TEe," (BERT model)"),TEe.forEach(t),o0o=i(P),Sb=n(P,"LI",{});var FEe=s(Sb);Oae=n(FEe,"STRONG",{});var MWr=s(Oae);r0o=r(MWr,"big_bird"),MWr.forEach(t),t0o=r(FEe," \u2014 "),cj=n(FEe,"A",{href:!0});var EWr=s(cj);a0o=r(EWr,"BigBirdForQuestionAnswering"),EWr.forEach(t),n0o=r(FEe," (BigBird model)"),FEe.forEach(t),s0o=i(P),Pb=n(P,"LI",{});var CEe=s(Pb);Xae=n(CEe,"STRONG",{});var yWr=s(Xae);l0o=r(yWr,"bigbird_pegasus"),yWr.forEach(t),i0o=r(CEe," \u2014 "),fj=n(CEe,"A",{href:!0});var wWr=s(fj);d0o=r(wWr,"BigBirdPegasusForQuestionAnswering"),wWr.forEach(t),c0o=r(CEe," (BigBirdPegasus model)"),CEe.forEach(t),f0o=i(P),$b=n(P,"LI",{});var MEe=s($b);zae=n(MEe,"STRONG",{});var AWr=s(zae);m0o=r(AWr,"camembert"),AWr.forEach(t),g0o=r(MEe," \u2014 "),mj=n(MEe,"A",{href:!0});var LWr=s(mj);h0o=r(LWr,"CamembertForQuestionAnswering"),LWr.forEach(t),p0o=r(MEe," (CamemBERT model)"),MEe.forEach(t),_0o=i(P),Ib=n(P,"LI",{});var EEe=s(Ib);Vae=n(EEe,"STRONG",{});var BWr=s(Vae);u0o=r(BWr,"canine"),BWr.forEach(t),b0o=r(EEe," \u2014 "),gj=n(EEe,"A",{href:!0});var xWr=s(gj);v0o=r(xWr,"CanineForQuestionAnswering"),xWr.forEach(t),T0o=r(EEe," (Canine model)"),EEe.forEach(t),F0o=i(P),jb=n(P,"LI",{});var yEe=s(jb);Wae=n(yEe,"STRONG",{});var kWr=s(Wae);C0o=r(kWr,"convbert"),kWr.forEach(t),M0o=r(yEe," \u2014 "),hj=n(yEe,"A",{href:!0});var RWr=s(hj);E0o=r(RWr,"ConvBertForQuestionAnswering"),RWr.forEach(t),y0o=r(yEe," (ConvBERT model)"),yEe.forEach(t),w0o=i(P),Nb=n(P,"LI",{});var wEe=s(Nb);Qae=n(wEe,"STRONG",{});var SWr=s(Qae);A0o=r(SWr,"deberta"),SWr.forEach(t),L0o=r(wEe," \u2014 "),pj=n(wEe,"A",{href:!0});var PWr=s(pj);B0o=r(PWr,"DebertaForQuestionAnswering"),PWr.forEach(t),x0o=r(wEe," (DeBERTa model)"),wEe.forEach(t),k0o=i(P),Db=n(P,"LI",{});var AEe=s(Db);Hae=n(AEe,"STRONG",{});var $Wr=s(Hae);R0o=r($Wr,"deberta-v2"),$Wr.forEach(t),S0o=r(AEe," \u2014 "),_j=n(AEe,"A",{href:!0});var IWr=s(_j);P0o=r(IWr,"DebertaV2ForQuestionAnswering"),IWr.forEach(t),$0o=r(AEe," (DeBERTa-v2 model)"),AEe.forEach(t),I0o=i(P),qb=n(P,"LI",{});var LEe=s(qb);Uae=n(LEe,"STRONG",{});var jWr=s(Uae);j0o=r(jWr,"distilbert"),jWr.forEach(t),N0o=r(LEe," \u2014 "),uj=n(LEe,"A",{href:!0});var NWr=s(uj);D0o=r(NWr,"DistilBertForQuestionAnswering"),NWr.forEach(t),q0o=r(LEe," (DistilBERT model)"),LEe.forEach(t),G0o=i(P),Gb=n(P,"LI",{});var BEe=s(Gb);Jae=n(BEe,"STRONG",{});var DWr=s(Jae);O0o=r(DWr,"electra"),DWr.forEach(t),X0o=r(BEe," \u2014 "),bj=n(BEe,"A",{href:!0});var qWr=s(bj);z0o=r(qWr,"ElectraForQuestionAnswering"),qWr.forEach(t),V0o=r(BEe," (ELECTRA model)"),BEe.forEach(t),W0o=i(P),Ob=n(P,"LI",{});var xEe=s(Ob);Yae=n(xEe,"STRONG",{});var GWr=s(Yae);Q0o=r(GWr,"flaubert"),GWr.forEach(t),H0o=r(xEe," \u2014 "),vj=n(xEe,"A",{href:!0});var OWr=s(vj);U0o=r(OWr,"FlaubertForQuestionAnsweringSimple"),OWr.forEach(t),J0o=r(xEe," (FlauBERT model)"),xEe.forEach(t),Y0o=i(P),Xb=n(P,"LI",{});var kEe=s(Xb);Kae=n(kEe,"STRONG",{});var XWr=s(Kae);K0o=r(XWr,"fnet"),XWr.forEach(t),Z0o=r(kEe," \u2014 "),Tj=n(kEe,"A",{href:!0});var zWr=s(Tj);eLo=r(zWr,"FNetForQuestionAnswering"),zWr.forEach(t),oLo=r(kEe," (FNet model)"),kEe.forEach(t),rLo=i(P),zb=n(P,"LI",{});var REe=s(zb);Zae=n(REe,"STRONG",{});var VWr=s(Zae);tLo=r(VWr,"funnel"),VWr.forEach(t),aLo=r(REe," \u2014 "),Fj=n(REe,"A",{href:!0});var WWr=s(Fj);nLo=r(WWr,"FunnelForQuestionAnswering"),WWr.forEach(t),sLo=r(REe," (Funnel Transformer model)"),REe.forEach(t),lLo=i(P),Vb=n(P,"LI",{});var SEe=s(Vb);ene=n(SEe,"STRONG",{});var QWr=s(ene);iLo=r(QWr,"gptj"),QWr.forEach(t),dLo=r(SEe," \u2014 "),Cj=n(SEe,"A",{href:!0});var HWr=s(Cj);cLo=r(HWr,"GPTJForQuestionAnswering"),HWr.forEach(t),fLo=r(SEe," (GPT-J model)"),SEe.forEach(t),mLo=i(P),Wb=n(P,"LI",{});var PEe=s(Wb);one=n(PEe,"STRONG",{});var UWr=s(one);gLo=r(UWr,"ibert"),UWr.forEach(t),hLo=r(PEe," \u2014 "),Mj=n(PEe,"A",{href:!0});var JWr=s(Mj);pLo=r(JWr,"IBertForQuestionAnswering"),JWr.forEach(t),_Lo=r(PEe," (I-BERT model)"),PEe.forEach(t),uLo=i(P),Qb=n(P,"LI",{});var $Ee=s(Qb);rne=n($Ee,"STRONG",{});var YWr=s(rne);bLo=r(YWr,"layoutlmv2"),YWr.forEach(t),vLo=r($Ee," \u2014 "),Ej=n($Ee,"A",{href:!0});var KWr=s(Ej);TLo=r(KWr,"LayoutLMv2ForQuestionAnswering"),KWr.forEach(t),FLo=r($Ee," (LayoutLMv2 model)"),$Ee.forEach(t),CLo=i(P),Hb=n(P,"LI",{});var IEe=s(Hb);tne=n(IEe,"STRONG",{});var ZWr=s(tne);MLo=r(ZWr,"led"),ZWr.forEach(t),ELo=r(IEe," \u2014 "),yj=n(IEe,"A",{href:!0});var eQr=s(yj);yLo=r(eQr,"LEDForQuestionAnswering"),eQr.forEach(t),wLo=r(IEe," (LED model)"),IEe.forEach(t),ALo=i(P),Ub=n(P,"LI",{});var jEe=s(Ub);ane=n(jEe,"STRONG",{});var oQr=s(ane);LLo=r(oQr,"longformer"),oQr.forEach(t),BLo=r(jEe," \u2014 "),wj=n(jEe,"A",{href:!0});var rQr=s(wj);xLo=r(rQr,"LongformerForQuestionAnswering"),rQr.forEach(t),kLo=r(jEe," (Longformer model)"),jEe.forEach(t),RLo=i(P),Jb=n(P,"LI",{});var NEe=s(Jb);nne=n(NEe,"STRONG",{});var tQr=s(nne);SLo=r(tQr,"lxmert"),tQr.forEach(t),PLo=r(NEe," \u2014 "),Aj=n(NEe,"A",{href:!0});var aQr=s(Aj);$Lo=r(aQr,"LxmertForQuestionAnswering"),aQr.forEach(t),ILo=r(NEe," (LXMERT model)"),NEe.forEach(t),jLo=i(P),Yb=n(P,"LI",{});var DEe=s(Yb);sne=n(DEe,"STRONG",{});var nQr=s(sne);NLo=r(nQr,"mbart"),nQr.forEach(t),DLo=r(DEe," \u2014 "),Lj=n(DEe,"A",{href:!0});var sQr=s(Lj);qLo=r(sQr,"MBartForQuestionAnswering"),sQr.forEach(t),GLo=r(DEe," (mBART model)"),DEe.forEach(t),OLo=i(P),Kb=n(P,"LI",{});var qEe=s(Kb);lne=n(qEe,"STRONG",{});var lQr=s(lne);XLo=r(lQr,"megatron-bert"),lQr.forEach(t),zLo=r(qEe," \u2014 "),Bj=n(qEe,"A",{href:!0});var iQr=s(Bj);VLo=r(iQr,"MegatronBertForQuestionAnswering"),iQr.forEach(t),WLo=r(qEe," (MegatronBert model)"),qEe.forEach(t),QLo=i(P),Zb=n(P,"LI",{});var GEe=s(Zb);ine=n(GEe,"STRONG",{});var dQr=s(ine);HLo=r(dQr,"mobilebert"),dQr.forEach(t),ULo=r(GEe," \u2014 "),xj=n(GEe,"A",{href:!0});var cQr=s(xj);JLo=r(cQr,"MobileBertForQuestionAnswering"),cQr.forEach(t),YLo=r(GEe," (MobileBERT model)"),GEe.forEach(t),KLo=i(P),e2=n(P,"LI",{});var OEe=s(e2);dne=n(OEe,"STRONG",{});var fQr=s(dne);ZLo=r(fQr,"mpnet"),fQr.forEach(t),e7o=r(OEe," \u2014 "),kj=n(OEe,"A",{href:!0});var mQr=s(kj);o7o=r(mQr,"MPNetForQuestionAnswering"),mQr.forEach(t),r7o=r(OEe," (MPNet model)"),OEe.forEach(t),t7o=i(P),o2=n(P,"LI",{});var XEe=s(o2);cne=n(XEe,"STRONG",{});var gQr=s(cne);a7o=r(gQr,"nystromformer"),gQr.forEach(t),n7o=r(XEe," \u2014 "),Rj=n(XEe,"A",{href:!0});var hQr=s(Rj);s7o=r(hQr,"NystromformerForQuestionAnswering"),hQr.forEach(t),l7o=r(XEe," (Nystromformer model)"),XEe.forEach(t),i7o=i(P),r2=n(P,"LI",{});var zEe=s(r2);fne=n(zEe,"STRONG",{});var pQr=s(fne);d7o=r(pQr,"qdqbert"),pQr.forEach(t),c7o=r(zEe," \u2014 "),Sj=n(zEe,"A",{href:!0});var _Qr=s(Sj);f7o=r(_Qr,"QDQBertForQuestionAnswering"),_Qr.forEach(t),m7o=r(zEe," (QDQBert model)"),zEe.forEach(t),g7o=i(P),t2=n(P,"LI",{});var VEe=s(t2);mne=n(VEe,"STRONG",{});var uQr=s(mne);h7o=r(uQr,"reformer"),uQr.forEach(t),p7o=r(VEe," \u2014 "),Pj=n(VEe,"A",{href:!0});var bQr=s(Pj);_7o=r(bQr,"ReformerForQuestionAnswering"),bQr.forEach(t),u7o=r(VEe," (Reformer model)"),VEe.forEach(t),b7o=i(P),a2=n(P,"LI",{});var WEe=s(a2);gne=n(WEe,"STRONG",{});var vQr=s(gne);v7o=r(vQr,"rembert"),vQr.forEach(t),T7o=r(WEe," \u2014 "),$j=n(WEe,"A",{href:!0});var TQr=s($j);F7o=r(TQr,"RemBertForQuestionAnswering"),TQr.forEach(t),C7o=r(WEe," (RemBERT model)"),WEe.forEach(t),M7o=i(P),n2=n(P,"LI",{});var QEe=s(n2);hne=n(QEe,"STRONG",{});var FQr=s(hne);E7o=r(FQr,"roberta"),FQr.forEach(t),y7o=r(QEe," \u2014 "),Ij=n(QEe,"A",{href:!0});var CQr=s(Ij);w7o=r(CQr,"RobertaForQuestionAnswering"),CQr.forEach(t),A7o=r(QEe," (RoBERTa model)"),QEe.forEach(t),L7o=i(P),s2=n(P,"LI",{});var HEe=s(s2);pne=n(HEe,"STRONG",{});var MQr=s(pne);B7o=r(MQr,"roformer"),MQr.forEach(t),x7o=r(HEe," \u2014 "),jj=n(HEe,"A",{href:!0});var EQr=s(jj);k7o=r(EQr,"RoFormerForQuestionAnswering"),EQr.forEach(t),R7o=r(HEe," (RoFormer model)"),HEe.forEach(t),S7o=i(P),l2=n(P,"LI",{});var UEe=s(l2);_ne=n(UEe,"STRONG",{});var yQr=s(_ne);P7o=r(yQr,"splinter"),yQr.forEach(t),$7o=r(UEe," \u2014 "),Nj=n(UEe,"A",{href:!0});var wQr=s(Nj);I7o=r(wQr,"SplinterForQuestionAnswering"),wQr.forEach(t),j7o=r(UEe," (Splinter model)"),UEe.forEach(t),N7o=i(P),i2=n(P,"LI",{});var JEe=s(i2);une=n(JEe,"STRONG",{});var AQr=s(une);D7o=r(AQr,"squeezebert"),AQr.forEach(t),q7o=r(JEe," \u2014 "),Dj=n(JEe,"A",{href:!0});var LQr=s(Dj);G7o=r(LQr,"SqueezeBertForQuestionAnswering"),LQr.forEach(t),O7o=r(JEe," (SqueezeBERT model)"),JEe.forEach(t),X7o=i(P),d2=n(P,"LI",{});var YEe=s(d2);bne=n(YEe,"STRONG",{});var BQr=s(bne);z7o=r(BQr,"xlm"),BQr.forEach(t),V7o=r(YEe," \u2014 "),qj=n(YEe,"A",{href:!0});var xQr=s(qj);W7o=r(xQr,"XLMForQuestionAnsweringSimple"),xQr.forEach(t),Q7o=r(YEe," (XLM model)"),YEe.forEach(t),H7o=i(P),c2=n(P,"LI",{});var KEe=s(c2);vne=n(KEe,"STRONG",{});var kQr=s(vne);U7o=r(kQr,"xlm-roberta"),kQr.forEach(t),J7o=r(KEe," \u2014 "),Gj=n(KEe,"A",{href:!0});var RQr=s(Gj);Y7o=r(RQr,"XLMRobertaForQuestionAnswering"),RQr.forEach(t),K7o=r(KEe," (XLM-RoBERTa model)"),KEe.forEach(t),Z7o=i(P),f2=n(P,"LI",{});var ZEe=s(f2);Tne=n(ZEe,"STRONG",{});var SQr=s(Tne);eBo=r(SQr,"xlm-roberta-xl"),SQr.forEach(t),oBo=r(ZEe," \u2014 "),Oj=n(ZEe,"A",{href:!0});var PQr=s(Oj);rBo=r(PQr,"XLMRobertaXLForQuestionAnswering"),PQr.forEach(t),tBo=r(ZEe," (XLM-RoBERTa-XL model)"),ZEe.forEach(t),aBo=i(P),m2=n(P,"LI",{});var e3e=s(m2);Fne=n(e3e,"STRONG",{});var $Qr=s(Fne);nBo=r($Qr,"xlnet"),$Qr.forEach(t),sBo=r(e3e," \u2014 "),Xj=n(e3e,"A",{href:!0});var IQr=s(Xj);lBo=r(IQr,"XLNetForQuestionAnsweringSimple"),IQr.forEach(t),iBo=r(e3e," (XLNet model)"),e3e.forEach(t),dBo=i(P),g2=n(P,"LI",{});var o3e=s(g2);Cne=n(o3e,"STRONG",{});var jQr=s(Cne);cBo=r(jQr,"yoso"),jQr.forEach(t),fBo=r(o3e," \u2014 "),zj=n(o3e,"A",{href:!0});var NQr=s(zj);mBo=r(NQr,"YosoForQuestionAnswering"),NQr.forEach(t),gBo=r(o3e," (YOSO model)"),o3e.forEach(t),P.forEach(t),hBo=i(Ot),h2=n(Ot,"P",{});var r3e=s(h2);pBo=r(r3e,"The model is set in evaluation mode by default using "),Mne=n(r3e,"CODE",{});var DQr=s(Mne);_Bo=r(DQr,"model.eval()"),DQr.forEach(t),uBo=r(r3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ene=n(r3e,"CODE",{});var qQr=s(Ene);bBo=r(qQr,"model.train()"),qQr.forEach(t),r3e.forEach(t),vBo=i(Ot),yne=n(Ot,"P",{});var GQr=s(yne);TBo=r(GQr,"Examples:"),GQr.forEach(t),FBo=i(Ot),m(KE.$$.fragment,Ot),Ot.forEach(t),tl.forEach(t),zLe=i(d),_d=n(d,"H2",{class:!0});var YBe=s(_d);p2=n(YBe,"A",{id:!0,class:!0,href:!0});var OQr=s(p2);wne=n(OQr,"SPAN",{});var XQr=s(wne);m(ZE.$$.fragment,XQr),XQr.forEach(t),OQr.forEach(t),CBo=i(YBe),Ane=n(YBe,"SPAN",{});var zQr=s(Ane);MBo=r(zQr,"AutoModelForTableQuestionAnswering"),zQr.forEach(t),YBe.forEach(t),VLe=i(d),or=n(d,"DIV",{class:!0});var nl=s(or);m(e3.$$.fragment,nl),EBo=i(nl),ud=n(nl,"P",{});var uz=s(ud);yBo=r(uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Lne=n(uz,"CODE",{});var VQr=s(Lne);wBo=r(VQr,"from_pretrained()"),VQr.forEach(t),ABo=r(uz,"class method or the "),Bne=n(uz,"CODE",{});var WQr=s(Bne);LBo=r(WQr,"from_config()"),WQr.forEach(t),BBo=r(uz,`class
method.`),uz.forEach(t),xBo=i(nl),o3=n(nl,"P",{});var KBe=s(o3);kBo=r(KBe,"This class cannot be instantiated directly using "),xne=n(KBe,"CODE",{});var QQr=s(xne);RBo=r(QQr,"__init__()"),QQr.forEach(t),SBo=r(KBe," (throws an error)."),KBe.forEach(t),PBo=i(nl),Hr=n(nl,"DIV",{class:!0});var sl=s(Hr);m(r3.$$.fragment,sl),$Bo=i(sl),kne=n(sl,"P",{});var HQr=s(kne);IBo=r(HQr,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),HQr.forEach(t),jBo=i(sl),bd=n(sl,"P",{});var bz=s(bd);NBo=r(bz,`Note:
Loading a model from its configuration file does `),Rne=n(bz,"STRONG",{});var UQr=s(Rne);DBo=r(UQr,"not"),UQr.forEach(t),qBo=r(bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sne=n(bz,"CODE",{});var JQr=s(Sne);GBo=r(JQr,"from_pretrained()"),JQr.forEach(t),OBo=r(bz,"to load the model weights."),bz.forEach(t),XBo=i(sl),Pne=n(sl,"P",{});var YQr=s(Pne);zBo=r(YQr,"Examples:"),YQr.forEach(t),VBo=i(sl),m(t3.$$.fragment,sl),sl.forEach(t),WBo=i(nl),qe=n(nl,"DIV",{class:!0});var Xt=s(qe);m(a3.$$.fragment,Xt),QBo=i(Xt),$ne=n(Xt,"P",{});var KQr=s($ne);HBo=r(KQr,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),KQr.forEach(t),UBo=i(Xt),Ua=n(Xt,"P",{});var v4=s(Ua);JBo=r(v4,"The model class to instantiate is selected based on the "),Ine=n(v4,"CODE",{});var ZQr=s(Ine);YBo=r(ZQr,"model_type"),ZQr.forEach(t),KBo=r(v4,` property of the config object (either
passed as an argument or loaded from `),jne=n(v4,"CODE",{});var eHr=s(jne);ZBo=r(eHr,"pretrained_model_name_or_path"),eHr.forEach(t),exo=r(v4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nne=n(v4,"CODE",{});var oHr=s(Nne);oxo=r(oHr,"pretrained_model_name_or_path"),oHr.forEach(t),rxo=r(v4,":"),v4.forEach(t),txo=i(Xt),Dne=n(Xt,"UL",{});var rHr=s(Dne);_2=n(rHr,"LI",{});var t3e=s(_2);qne=n(t3e,"STRONG",{});var tHr=s(qne);axo=r(tHr,"tapas"),tHr.forEach(t),nxo=r(t3e," \u2014 "),Vj=n(t3e,"A",{href:!0});var aHr=s(Vj);sxo=r(aHr,"TapasForQuestionAnswering"),aHr.forEach(t),lxo=r(t3e," (TAPAS model)"),t3e.forEach(t),rHr.forEach(t),ixo=i(Xt),u2=n(Xt,"P",{});var a3e=s(u2);dxo=r(a3e,"The model is set in evaluation mode by default using "),Gne=n(a3e,"CODE",{});var nHr=s(Gne);cxo=r(nHr,"model.eval()"),nHr.forEach(t),fxo=r(a3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),One=n(a3e,"CODE",{});var sHr=s(One);mxo=r(sHr,"model.train()"),sHr.forEach(t),a3e.forEach(t),gxo=i(Xt),Xne=n(Xt,"P",{});var lHr=s(Xne);hxo=r(lHr,"Examples:"),lHr.forEach(t),pxo=i(Xt),m(n3.$$.fragment,Xt),Xt.forEach(t),nl.forEach(t),WLe=i(d),vd=n(d,"H2",{class:!0});var ZBe=s(vd);b2=n(ZBe,"A",{id:!0,class:!0,href:!0});var iHr=s(b2);zne=n(iHr,"SPAN",{});var dHr=s(zne);m(s3.$$.fragment,dHr),dHr.forEach(t),iHr.forEach(t),_xo=i(ZBe),Vne=n(ZBe,"SPAN",{});var cHr=s(Vne);uxo=r(cHr,"AutoModelForImageClassification"),cHr.forEach(t),ZBe.forEach(t),QLe=i(d),rr=n(d,"DIV",{class:!0});var ll=s(rr);m(l3.$$.fragment,ll),bxo=i(ll),Td=n(ll,"P",{});var vz=s(Td);vxo=r(vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Wne=n(vz,"CODE",{});var fHr=s(Wne);Txo=r(fHr,"from_pretrained()"),fHr.forEach(t),Fxo=r(vz,"class method or the "),Qne=n(vz,"CODE",{});var mHr=s(Qne);Cxo=r(mHr,"from_config()"),mHr.forEach(t),Mxo=r(vz,`class
method.`),vz.forEach(t),Exo=i(ll),i3=n(ll,"P",{});var exe=s(i3);yxo=r(exe,"This class cannot be instantiated directly using "),Hne=n(exe,"CODE",{});var gHr=s(Hne);wxo=r(gHr,"__init__()"),gHr.forEach(t),Axo=r(exe," (throws an error)."),exe.forEach(t),Lxo=i(ll),Ur=n(ll,"DIV",{class:!0});var il=s(Ur);m(d3.$$.fragment,il),Bxo=i(il),Une=n(il,"P",{});var hHr=s(Une);xxo=r(hHr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hHr.forEach(t),kxo=i(il),Fd=n(il,"P",{});var Tz=s(Fd);Rxo=r(Tz,`Note:
Loading a model from its configuration file does `),Jne=n(Tz,"STRONG",{});var pHr=s(Jne);Sxo=r(pHr,"not"),pHr.forEach(t),Pxo=r(Tz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yne=n(Tz,"CODE",{});var _Hr=s(Yne);$xo=r(_Hr,"from_pretrained()"),_Hr.forEach(t),Ixo=r(Tz,"to load the model weights."),Tz.forEach(t),jxo=i(il),Kne=n(il,"P",{});var uHr=s(Kne);Nxo=r(uHr,"Examples:"),uHr.forEach(t),Dxo=i(il),m(c3.$$.fragment,il),il.forEach(t),qxo=i(ll),Ge=n(ll,"DIV",{class:!0});var zt=s(Ge);m(f3.$$.fragment,zt),Gxo=i(zt),Zne=n(zt,"P",{});var bHr=s(Zne);Oxo=r(bHr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bHr.forEach(t),Xxo=i(zt),Ja=n(zt,"P",{});var T4=s(Ja);zxo=r(T4,"The model class to instantiate is selected based on the "),ese=n(T4,"CODE",{});var vHr=s(ese);Vxo=r(vHr,"model_type"),vHr.forEach(t),Wxo=r(T4,` property of the config object (either
passed as an argument or loaded from `),ose=n(T4,"CODE",{});var THr=s(ose);Qxo=r(THr,"pretrained_model_name_or_path"),THr.forEach(t),Hxo=r(T4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rse=n(T4,"CODE",{});var FHr=s(rse);Uxo=r(FHr,"pretrained_model_name_or_path"),FHr.forEach(t),Jxo=r(T4,":"),T4.forEach(t),Yxo=i(zt),be=n(zt,"UL",{});var Ke=s(be);v2=n(Ke,"LI",{});var n3e=s(v2);tse=n(n3e,"STRONG",{});var CHr=s(tse);Kxo=r(CHr,"beit"),CHr.forEach(t),Zxo=r(n3e," \u2014 "),Wj=n(n3e,"A",{href:!0});var MHr=s(Wj);eko=r(MHr,"BeitForImageClassification"),MHr.forEach(t),oko=r(n3e," (BEiT model)"),n3e.forEach(t),rko=i(Ke),T2=n(Ke,"LI",{});var s3e=s(T2);ase=n(s3e,"STRONG",{});var EHr=s(ase);tko=r(EHr,"convnext"),EHr.forEach(t),ako=r(s3e," \u2014 "),Qj=n(s3e,"A",{href:!0});var yHr=s(Qj);nko=r(yHr,"ConvNextForImageClassification"),yHr.forEach(t),sko=r(s3e," (ConvNext model)"),s3e.forEach(t),lko=i(Ke),Rs=n(Ke,"LI",{});var q0=s(Rs);nse=n(q0,"STRONG",{});var wHr=s(nse);iko=r(wHr,"deit"),wHr.forEach(t),dko=r(q0," \u2014 "),Hj=n(q0,"A",{href:!0});var AHr=s(Hj);cko=r(AHr,"DeiTForImageClassification"),AHr.forEach(t),fko=r(q0," or "),Uj=n(q0,"A",{href:!0});var LHr=s(Uj);mko=r(LHr,"DeiTForImageClassificationWithTeacher"),LHr.forEach(t),gko=r(q0," (DeiT model)"),q0.forEach(t),hko=i(Ke),F2=n(Ke,"LI",{});var l3e=s(F2);sse=n(l3e,"STRONG",{});var BHr=s(sse);pko=r(BHr,"imagegpt"),BHr.forEach(t),_ko=r(l3e," \u2014 "),Jj=n(l3e,"A",{href:!0});var xHr=s(Jj);uko=r(xHr,"ImageGPTForImageClassification"),xHr.forEach(t),bko=r(l3e," (ImageGPT model)"),l3e.forEach(t),vko=i(Ke),la=n(Ke,"LI",{});var Mf=s(la);lse=n(Mf,"STRONG",{});var kHr=s(lse);Tko=r(kHr,"perceiver"),kHr.forEach(t),Fko=r(Mf," \u2014 "),Yj=n(Mf,"A",{href:!0});var RHr=s(Yj);Cko=r(RHr,"PerceiverForImageClassificationLearned"),RHr.forEach(t),Mko=r(Mf," or "),Kj=n(Mf,"A",{href:!0});var SHr=s(Kj);Eko=r(SHr,"PerceiverForImageClassificationFourier"),SHr.forEach(t),yko=r(Mf," or "),Zj=n(Mf,"A",{href:!0});var PHr=s(Zj);wko=r(PHr,"PerceiverForImageClassificationConvProcessing"),PHr.forEach(t),Ako=r(Mf," (Perceiver model)"),Mf.forEach(t),Lko=i(Ke),C2=n(Ke,"LI",{});var i3e=s(C2);ise=n(i3e,"STRONG",{});var $Hr=s(ise);Bko=r($Hr,"poolformer"),$Hr.forEach(t),xko=r(i3e," \u2014 "),eN=n(i3e,"A",{href:!0});var IHr=s(eN);kko=r(IHr,"PoolFormerForImageClassification"),IHr.forEach(t),Rko=r(i3e," (PoolFormer model)"),i3e.forEach(t),Sko=i(Ke),M2=n(Ke,"LI",{});var d3e=s(M2);dse=n(d3e,"STRONG",{});var jHr=s(dse);Pko=r(jHr,"segformer"),jHr.forEach(t),$ko=r(d3e," \u2014 "),oN=n(d3e,"A",{href:!0});var NHr=s(oN);Iko=r(NHr,"SegformerForImageClassification"),NHr.forEach(t),jko=r(d3e," (SegFormer model)"),d3e.forEach(t),Nko=i(Ke),E2=n(Ke,"LI",{});var c3e=s(E2);cse=n(c3e,"STRONG",{});var DHr=s(cse);Dko=r(DHr,"swin"),DHr.forEach(t),qko=r(c3e," \u2014 "),rN=n(c3e,"A",{href:!0});var qHr=s(rN);Gko=r(qHr,"SwinForImageClassification"),qHr.forEach(t),Oko=r(c3e," (Swin model)"),c3e.forEach(t),Xko=i(Ke),y2=n(Ke,"LI",{});var f3e=s(y2);fse=n(f3e,"STRONG",{});var GHr=s(fse);zko=r(GHr,"vit"),GHr.forEach(t),Vko=r(f3e," \u2014 "),tN=n(f3e,"A",{href:!0});var OHr=s(tN);Wko=r(OHr,"ViTForImageClassification"),OHr.forEach(t),Qko=r(f3e," (ViT model)"),f3e.forEach(t),Ke.forEach(t),Hko=i(zt),w2=n(zt,"P",{});var m3e=s(w2);Uko=r(m3e,"The model is set in evaluation mode by default using "),mse=n(m3e,"CODE",{});var XHr=s(mse);Jko=r(XHr,"model.eval()"),XHr.forEach(t),Yko=r(m3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gse=n(m3e,"CODE",{});var zHr=s(gse);Kko=r(zHr,"model.train()"),zHr.forEach(t),m3e.forEach(t),Zko=i(zt),hse=n(zt,"P",{});var VHr=s(hse);eRo=r(VHr,"Examples:"),VHr.forEach(t),oRo=i(zt),m(m3.$$.fragment,zt),zt.forEach(t),ll.forEach(t),HLe=i(d),Cd=n(d,"H2",{class:!0});var oxe=s(Cd);A2=n(oxe,"A",{id:!0,class:!0,href:!0});var WHr=s(A2);pse=n(WHr,"SPAN",{});var QHr=s(pse);m(g3.$$.fragment,QHr),QHr.forEach(t),WHr.forEach(t),rRo=i(oxe),_se=n(oxe,"SPAN",{});var HHr=s(_se);tRo=r(HHr,"AutoModelForVision2Seq"),HHr.forEach(t),oxe.forEach(t),ULe=i(d),tr=n(d,"DIV",{class:!0});var dl=s(tr);m(h3.$$.fragment,dl),aRo=i(dl),Md=n(dl,"P",{});var Fz=s(Md);nRo=r(Fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),use=n(Fz,"CODE",{});var UHr=s(use);sRo=r(UHr,"from_pretrained()"),UHr.forEach(t),lRo=r(Fz,"class method or the "),bse=n(Fz,"CODE",{});var JHr=s(bse);iRo=r(JHr,"from_config()"),JHr.forEach(t),dRo=r(Fz,`class
method.`),Fz.forEach(t),cRo=i(dl),p3=n(dl,"P",{});var rxe=s(p3);fRo=r(rxe,"This class cannot be instantiated directly using "),vse=n(rxe,"CODE",{});var YHr=s(vse);mRo=r(YHr,"__init__()"),YHr.forEach(t),gRo=r(rxe," (throws an error)."),rxe.forEach(t),hRo=i(dl),Jr=n(dl,"DIV",{class:!0});var cl=s(Jr);m(_3.$$.fragment,cl),pRo=i(cl),Tse=n(cl,"P",{});var KHr=s(Tse);_Ro=r(KHr,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KHr.forEach(t),uRo=i(cl),Ed=n(cl,"P",{});var Cz=s(Ed);bRo=r(Cz,`Note:
Loading a model from its configuration file does `),Fse=n(Cz,"STRONG",{});var ZHr=s(Fse);vRo=r(ZHr,"not"),ZHr.forEach(t),TRo=r(Cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cse=n(Cz,"CODE",{});var eUr=s(Cse);FRo=r(eUr,"from_pretrained()"),eUr.forEach(t),CRo=r(Cz,"to load the model weights."),Cz.forEach(t),MRo=i(cl),Mse=n(cl,"P",{});var oUr=s(Mse);ERo=r(oUr,"Examples:"),oUr.forEach(t),yRo=i(cl),m(u3.$$.fragment,cl),cl.forEach(t),wRo=i(dl),Oe=n(dl,"DIV",{class:!0});var Vt=s(Oe);m(b3.$$.fragment,Vt),ARo=i(Vt),Ese=n(Vt,"P",{});var rUr=s(Ese);LRo=r(rUr,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rUr.forEach(t),BRo=i(Vt),Ya=n(Vt,"P",{});var F4=s(Ya);xRo=r(F4,"The model class to instantiate is selected based on the "),yse=n(F4,"CODE",{});var tUr=s(yse);kRo=r(tUr,"model_type"),tUr.forEach(t),RRo=r(F4,` property of the config object (either
passed as an argument or loaded from `),wse=n(F4,"CODE",{});var aUr=s(wse);SRo=r(aUr,"pretrained_model_name_or_path"),aUr.forEach(t),PRo=r(F4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ase=n(F4,"CODE",{});var nUr=s(Ase);$Ro=r(nUr,"pretrained_model_name_or_path"),nUr.forEach(t),IRo=r(F4,":"),F4.forEach(t),jRo=i(Vt),Lse=n(Vt,"UL",{});var sUr=s(Lse);L2=n(sUr,"LI",{});var g3e=s(L2);Bse=n(g3e,"STRONG",{});var lUr=s(Bse);NRo=r(lUr,"vision-encoder-decoder"),lUr.forEach(t),DRo=r(g3e," \u2014 "),aN=n(g3e,"A",{href:!0});var iUr=s(aN);qRo=r(iUr,"VisionEncoderDecoderModel"),iUr.forEach(t),GRo=r(g3e," (Vision Encoder decoder model)"),g3e.forEach(t),sUr.forEach(t),ORo=i(Vt),B2=n(Vt,"P",{});var h3e=s(B2);XRo=r(h3e,"The model is set in evaluation mode by default using "),xse=n(h3e,"CODE",{});var dUr=s(xse);zRo=r(dUr,"model.eval()"),dUr.forEach(t),VRo=r(h3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kse=n(h3e,"CODE",{});var cUr=s(kse);WRo=r(cUr,"model.train()"),cUr.forEach(t),h3e.forEach(t),QRo=i(Vt),Rse=n(Vt,"P",{});var fUr=s(Rse);HRo=r(fUr,"Examples:"),fUr.forEach(t),URo=i(Vt),m(v3.$$.fragment,Vt),Vt.forEach(t),dl.forEach(t),JLe=i(d),yd=n(d,"H2",{class:!0});var txe=s(yd);x2=n(txe,"A",{id:!0,class:!0,href:!0});var mUr=s(x2);Sse=n(mUr,"SPAN",{});var gUr=s(Sse);m(T3.$$.fragment,gUr),gUr.forEach(t),mUr.forEach(t),JRo=i(txe),Pse=n(txe,"SPAN",{});var hUr=s(Pse);YRo=r(hUr,"AutoModelForAudioClassification"),hUr.forEach(t),txe.forEach(t),YLe=i(d),ar=n(d,"DIV",{class:!0});var fl=s(ar);m(F3.$$.fragment,fl),KRo=i(fl),wd=n(fl,"P",{});var Mz=s(wd);ZRo=r(Mz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),$se=n(Mz,"CODE",{});var pUr=s($se);eSo=r(pUr,"from_pretrained()"),pUr.forEach(t),oSo=r(Mz,"class method or the "),Ise=n(Mz,"CODE",{});var _Ur=s(Ise);rSo=r(_Ur,"from_config()"),_Ur.forEach(t),tSo=r(Mz,`class
method.`),Mz.forEach(t),aSo=i(fl),C3=n(fl,"P",{});var axe=s(C3);nSo=r(axe,"This class cannot be instantiated directly using "),jse=n(axe,"CODE",{});var uUr=s(jse);sSo=r(uUr,"__init__()"),uUr.forEach(t),lSo=r(axe," (throws an error)."),axe.forEach(t),iSo=i(fl),Yr=n(fl,"DIV",{class:!0});var ml=s(Yr);m(M3.$$.fragment,ml),dSo=i(ml),Nse=n(ml,"P",{});var bUr=s(Nse);cSo=r(bUr,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),bUr.forEach(t),fSo=i(ml),Ad=n(ml,"P",{});var Ez=s(Ad);mSo=r(Ez,`Note:
Loading a model from its configuration file does `),Dse=n(Ez,"STRONG",{});var vUr=s(Dse);gSo=r(vUr,"not"),vUr.forEach(t),hSo=r(Ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),qse=n(Ez,"CODE",{});var TUr=s(qse);pSo=r(TUr,"from_pretrained()"),TUr.forEach(t),_So=r(Ez,"to load the model weights."),Ez.forEach(t),uSo=i(ml),Gse=n(ml,"P",{});var FUr=s(Gse);bSo=r(FUr,"Examples:"),FUr.forEach(t),vSo=i(ml),m(E3.$$.fragment,ml),ml.forEach(t),TSo=i(fl),Xe=n(fl,"DIV",{class:!0});var Wt=s(Xe);m(y3.$$.fragment,Wt),FSo=i(Wt),Ose=n(Wt,"P",{});var CUr=s(Ose);CSo=r(CUr,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),CUr.forEach(t),MSo=i(Wt),Ka=n(Wt,"P",{});var C4=s(Ka);ESo=r(C4,"The model class to instantiate is selected based on the "),Xse=n(C4,"CODE",{});var MUr=s(Xse);ySo=r(MUr,"model_type"),MUr.forEach(t),wSo=r(C4,` property of the config object (either
passed as an argument or loaded from `),zse=n(C4,"CODE",{});var EUr=s(zse);ASo=r(EUr,"pretrained_model_name_or_path"),EUr.forEach(t),LSo=r(C4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vse=n(C4,"CODE",{});var yUr=s(Vse);BSo=r(yUr,"pretrained_model_name_or_path"),yUr.forEach(t),xSo=r(C4,":"),C4.forEach(t),kSo=i(Wt),ao=n(Wt,"UL",{});var Qt=s(ao);k2=n(Qt,"LI",{});var p3e=s(k2);Wse=n(p3e,"STRONG",{});var wUr=s(Wse);RSo=r(wUr,"hubert"),wUr.forEach(t),SSo=r(p3e," \u2014 "),nN=n(p3e,"A",{href:!0});var AUr=s(nN);PSo=r(AUr,"HubertForSequenceClassification"),AUr.forEach(t),$So=r(p3e," (Hubert model)"),p3e.forEach(t),ISo=i(Qt),R2=n(Qt,"LI",{});var _3e=s(R2);Qse=n(_3e,"STRONG",{});var LUr=s(Qse);jSo=r(LUr,"sew"),LUr.forEach(t),NSo=r(_3e," \u2014 "),sN=n(_3e,"A",{href:!0});var BUr=s(sN);DSo=r(BUr,"SEWForSequenceClassification"),BUr.forEach(t),qSo=r(_3e," (SEW model)"),_3e.forEach(t),GSo=i(Qt),S2=n(Qt,"LI",{});var u3e=s(S2);Hse=n(u3e,"STRONG",{});var xUr=s(Hse);OSo=r(xUr,"sew-d"),xUr.forEach(t),XSo=r(u3e," \u2014 "),lN=n(u3e,"A",{href:!0});var kUr=s(lN);zSo=r(kUr,"SEWDForSequenceClassification"),kUr.forEach(t),VSo=r(u3e," (SEW-D model)"),u3e.forEach(t),WSo=i(Qt),P2=n(Qt,"LI",{});var b3e=s(P2);Use=n(b3e,"STRONG",{});var RUr=s(Use);QSo=r(RUr,"unispeech"),RUr.forEach(t),HSo=r(b3e," \u2014 "),iN=n(b3e,"A",{href:!0});var SUr=s(iN);USo=r(SUr,"UniSpeechForSequenceClassification"),SUr.forEach(t),JSo=r(b3e," (UniSpeech model)"),b3e.forEach(t),YSo=i(Qt),$2=n(Qt,"LI",{});var v3e=s($2);Jse=n(v3e,"STRONG",{});var PUr=s(Jse);KSo=r(PUr,"unispeech-sat"),PUr.forEach(t),ZSo=r(v3e," \u2014 "),dN=n(v3e,"A",{href:!0});var $Ur=s(dN);ePo=r($Ur,"UniSpeechSatForSequenceClassification"),$Ur.forEach(t),oPo=r(v3e," (UniSpeechSat model)"),v3e.forEach(t),rPo=i(Qt),I2=n(Qt,"LI",{});var T3e=s(I2);Yse=n(T3e,"STRONG",{});var IUr=s(Yse);tPo=r(IUr,"wav2vec2"),IUr.forEach(t),aPo=r(T3e," \u2014 "),cN=n(T3e,"A",{href:!0});var jUr=s(cN);nPo=r(jUr,"Wav2Vec2ForSequenceClassification"),jUr.forEach(t),sPo=r(T3e," (Wav2Vec2 model)"),T3e.forEach(t),lPo=i(Qt),j2=n(Qt,"LI",{});var F3e=s(j2);Kse=n(F3e,"STRONG",{});var NUr=s(Kse);iPo=r(NUr,"wavlm"),NUr.forEach(t),dPo=r(F3e," \u2014 "),fN=n(F3e,"A",{href:!0});var DUr=s(fN);cPo=r(DUr,"WavLMForSequenceClassification"),DUr.forEach(t),fPo=r(F3e," (WavLM model)"),F3e.forEach(t),Qt.forEach(t),mPo=i(Wt),N2=n(Wt,"P",{});var C3e=s(N2);gPo=r(C3e,"The model is set in evaluation mode by default using "),Zse=n(C3e,"CODE",{});var qUr=s(Zse);hPo=r(qUr,"model.eval()"),qUr.forEach(t),pPo=r(C3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ele=n(C3e,"CODE",{});var GUr=s(ele);_Po=r(GUr,"model.train()"),GUr.forEach(t),C3e.forEach(t),uPo=i(Wt),ole=n(Wt,"P",{});var OUr=s(ole);bPo=r(OUr,"Examples:"),OUr.forEach(t),vPo=i(Wt),m(w3.$$.fragment,Wt),Wt.forEach(t),fl.forEach(t),KLe=i(d),Ld=n(d,"H2",{class:!0});var nxe=s(Ld);D2=n(nxe,"A",{id:!0,class:!0,href:!0});var XUr=s(D2);rle=n(XUr,"SPAN",{});var zUr=s(rle);m(A3.$$.fragment,zUr),zUr.forEach(t),XUr.forEach(t),TPo=i(nxe),tle=n(nxe,"SPAN",{});var VUr=s(tle);FPo=r(VUr,"AutoModelForAudioFrameClassification"),VUr.forEach(t),nxe.forEach(t),ZLe=i(d),nr=n(d,"DIV",{class:!0});var gl=s(nr);m(L3.$$.fragment,gl),CPo=i(gl),Bd=n(gl,"P",{});var yz=s(Bd);MPo=r(yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ale=n(yz,"CODE",{});var WUr=s(ale);EPo=r(WUr,"from_pretrained()"),WUr.forEach(t),yPo=r(yz,"class method or the "),nle=n(yz,"CODE",{});var QUr=s(nle);wPo=r(QUr,"from_config()"),QUr.forEach(t),APo=r(yz,`class
method.`),yz.forEach(t),LPo=i(gl),B3=n(gl,"P",{});var sxe=s(B3);BPo=r(sxe,"This class cannot be instantiated directly using "),sle=n(sxe,"CODE",{});var HUr=s(sle);xPo=r(HUr,"__init__()"),HUr.forEach(t),kPo=r(sxe," (throws an error)."),sxe.forEach(t),RPo=i(gl),Kr=n(gl,"DIV",{class:!0});var hl=s(Kr);m(x3.$$.fragment,hl),SPo=i(hl),lle=n(hl,"P",{});var UUr=s(lle);PPo=r(UUr,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),UUr.forEach(t),$Po=i(hl),xd=n(hl,"P",{});var wz=s(xd);IPo=r(wz,`Note:
Loading a model from its configuration file does `),ile=n(wz,"STRONG",{});var JUr=s(ile);jPo=r(JUr,"not"),JUr.forEach(t),NPo=r(wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),dle=n(wz,"CODE",{});var YUr=s(dle);DPo=r(YUr,"from_pretrained()"),YUr.forEach(t),qPo=r(wz,"to load the model weights."),wz.forEach(t),GPo=i(hl),cle=n(hl,"P",{});var KUr=s(cle);OPo=r(KUr,"Examples:"),KUr.forEach(t),XPo=i(hl),m(k3.$$.fragment,hl),hl.forEach(t),zPo=i(gl),ze=n(gl,"DIV",{class:!0});var Ht=s(ze);m(R3.$$.fragment,Ht),VPo=i(Ht),fle=n(Ht,"P",{});var ZUr=s(fle);WPo=r(ZUr,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),ZUr.forEach(t),QPo=i(Ht),Za=n(Ht,"P",{});var M4=s(Za);HPo=r(M4,"The model class to instantiate is selected based on the "),mle=n(M4,"CODE",{});var eJr=s(mle);UPo=r(eJr,"model_type"),eJr.forEach(t),JPo=r(M4,` property of the config object (either
passed as an argument or loaded from `),gle=n(M4,"CODE",{});var oJr=s(gle);YPo=r(oJr,"pretrained_model_name_or_path"),oJr.forEach(t),KPo=r(M4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hle=n(M4,"CODE",{});var rJr=s(hle);ZPo=r(rJr,"pretrained_model_name_or_path"),rJr.forEach(t),e$o=r(M4,":"),M4.forEach(t),o$o=i(Ht),kd=n(Ht,"UL",{});var Az=s(kd);q2=n(Az,"LI",{});var M3e=s(q2);ple=n(M3e,"STRONG",{});var tJr=s(ple);r$o=r(tJr,"unispeech-sat"),tJr.forEach(t),t$o=r(M3e," \u2014 "),mN=n(M3e,"A",{href:!0});var aJr=s(mN);a$o=r(aJr,"UniSpeechSatForAudioFrameClassification"),aJr.forEach(t),n$o=r(M3e," (UniSpeechSat model)"),M3e.forEach(t),s$o=i(Az),G2=n(Az,"LI",{});var E3e=s(G2);_le=n(E3e,"STRONG",{});var nJr=s(_le);l$o=r(nJr,"wav2vec2"),nJr.forEach(t),i$o=r(E3e," \u2014 "),gN=n(E3e,"A",{href:!0});var sJr=s(gN);d$o=r(sJr,"Wav2Vec2ForAudioFrameClassification"),sJr.forEach(t),c$o=r(E3e," (Wav2Vec2 model)"),E3e.forEach(t),f$o=i(Az),O2=n(Az,"LI",{});var y3e=s(O2);ule=n(y3e,"STRONG",{});var lJr=s(ule);m$o=r(lJr,"wavlm"),lJr.forEach(t),g$o=r(y3e," \u2014 "),hN=n(y3e,"A",{href:!0});var iJr=s(hN);h$o=r(iJr,"WavLMForAudioFrameClassification"),iJr.forEach(t),p$o=r(y3e," (WavLM model)"),y3e.forEach(t),Az.forEach(t),_$o=i(Ht),X2=n(Ht,"P",{});var w3e=s(X2);u$o=r(w3e,"The model is set in evaluation mode by default using "),ble=n(w3e,"CODE",{});var dJr=s(ble);b$o=r(dJr,"model.eval()"),dJr.forEach(t),v$o=r(w3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vle=n(w3e,"CODE",{});var cJr=s(vle);T$o=r(cJr,"model.train()"),cJr.forEach(t),w3e.forEach(t),F$o=i(Ht),Tle=n(Ht,"P",{});var fJr=s(Tle);C$o=r(fJr,"Examples:"),fJr.forEach(t),M$o=i(Ht),m(S3.$$.fragment,Ht),Ht.forEach(t),gl.forEach(t),e7e=i(d),Rd=n(d,"H2",{class:!0});var lxe=s(Rd);z2=n(lxe,"A",{id:!0,class:!0,href:!0});var mJr=s(z2);Fle=n(mJr,"SPAN",{});var gJr=s(Fle);m(P3.$$.fragment,gJr),gJr.forEach(t),mJr.forEach(t),E$o=i(lxe),Cle=n(lxe,"SPAN",{});var hJr=s(Cle);y$o=r(hJr,"AutoModelForCTC"),hJr.forEach(t),lxe.forEach(t),o7e=i(d),sr=n(d,"DIV",{class:!0});var pl=s(sr);m($3.$$.fragment,pl),w$o=i(pl),Sd=n(pl,"P",{});var Lz=s(Sd);A$o=r(Lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Mle=n(Lz,"CODE",{});var pJr=s(Mle);L$o=r(pJr,"from_pretrained()"),pJr.forEach(t),B$o=r(Lz,"class method or the "),Ele=n(Lz,"CODE",{});var _Jr=s(Ele);x$o=r(_Jr,"from_config()"),_Jr.forEach(t),k$o=r(Lz,`class
method.`),Lz.forEach(t),R$o=i(pl),I3=n(pl,"P",{});var ixe=s(I3);S$o=r(ixe,"This class cannot be instantiated directly using "),yle=n(ixe,"CODE",{});var uJr=s(yle);P$o=r(uJr,"__init__()"),uJr.forEach(t),$$o=r(ixe," (throws an error)."),ixe.forEach(t),I$o=i(pl),Zr=n(pl,"DIV",{class:!0});var _l=s(Zr);m(j3.$$.fragment,_l),j$o=i(_l),wle=n(_l,"P",{});var bJr=s(wle);N$o=r(bJr,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),bJr.forEach(t),D$o=i(_l),Pd=n(_l,"P",{});var Bz=s(Pd);q$o=r(Bz,`Note:
Loading a model from its configuration file does `),Ale=n(Bz,"STRONG",{});var vJr=s(Ale);G$o=r(vJr,"not"),vJr.forEach(t),O$o=r(Bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lle=n(Bz,"CODE",{});var TJr=s(Lle);X$o=r(TJr,"from_pretrained()"),TJr.forEach(t),z$o=r(Bz,"to load the model weights."),Bz.forEach(t),V$o=i(_l),Ble=n(_l,"P",{});var FJr=s(Ble);W$o=r(FJr,"Examples:"),FJr.forEach(t),Q$o=i(_l),m(N3.$$.fragment,_l),_l.forEach(t),H$o=i(pl),Ve=n(pl,"DIV",{class:!0});var Ut=s(Ve);m(D3.$$.fragment,Ut),U$o=i(Ut),xle=n(Ut,"P",{});var CJr=s(xle);J$o=r(CJr,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),CJr.forEach(t),Y$o=i(Ut),en=n(Ut,"P",{});var E4=s(en);K$o=r(E4,"The model class to instantiate is selected based on the "),kle=n(E4,"CODE",{});var MJr=s(kle);Z$o=r(MJr,"model_type"),MJr.forEach(t),eIo=r(E4,` property of the config object (either
passed as an argument or loaded from `),Rle=n(E4,"CODE",{});var EJr=s(Rle);oIo=r(EJr,"pretrained_model_name_or_path"),EJr.forEach(t),rIo=r(E4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sle=n(E4,"CODE",{});var yJr=s(Sle);tIo=r(yJr,"pretrained_model_name_or_path"),yJr.forEach(t),aIo=r(E4,":"),E4.forEach(t),nIo=i(Ut),no=n(Ut,"UL",{});var Jt=s(no);V2=n(Jt,"LI",{});var A3e=s(V2);Ple=n(A3e,"STRONG",{});var wJr=s(Ple);sIo=r(wJr,"hubert"),wJr.forEach(t),lIo=r(A3e," \u2014 "),pN=n(A3e,"A",{href:!0});var AJr=s(pN);iIo=r(AJr,"HubertForCTC"),AJr.forEach(t),dIo=r(A3e," (Hubert model)"),A3e.forEach(t),cIo=i(Jt),W2=n(Jt,"LI",{});var L3e=s(W2);$le=n(L3e,"STRONG",{});var LJr=s($le);fIo=r(LJr,"sew"),LJr.forEach(t),mIo=r(L3e," \u2014 "),_N=n(L3e,"A",{href:!0});var BJr=s(_N);gIo=r(BJr,"SEWForCTC"),BJr.forEach(t),hIo=r(L3e," (SEW model)"),L3e.forEach(t),pIo=i(Jt),Q2=n(Jt,"LI",{});var B3e=s(Q2);Ile=n(B3e,"STRONG",{});var xJr=s(Ile);_Io=r(xJr,"sew-d"),xJr.forEach(t),uIo=r(B3e," \u2014 "),uN=n(B3e,"A",{href:!0});var kJr=s(uN);bIo=r(kJr,"SEWDForCTC"),kJr.forEach(t),vIo=r(B3e," (SEW-D model)"),B3e.forEach(t),TIo=i(Jt),H2=n(Jt,"LI",{});var x3e=s(H2);jle=n(x3e,"STRONG",{});var RJr=s(jle);FIo=r(RJr,"unispeech"),RJr.forEach(t),CIo=r(x3e," \u2014 "),bN=n(x3e,"A",{href:!0});var SJr=s(bN);MIo=r(SJr,"UniSpeechForCTC"),SJr.forEach(t),EIo=r(x3e," (UniSpeech model)"),x3e.forEach(t),yIo=i(Jt),U2=n(Jt,"LI",{});var k3e=s(U2);Nle=n(k3e,"STRONG",{});var PJr=s(Nle);wIo=r(PJr,"unispeech-sat"),PJr.forEach(t),AIo=r(k3e," \u2014 "),vN=n(k3e,"A",{href:!0});var $Jr=s(vN);LIo=r($Jr,"UniSpeechSatForCTC"),$Jr.forEach(t),BIo=r(k3e," (UniSpeechSat model)"),k3e.forEach(t),xIo=i(Jt),J2=n(Jt,"LI",{});var R3e=s(J2);Dle=n(R3e,"STRONG",{});var IJr=s(Dle);kIo=r(IJr,"wav2vec2"),IJr.forEach(t),RIo=r(R3e," \u2014 "),TN=n(R3e,"A",{href:!0});var jJr=s(TN);SIo=r(jJr,"Wav2Vec2ForCTC"),jJr.forEach(t),PIo=r(R3e," (Wav2Vec2 model)"),R3e.forEach(t),$Io=i(Jt),Y2=n(Jt,"LI",{});var S3e=s(Y2);qle=n(S3e,"STRONG",{});var NJr=s(qle);IIo=r(NJr,"wavlm"),NJr.forEach(t),jIo=r(S3e," \u2014 "),FN=n(S3e,"A",{href:!0});var DJr=s(FN);NIo=r(DJr,"WavLMForCTC"),DJr.forEach(t),DIo=r(S3e," (WavLM model)"),S3e.forEach(t),Jt.forEach(t),qIo=i(Ut),K2=n(Ut,"P",{});var P3e=s(K2);GIo=r(P3e,"The model is set in evaluation mode by default using "),Gle=n(P3e,"CODE",{});var qJr=s(Gle);OIo=r(qJr,"model.eval()"),qJr.forEach(t),XIo=r(P3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ole=n(P3e,"CODE",{});var GJr=s(Ole);zIo=r(GJr,"model.train()"),GJr.forEach(t),P3e.forEach(t),VIo=i(Ut),Xle=n(Ut,"P",{});var OJr=s(Xle);WIo=r(OJr,"Examples:"),OJr.forEach(t),QIo=i(Ut),m(q3.$$.fragment,Ut),Ut.forEach(t),pl.forEach(t),r7e=i(d),$d=n(d,"H2",{class:!0});var dxe=s($d);Z2=n(dxe,"A",{id:!0,class:!0,href:!0});var XJr=s(Z2);zle=n(XJr,"SPAN",{});var zJr=s(zle);m(G3.$$.fragment,zJr),zJr.forEach(t),XJr.forEach(t),HIo=i(dxe),Vle=n(dxe,"SPAN",{});var VJr=s(Vle);UIo=r(VJr,"AutoModelForSpeechSeq2Seq"),VJr.forEach(t),dxe.forEach(t),t7e=i(d),lr=n(d,"DIV",{class:!0});var ul=s(lr);m(O3.$$.fragment,ul),JIo=i(ul),Id=n(ul,"P",{});var xz=s(Id);YIo=r(xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Wle=n(xz,"CODE",{});var WJr=s(Wle);KIo=r(WJr,"from_pretrained()"),WJr.forEach(t),ZIo=r(xz,"class method or the "),Qle=n(xz,"CODE",{});var QJr=s(Qle);ejo=r(QJr,"from_config()"),QJr.forEach(t),ojo=r(xz,`class
method.`),xz.forEach(t),rjo=i(ul),X3=n(ul,"P",{});var cxe=s(X3);tjo=r(cxe,"This class cannot be instantiated directly using "),Hle=n(cxe,"CODE",{});var HJr=s(Hle);ajo=r(HJr,"__init__()"),HJr.forEach(t),njo=r(cxe," (throws an error)."),cxe.forEach(t),sjo=i(ul),et=n(ul,"DIV",{class:!0});var bl=s(et);m(z3.$$.fragment,bl),ljo=i(bl),Ule=n(bl,"P",{});var UJr=s(Ule);ijo=r(UJr,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),UJr.forEach(t),djo=i(bl),jd=n(bl,"P",{});var kz=s(jd);cjo=r(kz,`Note:
Loading a model from its configuration file does `),Jle=n(kz,"STRONG",{});var JJr=s(Jle);fjo=r(JJr,"not"),JJr.forEach(t),mjo=r(kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yle=n(kz,"CODE",{});var YJr=s(Yle);gjo=r(YJr,"from_pretrained()"),YJr.forEach(t),hjo=r(kz,"to load the model weights."),kz.forEach(t),pjo=i(bl),Kle=n(bl,"P",{});var KJr=s(Kle);_jo=r(KJr,"Examples:"),KJr.forEach(t),ujo=i(bl),m(V3.$$.fragment,bl),bl.forEach(t),bjo=i(ul),We=n(ul,"DIV",{class:!0});var Yt=s(We);m(W3.$$.fragment,Yt),vjo=i(Yt),Zle=n(Yt,"P",{});var ZJr=s(Zle);Tjo=r(ZJr,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ZJr.forEach(t),Fjo=i(Yt),on=n(Yt,"P",{});var y4=s(on);Cjo=r(y4,"The model class to instantiate is selected based on the "),eie=n(y4,"CODE",{});var eYr=s(eie);Mjo=r(eYr,"model_type"),eYr.forEach(t),Ejo=r(y4,` property of the config object (either
passed as an argument or loaded from `),oie=n(y4,"CODE",{});var oYr=s(oie);yjo=r(oYr,"pretrained_model_name_or_path"),oYr.forEach(t),wjo=r(y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rie=n(y4,"CODE",{});var rYr=s(rie);Ajo=r(rYr,"pretrained_model_name_or_path"),rYr.forEach(t),Ljo=r(y4,":"),y4.forEach(t),Bjo=i(Yt),Q3=n(Yt,"UL",{});var fxe=s(Q3);ev=n(fxe,"LI",{});var $3e=s(ev);tie=n($3e,"STRONG",{});var tYr=s(tie);xjo=r(tYr,"speech-encoder-decoder"),tYr.forEach(t),kjo=r($3e," \u2014 "),CN=n($3e,"A",{href:!0});var aYr=s(CN);Rjo=r(aYr,"SpeechEncoderDecoderModel"),aYr.forEach(t),Sjo=r($3e," (Speech Encoder decoder model)"),$3e.forEach(t),Pjo=i(fxe),ov=n(fxe,"LI",{});var I3e=s(ov);aie=n(I3e,"STRONG",{});var nYr=s(aie);$jo=r(nYr,"speech_to_text"),nYr.forEach(t),Ijo=r(I3e," \u2014 "),MN=n(I3e,"A",{href:!0});var sYr=s(MN);jjo=r(sYr,"Speech2TextForConditionalGeneration"),sYr.forEach(t),Njo=r(I3e," (Speech2Text model)"),I3e.forEach(t),fxe.forEach(t),Djo=i(Yt),rv=n(Yt,"P",{});var j3e=s(rv);qjo=r(j3e,"The model is set in evaluation mode by default using "),nie=n(j3e,"CODE",{});var lYr=s(nie);Gjo=r(lYr,"model.eval()"),lYr.forEach(t),Ojo=r(j3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sie=n(j3e,"CODE",{});var iYr=s(sie);Xjo=r(iYr,"model.train()"),iYr.forEach(t),j3e.forEach(t),zjo=i(Yt),lie=n(Yt,"P",{});var dYr=s(lie);Vjo=r(dYr,"Examples:"),dYr.forEach(t),Wjo=i(Yt),m(H3.$$.fragment,Yt),Yt.forEach(t),ul.forEach(t),a7e=i(d),Nd=n(d,"H2",{class:!0});var mxe=s(Nd);tv=n(mxe,"A",{id:!0,class:!0,href:!0});var cYr=s(tv);iie=n(cYr,"SPAN",{});var fYr=s(iie);m(U3.$$.fragment,fYr),fYr.forEach(t),cYr.forEach(t),Qjo=i(mxe),die=n(mxe,"SPAN",{});var mYr=s(die);Hjo=r(mYr,"AutoModelForAudioXVector"),mYr.forEach(t),mxe.forEach(t),n7e=i(d),ir=n(d,"DIV",{class:!0});var vl=s(ir);m(J3.$$.fragment,vl),Ujo=i(vl),Dd=n(vl,"P",{});var Rz=s(Dd);Jjo=r(Rz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),cie=n(Rz,"CODE",{});var gYr=s(cie);Yjo=r(gYr,"from_pretrained()"),gYr.forEach(t),Kjo=r(Rz,"class method or the "),fie=n(Rz,"CODE",{});var hYr=s(fie);Zjo=r(hYr,"from_config()"),hYr.forEach(t),eNo=r(Rz,`class
method.`),Rz.forEach(t),oNo=i(vl),Y3=n(vl,"P",{});var gxe=s(Y3);rNo=r(gxe,"This class cannot be instantiated directly using "),mie=n(gxe,"CODE",{});var pYr=s(mie);tNo=r(pYr,"__init__()"),pYr.forEach(t),aNo=r(gxe," (throws an error)."),gxe.forEach(t),nNo=i(vl),ot=n(vl,"DIV",{class:!0});var Tl=s(ot);m(K3.$$.fragment,Tl),sNo=i(Tl),gie=n(Tl,"P",{});var _Yr=s(gie);lNo=r(_Yr,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),_Yr.forEach(t),iNo=i(Tl),qd=n(Tl,"P",{});var Sz=s(qd);dNo=r(Sz,`Note:
Loading a model from its configuration file does `),hie=n(Sz,"STRONG",{});var uYr=s(hie);cNo=r(uYr,"not"),uYr.forEach(t),fNo=r(Sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),pie=n(Sz,"CODE",{});var bYr=s(pie);mNo=r(bYr,"from_pretrained()"),bYr.forEach(t),gNo=r(Sz,"to load the model weights."),Sz.forEach(t),hNo=i(Tl),_ie=n(Tl,"P",{});var vYr=s(_ie);pNo=r(vYr,"Examples:"),vYr.forEach(t),_No=i(Tl),m(Z3.$$.fragment,Tl),Tl.forEach(t),uNo=i(vl),Qe=n(vl,"DIV",{class:!0});var Kt=s(Qe);m(ey.$$.fragment,Kt),bNo=i(Kt),uie=n(Kt,"P",{});var TYr=s(uie);vNo=r(TYr,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),TYr.forEach(t),TNo=i(Kt),rn=n(Kt,"P",{});var w4=s(rn);FNo=r(w4,"The model class to instantiate is selected based on the "),bie=n(w4,"CODE",{});var FYr=s(bie);CNo=r(FYr,"model_type"),FYr.forEach(t),MNo=r(w4,` property of the config object (either
passed as an argument or loaded from `),vie=n(w4,"CODE",{});var CYr=s(vie);ENo=r(CYr,"pretrained_model_name_or_path"),CYr.forEach(t),yNo=r(w4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tie=n(w4,"CODE",{});var MYr=s(Tie);wNo=r(MYr,"pretrained_model_name_or_path"),MYr.forEach(t),ANo=r(w4,":"),w4.forEach(t),LNo=i(Kt),Gd=n(Kt,"UL",{});var Pz=s(Gd);av=n(Pz,"LI",{});var N3e=s(av);Fie=n(N3e,"STRONG",{});var EYr=s(Fie);BNo=r(EYr,"unispeech-sat"),EYr.forEach(t),xNo=r(N3e," \u2014 "),EN=n(N3e,"A",{href:!0});var yYr=s(EN);kNo=r(yYr,"UniSpeechSatForXVector"),yYr.forEach(t),RNo=r(N3e," (UniSpeechSat model)"),N3e.forEach(t),SNo=i(Pz),nv=n(Pz,"LI",{});var D3e=s(nv);Cie=n(D3e,"STRONG",{});var wYr=s(Cie);PNo=r(wYr,"wav2vec2"),wYr.forEach(t),$No=r(D3e," \u2014 "),yN=n(D3e,"A",{href:!0});var AYr=s(yN);INo=r(AYr,"Wav2Vec2ForXVector"),AYr.forEach(t),jNo=r(D3e," (Wav2Vec2 model)"),D3e.forEach(t),NNo=i(Pz),sv=n(Pz,"LI",{});var q3e=s(sv);Mie=n(q3e,"STRONG",{});var LYr=s(Mie);DNo=r(LYr,"wavlm"),LYr.forEach(t),qNo=r(q3e," \u2014 "),wN=n(q3e,"A",{href:!0});var BYr=s(wN);GNo=r(BYr,"WavLMForXVector"),BYr.forEach(t),ONo=r(q3e," (WavLM model)"),q3e.forEach(t),Pz.forEach(t),XNo=i(Kt),lv=n(Kt,"P",{});var G3e=s(lv);zNo=r(G3e,"The model is set in evaluation mode by default using "),Eie=n(G3e,"CODE",{});var xYr=s(Eie);VNo=r(xYr,"model.eval()"),xYr.forEach(t),WNo=r(G3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yie=n(G3e,"CODE",{});var kYr=s(yie);QNo=r(kYr,"model.train()"),kYr.forEach(t),G3e.forEach(t),HNo=i(Kt),wie=n(Kt,"P",{});var RYr=s(wie);UNo=r(RYr,"Examples:"),RYr.forEach(t),JNo=i(Kt),m(oy.$$.fragment,Kt),Kt.forEach(t),vl.forEach(t),s7e=i(d),Od=n(d,"H2",{class:!0});var hxe=s(Od);iv=n(hxe,"A",{id:!0,class:!0,href:!0});var SYr=s(iv);Aie=n(SYr,"SPAN",{});var PYr=s(Aie);m(ry.$$.fragment,PYr),PYr.forEach(t),SYr.forEach(t),YNo=i(hxe),Lie=n(hxe,"SPAN",{});var $Yr=s(Lie);KNo=r($Yr,"AutoModelForMaskedImageModeling"),$Yr.forEach(t),hxe.forEach(t),l7e=i(d),dr=n(d,"DIV",{class:!0});var Fl=s(dr);m(ty.$$.fragment,Fl),ZNo=i(Fl),Xd=n(Fl,"P",{});var $z=s(Xd);eDo=r($z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Bie=n($z,"CODE",{});var IYr=s(Bie);oDo=r(IYr,"from_pretrained()"),IYr.forEach(t),rDo=r($z,"class method or the "),xie=n($z,"CODE",{});var jYr=s(xie);tDo=r(jYr,"from_config()"),jYr.forEach(t),aDo=r($z,`class
method.`),$z.forEach(t),nDo=i(Fl),ay=n(Fl,"P",{});var pxe=s(ay);sDo=r(pxe,"This class cannot be instantiated directly using "),kie=n(pxe,"CODE",{});var NYr=s(kie);lDo=r(NYr,"__init__()"),NYr.forEach(t),iDo=r(pxe," (throws an error)."),pxe.forEach(t),dDo=i(Fl),rt=n(Fl,"DIV",{class:!0});var Cl=s(rt);m(ny.$$.fragment,Cl),cDo=i(Cl),Rie=n(Cl,"P",{});var DYr=s(Rie);fDo=r(DYr,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),DYr.forEach(t),mDo=i(Cl),zd=n(Cl,"P",{});var Iz=s(zd);gDo=r(Iz,`Note:
Loading a model from its configuration file does `),Sie=n(Iz,"STRONG",{});var qYr=s(Sie);hDo=r(qYr,"not"),qYr.forEach(t),pDo=r(Iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pie=n(Iz,"CODE",{});var GYr=s(Pie);_Do=r(GYr,"from_pretrained()"),GYr.forEach(t),uDo=r(Iz,"to load the model weights."),Iz.forEach(t),bDo=i(Cl),$ie=n(Cl,"P",{});var OYr=s($ie);vDo=r(OYr,"Examples:"),OYr.forEach(t),TDo=i(Cl),m(sy.$$.fragment,Cl),Cl.forEach(t),FDo=i(Fl),He=n(Fl,"DIV",{class:!0});var Zt=s(He);m(ly.$$.fragment,Zt),CDo=i(Zt),Iie=n(Zt,"P",{});var XYr=s(Iie);MDo=r(XYr,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),XYr.forEach(t),EDo=i(Zt),tn=n(Zt,"P",{});var A4=s(tn);yDo=r(A4,"The model class to instantiate is selected based on the "),jie=n(A4,"CODE",{});var zYr=s(jie);wDo=r(zYr,"model_type"),zYr.forEach(t),ADo=r(A4,` property of the config object (either
passed as an argument or loaded from `),Nie=n(A4,"CODE",{});var VYr=s(Nie);LDo=r(VYr,"pretrained_model_name_or_path"),VYr.forEach(t),BDo=r(A4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=n(A4,"CODE",{});var WYr=s(Die);xDo=r(WYr,"pretrained_model_name_or_path"),WYr.forEach(t),kDo=r(A4,":"),A4.forEach(t),RDo=i(Zt),Vd=n(Zt,"UL",{});var jz=s(Vd);dv=n(jz,"LI",{});var O3e=s(dv);qie=n(O3e,"STRONG",{});var QYr=s(qie);SDo=r(QYr,"deit"),QYr.forEach(t),PDo=r(O3e," \u2014 "),AN=n(O3e,"A",{href:!0});var HYr=s(AN);$Do=r(HYr,"DeiTForMaskedImageModeling"),HYr.forEach(t),IDo=r(O3e," (DeiT model)"),O3e.forEach(t),jDo=i(jz),cv=n(jz,"LI",{});var X3e=s(cv);Gie=n(X3e,"STRONG",{});var UYr=s(Gie);NDo=r(UYr,"swin"),UYr.forEach(t),DDo=r(X3e," \u2014 "),LN=n(X3e,"A",{href:!0});var JYr=s(LN);qDo=r(JYr,"SwinForMaskedImageModeling"),JYr.forEach(t),GDo=r(X3e," (Swin model)"),X3e.forEach(t),ODo=i(jz),fv=n(jz,"LI",{});var z3e=s(fv);Oie=n(z3e,"STRONG",{});var YYr=s(Oie);XDo=r(YYr,"vit"),YYr.forEach(t),zDo=r(z3e," \u2014 "),BN=n(z3e,"A",{href:!0});var KYr=s(BN);VDo=r(KYr,"ViTForMaskedImageModeling"),KYr.forEach(t),WDo=r(z3e," (ViT model)"),z3e.forEach(t),jz.forEach(t),QDo=i(Zt),mv=n(Zt,"P",{});var V3e=s(mv);HDo=r(V3e,"The model is set in evaluation mode by default using "),Xie=n(V3e,"CODE",{});var ZYr=s(Xie);UDo=r(ZYr,"model.eval()"),ZYr.forEach(t),JDo=r(V3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zie=n(V3e,"CODE",{});var eKr=s(zie);YDo=r(eKr,"model.train()"),eKr.forEach(t),V3e.forEach(t),KDo=i(Zt),Vie=n(Zt,"P",{});var oKr=s(Vie);ZDo=r(oKr,"Examples:"),oKr.forEach(t),eqo=i(Zt),m(iy.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),i7e=i(d),Wd=n(d,"H2",{class:!0});var _xe=s(Wd);gv=n(_xe,"A",{id:!0,class:!0,href:!0});var rKr=s(gv);Wie=n(rKr,"SPAN",{});var tKr=s(Wie);m(dy.$$.fragment,tKr),tKr.forEach(t),rKr.forEach(t),oqo=i(_xe),Qie=n(_xe,"SPAN",{});var aKr=s(Qie);rqo=r(aKr,"AutoModelForObjectDetection"),aKr.forEach(t),_xe.forEach(t),d7e=i(d),cr=n(d,"DIV",{class:!0});var Ml=s(cr);m(cy.$$.fragment,Ml),tqo=i(Ml),Qd=n(Ml,"P",{});var Nz=s(Qd);aqo=r(Nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Hie=n(Nz,"CODE",{});var nKr=s(Hie);nqo=r(nKr,"from_pretrained()"),nKr.forEach(t),sqo=r(Nz,"class method or the "),Uie=n(Nz,"CODE",{});var sKr=s(Uie);lqo=r(sKr,"from_config()"),sKr.forEach(t),iqo=r(Nz,`class
method.`),Nz.forEach(t),dqo=i(Ml),fy=n(Ml,"P",{});var uxe=s(fy);cqo=r(uxe,"This class cannot be instantiated directly using "),Jie=n(uxe,"CODE",{});var lKr=s(Jie);fqo=r(lKr,"__init__()"),lKr.forEach(t),mqo=r(uxe," (throws an error)."),uxe.forEach(t),gqo=i(Ml),tt=n(Ml,"DIV",{class:!0});var El=s(tt);m(my.$$.fragment,El),hqo=i(El),Yie=n(El,"P",{});var iKr=s(Yie);pqo=r(iKr,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),iKr.forEach(t),_qo=i(El),Hd=n(El,"P",{});var Dz=s(Hd);uqo=r(Dz,`Note:
Loading a model from its configuration file does `),Kie=n(Dz,"STRONG",{});var dKr=s(Kie);bqo=r(dKr,"not"),dKr.forEach(t),vqo=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zie=n(Dz,"CODE",{});var cKr=s(Zie);Tqo=r(cKr,"from_pretrained()"),cKr.forEach(t),Fqo=r(Dz,"to load the model weights."),Dz.forEach(t),Cqo=i(El),ede=n(El,"P",{});var fKr=s(ede);Mqo=r(fKr,"Examples:"),fKr.forEach(t),Eqo=i(El),m(gy.$$.fragment,El),El.forEach(t),yqo=i(Ml),Ue=n(Ml,"DIV",{class:!0});var ea=s(Ue);m(hy.$$.fragment,ea),wqo=i(ea),ode=n(ea,"P",{});var mKr=s(ode);Aqo=r(mKr,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),mKr.forEach(t),Lqo=i(ea),an=n(ea,"P",{});var L4=s(an);Bqo=r(L4,"The model class to instantiate is selected based on the "),rde=n(L4,"CODE",{});var gKr=s(rde);xqo=r(gKr,"model_type"),gKr.forEach(t),kqo=r(L4,` property of the config object (either
passed as an argument or loaded from `),tde=n(L4,"CODE",{});var hKr=s(tde);Rqo=r(hKr,"pretrained_model_name_or_path"),hKr.forEach(t),Sqo=r(L4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=n(L4,"CODE",{});var pKr=s(ade);Pqo=r(pKr,"pretrained_model_name_or_path"),pKr.forEach(t),$qo=r(L4,":"),L4.forEach(t),Iqo=i(ea),nde=n(ea,"UL",{});var _Kr=s(nde);hv=n(_Kr,"LI",{});var W3e=s(hv);sde=n(W3e,"STRONG",{});var uKr=s(sde);jqo=r(uKr,"detr"),uKr.forEach(t),Nqo=r(W3e," \u2014 "),xN=n(W3e,"A",{href:!0});var bKr=s(xN);Dqo=r(bKr,"DetrForObjectDetection"),bKr.forEach(t),qqo=r(W3e," (DETR model)"),W3e.forEach(t),_Kr.forEach(t),Gqo=i(ea),pv=n(ea,"P",{});var Q3e=s(pv);Oqo=r(Q3e,"The model is set in evaluation mode by default using "),lde=n(Q3e,"CODE",{});var vKr=s(lde);Xqo=r(vKr,"model.eval()"),vKr.forEach(t),zqo=r(Q3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ide=n(Q3e,"CODE",{});var TKr=s(ide);Vqo=r(TKr,"model.train()"),TKr.forEach(t),Q3e.forEach(t),Wqo=i(ea),dde=n(ea,"P",{});var FKr=s(dde);Qqo=r(FKr,"Examples:"),FKr.forEach(t),Hqo=i(ea),m(py.$$.fragment,ea),ea.forEach(t),Ml.forEach(t),c7e=i(d),Ud=n(d,"H2",{class:!0});var bxe=s(Ud);_v=n(bxe,"A",{id:!0,class:!0,href:!0});var CKr=s(_v);cde=n(CKr,"SPAN",{});var MKr=s(cde);m(_y.$$.fragment,MKr),MKr.forEach(t),CKr.forEach(t),Uqo=i(bxe),fde=n(bxe,"SPAN",{});var EKr=s(fde);Jqo=r(EKr,"AutoModelForImageSegmentation"),EKr.forEach(t),bxe.forEach(t),f7e=i(d),fr=n(d,"DIV",{class:!0});var yl=s(fr);m(uy.$$.fragment,yl),Yqo=i(yl),Jd=n(yl,"P",{});var qz=s(Jd);Kqo=r(qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),mde=n(qz,"CODE",{});var yKr=s(mde);Zqo=r(yKr,"from_pretrained()"),yKr.forEach(t),eGo=r(qz,"class method or the "),gde=n(qz,"CODE",{});var wKr=s(gde);oGo=r(wKr,"from_config()"),wKr.forEach(t),rGo=r(qz,`class
method.`),qz.forEach(t),tGo=i(yl),by=n(yl,"P",{});var vxe=s(by);aGo=r(vxe,"This class cannot be instantiated directly using "),hde=n(vxe,"CODE",{});var AKr=s(hde);nGo=r(AKr,"__init__()"),AKr.forEach(t),sGo=r(vxe," (throws an error)."),vxe.forEach(t),lGo=i(yl),at=n(yl,"DIV",{class:!0});var wl=s(at);m(vy.$$.fragment,wl),iGo=i(wl),pde=n(wl,"P",{});var LKr=s(pde);dGo=r(LKr,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),LKr.forEach(t),cGo=i(wl),Yd=n(wl,"P",{});var Gz=s(Yd);fGo=r(Gz,`Note:
Loading a model from its configuration file does `),_de=n(Gz,"STRONG",{});var BKr=s(_de);mGo=r(BKr,"not"),BKr.forEach(t),gGo=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ude=n(Gz,"CODE",{});var xKr=s(ude);hGo=r(xKr,"from_pretrained()"),xKr.forEach(t),pGo=r(Gz,"to load the model weights."),Gz.forEach(t),_Go=i(wl),bde=n(wl,"P",{});var kKr=s(bde);uGo=r(kKr,"Examples:"),kKr.forEach(t),bGo=i(wl),m(Ty.$$.fragment,wl),wl.forEach(t),vGo=i(yl),Je=n(yl,"DIV",{class:!0});var oa=s(Je);m(Fy.$$.fragment,oa),TGo=i(oa),vde=n(oa,"P",{});var RKr=s(vde);FGo=r(RKr,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),RKr.forEach(t),CGo=i(oa),nn=n(oa,"P",{});var B4=s(nn);MGo=r(B4,"The model class to instantiate is selected based on the "),Tde=n(B4,"CODE",{});var SKr=s(Tde);EGo=r(SKr,"model_type"),SKr.forEach(t),yGo=r(B4,` property of the config object (either
passed as an argument or loaded from `),Fde=n(B4,"CODE",{});var PKr=s(Fde);wGo=r(PKr,"pretrained_model_name_or_path"),PKr.forEach(t),AGo=r(B4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cde=n(B4,"CODE",{});var $Kr=s(Cde);LGo=r($Kr,"pretrained_model_name_or_path"),$Kr.forEach(t),BGo=r(B4,":"),B4.forEach(t),xGo=i(oa),Mde=n(oa,"UL",{});var IKr=s(Mde);uv=n(IKr,"LI",{});var H3e=s(uv);Ede=n(H3e,"STRONG",{});var jKr=s(Ede);kGo=r(jKr,"detr"),jKr.forEach(t),RGo=r(H3e," \u2014 "),kN=n(H3e,"A",{href:!0});var NKr=s(kN);SGo=r(NKr,"DetrForSegmentation"),NKr.forEach(t),PGo=r(H3e," (DETR model)"),H3e.forEach(t),IKr.forEach(t),$Go=i(oa),bv=n(oa,"P",{});var U3e=s(bv);IGo=r(U3e,"The model is set in evaluation mode by default using "),yde=n(U3e,"CODE",{});var DKr=s(yde);jGo=r(DKr,"model.eval()"),DKr.forEach(t),NGo=r(U3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wde=n(U3e,"CODE",{});var qKr=s(wde);DGo=r(qKr,"model.train()"),qKr.forEach(t),U3e.forEach(t),qGo=i(oa),Ade=n(oa,"P",{});var GKr=s(Ade);GGo=r(GKr,"Examples:"),GKr.forEach(t),OGo=i(oa),m(Cy.$$.fragment,oa),oa.forEach(t),yl.forEach(t),m7e=i(d),Kd=n(d,"H2",{class:!0});var Txe=s(Kd);vv=n(Txe,"A",{id:!0,class:!0,href:!0});var OKr=s(vv);Lde=n(OKr,"SPAN",{});var XKr=s(Lde);m(My.$$.fragment,XKr),XKr.forEach(t),OKr.forEach(t),XGo=i(Txe),Bde=n(Txe,"SPAN",{});var zKr=s(Bde);zGo=r(zKr,"AutoModelForSemanticSegmentation"),zKr.forEach(t),Txe.forEach(t),g7e=i(d),mr=n(d,"DIV",{class:!0});var Al=s(mr);m(Ey.$$.fragment,Al),VGo=i(Al),Zd=n(Al,"P",{});var Oz=s(Zd);WGo=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),xde=n(Oz,"CODE",{});var VKr=s(xde);QGo=r(VKr,"from_pretrained()"),VKr.forEach(t),HGo=r(Oz,"class method or the "),kde=n(Oz,"CODE",{});var WKr=s(kde);UGo=r(WKr,"from_config()"),WKr.forEach(t),JGo=r(Oz,`class
method.`),Oz.forEach(t),YGo=i(Al),yy=n(Al,"P",{});var Fxe=s(yy);KGo=r(Fxe,"This class cannot be instantiated directly using "),Rde=n(Fxe,"CODE",{});var QKr=s(Rde);ZGo=r(QKr,"__init__()"),QKr.forEach(t),eOo=r(Fxe," (throws an error)."),Fxe.forEach(t),oOo=i(Al),nt=n(Al,"DIV",{class:!0});var Ll=s(nt);m(wy.$$.fragment,Ll),rOo=i(Ll),Sde=n(Ll,"P",{});var HKr=s(Sde);tOo=r(HKr,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),HKr.forEach(t),aOo=i(Ll),ec=n(Ll,"P",{});var Xz=s(ec);nOo=r(Xz,`Note:
Loading a model from its configuration file does `),Pde=n(Xz,"STRONG",{});var UKr=s(Pde);sOo=r(UKr,"not"),UKr.forEach(t),lOo=r(Xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),$de=n(Xz,"CODE",{});var JKr=s($de);iOo=r(JKr,"from_pretrained()"),JKr.forEach(t),dOo=r(Xz,"to load the model weights."),Xz.forEach(t),cOo=i(Ll),Ide=n(Ll,"P",{});var YKr=s(Ide);fOo=r(YKr,"Examples:"),YKr.forEach(t),mOo=i(Ll),m(Ay.$$.fragment,Ll),Ll.forEach(t),gOo=i(Al),Ye=n(Al,"DIV",{class:!0});var ra=s(Ye);m(Ly.$$.fragment,ra),hOo=i(ra),jde=n(ra,"P",{});var KKr=s(jde);pOo=r(KKr,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),KKr.forEach(t),_Oo=i(ra),sn=n(ra,"P",{});var x4=s(sn);uOo=r(x4,"The model class to instantiate is selected based on the "),Nde=n(x4,"CODE",{});var ZKr=s(Nde);bOo=r(ZKr,"model_type"),ZKr.forEach(t),vOo=r(x4,` property of the config object (either
passed as an argument or loaded from `),Dde=n(x4,"CODE",{});var eZr=s(Dde);TOo=r(eZr,"pretrained_model_name_or_path"),eZr.forEach(t),FOo=r(x4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qde=n(x4,"CODE",{});var oZr=s(qde);COo=r(oZr,"pretrained_model_name_or_path"),oZr.forEach(t),MOo=r(x4,":"),x4.forEach(t),EOo=i(ra),By=n(ra,"UL",{});var Cxe=s(By);Tv=n(Cxe,"LI",{});var J3e=s(Tv);Gde=n(J3e,"STRONG",{});var rZr=s(Gde);yOo=r(rZr,"beit"),rZr.forEach(t),wOo=r(J3e," \u2014 "),RN=n(J3e,"A",{href:!0});var tZr=s(RN);AOo=r(tZr,"BeitForSemanticSegmentation"),tZr.forEach(t),LOo=r(J3e," (BEiT model)"),J3e.forEach(t),BOo=i(Cxe),Fv=n(Cxe,"LI",{});var Y3e=s(Fv);Ode=n(Y3e,"STRONG",{});var aZr=s(Ode);xOo=r(aZr,"segformer"),aZr.forEach(t),kOo=r(Y3e," \u2014 "),SN=n(Y3e,"A",{href:!0});var nZr=s(SN);ROo=r(nZr,"SegformerForSemanticSegmentation"),nZr.forEach(t),SOo=r(Y3e," (SegFormer model)"),Y3e.forEach(t),Cxe.forEach(t),POo=i(ra),Cv=n(ra,"P",{});var K3e=s(Cv);$Oo=r(K3e,"The model is set in evaluation mode by default using "),Xde=n(K3e,"CODE",{});var sZr=s(Xde);IOo=r(sZr,"model.eval()"),sZr.forEach(t),jOo=r(K3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zde=n(K3e,"CODE",{});var lZr=s(zde);NOo=r(lZr,"model.train()"),lZr.forEach(t),K3e.forEach(t),DOo=i(ra),Vde=n(ra,"P",{});var iZr=s(Vde);qOo=r(iZr,"Examples:"),iZr.forEach(t),GOo=i(ra),m(xy.$$.fragment,ra),ra.forEach(t),Al.forEach(t),h7e=i(d),oc=n(d,"H2",{class:!0});var Mxe=s(oc);Mv=n(Mxe,"A",{id:!0,class:!0,href:!0});var dZr=s(Mv);Wde=n(dZr,"SPAN",{});var cZr=s(Wde);m(ky.$$.fragment,cZr),cZr.forEach(t),dZr.forEach(t),OOo=i(Mxe),Qde=n(Mxe,"SPAN",{});var fZr=s(Qde);XOo=r(fZr,"TFAutoModel"),fZr.forEach(t),Mxe.forEach(t),p7e=i(d),gr=n(d,"DIV",{class:!0});var Bl=s(gr);m(Ry.$$.fragment,Bl),zOo=i(Bl),rc=n(Bl,"P",{});var zz=s(rc);VOo=r(zz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Hde=n(zz,"CODE",{});var mZr=s(Hde);WOo=r(mZr,"from_pretrained()"),mZr.forEach(t),QOo=r(zz,"class method or the "),Ude=n(zz,"CODE",{});var gZr=s(Ude);HOo=r(gZr,"from_config()"),gZr.forEach(t),UOo=r(zz,`class
method.`),zz.forEach(t),JOo=i(Bl),Sy=n(Bl,"P",{});var Exe=s(Sy);YOo=r(Exe,"This class cannot be instantiated directly using "),Jde=n(Exe,"CODE",{});var hZr=s(Jde);KOo=r(hZr,"__init__()"),hZr.forEach(t),ZOo=r(Exe," (throws an error)."),Exe.forEach(t),eXo=i(Bl),st=n(Bl,"DIV",{class:!0});var xl=s(st);m(Py.$$.fragment,xl),oXo=i(xl),Yde=n(xl,"P",{});var pZr=s(Yde);rXo=r(pZr,"Instantiates one of the base model classes of the library from a configuration."),pZr.forEach(t),tXo=i(xl),tc=n(xl,"P",{});var Vz=s(tc);aXo=r(Vz,`Note:
Loading a model from its configuration file does `),Kde=n(Vz,"STRONG",{});var _Zr=s(Kde);nXo=r(_Zr,"not"),_Zr.forEach(t),sXo=r(Vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zde=n(Vz,"CODE",{});var uZr=s(Zde);lXo=r(uZr,"from_pretrained()"),uZr.forEach(t),iXo=r(Vz,"to load the model weights."),Vz.forEach(t),dXo=i(xl),ece=n(xl,"P",{});var bZr=s(ece);cXo=r(bZr,"Examples:"),bZr.forEach(t),fXo=i(xl),m($y.$$.fragment,xl),xl.forEach(t),mXo=i(Bl),go=n(Bl,"DIV",{class:!0});var ca=s(go);m(Iy.$$.fragment,ca),gXo=i(ca),oce=n(ca,"P",{});var vZr=s(oce);hXo=r(vZr,"Instantiate one of the base model classes of the library from a pretrained model."),vZr.forEach(t),pXo=i(ca),ln=n(ca,"P",{});var k4=s(ln);_Xo=r(k4,"The model class to instantiate is selected based on the "),rce=n(k4,"CODE",{});var TZr=s(rce);uXo=r(TZr,"model_type"),TZr.forEach(t),bXo=r(k4,` property of the config object (either
passed as an argument or loaded from `),tce=n(k4,"CODE",{});var FZr=s(tce);vXo=r(FZr,"pretrained_model_name_or_path"),FZr.forEach(t),TXo=r(k4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ace=n(k4,"CODE",{});var CZr=s(ace);FXo=r(CZr,"pretrained_model_name_or_path"),CZr.forEach(t),CXo=r(k4,":"),k4.forEach(t),MXo=i(ca),B=n(ca,"UL",{});var x=s(B);Ev=n(x,"LI",{});var Z3e=s(Ev);nce=n(Z3e,"STRONG",{});var MZr=s(nce);EXo=r(MZr,"albert"),MZr.forEach(t),yXo=r(Z3e," \u2014 "),PN=n(Z3e,"A",{href:!0});var EZr=s(PN);wXo=r(EZr,"TFAlbertModel"),EZr.forEach(t),AXo=r(Z3e," (ALBERT model)"),Z3e.forEach(t),LXo=i(x),yv=n(x,"LI",{});var eye=s(yv);sce=n(eye,"STRONG",{});var yZr=s(sce);BXo=r(yZr,"bart"),yZr.forEach(t),xXo=r(eye," \u2014 "),$N=n(eye,"A",{href:!0});var wZr=s($N);kXo=r(wZr,"TFBartModel"),wZr.forEach(t),RXo=r(eye," (BART model)"),eye.forEach(t),SXo=i(x),wv=n(x,"LI",{});var oye=s(wv);lce=n(oye,"STRONG",{});var AZr=s(lce);PXo=r(AZr,"bert"),AZr.forEach(t),$Xo=r(oye," \u2014 "),IN=n(oye,"A",{href:!0});var LZr=s(IN);IXo=r(LZr,"TFBertModel"),LZr.forEach(t),jXo=r(oye," (BERT model)"),oye.forEach(t),NXo=i(x),Av=n(x,"LI",{});var rye=s(Av);ice=n(rye,"STRONG",{});var BZr=s(ice);DXo=r(BZr,"blenderbot"),BZr.forEach(t),qXo=r(rye," \u2014 "),jN=n(rye,"A",{href:!0});var xZr=s(jN);GXo=r(xZr,"TFBlenderbotModel"),xZr.forEach(t),OXo=r(rye," (Blenderbot model)"),rye.forEach(t),XXo=i(x),Lv=n(x,"LI",{});var tye=s(Lv);dce=n(tye,"STRONG",{});var kZr=s(dce);zXo=r(kZr,"blenderbot-small"),kZr.forEach(t),VXo=r(tye," \u2014 "),NN=n(tye,"A",{href:!0});var RZr=s(NN);WXo=r(RZr,"TFBlenderbotSmallModel"),RZr.forEach(t),QXo=r(tye," (BlenderbotSmall model)"),tye.forEach(t),HXo=i(x),Bv=n(x,"LI",{});var aye=s(Bv);cce=n(aye,"STRONG",{});var SZr=s(cce);UXo=r(SZr,"camembert"),SZr.forEach(t),JXo=r(aye," \u2014 "),DN=n(aye,"A",{href:!0});var PZr=s(DN);YXo=r(PZr,"TFCamembertModel"),PZr.forEach(t),KXo=r(aye," (CamemBERT model)"),aye.forEach(t),ZXo=i(x),xv=n(x,"LI",{});var nye=s(xv);fce=n(nye,"STRONG",{});var $Zr=s(fce);ezo=r($Zr,"clip"),$Zr.forEach(t),ozo=r(nye," \u2014 "),qN=n(nye,"A",{href:!0});var IZr=s(qN);rzo=r(IZr,"TFCLIPModel"),IZr.forEach(t),tzo=r(nye," (CLIP model)"),nye.forEach(t),azo=i(x),kv=n(x,"LI",{});var sye=s(kv);mce=n(sye,"STRONG",{});var jZr=s(mce);nzo=r(jZr,"convbert"),jZr.forEach(t),szo=r(sye," \u2014 "),GN=n(sye,"A",{href:!0});var NZr=s(GN);lzo=r(NZr,"TFConvBertModel"),NZr.forEach(t),izo=r(sye," (ConvBERT model)"),sye.forEach(t),dzo=i(x),Rv=n(x,"LI",{});var lye=s(Rv);gce=n(lye,"STRONG",{});var DZr=s(gce);czo=r(DZr,"convnext"),DZr.forEach(t),fzo=r(lye," \u2014 "),ON=n(lye,"A",{href:!0});var qZr=s(ON);mzo=r(qZr,"TFConvNextModel"),qZr.forEach(t),gzo=r(lye," (ConvNext model)"),lye.forEach(t),hzo=i(x),Sv=n(x,"LI",{});var iye=s(Sv);hce=n(iye,"STRONG",{});var GZr=s(hce);pzo=r(GZr,"ctrl"),GZr.forEach(t),_zo=r(iye," \u2014 "),XN=n(iye,"A",{href:!0});var OZr=s(XN);uzo=r(OZr,"TFCTRLModel"),OZr.forEach(t),bzo=r(iye," (CTRL model)"),iye.forEach(t),vzo=i(x),Pv=n(x,"LI",{});var dye=s(Pv);pce=n(dye,"STRONG",{});var XZr=s(pce);Tzo=r(XZr,"deberta"),XZr.forEach(t),Fzo=r(dye," \u2014 "),zN=n(dye,"A",{href:!0});var zZr=s(zN);Czo=r(zZr,"TFDebertaModel"),zZr.forEach(t),Mzo=r(dye," (DeBERTa model)"),dye.forEach(t),Ezo=i(x),$v=n(x,"LI",{});var cye=s($v);_ce=n(cye,"STRONG",{});var VZr=s(_ce);yzo=r(VZr,"deberta-v2"),VZr.forEach(t),wzo=r(cye," \u2014 "),VN=n(cye,"A",{href:!0});var WZr=s(VN);Azo=r(WZr,"TFDebertaV2Model"),WZr.forEach(t),Lzo=r(cye," (DeBERTa-v2 model)"),cye.forEach(t),Bzo=i(x),Iv=n(x,"LI",{});var fye=s(Iv);uce=n(fye,"STRONG",{});var QZr=s(uce);xzo=r(QZr,"distilbert"),QZr.forEach(t),kzo=r(fye," \u2014 "),WN=n(fye,"A",{href:!0});var HZr=s(WN);Rzo=r(HZr,"TFDistilBertModel"),HZr.forEach(t),Szo=r(fye," (DistilBERT model)"),fye.forEach(t),Pzo=i(x),jv=n(x,"LI",{});var mye=s(jv);bce=n(mye,"STRONG",{});var UZr=s(bce);$zo=r(UZr,"dpr"),UZr.forEach(t),Izo=r(mye," \u2014 "),QN=n(mye,"A",{href:!0});var JZr=s(QN);jzo=r(JZr,"TFDPRQuestionEncoder"),JZr.forEach(t),Nzo=r(mye," (DPR model)"),mye.forEach(t),Dzo=i(x),Nv=n(x,"LI",{});var gye=s(Nv);vce=n(gye,"STRONG",{});var YZr=s(vce);qzo=r(YZr,"electra"),YZr.forEach(t),Gzo=r(gye," \u2014 "),HN=n(gye,"A",{href:!0});var KZr=s(HN);Ozo=r(KZr,"TFElectraModel"),KZr.forEach(t),Xzo=r(gye," (ELECTRA model)"),gye.forEach(t),zzo=i(x),Dv=n(x,"LI",{});var hye=s(Dv);Tce=n(hye,"STRONG",{});var ZZr=s(Tce);Vzo=r(ZZr,"flaubert"),ZZr.forEach(t),Wzo=r(hye," \u2014 "),UN=n(hye,"A",{href:!0});var eet=s(UN);Qzo=r(eet,"TFFlaubertModel"),eet.forEach(t),Hzo=r(hye," (FlauBERT model)"),hye.forEach(t),Uzo=i(x),Ss=n(x,"LI",{});var G0=s(Ss);Fce=n(G0,"STRONG",{});var oet=s(Fce);Jzo=r(oet,"funnel"),oet.forEach(t),Yzo=r(G0," \u2014 "),JN=n(G0,"A",{href:!0});var ret=s(JN);Kzo=r(ret,"TFFunnelModel"),ret.forEach(t),Zzo=r(G0," or "),YN=n(G0,"A",{href:!0});var tet=s(YN);eVo=r(tet,"TFFunnelBaseModel"),tet.forEach(t),oVo=r(G0," (Funnel Transformer model)"),G0.forEach(t),rVo=i(x),qv=n(x,"LI",{});var pye=s(qv);Cce=n(pye,"STRONG",{});var aet=s(Cce);tVo=r(aet,"gpt2"),aet.forEach(t),aVo=r(pye," \u2014 "),KN=n(pye,"A",{href:!0});var net=s(KN);nVo=r(net,"TFGPT2Model"),net.forEach(t),sVo=r(pye," (OpenAI GPT-2 model)"),pye.forEach(t),lVo=i(x),Gv=n(x,"LI",{});var _ye=s(Gv);Mce=n(_ye,"STRONG",{});var set=s(Mce);iVo=r(set,"hubert"),set.forEach(t),dVo=r(_ye," \u2014 "),ZN=n(_ye,"A",{href:!0});var iet=s(ZN);cVo=r(iet,"TFHubertModel"),iet.forEach(t),fVo=r(_ye," (Hubert model)"),_ye.forEach(t),mVo=i(x),Ov=n(x,"LI",{});var uye=s(Ov);Ece=n(uye,"STRONG",{});var det=s(Ece);gVo=r(det,"layoutlm"),det.forEach(t),hVo=r(uye," \u2014 "),eD=n(uye,"A",{href:!0});var cet=s(eD);pVo=r(cet,"TFLayoutLMModel"),cet.forEach(t),_Vo=r(uye," (LayoutLM model)"),uye.forEach(t),uVo=i(x),Xv=n(x,"LI",{});var bye=s(Xv);yce=n(bye,"STRONG",{});var fet=s(yce);bVo=r(fet,"led"),fet.forEach(t),vVo=r(bye," \u2014 "),oD=n(bye,"A",{href:!0});var met=s(oD);TVo=r(met,"TFLEDModel"),met.forEach(t),FVo=r(bye," (LED model)"),bye.forEach(t),CVo=i(x),zv=n(x,"LI",{});var vye=s(zv);wce=n(vye,"STRONG",{});var get=s(wce);MVo=r(get,"longformer"),get.forEach(t),EVo=r(vye," \u2014 "),rD=n(vye,"A",{href:!0});var het=s(rD);yVo=r(het,"TFLongformerModel"),het.forEach(t),wVo=r(vye," (Longformer model)"),vye.forEach(t),AVo=i(x),Vv=n(x,"LI",{});var Tye=s(Vv);Ace=n(Tye,"STRONG",{});var pet=s(Ace);LVo=r(pet,"lxmert"),pet.forEach(t),BVo=r(Tye," \u2014 "),tD=n(Tye,"A",{href:!0});var _et=s(tD);xVo=r(_et,"TFLxmertModel"),_et.forEach(t),kVo=r(Tye," (LXMERT model)"),Tye.forEach(t),RVo=i(x),Wv=n(x,"LI",{});var Fye=s(Wv);Lce=n(Fye,"STRONG",{});var uet=s(Lce);SVo=r(uet,"marian"),uet.forEach(t),PVo=r(Fye," \u2014 "),aD=n(Fye,"A",{href:!0});var bet=s(aD);$Vo=r(bet,"TFMarianModel"),bet.forEach(t),IVo=r(Fye," (Marian model)"),Fye.forEach(t),jVo=i(x),Qv=n(x,"LI",{});var Cye=s(Qv);Bce=n(Cye,"STRONG",{});var vet=s(Bce);NVo=r(vet,"mbart"),vet.forEach(t),DVo=r(Cye," \u2014 "),nD=n(Cye,"A",{href:!0});var Tet=s(nD);qVo=r(Tet,"TFMBartModel"),Tet.forEach(t),GVo=r(Cye," (mBART model)"),Cye.forEach(t),OVo=i(x),Hv=n(x,"LI",{});var Mye=s(Hv);xce=n(Mye,"STRONG",{});var Fet=s(xce);XVo=r(Fet,"mobilebert"),Fet.forEach(t),zVo=r(Mye," \u2014 "),sD=n(Mye,"A",{href:!0});var Cet=s(sD);VVo=r(Cet,"TFMobileBertModel"),Cet.forEach(t),WVo=r(Mye," (MobileBERT model)"),Mye.forEach(t),QVo=i(x),Uv=n(x,"LI",{});var Eye=s(Uv);kce=n(Eye,"STRONG",{});var Met=s(kce);HVo=r(Met,"mpnet"),Met.forEach(t),UVo=r(Eye," \u2014 "),lD=n(Eye,"A",{href:!0});var Eet=s(lD);JVo=r(Eet,"TFMPNetModel"),Eet.forEach(t),YVo=r(Eye," (MPNet model)"),Eye.forEach(t),KVo=i(x),Jv=n(x,"LI",{});var yye=s(Jv);Rce=n(yye,"STRONG",{});var yet=s(Rce);ZVo=r(yet,"mt5"),yet.forEach(t),eWo=r(yye," \u2014 "),iD=n(yye,"A",{href:!0});var wet=s(iD);oWo=r(wet,"TFMT5Model"),wet.forEach(t),rWo=r(yye," (mT5 model)"),yye.forEach(t),tWo=i(x),Yv=n(x,"LI",{});var wye=s(Yv);Sce=n(wye,"STRONG",{});var Aet=s(Sce);aWo=r(Aet,"openai-gpt"),Aet.forEach(t),nWo=r(wye," \u2014 "),dD=n(wye,"A",{href:!0});var Let=s(dD);sWo=r(Let,"TFOpenAIGPTModel"),Let.forEach(t),lWo=r(wye," (OpenAI GPT model)"),wye.forEach(t),iWo=i(x),Kv=n(x,"LI",{});var Aye=s(Kv);Pce=n(Aye,"STRONG",{});var Bet=s(Pce);dWo=r(Bet,"pegasus"),Bet.forEach(t),cWo=r(Aye," \u2014 "),cD=n(Aye,"A",{href:!0});var xet=s(cD);fWo=r(xet,"TFPegasusModel"),xet.forEach(t),mWo=r(Aye," (Pegasus model)"),Aye.forEach(t),gWo=i(x),Zv=n(x,"LI",{});var Lye=s(Zv);$ce=n(Lye,"STRONG",{});var ket=s($ce);hWo=r(ket,"rembert"),ket.forEach(t),pWo=r(Lye," \u2014 "),fD=n(Lye,"A",{href:!0});var Ret=s(fD);_Wo=r(Ret,"TFRemBertModel"),Ret.forEach(t),uWo=r(Lye," (RemBERT model)"),Lye.forEach(t),bWo=i(x),eT=n(x,"LI",{});var Bye=s(eT);Ice=n(Bye,"STRONG",{});var Set=s(Ice);vWo=r(Set,"roberta"),Set.forEach(t),TWo=r(Bye," \u2014 "),mD=n(Bye,"A",{href:!0});var Pet=s(mD);FWo=r(Pet,"TFRobertaModel"),Pet.forEach(t),CWo=r(Bye," (RoBERTa model)"),Bye.forEach(t),MWo=i(x),oT=n(x,"LI",{});var xye=s(oT);jce=n(xye,"STRONG",{});var $et=s(jce);EWo=r($et,"roformer"),$et.forEach(t),yWo=r(xye," \u2014 "),gD=n(xye,"A",{href:!0});var Iet=s(gD);wWo=r(Iet,"TFRoFormerModel"),Iet.forEach(t),AWo=r(xye," (RoFormer model)"),xye.forEach(t),LWo=i(x),rT=n(x,"LI",{});var kye=s(rT);Nce=n(kye,"STRONG",{});var jet=s(Nce);BWo=r(jet,"speech_to_text"),jet.forEach(t),xWo=r(kye," \u2014 "),hD=n(kye,"A",{href:!0});var Net=s(hD);kWo=r(Net,"TFSpeech2TextModel"),Net.forEach(t),RWo=r(kye," (Speech2Text model)"),kye.forEach(t),SWo=i(x),tT=n(x,"LI",{});var Rye=s(tT);Dce=n(Rye,"STRONG",{});var Det=s(Dce);PWo=r(Det,"t5"),Det.forEach(t),$Wo=r(Rye," \u2014 "),pD=n(Rye,"A",{href:!0});var qet=s(pD);IWo=r(qet,"TFT5Model"),qet.forEach(t),jWo=r(Rye," (T5 model)"),Rye.forEach(t),NWo=i(x),aT=n(x,"LI",{});var Sye=s(aT);qce=n(Sye,"STRONG",{});var Get=s(qce);DWo=r(Get,"tapas"),Get.forEach(t),qWo=r(Sye," \u2014 "),_D=n(Sye,"A",{href:!0});var Oet=s(_D);GWo=r(Oet,"TFTapasModel"),Oet.forEach(t),OWo=r(Sye," (TAPAS model)"),Sye.forEach(t),XWo=i(x),nT=n(x,"LI",{});var Pye=s(nT);Gce=n(Pye,"STRONG",{});var Xet=s(Gce);zWo=r(Xet,"transfo-xl"),Xet.forEach(t),VWo=r(Pye," \u2014 "),uD=n(Pye,"A",{href:!0});var zet=s(uD);WWo=r(zet,"TFTransfoXLModel"),zet.forEach(t),QWo=r(Pye," (Transformer-XL model)"),Pye.forEach(t),HWo=i(x),sT=n(x,"LI",{});var $ye=s(sT);Oce=n($ye,"STRONG",{});var Vet=s(Oce);UWo=r(Vet,"vit"),Vet.forEach(t),JWo=r($ye," \u2014 "),bD=n($ye,"A",{href:!0});var Wet=s(bD);YWo=r(Wet,"TFViTModel"),Wet.forEach(t),KWo=r($ye," (ViT model)"),$ye.forEach(t),ZWo=i(x),lT=n(x,"LI",{});var Iye=s(lT);Xce=n(Iye,"STRONG",{});var Qet=s(Xce);eQo=r(Qet,"wav2vec2"),Qet.forEach(t),oQo=r(Iye," \u2014 "),vD=n(Iye,"A",{href:!0});var Het=s(vD);rQo=r(Het,"TFWav2Vec2Model"),Het.forEach(t),tQo=r(Iye," (Wav2Vec2 model)"),Iye.forEach(t),aQo=i(x),iT=n(x,"LI",{});var jye=s(iT);zce=n(jye,"STRONG",{});var Uet=s(zce);nQo=r(Uet,"xlm"),Uet.forEach(t),sQo=r(jye," \u2014 "),TD=n(jye,"A",{href:!0});var Jet=s(TD);lQo=r(Jet,"TFXLMModel"),Jet.forEach(t),iQo=r(jye," (XLM model)"),jye.forEach(t),dQo=i(x),dT=n(x,"LI",{});var Nye=s(dT);Vce=n(Nye,"STRONG",{});var Yet=s(Vce);cQo=r(Yet,"xlm-roberta"),Yet.forEach(t),fQo=r(Nye," \u2014 "),FD=n(Nye,"A",{href:!0});var Ket=s(FD);mQo=r(Ket,"TFXLMRobertaModel"),Ket.forEach(t),gQo=r(Nye," (XLM-RoBERTa model)"),Nye.forEach(t),hQo=i(x),cT=n(x,"LI",{});var Dye=s(cT);Wce=n(Dye,"STRONG",{});var Zet=s(Wce);pQo=r(Zet,"xlnet"),Zet.forEach(t),_Qo=r(Dye," \u2014 "),CD=n(Dye,"A",{href:!0});var eot=s(CD);uQo=r(eot,"TFXLNetModel"),eot.forEach(t),bQo=r(Dye," (XLNet model)"),Dye.forEach(t),x.forEach(t),vQo=i(ca),Qce=n(ca,"P",{});var oot=s(Qce);TQo=r(oot,"Examples:"),oot.forEach(t),FQo=i(ca),m(jy.$$.fragment,ca),ca.forEach(t),Bl.forEach(t),_7e=i(d),ac=n(d,"H2",{class:!0});var yxe=s(ac);fT=n(yxe,"A",{id:!0,class:!0,href:!0});var rot=s(fT);Hce=n(rot,"SPAN",{});var tot=s(Hce);m(Ny.$$.fragment,tot),tot.forEach(t),rot.forEach(t),CQo=i(yxe),Uce=n(yxe,"SPAN",{});var aot=s(Uce);MQo=r(aot,"TFAutoModelForPreTraining"),aot.forEach(t),yxe.forEach(t),u7e=i(d),hr=n(d,"DIV",{class:!0});var kl=s(hr);m(Dy.$$.fragment,kl),EQo=i(kl),nc=n(kl,"P",{});var Wz=s(nc);yQo=r(Wz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jce=n(Wz,"CODE",{});var not=s(Jce);wQo=r(not,"from_pretrained()"),not.forEach(t),AQo=r(Wz,"class method or the "),Yce=n(Wz,"CODE",{});var sot=s(Yce);LQo=r(sot,"from_config()"),sot.forEach(t),BQo=r(Wz,`class
method.`),Wz.forEach(t),xQo=i(kl),qy=n(kl,"P",{});var wxe=s(qy);kQo=r(wxe,"This class cannot be instantiated directly using "),Kce=n(wxe,"CODE",{});var lot=s(Kce);RQo=r(lot,"__init__()"),lot.forEach(t),SQo=r(wxe," (throws an error)."),wxe.forEach(t),PQo=i(kl),lt=n(kl,"DIV",{class:!0});var Rl=s(lt);m(Gy.$$.fragment,Rl),$Qo=i(Rl),Zce=n(Rl,"P",{});var iot=s(Zce);IQo=r(iot,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),iot.forEach(t),jQo=i(Rl),sc=n(Rl,"P",{});var Qz=s(sc);NQo=r(Qz,`Note:
Loading a model from its configuration file does `),efe=n(Qz,"STRONG",{});var dot=s(efe);DQo=r(dot,"not"),dot.forEach(t),qQo=r(Qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ofe=n(Qz,"CODE",{});var cot=s(ofe);GQo=r(cot,"from_pretrained()"),cot.forEach(t),OQo=r(Qz,"to load the model weights."),Qz.forEach(t),XQo=i(Rl),rfe=n(Rl,"P",{});var fot=s(rfe);zQo=r(fot,"Examples:"),fot.forEach(t),VQo=i(Rl),m(Oy.$$.fragment,Rl),Rl.forEach(t),WQo=i(kl),ho=n(kl,"DIV",{class:!0});var fa=s(ho);m(Xy.$$.fragment,fa),QQo=i(fa),tfe=n(fa,"P",{});var mot=s(tfe);HQo=r(mot,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mot.forEach(t),UQo=i(fa),dn=n(fa,"P",{});var R4=s(dn);JQo=r(R4,"The model class to instantiate is selected based on the "),afe=n(R4,"CODE",{});var got=s(afe);YQo=r(got,"model_type"),got.forEach(t),KQo=r(R4,` property of the config object (either
passed as an argument or loaded from `),nfe=n(R4,"CODE",{});var hot=s(nfe);ZQo=r(hot,"pretrained_model_name_or_path"),hot.forEach(t),eHo=r(R4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sfe=n(R4,"CODE",{});var pot=s(sfe);oHo=r(pot,"pretrained_model_name_or_path"),pot.forEach(t),rHo=r(R4,":"),R4.forEach(t),tHo=i(fa),H=n(fa,"UL",{});var U=s(H);mT=n(U,"LI",{});var qye=s(mT);lfe=n(qye,"STRONG",{});var _ot=s(lfe);aHo=r(_ot,"albert"),_ot.forEach(t),nHo=r(qye," \u2014 "),MD=n(qye,"A",{href:!0});var uot=s(MD);sHo=r(uot,"TFAlbertForPreTraining"),uot.forEach(t),lHo=r(qye," (ALBERT model)"),qye.forEach(t),iHo=i(U),gT=n(U,"LI",{});var Gye=s(gT);ife=n(Gye,"STRONG",{});var bot=s(ife);dHo=r(bot,"bart"),bot.forEach(t),cHo=r(Gye," \u2014 "),ED=n(Gye,"A",{href:!0});var vot=s(ED);fHo=r(vot,"TFBartForConditionalGeneration"),vot.forEach(t),mHo=r(Gye," (BART model)"),Gye.forEach(t),gHo=i(U),hT=n(U,"LI",{});var Oye=s(hT);dfe=n(Oye,"STRONG",{});var Tot=s(dfe);hHo=r(Tot,"bert"),Tot.forEach(t),pHo=r(Oye," \u2014 "),yD=n(Oye,"A",{href:!0});var Fot=s(yD);_Ho=r(Fot,"TFBertForPreTraining"),Fot.forEach(t),uHo=r(Oye," (BERT model)"),Oye.forEach(t),bHo=i(U),pT=n(U,"LI",{});var Xye=s(pT);cfe=n(Xye,"STRONG",{});var Cot=s(cfe);vHo=r(Cot,"camembert"),Cot.forEach(t),THo=r(Xye," \u2014 "),wD=n(Xye,"A",{href:!0});var Mot=s(wD);FHo=r(Mot,"TFCamembertForMaskedLM"),Mot.forEach(t),CHo=r(Xye," (CamemBERT model)"),Xye.forEach(t),MHo=i(U),_T=n(U,"LI",{});var zye=s(_T);ffe=n(zye,"STRONG",{});var Eot=s(ffe);EHo=r(Eot,"ctrl"),Eot.forEach(t),yHo=r(zye," \u2014 "),AD=n(zye,"A",{href:!0});var yot=s(AD);wHo=r(yot,"TFCTRLLMHeadModel"),yot.forEach(t),AHo=r(zye," (CTRL model)"),zye.forEach(t),LHo=i(U),uT=n(U,"LI",{});var Vye=s(uT);mfe=n(Vye,"STRONG",{});var wot=s(mfe);BHo=r(wot,"distilbert"),wot.forEach(t),xHo=r(Vye," \u2014 "),LD=n(Vye,"A",{href:!0});var Aot=s(LD);kHo=r(Aot,"TFDistilBertForMaskedLM"),Aot.forEach(t),RHo=r(Vye," (DistilBERT model)"),Vye.forEach(t),SHo=i(U),bT=n(U,"LI",{});var Wye=s(bT);gfe=n(Wye,"STRONG",{});var Lot=s(gfe);PHo=r(Lot,"electra"),Lot.forEach(t),$Ho=r(Wye," \u2014 "),BD=n(Wye,"A",{href:!0});var Bot=s(BD);IHo=r(Bot,"TFElectraForPreTraining"),Bot.forEach(t),jHo=r(Wye," (ELECTRA model)"),Wye.forEach(t),NHo=i(U),vT=n(U,"LI",{});var Qye=s(vT);hfe=n(Qye,"STRONG",{});var xot=s(hfe);DHo=r(xot,"flaubert"),xot.forEach(t),qHo=r(Qye," \u2014 "),xD=n(Qye,"A",{href:!0});var kot=s(xD);GHo=r(kot,"TFFlaubertWithLMHeadModel"),kot.forEach(t),OHo=r(Qye," (FlauBERT model)"),Qye.forEach(t),XHo=i(U),TT=n(U,"LI",{});var Hye=s(TT);pfe=n(Hye,"STRONG",{});var Rot=s(pfe);zHo=r(Rot,"funnel"),Rot.forEach(t),VHo=r(Hye," \u2014 "),kD=n(Hye,"A",{href:!0});var Sot=s(kD);WHo=r(Sot,"TFFunnelForPreTraining"),Sot.forEach(t),QHo=r(Hye," (Funnel Transformer model)"),Hye.forEach(t),HHo=i(U),FT=n(U,"LI",{});var Uye=s(FT);_fe=n(Uye,"STRONG",{});var Pot=s(_fe);UHo=r(Pot,"gpt2"),Pot.forEach(t),JHo=r(Uye," \u2014 "),RD=n(Uye,"A",{href:!0});var $ot=s(RD);YHo=r($ot,"TFGPT2LMHeadModel"),$ot.forEach(t),KHo=r(Uye," (OpenAI GPT-2 model)"),Uye.forEach(t),ZHo=i(U),CT=n(U,"LI",{});var Jye=s(CT);ufe=n(Jye,"STRONG",{});var Iot=s(ufe);eUo=r(Iot,"layoutlm"),Iot.forEach(t),oUo=r(Jye," \u2014 "),SD=n(Jye,"A",{href:!0});var jot=s(SD);rUo=r(jot,"TFLayoutLMForMaskedLM"),jot.forEach(t),tUo=r(Jye," (LayoutLM model)"),Jye.forEach(t),aUo=i(U),MT=n(U,"LI",{});var Yye=s(MT);bfe=n(Yye,"STRONG",{});var Not=s(bfe);nUo=r(Not,"lxmert"),Not.forEach(t),sUo=r(Yye," \u2014 "),PD=n(Yye,"A",{href:!0});var Dot=s(PD);lUo=r(Dot,"TFLxmertForPreTraining"),Dot.forEach(t),iUo=r(Yye," (LXMERT model)"),Yye.forEach(t),dUo=i(U),ET=n(U,"LI",{});var Kye=s(ET);vfe=n(Kye,"STRONG",{});var qot=s(vfe);cUo=r(qot,"mobilebert"),qot.forEach(t),fUo=r(Kye," \u2014 "),$D=n(Kye,"A",{href:!0});var Got=s($D);mUo=r(Got,"TFMobileBertForPreTraining"),Got.forEach(t),gUo=r(Kye," (MobileBERT model)"),Kye.forEach(t),hUo=i(U),yT=n(U,"LI",{});var Zye=s(yT);Tfe=n(Zye,"STRONG",{});var Oot=s(Tfe);pUo=r(Oot,"mpnet"),Oot.forEach(t),_Uo=r(Zye," \u2014 "),ID=n(Zye,"A",{href:!0});var Xot=s(ID);uUo=r(Xot,"TFMPNetForMaskedLM"),Xot.forEach(t),bUo=r(Zye," (MPNet model)"),Zye.forEach(t),vUo=i(U),wT=n(U,"LI",{});var ewe=s(wT);Ffe=n(ewe,"STRONG",{});var zot=s(Ffe);TUo=r(zot,"openai-gpt"),zot.forEach(t),FUo=r(ewe," \u2014 "),jD=n(ewe,"A",{href:!0});var Vot=s(jD);CUo=r(Vot,"TFOpenAIGPTLMHeadModel"),Vot.forEach(t),MUo=r(ewe," (OpenAI GPT model)"),ewe.forEach(t),EUo=i(U),AT=n(U,"LI",{});var owe=s(AT);Cfe=n(owe,"STRONG",{});var Wot=s(Cfe);yUo=r(Wot,"roberta"),Wot.forEach(t),wUo=r(owe," \u2014 "),ND=n(owe,"A",{href:!0});var Qot=s(ND);AUo=r(Qot,"TFRobertaForMaskedLM"),Qot.forEach(t),LUo=r(owe," (RoBERTa model)"),owe.forEach(t),BUo=i(U),LT=n(U,"LI",{});var rwe=s(LT);Mfe=n(rwe,"STRONG",{});var Hot=s(Mfe);xUo=r(Hot,"t5"),Hot.forEach(t),kUo=r(rwe," \u2014 "),DD=n(rwe,"A",{href:!0});var Uot=s(DD);RUo=r(Uot,"TFT5ForConditionalGeneration"),Uot.forEach(t),SUo=r(rwe," (T5 model)"),rwe.forEach(t),PUo=i(U),BT=n(U,"LI",{});var twe=s(BT);Efe=n(twe,"STRONG",{});var Jot=s(Efe);$Uo=r(Jot,"tapas"),Jot.forEach(t),IUo=r(twe," \u2014 "),qD=n(twe,"A",{href:!0});var Yot=s(qD);jUo=r(Yot,"TFTapasForMaskedLM"),Yot.forEach(t),NUo=r(twe," (TAPAS model)"),twe.forEach(t),DUo=i(U),xT=n(U,"LI",{});var awe=s(xT);yfe=n(awe,"STRONG",{});var Kot=s(yfe);qUo=r(Kot,"transfo-xl"),Kot.forEach(t),GUo=r(awe," \u2014 "),GD=n(awe,"A",{href:!0});var Zot=s(GD);OUo=r(Zot,"TFTransfoXLLMHeadModel"),Zot.forEach(t),XUo=r(awe," (Transformer-XL model)"),awe.forEach(t),zUo=i(U),kT=n(U,"LI",{});var nwe=s(kT);wfe=n(nwe,"STRONG",{});var ert=s(wfe);VUo=r(ert,"xlm"),ert.forEach(t),WUo=r(nwe," \u2014 "),OD=n(nwe,"A",{href:!0});var ort=s(OD);QUo=r(ort,"TFXLMWithLMHeadModel"),ort.forEach(t),HUo=r(nwe," (XLM model)"),nwe.forEach(t),UUo=i(U),RT=n(U,"LI",{});var swe=s(RT);Afe=n(swe,"STRONG",{});var rrt=s(Afe);JUo=r(rrt,"xlm-roberta"),rrt.forEach(t),YUo=r(swe," \u2014 "),XD=n(swe,"A",{href:!0});var trt=s(XD);KUo=r(trt,"TFXLMRobertaForMaskedLM"),trt.forEach(t),ZUo=r(swe," (XLM-RoBERTa model)"),swe.forEach(t),eJo=i(U),ST=n(U,"LI",{});var lwe=s(ST);Lfe=n(lwe,"STRONG",{});var art=s(Lfe);oJo=r(art,"xlnet"),art.forEach(t),rJo=r(lwe," \u2014 "),zD=n(lwe,"A",{href:!0});var nrt=s(zD);tJo=r(nrt,"TFXLNetLMHeadModel"),nrt.forEach(t),aJo=r(lwe," (XLNet model)"),lwe.forEach(t),U.forEach(t),nJo=i(fa),Bfe=n(fa,"P",{});var srt=s(Bfe);sJo=r(srt,"Examples:"),srt.forEach(t),lJo=i(fa),m(zy.$$.fragment,fa),fa.forEach(t),kl.forEach(t),b7e=i(d),lc=n(d,"H2",{class:!0});var Axe=s(lc);PT=n(Axe,"A",{id:!0,class:!0,href:!0});var lrt=s(PT);xfe=n(lrt,"SPAN",{});var irt=s(xfe);m(Vy.$$.fragment,irt),irt.forEach(t),lrt.forEach(t),iJo=i(Axe),kfe=n(Axe,"SPAN",{});var drt=s(kfe);dJo=r(drt,"TFAutoModelForCausalLM"),drt.forEach(t),Axe.forEach(t),v7e=i(d),pr=n(d,"DIV",{class:!0});var Sl=s(pr);m(Wy.$$.fragment,Sl),cJo=i(Sl),ic=n(Sl,"P",{});var Hz=s(ic);fJo=r(Hz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Rfe=n(Hz,"CODE",{});var crt=s(Rfe);mJo=r(crt,"from_pretrained()"),crt.forEach(t),gJo=r(Hz,"class method or the "),Sfe=n(Hz,"CODE",{});var frt=s(Sfe);hJo=r(frt,"from_config()"),frt.forEach(t),pJo=r(Hz,`class
method.`),Hz.forEach(t),_Jo=i(Sl),Qy=n(Sl,"P",{});var Lxe=s(Qy);uJo=r(Lxe,"This class cannot be instantiated directly using "),Pfe=n(Lxe,"CODE",{});var mrt=s(Pfe);bJo=r(mrt,"__init__()"),mrt.forEach(t),vJo=r(Lxe," (throws an error)."),Lxe.forEach(t),TJo=i(Sl),it=n(Sl,"DIV",{class:!0});var Pl=s(it);m(Hy.$$.fragment,Pl),FJo=i(Pl),$fe=n(Pl,"P",{});var grt=s($fe);CJo=r(grt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),grt.forEach(t),MJo=i(Pl),dc=n(Pl,"P",{});var Uz=s(dc);EJo=r(Uz,`Note:
Loading a model from its configuration file does `),Ife=n(Uz,"STRONG",{});var hrt=s(Ife);yJo=r(hrt,"not"),hrt.forEach(t),wJo=r(Uz,` load the model weights. It only affects the
model\u2019s configuration. Use `),jfe=n(Uz,"CODE",{});var prt=s(jfe);AJo=r(prt,"from_pretrained()"),prt.forEach(t),LJo=r(Uz,"to load the model weights."),Uz.forEach(t),BJo=i(Pl),Nfe=n(Pl,"P",{});var _rt=s(Nfe);xJo=r(_rt,"Examples:"),_rt.forEach(t),kJo=i(Pl),m(Uy.$$.fragment,Pl),Pl.forEach(t),RJo=i(Sl),po=n(Sl,"DIV",{class:!0});var ma=s(po);m(Jy.$$.fragment,ma),SJo=i(ma),Dfe=n(ma,"P",{});var urt=s(Dfe);PJo=r(urt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),urt.forEach(t),$Jo=i(ma),cn=n(ma,"P",{});var S4=s(cn);IJo=r(S4,"The model class to instantiate is selected based on the "),qfe=n(S4,"CODE",{});var brt=s(qfe);jJo=r(brt,"model_type"),brt.forEach(t),NJo=r(S4,` property of the config object (either
passed as an argument or loaded from `),Gfe=n(S4,"CODE",{});var vrt=s(Gfe);DJo=r(vrt,"pretrained_model_name_or_path"),vrt.forEach(t),qJo=r(S4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ofe=n(S4,"CODE",{});var Trt=s(Ofe);GJo=r(Trt,"pretrained_model_name_or_path"),Trt.forEach(t),OJo=r(S4,":"),S4.forEach(t),XJo=i(ma),he=n(ma,"UL",{});var Me=s(he);$T=n(Me,"LI",{});var iwe=s($T);Xfe=n(iwe,"STRONG",{});var Frt=s(Xfe);zJo=r(Frt,"bert"),Frt.forEach(t),VJo=r(iwe," \u2014 "),VD=n(iwe,"A",{href:!0});var Crt=s(VD);WJo=r(Crt,"TFBertLMHeadModel"),Crt.forEach(t),QJo=r(iwe," (BERT model)"),iwe.forEach(t),HJo=i(Me),IT=n(Me,"LI",{});var dwe=s(IT);zfe=n(dwe,"STRONG",{});var Mrt=s(zfe);UJo=r(Mrt,"ctrl"),Mrt.forEach(t),JJo=r(dwe," \u2014 "),WD=n(dwe,"A",{href:!0});var Ert=s(WD);YJo=r(Ert,"TFCTRLLMHeadModel"),Ert.forEach(t),KJo=r(dwe," (CTRL model)"),dwe.forEach(t),ZJo=i(Me),jT=n(Me,"LI",{});var cwe=s(jT);Vfe=n(cwe,"STRONG",{});var yrt=s(Vfe);eYo=r(yrt,"gpt2"),yrt.forEach(t),oYo=r(cwe," \u2014 "),QD=n(cwe,"A",{href:!0});var wrt=s(QD);rYo=r(wrt,"TFGPT2LMHeadModel"),wrt.forEach(t),tYo=r(cwe," (OpenAI GPT-2 model)"),cwe.forEach(t),aYo=i(Me),NT=n(Me,"LI",{});var fwe=s(NT);Wfe=n(fwe,"STRONG",{});var Art=s(Wfe);nYo=r(Art,"openai-gpt"),Art.forEach(t),sYo=r(fwe," \u2014 "),HD=n(fwe,"A",{href:!0});var Lrt=s(HD);lYo=r(Lrt,"TFOpenAIGPTLMHeadModel"),Lrt.forEach(t),iYo=r(fwe," (OpenAI GPT model)"),fwe.forEach(t),dYo=i(Me),DT=n(Me,"LI",{});var mwe=s(DT);Qfe=n(mwe,"STRONG",{});var Brt=s(Qfe);cYo=r(Brt,"rembert"),Brt.forEach(t),fYo=r(mwe," \u2014 "),UD=n(mwe,"A",{href:!0});var xrt=s(UD);mYo=r(xrt,"TFRemBertForCausalLM"),xrt.forEach(t),gYo=r(mwe," (RemBERT model)"),mwe.forEach(t),hYo=i(Me),qT=n(Me,"LI",{});var gwe=s(qT);Hfe=n(gwe,"STRONG",{});var krt=s(Hfe);pYo=r(krt,"roberta"),krt.forEach(t),_Yo=r(gwe," \u2014 "),JD=n(gwe,"A",{href:!0});var Rrt=s(JD);uYo=r(Rrt,"TFRobertaForCausalLM"),Rrt.forEach(t),bYo=r(gwe," (RoBERTa model)"),gwe.forEach(t),vYo=i(Me),GT=n(Me,"LI",{});var hwe=s(GT);Ufe=n(hwe,"STRONG",{});var Srt=s(Ufe);TYo=r(Srt,"roformer"),Srt.forEach(t),FYo=r(hwe," \u2014 "),YD=n(hwe,"A",{href:!0});var Prt=s(YD);CYo=r(Prt,"TFRoFormerForCausalLM"),Prt.forEach(t),MYo=r(hwe," (RoFormer model)"),hwe.forEach(t),EYo=i(Me),OT=n(Me,"LI",{});var pwe=s(OT);Jfe=n(pwe,"STRONG",{});var $rt=s(Jfe);yYo=r($rt,"transfo-xl"),$rt.forEach(t),wYo=r(pwe," \u2014 "),KD=n(pwe,"A",{href:!0});var Irt=s(KD);AYo=r(Irt,"TFTransfoXLLMHeadModel"),Irt.forEach(t),LYo=r(pwe," (Transformer-XL model)"),pwe.forEach(t),BYo=i(Me),XT=n(Me,"LI",{});var _we=s(XT);Yfe=n(_we,"STRONG",{});var jrt=s(Yfe);xYo=r(jrt,"xlm"),jrt.forEach(t),kYo=r(_we," \u2014 "),ZD=n(_we,"A",{href:!0});var Nrt=s(ZD);RYo=r(Nrt,"TFXLMWithLMHeadModel"),Nrt.forEach(t),SYo=r(_we," (XLM model)"),_we.forEach(t),PYo=i(Me),zT=n(Me,"LI",{});var uwe=s(zT);Kfe=n(uwe,"STRONG",{});var Drt=s(Kfe);$Yo=r(Drt,"xlnet"),Drt.forEach(t),IYo=r(uwe," \u2014 "),eq=n(uwe,"A",{href:!0});var qrt=s(eq);jYo=r(qrt,"TFXLNetLMHeadModel"),qrt.forEach(t),NYo=r(uwe," (XLNet model)"),uwe.forEach(t),Me.forEach(t),DYo=i(ma),Zfe=n(ma,"P",{});var Grt=s(Zfe);qYo=r(Grt,"Examples:"),Grt.forEach(t),GYo=i(ma),m(Yy.$$.fragment,ma),ma.forEach(t),Sl.forEach(t),T7e=i(d),cc=n(d,"H2",{class:!0});var Bxe=s(cc);VT=n(Bxe,"A",{id:!0,class:!0,href:!0});var Ort=s(VT);eme=n(Ort,"SPAN",{});var Xrt=s(eme);m(Ky.$$.fragment,Xrt),Xrt.forEach(t),Ort.forEach(t),OYo=i(Bxe),ome=n(Bxe,"SPAN",{});var zrt=s(ome);XYo=r(zrt,"TFAutoModelForImageClassification"),zrt.forEach(t),Bxe.forEach(t),F7e=i(d),_r=n(d,"DIV",{class:!0});var $l=s(_r);m(Zy.$$.fragment,$l),zYo=i($l),fc=n($l,"P",{});var Jz=s(fc);VYo=r(Jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rme=n(Jz,"CODE",{});var Vrt=s(rme);WYo=r(Vrt,"from_pretrained()"),Vrt.forEach(t),QYo=r(Jz,"class method or the "),tme=n(Jz,"CODE",{});var Wrt=s(tme);HYo=r(Wrt,"from_config()"),Wrt.forEach(t),UYo=r(Jz,`class
method.`),Jz.forEach(t),JYo=i($l),ew=n($l,"P",{});var xxe=s(ew);YYo=r(xxe,"This class cannot be instantiated directly using "),ame=n(xxe,"CODE",{});var Qrt=s(ame);KYo=r(Qrt,"__init__()"),Qrt.forEach(t),ZYo=r(xxe," (throws an error)."),xxe.forEach(t),eKo=i($l),dt=n($l,"DIV",{class:!0});var Il=s(dt);m(ow.$$.fragment,Il),oKo=i(Il),nme=n(Il,"P",{});var Hrt=s(nme);rKo=r(Hrt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Hrt.forEach(t),tKo=i(Il),mc=n(Il,"P",{});var Yz=s(mc);aKo=r(Yz,`Note:
Loading a model from its configuration file does `),sme=n(Yz,"STRONG",{});var Urt=s(sme);nKo=r(Urt,"not"),Urt.forEach(t),sKo=r(Yz,` load the model weights. It only affects the
model\u2019s configuration. Use `),lme=n(Yz,"CODE",{});var Jrt=s(lme);lKo=r(Jrt,"from_pretrained()"),Jrt.forEach(t),iKo=r(Yz,"to load the model weights."),Yz.forEach(t),dKo=i(Il),ime=n(Il,"P",{});var Yrt=s(ime);cKo=r(Yrt,"Examples:"),Yrt.forEach(t),fKo=i(Il),m(rw.$$.fragment,Il),Il.forEach(t),mKo=i($l),_o=n($l,"DIV",{class:!0});var ga=s(_o);m(tw.$$.fragment,ga),gKo=i(ga),dme=n(ga,"P",{});var Krt=s(dme);hKo=r(Krt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Krt.forEach(t),pKo=i(ga),fn=n(ga,"P",{});var P4=s(fn);_Ko=r(P4,"The model class to instantiate is selected based on the "),cme=n(P4,"CODE",{});var Zrt=s(cme);uKo=r(Zrt,"model_type"),Zrt.forEach(t),bKo=r(P4,` property of the config object (either
passed as an argument or loaded from `),fme=n(P4,"CODE",{});var ett=s(fme);vKo=r(ett,"pretrained_model_name_or_path"),ett.forEach(t),TKo=r(P4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mme=n(P4,"CODE",{});var ott=s(mme);FKo=r(ott,"pretrained_model_name_or_path"),ott.forEach(t),CKo=r(P4,":"),P4.forEach(t),MKo=i(ga),aw=n(ga,"UL",{});var kxe=s(aw);WT=n(kxe,"LI",{});var bwe=s(WT);gme=n(bwe,"STRONG",{});var rtt=s(gme);EKo=r(rtt,"convnext"),rtt.forEach(t),yKo=r(bwe," \u2014 "),oq=n(bwe,"A",{href:!0});var ttt=s(oq);wKo=r(ttt,"TFConvNextForImageClassification"),ttt.forEach(t),AKo=r(bwe," (ConvNext model)"),bwe.forEach(t),LKo=i(kxe),QT=n(kxe,"LI",{});var vwe=s(QT);hme=n(vwe,"STRONG",{});var att=s(hme);BKo=r(att,"vit"),att.forEach(t),xKo=r(vwe," \u2014 "),rq=n(vwe,"A",{href:!0});var ntt=s(rq);kKo=r(ntt,"TFViTForImageClassification"),ntt.forEach(t),RKo=r(vwe," (ViT model)"),vwe.forEach(t),kxe.forEach(t),SKo=i(ga),pme=n(ga,"P",{});var stt=s(pme);PKo=r(stt,"Examples:"),stt.forEach(t),$Ko=i(ga),m(nw.$$.fragment,ga),ga.forEach(t),$l.forEach(t),C7e=i(d),gc=n(d,"H2",{class:!0});var Rxe=s(gc);HT=n(Rxe,"A",{id:!0,class:!0,href:!0});var ltt=s(HT);_me=n(ltt,"SPAN",{});var itt=s(_me);m(sw.$$.fragment,itt),itt.forEach(t),ltt.forEach(t),IKo=i(Rxe),ume=n(Rxe,"SPAN",{});var dtt=s(ume);jKo=r(dtt,"TFAutoModelForMaskedLM"),dtt.forEach(t),Rxe.forEach(t),M7e=i(d),ur=n(d,"DIV",{class:!0});var jl=s(ur);m(lw.$$.fragment,jl),NKo=i(jl),hc=n(jl,"P",{});var Kz=s(hc);DKo=r(Kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bme=n(Kz,"CODE",{});var ctt=s(bme);qKo=r(ctt,"from_pretrained()"),ctt.forEach(t),GKo=r(Kz,"class method or the "),vme=n(Kz,"CODE",{});var ftt=s(vme);OKo=r(ftt,"from_config()"),ftt.forEach(t),XKo=r(Kz,`class
method.`),Kz.forEach(t),zKo=i(jl),iw=n(jl,"P",{});var Sxe=s(iw);VKo=r(Sxe,"This class cannot be instantiated directly using "),Tme=n(Sxe,"CODE",{});var mtt=s(Tme);WKo=r(mtt,"__init__()"),mtt.forEach(t),QKo=r(Sxe," (throws an error)."),Sxe.forEach(t),HKo=i(jl),ct=n(jl,"DIV",{class:!0});var Nl=s(ct);m(dw.$$.fragment,Nl),UKo=i(Nl),Fme=n(Nl,"P",{});var gtt=s(Fme);JKo=r(gtt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gtt.forEach(t),YKo=i(Nl),pc=n(Nl,"P",{});var Zz=s(pc);KKo=r(Zz,`Note:
Loading a model from its configuration file does `),Cme=n(Zz,"STRONG",{});var htt=s(Cme);ZKo=r(htt,"not"),htt.forEach(t),eZo=r(Zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mme=n(Zz,"CODE",{});var ptt=s(Mme);oZo=r(ptt,"from_pretrained()"),ptt.forEach(t),rZo=r(Zz,"to load the model weights."),Zz.forEach(t),tZo=i(Nl),Eme=n(Nl,"P",{});var _tt=s(Eme);aZo=r(_tt,"Examples:"),_tt.forEach(t),nZo=i(Nl),m(cw.$$.fragment,Nl),Nl.forEach(t),sZo=i(jl),uo=n(jl,"DIV",{class:!0});var ha=s(uo);m(fw.$$.fragment,ha),lZo=i(ha),yme=n(ha,"P",{});var utt=s(yme);iZo=r(utt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),utt.forEach(t),dZo=i(ha),mn=n(ha,"P",{});var $4=s(mn);cZo=r($4,"The model class to instantiate is selected based on the "),wme=n($4,"CODE",{});var btt=s(wme);fZo=r(btt,"model_type"),btt.forEach(t),mZo=r($4,` property of the config object (either
passed as an argument or loaded from `),Ame=n($4,"CODE",{});var vtt=s(Ame);gZo=r(vtt,"pretrained_model_name_or_path"),vtt.forEach(t),hZo=r($4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=n($4,"CODE",{});var Ttt=s(Lme);pZo=r(Ttt,"pretrained_model_name_or_path"),Ttt.forEach(t),_Zo=r($4,":"),$4.forEach(t),uZo=i(ha),Y=n(ha,"UL",{});var ee=s(Y);UT=n(ee,"LI",{});var Twe=s(UT);Bme=n(Twe,"STRONG",{});var Ftt=s(Bme);bZo=r(Ftt,"albert"),Ftt.forEach(t),vZo=r(Twe," \u2014 "),tq=n(Twe,"A",{href:!0});var Ctt=s(tq);TZo=r(Ctt,"TFAlbertForMaskedLM"),Ctt.forEach(t),FZo=r(Twe," (ALBERT model)"),Twe.forEach(t),CZo=i(ee),JT=n(ee,"LI",{});var Fwe=s(JT);xme=n(Fwe,"STRONG",{});var Mtt=s(xme);MZo=r(Mtt,"bert"),Mtt.forEach(t),EZo=r(Fwe," \u2014 "),aq=n(Fwe,"A",{href:!0});var Ett=s(aq);yZo=r(Ett,"TFBertForMaskedLM"),Ett.forEach(t),wZo=r(Fwe," (BERT model)"),Fwe.forEach(t),AZo=i(ee),YT=n(ee,"LI",{});var Cwe=s(YT);kme=n(Cwe,"STRONG",{});var ytt=s(kme);LZo=r(ytt,"camembert"),ytt.forEach(t),BZo=r(Cwe," \u2014 "),nq=n(Cwe,"A",{href:!0});var wtt=s(nq);xZo=r(wtt,"TFCamembertForMaskedLM"),wtt.forEach(t),kZo=r(Cwe," (CamemBERT model)"),Cwe.forEach(t),RZo=i(ee),KT=n(ee,"LI",{});var Mwe=s(KT);Rme=n(Mwe,"STRONG",{});var Att=s(Rme);SZo=r(Att,"convbert"),Att.forEach(t),PZo=r(Mwe," \u2014 "),sq=n(Mwe,"A",{href:!0});var Ltt=s(sq);$Zo=r(Ltt,"TFConvBertForMaskedLM"),Ltt.forEach(t),IZo=r(Mwe," (ConvBERT model)"),Mwe.forEach(t),jZo=i(ee),ZT=n(ee,"LI",{});var Ewe=s(ZT);Sme=n(Ewe,"STRONG",{});var Btt=s(Sme);NZo=r(Btt,"deberta"),Btt.forEach(t),DZo=r(Ewe," \u2014 "),lq=n(Ewe,"A",{href:!0});var xtt=s(lq);qZo=r(xtt,"TFDebertaForMaskedLM"),xtt.forEach(t),GZo=r(Ewe," (DeBERTa model)"),Ewe.forEach(t),OZo=i(ee),e8=n(ee,"LI",{});var ywe=s(e8);Pme=n(ywe,"STRONG",{});var ktt=s(Pme);XZo=r(ktt,"deberta-v2"),ktt.forEach(t),zZo=r(ywe," \u2014 "),iq=n(ywe,"A",{href:!0});var Rtt=s(iq);VZo=r(Rtt,"TFDebertaV2ForMaskedLM"),Rtt.forEach(t),WZo=r(ywe," (DeBERTa-v2 model)"),ywe.forEach(t),QZo=i(ee),o8=n(ee,"LI",{});var wwe=s(o8);$me=n(wwe,"STRONG",{});var Stt=s($me);HZo=r(Stt,"distilbert"),Stt.forEach(t),UZo=r(wwe," \u2014 "),dq=n(wwe,"A",{href:!0});var Ptt=s(dq);JZo=r(Ptt,"TFDistilBertForMaskedLM"),Ptt.forEach(t),YZo=r(wwe," (DistilBERT model)"),wwe.forEach(t),KZo=i(ee),r8=n(ee,"LI",{});var Awe=s(r8);Ime=n(Awe,"STRONG",{});var $tt=s(Ime);ZZo=r($tt,"electra"),$tt.forEach(t),eer=r(Awe," \u2014 "),cq=n(Awe,"A",{href:!0});var Itt=s(cq);oer=r(Itt,"TFElectraForMaskedLM"),Itt.forEach(t),rer=r(Awe," (ELECTRA model)"),Awe.forEach(t),ter=i(ee),t8=n(ee,"LI",{});var Lwe=s(t8);jme=n(Lwe,"STRONG",{});var jtt=s(jme);aer=r(jtt,"flaubert"),jtt.forEach(t),ner=r(Lwe," \u2014 "),fq=n(Lwe,"A",{href:!0});var Ntt=s(fq);ser=r(Ntt,"TFFlaubertWithLMHeadModel"),Ntt.forEach(t),ler=r(Lwe," (FlauBERT model)"),Lwe.forEach(t),ier=i(ee),a8=n(ee,"LI",{});var Bwe=s(a8);Nme=n(Bwe,"STRONG",{});var Dtt=s(Nme);der=r(Dtt,"funnel"),Dtt.forEach(t),cer=r(Bwe," \u2014 "),mq=n(Bwe,"A",{href:!0});var qtt=s(mq);fer=r(qtt,"TFFunnelForMaskedLM"),qtt.forEach(t),mer=r(Bwe," (Funnel Transformer model)"),Bwe.forEach(t),ger=i(ee),n8=n(ee,"LI",{});var xwe=s(n8);Dme=n(xwe,"STRONG",{});var Gtt=s(Dme);her=r(Gtt,"layoutlm"),Gtt.forEach(t),per=r(xwe," \u2014 "),gq=n(xwe,"A",{href:!0});var Ott=s(gq);_er=r(Ott,"TFLayoutLMForMaskedLM"),Ott.forEach(t),uer=r(xwe," (LayoutLM model)"),xwe.forEach(t),ber=i(ee),s8=n(ee,"LI",{});var kwe=s(s8);qme=n(kwe,"STRONG",{});var Xtt=s(qme);ver=r(Xtt,"longformer"),Xtt.forEach(t),Ter=r(kwe," \u2014 "),hq=n(kwe,"A",{href:!0});var ztt=s(hq);Fer=r(ztt,"TFLongformerForMaskedLM"),ztt.forEach(t),Cer=r(kwe," (Longformer model)"),kwe.forEach(t),Mer=i(ee),l8=n(ee,"LI",{});var Rwe=s(l8);Gme=n(Rwe,"STRONG",{});var Vtt=s(Gme);Eer=r(Vtt,"mobilebert"),Vtt.forEach(t),yer=r(Rwe," \u2014 "),pq=n(Rwe,"A",{href:!0});var Wtt=s(pq);wer=r(Wtt,"TFMobileBertForMaskedLM"),Wtt.forEach(t),Aer=r(Rwe," (MobileBERT model)"),Rwe.forEach(t),Ler=i(ee),i8=n(ee,"LI",{});var Swe=s(i8);Ome=n(Swe,"STRONG",{});var Qtt=s(Ome);Ber=r(Qtt,"mpnet"),Qtt.forEach(t),xer=r(Swe," \u2014 "),_q=n(Swe,"A",{href:!0});var Htt=s(_q);ker=r(Htt,"TFMPNetForMaskedLM"),Htt.forEach(t),Rer=r(Swe," (MPNet model)"),Swe.forEach(t),Ser=i(ee),d8=n(ee,"LI",{});var Pwe=s(d8);Xme=n(Pwe,"STRONG",{});var Utt=s(Xme);Per=r(Utt,"rembert"),Utt.forEach(t),$er=r(Pwe," \u2014 "),uq=n(Pwe,"A",{href:!0});var Jtt=s(uq);Ier=r(Jtt,"TFRemBertForMaskedLM"),Jtt.forEach(t),jer=r(Pwe," (RemBERT model)"),Pwe.forEach(t),Ner=i(ee),c8=n(ee,"LI",{});var $we=s(c8);zme=n($we,"STRONG",{});var Ytt=s(zme);Der=r(Ytt,"roberta"),Ytt.forEach(t),qer=r($we," \u2014 "),bq=n($we,"A",{href:!0});var Ktt=s(bq);Ger=r(Ktt,"TFRobertaForMaskedLM"),Ktt.forEach(t),Oer=r($we," (RoBERTa model)"),$we.forEach(t),Xer=i(ee),f8=n(ee,"LI",{});var Iwe=s(f8);Vme=n(Iwe,"STRONG",{});var Ztt=s(Vme);zer=r(Ztt,"roformer"),Ztt.forEach(t),Ver=r(Iwe," \u2014 "),vq=n(Iwe,"A",{href:!0});var eat=s(vq);Wer=r(eat,"TFRoFormerForMaskedLM"),eat.forEach(t),Qer=r(Iwe," (RoFormer model)"),Iwe.forEach(t),Her=i(ee),m8=n(ee,"LI",{});var jwe=s(m8);Wme=n(jwe,"STRONG",{});var oat=s(Wme);Uer=r(oat,"tapas"),oat.forEach(t),Jer=r(jwe," \u2014 "),Tq=n(jwe,"A",{href:!0});var rat=s(Tq);Yer=r(rat,"TFTapasForMaskedLM"),rat.forEach(t),Ker=r(jwe," (TAPAS model)"),jwe.forEach(t),Zer=i(ee),g8=n(ee,"LI",{});var Nwe=s(g8);Qme=n(Nwe,"STRONG",{});var tat=s(Qme);eor=r(tat,"xlm"),tat.forEach(t),oor=r(Nwe," \u2014 "),Fq=n(Nwe,"A",{href:!0});var aat=s(Fq);ror=r(aat,"TFXLMWithLMHeadModel"),aat.forEach(t),tor=r(Nwe," (XLM model)"),Nwe.forEach(t),aor=i(ee),h8=n(ee,"LI",{});var Dwe=s(h8);Hme=n(Dwe,"STRONG",{});var nat=s(Hme);nor=r(nat,"xlm-roberta"),nat.forEach(t),sor=r(Dwe," \u2014 "),Cq=n(Dwe,"A",{href:!0});var sat=s(Cq);lor=r(sat,"TFXLMRobertaForMaskedLM"),sat.forEach(t),ior=r(Dwe," (XLM-RoBERTa model)"),Dwe.forEach(t),ee.forEach(t),dor=i(ha),Ume=n(ha,"P",{});var lat=s(Ume);cor=r(lat,"Examples:"),lat.forEach(t),mor=i(ha),m(mw.$$.fragment,ha),ha.forEach(t),jl.forEach(t),E7e=i(d),_c=n(d,"H2",{class:!0});var Pxe=s(_c);p8=n(Pxe,"A",{id:!0,class:!0,href:!0});var iat=s(p8);Jme=n(iat,"SPAN",{});var dat=s(Jme);m(gw.$$.fragment,dat),dat.forEach(t),iat.forEach(t),gor=i(Pxe),Yme=n(Pxe,"SPAN",{});var cat=s(Yme);hor=r(cat,"TFAutoModelForSeq2SeqLM"),cat.forEach(t),Pxe.forEach(t),y7e=i(d),br=n(d,"DIV",{class:!0});var Dl=s(br);m(hw.$$.fragment,Dl),por=i(Dl),uc=n(Dl,"P",{});var eV=s(uc);_or=r(eV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Kme=n(eV,"CODE",{});var fat=s(Kme);uor=r(fat,"from_pretrained()"),fat.forEach(t),bor=r(eV,"class method or the "),Zme=n(eV,"CODE",{});var mat=s(Zme);vor=r(mat,"from_config()"),mat.forEach(t),Tor=r(eV,`class
method.`),eV.forEach(t),For=i(Dl),pw=n(Dl,"P",{});var $xe=s(pw);Cor=r($xe,"This class cannot be instantiated directly using "),ege=n($xe,"CODE",{});var gat=s(ege);Mor=r(gat,"__init__()"),gat.forEach(t),Eor=r($xe," (throws an error)."),$xe.forEach(t),yor=i(Dl),ft=n(Dl,"DIV",{class:!0});var ql=s(ft);m(_w.$$.fragment,ql),wor=i(ql),oge=n(ql,"P",{});var hat=s(oge);Aor=r(hat,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hat.forEach(t),Lor=i(ql),bc=n(ql,"P",{});var oV=s(bc);Bor=r(oV,`Note:
Loading a model from its configuration file does `),rge=n(oV,"STRONG",{});var pat=s(rge);xor=r(pat,"not"),pat.forEach(t),kor=r(oV,` load the model weights. It only affects the
model\u2019s configuration. Use `),tge=n(oV,"CODE",{});var _at=s(tge);Ror=r(_at,"from_pretrained()"),_at.forEach(t),Sor=r(oV,"to load the model weights."),oV.forEach(t),Por=i(ql),age=n(ql,"P",{});var uat=s(age);$or=r(uat,"Examples:"),uat.forEach(t),Ior=i(ql),m(uw.$$.fragment,ql),ql.forEach(t),jor=i(Dl),bo=n(Dl,"DIV",{class:!0});var pa=s(bo);m(bw.$$.fragment,pa),Nor=i(pa),nge=n(pa,"P",{});var bat=s(nge);Dor=r(bat,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bat.forEach(t),qor=i(pa),gn=n(pa,"P",{});var I4=s(gn);Gor=r(I4,"The model class to instantiate is selected based on the "),sge=n(I4,"CODE",{});var vat=s(sge);Oor=r(vat,"model_type"),vat.forEach(t),Xor=r(I4,` property of the config object (either
passed as an argument or loaded from `),lge=n(I4,"CODE",{});var Tat=s(lge);zor=r(Tat,"pretrained_model_name_or_path"),Tat.forEach(t),Vor=r(I4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=n(I4,"CODE",{});var Fat=s(ige);Wor=r(Fat,"pretrained_model_name_or_path"),Fat.forEach(t),Qor=r(I4,":"),I4.forEach(t),Hor=i(pa),pe=n(pa,"UL",{});var Ee=s(pe);_8=n(Ee,"LI",{});var qwe=s(_8);dge=n(qwe,"STRONG",{});var Cat=s(dge);Uor=r(Cat,"bart"),Cat.forEach(t),Jor=r(qwe," \u2014 "),Mq=n(qwe,"A",{href:!0});var Mat=s(Mq);Yor=r(Mat,"TFBartForConditionalGeneration"),Mat.forEach(t),Kor=r(qwe," (BART model)"),qwe.forEach(t),Zor=i(Ee),u8=n(Ee,"LI",{});var Gwe=s(u8);cge=n(Gwe,"STRONG",{});var Eat=s(cge);err=r(Eat,"blenderbot"),Eat.forEach(t),orr=r(Gwe," \u2014 "),Eq=n(Gwe,"A",{href:!0});var yat=s(Eq);rrr=r(yat,"TFBlenderbotForConditionalGeneration"),yat.forEach(t),trr=r(Gwe," (Blenderbot model)"),Gwe.forEach(t),arr=i(Ee),b8=n(Ee,"LI",{});var Owe=s(b8);fge=n(Owe,"STRONG",{});var wat=s(fge);nrr=r(wat,"blenderbot-small"),wat.forEach(t),srr=r(Owe," \u2014 "),yq=n(Owe,"A",{href:!0});var Aat=s(yq);lrr=r(Aat,"TFBlenderbotSmallForConditionalGeneration"),Aat.forEach(t),irr=r(Owe," (BlenderbotSmall model)"),Owe.forEach(t),drr=i(Ee),v8=n(Ee,"LI",{});var Xwe=s(v8);mge=n(Xwe,"STRONG",{});var Lat=s(mge);crr=r(Lat,"encoder-decoder"),Lat.forEach(t),frr=r(Xwe," \u2014 "),wq=n(Xwe,"A",{href:!0});var Bat=s(wq);mrr=r(Bat,"TFEncoderDecoderModel"),Bat.forEach(t),grr=r(Xwe," (Encoder decoder model)"),Xwe.forEach(t),hrr=i(Ee),T8=n(Ee,"LI",{});var zwe=s(T8);gge=n(zwe,"STRONG",{});var xat=s(gge);prr=r(xat,"led"),xat.forEach(t),_rr=r(zwe," \u2014 "),Aq=n(zwe,"A",{href:!0});var kat=s(Aq);urr=r(kat,"TFLEDForConditionalGeneration"),kat.forEach(t),brr=r(zwe," (LED model)"),zwe.forEach(t),vrr=i(Ee),F8=n(Ee,"LI",{});var Vwe=s(F8);hge=n(Vwe,"STRONG",{});var Rat=s(hge);Trr=r(Rat,"marian"),Rat.forEach(t),Frr=r(Vwe," \u2014 "),Lq=n(Vwe,"A",{href:!0});var Sat=s(Lq);Crr=r(Sat,"TFMarianMTModel"),Sat.forEach(t),Mrr=r(Vwe," (Marian model)"),Vwe.forEach(t),Err=i(Ee),C8=n(Ee,"LI",{});var Wwe=s(C8);pge=n(Wwe,"STRONG",{});var Pat=s(pge);yrr=r(Pat,"mbart"),Pat.forEach(t),wrr=r(Wwe," \u2014 "),Bq=n(Wwe,"A",{href:!0});var $at=s(Bq);Arr=r($at,"TFMBartForConditionalGeneration"),$at.forEach(t),Lrr=r(Wwe," (mBART model)"),Wwe.forEach(t),Brr=i(Ee),M8=n(Ee,"LI",{});var Qwe=s(M8);_ge=n(Qwe,"STRONG",{});var Iat=s(_ge);xrr=r(Iat,"mt5"),Iat.forEach(t),krr=r(Qwe," \u2014 "),xq=n(Qwe,"A",{href:!0});var jat=s(xq);Rrr=r(jat,"TFMT5ForConditionalGeneration"),jat.forEach(t),Srr=r(Qwe," (mT5 model)"),Qwe.forEach(t),Prr=i(Ee),E8=n(Ee,"LI",{});var Hwe=s(E8);uge=n(Hwe,"STRONG",{});var Nat=s(uge);$rr=r(Nat,"pegasus"),Nat.forEach(t),Irr=r(Hwe," \u2014 "),kq=n(Hwe,"A",{href:!0});var Dat=s(kq);jrr=r(Dat,"TFPegasusForConditionalGeneration"),Dat.forEach(t),Nrr=r(Hwe," (Pegasus model)"),Hwe.forEach(t),Drr=i(Ee),y8=n(Ee,"LI",{});var Uwe=s(y8);bge=n(Uwe,"STRONG",{});var qat=s(bge);qrr=r(qat,"t5"),qat.forEach(t),Grr=r(Uwe," \u2014 "),Rq=n(Uwe,"A",{href:!0});var Gat=s(Rq);Orr=r(Gat,"TFT5ForConditionalGeneration"),Gat.forEach(t),Xrr=r(Uwe," (T5 model)"),Uwe.forEach(t),Ee.forEach(t),zrr=i(pa),vge=n(pa,"P",{});var Oat=s(vge);Vrr=r(Oat,"Examples:"),Oat.forEach(t),Wrr=i(pa),m(vw.$$.fragment,pa),pa.forEach(t),Dl.forEach(t),w7e=i(d),vc=n(d,"H2",{class:!0});var Ixe=s(vc);w8=n(Ixe,"A",{id:!0,class:!0,href:!0});var Xat=s(w8);Tge=n(Xat,"SPAN",{});var zat=s(Tge);m(Tw.$$.fragment,zat),zat.forEach(t),Xat.forEach(t),Qrr=i(Ixe),Fge=n(Ixe,"SPAN",{});var Vat=s(Fge);Hrr=r(Vat,"TFAutoModelForSequenceClassification"),Vat.forEach(t),Ixe.forEach(t),A7e=i(d),vr=n(d,"DIV",{class:!0});var Gl=s(vr);m(Fw.$$.fragment,Gl),Urr=i(Gl),Tc=n(Gl,"P",{});var rV=s(Tc);Jrr=r(rV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Cge=n(rV,"CODE",{});var Wat=s(Cge);Yrr=r(Wat,"from_pretrained()"),Wat.forEach(t),Krr=r(rV,"class method or the "),Mge=n(rV,"CODE",{});var Qat=s(Mge);Zrr=r(Qat,"from_config()"),Qat.forEach(t),etr=r(rV,`class
method.`),rV.forEach(t),otr=i(Gl),Cw=n(Gl,"P",{});var jxe=s(Cw);rtr=r(jxe,"This class cannot be instantiated directly using "),Ege=n(jxe,"CODE",{});var Hat=s(Ege);ttr=r(Hat,"__init__()"),Hat.forEach(t),atr=r(jxe," (throws an error)."),jxe.forEach(t),ntr=i(Gl),mt=n(Gl,"DIV",{class:!0});var Ol=s(mt);m(Mw.$$.fragment,Ol),str=i(Ol),yge=n(Ol,"P",{});var Uat=s(yge);ltr=r(Uat,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Uat.forEach(t),itr=i(Ol),Fc=n(Ol,"P",{});var tV=s(Fc);dtr=r(tV,`Note:
Loading a model from its configuration file does `),wge=n(tV,"STRONG",{});var Jat=s(wge);ctr=r(Jat,"not"),Jat.forEach(t),ftr=r(tV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Age=n(tV,"CODE",{});var Yat=s(Age);mtr=r(Yat,"from_pretrained()"),Yat.forEach(t),gtr=r(tV,"to load the model weights."),tV.forEach(t),htr=i(Ol),Lge=n(Ol,"P",{});var Kat=s(Lge);ptr=r(Kat,"Examples:"),Kat.forEach(t),_tr=i(Ol),m(Ew.$$.fragment,Ol),Ol.forEach(t),utr=i(Gl),vo=n(Gl,"DIV",{class:!0});var _a=s(vo);m(yw.$$.fragment,_a),btr=i(_a),Bge=n(_a,"P",{});var Zat=s(Bge);vtr=r(Zat,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Zat.forEach(t),Ttr=i(_a),hn=n(_a,"P",{});var j4=s(hn);Ftr=r(j4,"The model class to instantiate is selected based on the "),xge=n(j4,"CODE",{});var ent=s(xge);Ctr=r(ent,"model_type"),ent.forEach(t),Mtr=r(j4,` property of the config object (either
passed as an argument or loaded from `),kge=n(j4,"CODE",{});var ont=s(kge);Etr=r(ont,"pretrained_model_name_or_path"),ont.forEach(t),ytr=r(j4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=n(j4,"CODE",{});var rnt=s(Rge);wtr=r(rnt,"pretrained_model_name_or_path"),rnt.forEach(t),Atr=r(j4,":"),j4.forEach(t),Ltr=i(_a),X=n(_a,"UL",{});var W=s(X);A8=n(W,"LI",{});var Jwe=s(A8);Sge=n(Jwe,"STRONG",{});var tnt=s(Sge);Btr=r(tnt,"albert"),tnt.forEach(t),xtr=r(Jwe," \u2014 "),Sq=n(Jwe,"A",{href:!0});var ant=s(Sq);ktr=r(ant,"TFAlbertForSequenceClassification"),ant.forEach(t),Rtr=r(Jwe," (ALBERT model)"),Jwe.forEach(t),Str=i(W),L8=n(W,"LI",{});var Ywe=s(L8);Pge=n(Ywe,"STRONG",{});var nnt=s(Pge);Ptr=r(nnt,"bert"),nnt.forEach(t),$tr=r(Ywe," \u2014 "),Pq=n(Ywe,"A",{href:!0});var snt=s(Pq);Itr=r(snt,"TFBertForSequenceClassification"),snt.forEach(t),jtr=r(Ywe," (BERT model)"),Ywe.forEach(t),Ntr=i(W),B8=n(W,"LI",{});var Kwe=s(B8);$ge=n(Kwe,"STRONG",{});var lnt=s($ge);Dtr=r(lnt,"camembert"),lnt.forEach(t),qtr=r(Kwe," \u2014 "),$q=n(Kwe,"A",{href:!0});var int=s($q);Gtr=r(int,"TFCamembertForSequenceClassification"),int.forEach(t),Otr=r(Kwe," (CamemBERT model)"),Kwe.forEach(t),Xtr=i(W),x8=n(W,"LI",{});var Zwe=s(x8);Ige=n(Zwe,"STRONG",{});var dnt=s(Ige);ztr=r(dnt,"convbert"),dnt.forEach(t),Vtr=r(Zwe," \u2014 "),Iq=n(Zwe,"A",{href:!0});var cnt=s(Iq);Wtr=r(cnt,"TFConvBertForSequenceClassification"),cnt.forEach(t),Qtr=r(Zwe," (ConvBERT model)"),Zwe.forEach(t),Htr=i(W),k8=n(W,"LI",{});var eAe=s(k8);jge=n(eAe,"STRONG",{});var fnt=s(jge);Utr=r(fnt,"ctrl"),fnt.forEach(t),Jtr=r(eAe," \u2014 "),jq=n(eAe,"A",{href:!0});var mnt=s(jq);Ytr=r(mnt,"TFCTRLForSequenceClassification"),mnt.forEach(t),Ktr=r(eAe," (CTRL model)"),eAe.forEach(t),Ztr=i(W),R8=n(W,"LI",{});var oAe=s(R8);Nge=n(oAe,"STRONG",{});var gnt=s(Nge);ear=r(gnt,"deberta"),gnt.forEach(t),oar=r(oAe," \u2014 "),Nq=n(oAe,"A",{href:!0});var hnt=s(Nq);rar=r(hnt,"TFDebertaForSequenceClassification"),hnt.forEach(t),tar=r(oAe," (DeBERTa model)"),oAe.forEach(t),aar=i(W),S8=n(W,"LI",{});var rAe=s(S8);Dge=n(rAe,"STRONG",{});var pnt=s(Dge);nar=r(pnt,"deberta-v2"),pnt.forEach(t),sar=r(rAe," \u2014 "),Dq=n(rAe,"A",{href:!0});var _nt=s(Dq);lar=r(_nt,"TFDebertaV2ForSequenceClassification"),_nt.forEach(t),iar=r(rAe," (DeBERTa-v2 model)"),rAe.forEach(t),dar=i(W),P8=n(W,"LI",{});var tAe=s(P8);qge=n(tAe,"STRONG",{});var unt=s(qge);car=r(unt,"distilbert"),unt.forEach(t),far=r(tAe," \u2014 "),qq=n(tAe,"A",{href:!0});var bnt=s(qq);mar=r(bnt,"TFDistilBertForSequenceClassification"),bnt.forEach(t),gar=r(tAe," (DistilBERT model)"),tAe.forEach(t),har=i(W),$8=n(W,"LI",{});var aAe=s($8);Gge=n(aAe,"STRONG",{});var vnt=s(Gge);par=r(vnt,"electra"),vnt.forEach(t),_ar=r(aAe," \u2014 "),Gq=n(aAe,"A",{href:!0});var Tnt=s(Gq);uar=r(Tnt,"TFElectraForSequenceClassification"),Tnt.forEach(t),bar=r(aAe," (ELECTRA model)"),aAe.forEach(t),Tar=i(W),I8=n(W,"LI",{});var nAe=s(I8);Oge=n(nAe,"STRONG",{});var Fnt=s(Oge);Far=r(Fnt,"flaubert"),Fnt.forEach(t),Car=r(nAe," \u2014 "),Oq=n(nAe,"A",{href:!0});var Cnt=s(Oq);Mar=r(Cnt,"TFFlaubertForSequenceClassification"),Cnt.forEach(t),Ear=r(nAe," (FlauBERT model)"),nAe.forEach(t),yar=i(W),j8=n(W,"LI",{});var sAe=s(j8);Xge=n(sAe,"STRONG",{});var Mnt=s(Xge);war=r(Mnt,"funnel"),Mnt.forEach(t),Aar=r(sAe," \u2014 "),Xq=n(sAe,"A",{href:!0});var Ent=s(Xq);Lar=r(Ent,"TFFunnelForSequenceClassification"),Ent.forEach(t),Bar=r(sAe," (Funnel Transformer model)"),sAe.forEach(t),xar=i(W),N8=n(W,"LI",{});var lAe=s(N8);zge=n(lAe,"STRONG",{});var ynt=s(zge);kar=r(ynt,"gpt2"),ynt.forEach(t),Rar=r(lAe," \u2014 "),zq=n(lAe,"A",{href:!0});var wnt=s(zq);Sar=r(wnt,"TFGPT2ForSequenceClassification"),wnt.forEach(t),Par=r(lAe," (OpenAI GPT-2 model)"),lAe.forEach(t),$ar=i(W),D8=n(W,"LI",{});var iAe=s(D8);Vge=n(iAe,"STRONG",{});var Ant=s(Vge);Iar=r(Ant,"layoutlm"),Ant.forEach(t),jar=r(iAe," \u2014 "),Vq=n(iAe,"A",{href:!0});var Lnt=s(Vq);Nar=r(Lnt,"TFLayoutLMForSequenceClassification"),Lnt.forEach(t),Dar=r(iAe," (LayoutLM model)"),iAe.forEach(t),qar=i(W),q8=n(W,"LI",{});var dAe=s(q8);Wge=n(dAe,"STRONG",{});var Bnt=s(Wge);Gar=r(Bnt,"longformer"),Bnt.forEach(t),Oar=r(dAe," \u2014 "),Wq=n(dAe,"A",{href:!0});var xnt=s(Wq);Xar=r(xnt,"TFLongformerForSequenceClassification"),xnt.forEach(t),zar=r(dAe," (Longformer model)"),dAe.forEach(t),Var=i(W),G8=n(W,"LI",{});var cAe=s(G8);Qge=n(cAe,"STRONG",{});var knt=s(Qge);War=r(knt,"mobilebert"),knt.forEach(t),Qar=r(cAe," \u2014 "),Qq=n(cAe,"A",{href:!0});var Rnt=s(Qq);Har=r(Rnt,"TFMobileBertForSequenceClassification"),Rnt.forEach(t),Uar=r(cAe," (MobileBERT model)"),cAe.forEach(t),Jar=i(W),O8=n(W,"LI",{});var fAe=s(O8);Hge=n(fAe,"STRONG",{});var Snt=s(Hge);Yar=r(Snt,"mpnet"),Snt.forEach(t),Kar=r(fAe," \u2014 "),Hq=n(fAe,"A",{href:!0});var Pnt=s(Hq);Zar=r(Pnt,"TFMPNetForSequenceClassification"),Pnt.forEach(t),enr=r(fAe," (MPNet model)"),fAe.forEach(t),onr=i(W),X8=n(W,"LI",{});var mAe=s(X8);Uge=n(mAe,"STRONG",{});var $nt=s(Uge);rnr=r($nt,"openai-gpt"),$nt.forEach(t),tnr=r(mAe," \u2014 "),Uq=n(mAe,"A",{href:!0});var Int=s(Uq);anr=r(Int,"TFOpenAIGPTForSequenceClassification"),Int.forEach(t),nnr=r(mAe," (OpenAI GPT model)"),mAe.forEach(t),snr=i(W),z8=n(W,"LI",{});var gAe=s(z8);Jge=n(gAe,"STRONG",{});var jnt=s(Jge);lnr=r(jnt,"rembert"),jnt.forEach(t),inr=r(gAe," \u2014 "),Jq=n(gAe,"A",{href:!0});var Nnt=s(Jq);dnr=r(Nnt,"TFRemBertForSequenceClassification"),Nnt.forEach(t),cnr=r(gAe," (RemBERT model)"),gAe.forEach(t),fnr=i(W),V8=n(W,"LI",{});var hAe=s(V8);Yge=n(hAe,"STRONG",{});var Dnt=s(Yge);mnr=r(Dnt,"roberta"),Dnt.forEach(t),gnr=r(hAe," \u2014 "),Yq=n(hAe,"A",{href:!0});var qnt=s(Yq);hnr=r(qnt,"TFRobertaForSequenceClassification"),qnt.forEach(t),pnr=r(hAe," (RoBERTa model)"),hAe.forEach(t),_nr=i(W),W8=n(W,"LI",{});var pAe=s(W8);Kge=n(pAe,"STRONG",{});var Gnt=s(Kge);unr=r(Gnt,"roformer"),Gnt.forEach(t),bnr=r(pAe," \u2014 "),Kq=n(pAe,"A",{href:!0});var Ont=s(Kq);vnr=r(Ont,"TFRoFormerForSequenceClassification"),Ont.forEach(t),Tnr=r(pAe," (RoFormer model)"),pAe.forEach(t),Fnr=i(W),Q8=n(W,"LI",{});var _Ae=s(Q8);Zge=n(_Ae,"STRONG",{});var Xnt=s(Zge);Cnr=r(Xnt,"tapas"),Xnt.forEach(t),Mnr=r(_Ae," \u2014 "),Zq=n(_Ae,"A",{href:!0});var znt=s(Zq);Enr=r(znt,"TFTapasForSequenceClassification"),znt.forEach(t),ynr=r(_Ae," (TAPAS model)"),_Ae.forEach(t),wnr=i(W),H8=n(W,"LI",{});var uAe=s(H8);ehe=n(uAe,"STRONG",{});var Vnt=s(ehe);Anr=r(Vnt,"transfo-xl"),Vnt.forEach(t),Lnr=r(uAe," \u2014 "),eG=n(uAe,"A",{href:!0});var Wnt=s(eG);Bnr=r(Wnt,"TFTransfoXLForSequenceClassification"),Wnt.forEach(t),xnr=r(uAe," (Transformer-XL model)"),uAe.forEach(t),knr=i(W),U8=n(W,"LI",{});var bAe=s(U8);ohe=n(bAe,"STRONG",{});var Qnt=s(ohe);Rnr=r(Qnt,"xlm"),Qnt.forEach(t),Snr=r(bAe," \u2014 "),oG=n(bAe,"A",{href:!0});var Hnt=s(oG);Pnr=r(Hnt,"TFXLMForSequenceClassification"),Hnt.forEach(t),$nr=r(bAe," (XLM model)"),bAe.forEach(t),Inr=i(W),J8=n(W,"LI",{});var vAe=s(J8);rhe=n(vAe,"STRONG",{});var Unt=s(rhe);jnr=r(Unt,"xlm-roberta"),Unt.forEach(t),Nnr=r(vAe," \u2014 "),rG=n(vAe,"A",{href:!0});var Jnt=s(rG);Dnr=r(Jnt,"TFXLMRobertaForSequenceClassification"),Jnt.forEach(t),qnr=r(vAe," (XLM-RoBERTa model)"),vAe.forEach(t),Gnr=i(W),Y8=n(W,"LI",{});var TAe=s(Y8);the=n(TAe,"STRONG",{});var Ynt=s(the);Onr=r(Ynt,"xlnet"),Ynt.forEach(t),Xnr=r(TAe," \u2014 "),tG=n(TAe,"A",{href:!0});var Knt=s(tG);znr=r(Knt,"TFXLNetForSequenceClassification"),Knt.forEach(t),Vnr=r(TAe," (XLNet model)"),TAe.forEach(t),W.forEach(t),Wnr=i(_a),ahe=n(_a,"P",{});var Znt=s(ahe);Qnr=r(Znt,"Examples:"),Znt.forEach(t),Hnr=i(_a),m(ww.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),L7e=i(d),Cc=n(d,"H2",{class:!0});var Nxe=s(Cc);K8=n(Nxe,"A",{id:!0,class:!0,href:!0});var est=s(K8);nhe=n(est,"SPAN",{});var ost=s(nhe);m(Aw.$$.fragment,ost),ost.forEach(t),est.forEach(t),Unr=i(Nxe),she=n(Nxe,"SPAN",{});var rst=s(she);Jnr=r(rst,"TFAutoModelForMultipleChoice"),rst.forEach(t),Nxe.forEach(t),B7e=i(d),Tr=n(d,"DIV",{class:!0});var Xl=s(Tr);m(Lw.$$.fragment,Xl),Ynr=i(Xl),Mc=n(Xl,"P",{});var aV=s(Mc);Knr=r(aV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lhe=n(aV,"CODE",{});var tst=s(lhe);Znr=r(tst,"from_pretrained()"),tst.forEach(t),esr=r(aV,"class method or the "),ihe=n(aV,"CODE",{});var ast=s(ihe);osr=r(ast,"from_config()"),ast.forEach(t),rsr=r(aV,`class
method.`),aV.forEach(t),tsr=i(Xl),Bw=n(Xl,"P",{});var Dxe=s(Bw);asr=r(Dxe,"This class cannot be instantiated directly using "),dhe=n(Dxe,"CODE",{});var nst=s(dhe);nsr=r(nst,"__init__()"),nst.forEach(t),ssr=r(Dxe," (throws an error)."),Dxe.forEach(t),lsr=i(Xl),gt=n(Xl,"DIV",{class:!0});var zl=s(gt);m(xw.$$.fragment,zl),isr=i(zl),che=n(zl,"P",{});var sst=s(che);dsr=r(sst,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sst.forEach(t),csr=i(zl),Ec=n(zl,"P",{});var nV=s(Ec);fsr=r(nV,`Note:
Loading a model from its configuration file does `),fhe=n(nV,"STRONG",{});var lst=s(fhe);msr=r(lst,"not"),lst.forEach(t),gsr=r(nV,` load the model weights. It only affects the
model\u2019s configuration. Use `),mhe=n(nV,"CODE",{});var ist=s(mhe);hsr=r(ist,"from_pretrained()"),ist.forEach(t),psr=r(nV,"to load the model weights."),nV.forEach(t),_sr=i(zl),ghe=n(zl,"P",{});var dst=s(ghe);usr=r(dst,"Examples:"),dst.forEach(t),bsr=i(zl),m(kw.$$.fragment,zl),zl.forEach(t),vsr=i(Xl),To=n(Xl,"DIV",{class:!0});var ua=s(To);m(Rw.$$.fragment,ua),Tsr=i(ua),hhe=n(ua,"P",{});var cst=s(hhe);Fsr=r(cst,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),cst.forEach(t),Csr=i(ua),pn=n(ua,"P",{});var N4=s(pn);Msr=r(N4,"The model class to instantiate is selected based on the "),phe=n(N4,"CODE",{});var fst=s(phe);Esr=r(fst,"model_type"),fst.forEach(t),ysr=r(N4,` property of the config object (either
passed as an argument or loaded from `),_he=n(N4,"CODE",{});var mst=s(_he);wsr=r(mst,"pretrained_model_name_or_path"),mst.forEach(t),Asr=r(N4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=n(N4,"CODE",{});var gst=s(uhe);Lsr=r(gst,"pretrained_model_name_or_path"),gst.forEach(t),Bsr=r(N4,":"),N4.forEach(t),xsr=i(ua),te=n(ua,"UL",{});var ne=s(te);Z8=n(ne,"LI",{});var FAe=s(Z8);bhe=n(FAe,"STRONG",{});var hst=s(bhe);ksr=r(hst,"albert"),hst.forEach(t),Rsr=r(FAe," \u2014 "),aG=n(FAe,"A",{href:!0});var pst=s(aG);Ssr=r(pst,"TFAlbertForMultipleChoice"),pst.forEach(t),Psr=r(FAe," (ALBERT model)"),FAe.forEach(t),$sr=i(ne),eF=n(ne,"LI",{});var CAe=s(eF);vhe=n(CAe,"STRONG",{});var _st=s(vhe);Isr=r(_st,"bert"),_st.forEach(t),jsr=r(CAe," \u2014 "),nG=n(CAe,"A",{href:!0});var ust=s(nG);Nsr=r(ust,"TFBertForMultipleChoice"),ust.forEach(t),Dsr=r(CAe," (BERT model)"),CAe.forEach(t),qsr=i(ne),oF=n(ne,"LI",{});var MAe=s(oF);The=n(MAe,"STRONG",{});var bst=s(The);Gsr=r(bst,"camembert"),bst.forEach(t),Osr=r(MAe," \u2014 "),sG=n(MAe,"A",{href:!0});var vst=s(sG);Xsr=r(vst,"TFCamembertForMultipleChoice"),vst.forEach(t),zsr=r(MAe," (CamemBERT model)"),MAe.forEach(t),Vsr=i(ne),rF=n(ne,"LI",{});var EAe=s(rF);Fhe=n(EAe,"STRONG",{});var Tst=s(Fhe);Wsr=r(Tst,"convbert"),Tst.forEach(t),Qsr=r(EAe," \u2014 "),lG=n(EAe,"A",{href:!0});var Fst=s(lG);Hsr=r(Fst,"TFConvBertForMultipleChoice"),Fst.forEach(t),Usr=r(EAe," (ConvBERT model)"),EAe.forEach(t),Jsr=i(ne),tF=n(ne,"LI",{});var yAe=s(tF);Che=n(yAe,"STRONG",{});var Cst=s(Che);Ysr=r(Cst,"distilbert"),Cst.forEach(t),Ksr=r(yAe," \u2014 "),iG=n(yAe,"A",{href:!0});var Mst=s(iG);Zsr=r(Mst,"TFDistilBertForMultipleChoice"),Mst.forEach(t),elr=r(yAe," (DistilBERT model)"),yAe.forEach(t),olr=i(ne),aF=n(ne,"LI",{});var wAe=s(aF);Mhe=n(wAe,"STRONG",{});var Est=s(Mhe);rlr=r(Est,"electra"),Est.forEach(t),tlr=r(wAe," \u2014 "),dG=n(wAe,"A",{href:!0});var yst=s(dG);alr=r(yst,"TFElectraForMultipleChoice"),yst.forEach(t),nlr=r(wAe," (ELECTRA model)"),wAe.forEach(t),slr=i(ne),nF=n(ne,"LI",{});var AAe=s(nF);Ehe=n(AAe,"STRONG",{});var wst=s(Ehe);llr=r(wst,"flaubert"),wst.forEach(t),ilr=r(AAe," \u2014 "),cG=n(AAe,"A",{href:!0});var Ast=s(cG);dlr=r(Ast,"TFFlaubertForMultipleChoice"),Ast.forEach(t),clr=r(AAe," (FlauBERT model)"),AAe.forEach(t),flr=i(ne),sF=n(ne,"LI",{});var LAe=s(sF);yhe=n(LAe,"STRONG",{});var Lst=s(yhe);mlr=r(Lst,"funnel"),Lst.forEach(t),glr=r(LAe," \u2014 "),fG=n(LAe,"A",{href:!0});var Bst=s(fG);hlr=r(Bst,"TFFunnelForMultipleChoice"),Bst.forEach(t),plr=r(LAe," (Funnel Transformer model)"),LAe.forEach(t),_lr=i(ne),lF=n(ne,"LI",{});var BAe=s(lF);whe=n(BAe,"STRONG",{});var xst=s(whe);ulr=r(xst,"longformer"),xst.forEach(t),blr=r(BAe," \u2014 "),mG=n(BAe,"A",{href:!0});var kst=s(mG);vlr=r(kst,"TFLongformerForMultipleChoice"),kst.forEach(t),Tlr=r(BAe," (Longformer model)"),BAe.forEach(t),Flr=i(ne),iF=n(ne,"LI",{});var xAe=s(iF);Ahe=n(xAe,"STRONG",{});var Rst=s(Ahe);Clr=r(Rst,"mobilebert"),Rst.forEach(t),Mlr=r(xAe," \u2014 "),gG=n(xAe,"A",{href:!0});var Sst=s(gG);Elr=r(Sst,"TFMobileBertForMultipleChoice"),Sst.forEach(t),ylr=r(xAe," (MobileBERT model)"),xAe.forEach(t),wlr=i(ne),dF=n(ne,"LI",{});var kAe=s(dF);Lhe=n(kAe,"STRONG",{});var Pst=s(Lhe);Alr=r(Pst,"mpnet"),Pst.forEach(t),Llr=r(kAe," \u2014 "),hG=n(kAe,"A",{href:!0});var $st=s(hG);Blr=r($st,"TFMPNetForMultipleChoice"),$st.forEach(t),xlr=r(kAe," (MPNet model)"),kAe.forEach(t),klr=i(ne),cF=n(ne,"LI",{});var RAe=s(cF);Bhe=n(RAe,"STRONG",{});var Ist=s(Bhe);Rlr=r(Ist,"rembert"),Ist.forEach(t),Slr=r(RAe," \u2014 "),pG=n(RAe,"A",{href:!0});var jst=s(pG);Plr=r(jst,"TFRemBertForMultipleChoice"),jst.forEach(t),$lr=r(RAe," (RemBERT model)"),RAe.forEach(t),Ilr=i(ne),fF=n(ne,"LI",{});var SAe=s(fF);xhe=n(SAe,"STRONG",{});var Nst=s(xhe);jlr=r(Nst,"roberta"),Nst.forEach(t),Nlr=r(SAe," \u2014 "),_G=n(SAe,"A",{href:!0});var Dst=s(_G);Dlr=r(Dst,"TFRobertaForMultipleChoice"),Dst.forEach(t),qlr=r(SAe," (RoBERTa model)"),SAe.forEach(t),Glr=i(ne),mF=n(ne,"LI",{});var PAe=s(mF);khe=n(PAe,"STRONG",{});var qst=s(khe);Olr=r(qst,"roformer"),qst.forEach(t),Xlr=r(PAe," \u2014 "),uG=n(PAe,"A",{href:!0});var Gst=s(uG);zlr=r(Gst,"TFRoFormerForMultipleChoice"),Gst.forEach(t),Vlr=r(PAe," (RoFormer model)"),PAe.forEach(t),Wlr=i(ne),gF=n(ne,"LI",{});var $Ae=s(gF);Rhe=n($Ae,"STRONG",{});var Ost=s(Rhe);Qlr=r(Ost,"xlm"),Ost.forEach(t),Hlr=r($Ae," \u2014 "),bG=n($Ae,"A",{href:!0});var Xst=s(bG);Ulr=r(Xst,"TFXLMForMultipleChoice"),Xst.forEach(t),Jlr=r($Ae," (XLM model)"),$Ae.forEach(t),Ylr=i(ne),hF=n(ne,"LI",{});var IAe=s(hF);She=n(IAe,"STRONG",{});var zst=s(She);Klr=r(zst,"xlm-roberta"),zst.forEach(t),Zlr=r(IAe," \u2014 "),vG=n(IAe,"A",{href:!0});var Vst=s(vG);eir=r(Vst,"TFXLMRobertaForMultipleChoice"),Vst.forEach(t),oir=r(IAe," (XLM-RoBERTa model)"),IAe.forEach(t),rir=i(ne),pF=n(ne,"LI",{});var jAe=s(pF);Phe=n(jAe,"STRONG",{});var Wst=s(Phe);tir=r(Wst,"xlnet"),Wst.forEach(t),air=r(jAe," \u2014 "),TG=n(jAe,"A",{href:!0});var Qst=s(TG);nir=r(Qst,"TFXLNetForMultipleChoice"),Qst.forEach(t),sir=r(jAe," (XLNet model)"),jAe.forEach(t),ne.forEach(t),lir=i(ua),$he=n(ua,"P",{});var Hst=s($he);iir=r(Hst,"Examples:"),Hst.forEach(t),dir=i(ua),m(Sw.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),x7e=i(d),yc=n(d,"H2",{class:!0});var qxe=s(yc);_F=n(qxe,"A",{id:!0,class:!0,href:!0});var Ust=s(_F);Ihe=n(Ust,"SPAN",{});var Jst=s(Ihe);m(Pw.$$.fragment,Jst),Jst.forEach(t),Ust.forEach(t),cir=i(qxe),jhe=n(qxe,"SPAN",{});var Yst=s(jhe);fir=r(Yst,"TFAutoModelForTableQuestionAnswering"),Yst.forEach(t),qxe.forEach(t),k7e=i(d),Fr=n(d,"DIV",{class:!0});var Vl=s(Fr);m($w.$$.fragment,Vl),mir=i(Vl),wc=n(Vl,"P",{});var sV=s(wc);gir=r(sV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Nhe=n(sV,"CODE",{});var Kst=s(Nhe);hir=r(Kst,"from_pretrained()"),Kst.forEach(t),pir=r(sV,"class method or the "),Dhe=n(sV,"CODE",{});var Zst=s(Dhe);_ir=r(Zst,"from_config()"),Zst.forEach(t),uir=r(sV,`class
method.`),sV.forEach(t),bir=i(Vl),Iw=n(Vl,"P",{});var Gxe=s(Iw);vir=r(Gxe,"This class cannot be instantiated directly using "),qhe=n(Gxe,"CODE",{});var elt=s(qhe);Tir=r(elt,"__init__()"),elt.forEach(t),Fir=r(Gxe," (throws an error)."),Gxe.forEach(t),Cir=i(Vl),ht=n(Vl,"DIV",{class:!0});var Wl=s(ht);m(jw.$$.fragment,Wl),Mir=i(Wl),Ghe=n(Wl,"P",{});var olt=s(Ghe);Eir=r(olt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),olt.forEach(t),yir=i(Wl),Ac=n(Wl,"P",{});var lV=s(Ac);wir=r(lV,`Note:
Loading a model from its configuration file does `),Ohe=n(lV,"STRONG",{});var rlt=s(Ohe);Air=r(rlt,"not"),rlt.forEach(t),Lir=r(lV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xhe=n(lV,"CODE",{});var tlt=s(Xhe);Bir=r(tlt,"from_pretrained()"),tlt.forEach(t),xir=r(lV,"to load the model weights."),lV.forEach(t),kir=i(Wl),zhe=n(Wl,"P",{});var alt=s(zhe);Rir=r(alt,"Examples:"),alt.forEach(t),Sir=i(Wl),m(Nw.$$.fragment,Wl),Wl.forEach(t),Pir=i(Vl),Fo=n(Vl,"DIV",{class:!0});var ba=s(Fo);m(Dw.$$.fragment,ba),$ir=i(ba),Vhe=n(ba,"P",{});var nlt=s(Vhe);Iir=r(nlt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),nlt.forEach(t),jir=i(ba),_n=n(ba,"P",{});var D4=s(_n);Nir=r(D4,"The model class to instantiate is selected based on the "),Whe=n(D4,"CODE",{});var slt=s(Whe);Dir=r(slt,"model_type"),slt.forEach(t),qir=r(D4,` property of the config object (either
passed as an argument or loaded from `),Qhe=n(D4,"CODE",{});var llt=s(Qhe);Gir=r(llt,"pretrained_model_name_or_path"),llt.forEach(t),Oir=r(D4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=n(D4,"CODE",{});var ilt=s(Hhe);Xir=r(ilt,"pretrained_model_name_or_path"),ilt.forEach(t),zir=r(D4,":"),D4.forEach(t),Vir=i(ba),Uhe=n(ba,"UL",{});var dlt=s(Uhe);uF=n(dlt,"LI",{});var NAe=s(uF);Jhe=n(NAe,"STRONG",{});var clt=s(Jhe);Wir=r(clt,"tapas"),clt.forEach(t),Qir=r(NAe," \u2014 "),FG=n(NAe,"A",{href:!0});var flt=s(FG);Hir=r(flt,"TFTapasForQuestionAnswering"),flt.forEach(t),Uir=r(NAe," (TAPAS model)"),NAe.forEach(t),dlt.forEach(t),Jir=i(ba),Yhe=n(ba,"P",{});var mlt=s(Yhe);Yir=r(mlt,"Examples:"),mlt.forEach(t),Kir=i(ba),m(qw.$$.fragment,ba),ba.forEach(t),Vl.forEach(t),R7e=i(d),Lc=n(d,"H2",{class:!0});var Oxe=s(Lc);bF=n(Oxe,"A",{id:!0,class:!0,href:!0});var glt=s(bF);Khe=n(glt,"SPAN",{});var hlt=s(Khe);m(Gw.$$.fragment,hlt),hlt.forEach(t),glt.forEach(t),Zir=i(Oxe),Zhe=n(Oxe,"SPAN",{});var plt=s(Zhe);edr=r(plt,"TFAutoModelForTokenClassification"),plt.forEach(t),Oxe.forEach(t),S7e=i(d),Cr=n(d,"DIV",{class:!0});var Ql=s(Cr);m(Ow.$$.fragment,Ql),odr=i(Ql),Bc=n(Ql,"P",{});var iV=s(Bc);rdr=r(iV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),epe=n(iV,"CODE",{});var _lt=s(epe);tdr=r(_lt,"from_pretrained()"),_lt.forEach(t),adr=r(iV,"class method or the "),ope=n(iV,"CODE",{});var ult=s(ope);ndr=r(ult,"from_config()"),ult.forEach(t),sdr=r(iV,`class
method.`),iV.forEach(t),ldr=i(Ql),Xw=n(Ql,"P",{});var Xxe=s(Xw);idr=r(Xxe,"This class cannot be instantiated directly using "),rpe=n(Xxe,"CODE",{});var blt=s(rpe);ddr=r(blt,"__init__()"),blt.forEach(t),cdr=r(Xxe," (throws an error)."),Xxe.forEach(t),fdr=i(Ql),pt=n(Ql,"DIV",{class:!0});var Hl=s(pt);m(zw.$$.fragment,Hl),mdr=i(Hl),tpe=n(Hl,"P",{});var vlt=s(tpe);gdr=r(vlt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),vlt.forEach(t),hdr=i(Hl),xc=n(Hl,"P",{});var dV=s(xc);pdr=r(dV,`Note:
Loading a model from its configuration file does `),ape=n(dV,"STRONG",{});var Tlt=s(ape);_dr=r(Tlt,"not"),Tlt.forEach(t),udr=r(dV,` load the model weights. It only affects the
model\u2019s configuration. Use `),npe=n(dV,"CODE",{});var Flt=s(npe);bdr=r(Flt,"from_pretrained()"),Flt.forEach(t),vdr=r(dV,"to load the model weights."),dV.forEach(t),Tdr=i(Hl),spe=n(Hl,"P",{});var Clt=s(spe);Fdr=r(Clt,"Examples:"),Clt.forEach(t),Cdr=i(Hl),m(Vw.$$.fragment,Hl),Hl.forEach(t),Mdr=i(Ql),Co=n(Ql,"DIV",{class:!0});var va=s(Co);m(Ww.$$.fragment,va),Edr=i(va),lpe=n(va,"P",{});var Mlt=s(lpe);ydr=r(Mlt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Mlt.forEach(t),wdr=i(va),un=n(va,"P",{});var q4=s(un);Adr=r(q4,"The model class to instantiate is selected based on the "),ipe=n(q4,"CODE",{});var Elt=s(ipe);Ldr=r(Elt,"model_type"),Elt.forEach(t),Bdr=r(q4,` property of the config object (either
passed as an argument or loaded from `),dpe=n(q4,"CODE",{});var ylt=s(dpe);xdr=r(ylt,"pretrained_model_name_or_path"),ylt.forEach(t),kdr=r(q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=n(q4,"CODE",{});var wlt=s(cpe);Rdr=r(wlt,"pretrained_model_name_or_path"),wlt.forEach(t),Sdr=r(q4,":"),q4.forEach(t),Pdr=i(va),K=n(va,"UL",{});var oe=s(K);vF=n(oe,"LI",{});var DAe=s(vF);fpe=n(DAe,"STRONG",{});var Alt=s(fpe);$dr=r(Alt,"albert"),Alt.forEach(t),Idr=r(DAe," \u2014 "),CG=n(DAe,"A",{href:!0});var Llt=s(CG);jdr=r(Llt,"TFAlbertForTokenClassification"),Llt.forEach(t),Ndr=r(DAe," (ALBERT model)"),DAe.forEach(t),Ddr=i(oe),TF=n(oe,"LI",{});var qAe=s(TF);mpe=n(qAe,"STRONG",{});var Blt=s(mpe);qdr=r(Blt,"bert"),Blt.forEach(t),Gdr=r(qAe," \u2014 "),MG=n(qAe,"A",{href:!0});var xlt=s(MG);Odr=r(xlt,"TFBertForTokenClassification"),xlt.forEach(t),Xdr=r(qAe," (BERT model)"),qAe.forEach(t),zdr=i(oe),FF=n(oe,"LI",{});var GAe=s(FF);gpe=n(GAe,"STRONG",{});var klt=s(gpe);Vdr=r(klt,"camembert"),klt.forEach(t),Wdr=r(GAe," \u2014 "),EG=n(GAe,"A",{href:!0});var Rlt=s(EG);Qdr=r(Rlt,"TFCamembertForTokenClassification"),Rlt.forEach(t),Hdr=r(GAe," (CamemBERT model)"),GAe.forEach(t),Udr=i(oe),CF=n(oe,"LI",{});var OAe=s(CF);hpe=n(OAe,"STRONG",{});var Slt=s(hpe);Jdr=r(Slt,"convbert"),Slt.forEach(t),Ydr=r(OAe," \u2014 "),yG=n(OAe,"A",{href:!0});var Plt=s(yG);Kdr=r(Plt,"TFConvBertForTokenClassification"),Plt.forEach(t),Zdr=r(OAe," (ConvBERT model)"),OAe.forEach(t),ecr=i(oe),MF=n(oe,"LI",{});var XAe=s(MF);ppe=n(XAe,"STRONG",{});var $lt=s(ppe);ocr=r($lt,"deberta"),$lt.forEach(t),rcr=r(XAe," \u2014 "),wG=n(XAe,"A",{href:!0});var Ilt=s(wG);tcr=r(Ilt,"TFDebertaForTokenClassification"),Ilt.forEach(t),acr=r(XAe," (DeBERTa model)"),XAe.forEach(t),ncr=i(oe),EF=n(oe,"LI",{});var zAe=s(EF);_pe=n(zAe,"STRONG",{});var jlt=s(_pe);scr=r(jlt,"deberta-v2"),jlt.forEach(t),lcr=r(zAe," \u2014 "),AG=n(zAe,"A",{href:!0});var Nlt=s(AG);icr=r(Nlt,"TFDebertaV2ForTokenClassification"),Nlt.forEach(t),dcr=r(zAe," (DeBERTa-v2 model)"),zAe.forEach(t),ccr=i(oe),yF=n(oe,"LI",{});var VAe=s(yF);upe=n(VAe,"STRONG",{});var Dlt=s(upe);fcr=r(Dlt,"distilbert"),Dlt.forEach(t),mcr=r(VAe," \u2014 "),LG=n(VAe,"A",{href:!0});var qlt=s(LG);gcr=r(qlt,"TFDistilBertForTokenClassification"),qlt.forEach(t),hcr=r(VAe," (DistilBERT model)"),VAe.forEach(t),pcr=i(oe),wF=n(oe,"LI",{});var WAe=s(wF);bpe=n(WAe,"STRONG",{});var Glt=s(bpe);_cr=r(Glt,"electra"),Glt.forEach(t),ucr=r(WAe," \u2014 "),BG=n(WAe,"A",{href:!0});var Olt=s(BG);bcr=r(Olt,"TFElectraForTokenClassification"),Olt.forEach(t),vcr=r(WAe," (ELECTRA model)"),WAe.forEach(t),Tcr=i(oe),AF=n(oe,"LI",{});var QAe=s(AF);vpe=n(QAe,"STRONG",{});var Xlt=s(vpe);Fcr=r(Xlt,"flaubert"),Xlt.forEach(t),Ccr=r(QAe," \u2014 "),xG=n(QAe,"A",{href:!0});var zlt=s(xG);Mcr=r(zlt,"TFFlaubertForTokenClassification"),zlt.forEach(t),Ecr=r(QAe," (FlauBERT model)"),QAe.forEach(t),ycr=i(oe),LF=n(oe,"LI",{});var HAe=s(LF);Tpe=n(HAe,"STRONG",{});var Vlt=s(Tpe);wcr=r(Vlt,"funnel"),Vlt.forEach(t),Acr=r(HAe," \u2014 "),kG=n(HAe,"A",{href:!0});var Wlt=s(kG);Lcr=r(Wlt,"TFFunnelForTokenClassification"),Wlt.forEach(t),Bcr=r(HAe," (Funnel Transformer model)"),HAe.forEach(t),xcr=i(oe),BF=n(oe,"LI",{});var UAe=s(BF);Fpe=n(UAe,"STRONG",{});var Qlt=s(Fpe);kcr=r(Qlt,"layoutlm"),Qlt.forEach(t),Rcr=r(UAe," \u2014 "),RG=n(UAe,"A",{href:!0});var Hlt=s(RG);Scr=r(Hlt,"TFLayoutLMForTokenClassification"),Hlt.forEach(t),Pcr=r(UAe," (LayoutLM model)"),UAe.forEach(t),$cr=i(oe),xF=n(oe,"LI",{});var JAe=s(xF);Cpe=n(JAe,"STRONG",{});var Ult=s(Cpe);Icr=r(Ult,"longformer"),Ult.forEach(t),jcr=r(JAe," \u2014 "),SG=n(JAe,"A",{href:!0});var Jlt=s(SG);Ncr=r(Jlt,"TFLongformerForTokenClassification"),Jlt.forEach(t),Dcr=r(JAe," (Longformer model)"),JAe.forEach(t),qcr=i(oe),kF=n(oe,"LI",{});var YAe=s(kF);Mpe=n(YAe,"STRONG",{});var Ylt=s(Mpe);Gcr=r(Ylt,"mobilebert"),Ylt.forEach(t),Ocr=r(YAe," \u2014 "),PG=n(YAe,"A",{href:!0});var Klt=s(PG);Xcr=r(Klt,"TFMobileBertForTokenClassification"),Klt.forEach(t),zcr=r(YAe," (MobileBERT model)"),YAe.forEach(t),Vcr=i(oe),RF=n(oe,"LI",{});var KAe=s(RF);Epe=n(KAe,"STRONG",{});var Zlt=s(Epe);Wcr=r(Zlt,"mpnet"),Zlt.forEach(t),Qcr=r(KAe," \u2014 "),$G=n(KAe,"A",{href:!0});var eit=s($G);Hcr=r(eit,"TFMPNetForTokenClassification"),eit.forEach(t),Ucr=r(KAe," (MPNet model)"),KAe.forEach(t),Jcr=i(oe),SF=n(oe,"LI",{});var ZAe=s(SF);ype=n(ZAe,"STRONG",{});var oit=s(ype);Ycr=r(oit,"rembert"),oit.forEach(t),Kcr=r(ZAe," \u2014 "),IG=n(ZAe,"A",{href:!0});var rit=s(IG);Zcr=r(rit,"TFRemBertForTokenClassification"),rit.forEach(t),efr=r(ZAe," (RemBERT model)"),ZAe.forEach(t),ofr=i(oe),PF=n(oe,"LI",{});var e6e=s(PF);wpe=n(e6e,"STRONG",{});var tit=s(wpe);rfr=r(tit,"roberta"),tit.forEach(t),tfr=r(e6e," \u2014 "),jG=n(e6e,"A",{href:!0});var ait=s(jG);afr=r(ait,"TFRobertaForTokenClassification"),ait.forEach(t),nfr=r(e6e," (RoBERTa model)"),e6e.forEach(t),sfr=i(oe),$F=n(oe,"LI",{});var o6e=s($F);Ape=n(o6e,"STRONG",{});var nit=s(Ape);lfr=r(nit,"roformer"),nit.forEach(t),ifr=r(o6e," \u2014 "),NG=n(o6e,"A",{href:!0});var sit=s(NG);dfr=r(sit,"TFRoFormerForTokenClassification"),sit.forEach(t),cfr=r(o6e," (RoFormer model)"),o6e.forEach(t),ffr=i(oe),IF=n(oe,"LI",{});var r6e=s(IF);Lpe=n(r6e,"STRONG",{});var lit=s(Lpe);mfr=r(lit,"xlm"),lit.forEach(t),gfr=r(r6e," \u2014 "),DG=n(r6e,"A",{href:!0});var iit=s(DG);hfr=r(iit,"TFXLMForTokenClassification"),iit.forEach(t),pfr=r(r6e," (XLM model)"),r6e.forEach(t),_fr=i(oe),jF=n(oe,"LI",{});var t6e=s(jF);Bpe=n(t6e,"STRONG",{});var dit=s(Bpe);ufr=r(dit,"xlm-roberta"),dit.forEach(t),bfr=r(t6e," \u2014 "),qG=n(t6e,"A",{href:!0});var cit=s(qG);vfr=r(cit,"TFXLMRobertaForTokenClassification"),cit.forEach(t),Tfr=r(t6e," (XLM-RoBERTa model)"),t6e.forEach(t),Ffr=i(oe),NF=n(oe,"LI",{});var a6e=s(NF);xpe=n(a6e,"STRONG",{});var fit=s(xpe);Cfr=r(fit,"xlnet"),fit.forEach(t),Mfr=r(a6e," \u2014 "),GG=n(a6e,"A",{href:!0});var mit=s(GG);Efr=r(mit,"TFXLNetForTokenClassification"),mit.forEach(t),yfr=r(a6e," (XLNet model)"),a6e.forEach(t),oe.forEach(t),wfr=i(va),kpe=n(va,"P",{});var git=s(kpe);Afr=r(git,"Examples:"),git.forEach(t),Lfr=i(va),m(Qw.$$.fragment,va),va.forEach(t),Ql.forEach(t),P7e=i(d),kc=n(d,"H2",{class:!0});var zxe=s(kc);DF=n(zxe,"A",{id:!0,class:!0,href:!0});var hit=s(DF);Rpe=n(hit,"SPAN",{});var pit=s(Rpe);m(Hw.$$.fragment,pit),pit.forEach(t),hit.forEach(t),Bfr=i(zxe),Spe=n(zxe,"SPAN",{});var _it=s(Spe);xfr=r(_it,"TFAutoModelForQuestionAnswering"),_it.forEach(t),zxe.forEach(t),$7e=i(d),Mr=n(d,"DIV",{class:!0});var Ul=s(Mr);m(Uw.$$.fragment,Ul),kfr=i(Ul),Rc=n(Ul,"P",{});var cV=s(Rc);Rfr=r(cV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ppe=n(cV,"CODE",{});var uit=s(Ppe);Sfr=r(uit,"from_pretrained()"),uit.forEach(t),Pfr=r(cV,"class method or the "),$pe=n(cV,"CODE",{});var bit=s($pe);$fr=r(bit,"from_config()"),bit.forEach(t),Ifr=r(cV,`class
method.`),cV.forEach(t),jfr=i(Ul),Jw=n(Ul,"P",{});var Vxe=s(Jw);Nfr=r(Vxe,"This class cannot be instantiated directly using "),Ipe=n(Vxe,"CODE",{});var vit=s(Ipe);Dfr=r(vit,"__init__()"),vit.forEach(t),qfr=r(Vxe," (throws an error)."),Vxe.forEach(t),Gfr=i(Ul),_t=n(Ul,"DIV",{class:!0});var Jl=s(_t);m(Yw.$$.fragment,Jl),Ofr=i(Jl),jpe=n(Jl,"P",{});var Tit=s(jpe);Xfr=r(Tit,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Tit.forEach(t),zfr=i(Jl),Sc=n(Jl,"P",{});var fV=s(Sc);Vfr=r(fV,`Note:
Loading a model from its configuration file does `),Npe=n(fV,"STRONG",{});var Fit=s(Npe);Wfr=r(Fit,"not"),Fit.forEach(t),Qfr=r(fV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dpe=n(fV,"CODE",{});var Cit=s(Dpe);Hfr=r(Cit,"from_pretrained()"),Cit.forEach(t),Ufr=r(fV,"to load the model weights."),fV.forEach(t),Jfr=i(Jl),qpe=n(Jl,"P",{});var Mit=s(qpe);Yfr=r(Mit,"Examples:"),Mit.forEach(t),Kfr=i(Jl),m(Kw.$$.fragment,Jl),Jl.forEach(t),Zfr=i(Ul),Mo=n(Ul,"DIV",{class:!0});var Ta=s(Mo);m(Zw.$$.fragment,Ta),emr=i(Ta),Gpe=n(Ta,"P",{});var Eit=s(Gpe);omr=r(Eit,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Eit.forEach(t),rmr=i(Ta),bn=n(Ta,"P",{});var G4=s(bn);tmr=r(G4,"The model class to instantiate is selected based on the "),Ope=n(G4,"CODE",{});var yit=s(Ope);amr=r(yit,"model_type"),yit.forEach(t),nmr=r(G4,` property of the config object (either
passed as an argument or loaded from `),Xpe=n(G4,"CODE",{});var wit=s(Xpe);smr=r(wit,"pretrained_model_name_or_path"),wit.forEach(t),lmr=r(G4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=n(G4,"CODE",{});var Ait=s(zpe);imr=r(Ait,"pretrained_model_name_or_path"),Ait.forEach(t),dmr=r(G4,":"),G4.forEach(t),cmr=i(Ta),Z=n(Ta,"UL",{});var re=s(Z);qF=n(re,"LI",{});var n6e=s(qF);Vpe=n(n6e,"STRONG",{});var Lit=s(Vpe);fmr=r(Lit,"albert"),Lit.forEach(t),mmr=r(n6e," \u2014 "),OG=n(n6e,"A",{href:!0});var Bit=s(OG);gmr=r(Bit,"TFAlbertForQuestionAnswering"),Bit.forEach(t),hmr=r(n6e," (ALBERT model)"),n6e.forEach(t),pmr=i(re),GF=n(re,"LI",{});var s6e=s(GF);Wpe=n(s6e,"STRONG",{});var xit=s(Wpe);_mr=r(xit,"bert"),xit.forEach(t),umr=r(s6e," \u2014 "),XG=n(s6e,"A",{href:!0});var kit=s(XG);bmr=r(kit,"TFBertForQuestionAnswering"),kit.forEach(t),vmr=r(s6e," (BERT model)"),s6e.forEach(t),Tmr=i(re),OF=n(re,"LI",{});var l6e=s(OF);Qpe=n(l6e,"STRONG",{});var Rit=s(Qpe);Fmr=r(Rit,"camembert"),Rit.forEach(t),Cmr=r(l6e," \u2014 "),zG=n(l6e,"A",{href:!0});var Sit=s(zG);Mmr=r(Sit,"TFCamembertForQuestionAnswering"),Sit.forEach(t),Emr=r(l6e," (CamemBERT model)"),l6e.forEach(t),ymr=i(re),XF=n(re,"LI",{});var i6e=s(XF);Hpe=n(i6e,"STRONG",{});var Pit=s(Hpe);wmr=r(Pit,"convbert"),Pit.forEach(t),Amr=r(i6e," \u2014 "),VG=n(i6e,"A",{href:!0});var $it=s(VG);Lmr=r($it,"TFConvBertForQuestionAnswering"),$it.forEach(t),Bmr=r(i6e," (ConvBERT model)"),i6e.forEach(t),xmr=i(re),zF=n(re,"LI",{});var d6e=s(zF);Upe=n(d6e,"STRONG",{});var Iit=s(Upe);kmr=r(Iit,"deberta"),Iit.forEach(t),Rmr=r(d6e," \u2014 "),WG=n(d6e,"A",{href:!0});var jit=s(WG);Smr=r(jit,"TFDebertaForQuestionAnswering"),jit.forEach(t),Pmr=r(d6e," (DeBERTa model)"),d6e.forEach(t),$mr=i(re),VF=n(re,"LI",{});var c6e=s(VF);Jpe=n(c6e,"STRONG",{});var Nit=s(Jpe);Imr=r(Nit,"deberta-v2"),Nit.forEach(t),jmr=r(c6e," \u2014 "),QG=n(c6e,"A",{href:!0});var Dit=s(QG);Nmr=r(Dit,"TFDebertaV2ForQuestionAnswering"),Dit.forEach(t),Dmr=r(c6e," (DeBERTa-v2 model)"),c6e.forEach(t),qmr=i(re),WF=n(re,"LI",{});var f6e=s(WF);Ype=n(f6e,"STRONG",{});var qit=s(Ype);Gmr=r(qit,"distilbert"),qit.forEach(t),Omr=r(f6e," \u2014 "),HG=n(f6e,"A",{href:!0});var Git=s(HG);Xmr=r(Git,"TFDistilBertForQuestionAnswering"),Git.forEach(t),zmr=r(f6e," (DistilBERT model)"),f6e.forEach(t),Vmr=i(re),QF=n(re,"LI",{});var m6e=s(QF);Kpe=n(m6e,"STRONG",{});var Oit=s(Kpe);Wmr=r(Oit,"electra"),Oit.forEach(t),Qmr=r(m6e," \u2014 "),UG=n(m6e,"A",{href:!0});var Xit=s(UG);Hmr=r(Xit,"TFElectraForQuestionAnswering"),Xit.forEach(t),Umr=r(m6e," (ELECTRA model)"),m6e.forEach(t),Jmr=i(re),HF=n(re,"LI",{});var g6e=s(HF);Zpe=n(g6e,"STRONG",{});var zit=s(Zpe);Ymr=r(zit,"flaubert"),zit.forEach(t),Kmr=r(g6e," \u2014 "),JG=n(g6e,"A",{href:!0});var Vit=s(JG);Zmr=r(Vit,"TFFlaubertForQuestionAnsweringSimple"),Vit.forEach(t),egr=r(g6e," (FlauBERT model)"),g6e.forEach(t),ogr=i(re),UF=n(re,"LI",{});var h6e=s(UF);e_e=n(h6e,"STRONG",{});var Wit=s(e_e);rgr=r(Wit,"funnel"),Wit.forEach(t),tgr=r(h6e," \u2014 "),YG=n(h6e,"A",{href:!0});var Qit=s(YG);agr=r(Qit,"TFFunnelForQuestionAnswering"),Qit.forEach(t),ngr=r(h6e," (Funnel Transformer model)"),h6e.forEach(t),sgr=i(re),JF=n(re,"LI",{});var p6e=s(JF);o_e=n(p6e,"STRONG",{});var Hit=s(o_e);lgr=r(Hit,"longformer"),Hit.forEach(t),igr=r(p6e," \u2014 "),KG=n(p6e,"A",{href:!0});var Uit=s(KG);dgr=r(Uit,"TFLongformerForQuestionAnswering"),Uit.forEach(t),cgr=r(p6e," (Longformer model)"),p6e.forEach(t),fgr=i(re),YF=n(re,"LI",{});var _6e=s(YF);r_e=n(_6e,"STRONG",{});var Jit=s(r_e);mgr=r(Jit,"mobilebert"),Jit.forEach(t),ggr=r(_6e," \u2014 "),ZG=n(_6e,"A",{href:!0});var Yit=s(ZG);hgr=r(Yit,"TFMobileBertForQuestionAnswering"),Yit.forEach(t),pgr=r(_6e," (MobileBERT model)"),_6e.forEach(t),_gr=i(re),KF=n(re,"LI",{});var u6e=s(KF);t_e=n(u6e,"STRONG",{});var Kit=s(t_e);ugr=r(Kit,"mpnet"),Kit.forEach(t),bgr=r(u6e," \u2014 "),eO=n(u6e,"A",{href:!0});var Zit=s(eO);vgr=r(Zit,"TFMPNetForQuestionAnswering"),Zit.forEach(t),Tgr=r(u6e," (MPNet model)"),u6e.forEach(t),Fgr=i(re),ZF=n(re,"LI",{});var b6e=s(ZF);a_e=n(b6e,"STRONG",{});var edt=s(a_e);Cgr=r(edt,"rembert"),edt.forEach(t),Mgr=r(b6e," \u2014 "),oO=n(b6e,"A",{href:!0});var odt=s(oO);Egr=r(odt,"TFRemBertForQuestionAnswering"),odt.forEach(t),ygr=r(b6e," (RemBERT model)"),b6e.forEach(t),wgr=i(re),e9=n(re,"LI",{});var v6e=s(e9);n_e=n(v6e,"STRONG",{});var rdt=s(n_e);Agr=r(rdt,"roberta"),rdt.forEach(t),Lgr=r(v6e," \u2014 "),rO=n(v6e,"A",{href:!0});var tdt=s(rO);Bgr=r(tdt,"TFRobertaForQuestionAnswering"),tdt.forEach(t),xgr=r(v6e," (RoBERTa model)"),v6e.forEach(t),kgr=i(re),o9=n(re,"LI",{});var T6e=s(o9);s_e=n(T6e,"STRONG",{});var adt=s(s_e);Rgr=r(adt,"roformer"),adt.forEach(t),Sgr=r(T6e," \u2014 "),tO=n(T6e,"A",{href:!0});var ndt=s(tO);Pgr=r(ndt,"TFRoFormerForQuestionAnswering"),ndt.forEach(t),$gr=r(T6e," (RoFormer model)"),T6e.forEach(t),Igr=i(re),r9=n(re,"LI",{});var F6e=s(r9);l_e=n(F6e,"STRONG",{});var sdt=s(l_e);jgr=r(sdt,"xlm"),sdt.forEach(t),Ngr=r(F6e," \u2014 "),aO=n(F6e,"A",{href:!0});var ldt=s(aO);Dgr=r(ldt,"TFXLMForQuestionAnsweringSimple"),ldt.forEach(t),qgr=r(F6e," (XLM model)"),F6e.forEach(t),Ggr=i(re),t9=n(re,"LI",{});var C6e=s(t9);i_e=n(C6e,"STRONG",{});var idt=s(i_e);Ogr=r(idt,"xlm-roberta"),idt.forEach(t),Xgr=r(C6e," \u2014 "),nO=n(C6e,"A",{href:!0});var ddt=s(nO);zgr=r(ddt,"TFXLMRobertaForQuestionAnswering"),ddt.forEach(t),Vgr=r(C6e," (XLM-RoBERTa model)"),C6e.forEach(t),Wgr=i(re),a9=n(re,"LI",{});var M6e=s(a9);d_e=n(M6e,"STRONG",{});var cdt=s(d_e);Qgr=r(cdt,"xlnet"),cdt.forEach(t),Hgr=r(M6e," \u2014 "),sO=n(M6e,"A",{href:!0});var fdt=s(sO);Ugr=r(fdt,"TFXLNetForQuestionAnsweringSimple"),fdt.forEach(t),Jgr=r(M6e," (XLNet model)"),M6e.forEach(t),re.forEach(t),Ygr=i(Ta),c_e=n(Ta,"P",{});var mdt=s(c_e);Kgr=r(mdt,"Examples:"),mdt.forEach(t),Zgr=i(Ta),m(eA.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),I7e=i(d),Pc=n(d,"H2",{class:!0});var Wxe=s(Pc);n9=n(Wxe,"A",{id:!0,class:!0,href:!0});var gdt=s(n9);f_e=n(gdt,"SPAN",{});var hdt=s(f_e);m(oA.$$.fragment,hdt),hdt.forEach(t),gdt.forEach(t),ehr=i(Wxe),m_e=n(Wxe,"SPAN",{});var pdt=s(m_e);ohr=r(pdt,"TFAutoModelForVision2Seq"),pdt.forEach(t),Wxe.forEach(t),j7e=i(d),Er=n(d,"DIV",{class:!0});var Yl=s(Er);m(rA.$$.fragment,Yl),rhr=i(Yl),$c=n(Yl,"P",{});var mV=s($c);thr=r(mV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),g_e=n(mV,"CODE",{});var _dt=s(g_e);ahr=r(_dt,"from_pretrained()"),_dt.forEach(t),nhr=r(mV,"class method or the "),h_e=n(mV,"CODE",{});var udt=s(h_e);shr=r(udt,"from_config()"),udt.forEach(t),lhr=r(mV,`class
method.`),mV.forEach(t),ihr=i(Yl),tA=n(Yl,"P",{});var Qxe=s(tA);dhr=r(Qxe,"This class cannot be instantiated directly using "),p_e=n(Qxe,"CODE",{});var bdt=s(p_e);chr=r(bdt,"__init__()"),bdt.forEach(t),fhr=r(Qxe," (throws an error)."),Qxe.forEach(t),mhr=i(Yl),ut=n(Yl,"DIV",{class:!0});var Kl=s(ut);m(aA.$$.fragment,Kl),ghr=i(Kl),__e=n(Kl,"P",{});var vdt=s(__e);hhr=r(vdt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vdt.forEach(t),phr=i(Kl),Ic=n(Kl,"P",{});var gV=s(Ic);_hr=r(gV,`Note:
Loading a model from its configuration file does `),u_e=n(gV,"STRONG",{});var Tdt=s(u_e);uhr=r(Tdt,"not"),Tdt.forEach(t),bhr=r(gV,` load the model weights. It only affects the
model\u2019s configuration. Use `),b_e=n(gV,"CODE",{});var Fdt=s(b_e);vhr=r(Fdt,"from_pretrained()"),Fdt.forEach(t),Thr=r(gV,"to load the model weights."),gV.forEach(t),Fhr=i(Kl),v_e=n(Kl,"P",{});var Cdt=s(v_e);Chr=r(Cdt,"Examples:"),Cdt.forEach(t),Mhr=i(Kl),m(nA.$$.fragment,Kl),Kl.forEach(t),Ehr=i(Yl),Eo=n(Yl,"DIV",{class:!0});var Fa=s(Eo);m(sA.$$.fragment,Fa),yhr=i(Fa),T_e=n(Fa,"P",{});var Mdt=s(T_e);whr=r(Mdt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Mdt.forEach(t),Ahr=i(Fa),vn=n(Fa,"P",{});var O4=s(vn);Lhr=r(O4,"The model class to instantiate is selected based on the "),F_e=n(O4,"CODE",{});var Edt=s(F_e);Bhr=r(Edt,"model_type"),Edt.forEach(t),xhr=r(O4,` property of the config object (either
passed as an argument or loaded from `),C_e=n(O4,"CODE",{});var ydt=s(C_e);khr=r(ydt,"pretrained_model_name_or_path"),ydt.forEach(t),Rhr=r(O4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M_e=n(O4,"CODE",{});var wdt=s(M_e);Shr=r(wdt,"pretrained_model_name_or_path"),wdt.forEach(t),Phr=r(O4,":"),O4.forEach(t),$hr=i(Fa),E_e=n(Fa,"UL",{});var Adt=s(E_e);s9=n(Adt,"LI",{});var E6e=s(s9);y_e=n(E6e,"STRONG",{});var Ldt=s(y_e);Ihr=r(Ldt,"vision-encoder-decoder"),Ldt.forEach(t),jhr=r(E6e," \u2014 "),lO=n(E6e,"A",{href:!0});var Bdt=s(lO);Nhr=r(Bdt,"TFVisionEncoderDecoderModel"),Bdt.forEach(t),Dhr=r(E6e," (Vision Encoder decoder model)"),E6e.forEach(t),Adt.forEach(t),qhr=i(Fa),w_e=n(Fa,"P",{});var xdt=s(w_e);Ghr=r(xdt,"Examples:"),xdt.forEach(t),Ohr=i(Fa),m(lA.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),N7e=i(d),jc=n(d,"H2",{class:!0});var Hxe=s(jc);l9=n(Hxe,"A",{id:!0,class:!0,href:!0});var kdt=s(l9);A_e=n(kdt,"SPAN",{});var Rdt=s(A_e);m(iA.$$.fragment,Rdt),Rdt.forEach(t),kdt.forEach(t),Xhr=i(Hxe),L_e=n(Hxe,"SPAN",{});var Sdt=s(L_e);zhr=r(Sdt,"TFAutoModelForSpeechSeq2Seq"),Sdt.forEach(t),Hxe.forEach(t),D7e=i(d),yr=n(d,"DIV",{class:!0});var Zl=s(yr);m(dA.$$.fragment,Zl),Vhr=i(Zl),Nc=n(Zl,"P",{});var hV=s(Nc);Whr=r(hV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),B_e=n(hV,"CODE",{});var Pdt=s(B_e);Qhr=r(Pdt,"from_pretrained()"),Pdt.forEach(t),Hhr=r(hV,"class method or the "),x_e=n(hV,"CODE",{});var $dt=s(x_e);Uhr=r($dt,"from_config()"),$dt.forEach(t),Jhr=r(hV,`class
method.`),hV.forEach(t),Yhr=i(Zl),cA=n(Zl,"P",{});var Uxe=s(cA);Khr=r(Uxe,"This class cannot be instantiated directly using "),k_e=n(Uxe,"CODE",{});var Idt=s(k_e);Zhr=r(Idt,"__init__()"),Idt.forEach(t),epr=r(Uxe," (throws an error)."),Uxe.forEach(t),opr=i(Zl),bt=n(Zl,"DIV",{class:!0});var ei=s(bt);m(fA.$$.fragment,ei),rpr=i(ei),R_e=n(ei,"P",{});var jdt=s(R_e);tpr=r(jdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jdt.forEach(t),apr=i(ei),Dc=n(ei,"P",{});var pV=s(Dc);npr=r(pV,`Note:
Loading a model from its configuration file does `),S_e=n(pV,"STRONG",{});var Ndt=s(S_e);spr=r(Ndt,"not"),Ndt.forEach(t),lpr=r(pV,` load the model weights. It only affects the
model\u2019s configuration. Use `),P_e=n(pV,"CODE",{});var Ddt=s(P_e);ipr=r(Ddt,"from_pretrained()"),Ddt.forEach(t),dpr=r(pV,"to load the model weights."),pV.forEach(t),cpr=i(ei),$_e=n(ei,"P",{});var qdt=s($_e);fpr=r(qdt,"Examples:"),qdt.forEach(t),mpr=i(ei),m(mA.$$.fragment,ei),ei.forEach(t),gpr=i(Zl),yo=n(Zl,"DIV",{class:!0});var Ca=s(yo);m(gA.$$.fragment,Ca),hpr=i(Ca),I_e=n(Ca,"P",{});var Gdt=s(I_e);ppr=r(Gdt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Gdt.forEach(t),_pr=i(Ca),Tn=n(Ca,"P",{});var X4=s(Tn);upr=r(X4,"The model class to instantiate is selected based on the "),j_e=n(X4,"CODE",{});var Odt=s(j_e);bpr=r(Odt,"model_type"),Odt.forEach(t),vpr=r(X4,` property of the config object (either
passed as an argument or loaded from `),N_e=n(X4,"CODE",{});var Xdt=s(N_e);Tpr=r(Xdt,"pretrained_model_name_or_path"),Xdt.forEach(t),Fpr=r(X4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=n(X4,"CODE",{});var zdt=s(D_e);Cpr=r(zdt,"pretrained_model_name_or_path"),zdt.forEach(t),Mpr=r(X4,":"),X4.forEach(t),Epr=i(Ca),q_e=n(Ca,"UL",{});var Vdt=s(q_e);i9=n(Vdt,"LI",{});var y6e=s(i9);G_e=n(y6e,"STRONG",{});var Wdt=s(G_e);ypr=r(Wdt,"speech_to_text"),Wdt.forEach(t),wpr=r(y6e," \u2014 "),iO=n(y6e,"A",{href:!0});var Qdt=s(iO);Apr=r(Qdt,"TFSpeech2TextForConditionalGeneration"),Qdt.forEach(t),Lpr=r(y6e," (Speech2Text model)"),y6e.forEach(t),Vdt.forEach(t),Bpr=i(Ca),O_e=n(Ca,"P",{});var Hdt=s(O_e);xpr=r(Hdt,"Examples:"),Hdt.forEach(t),kpr=i(Ca),m(hA.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),q7e=i(d),qc=n(d,"H2",{class:!0});var Jxe=s(qc);d9=n(Jxe,"A",{id:!0,class:!0,href:!0});var Udt=s(d9);X_e=n(Udt,"SPAN",{});var Jdt=s(X_e);m(pA.$$.fragment,Jdt),Jdt.forEach(t),Udt.forEach(t),Rpr=i(Jxe),z_e=n(Jxe,"SPAN",{});var Ydt=s(z_e);Spr=r(Ydt,"FlaxAutoModel"),Ydt.forEach(t),Jxe.forEach(t),G7e=i(d),wr=n(d,"DIV",{class:!0});var oi=s(wr);m(_A.$$.fragment,oi),Ppr=i(oi),Gc=n(oi,"P",{});var _V=s(Gc);$pr=r(_V,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),V_e=n(_V,"CODE",{});var Kdt=s(V_e);Ipr=r(Kdt,"from_pretrained()"),Kdt.forEach(t),jpr=r(_V,"class method or the "),W_e=n(_V,"CODE",{});var Zdt=s(W_e);Npr=r(Zdt,"from_config()"),Zdt.forEach(t),Dpr=r(_V,`class
method.`),_V.forEach(t),qpr=i(oi),uA=n(oi,"P",{});var Yxe=s(uA);Gpr=r(Yxe,"This class cannot be instantiated directly using "),Q_e=n(Yxe,"CODE",{});var ect=s(Q_e);Opr=r(ect,"__init__()"),ect.forEach(t),Xpr=r(Yxe," (throws an error)."),Yxe.forEach(t),zpr=i(oi),vt=n(oi,"DIV",{class:!0});var ri=s(vt);m(bA.$$.fragment,ri),Vpr=i(ri),H_e=n(ri,"P",{});var oct=s(H_e);Wpr=r(oct,"Instantiates one of the base model classes of the library from a configuration."),oct.forEach(t),Qpr=i(ri),Oc=n(ri,"P",{});var uV=s(Oc);Hpr=r(uV,`Note:
Loading a model from its configuration file does `),U_e=n(uV,"STRONG",{});var rct=s(U_e);Upr=r(rct,"not"),rct.forEach(t),Jpr=r(uV,` load the model weights. It only affects the
model\u2019s configuration. Use `),J_e=n(uV,"CODE",{});var tct=s(J_e);Ypr=r(tct,"from_pretrained()"),tct.forEach(t),Kpr=r(uV,"to load the model weights."),uV.forEach(t),Zpr=i(ri),Y_e=n(ri,"P",{});var act=s(Y_e);e_r=r(act,"Examples:"),act.forEach(t),o_r=i(ri),m(vA.$$.fragment,ri),ri.forEach(t),r_r=i(oi),wo=n(oi,"DIV",{class:!0});var Ma=s(wo);m(TA.$$.fragment,Ma),t_r=i(Ma),K_e=n(Ma,"P",{});var nct=s(K_e);a_r=r(nct,"Instantiate one of the base model classes of the library from a pretrained model."),nct.forEach(t),n_r=i(Ma),Fn=n(Ma,"P",{});var z4=s(Fn);s_r=r(z4,"The model class to instantiate is selected based on the "),Z_e=n(z4,"CODE",{});var sct=s(Z_e);l_r=r(sct,"model_type"),sct.forEach(t),i_r=r(z4,` property of the config object (either
passed as an argument or loaded from `),eue=n(z4,"CODE",{});var lct=s(eue);d_r=r(lct,"pretrained_model_name_or_path"),lct.forEach(t),c_r=r(z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=n(z4,"CODE",{});var ict=s(oue);f_r=r(ict,"pretrained_model_name_or_path"),ict.forEach(t),m_r=r(z4,":"),z4.forEach(t),g_r=i(Ma),V=n(Ma,"UL",{});var Q=s(V);c9=n(Q,"LI",{});var w6e=s(c9);rue=n(w6e,"STRONG",{});var dct=s(rue);h_r=r(dct,"albert"),dct.forEach(t),p_r=r(w6e," \u2014 "),dO=n(w6e,"A",{href:!0});var cct=s(dO);__r=r(cct,"FlaxAlbertModel"),cct.forEach(t),u_r=r(w6e," (ALBERT model)"),w6e.forEach(t),b_r=i(Q),f9=n(Q,"LI",{});var A6e=s(f9);tue=n(A6e,"STRONG",{});var fct=s(tue);v_r=r(fct,"bart"),fct.forEach(t),T_r=r(A6e," \u2014 "),cO=n(A6e,"A",{href:!0});var mct=s(cO);F_r=r(mct,"FlaxBartModel"),mct.forEach(t),C_r=r(A6e," (BART model)"),A6e.forEach(t),M_r=i(Q),m9=n(Q,"LI",{});var L6e=s(m9);aue=n(L6e,"STRONG",{});var gct=s(aue);E_r=r(gct,"beit"),gct.forEach(t),y_r=r(L6e," \u2014 "),fO=n(L6e,"A",{href:!0});var hct=s(fO);w_r=r(hct,"FlaxBeitModel"),hct.forEach(t),A_r=r(L6e," (BEiT model)"),L6e.forEach(t),L_r=i(Q),g9=n(Q,"LI",{});var B6e=s(g9);nue=n(B6e,"STRONG",{});var pct=s(nue);B_r=r(pct,"bert"),pct.forEach(t),x_r=r(B6e," \u2014 "),mO=n(B6e,"A",{href:!0});var _ct=s(mO);k_r=r(_ct,"FlaxBertModel"),_ct.forEach(t),R_r=r(B6e," (BERT model)"),B6e.forEach(t),S_r=i(Q),h9=n(Q,"LI",{});var x6e=s(h9);sue=n(x6e,"STRONG",{});var uct=s(sue);P_r=r(uct,"big_bird"),uct.forEach(t),$_r=r(x6e," \u2014 "),gO=n(x6e,"A",{href:!0});var bct=s(gO);I_r=r(bct,"FlaxBigBirdModel"),bct.forEach(t),j_r=r(x6e," (BigBird model)"),x6e.forEach(t),N_r=i(Q),p9=n(Q,"LI",{});var k6e=s(p9);lue=n(k6e,"STRONG",{});var vct=s(lue);D_r=r(vct,"blenderbot"),vct.forEach(t),q_r=r(k6e," \u2014 "),hO=n(k6e,"A",{href:!0});var Tct=s(hO);G_r=r(Tct,"FlaxBlenderbotModel"),Tct.forEach(t),O_r=r(k6e," (Blenderbot model)"),k6e.forEach(t),X_r=i(Q),_9=n(Q,"LI",{});var R6e=s(_9);iue=n(R6e,"STRONG",{});var Fct=s(iue);z_r=r(Fct,"blenderbot-small"),Fct.forEach(t),V_r=r(R6e," \u2014 "),pO=n(R6e,"A",{href:!0});var Cct=s(pO);W_r=r(Cct,"FlaxBlenderbotSmallModel"),Cct.forEach(t),Q_r=r(R6e," (BlenderbotSmall model)"),R6e.forEach(t),H_r=i(Q),u9=n(Q,"LI",{});var S6e=s(u9);due=n(S6e,"STRONG",{});var Mct=s(due);U_r=r(Mct,"clip"),Mct.forEach(t),J_r=r(S6e," \u2014 "),_O=n(S6e,"A",{href:!0});var Ect=s(_O);Y_r=r(Ect,"FlaxCLIPModel"),Ect.forEach(t),K_r=r(S6e," (CLIP model)"),S6e.forEach(t),Z_r=i(Q),b9=n(Q,"LI",{});var P6e=s(b9);cue=n(P6e,"STRONG",{});var yct=s(cue);eur=r(yct,"distilbert"),yct.forEach(t),our=r(P6e," \u2014 "),uO=n(P6e,"A",{href:!0});var wct=s(uO);rur=r(wct,"FlaxDistilBertModel"),wct.forEach(t),tur=r(P6e," (DistilBERT model)"),P6e.forEach(t),aur=i(Q),v9=n(Q,"LI",{});var $6e=s(v9);fue=n($6e,"STRONG",{});var Act=s(fue);nur=r(Act,"electra"),Act.forEach(t),sur=r($6e," \u2014 "),bO=n($6e,"A",{href:!0});var Lct=s(bO);lur=r(Lct,"FlaxElectraModel"),Lct.forEach(t),iur=r($6e," (ELECTRA model)"),$6e.forEach(t),dur=i(Q),T9=n(Q,"LI",{});var I6e=s(T9);mue=n(I6e,"STRONG",{});var Bct=s(mue);cur=r(Bct,"gpt2"),Bct.forEach(t),fur=r(I6e," \u2014 "),vO=n(I6e,"A",{href:!0});var xct=s(vO);mur=r(xct,"FlaxGPT2Model"),xct.forEach(t),gur=r(I6e," (OpenAI GPT-2 model)"),I6e.forEach(t),hur=i(Q),F9=n(Q,"LI",{});var j6e=s(F9);gue=n(j6e,"STRONG",{});var kct=s(gue);pur=r(kct,"gpt_neo"),kct.forEach(t),_ur=r(j6e," \u2014 "),TO=n(j6e,"A",{href:!0});var Rct=s(TO);uur=r(Rct,"FlaxGPTNeoModel"),Rct.forEach(t),bur=r(j6e," (GPT Neo model)"),j6e.forEach(t),vur=i(Q),C9=n(Q,"LI",{});var N6e=s(C9);hue=n(N6e,"STRONG",{});var Sct=s(hue);Tur=r(Sct,"gptj"),Sct.forEach(t),Fur=r(N6e," \u2014 "),FO=n(N6e,"A",{href:!0});var Pct=s(FO);Cur=r(Pct,"FlaxGPTJModel"),Pct.forEach(t),Mur=r(N6e," (GPT-J model)"),N6e.forEach(t),Eur=i(Q),M9=n(Q,"LI",{});var D6e=s(M9);pue=n(D6e,"STRONG",{});var $ct=s(pue);yur=r($ct,"marian"),$ct.forEach(t),wur=r(D6e," \u2014 "),CO=n(D6e,"A",{href:!0});var Ict=s(CO);Aur=r(Ict,"FlaxMarianModel"),Ict.forEach(t),Lur=r(D6e," (Marian model)"),D6e.forEach(t),Bur=i(Q),E9=n(Q,"LI",{});var q6e=s(E9);_ue=n(q6e,"STRONG",{});var jct=s(_ue);xur=r(jct,"mbart"),jct.forEach(t),kur=r(q6e," \u2014 "),MO=n(q6e,"A",{href:!0});var Nct=s(MO);Rur=r(Nct,"FlaxMBartModel"),Nct.forEach(t),Sur=r(q6e," (mBART model)"),q6e.forEach(t),Pur=i(Q),y9=n(Q,"LI",{});var G6e=s(y9);uue=n(G6e,"STRONG",{});var Dct=s(uue);$ur=r(Dct,"mt5"),Dct.forEach(t),Iur=r(G6e," \u2014 "),EO=n(G6e,"A",{href:!0});var qct=s(EO);jur=r(qct,"FlaxMT5Model"),qct.forEach(t),Nur=r(G6e," (mT5 model)"),G6e.forEach(t),Dur=i(Q),w9=n(Q,"LI",{});var O6e=s(w9);bue=n(O6e,"STRONG",{});var Gct=s(bue);qur=r(Gct,"pegasus"),Gct.forEach(t),Gur=r(O6e," \u2014 "),yO=n(O6e,"A",{href:!0});var Oct=s(yO);Our=r(Oct,"FlaxPegasusModel"),Oct.forEach(t),Xur=r(O6e," (Pegasus model)"),O6e.forEach(t),zur=i(Q),A9=n(Q,"LI",{});var X6e=s(A9);vue=n(X6e,"STRONG",{});var Xct=s(vue);Vur=r(Xct,"roberta"),Xct.forEach(t),Wur=r(X6e," \u2014 "),wO=n(X6e,"A",{href:!0});var zct=s(wO);Qur=r(zct,"FlaxRobertaModel"),zct.forEach(t),Hur=r(X6e," (RoBERTa model)"),X6e.forEach(t),Uur=i(Q),L9=n(Q,"LI",{});var z6e=s(L9);Tue=n(z6e,"STRONG",{});var Vct=s(Tue);Jur=r(Vct,"roformer"),Vct.forEach(t),Yur=r(z6e," \u2014 "),AO=n(z6e,"A",{href:!0});var Wct=s(AO);Kur=r(Wct,"FlaxRoFormerModel"),Wct.forEach(t),Zur=r(z6e," (RoFormer model)"),z6e.forEach(t),e5r=i(Q),B9=n(Q,"LI",{});var V6e=s(B9);Fue=n(V6e,"STRONG",{});var Qct=s(Fue);o5r=r(Qct,"t5"),Qct.forEach(t),r5r=r(V6e," \u2014 "),LO=n(V6e,"A",{href:!0});var Hct=s(LO);t5r=r(Hct,"FlaxT5Model"),Hct.forEach(t),a5r=r(V6e," (T5 model)"),V6e.forEach(t),n5r=i(Q),x9=n(Q,"LI",{});var W6e=s(x9);Cue=n(W6e,"STRONG",{});var Uct=s(Cue);s5r=r(Uct,"vision-text-dual-encoder"),Uct.forEach(t),l5r=r(W6e," \u2014 "),BO=n(W6e,"A",{href:!0});var Jct=s(BO);i5r=r(Jct,"FlaxVisionTextDualEncoderModel"),Jct.forEach(t),d5r=r(W6e," (VisionTextDualEncoder model)"),W6e.forEach(t),c5r=i(Q),k9=n(Q,"LI",{});var Q6e=s(k9);Mue=n(Q6e,"STRONG",{});var Yct=s(Mue);f5r=r(Yct,"vit"),Yct.forEach(t),m5r=r(Q6e," \u2014 "),xO=n(Q6e,"A",{href:!0});var Kct=s(xO);g5r=r(Kct,"FlaxViTModel"),Kct.forEach(t),h5r=r(Q6e," (ViT model)"),Q6e.forEach(t),p5r=i(Q),R9=n(Q,"LI",{});var H6e=s(R9);Eue=n(H6e,"STRONG",{});var Zct=s(Eue);_5r=r(Zct,"wav2vec2"),Zct.forEach(t),u5r=r(H6e," \u2014 "),kO=n(H6e,"A",{href:!0});var eft=s(kO);b5r=r(eft,"FlaxWav2Vec2Model"),eft.forEach(t),v5r=r(H6e," (Wav2Vec2 model)"),H6e.forEach(t),T5r=i(Q),S9=n(Q,"LI",{});var U6e=s(S9);yue=n(U6e,"STRONG",{});var oft=s(yue);F5r=r(oft,"xglm"),oft.forEach(t),C5r=r(U6e," \u2014 "),RO=n(U6e,"A",{href:!0});var rft=s(RO);M5r=r(rft,"FlaxXGLMModel"),rft.forEach(t),E5r=r(U6e," (XGLM model)"),U6e.forEach(t),Q.forEach(t),y5r=i(Ma),wue=n(Ma,"P",{});var tft=s(wue);w5r=r(tft,"Examples:"),tft.forEach(t),A5r=i(Ma),m(FA.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),O7e=i(d),Xc=n(d,"H2",{class:!0});var Kxe=s(Xc);P9=n(Kxe,"A",{id:!0,class:!0,href:!0});var aft=s(P9);Aue=n(aft,"SPAN",{});var nft=s(Aue);m(CA.$$.fragment,nft),nft.forEach(t),aft.forEach(t),L5r=i(Kxe),Lue=n(Kxe,"SPAN",{});var sft=s(Lue);B5r=r(sft,"FlaxAutoModelForCausalLM"),sft.forEach(t),Kxe.forEach(t),X7e=i(d),Ar=n(d,"DIV",{class:!0});var ti=s(Ar);m(MA.$$.fragment,ti),x5r=i(ti),zc=n(ti,"P",{});var bV=s(zc);k5r=r(bV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bue=n(bV,"CODE",{});var lft=s(Bue);R5r=r(lft,"from_pretrained()"),lft.forEach(t),S5r=r(bV,"class method or the "),xue=n(bV,"CODE",{});var ift=s(xue);P5r=r(ift,"from_config()"),ift.forEach(t),$5r=r(bV,`class
method.`),bV.forEach(t),I5r=i(ti),EA=n(ti,"P",{});var Zxe=s(EA);j5r=r(Zxe,"This class cannot be instantiated directly using "),kue=n(Zxe,"CODE",{});var dft=s(kue);N5r=r(dft,"__init__()"),dft.forEach(t),D5r=r(Zxe," (throws an error)."),Zxe.forEach(t),q5r=i(ti),Tt=n(ti,"DIV",{class:!0});var ai=s(Tt);m(yA.$$.fragment,ai),G5r=i(ai),Rue=n(ai,"P",{});var cft=s(Rue);O5r=r(cft,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cft.forEach(t),X5r=i(ai),Vc=n(ai,"P",{});var vV=s(Vc);z5r=r(vV,`Note:
Loading a model from its configuration file does `),Sue=n(vV,"STRONG",{});var fft=s(Sue);V5r=r(fft,"not"),fft.forEach(t),W5r=r(vV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pue=n(vV,"CODE",{});var mft=s(Pue);Q5r=r(mft,"from_pretrained()"),mft.forEach(t),H5r=r(vV,"to load the model weights."),vV.forEach(t),U5r=i(ai),$ue=n(ai,"P",{});var gft=s($ue);J5r=r(gft,"Examples:"),gft.forEach(t),Y5r=i(ai),m(wA.$$.fragment,ai),ai.forEach(t),K5r=i(ti),Ao=n(ti,"DIV",{class:!0});var Ea=s(Ao);m(AA.$$.fragment,Ea),Z5r=i(Ea),Iue=n(Ea,"P",{});var hft=s(Iue);e1r=r(hft,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hft.forEach(t),o1r=i(Ea),Cn=n(Ea,"P",{});var V4=s(Cn);r1r=r(V4,"The model class to instantiate is selected based on the "),jue=n(V4,"CODE",{});var pft=s(jue);t1r=r(pft,"model_type"),pft.forEach(t),a1r=r(V4,` property of the config object (either
passed as an argument or loaded from `),Nue=n(V4,"CODE",{});var _ft=s(Nue);n1r=r(_ft,"pretrained_model_name_or_path"),_ft.forEach(t),s1r=r(V4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=n(V4,"CODE",{});var uft=s(Due);l1r=r(uft,"pretrained_model_name_or_path"),uft.forEach(t),i1r=r(V4,":"),V4.forEach(t),d1r=i(Ea),Mn=n(Ea,"UL",{});var W4=s(Mn);$9=n(W4,"LI",{});var J6e=s($9);que=n(J6e,"STRONG",{});var bft=s(que);c1r=r(bft,"gpt2"),bft.forEach(t),f1r=r(J6e," \u2014 "),SO=n(J6e,"A",{href:!0});var vft=s(SO);m1r=r(vft,"FlaxGPT2LMHeadModel"),vft.forEach(t),g1r=r(J6e," (OpenAI GPT-2 model)"),J6e.forEach(t),h1r=i(W4),I9=n(W4,"LI",{});var Y6e=s(I9);Gue=n(Y6e,"STRONG",{});var Tft=s(Gue);p1r=r(Tft,"gpt_neo"),Tft.forEach(t),_1r=r(Y6e," \u2014 "),PO=n(Y6e,"A",{href:!0});var Fft=s(PO);u1r=r(Fft,"FlaxGPTNeoForCausalLM"),Fft.forEach(t),b1r=r(Y6e," (GPT Neo model)"),Y6e.forEach(t),v1r=i(W4),j9=n(W4,"LI",{});var K6e=s(j9);Oue=n(K6e,"STRONG",{});var Cft=s(Oue);T1r=r(Cft,"gptj"),Cft.forEach(t),F1r=r(K6e," \u2014 "),$O=n(K6e,"A",{href:!0});var Mft=s($O);C1r=r(Mft,"FlaxGPTJForCausalLM"),Mft.forEach(t),M1r=r(K6e," (GPT-J model)"),K6e.forEach(t),E1r=i(W4),N9=n(W4,"LI",{});var Z6e=s(N9);Xue=n(Z6e,"STRONG",{});var Eft=s(Xue);y1r=r(Eft,"xglm"),Eft.forEach(t),w1r=r(Z6e," \u2014 "),IO=n(Z6e,"A",{href:!0});var yft=s(IO);A1r=r(yft,"FlaxXGLMForCausalLM"),yft.forEach(t),L1r=r(Z6e," (XGLM model)"),Z6e.forEach(t),W4.forEach(t),B1r=i(Ea),zue=n(Ea,"P",{});var wft=s(zue);x1r=r(wft,"Examples:"),wft.forEach(t),k1r=i(Ea),m(LA.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),z7e=i(d),Wc=n(d,"H2",{class:!0});var eke=s(Wc);D9=n(eke,"A",{id:!0,class:!0,href:!0});var Aft=s(D9);Vue=n(Aft,"SPAN",{});var Lft=s(Vue);m(BA.$$.fragment,Lft),Lft.forEach(t),Aft.forEach(t),R1r=i(eke),Wue=n(eke,"SPAN",{});var Bft=s(Wue);S1r=r(Bft,"FlaxAutoModelForPreTraining"),Bft.forEach(t),eke.forEach(t),V7e=i(d),Lr=n(d,"DIV",{class:!0});var ni=s(Lr);m(xA.$$.fragment,ni),P1r=i(ni),Qc=n(ni,"P",{});var TV=s(Qc);$1r=r(TV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Que=n(TV,"CODE",{});var xft=s(Que);I1r=r(xft,"from_pretrained()"),xft.forEach(t),j1r=r(TV,"class method or the "),Hue=n(TV,"CODE",{});var kft=s(Hue);N1r=r(kft,"from_config()"),kft.forEach(t),D1r=r(TV,`class
method.`),TV.forEach(t),q1r=i(ni),kA=n(ni,"P",{});var oke=s(kA);G1r=r(oke,"This class cannot be instantiated directly using "),Uue=n(oke,"CODE",{});var Rft=s(Uue);O1r=r(Rft,"__init__()"),Rft.forEach(t),X1r=r(oke," (throws an error)."),oke.forEach(t),z1r=i(ni),Ft=n(ni,"DIV",{class:!0});var si=s(Ft);m(RA.$$.fragment,si),V1r=i(si),Jue=n(si,"P",{});var Sft=s(Jue);W1r=r(Sft,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Sft.forEach(t),Q1r=i(si),Hc=n(si,"P",{});var FV=s(Hc);H1r=r(FV,`Note:
Loading a model from its configuration file does `),Yue=n(FV,"STRONG",{});var Pft=s(Yue);U1r=r(Pft,"not"),Pft.forEach(t),J1r=r(FV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kue=n(FV,"CODE",{});var $ft=s(Kue);Y1r=r($ft,"from_pretrained()"),$ft.forEach(t),K1r=r(FV,"to load the model weights."),FV.forEach(t),Z1r=i(si),Zue=n(si,"P",{});var Ift=s(Zue);ebr=r(Ift,"Examples:"),Ift.forEach(t),obr=i(si),m(SA.$$.fragment,si),si.forEach(t),rbr=i(ni),Lo=n(ni,"DIV",{class:!0});var ya=s(Lo);m(PA.$$.fragment,ya),tbr=i(ya),e5e=n(ya,"P",{});var jft=s(e5e);abr=r(jft,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jft.forEach(t),nbr=i(ya),En=n(ya,"P",{});var Q4=s(En);sbr=r(Q4,"The model class to instantiate is selected based on the "),o5e=n(Q4,"CODE",{});var Nft=s(o5e);lbr=r(Nft,"model_type"),Nft.forEach(t),ibr=r(Q4,` property of the config object (either
passed as an argument or loaded from `),r5e=n(Q4,"CODE",{});var Dft=s(r5e);dbr=r(Dft,"pretrained_model_name_or_path"),Dft.forEach(t),cbr=r(Q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=n(Q4,"CODE",{});var qft=s(t5e);fbr=r(qft,"pretrained_model_name_or_path"),qft.forEach(t),mbr=r(Q4,":"),Q4.forEach(t),gbr=i(ya),fe=n(ya,"UL",{});var _e=s(fe);q9=n(_e,"LI",{});var e0e=s(q9);a5e=n(e0e,"STRONG",{});var Gft=s(a5e);hbr=r(Gft,"albert"),Gft.forEach(t),pbr=r(e0e," \u2014 "),jO=n(e0e,"A",{href:!0});var Oft=s(jO);_br=r(Oft,"FlaxAlbertForPreTraining"),Oft.forEach(t),ubr=r(e0e," (ALBERT model)"),e0e.forEach(t),bbr=i(_e),G9=n(_e,"LI",{});var o0e=s(G9);n5e=n(o0e,"STRONG",{});var Xft=s(n5e);vbr=r(Xft,"bart"),Xft.forEach(t),Tbr=r(o0e," \u2014 "),NO=n(o0e,"A",{href:!0});var zft=s(NO);Fbr=r(zft,"FlaxBartForConditionalGeneration"),zft.forEach(t),Cbr=r(o0e," (BART model)"),o0e.forEach(t),Mbr=i(_e),O9=n(_e,"LI",{});var r0e=s(O9);s5e=n(r0e,"STRONG",{});var Vft=s(s5e);Ebr=r(Vft,"bert"),Vft.forEach(t),ybr=r(r0e," \u2014 "),DO=n(r0e,"A",{href:!0});var Wft=s(DO);wbr=r(Wft,"FlaxBertForPreTraining"),Wft.forEach(t),Abr=r(r0e," (BERT model)"),r0e.forEach(t),Lbr=i(_e),X9=n(_e,"LI",{});var t0e=s(X9);l5e=n(t0e,"STRONG",{});var Qft=s(l5e);Bbr=r(Qft,"big_bird"),Qft.forEach(t),xbr=r(t0e," \u2014 "),qO=n(t0e,"A",{href:!0});var Hft=s(qO);kbr=r(Hft,"FlaxBigBirdForPreTraining"),Hft.forEach(t),Rbr=r(t0e," (BigBird model)"),t0e.forEach(t),Sbr=i(_e),z9=n(_e,"LI",{});var a0e=s(z9);i5e=n(a0e,"STRONG",{});var Uft=s(i5e);Pbr=r(Uft,"electra"),Uft.forEach(t),$br=r(a0e," \u2014 "),GO=n(a0e,"A",{href:!0});var Jft=s(GO);Ibr=r(Jft,"FlaxElectraForPreTraining"),Jft.forEach(t),jbr=r(a0e," (ELECTRA model)"),a0e.forEach(t),Nbr=i(_e),V9=n(_e,"LI",{});var n0e=s(V9);d5e=n(n0e,"STRONG",{});var Yft=s(d5e);Dbr=r(Yft,"mbart"),Yft.forEach(t),qbr=r(n0e," \u2014 "),OO=n(n0e,"A",{href:!0});var Kft=s(OO);Gbr=r(Kft,"FlaxMBartForConditionalGeneration"),Kft.forEach(t),Obr=r(n0e," (mBART model)"),n0e.forEach(t),Xbr=i(_e),W9=n(_e,"LI",{});var s0e=s(W9);c5e=n(s0e,"STRONG",{});var Zft=s(c5e);zbr=r(Zft,"mt5"),Zft.forEach(t),Vbr=r(s0e," \u2014 "),XO=n(s0e,"A",{href:!0});var emt=s(XO);Wbr=r(emt,"FlaxMT5ForConditionalGeneration"),emt.forEach(t),Qbr=r(s0e," (mT5 model)"),s0e.forEach(t),Hbr=i(_e),Q9=n(_e,"LI",{});var l0e=s(Q9);f5e=n(l0e,"STRONG",{});var omt=s(f5e);Ubr=r(omt,"roberta"),omt.forEach(t),Jbr=r(l0e," \u2014 "),zO=n(l0e,"A",{href:!0});var rmt=s(zO);Ybr=r(rmt,"FlaxRobertaForMaskedLM"),rmt.forEach(t),Kbr=r(l0e," (RoBERTa model)"),l0e.forEach(t),Zbr=i(_e),H9=n(_e,"LI",{});var i0e=s(H9);m5e=n(i0e,"STRONG",{});var tmt=s(m5e);e2r=r(tmt,"roformer"),tmt.forEach(t),o2r=r(i0e," \u2014 "),VO=n(i0e,"A",{href:!0});var amt=s(VO);r2r=r(amt,"FlaxRoFormerForMaskedLM"),amt.forEach(t),t2r=r(i0e," (RoFormer model)"),i0e.forEach(t),a2r=i(_e),U9=n(_e,"LI",{});var d0e=s(U9);g5e=n(d0e,"STRONG",{});var nmt=s(g5e);n2r=r(nmt,"t5"),nmt.forEach(t),s2r=r(d0e," \u2014 "),WO=n(d0e,"A",{href:!0});var smt=s(WO);l2r=r(smt,"FlaxT5ForConditionalGeneration"),smt.forEach(t),i2r=r(d0e," (T5 model)"),d0e.forEach(t),d2r=i(_e),J9=n(_e,"LI",{});var c0e=s(J9);h5e=n(c0e,"STRONG",{});var lmt=s(h5e);c2r=r(lmt,"wav2vec2"),lmt.forEach(t),f2r=r(c0e," \u2014 "),QO=n(c0e,"A",{href:!0});var imt=s(QO);m2r=r(imt,"FlaxWav2Vec2ForPreTraining"),imt.forEach(t),g2r=r(c0e," (Wav2Vec2 model)"),c0e.forEach(t),_e.forEach(t),h2r=i(ya),p5e=n(ya,"P",{});var dmt=s(p5e);p2r=r(dmt,"Examples:"),dmt.forEach(t),_2r=i(ya),m($A.$$.fragment,ya),ya.forEach(t),ni.forEach(t),W7e=i(d),Uc=n(d,"H2",{class:!0});var rke=s(Uc);Y9=n(rke,"A",{id:!0,class:!0,href:!0});var cmt=s(Y9);_5e=n(cmt,"SPAN",{});var fmt=s(_5e);m(IA.$$.fragment,fmt),fmt.forEach(t),cmt.forEach(t),u2r=i(rke),u5e=n(rke,"SPAN",{});var mmt=s(u5e);b2r=r(mmt,"FlaxAutoModelForMaskedLM"),mmt.forEach(t),rke.forEach(t),Q7e=i(d),Br=n(d,"DIV",{class:!0});var li=s(Br);m(jA.$$.fragment,li),v2r=i(li),Jc=n(li,"P",{});var CV=s(Jc);T2r=r(CV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),b5e=n(CV,"CODE",{});var gmt=s(b5e);F2r=r(gmt,"from_pretrained()"),gmt.forEach(t),C2r=r(CV,"class method or the "),v5e=n(CV,"CODE",{});var hmt=s(v5e);M2r=r(hmt,"from_config()"),hmt.forEach(t),E2r=r(CV,`class
method.`),CV.forEach(t),y2r=i(li),NA=n(li,"P",{});var tke=s(NA);w2r=r(tke,"This class cannot be instantiated directly using "),T5e=n(tke,"CODE",{});var pmt=s(T5e);A2r=r(pmt,"__init__()"),pmt.forEach(t),L2r=r(tke," (throws an error)."),tke.forEach(t),B2r=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);m(DA.$$.fragment,ii),x2r=i(ii),F5e=n(ii,"P",{});var _mt=s(F5e);k2r=r(_mt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_mt.forEach(t),R2r=i(ii),Yc=n(ii,"P",{});var MV=s(Yc);S2r=r(MV,`Note:
Loading a model from its configuration file does `),C5e=n(MV,"STRONG",{});var umt=s(C5e);P2r=r(umt,"not"),umt.forEach(t),$2r=r(MV,` load the model weights. It only affects the
model\u2019s configuration. Use `),M5e=n(MV,"CODE",{});var bmt=s(M5e);I2r=r(bmt,"from_pretrained()"),bmt.forEach(t),j2r=r(MV,"to load the model weights."),MV.forEach(t),N2r=i(ii),E5e=n(ii,"P",{});var vmt=s(E5e);D2r=r(vmt,"Examples:"),vmt.forEach(t),q2r=i(ii),m(qA.$$.fragment,ii),ii.forEach(t),G2r=i(li),Bo=n(li,"DIV",{class:!0});var wa=s(Bo);m(GA.$$.fragment,wa),O2r=i(wa),y5e=n(wa,"P",{});var Tmt=s(y5e);X2r=r(Tmt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Tmt.forEach(t),z2r=i(wa),yn=n(wa,"P",{});var H4=s(yn);V2r=r(H4,"The model class to instantiate is selected based on the "),w5e=n(H4,"CODE",{});var Fmt=s(w5e);W2r=r(Fmt,"model_type"),Fmt.forEach(t),Q2r=r(H4,` property of the config object (either
passed as an argument or loaded from `),A5e=n(H4,"CODE",{});var Cmt=s(A5e);H2r=r(Cmt,"pretrained_model_name_or_path"),Cmt.forEach(t),U2r=r(H4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L5e=n(H4,"CODE",{});var Mmt=s(L5e);J2r=r(Mmt,"pretrained_model_name_or_path"),Mmt.forEach(t),Y2r=r(H4,":"),H4.forEach(t),K2r=i(wa),ve=n(wa,"UL",{});var Ze=s(ve);K9=n(Ze,"LI",{});var f0e=s(K9);B5e=n(f0e,"STRONG",{});var Emt=s(B5e);Z2r=r(Emt,"albert"),Emt.forEach(t),evr=r(f0e," \u2014 "),HO=n(f0e,"A",{href:!0});var ymt=s(HO);ovr=r(ymt,"FlaxAlbertForMaskedLM"),ymt.forEach(t),rvr=r(f0e," (ALBERT model)"),f0e.forEach(t),tvr=i(Ze),Z9=n(Ze,"LI",{});var m0e=s(Z9);x5e=n(m0e,"STRONG",{});var wmt=s(x5e);avr=r(wmt,"bart"),wmt.forEach(t),nvr=r(m0e," \u2014 "),UO=n(m0e,"A",{href:!0});var Amt=s(UO);svr=r(Amt,"FlaxBartForConditionalGeneration"),Amt.forEach(t),lvr=r(m0e," (BART model)"),m0e.forEach(t),ivr=i(Ze),eC=n(Ze,"LI",{});var g0e=s(eC);k5e=n(g0e,"STRONG",{});var Lmt=s(k5e);dvr=r(Lmt,"bert"),Lmt.forEach(t),cvr=r(g0e," \u2014 "),JO=n(g0e,"A",{href:!0});var Bmt=s(JO);fvr=r(Bmt,"FlaxBertForMaskedLM"),Bmt.forEach(t),mvr=r(g0e," (BERT model)"),g0e.forEach(t),gvr=i(Ze),oC=n(Ze,"LI",{});var h0e=s(oC);R5e=n(h0e,"STRONG",{});var xmt=s(R5e);hvr=r(xmt,"big_bird"),xmt.forEach(t),pvr=r(h0e," \u2014 "),YO=n(h0e,"A",{href:!0});var kmt=s(YO);_vr=r(kmt,"FlaxBigBirdForMaskedLM"),kmt.forEach(t),uvr=r(h0e," (BigBird model)"),h0e.forEach(t),bvr=i(Ze),rC=n(Ze,"LI",{});var p0e=s(rC);S5e=n(p0e,"STRONG",{});var Rmt=s(S5e);vvr=r(Rmt,"distilbert"),Rmt.forEach(t),Tvr=r(p0e," \u2014 "),KO=n(p0e,"A",{href:!0});var Smt=s(KO);Fvr=r(Smt,"FlaxDistilBertForMaskedLM"),Smt.forEach(t),Cvr=r(p0e," (DistilBERT model)"),p0e.forEach(t),Mvr=i(Ze),tC=n(Ze,"LI",{});var _0e=s(tC);P5e=n(_0e,"STRONG",{});var Pmt=s(P5e);Evr=r(Pmt,"electra"),Pmt.forEach(t),yvr=r(_0e," \u2014 "),ZO=n(_0e,"A",{href:!0});var $mt=s(ZO);wvr=r($mt,"FlaxElectraForMaskedLM"),$mt.forEach(t),Avr=r(_0e," (ELECTRA model)"),_0e.forEach(t),Lvr=i(Ze),aC=n(Ze,"LI",{});var u0e=s(aC);$5e=n(u0e,"STRONG",{});var Imt=s($5e);Bvr=r(Imt,"mbart"),Imt.forEach(t),xvr=r(u0e," \u2014 "),eX=n(u0e,"A",{href:!0});var jmt=s(eX);kvr=r(jmt,"FlaxMBartForConditionalGeneration"),jmt.forEach(t),Rvr=r(u0e," (mBART model)"),u0e.forEach(t),Svr=i(Ze),nC=n(Ze,"LI",{});var b0e=s(nC);I5e=n(b0e,"STRONG",{});var Nmt=s(I5e);Pvr=r(Nmt,"roberta"),Nmt.forEach(t),$vr=r(b0e," \u2014 "),oX=n(b0e,"A",{href:!0});var Dmt=s(oX);Ivr=r(Dmt,"FlaxRobertaForMaskedLM"),Dmt.forEach(t),jvr=r(b0e," (RoBERTa model)"),b0e.forEach(t),Nvr=i(Ze),sC=n(Ze,"LI",{});var v0e=s(sC);j5e=n(v0e,"STRONG",{});var qmt=s(j5e);Dvr=r(qmt,"roformer"),qmt.forEach(t),qvr=r(v0e," \u2014 "),rX=n(v0e,"A",{href:!0});var Gmt=s(rX);Gvr=r(Gmt,"FlaxRoFormerForMaskedLM"),Gmt.forEach(t),Ovr=r(v0e," (RoFormer model)"),v0e.forEach(t),Ze.forEach(t),Xvr=i(wa),N5e=n(wa,"P",{});var Omt=s(N5e);zvr=r(Omt,"Examples:"),Omt.forEach(t),Vvr=i(wa),m(OA.$$.fragment,wa),wa.forEach(t),li.forEach(t),H7e=i(d),Kc=n(d,"H2",{class:!0});var ake=s(Kc);lC=n(ake,"A",{id:!0,class:!0,href:!0});var Xmt=s(lC);D5e=n(Xmt,"SPAN",{});var zmt=s(D5e);m(XA.$$.fragment,zmt),zmt.forEach(t),Xmt.forEach(t),Wvr=i(ake),q5e=n(ake,"SPAN",{});var Vmt=s(q5e);Qvr=r(Vmt,"FlaxAutoModelForSeq2SeqLM"),Vmt.forEach(t),ake.forEach(t),U7e=i(d),xr=n(d,"DIV",{class:!0});var di=s(xr);m(zA.$$.fragment,di),Hvr=i(di),Zc=n(di,"P",{});var EV=s(Zc);Uvr=r(EV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),G5e=n(EV,"CODE",{});var Wmt=s(G5e);Jvr=r(Wmt,"from_pretrained()"),Wmt.forEach(t),Yvr=r(EV,"class method or the "),O5e=n(EV,"CODE",{});var Qmt=s(O5e);Kvr=r(Qmt,"from_config()"),Qmt.forEach(t),Zvr=r(EV,`class
method.`),EV.forEach(t),eTr=i(di),VA=n(di,"P",{});var nke=s(VA);oTr=r(nke,"This class cannot be instantiated directly using "),X5e=n(nke,"CODE",{});var Hmt=s(X5e);rTr=r(Hmt,"__init__()"),Hmt.forEach(t),tTr=r(nke," (throws an error)."),nke.forEach(t),aTr=i(di),Mt=n(di,"DIV",{class:!0});var ci=s(Mt);m(WA.$$.fragment,ci),nTr=i(ci),z5e=n(ci,"P",{});var Umt=s(z5e);sTr=r(Umt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Umt.forEach(t),lTr=i(ci),ef=n(ci,"P",{});var yV=s(ef);iTr=r(yV,`Note:
Loading a model from its configuration file does `),V5e=n(yV,"STRONG",{});var Jmt=s(V5e);dTr=r(Jmt,"not"),Jmt.forEach(t),cTr=r(yV,` load the model weights. It only affects the
model\u2019s configuration. Use `),W5e=n(yV,"CODE",{});var Ymt=s(W5e);fTr=r(Ymt,"from_pretrained()"),Ymt.forEach(t),mTr=r(yV,"to load the model weights."),yV.forEach(t),gTr=i(ci),Q5e=n(ci,"P",{});var Kmt=s(Q5e);hTr=r(Kmt,"Examples:"),Kmt.forEach(t),pTr=i(ci),m(QA.$$.fragment,ci),ci.forEach(t),_Tr=i(di),xo=n(di,"DIV",{class:!0});var Aa=s(xo);m(HA.$$.fragment,Aa),uTr=i(Aa),H5e=n(Aa,"P",{});var Zmt=s(H5e);bTr=r(Zmt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zmt.forEach(t),vTr=i(Aa),wn=n(Aa,"P",{});var U4=s(wn);TTr=r(U4,"The model class to instantiate is selected based on the "),U5e=n(U4,"CODE",{});var egt=s(U5e);FTr=r(egt,"model_type"),egt.forEach(t),CTr=r(U4,` property of the config object (either
passed as an argument or loaded from `),J5e=n(U4,"CODE",{});var ogt=s(J5e);MTr=r(ogt,"pretrained_model_name_or_path"),ogt.forEach(t),ETr=r(U4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=n(U4,"CODE",{});var rgt=s(Y5e);yTr=r(rgt,"pretrained_model_name_or_path"),rgt.forEach(t),wTr=r(U4,":"),U4.forEach(t),ATr=i(Aa),Te=n(Aa,"UL",{});var eo=s(Te);iC=n(eo,"LI",{});var T0e=s(iC);K5e=n(T0e,"STRONG",{});var tgt=s(K5e);LTr=r(tgt,"bart"),tgt.forEach(t),BTr=r(T0e," \u2014 "),tX=n(T0e,"A",{href:!0});var agt=s(tX);xTr=r(agt,"FlaxBartForConditionalGeneration"),agt.forEach(t),kTr=r(T0e," (BART model)"),T0e.forEach(t),RTr=i(eo),dC=n(eo,"LI",{});var F0e=s(dC);Z5e=n(F0e,"STRONG",{});var ngt=s(Z5e);STr=r(ngt,"blenderbot"),ngt.forEach(t),PTr=r(F0e," \u2014 "),aX=n(F0e,"A",{href:!0});var sgt=s(aX);$Tr=r(sgt,"FlaxBlenderbotForConditionalGeneration"),sgt.forEach(t),ITr=r(F0e," (Blenderbot model)"),F0e.forEach(t),jTr=i(eo),cC=n(eo,"LI",{});var C0e=s(cC);e1e=n(C0e,"STRONG",{});var lgt=s(e1e);NTr=r(lgt,"blenderbot-small"),lgt.forEach(t),DTr=r(C0e," \u2014 "),nX=n(C0e,"A",{href:!0});var igt=s(nX);qTr=r(igt,"FlaxBlenderbotSmallForConditionalGeneration"),igt.forEach(t),GTr=r(C0e," (BlenderbotSmall model)"),C0e.forEach(t),OTr=i(eo),fC=n(eo,"LI",{});var M0e=s(fC);o1e=n(M0e,"STRONG",{});var dgt=s(o1e);XTr=r(dgt,"encoder-decoder"),dgt.forEach(t),zTr=r(M0e," \u2014 "),sX=n(M0e,"A",{href:!0});var cgt=s(sX);VTr=r(cgt,"FlaxEncoderDecoderModel"),cgt.forEach(t),WTr=r(M0e," (Encoder decoder model)"),M0e.forEach(t),QTr=i(eo),mC=n(eo,"LI",{});var E0e=s(mC);r1e=n(E0e,"STRONG",{});var fgt=s(r1e);HTr=r(fgt,"marian"),fgt.forEach(t),UTr=r(E0e," \u2014 "),lX=n(E0e,"A",{href:!0});var mgt=s(lX);JTr=r(mgt,"FlaxMarianMTModel"),mgt.forEach(t),YTr=r(E0e," (Marian model)"),E0e.forEach(t),KTr=i(eo),gC=n(eo,"LI",{});var y0e=s(gC);t1e=n(y0e,"STRONG",{});var ggt=s(t1e);ZTr=r(ggt,"mbart"),ggt.forEach(t),e8r=r(y0e," \u2014 "),iX=n(y0e,"A",{href:!0});var hgt=s(iX);o8r=r(hgt,"FlaxMBartForConditionalGeneration"),hgt.forEach(t),r8r=r(y0e," (mBART model)"),y0e.forEach(t),t8r=i(eo),hC=n(eo,"LI",{});var w0e=s(hC);a1e=n(w0e,"STRONG",{});var pgt=s(a1e);a8r=r(pgt,"mt5"),pgt.forEach(t),n8r=r(w0e," \u2014 "),dX=n(w0e,"A",{href:!0});var _gt=s(dX);s8r=r(_gt,"FlaxMT5ForConditionalGeneration"),_gt.forEach(t),l8r=r(w0e," (mT5 model)"),w0e.forEach(t),i8r=i(eo),pC=n(eo,"LI",{});var A0e=s(pC);n1e=n(A0e,"STRONG",{});var ugt=s(n1e);d8r=r(ugt,"pegasus"),ugt.forEach(t),c8r=r(A0e," \u2014 "),cX=n(A0e,"A",{href:!0});var bgt=s(cX);f8r=r(bgt,"FlaxPegasusForConditionalGeneration"),bgt.forEach(t),m8r=r(A0e," (Pegasus model)"),A0e.forEach(t),g8r=i(eo),_C=n(eo,"LI",{});var L0e=s(_C);s1e=n(L0e,"STRONG",{});var vgt=s(s1e);h8r=r(vgt,"t5"),vgt.forEach(t),p8r=r(L0e," \u2014 "),fX=n(L0e,"A",{href:!0});var Tgt=s(fX);_8r=r(Tgt,"FlaxT5ForConditionalGeneration"),Tgt.forEach(t),u8r=r(L0e," (T5 model)"),L0e.forEach(t),eo.forEach(t),b8r=i(Aa),l1e=n(Aa,"P",{});var Fgt=s(l1e);v8r=r(Fgt,"Examples:"),Fgt.forEach(t),T8r=i(Aa),m(UA.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),J7e=i(d),of=n(d,"H2",{class:!0});var ske=s(of);uC=n(ske,"A",{id:!0,class:!0,href:!0});var Cgt=s(uC);i1e=n(Cgt,"SPAN",{});var Mgt=s(i1e);m(JA.$$.fragment,Mgt),Mgt.forEach(t),Cgt.forEach(t),F8r=i(ske),d1e=n(ske,"SPAN",{});var Egt=s(d1e);C8r=r(Egt,"FlaxAutoModelForSequenceClassification"),Egt.forEach(t),ske.forEach(t),Y7e=i(d),kr=n(d,"DIV",{class:!0});var fi=s(kr);m(YA.$$.fragment,fi),M8r=i(fi),rf=n(fi,"P",{});var wV=s(rf);E8r=r(wV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),c1e=n(wV,"CODE",{});var ygt=s(c1e);y8r=r(ygt,"from_pretrained()"),ygt.forEach(t),w8r=r(wV,"class method or the "),f1e=n(wV,"CODE",{});var wgt=s(f1e);A8r=r(wgt,"from_config()"),wgt.forEach(t),L8r=r(wV,`class
method.`),wV.forEach(t),B8r=i(fi),KA=n(fi,"P",{});var lke=s(KA);x8r=r(lke,"This class cannot be instantiated directly using "),m1e=n(lke,"CODE",{});var Agt=s(m1e);k8r=r(Agt,"__init__()"),Agt.forEach(t),R8r=r(lke," (throws an error)."),lke.forEach(t),S8r=i(fi),Et=n(fi,"DIV",{class:!0});var mi=s(Et);m(ZA.$$.fragment,mi),P8r=i(mi),g1e=n(mi,"P",{});var Lgt=s(g1e);$8r=r(Lgt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Lgt.forEach(t),I8r=i(mi),tf=n(mi,"P",{});var AV=s(tf);j8r=r(AV,`Note:
Loading a model from its configuration file does `),h1e=n(AV,"STRONG",{});var Bgt=s(h1e);N8r=r(Bgt,"not"),Bgt.forEach(t),D8r=r(AV,` load the model weights. It only affects the
model\u2019s configuration. Use `),p1e=n(AV,"CODE",{});var xgt=s(p1e);q8r=r(xgt,"from_pretrained()"),xgt.forEach(t),G8r=r(AV,"to load the model weights."),AV.forEach(t),O8r=i(mi),_1e=n(mi,"P",{});var kgt=s(_1e);X8r=r(kgt,"Examples:"),kgt.forEach(t),z8r=i(mi),m(e6.$$.fragment,mi),mi.forEach(t),V8r=i(fi),ko=n(fi,"DIV",{class:!0});var La=s(ko);m(o6.$$.fragment,La),W8r=i(La),u1e=n(La,"P",{});var Rgt=s(u1e);Q8r=r(Rgt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Rgt.forEach(t),H8r=i(La),An=n(La,"P",{});var J4=s(An);U8r=r(J4,"The model class to instantiate is selected based on the "),b1e=n(J4,"CODE",{});var Sgt=s(b1e);J8r=r(Sgt,"model_type"),Sgt.forEach(t),Y8r=r(J4,` property of the config object (either
passed as an argument or loaded from `),v1e=n(J4,"CODE",{});var Pgt=s(v1e);K8r=r(Pgt,"pretrained_model_name_or_path"),Pgt.forEach(t),Z8r=r(J4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T1e=n(J4,"CODE",{});var $gt=s(T1e);eFr=r($gt,"pretrained_model_name_or_path"),$gt.forEach(t),oFr=r(J4,":"),J4.forEach(t),rFr=i(La),Fe=n(La,"UL",{});var oo=s(Fe);bC=n(oo,"LI",{});var B0e=s(bC);F1e=n(B0e,"STRONG",{});var Igt=s(F1e);tFr=r(Igt,"albert"),Igt.forEach(t),aFr=r(B0e," \u2014 "),mX=n(B0e,"A",{href:!0});var jgt=s(mX);nFr=r(jgt,"FlaxAlbertForSequenceClassification"),jgt.forEach(t),sFr=r(B0e," (ALBERT model)"),B0e.forEach(t),lFr=i(oo),vC=n(oo,"LI",{});var x0e=s(vC);C1e=n(x0e,"STRONG",{});var Ngt=s(C1e);iFr=r(Ngt,"bart"),Ngt.forEach(t),dFr=r(x0e," \u2014 "),gX=n(x0e,"A",{href:!0});var Dgt=s(gX);cFr=r(Dgt,"FlaxBartForSequenceClassification"),Dgt.forEach(t),fFr=r(x0e," (BART model)"),x0e.forEach(t),mFr=i(oo),TC=n(oo,"LI",{});var k0e=s(TC);M1e=n(k0e,"STRONG",{});var qgt=s(M1e);gFr=r(qgt,"bert"),qgt.forEach(t),hFr=r(k0e," \u2014 "),hX=n(k0e,"A",{href:!0});var Ggt=s(hX);pFr=r(Ggt,"FlaxBertForSequenceClassification"),Ggt.forEach(t),_Fr=r(k0e," (BERT model)"),k0e.forEach(t),uFr=i(oo),FC=n(oo,"LI",{});var R0e=s(FC);E1e=n(R0e,"STRONG",{});var Ogt=s(E1e);bFr=r(Ogt,"big_bird"),Ogt.forEach(t),vFr=r(R0e," \u2014 "),pX=n(R0e,"A",{href:!0});var Xgt=s(pX);TFr=r(Xgt,"FlaxBigBirdForSequenceClassification"),Xgt.forEach(t),FFr=r(R0e," (BigBird model)"),R0e.forEach(t),CFr=i(oo),CC=n(oo,"LI",{});var S0e=s(CC);y1e=n(S0e,"STRONG",{});var zgt=s(y1e);MFr=r(zgt,"distilbert"),zgt.forEach(t),EFr=r(S0e," \u2014 "),_X=n(S0e,"A",{href:!0});var Vgt=s(_X);yFr=r(Vgt,"FlaxDistilBertForSequenceClassification"),Vgt.forEach(t),wFr=r(S0e," (DistilBERT model)"),S0e.forEach(t),AFr=i(oo),MC=n(oo,"LI",{});var P0e=s(MC);w1e=n(P0e,"STRONG",{});var Wgt=s(w1e);LFr=r(Wgt,"electra"),Wgt.forEach(t),BFr=r(P0e," \u2014 "),uX=n(P0e,"A",{href:!0});var Qgt=s(uX);xFr=r(Qgt,"FlaxElectraForSequenceClassification"),Qgt.forEach(t),kFr=r(P0e," (ELECTRA model)"),P0e.forEach(t),RFr=i(oo),EC=n(oo,"LI",{});var $0e=s(EC);A1e=n($0e,"STRONG",{});var Hgt=s(A1e);SFr=r(Hgt,"mbart"),Hgt.forEach(t),PFr=r($0e," \u2014 "),bX=n($0e,"A",{href:!0});var Ugt=s(bX);$Fr=r(Ugt,"FlaxMBartForSequenceClassification"),Ugt.forEach(t),IFr=r($0e," (mBART model)"),$0e.forEach(t),jFr=i(oo),yC=n(oo,"LI",{});var I0e=s(yC);L1e=n(I0e,"STRONG",{});var Jgt=s(L1e);NFr=r(Jgt,"roberta"),Jgt.forEach(t),DFr=r(I0e," \u2014 "),vX=n(I0e,"A",{href:!0});var Ygt=s(vX);qFr=r(Ygt,"FlaxRobertaForSequenceClassification"),Ygt.forEach(t),GFr=r(I0e," (RoBERTa model)"),I0e.forEach(t),OFr=i(oo),wC=n(oo,"LI",{});var j0e=s(wC);B1e=n(j0e,"STRONG",{});var Kgt=s(B1e);XFr=r(Kgt,"roformer"),Kgt.forEach(t),zFr=r(j0e," \u2014 "),TX=n(j0e,"A",{href:!0});var Zgt=s(TX);VFr=r(Zgt,"FlaxRoFormerForSequenceClassification"),Zgt.forEach(t),WFr=r(j0e," (RoFormer model)"),j0e.forEach(t),oo.forEach(t),QFr=i(La),x1e=n(La,"P",{});var eht=s(x1e);HFr=r(eht,"Examples:"),eht.forEach(t),UFr=i(La),m(r6.$$.fragment,La),La.forEach(t),fi.forEach(t),K7e=i(d),af=n(d,"H2",{class:!0});var ike=s(af);AC=n(ike,"A",{id:!0,class:!0,href:!0});var oht=s(AC);k1e=n(oht,"SPAN",{});var rht=s(k1e);m(t6.$$.fragment,rht),rht.forEach(t),oht.forEach(t),JFr=i(ike),R1e=n(ike,"SPAN",{});var tht=s(R1e);YFr=r(tht,"FlaxAutoModelForQuestionAnswering"),tht.forEach(t),ike.forEach(t),Z7e=i(d),Rr=n(d,"DIV",{class:!0});var gi=s(Rr);m(a6.$$.fragment,gi),KFr=i(gi),nf=n(gi,"P",{});var LV=s(nf);ZFr=r(LV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),S1e=n(LV,"CODE",{});var aht=s(S1e);e9r=r(aht,"from_pretrained()"),aht.forEach(t),o9r=r(LV,"class method or the "),P1e=n(LV,"CODE",{});var nht=s(P1e);r9r=r(nht,"from_config()"),nht.forEach(t),t9r=r(LV,`class
method.`),LV.forEach(t),a9r=i(gi),n6=n(gi,"P",{});var dke=s(n6);n9r=r(dke,"This class cannot be instantiated directly using "),$1e=n(dke,"CODE",{});var sht=s($1e);s9r=r(sht,"__init__()"),sht.forEach(t),l9r=r(dke," (throws an error)."),dke.forEach(t),i9r=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);m(s6.$$.fragment,hi),d9r=i(hi),I1e=n(hi,"P",{});var lht=s(I1e);c9r=r(lht,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lht.forEach(t),f9r=i(hi),sf=n(hi,"P",{});var BV=s(sf);m9r=r(BV,`Note:
Loading a model from its configuration file does `),j1e=n(BV,"STRONG",{});var iht=s(j1e);g9r=r(iht,"not"),iht.forEach(t),h9r=r(BV,` load the model weights. It only affects the
model\u2019s configuration. Use `),N1e=n(BV,"CODE",{});var dht=s(N1e);p9r=r(dht,"from_pretrained()"),dht.forEach(t),_9r=r(BV,"to load the model weights."),BV.forEach(t),u9r=i(hi),D1e=n(hi,"P",{});var cht=s(D1e);b9r=r(cht,"Examples:"),cht.forEach(t),v9r=i(hi),m(l6.$$.fragment,hi),hi.forEach(t),T9r=i(gi),Ro=n(gi,"DIV",{class:!0});var Ba=s(Ro);m(i6.$$.fragment,Ba),F9r=i(Ba),q1e=n(Ba,"P",{});var fht=s(q1e);C9r=r(fht,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fht.forEach(t),M9r=i(Ba),Ln=n(Ba,"P",{});var Y4=s(Ln);E9r=r(Y4,"The model class to instantiate is selected based on the "),G1e=n(Y4,"CODE",{});var mht=s(G1e);y9r=r(mht,"model_type"),mht.forEach(t),w9r=r(Y4,` property of the config object (either
passed as an argument or loaded from `),O1e=n(Y4,"CODE",{});var ght=s(O1e);A9r=r(ght,"pretrained_model_name_or_path"),ght.forEach(t),L9r=r(Y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X1e=n(Y4,"CODE",{});var hht=s(X1e);B9r=r(hht,"pretrained_model_name_or_path"),hht.forEach(t),x9r=r(Y4,":"),Y4.forEach(t),k9r=i(Ba),Ce=n(Ba,"UL",{});var ro=s(Ce);LC=n(ro,"LI",{});var N0e=s(LC);z1e=n(N0e,"STRONG",{});var pht=s(z1e);R9r=r(pht,"albert"),pht.forEach(t),S9r=r(N0e," \u2014 "),FX=n(N0e,"A",{href:!0});var _ht=s(FX);P9r=r(_ht,"FlaxAlbertForQuestionAnswering"),_ht.forEach(t),$9r=r(N0e," (ALBERT model)"),N0e.forEach(t),I9r=i(ro),BC=n(ro,"LI",{});var D0e=s(BC);V1e=n(D0e,"STRONG",{});var uht=s(V1e);j9r=r(uht,"bart"),uht.forEach(t),N9r=r(D0e," \u2014 "),CX=n(D0e,"A",{href:!0});var bht=s(CX);D9r=r(bht,"FlaxBartForQuestionAnswering"),bht.forEach(t),q9r=r(D0e," (BART model)"),D0e.forEach(t),G9r=i(ro),xC=n(ro,"LI",{});var q0e=s(xC);W1e=n(q0e,"STRONG",{});var vht=s(W1e);O9r=r(vht,"bert"),vht.forEach(t),X9r=r(q0e," \u2014 "),MX=n(q0e,"A",{href:!0});var Tht=s(MX);z9r=r(Tht,"FlaxBertForQuestionAnswering"),Tht.forEach(t),V9r=r(q0e," (BERT model)"),q0e.forEach(t),W9r=i(ro),kC=n(ro,"LI",{});var G0e=s(kC);Q1e=n(G0e,"STRONG",{});var Fht=s(Q1e);Q9r=r(Fht,"big_bird"),Fht.forEach(t),H9r=r(G0e," \u2014 "),EX=n(G0e,"A",{href:!0});var Cht=s(EX);U9r=r(Cht,"FlaxBigBirdForQuestionAnswering"),Cht.forEach(t),J9r=r(G0e," (BigBird model)"),G0e.forEach(t),Y9r=i(ro),RC=n(ro,"LI",{});var O0e=s(RC);H1e=n(O0e,"STRONG",{});var Mht=s(H1e);K9r=r(Mht,"distilbert"),Mht.forEach(t),Z9r=r(O0e," \u2014 "),yX=n(O0e,"A",{href:!0});var Eht=s(yX);eCr=r(Eht,"FlaxDistilBertForQuestionAnswering"),Eht.forEach(t),oCr=r(O0e," (DistilBERT model)"),O0e.forEach(t),rCr=i(ro),SC=n(ro,"LI",{});var X0e=s(SC);U1e=n(X0e,"STRONG",{});var yht=s(U1e);tCr=r(yht,"electra"),yht.forEach(t),aCr=r(X0e," \u2014 "),wX=n(X0e,"A",{href:!0});var wht=s(wX);nCr=r(wht,"FlaxElectraForQuestionAnswering"),wht.forEach(t),sCr=r(X0e," (ELECTRA model)"),X0e.forEach(t),lCr=i(ro),PC=n(ro,"LI",{});var z0e=s(PC);J1e=n(z0e,"STRONG",{});var Aht=s(J1e);iCr=r(Aht,"mbart"),Aht.forEach(t),dCr=r(z0e," \u2014 "),AX=n(z0e,"A",{href:!0});var Lht=s(AX);cCr=r(Lht,"FlaxMBartForQuestionAnswering"),Lht.forEach(t),fCr=r(z0e," (mBART model)"),z0e.forEach(t),mCr=i(ro),$C=n(ro,"LI",{});var V0e=s($C);Y1e=n(V0e,"STRONG",{});var Bht=s(Y1e);gCr=r(Bht,"roberta"),Bht.forEach(t),hCr=r(V0e," \u2014 "),LX=n(V0e,"A",{href:!0});var xht=s(LX);pCr=r(xht,"FlaxRobertaForQuestionAnswering"),xht.forEach(t),_Cr=r(V0e," (RoBERTa model)"),V0e.forEach(t),uCr=i(ro),IC=n(ro,"LI",{});var W0e=s(IC);K1e=n(W0e,"STRONG",{});var kht=s(K1e);bCr=r(kht,"roformer"),kht.forEach(t),vCr=r(W0e," \u2014 "),BX=n(W0e,"A",{href:!0});var Rht=s(BX);TCr=r(Rht,"FlaxRoFormerForQuestionAnswering"),Rht.forEach(t),FCr=r(W0e," (RoFormer model)"),W0e.forEach(t),ro.forEach(t),CCr=i(Ba),Z1e=n(Ba,"P",{});var Sht=s(Z1e);MCr=r(Sht,"Examples:"),Sht.forEach(t),ECr=i(Ba),m(d6.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),eBe=i(d),lf=n(d,"H2",{class:!0});var cke=s(lf);jC=n(cke,"A",{id:!0,class:!0,href:!0});var Pht=s(jC);ebe=n(Pht,"SPAN",{});var $ht=s(ebe);m(c6.$$.fragment,$ht),$ht.forEach(t),Pht.forEach(t),yCr=i(cke),obe=n(cke,"SPAN",{});var Iht=s(obe);wCr=r(Iht,"FlaxAutoModelForTokenClassification"),Iht.forEach(t),cke.forEach(t),oBe=i(d),Sr=n(d,"DIV",{class:!0});var pi=s(Sr);m(f6.$$.fragment,pi),ACr=i(pi),df=n(pi,"P",{});var xV=s(df);LCr=r(xV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rbe=n(xV,"CODE",{});var jht=s(rbe);BCr=r(jht,"from_pretrained()"),jht.forEach(t),xCr=r(xV,"class method or the "),tbe=n(xV,"CODE",{});var Nht=s(tbe);kCr=r(Nht,"from_config()"),Nht.forEach(t),RCr=r(xV,`class
method.`),xV.forEach(t),SCr=i(pi),m6=n(pi,"P",{});var fke=s(m6);PCr=r(fke,"This class cannot be instantiated directly using "),abe=n(fke,"CODE",{});var Dht=s(abe);$Cr=r(Dht,"__init__()"),Dht.forEach(t),ICr=r(fke," (throws an error)."),fke.forEach(t),jCr=i(pi),wt=n(pi,"DIV",{class:!0});var _i=s(wt);m(g6.$$.fragment,_i),NCr=i(_i),nbe=n(_i,"P",{});var qht=s(nbe);DCr=r(qht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qht.forEach(t),qCr=i(_i),cf=n(_i,"P",{});var kV=s(cf);GCr=r(kV,`Note:
Loading a model from its configuration file does `),sbe=n(kV,"STRONG",{});var Ght=s(sbe);OCr=r(Ght,"not"),Ght.forEach(t),XCr=r(kV,` load the model weights. It only affects the
model\u2019s configuration. Use `),lbe=n(kV,"CODE",{});var Oht=s(lbe);zCr=r(Oht,"from_pretrained()"),Oht.forEach(t),VCr=r(kV,"to load the model weights."),kV.forEach(t),WCr=i(_i),ibe=n(_i,"P",{});var Xht=s(ibe);QCr=r(Xht,"Examples:"),Xht.forEach(t),HCr=i(_i),m(h6.$$.fragment,_i),_i.forEach(t),UCr=i(pi),So=n(pi,"DIV",{class:!0});var xa=s(So);m(p6.$$.fragment,xa),JCr=i(xa),dbe=n(xa,"P",{});var zht=s(dbe);YCr=r(zht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zht.forEach(t),KCr=i(xa),Bn=n(xa,"P",{});var K4=s(Bn);ZCr=r(K4,"The model class to instantiate is selected based on the "),cbe=n(K4,"CODE",{});var Vht=s(cbe);e4r=r(Vht,"model_type"),Vht.forEach(t),o4r=r(K4,` property of the config object (either
passed as an argument or loaded from `),fbe=n(K4,"CODE",{});var Wht=s(fbe);r4r=r(Wht,"pretrained_model_name_or_path"),Wht.forEach(t),t4r=r(K4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=n(K4,"CODE",{});var Qht=s(mbe);a4r=r(Qht,"pretrained_model_name_or_path"),Qht.forEach(t),n4r=r(K4,":"),K4.forEach(t),s4r=i(xa),so=n(xa,"UL",{});var ta=s(so);NC=n(ta,"LI",{});var Q0e=s(NC);gbe=n(Q0e,"STRONG",{});var Hht=s(gbe);l4r=r(Hht,"albert"),Hht.forEach(t),i4r=r(Q0e," \u2014 "),xX=n(Q0e,"A",{href:!0});var Uht=s(xX);d4r=r(Uht,"FlaxAlbertForTokenClassification"),Uht.forEach(t),c4r=r(Q0e," (ALBERT model)"),Q0e.forEach(t),f4r=i(ta),DC=n(ta,"LI",{});var H0e=s(DC);hbe=n(H0e,"STRONG",{});var Jht=s(hbe);m4r=r(Jht,"bert"),Jht.forEach(t),g4r=r(H0e," \u2014 "),kX=n(H0e,"A",{href:!0});var Yht=s(kX);h4r=r(Yht,"FlaxBertForTokenClassification"),Yht.forEach(t),p4r=r(H0e," (BERT model)"),H0e.forEach(t),_4r=i(ta),qC=n(ta,"LI",{});var U0e=s(qC);pbe=n(U0e,"STRONG",{});var Kht=s(pbe);u4r=r(Kht,"big_bird"),Kht.forEach(t),b4r=r(U0e," \u2014 "),RX=n(U0e,"A",{href:!0});var Zht=s(RX);v4r=r(Zht,"FlaxBigBirdForTokenClassification"),Zht.forEach(t),T4r=r(U0e," (BigBird model)"),U0e.forEach(t),F4r=i(ta),GC=n(ta,"LI",{});var J0e=s(GC);_be=n(J0e,"STRONG",{});var ept=s(_be);C4r=r(ept,"distilbert"),ept.forEach(t),M4r=r(J0e," \u2014 "),SX=n(J0e,"A",{href:!0});var opt=s(SX);E4r=r(opt,"FlaxDistilBertForTokenClassification"),opt.forEach(t),y4r=r(J0e," (DistilBERT model)"),J0e.forEach(t),w4r=i(ta),OC=n(ta,"LI",{});var Y0e=s(OC);ube=n(Y0e,"STRONG",{});var rpt=s(ube);A4r=r(rpt,"electra"),rpt.forEach(t),L4r=r(Y0e," \u2014 "),PX=n(Y0e,"A",{href:!0});var tpt=s(PX);B4r=r(tpt,"FlaxElectraForTokenClassification"),tpt.forEach(t),x4r=r(Y0e," (ELECTRA model)"),Y0e.forEach(t),k4r=i(ta),XC=n(ta,"LI",{});var K0e=s(XC);bbe=n(K0e,"STRONG",{});var apt=s(bbe);R4r=r(apt,"roberta"),apt.forEach(t),S4r=r(K0e," \u2014 "),$X=n(K0e,"A",{href:!0});var npt=s($X);P4r=r(npt,"FlaxRobertaForTokenClassification"),npt.forEach(t),$4r=r(K0e," (RoBERTa model)"),K0e.forEach(t),I4r=i(ta),zC=n(ta,"LI",{});var Z0e=s(zC);vbe=n(Z0e,"STRONG",{});var spt=s(vbe);j4r=r(spt,"roformer"),spt.forEach(t),N4r=r(Z0e," \u2014 "),IX=n(Z0e,"A",{href:!0});var lpt=s(IX);D4r=r(lpt,"FlaxRoFormerForTokenClassification"),lpt.forEach(t),q4r=r(Z0e," (RoFormer model)"),Z0e.forEach(t),ta.forEach(t),G4r=i(xa),Tbe=n(xa,"P",{});var ipt=s(Tbe);O4r=r(ipt,"Examples:"),ipt.forEach(t),X4r=i(xa),m(_6.$$.fragment,xa),xa.forEach(t),pi.forEach(t),rBe=i(d),ff=n(d,"H2",{class:!0});var mke=s(ff);VC=n(mke,"A",{id:!0,class:!0,href:!0});var dpt=s(VC);Fbe=n(dpt,"SPAN",{});var cpt=s(Fbe);m(u6.$$.fragment,cpt),cpt.forEach(t),dpt.forEach(t),z4r=i(mke),Cbe=n(mke,"SPAN",{});var fpt=s(Cbe);V4r=r(fpt,"FlaxAutoModelForMultipleChoice"),fpt.forEach(t),mke.forEach(t),tBe=i(d),Pr=n(d,"DIV",{class:!0});var ui=s(Pr);m(b6.$$.fragment,ui),W4r=i(ui),mf=n(ui,"P",{});var RV=s(mf);Q4r=r(RV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Mbe=n(RV,"CODE",{});var mpt=s(Mbe);H4r=r(mpt,"from_pretrained()"),mpt.forEach(t),U4r=r(RV,"class method or the "),Ebe=n(RV,"CODE",{});var gpt=s(Ebe);J4r=r(gpt,"from_config()"),gpt.forEach(t),Y4r=r(RV,`class
method.`),RV.forEach(t),K4r=i(ui),v6=n(ui,"P",{});var gke=s(v6);Z4r=r(gke,"This class cannot be instantiated directly using "),ybe=n(gke,"CODE",{});var hpt=s(ybe);eMr=r(hpt,"__init__()"),hpt.forEach(t),oMr=r(gke," (throws an error)."),gke.forEach(t),rMr=i(ui),At=n(ui,"DIV",{class:!0});var bi=s(At);m(T6.$$.fragment,bi),tMr=i(bi),wbe=n(bi,"P",{});var ppt=s(wbe);aMr=r(ppt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ppt.forEach(t),nMr=i(bi),gf=n(bi,"P",{});var SV=s(gf);sMr=r(SV,`Note:
Loading a model from its configuration file does `),Abe=n(SV,"STRONG",{});var _pt=s(Abe);lMr=r(_pt,"not"),_pt.forEach(t),iMr=r(SV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lbe=n(SV,"CODE",{});var upt=s(Lbe);dMr=r(upt,"from_pretrained()"),upt.forEach(t),cMr=r(SV,"to load the model weights."),SV.forEach(t),fMr=i(bi),Bbe=n(bi,"P",{});var bpt=s(Bbe);mMr=r(bpt,"Examples:"),bpt.forEach(t),gMr=i(bi),m(F6.$$.fragment,bi),bi.forEach(t),hMr=i(ui),Po=n(ui,"DIV",{class:!0});var ka=s(Po);m(C6.$$.fragment,ka),pMr=i(ka),xbe=n(ka,"P",{});var vpt=s(xbe);_Mr=r(vpt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vpt.forEach(t),uMr=i(ka),xn=n(ka,"P",{});var Z4=s(xn);bMr=r(Z4,"The model class to instantiate is selected based on the "),kbe=n(Z4,"CODE",{});var Tpt=s(kbe);vMr=r(Tpt,"model_type"),Tpt.forEach(t),TMr=r(Z4,` property of the config object (either
passed as an argument or loaded from `),Rbe=n(Z4,"CODE",{});var Fpt=s(Rbe);FMr=r(Fpt,"pretrained_model_name_or_path"),Fpt.forEach(t),CMr=r(Z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sbe=n(Z4,"CODE",{});var Cpt=s(Sbe);MMr=r(Cpt,"pretrained_model_name_or_path"),Cpt.forEach(t),EMr=r(Z4,":"),Z4.forEach(t),yMr=i(ka),lo=n(ka,"UL",{});var aa=s(lo);WC=n(aa,"LI",{});var eLe=s(WC);Pbe=n(eLe,"STRONG",{});var Mpt=s(Pbe);wMr=r(Mpt,"albert"),Mpt.forEach(t),AMr=r(eLe," \u2014 "),jX=n(eLe,"A",{href:!0});var Ept=s(jX);LMr=r(Ept,"FlaxAlbertForMultipleChoice"),Ept.forEach(t),BMr=r(eLe," (ALBERT model)"),eLe.forEach(t),xMr=i(aa),QC=n(aa,"LI",{});var oLe=s(QC);$be=n(oLe,"STRONG",{});var ypt=s($be);kMr=r(ypt,"bert"),ypt.forEach(t),RMr=r(oLe," \u2014 "),NX=n(oLe,"A",{href:!0});var wpt=s(NX);SMr=r(wpt,"FlaxBertForMultipleChoice"),wpt.forEach(t),PMr=r(oLe," (BERT model)"),oLe.forEach(t),$Mr=i(aa),HC=n(aa,"LI",{});var rLe=s(HC);Ibe=n(rLe,"STRONG",{});var Apt=s(Ibe);IMr=r(Apt,"big_bird"),Apt.forEach(t),jMr=r(rLe," \u2014 "),DX=n(rLe,"A",{href:!0});var Lpt=s(DX);NMr=r(Lpt,"FlaxBigBirdForMultipleChoice"),Lpt.forEach(t),DMr=r(rLe," (BigBird model)"),rLe.forEach(t),qMr=i(aa),UC=n(aa,"LI",{});var tLe=s(UC);jbe=n(tLe,"STRONG",{});var Bpt=s(jbe);GMr=r(Bpt,"distilbert"),Bpt.forEach(t),OMr=r(tLe," \u2014 "),qX=n(tLe,"A",{href:!0});var xpt=s(qX);XMr=r(xpt,"FlaxDistilBertForMultipleChoice"),xpt.forEach(t),zMr=r(tLe," (DistilBERT model)"),tLe.forEach(t),VMr=i(aa),JC=n(aa,"LI",{});var aLe=s(JC);Nbe=n(aLe,"STRONG",{});var kpt=s(Nbe);WMr=r(kpt,"electra"),kpt.forEach(t),QMr=r(aLe," \u2014 "),GX=n(aLe,"A",{href:!0});var Rpt=s(GX);HMr=r(Rpt,"FlaxElectraForMultipleChoice"),Rpt.forEach(t),UMr=r(aLe," (ELECTRA model)"),aLe.forEach(t),JMr=i(aa),YC=n(aa,"LI",{});var nLe=s(YC);Dbe=n(nLe,"STRONG",{});var Spt=s(Dbe);YMr=r(Spt,"roberta"),Spt.forEach(t),KMr=r(nLe," \u2014 "),OX=n(nLe,"A",{href:!0});var Ppt=s(OX);ZMr=r(Ppt,"FlaxRobertaForMultipleChoice"),Ppt.forEach(t),eEr=r(nLe," (RoBERTa model)"),nLe.forEach(t),oEr=i(aa),KC=n(aa,"LI",{});var sLe=s(KC);qbe=n(sLe,"STRONG",{});var $pt=s(qbe);rEr=r($pt,"roformer"),$pt.forEach(t),tEr=r(sLe," \u2014 "),XX=n(sLe,"A",{href:!0});var Ipt=s(XX);aEr=r(Ipt,"FlaxRoFormerForMultipleChoice"),Ipt.forEach(t),nEr=r(sLe," (RoFormer model)"),sLe.forEach(t),aa.forEach(t),sEr=i(ka),Gbe=n(ka,"P",{});var jpt=s(Gbe);lEr=r(jpt,"Examples:"),jpt.forEach(t),iEr=i(ka),m(M6.$$.fragment,ka),ka.forEach(t),ui.forEach(t),aBe=i(d),hf=n(d,"H2",{class:!0});var hke=s(hf);ZC=n(hke,"A",{id:!0,class:!0,href:!0});var Npt=s(ZC);Obe=n(Npt,"SPAN",{});var Dpt=s(Obe);m(E6.$$.fragment,Dpt),Dpt.forEach(t),Npt.forEach(t),dEr=i(hke),Xbe=n(hke,"SPAN",{});var qpt=s(Xbe);cEr=r(qpt,"FlaxAutoModelForNextSentencePrediction"),qpt.forEach(t),hke.forEach(t),nBe=i(d),$r=n(d,"DIV",{class:!0});var vi=s($r);m(y6.$$.fragment,vi),fEr=i(vi),pf=n(vi,"P",{});var PV=s(pf);mEr=r(PV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zbe=n(PV,"CODE",{});var Gpt=s(zbe);gEr=r(Gpt,"from_pretrained()"),Gpt.forEach(t),hEr=r(PV,"class method or the "),Vbe=n(PV,"CODE",{});var Opt=s(Vbe);pEr=r(Opt,"from_config()"),Opt.forEach(t),_Er=r(PV,`class
method.`),PV.forEach(t),uEr=i(vi),w6=n(vi,"P",{});var pke=s(w6);bEr=r(pke,"This class cannot be instantiated directly using "),Wbe=n(pke,"CODE",{});var Xpt=s(Wbe);vEr=r(Xpt,"__init__()"),Xpt.forEach(t),TEr=r(pke," (throws an error)."),pke.forEach(t),FEr=i(vi),Lt=n(vi,"DIV",{class:!0});var Ti=s(Lt);m(A6.$$.fragment,Ti),CEr=i(Ti),Qbe=n(Ti,"P",{});var zpt=s(Qbe);MEr=r(zpt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zpt.forEach(t),EEr=i(Ti),_f=n(Ti,"P",{});var $V=s(_f);yEr=r($V,`Note:
Loading a model from its configuration file does `),Hbe=n($V,"STRONG",{});var Vpt=s(Hbe);wEr=r(Vpt,"not"),Vpt.forEach(t),AEr=r($V,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ube=n($V,"CODE",{});var Wpt=s(Ube);LEr=r(Wpt,"from_pretrained()"),Wpt.forEach(t),BEr=r($V,"to load the model weights."),$V.forEach(t),xEr=i(Ti),Jbe=n(Ti,"P",{});var Qpt=s(Jbe);kEr=r(Qpt,"Examples:"),Qpt.forEach(t),REr=i(Ti),m(L6.$$.fragment,Ti),Ti.forEach(t),SEr=i(vi),$o=n(vi,"DIV",{class:!0});var Ra=s($o);m(B6.$$.fragment,Ra),PEr=i(Ra),Ybe=n(Ra,"P",{});var Hpt=s(Ybe);$Er=r(Hpt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Hpt.forEach(t),IEr=i(Ra),kn=n(Ra,"P",{});var eM=s(kn);jEr=r(eM,"The model class to instantiate is selected based on the "),Kbe=n(eM,"CODE",{});var Upt=s(Kbe);NEr=r(Upt,"model_type"),Upt.forEach(t),DEr=r(eM,` property of the config object (either
passed as an argument or loaded from `),Zbe=n(eM,"CODE",{});var Jpt=s(Zbe);qEr=r(Jpt,"pretrained_model_name_or_path"),Jpt.forEach(t),GEr=r(eM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=n(eM,"CODE",{});var Ypt=s(e2e);OEr=r(Ypt,"pretrained_model_name_or_path"),Ypt.forEach(t),XEr=r(eM,":"),eM.forEach(t),zEr=i(Ra),o2e=n(Ra,"UL",{});var Kpt=s(o2e);e4=n(Kpt,"LI",{});var lLe=s(e4);r2e=n(lLe,"STRONG",{});var Zpt=s(r2e);VEr=r(Zpt,"bert"),Zpt.forEach(t),WEr=r(lLe," \u2014 "),zX=n(lLe,"A",{href:!0});var e_t=s(zX);QEr=r(e_t,"FlaxBertForNextSentencePrediction"),e_t.forEach(t),HEr=r(lLe," (BERT model)"),lLe.forEach(t),Kpt.forEach(t),UEr=i(Ra),t2e=n(Ra,"P",{});var o_t=s(t2e);JEr=r(o_t,"Examples:"),o_t.forEach(t),YEr=i(Ra),m(x6.$$.fragment,Ra),Ra.forEach(t),vi.forEach(t),sBe=i(d),uf=n(d,"H2",{class:!0});var _ke=s(uf);o4=n(_ke,"A",{id:!0,class:!0,href:!0});var r_t=s(o4);a2e=n(r_t,"SPAN",{});var t_t=s(a2e);m(k6.$$.fragment,t_t),t_t.forEach(t),r_t.forEach(t),KEr=i(_ke),n2e=n(_ke,"SPAN",{});var a_t=s(n2e);ZEr=r(a_t,"FlaxAutoModelForImageClassification"),a_t.forEach(t),_ke.forEach(t),lBe=i(d),Ir=n(d,"DIV",{class:!0});var Fi=s(Ir);m(R6.$$.fragment,Fi),e3r=i(Fi),bf=n(Fi,"P",{});var IV=s(bf);o3r=r(IV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),s2e=n(IV,"CODE",{});var n_t=s(s2e);r3r=r(n_t,"from_pretrained()"),n_t.forEach(t),t3r=r(IV,"class method or the "),l2e=n(IV,"CODE",{});var s_t=s(l2e);a3r=r(s_t,"from_config()"),s_t.forEach(t),n3r=r(IV,`class
method.`),IV.forEach(t),s3r=i(Fi),S6=n(Fi,"P",{});var uke=s(S6);l3r=r(uke,"This class cannot be instantiated directly using "),i2e=n(uke,"CODE",{});var l_t=s(i2e);i3r=r(l_t,"__init__()"),l_t.forEach(t),d3r=r(uke," (throws an error)."),uke.forEach(t),c3r=i(Fi),Bt=n(Fi,"DIV",{class:!0});var Ci=s(Bt);m(P6.$$.fragment,Ci),f3r=i(Ci),d2e=n(Ci,"P",{});var i_t=s(d2e);m3r=r(i_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),i_t.forEach(t),g3r=i(Ci),vf=n(Ci,"P",{});var jV=s(vf);h3r=r(jV,`Note:
Loading a model from its configuration file does `),c2e=n(jV,"STRONG",{});var d_t=s(c2e);p3r=r(d_t,"not"),d_t.forEach(t),_3r=r(jV,` load the model weights. It only affects the
model\u2019s configuration. Use `),f2e=n(jV,"CODE",{});var c_t=s(f2e);u3r=r(c_t,"from_pretrained()"),c_t.forEach(t),b3r=r(jV,"to load the model weights."),jV.forEach(t),v3r=i(Ci),m2e=n(Ci,"P",{});var f_t=s(m2e);T3r=r(f_t,"Examples:"),f_t.forEach(t),F3r=i(Ci),m($6.$$.fragment,Ci),Ci.forEach(t),C3r=i(Fi),Io=n(Fi,"DIV",{class:!0});var Sa=s(Io);m(I6.$$.fragment,Sa),M3r=i(Sa),g2e=n(Sa,"P",{});var m_t=s(g2e);E3r=r(m_t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),m_t.forEach(t),y3r=i(Sa),Rn=n(Sa,"P",{});var oM=s(Rn);w3r=r(oM,"The model class to instantiate is selected based on the "),h2e=n(oM,"CODE",{});var g_t=s(h2e);A3r=r(g_t,"model_type"),g_t.forEach(t),L3r=r(oM,` property of the config object (either
passed as an argument or loaded from `),p2e=n(oM,"CODE",{});var h_t=s(p2e);B3r=r(h_t,"pretrained_model_name_or_path"),h_t.forEach(t),x3r=r(oM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=n(oM,"CODE",{});var p_t=s(_2e);k3r=r(p_t,"pretrained_model_name_or_path"),p_t.forEach(t),R3r=r(oM,":"),oM.forEach(t),S3r=i(Sa),j6=n(Sa,"UL",{});var bke=s(j6);r4=n(bke,"LI",{});var iLe=s(r4);u2e=n(iLe,"STRONG",{});var __t=s(u2e);P3r=r(__t,"beit"),__t.forEach(t),$3r=r(iLe," \u2014 "),VX=n(iLe,"A",{href:!0});var u_t=s(VX);I3r=r(u_t,"FlaxBeitForImageClassification"),u_t.forEach(t),j3r=r(iLe," (BEiT model)"),iLe.forEach(t),N3r=i(bke),t4=n(bke,"LI",{});var dLe=s(t4);b2e=n(dLe,"STRONG",{});var b_t=s(b2e);D3r=r(b_t,"vit"),b_t.forEach(t),q3r=r(dLe," \u2014 "),WX=n(dLe,"A",{href:!0});var v_t=s(WX);G3r=r(v_t,"FlaxViTForImageClassification"),v_t.forEach(t),O3r=r(dLe," (ViT model)"),dLe.forEach(t),bke.forEach(t),X3r=i(Sa),v2e=n(Sa,"P",{});var T_t=s(v2e);z3r=r(T_t,"Examples:"),T_t.forEach(t),V3r=i(Sa),m(N6.$$.fragment,Sa),Sa.forEach(t),Fi.forEach(t),iBe=i(d),Tf=n(d,"H2",{class:!0});var vke=s(Tf);a4=n(vke,"A",{id:!0,class:!0,href:!0});var F_t=s(a4);T2e=n(F_t,"SPAN",{});var C_t=s(T2e);m(D6.$$.fragment,C_t),C_t.forEach(t),F_t.forEach(t),W3r=i(vke),F2e=n(vke,"SPAN",{});var M_t=s(F2e);Q3r=r(M_t,"FlaxAutoModelForVision2Seq"),M_t.forEach(t),vke.forEach(t),dBe=i(d),jr=n(d,"DIV",{class:!0});var Mi=s(jr);m(q6.$$.fragment,Mi),H3r=i(Mi),Ff=n(Mi,"P",{});var NV=s(Ff);U3r=r(NV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),C2e=n(NV,"CODE",{});var E_t=s(C2e);J3r=r(E_t,"from_pretrained()"),E_t.forEach(t),Y3r=r(NV,"class method or the "),M2e=n(NV,"CODE",{});var y_t=s(M2e);K3r=r(y_t,"from_config()"),y_t.forEach(t),Z3r=r(NV,`class
method.`),NV.forEach(t),eyr=i(Mi),G6=n(Mi,"P",{});var Tke=s(G6);oyr=r(Tke,"This class cannot be instantiated directly using "),E2e=n(Tke,"CODE",{});var w_t=s(E2e);ryr=r(w_t,"__init__()"),w_t.forEach(t),tyr=r(Tke," (throws an error)."),Tke.forEach(t),ayr=i(Mi),xt=n(Mi,"DIV",{class:!0});var Ei=s(xt);m(O6.$$.fragment,Ei),nyr=i(Ei),y2e=n(Ei,"P",{});var A_t=s(y2e);syr=r(A_t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),A_t.forEach(t),lyr=i(Ei),Cf=n(Ei,"P",{});var DV=s(Cf);iyr=r(DV,`Note:
Loading a model from its configuration file does `),w2e=n(DV,"STRONG",{});var L_t=s(w2e);dyr=r(L_t,"not"),L_t.forEach(t),cyr=r(DV,` load the model weights. It only affects the
model\u2019s configuration. Use `),A2e=n(DV,"CODE",{});var B_t=s(A2e);fyr=r(B_t,"from_pretrained()"),B_t.forEach(t),myr=r(DV,"to load the model weights."),DV.forEach(t),gyr=i(Ei),L2e=n(Ei,"P",{});var x_t=s(L2e);hyr=r(x_t,"Examples:"),x_t.forEach(t),pyr=i(Ei),m(X6.$$.fragment,Ei),Ei.forEach(t),_yr=i(Mi),jo=n(Mi,"DIV",{class:!0});var Pa=s(jo);m(z6.$$.fragment,Pa),uyr=i(Pa),B2e=n(Pa,"P",{});var k_t=s(B2e);byr=r(k_t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),k_t.forEach(t),vyr=i(Pa),Sn=n(Pa,"P",{});var rM=s(Sn);Tyr=r(rM,"The model class to instantiate is selected based on the "),x2e=n(rM,"CODE",{});var R_t=s(x2e);Fyr=r(R_t,"model_type"),R_t.forEach(t),Cyr=r(rM,` property of the config object (either
passed as an argument or loaded from `),k2e=n(rM,"CODE",{});var S_t=s(k2e);Myr=r(S_t,"pretrained_model_name_or_path"),S_t.forEach(t),Eyr=r(rM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=n(rM,"CODE",{});var P_t=s(R2e);yyr=r(P_t,"pretrained_model_name_or_path"),P_t.forEach(t),wyr=r(rM,":"),rM.forEach(t),Ayr=i(Pa),S2e=n(Pa,"UL",{});var $_t=s(S2e);n4=n($_t,"LI",{});var cLe=s(n4);P2e=n(cLe,"STRONG",{});var I_t=s(P2e);Lyr=r(I_t,"vision-encoder-decoder"),I_t.forEach(t),Byr=r(cLe," \u2014 "),QX=n(cLe,"A",{href:!0});var j_t=s(QX);xyr=r(j_t,"FlaxVisionEncoderDecoderModel"),j_t.forEach(t),kyr=r(cLe," (Vision Encoder decoder model)"),cLe.forEach(t),$_t.forEach(t),Ryr=i(Pa),$2e=n(Pa,"P",{});var N_t=s($2e);Syr=r(N_t,"Examples:"),N_t.forEach(t),Pyr=i(Pa),m(V6.$$.fragment,Pa),Pa.forEach(t),Mi.forEach(t),this.h()},h(){c(J,"name","hf:doc:metadata"),c(J,"content",JSON.stringify(Q_t)),c(me,"id","auto-classes"),c(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(me,"href","#auto-classes"),c(ie,"class","relative group"),c(Pn,"href","/docs/transformers/pr_15859/en/model_doc/auto#transformers.AutoConfig"),c(In,"href","/docs/transformers/pr_15859/en/model_doc/auto#transformers.AutoModel"),c(jn,"href","/docs/transformers/pr_15859/en/model_doc/auto#transformers.AutoTokenizer"),c(Ri,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertModel"),c(Lf,"id","extending-the-auto-classes"),c(Lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lf,"href","#extending-the-auto-classes"),c(Si,"class","relative group"),c(xf,"id","transformers.AutoConfig"),c(xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xf,"href","#transformers.AutoConfig"),c(Pi,"class","relative group"),c(H0,"href","/docs/transformers/pr_15859/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(U0,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertConfig"),c(J0,"href","/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartConfig"),c(Y0,"href","/docs/transformers/pr_15859/en/model_doc/beit#transformers.BeitConfig"),c(K0,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertConfig"),c(Z0,"href","/docs/transformers/pr_15859/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(eL,"href","/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdConfig"),c(oL,"href","/docs/transformers/pr_15859/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(rL,"href","/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(tL,"href","/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(aL,"href","/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertConfig"),c(nL,"href","/docs/transformers/pr_15859/en/model_doc/canine#transformers.CanineConfig"),c(sL,"href","/docs/transformers/pr_15859/en/model_doc/clip#transformers.CLIPConfig"),c(lL,"href","/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertConfig"),c(iL,"href","/docs/transformers/pr_15859/en/model_doc/convnext#transformers.ConvNextConfig"),c(dL,"href","/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.CTRLConfig"),c(cL,"href","/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaConfig"),c(fL,"href","/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(mL,"href","/docs/transformers/pr_15859/en/model_doc/deit#transformers.DeiTConfig"),c(gL,"href","/docs/transformers/pr_15859/en/model_doc/detr#transformers.DetrConfig"),c(hL,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertConfig"),c(pL,"href","/docs/transformers/pr_15859/en/model_doc/dpr#transformers.DPRConfig"),c(_L,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraConfig"),c(uL,"href","/docs/transformers/pr_15859/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(bL,"href","/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertConfig"),c(vL,"href","/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetConfig"),c(TL,"href","/docs/transformers/pr_15859/en/model_doc/fsmt#transformers.FSMTConfig"),c(FL,"href","/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelConfig"),c(CL,"href","/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2Config"),c(ML,"href","/docs/transformers/pr_15859/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(EL,"href","/docs/transformers/pr_15859/en/model_doc/gptj#transformers.GPTJConfig"),c(yL,"href","/docs/transformers/pr_15859/en/model_doc/hubert#transformers.HubertConfig"),c(wL,"href","/docs/transformers/pr_15859/en/model_doc/ibert#transformers.IBertConfig"),c(AL,"href","/docs/transformers/pr_15859/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(LL,"href","/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(BL,"href","/docs/transformers/pr_15859/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(xL,"href","/docs/transformers/pr_15859/en/model_doc/led#transformers.LEDConfig"),c(kL,"href","/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerConfig"),c(RL,"href","/docs/transformers/pr_15859/en/model_doc/luke#transformers.LukeConfig"),c(SL,"href","/docs/transformers/pr_15859/en/model_doc/lxmert#transformers.LxmertConfig"),c(PL,"href","/docs/transformers/pr_15859/en/model_doc/m2m_100#transformers.M2M100Config"),c($L,"href","/docs/transformers/pr_15859/en/model_doc/marian#transformers.MarianConfig"),c(IL,"href","/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartConfig"),c(jL,"href","/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(NL,"href","/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(DL,"href","/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetConfig"),c(qL,"href","/docs/transformers/pr_15859/en/model_doc/mt5#transformers.MT5Config"),c(GL,"href","/docs/transformers/pr_15859/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(OL,"href","/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(XL,"href","/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.PegasusConfig"),c(zL,"href","/docs/transformers/pr_15859/en/model_doc/perceiver#transformers.PerceiverConfig"),c(VL,"href","/docs/transformers/pr_15859/en/model_doc/plbart#transformers.PLBartConfig"),c(WL,"href","/docs/transformers/pr_15859/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(QL,"href","/docs/transformers/pr_15859/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(HL,"href","/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(UL,"href","/docs/transformers/pr_15859/en/model_doc/rag#transformers.RagConfig"),c(JL,"href","/docs/transformers/pr_15859/en/model_doc/realm#transformers.RealmConfig"),c(YL,"href","/docs/transformers/pr_15859/en/model_doc/reformer#transformers.ReformerConfig"),c(KL,"href","/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertConfig"),c(ZL,"href","/docs/transformers/pr_15859/en/model_doc/retribert#transformers.RetriBertConfig"),c(e7,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaConfig"),c(o7,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerConfig"),c(r7,"href","/docs/transformers/pr_15859/en/model_doc/segformer#transformers.SegformerConfig"),c(t7,"href","/docs/transformers/pr_15859/en/model_doc/sew#transformers.SEWConfig"),c(a7,"href","/docs/transformers/pr_15859/en/model_doc/sew-d#transformers.SEWDConfig"),c(n7,"href","/docs/transformers/pr_15859/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(s7,"href","/docs/transformers/pr_15859/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(l7,"href","/docs/transformers/pr_15859/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(i7,"href","/docs/transformers/pr_15859/en/model_doc/splinter#transformers.SplinterConfig"),c(d7,"href","/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(c7,"href","/docs/transformers/pr_15859/en/model_doc/swin#transformers.SwinConfig"),c(f7,"href","/docs/transformers/pr_15859/en/model_doc/t5#transformers.T5Config"),c(m7,"href","/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TapasConfig"),c(g7,"href","/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(h7,"href","/docs/transformers/pr_15859/en/model_doc/trocr#transformers.TrOCRConfig"),c(p7,"href","/docs/transformers/pr_15859/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(_7,"href","/docs/transformers/pr_15859/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(u7,"href","/docs/transformers/pr_15859/en/model_doc/vilt#transformers.ViltConfig"),c(b7,"href","/docs/transformers/pr_15859/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(v7,"href","/docs/transformers/pr_15859/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(T7,"href","/docs/transformers/pr_15859/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(F7,"href","/docs/transformers/pr_15859/en/model_doc/vit#transformers.ViTConfig"),c(C7,"href","/docs/transformers/pr_15859/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(M7,"href","/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(E7,"href","/docs/transformers/pr_15859/en/model_doc/wavlm#transformers.WavLMConfig"),c(y7,"href","/docs/transformers/pr_15859/en/model_doc/xglm#transformers.XGLMConfig"),c(w7,"href","/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMConfig"),c(A7,"href","/docs/transformers/pr_15859/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(L7,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(B7,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(x7,"href","/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetConfig"),c(k7,"href","/docs/transformers/pr_15859/en/model_doc/yoso#transformers.YosoConfig"),c(fo,"class","docstring"),c(hg,"class","docstring"),c(Go,"class","docstring"),c(pg,"id","transformers.AutoTokenizer"),c(pg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pg,"href","#transformers.AutoTokenizer"),c(Ii,"class","relative group"),c(R7,"href","/docs/transformers/pr_15859/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(S7,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertTokenizer"),c(P7,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertTokenizerFast"),c($7,"href","/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartTokenizer"),c(I7,"href","/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartTokenizerFast"),c(j7,"href","/docs/transformers/pr_15859/en/model_doc/barthez#transformers.BarthezTokenizer"),c(N7,"href","/docs/transformers/pr_15859/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(D7,"href","/docs/transformers/pr_15859/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(q7,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertTokenizer"),c(G7,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertTokenizerFast"),c(O7,"href","/docs/transformers/pr_15859/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(X7,"href","/docs/transformers/pr_15859/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(z7,"href","/docs/transformers/pr_15859/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(V7,"href","/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(W7,"href","/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Q7,"href","/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(H7,"href","/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(U7,"href","/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(J7,"href","/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(Y7,"href","/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(K7,"href","/docs/transformers/pr_15859/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(Z7,"href","/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertTokenizer"),c(eB,"href","/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(oB,"href","/docs/transformers/pr_15859/en/model_doc/canine#transformers.CanineTokenizer"),c(rB,"href","/docs/transformers/pr_15859/en/model_doc/clip#transformers.CLIPTokenizer"),c(tB,"href","/docs/transformers/pr_15859/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(aB,"href","/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(nB,"href","/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(sB,"href","/docs/transformers/pr_15859/en/model_doc/cpm#transformers.CpmTokenizer"),c(lB,"href","/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(iB,"href","/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaTokenizer"),c(dB,"href","/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(cB,"href","/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(fB,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(mB,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(gB,"href","/docs/transformers/pr_15859/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(hB,"href","/docs/transformers/pr_15859/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(pB,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraTokenizer"),c(_B,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(uB,"href","/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(bB,"href","/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetTokenizer"),c(vB,"href","/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(TB,"href","/docs/transformers/pr_15859/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(FB,"href","/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelTokenizer"),c(CB,"href","/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(MB,"href","/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(EB,"href","/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(yB,"href","/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wB,"href","/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AB,"href","/docs/transformers/pr_15859/en/model_doc/herbert#transformers.HerbertTokenizer"),c(LB,"href","/docs/transformers/pr_15859/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(BB,"href","/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xB,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kB,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(RB,"href","/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(SB,"href","/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(PB,"href","/docs/transformers/pr_15859/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c($B,"href","/docs/transformers/pr_15859/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(IB,"href","/docs/transformers/pr_15859/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(jB,"href","/docs/transformers/pr_15859/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(NB,"href","/docs/transformers/pr_15859/en/model_doc/led#transformers.LEDTokenizer"),c(DB,"href","/docs/transformers/pr_15859/en/model_doc/led#transformers.LEDTokenizerFast"),c(qB,"href","/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerTokenizer"),c(GB,"href","/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(OB,"href","/docs/transformers/pr_15859/en/model_doc/luke#transformers.LukeTokenizer"),c(XB,"href","/docs/transformers/pr_15859/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(zB,"href","/docs/transformers/pr_15859/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(VB,"href","/docs/transformers/pr_15859/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(WB,"href","/docs/transformers/pr_15859/en/model_doc/marian#transformers.MarianTokenizer"),c(QB,"href","/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartTokenizer"),c(HB,"href","/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(UB,"href","/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(JB,"href","/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(YB,"href","/docs/transformers/pr_15859/en/model_doc/mluke#transformers.MLukeTokenizer"),c(KB,"href","/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(ZB,"href","/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(ex,"href","/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(ox,"href","/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(rx,"href","/docs/transformers/pr_15859/en/model_doc/mt5#transformers.T5Tokenizer"),c(tx,"href","/docs/transformers/pr_15859/en/model_doc/mt5#transformers.T5TokenizerFast"),c(ax,"href","/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(nx,"href","/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(sx,"href","/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(lx,"href","/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ix,"href","/docs/transformers/pr_15859/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(dx,"href","/docs/transformers/pr_15859/en/model_doc/phobert#transformers.PhobertTokenizer"),c(cx,"href","/docs/transformers/pr_15859/en/model_doc/plbart#transformers.PLBartTokenizer"),c(fx,"href","/docs/transformers/pr_15859/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(mx,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertTokenizer"),c(gx,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertTokenizerFast"),c(hx,"href","/docs/transformers/pr_15859/en/model_doc/rag#transformers.RagTokenizer"),c(px,"href","/docs/transformers/pr_15859/en/model_doc/reformer#transformers.ReformerTokenizer"),c(_x,"href","/docs/transformers/pr_15859/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(ux,"href","/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertTokenizer"),c(bx,"href","/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(vx,"href","/docs/transformers/pr_15859/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Tx,"href","/docs/transformers/pr_15859/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Fx,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Cx,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Mx,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(Ex,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(yx,"href","/docs/transformers/pr_15859/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(wx,"href","/docs/transformers/pr_15859/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Ax,"href","/docs/transformers/pr_15859/en/model_doc/splinter#transformers.SplinterTokenizer"),c(Lx,"href","/docs/transformers/pr_15859/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(Bx,"href","/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(xx,"href","/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(kx,"href","/docs/transformers/pr_15859/en/model_doc/mt5#transformers.T5Tokenizer"),c(Rx,"href","/docs/transformers/pr_15859/en/model_doc/mt5#transformers.T5TokenizerFast"),c(Sx,"href","/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TapasTokenizer"),c(Px,"href","/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c($x,"href","/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Ix,"href","/docs/transformers/pr_15859/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(jx,"href","/docs/transformers/pr_15859/en/model_doc/xglm#transformers.XGLMTokenizer"),c(Nx,"href","/docs/transformers/pr_15859/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(Dx,"href","/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMTokenizer"),c(qx,"href","/docs/transformers/pr_15859/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(Gx,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(Ox,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Xx,"href","/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(zx,"href","/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(mo,"class","docstring"),c(Vg,"class","docstring"),c(Oo,"class","docstring"),c(Wg,"id","transformers.AutoFeatureExtractor"),c(Wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wg,"href","#transformers.AutoFeatureExtractor"),c(ji,"class","relative group"),c(Vx,"href","/docs/transformers/pr_15859/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Wx,"href","/docs/transformers/pr_15859/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Qx,"href","/docs/transformers/pr_15859/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Hx,"href","/docs/transformers/pr_15859/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Ux,"href","/docs/transformers/pr_15859/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Jx,"href","/docs/transformers/pr_15859/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(Yx,"href","/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Kx,"href","/docs/transformers/pr_15859/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(Zx,"href","/docs/transformers/pr_15859/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(ek,"href","/docs/transformers/pr_15859/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(ok,"href","/docs/transformers/pr_15859/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(rk,"href","/docs/transformers/pr_15859/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(tk,"href","/docs/transformers/pr_15859/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(ak,"href","/docs/transformers/pr_15859/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(nk,"href","/docs/transformers/pr_15859/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sk,"href","/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Le,"class","docstring"),c(dh,"class","docstring"),c(Xo,"class","docstring"),c(ch,"id","transformers.AutoProcessor"),c(ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ch,"href","#transformers.AutoProcessor"),c(Ni,"class","relative group"),c(lk,"href","/docs/transformers/pr_15859/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(ik,"href","/docs/transformers/pr_15859/en/model_doc/clip#transformers.CLIPProcessor"),c(dk,"href","/docs/transformers/pr_15859/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(ck,"href","/docs/transformers/pr_15859/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(fk,"href","/docs/transformers/pr_15859/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(mk,"href","/docs/transformers/pr_15859/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(gk,"href","/docs/transformers/pr_15859/en/model_doc/trocr#transformers.TrOCRProcessor"),c(hk,"href","/docs/transformers/pr_15859/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(pk,"href","/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Be,"class","docstring"),c(Th,"class","docstring"),c(zo,"class","docstring"),c(Fh,"id","transformers.AutoModel"),c(Fh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fh,"href","#transformers.AutoModel"),c(qi,"class","relative group"),c(Nr,"class","docstring"),c(_k,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertModel"),c(uk,"href","/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartModel"),c(bk,"href","/docs/transformers/pr_15859/en/model_doc/beit#transformers.BeitModel"),c(vk,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertModel"),c(Tk,"href","/docs/transformers/pr_15859/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(Fk,"href","/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdModel"),c(Ck,"href","/docs/transformers/pr_15859/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(Mk,"href","/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(Ek,"href","/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(yk,"href","/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertModel"),c(wk,"href","/docs/transformers/pr_15859/en/model_doc/canine#transformers.CanineModel"),c(Ak,"href","/docs/transformers/pr_15859/en/model_doc/clip#transformers.CLIPModel"),c(Lk,"href","/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertModel"),c(Bk,"href","/docs/transformers/pr_15859/en/model_doc/convnext#transformers.ConvNextModel"),c(xk,"href","/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.CTRLModel"),c(kk,"href","/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaModel"),c(Rk,"href","/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Sk,"href","/docs/transformers/pr_15859/en/model_doc/deit#transformers.DeiTModel"),c(Pk,"href","/docs/transformers/pr_15859/en/model_doc/detr#transformers.DetrModel"),c($k,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertModel"),c(Ik,"href","/docs/transformers/pr_15859/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(jk,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraModel"),c(Nk,"href","/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertModel"),c(Dk,"href","/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetModel"),c(qk,"href","/docs/transformers/pr_15859/en/model_doc/fsmt#transformers.FSMTModel"),c(Gk,"href","/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelModel"),c(Ok,"href","/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Xk,"href","/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2Model"),c(zk,"href","/docs/transformers/pr_15859/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Vk,"href","/docs/transformers/pr_15859/en/model_doc/gptj#transformers.GPTJModel"),c(Wk,"href","/docs/transformers/pr_15859/en/model_doc/hubert#transformers.HubertModel"),c(Qk,"href","/docs/transformers/pr_15859/en/model_doc/ibert#transformers.IBertModel"),c(Hk,"href","/docs/transformers/pr_15859/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Uk,"href","/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Jk,"href","/docs/transformers/pr_15859/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Yk,"href","/docs/transformers/pr_15859/en/model_doc/led#transformers.LEDModel"),c(Kk,"href","/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerModel"),c(Zk,"href","/docs/transformers/pr_15859/en/model_doc/luke#transformers.LukeModel"),c(eR,"href","/docs/transformers/pr_15859/en/model_doc/lxmert#transformers.LxmertModel"),c(oR,"href","/docs/transformers/pr_15859/en/model_doc/m2m_100#transformers.M2M100Model"),c(rR,"href","/docs/transformers/pr_15859/en/model_doc/marian#transformers.MarianModel"),c(tR,"href","/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartModel"),c(aR,"href","/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(nR,"href","/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertModel"),c(sR,"href","/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetModel"),c(lR,"href","/docs/transformers/pr_15859/en/model_doc/mt5#transformers.MT5Model"),c(iR,"href","/docs/transformers/pr_15859/en/model_doc/nystromformer#transformers.NystromformerModel"),c(dR,"href","/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(cR,"href","/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.PegasusModel"),c(fR,"href","/docs/transformers/pr_15859/en/model_doc/perceiver#transformers.PerceiverModel"),c(mR,"href","/docs/transformers/pr_15859/en/model_doc/plbart#transformers.PLBartModel"),c(gR,"href","/docs/transformers/pr_15859/en/model_doc/poolformer#transformers.PoolFormerModel"),c(hR,"href","/docs/transformers/pr_15859/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(pR,"href","/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertModel"),c(_R,"href","/docs/transformers/pr_15859/en/model_doc/reformer#transformers.ReformerModel"),c(uR,"href","/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertModel"),c(bR,"href","/docs/transformers/pr_15859/en/model_doc/retribert#transformers.RetriBertModel"),c(vR,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaModel"),c(TR,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerModel"),c(FR,"href","/docs/transformers/pr_15859/en/model_doc/segformer#transformers.SegformerModel"),c(CR,"href","/docs/transformers/pr_15859/en/model_doc/sew#transformers.SEWModel"),c(MR,"href","/docs/transformers/pr_15859/en/model_doc/sew-d#transformers.SEWDModel"),c(ER,"href","/docs/transformers/pr_15859/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(yR,"href","/docs/transformers/pr_15859/en/model_doc/splinter#transformers.SplinterModel"),c(wR,"href","/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(AR,"href","/docs/transformers/pr_15859/en/model_doc/swin#transformers.SwinModel"),c(LR,"href","/docs/transformers/pr_15859/en/model_doc/t5#transformers.T5Model"),c(BR,"href","/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TapasModel"),c(xR,"href","/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(kR,"href","/docs/transformers/pr_15859/en/model_doc/unispeech#transformers.UniSpeechModel"),c(RR,"href","/docs/transformers/pr_15859/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(SR,"href","/docs/transformers/pr_15859/en/model_doc/vilt#transformers.ViltModel"),c(PR,"href","/docs/transformers/pr_15859/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c($R,"href","/docs/transformers/pr_15859/en/model_doc/visual_bert#transformers.VisualBertModel"),c(IR,"href","/docs/transformers/pr_15859/en/model_doc/vit#transformers.ViTModel"),c(jR,"href","/docs/transformers/pr_15859/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(NR,"href","/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(DR,"href","/docs/transformers/pr_15859/en/model_doc/wavlm#transformers.WavLMModel"),c(qR,"href","/docs/transformers/pr_15859/en/model_doc/xglm#transformers.XGLMModel"),c(GR,"href","/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMModel"),c(OR,"href","/docs/transformers/pr_15859/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(XR,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(zR,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(VR,"href","/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetModel"),c(WR,"href","/docs/transformers/pr_15859/en/model_doc/yoso#transformers.YosoModel"),c(xe,"class","docstring"),c(Vo,"class","docstring"),c(Kp,"id","transformers.AutoModelForPreTraining"),c(Kp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kp,"href","#transformers.AutoModelForPreTraining"),c(Xi,"class","relative group"),c(Dr,"class","docstring"),c(QR,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertForPreTraining"),c(HR,"href","/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(UR,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertForPreTraining"),c(JR,"href","/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(YR,"href","/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(KR,"href","/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ZR,"href","/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(eS,"href","/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(oS,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(rS,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraForPreTraining"),c(tS,"href","/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(aS,"href","/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetForPreTraining"),c(nS,"href","/docs/transformers/pr_15859/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(sS,"href","/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(lS,"href","/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(iS,"href","/docs/transformers/pr_15859/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(dS,"href","/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(cS,"href","/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(fS,"href","/docs/transformers/pr_15859/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(mS,"href","/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(gS,"href","/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(hS,"href","/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(pS,"href","/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(_S,"href","/docs/transformers/pr_15859/en/model_doc/retribert#transformers.RetriBertModel"),c(uS,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(bS,"href","/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(vS,"href","/docs/transformers/pr_15859/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(TS,"href","/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(FS,"href","/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(CS,"href","/docs/transformers/pr_15859/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(MS,"href","/docs/transformers/pr_15859/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(ES,"href","/docs/transformers/pr_15859/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(yS,"href","/docs/transformers/pr_15859/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(wS,"href","/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(AS,"href","/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(LS,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(BS,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(xS,"href","/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(ke,"class","docstring"),c(Wo,"class","docstring"),c(N_,"id","transformers.AutoModelForCausalLM"),c(N_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N_,"href","#transformers.AutoModelForCausalLM"),c(Wi,"class","relative group"),c(qr,"class","docstring"),c(kS,"href","/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartForCausalLM"),c(RS,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertLMHeadModel"),c(SS,"href","/docs/transformers/pr_15859/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(PS,"href","/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c($S,"href","/docs/transformers/pr_15859/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(IS,"href","/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(jS,"href","/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(NS,"href","/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(DS,"href","/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(qS,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraForCausalLM"),c(GS,"href","/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(OS,"href","/docs/transformers/pr_15859/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(XS,"href","/docs/transformers/pr_15859/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(zS,"href","/docs/transformers/pr_15859/en/model_doc/marian#transformers.MarianForCausalLM"),c(VS,"href","/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartForCausalLM"),c(WS,"href","/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(QS,"href","/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(HS,"href","/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(US,"href","/docs/transformers/pr_15859/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(JS,"href","/docs/transformers/pr_15859/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(YS,"href","/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(KS,"href","/docs/transformers/pr_15859/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(ZS,"href","/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(eP,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(oP,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(rP,"href","/docs/transformers/pr_15859/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(tP,"href","/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(aP,"href","/docs/transformers/pr_15859/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(nP,"href","/docs/transformers/pr_15859/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(sP,"href","/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(lP,"href","/docs/transformers/pr_15859/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(iP,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(dP,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(cP,"href","/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Re,"class","docstring"),c(Qo,"class","docstring"),c(Tu,"id","transformers.AutoModelForMaskedLM"),c(Tu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tu,"href","#transformers.AutoModelForMaskedLM"),c(Ui,"class","relative group"),c(Gr,"class","docstring"),c(fP,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(mP,"href","/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gP,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertForMaskedLM"),c(hP,"href","/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(pP,"href","/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(_P,"href","/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(uP,"href","/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(bP,"href","/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(vP,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(TP,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(FP,"href","/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(CP,"href","/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(MP,"href","/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(EP,"href","/docs/transformers/pr_15859/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(yP,"href","/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(wP,"href","/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(AP,"href","/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(LP,"href","/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(BP,"href","/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(xP,"href","/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(kP,"href","/docs/transformers/pr_15859/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(RP,"href","/docs/transformers/pr_15859/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(SP,"href","/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(PP,"href","/docs/transformers/pr_15859/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c($P,"href","/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(IP,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(jP,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(NP,"href","/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(DP,"href","/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(qP,"href","/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(GP,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(OP,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(XP,"href","/docs/transformers/pr_15859/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Se,"class","docstring"),c(Ho,"class","docstring"),c(r5,"id","transformers.AutoModelForSeq2SeqLM"),c(r5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r5,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ki,"class","relative group"),c(Or,"class","docstring"),c(zP,"href","/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(VP,"href","/docs/transformers/pr_15859/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(WP,"href","/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(QP,"href","/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(HP,"href","/docs/transformers/pr_15859/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(UP,"href","/docs/transformers/pr_15859/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(JP,"href","/docs/transformers/pr_15859/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(YP,"href","/docs/transformers/pr_15859/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(KP,"href","/docs/transformers/pr_15859/en/model_doc/marian#transformers.MarianMTModel"),c(ZP,"href","/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(e$,"href","/docs/transformers/pr_15859/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(o$,"href","/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(r$,"href","/docs/transformers/pr_15859/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(t$,"href","/docs/transformers/pr_15859/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(a$,"href","/docs/transformers/pr_15859/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(n$,"href","/docs/transformers/pr_15859/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Pe,"class","docstring"),c(Uo,"class","docstring"),c(T5,"id","transformers.AutoModelForSequenceClassification"),c(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T5,"href","#transformers.AutoModelForSequenceClassification"),c(od,"class","relative group"),c(Xr,"class","docstring"),c(s$,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(l$,"href","/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartForSequenceClassification"),c(i$,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertForSequenceClassification"),c(d$,"href","/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(c$,"href","/docs/transformers/pr_15859/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(f$,"href","/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(m$,"href","/docs/transformers/pr_15859/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(g$,"href","/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(h$,"href","/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(p$,"href","/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(_$,"href","/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(u$,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(b$,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(v$,"href","/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(T$,"href","/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(F$,"href","/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(C$,"href","/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(M$,"href","/docs/transformers/pr_15859/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(E$,"href","/docs/transformers/pr_15859/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(y$,"href","/docs/transformers/pr_15859/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(w$,"href","/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(A$,"href","/docs/transformers/pr_15859/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(L$,"href","/docs/transformers/pr_15859/en/model_doc/led#transformers.LEDForSequenceClassification"),c(B$,"href","/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(x$,"href","/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(k$,"href","/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(R$,"href","/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(S$,"href","/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(P$,"href","/docs/transformers/pr_15859/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c($$,"href","/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(I$,"href","/docs/transformers/pr_15859/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(j$,"href","/docs/transformers/pr_15859/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(N$,"href","/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(D$,"href","/docs/transformers/pr_15859/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(q$,"href","/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(G$,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(O$,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(X$,"href","/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(z$,"href","/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(V$,"href","/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(W$,"href","/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(Q$,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(H$,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(U$,"href","/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(J$,"href","/docs/transformers/pr_15859/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c($e,"class","docstring"),c(Jo,"class","docstring"),c(g1,"id","transformers.AutoModelForMultipleChoice"),c(g1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g1,"href","#transformers.AutoModelForMultipleChoice"),c(ad,"class","relative group"),c(zr,"class","docstring"),c(Y$,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(K$,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertForMultipleChoice"),c(Z$,"href","/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(eI,"href","/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(oI,"href","/docs/transformers/pr_15859/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(rI,"href","/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(tI,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(aI,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(nI,"href","/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(sI,"href","/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(lI,"href","/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(iI,"href","/docs/transformers/pr_15859/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(dI,"href","/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(cI,"href","/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(fI,"href","/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(mI,"href","/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(gI,"href","/docs/transformers/pr_15859/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(hI,"href","/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(pI,"href","/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(_I,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(uI,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(bI,"href","/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(vI,"href","/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(TI,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(FI,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(CI,"href","/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(MI,"href","/docs/transformers/pr_15859/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ie,"class","docstring"),c(Yo,"class","docstring"),c(O1,"id","transformers.AutoModelForNextSentencePrediction"),c(O1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O1,"href","#transformers.AutoModelForNextSentencePrediction"),c(ld,"class","relative group"),c(Vr,"class","docstring"),c(EI,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(yI,"href","/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(wI,"href","/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(AI,"href","/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(LI,"href","/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(je,"class","docstring"),c(Ko,"class","docstring"),c(U1,"id","transformers.AutoModelForTokenClassification"),c(U1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U1,"href","#transformers.AutoModelForTokenClassification"),c(cd,"class","relative group"),c(Wr,"class","docstring"),c(BI,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(xI,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertForTokenClassification"),c(kI,"href","/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(RI,"href","/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(SI,"href","/docs/transformers/pr_15859/en/model_doc/canine#transformers.CanineForTokenClassification"),c(PI,"href","/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c($I,"href","/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(II,"href","/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(jI,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(NI,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(DI,"href","/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(qI,"href","/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(GI,"href","/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(OI,"href","/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(XI,"href","/docs/transformers/pr_15859/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(zI,"href","/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(VI,"href","/docs/transformers/pr_15859/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(WI,"href","/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(QI,"href","/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(HI,"href","/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(UI,"href","/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(JI,"href","/docs/transformers/pr_15859/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(YI,"href","/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(KI,"href","/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(ZI,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(ej,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(oj,"href","/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(rj,"href","/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(tj,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(aj,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(nj,"href","/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(sj,"href","/docs/transformers/pr_15859/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(Ne,"class","docstring"),c(Zo,"class","docstring"),c(Bb,"id","transformers.AutoModelForQuestionAnswering"),c(Bb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bb,"href","#transformers.AutoModelForQuestionAnswering"),c(gd,"class","relative group"),c(Qr,"class","docstring"),c(lj,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(ij,"href","/docs/transformers/pr_15859/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(dj,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(cj,"href","/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(fj,"href","/docs/transformers/pr_15859/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(mj,"href","/docs/transformers/pr_15859/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(gj,"href","/docs/transformers/pr_15859/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(hj,"href","/docs/transformers/pr_15859/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(pj,"href","/docs/transformers/pr_15859/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(_j,"href","/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(uj,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(bj,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(vj,"href","/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(Tj,"href","/docs/transformers/pr_15859/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(Fj,"href","/docs/transformers/pr_15859/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(Cj,"href","/docs/transformers/pr_15859/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(Mj,"href","/docs/transformers/pr_15859/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(Ej,"href","/docs/transformers/pr_15859/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(yj,"href","/docs/transformers/pr_15859/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(wj,"href","/docs/transformers/pr_15859/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(Aj,"href","/docs/transformers/pr_15859/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(Lj,"href","/docs/transformers/pr_15859/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(Bj,"href","/docs/transformers/pr_15859/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(xj,"href","/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(kj,"href","/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(Rj,"href","/docs/transformers/pr_15859/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(Sj,"href","/docs/transformers/pr_15859/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(Pj,"href","/docs/transformers/pr_15859/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c($j,"href","/docs/transformers/pr_15859/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(Ij,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(jj,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(Nj,"href","/docs/transformers/pr_15859/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(Dj,"href","/docs/transformers/pr_15859/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(qj,"href","/docs/transformers/pr_15859/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(Gj,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(Oj,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(Xj,"href","/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(zj,"href","/docs/transformers/pr_15859/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(De,"class","docstring"),c(er,"class","docstring"),c(p2,"id","transformers.AutoModelForTableQuestionAnswering"),c(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p2,"href","#transformers.AutoModelForTableQuestionAnswering"),c(_d,"class","relative group"),c(Hr,"class","docstring"),c(Vj,"href","/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(qe,"class","docstring"),c(or,"class","docstring"),c(b2,"id","transformers.AutoModelForImageClassification"),c(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b2,"href","#transformers.AutoModelForImageClassification"),c(vd,"class","relative group"),c(Ur,"class","docstring"),c(Wj,"href","/docs/transformers/pr_15859/en/model_doc/beit#transformers.BeitForImageClassification"),c(Qj,"href","/docs/transformers/pr_15859/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(Hj,"href","/docs/transformers/pr_15859/en/model_doc/deit#transformers.DeiTForImageClassification"),c(Uj,"href","/docs/transformers/pr_15859/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(Jj,"href","/docs/transformers/pr_15859/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(Yj,"href","/docs/transformers/pr_15859/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(Kj,"href","/docs/transformers/pr_15859/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(Zj,"href","/docs/transformers/pr_15859/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(eN,"href","/docs/transformers/pr_15859/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(oN,"href","/docs/transformers/pr_15859/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(rN,"href","/docs/transformers/pr_15859/en/model_doc/swin#transformers.SwinForImageClassification"),c(tN,"href","/docs/transformers/pr_15859/en/model_doc/vit#transformers.ViTForImageClassification"),c(Ge,"class","docstring"),c(rr,"class","docstring"),c(A2,"id","transformers.AutoModelForVision2Seq"),c(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A2,"href","#transformers.AutoModelForVision2Seq"),c(Cd,"class","relative group"),c(Jr,"class","docstring"),c(aN,"href","/docs/transformers/pr_15859/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(Oe,"class","docstring"),c(tr,"class","docstring"),c(x2,"id","transformers.AutoModelForAudioClassification"),c(x2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x2,"href","#transformers.AutoModelForAudioClassification"),c(yd,"class","relative group"),c(Yr,"class","docstring"),c(nN,"href","/docs/transformers/pr_15859/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(sN,"href","/docs/transformers/pr_15859/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(lN,"href","/docs/transformers/pr_15859/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(iN,"href","/docs/transformers/pr_15859/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(dN,"href","/docs/transformers/pr_15859/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(cN,"href","/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(fN,"href","/docs/transformers/pr_15859/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(Xe,"class","docstring"),c(ar,"class","docstring"),c(D2,"id","transformers.AutoModelForAudioFrameClassification"),c(D2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D2,"href","#transformers.AutoModelForAudioFrameClassification"),c(Ld,"class","relative group"),c(Kr,"class","docstring"),c(mN,"href","/docs/transformers/pr_15859/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(gN,"href","/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(hN,"href","/docs/transformers/pr_15859/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(ze,"class","docstring"),c(nr,"class","docstring"),c(z2,"id","transformers.AutoModelForCTC"),c(z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z2,"href","#transformers.AutoModelForCTC"),c(Rd,"class","relative group"),c(Zr,"class","docstring"),c(pN,"href","/docs/transformers/pr_15859/en/model_doc/hubert#transformers.HubertForCTC"),c(_N,"href","/docs/transformers/pr_15859/en/model_doc/sew#transformers.SEWForCTC"),c(uN,"href","/docs/transformers/pr_15859/en/model_doc/sew-d#transformers.SEWDForCTC"),c(bN,"href","/docs/transformers/pr_15859/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(vN,"href","/docs/transformers/pr_15859/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(TN,"href","/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(FN,"href","/docs/transformers/pr_15859/en/model_doc/wavlm#transformers.WavLMForCTC"),c(Ve,"class","docstring"),c(sr,"class","docstring"),c(Z2,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z2,"href","#transformers.AutoModelForSpeechSeq2Seq"),c($d,"class","relative group"),c(et,"class","docstring"),c(CN,"href","/docs/transformers/pr_15859/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(MN,"href","/docs/transformers/pr_15859/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(We,"class","docstring"),c(lr,"class","docstring"),c(tv,"id","transformers.AutoModelForAudioXVector"),c(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tv,"href","#transformers.AutoModelForAudioXVector"),c(Nd,"class","relative group"),c(ot,"class","docstring"),c(EN,"href","/docs/transformers/pr_15859/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(yN,"href","/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(wN,"href","/docs/transformers/pr_15859/en/model_doc/wavlm#transformers.WavLMForXVector"),c(Qe,"class","docstring"),c(ir,"class","docstring"),c(iv,"id","transformers.AutoModelForMaskedImageModeling"),c(iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iv,"href","#transformers.AutoModelForMaskedImageModeling"),c(Od,"class","relative group"),c(rt,"class","docstring"),c(AN,"href","/docs/transformers/pr_15859/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(LN,"href","/docs/transformers/pr_15859/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(BN,"href","/docs/transformers/pr_15859/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(He,"class","docstring"),c(dr,"class","docstring"),c(gv,"id","transformers.AutoModelForObjectDetection"),c(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gv,"href","#transformers.AutoModelForObjectDetection"),c(Wd,"class","relative group"),c(tt,"class","docstring"),c(xN,"href","/docs/transformers/pr_15859/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Ue,"class","docstring"),c(cr,"class","docstring"),c(_v,"id","transformers.AutoModelForImageSegmentation"),c(_v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_v,"href","#transformers.AutoModelForImageSegmentation"),c(Ud,"class","relative group"),c(at,"class","docstring"),c(kN,"href","/docs/transformers/pr_15859/en/model_doc/detr#transformers.DetrForSegmentation"),c(Je,"class","docstring"),c(fr,"class","docstring"),c(vv,"id","transformers.AutoModelForSemanticSegmentation"),c(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vv,"href","#transformers.AutoModelForSemanticSegmentation"),c(Kd,"class","relative group"),c(nt,"class","docstring"),c(RN,"href","/docs/transformers/pr_15859/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(SN,"href","/docs/transformers/pr_15859/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Ye,"class","docstring"),c(mr,"class","docstring"),c(Mv,"id","transformers.TFAutoModel"),c(Mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mv,"href","#transformers.TFAutoModel"),c(oc,"class","relative group"),c(st,"class","docstring"),c(PN,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.TFAlbertModel"),c($N,"href","/docs/transformers/pr_15859/en/model_doc/bart#transformers.TFBartModel"),c(IN,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.TFBertModel"),c(jN,"href","/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(NN,"href","/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(DN,"href","/docs/transformers/pr_15859/en/model_doc/camembert#transformers.TFCamembertModel"),c(qN,"href","/docs/transformers/pr_15859/en/model_doc/clip#transformers.TFCLIPModel"),c(GN,"href","/docs/transformers/pr_15859/en/model_doc/convbert#transformers.TFConvBertModel"),c(ON,"href","/docs/transformers/pr_15859/en/model_doc/convnext#transformers.TFConvNextModel"),c(XN,"href","/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.TFCTRLModel"),c(zN,"href","/docs/transformers/pr_15859/en/model_doc/deberta#transformers.TFDebertaModel"),c(VN,"href","/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(WN,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(QN,"href","/docs/transformers/pr_15859/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(HN,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.TFElectraModel"),c(UN,"href","/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(JN,"href","/docs/transformers/pr_15859/en/model_doc/funnel#transformers.TFFunnelModel"),c(YN,"href","/docs/transformers/pr_15859/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(KN,"href","/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.TFGPT2Model"),c(ZN,"href","/docs/transformers/pr_15859/en/model_doc/hubert#transformers.TFHubertModel"),c(eD,"href","/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(oD,"href","/docs/transformers/pr_15859/en/model_doc/led#transformers.TFLEDModel"),c(rD,"href","/docs/transformers/pr_15859/en/model_doc/longformer#transformers.TFLongformerModel"),c(tD,"href","/docs/transformers/pr_15859/en/model_doc/lxmert#transformers.TFLxmertModel"),c(aD,"href","/docs/transformers/pr_15859/en/model_doc/marian#transformers.TFMarianModel"),c(nD,"href","/docs/transformers/pr_15859/en/model_doc/mbart#transformers.TFMBartModel"),c(sD,"href","/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(lD,"href","/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.TFMPNetModel"),c(iD,"href","/docs/transformers/pr_15859/en/model_doc/mt5#transformers.TFMT5Model"),c(dD,"href","/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(cD,"href","/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.TFPegasusModel"),c(fD,"href","/docs/transformers/pr_15859/en/model_doc/rembert#transformers.TFRemBertModel"),c(mD,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.TFRobertaModel"),c(gD,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.TFRoFormerModel"),c(hD,"href","/docs/transformers/pr_15859/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(pD,"href","/docs/transformers/pr_15859/en/model_doc/t5#transformers.TFT5Model"),c(_D,"href","/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TFTapasModel"),c(uD,"href","/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(bD,"href","/docs/transformers/pr_15859/en/model_doc/vit#transformers.TFViTModel"),c(vD,"href","/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(TD,"href","/docs/transformers/pr_15859/en/model_doc/xlm#transformers.TFXLMModel"),c(FD,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(CD,"href","/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.TFXLNetModel"),c(go,"class","docstring"),c(gr,"class","docstring"),c(fT,"id","transformers.TFAutoModelForPreTraining"),c(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fT,"href","#transformers.TFAutoModelForPreTraining"),c(ac,"class","relative group"),c(lt,"class","docstring"),c(MD,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(ED,"href","/docs/transformers/pr_15859/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(yD,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.TFBertForPreTraining"),c(wD,"href","/docs/transformers/pr_15859/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(AD,"href","/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(LD,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(BD,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(xD,"href","/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(kD,"href","/docs/transformers/pr_15859/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(RD,"href","/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(SD,"href","/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(PD,"href","/docs/transformers/pr_15859/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c($D,"href","/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(ID,"href","/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(jD,"href","/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(ND,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(DD,"href","/docs/transformers/pr_15859/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(qD,"href","/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(GD,"href","/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(OD,"href","/docs/transformers/pr_15859/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(XD,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(zD,"href","/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(ho,"class","docstring"),c(hr,"class","docstring"),c(PT,"id","transformers.TFAutoModelForCausalLM"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.TFAutoModelForCausalLM"),c(lc,"class","relative group"),c(it,"class","docstring"),c(VD,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(WD,"href","/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(QD,"href","/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(HD,"href","/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(UD,"href","/docs/transformers/pr_15859/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(JD,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(YD,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(KD,"href","/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(ZD,"href","/docs/transformers/pr_15859/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(eq,"href","/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(po,"class","docstring"),c(pr,"class","docstring"),c(VT,"id","transformers.TFAutoModelForImageClassification"),c(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VT,"href","#transformers.TFAutoModelForImageClassification"),c(cc,"class","relative group"),c(dt,"class","docstring"),c(oq,"href","/docs/transformers/pr_15859/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(rq,"href","/docs/transformers/pr_15859/en/model_doc/vit#transformers.TFViTForImageClassification"),c(_o,"class","docstring"),c(_r,"class","docstring"),c(HT,"id","transformers.TFAutoModelForMaskedLM"),c(HT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HT,"href","#transformers.TFAutoModelForMaskedLM"),c(gc,"class","relative group"),c(ct,"class","docstring"),c(tq,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(aq,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(nq,"href","/docs/transformers/pr_15859/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(sq,"href","/docs/transformers/pr_15859/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(lq,"href","/docs/transformers/pr_15859/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(iq,"href","/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(dq,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(cq,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(fq,"href","/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(mq,"href","/docs/transformers/pr_15859/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(gq,"href","/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(hq,"href","/docs/transformers/pr_15859/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(pq,"href","/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(_q,"href","/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(uq,"href","/docs/transformers/pr_15859/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(bq,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(vq,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(Tq,"href","/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Fq,"href","/docs/transformers/pr_15859/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Cq,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(uo,"class","docstring"),c(ur,"class","docstring"),c(p8,"id","transformers.TFAutoModelForSeq2SeqLM"),c(p8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p8,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(_c,"class","relative group"),c(ft,"class","docstring"),c(Mq,"href","/docs/transformers/pr_15859/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Eq,"href","/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(yq,"href","/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(wq,"href","/docs/transformers/pr_15859/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(Aq,"href","/docs/transformers/pr_15859/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(Lq,"href","/docs/transformers/pr_15859/en/model_doc/marian#transformers.TFMarianMTModel"),c(Bq,"href","/docs/transformers/pr_15859/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(xq,"href","/docs/transformers/pr_15859/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(kq,"href","/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(Rq,"href","/docs/transformers/pr_15859/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(bo,"class","docstring"),c(br,"class","docstring"),c(w8,"id","transformers.TFAutoModelForSequenceClassification"),c(w8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w8,"href","#transformers.TFAutoModelForSequenceClassification"),c(vc,"class","relative group"),c(mt,"class","docstring"),c(Sq,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(Pq,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c($q,"href","/docs/transformers/pr_15859/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(Iq,"href","/docs/transformers/pr_15859/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(jq,"href","/docs/transformers/pr_15859/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(Nq,"href","/docs/transformers/pr_15859/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(Dq,"href","/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(qq,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(Gq,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(Oq,"href","/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(Xq,"href","/docs/transformers/pr_15859/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(zq,"href","/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(Vq,"href","/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(Wq,"href","/docs/transformers/pr_15859/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(Qq,"href","/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(Hq,"href","/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Uq,"href","/docs/transformers/pr_15859/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Jq,"href","/docs/transformers/pr_15859/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(Yq,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Kq,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Zq,"href","/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(eG,"href","/docs/transformers/pr_15859/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(oG,"href","/docs/transformers/pr_15859/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(rG,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(tG,"href","/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(vo,"class","docstring"),c(vr,"class","docstring"),c(K8,"id","transformers.TFAutoModelForMultipleChoice"),c(K8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K8,"href","#transformers.TFAutoModelForMultipleChoice"),c(Cc,"class","relative group"),c(gt,"class","docstring"),c(aG,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(nG,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(sG,"href","/docs/transformers/pr_15859/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(lG,"href","/docs/transformers/pr_15859/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(iG,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(dG,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(cG,"href","/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(fG,"href","/docs/transformers/pr_15859/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(mG,"href","/docs/transformers/pr_15859/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(gG,"href","/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(hG,"href","/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(pG,"href","/docs/transformers/pr_15859/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(_G,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(uG,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(bG,"href","/docs/transformers/pr_15859/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(vG,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(TG,"href","/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(To,"class","docstring"),c(Tr,"class","docstring"),c(_F,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_F,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(yc,"class","relative group"),c(ht,"class","docstring"),c(FG,"href","/docs/transformers/pr_15859/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Fo,"class","docstring"),c(Fr,"class","docstring"),c(bF,"id","transformers.TFAutoModelForTokenClassification"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.TFAutoModelForTokenClassification"),c(Lc,"class","relative group"),c(pt,"class","docstring"),c(CG,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(MG,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(EG,"href","/docs/transformers/pr_15859/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(yG,"href","/docs/transformers/pr_15859/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(wG,"href","/docs/transformers/pr_15859/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(AG,"href","/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(LG,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(BG,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(xG,"href","/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(kG,"href","/docs/transformers/pr_15859/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(RG,"href","/docs/transformers/pr_15859/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(SG,"href","/docs/transformers/pr_15859/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(PG,"href","/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c($G,"href","/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(IG,"href","/docs/transformers/pr_15859/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(jG,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(NG,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(DG,"href","/docs/transformers/pr_15859/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(qG,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(GG,"href","/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Co,"class","docstring"),c(Cr,"class","docstring"),c(DF,"id","transformers.TFAutoModelForQuestionAnswering"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.TFAutoModelForQuestionAnswering"),c(kc,"class","relative group"),c(_t,"class","docstring"),c(OG,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(XG,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(zG,"href","/docs/transformers/pr_15859/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(VG,"href","/docs/transformers/pr_15859/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(WG,"href","/docs/transformers/pr_15859/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(QG,"href","/docs/transformers/pr_15859/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(HG,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(UG,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(JG,"href","/docs/transformers/pr_15859/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(YG,"href","/docs/transformers/pr_15859/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(KG,"href","/docs/transformers/pr_15859/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(ZG,"href","/docs/transformers/pr_15859/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(eO,"href","/docs/transformers/pr_15859/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(oO,"href","/docs/transformers/pr_15859/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(rO,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(tO,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(aO,"href","/docs/transformers/pr_15859/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(nO,"href","/docs/transformers/pr_15859/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_15859/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Mo,"class","docstring"),c(Mr,"class","docstring"),c(n9,"id","transformers.TFAutoModelForVision2Seq"),c(n9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n9,"href","#transformers.TFAutoModelForVision2Seq"),c(Pc,"class","relative group"),c(ut,"class","docstring"),c(lO,"href","/docs/transformers/pr_15859/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Eo,"class","docstring"),c(Er,"class","docstring"),c(l9,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(l9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l9,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(jc,"class","relative group"),c(bt,"class","docstring"),c(iO,"href","/docs/transformers/pr_15859/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(yo,"class","docstring"),c(yr,"class","docstring"),c(d9,"id","transformers.FlaxAutoModel"),c(d9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d9,"href","#transformers.FlaxAutoModel"),c(qc,"class","relative group"),c(vt,"class","docstring"),c(dO,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.FlaxAlbertModel"),c(cO,"href","/docs/transformers/pr_15859/en/model_doc/bart#transformers.FlaxBartModel"),c(fO,"href","/docs/transformers/pr_15859/en/model_doc/beit#transformers.FlaxBeitModel"),c(mO,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.FlaxBertModel"),c(gO,"href","/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(hO,"href","/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(pO,"href","/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(_O,"href","/docs/transformers/pr_15859/en/model_doc/clip#transformers.FlaxCLIPModel"),c(uO,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(bO,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.FlaxElectraModel"),c(vO,"href","/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(TO,"href","/docs/transformers/pr_15859/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(FO,"href","/docs/transformers/pr_15859/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(CO,"href","/docs/transformers/pr_15859/en/model_doc/marian#transformers.FlaxMarianModel"),c(MO,"href","/docs/transformers/pr_15859/en/model_doc/mbart#transformers.FlaxMBartModel"),c(EO,"href","/docs/transformers/pr_15859/en/model_doc/mt5#transformers.FlaxMT5Model"),c(yO,"href","/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(wO,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(AO,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(LO,"href","/docs/transformers/pr_15859/en/model_doc/t5#transformers.FlaxT5Model"),c(BO,"href","/docs/transformers/pr_15859/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(xO,"href","/docs/transformers/pr_15859/en/model_doc/vit#transformers.FlaxViTModel"),c(kO,"href","/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(RO,"href","/docs/transformers/pr_15859/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(wo,"class","docstring"),c(wr,"class","docstring"),c(P9,"id","transformers.FlaxAutoModelForCausalLM"),c(P9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P9,"href","#transformers.FlaxAutoModelForCausalLM"),c(Xc,"class","relative group"),c(Tt,"class","docstring"),c(SO,"href","/docs/transformers/pr_15859/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(PO,"href","/docs/transformers/pr_15859/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c($O,"href","/docs/transformers/pr_15859/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(IO,"href","/docs/transformers/pr_15859/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Ao,"class","docstring"),c(Ar,"class","docstring"),c(D9,"id","transformers.FlaxAutoModelForPreTraining"),c(D9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D9,"href","#transformers.FlaxAutoModelForPreTraining"),c(Wc,"class","relative group"),c(Ft,"class","docstring"),c(jO,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(NO,"href","/docs/transformers/pr_15859/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(DO,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(qO,"href","/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(GO,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(OO,"href","/docs/transformers/pr_15859/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(XO,"href","/docs/transformers/pr_15859/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(zO,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(VO,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(WO,"href","/docs/transformers/pr_15859/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(QO,"href","/docs/transformers/pr_15859/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Lo,"class","docstring"),c(Lr,"class","docstring"),c(Y9,"id","transformers.FlaxAutoModelForMaskedLM"),c(Y9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y9,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Uc,"class","relative group"),c(Ct,"class","docstring"),c(HO,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(UO,"href","/docs/transformers/pr_15859/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(JO,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(YO,"href","/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(KO,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(ZO,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(eX,"href","/docs/transformers/pr_15859/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(oX,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(rX,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Bo,"class","docstring"),c(Br,"class","docstring"),c(lC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Kc,"class","relative group"),c(Mt,"class","docstring"),c(tX,"href","/docs/transformers/pr_15859/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(aX,"href","/docs/transformers/pr_15859/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(nX,"href","/docs/transformers/pr_15859/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(sX,"href","/docs/transformers/pr_15859/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(lX,"href","/docs/transformers/pr_15859/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(iX,"href","/docs/transformers/pr_15859/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(dX,"href","/docs/transformers/pr_15859/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(cX,"href","/docs/transformers/pr_15859/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(fX,"href","/docs/transformers/pr_15859/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(xo,"class","docstring"),c(xr,"class","docstring"),c(uC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(of,"class","relative group"),c(Et,"class","docstring"),c(mX,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(gX,"href","/docs/transformers/pr_15859/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(hX,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(pX,"href","/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(_X,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(uX,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(bX,"href","/docs/transformers/pr_15859/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(vX,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(TX,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(ko,"class","docstring"),c(kr,"class","docstring"),c(AC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(af,"class","relative group"),c(yt,"class","docstring"),c(FX,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_15859/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(yX,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_15859/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(LX,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(BX,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Ro,"class","docstring"),c(Rr,"class","docstring"),c(jC,"id","transformers.FlaxAutoModelForTokenClassification"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(lf,"class","relative group"),c(wt,"class","docstring"),c(xX,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(kX,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(RX,"href","/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(SX,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(PX,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c($X,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(IX,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(So,"class","docstring"),c(Sr,"class","docstring"),c(VC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ff,"class","relative group"),c(At,"class","docstring"),c(jX,"href","/docs/transformers/pr_15859/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(NX,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(DX,"href","/docs/transformers/pr_15859/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(qX,"href","/docs/transformers/pr_15859/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(GX,"href","/docs/transformers/pr_15859/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(OX,"href","/docs/transformers/pr_15859/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(XX,"href","/docs/transformers/pr_15859/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Po,"class","docstring"),c(Pr,"class","docstring"),c(ZC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(hf,"class","relative group"),c(Lt,"class","docstring"),c(zX,"href","/docs/transformers/pr_15859/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c($o,"class","docstring"),c($r,"class","docstring"),c(o4,"id","transformers.FlaxAutoModelForImageClassification"),c(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o4,"href","#transformers.FlaxAutoModelForImageClassification"),c(uf,"class","relative group"),c(Bt,"class","docstring"),c(VX,"href","/docs/transformers/pr_15859/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(WX,"href","/docs/transformers/pr_15859/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Io,"class","docstring"),c(Ir,"class","docstring"),c(a4,"id","transformers.FlaxAutoModelForVision2Seq"),c(a4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a4,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Tf,"class","relative group"),c(xt,"class","docstring"),c(QX,"href","/docs/transformers/pr_15859/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(jo,"class","docstring"),c(jr,"class","docstring")},m(d,u){e(document.head,J),b(d,Ae,u),b(d,ie,u),e(ie,me),e(me,to),g(ce,to,null),e(ie,ue),e(ie,Do),e(Do,wi),b(d,Ef,u),b(d,sa,u),e(sa,Ai),e(sa,Li),e(Li,tM),e(sa,yf),b(d,ye,u),b(d,io,u),e(io,Bi),e(io,Pn),e(Pn,aM),e(io,$n),e(io,In),e(In,nM),e(io,xi),e(io,jn),e(jn,sM),e(io,ki),b(d,wf,u),g($a,d,u),b(d,co,u),b(d,ge,u),e(ge,O0),e(ge,Ri),e(Ri,X0),e(ge,z0),b(d,qo,u),b(d,Ia,u),e(Ia,V0),e(Ia,Af),e(Af,W0),e(Ia,Fke),b(d,fLe,u),b(d,Si,u),e(Si,Lf),e(Lf,qV),g(lM,qV,null),e(Si,Cke),e(Si,GV),e(GV,Mke),b(d,mLe,u),b(d,Nn,u),e(Nn,Eke),e(Nn,OV),e(OV,yke),e(Nn,wke),e(Nn,XV),e(XV,Ake),e(Nn,Lke),b(d,gLe,u),g(iM,d,u),b(d,hLe,u),b(d,Q0,u),e(Q0,Bke),b(d,pLe,u),g(Bf,d,u),b(d,_Le,u),b(d,Pi,u),e(Pi,xf),e(xf,zV),g(dM,zV,null),e(Pi,xke),e(Pi,VV),e(VV,kke),b(d,uLe,u),b(d,Go,u),g(cM,Go,null),e(Go,Rke),e(Go,fM),e(fM,Ske),e(fM,H0),e(H0,Pke),e(fM,$ke),e(Go,Ike),e(Go,mM),e(mM,jke),e(mM,WV),e(WV,Nke),e(mM,Dke),e(Go,qke),e(Go,fo),g(gM,fo,null),e(fo,Gke),e(fo,QV),e(QV,Oke),e(fo,Xke),e(fo,$i),e($i,zke),e($i,HV),e(HV,Vke),e($i,Wke),e($i,UV),e(UV,Qke),e($i,Hke),e(fo,Uke),e(fo,v),e(v,kf),e(kf,JV),e(JV,Jke),e(kf,Yke),e(kf,U0),e(U0,Kke),e(kf,Zke),e(v,eRe),e(v,Rf),e(Rf,YV),e(YV,oRe),e(Rf,rRe),e(Rf,J0),e(J0,tRe),e(Rf,aRe),e(v,nRe),e(v,Sf),e(Sf,KV),e(KV,sRe),e(Sf,lRe),e(Sf,Y0),e(Y0,iRe),e(Sf,dRe),e(v,cRe),e(v,Pf),e(Pf,ZV),e(ZV,fRe),e(Pf,mRe),e(Pf,K0),e(K0,gRe),e(Pf,hRe),e(v,pRe),e(v,$f),e($f,eW),e(eW,_Re),e($f,uRe),e($f,Z0),e(Z0,bRe),e($f,vRe),e(v,TRe),e(v,If),e(If,oW),e(oW,FRe),e(If,CRe),e(If,eL),e(eL,MRe),e(If,ERe),e(v,yRe),e(v,jf),e(jf,rW),e(rW,wRe),e(jf,ARe),e(jf,oL),e(oL,LRe),e(jf,BRe),e(v,xRe),e(v,Nf),e(Nf,tW),e(tW,kRe),e(Nf,RRe),e(Nf,rL),e(rL,SRe),e(Nf,PRe),e(v,$Re),e(v,Df),e(Df,aW),e(aW,IRe),e(Df,jRe),e(Df,tL),e(tL,NRe),e(Df,DRe),e(v,qRe),e(v,qf),e(qf,nW),e(nW,GRe),e(qf,ORe),e(qf,aL),e(aL,XRe),e(qf,zRe),e(v,VRe),e(v,Gf),e(Gf,sW),e(sW,WRe),e(Gf,QRe),e(Gf,nL),e(nL,HRe),e(Gf,URe),e(v,JRe),e(v,Of),e(Of,lW),e(lW,YRe),e(Of,KRe),e(Of,sL),e(sL,ZRe),e(Of,eSe),e(v,oSe),e(v,Xf),e(Xf,iW),e(iW,rSe),e(Xf,tSe),e(Xf,lL),e(lL,aSe),e(Xf,nSe),e(v,sSe),e(v,zf),e(zf,dW),e(dW,lSe),e(zf,iSe),e(zf,iL),e(iL,dSe),e(zf,cSe),e(v,fSe),e(v,Vf),e(Vf,cW),e(cW,mSe),e(Vf,gSe),e(Vf,dL),e(dL,hSe),e(Vf,pSe),e(v,_Se),e(v,Wf),e(Wf,fW),e(fW,uSe),e(Wf,bSe),e(Wf,cL),e(cL,vSe),e(Wf,TSe),e(v,FSe),e(v,Qf),e(Qf,mW),e(mW,CSe),e(Qf,MSe),e(Qf,fL),e(fL,ESe),e(Qf,ySe),e(v,wSe),e(v,Hf),e(Hf,gW),e(gW,ASe),e(Hf,LSe),e(Hf,mL),e(mL,BSe),e(Hf,xSe),e(v,kSe),e(v,Uf),e(Uf,hW),e(hW,RSe),e(Uf,SSe),e(Uf,gL),e(gL,PSe),e(Uf,$Se),e(v,ISe),e(v,Jf),e(Jf,pW),e(pW,jSe),e(Jf,NSe),e(Jf,hL),e(hL,DSe),e(Jf,qSe),e(v,GSe),e(v,Yf),e(Yf,_W),e(_W,OSe),e(Yf,XSe),e(Yf,pL),e(pL,zSe),e(Yf,VSe),e(v,WSe),e(v,Kf),e(Kf,uW),e(uW,QSe),e(Kf,HSe),e(Kf,_L),e(_L,USe),e(Kf,JSe),e(v,YSe),e(v,Zf),e(Zf,bW),e(bW,KSe),e(Zf,ZSe),e(Zf,uL),e(uL,ePe),e(Zf,oPe),e(v,rPe),e(v,em),e(em,vW),e(vW,tPe),e(em,aPe),e(em,bL),e(bL,nPe),e(em,sPe),e(v,lPe),e(v,om),e(om,TW),e(TW,iPe),e(om,dPe),e(om,vL),e(vL,cPe),e(om,fPe),e(v,mPe),e(v,rm),e(rm,FW),e(FW,gPe),e(rm,hPe),e(rm,TL),e(TL,pPe),e(rm,_Pe),e(v,uPe),e(v,tm),e(tm,CW),e(CW,bPe),e(tm,vPe),e(tm,FL),e(FL,TPe),e(tm,FPe),e(v,CPe),e(v,am),e(am,MW),e(MW,MPe),e(am,EPe),e(am,CL),e(CL,yPe),e(am,wPe),e(v,APe),e(v,nm),e(nm,EW),e(EW,LPe),e(nm,BPe),e(nm,ML),e(ML,xPe),e(nm,kPe),e(v,RPe),e(v,sm),e(sm,yW),e(yW,SPe),e(sm,PPe),e(sm,EL),e(EL,$Pe),e(sm,IPe),e(v,jPe),e(v,lm),e(lm,wW),e(wW,NPe),e(lm,DPe),e(lm,yL),e(yL,qPe),e(lm,GPe),e(v,OPe),e(v,im),e(im,AW),e(AW,XPe),e(im,zPe),e(im,wL),e(wL,VPe),e(im,WPe),e(v,QPe),e(v,dm),e(dm,LW),e(LW,HPe),e(dm,UPe),e(dm,AL),e(AL,JPe),e(dm,YPe),e(v,KPe),e(v,cm),e(cm,BW),e(BW,ZPe),e(cm,e$e),e(cm,LL),e(LL,o$e),e(cm,r$e),e(v,t$e),e(v,fm),e(fm,xW),e(xW,a$e),e(fm,n$e),e(fm,BL),e(BL,s$e),e(fm,l$e),e(v,i$e),e(v,mm),e(mm,kW),e(kW,d$e),e(mm,c$e),e(mm,xL),e(xL,f$e),e(mm,m$e),e(v,g$e),e(v,gm),e(gm,RW),e(RW,h$e),e(gm,p$e),e(gm,kL),e(kL,_$e),e(gm,u$e),e(v,b$e),e(v,hm),e(hm,SW),e(SW,v$e),e(hm,T$e),e(hm,RL),e(RL,F$e),e(hm,C$e),e(v,M$e),e(v,pm),e(pm,PW),e(PW,E$e),e(pm,y$e),e(pm,SL),e(SL,w$e),e(pm,A$e),e(v,L$e),e(v,_m),e(_m,$W),e($W,B$e),e(_m,x$e),e(_m,PL),e(PL,k$e),e(_m,R$e),e(v,S$e),e(v,um),e(um,IW),e(IW,P$e),e(um,$$e),e(um,$L),e($L,I$e),e(um,j$e),e(v,N$e),e(v,bm),e(bm,jW),e(jW,D$e),e(bm,q$e),e(bm,IL),e(IL,G$e),e(bm,O$e),e(v,X$e),e(v,vm),e(vm,NW),e(NW,z$e),e(vm,V$e),e(vm,jL),e(jL,W$e),e(vm,Q$e),e(v,H$e),e(v,Tm),e(Tm,DW),e(DW,U$e),e(Tm,J$e),e(Tm,NL),e(NL,Y$e),e(Tm,K$e),e(v,Z$e),e(v,Fm),e(Fm,qW),e(qW,eIe),e(Fm,oIe),e(Fm,DL),e(DL,rIe),e(Fm,tIe),e(v,aIe),e(v,Cm),e(Cm,GW),e(GW,nIe),e(Cm,sIe),e(Cm,qL),e(qL,lIe),e(Cm,iIe),e(v,dIe),e(v,Mm),e(Mm,OW),e(OW,cIe),e(Mm,fIe),e(Mm,GL),e(GL,mIe),e(Mm,gIe),e(v,hIe),e(v,Em),e(Em,XW),e(XW,pIe),e(Em,_Ie),e(Em,OL),e(OL,uIe),e(Em,bIe),e(v,vIe),e(v,ym),e(ym,zW),e(zW,TIe),e(ym,FIe),e(ym,XL),e(XL,CIe),e(ym,MIe),e(v,EIe),e(v,wm),e(wm,VW),e(VW,yIe),e(wm,wIe),e(wm,zL),e(zL,AIe),e(wm,LIe),e(v,BIe),e(v,Am),e(Am,WW),e(WW,xIe),e(Am,kIe),e(Am,VL),e(VL,RIe),e(Am,SIe),e(v,PIe),e(v,Lm),e(Lm,QW),e(QW,$Ie),e(Lm,IIe),e(Lm,WL),e(WL,jIe),e(Lm,NIe),e(v,DIe),e(v,Bm),e(Bm,HW),e(HW,qIe),e(Bm,GIe),e(Bm,QL),e(QL,OIe),e(Bm,XIe),e(v,zIe),e(v,xm),e(xm,UW),e(UW,VIe),e(xm,WIe),e(xm,HL),e(HL,QIe),e(xm,HIe),e(v,UIe),e(v,km),e(km,JW),e(JW,JIe),e(km,YIe),e(km,UL),e(UL,KIe),e(km,ZIe),e(v,eje),e(v,Rm),e(Rm,YW),e(YW,oje),e(Rm,rje),e(Rm,JL),e(JL,tje),e(Rm,aje),e(v,nje),e(v,Sm),e(Sm,KW),e(KW,sje),e(Sm,lje),e(Sm,YL),e(YL,ije),e(Sm,dje),e(v,cje),e(v,Pm),e(Pm,ZW),e(ZW,fje),e(Pm,mje),e(Pm,KL),e(KL,gje),e(Pm,hje),e(v,pje),e(v,$m),e($m,eQ),e(eQ,_je),e($m,uje),e($m,ZL),e(ZL,bje),e($m,vje),e(v,Tje),e(v,Im),e(Im,oQ),e(oQ,Fje),e(Im,Cje),e(Im,e7),e(e7,Mje),e(Im,Eje),e(v,yje),e(v,jm),e(jm,rQ),e(rQ,wje),e(jm,Aje),e(jm,o7),e(o7,Lje),e(jm,Bje),e(v,xje),e(v,Nm),e(Nm,tQ),e(tQ,kje),e(Nm,Rje),e(Nm,r7),e(r7,Sje),e(Nm,Pje),e(v,$je),e(v,Dm),e(Dm,aQ),e(aQ,Ije),e(Dm,jje),e(Dm,t7),e(t7,Nje),e(Dm,Dje),e(v,qje),e(v,qm),e(qm,nQ),e(nQ,Gje),e(qm,Oje),e(qm,a7),e(a7,Xje),e(qm,zje),e(v,Vje),e(v,Gm),e(Gm,sQ),e(sQ,Wje),e(Gm,Qje),e(Gm,n7),e(n7,Hje),e(Gm,Uje),e(v,Jje),e(v,Om),e(Om,lQ),e(lQ,Yje),e(Om,Kje),e(Om,s7),e(s7,Zje),e(Om,eNe),e(v,oNe),e(v,Xm),e(Xm,iQ),e(iQ,rNe),e(Xm,tNe),e(Xm,l7),e(l7,aNe),e(Xm,nNe),e(v,sNe),e(v,zm),e(zm,dQ),e(dQ,lNe),e(zm,iNe),e(zm,i7),e(i7,dNe),e(zm,cNe),e(v,fNe),e(v,Vm),e(Vm,cQ),e(cQ,mNe),e(Vm,gNe),e(Vm,d7),e(d7,hNe),e(Vm,pNe),e(v,_Ne),e(v,Wm),e(Wm,fQ),e(fQ,uNe),e(Wm,bNe),e(Wm,c7),e(c7,vNe),e(Wm,TNe),e(v,FNe),e(v,Qm),e(Qm,mQ),e(mQ,CNe),e(Qm,MNe),e(Qm,f7),e(f7,ENe),e(Qm,yNe),e(v,wNe),e(v,Hm),e(Hm,gQ),e(gQ,ANe),e(Hm,LNe),e(Hm,m7),e(m7,BNe),e(Hm,xNe),e(v,kNe),e(v,Um),e(Um,hQ),e(hQ,RNe),e(Um,SNe),e(Um,g7),e(g7,PNe),e(Um,$Ne),e(v,INe),e(v,Jm),e(Jm,pQ),e(pQ,jNe),e(Jm,NNe),e(Jm,h7),e(h7,DNe),e(Jm,qNe),e(v,GNe),e(v,Ym),e(Ym,_Q),e(_Q,ONe),e(Ym,XNe),e(Ym,p7),e(p7,zNe),e(Ym,VNe),e(v,WNe),e(v,Km),e(Km,uQ),e(uQ,QNe),e(Km,HNe),e(Km,_7),e(_7,UNe),e(Km,JNe),e(v,YNe),e(v,Zm),e(Zm,bQ),e(bQ,KNe),e(Zm,ZNe),e(Zm,u7),e(u7,eDe),e(Zm,oDe),e(v,rDe),e(v,eg),e(eg,vQ),e(vQ,tDe),e(eg,aDe),e(eg,b7),e(b7,nDe),e(eg,sDe),e(v,lDe),e(v,og),e(og,TQ),e(TQ,iDe),e(og,dDe),e(og,v7),e(v7,cDe),e(og,fDe),e(v,mDe),e(v,rg),e(rg,FQ),e(FQ,gDe),e(rg,hDe),e(rg,T7),e(T7,pDe),e(rg,_De),e(v,uDe),e(v,tg),e(tg,CQ),e(CQ,bDe),e(tg,vDe),e(tg,F7),e(F7,TDe),e(tg,FDe),e(v,CDe),e(v,ag),e(ag,MQ),e(MQ,MDe),e(ag,EDe),e(ag,C7),e(C7,yDe),e(ag,wDe),e(v,ADe),e(v,ng),e(ng,EQ),e(EQ,LDe),e(ng,BDe),e(ng,M7),e(M7,xDe),e(ng,kDe),e(v,RDe),e(v,sg),e(sg,yQ),e(yQ,SDe),e(sg,PDe),e(sg,E7),e(E7,$De),e(sg,IDe),e(v,jDe),e(v,lg),e(lg,wQ),e(wQ,NDe),e(lg,DDe),e(lg,y7),e(y7,qDe),e(lg,GDe),e(v,ODe),e(v,ig),e(ig,AQ),e(AQ,XDe),e(ig,zDe),e(ig,w7),e(w7,VDe),e(ig,WDe),e(v,QDe),e(v,dg),e(dg,LQ),e(LQ,HDe),e(dg,UDe),e(dg,A7),e(A7,JDe),e(dg,YDe),e(v,KDe),e(v,cg),e(cg,BQ),e(BQ,ZDe),e(cg,eqe),e(cg,L7),e(L7,oqe),e(cg,rqe),e(v,tqe),e(v,fg),e(fg,xQ),e(xQ,aqe),e(fg,nqe),e(fg,B7),e(B7,sqe),e(fg,lqe),e(v,iqe),e(v,mg),e(mg,kQ),e(kQ,dqe),e(mg,cqe),e(mg,x7),e(x7,fqe),e(mg,mqe),e(v,gqe),e(v,gg),e(gg,RQ),e(RQ,hqe),e(gg,pqe),e(gg,k7),e(k7,_qe),e(gg,uqe),e(fo,bqe),e(fo,SQ),e(SQ,vqe),e(fo,Tqe),g(hM,fo,null),e(Go,Fqe),e(Go,hg),g(pM,hg,null),e(hg,Cqe),e(hg,PQ),e(PQ,Mqe),b(d,bLe,u),b(d,Ii,u),e(Ii,pg),e(pg,$Q),g(_M,$Q,null),e(Ii,Eqe),e(Ii,IQ),e(IQ,yqe),b(d,vLe,u),b(d,Oo,u),g(uM,Oo,null),e(Oo,wqe),e(Oo,bM),e(bM,Aqe),e(bM,R7),e(R7,Lqe),e(bM,Bqe),e(Oo,xqe),e(Oo,vM),e(vM,kqe),e(vM,jQ),e(jQ,Rqe),e(vM,Sqe),e(Oo,Pqe),e(Oo,mo),g(TM,mo,null),e(mo,$qe),e(mo,NQ),e(NQ,Iqe),e(mo,jqe),e(mo,ja),e(ja,Nqe),e(ja,DQ),e(DQ,Dqe),e(ja,qqe),e(ja,qQ),e(qQ,Gqe),e(ja,Oqe),e(ja,GQ),e(GQ,Xqe),e(ja,zqe),e(mo,Vqe),e(mo,M),e(M,Dn),e(Dn,OQ),e(OQ,Wqe),e(Dn,Qqe),e(Dn,S7),e(S7,Hqe),e(Dn,Uqe),e(Dn,P7),e(P7,Jqe),e(Dn,Yqe),e(M,Kqe),e(M,qn),e(qn,XQ),e(XQ,Zqe),e(qn,eGe),e(qn,$7),e($7,oGe),e(qn,rGe),e(qn,I7),e(I7,tGe),e(qn,aGe),e(M,nGe),e(M,Gn),e(Gn,zQ),e(zQ,sGe),e(Gn,lGe),e(Gn,j7),e(j7,iGe),e(Gn,dGe),e(Gn,N7),e(N7,cGe),e(Gn,fGe),e(M,mGe),e(M,_g),e(_g,VQ),e(VQ,gGe),e(_g,hGe),e(_g,D7),e(D7,pGe),e(_g,_Ge),e(M,uGe),e(M,On),e(On,WQ),e(WQ,bGe),e(On,vGe),e(On,q7),e(q7,TGe),e(On,FGe),e(On,G7),e(G7,CGe),e(On,MGe),e(M,EGe),e(M,ug),e(ug,QQ),e(QQ,yGe),e(ug,wGe),e(ug,O7),e(O7,AGe),e(ug,LGe),e(M,BGe),e(M,bg),e(bg,HQ),e(HQ,xGe),e(bg,kGe),e(bg,X7),e(X7,RGe),e(bg,SGe),e(M,PGe),e(M,vg),e(vg,UQ),e(UQ,$Ge),e(vg,IGe),e(vg,z7),e(z7,jGe),e(vg,NGe),e(M,DGe),e(M,Xn),e(Xn,JQ),e(JQ,qGe),e(Xn,GGe),e(Xn,V7),e(V7,OGe),e(Xn,XGe),e(Xn,W7),e(W7,zGe),e(Xn,VGe),e(M,WGe),e(M,zn),e(zn,YQ),e(YQ,QGe),e(zn,HGe),e(zn,Q7),e(Q7,UGe),e(zn,JGe),e(zn,H7),e(H7,YGe),e(zn,KGe),e(M,ZGe),e(M,Vn),e(Vn,KQ),e(KQ,eOe),e(Vn,oOe),e(Vn,U7),e(U7,rOe),e(Vn,tOe),e(Vn,J7),e(J7,aOe),e(Vn,nOe),e(M,sOe),e(M,Tg),e(Tg,ZQ),e(ZQ,lOe),e(Tg,iOe),e(Tg,Y7),e(Y7,dOe),e(Tg,cOe),e(M,fOe),e(M,Fg),e(Fg,eH),e(eH,mOe),e(Fg,gOe),e(Fg,K7),e(K7,hOe),e(Fg,pOe),e(M,_Oe),e(M,Wn),e(Wn,oH),e(oH,uOe),e(Wn,bOe),e(Wn,Z7),e(Z7,vOe),e(Wn,TOe),e(Wn,eB),e(eB,FOe),e(Wn,COe),e(M,MOe),e(M,Cg),e(Cg,rH),e(rH,EOe),e(Cg,yOe),e(Cg,oB),e(oB,wOe),e(Cg,AOe),e(M,LOe),e(M,Qn),e(Qn,tH),e(tH,BOe),e(Qn,xOe),e(Qn,rB),e(rB,kOe),e(Qn,ROe),e(Qn,tB),e(tB,SOe),e(Qn,POe),e(M,$Oe),e(M,Hn),e(Hn,aH),e(aH,IOe),e(Hn,jOe),e(Hn,aB),e(aB,NOe),e(Hn,DOe),e(Hn,nB),e(nB,qOe),e(Hn,GOe),e(M,OOe),e(M,Un),e(Un,nH),e(nH,XOe),e(Un,zOe),e(Un,sB),e(sB,VOe),e(Un,WOe),e(Un,sH),e(sH,QOe),e(Un,HOe),e(M,UOe),e(M,Mg),e(Mg,lH),e(lH,JOe),e(Mg,YOe),e(Mg,lB),e(lB,KOe),e(Mg,ZOe),e(M,eXe),e(M,Jn),e(Jn,iH),e(iH,oXe),e(Jn,rXe),e(Jn,iB),e(iB,tXe),e(Jn,aXe),e(Jn,dB),e(dB,nXe),e(Jn,sXe),e(M,lXe),e(M,Eg),e(Eg,dH),e(dH,iXe),e(Eg,dXe),e(Eg,cB),e(cB,cXe),e(Eg,fXe),e(M,mXe),e(M,Yn),e(Yn,cH),e(cH,gXe),e(Yn,hXe),e(Yn,fB),e(fB,pXe),e(Yn,_Xe),e(Yn,mB),e(mB,uXe),e(Yn,bXe),e(M,vXe),e(M,Kn),e(Kn,fH),e(fH,TXe),e(Kn,FXe),e(Kn,gB),e(gB,CXe),e(Kn,MXe),e(Kn,hB),e(hB,EXe),e(Kn,yXe),e(M,wXe),e(M,Zn),e(Zn,mH),e(mH,AXe),e(Zn,LXe),e(Zn,pB),e(pB,BXe),e(Zn,xXe),e(Zn,_B),e(_B,kXe),e(Zn,RXe),e(M,SXe),e(M,yg),e(yg,gH),e(gH,PXe),e(yg,$Xe),e(yg,uB),e(uB,IXe),e(yg,jXe),e(M,NXe),e(M,es),e(es,hH),e(hH,DXe),e(es,qXe),e(es,bB),e(bB,GXe),e(es,OXe),e(es,vB),e(vB,XXe),e(es,zXe),e(M,VXe),e(M,wg),e(wg,pH),e(pH,WXe),e(wg,QXe),e(wg,TB),e(TB,HXe),e(wg,UXe),e(M,JXe),e(M,os),e(os,_H),e(_H,YXe),e(os,KXe),e(os,FB),e(FB,ZXe),e(os,eze),e(os,CB),e(CB,oze),e(os,rze),e(M,tze),e(M,rs),e(rs,uH),e(uH,aze),e(rs,nze),e(rs,MB),e(MB,sze),e(rs,lze),e(rs,EB),e(EB,ize),e(rs,dze),e(M,cze),e(M,ts),e(ts,bH),e(bH,fze),e(ts,mze),e(ts,yB),e(yB,gze),e(ts,hze),e(ts,wB),e(wB,pze),e(ts,_ze),e(M,uze),e(M,as),e(as,vH),e(vH,bze),e(as,vze),e(as,AB),e(AB,Tze),e(as,Fze),e(as,LB),e(LB,Cze),e(as,Mze),e(M,Eze),e(M,Ag),e(Ag,TH),e(TH,yze),e(Ag,wze),e(Ag,BB),e(BB,Aze),e(Ag,Lze),e(M,Bze),e(M,ns),e(ns,FH),e(FH,xze),e(ns,kze),e(ns,xB),e(xB,Rze),e(ns,Sze),e(ns,kB),e(kB,Pze),e(ns,$ze),e(M,Ize),e(M,ss),e(ss,CH),e(CH,jze),e(ss,Nze),e(ss,RB),e(RB,Dze),e(ss,qze),e(ss,SB),e(SB,Gze),e(ss,Oze),e(M,Xze),e(M,ls),e(ls,MH),e(MH,zze),e(ls,Vze),e(ls,PB),e(PB,Wze),e(ls,Qze),e(ls,$B),e($B,Hze),e(ls,Uze),e(M,Jze),e(M,is),e(is,EH),e(EH,Yze),e(is,Kze),e(is,IB),e(IB,Zze),e(is,eVe),e(is,jB),e(jB,oVe),e(is,rVe),e(M,tVe),e(M,ds),e(ds,yH),e(yH,aVe),e(ds,nVe),e(ds,NB),e(NB,sVe),e(ds,lVe),e(ds,DB),e(DB,iVe),e(ds,dVe),e(M,cVe),e(M,cs),e(cs,wH),e(wH,fVe),e(cs,mVe),e(cs,qB),e(qB,gVe),e(cs,hVe),e(cs,GB),e(GB,pVe),e(cs,_Ve),e(M,uVe),e(M,Lg),e(Lg,AH),e(AH,bVe),e(Lg,vVe),e(Lg,OB),e(OB,TVe),e(Lg,FVe),e(M,CVe),e(M,fs),e(fs,LH),e(LH,MVe),e(fs,EVe),e(fs,XB),e(XB,yVe),e(fs,wVe),e(fs,zB),e(zB,AVe),e(fs,LVe),e(M,BVe),e(M,Bg),e(Bg,BH),e(BH,xVe),e(Bg,kVe),e(Bg,VB),e(VB,RVe),e(Bg,SVe),e(M,PVe),e(M,xg),e(xg,xH),e(xH,$Ve),e(xg,IVe),e(xg,WB),e(WB,jVe),e(xg,NVe),e(M,DVe),e(M,ms),e(ms,kH),e(kH,qVe),e(ms,GVe),e(ms,QB),e(QB,OVe),e(ms,XVe),e(ms,HB),e(HB,zVe),e(ms,VVe),e(M,WVe),e(M,gs),e(gs,RH),e(RH,QVe),e(gs,HVe),e(gs,UB),e(UB,UVe),e(gs,JVe),e(gs,JB),e(JB,YVe),e(gs,KVe),e(M,ZVe),e(M,kg),e(kg,SH),e(SH,eWe),e(kg,oWe),e(kg,YB),e(YB,rWe),e(kg,tWe),e(M,aWe),e(M,hs),e(hs,PH),e(PH,nWe),e(hs,sWe),e(hs,KB),e(KB,lWe),e(hs,iWe),e(hs,ZB),e(ZB,dWe),e(hs,cWe),e(M,fWe),e(M,ps),e(ps,$H),e($H,mWe),e(ps,gWe),e(ps,ex),e(ex,hWe),e(ps,pWe),e(ps,ox),e(ox,_We),e(ps,uWe),e(M,bWe),e(M,_s),e(_s,IH),e(IH,vWe),e(_s,TWe),e(_s,rx),e(rx,FWe),e(_s,CWe),e(_s,tx),e(tx,MWe),e(_s,EWe),e(M,yWe),e(M,us),e(us,jH),e(jH,wWe),e(us,AWe),e(us,ax),e(ax,LWe),e(us,BWe),e(us,nx),e(nx,xWe),e(us,kWe),e(M,RWe),e(M,bs),e(bs,NH),e(NH,SWe),e(bs,PWe),e(bs,sx),e(sx,$We),e(bs,IWe),e(bs,lx),e(lx,jWe),e(bs,NWe),e(M,DWe),e(M,Rg),e(Rg,DH),e(DH,qWe),e(Rg,GWe),e(Rg,ix),e(ix,OWe),e(Rg,XWe),e(M,zWe),e(M,Sg),e(Sg,qH),e(qH,VWe),e(Sg,WWe),e(Sg,dx),e(dx,QWe),e(Sg,HWe),e(M,UWe),e(M,Pg),e(Pg,GH),e(GH,JWe),e(Pg,YWe),e(Pg,cx),e(cx,KWe),e(Pg,ZWe),e(M,eQe),e(M,$g),e($g,OH),e(OH,oQe),e($g,rQe),e($g,fx),e(fx,tQe),e($g,aQe),e(M,nQe),e(M,vs),e(vs,XH),e(XH,sQe),e(vs,lQe),e(vs,mx),e(mx,iQe),e(vs,dQe),e(vs,gx),e(gx,cQe),e(vs,fQe),e(M,mQe),e(M,Ig),e(Ig,zH),e(zH,gQe),e(Ig,hQe),e(Ig,hx),e(hx,pQe),e(Ig,_Qe),e(M,uQe),e(M,Ts),e(Ts,VH),e(VH,bQe),e(Ts,vQe),e(Ts,px),e(px,TQe),e(Ts,FQe),e(Ts,_x),e(_x,CQe),e(Ts,MQe),e(M,EQe),e(M,Fs),e(Fs,WH),e(WH,yQe),e(Fs,wQe),e(Fs,ux),e(ux,AQe),e(Fs,LQe),e(Fs,bx),e(bx,BQe),e(Fs,xQe),e(M,kQe),e(M,Cs),e(Cs,QH),e(QH,RQe),e(Cs,SQe),e(Cs,vx),e(vx,PQe),e(Cs,$Qe),e(Cs,Tx),e(Tx,IQe),e(Cs,jQe),e(M,NQe),e(M,Ms),e(Ms,HH),e(HH,DQe),e(Ms,qQe),e(Ms,Fx),e(Fx,GQe),e(Ms,OQe),e(Ms,Cx),e(Cx,XQe),e(Ms,zQe),e(M,VQe),e(M,Es),e(Es,UH),e(UH,WQe),e(Es,QQe),e(Es,Mx),e(Mx,HQe),e(Es,UQe),e(Es,Ex),e(Ex,JQe),e(Es,YQe),e(M,KQe),e(M,jg),e(jg,JH),e(JH,ZQe),e(jg,eHe),e(jg,yx),e(yx,oHe),e(jg,rHe),e(M,tHe),e(M,Ng),e(Ng,YH),e(YH,aHe),e(Ng,nHe),e(Ng,wx),e(wx,sHe),e(Ng,lHe),e(M,iHe),e(M,ys),e(ys,KH),e(KH,dHe),e(ys,cHe),e(ys,Ax),e(Ax,fHe),e(ys,mHe),e(ys,Lx),e(Lx,gHe),e(ys,hHe),e(M,pHe),e(M,ws),e(ws,ZH),e(ZH,_He),e(ws,uHe),e(ws,Bx),e(Bx,bHe),e(ws,vHe),e(ws,xx),e(xx,THe),e(ws,FHe),e(M,CHe),e(M,As),e(As,eU),e(eU,MHe),e(As,EHe),e(As,kx),e(kx,yHe),e(As,wHe),e(As,Rx),e(Rx,AHe),e(As,LHe),e(M,BHe),e(M,Dg),e(Dg,oU),e(oU,xHe),e(Dg,kHe),e(Dg,Sx),e(Sx,RHe),e(Dg,SHe),e(M,PHe),e(M,qg),e(qg,rU),e(rU,$He),e(qg,IHe),e(qg,Px),e(Px,jHe),e(qg,NHe),e(M,DHe),e(M,Gg),e(Gg,tU),e(tU,qHe),e(Gg,GHe),e(Gg,$x),e($x,OHe),e(Gg,XHe),e(M,zHe),e(M,Og),e(Og,aU),e(aU,VHe),e(Og,WHe),e(Og,Ix),e(Ix,QHe),e(Og,HHe),e(M,UHe),e(M,Ls),e(Ls,nU),e(nU,JHe),e(Ls,YHe),e(Ls,jx),e(jx,KHe),e(Ls,ZHe),e(Ls,Nx),e(Nx,eUe),e(Ls,oUe),e(M,rUe),e(M,Xg),e(Xg,sU),e(sU,tUe),e(Xg,aUe),e(Xg,Dx),e(Dx,nUe),e(Xg,sUe),e(M,lUe),e(M,zg),e(zg,lU),e(lU,iUe),e(zg,dUe),e(zg,qx),e(qx,cUe),e(zg,fUe),e(M,mUe),e(M,Bs),e(Bs,iU),e(iU,gUe),e(Bs,hUe),e(Bs,Gx),e(Gx,pUe),e(Bs,_Ue),e(Bs,Ox),e(Ox,uUe),e(Bs,bUe),e(M,vUe),e(M,xs),e(xs,dU),e(dU,TUe),e(xs,FUe),e(xs,Xx),e(Xx,CUe),e(xs,MUe),e(xs,zx),e(zx,EUe),e(xs,yUe),e(mo,wUe),e(mo,cU),e(cU,AUe),e(mo,LUe),g(FM,mo,null),e(Oo,BUe),e(Oo,Vg),g(CM,Vg,null),e(Vg,xUe),e(Vg,fU),e(fU,kUe),b(d,TLe,u),b(d,ji,u),e(ji,Wg),e(Wg,mU),g(MM,mU,null),e(ji,RUe),e(ji,gU),e(gU,SUe),b(d,FLe,u),b(d,Xo,u),g(EM,Xo,null),e(Xo,PUe),e(Xo,yM),e(yM,$Ue),e(yM,Vx),e(Vx,IUe),e(yM,jUe),e(Xo,NUe),e(Xo,wM),e(wM,DUe),e(wM,hU),e(hU,qUe),e(wM,GUe),e(Xo,OUe),e(Xo,Le),g(AM,Le,null),e(Le,XUe),e(Le,pU),e(pU,zUe),e(Le,VUe),e(Le,Na),e(Na,WUe),e(Na,_U),e(_U,QUe),e(Na,HUe),e(Na,uU),e(uU,UUe),e(Na,JUe),e(Na,bU),e(bU,YUe),e(Na,KUe),e(Le,ZUe),e(Le,se),e(se,Qg),e(Qg,vU),e(vU,eJe),e(Qg,oJe),e(Qg,Wx),e(Wx,rJe),e(Qg,tJe),e(se,aJe),e(se,Hg),e(Hg,TU),e(TU,nJe),e(Hg,sJe),e(Hg,Qx),e(Qx,lJe),e(Hg,iJe),e(se,dJe),e(se,Ug),e(Ug,FU),e(FU,cJe),e(Ug,fJe),e(Ug,Hx),e(Hx,mJe),e(Ug,gJe),e(se,hJe),e(se,Jg),e(Jg,CU),e(CU,pJe),e(Jg,_Je),e(Jg,Ux),e(Ux,uJe),e(Jg,bJe),e(se,vJe),e(se,Yg),e(Yg,MU),e(MU,TJe),e(Yg,FJe),e(Yg,Jx),e(Jx,CJe),e(Yg,MJe),e(se,EJe),e(se,Kg),e(Kg,EU),e(EU,yJe),e(Kg,wJe),e(Kg,Yx),e(Yx,AJe),e(Kg,LJe),e(se,BJe),e(se,Zg),e(Zg,yU),e(yU,xJe),e(Zg,kJe),e(Zg,Kx),e(Kx,RJe),e(Zg,SJe),e(se,PJe),e(se,eh),e(eh,wU),e(wU,$Je),e(eh,IJe),e(eh,Zx),e(Zx,jJe),e(eh,NJe),e(se,DJe),e(se,oh),e(oh,AU),e(AU,qJe),e(oh,GJe),e(oh,ek),e(ek,OJe),e(oh,XJe),e(se,zJe),e(se,rh),e(rh,LU),e(LU,VJe),e(rh,WJe),e(rh,ok),e(ok,QJe),e(rh,HJe),e(se,UJe),e(se,th),e(th,BU),e(BU,JJe),e(th,YJe),e(th,rk),e(rk,KJe),e(th,ZJe),e(se,eYe),e(se,ah),e(ah,xU),e(xU,oYe),e(ah,rYe),e(ah,tk),e(tk,tYe),e(ah,aYe),e(se,nYe),e(se,nh),e(nh,kU),e(kU,sYe),e(nh,lYe),e(nh,ak),e(ak,iYe),e(nh,dYe),e(se,cYe),e(se,sh),e(sh,RU),e(RU,fYe),e(sh,mYe),e(sh,nk),e(nk,gYe),e(sh,hYe),e(se,pYe),e(se,lh),e(lh,SU),e(SU,_Ye),e(lh,uYe),e(lh,sk),e(sk,bYe),e(lh,vYe),e(Le,TYe),g(ih,Le,null),e(Le,FYe),e(Le,PU),e(PU,CYe),e(Le,MYe),g(LM,Le,null),e(Xo,EYe),e(Xo,dh),g(BM,dh,null),e(dh,yYe),e(dh,$U),e($U,wYe),b(d,CLe,u),b(d,Ni,u),e(Ni,ch),e(ch,IU),g(xM,IU,null),e(Ni,AYe),e(Ni,jU),e(jU,LYe),b(d,MLe,u),b(d,zo,u),g(kM,zo,null),e(zo,BYe),e(zo,RM),e(RM,xYe),e(RM,lk),e(lk,kYe),e(RM,RYe),e(zo,SYe),e(zo,SM),e(SM,PYe),e(SM,NU),e(NU,$Ye),e(SM,IYe),e(zo,jYe),e(zo,Be),g(PM,Be,null),e(Be,NYe),e(Be,DU),e(DU,DYe),e(Be,qYe),e(Be,Di),e(Di,GYe),e(Di,qU),e(qU,OYe),e(Di,XYe),e(Di,GU),e(GU,zYe),e(Di,VYe),e(Be,WYe),e(Be,we),e(we,fh),e(fh,OU),e(OU,QYe),e(fh,HYe),e(fh,ik),e(ik,UYe),e(fh,JYe),e(we,YYe),e(we,mh),e(mh,XU),e(XU,KYe),e(mh,ZYe),e(mh,dk),e(dk,eKe),e(mh,oKe),e(we,rKe),e(we,gh),e(gh,zU),e(zU,tKe),e(gh,aKe),e(gh,ck),e(ck,nKe),e(gh,sKe),e(we,lKe),e(we,hh),e(hh,VU),e(VU,iKe),e(hh,dKe),e(hh,fk),e(fk,cKe),e(hh,fKe),e(we,mKe),e(we,ph),e(ph,WU),e(WU,gKe),e(ph,hKe),e(ph,mk),e(mk,pKe),e(ph,_Ke),e(we,uKe),e(we,_h),e(_h,QU),e(QU,bKe),e(_h,vKe),e(_h,gk),e(gk,TKe),e(_h,FKe),e(we,CKe),e(we,uh),e(uh,HU),e(HU,MKe),e(uh,EKe),e(uh,hk),e(hk,yKe),e(uh,wKe),e(we,AKe),e(we,bh),e(bh,UU),e(UU,LKe),e(bh,BKe),e(bh,pk),e(pk,xKe),e(bh,kKe),e(Be,RKe),g(vh,Be,null),e(Be,SKe),e(Be,JU),e(JU,PKe),e(Be,$Ke),g($M,Be,null),e(zo,IKe),e(zo,Th),g(IM,Th,null),e(Th,jKe),e(Th,YU),e(YU,NKe),b(d,ELe,u),b(d,qi,u),e(qi,Fh),e(Fh,KU),g(jM,KU,null),e(qi,DKe),e(qi,ZU),e(ZU,qKe),b(d,yLe,u),b(d,Vo,u),g(NM,Vo,null),e(Vo,GKe),e(Vo,Gi),e(Gi,OKe),e(Gi,eJ),e(eJ,XKe),e(Gi,zKe),e(Gi,oJ),e(oJ,VKe),e(Gi,WKe),e(Vo,QKe),e(Vo,DM),e(DM,HKe),e(DM,rJ),e(rJ,UKe),e(DM,JKe),e(Vo,YKe),e(Vo,Nr),g(qM,Nr,null),e(Nr,KKe),e(Nr,tJ),e(tJ,ZKe),e(Nr,eZe),e(Nr,Oi),e(Oi,oZe),e(Oi,aJ),e(aJ,rZe),e(Oi,tZe),e(Oi,nJ),e(nJ,aZe),e(Oi,nZe),e(Nr,sZe),e(Nr,sJ),e(sJ,lZe),e(Nr,iZe),g(GM,Nr,null),e(Vo,dZe),e(Vo,xe),g(OM,xe,null),e(xe,cZe),e(xe,lJ),e(lJ,fZe),e(xe,mZe),e(xe,Da),e(Da,gZe),e(Da,iJ),e(iJ,hZe),e(Da,pZe),e(Da,dJ),e(dJ,_Ze),e(Da,uZe),e(Da,cJ),e(cJ,bZe),e(Da,vZe),e(xe,TZe),e(xe,F),e(F,Ch),e(Ch,fJ),e(fJ,FZe),e(Ch,CZe),e(Ch,_k),e(_k,MZe),e(Ch,EZe),e(F,yZe),e(F,Mh),e(Mh,mJ),e(mJ,wZe),e(Mh,AZe),e(Mh,uk),e(uk,LZe),e(Mh,BZe),e(F,xZe),e(F,Eh),e(Eh,gJ),e(gJ,kZe),e(Eh,RZe),e(Eh,bk),e(bk,SZe),e(Eh,PZe),e(F,$Ze),e(F,yh),e(yh,hJ),e(hJ,IZe),e(yh,jZe),e(yh,vk),e(vk,NZe),e(yh,DZe),e(F,qZe),e(F,wh),e(wh,pJ),e(pJ,GZe),e(wh,OZe),e(wh,Tk),e(Tk,XZe),e(wh,zZe),e(F,VZe),e(F,Ah),e(Ah,_J),e(_J,WZe),e(Ah,QZe),e(Ah,Fk),e(Fk,HZe),e(Ah,UZe),e(F,JZe),e(F,Lh),e(Lh,uJ),e(uJ,YZe),e(Lh,KZe),e(Lh,Ck),e(Ck,ZZe),e(Lh,eeo),e(F,oeo),e(F,Bh),e(Bh,bJ),e(bJ,reo),e(Bh,teo),e(Bh,Mk),e(Mk,aeo),e(Bh,neo),e(F,seo),e(F,xh),e(xh,vJ),e(vJ,leo),e(xh,ieo),e(xh,Ek),e(Ek,deo),e(xh,ceo),e(F,feo),e(F,kh),e(kh,TJ),e(TJ,meo),e(kh,geo),e(kh,yk),e(yk,heo),e(kh,peo),e(F,_eo),e(F,Rh),e(Rh,FJ),e(FJ,ueo),e(Rh,beo),e(Rh,wk),e(wk,veo),e(Rh,Teo),e(F,Feo),e(F,Sh),e(Sh,CJ),e(CJ,Ceo),e(Sh,Meo),e(Sh,Ak),e(Ak,Eeo),e(Sh,yeo),e(F,weo),e(F,Ph),e(Ph,MJ),e(MJ,Aeo),e(Ph,Leo),e(Ph,Lk),e(Lk,Beo),e(Ph,xeo),e(F,keo),e(F,$h),e($h,EJ),e(EJ,Reo),e($h,Seo),e($h,Bk),e(Bk,Peo),e($h,$eo),e(F,Ieo),e(F,Ih),e(Ih,yJ),e(yJ,jeo),e(Ih,Neo),e(Ih,xk),e(xk,Deo),e(Ih,qeo),e(F,Geo),e(F,jh),e(jh,wJ),e(wJ,Oeo),e(jh,Xeo),e(jh,kk),e(kk,zeo),e(jh,Veo),e(F,Weo),e(F,Nh),e(Nh,AJ),e(AJ,Qeo),e(Nh,Heo),e(Nh,Rk),e(Rk,Ueo),e(Nh,Jeo),e(F,Yeo),e(F,Dh),e(Dh,LJ),e(LJ,Keo),e(Dh,Zeo),e(Dh,Sk),e(Sk,eoo),e(Dh,ooo),e(F,roo),e(F,qh),e(qh,BJ),e(BJ,too),e(qh,aoo),e(qh,Pk),e(Pk,noo),e(qh,soo),e(F,loo),e(F,Gh),e(Gh,xJ),e(xJ,ioo),e(Gh,doo),e(Gh,$k),e($k,coo),e(Gh,foo),e(F,moo),e(F,Oh),e(Oh,kJ),e(kJ,goo),e(Oh,hoo),e(Oh,Ik),e(Ik,poo),e(Oh,_oo),e(F,uoo),e(F,Xh),e(Xh,RJ),e(RJ,boo),e(Xh,voo),e(Xh,jk),e(jk,Too),e(Xh,Foo),e(F,Coo),e(F,zh),e(zh,SJ),e(SJ,Moo),e(zh,Eoo),e(zh,Nk),e(Nk,yoo),e(zh,woo),e(F,Aoo),e(F,Vh),e(Vh,PJ),e(PJ,Loo),e(Vh,Boo),e(Vh,Dk),e(Dk,xoo),e(Vh,koo),e(F,Roo),e(F,Wh),e(Wh,$J),e($J,Soo),e(Wh,Poo),e(Wh,qk),e(qk,$oo),e(Wh,Ioo),e(F,joo),e(F,ks),e(ks,IJ),e(IJ,Noo),e(ks,Doo),e(ks,Gk),e(Gk,qoo),e(ks,Goo),e(ks,Ok),e(Ok,Ooo),e(ks,Xoo),e(F,zoo),e(F,Qh),e(Qh,jJ),e(jJ,Voo),e(Qh,Woo),e(Qh,Xk),e(Xk,Qoo),e(Qh,Hoo),e(F,Uoo),e(F,Hh),e(Hh,NJ),e(NJ,Joo),e(Hh,Yoo),e(Hh,zk),e(zk,Koo),e(Hh,Zoo),e(F,ero),e(F,Uh),e(Uh,DJ),e(DJ,oro),e(Uh,rro),e(Uh,Vk),e(Vk,tro),e(Uh,aro),e(F,nro),e(F,Jh),e(Jh,qJ),e(qJ,sro),e(Jh,lro),e(Jh,Wk),e(Wk,iro),e(Jh,dro),e(F,cro),e(F,Yh),e(Yh,GJ),e(GJ,fro),e(Yh,mro),e(Yh,Qk),e(Qk,gro),e(Yh,hro),e(F,pro),e(F,Kh),e(Kh,OJ),e(OJ,_ro),e(Kh,uro),e(Kh,Hk),e(Hk,bro),e(Kh,vro),e(F,Tro),e(F,Zh),e(Zh,XJ),e(XJ,Fro),e(Zh,Cro),e(Zh,Uk),e(Uk,Mro),e(Zh,Ero),e(F,yro),e(F,ep),e(ep,zJ),e(zJ,wro),e(ep,Aro),e(ep,Jk),e(Jk,Lro),e(ep,Bro),e(F,xro),e(F,op),e(op,VJ),e(VJ,kro),e(op,Rro),e(op,Yk),e(Yk,Sro),e(op,Pro),e(F,$ro),e(F,rp),e(rp,WJ),e(WJ,Iro),e(rp,jro),e(rp,Kk),e(Kk,Nro),e(rp,Dro),e(F,qro),e(F,tp),e(tp,QJ),e(QJ,Gro),e(tp,Oro),e(tp,Zk),e(Zk,Xro),e(tp,zro),e(F,Vro),e(F,ap),e(ap,HJ),e(HJ,Wro),e(ap,Qro),e(ap,eR),e(eR,Hro),e(ap,Uro),e(F,Jro),e(F,np),e(np,UJ),e(UJ,Yro),e(np,Kro),e(np,oR),e(oR,Zro),e(np,eto),e(F,oto),e(F,sp),e(sp,JJ),e(JJ,rto),e(sp,tto),e(sp,rR),e(rR,ato),e(sp,nto),e(F,sto),e(F,lp),e(lp,YJ),e(YJ,lto),e(lp,ito),e(lp,tR),e(tR,dto),e(lp,cto),e(F,fto),e(F,ip),e(ip,KJ),e(KJ,mto),e(ip,gto),e(ip,aR),e(aR,hto),e(ip,pto),e(F,_to),e(F,dp),e(dp,ZJ),e(ZJ,uto),e(dp,bto),e(dp,nR),e(nR,vto),e(dp,Tto),e(F,Fto),e(F,cp),e(cp,eY),e(eY,Cto),e(cp,Mto),e(cp,sR),e(sR,Eto),e(cp,yto),e(F,wto),e(F,fp),e(fp,oY),e(oY,Ato),e(fp,Lto),e(fp,lR),e(lR,Bto),e(fp,xto),e(F,kto),e(F,mp),e(mp,rY),e(rY,Rto),e(mp,Sto),e(mp,iR),e(iR,Pto),e(mp,$to),e(F,Ito),e(F,gp),e(gp,tY),e(tY,jto),e(gp,Nto),e(gp,dR),e(dR,Dto),e(gp,qto),e(F,Gto),e(F,hp),e(hp,aY),e(aY,Oto),e(hp,Xto),e(hp,cR),e(cR,zto),e(hp,Vto),e(F,Wto),e(F,pp),e(pp,nY),e(nY,Qto),e(pp,Hto),e(pp,fR),e(fR,Uto),e(pp,Jto),e(F,Yto),e(F,_p),e(_p,sY),e(sY,Kto),e(_p,Zto),e(_p,mR),e(mR,eao),e(_p,oao),e(F,rao),e(F,up),e(up,lY),e(lY,tao),e(up,aao),e(up,gR),e(gR,nao),e(up,sao),e(F,lao),e(F,bp),e(bp,iY),e(iY,iao),e(bp,dao),e(bp,hR),e(hR,cao),e(bp,fao),e(F,mao),e(F,vp),e(vp,dY),e(dY,gao),e(vp,hao),e(vp,pR),e(pR,pao),e(vp,_ao),e(F,uao),e(F,Tp),e(Tp,cY),e(cY,bao),e(Tp,vao),e(Tp,_R),e(_R,Tao),e(Tp,Fao),e(F,Cao),e(F,Fp),e(Fp,fY),e(fY,Mao),e(Fp,Eao),e(Fp,uR),e(uR,yao),e(Fp,wao),e(F,Aao),e(F,Cp),e(Cp,mY),e(mY,Lao),e(Cp,Bao),e(Cp,bR),e(bR,xao),e(Cp,kao),e(F,Rao),e(F,Mp),e(Mp,gY),e(gY,Sao),e(Mp,Pao),e(Mp,vR),e(vR,$ao),e(Mp,Iao),e(F,jao),e(F,Ep),e(Ep,hY),e(hY,Nao),e(Ep,Dao),e(Ep,TR),e(TR,qao),e(Ep,Gao),e(F,Oao),e(F,yp),e(yp,pY),e(pY,Xao),e(yp,zao),e(yp,FR),e(FR,Vao),e(yp,Wao),e(F,Qao),e(F,wp),e(wp,_Y),e(_Y,Hao),e(wp,Uao),e(wp,CR),e(CR,Jao),e(wp,Yao),e(F,Kao),e(F,Ap),e(Ap,uY),e(uY,Zao),e(Ap,eno),e(Ap,MR),e(MR,ono),e(Ap,rno),e(F,tno),e(F,Lp),e(Lp,bY),e(bY,ano),e(Lp,nno),e(Lp,ER),e(ER,sno),e(Lp,lno),e(F,ino),e(F,Bp),e(Bp,vY),e(vY,dno),e(Bp,cno),e(Bp,yR),e(yR,fno),e(Bp,mno),e(F,gno),e(F,xp),e(xp,TY),e(TY,hno),e(xp,pno),e(xp,wR),e(wR,_no),e(xp,uno),e(F,bno),e(F,kp),e(kp,FY),e(FY,vno),e(kp,Tno),e(kp,AR),e(AR,Fno),e(kp,Cno),e(F,Mno),e(F,Rp),e(Rp,CY),e(CY,Eno),e(Rp,yno),e(Rp,LR),e(LR,wno),e(Rp,Ano),e(F,Lno),e(F,Sp),e(Sp,MY),e(MY,Bno),e(Sp,xno),e(Sp,BR),e(BR,kno),e(Sp,Rno),e(F,Sno),e(F,Pp),e(Pp,EY),e(EY,Pno),e(Pp,$no),e(Pp,xR),e(xR,Ino),e(Pp,jno),e(F,Nno),e(F,$p),e($p,yY),e(yY,Dno),e($p,qno),e($p,kR),e(kR,Gno),e($p,Ono),e(F,Xno),e(F,Ip),e(Ip,wY),e(wY,zno),e(Ip,Vno),e(Ip,RR),e(RR,Wno),e(Ip,Qno),e(F,Hno),e(F,jp),e(jp,AY),e(AY,Uno),e(jp,Jno),e(jp,SR),e(SR,Yno),e(jp,Kno),e(F,Zno),e(F,Np),e(Np,LY),e(LY,eso),e(Np,oso),e(Np,PR),e(PR,rso),e(Np,tso),e(F,aso),e(F,Dp),e(Dp,BY),e(BY,nso),e(Dp,sso),e(Dp,$R),e($R,lso),e(Dp,iso),e(F,dso),e(F,qp),e(qp,xY),e(xY,cso),e(qp,fso),e(qp,IR),e(IR,mso),e(qp,gso),e(F,hso),e(F,Gp),e(Gp,kY),e(kY,pso),e(Gp,_so),e(Gp,jR),e(jR,uso),e(Gp,bso),e(F,vso),e(F,Op),e(Op,RY),e(RY,Tso),e(Op,Fso),e(Op,NR),e(NR,Cso),e(Op,Mso),e(F,Eso),e(F,Xp),e(Xp,SY),e(SY,yso),e(Xp,wso),e(Xp,DR),e(DR,Aso),e(Xp,Lso),e(F,Bso),e(F,zp),e(zp,PY),e(PY,xso),e(zp,kso),e(zp,qR),e(qR,Rso),e(zp,Sso),e(F,Pso),e(F,Vp),e(Vp,$Y),e($Y,$so),e(Vp,Iso),e(Vp,GR),e(GR,jso),e(Vp,Nso),e(F,Dso),e(F,Wp),e(Wp,IY),e(IY,qso),e(Wp,Gso),e(Wp,OR),e(OR,Oso),e(Wp,Xso),e(F,zso),e(F,Qp),e(Qp,jY),e(jY,Vso),e(Qp,Wso),e(Qp,XR),e(XR,Qso),e(Qp,Hso),e(F,Uso),e(F,Hp),e(Hp,NY),e(NY,Jso),e(Hp,Yso),e(Hp,zR),e(zR,Kso),e(Hp,Zso),e(F,elo),e(F,Up),e(Up,DY),e(DY,olo),e(Up,rlo),e(Up,VR),e(VR,tlo),e(Up,alo),e(F,nlo),e(F,Jp),e(Jp,qY),e(qY,slo),e(Jp,llo),e(Jp,WR),e(WR,ilo),e(Jp,dlo),e(xe,clo),e(xe,Yp),e(Yp,flo),e(Yp,GY),e(GY,mlo),e(Yp,glo),e(Yp,OY),e(OY,hlo),e(xe,plo),e(xe,XY),e(XY,_lo),e(xe,ulo),g(XM,xe,null),b(d,wLe,u),b(d,Xi,u),e(Xi,Kp),e(Kp,zY),g(zM,zY,null),e(Xi,blo),e(Xi,VY),e(VY,vlo),b(d,ALe,u),b(d,Wo,u),g(VM,Wo,null),e(Wo,Tlo),e(Wo,zi),e(zi,Flo),e(zi,WY),e(WY,Clo),e(zi,Mlo),e(zi,QY),e(QY,Elo),e(zi,ylo),e(Wo,wlo),e(Wo,WM),e(WM,Alo),e(WM,HY),e(HY,Llo),e(WM,Blo),e(Wo,xlo),e(Wo,Dr),g(QM,Dr,null),e(Dr,klo),e(Dr,UY),e(UY,Rlo),e(Dr,Slo),e(Dr,Vi),e(Vi,Plo),e(Vi,JY),e(JY,$lo),e(Vi,Ilo),e(Vi,YY),e(YY,jlo),e(Vi,Nlo),e(Dr,Dlo),e(Dr,KY),e(KY,qlo),e(Dr,Glo),g(HM,Dr,null),e(Wo,Olo),e(Wo,ke),g(UM,ke,null),e(ke,Xlo),e(ke,ZY),e(ZY,zlo),e(ke,Vlo),e(ke,qa),e(qa,Wlo),e(qa,eK),e(eK,Qlo),e(qa,Hlo),e(qa,oK),e(oK,Ulo),e(qa,Jlo),e(qa,rK),e(rK,Ylo),e(qa,Klo),e(ke,Zlo),e(ke,k),e(k,Zp),e(Zp,tK),e(tK,eio),e(Zp,oio),e(Zp,QR),e(QR,rio),e(Zp,tio),e(k,aio),e(k,e_),e(e_,aK),e(aK,nio),e(e_,sio),e(e_,HR),e(HR,lio),e(e_,iio),e(k,dio),e(k,o_),e(o_,nK),e(nK,cio),e(o_,fio),e(o_,UR),e(UR,mio),e(o_,gio),e(k,hio),e(k,r_),e(r_,sK),e(sK,pio),e(r_,_io),e(r_,JR),e(JR,uio),e(r_,bio),e(k,vio),e(k,t_),e(t_,lK),e(lK,Tio),e(t_,Fio),e(t_,YR),e(YR,Cio),e(t_,Mio),e(k,Eio),e(k,a_),e(a_,iK),e(iK,yio),e(a_,wio),e(a_,KR),e(KR,Aio),e(a_,Lio),e(k,Bio),e(k,n_),e(n_,dK),e(dK,xio),e(n_,kio),e(n_,ZR),e(ZR,Rio),e(n_,Sio),e(k,Pio),e(k,s_),e(s_,cK),e(cK,$io),e(s_,Iio),e(s_,eS),e(eS,jio),e(s_,Nio),e(k,Dio),e(k,l_),e(l_,fK),e(fK,qio),e(l_,Gio),e(l_,oS),e(oS,Oio),e(l_,Xio),e(k,zio),e(k,i_),e(i_,mK),e(mK,Vio),e(i_,Wio),e(i_,rS),e(rS,Qio),e(i_,Hio),e(k,Uio),e(k,d_),e(d_,gK),e(gK,Jio),e(d_,Yio),e(d_,tS),e(tS,Kio),e(d_,Zio),e(k,edo),e(k,c_),e(c_,hK),e(hK,odo),e(c_,rdo),e(c_,aS),e(aS,tdo),e(c_,ado),e(k,ndo),e(k,f_),e(f_,pK),e(pK,sdo),e(f_,ldo),e(f_,nS),e(nS,ido),e(f_,ddo),e(k,cdo),e(k,m_),e(m_,_K),e(_K,fdo),e(m_,mdo),e(m_,sS),e(sS,gdo),e(m_,hdo),e(k,pdo),e(k,g_),e(g_,uK),e(uK,_do),e(g_,udo),e(g_,lS),e(lS,bdo),e(g_,vdo),e(k,Tdo),e(k,h_),e(h_,bK),e(bK,Fdo),e(h_,Cdo),e(h_,iS),e(iS,Mdo),e(h_,Edo),e(k,ydo),e(k,p_),e(p_,vK),e(vK,wdo),e(p_,Ado),e(p_,dS),e(dS,Ldo),e(p_,Bdo),e(k,xdo),e(k,__),e(__,TK),e(TK,kdo),e(__,Rdo),e(__,cS),e(cS,Sdo),e(__,Pdo),e(k,$do),e(k,u_),e(u_,FK),e(FK,Ido),e(u_,jdo),e(u_,fS),e(fS,Ndo),e(u_,Ddo),e(k,qdo),e(k,b_),e(b_,CK),e(CK,Gdo),e(b_,Odo),e(b_,mS),e(mS,Xdo),e(b_,zdo),e(k,Vdo),e(k,v_),e(v_,MK),e(MK,Wdo),e(v_,Qdo),e(v_,gS),e(gS,Hdo),e(v_,Udo),e(k,Jdo),e(k,T_),e(T_,EK),e(EK,Ydo),e(T_,Kdo),e(T_,hS),e(hS,Zdo),e(T_,eco),e(k,oco),e(k,F_),e(F_,yK),e(yK,rco),e(F_,tco),e(F_,pS),e(pS,aco),e(F_,nco),e(k,sco),e(k,C_),e(C_,wK),e(wK,lco),e(C_,ico),e(C_,_S),e(_S,dco),e(C_,cco),e(k,fco),e(k,M_),e(M_,AK),e(AK,mco),e(M_,gco),e(M_,uS),e(uS,hco),e(M_,pco),e(k,_co),e(k,E_),e(E_,LK),e(LK,uco),e(E_,bco),e(E_,bS),e(bS,vco),e(E_,Tco),e(k,Fco),e(k,y_),e(y_,BK),e(BK,Cco),e(y_,Mco),e(y_,vS),e(vS,Eco),e(y_,yco),e(k,wco),e(k,w_),e(w_,xK),e(xK,Aco),e(w_,Lco),e(w_,TS),e(TS,Bco),e(w_,xco),e(k,kco),e(k,A_),e(A_,kK),e(kK,Rco),e(A_,Sco),e(A_,FS),e(FS,Pco),e(A_,$co),e(k,Ico),e(k,L_),e(L_,RK),e(RK,jco),e(L_,Nco),e(L_,CS),e(CS,Dco),e(L_,qco),e(k,Gco),e(k,B_),e(B_,SK),e(SK,Oco),e(B_,Xco),e(B_,MS),e(MS,zco),e(B_,Vco),e(k,Wco),e(k,x_),e(x_,PK),e(PK,Qco),e(x_,Hco),e(x_,ES),e(ES,Uco),e(x_,Jco),e(k,Yco),e(k,k_),e(k_,$K),e($K,Kco),e(k_,Zco),e(k_,yS),e(yS,efo),e(k_,ofo),e(k,rfo),e(k,R_),e(R_,IK),e(IK,tfo),e(R_,afo),e(R_,wS),e(wS,nfo),e(R_,sfo),e(k,lfo),e(k,S_),e(S_,jK),e(jK,ifo),e(S_,dfo),e(S_,AS),e(AS,cfo),e(S_,ffo),e(k,mfo),e(k,P_),e(P_,NK),e(NK,gfo),e(P_,hfo),e(P_,LS),e(LS,pfo),e(P_,_fo),e(k,ufo),e(k,$_),e($_,DK),e(DK,bfo),e($_,vfo),e($_,BS),e(BS,Tfo),e($_,Ffo),e(k,Cfo),e(k,I_),e(I_,qK),e(qK,Mfo),e(I_,Efo),e(I_,xS),e(xS,yfo),e(I_,wfo),e(ke,Afo),e(ke,j_),e(j_,Lfo),e(j_,GK),e(GK,Bfo),e(j_,xfo),e(j_,OK),e(OK,kfo),e(ke,Rfo),e(ke,XK),e(XK,Sfo),e(ke,Pfo),g(JM,ke,null),b(d,LLe,u),b(d,Wi,u),e(Wi,N_),e(N_,zK),g(YM,zK,null),e(Wi,$fo),e(Wi,VK),e(VK,Ifo),b(d,BLe,u),b(d,Qo,u),g(KM,Qo,null),e(Qo,jfo),e(Qo,Qi),e(Qi,Nfo),e(Qi,WK),e(WK,Dfo),e(Qi,qfo),e(Qi,QK),e(QK,Gfo),e(Qi,Ofo),e(Qo,Xfo),e(Qo,ZM),e(ZM,zfo),e(ZM,HK),e(HK,Vfo),e(ZM,Wfo),e(Qo,Qfo),e(Qo,qr),g(eE,qr,null),e(qr,Hfo),e(qr,UK),e(UK,Ufo),e(qr,Jfo),e(qr,Hi),e(Hi,Yfo),e(Hi,JK),e(JK,Kfo),e(Hi,Zfo),e(Hi,YK),e(YK,emo),e(Hi,omo),e(qr,rmo),e(qr,KK),e(KK,tmo),e(qr,amo),g(oE,qr,null),e(Qo,nmo),e(Qo,Re),g(rE,Re,null),e(Re,smo),e(Re,ZK),e(ZK,lmo),e(Re,imo),e(Re,Ga),e(Ga,dmo),e(Ga,eZ),e(eZ,cmo),e(Ga,fmo),e(Ga,oZ),e(oZ,mmo),e(Ga,gmo),e(Ga,rZ),e(rZ,hmo),e(Ga,pmo),e(Re,_mo),e(Re,$),e($,D_),e(D_,tZ),e(tZ,umo),e(D_,bmo),e(D_,kS),e(kS,vmo),e(D_,Tmo),e($,Fmo),e($,q_),e(q_,aZ),e(aZ,Cmo),e(q_,Mmo),e(q_,RS),e(RS,Emo),e(q_,ymo),e($,wmo),e($,G_),e(G_,nZ),e(nZ,Amo),e(G_,Lmo),e(G_,SS),e(SS,Bmo),e(G_,xmo),e($,kmo),e($,O_),e(O_,sZ),e(sZ,Rmo),e(O_,Smo),e(O_,PS),e(PS,Pmo),e(O_,$mo),e($,Imo),e($,X_),e(X_,lZ),e(lZ,jmo),e(X_,Nmo),e(X_,$S),e($S,Dmo),e(X_,qmo),e($,Gmo),e($,z_),e(z_,iZ),e(iZ,Omo),e(z_,Xmo),e(z_,IS),e(IS,zmo),e(z_,Vmo),e($,Wmo),e($,V_),e(V_,dZ),e(dZ,Qmo),e(V_,Hmo),e(V_,jS),e(jS,Umo),e(V_,Jmo),e($,Ymo),e($,W_),e(W_,cZ),e(cZ,Kmo),e(W_,Zmo),e(W_,NS),e(NS,ego),e(W_,ogo),e($,rgo),e($,Q_),e(Q_,fZ),e(fZ,tgo),e(Q_,ago),e(Q_,DS),e(DS,ngo),e(Q_,sgo),e($,lgo),e($,H_),e(H_,mZ),e(mZ,igo),e(H_,dgo),e(H_,qS),e(qS,cgo),e(H_,fgo),e($,mgo),e($,U_),e(U_,gZ),e(gZ,ggo),e(U_,hgo),e(U_,GS),e(GS,pgo),e(U_,_go),e($,ugo),e($,J_),e(J_,hZ),e(hZ,bgo),e(J_,vgo),e(J_,OS),e(OS,Tgo),e(J_,Fgo),e($,Cgo),e($,Y_),e(Y_,pZ),e(pZ,Mgo),e(Y_,Ego),e(Y_,XS),e(XS,ygo),e(Y_,wgo),e($,Ago),e($,K_),e(K_,_Z),e(_Z,Lgo),e(K_,Bgo),e(K_,zS),e(zS,xgo),e(K_,kgo),e($,Rgo),e($,Z_),e(Z_,uZ),e(uZ,Sgo),e(Z_,Pgo),e(Z_,VS),e(VS,$go),e(Z_,Igo),e($,jgo),e($,eu),e(eu,bZ),e(bZ,Ngo),e(eu,Dgo),e(eu,WS),e(WS,qgo),e(eu,Ggo),e($,Ogo),e($,ou),e(ou,vZ),e(vZ,Xgo),e(ou,zgo),e(ou,QS),e(QS,Vgo),e(ou,Wgo),e($,Qgo),e($,ru),e(ru,TZ),e(TZ,Hgo),e(ru,Ugo),e(ru,HS),e(HS,Jgo),e(ru,Ygo),e($,Kgo),e($,tu),e(tu,FZ),e(FZ,Zgo),e(tu,eho),e(tu,US),e(US,oho),e(tu,rho),e($,tho),e($,au),e(au,CZ),e(CZ,aho),e(au,nho),e(au,JS),e(JS,sho),e(au,lho),e($,iho),e($,nu),e(nu,MZ),e(MZ,dho),e(nu,cho),e(nu,YS),e(YS,fho),e(nu,mho),e($,gho),e($,su),e(su,EZ),e(EZ,hho),e(su,pho),e(su,KS),e(KS,_ho),e(su,uho),e($,bho),e($,lu),e(lu,yZ),e(yZ,vho),e(lu,Tho),e(lu,ZS),e(ZS,Fho),e(lu,Cho),e($,Mho),e($,iu),e(iu,wZ),e(wZ,Eho),e(iu,yho),e(iu,eP),e(eP,who),e(iu,Aho),e($,Lho),e($,du),e(du,AZ),e(AZ,Bho),e(du,xho),e(du,oP),e(oP,kho),e(du,Rho),e($,Sho),e($,cu),e(cu,LZ),e(LZ,Pho),e(cu,$ho),e(cu,rP),e(rP,Iho),e(cu,jho),e($,Nho),e($,fu),e(fu,BZ),e(BZ,Dho),e(fu,qho),e(fu,tP),e(tP,Gho),e(fu,Oho),e($,Xho),e($,mu),e(mu,xZ),e(xZ,zho),e(mu,Vho),e(mu,aP),e(aP,Who),e(mu,Qho),e($,Hho),e($,gu),e(gu,kZ),e(kZ,Uho),e(gu,Jho),e(gu,nP),e(nP,Yho),e(gu,Kho),e($,Zho),e($,hu),e(hu,RZ),e(RZ,epo),e(hu,opo),e(hu,sP),e(sP,rpo),e(hu,tpo),e($,apo),e($,pu),e(pu,SZ),e(SZ,npo),e(pu,spo),e(pu,lP),e(lP,lpo),e(pu,ipo),e($,dpo),e($,_u),e(_u,PZ),e(PZ,cpo),e(_u,fpo),e(_u,iP),e(iP,mpo),e(_u,gpo),e($,hpo),e($,uu),e(uu,$Z),e($Z,ppo),e(uu,_po),e(uu,dP),e(dP,upo),e(uu,bpo),e($,vpo),e($,bu),e(bu,IZ),e(IZ,Tpo),e(bu,Fpo),e(bu,cP),e(cP,Cpo),e(bu,Mpo),e(Re,Epo),e(Re,vu),e(vu,ypo),e(vu,jZ),e(jZ,wpo),e(vu,Apo),e(vu,NZ),e(NZ,Lpo),e(Re,Bpo),e(Re,DZ),e(DZ,xpo),e(Re,kpo),g(tE,Re,null),b(d,xLe,u),b(d,Ui,u),e(Ui,Tu),e(Tu,qZ),g(aE,qZ,null),e(Ui,Rpo),e(Ui,GZ),e(GZ,Spo),b(d,kLe,u),b(d,Ho,u),g(nE,Ho,null),e(Ho,Ppo),e(Ho,Ji),e(Ji,$po),e(Ji,OZ),e(OZ,Ipo),e(Ji,jpo),e(Ji,XZ),e(XZ,Npo),e(Ji,Dpo),e(Ho,qpo),e(Ho,sE),e(sE,Gpo),e(sE,zZ),e(zZ,Opo),e(sE,Xpo),e(Ho,zpo),e(Ho,Gr),g(lE,Gr,null),e(Gr,Vpo),e(Gr,VZ),e(VZ,Wpo),e(Gr,Qpo),e(Gr,Yi),e(Yi,Hpo),e(Yi,WZ),e(WZ,Upo),e(Yi,Jpo),e(Yi,QZ),e(QZ,Ypo),e(Yi,Kpo),e(Gr,Zpo),e(Gr,HZ),e(HZ,e_o),e(Gr,o_o),g(iE,Gr,null),e(Ho,r_o),e(Ho,Se),g(dE,Se,null),e(Se,t_o),e(Se,UZ),e(UZ,a_o),e(Se,n_o),e(Se,Oa),e(Oa,s_o),e(Oa,JZ),e(JZ,l_o),e(Oa,i_o),e(Oa,YZ),e(YZ,d_o),e(Oa,c_o),e(Oa,KZ),e(KZ,f_o),e(Oa,m_o),e(Se,g_o),e(Se,I),e(I,Fu),e(Fu,ZZ),e(ZZ,h_o),e(Fu,p_o),e(Fu,fP),e(fP,__o),e(Fu,u_o),e(I,b_o),e(I,Cu),e(Cu,eee),e(eee,v_o),e(Cu,T_o),e(Cu,mP),e(mP,F_o),e(Cu,C_o),e(I,M_o),e(I,Mu),e(Mu,oee),e(oee,E_o),e(Mu,y_o),e(Mu,gP),e(gP,w_o),e(Mu,A_o),e(I,L_o),e(I,Eu),e(Eu,ree),e(ree,B_o),e(Eu,x_o),e(Eu,hP),e(hP,k_o),e(Eu,R_o),e(I,S_o),e(I,yu),e(yu,tee),e(tee,P_o),e(yu,$_o),e(yu,pP),e(pP,I_o),e(yu,j_o),e(I,N_o),e(I,wu),e(wu,aee),e(aee,D_o),e(wu,q_o),e(wu,_P),e(_P,G_o),e(wu,O_o),e(I,X_o),e(I,Au),e(Au,nee),e(nee,z_o),e(Au,V_o),e(Au,uP),e(uP,W_o),e(Au,Q_o),e(I,H_o),e(I,Lu),e(Lu,see),e(see,U_o),e(Lu,J_o),e(Lu,bP),e(bP,Y_o),e(Lu,K_o),e(I,Z_o),e(I,Bu),e(Bu,lee),e(lee,euo),e(Bu,ouo),e(Bu,vP),e(vP,ruo),e(Bu,tuo),e(I,auo),e(I,xu),e(xu,iee),e(iee,nuo),e(xu,suo),e(xu,TP),e(TP,luo),e(xu,iuo),e(I,duo),e(I,ku),e(ku,dee),e(dee,cuo),e(ku,fuo),e(ku,FP),e(FP,muo),e(ku,guo),e(I,huo),e(I,Ru),e(Ru,cee),e(cee,puo),e(Ru,_uo),e(Ru,CP),e(CP,uuo),e(Ru,buo),e(I,vuo),e(I,Su),e(Su,fee),e(fee,Tuo),e(Su,Fuo),e(Su,MP),e(MP,Cuo),e(Su,Muo),e(I,Euo),e(I,Pu),e(Pu,mee),e(mee,yuo),e(Pu,wuo),e(Pu,EP),e(EP,Auo),e(Pu,Luo),e(I,Buo),e(I,$u),e($u,gee),e(gee,xuo),e($u,kuo),e($u,yP),e(yP,Ruo),e($u,Suo),e(I,Puo),e(I,Iu),e(Iu,hee),e(hee,$uo),e(Iu,Iuo),e(Iu,wP),e(wP,juo),e(Iu,Nuo),e(I,Duo),e(I,ju),e(ju,pee),e(pee,quo),e(ju,Guo),e(ju,AP),e(AP,Ouo),e(ju,Xuo),e(I,zuo),e(I,Nu),e(Nu,_ee),e(_ee,Vuo),e(Nu,Wuo),e(Nu,LP),e(LP,Quo),e(Nu,Huo),e(I,Uuo),e(I,Du),e(Du,uee),e(uee,Juo),e(Du,Yuo),e(Du,BP),e(BP,Kuo),e(Du,Zuo),e(I,e5o),e(I,qu),e(qu,bee),e(bee,o5o),e(qu,r5o),e(qu,xP),e(xP,t5o),e(qu,a5o),e(I,n5o),e(I,Gu),e(Gu,vee),e(vee,s5o),e(Gu,l5o),e(Gu,kP),e(kP,i5o),e(Gu,d5o),e(I,c5o),e(I,Ou),e(Ou,Tee),e(Tee,f5o),e(Ou,m5o),e(Ou,RP),e(RP,g5o),e(Ou,h5o),e(I,p5o),e(I,Xu),e(Xu,Fee),e(Fee,_5o),e(Xu,u5o),e(Xu,SP),e(SP,b5o),e(Xu,v5o),e(I,T5o),e(I,zu),e(zu,Cee),e(Cee,F5o),e(zu,C5o),e(zu,PP),e(PP,M5o),e(zu,E5o),e(I,y5o),e(I,Vu),e(Vu,Mee),e(Mee,w5o),e(Vu,A5o),e(Vu,$P),e($P,L5o),e(Vu,B5o),e(I,x5o),e(I,Wu),e(Wu,Eee),e(Eee,k5o),e(Wu,R5o),e(Wu,IP),e(IP,S5o),e(Wu,P5o),e(I,$5o),e(I,Qu),e(Qu,yee),e(yee,I5o),e(Qu,j5o),e(Qu,jP),e(jP,N5o),e(Qu,D5o),e(I,q5o),e(I,Hu),e(Hu,wee),e(wee,G5o),e(Hu,O5o),e(Hu,NP),e(NP,X5o),e(Hu,z5o),e(I,V5o),e(I,Uu),e(Uu,Aee),e(Aee,W5o),e(Uu,Q5o),e(Uu,DP),e(DP,H5o),e(Uu,U5o),e(I,J5o),e(I,Ju),e(Ju,Lee),e(Lee,Y5o),e(Ju,K5o),e(Ju,Bee),e(Bee,Z5o),e(Ju,e1o),e(I,o1o),e(I,Yu),e(Yu,xee),e(xee,r1o),e(Yu,t1o),e(Yu,qP),e(qP,a1o),e(Yu,n1o),e(I,s1o),e(I,Ku),e(Ku,kee),e(kee,l1o),e(Ku,i1o),e(Ku,GP),e(GP,d1o),e(Ku,c1o),e(I,f1o),e(I,Zu),e(Zu,Ree),e(Ree,m1o),e(Zu,g1o),e(Zu,OP),e(OP,h1o),e(Zu,p1o),e(I,_1o),e(I,e5),e(e5,See),e(See,u1o),e(e5,b1o),e(e5,XP),e(XP,v1o),e(e5,T1o),e(Se,F1o),e(Se,o5),e(o5,C1o),e(o5,Pee),e(Pee,M1o),e(o5,E1o),e(o5,$ee),e($ee,y1o),e(Se,w1o),e(Se,Iee),e(Iee,A1o),e(Se,L1o),g(cE,Se,null),b(d,RLe,u),b(d,Ki,u),e(Ki,r5),e(r5,jee),g(fE,jee,null),e(Ki,B1o),e(Ki,Nee),e(Nee,x1o),b(d,SLe,u),b(d,Uo,u),g(mE,Uo,null),e(Uo,k1o),e(Uo,Zi),e(Zi,R1o),e(Zi,Dee),e(Dee,S1o),e(Zi,P1o),e(Zi,qee),e(qee,$1o),e(Zi,I1o),e(Uo,j1o),e(Uo,gE),e(gE,N1o),e(gE,Gee),e(Gee,D1o),e(gE,q1o),e(Uo,G1o),e(Uo,Or),g(hE,Or,null),e(Or,O1o),e(Or,Oee),e(Oee,X1o),e(Or,z1o),e(Or,ed),e(ed,V1o),e(ed,Xee),e(Xee,W1o),e(ed,Q1o),e(ed,zee),e(zee,H1o),e(ed,U1o),e(Or,J1o),e(Or,Vee),e(Vee,Y1o),e(Or,K1o),g(pE,Or,null),e(Uo,Z1o),e(Uo,Pe),g(_E,Pe,null),e(Pe,ebo),e(Pe,Wee),e(Wee,obo),e(Pe,rbo),e(Pe,Xa),e(Xa,tbo),e(Xa,Qee),e(Qee,abo),e(Xa,nbo),e(Xa,Hee),e(Hee,sbo),e(Xa,lbo),e(Xa,Uee),e(Uee,ibo),e(Xa,dbo),e(Pe,cbo),e(Pe,ae),e(ae,t5),e(t5,Jee),e(Jee,fbo),e(t5,mbo),e(t5,zP),e(zP,gbo),e(t5,hbo),e(ae,pbo),e(ae,a5),e(a5,Yee),e(Yee,_bo),e(a5,ubo),e(a5,VP),e(VP,bbo),e(a5,vbo),e(ae,Tbo),e(ae,n5),e(n5,Kee),e(Kee,Fbo),e(n5,Cbo),e(n5,WP),e(WP,Mbo),e(n5,Ebo),e(ae,ybo),e(ae,s5),e(s5,Zee),e(Zee,wbo),e(s5,Abo),e(s5,QP),e(QP,Lbo),e(s5,Bbo),e(ae,xbo),e(ae,l5),e(l5,eoe),e(eoe,kbo),e(l5,Rbo),e(l5,HP),e(HP,Sbo),e(l5,Pbo),e(ae,$bo),e(ae,i5),e(i5,ooe),e(ooe,Ibo),e(i5,jbo),e(i5,UP),e(UP,Nbo),e(i5,Dbo),e(ae,qbo),e(ae,d5),e(d5,roe),e(roe,Gbo),e(d5,Obo),e(d5,JP),e(JP,Xbo),e(d5,zbo),e(ae,Vbo),e(ae,c5),e(c5,toe),e(toe,Wbo),e(c5,Qbo),e(c5,YP),e(YP,Hbo),e(c5,Ubo),e(ae,Jbo),e(ae,f5),e(f5,aoe),e(aoe,Ybo),e(f5,Kbo),e(f5,KP),e(KP,Zbo),e(f5,e2o),e(ae,o2o),e(ae,m5),e(m5,noe),e(noe,r2o),e(m5,t2o),e(m5,ZP),e(ZP,a2o),e(m5,n2o),e(ae,s2o),e(ae,g5),e(g5,soe),e(soe,l2o),e(g5,i2o),e(g5,e$),e(e$,d2o),e(g5,c2o),e(ae,f2o),e(ae,h5),e(h5,loe),e(loe,m2o),e(h5,g2o),e(h5,o$),e(o$,h2o),e(h5,p2o),e(ae,_2o),e(ae,p5),e(p5,ioe),e(ioe,u2o),e(p5,b2o),e(p5,r$),e(r$,v2o),e(p5,T2o),e(ae,F2o),e(ae,_5),e(_5,doe),e(doe,C2o),e(_5,M2o),e(_5,t$),e(t$,E2o),e(_5,y2o),e(ae,w2o),e(ae,u5),e(u5,coe),e(coe,A2o),e(u5,L2o),e(u5,a$),e(a$,B2o),e(u5,x2o),e(ae,k2o),e(ae,b5),e(b5,foe),e(foe,R2o),e(b5,S2o),e(b5,n$),e(n$,P2o),e(b5,$2o),e(Pe,I2o),e(Pe,v5),e(v5,j2o),e(v5,moe),e(moe,N2o),e(v5,D2o),e(v5,goe),e(goe,q2o),e(Pe,G2o),e(Pe,hoe),e(hoe,O2o),e(Pe,X2o),g(uE,Pe,null),b(d,PLe,u),b(d,od,u),e(od,T5),e(T5,poe),g(bE,poe,null),e(od,z2o),e(od,_oe),e(_oe,V2o),b(d,$Le,u),b(d,Jo,u),g(vE,Jo,null),e(Jo,W2o),e(Jo,rd),e(rd,Q2o),e(rd,uoe),e(uoe,H2o),e(rd,U2o),e(rd,boe),e(boe,J2o),e(rd,Y2o),e(Jo,K2o),e(Jo,TE),e(TE,Z2o),e(TE,voe),e(voe,evo),e(TE,ovo),e(Jo,rvo),e(Jo,Xr),g(FE,Xr,null),e(Xr,tvo),e(Xr,Toe),e(Toe,avo),e(Xr,nvo),e(Xr,td),e(td,svo),e(td,Foe),e(Foe,lvo),e(td,ivo),e(td,Coe),e(Coe,dvo),e(td,cvo),e(Xr,fvo),e(Xr,Moe),e(Moe,mvo),e(Xr,gvo),g(CE,Xr,null),e(Jo,hvo),e(Jo,$e),g(ME,$e,null),e($e,pvo),e($e,Eoe),e(Eoe,_vo),e($e,uvo),e($e,za),e(za,bvo),e(za,yoe),e(yoe,vvo),e(za,Tvo),e(za,woe),e(woe,Fvo),e(za,Cvo),e(za,Aoe),e(Aoe,Mvo),e(za,Evo),e($e,yvo),e($e,A),e(A,F5),e(F5,Loe),e(Loe,wvo),e(F5,Avo),e(F5,s$),e(s$,Lvo),e(F5,Bvo),e(A,xvo),e(A,C5),e(C5,Boe),e(Boe,kvo),e(C5,Rvo),e(C5,l$),e(l$,Svo),e(C5,Pvo),e(A,$vo),e(A,M5),e(M5,xoe),e(xoe,Ivo),e(M5,jvo),e(M5,i$),e(i$,Nvo),e(M5,Dvo),e(A,qvo),e(A,E5),e(E5,koe),e(koe,Gvo),e(E5,Ovo),e(E5,d$),e(d$,Xvo),e(E5,zvo),e(A,Vvo),e(A,y5),e(y5,Roe),e(Roe,Wvo),e(y5,Qvo),e(y5,c$),e(c$,Hvo),e(y5,Uvo),e(A,Jvo),e(A,w5),e(w5,Soe),e(Soe,Yvo),e(w5,Kvo),e(w5,f$),e(f$,Zvo),e(w5,eTo),e(A,oTo),e(A,A5),e(A5,Poe),e(Poe,rTo),e(A5,tTo),e(A5,m$),e(m$,aTo),e(A5,nTo),e(A,sTo),e(A,L5),e(L5,$oe),e($oe,lTo),e(L5,iTo),e(L5,g$),e(g$,dTo),e(L5,cTo),e(A,fTo),e(A,B5),e(B5,Ioe),e(Ioe,mTo),e(B5,gTo),e(B5,h$),e(h$,hTo),e(B5,pTo),e(A,_To),e(A,x5),e(x5,joe),e(joe,uTo),e(x5,bTo),e(x5,p$),e(p$,vTo),e(x5,TTo),e(A,FTo),e(A,k5),e(k5,Noe),e(Noe,CTo),e(k5,MTo),e(k5,_$),e(_$,ETo),e(k5,yTo),e(A,wTo),e(A,R5),e(R5,Doe),e(Doe,ATo),e(R5,LTo),e(R5,u$),e(u$,BTo),e(R5,xTo),e(A,kTo),e(A,S5),e(S5,qoe),e(qoe,RTo),e(S5,STo),e(S5,b$),e(b$,PTo),e(S5,$To),e(A,ITo),e(A,P5),e(P5,Goe),e(Goe,jTo),e(P5,NTo),e(P5,v$),e(v$,DTo),e(P5,qTo),e(A,GTo),e(A,$5),e($5,Ooe),e(Ooe,OTo),e($5,XTo),e($5,T$),e(T$,zTo),e($5,VTo),e(A,WTo),e(A,I5),e(I5,Xoe),e(Xoe,QTo),e(I5,HTo),e(I5,F$),e(F$,UTo),e(I5,JTo),e(A,YTo),e(A,j5),e(j5,zoe),e(zoe,KTo),e(j5,ZTo),e(j5,C$),e(C$,e8o),e(j5,o8o),e(A,r8o),e(A,N5),e(N5,Voe),e(Voe,t8o),e(N5,a8o),e(N5,M$),e(M$,n8o),e(N5,s8o),e(A,l8o),e(A,D5),e(D5,Woe),e(Woe,i8o),e(D5,d8o),e(D5,E$),e(E$,c8o),e(D5,f8o),e(A,m8o),e(A,q5),e(q5,Qoe),e(Qoe,g8o),e(q5,h8o),e(q5,y$),e(y$,p8o),e(q5,_8o),e(A,u8o),e(A,G5),e(G5,Hoe),e(Hoe,b8o),e(G5,v8o),e(G5,w$),e(w$,T8o),e(G5,F8o),e(A,C8o),e(A,O5),e(O5,Uoe),e(Uoe,M8o),e(O5,E8o),e(O5,A$),e(A$,y8o),e(O5,w8o),e(A,A8o),e(A,X5),e(X5,Joe),e(Joe,L8o),e(X5,B8o),e(X5,L$),e(L$,x8o),e(X5,k8o),e(A,R8o),e(A,z5),e(z5,Yoe),e(Yoe,S8o),e(z5,P8o),e(z5,B$),e(B$,$8o),e(z5,I8o),e(A,j8o),e(A,V5),e(V5,Koe),e(Koe,N8o),e(V5,D8o),e(V5,x$),e(x$,q8o),e(V5,G8o),e(A,O8o),e(A,W5),e(W5,Zoe),e(Zoe,X8o),e(W5,z8o),e(W5,k$),e(k$,V8o),e(W5,W8o),e(A,Q8o),e(A,Q5),e(Q5,ere),e(ere,H8o),e(Q5,U8o),e(Q5,R$),e(R$,J8o),e(Q5,Y8o),e(A,K8o),e(A,H5),e(H5,ore),e(ore,Z8o),e(H5,eFo),e(H5,S$),e(S$,oFo),e(H5,rFo),e(A,tFo),e(A,U5),e(U5,rre),e(rre,aFo),e(U5,nFo),e(U5,P$),e(P$,sFo),e(U5,lFo),e(A,iFo),e(A,J5),e(J5,tre),e(tre,dFo),e(J5,cFo),e(J5,$$),e($$,fFo),e(J5,mFo),e(A,gFo),e(A,Y5),e(Y5,are),e(are,hFo),e(Y5,pFo),e(Y5,I$),e(I$,_Fo),e(Y5,uFo),e(A,bFo),e(A,K5),e(K5,nre),e(nre,vFo),e(K5,TFo),e(K5,j$),e(j$,FFo),e(K5,CFo),e(A,MFo),e(A,Z5),e(Z5,sre),e(sre,EFo),e(Z5,yFo),e(Z5,N$),e(N$,wFo),e(Z5,AFo),e(A,LFo),e(A,e1),e(e1,lre),e(lre,BFo),e(e1,xFo),e(e1,D$),e(D$,kFo),e(e1,RFo),e(A,SFo),e(A,o1),e(o1,ire),e(ire,PFo),e(o1,$Fo),e(o1,q$),e(q$,IFo),e(o1,jFo),e(A,NFo),e(A,r1),e(r1,dre),e(dre,DFo),e(r1,qFo),e(r1,G$),e(G$,GFo),e(r1,OFo),e(A,XFo),e(A,t1),e(t1,cre),e(cre,zFo),e(t1,VFo),e(t1,O$),e(O$,WFo),e(t1,QFo),e(A,HFo),e(A,a1),e(a1,fre),e(fre,UFo),e(a1,JFo),e(a1,X$),e(X$,YFo),e(a1,KFo),e(A,ZFo),e(A,n1),e(n1,mre),e(mre,e9o),e(n1,o9o),e(n1,z$),e(z$,r9o),e(n1,t9o),e(A,a9o),e(A,s1),e(s1,gre),e(gre,n9o),e(s1,s9o),e(s1,V$),e(V$,l9o),e(s1,i9o),e(A,d9o),e(A,l1),e(l1,hre),e(hre,c9o),e(l1,f9o),e(l1,W$),e(W$,m9o),e(l1,g9o),e(A,h9o),e(A,i1),e(i1,pre),e(pre,p9o),e(i1,_9o),e(i1,Q$),e(Q$,u9o),e(i1,b9o),e(A,v9o),e(A,d1),e(d1,_re),e(_re,T9o),e(d1,F9o),e(d1,H$),e(H$,C9o),e(d1,M9o),e(A,E9o),e(A,c1),e(c1,ure),e(ure,y9o),e(c1,w9o),e(c1,U$),e(U$,A9o),e(c1,L9o),e(A,B9o),e(A,f1),e(f1,bre),e(bre,x9o),e(f1,k9o),e(f1,J$),e(J$,R9o),e(f1,S9o),e($e,P9o),e($e,m1),e(m1,$9o),e(m1,vre),e(vre,I9o),e(m1,j9o),e(m1,Tre),e(Tre,N9o),e($e,D9o),e($e,Fre),e(Fre,q9o),e($e,G9o),g(EE,$e,null),b(d,ILe,u),b(d,ad,u),e(ad,g1),e(g1,Cre),g(yE,Cre,null),e(ad,O9o),e(ad,Mre),e(Mre,X9o),b(d,jLe,u),b(d,Yo,u),g(wE,Yo,null),e(Yo,z9o),e(Yo,nd),e(nd,V9o),e(nd,Ere),e(Ere,W9o),e(nd,Q9o),e(nd,yre),e(yre,H9o),e(nd,U9o),e(Yo,J9o),e(Yo,AE),e(AE,Y9o),e(AE,wre),e(wre,K9o),e(AE,Z9o),e(Yo,eCo),e(Yo,zr),g(LE,zr,null),e(zr,oCo),e(zr,Are),e(Are,rCo),e(zr,tCo),e(zr,sd),e(sd,aCo),e(sd,Lre),e(Lre,nCo),e(sd,sCo),e(sd,Bre),e(Bre,lCo),e(sd,iCo),e(zr,dCo),e(zr,xre),e(xre,cCo),e(zr,fCo),g(BE,zr,null),e(Yo,mCo),e(Yo,Ie),g(xE,Ie,null),e(Ie,gCo),e(Ie,kre),e(kre,hCo),e(Ie,pCo),e(Ie,Va),e(Va,_Co),e(Va,Rre),e(Rre,uCo),e(Va,bCo),e(Va,Sre),e(Sre,vCo),e(Va,TCo),e(Va,Pre),e(Pre,FCo),e(Va,CCo),e(Ie,MCo),e(Ie,G),e(G,h1),e(h1,$re),e($re,ECo),e(h1,yCo),e(h1,Y$),e(Y$,wCo),e(h1,ACo),e(G,LCo),e(G,p1),e(p1,Ire),e(Ire,BCo),e(p1,xCo),e(p1,K$),e(K$,kCo),e(p1,RCo),e(G,SCo),e(G,_1),e(_1,jre),e(jre,PCo),e(_1,$Co),e(_1,Z$),e(Z$,ICo),e(_1,jCo),e(G,NCo),e(G,u1),e(u1,Nre),e(Nre,DCo),e(u1,qCo),e(u1,eI),e(eI,GCo),e(u1,OCo),e(G,XCo),e(G,b1),e(b1,Dre),e(Dre,zCo),e(b1,VCo),e(b1,oI),e(oI,WCo),e(b1,QCo),e(G,HCo),e(G,v1),e(v1,qre),e(qre,UCo),e(v1,JCo),e(v1,rI),e(rI,YCo),e(v1,KCo),e(G,ZCo),e(G,T1),e(T1,Gre),e(Gre,e4o),e(T1,o4o),e(T1,tI),e(tI,r4o),e(T1,t4o),e(G,a4o),e(G,F1),e(F1,Ore),e(Ore,n4o),e(F1,s4o),e(F1,aI),e(aI,l4o),e(F1,i4o),e(G,d4o),e(G,C1),e(C1,Xre),e(Xre,c4o),e(C1,f4o),e(C1,nI),e(nI,m4o),e(C1,g4o),e(G,h4o),e(G,M1),e(M1,zre),e(zre,p4o),e(M1,_4o),e(M1,sI),e(sI,u4o),e(M1,b4o),e(G,v4o),e(G,E1),e(E1,Vre),e(Vre,T4o),e(E1,F4o),e(E1,lI),e(lI,C4o),e(E1,M4o),e(G,E4o),e(G,y1),e(y1,Wre),e(Wre,y4o),e(y1,w4o),e(y1,iI),e(iI,A4o),e(y1,L4o),e(G,B4o),e(G,w1),e(w1,Qre),e(Qre,x4o),e(w1,k4o),e(w1,dI),e(dI,R4o),e(w1,S4o),e(G,P4o),e(G,A1),e(A1,Hre),e(Hre,$4o),e(A1,I4o),e(A1,cI),e(cI,j4o),e(A1,N4o),e(G,D4o),e(G,L1),e(L1,Ure),e(Ure,q4o),e(L1,G4o),e(L1,fI),e(fI,O4o),e(L1,X4o),e(G,z4o),e(G,B1),e(B1,Jre),e(Jre,V4o),e(B1,W4o),e(B1,mI),e(mI,Q4o),e(B1,H4o),e(G,U4o),e(G,x1),e(x1,Yre),e(Yre,J4o),e(x1,Y4o),e(x1,gI),e(gI,K4o),e(x1,Z4o),e(G,eMo),e(G,k1),e(k1,Kre),e(Kre,oMo),e(k1,rMo),e(k1,hI),e(hI,tMo),e(k1,aMo),e(G,nMo),e(G,R1),e(R1,Zre),e(Zre,sMo),e(R1,lMo),e(R1,pI),e(pI,iMo),e(R1,dMo),e(G,cMo),e(G,S1),e(S1,ete),e(ete,fMo),e(S1,mMo),e(S1,_I),e(_I,gMo),e(S1,hMo),e(G,pMo),e(G,P1),e(P1,ote),e(ote,_Mo),e(P1,uMo),e(P1,uI),e(uI,bMo),e(P1,vMo),e(G,TMo),e(G,$1),e($1,rte),e(rte,FMo),e($1,CMo),e($1,bI),e(bI,MMo),e($1,EMo),e(G,yMo),e(G,I1),e(I1,tte),e(tte,wMo),e(I1,AMo),e(I1,vI),e(vI,LMo),e(I1,BMo),e(G,xMo),e(G,j1),e(j1,ate),e(ate,kMo),e(j1,RMo),e(j1,TI),e(TI,SMo),e(j1,PMo),e(G,$Mo),e(G,N1),e(N1,nte),e(nte,IMo),e(N1,jMo),e(N1,FI),e(FI,NMo),e(N1,DMo),e(G,qMo),e(G,D1),e(D1,ste),e(ste,GMo),e(D1,OMo),e(D1,CI),e(CI,XMo),e(D1,zMo),e(G,VMo),e(G,q1),e(q1,lte),e(lte,WMo),e(q1,QMo),e(q1,MI),e(MI,HMo),e(q1,UMo),e(Ie,JMo),e(Ie,G1),e(G1,YMo),e(G1,ite),e(ite,KMo),e(G1,ZMo),e(G1,dte),e(dte,eEo),e(Ie,oEo),e(Ie,cte),e(cte,rEo),e(Ie,tEo),g(kE,Ie,null),b(d,NLe,u),b(d,ld,u),e(ld,O1),e(O1,fte),g(RE,fte,null),e(ld,aEo),e(ld,mte),e(mte,nEo),b(d,DLe,u),b(d,Ko,u),g(SE,Ko,null),e(Ko,sEo),e(Ko,id),e(id,lEo),e(id,gte),e(gte,iEo),e(id,dEo),e(id,hte),e(hte,cEo),e(id,fEo),e(Ko,mEo),e(Ko,PE),e(PE,gEo),e(PE,pte),e(pte,hEo),e(PE,pEo),e(Ko,_Eo),e(Ko,Vr),g($E,Vr,null),e(Vr,uEo),e(Vr,_te),e(_te,bEo),e(Vr,vEo),e(Vr,dd),e(dd,TEo),e(dd,ute),e(ute,FEo),e(dd,CEo),e(dd,bte),e(bte,MEo),e(dd,EEo),e(Vr,yEo),e(Vr,vte),e(vte,wEo),e(Vr,AEo),g(IE,Vr,null),e(Ko,LEo),e(Ko,je),g(jE,je,null),e(je,BEo),e(je,Tte),e(Tte,xEo),e(je,kEo),e(je,Wa),e(Wa,REo),e(Wa,Fte),e(Fte,SEo),e(Wa,PEo),e(Wa,Cte),e(Cte,$Eo),e(Wa,IEo),e(Wa,Mte),e(Mte,jEo),e(Wa,NEo),e(je,DEo),e(je,na),e(na,X1),e(X1,Ete),e(Ete,qEo),e(X1,GEo),e(X1,EI),e(EI,OEo),e(X1,XEo),e(na,zEo),e(na,z1),e(z1,yte),e(yte,VEo),e(z1,WEo),e(z1,yI),e(yI,QEo),e(z1,HEo),e(na,UEo),e(na,V1),e(V1,wte),e(wte,JEo),e(V1,YEo),e(V1,wI),e(wI,KEo),e(V1,ZEo),e(na,e3o),e(na,W1),e(W1,Ate),e(Ate,o3o),e(W1,r3o),e(W1,AI),e(AI,t3o),e(W1,a3o),e(na,n3o),e(na,Q1),e(Q1,Lte),e(Lte,s3o),e(Q1,l3o),e(Q1,LI),e(LI,i3o),e(Q1,d3o),e(je,c3o),e(je,H1),e(H1,f3o),e(H1,Bte),e(Bte,m3o),e(H1,g3o),e(H1,xte),e(xte,h3o),e(je,p3o),e(je,kte),e(kte,_3o),e(je,u3o),g(NE,je,null),b(d,qLe,u),b(d,cd,u),e(cd,U1),e(U1,Rte),g(DE,Rte,null),e(cd,b3o),e(cd,Ste),e(Ste,v3o),b(d,GLe,u),b(d,Zo,u),g(qE,Zo,null),e(Zo,T3o),e(Zo,fd),e(fd,F3o),e(fd,Pte),e(Pte,C3o),e(fd,M3o),e(fd,$te),e($te,E3o),e(fd,y3o),e(Zo,w3o),e(Zo,GE),e(GE,A3o),e(GE,Ite),e(Ite,L3o),e(GE,B3o),e(Zo,x3o),e(Zo,Wr),g(OE,Wr,null),e(Wr,k3o),e(Wr,jte),e(jte,R3o),e(Wr,S3o),e(Wr,md),e(md,P3o),e(md,Nte),e(Nte,$3o),e(md,I3o),e(md,Dte),e(Dte,j3o),e(md,N3o),e(Wr,D3o),e(Wr,qte),e(qte,q3o),e(Wr,G3o),g(XE,Wr,null),e(Zo,O3o),e(Zo,Ne),g(zE,Ne,null),e(Ne,X3o),e(Ne,Gte),e(Gte,z3o),e(Ne,V3o),e(Ne,Qa),e(Qa,W3o),e(Qa,Ote),e(Ote,Q3o),e(Qa,H3o),e(Qa,Xte),e(Xte,U3o),e(Qa,J3o),e(Qa,zte),e(zte,Y3o),e(Qa,K3o),e(Ne,Z3o),e(Ne,D),e(D,J1),e(J1,Vte),e(Vte,eyo),e(J1,oyo),e(J1,BI),e(BI,ryo),e(J1,tyo),e(D,ayo),e(D,Y1),e(Y1,Wte),e(Wte,nyo),e(Y1,syo),e(Y1,xI),e(xI,lyo),e(Y1,iyo),e(D,dyo),e(D,K1),e(K1,Qte),e(Qte,cyo),e(K1,fyo),e(K1,kI),e(kI,myo),e(K1,gyo),e(D,hyo),e(D,Z1),e(Z1,Hte),e(Hte,pyo),e(Z1,_yo),e(Z1,RI),e(RI,uyo),e(Z1,byo),e(D,vyo),e(D,eb),e(eb,Ute),e(Ute,Tyo),e(eb,Fyo),e(eb,SI),e(SI,Cyo),e(eb,Myo),e(D,Eyo),e(D,ob),e(ob,Jte),e(Jte,yyo),e(ob,wyo),e(ob,PI),e(PI,Ayo),e(ob,Lyo),e(D,Byo),e(D,rb),e(rb,Yte),e(Yte,xyo),e(rb,kyo),e(rb,$I),e($I,Ryo),e(rb,Syo),e(D,Pyo),e(D,tb),e(tb,Kte),e(Kte,$yo),e(tb,Iyo),e(tb,II),e(II,jyo),e(tb,Nyo),e(D,Dyo),e(D,ab),e(ab,Zte),e(Zte,qyo),e(ab,Gyo),e(ab,jI),e(jI,Oyo),e(ab,Xyo),e(D,zyo),e(D,nb),e(nb,eae),e(eae,Vyo),e(nb,Wyo),e(nb,NI),e(NI,Qyo),e(nb,Hyo),e(D,Uyo),e(D,sb),e(sb,oae),e(oae,Jyo),e(sb,Yyo),e(sb,DI),e(DI,Kyo),e(sb,Zyo),e(D,ewo),e(D,lb),e(lb,rae),e(rae,owo),e(lb,rwo),e(lb,qI),e(qI,two),e(lb,awo),e(D,nwo),e(D,ib),e(ib,tae),e(tae,swo),e(ib,lwo),e(ib,GI),e(GI,iwo),e(ib,dwo),e(D,cwo),e(D,db),e(db,aae),e(aae,fwo),e(db,mwo),e(db,OI),e(OI,gwo),e(db,hwo),e(D,pwo),e(D,cb),e(cb,nae),e(nae,_wo),e(cb,uwo),e(cb,XI),e(XI,bwo),e(cb,vwo),e(D,Two),e(D,fb),e(fb,sae),e(sae,Fwo),e(fb,Cwo),e(fb,zI),e(zI,Mwo),e(fb,Ewo),e(D,ywo),e(D,mb),e(mb,lae),e(lae,wwo),e(mb,Awo),e(mb,VI),e(VI,Lwo),e(mb,Bwo),e(D,xwo),e(D,gb),e(gb,iae),e(iae,kwo),e(gb,Rwo),e(gb,WI),e(WI,Swo),e(gb,Pwo),e(D,$wo),e(D,hb),e(hb,dae),e(dae,Iwo),e(hb,jwo),e(hb,QI),e(QI,Nwo),e(hb,Dwo),e(D,qwo),e(D,pb),e(pb,cae),e(cae,Gwo),e(pb,Owo),e(pb,HI),e(HI,Xwo),e(pb,zwo),e(D,Vwo),e(D,_b),e(_b,fae),e(fae,Wwo),e(_b,Qwo),e(_b,UI),e(UI,Hwo),e(_b,Uwo),e(D,Jwo),e(D,ub),e(ub,mae),e(mae,Ywo),e(ub,Kwo),e(ub,JI),e(JI,Zwo),e(ub,eAo),e(D,oAo),e(D,bb),e(bb,gae),e(gae,rAo),e(bb,tAo),e(bb,YI),e(YI,aAo),e(bb,nAo),e(D,sAo),e(D,vb),e(vb,hae),e(hae,lAo),e(vb,iAo),e(vb,KI),e(KI,dAo),e(vb,cAo),e(D,fAo),e(D,Tb),e(Tb,pae),e(pae,mAo),e(Tb,gAo),e(Tb,ZI),e(ZI,hAo),e(Tb,pAo),e(D,_Ao),e(D,Fb),e(Fb,_ae),e(_ae,uAo),e(Fb,bAo),e(Fb,ej),e(ej,vAo),e(Fb,TAo),e(D,FAo),e(D,Cb),e(Cb,uae),e(uae,CAo),e(Cb,MAo),e(Cb,oj),e(oj,EAo),e(Cb,yAo),e(D,wAo),e(D,Mb),e(Mb,bae),e(bae,AAo),e(Mb,LAo),e(Mb,rj),e(rj,BAo),e(Mb,xAo),e(D,kAo),e(D,Eb),e(Eb,vae),e(vae,RAo),e(Eb,SAo),e(Eb,tj),e(tj,PAo),e(Eb,$Ao),e(D,IAo),e(D,yb),e(yb,Tae),e(Tae,jAo),e(yb,NAo),e(yb,aj),e(aj,DAo),e(yb,qAo),e(D,GAo),e(D,wb),e(wb,Fae),e(Fae,OAo),e(wb,XAo),e(wb,nj),e(nj,zAo),e(wb,VAo),e(D,WAo),e(D,Ab),e(Ab,Cae),e(Cae,QAo),e(Ab,HAo),e(Ab,sj),e(sj,UAo),e(Ab,JAo),e(Ne,YAo),e(Ne,Lb),e(Lb,KAo),e(Lb,Mae),e(Mae,ZAo),e(Lb,e6o),e(Lb,Eae),e(Eae,o6o),e(Ne,r6o),e(Ne,yae),e(yae,t6o),e(Ne,a6o),g(VE,Ne,null),b(d,OLe,u),b(d,gd,u),e(gd,Bb),e(Bb,wae),g(WE,wae,null),e(gd,n6o),e(gd,Aae),e(Aae,s6o),b(d,XLe,u),b(d,er,u),g(QE,er,null),e(er,l6o),e(er,hd),e(hd,i6o),e(hd,Lae),e(Lae,d6o),e(hd,c6o),e(hd,Bae),e(Bae,f6o),e(hd,m6o),e(er,g6o),e(er,HE),e(HE,h6o),e(HE,xae),e(xae,p6o),e(HE,_6o),e(er,u6o),e(er,Qr),g(UE,Qr,null),e(Qr,b6o),e(Qr,kae),e(kae,v6o),e(Qr,T6o),e(Qr,pd),e(pd,F6o),e(pd,Rae),e(Rae,C6o),e(pd,M6o),e(pd,Sae),e(Sae,E6o),e(pd,y6o),e(Qr,w6o),e(Qr,Pae),e(Pae,A6o),e(Qr,L6o),g(JE,Qr,null),e(er,B6o),e(er,De),g(YE,De,null),e(De,x6o),e(De,$ae),e($ae,k6o),e(De,R6o),e(De,Ha),e(Ha,S6o),e(Ha,Iae),e(Iae,P6o),e(Ha,$6o),e(Ha,jae),e(jae,I6o),e(Ha,j6o),e(Ha,Nae),e(Nae,N6o),e(Ha,D6o),e(De,q6o),e(De,R),e(R,xb),e(xb,Dae),e(Dae,G6o),e(xb,O6o),e(xb,lj),e(lj,X6o),e(xb,z6o),e(R,V6o),e(R,kb),e(kb,qae),e(qae,W6o),e(kb,Q6o),e(kb,ij),e(ij,H6o),e(kb,U6o),e(R,J6o),e(R,Rb),e(Rb,Gae),e(Gae,Y6o),e(Rb,K6o),e(Rb,dj),e(dj,Z6o),e(Rb,e0o),e(R,o0o),e(R,Sb),e(Sb,Oae),e(Oae,r0o),e(Sb,t0o),e(Sb,cj),e(cj,a0o),e(Sb,n0o),e(R,s0o),e(R,Pb),e(Pb,Xae),e(Xae,l0o),e(Pb,i0o),e(Pb,fj),e(fj,d0o),e(Pb,c0o),e(R,f0o),e(R,$b),e($b,zae),e(zae,m0o),e($b,g0o),e($b,mj),e(mj,h0o),e($b,p0o),e(R,_0o),e(R,Ib),e(Ib,Vae),e(Vae,u0o),e(Ib,b0o),e(Ib,gj),e(gj,v0o),e(Ib,T0o),e(R,F0o),e(R,jb),e(jb,Wae),e(Wae,C0o),e(jb,M0o),e(jb,hj),e(hj,E0o),e(jb,y0o),e(R,w0o),e(R,Nb),e(Nb,Qae),e(Qae,A0o),e(Nb,L0o),e(Nb,pj),e(pj,B0o),e(Nb,x0o),e(R,k0o),e(R,Db),e(Db,Hae),e(Hae,R0o),e(Db,S0o),e(Db,_j),e(_j,P0o),e(Db,$0o),e(R,I0o),e(R,qb),e(qb,Uae),e(Uae,j0o),e(qb,N0o),e(qb,uj),e(uj,D0o),e(qb,q0o),e(R,G0o),e(R,Gb),e(Gb,Jae),e(Jae,O0o),e(Gb,X0o),e(Gb,bj),e(bj,z0o),e(Gb,V0o),e(R,W0o),e(R,Ob),e(Ob,Yae),e(Yae,Q0o),e(Ob,H0o),e(Ob,vj),e(vj,U0o),e(Ob,J0o),e(R,Y0o),e(R,Xb),e(Xb,Kae),e(Kae,K0o),e(Xb,Z0o),e(Xb,Tj),e(Tj,eLo),e(Xb,oLo),e(R,rLo),e(R,zb),e(zb,Zae),e(Zae,tLo),e(zb,aLo),e(zb,Fj),e(Fj,nLo),e(zb,sLo),e(R,lLo),e(R,Vb),e(Vb,ene),e(ene,iLo),e(Vb,dLo),e(Vb,Cj),e(Cj,cLo),e(Vb,fLo),e(R,mLo),e(R,Wb),e(Wb,one),e(one,gLo),e(Wb,hLo),e(Wb,Mj),e(Mj,pLo),e(Wb,_Lo),e(R,uLo),e(R,Qb),e(Qb,rne),e(rne,bLo),e(Qb,vLo),e(Qb,Ej),e(Ej,TLo),e(Qb,FLo),e(R,CLo),e(R,Hb),e(Hb,tne),e(tne,MLo),e(Hb,ELo),e(Hb,yj),e(yj,yLo),e(Hb,wLo),e(R,ALo),e(R,Ub),e(Ub,ane),e(ane,LLo),e(Ub,BLo),e(Ub,wj),e(wj,xLo),e(Ub,kLo),e(R,RLo),e(R,Jb),e(Jb,nne),e(nne,SLo),e(Jb,PLo),e(Jb,Aj),e(Aj,$Lo),e(Jb,ILo),e(R,jLo),e(R,Yb),e(Yb,sne),e(sne,NLo),e(Yb,DLo),e(Yb,Lj),e(Lj,qLo),e(Yb,GLo),e(R,OLo),e(R,Kb),e(Kb,lne),e(lne,XLo),e(Kb,zLo),e(Kb,Bj),e(Bj,VLo),e(Kb,WLo),e(R,QLo),e(R,Zb),e(Zb,ine),e(ine,HLo),e(Zb,ULo),e(Zb,xj),e(xj,JLo),e(Zb,YLo),e(R,KLo),e(R,e2),e(e2,dne),e(dne,ZLo),e(e2,e7o),e(e2,kj),e(kj,o7o),e(e2,r7o),e(R,t7o),e(R,o2),e(o2,cne),e(cne,a7o),e(o2,n7o),e(o2,Rj),e(Rj,s7o),e(o2,l7o),e(R,i7o),e(R,r2),e(r2,fne),e(fne,d7o),e(r2,c7o),e(r2,Sj),e(Sj,f7o),e(r2,m7o),e(R,g7o),e(R,t2),e(t2,mne),e(mne,h7o),e(t2,p7o),e(t2,Pj),e(Pj,_7o),e(t2,u7o),e(R,b7o),e(R,a2),e(a2,gne),e(gne,v7o),e(a2,T7o),e(a2,$j),e($j,F7o),e(a2,C7o),e(R,M7o),e(R,n2),e(n2,hne),e(hne,E7o),e(n2,y7o),e(n2,Ij),e(Ij,w7o),e(n2,A7o),e(R,L7o),e(R,s2),e(s2,pne),e(pne,B7o),e(s2,x7o),e(s2,jj),e(jj,k7o),e(s2,R7o),e(R,S7o),e(R,l2),e(l2,_ne),e(_ne,P7o),e(l2,$7o),e(l2,Nj),e(Nj,I7o),e(l2,j7o),e(R,N7o),e(R,i2),e(i2,une),e(une,D7o),e(i2,q7o),e(i2,Dj),e(Dj,G7o),e(i2,O7o),e(R,X7o),e(R,d2),e(d2,bne),e(bne,z7o),e(d2,V7o),e(d2,qj),e(qj,W7o),e(d2,Q7o),e(R,H7o),e(R,c2),e(c2,vne),e(vne,U7o),e(c2,J7o),e(c2,Gj),e(Gj,Y7o),e(c2,K7o),e(R,Z7o),e(R,f2),e(f2,Tne),e(Tne,eBo),e(f2,oBo),e(f2,Oj),e(Oj,rBo),e(f2,tBo),e(R,aBo),e(R,m2),e(m2,Fne),e(Fne,nBo),e(m2,sBo),e(m2,Xj),e(Xj,lBo),e(m2,iBo),e(R,dBo),e(R,g2),e(g2,Cne),e(Cne,cBo),e(g2,fBo),e(g2,zj),e(zj,mBo),e(g2,gBo),e(De,hBo),e(De,h2),e(h2,pBo),e(h2,Mne),e(Mne,_Bo),e(h2,uBo),e(h2,Ene),e(Ene,bBo),e(De,vBo),e(De,yne),e(yne,TBo),e(De,FBo),g(KE,De,null),b(d,zLe,u),b(d,_d,u),e(_d,p2),e(p2,wne),g(ZE,wne,null),e(_d,CBo),e(_d,Ane),e(Ane,MBo),b(d,VLe,u),b(d,or,u),g(e3,or,null),e(or,EBo),e(or,ud),e(ud,yBo),e(ud,Lne),e(Lne,wBo),e(ud,ABo),e(ud,Bne),e(Bne,LBo),e(ud,BBo),e(or,xBo),e(or,o3),e(o3,kBo),e(o3,xne),e(xne,RBo),e(o3,SBo),e(or,PBo),e(or,Hr),g(r3,Hr,null),e(Hr,$Bo),e(Hr,kne),e(kne,IBo),e(Hr,jBo),e(Hr,bd),e(bd,NBo),e(bd,Rne),e(Rne,DBo),e(bd,qBo),e(bd,Sne),e(Sne,GBo),e(bd,OBo),e(Hr,XBo),e(Hr,Pne),e(Pne,zBo),e(Hr,VBo),g(t3,Hr,null),e(or,WBo),e(or,qe),g(a3,qe,null),e(qe,QBo),e(qe,$ne),e($ne,HBo),e(qe,UBo),e(qe,Ua),e(Ua,JBo),e(Ua,Ine),e(Ine,YBo),e(Ua,KBo),e(Ua,jne),e(jne,ZBo),e(Ua,exo),e(Ua,Nne),e(Nne,oxo),e(Ua,rxo),e(qe,txo),e(qe,Dne),e(Dne,_2),e(_2,qne),e(qne,axo),e(_2,nxo),e(_2,Vj),e(Vj,sxo),e(_2,lxo),e(qe,ixo),e(qe,u2),e(u2,dxo),e(u2,Gne),e(Gne,cxo),e(u2,fxo),e(u2,One),e(One,mxo),e(qe,gxo),e(qe,Xne),e(Xne,hxo),e(qe,pxo),g(n3,qe,null),b(d,WLe,u),b(d,vd,u),e(vd,b2),e(b2,zne),g(s3,zne,null),e(vd,_xo),e(vd,Vne),e(Vne,uxo),b(d,QLe,u),b(d,rr,u),g(l3,rr,null),e(rr,bxo),e(rr,Td),e(Td,vxo),e(Td,Wne),e(Wne,Txo),e(Td,Fxo),e(Td,Qne),e(Qne,Cxo),e(Td,Mxo),e(rr,Exo),e(rr,i3),e(i3,yxo),e(i3,Hne),e(Hne,wxo),e(i3,Axo),e(rr,Lxo),e(rr,Ur),g(d3,Ur,null),e(Ur,Bxo),e(Ur,Une),e(Une,xxo),e(Ur,kxo),e(Ur,Fd),e(Fd,Rxo),e(Fd,Jne),e(Jne,Sxo),e(Fd,Pxo),e(Fd,Yne),e(Yne,$xo),e(Fd,Ixo),e(Ur,jxo),e(Ur,Kne),e(Kne,Nxo),e(Ur,Dxo),g(c3,Ur,null),e(rr,qxo),e(rr,Ge),g(f3,Ge,null),e(Ge,Gxo),e(Ge,Zne),e(Zne,Oxo),e(Ge,Xxo),e(Ge,Ja),e(Ja,zxo),e(Ja,ese),e(ese,Vxo),e(Ja,Wxo),e(Ja,ose),e(ose,Qxo),e(Ja,Hxo),e(Ja,rse),e(rse,Uxo),e(Ja,Jxo),e(Ge,Yxo),e(Ge,be),e(be,v2),e(v2,tse),e(tse,Kxo),e(v2,Zxo),e(v2,Wj),e(Wj,eko),e(v2,oko),e(be,rko),e(be,T2),e(T2,ase),e(ase,tko),e(T2,ako),e(T2,Qj),e(Qj,nko),e(T2,sko),e(be,lko),e(be,Rs),e(Rs,nse),e(nse,iko),e(Rs,dko),e(Rs,Hj),e(Hj,cko),e(Rs,fko),e(Rs,Uj),e(Uj,mko),e(Rs,gko),e(be,hko),e(be,F2),e(F2,sse),e(sse,pko),e(F2,_ko),e(F2,Jj),e(Jj,uko),e(F2,bko),e(be,vko),e(be,la),e(la,lse),e(lse,Tko),e(la,Fko),e(la,Yj),e(Yj,Cko),e(la,Mko),e(la,Kj),e(Kj,Eko),e(la,yko),e(la,Zj),e(Zj,wko),e(la,Ako),e(be,Lko),e(be,C2),e(C2,ise),e(ise,Bko),e(C2,xko),e(C2,eN),e(eN,kko),e(C2,Rko),e(be,Sko),e(be,M2),e(M2,dse),e(dse,Pko),e(M2,$ko),e(M2,oN),e(oN,Iko),e(M2,jko),e(be,Nko),e(be,E2),e(E2,cse),e(cse,Dko),e(E2,qko),e(E2,rN),e(rN,Gko),e(E2,Oko),e(be,Xko),e(be,y2),e(y2,fse),e(fse,zko),e(y2,Vko),e(y2,tN),e(tN,Wko),e(y2,Qko),e(Ge,Hko),e(Ge,w2),e(w2,Uko),e(w2,mse),e(mse,Jko),e(w2,Yko),e(w2,gse),e(gse,Kko),e(Ge,Zko),e(Ge,hse),e(hse,eRo),e(Ge,oRo),g(m3,Ge,null),b(d,HLe,u),b(d,Cd,u),e(Cd,A2),e(A2,pse),g(g3,pse,null),e(Cd,rRo),e(Cd,_se),e(_se,tRo),b(d,ULe,u),b(d,tr,u),g(h3,tr,null),e(tr,aRo),e(tr,Md),e(Md,nRo),e(Md,use),e(use,sRo),e(Md,lRo),e(Md,bse),e(bse,iRo),e(Md,dRo),e(tr,cRo),e(tr,p3),e(p3,fRo),e(p3,vse),e(vse,mRo),e(p3,gRo),e(tr,hRo),e(tr,Jr),g(_3,Jr,null),e(Jr,pRo),e(Jr,Tse),e(Tse,_Ro),e(Jr,uRo),e(Jr,Ed),e(Ed,bRo),e(Ed,Fse),e(Fse,vRo),e(Ed,TRo),e(Ed,Cse),e(Cse,FRo),e(Ed,CRo),e(Jr,MRo),e(Jr,Mse),e(Mse,ERo),e(Jr,yRo),g(u3,Jr,null),e(tr,wRo),e(tr,Oe),g(b3,Oe,null),e(Oe,ARo),e(Oe,Ese),e(Ese,LRo),e(Oe,BRo),e(Oe,Ya),e(Ya,xRo),e(Ya,yse),e(yse,kRo),e(Ya,RRo),e(Ya,wse),e(wse,SRo),e(Ya,PRo),e(Ya,Ase),e(Ase,$Ro),e(Ya,IRo),e(Oe,jRo),e(Oe,Lse),e(Lse,L2),e(L2,Bse),e(Bse,NRo),e(L2,DRo),e(L2,aN),e(aN,qRo),e(L2,GRo),e(Oe,ORo),e(Oe,B2),e(B2,XRo),e(B2,xse),e(xse,zRo),e(B2,VRo),e(B2,kse),e(kse,WRo),e(Oe,QRo),e(Oe,Rse),e(Rse,HRo),e(Oe,URo),g(v3,Oe,null),b(d,JLe,u),b(d,yd,u),e(yd,x2),e(x2,Sse),g(T3,Sse,null),e(yd,JRo),e(yd,Pse),e(Pse,YRo),b(d,YLe,u),b(d,ar,u),g(F3,ar,null),e(ar,KRo),e(ar,wd),e(wd,ZRo),e(wd,$se),e($se,eSo),e(wd,oSo),e(wd,Ise),e(Ise,rSo),e(wd,tSo),e(ar,aSo),e(ar,C3),e(C3,nSo),e(C3,jse),e(jse,sSo),e(C3,lSo),e(ar,iSo),e(ar,Yr),g(M3,Yr,null),e(Yr,dSo),e(Yr,Nse),e(Nse,cSo),e(Yr,fSo),e(Yr,Ad),e(Ad,mSo),e(Ad,Dse),e(Dse,gSo),e(Ad,hSo),e(Ad,qse),e(qse,pSo),e(Ad,_So),e(Yr,uSo),e(Yr,Gse),e(Gse,bSo),e(Yr,vSo),g(E3,Yr,null),e(ar,TSo),e(ar,Xe),g(y3,Xe,null),e(Xe,FSo),e(Xe,Ose),e(Ose,CSo),e(Xe,MSo),e(Xe,Ka),e(Ka,ESo),e(Ka,Xse),e(Xse,ySo),e(Ka,wSo),e(Ka,zse),e(zse,ASo),e(Ka,LSo),e(Ka,Vse),e(Vse,BSo),e(Ka,xSo),e(Xe,kSo),e(Xe,ao),e(ao,k2),e(k2,Wse),e(Wse,RSo),e(k2,SSo),e(k2,nN),e(nN,PSo),e(k2,$So),e(ao,ISo),e(ao,R2),e(R2,Qse),e(Qse,jSo),e(R2,NSo),e(R2,sN),e(sN,DSo),e(R2,qSo),e(ao,GSo),e(ao,S2),e(S2,Hse),e(Hse,OSo),e(S2,XSo),e(S2,lN),e(lN,zSo),e(S2,VSo),e(ao,WSo),e(ao,P2),e(P2,Use),e(Use,QSo),e(P2,HSo),e(P2,iN),e(iN,USo),e(P2,JSo),e(ao,YSo),e(ao,$2),e($2,Jse),e(Jse,KSo),e($2,ZSo),e($2,dN),e(dN,ePo),e($2,oPo),e(ao,rPo),e(ao,I2),e(I2,Yse),e(Yse,tPo),e(I2,aPo),e(I2,cN),e(cN,nPo),e(I2,sPo),e(ao,lPo),e(ao,j2),e(j2,Kse),e(Kse,iPo),e(j2,dPo),e(j2,fN),e(fN,cPo),e(j2,fPo),e(Xe,mPo),e(Xe,N2),e(N2,gPo),e(N2,Zse),e(Zse,hPo),e(N2,pPo),e(N2,ele),e(ele,_Po),e(Xe,uPo),e(Xe,ole),e(ole,bPo),e(Xe,vPo),g(w3,Xe,null),b(d,KLe,u),b(d,Ld,u),e(Ld,D2),e(D2,rle),g(A3,rle,null),e(Ld,TPo),e(Ld,tle),e(tle,FPo),b(d,ZLe,u),b(d,nr,u),g(L3,nr,null),e(nr,CPo),e(nr,Bd),e(Bd,MPo),e(Bd,ale),e(ale,EPo),e(Bd,yPo),e(Bd,nle),e(nle,wPo),e(Bd,APo),e(nr,LPo),e(nr,B3),e(B3,BPo),e(B3,sle),e(sle,xPo),e(B3,kPo),e(nr,RPo),e(nr,Kr),g(x3,Kr,null),e(Kr,SPo),e(Kr,lle),e(lle,PPo),e(Kr,$Po),e(Kr,xd),e(xd,IPo),e(xd,ile),e(ile,jPo),e(xd,NPo),e(xd,dle),e(dle,DPo),e(xd,qPo),e(Kr,GPo),e(Kr,cle),e(cle,OPo),e(Kr,XPo),g(k3,Kr,null),e(nr,zPo),e(nr,ze),g(R3,ze,null),e(ze,VPo),e(ze,fle),e(fle,WPo),e(ze,QPo),e(ze,Za),e(Za,HPo),e(Za,mle),e(mle,UPo),e(Za,JPo),e(Za,gle),e(gle,YPo),e(Za,KPo),e(Za,hle),e(hle,ZPo),e(Za,e$o),e(ze,o$o),e(ze,kd),e(kd,q2),e(q2,ple),e(ple,r$o),e(q2,t$o),e(q2,mN),e(mN,a$o),e(q2,n$o),e(kd,s$o),e(kd,G2),e(G2,_le),e(_le,l$o),e(G2,i$o),e(G2,gN),e(gN,d$o),e(G2,c$o),e(kd,f$o),e(kd,O2),e(O2,ule),e(ule,m$o),e(O2,g$o),e(O2,hN),e(hN,h$o),e(O2,p$o),e(ze,_$o),e(ze,X2),e(X2,u$o),e(X2,ble),e(ble,b$o),e(X2,v$o),e(X2,vle),e(vle,T$o),e(ze,F$o),e(ze,Tle),e(Tle,C$o),e(ze,M$o),g(S3,ze,null),b(d,e7e,u),b(d,Rd,u),e(Rd,z2),e(z2,Fle),g(P3,Fle,null),e(Rd,E$o),e(Rd,Cle),e(Cle,y$o),b(d,o7e,u),b(d,sr,u),g($3,sr,null),e(sr,w$o),e(sr,Sd),e(Sd,A$o),e(Sd,Mle),e(Mle,L$o),e(Sd,B$o),e(Sd,Ele),e(Ele,x$o),e(Sd,k$o),e(sr,R$o),e(sr,I3),e(I3,S$o),e(I3,yle),e(yle,P$o),e(I3,$$o),e(sr,I$o),e(sr,Zr),g(j3,Zr,null),e(Zr,j$o),e(Zr,wle),e(wle,N$o),e(Zr,D$o),e(Zr,Pd),e(Pd,q$o),e(Pd,Ale),e(Ale,G$o),e(Pd,O$o),e(Pd,Lle),e(Lle,X$o),e(Pd,z$o),e(Zr,V$o),e(Zr,Ble),e(Ble,W$o),e(Zr,Q$o),g(N3,Zr,null),e(sr,H$o),e(sr,Ve),g(D3,Ve,null),e(Ve,U$o),e(Ve,xle),e(xle,J$o),e(Ve,Y$o),e(Ve,en),e(en,K$o),e(en,kle),e(kle,Z$o),e(en,eIo),e(en,Rle),e(Rle,oIo),e(en,rIo),e(en,Sle),e(Sle,tIo),e(en,aIo),e(Ve,nIo),e(Ve,no),e(no,V2),e(V2,Ple),e(Ple,sIo),e(V2,lIo),e(V2,pN),e(pN,iIo),e(V2,dIo),e(no,cIo),e(no,W2),e(W2,$le),e($le,fIo),e(W2,mIo),e(W2,_N),e(_N,gIo),e(W2,hIo),e(no,pIo),e(no,Q2),e(Q2,Ile),e(Ile,_Io),e(Q2,uIo),e(Q2,uN),e(uN,bIo),e(Q2,vIo),e(no,TIo),e(no,H2),e(H2,jle),e(jle,FIo),e(H2,CIo),e(H2,bN),e(bN,MIo),e(H2,EIo),e(no,yIo),e(no,U2),e(U2,Nle),e(Nle,wIo),e(U2,AIo),e(U2,vN),e(vN,LIo),e(U2,BIo),e(no,xIo),e(no,J2),e(J2,Dle),e(Dle,kIo),e(J2,RIo),e(J2,TN),e(TN,SIo),e(J2,PIo),e(no,$Io),e(no,Y2),e(Y2,qle),e(qle,IIo),e(Y2,jIo),e(Y2,FN),e(FN,NIo),e(Y2,DIo),e(Ve,qIo),e(Ve,K2),e(K2,GIo),e(K2,Gle),e(Gle,OIo),e(K2,XIo),e(K2,Ole),e(Ole,zIo),e(Ve,VIo),e(Ve,Xle),e(Xle,WIo),e(Ve,QIo),g(q3,Ve,null),b(d,r7e,u),b(d,$d,u),e($d,Z2),e(Z2,zle),g(G3,zle,null),e($d,HIo),e($d,Vle),e(Vle,UIo),b(d,t7e,u),b(d,lr,u),g(O3,lr,null),e(lr,JIo),e(lr,Id),e(Id,YIo),e(Id,Wle),e(Wle,KIo),e(Id,ZIo),e(Id,Qle),e(Qle,ejo),e(Id,ojo),e(lr,rjo),e(lr,X3),e(X3,tjo),e(X3,Hle),e(Hle,ajo),e(X3,njo),e(lr,sjo),e(lr,et),g(z3,et,null),e(et,ljo),e(et,Ule),e(Ule,ijo),e(et,djo),e(et,jd),e(jd,cjo),e(jd,Jle),e(Jle,fjo),e(jd,mjo),e(jd,Yle),e(Yle,gjo),e(jd,hjo),e(et,pjo),e(et,Kle),e(Kle,_jo),e(et,ujo),g(V3,et,null),e(lr,bjo),e(lr,We),g(W3,We,null),e(We,vjo),e(We,Zle),e(Zle,Tjo),e(We,Fjo),e(We,on),e(on,Cjo),e(on,eie),e(eie,Mjo),e(on,Ejo),e(on,oie),e(oie,yjo),e(on,wjo),e(on,rie),e(rie,Ajo),e(on,Ljo),e(We,Bjo),e(We,Q3),e(Q3,ev),e(ev,tie),e(tie,xjo),e(ev,kjo),e(ev,CN),e(CN,Rjo),e(ev,Sjo),e(Q3,Pjo),e(Q3,ov),e(ov,aie),e(aie,$jo),e(ov,Ijo),e(ov,MN),e(MN,jjo),e(ov,Njo),e(We,Djo),e(We,rv),e(rv,qjo),e(rv,nie),e(nie,Gjo),e(rv,Ojo),e(rv,sie),e(sie,Xjo),e(We,zjo),e(We,lie),e(lie,Vjo),e(We,Wjo),g(H3,We,null),b(d,a7e,u),b(d,Nd,u),e(Nd,tv),e(tv,iie),g(U3,iie,null),e(Nd,Qjo),e(Nd,die),e(die,Hjo),b(d,n7e,u),b(d,ir,u),g(J3,ir,null),e(ir,Ujo),e(ir,Dd),e(Dd,Jjo),e(Dd,cie),e(cie,Yjo),e(Dd,Kjo),e(Dd,fie),e(fie,Zjo),e(Dd,eNo),e(ir,oNo),e(ir,Y3),e(Y3,rNo),e(Y3,mie),e(mie,tNo),e(Y3,aNo),e(ir,nNo),e(ir,ot),g(K3,ot,null),e(ot,sNo),e(ot,gie),e(gie,lNo),e(ot,iNo),e(ot,qd),e(qd,dNo),e(qd,hie),e(hie,cNo),e(qd,fNo),e(qd,pie),e(pie,mNo),e(qd,gNo),e(ot,hNo),e(ot,_ie),e(_ie,pNo),e(ot,_No),g(Z3,ot,null),e(ir,uNo),e(ir,Qe),g(ey,Qe,null),e(Qe,bNo),e(Qe,uie),e(uie,vNo),e(Qe,TNo),e(Qe,rn),e(rn,FNo),e(rn,bie),e(bie,CNo),e(rn,MNo),e(rn,vie),e(vie,ENo),e(rn,yNo),e(rn,Tie),e(Tie,wNo),e(rn,ANo),e(Qe,LNo),e(Qe,Gd),e(Gd,av),e(av,Fie),e(Fie,BNo),e(av,xNo),e(av,EN),e(EN,kNo),e(av,RNo),e(Gd,SNo),e(Gd,nv),e(nv,Cie),e(Cie,PNo),e(nv,$No),e(nv,yN),e(yN,INo),e(nv,jNo),e(Gd,NNo),e(Gd,sv),e(sv,Mie),e(Mie,DNo),e(sv,qNo),e(sv,wN),e(wN,GNo),e(sv,ONo),e(Qe,XNo),e(Qe,lv),e(lv,zNo),e(lv,Eie),e(Eie,VNo),e(lv,WNo),e(lv,yie),e(yie,QNo),e(Qe,HNo),e(Qe,wie),e(wie,UNo),e(Qe,JNo),g(oy,Qe,null),b(d,s7e,u),b(d,Od,u),e(Od,iv),e(iv,Aie),g(ry,Aie,null),e(Od,YNo),e(Od,Lie),e(Lie,KNo),b(d,l7e,u),b(d,dr,u),g(ty,dr,null),e(dr,ZNo),e(dr,Xd),e(Xd,eDo),e(Xd,Bie),e(Bie,oDo),e(Xd,rDo),e(Xd,xie),e(xie,tDo),e(Xd,aDo),e(dr,nDo),e(dr,ay),e(ay,sDo),e(ay,kie),e(kie,lDo),e(ay,iDo),e(dr,dDo),e(dr,rt),g(ny,rt,null),e(rt,cDo),e(rt,Rie),e(Rie,fDo),e(rt,mDo),e(rt,zd),e(zd,gDo),e(zd,Sie),e(Sie,hDo),e(zd,pDo),e(zd,Pie),e(Pie,_Do),e(zd,uDo),e(rt,bDo),e(rt,$ie),e($ie,vDo),e(rt,TDo),g(sy,rt,null),e(dr,FDo),e(dr,He),g(ly,He,null),e(He,CDo),e(He,Iie),e(Iie,MDo),e(He,EDo),e(He,tn),e(tn,yDo),e(tn,jie),e(jie,wDo),e(tn,ADo),e(tn,Nie),e(Nie,LDo),e(tn,BDo),e(tn,Die),e(Die,xDo),e(tn,kDo),e(He,RDo),e(He,Vd),e(Vd,dv),e(dv,qie),e(qie,SDo),e(dv,PDo),e(dv,AN),e(AN,$Do),e(dv,IDo),e(Vd,jDo),e(Vd,cv),e(cv,Gie),e(Gie,NDo),e(cv,DDo),e(cv,LN),e(LN,qDo),e(cv,GDo),e(Vd,ODo),e(Vd,fv),e(fv,Oie),e(Oie,XDo),e(fv,zDo),e(fv,BN),e(BN,VDo),e(fv,WDo),e(He,QDo),e(He,mv),e(mv,HDo),e(mv,Xie),e(Xie,UDo),e(mv,JDo),e(mv,zie),e(zie,YDo),e(He,KDo),e(He,Vie),e(Vie,ZDo),e(He,eqo),g(iy,He,null),b(d,i7e,u),b(d,Wd,u),e(Wd,gv),e(gv,Wie),g(dy,Wie,null),e(Wd,oqo),e(Wd,Qie),e(Qie,rqo),b(d,d7e,u),b(d,cr,u),g(cy,cr,null),e(cr,tqo),e(cr,Qd),e(Qd,aqo),e(Qd,Hie),e(Hie,nqo),e(Qd,sqo),e(Qd,Uie),e(Uie,lqo),e(Qd,iqo),e(cr,dqo),e(cr,fy),e(fy,cqo),e(fy,Jie),e(Jie,fqo),e(fy,mqo),e(cr,gqo),e(cr,tt),g(my,tt,null),e(tt,hqo),e(tt,Yie),e(Yie,pqo),e(tt,_qo),e(tt,Hd),e(Hd,uqo),e(Hd,Kie),e(Kie,bqo),e(Hd,vqo),e(Hd,Zie),e(Zie,Tqo),e(Hd,Fqo),e(tt,Cqo),e(tt,ede),e(ede,Mqo),e(tt,Eqo),g(gy,tt,null),e(cr,yqo),e(cr,Ue),g(hy,Ue,null),e(Ue,wqo),e(Ue,ode),e(ode,Aqo),e(Ue,Lqo),e(Ue,an),e(an,Bqo),e(an,rde),e(rde,xqo),e(an,kqo),e(an,tde),e(tde,Rqo),e(an,Sqo),e(an,ade),e(ade,Pqo),e(an,$qo),e(Ue,Iqo),e(Ue,nde),e(nde,hv),e(hv,sde),e(sde,jqo),e(hv,Nqo),e(hv,xN),e(xN,Dqo),e(hv,qqo),e(Ue,Gqo),e(Ue,pv),e(pv,Oqo),e(pv,lde),e(lde,Xqo),e(pv,zqo),e(pv,ide),e(ide,Vqo),e(Ue,Wqo),e(Ue,dde),e(dde,Qqo),e(Ue,Hqo),g(py,Ue,null),b(d,c7e,u),b(d,Ud,u),e(Ud,_v),e(_v,cde),g(_y,cde,null),e(Ud,Uqo),e(Ud,fde),e(fde,Jqo),b(d,f7e,u),b(d,fr,u),g(uy,fr,null),e(fr,Yqo),e(fr,Jd),e(Jd,Kqo),e(Jd,mde),e(mde,Zqo),e(Jd,eGo),e(Jd,gde),e(gde,oGo),e(Jd,rGo),e(fr,tGo),e(fr,by),e(by,aGo),e(by,hde),e(hde,nGo),e(by,sGo),e(fr,lGo),e(fr,at),g(vy,at,null),e(at,iGo),e(at,pde),e(pde,dGo),e(at,cGo),e(at,Yd),e(Yd,fGo),e(Yd,_de),e(_de,mGo),e(Yd,gGo),e(Yd,ude),e(ude,hGo),e(Yd,pGo),e(at,_Go),e(at,bde),e(bde,uGo),e(at,bGo),g(Ty,at,null),e(fr,vGo),e(fr,Je),g(Fy,Je,null),e(Je,TGo),e(Je,vde),e(vde,FGo),e(Je,CGo),e(Je,nn),e(nn,MGo),e(nn,Tde),e(Tde,EGo),e(nn,yGo),e(nn,Fde),e(Fde,wGo),e(nn,AGo),e(nn,Cde),e(Cde,LGo),e(nn,BGo),e(Je,xGo),e(Je,Mde),e(Mde,uv),e(uv,Ede),e(Ede,kGo),e(uv,RGo),e(uv,kN),e(kN,SGo),e(uv,PGo),e(Je,$Go),e(Je,bv),e(bv,IGo),e(bv,yde),e(yde,jGo),e(bv,NGo),e(bv,wde),e(wde,DGo),e(Je,qGo),e(Je,Ade),e(Ade,GGo),e(Je,OGo),g(Cy,Je,null),b(d,m7e,u),b(d,Kd,u),e(Kd,vv),e(vv,Lde),g(My,Lde,null),e(Kd,XGo),e(Kd,Bde),e(Bde,zGo),b(d,g7e,u),b(d,mr,u),g(Ey,mr,null),e(mr,VGo),e(mr,Zd),e(Zd,WGo),e(Zd,xde),e(xde,QGo),e(Zd,HGo),e(Zd,kde),e(kde,UGo),e(Zd,JGo),e(mr,YGo),e(mr,yy),e(yy,KGo),e(yy,Rde),e(Rde,ZGo),e(yy,eOo),e(mr,oOo),e(mr,nt),g(wy,nt,null),e(nt,rOo),e(nt,Sde),e(Sde,tOo),e(nt,aOo),e(nt,ec),e(ec,nOo),e(ec,Pde),e(Pde,sOo),e(ec,lOo),e(ec,$de),e($de,iOo),e(ec,dOo),e(nt,cOo),e(nt,Ide),e(Ide,fOo),e(nt,mOo),g(Ay,nt,null),e(mr,gOo),e(mr,Ye),g(Ly,Ye,null),e(Ye,hOo),e(Ye,jde),e(jde,pOo),e(Ye,_Oo),e(Ye,sn),e(sn,uOo),e(sn,Nde),e(Nde,bOo),e(sn,vOo),e(sn,Dde),e(Dde,TOo),e(sn,FOo),e(sn,qde),e(qde,COo),e(sn,MOo),e(Ye,EOo),e(Ye,By),e(By,Tv),e(Tv,Gde),e(Gde,yOo),e(Tv,wOo),e(Tv,RN),e(RN,AOo),e(Tv,LOo),e(By,BOo),e(By,Fv),e(Fv,Ode),e(Ode,xOo),e(Fv,kOo),e(Fv,SN),e(SN,ROo),e(Fv,SOo),e(Ye,POo),e(Ye,Cv),e(Cv,$Oo),e(Cv,Xde),e(Xde,IOo),e(Cv,jOo),e(Cv,zde),e(zde,NOo),e(Ye,DOo),e(Ye,Vde),e(Vde,qOo),e(Ye,GOo),g(xy,Ye,null),b(d,h7e,u),b(d,oc,u),e(oc,Mv),e(Mv,Wde),g(ky,Wde,null),e(oc,OOo),e(oc,Qde),e(Qde,XOo),b(d,p7e,u),b(d,gr,u),g(Ry,gr,null),e(gr,zOo),e(gr,rc),e(rc,VOo),e(rc,Hde),e(Hde,WOo),e(rc,QOo),e(rc,Ude),e(Ude,HOo),e(rc,UOo),e(gr,JOo),e(gr,Sy),e(Sy,YOo),e(Sy,Jde),e(Jde,KOo),e(Sy,ZOo),e(gr,eXo),e(gr,st),g(Py,st,null),e(st,oXo),e(st,Yde),e(Yde,rXo),e(st,tXo),e(st,tc),e(tc,aXo),e(tc,Kde),e(Kde,nXo),e(tc,sXo),e(tc,Zde),e(Zde,lXo),e(tc,iXo),e(st,dXo),e(st,ece),e(ece,cXo),e(st,fXo),g($y,st,null),e(gr,mXo),e(gr,go),g(Iy,go,null),e(go,gXo),e(go,oce),e(oce,hXo),e(go,pXo),e(go,ln),e(ln,_Xo),e(ln,rce),e(rce,uXo),e(ln,bXo),e(ln,tce),e(tce,vXo),e(ln,TXo),e(ln,ace),e(ace,FXo),e(ln,CXo),e(go,MXo),e(go,B),e(B,Ev),e(Ev,nce),e(nce,EXo),e(Ev,yXo),e(Ev,PN),e(PN,wXo),e(Ev,AXo),e(B,LXo),e(B,yv),e(yv,sce),e(sce,BXo),e(yv,xXo),e(yv,$N),e($N,kXo),e(yv,RXo),e(B,SXo),e(B,wv),e(wv,lce),e(lce,PXo),e(wv,$Xo),e(wv,IN),e(IN,IXo),e(wv,jXo),e(B,NXo),e(B,Av),e(Av,ice),e(ice,DXo),e(Av,qXo),e(Av,jN),e(jN,GXo),e(Av,OXo),e(B,XXo),e(B,Lv),e(Lv,dce),e(dce,zXo),e(Lv,VXo),e(Lv,NN),e(NN,WXo),e(Lv,QXo),e(B,HXo),e(B,Bv),e(Bv,cce),e(cce,UXo),e(Bv,JXo),e(Bv,DN),e(DN,YXo),e(Bv,KXo),e(B,ZXo),e(B,xv),e(xv,fce),e(fce,ezo),e(xv,ozo),e(xv,qN),e(qN,rzo),e(xv,tzo),e(B,azo),e(B,kv),e(kv,mce),e(mce,nzo),e(kv,szo),e(kv,GN),e(GN,lzo),e(kv,izo),e(B,dzo),e(B,Rv),e(Rv,gce),e(gce,czo),e(Rv,fzo),e(Rv,ON),e(ON,mzo),e(Rv,gzo),e(B,hzo),e(B,Sv),e(Sv,hce),e(hce,pzo),e(Sv,_zo),e(Sv,XN),e(XN,uzo),e(Sv,bzo),e(B,vzo),e(B,Pv),e(Pv,pce),e(pce,Tzo),e(Pv,Fzo),e(Pv,zN),e(zN,Czo),e(Pv,Mzo),e(B,Ezo),e(B,$v),e($v,_ce),e(_ce,yzo),e($v,wzo),e($v,VN),e(VN,Azo),e($v,Lzo),e(B,Bzo),e(B,Iv),e(Iv,uce),e(uce,xzo),e(Iv,kzo),e(Iv,WN),e(WN,Rzo),e(Iv,Szo),e(B,Pzo),e(B,jv),e(jv,bce),e(bce,$zo),e(jv,Izo),e(jv,QN),e(QN,jzo),e(jv,Nzo),e(B,Dzo),e(B,Nv),e(Nv,vce),e(vce,qzo),e(Nv,Gzo),e(Nv,HN),e(HN,Ozo),e(Nv,Xzo),e(B,zzo),e(B,Dv),e(Dv,Tce),e(Tce,Vzo),e(Dv,Wzo),e(Dv,UN),e(UN,Qzo),e(Dv,Hzo),e(B,Uzo),e(B,Ss),e(Ss,Fce),e(Fce,Jzo),e(Ss,Yzo),e(Ss,JN),e(JN,Kzo),e(Ss,Zzo),e(Ss,YN),e(YN,eVo),e(Ss,oVo),e(B,rVo),e(B,qv),e(qv,Cce),e(Cce,tVo),e(qv,aVo),e(qv,KN),e(KN,nVo),e(qv,sVo),e(B,lVo),e(B,Gv),e(Gv,Mce),e(Mce,iVo),e(Gv,dVo),e(Gv,ZN),e(ZN,cVo),e(Gv,fVo),e(B,mVo),e(B,Ov),e(Ov,Ece),e(Ece,gVo),e(Ov,hVo),e(Ov,eD),e(eD,pVo),e(Ov,_Vo),e(B,uVo),e(B,Xv),e(Xv,yce),e(yce,bVo),e(Xv,vVo),e(Xv,oD),e(oD,TVo),e(Xv,FVo),e(B,CVo),e(B,zv),e(zv,wce),e(wce,MVo),e(zv,EVo),e(zv,rD),e(rD,yVo),e(zv,wVo),e(B,AVo),e(B,Vv),e(Vv,Ace),e(Ace,LVo),e(Vv,BVo),e(Vv,tD),e(tD,xVo),e(Vv,kVo),e(B,RVo),e(B,Wv),e(Wv,Lce),e(Lce,SVo),e(Wv,PVo),e(Wv,aD),e(aD,$Vo),e(Wv,IVo),e(B,jVo),e(B,Qv),e(Qv,Bce),e(Bce,NVo),e(Qv,DVo),e(Qv,nD),e(nD,qVo),e(Qv,GVo),e(B,OVo),e(B,Hv),e(Hv,xce),e(xce,XVo),e(Hv,zVo),e(Hv,sD),e(sD,VVo),e(Hv,WVo),e(B,QVo),e(B,Uv),e(Uv,kce),e(kce,HVo),e(Uv,UVo),e(Uv,lD),e(lD,JVo),e(Uv,YVo),e(B,KVo),e(B,Jv),e(Jv,Rce),e(Rce,ZVo),e(Jv,eWo),e(Jv,iD),e(iD,oWo),e(Jv,rWo),e(B,tWo),e(B,Yv),e(Yv,Sce),e(Sce,aWo),e(Yv,nWo),e(Yv,dD),e(dD,sWo),e(Yv,lWo),e(B,iWo),e(B,Kv),e(Kv,Pce),e(Pce,dWo),e(Kv,cWo),e(Kv,cD),e(cD,fWo),e(Kv,mWo),e(B,gWo),e(B,Zv),e(Zv,$ce),e($ce,hWo),e(Zv,pWo),e(Zv,fD),e(fD,_Wo),e(Zv,uWo),e(B,bWo),e(B,eT),e(eT,Ice),e(Ice,vWo),e(eT,TWo),e(eT,mD),e(mD,FWo),e(eT,CWo),e(B,MWo),e(B,oT),e(oT,jce),e(jce,EWo),e(oT,yWo),e(oT,gD),e(gD,wWo),e(oT,AWo),e(B,LWo),e(B,rT),e(rT,Nce),e(Nce,BWo),e(rT,xWo),e(rT,hD),e(hD,kWo),e(rT,RWo),e(B,SWo),e(B,tT),e(tT,Dce),e(Dce,PWo),e(tT,$Wo),e(tT,pD),e(pD,IWo),e(tT,jWo),e(B,NWo),e(B,aT),e(aT,qce),e(qce,DWo),e(aT,qWo),e(aT,_D),e(_D,GWo),e(aT,OWo),e(B,XWo),e(B,nT),e(nT,Gce),e(Gce,zWo),e(nT,VWo),e(nT,uD),e(uD,WWo),e(nT,QWo),e(B,HWo),e(B,sT),e(sT,Oce),e(Oce,UWo),e(sT,JWo),e(sT,bD),e(bD,YWo),e(sT,KWo),e(B,ZWo),e(B,lT),e(lT,Xce),e(Xce,eQo),e(lT,oQo),e(lT,vD),e(vD,rQo),e(lT,tQo),e(B,aQo),e(B,iT),e(iT,zce),e(zce,nQo),e(iT,sQo),e(iT,TD),e(TD,lQo),e(iT,iQo),e(B,dQo),e(B,dT),e(dT,Vce),e(Vce,cQo),e(dT,fQo),e(dT,FD),e(FD,mQo),e(dT,gQo),e(B,hQo),e(B,cT),e(cT,Wce),e(Wce,pQo),e(cT,_Qo),e(cT,CD),e(CD,uQo),e(cT,bQo),e(go,vQo),e(go,Qce),e(Qce,TQo),e(go,FQo),g(jy,go,null),b(d,_7e,u),b(d,ac,u),e(ac,fT),e(fT,Hce),g(Ny,Hce,null),e(ac,CQo),e(ac,Uce),e(Uce,MQo),b(d,u7e,u),b(d,hr,u),g(Dy,hr,null),e(hr,EQo),e(hr,nc),e(nc,yQo),e(nc,Jce),e(Jce,wQo),e(nc,AQo),e(nc,Yce),e(Yce,LQo),e(nc,BQo),e(hr,xQo),e(hr,qy),e(qy,kQo),e(qy,Kce),e(Kce,RQo),e(qy,SQo),e(hr,PQo),e(hr,lt),g(Gy,lt,null),e(lt,$Qo),e(lt,Zce),e(Zce,IQo),e(lt,jQo),e(lt,sc),e(sc,NQo),e(sc,efe),e(efe,DQo),e(sc,qQo),e(sc,ofe),e(ofe,GQo),e(sc,OQo),e(lt,XQo),e(lt,rfe),e(rfe,zQo),e(lt,VQo),g(Oy,lt,null),e(hr,WQo),e(hr,ho),g(Xy,ho,null),e(ho,QQo),e(ho,tfe),e(tfe,HQo),e(ho,UQo),e(ho,dn),e(dn,JQo),e(dn,afe),e(afe,YQo),e(dn,KQo),e(dn,nfe),e(nfe,ZQo),e(dn,eHo),e(dn,sfe),e(sfe,oHo),e(dn,rHo),e(ho,tHo),e(ho,H),e(H,mT),e(mT,lfe),e(lfe,aHo),e(mT,nHo),e(mT,MD),e(MD,sHo),e(mT,lHo),e(H,iHo),e(H,gT),e(gT,ife),e(ife,dHo),e(gT,cHo),e(gT,ED),e(ED,fHo),e(gT,mHo),e(H,gHo),e(H,hT),e(hT,dfe),e(dfe,hHo),e(hT,pHo),e(hT,yD),e(yD,_Ho),e(hT,uHo),e(H,bHo),e(H,pT),e(pT,cfe),e(cfe,vHo),e(pT,THo),e(pT,wD),e(wD,FHo),e(pT,CHo),e(H,MHo),e(H,_T),e(_T,ffe),e(ffe,EHo),e(_T,yHo),e(_T,AD),e(AD,wHo),e(_T,AHo),e(H,LHo),e(H,uT),e(uT,mfe),e(mfe,BHo),e(uT,xHo),e(uT,LD),e(LD,kHo),e(uT,RHo),e(H,SHo),e(H,bT),e(bT,gfe),e(gfe,PHo),e(bT,$Ho),e(bT,BD),e(BD,IHo),e(bT,jHo),e(H,NHo),e(H,vT),e(vT,hfe),e(hfe,DHo),e(vT,qHo),e(vT,xD),e(xD,GHo),e(vT,OHo),e(H,XHo),e(H,TT),e(TT,pfe),e(pfe,zHo),e(TT,VHo),e(TT,kD),e(kD,WHo),e(TT,QHo),e(H,HHo),e(H,FT),e(FT,_fe),e(_fe,UHo),e(FT,JHo),e(FT,RD),e(RD,YHo),e(FT,KHo),e(H,ZHo),e(H,CT),e(CT,ufe),e(ufe,eUo),e(CT,oUo),e(CT,SD),e(SD,rUo),e(CT,tUo),e(H,aUo),e(H,MT),e(MT,bfe),e(bfe,nUo),e(MT,sUo),e(MT,PD),e(PD,lUo),e(MT,iUo),e(H,dUo),e(H,ET),e(ET,vfe),e(vfe,cUo),e(ET,fUo),e(ET,$D),e($D,mUo),e(ET,gUo),e(H,hUo),e(H,yT),e(yT,Tfe),e(Tfe,pUo),e(yT,_Uo),e(yT,ID),e(ID,uUo),e(yT,bUo),e(H,vUo),e(H,wT),e(wT,Ffe),e(Ffe,TUo),e(wT,FUo),e(wT,jD),e(jD,CUo),e(wT,MUo),e(H,EUo),e(H,AT),e(AT,Cfe),e(Cfe,yUo),e(AT,wUo),e(AT,ND),e(ND,AUo),e(AT,LUo),e(H,BUo),e(H,LT),e(LT,Mfe),e(Mfe,xUo),e(LT,kUo),e(LT,DD),e(DD,RUo),e(LT,SUo),e(H,PUo),e(H,BT),e(BT,Efe),e(Efe,$Uo),e(BT,IUo),e(BT,qD),e(qD,jUo),e(BT,NUo),e(H,DUo),e(H,xT),e(xT,yfe),e(yfe,qUo),e(xT,GUo),e(xT,GD),e(GD,OUo),e(xT,XUo),e(H,zUo),e(H,kT),e(kT,wfe),e(wfe,VUo),e(kT,WUo),e(kT,OD),e(OD,QUo),e(kT,HUo),e(H,UUo),e(H,RT),e(RT,Afe),e(Afe,JUo),e(RT,YUo),e(RT,XD),e(XD,KUo),e(RT,ZUo),e(H,eJo),e(H,ST),e(ST,Lfe),e(Lfe,oJo),e(ST,rJo),e(ST,zD),e(zD,tJo),e(ST,aJo),e(ho,nJo),e(ho,Bfe),e(Bfe,sJo),e(ho,lJo),g(zy,ho,null),b(d,b7e,u),b(d,lc,u),e(lc,PT),e(PT,xfe),g(Vy,xfe,null),e(lc,iJo),e(lc,kfe),e(kfe,dJo),b(d,v7e,u),b(d,pr,u),g(Wy,pr,null),e(pr,cJo),e(pr,ic),e(ic,fJo),e(ic,Rfe),e(Rfe,mJo),e(ic,gJo),e(ic,Sfe),e(Sfe,hJo),e(ic,pJo),e(pr,_Jo),e(pr,Qy),e(Qy,uJo),e(Qy,Pfe),e(Pfe,bJo),e(Qy,vJo),e(pr,TJo),e(pr,it),g(Hy,it,null),e(it,FJo),e(it,$fe),e($fe,CJo),e(it,MJo),e(it,dc),e(dc,EJo),e(dc,Ife),e(Ife,yJo),e(dc,wJo),e(dc,jfe),e(jfe,AJo),e(dc,LJo),e(it,BJo),e(it,Nfe),e(Nfe,xJo),e(it,kJo),g(Uy,it,null),e(pr,RJo),e(pr,po),g(Jy,po,null),e(po,SJo),e(po,Dfe),e(Dfe,PJo),e(po,$Jo),e(po,cn),e(cn,IJo),e(cn,qfe),e(qfe,jJo),e(cn,NJo),e(cn,Gfe),e(Gfe,DJo),e(cn,qJo),e(cn,Ofe),e(Ofe,GJo),e(cn,OJo),e(po,XJo),e(po,he),e(he,$T),e($T,Xfe),e(Xfe,zJo),e($T,VJo),e($T,VD),e(VD,WJo),e($T,QJo),e(he,HJo),e(he,IT),e(IT,zfe),e(zfe,UJo),e(IT,JJo),e(IT,WD),e(WD,YJo),e(IT,KJo),e(he,ZJo),e(he,jT),e(jT,Vfe),e(Vfe,eYo),e(jT,oYo),e(jT,QD),e(QD,rYo),e(jT,tYo),e(he,aYo),e(he,NT),e(NT,Wfe),e(Wfe,nYo),e(NT,sYo),e(NT,HD),e(HD,lYo),e(NT,iYo),e(he,dYo),e(he,DT),e(DT,Qfe),e(Qfe,cYo),e(DT,fYo),e(DT,UD),e(UD,mYo),e(DT,gYo),e(he,hYo),e(he,qT),e(qT,Hfe),e(Hfe,pYo),e(qT,_Yo),e(qT,JD),e(JD,uYo),e(qT,bYo),e(he,vYo),e(he,GT),e(GT,Ufe),e(Ufe,TYo),e(GT,FYo),e(GT,YD),e(YD,CYo),e(GT,MYo),e(he,EYo),e(he,OT),e(OT,Jfe),e(Jfe,yYo),e(OT,wYo),e(OT,KD),e(KD,AYo),e(OT,LYo),e(he,BYo),e(he,XT),e(XT,Yfe),e(Yfe,xYo),e(XT,kYo),e(XT,ZD),e(ZD,RYo),e(XT,SYo),e(he,PYo),e(he,zT),e(zT,Kfe),e(Kfe,$Yo),e(zT,IYo),e(zT,eq),e(eq,jYo),e(zT,NYo),e(po,DYo),e(po,Zfe),e(Zfe,qYo),e(po,GYo),g(Yy,po,null),b(d,T7e,u),b(d,cc,u),e(cc,VT),e(VT,eme),g(Ky,eme,null),e(cc,OYo),e(cc,ome),e(ome,XYo),b(d,F7e,u),b(d,_r,u),g(Zy,_r,null),e(_r,zYo),e(_r,fc),e(fc,VYo),e(fc,rme),e(rme,WYo),e(fc,QYo),e(fc,tme),e(tme,HYo),e(fc,UYo),e(_r,JYo),e(_r,ew),e(ew,YYo),e(ew,ame),e(ame,KYo),e(ew,ZYo),e(_r,eKo),e(_r,dt),g(ow,dt,null),e(dt,oKo),e(dt,nme),e(nme,rKo),e(dt,tKo),e(dt,mc),e(mc,aKo),e(mc,sme),e(sme,nKo),e(mc,sKo),e(mc,lme),e(lme,lKo),e(mc,iKo),e(dt,dKo),e(dt,ime),e(ime,cKo),e(dt,fKo),g(rw,dt,null),e(_r,mKo),e(_r,_o),g(tw,_o,null),e(_o,gKo),e(_o,dme),e(dme,hKo),e(_o,pKo),e(_o,fn),e(fn,_Ko),e(fn,cme),e(cme,uKo),e(fn,bKo),e(fn,fme),e(fme,vKo),e(fn,TKo),e(fn,mme),e(mme,FKo),e(fn,CKo),e(_o,MKo),e(_o,aw),e(aw,WT),e(WT,gme),e(gme,EKo),e(WT,yKo),e(WT,oq),e(oq,wKo),e(WT,AKo),e(aw,LKo),e(aw,QT),e(QT,hme),e(hme,BKo),e(QT,xKo),e(QT,rq),e(rq,kKo),e(QT,RKo),e(_o,SKo),e(_o,pme),e(pme,PKo),e(_o,$Ko),g(nw,_o,null),b(d,C7e,u),b(d,gc,u),e(gc,HT),e(HT,_me),g(sw,_me,null),e(gc,IKo),e(gc,ume),e(ume,jKo),b(d,M7e,u),b(d,ur,u),g(lw,ur,null),e(ur,NKo),e(ur,hc),e(hc,DKo),e(hc,bme),e(bme,qKo),e(hc,GKo),e(hc,vme),e(vme,OKo),e(hc,XKo),e(ur,zKo),e(ur,iw),e(iw,VKo),e(iw,Tme),e(Tme,WKo),e(iw,QKo),e(ur,HKo),e(ur,ct),g(dw,ct,null),e(ct,UKo),e(ct,Fme),e(Fme,JKo),e(ct,YKo),e(ct,pc),e(pc,KKo),e(pc,Cme),e(Cme,ZKo),e(pc,eZo),e(pc,Mme),e(Mme,oZo),e(pc,rZo),e(ct,tZo),e(ct,Eme),e(Eme,aZo),e(ct,nZo),g(cw,ct,null),e(ur,sZo),e(ur,uo),g(fw,uo,null),e(uo,lZo),e(uo,yme),e(yme,iZo),e(uo,dZo),e(uo,mn),e(mn,cZo),e(mn,wme),e(wme,fZo),e(mn,mZo),e(mn,Ame),e(Ame,gZo),e(mn,hZo),e(mn,Lme),e(Lme,pZo),e(mn,_Zo),e(uo,uZo),e(uo,Y),e(Y,UT),e(UT,Bme),e(Bme,bZo),e(UT,vZo),e(UT,tq),e(tq,TZo),e(UT,FZo),e(Y,CZo),e(Y,JT),e(JT,xme),e(xme,MZo),e(JT,EZo),e(JT,aq),e(aq,yZo),e(JT,wZo),e(Y,AZo),e(Y,YT),e(YT,kme),e(kme,LZo),e(YT,BZo),e(YT,nq),e(nq,xZo),e(YT,kZo),e(Y,RZo),e(Y,KT),e(KT,Rme),e(Rme,SZo),e(KT,PZo),e(KT,sq),e(sq,$Zo),e(KT,IZo),e(Y,jZo),e(Y,ZT),e(ZT,Sme),e(Sme,NZo),e(ZT,DZo),e(ZT,lq),e(lq,qZo),e(ZT,GZo),e(Y,OZo),e(Y,e8),e(e8,Pme),e(Pme,XZo),e(e8,zZo),e(e8,iq),e(iq,VZo),e(e8,WZo),e(Y,QZo),e(Y,o8),e(o8,$me),e($me,HZo),e(o8,UZo),e(o8,dq),e(dq,JZo),e(o8,YZo),e(Y,KZo),e(Y,r8),e(r8,Ime),e(Ime,ZZo),e(r8,eer),e(r8,cq),e(cq,oer),e(r8,rer),e(Y,ter),e(Y,t8),e(t8,jme),e(jme,aer),e(t8,ner),e(t8,fq),e(fq,ser),e(t8,ler),e(Y,ier),e(Y,a8),e(a8,Nme),e(Nme,der),e(a8,cer),e(a8,mq),e(mq,fer),e(a8,mer),e(Y,ger),e(Y,n8),e(n8,Dme),e(Dme,her),e(n8,per),e(n8,gq),e(gq,_er),e(n8,uer),e(Y,ber),e(Y,s8),e(s8,qme),e(qme,ver),e(s8,Ter),e(s8,hq),e(hq,Fer),e(s8,Cer),e(Y,Mer),e(Y,l8),e(l8,Gme),e(Gme,Eer),e(l8,yer),e(l8,pq),e(pq,wer),e(l8,Aer),e(Y,Ler),e(Y,i8),e(i8,Ome),e(Ome,Ber),e(i8,xer),e(i8,_q),e(_q,ker),e(i8,Rer),e(Y,Ser),e(Y,d8),e(d8,Xme),e(Xme,Per),e(d8,$er),e(d8,uq),e(uq,Ier),e(d8,jer),e(Y,Ner),e(Y,c8),e(c8,zme),e(zme,Der),e(c8,qer),e(c8,bq),e(bq,Ger),e(c8,Oer),e(Y,Xer),e(Y,f8),e(f8,Vme),e(Vme,zer),e(f8,Ver),e(f8,vq),e(vq,Wer),e(f8,Qer),e(Y,Her),e(Y,m8),e(m8,Wme),e(Wme,Uer),e(m8,Jer),e(m8,Tq),e(Tq,Yer),e(m8,Ker),e(Y,Zer),e(Y,g8),e(g8,Qme),e(Qme,eor),e(g8,oor),e(g8,Fq),e(Fq,ror),e(g8,tor),e(Y,aor),e(Y,h8),e(h8,Hme),e(Hme,nor),e(h8,sor),e(h8,Cq),e(Cq,lor),e(h8,ior),e(uo,dor),e(uo,Ume),e(Ume,cor),e(uo,mor),g(mw,uo,null),b(d,E7e,u),b(d,_c,u),e(_c,p8),e(p8,Jme),g(gw,Jme,null),e(_c,gor),e(_c,Yme),e(Yme,hor),b(d,y7e,u),b(d,br,u),g(hw,br,null),e(br,por),e(br,uc),e(uc,_or),e(uc,Kme),e(Kme,uor),e(uc,bor),e(uc,Zme),e(Zme,vor),e(uc,Tor),e(br,For),e(br,pw),e(pw,Cor),e(pw,ege),e(ege,Mor),e(pw,Eor),e(br,yor),e(br,ft),g(_w,ft,null),e(ft,wor),e(ft,oge),e(oge,Aor),e(ft,Lor),e(ft,bc),e(bc,Bor),e(bc,rge),e(rge,xor),e(bc,kor),e(bc,tge),e(tge,Ror),e(bc,Sor),e(ft,Por),e(ft,age),e(age,$or),e(ft,Ior),g(uw,ft,null),e(br,jor),e(br,bo),g(bw,bo,null),e(bo,Nor),e(bo,nge),e(nge,Dor),e(bo,qor),e(bo,gn),e(gn,Gor),e(gn,sge),e(sge,Oor),e(gn,Xor),e(gn,lge),e(lge,zor),e(gn,Vor),e(gn,ige),e(ige,Wor),e(gn,Qor),e(bo,Hor),e(bo,pe),e(pe,_8),e(_8,dge),e(dge,Uor),e(_8,Jor),e(_8,Mq),e(Mq,Yor),e(_8,Kor),e(pe,Zor),e(pe,u8),e(u8,cge),e(cge,err),e(u8,orr),e(u8,Eq),e(Eq,rrr),e(u8,trr),e(pe,arr),e(pe,b8),e(b8,fge),e(fge,nrr),e(b8,srr),e(b8,yq),e(yq,lrr),e(b8,irr),e(pe,drr),e(pe,v8),e(v8,mge),e(mge,crr),e(v8,frr),e(v8,wq),e(wq,mrr),e(v8,grr),e(pe,hrr),e(pe,T8),e(T8,gge),e(gge,prr),e(T8,_rr),e(T8,Aq),e(Aq,urr),e(T8,brr),e(pe,vrr),e(pe,F8),e(F8,hge),e(hge,Trr),e(F8,Frr),e(F8,Lq),e(Lq,Crr),e(F8,Mrr),e(pe,Err),e(pe,C8),e(C8,pge),e(pge,yrr),e(C8,wrr),e(C8,Bq),e(Bq,Arr),e(C8,Lrr),e(pe,Brr),e(pe,M8),e(M8,_ge),e(_ge,xrr),e(M8,krr),e(M8,xq),e(xq,Rrr),e(M8,Srr),e(pe,Prr),e(pe,E8),e(E8,uge),e(uge,$rr),e(E8,Irr),e(E8,kq),e(kq,jrr),e(E8,Nrr),e(pe,Drr),e(pe,y8),e(y8,bge),e(bge,qrr),e(y8,Grr),e(y8,Rq),e(Rq,Orr),e(y8,Xrr),e(bo,zrr),e(bo,vge),e(vge,Vrr),e(bo,Wrr),g(vw,bo,null),b(d,w7e,u),b(d,vc,u),e(vc,w8),e(w8,Tge),g(Tw,Tge,null),e(vc,Qrr),e(vc,Fge),e(Fge,Hrr),b(d,A7e,u),b(d,vr,u),g(Fw,vr,null),e(vr,Urr),e(vr,Tc),e(Tc,Jrr),e(Tc,Cge),e(Cge,Yrr),e(Tc,Krr),e(Tc,Mge),e(Mge,Zrr),e(Tc,etr),e(vr,otr),e(vr,Cw),e(Cw,rtr),e(Cw,Ege),e(Ege,ttr),e(Cw,atr),e(vr,ntr),e(vr,mt),g(Mw,mt,null),e(mt,str),e(mt,yge),e(yge,ltr),e(mt,itr),e(mt,Fc),e(Fc,dtr),e(Fc,wge),e(wge,ctr),e(Fc,ftr),e(Fc,Age),e(Age,mtr),e(Fc,gtr),e(mt,htr),e(mt,Lge),e(Lge,ptr),e(mt,_tr),g(Ew,mt,null),e(vr,utr),e(vr,vo),g(yw,vo,null),e(vo,btr),e(vo,Bge),e(Bge,vtr),e(vo,Ttr),e(vo,hn),e(hn,Ftr),e(hn,xge),e(xge,Ctr),e(hn,Mtr),e(hn,kge),e(kge,Etr),e(hn,ytr),e(hn,Rge),e(Rge,wtr),e(hn,Atr),e(vo,Ltr),e(vo,X),e(X,A8),e(A8,Sge),e(Sge,Btr),e(A8,xtr),e(A8,Sq),e(Sq,ktr),e(A8,Rtr),e(X,Str),e(X,L8),e(L8,Pge),e(Pge,Ptr),e(L8,$tr),e(L8,Pq),e(Pq,Itr),e(L8,jtr),e(X,Ntr),e(X,B8),e(B8,$ge),e($ge,Dtr),e(B8,qtr),e(B8,$q),e($q,Gtr),e(B8,Otr),e(X,Xtr),e(X,x8),e(x8,Ige),e(Ige,ztr),e(x8,Vtr),e(x8,Iq),e(Iq,Wtr),e(x8,Qtr),e(X,Htr),e(X,k8),e(k8,jge),e(jge,Utr),e(k8,Jtr),e(k8,jq),e(jq,Ytr),e(k8,Ktr),e(X,Ztr),e(X,R8),e(R8,Nge),e(Nge,ear),e(R8,oar),e(R8,Nq),e(Nq,rar),e(R8,tar),e(X,aar),e(X,S8),e(S8,Dge),e(Dge,nar),e(S8,sar),e(S8,Dq),e(Dq,lar),e(S8,iar),e(X,dar),e(X,P8),e(P8,qge),e(qge,car),e(P8,far),e(P8,qq),e(qq,mar),e(P8,gar),e(X,har),e(X,$8),e($8,Gge),e(Gge,par),e($8,_ar),e($8,Gq),e(Gq,uar),e($8,bar),e(X,Tar),e(X,I8),e(I8,Oge),e(Oge,Far),e(I8,Car),e(I8,Oq),e(Oq,Mar),e(I8,Ear),e(X,yar),e(X,j8),e(j8,Xge),e(Xge,war),e(j8,Aar),e(j8,Xq),e(Xq,Lar),e(j8,Bar),e(X,xar),e(X,N8),e(N8,zge),e(zge,kar),e(N8,Rar),e(N8,zq),e(zq,Sar),e(N8,Par),e(X,$ar),e(X,D8),e(D8,Vge),e(Vge,Iar),e(D8,jar),e(D8,Vq),e(Vq,Nar),e(D8,Dar),e(X,qar),e(X,q8),e(q8,Wge),e(Wge,Gar),e(q8,Oar),e(q8,Wq),e(Wq,Xar),e(q8,zar),e(X,Var),e(X,G8),e(G8,Qge),e(Qge,War),e(G8,Qar),e(G8,Qq),e(Qq,Har),e(G8,Uar),e(X,Jar),e(X,O8),e(O8,Hge),e(Hge,Yar),e(O8,Kar),e(O8,Hq),e(Hq,Zar),e(O8,enr),e(X,onr),e(X,X8),e(X8,Uge),e(Uge,rnr),e(X8,tnr),e(X8,Uq),e(Uq,anr),e(X8,nnr),e(X,snr),e(X,z8),e(z8,Jge),e(Jge,lnr),e(z8,inr),e(z8,Jq),e(Jq,dnr),e(z8,cnr),e(X,fnr),e(X,V8),e(V8,Yge),e(Yge,mnr),e(V8,gnr),e(V8,Yq),e(Yq,hnr),e(V8,pnr),e(X,_nr),e(X,W8),e(W8,Kge),e(Kge,unr),e(W8,bnr),e(W8,Kq),e(Kq,vnr),e(W8,Tnr),e(X,Fnr),e(X,Q8),e(Q8,Zge),e(Zge,Cnr),e(Q8,Mnr),e(Q8,Zq),e(Zq,Enr),e(Q8,ynr),e(X,wnr),e(X,H8),e(H8,ehe),e(ehe,Anr),e(H8,Lnr),e(H8,eG),e(eG,Bnr),e(H8,xnr),e(X,knr),e(X,U8),e(U8,ohe),e(ohe,Rnr),e(U8,Snr),e(U8,oG),e(oG,Pnr),e(U8,$nr),e(X,Inr),e(X,J8),e(J8,rhe),e(rhe,jnr),e(J8,Nnr),e(J8,rG),e(rG,Dnr),e(J8,qnr),e(X,Gnr),e(X,Y8),e(Y8,the),e(the,Onr),e(Y8,Xnr),e(Y8,tG),e(tG,znr),e(Y8,Vnr),e(vo,Wnr),e(vo,ahe),e(ahe,Qnr),e(vo,Hnr),g(ww,vo,null),b(d,L7e,u),b(d,Cc,u),e(Cc,K8),e(K8,nhe),g(Aw,nhe,null),e(Cc,Unr),e(Cc,she),e(she,Jnr),b(d,B7e,u),b(d,Tr,u),g(Lw,Tr,null),e(Tr,Ynr),e(Tr,Mc),e(Mc,Knr),e(Mc,lhe),e(lhe,Znr),e(Mc,esr),e(Mc,ihe),e(ihe,osr),e(Mc,rsr),e(Tr,tsr),e(Tr,Bw),e(Bw,asr),e(Bw,dhe),e(dhe,nsr),e(Bw,ssr),e(Tr,lsr),e(Tr,gt),g(xw,gt,null),e(gt,isr),e(gt,che),e(che,dsr),e(gt,csr),e(gt,Ec),e(Ec,fsr),e(Ec,fhe),e(fhe,msr),e(Ec,gsr),e(Ec,mhe),e(mhe,hsr),e(Ec,psr),e(gt,_sr),e(gt,ghe),e(ghe,usr),e(gt,bsr),g(kw,gt,null),e(Tr,vsr),e(Tr,To),g(Rw,To,null),e(To,Tsr),e(To,hhe),e(hhe,Fsr),e(To,Csr),e(To,pn),e(pn,Msr),e(pn,phe),e(phe,Esr),e(pn,ysr),e(pn,_he),e(_he,wsr),e(pn,Asr),e(pn,uhe),e(uhe,Lsr),e(pn,Bsr),e(To,xsr),e(To,te),e(te,Z8),e(Z8,bhe),e(bhe,ksr),e(Z8,Rsr),e(Z8,aG),e(aG,Ssr),e(Z8,Psr),e(te,$sr),e(te,eF),e(eF,vhe),e(vhe,Isr),e(eF,jsr),e(eF,nG),e(nG,Nsr),e(eF,Dsr),e(te,qsr),e(te,oF),e(oF,The),e(The,Gsr),e(oF,Osr),e(oF,sG),e(sG,Xsr),e(oF,zsr),e(te,Vsr),e(te,rF),e(rF,Fhe),e(Fhe,Wsr),e(rF,Qsr),e(rF,lG),e(lG,Hsr),e(rF,Usr),e(te,Jsr),e(te,tF),e(tF,Che),e(Che,Ysr),e(tF,Ksr),e(tF,iG),e(iG,Zsr),e(tF,elr),e(te,olr),e(te,aF),e(aF,Mhe),e(Mhe,rlr),e(aF,tlr),e(aF,dG),e(dG,alr),e(aF,nlr),e(te,slr),e(te,nF),e(nF,Ehe),e(Ehe,llr),e(nF,ilr),e(nF,cG),e(cG,dlr),e(nF,clr),e(te,flr),e(te,sF),e(sF,yhe),e(yhe,mlr),e(sF,glr),e(sF,fG),e(fG,hlr),e(sF,plr),e(te,_lr),e(te,lF),e(lF,whe),e(whe,ulr),e(lF,blr),e(lF,mG),e(mG,vlr),e(lF,Tlr),e(te,Flr),e(te,iF),e(iF,Ahe),e(Ahe,Clr),e(iF,Mlr),e(iF,gG),e(gG,Elr),e(iF,ylr),e(te,wlr),e(te,dF),e(dF,Lhe),e(Lhe,Alr),e(dF,Llr),e(dF,hG),e(hG,Blr),e(dF,xlr),e(te,klr),e(te,cF),e(cF,Bhe),e(Bhe,Rlr),e(cF,Slr),e(cF,pG),e(pG,Plr),e(cF,$lr),e(te,Ilr),e(te,fF),e(fF,xhe),e(xhe,jlr),e(fF,Nlr),e(fF,_G),e(_G,Dlr),e(fF,qlr),e(te,Glr),e(te,mF),e(mF,khe),e(khe,Olr),e(mF,Xlr),e(mF,uG),e(uG,zlr),e(mF,Vlr),e(te,Wlr),e(te,gF),e(gF,Rhe),e(Rhe,Qlr),e(gF,Hlr),e(gF,bG),e(bG,Ulr),e(gF,Jlr),e(te,Ylr),e(te,hF),e(hF,She),e(She,Klr),e(hF,Zlr),e(hF,vG),e(vG,eir),e(hF,oir),e(te,rir),e(te,pF),e(pF,Phe),e(Phe,tir),e(pF,air),e(pF,TG),e(TG,nir),e(pF,sir),e(To,lir),e(To,$he),e($he,iir),e(To,dir),g(Sw,To,null),b(d,x7e,u),b(d,yc,u),e(yc,_F),e(_F,Ihe),g(Pw,Ihe,null),e(yc,cir),e(yc,jhe),e(jhe,fir),b(d,k7e,u),b(d,Fr,u),g($w,Fr,null),e(Fr,mir),e(Fr,wc),e(wc,gir),e(wc,Nhe),e(Nhe,hir),e(wc,pir),e(wc,Dhe),e(Dhe,_ir),e(wc,uir),e(Fr,bir),e(Fr,Iw),e(Iw,vir),e(Iw,qhe),e(qhe,Tir),e(Iw,Fir),e(Fr,Cir),e(Fr,ht),g(jw,ht,null),e(ht,Mir),e(ht,Ghe),e(Ghe,Eir),e(ht,yir),e(ht,Ac),e(Ac,wir),e(Ac,Ohe),e(Ohe,Air),e(Ac,Lir),e(Ac,Xhe),e(Xhe,Bir),e(Ac,xir),e(ht,kir),e(ht,zhe),e(zhe,Rir),e(ht,Sir),g(Nw,ht,null),e(Fr,Pir),e(Fr,Fo),g(Dw,Fo,null),e(Fo,$ir),e(Fo,Vhe),e(Vhe,Iir),e(Fo,jir),e(Fo,_n),e(_n,Nir),e(_n,Whe),e(Whe,Dir),e(_n,qir),e(_n,Qhe),e(Qhe,Gir),e(_n,Oir),e(_n,Hhe),e(Hhe,Xir),e(_n,zir),e(Fo,Vir),e(Fo,Uhe),e(Uhe,uF),e(uF,Jhe),e(Jhe,Wir),e(uF,Qir),e(uF,FG),e(FG,Hir),e(uF,Uir),e(Fo,Jir),e(Fo,Yhe),e(Yhe,Yir),e(Fo,Kir),g(qw,Fo,null),b(d,R7e,u),b(d,Lc,u),e(Lc,bF),e(bF,Khe),g(Gw,Khe,null),e(Lc,Zir),e(Lc,Zhe),e(Zhe,edr),b(d,S7e,u),b(d,Cr,u),g(Ow,Cr,null),e(Cr,odr),e(Cr,Bc),e(Bc,rdr),e(Bc,epe),e(epe,tdr),e(Bc,adr),e(Bc,ope),e(ope,ndr),e(Bc,sdr),e(Cr,ldr),e(Cr,Xw),e(Xw,idr),e(Xw,rpe),e(rpe,ddr),e(Xw,cdr),e(Cr,fdr),e(Cr,pt),g(zw,pt,null),e(pt,mdr),e(pt,tpe),e(tpe,gdr),e(pt,hdr),e(pt,xc),e(xc,pdr),e(xc,ape),e(ape,_dr),e(xc,udr),e(xc,npe),e(npe,bdr),e(xc,vdr),e(pt,Tdr),e(pt,spe),e(spe,Fdr),e(pt,Cdr),g(Vw,pt,null),e(Cr,Mdr),e(Cr,Co),g(Ww,Co,null),e(Co,Edr),e(Co,lpe),e(lpe,ydr),e(Co,wdr),e(Co,un),e(un,Adr),e(un,ipe),e(ipe,Ldr),e(un,Bdr),e(un,dpe),e(dpe,xdr),e(un,kdr),e(un,cpe),e(cpe,Rdr),e(un,Sdr),e(Co,Pdr),e(Co,K),e(K,vF),e(vF,fpe),e(fpe,$dr),e(vF,Idr),e(vF,CG),e(CG,jdr),e(vF,Ndr),e(K,Ddr),e(K,TF),e(TF,mpe),e(mpe,qdr),e(TF,Gdr),e(TF,MG),e(MG,Odr),e(TF,Xdr),e(K,zdr),e(K,FF),e(FF,gpe),e(gpe,Vdr),e(FF,Wdr),e(FF,EG),e(EG,Qdr),e(FF,Hdr),e(K,Udr),e(K,CF),e(CF,hpe),e(hpe,Jdr),e(CF,Ydr),e(CF,yG),e(yG,Kdr),e(CF,Zdr),e(K,ecr),e(K,MF),e(MF,ppe),e(ppe,ocr),e(MF,rcr),e(MF,wG),e(wG,tcr),e(MF,acr),e(K,ncr),e(K,EF),e(EF,_pe),e(_pe,scr),e(EF,lcr),e(EF,AG),e(AG,icr),e(EF,dcr),e(K,ccr),e(K,yF),e(yF,upe),e(upe,fcr),e(yF,mcr),e(yF,LG),e(LG,gcr),e(yF,hcr),e(K,pcr),e(K,wF),e(wF,bpe),e(bpe,_cr),e(wF,ucr),e(wF,BG),e(BG,bcr),e(wF,vcr),e(K,Tcr),e(K,AF),e(AF,vpe),e(vpe,Fcr),e(AF,Ccr),e(AF,xG),e(xG,Mcr),e(AF,Ecr),e(K,ycr),e(K,LF),e(LF,Tpe),e(Tpe,wcr),e(LF,Acr),e(LF,kG),e(kG,Lcr),e(LF,Bcr),e(K,xcr),e(K,BF),e(BF,Fpe),e(Fpe,kcr),e(BF,Rcr),e(BF,RG),e(RG,Scr),e(BF,Pcr),e(K,$cr),e(K,xF),e(xF,Cpe),e(Cpe,Icr),e(xF,jcr),e(xF,SG),e(SG,Ncr),e(xF,Dcr),e(K,qcr),e(K,kF),e(kF,Mpe),e(Mpe,Gcr),e(kF,Ocr),e(kF,PG),e(PG,Xcr),e(kF,zcr),e(K,Vcr),e(K,RF),e(RF,Epe),e(Epe,Wcr),e(RF,Qcr),e(RF,$G),e($G,Hcr),e(RF,Ucr),e(K,Jcr),e(K,SF),e(SF,ype),e(ype,Ycr),e(SF,Kcr),e(SF,IG),e(IG,Zcr),e(SF,efr),e(K,ofr),e(K,PF),e(PF,wpe),e(wpe,rfr),e(PF,tfr),e(PF,jG),e(jG,afr),e(PF,nfr),e(K,sfr),e(K,$F),e($F,Ape),e(Ape,lfr),e($F,ifr),e($F,NG),e(NG,dfr),e($F,cfr),e(K,ffr),e(K,IF),e(IF,Lpe),e(Lpe,mfr),e(IF,gfr),e(IF,DG),e(DG,hfr),e(IF,pfr),e(K,_fr),e(K,jF),e(jF,Bpe),e(Bpe,ufr),e(jF,bfr),e(jF,qG),e(qG,vfr),e(jF,Tfr),e(K,Ffr),e(K,NF),e(NF,xpe),e(xpe,Cfr),e(NF,Mfr),e(NF,GG),e(GG,Efr),e(NF,yfr),e(Co,wfr),e(Co,kpe),e(kpe,Afr),e(Co,Lfr),g(Qw,Co,null),b(d,P7e,u),b(d,kc,u),e(kc,DF),e(DF,Rpe),g(Hw,Rpe,null),e(kc,Bfr),e(kc,Spe),e(Spe,xfr),b(d,$7e,u),b(d,Mr,u),g(Uw,Mr,null),e(Mr,kfr),e(Mr,Rc),e(Rc,Rfr),e(Rc,Ppe),e(Ppe,Sfr),e(Rc,Pfr),e(Rc,$pe),e($pe,$fr),e(Rc,Ifr),e(Mr,jfr),e(Mr,Jw),e(Jw,Nfr),e(Jw,Ipe),e(Ipe,Dfr),e(Jw,qfr),e(Mr,Gfr),e(Mr,_t),g(Yw,_t,null),e(_t,Ofr),e(_t,jpe),e(jpe,Xfr),e(_t,zfr),e(_t,Sc),e(Sc,Vfr),e(Sc,Npe),e(Npe,Wfr),e(Sc,Qfr),e(Sc,Dpe),e(Dpe,Hfr),e(Sc,Ufr),e(_t,Jfr),e(_t,qpe),e(qpe,Yfr),e(_t,Kfr),g(Kw,_t,null),e(Mr,Zfr),e(Mr,Mo),g(Zw,Mo,null),e(Mo,emr),e(Mo,Gpe),e(Gpe,omr),e(Mo,rmr),e(Mo,bn),e(bn,tmr),e(bn,Ope),e(Ope,amr),e(bn,nmr),e(bn,Xpe),e(Xpe,smr),e(bn,lmr),e(bn,zpe),e(zpe,imr),e(bn,dmr),e(Mo,cmr),e(Mo,Z),e(Z,qF),e(qF,Vpe),e(Vpe,fmr),e(qF,mmr),e(qF,OG),e(OG,gmr),e(qF,hmr),e(Z,pmr),e(Z,GF),e(GF,Wpe),e(Wpe,_mr),e(GF,umr),e(GF,XG),e(XG,bmr),e(GF,vmr),e(Z,Tmr),e(Z,OF),e(OF,Qpe),e(Qpe,Fmr),e(OF,Cmr),e(OF,zG),e(zG,Mmr),e(OF,Emr),e(Z,ymr),e(Z,XF),e(XF,Hpe),e(Hpe,wmr),e(XF,Amr),e(XF,VG),e(VG,Lmr),e(XF,Bmr),e(Z,xmr),e(Z,zF),e(zF,Upe),e(Upe,kmr),e(zF,Rmr),e(zF,WG),e(WG,Smr),e(zF,Pmr),e(Z,$mr),e(Z,VF),e(VF,Jpe),e(Jpe,Imr),e(VF,jmr),e(VF,QG),e(QG,Nmr),e(VF,Dmr),e(Z,qmr),e(Z,WF),e(WF,Ype),e(Ype,Gmr),e(WF,Omr),e(WF,HG),e(HG,Xmr),e(WF,zmr),e(Z,Vmr),e(Z,QF),e(QF,Kpe),e(Kpe,Wmr),e(QF,Qmr),e(QF,UG),e(UG,Hmr),e(QF,Umr),e(Z,Jmr),e(Z,HF),e(HF,Zpe),e(Zpe,Ymr),e(HF,Kmr),e(HF,JG),e(JG,Zmr),e(HF,egr),e(Z,ogr),e(Z,UF),e(UF,e_e),e(e_e,rgr),e(UF,tgr),e(UF,YG),e(YG,agr),e(UF,ngr),e(Z,sgr),e(Z,JF),e(JF,o_e),e(o_e,lgr),e(JF,igr),e(JF,KG),e(KG,dgr),e(JF,cgr),e(Z,fgr),e(Z,YF),e(YF,r_e),e(r_e,mgr),e(YF,ggr),e(YF,ZG),e(ZG,hgr),e(YF,pgr),e(Z,_gr),e(Z,KF),e(KF,t_e),e(t_e,ugr),e(KF,bgr),e(KF,eO),e(eO,vgr),e(KF,Tgr),e(Z,Fgr),e(Z,ZF),e(ZF,a_e),e(a_e,Cgr),e(ZF,Mgr),e(ZF,oO),e(oO,Egr),e(ZF,ygr),e(Z,wgr),e(Z,e9),e(e9,n_e),e(n_e,Agr),e(e9,Lgr),e(e9,rO),e(rO,Bgr),e(e9,xgr),e(Z,kgr),e(Z,o9),e(o9,s_e),e(s_e,Rgr),e(o9,Sgr),e(o9,tO),e(tO,Pgr),e(o9,$gr),e(Z,Igr),e(Z,r9),e(r9,l_e),e(l_e,jgr),e(r9,Ngr),e(r9,aO),e(aO,Dgr),e(r9,qgr),e(Z,Ggr),e(Z,t9),e(t9,i_e),e(i_e,Ogr),e(t9,Xgr),e(t9,nO),e(nO,zgr),e(t9,Vgr),e(Z,Wgr),e(Z,a9),e(a9,d_e),e(d_e,Qgr),e(a9,Hgr),e(a9,sO),e(sO,Ugr),e(a9,Jgr),e(Mo,Ygr),e(Mo,c_e),e(c_e,Kgr),e(Mo,Zgr),g(eA,Mo,null),b(d,I7e,u),b(d,Pc,u),e(Pc,n9),e(n9,f_e),g(oA,f_e,null),e(Pc,ehr),e(Pc,m_e),e(m_e,ohr),b(d,j7e,u),b(d,Er,u),g(rA,Er,null),e(Er,rhr),e(Er,$c),e($c,thr),e($c,g_e),e(g_e,ahr),e($c,nhr),e($c,h_e),e(h_e,shr),e($c,lhr),e(Er,ihr),e(Er,tA),e(tA,dhr),e(tA,p_e),e(p_e,chr),e(tA,fhr),e(Er,mhr),e(Er,ut),g(aA,ut,null),e(ut,ghr),e(ut,__e),e(__e,hhr),e(ut,phr),e(ut,Ic),e(Ic,_hr),e(Ic,u_e),e(u_e,uhr),e(Ic,bhr),e(Ic,b_e),e(b_e,vhr),e(Ic,Thr),e(ut,Fhr),e(ut,v_e),e(v_e,Chr),e(ut,Mhr),g(nA,ut,null),e(Er,Ehr),e(Er,Eo),g(sA,Eo,null),e(Eo,yhr),e(Eo,T_e),e(T_e,whr),e(Eo,Ahr),e(Eo,vn),e(vn,Lhr),e(vn,F_e),e(F_e,Bhr),e(vn,xhr),e(vn,C_e),e(C_e,khr),e(vn,Rhr),e(vn,M_e),e(M_e,Shr),e(vn,Phr),e(Eo,$hr),e(Eo,E_e),e(E_e,s9),e(s9,y_e),e(y_e,Ihr),e(s9,jhr),e(s9,lO),e(lO,Nhr),e(s9,Dhr),e(Eo,qhr),e(Eo,w_e),e(w_e,Ghr),e(Eo,Ohr),g(lA,Eo,null),b(d,N7e,u),b(d,jc,u),e(jc,l9),e(l9,A_e),g(iA,A_e,null),e(jc,Xhr),e(jc,L_e),e(L_e,zhr),b(d,D7e,u),b(d,yr,u),g(dA,yr,null),e(yr,Vhr),e(yr,Nc),e(Nc,Whr),e(Nc,B_e),e(B_e,Qhr),e(Nc,Hhr),e(Nc,x_e),e(x_e,Uhr),e(Nc,Jhr),e(yr,Yhr),e(yr,cA),e(cA,Khr),e(cA,k_e),e(k_e,Zhr),e(cA,epr),e(yr,opr),e(yr,bt),g(fA,bt,null),e(bt,rpr),e(bt,R_e),e(R_e,tpr),e(bt,apr),e(bt,Dc),e(Dc,npr),e(Dc,S_e),e(S_e,spr),e(Dc,lpr),e(Dc,P_e),e(P_e,ipr),e(Dc,dpr),e(bt,cpr),e(bt,$_e),e($_e,fpr),e(bt,mpr),g(mA,bt,null),e(yr,gpr),e(yr,yo),g(gA,yo,null),e(yo,hpr),e(yo,I_e),e(I_e,ppr),e(yo,_pr),e(yo,Tn),e(Tn,upr),e(Tn,j_e),e(j_e,bpr),e(Tn,vpr),e(Tn,N_e),e(N_e,Tpr),e(Tn,Fpr),e(Tn,D_e),e(D_e,Cpr),e(Tn,Mpr),e(yo,Epr),e(yo,q_e),e(q_e,i9),e(i9,G_e),e(G_e,ypr),e(i9,wpr),e(i9,iO),e(iO,Apr),e(i9,Lpr),e(yo,Bpr),e(yo,O_e),e(O_e,xpr),e(yo,kpr),g(hA,yo,null),b(d,q7e,u),b(d,qc,u),e(qc,d9),e(d9,X_e),g(pA,X_e,null),e(qc,Rpr),e(qc,z_e),e(z_e,Spr),b(d,G7e,u),b(d,wr,u),g(_A,wr,null),e(wr,Ppr),e(wr,Gc),e(Gc,$pr),e(Gc,V_e),e(V_e,Ipr),e(Gc,jpr),e(Gc,W_e),e(W_e,Npr),e(Gc,Dpr),e(wr,qpr),e(wr,uA),e(uA,Gpr),e(uA,Q_e),e(Q_e,Opr),e(uA,Xpr),e(wr,zpr),e(wr,vt),g(bA,vt,null),e(vt,Vpr),e(vt,H_e),e(H_e,Wpr),e(vt,Qpr),e(vt,Oc),e(Oc,Hpr),e(Oc,U_e),e(U_e,Upr),e(Oc,Jpr),e(Oc,J_e),e(J_e,Ypr),e(Oc,Kpr),e(vt,Zpr),e(vt,Y_e),e(Y_e,e_r),e(vt,o_r),g(vA,vt,null),e(wr,r_r),e(wr,wo),g(TA,wo,null),e(wo,t_r),e(wo,K_e),e(K_e,a_r),e(wo,n_r),e(wo,Fn),e(Fn,s_r),e(Fn,Z_e),e(Z_e,l_r),e(Fn,i_r),e(Fn,eue),e(eue,d_r),e(Fn,c_r),e(Fn,oue),e(oue,f_r),e(Fn,m_r),e(wo,g_r),e(wo,V),e(V,c9),e(c9,rue),e(rue,h_r),e(c9,p_r),e(c9,dO),e(dO,__r),e(c9,u_r),e(V,b_r),e(V,f9),e(f9,tue),e(tue,v_r),e(f9,T_r),e(f9,cO),e(cO,F_r),e(f9,C_r),e(V,M_r),e(V,m9),e(m9,aue),e(aue,E_r),e(m9,y_r),e(m9,fO),e(fO,w_r),e(m9,A_r),e(V,L_r),e(V,g9),e(g9,nue),e(nue,B_r),e(g9,x_r),e(g9,mO),e(mO,k_r),e(g9,R_r),e(V,S_r),e(V,h9),e(h9,sue),e(sue,P_r),e(h9,$_r),e(h9,gO),e(gO,I_r),e(h9,j_r),e(V,N_r),e(V,p9),e(p9,lue),e(lue,D_r),e(p9,q_r),e(p9,hO),e(hO,G_r),e(p9,O_r),e(V,X_r),e(V,_9),e(_9,iue),e(iue,z_r),e(_9,V_r),e(_9,pO),e(pO,W_r),e(_9,Q_r),e(V,H_r),e(V,u9),e(u9,due),e(due,U_r),e(u9,J_r),e(u9,_O),e(_O,Y_r),e(u9,K_r),e(V,Z_r),e(V,b9),e(b9,cue),e(cue,eur),e(b9,our),e(b9,uO),e(uO,rur),e(b9,tur),e(V,aur),e(V,v9),e(v9,fue),e(fue,nur),e(v9,sur),e(v9,bO),e(bO,lur),e(v9,iur),e(V,dur),e(V,T9),e(T9,mue),e(mue,cur),e(T9,fur),e(T9,vO),e(vO,mur),e(T9,gur),e(V,hur),e(V,F9),e(F9,gue),e(gue,pur),e(F9,_ur),e(F9,TO),e(TO,uur),e(F9,bur),e(V,vur),e(V,C9),e(C9,hue),e(hue,Tur),e(C9,Fur),e(C9,FO),e(FO,Cur),e(C9,Mur),e(V,Eur),e(V,M9),e(M9,pue),e(pue,yur),e(M9,wur),e(M9,CO),e(CO,Aur),e(M9,Lur),e(V,Bur),e(V,E9),e(E9,_ue),e(_ue,xur),e(E9,kur),e(E9,MO),e(MO,Rur),e(E9,Sur),e(V,Pur),e(V,y9),e(y9,uue),e(uue,$ur),e(y9,Iur),e(y9,EO),e(EO,jur),e(y9,Nur),e(V,Dur),e(V,w9),e(w9,bue),e(bue,qur),e(w9,Gur),e(w9,yO),e(yO,Our),e(w9,Xur),e(V,zur),e(V,A9),e(A9,vue),e(vue,Vur),e(A9,Wur),e(A9,wO),e(wO,Qur),e(A9,Hur),e(V,Uur),e(V,L9),e(L9,Tue),e(Tue,Jur),e(L9,Yur),e(L9,AO),e(AO,Kur),e(L9,Zur),e(V,e5r),e(V,B9),e(B9,Fue),e(Fue,o5r),e(B9,r5r),e(B9,LO),e(LO,t5r),e(B9,a5r),e(V,n5r),e(V,x9),e(x9,Cue),e(Cue,s5r),e(x9,l5r),e(x9,BO),e(BO,i5r),e(x9,d5r),e(V,c5r),e(V,k9),e(k9,Mue),e(Mue,f5r),e(k9,m5r),e(k9,xO),e(xO,g5r),e(k9,h5r),e(V,p5r),e(V,R9),e(R9,Eue),e(Eue,_5r),e(R9,u5r),e(R9,kO),e(kO,b5r),e(R9,v5r),e(V,T5r),e(V,S9),e(S9,yue),e(yue,F5r),e(S9,C5r),e(S9,RO),e(RO,M5r),e(S9,E5r),e(wo,y5r),e(wo,wue),e(wue,w5r),e(wo,A5r),g(FA,wo,null),b(d,O7e,u),b(d,Xc,u),e(Xc,P9),e(P9,Aue),g(CA,Aue,null),e(Xc,L5r),e(Xc,Lue),e(Lue,B5r),b(d,X7e,u),b(d,Ar,u),g(MA,Ar,null),e(Ar,x5r),e(Ar,zc),e(zc,k5r),e(zc,Bue),e(Bue,R5r),e(zc,S5r),e(zc,xue),e(xue,P5r),e(zc,$5r),e(Ar,I5r),e(Ar,EA),e(EA,j5r),e(EA,kue),e(kue,N5r),e(EA,D5r),e(Ar,q5r),e(Ar,Tt),g(yA,Tt,null),e(Tt,G5r),e(Tt,Rue),e(Rue,O5r),e(Tt,X5r),e(Tt,Vc),e(Vc,z5r),e(Vc,Sue),e(Sue,V5r),e(Vc,W5r),e(Vc,Pue),e(Pue,Q5r),e(Vc,H5r),e(Tt,U5r),e(Tt,$ue),e($ue,J5r),e(Tt,Y5r),g(wA,Tt,null),e(Ar,K5r),e(Ar,Ao),g(AA,Ao,null),e(Ao,Z5r),e(Ao,Iue),e(Iue,e1r),e(Ao,o1r),e(Ao,Cn),e(Cn,r1r),e(Cn,jue),e(jue,t1r),e(Cn,a1r),e(Cn,Nue),e(Nue,n1r),e(Cn,s1r),e(Cn,Due),e(Due,l1r),e(Cn,i1r),e(Ao,d1r),e(Ao,Mn),e(Mn,$9),e($9,que),e(que,c1r),e($9,f1r),e($9,SO),e(SO,m1r),e($9,g1r),e(Mn,h1r),e(Mn,I9),e(I9,Gue),e(Gue,p1r),e(I9,_1r),e(I9,PO),e(PO,u1r),e(I9,b1r),e(Mn,v1r),e(Mn,j9),e(j9,Oue),e(Oue,T1r),e(j9,F1r),e(j9,$O),e($O,C1r),e(j9,M1r),e(Mn,E1r),e(Mn,N9),e(N9,Xue),e(Xue,y1r),e(N9,w1r),e(N9,IO),e(IO,A1r),e(N9,L1r),e(Ao,B1r),e(Ao,zue),e(zue,x1r),e(Ao,k1r),g(LA,Ao,null),b(d,z7e,u),b(d,Wc,u),e(Wc,D9),e(D9,Vue),g(BA,Vue,null),e(Wc,R1r),e(Wc,Wue),e(Wue,S1r),b(d,V7e,u),b(d,Lr,u),g(xA,Lr,null),e(Lr,P1r),e(Lr,Qc),e(Qc,$1r),e(Qc,Que),e(Que,I1r),e(Qc,j1r),e(Qc,Hue),e(Hue,N1r),e(Qc,D1r),e(Lr,q1r),e(Lr,kA),e(kA,G1r),e(kA,Uue),e(Uue,O1r),e(kA,X1r),e(Lr,z1r),e(Lr,Ft),g(RA,Ft,null),e(Ft,V1r),e(Ft,Jue),e(Jue,W1r),e(Ft,Q1r),e(Ft,Hc),e(Hc,H1r),e(Hc,Yue),e(Yue,U1r),e(Hc,J1r),e(Hc,Kue),e(Kue,Y1r),e(Hc,K1r),e(Ft,Z1r),e(Ft,Zue),e(Zue,ebr),e(Ft,obr),g(SA,Ft,null),e(Lr,rbr),e(Lr,Lo),g(PA,Lo,null),e(Lo,tbr),e(Lo,e5e),e(e5e,abr),e(Lo,nbr),e(Lo,En),e(En,sbr),e(En,o5e),e(o5e,lbr),e(En,ibr),e(En,r5e),e(r5e,dbr),e(En,cbr),e(En,t5e),e(t5e,fbr),e(En,mbr),e(Lo,gbr),e(Lo,fe),e(fe,q9),e(q9,a5e),e(a5e,hbr),e(q9,pbr),e(q9,jO),e(jO,_br),e(q9,ubr),e(fe,bbr),e(fe,G9),e(G9,n5e),e(n5e,vbr),e(G9,Tbr),e(G9,NO),e(NO,Fbr),e(G9,Cbr),e(fe,Mbr),e(fe,O9),e(O9,s5e),e(s5e,Ebr),e(O9,ybr),e(O9,DO),e(DO,wbr),e(O9,Abr),e(fe,Lbr),e(fe,X9),e(X9,l5e),e(l5e,Bbr),e(X9,xbr),e(X9,qO),e(qO,kbr),e(X9,Rbr),e(fe,Sbr),e(fe,z9),e(z9,i5e),e(i5e,Pbr),e(z9,$br),e(z9,GO),e(GO,Ibr),e(z9,jbr),e(fe,Nbr),e(fe,V9),e(V9,d5e),e(d5e,Dbr),e(V9,qbr),e(V9,OO),e(OO,Gbr),e(V9,Obr),e(fe,Xbr),e(fe,W9),e(W9,c5e),e(c5e,zbr),e(W9,Vbr),e(W9,XO),e(XO,Wbr),e(W9,Qbr),e(fe,Hbr),e(fe,Q9),e(Q9,f5e),e(f5e,Ubr),e(Q9,Jbr),e(Q9,zO),e(zO,Ybr),e(Q9,Kbr),e(fe,Zbr),e(fe,H9),e(H9,m5e),e(m5e,e2r),e(H9,o2r),e(H9,VO),e(VO,r2r),e(H9,t2r),e(fe,a2r),e(fe,U9),e(U9,g5e),e(g5e,n2r),e(U9,s2r),e(U9,WO),e(WO,l2r),e(U9,i2r),e(fe,d2r),e(fe,J9),e(J9,h5e),e(h5e,c2r),e(J9,f2r),e(J9,QO),e(QO,m2r),e(J9,g2r),e(Lo,h2r),e(Lo,p5e),e(p5e,p2r),e(Lo,_2r),g($A,Lo,null),b(d,W7e,u),b(d,Uc,u),e(Uc,Y9),e(Y9,_5e),g(IA,_5e,null),e(Uc,u2r),e(Uc,u5e),e(u5e,b2r),b(d,Q7e,u),b(d,Br,u),g(jA,Br,null),e(Br,v2r),e(Br,Jc),e(Jc,T2r),e(Jc,b5e),e(b5e,F2r),e(Jc,C2r),e(Jc,v5e),e(v5e,M2r),e(Jc,E2r),e(Br,y2r),e(Br,NA),e(NA,w2r),e(NA,T5e),e(T5e,A2r),e(NA,L2r),e(Br,B2r),e(Br,Ct),g(DA,Ct,null),e(Ct,x2r),e(Ct,F5e),e(F5e,k2r),e(Ct,R2r),e(Ct,Yc),e(Yc,S2r),e(Yc,C5e),e(C5e,P2r),e(Yc,$2r),e(Yc,M5e),e(M5e,I2r),e(Yc,j2r),e(Ct,N2r),e(Ct,E5e),e(E5e,D2r),e(Ct,q2r),g(qA,Ct,null),e(Br,G2r),e(Br,Bo),g(GA,Bo,null),e(Bo,O2r),e(Bo,y5e),e(y5e,X2r),e(Bo,z2r),e(Bo,yn),e(yn,V2r),e(yn,w5e),e(w5e,W2r),e(yn,Q2r),e(yn,A5e),e(A5e,H2r),e(yn,U2r),e(yn,L5e),e(L5e,J2r),e(yn,Y2r),e(Bo,K2r),e(Bo,ve),e(ve,K9),e(K9,B5e),e(B5e,Z2r),e(K9,evr),e(K9,HO),e(HO,ovr),e(K9,rvr),e(ve,tvr),e(ve,Z9),e(Z9,x5e),e(x5e,avr),e(Z9,nvr),e(Z9,UO),e(UO,svr),e(Z9,lvr),e(ve,ivr),e(ve,eC),e(eC,k5e),e(k5e,dvr),e(eC,cvr),e(eC,JO),e(JO,fvr),e(eC,mvr),e(ve,gvr),e(ve,oC),e(oC,R5e),e(R5e,hvr),e(oC,pvr),e(oC,YO),e(YO,_vr),e(oC,uvr),e(ve,bvr),e(ve,rC),e(rC,S5e),e(S5e,vvr),e(rC,Tvr),e(rC,KO),e(KO,Fvr),e(rC,Cvr),e(ve,Mvr),e(ve,tC),e(tC,P5e),e(P5e,Evr),e(tC,yvr),e(tC,ZO),e(ZO,wvr),e(tC,Avr),e(ve,Lvr),e(ve,aC),e(aC,$5e),e($5e,Bvr),e(aC,xvr),e(aC,eX),e(eX,kvr),e(aC,Rvr),e(ve,Svr),e(ve,nC),e(nC,I5e),e(I5e,Pvr),e(nC,$vr),e(nC,oX),e(oX,Ivr),e(nC,jvr),e(ve,Nvr),e(ve,sC),e(sC,j5e),e(j5e,Dvr),e(sC,qvr),e(sC,rX),e(rX,Gvr),e(sC,Ovr),e(Bo,Xvr),e(Bo,N5e),e(N5e,zvr),e(Bo,Vvr),g(OA,Bo,null),b(d,H7e,u),b(d,Kc,u),e(Kc,lC),e(lC,D5e),g(XA,D5e,null),e(Kc,Wvr),e(Kc,q5e),e(q5e,Qvr),b(d,U7e,u),b(d,xr,u),g(zA,xr,null),e(xr,Hvr),e(xr,Zc),e(Zc,Uvr),e(Zc,G5e),e(G5e,Jvr),e(Zc,Yvr),e(Zc,O5e),e(O5e,Kvr),e(Zc,Zvr),e(xr,eTr),e(xr,VA),e(VA,oTr),e(VA,X5e),e(X5e,rTr),e(VA,tTr),e(xr,aTr),e(xr,Mt),g(WA,Mt,null),e(Mt,nTr),e(Mt,z5e),e(z5e,sTr),e(Mt,lTr),e(Mt,ef),e(ef,iTr),e(ef,V5e),e(V5e,dTr),e(ef,cTr),e(ef,W5e),e(W5e,fTr),e(ef,mTr),e(Mt,gTr),e(Mt,Q5e),e(Q5e,hTr),e(Mt,pTr),g(QA,Mt,null),e(xr,_Tr),e(xr,xo),g(HA,xo,null),e(xo,uTr),e(xo,H5e),e(H5e,bTr),e(xo,vTr),e(xo,wn),e(wn,TTr),e(wn,U5e),e(U5e,FTr),e(wn,CTr),e(wn,J5e),e(J5e,MTr),e(wn,ETr),e(wn,Y5e),e(Y5e,yTr),e(wn,wTr),e(xo,ATr),e(xo,Te),e(Te,iC),e(iC,K5e),e(K5e,LTr),e(iC,BTr),e(iC,tX),e(tX,xTr),e(iC,kTr),e(Te,RTr),e(Te,dC),e(dC,Z5e),e(Z5e,STr),e(dC,PTr),e(dC,aX),e(aX,$Tr),e(dC,ITr),e(Te,jTr),e(Te,cC),e(cC,e1e),e(e1e,NTr),e(cC,DTr),e(cC,nX),e(nX,qTr),e(cC,GTr),e(Te,OTr),e(Te,fC),e(fC,o1e),e(o1e,XTr),e(fC,zTr),e(fC,sX),e(sX,VTr),e(fC,WTr),e(Te,QTr),e(Te,mC),e(mC,r1e),e(r1e,HTr),e(mC,UTr),e(mC,lX),e(lX,JTr),e(mC,YTr),e(Te,KTr),e(Te,gC),e(gC,t1e),e(t1e,ZTr),e(gC,e8r),e(gC,iX),e(iX,o8r),e(gC,r8r),e(Te,t8r),e(Te,hC),e(hC,a1e),e(a1e,a8r),e(hC,n8r),e(hC,dX),e(dX,s8r),e(hC,l8r),e(Te,i8r),e(Te,pC),e(pC,n1e),e(n1e,d8r),e(pC,c8r),e(pC,cX),e(cX,f8r),e(pC,m8r),e(Te,g8r),e(Te,_C),e(_C,s1e),e(s1e,h8r),e(_C,p8r),e(_C,fX),e(fX,_8r),e(_C,u8r),e(xo,b8r),e(xo,l1e),e(l1e,v8r),e(xo,T8r),g(UA,xo,null),b(d,J7e,u),b(d,of,u),e(of,uC),e(uC,i1e),g(JA,i1e,null),e(of,F8r),e(of,d1e),e(d1e,C8r),b(d,Y7e,u),b(d,kr,u),g(YA,kr,null),e(kr,M8r),e(kr,rf),e(rf,E8r),e(rf,c1e),e(c1e,y8r),e(rf,w8r),e(rf,f1e),e(f1e,A8r),e(rf,L8r),e(kr,B8r),e(kr,KA),e(KA,x8r),e(KA,m1e),e(m1e,k8r),e(KA,R8r),e(kr,S8r),e(kr,Et),g(ZA,Et,null),e(Et,P8r),e(Et,g1e),e(g1e,$8r),e(Et,I8r),e(Et,tf),e(tf,j8r),e(tf,h1e),e(h1e,N8r),e(tf,D8r),e(tf,p1e),e(p1e,q8r),e(tf,G8r),e(Et,O8r),e(Et,_1e),e(_1e,X8r),e(Et,z8r),g(e6,Et,null),e(kr,V8r),e(kr,ko),g(o6,ko,null),e(ko,W8r),e(ko,u1e),e(u1e,Q8r),e(ko,H8r),e(ko,An),e(An,U8r),e(An,b1e),e(b1e,J8r),e(An,Y8r),e(An,v1e),e(v1e,K8r),e(An,Z8r),e(An,T1e),e(T1e,eFr),e(An,oFr),e(ko,rFr),e(ko,Fe),e(Fe,bC),e(bC,F1e),e(F1e,tFr),e(bC,aFr),e(bC,mX),e(mX,nFr),e(bC,sFr),e(Fe,lFr),e(Fe,vC),e(vC,C1e),e(C1e,iFr),e(vC,dFr),e(vC,gX),e(gX,cFr),e(vC,fFr),e(Fe,mFr),e(Fe,TC),e(TC,M1e),e(M1e,gFr),e(TC,hFr),e(TC,hX),e(hX,pFr),e(TC,_Fr),e(Fe,uFr),e(Fe,FC),e(FC,E1e),e(E1e,bFr),e(FC,vFr),e(FC,pX),e(pX,TFr),e(FC,FFr),e(Fe,CFr),e(Fe,CC),e(CC,y1e),e(y1e,MFr),e(CC,EFr),e(CC,_X),e(_X,yFr),e(CC,wFr),e(Fe,AFr),e(Fe,MC),e(MC,w1e),e(w1e,LFr),e(MC,BFr),e(MC,uX),e(uX,xFr),e(MC,kFr),e(Fe,RFr),e(Fe,EC),e(EC,A1e),e(A1e,SFr),e(EC,PFr),e(EC,bX),e(bX,$Fr),e(EC,IFr),e(Fe,jFr),e(Fe,yC),e(yC,L1e),e(L1e,NFr),e(yC,DFr),e(yC,vX),e(vX,qFr),e(yC,GFr),e(Fe,OFr),e(Fe,wC),e(wC,B1e),e(B1e,XFr),e(wC,zFr),e(wC,TX),e(TX,VFr),e(wC,WFr),e(ko,QFr),e(ko,x1e),e(x1e,HFr),e(ko,UFr),g(r6,ko,null),b(d,K7e,u),b(d,af,u),e(af,AC),e(AC,k1e),g(t6,k1e,null),e(af,JFr),e(af,R1e),e(R1e,YFr),b(d,Z7e,u),b(d,Rr,u),g(a6,Rr,null),e(Rr,KFr),e(Rr,nf),e(nf,ZFr),e(nf,S1e),e(S1e,e9r),e(nf,o9r),e(nf,P1e),e(P1e,r9r),e(nf,t9r),e(Rr,a9r),e(Rr,n6),e(n6,n9r),e(n6,$1e),e($1e,s9r),e(n6,l9r),e(Rr,i9r),e(Rr,yt),g(s6,yt,null),e(yt,d9r),e(yt,I1e),e(I1e,c9r),e(yt,f9r),e(yt,sf),e(sf,m9r),e(sf,j1e),e(j1e,g9r),e(sf,h9r),e(sf,N1e),e(N1e,p9r),e(sf,_9r),e(yt,u9r),e(yt,D1e),e(D1e,b9r),e(yt,v9r),g(l6,yt,null),e(Rr,T9r),e(Rr,Ro),g(i6,Ro,null),e(Ro,F9r),e(Ro,q1e),e(q1e,C9r),e(Ro,M9r),e(Ro,Ln),e(Ln,E9r),e(Ln,G1e),e(G1e,y9r),e(Ln,w9r),e(Ln,O1e),e(O1e,A9r),e(Ln,L9r),e(Ln,X1e),e(X1e,B9r),e(Ln,x9r),e(Ro,k9r),e(Ro,Ce),e(Ce,LC),e(LC,z1e),e(z1e,R9r),e(LC,S9r),e(LC,FX),e(FX,P9r),e(LC,$9r),e(Ce,I9r),e(Ce,BC),e(BC,V1e),e(V1e,j9r),e(BC,N9r),e(BC,CX),e(CX,D9r),e(BC,q9r),e(Ce,G9r),e(Ce,xC),e(xC,W1e),e(W1e,O9r),e(xC,X9r),e(xC,MX),e(MX,z9r),e(xC,V9r),e(Ce,W9r),e(Ce,kC),e(kC,Q1e),e(Q1e,Q9r),e(kC,H9r),e(kC,EX),e(EX,U9r),e(kC,J9r),e(Ce,Y9r),e(Ce,RC),e(RC,H1e),e(H1e,K9r),e(RC,Z9r),e(RC,yX),e(yX,eCr),e(RC,oCr),e(Ce,rCr),e(Ce,SC),e(SC,U1e),e(U1e,tCr),e(SC,aCr),e(SC,wX),e(wX,nCr),e(SC,sCr),e(Ce,lCr),e(Ce,PC),e(PC,J1e),e(J1e,iCr),e(PC,dCr),e(PC,AX),e(AX,cCr),e(PC,fCr),e(Ce,mCr),e(Ce,$C),e($C,Y1e),e(Y1e,gCr),e($C,hCr),e($C,LX),e(LX,pCr),e($C,_Cr),e(Ce,uCr),e(Ce,IC),e(IC,K1e),e(K1e,bCr),e(IC,vCr),e(IC,BX),e(BX,TCr),e(IC,FCr),e(Ro,CCr),e(Ro,Z1e),e(Z1e,MCr),e(Ro,ECr),g(d6,Ro,null),b(d,eBe,u),b(d,lf,u),e(lf,jC),e(jC,ebe),g(c6,ebe,null),e(lf,yCr),e(lf,obe),e(obe,wCr),b(d,oBe,u),b(d,Sr,u),g(f6,Sr,null),e(Sr,ACr),e(Sr,df),e(df,LCr),e(df,rbe),e(rbe,BCr),e(df,xCr),e(df,tbe),e(tbe,kCr),e(df,RCr),e(Sr,SCr),e(Sr,m6),e(m6,PCr),e(m6,abe),e(abe,$Cr),e(m6,ICr),e(Sr,jCr),e(Sr,wt),g(g6,wt,null),e(wt,NCr),e(wt,nbe),e(nbe,DCr),e(wt,qCr),e(wt,cf),e(cf,GCr),e(cf,sbe),e(sbe,OCr),e(cf,XCr),e(cf,lbe),e(lbe,zCr),e(cf,VCr),e(wt,WCr),e(wt,ibe),e(ibe,QCr),e(wt,HCr),g(h6,wt,null),e(Sr,UCr),e(Sr,So),g(p6,So,null),e(So,JCr),e(So,dbe),e(dbe,YCr),e(So,KCr),e(So,Bn),e(Bn,ZCr),e(Bn,cbe),e(cbe,e4r),e(Bn,o4r),e(Bn,fbe),e(fbe,r4r),e(Bn,t4r),e(Bn,mbe),e(mbe,a4r),e(Bn,n4r),e(So,s4r),e(So,so),e(so,NC),e(NC,gbe),e(gbe,l4r),e(NC,i4r),e(NC,xX),e(xX,d4r),e(NC,c4r),e(so,f4r),e(so,DC),e(DC,hbe),e(hbe,m4r),e(DC,g4r),e(DC,kX),e(kX,h4r),e(DC,p4r),e(so,_4r),e(so,qC),e(qC,pbe),e(pbe,u4r),e(qC,b4r),e(qC,RX),e(RX,v4r),e(qC,T4r),e(so,F4r),e(so,GC),e(GC,_be),e(_be,C4r),e(GC,M4r),e(GC,SX),e(SX,E4r),e(GC,y4r),e(so,w4r),e(so,OC),e(OC,ube),e(ube,A4r),e(OC,L4r),e(OC,PX),e(PX,B4r),e(OC,x4r),e(so,k4r),e(so,XC),e(XC,bbe),e(bbe,R4r),e(XC,S4r),e(XC,$X),e($X,P4r),e(XC,$4r),e(so,I4r),e(so,zC),e(zC,vbe),e(vbe,j4r),e(zC,N4r),e(zC,IX),e(IX,D4r),e(zC,q4r),e(So,G4r),e(So,Tbe),e(Tbe,O4r),e(So,X4r),g(_6,So,null),b(d,rBe,u),b(d,ff,u),e(ff,VC),e(VC,Fbe),g(u6,Fbe,null),e(ff,z4r),e(ff,Cbe),e(Cbe,V4r),b(d,tBe,u),b(d,Pr,u),g(b6,Pr,null),e(Pr,W4r),e(Pr,mf),e(mf,Q4r),e(mf,Mbe),e(Mbe,H4r),e(mf,U4r),e(mf,Ebe),e(Ebe,J4r),e(mf,Y4r),e(Pr,K4r),e(Pr,v6),e(v6,Z4r),e(v6,ybe),e(ybe,eMr),e(v6,oMr),e(Pr,rMr),e(Pr,At),g(T6,At,null),e(At,tMr),e(At,wbe),e(wbe,aMr),e(At,nMr),e(At,gf),e(gf,sMr),e(gf,Abe),e(Abe,lMr),e(gf,iMr),e(gf,Lbe),e(Lbe,dMr),e(gf,cMr),e(At,fMr),e(At,Bbe),e(Bbe,mMr),e(At,gMr),g(F6,At,null),e(Pr,hMr),e(Pr,Po),g(C6,Po,null),e(Po,pMr),e(Po,xbe),e(xbe,_Mr),e(Po,uMr),e(Po,xn),e(xn,bMr),e(xn,kbe),e(kbe,vMr),e(xn,TMr),e(xn,Rbe),e(Rbe,FMr),e(xn,CMr),e(xn,Sbe),e(Sbe,MMr),e(xn,EMr),e(Po,yMr),e(Po,lo),e(lo,WC),e(WC,Pbe),e(Pbe,wMr),e(WC,AMr),e(WC,jX),e(jX,LMr),e(WC,BMr),e(lo,xMr),e(lo,QC),e(QC,$be),e($be,kMr),e(QC,RMr),e(QC,NX),e(NX,SMr),e(QC,PMr),e(lo,$Mr),e(lo,HC),e(HC,Ibe),e(Ibe,IMr),e(HC,jMr),e(HC,DX),e(DX,NMr),e(HC,DMr),e(lo,qMr),e(lo,UC),e(UC,jbe),e(jbe,GMr),e(UC,OMr),e(UC,qX),e(qX,XMr),e(UC,zMr),e(lo,VMr),e(lo,JC),e(JC,Nbe),e(Nbe,WMr),e(JC,QMr),e(JC,GX),e(GX,HMr),e(JC,UMr),e(lo,JMr),e(lo,YC),e(YC,Dbe),e(Dbe,YMr),e(YC,KMr),e(YC,OX),e(OX,ZMr),e(YC,eEr),e(lo,oEr),e(lo,KC),e(KC,qbe),e(qbe,rEr),e(KC,tEr),e(KC,XX),e(XX,aEr),e(KC,nEr),e(Po,sEr),e(Po,Gbe),e(Gbe,lEr),e(Po,iEr),g(M6,Po,null),b(d,aBe,u),b(d,hf,u),e(hf,ZC),e(ZC,Obe),g(E6,Obe,null),e(hf,dEr),e(hf,Xbe),e(Xbe,cEr),b(d,nBe,u),b(d,$r,u),g(y6,$r,null),e($r,fEr),e($r,pf),e(pf,mEr),e(pf,zbe),e(zbe,gEr),e(pf,hEr),e(pf,Vbe),e(Vbe,pEr),e(pf,_Er),e($r,uEr),e($r,w6),e(w6,bEr),e(w6,Wbe),e(Wbe,vEr),e(w6,TEr),e($r,FEr),e($r,Lt),g(A6,Lt,null),e(Lt,CEr),e(Lt,Qbe),e(Qbe,MEr),e(Lt,EEr),e(Lt,_f),e(_f,yEr),e(_f,Hbe),e(Hbe,wEr),e(_f,AEr),e(_f,Ube),e(Ube,LEr),e(_f,BEr),e(Lt,xEr),e(Lt,Jbe),e(Jbe,kEr),e(Lt,REr),g(L6,Lt,null),e($r,SEr),e($r,$o),g(B6,$o,null),e($o,PEr),e($o,Ybe),e(Ybe,$Er),e($o,IEr),e($o,kn),e(kn,jEr),e(kn,Kbe),e(Kbe,NEr),e(kn,DEr),e(kn,Zbe),e(Zbe,qEr),e(kn,GEr),e(kn,e2e),e(e2e,OEr),e(kn,XEr),e($o,zEr),e($o,o2e),e(o2e,e4),e(e4,r2e),e(r2e,VEr),e(e4,WEr),e(e4,zX),e(zX,QEr),e(e4,HEr),e($o,UEr),e($o,t2e),e(t2e,JEr),e($o,YEr),g(x6,$o,null),b(d,sBe,u),b(d,uf,u),e(uf,o4),e(o4,a2e),g(k6,a2e,null),e(uf,KEr),e(uf,n2e),e(n2e,ZEr),b(d,lBe,u),b(d,Ir,u),g(R6,Ir,null),e(Ir,e3r),e(Ir,bf),e(bf,o3r),e(bf,s2e),e(s2e,r3r),e(bf,t3r),e(bf,l2e),e(l2e,a3r),e(bf,n3r),e(Ir,s3r),e(Ir,S6),e(S6,l3r),e(S6,i2e),e(i2e,i3r),e(S6,d3r),e(Ir,c3r),e(Ir,Bt),g(P6,Bt,null),e(Bt,f3r),e(Bt,d2e),e(d2e,m3r),e(Bt,g3r),e(Bt,vf),e(vf,h3r),e(vf,c2e),e(c2e,p3r),e(vf,_3r),e(vf,f2e),e(f2e,u3r),e(vf,b3r),e(Bt,v3r),e(Bt,m2e),e(m2e,T3r),e(Bt,F3r),g($6,Bt,null),e(Ir,C3r),e(Ir,Io),g(I6,Io,null),e(Io,M3r),e(Io,g2e),e(g2e,E3r),e(Io,y3r),e(Io,Rn),e(Rn,w3r),e(Rn,h2e),e(h2e,A3r),e(Rn,L3r),e(Rn,p2e),e(p2e,B3r),e(Rn,x3r),e(Rn,_2e),e(_2e,k3r),e(Rn,R3r),e(Io,S3r),e(Io,j6),e(j6,r4),e(r4,u2e),e(u2e,P3r),e(r4,$3r),e(r4,VX),e(VX,I3r),e(r4,j3r),e(j6,N3r),e(j6,t4),e(t4,b2e),e(b2e,D3r),e(t4,q3r),e(t4,WX),e(WX,G3r),e(t4,O3r),e(Io,X3r),e(Io,v2e),e(v2e,z3r),e(Io,V3r),g(N6,Io,null),b(d,iBe,u),b(d,Tf,u),e(Tf,a4),e(a4,T2e),g(D6,T2e,null),e(Tf,W3r),e(Tf,F2e),e(F2e,Q3r),b(d,dBe,u),b(d,jr,u),g(q6,jr,null),e(jr,H3r),e(jr,Ff),e(Ff,U3r),e(Ff,C2e),e(C2e,J3r),e(Ff,Y3r),e(Ff,M2e),e(M2e,K3r),e(Ff,Z3r),e(jr,eyr),e(jr,G6),e(G6,oyr),e(G6,E2e),e(E2e,ryr),e(G6,tyr),e(jr,ayr),e(jr,xt),g(O6,xt,null),e(xt,nyr),e(xt,y2e),e(y2e,syr),e(xt,lyr),e(xt,Cf),e(Cf,iyr),e(Cf,w2e),e(w2e,dyr),e(Cf,cyr),e(Cf,A2e),e(A2e,fyr),e(Cf,myr),e(xt,gyr),e(xt,L2e),e(L2e,hyr),e(xt,pyr),g(X6,xt,null),e(jr,_yr),e(jr,jo),g(z6,jo,null),e(jo,uyr),e(jo,B2e),e(B2e,byr),e(jo,vyr),e(jo,Sn),e(Sn,Tyr),e(Sn,x2e),e(x2e,Fyr),e(Sn,Cyr),e(Sn,k2e),e(k2e,Myr),e(Sn,Eyr),e(Sn,R2e),e(R2e,yyr),e(Sn,wyr),e(jo,Ayr),e(jo,S2e),e(S2e,n4),e(n4,P2e),e(P2e,Lyr),e(n4,Byr),e(n4,QX),e(QX,xyr),e(n4,kyr),e(jo,Ryr),e(jo,$2e),e($2e,Syr),e(jo,Pyr),g(V6,jo,null),cBe=!0},p(d,[u]){const W6={};u&2&&(W6.$$scope={dirty:u,ctx:d}),Bf.$set(W6);const I2e={};u&2&&(I2e.$$scope={dirty:u,ctx:d}),ih.$set(I2e);const j2e={};u&2&&(j2e.$$scope={dirty:u,ctx:d}),vh.$set(j2e)},i(d){cBe||(h(ce.$$.fragment,d),h($a.$$.fragment,d),h(lM.$$.fragment,d),h(iM.$$.fragment,d),h(Bf.$$.fragment,d),h(dM.$$.fragment,d),h(cM.$$.fragment,d),h(gM.$$.fragment,d),h(hM.$$.fragment,d),h(pM.$$.fragment,d),h(_M.$$.fragment,d),h(uM.$$.fragment,d),h(TM.$$.fragment,d),h(FM.$$.fragment,d),h(CM.$$.fragment,d),h(MM.$$.fragment,d),h(EM.$$.fragment,d),h(AM.$$.fragment,d),h(ih.$$.fragment,d),h(LM.$$.fragment,d),h(BM.$$.fragment,d),h(xM.$$.fragment,d),h(kM.$$.fragment,d),h(PM.$$.fragment,d),h(vh.$$.fragment,d),h($M.$$.fragment,d),h(IM.$$.fragment,d),h(jM.$$.fragment,d),h(NM.$$.fragment,d),h(qM.$$.fragment,d),h(GM.$$.fragment,d),h(OM.$$.fragment,d),h(XM.$$.fragment,d),h(zM.$$.fragment,d),h(VM.$$.fragment,d),h(QM.$$.fragment,d),h(HM.$$.fragment,d),h(UM.$$.fragment,d),h(JM.$$.fragment,d),h(YM.$$.fragment,d),h(KM.$$.fragment,d),h(eE.$$.fragment,d),h(oE.$$.fragment,d),h(rE.$$.fragment,d),h(tE.$$.fragment,d),h(aE.$$.fragment,d),h(nE.$$.fragment,d),h(lE.$$.fragment,d),h(iE.$$.fragment,d),h(dE.$$.fragment,d),h(cE.$$.fragment,d),h(fE.$$.fragment,d),h(mE.$$.fragment,d),h(hE.$$.fragment,d),h(pE.$$.fragment,d),h(_E.$$.fragment,d),h(uE.$$.fragment,d),h(bE.$$.fragment,d),h(vE.$$.fragment,d),h(FE.$$.fragment,d),h(CE.$$.fragment,d),h(ME.$$.fragment,d),h(EE.$$.fragment,d),h(yE.$$.fragment,d),h(wE.$$.fragment,d),h(LE.$$.fragment,d),h(BE.$$.fragment,d),h(xE.$$.fragment,d),h(kE.$$.fragment,d),h(RE.$$.fragment,d),h(SE.$$.fragment,d),h($E.$$.fragment,d),h(IE.$$.fragment,d),h(jE.$$.fragment,d),h(NE.$$.fragment,d),h(DE.$$.fragment,d),h(qE.$$.fragment,d),h(OE.$$.fragment,d),h(XE.$$.fragment,d),h(zE.$$.fragment,d),h(VE.$$.fragment,d),h(WE.$$.fragment,d),h(QE.$$.fragment,d),h(UE.$$.fragment,d),h(JE.$$.fragment,d),h(YE.$$.fragment,d),h(KE.$$.fragment,d),h(ZE.$$.fragment,d),h(e3.$$.fragment,d),h(r3.$$.fragment,d),h(t3.$$.fragment,d),h(a3.$$.fragment,d),h(n3.$$.fragment,d),h(s3.$$.fragment,d),h(l3.$$.fragment,d),h(d3.$$.fragment,d),h(c3.$$.fragment,d),h(f3.$$.fragment,d),h(m3.$$.fragment,d),h(g3.$$.fragment,d),h(h3.$$.fragment,d),h(_3.$$.fragment,d),h(u3.$$.fragment,d),h(b3.$$.fragment,d),h(v3.$$.fragment,d),h(T3.$$.fragment,d),h(F3.$$.fragment,d),h(M3.$$.fragment,d),h(E3.$$.fragment,d),h(y3.$$.fragment,d),h(w3.$$.fragment,d),h(A3.$$.fragment,d),h(L3.$$.fragment,d),h(x3.$$.fragment,d),h(k3.$$.fragment,d),h(R3.$$.fragment,d),h(S3.$$.fragment,d),h(P3.$$.fragment,d),h($3.$$.fragment,d),h(j3.$$.fragment,d),h(N3.$$.fragment,d),h(D3.$$.fragment,d),h(q3.$$.fragment,d),h(G3.$$.fragment,d),h(O3.$$.fragment,d),h(z3.$$.fragment,d),h(V3.$$.fragment,d),h(W3.$$.fragment,d),h(H3.$$.fragment,d),h(U3.$$.fragment,d),h(J3.$$.fragment,d),h(K3.$$.fragment,d),h(Z3.$$.fragment,d),h(ey.$$.fragment,d),h(oy.$$.fragment,d),h(ry.$$.fragment,d),h(ty.$$.fragment,d),h(ny.$$.fragment,d),h(sy.$$.fragment,d),h(ly.$$.fragment,d),h(iy.$$.fragment,d),h(dy.$$.fragment,d),h(cy.$$.fragment,d),h(my.$$.fragment,d),h(gy.$$.fragment,d),h(hy.$$.fragment,d),h(py.$$.fragment,d),h(_y.$$.fragment,d),h(uy.$$.fragment,d),h(vy.$$.fragment,d),h(Ty.$$.fragment,d),h(Fy.$$.fragment,d),h(Cy.$$.fragment,d),h(My.$$.fragment,d),h(Ey.$$.fragment,d),h(wy.$$.fragment,d),h(Ay.$$.fragment,d),h(Ly.$$.fragment,d),h(xy.$$.fragment,d),h(ky.$$.fragment,d),h(Ry.$$.fragment,d),h(Py.$$.fragment,d),h($y.$$.fragment,d),h(Iy.$$.fragment,d),h(jy.$$.fragment,d),h(Ny.$$.fragment,d),h(Dy.$$.fragment,d),h(Gy.$$.fragment,d),h(Oy.$$.fragment,d),h(Xy.$$.fragment,d),h(zy.$$.fragment,d),h(Vy.$$.fragment,d),h(Wy.$$.fragment,d),h(Hy.$$.fragment,d),h(Uy.$$.fragment,d),h(Jy.$$.fragment,d),h(Yy.$$.fragment,d),h(Ky.$$.fragment,d),h(Zy.$$.fragment,d),h(ow.$$.fragment,d),h(rw.$$.fragment,d),h(tw.$$.fragment,d),h(nw.$$.fragment,d),h(sw.$$.fragment,d),h(lw.$$.fragment,d),h(dw.$$.fragment,d),h(cw.$$.fragment,d),h(fw.$$.fragment,d),h(mw.$$.fragment,d),h(gw.$$.fragment,d),h(hw.$$.fragment,d),h(_w.$$.fragment,d),h(uw.$$.fragment,d),h(bw.$$.fragment,d),h(vw.$$.fragment,d),h(Tw.$$.fragment,d),h(Fw.$$.fragment,d),h(Mw.$$.fragment,d),h(Ew.$$.fragment,d),h(yw.$$.fragment,d),h(ww.$$.fragment,d),h(Aw.$$.fragment,d),h(Lw.$$.fragment,d),h(xw.$$.fragment,d),h(kw.$$.fragment,d),h(Rw.$$.fragment,d),h(Sw.$$.fragment,d),h(Pw.$$.fragment,d),h($w.$$.fragment,d),h(jw.$$.fragment,d),h(Nw.$$.fragment,d),h(Dw.$$.fragment,d),h(qw.$$.fragment,d),h(Gw.$$.fragment,d),h(Ow.$$.fragment,d),h(zw.$$.fragment,d),h(Vw.$$.fragment,d),h(Ww.$$.fragment,d),h(Qw.$$.fragment,d),h(Hw.$$.fragment,d),h(Uw.$$.fragment,d),h(Yw.$$.fragment,d),h(Kw.$$.fragment,d),h(Zw.$$.fragment,d),h(eA.$$.fragment,d),h(oA.$$.fragment,d),h(rA.$$.fragment,d),h(aA.$$.fragment,d),h(nA.$$.fragment,d),h(sA.$$.fragment,d),h(lA.$$.fragment,d),h(iA.$$.fragment,d),h(dA.$$.fragment,d),h(fA.$$.fragment,d),h(mA.$$.fragment,d),h(gA.$$.fragment,d),h(hA.$$.fragment,d),h(pA.$$.fragment,d),h(_A.$$.fragment,d),h(bA.$$.fragment,d),h(vA.$$.fragment,d),h(TA.$$.fragment,d),h(FA.$$.fragment,d),h(CA.$$.fragment,d),h(MA.$$.fragment,d),h(yA.$$.fragment,d),h(wA.$$.fragment,d),h(AA.$$.fragment,d),h(LA.$$.fragment,d),h(BA.$$.fragment,d),h(xA.$$.fragment,d),h(RA.$$.fragment,d),h(SA.$$.fragment,d),h(PA.$$.fragment,d),h($A.$$.fragment,d),h(IA.$$.fragment,d),h(jA.$$.fragment,d),h(DA.$$.fragment,d),h(qA.$$.fragment,d),h(GA.$$.fragment,d),h(OA.$$.fragment,d),h(XA.$$.fragment,d),h(zA.$$.fragment,d),h(WA.$$.fragment,d),h(QA.$$.fragment,d),h(HA.$$.fragment,d),h(UA.$$.fragment,d),h(JA.$$.fragment,d),h(YA.$$.fragment,d),h(ZA.$$.fragment,d),h(e6.$$.fragment,d),h(o6.$$.fragment,d),h(r6.$$.fragment,d),h(t6.$$.fragment,d),h(a6.$$.fragment,d),h(s6.$$.fragment,d),h(l6.$$.fragment,d),h(i6.$$.fragment,d),h(d6.$$.fragment,d),h(c6.$$.fragment,d),h(f6.$$.fragment,d),h(g6.$$.fragment,d),h(h6.$$.fragment,d),h(p6.$$.fragment,d),h(_6.$$.fragment,d),h(u6.$$.fragment,d),h(b6.$$.fragment,d),h(T6.$$.fragment,d),h(F6.$$.fragment,d),h(C6.$$.fragment,d),h(M6.$$.fragment,d),h(E6.$$.fragment,d),h(y6.$$.fragment,d),h(A6.$$.fragment,d),h(L6.$$.fragment,d),h(B6.$$.fragment,d),h(x6.$$.fragment,d),h(k6.$$.fragment,d),h(R6.$$.fragment,d),h(P6.$$.fragment,d),h($6.$$.fragment,d),h(I6.$$.fragment,d),h(N6.$$.fragment,d),h(D6.$$.fragment,d),h(q6.$$.fragment,d),h(O6.$$.fragment,d),h(X6.$$.fragment,d),h(z6.$$.fragment,d),h(V6.$$.fragment,d),cBe=!0)},o(d){p(ce.$$.fragment,d),p($a.$$.fragment,d),p(lM.$$.fragment,d),p(iM.$$.fragment,d),p(Bf.$$.fragment,d),p(dM.$$.fragment,d),p(cM.$$.fragment,d),p(gM.$$.fragment,d),p(hM.$$.fragment,d),p(pM.$$.fragment,d),p(_M.$$.fragment,d),p(uM.$$.fragment,d),p(TM.$$.fragment,d),p(FM.$$.fragment,d),p(CM.$$.fragment,d),p(MM.$$.fragment,d),p(EM.$$.fragment,d),p(AM.$$.fragment,d),p(ih.$$.fragment,d),p(LM.$$.fragment,d),p(BM.$$.fragment,d),p(xM.$$.fragment,d),p(kM.$$.fragment,d),p(PM.$$.fragment,d),p(vh.$$.fragment,d),p($M.$$.fragment,d),p(IM.$$.fragment,d),p(jM.$$.fragment,d),p(NM.$$.fragment,d),p(qM.$$.fragment,d),p(GM.$$.fragment,d),p(OM.$$.fragment,d),p(XM.$$.fragment,d),p(zM.$$.fragment,d),p(VM.$$.fragment,d),p(QM.$$.fragment,d),p(HM.$$.fragment,d),p(UM.$$.fragment,d),p(JM.$$.fragment,d),p(YM.$$.fragment,d),p(KM.$$.fragment,d),p(eE.$$.fragment,d),p(oE.$$.fragment,d),p(rE.$$.fragment,d),p(tE.$$.fragment,d),p(aE.$$.fragment,d),p(nE.$$.fragment,d),p(lE.$$.fragment,d),p(iE.$$.fragment,d),p(dE.$$.fragment,d),p(cE.$$.fragment,d),p(fE.$$.fragment,d),p(mE.$$.fragment,d),p(hE.$$.fragment,d),p(pE.$$.fragment,d),p(_E.$$.fragment,d),p(uE.$$.fragment,d),p(bE.$$.fragment,d),p(vE.$$.fragment,d),p(FE.$$.fragment,d),p(CE.$$.fragment,d),p(ME.$$.fragment,d),p(EE.$$.fragment,d),p(yE.$$.fragment,d),p(wE.$$.fragment,d),p(LE.$$.fragment,d),p(BE.$$.fragment,d),p(xE.$$.fragment,d),p(kE.$$.fragment,d),p(RE.$$.fragment,d),p(SE.$$.fragment,d),p($E.$$.fragment,d),p(IE.$$.fragment,d),p(jE.$$.fragment,d),p(NE.$$.fragment,d),p(DE.$$.fragment,d),p(qE.$$.fragment,d),p(OE.$$.fragment,d),p(XE.$$.fragment,d),p(zE.$$.fragment,d),p(VE.$$.fragment,d),p(WE.$$.fragment,d),p(QE.$$.fragment,d),p(UE.$$.fragment,d),p(JE.$$.fragment,d),p(YE.$$.fragment,d),p(KE.$$.fragment,d),p(ZE.$$.fragment,d),p(e3.$$.fragment,d),p(r3.$$.fragment,d),p(t3.$$.fragment,d),p(a3.$$.fragment,d),p(n3.$$.fragment,d),p(s3.$$.fragment,d),p(l3.$$.fragment,d),p(d3.$$.fragment,d),p(c3.$$.fragment,d),p(f3.$$.fragment,d),p(m3.$$.fragment,d),p(g3.$$.fragment,d),p(h3.$$.fragment,d),p(_3.$$.fragment,d),p(u3.$$.fragment,d),p(b3.$$.fragment,d),p(v3.$$.fragment,d),p(T3.$$.fragment,d),p(F3.$$.fragment,d),p(M3.$$.fragment,d),p(E3.$$.fragment,d),p(y3.$$.fragment,d),p(w3.$$.fragment,d),p(A3.$$.fragment,d),p(L3.$$.fragment,d),p(x3.$$.fragment,d),p(k3.$$.fragment,d),p(R3.$$.fragment,d),p(S3.$$.fragment,d),p(P3.$$.fragment,d),p($3.$$.fragment,d),p(j3.$$.fragment,d),p(N3.$$.fragment,d),p(D3.$$.fragment,d),p(q3.$$.fragment,d),p(G3.$$.fragment,d),p(O3.$$.fragment,d),p(z3.$$.fragment,d),p(V3.$$.fragment,d),p(W3.$$.fragment,d),p(H3.$$.fragment,d),p(U3.$$.fragment,d),p(J3.$$.fragment,d),p(K3.$$.fragment,d),p(Z3.$$.fragment,d),p(ey.$$.fragment,d),p(oy.$$.fragment,d),p(ry.$$.fragment,d),p(ty.$$.fragment,d),p(ny.$$.fragment,d),p(sy.$$.fragment,d),p(ly.$$.fragment,d),p(iy.$$.fragment,d),p(dy.$$.fragment,d),p(cy.$$.fragment,d),p(my.$$.fragment,d),p(gy.$$.fragment,d),p(hy.$$.fragment,d),p(py.$$.fragment,d),p(_y.$$.fragment,d),p(uy.$$.fragment,d),p(vy.$$.fragment,d),p(Ty.$$.fragment,d),p(Fy.$$.fragment,d),p(Cy.$$.fragment,d),p(My.$$.fragment,d),p(Ey.$$.fragment,d),p(wy.$$.fragment,d),p(Ay.$$.fragment,d),p(Ly.$$.fragment,d),p(xy.$$.fragment,d),p(ky.$$.fragment,d),p(Ry.$$.fragment,d),p(Py.$$.fragment,d),p($y.$$.fragment,d),p(Iy.$$.fragment,d),p(jy.$$.fragment,d),p(Ny.$$.fragment,d),p(Dy.$$.fragment,d),p(Gy.$$.fragment,d),p(Oy.$$.fragment,d),p(Xy.$$.fragment,d),p(zy.$$.fragment,d),p(Vy.$$.fragment,d),p(Wy.$$.fragment,d),p(Hy.$$.fragment,d),p(Uy.$$.fragment,d),p(Jy.$$.fragment,d),p(Yy.$$.fragment,d),p(Ky.$$.fragment,d),p(Zy.$$.fragment,d),p(ow.$$.fragment,d),p(rw.$$.fragment,d),p(tw.$$.fragment,d),p(nw.$$.fragment,d),p(sw.$$.fragment,d),p(lw.$$.fragment,d),p(dw.$$.fragment,d),p(cw.$$.fragment,d),p(fw.$$.fragment,d),p(mw.$$.fragment,d),p(gw.$$.fragment,d),p(hw.$$.fragment,d),p(_w.$$.fragment,d),p(uw.$$.fragment,d),p(bw.$$.fragment,d),p(vw.$$.fragment,d),p(Tw.$$.fragment,d),p(Fw.$$.fragment,d),p(Mw.$$.fragment,d),p(Ew.$$.fragment,d),p(yw.$$.fragment,d),p(ww.$$.fragment,d),p(Aw.$$.fragment,d),p(Lw.$$.fragment,d),p(xw.$$.fragment,d),p(kw.$$.fragment,d),p(Rw.$$.fragment,d),p(Sw.$$.fragment,d),p(Pw.$$.fragment,d),p($w.$$.fragment,d),p(jw.$$.fragment,d),p(Nw.$$.fragment,d),p(Dw.$$.fragment,d),p(qw.$$.fragment,d),p(Gw.$$.fragment,d),p(Ow.$$.fragment,d),p(zw.$$.fragment,d),p(Vw.$$.fragment,d),p(Ww.$$.fragment,d),p(Qw.$$.fragment,d),p(Hw.$$.fragment,d),p(Uw.$$.fragment,d),p(Yw.$$.fragment,d),p(Kw.$$.fragment,d),p(Zw.$$.fragment,d),p(eA.$$.fragment,d),p(oA.$$.fragment,d),p(rA.$$.fragment,d),p(aA.$$.fragment,d),p(nA.$$.fragment,d),p(sA.$$.fragment,d),p(lA.$$.fragment,d),p(iA.$$.fragment,d),p(dA.$$.fragment,d),p(fA.$$.fragment,d),p(mA.$$.fragment,d),p(gA.$$.fragment,d),p(hA.$$.fragment,d),p(pA.$$.fragment,d),p(_A.$$.fragment,d),p(bA.$$.fragment,d),p(vA.$$.fragment,d),p(TA.$$.fragment,d),p(FA.$$.fragment,d),p(CA.$$.fragment,d),p(MA.$$.fragment,d),p(yA.$$.fragment,d),p(wA.$$.fragment,d),p(AA.$$.fragment,d),p(LA.$$.fragment,d),p(BA.$$.fragment,d),p(xA.$$.fragment,d),p(RA.$$.fragment,d),p(SA.$$.fragment,d),p(PA.$$.fragment,d),p($A.$$.fragment,d),p(IA.$$.fragment,d),p(jA.$$.fragment,d),p(DA.$$.fragment,d),p(qA.$$.fragment,d),p(GA.$$.fragment,d),p(OA.$$.fragment,d),p(XA.$$.fragment,d),p(zA.$$.fragment,d),p(WA.$$.fragment,d),p(QA.$$.fragment,d),p(HA.$$.fragment,d),p(UA.$$.fragment,d),p(JA.$$.fragment,d),p(YA.$$.fragment,d),p(ZA.$$.fragment,d),p(e6.$$.fragment,d),p(o6.$$.fragment,d),p(r6.$$.fragment,d),p(t6.$$.fragment,d),p(a6.$$.fragment,d),p(s6.$$.fragment,d),p(l6.$$.fragment,d),p(i6.$$.fragment,d),p(d6.$$.fragment,d),p(c6.$$.fragment,d),p(f6.$$.fragment,d),p(g6.$$.fragment,d),p(h6.$$.fragment,d),p(p6.$$.fragment,d),p(_6.$$.fragment,d),p(u6.$$.fragment,d),p(b6.$$.fragment,d),p(T6.$$.fragment,d),p(F6.$$.fragment,d),p(C6.$$.fragment,d),p(M6.$$.fragment,d),p(E6.$$.fragment,d),p(y6.$$.fragment,d),p(A6.$$.fragment,d),p(L6.$$.fragment,d),p(B6.$$.fragment,d),p(x6.$$.fragment,d),p(k6.$$.fragment,d),p(R6.$$.fragment,d),p(P6.$$.fragment,d),p($6.$$.fragment,d),p(I6.$$.fragment,d),p(N6.$$.fragment,d),p(D6.$$.fragment,d),p(q6.$$.fragment,d),p(O6.$$.fragment,d),p(X6.$$.fragment,d),p(z6.$$.fragment,d),p(V6.$$.fragment,d),cBe=!1},d(d){t(J),d&&t(Ae),d&&t(ie),_(ce),d&&t(Ef),d&&t(sa),d&&t(ye),d&&t(io),d&&t(wf),_($a,d),d&&t(co),d&&t(ge),d&&t(qo),d&&t(Ia),d&&t(fLe),d&&t(Si),_(lM),d&&t(mLe),d&&t(Nn),d&&t(gLe),_(iM,d),d&&t(hLe),d&&t(Q0),d&&t(pLe),_(Bf,d),d&&t(_Le),d&&t(Pi),_(dM),d&&t(uLe),d&&t(Go),_(cM),_(gM),_(hM),_(pM),d&&t(bLe),d&&t(Ii),_(_M),d&&t(vLe),d&&t(Oo),_(uM),_(TM),_(FM),_(CM),d&&t(TLe),d&&t(ji),_(MM),d&&t(FLe),d&&t(Xo),_(EM),_(AM),_(ih),_(LM),_(BM),d&&t(CLe),d&&t(Ni),_(xM),d&&t(MLe),d&&t(zo),_(kM),_(PM),_(vh),_($M),_(IM),d&&t(ELe),d&&t(qi),_(jM),d&&t(yLe),d&&t(Vo),_(NM),_(qM),_(GM),_(OM),_(XM),d&&t(wLe),d&&t(Xi),_(zM),d&&t(ALe),d&&t(Wo),_(VM),_(QM),_(HM),_(UM),_(JM),d&&t(LLe),d&&t(Wi),_(YM),d&&t(BLe),d&&t(Qo),_(KM),_(eE),_(oE),_(rE),_(tE),d&&t(xLe),d&&t(Ui),_(aE),d&&t(kLe),d&&t(Ho),_(nE),_(lE),_(iE),_(dE),_(cE),d&&t(RLe),d&&t(Ki),_(fE),d&&t(SLe),d&&t(Uo),_(mE),_(hE),_(pE),_(_E),_(uE),d&&t(PLe),d&&t(od),_(bE),d&&t($Le),d&&t(Jo),_(vE),_(FE),_(CE),_(ME),_(EE),d&&t(ILe),d&&t(ad),_(yE),d&&t(jLe),d&&t(Yo),_(wE),_(LE),_(BE),_(xE),_(kE),d&&t(NLe),d&&t(ld),_(RE),d&&t(DLe),d&&t(Ko),_(SE),_($E),_(IE),_(jE),_(NE),d&&t(qLe),d&&t(cd),_(DE),d&&t(GLe),d&&t(Zo),_(qE),_(OE),_(XE),_(zE),_(VE),d&&t(OLe),d&&t(gd),_(WE),d&&t(XLe),d&&t(er),_(QE),_(UE),_(JE),_(YE),_(KE),d&&t(zLe),d&&t(_d),_(ZE),d&&t(VLe),d&&t(or),_(e3),_(r3),_(t3),_(a3),_(n3),d&&t(WLe),d&&t(vd),_(s3),d&&t(QLe),d&&t(rr),_(l3),_(d3),_(c3),_(f3),_(m3),d&&t(HLe),d&&t(Cd),_(g3),d&&t(ULe),d&&t(tr),_(h3),_(_3),_(u3),_(b3),_(v3),d&&t(JLe),d&&t(yd),_(T3),d&&t(YLe),d&&t(ar),_(F3),_(M3),_(E3),_(y3),_(w3),d&&t(KLe),d&&t(Ld),_(A3),d&&t(ZLe),d&&t(nr),_(L3),_(x3),_(k3),_(R3),_(S3),d&&t(e7e),d&&t(Rd),_(P3),d&&t(o7e),d&&t(sr),_($3),_(j3),_(N3),_(D3),_(q3),d&&t(r7e),d&&t($d),_(G3),d&&t(t7e),d&&t(lr),_(O3),_(z3),_(V3),_(W3),_(H3),d&&t(a7e),d&&t(Nd),_(U3),d&&t(n7e),d&&t(ir),_(J3),_(K3),_(Z3),_(ey),_(oy),d&&t(s7e),d&&t(Od),_(ry),d&&t(l7e),d&&t(dr),_(ty),_(ny),_(sy),_(ly),_(iy),d&&t(i7e),d&&t(Wd),_(dy),d&&t(d7e),d&&t(cr),_(cy),_(my),_(gy),_(hy),_(py),d&&t(c7e),d&&t(Ud),_(_y),d&&t(f7e),d&&t(fr),_(uy),_(vy),_(Ty),_(Fy),_(Cy),d&&t(m7e),d&&t(Kd),_(My),d&&t(g7e),d&&t(mr),_(Ey),_(wy),_(Ay),_(Ly),_(xy),d&&t(h7e),d&&t(oc),_(ky),d&&t(p7e),d&&t(gr),_(Ry),_(Py),_($y),_(Iy),_(jy),d&&t(_7e),d&&t(ac),_(Ny),d&&t(u7e),d&&t(hr),_(Dy),_(Gy),_(Oy),_(Xy),_(zy),d&&t(b7e),d&&t(lc),_(Vy),d&&t(v7e),d&&t(pr),_(Wy),_(Hy),_(Uy),_(Jy),_(Yy),d&&t(T7e),d&&t(cc),_(Ky),d&&t(F7e),d&&t(_r),_(Zy),_(ow),_(rw),_(tw),_(nw),d&&t(C7e),d&&t(gc),_(sw),d&&t(M7e),d&&t(ur),_(lw),_(dw),_(cw),_(fw),_(mw),d&&t(E7e),d&&t(_c),_(gw),d&&t(y7e),d&&t(br),_(hw),_(_w),_(uw),_(bw),_(vw),d&&t(w7e),d&&t(vc),_(Tw),d&&t(A7e),d&&t(vr),_(Fw),_(Mw),_(Ew),_(yw),_(ww),d&&t(L7e),d&&t(Cc),_(Aw),d&&t(B7e),d&&t(Tr),_(Lw),_(xw),_(kw),_(Rw),_(Sw),d&&t(x7e),d&&t(yc),_(Pw),d&&t(k7e),d&&t(Fr),_($w),_(jw),_(Nw),_(Dw),_(qw),d&&t(R7e),d&&t(Lc),_(Gw),d&&t(S7e),d&&t(Cr),_(Ow),_(zw),_(Vw),_(Ww),_(Qw),d&&t(P7e),d&&t(kc),_(Hw),d&&t($7e),d&&t(Mr),_(Uw),_(Yw),_(Kw),_(Zw),_(eA),d&&t(I7e),d&&t(Pc),_(oA),d&&t(j7e),d&&t(Er),_(rA),_(aA),_(nA),_(sA),_(lA),d&&t(N7e),d&&t(jc),_(iA),d&&t(D7e),d&&t(yr),_(dA),_(fA),_(mA),_(gA),_(hA),d&&t(q7e),d&&t(qc),_(pA),d&&t(G7e),d&&t(wr),_(_A),_(bA),_(vA),_(TA),_(FA),d&&t(O7e),d&&t(Xc),_(CA),d&&t(X7e),d&&t(Ar),_(MA),_(yA),_(wA),_(AA),_(LA),d&&t(z7e),d&&t(Wc),_(BA),d&&t(V7e),d&&t(Lr),_(xA),_(RA),_(SA),_(PA),_($A),d&&t(W7e),d&&t(Uc),_(IA),d&&t(Q7e),d&&t(Br),_(jA),_(DA),_(qA),_(GA),_(OA),d&&t(H7e),d&&t(Kc),_(XA),d&&t(U7e),d&&t(xr),_(zA),_(WA),_(QA),_(HA),_(UA),d&&t(J7e),d&&t(of),_(JA),d&&t(Y7e),d&&t(kr),_(YA),_(ZA),_(e6),_(o6),_(r6),d&&t(K7e),d&&t(af),_(t6),d&&t(Z7e),d&&t(Rr),_(a6),_(s6),_(l6),_(i6),_(d6),d&&t(eBe),d&&t(lf),_(c6),d&&t(oBe),d&&t(Sr),_(f6),_(g6),_(h6),_(p6),_(_6),d&&t(rBe),d&&t(ff),_(u6),d&&t(tBe),d&&t(Pr),_(b6),_(T6),_(F6),_(C6),_(M6),d&&t(aBe),d&&t(hf),_(E6),d&&t(nBe),d&&t($r),_(y6),_(A6),_(L6),_(B6),_(x6),d&&t(sBe),d&&t(uf),_(k6),d&&t(lBe),d&&t(Ir),_(R6),_(P6),_($6),_(I6),_(N6),d&&t(iBe),d&&t(Tf),_(D6),d&&t(dBe),d&&t(jr),_(q6),_(O6),_(X6),_(z6),_(V6)}}}const Q_t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function H_t(yi,J,Ae){let{fw:ie}=J;return yi.$$set=me=>{"fw"in me&&Ae(0,ie=me.fw)},[ie]}class out extends D_t{constructor(J){super();q_t(this,J,H_t,W_t,G_t,{fw:0})}}export{out as default,Q_t as metadata};
