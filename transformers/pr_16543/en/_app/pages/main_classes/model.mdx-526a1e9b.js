import{S as t$,i as o$,s as r$,e as o,k as d,w as m,t as s,M as n$,c as r,d as t,m as l,a as n,x as p,h as i,b as c,F as e,g as y,y as h,q as f,o as u,B as g,v as a$}from"../../chunks/vendor-6b77c823.js";import{T as fd}from"../../chunks/Tip-39098574.js";import{D as v}from"../../chunks/Docstring-abef54e3.js";import{C as K}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ao}from"../../chunks/IconCopyLink-7a11ce68.js";function s$(Q){let $,j;return{c(){$=o("p"),j=s("Passing `use_auth_token=True\u201C is required when you want to use a private model.")},l(x){$=r(x,"P",{});var k=n($);j=i(k,"Passing `use_auth_token=True\u201C is required when you want to use a private model."),k.forEach(t)},m(x,k){y(x,$,k),e($,j)},d(x){x&&t($)}}}function i$(Q){let $,j,x,k,W;return{c(){$=o("p"),j=s("Activate the special "),x=o("a"),k=s("\u201Coffline-mode\u201D"),W=s(` to
use this method in a firewalled environment.`),this.h()},l(z){$=r(z,"P",{});var A=n($);j=i(A,"Activate the special "),x=r(A,"A",{href:!0,rel:!0});var le=n(x);k=i(le,"\u201Coffline-mode\u201D"),le.forEach(t),W=i(A,` to
use this method in a firewalled environment.`),A.forEach(t),this.h()},h(){c(x,"href","https://huggingface.co/transformers/installation.html#offline-mode"),c(x,"rel","nofollow")},m(z,A){y(z,$,A),e($,j),e($,x),e(x,k),e($,W)},d(z){z&&t($)}}}function d$(Q){let $,j;return{c(){$=o("p"),j=s("This API is experimental and may have some slight breaking changes in the next releases.")},l(x){$=r(x,"P",{});var k=n($);j=i(k,"This API is experimental and may have some slight breaking changes in the next releases."),k.forEach(t)},m(x,k){y(x,$,k),e($,j)},d(x){x&&t($)}}}function l$(Q){let $,j,x,k,W;return{c(){$=o("p"),j=s("Passing "),x=o("code"),k=s("use_auth_token=True"),W=s(" is required when you want to use a private model.")},l(z){$=r(z,"P",{});var A=n($);j=i(A,"Passing "),x=r(A,"CODE",{});var le=n(x);k=i(le,"use_auth_token=True"),le.forEach(t),W=i(A," is required when you want to use a private model."),A.forEach(t)},m(z,A){y(z,$,A),e($,j),e($,x),e(x,k),e($,W)},d(z){z&&t($)}}}function c$(Q){let $,j;return{c(){$=o("p"),j=s("This API is experimental and may have some slight breaking changes in the next releases.")},l(x){$=r(x,"P",{});var k=n($);j=i(k,"This API is experimental and may have some slight breaking changes in the next releases."),k.forEach(t)},m(x,k){y(x,$,k),e($,j)},d(x){x&&t($)}}}function m$(Q){let $,j,x,k,W,z,A,le,Kl,ud,Z,Ql,an,Zl,ec,sn,tc,oc,dn,rc,nc,gd,Ae,ln,ac,sc,cn,ic,dc,_d,Ze,Qn,lc,cc,Zn,mc,bd,L,pc,mn,hc,fc,ea,uc,gc,pn,_c,bc,hn,vc,yc,fn,wc,$c,vd,Le,et,ta,so,Tc,oa,xc,yd,T,io,Pc,ra,kc,Mc,un,gn,Ec,jc,Fc,lo,na,Dc,qc,aa,zc,Cc,sa,Ic,Ac,H,ia,ge,da,Lc,Oc,_n,Uc,Nc,bn,Bc,Xc,Vc,co,_e,la,Sc,Wc,ca,Hc,Gc,ma,Rc,Yc,Jc,Oe,tt,pa,Kc,Qc,vn,Zc,em,tm,ot,ha,om,rm,fa,nm,am,sm,rt,ua,im,dm,ga,lm,cm,mm,_a,nt,ba,pm,hm,va,fm,um,gm,ya,at,wa,_m,bm,$a,vm,ym,wm,Ta,U,xa,$m,Tm,Pa,xm,Pm,ka,km,Mm,Ma,Em,jm,Ea,Fm,Dm,qm,ee,mo,zm,po,Cm,ja,Im,Am,Lm,Fa,Om,Um,ho,Nm,D,fo,Bm,Da,Xm,Vm,Ue,Sm,qa,Wm,Hm,za,Gm,Rm,Ym,uo,Jm,Ca,Km,Qm,Zm,go,ep,Ia,tp,op,rp,st,np,it,ap,Aa,sp,ip,_o,dp,dt,bo,lp,La,cp,mp,lt,vo,pp,Oa,hp,fp,be,yo,up,Ua,gp,_p,Na,bp,vp,ve,wo,yp,Ba,wp,$p,Xa,Tp,xp,ct,$o,Pp,Va,kp,Mp,mt,To,Ep,Sa,jp,Fp,pt,xo,Dp,Wa,qp,zp,ye,Po,Cp,Ha,Ip,Ap,ht,Lp,we,ko,Op,Mo,Up,Ga,Np,Bp,Xp,Eo,Vp,Ra,Sp,Wp,Hp,ft,jo,Gp,Fo,Rp,Ya,Yp,Jp,Kp,ut,Do,Qp,Ja,Zp,eh,$e,qo,th,Ka,oh,rh,zo,nh,Qa,ah,sh,wd,yn,$d,Ne,gt,Za,Co,ih,es,dh,Td,te,lh,ts,ch,mh,os,ph,hh,rs,fh,uh,xd,Io,Pd,Te,gh,ns,_h,bh,as,vh,yh,kd,Ao,Md,_t,wh,ss,$h,Th,Ed,Lo,jd,wn,xh,Fd,Be,bt,is,Oo,Ph,ds,kh,Dd,E,Uo,Mh,No,Eh,ls,jh,Fh,Dh,xe,Bo,qh,cs,zh,Ch,Xe,Ih,ms,Ah,Lh,ps,Oh,Uh,Nh,vt,Xo,Bh,hs,Xh,Vh,yt,Vo,Sh,Ve,Wh,fs,Hh,Gh,So,Rh,Yh,Jh,wt,Wo,Kh,us,Qh,Zh,$t,Ho,ef,gs,tf,of,Tt,Go,rf,_s,nf,af,xt,Ro,sf,bs,df,lf,Pt,Yo,cf,Se,mf,vs,pf,hf,$n,ff,uf,qd,We,kt,ys,Jo,gf,ws,_f,zd,b,Ko,bf,$s,vf,yf,Tn,xn,wf,$f,Tf,Qo,Ts,xf,Pf,xs,kf,Mf,Ps,Ef,jf,He,Pe,ks,Ff,Df,Pn,qf,zf,kn,Cf,If,Af,Mt,Ms,Lf,Of,Es,Uf,Nf,Bf,N,js,Xf,Vf,Fs,Sf,Wf,Ds,Hf,Gf,qs,Rf,Yf,zs,Jf,Kf,Qf,oe,Zo,Zf,er,eu,Cs,tu,ou,ru,Is,nu,au,tr,su,Et,or,iu,As,du,lu,C,rr,cu,Ls,mu,pu,nr,hu,Os,fu,uu,gu,ar,_u,Us,bu,vu,yu,jt,wu,Ns,$u,Tu,sr,xu,Ft,ir,Pu,Bs,ku,Mu,Dt,dr,Eu,Xs,ju,Fu,qt,lr,Du,Vs,qu,zu,zt,cr,Cu,Ss,Iu,Au,Ct,mr,Lu,Ws,Ou,Uu,It,pr,Nu,Hs,Bu,Xu,At,hr,Vu,Gs,Su,Wu,Lt,fr,Hu,Rs,Gu,Ru,ke,ur,Yu,gr,Ju,Ys,Ku,Qu,Zu,_r,eg,Js,tg,og,rg,Ot,br,ng,vr,ag,Mn,sg,ig,dg,Ut,yr,lg,Ks,cg,mg,Nt,wr,pg,Qs,hg,fg,Bt,$r,ug,Zs,gg,_g,Xt,Tr,bg,ei,vg,yg,Vt,xr,wg,ti,$g,Tg,St,Pr,xg,oi,Pg,kg,re,kr,Mg,G,Eg,ri,jg,Fg,ni,Dg,qg,ai,zg,Cg,si,Ig,Ag,Lg,Ge,Og,ii,Ug,Ng,di,Bg,Xg,Vg,Re,Sg,li,Wg,Hg,ci,Gg,Rg,Cd,Ye,Wt,mi,Mr,Yg,pi,Jg,Id,ce,Er,Kg,jr,Qg,hi,Zg,e_,t_,Ht,Fr,o_,fi,r_,Ad,Je,Gt,ui,Dr,n_,gi,a_,Ld,M,qr,s_,_i,i_,d_,En,jn,l_,c_,m_,bi,p_,h_,Ke,Me,vi,f_,u_,Fn,g_,__,Dn,b_,v_,y_,Rt,yi,w_,$_,wi,T_,x_,P_,B,$i,k_,M_,Ti,E_,j_,xi,F_,D_,Pi,q_,z_,ki,C_,I_,A_,ne,zr,L_,Cr,O_,Mi,U_,N_,B_,Ei,X_,V_,Ir,S_,O,Ar,W_,ji,H_,G_,Lr,R_,Fi,Y_,J_,K_,Or,Q_,Di,Z_,eb,tb,qi,ob,rb,Ur,nb,Ee,Nr,ab,zi,sb,ib,Yt,db,Jt,Br,lb,Xr,cb,Ci,mb,pb,hb,X,Vr,fb,R,ub,Ii,gb,_b,Ai,bb,vb,Li,yb,wb,Oi,$b,Tb,xb,Ui,Pb,kb,Ni,Mb,Eb,Sr,jb,V,Wr,Fb,Y,Db,Bi,qb,zb,Xi,Cb,Ib,Vi,Ab,Lb,Si,Ob,Ub,Nb,Wi,Bb,Xb,Hi,Vb,Sb,Hr,Wb,ae,Gr,Hb,J,Gb,Gi,Rb,Yb,Ri,Jb,Kb,Yi,Qb,Zb,Ji,ev,tv,ov,Ki,rv,nv,Rr,Od,Qe,Kt,Qi,Yr,av,Zi,sv,Ud,me,Jr,iv,ed,dv,lv,se,Kr,cv,Qr,mv,td,pv,hv,fv,od,uv,gv,Zr,Nd;return z=new ao({}),so=new ao({}),io=new v({props:{name:"class transformers.PreTrainedModel",anchor:"transformers.PreTrainedModel",parameters:[{name:"config",val:": PretrainedConfig"},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L693"}}),mo=new v({props:{name:"push_to_hub",anchor:"transformers.PreTrainedModel.push_to_hub",parameters:[{name:"repo_path_or_name",val:": typing.Optional[str] = None"},{name:"repo_url",val:": typing.Optional[str] = None"},{name:"use_temp_dir",val:": bool = False"},{name:"commit_message",val:": str = 'add model'"},{name:"organization",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Union[str, bool, NoneType] = None"},{name:"max_shard_size",val:": typing.Union[int, str] = '10GB'"},{name:"**model_card_kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L2200",parametersDescription:[{anchor:"transformers.PreTrainedModel.push_to_hub.repo_path_or_name",description:`<strong>repo_path_or_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Can either be a repository name for your model in the Hub or a path to a local folder (in which case
the repository will have the name of that local folder). If not specified, will default to the name
given by <code>repo_url</code> and a local directory with that name will be created.`,name:"repo_path_or_name"},{anchor:"transformers.PreTrainedModel.push_to_hub.repo_url",description:`<strong>repo_url</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Specify this in case you want to push to an existing repository in the hub. If unspecified, a new
repository will be created in your namespace (unless you specify an <code>organization</code>) with <code>repo_name</code>.`,name:"repo_url"},{anchor:"transformers.PreTrainedModel.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clone the distant repo in a temporary directory or in <code>repo_path_or_name</code> inside the
current working directory. This will slow things down if you are making changes in an existing repo
since you will need to clone the repo before every push.`,name:"use_temp_dir"},{anchor:"transformers.PreTrainedModel.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;add model&quot;</code>) &#x2014;
Message to commit while pushing.`,name:"commit_message"},{anchor:"transformers.PreTrainedModel.push_to_hub.organization",description:`<strong>organization</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Organization in which you want to push your {object} (you must be a member of this organization).`,name:"organization"},{anchor:"transformers.PreTrainedModel.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private (requires a paying subscription).`,name:"private"},{anchor:"transformers.PreTrainedModel.push_to_hub.use_auth_token",description:`<strong>use_auth_token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if
<code>repo_url</code> is not specified.`,name:"use_auth_token"},{anchor:"transformers.PreTrainedModel.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;10GB&quot;</code>) &#x2014;
The maximum size for a checkpoint before being sharded. Checkpoints shard will then be each of size
lower than this size. If expressed as a string, needs to be digits followed by a unit (like <code>&quot;5MB&quot;</code>).</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>If a single weight of the model is bigger than <code>max_shard_size</code>, it will be in its own checkpoint shard
which will be bigger than <code>max_shard_size</code>.</p>

					</div>`,name:"max_shard_size"}],returnDescription:`
<p>The url of the commit of your {object} in the given repository.</p>
`,returnType:`
<p><code>str</code></p>
`}}),ho=new K({props:{code:`from transformers import AutoModel

model = AutoModel.from_pretrained("bert-base-cased")

# Push the model to your namespace with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
model.push_to_hub("my-finetuned-bert")

# Push the model to your namespace with the name "my-finetuned-bert" with no local clone.
model.push_to_hub("my-finetuned-bert", use_temp_dir=True)

# Push the model to an organization with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
model.push_to_hub("my-finetuned-bert", organization="huggingface")

# Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.
model.push_to_hub("my-finetuned-bert", repo_url="https://huggingface.co/sgugger/my-finetuned-bert")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModel

model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot; with no local clone.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, use_temp_dir=<span class="hljs-literal">True</span>)

<span class="hljs-comment"># Push the model to an organization with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, organization=<span class="hljs-string">&quot;huggingface&quot;</span>)

<span class="hljs-comment"># Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, repo_url=<span class="hljs-string">&quot;https://huggingface.co/sgugger/my-finetuned-bert&quot;</span>)`}}),fo=new v({props:{name:"from_pretrained",anchor:"transformers.PreTrainedModel.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:": typing.Union[str, os.PathLike, NoneType]"},{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L1394",parametersDescription:[{anchor:"transformers.PreTrainedModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
<li>A path or url to a model folder containing a <em>flax checkpoint file</em> in <em>.msgpack</em> format (e.g,
<code>./flax_model/</code> containing <code>flax_model.msgpack</code>). In this case, <code>from_flax</code> should be set to
<code>True</code>.</li>
<li><code>None</code> if you are both providing the configuration and state dictionary (resp. with keyword
arguments <code>config</code> and <code>state_dict</code>).</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.PreTrainedModel.from_pretrained.model_args",description:`<strong>model_args</strong> (sequence of positional arguments, <em>optional</em>) &#x2014;
All remaining positional arguments will be passed to the underlying model&#x2019;s <code>__init__</code> method.`,name:"model_args"},{anchor:"transformers.PreTrainedModel.from_pretrained.config",description:`<strong>config</strong> (<code>Union[PretrainedConfig, str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>an instance of a class derived from <a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>,</li>
<li>a string or path valid as input to <a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>.</li>
</ul>
<p>Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.PreTrainedModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<code>Dict[str, torch.Tensor]</code>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.PreTrainedModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>Union[str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.PreTrainedModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.PreTrainedModel.from_pretrained.from_flax",description:`<strong>from_flax</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a Flax checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_flax"},{anchor:"transformers.PreTrainedModel.from_pretrained.ignore_mismatched_sizes",description:`<strong>ignore_mismatched_sizes</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to raise an error if some of the weights from the checkpoint do not have the same size
as the weights of the model (if for instance, you are instantiating a model with 10 labels from a
checkpoint with 3 labels).`,name:"ignore_mismatched_sizes"},{anchor:"transformers.PreTrainedModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.PreTrainedModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.PreTrainedModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.PreTrainedModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.PreTrainedModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (i.e., do not try to download the model).`,name:"local_files_only(bool,"},{anchor:"transformers.PreTrainedModel.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.PreTrainedModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.PreTrainedModel.from_pretrained.mirror",description:`<strong>mirror</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Mirror source to accelerate downloads in China. If you are from China and have an accessibility
problem, you can set this option to resolve it. Note that we do not guarantee the timeliness or safety.
Please refer to the mirror site for more information.`,name:"mirror"},{anchor:"transformers.PreTrainedModel.from_pretrained._fast_init(bool,",description:`<strong>_fast_init(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to disable fast initialization.`,name:"_fast_init(bool,"},{anchor:"transformers.PreTrainedModel.from_pretrained.low_cpu_mem_usage(`bool\u201C,",description:`<strong>low_cpu_mem_usage(\`bool&#x201C;,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Tries to not use more than 1x model size in CPU memory (including peak memory) while loading the model.
This is an experimental feature and a subject to change at any moment.`,name:"low_cpu_mem_usage(`bool\u201C,"},{anchor:"transformers.PreTrainedModel.from_pretrained.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Override the default <code>torch.dtype</code> and load the model under this dtype. If <code>&quot;auto&quot;</code> is passed the dtype
will be automatically derived from the model&#x2019;s weights.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>One should only disable <em>_fast_init</em> to ensure backwards compatibility with <code>transformers.__version__ &lt; 4.6.0</code> for seeded model initialization. This argument will be removed at the next major version. See
<a href="https://github.com/huggingface/transformers/pull/11471" rel="nofollow">pull request 11471</a> for more information.</p>

					</div>`,name:"torch_dtype"},{anchor:"transformers.PreTrainedModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (remaining dictionary of keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),st=new fd({props:{$$slots:{default:[s$]},$$scope:{ctx:Q}}}),it=new fd({props:{$$slots:{default:[i$]},$$scope:{ctx:Q}}}),_o=new K({props:{code:`from transformers import BertConfig, BertModel

# Download model and configuration from huggingface.co and cache.
model = BertModel.from_pretrained("bert-base-uncased")
# Model was saved using *save_pretrained('./test/saved_model/')* (for example purposes, not runnable).
model = BertModel.from_pretrained("./test/saved_model/")
# Update configuration during loading.
model = BertModel.from_pretrained("bert-base-uncased", output_attentions=True)
assert model.config.output_attentions == True
# Loading from a TF checkpoint file instead of a PyTorch model (slower, for example purposes, not runnable).
config = BertConfig.from_json_file("./tf_model/my_tf_model_config.json")
model = BertModel.from_pretrained("./tf_model/my_tf_checkpoint.ckpt.index", from_tf=True, config=config)
# Loading from a Flax checkpoint file instead of a PyTorch model (slower)
model = BertModel.from_pretrained("bert-base-uncased", from_flax=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertConfig, BertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Model was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)* (for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> model.config.output_attentions == <span class="hljs-literal">True</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower, for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = BertConfig.from_json_file(<span class="hljs-string">&quot;./tf_model/my_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;./tf_model/my_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a Flax checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, from_flax=<span class="hljs-literal">True</span>)`}}),bo=new v({props:{name:"get_input_embeddings",anchor:"transformers.PreTrainedModel.get_input_embeddings",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L845",returnDescription:`
<p>A torch module mapping vocabulary to hidden states.</p>
`,returnType:`
<p><code>nn.Module</code></p>
`}}),vo=new v({props:{name:"get_output_embeddings",anchor:"transformers.PreTrainedModel.get_output_embeddings",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L871",returnDescription:`
<p>A torch module mapping hidden states to vocabulary.</p>
`,returnType:`
<p><code>nn.Module</code></p>
`}}),yo=new v({props:{name:"gradient_checkpointing_disable",anchor:"transformers.PreTrainedModel.gradient_checkpointing_disable",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L1250"}}),wo=new v({props:{name:"gradient_checkpointing_enable",anchor:"transformers.PreTrainedModel.gradient_checkpointing_enable",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L1239"}}),$o=new v({props:{name:"init_weights",anchor:"transformers.PreTrainedModel.init_weights",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L1206"}}),To=new v({props:{name:"post_init",anchor:"transformers.PreTrainedModel.post_init",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L764"}}),xo=new v({props:{name:"prune_heads",anchor:"transformers.PreTrainedModel.prune_heads",parameters:[{name:"heads_to_prune",val:": typing.Dict[int, typing.List[int]]"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L1222",parametersDescription:[{anchor:"transformers.PreTrainedModel.prune_heads.heads_to_prune",description:`<strong>heads_to_prune</strong> (<code>Dict[int, List[int]]</code>) &#x2014;
Dictionary with keys being selected layer indices (<code>int</code>) and associated values being the list of heads
to prune in said layer (list of <code>int</code>). For instance {1: [0, 2], 2: [2, 3]} will prune heads 0 and 2 on
layer 1 and heads 2 and 3 on layer 2.`,name:"heads_to_prune"}]}}),Po=new v({props:{name:"register_for_auto_class",anchor:"transformers.PreTrainedModel.register_for_auto_class",parameters:[{name:"auto_class",val:" = 'AutoModel'"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L2174",parametersDescription:[{anchor:"transformers.PreTrainedModel.register_for_auto_class.auto_class",description:`<strong>auto_class</strong> (<code>str</code> or <code>type</code>, <em>optional</em>, defaults to <code>&quot;AutoModel&quot;</code>) &#x2014;
The auto class to register this new model with.`,name:"auto_class"}]}}),ht=new fd({props:{warning:!0,$$slots:{default:[d$]},$$scope:{ctx:Q}}}),ko=new v({props:{name:"resize_token_embeddings",anchor:"transformers.PreTrainedModel.resize_token_embeddings",parameters:[{name:"new_num_tokens",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L999",parametersDescription:[{anchor:"transformers.PreTrainedModel.resize_token_embeddings.new_num_tokens",description:`<strong>new_num_tokens</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of new tokens in the embedding matrix. Increasing the size will add newly initialized
vectors at the end. Reducing the size will remove vectors from the end. If not provided or <code>None</code>, just
returns a pointer to the input tokens <code>torch.nn.Embedding</code> module of the model without doing anything.`,name:"new_num_tokens"}],returnDescription:`
<p>Pointer to the input tokens Embeddings Module of the model.</p>
`,returnType:`
<p><code>torch.nn.Embedding</code></p>
`}}),jo=new v({props:{name:"save_pretrained",anchor:"transformers.PreTrainedModel.save_pretrained",parameters:[{name:"save_directory",val:": typing.Union[str, os.PathLike]"},{name:"save_config",val:": bool = True"},{name:"state_dict",val:": typing.Optional[dict] = None"},{name:"save_function",val:": typing.Callable = <function save at 0x7f7e6c6c31f0>"},{name:"push_to_hub",val:": bool = False"},{name:"max_shard_size",val:": typing.Union[int, str] = '10GB'"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L1270",parametersDescription:[{anchor:"transformers.PreTrainedModel.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory to which to save. Will be created if it doesn&#x2019;t exist.`,name:"save_directory"},{anchor:"transformers.PreTrainedModel.save_pretrained.save_config",description:`<strong>save_config</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to save the config of the model. Useful when in distributed training like TPUs and need
to call this function on all processes. In this case, set <code>save_config=True</code> only on the main process
to avoid race conditions.`,name:"save_config"},{anchor:"transformers.PreTrainedModel.save_pretrained.state_dict",description:`<strong>state_dict</strong> (nested dictionary of <code>torch.Tensor</code>) &#x2014;
The state dictionary of the model to save. Will default to <code>self.state_dict()</code>, but can be used to only
save parts of the model or if special precautions need to be taken when recovering the state dictionary
of a model (like when using model parallelism).`,name:"state_dict"},{anchor:"transformers.PreTrainedModel.save_pretrained.save_function",description:`<strong>save_function</strong> (<code>Callable</code>) &#x2014;
The function to use to save the state dictionary. Useful on distributed training like TPUs when one
need to replace <code>torch.save</code> by another method.`,name:"save_function"},{anchor:"transformers.PreTrainedModel.save_pretrained.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push your model to the Hugging Face model hub after saving it.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>Using <code>push_to_hub=True</code> will synchronize the repository you are pushing to with <code>save_directory</code>,
which requires <code>save_directory</code> to be a local clone of the repo you are pushing to if it&#x2019;s an existing
folder. Pass along <code>temp_dir=True</code> to use a temporary directory instead.</p>

					</div>`,name:"push_to_hub"},{anchor:"transformers.PreTrainedModel.save_pretrained.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;10GB&quot;</code>) &#x2014;
The maximum size for a checkpoint before being sharded. Checkpoints shard will then be each of size
lower than this size. If expressed as a string, needs to be digits followed by a unit (like <code>&quot;5MB&quot;</code>).</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>If a single weight of the model is bigger than <code>max_shard_size</code>, it will be in its own checkpoint shard
which will be bigger than <code>max_shard_size</code>.</p>

					</div>
<p>kwargs &#x2014;
Additional key word arguments passed along to the <a href="/docs/transformers/pr_16543/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.push_to_hub">push_to_hub()</a> method.`,name:"max_shard_size"}]}}),Do=new v({props:{name:"set_input_embeddings",anchor:"transformers.PreTrainedModel.set_input_embeddings",parameters:[{name:"value",val:": Module"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L858",parametersDescription:[{anchor:"transformers.PreTrainedModel.set_input_embeddings.value",description:"<strong>value</strong> (<code>nn.Module</code>) &#x2014; A module mapping vocabulary to hidden states.",name:"value"}]}}),qo=new v({props:{name:"tie_weights",anchor:"transformers.PreTrainedModel.tie_weights",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L886"}}),Co=new ao({}),Io=new K({props:{code:'model = T5ForConditionalGeneration.from_pretrained("t5", torch_dtype=torch.float16)',highlighted:'model = T5ForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;t5&quot;</span>, torch_dtype=torch.float16)'}}),Ao=new K({props:{code:'model = T5ForConditionalGeneration.from_pretrained("t5", torch_dtype="auto")',highlighted:'model = T5ForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;t5&quot;</span>, torch_dtype=<span class="hljs-string">&quot;auto&quot;</span>)'}}),Lo=new K({props:{code:`config = T5Config.from_pretrained("t5")
model = AutoModel.from_config(config)`,highlighted:`config = T5Config.from_pretrained(<span class="hljs-string">&quot;t5&quot;</span>)
model = AutoModel.from_config(config)`}}),Oo=new ao({}),Uo=new v({props:{name:"class transformers.modeling_utils.ModuleUtilsMixin",anchor:"transformers.modeling_utils.ModuleUtilsMixin",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L421"}}),Bo=new v({props:{name:"add_memory_hooks",anchor:"transformers.modeling_utils.ModuleUtilsMixin.add_memory_hooks",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L452"}}),Xo=new v({props:{name:"estimate_tokens",anchor:"transformers.modeling_utils.ModuleUtilsMixin.estimate_tokens",parameters:[{name:"input_dict",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L648",parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.estimate_tokens.inputs",description:"<strong>inputs</strong> (<code>dict</code>) &#x2014; The model inputs.",name:"inputs"}],returnDescription:`
<p>The total number of tokens.</p>
`,returnType:`
<p><code>int</code></p>
`}}),Vo=new v({props:{name:"floating_point_ops",anchor:"transformers.modeling_utils.ModuleUtilsMixin.floating_point_ops",parameters:[{name:"input_dict",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"},{name:"exclude_embeddings",val:": bool = True"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L666",parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.floating_point_ops.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
The batch size for the forward pass.`,name:"batch_size"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.floating_point_ops.sequence_length",description:`<strong>sequence_length</strong> (<code>int</code>) &#x2014;
The number of tokens in each line of the batch.`,name:"sequence_length"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.floating_point_ops.exclude_embeddings",description:`<strong>exclude_embeddings</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to count embedding and softmax operations.`,name:"exclude_embeddings"}],returnDescription:`
<p>The number of floating-point operations.</p>
`,returnType:`
<p><code>int</code></p>
`}}),Wo=new v({props:{name:"get_extended_attention_mask",anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_extended_attention_mask",parameters:[{name:"attention_mask",val:": Tensor"},{name:"input_shape",val:": typing.Tuple[int]"},{name:"device",val:": <property object at 0x7f7e02a1b040>"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L541",parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_extended_attention_mask.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code>) &#x2014;
Mask with ones indicating tokens to attend to, zeros for tokens to ignore.`,name:"attention_mask"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_extended_attention_mask.input_shape",description:`<strong>input_shape</strong> (<code>Tuple[int]</code>) &#x2014;
The shape of the input to the model.
device &#x2014; (<code>torch.device</code>):
The device of the input to the model.`,name:"input_shape"}],returnDescription:`
<p><code>torch.Tensor</code> The extended attention mask, with a the same dtype as <code>attention_mask.dtype</code>.</p>
`}}),Ho=new v({props:{name:"get_head_mask",anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_head_mask",parameters:[{name:"head_mask",val:": typing.Optional[torch.Tensor]"},{name:"num_hidden_layers",val:": int"},{name:"is_attention_chunked",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L584",parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_head_mask.head_mask",description:`<strong>head_mask</strong> (<code>torch.Tensor</code> with shape <code>[num_heads]</code> or <code>[num_hidden_layers x num_heads]</code>, <em>optional</em>) &#x2014;
The mask indicating if we should keep the heads or not (1.0 for keep, 0.0 for discard).`,name:"head_mask"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_head_mask.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>) &#x2014;
The number of hidden layers in the model.
is_attention_chunked &#x2014; (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>):
Whether or not the attentions scores are computed by chunks or not.`,name:"num_hidden_layers"}],returnDescription:`
<p><code>torch.Tensor</code> with shape <code>[num_hidden_layers x batch x num_heads x seq_length x seq_length]</code> or list with
<code>[None]</code> for each layer.</p>
`}}),Go=new v({props:{name:"invert_attention_mask",anchor:"transformers.modeling_utils.ModuleUtilsMixin.invert_attention_mask",parameters:[{name:"encoder_attention_mask",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L488",parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.invert_attention_mask.encoder_attention_mask",description:"<strong>encoder_attention_mask</strong> (<code>torch.Tensor</code>) &#x2014; An attention mask.",name:"encoder_attention_mask"}],returnDescription:`
<p>The inverted attention mask.</p>
`,returnType:`
<p><code>torch.Tensor</code></p>
`}}),Ro=new v({props:{name:"num_parameters",anchor:"transformers.modeling_utils.ModuleUtilsMixin.num_parameters",parameters:[{name:"only_trainable",val:": bool = False"},{name:"exclude_embeddings",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L622",parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.num_parameters.only_trainable",description:`<strong>only_trainable</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return only the number of trainable parameters`,name:"only_trainable"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.num_parameters.exclude_embeddings",description:`<strong>exclude_embeddings</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return only the number of non-embeddings parameters`,name:"exclude_embeddings"}],returnDescription:`
<p>The number of parameters.</p>
`,returnType:`
<p><code>int</code></p>
`}}),Yo=new v({props:{name:"reset_memory_hooks_state",anchor:"transformers.modeling_utils.ModuleUtilsMixin.reset_memory_hooks_state",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_utils.py#L464"}}),Jo=new ao({}),Ko=new v({props:{name:"class transformers.TFPreTrainedModel",anchor:"transformers.TFPreTrainedModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_tf_utils.py#L687"}}),Zo=new v({props:{name:"push_to_hub",anchor:"transformers.TFPreTrainedModel.push_to_hub",parameters:[{name:"repo_path_or_name",val:": typing.Optional[str] = None"},{name:"repo_url",val:": typing.Optional[str] = None"},{name:"use_temp_dir",val:": bool = False"},{name:"commit_message",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"**model_card_kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/utils/hub.py#L846",parametersDescription:[{anchor:"transformers.TFPreTrainedModel.push_to_hub.repo_path_or_name",description:`<strong>repo_path_or_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Can either be a repository name for your model in the Hub or a path to a local folder (in which case
the repository will have the name of that local folder). If not specified, will default to the name
given by <code>repo_url</code> and a local directory with that name will be created.`,name:"repo_path_or_name"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.repo_url",description:`<strong>repo_url</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Specify this in case you want to push to an existing repository in the hub. If unspecified, a new
repository will be created in your namespace (unless you specify an <code>organization</code>) with <code>repo_name</code>.`,name:"repo_url"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clone the distant repo in a temporary directory or in <code>repo_path_or_name</code> inside the
current working directory. This will slow things down if you are making changes in an existing repo
since you will need to clone the repo before every push.`,name:"use_temp_dir"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;add model&quot;</code>.`,name:"commit_message"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.organization",description:`<strong>organization</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Organization in which you want to push your model (you must be a member of this organization).`,name:"organization"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private (requires a paying subscription).`,name:"private"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.use_auth_token",description:`<strong>use_auth_token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if
<code>repo_url</code> is not specified.`,name:"use_auth_token"}],returnDescription:`
<p>The url of the commit of your model in the given repository.</p>
`,returnType:`
<p><code>str</code></p>
`}}),tr=new K({props:{code:`from transformers import TFAutoModel

model = TFAutoModel.from_pretrained("bert-base-cased")

# Push the model to your namespace with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
model.push_to_hub("my-finetuned-bert")

# Push the model to your namespace with the name "my-finetuned-bert" with no local clone.
model.push_to_hub("my-finetuned-bert", use_temp_dir=True)

# Push the model to an organization with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
model.push_to_hub("my-finetuned-bert", organization="huggingface")

# Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.
model.push_to_hub("my-finetuned-bert", repo_url="https://huggingface.co/sgugger/my-finetuned-bert")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModel

model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot; with no local clone.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, use_temp_dir=<span class="hljs-literal">True</span>)

<span class="hljs-comment"># Push the model to an organization with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, organization=<span class="hljs-string">&quot;huggingface&quot;</span>)

<span class="hljs-comment"># Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, repo_url=<span class="hljs-string">&quot;https://huggingface.co/sgugger/my-finetuned-bert&quot;</span>)`}}),or=new v({props:{name:"compile",anchor:"transformers.TFPreTrainedModel.compile",parameters:[{name:"optimizer",val:" = 'rmsprop'"},{name:"loss",val:" = 'passthrough'"},{name:"metrics",val:" = None"},{name:"loss_weights",val:" = None"},{name:"weighted_metrics",val:" = None"},{name:"run_eagerly",val:" = None"},{name:"steps_per_execution",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_tf_utils.py#L878"}}),rr=new v({props:{name:"from_pretrained",anchor:"transformers.TFPreTrainedModel.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_tf_utils.py#L1440",parametersDescription:[{anchor:"transformers.TFPreTrainedModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.TFPreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
<li><code>None</code> if you are both providing the configuration and state dictionary (resp. with keyword
arguments <code>config</code> and <code>state_dict</code>).</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.model_args",description:`<strong>model_args</strong> (sequence of positional arguments, <em>optional</em>) &#x2014;
All remaining positional arguments will be passed to the underlying model&#x2019;s <code>__init__</code> method.`,name:"model_args"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.config",description:`<strong>config</strong> (<code>Union[PretrainedConfig, str]</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>an instance of a class derived from <a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>,</li>
<li>a string valid as input to <a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>.</li>
</ul>
<p>Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.TFPreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.
from_pt &#x2014; (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>):
Load the model weights from a PyTorch state_dict save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).</li>
</ul>`,name:"config"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.ignore_mismatched_sizes",description:`<strong>ignore_mismatched_sizes</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to raise an error if some of the weights from the checkpoint do not have the same size
as the weights of the model (if for instance, you are instantiating a model with 10 labels from a
checkpoint with 3 labels).`,name:"ignore_mismatched_sizes"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.
proxies &#x2014;
(<code>Dict[str, str], </code>optional<code>): A dictionary of proxy servers to use by protocol or endpoint, e.g., </code>{&#x2018;http&#x2019;: &#x2018;foo.bar:3128&#x2019;, &#x2018;http://hostname&#x2019;: &#x2018;foo.bar:4012&#x2019;}<code>. The proxies are used on each request. output_loading_info(</code>bool<code>, *optional*, defaults to </code>False\`): Whether ot not to also return a
dictionary containing missing keys, unexpected keys and error messages.`,name:"resume_download"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try doanloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.mirror",description:`<strong>mirror</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Mirror source to accelerate downloads in China. If you are from China and have an accessibility
problem, you can set this option to resolve it. Note that we do not guarantee the timeliness or safety.
Please refer to the mirror site for more information.`,name:"mirror"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (remaining dictionary of keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jt=new fd({props:{$$slots:{default:[l$]},$$scope:{ctx:Q}}}),sr=new K({props:{code:`from transformers import BertConfig, TFBertModel

# Download model and configuration from huggingface.co and cache.
model = TFBertModel.from_pretrained("bert-base-uncased")
# Model was saved using *save_pretrained('./test/saved_model/')* (for example purposes, not runnable).
model = TFBertModel.from_pretrained("./test/saved_model/")
# Update configuration during loading.
model = TFBertModel.from_pretrained("bert-base-uncased", output_attentions=True)
assert model.config.output_attentions == True
# Loading from a Pytorch model file instead of a TensorFlow checkpoint (slower, for example purposes, not runnable).
config = BertConfig.from_json_file("./pt_model/my_pt_model_config.json")
model = TFBertModel.from_pretrained("./pt_model/my_pytorch_model.bin", from_pt=True, config=config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertConfig, TFBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Model was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)* (for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFBertModel.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> model.config.output_attentions == <span class="hljs-literal">True</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a Pytorch model file instead of a TensorFlow checkpoint (slower, for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = BertConfig.from_json_file(<span class="hljs-string">&quot;./pt_model/my_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFBertModel.from_pretrained(<span class="hljs-string">&quot;./pt_model/my_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config)`}}),ir=new v({props:{name:"get_bias",anchor:"transformers.TFPreTrainedModel.get_bias",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_tf_utils.py#L1124",returnDescription:`
<p>The weights representing the bias, None if not an LM model.</p>
`,returnType:`
<p><code>tf.Variable</code></p>
`}}),dr=new v({props:{name:"get_input_embeddings",anchor:"transformers.TFPreTrainedModel.get_input_embeddings",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_tf_utils.py#L797",returnDescription:`
<p>The embeddings layer mapping vocabulary to hidden states.</p>
`,returnType:`
<p><code>tf.Variable</code></p>
`}}),lr=new v({props:{name:"get_lm_head",anchor:"transformers.TFPreTrainedModel.get_lm_head",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_tf_utils.py#L1157",returnDescription:`
<p>The LM head layer if the model has one, None if not.</p>
`,returnType:`
<p><code>tf.keras.layers.Layer</code></p>
`}}),cr=new v({props:{name:"get_output_embeddings",anchor:"transformers.TFPreTrainedModel.get_output_embeddings",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_tf_utils.py#L1064",returnDescription:`
<p>The new weights mapping vocabulary to hidden states.</p>
`,returnType:`
<p><code>tf.Variable</code></p>
`}}),mr=new v({props:{name:"get_output_layer_with_bias",anchor:"transformers.TFPreTrainedModel.get_output_layer_with_bias",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_tf_utils.py#L1101",returnDescription:`
<p>The layer that handles the bias, None if not an LM model.</p>
`,returnType:`
<p><code>tf.keras.layers.Layer</code></p>
`}}),pr=new v({props:{name:"get_prefix_bias_name",anchor:"transformers.TFPreTrainedModel.get_prefix_bias_name",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_tf_utils.py#L1114",returnDescription:`
<p>The _prefix name of the bias.</p>
`,returnType:`
<p><code>str</code></p>
`}}),hr=new v({props:{name:"load_repo_checkpoint",anchor:"transformers.TFPreTrainedModel.load_repo_checkpoint",parameters:[{name:"repo_path_or_name",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_tf_utils.py#L824",parametersDescription:[{anchor:"transformers.TFPreTrainedModel.load_repo_checkpoint.repo_path_or_name",description:`<strong>repo_path_or_name</strong> (<code>str</code>) &#x2014;
Can either be a repository name for your {object} in the Hub or a path to a local folder (in which case
the repository will have the name of that local folder).`,name:"repo_path_or_name"}],returnDescription:`
<p>A dictionary of extra metadata from the checkpoint, most commonly an \u201Cepoch\u201D count.</p>
`,returnType:`
<p><code>dict</code></p>
`}}),fr=new v({props:{name:"prune_heads",anchor:"transformers.TFPreTrainedModel.prune_heads",parameters:[{name:"heads_to_prune",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_tf_utils.py#L1366",parametersDescription:[{anchor:"transformers.TFPreTrainedModel.prune_heads.heads_to_prune",description:`<strong>heads_to_prune</strong> (<code>Dict[int, List[int]]</code>) &#x2014;
Dictionary with keys being selected layer indices (<code>int</code>) and associated values being the list of heads
to prune in said layer (list of <code>int</code>). For instance {1: [0, 2], 2: [2, 3]} will prune heads 0 and 2 on
layer 1 and heads 2 and 3 on layer 2.`,name:"heads_to_prune"}]}}),ur=new v({props:{name:"resize_token_embeddings",anchor:"transformers.TFPreTrainedModel.resize_token_embeddings",parameters:[{name:"new_num_tokens",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_tf_utils.py#L1166",parametersDescription:[{anchor:"transformers.TFPreTrainedModel.resize_token_embeddings.new_num_tokens",description:`<strong>new_num_tokens</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of new tokens in the embedding matrix. Increasing the size will add newly initialized
vectors at the end. Reducing the size will remove vectors from the end. If not provided or <code>None</code>, just
returns a pointer to the input tokens <code>tf.Variable</code> module of the model without doing anything.`,name:"new_num_tokens"}],returnDescription:`
<p>Pointer to the input tokens Embeddings Module of the model.</p>
`,returnType:`
<p><code>tf.Variable</code></p>
`}}),br=new v({props:{name:"save_pretrained",anchor:"transformers.TFPreTrainedModel.save_pretrained",parameters:[{name:"save_directory",val:""},{name:"saved_model",val:" = False"},{name:"version",val:" = 1"},{name:"push_to_hub",val:" = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_tf_utils.py#L1378",parametersDescription:[{anchor:"transformers.TFPreTrainedModel.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code>) &#x2014;
Directory to which to save. Will be created if it doesn&#x2019;t exist.`,name:"save_directory"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.saved_model",description:`<strong>saved_model</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If the model has to be saved in saved model format as well or not.`,name:"saved_model"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.version",description:`<strong>version</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The version of the saved model. A saved model needs to be versioned in order to be properly loaded by
TensorFlow Serving as detailed in the official documentation
<a href="https://www.tensorflow.org/tfx/serving/serving_basic" rel="nofollow">https://www.tensorflow.org/tfx/serving/serving_basic</a>`,name:"version"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push your model to the Hugging Face model hub after saving it.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>Using <code>push_to_hub=True</code> will synchronize the repository you are pushing to with <code>save_directory</code>,
which requires <code>save_directory</code> to be a local clone of the repo you are pushing to if it&#x2019;s an existing
folder. Pass along <code>temp_dir=True</code> to use a temporary directory instead.</p>

					</div>
<p>kwargs &#x2014;
Additional key word arguments passed along to the <a href="/docs/transformers/pr_16543/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.push_to_hub">push_to_hub()</a> method.`,name:"push_to_hub"}]}}),yr=new v({props:{name:"serving",anchor:"transformers.TFPreTrainedModel.serving",parameters:[{name:"inputs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_tf_utils.py#L766",parametersDescription:[{anchor:"transformers.TFPreTrainedModel.serving.inputs",description:`<strong>inputs</strong> (<code>Dict[str, tf.Tensor]</code>) &#x2014;
The input of the saved model as a dictionary of tensors.`,name:"inputs"}]}}),wr=new v({props:{name:"serving_output",anchor:"transformers.TFPreTrainedModel.serving_output",parameters:[{name:"output",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_tf_utils.py#L787",parametersDescription:[{anchor:"transformers.TFPreTrainedModel.serving_output.output",description:`<strong>output</strong> (<code>TFBaseModelOutput</code>) &#x2014;
The output returned by the model.`,name:"output"}]}}),$r=new v({props:{name:"set_bias",anchor:"transformers.TFPreTrainedModel.set_bias",parameters:[{name:"value",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_tf_utils.py#L1141",parametersDescription:[{anchor:"transformers.TFPreTrainedModel.set_bias.value",description:`<strong>value</strong> (<code>Dict[tf.Variable]</code>) &#x2014;
All the new bias attached to an LM head.`,name:"value"}]}}),Tr=new v({props:{name:"set_input_embeddings",anchor:"transformers.TFPreTrainedModel.set_input_embeddings",parameters:[{name:"value",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_tf_utils.py#L1044",parametersDescription:[{anchor:"transformers.TFPreTrainedModel.set_input_embeddings.value",description:`<strong>value</strong> (<code>tf.Variable</code>) &#x2014;
The new weights mapping hidden states to vocabulary.`,name:"value"}]}}),xr=new v({props:{name:"set_output_embeddings",anchor:"transformers.TFPreTrainedModel.set_output_embeddings",parameters:[{name:"value",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_tf_utils.py#L1084",parametersDescription:[{anchor:"transformers.TFPreTrainedModel.set_output_embeddings.value",description:`<strong>value</strong> (<code>tf.Variable</code>) &#x2014;
The new weights mapping hidden states to vocabulary.`,name:"value"}]}}),Pr=new v({props:{name:"test_step",anchor:"transformers.TFPreTrainedModel.test_step",parameters:[{name:"data",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_tf_utils.py#L978"}}),kr=new v({props:{name:"train_step",anchor:"transformers.TFPreTrainedModel.train_step",parameters:[{name:"data",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_tf_utils.py#L927"}}),Mr=new ao({}),Er=new v({props:{name:"class transformers.modeling_tf_utils.TFModelUtilsMixin",anchor:"transformers.modeling_tf_utils.TFModelUtilsMixin",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_tf_utils.py#L83"}}),Fr=new v({props:{name:"num_parameters",anchor:"transformers.modeling_tf_utils.TFModelUtilsMixin.num_parameters",parameters:[{name:"only_trainable",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_tf_utils.py#L88",parametersDescription:[{anchor:"transformers.modeling_tf_utils.TFModelUtilsMixin.num_parameters.only_trainable",description:`<strong>only_trainable</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return only the number of trainable parameters`,name:"only_trainable"}],returnDescription:`
<p>The number of parameters.</p>
`,returnType:`
<p><code>int</code></p>
`}}),Dr=new ao({}),qr=new v({props:{name:"class transformers.FlaxPreTrainedModel",anchor:"transformers.FlaxPreTrainedModel",parameters:[{name:"config",val:": PretrainedConfig"},{name:"module",val:": Module"},{name:"input_shape",val:": typing.Tuple = (1, 1)"},{name:"seed",val:": int = 0"},{name:"dtype",val:": dtype = <class 'jax._src.numpy.lax_numpy.float32'>"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_flax_utils.py#L72"}}),zr=new v({props:{name:"push_to_hub",anchor:"transformers.FlaxPreTrainedModel.push_to_hub",parameters:[{name:"repo_path_or_name",val:": typing.Optional[str] = None"},{name:"repo_url",val:": typing.Optional[str] = None"},{name:"use_temp_dir",val:": bool = False"},{name:"commit_message",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"**model_card_kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/utils/hub.py#L846",parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.repo_path_or_name",description:`<strong>repo_path_or_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Can either be a repository name for your model in the Hub or a path to a local folder (in which case
the repository will have the name of that local folder). If not specified, will default to the name
given by <code>repo_url</code> and a local directory with that name will be created.`,name:"repo_path_or_name"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.repo_url",description:`<strong>repo_url</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Specify this in case you want to push to an existing repository in the hub. If unspecified, a new
repository will be created in your namespace (unless you specify an <code>organization</code>) with <code>repo_name</code>.`,name:"repo_url"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clone the distant repo in a temporary directory or in <code>repo_path_or_name</code> inside the
current working directory. This will slow things down if you are making changes in an existing repo
since you will need to clone the repo before every push.`,name:"use_temp_dir"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;add model&quot;</code>.`,name:"commit_message"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.organization",description:`<strong>organization</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Organization in which you want to push your model (you must be a member of this organization).`,name:"organization"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private (requires a paying subscription).`,name:"private"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.use_auth_token",description:`<strong>use_auth_token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if
<code>repo_url</code> is not specified.`,name:"use_auth_token"}],returnDescription:`
<p>The url of the commit of your model in the given repository.</p>
`,returnType:`
<p><code>str</code></p>
`}}),Ir=new K({props:{code:`from transformers import FlaxAutoModel

model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Push the model to your namespace with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
model.push_to_hub("my-finetuned-bert")

# Push the model to your namespace with the name "my-finetuned-bert" with no local clone.
model.push_to_hub("my-finetuned-bert", use_temp_dir=True)

# Push the model to an organization with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
model.push_to_hub("my-finetuned-bert", organization="huggingface")

# Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.
model.push_to_hub("my-finetuned-bert", repo_url="https://huggingface.co/sgugger/my-finetuned-bert")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxAutoModel

model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot; with no local clone.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, use_temp_dir=<span class="hljs-literal">True</span>)

<span class="hljs-comment"># Push the model to an organization with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, organization=<span class="hljs-string">&quot;huggingface&quot;</span>)

<span class="hljs-comment"># Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, repo_url=<span class="hljs-string">&quot;https://huggingface.co/sgugger/my-finetuned-bert&quot;</span>)`}}),Ar=new v({props:{name:"from_pretrained",anchor:"transformers.FlaxPreTrainedModel.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:": typing.Union[str, os.PathLike]"},{name:"dtype",val:": dtype = <class 'jax._src.numpy.lax_numpy.float32'>"},{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_flax_utils.py#L296",parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.FlaxPreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>pt index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In this case,
<code>from_pt</code> should be set to <code>True</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.dtype",description:`<strong>dtype</strong> (<code>jax.numpy.dtype</code>, <em>optional</em>, defaults to <code>jax.numpy.float32</code>) &#x2014;
The data type of the computation. Can be one of <code>jax.numpy.float32</code>, <code>jax.numpy.float16</code> (on GPUs) and
<code>jax.numpy.bfloat16</code> (on TPUs).</p>
<p>This can be used to enable mixed-precision training or half-precision inference on GPUs or TPUs. If
specified all the computation will be performed with the given <code>dtype</code>.</p>
<p><strong>Note that this only specifies the dtype of the computation and does not influence the dtype of model
parameters.</strong></p>
<p>If you wish to change the dtype of the model parameters, see <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.FlaxPreTrainedModel.to_fp16">to_fp16()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.FlaxPreTrainedModel.to_bf16">to_bf16()</a>.`,name:"dtype"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.model_args",description:`<strong>model_args</strong> (sequence of positional arguments, <em>optional</em>) &#x2014;
All remaining positional arguments will be passed to the underlying model&#x2019;s <code>__init__</code> method.`,name:"model_args"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.config",description:`<strong>config</strong> (<code>Union[PretrainedConfig, str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>an instance of a class derived from <a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>,</li>
<li>a string or path valid as input to <a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>.</li>
</ul>
<p>Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>Union[str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.ignore_mismatched_sizes",description:`<strong>ignore_mismatched_sizes</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to raise an error if some of the weights from the checkpoint do not have the same size
as the weights of the model (if for instance, you are instantiating a model with 10 labels from a
checkpoint with 3 labels).`,name:"ignore_mismatched_sizes"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (i.e., do not try to download the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (remaining dictionary of keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ur=new K({props:{code:`from transformers import BertConfig, FlaxBertModel

# Download model and configuration from huggingface.co and cache.
model = FlaxBertModel.from_pretrained("bert-base-cased")
# Model was saved using *save_pretrained('./test/saved_model/')* (for example purposes, not runnable).
model = FlaxBertModel.from_pretrained("./test/saved_model/")
# Loading from a PyTorch checkpoint file instead of a PyTorch model (slower, for example purposes, not runnable).
config = BertConfig.from_json_file("./pt_model/config.json")
model = FlaxBertModel.from_pretrained("./pt_model/pytorch_model.bin", from_pt=True, config=config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertConfig, FlaxBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Model was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)* (for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a PyTorch model (slower, for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = BertConfig.from_json_file(<span class="hljs-string">&quot;./pt_model/config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;./pt_model/pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config)`}}),Nr=new v({props:{name:"register_for_auto_class",anchor:"transformers.FlaxPreTrainedModel.register_for_auto_class",parameters:[{name:"auto_class",val:" = 'FlaxAutoModel'"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_flax_utils.py#L721",parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.register_for_auto_class.auto_class",description:`<strong>auto_class</strong> (<code>str</code> or <code>type</code>, <em>optional</em>, defaults to <code>&quot;FlaxAutoModel&quot;</code>) &#x2014;
The auto class to register this new model with.`,name:"auto_class"}]}}),Yt=new fd({props:{warning:!0,$$slots:{default:[c$]},$$scope:{ctx:Q}}}),Br=new v({props:{name:"save_pretrained",anchor:"transformers.FlaxPreTrainedModel.save_pretrained",parameters:[{name:"save_directory",val:": typing.Union[str, os.PathLike]"},{name:"params",val:" = None"},{name:"push_to_hub",val:" = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_flax_utils.py#L664",parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory to which to save. Will be created if it doesn&#x2019;t exist.`,name:"save_directory"},{anchor:"transformers.FlaxPreTrainedModel.save_pretrained.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push your model to the Hugging Face model hub after saving it.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>Using <code>push_to_hub=True</code> will synchronize the repository you are pushing to with <code>save_directory</code>,
which requires <code>save_directory</code> to be a local clone of the repo you are pushing to if it&#x2019;s an existing
folder. Pass along <code>temp_dir=True</code> to use a temporary directory instead.</p>

					</div>
<p>kwargs &#x2014;
Additional key word arguments passed along to the <a href="/docs/transformers/pr_16543/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.push_to_hub">push_to_hub()</a> method.`,name:"push_to_hub"}]}}),Vr=new v({props:{name:"to_bf16",anchor:"transformers.FlaxPreTrainedModel.to_bf16",parameters:[{name:"params",val:": typing.Union[typing.Dict, flax.core.frozen_dict.FrozenDict]"},{name:"mask",val:": typing.Any = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_flax_utils.py#L191",parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.to_bf16.params",description:`<strong>params</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> of model parameters.`,name:"params"},{anchor:"transformers.FlaxPreTrainedModel.to_bf16.mask",description:`<strong>mask</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> with same structure as the <code>params</code> tree. The leaves should be booleans, <code>True</code> for params
you want to cast, and should be <code>False</code> for those you want to skip.`,name:"mask"}]}}),Sr=new K({props:{code:`from transformers import FlaxBertModel

# load model
model = FlaxBertModel.from_pretrained("bert-base-cased")
# By default, the model parameters will be in fp32 precision, to cast these to bfloat16 precision
model.params = model.to_bf16(model.params)
# If you want don't want to cast certain parameters (for example layer norm bias and scale)
# then pass the mask as follows
from flax import traverse_util

model = FlaxBertModel.from_pretrained("bert-base-cased")
flat_params = traverse_util.flatten_dict(model.params)
mask = {
    path: (path[-2] != ("LayerNorm", "bias") and path[-2:] != ("LayerNorm", "scale"))
    for path in flat_params
}
mask = traverse_util.unflatten_dict(mask)
model.params = model.to_bf16(model.params, mask)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># By default, the model parameters will be in fp32 precision, to cast these to bfloat16 precision</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_bf16(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If you want don&#x27;t want to cast certain parameters (for example layer norm bias and scale)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># then pass the mask as follows</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> flax <span class="hljs-keyword">import</span> traverse_util

<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>flat_params = traverse_util.flatten_dict(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = {
<span class="hljs-meta">... </span>    path: (path[-<span class="hljs-number">2</span>] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;bias&quot;</span>) <span class="hljs-keyword">and</span> path[-<span class="hljs-number">2</span>:] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;scale&quot;</span>))
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> flat_params
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = traverse_util.unflatten_dict(mask)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_bf16(model.params, mask)`}}),Wr=new v({props:{name:"to_fp16",anchor:"transformers.FlaxPreTrainedModel.to_fp16",parameters:[{name:"params",val:": typing.Union[typing.Dict, flax.core.frozen_dict.FrozenDict]"},{name:"mask",val:": typing.Any = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_flax_utils.py#L257",parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.to_fp16.params",description:`<strong>params</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> of model parameters.`,name:"params"},{anchor:"transformers.FlaxPreTrainedModel.to_fp16.mask",description:`<strong>mask</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> with same structure as the <code>params</code> tree. The leaves should be booleans, <code>True</code> for params
you want to cast, and should be <code>False</code> for those you want to skip`,name:"mask"}]}}),Hr=new K({props:{code:`from transformers import FlaxBertModel

# load model
model = FlaxBertModel.from_pretrained("bert-base-cased")
# By default, the model params will be in fp32, to cast these to float16
model.params = model.to_fp16(model.params)
# If you want don't want to cast certain parameters (for example layer norm bias and scale)
# then pass the mask as follows
from flax import traverse_util

model = FlaxBertModel.from_pretrained("bert-base-cased")
flat_params = traverse_util.flatten_dict(model.params)
mask = {
    path: (path[-2] != ("LayerNorm", "bias") and path[-2:] != ("LayerNorm", "scale"))
    for path in flat_params
}
mask = traverse_util.unflatten_dict(mask)
model.params = model.to_fp16(model.params, mask)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># By default, the model params will be in fp32, to cast these to float16</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_fp16(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If you want don&#x27;t want to cast certain parameters (for example layer norm bias and scale)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># then pass the mask as follows</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> flax <span class="hljs-keyword">import</span> traverse_util

<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>flat_params = traverse_util.flatten_dict(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = {
<span class="hljs-meta">... </span>    path: (path[-<span class="hljs-number">2</span>] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;bias&quot;</span>) <span class="hljs-keyword">and</span> path[-<span class="hljs-number">2</span>:] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;scale&quot;</span>))
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> flat_params
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = traverse_util.unflatten_dict(mask)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_fp16(model.params, mask)`}}),Gr=new v({props:{name:"to_fp32",anchor:"transformers.FlaxPreTrainedModel.to_fp32",parameters:[{name:"params",val:": typing.Union[typing.Dict, flax.core.frozen_dict.FrozenDict]"},{name:"mask",val:": typing.Any = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/modeling_flax_utils.py#L230",parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.to_fp32.params",description:`<strong>params</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> of model parameters.`,name:"params"},{anchor:"transformers.FlaxPreTrainedModel.to_fp32.mask",description:`<strong>mask</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> with same structure as the <code>params</code> tree. The leaves should be booleans, <code>True</code> for params
you want to cast, and should be <code>False</code> for those you want to skip`,name:"mask"}]}}),Rr=new K({props:{code:`from transformers import FlaxBertModel

# Download model and configuration from huggingface.co
model = FlaxBertModel.from_pretrained("bert-base-cased")
# By default, the model params will be in fp32, to illustrate the use of this method,
# we'll first cast to fp16 and back to fp32
model.params = model.to_f16(model.params)
# now cast back to fp32
model.params = model.to_fp32(model.params)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># By default, the model params will be in fp32, to illustrate the use of this method,</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># we&#x27;ll first cast to fp16 and back to fp32</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_f16(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># now cast back to fp32</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_fp32(model.params)`}}),Yr=new ao({}),Jr=new v({props:{name:"class transformers.utils.PushToHubMixin",anchor:"transformers.utils.PushToHubMixin",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/utils/hub.py#L841"}}),Kr=new v({props:{name:"push_to_hub",anchor:"transformers.utils.PushToHubMixin.push_to_hub",parameters:[{name:"repo_path_or_name",val:": typing.Optional[str] = None"},{name:"repo_url",val:": typing.Optional[str] = None"},{name:"use_temp_dir",val:": bool = False"},{name:"commit_message",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"**model_card_kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/utils/hub.py#L846",parametersDescription:[{anchor:"transformers.utils.PushToHubMixin.push_to_hub.repo_path_or_name",description:`<strong>repo_path_or_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Can either be a repository name for your {object} in the Hub or a path to a local folder (in which case
the repository will have the name of that local folder). If not specified, will default to the name
given by <code>repo_url</code> and a local directory with that name will be created.`,name:"repo_path_or_name"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.repo_url",description:`<strong>repo_url</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Specify this in case you want to push to an existing repository in the hub. If unspecified, a new
repository will be created in your namespace (unless you specify an <code>organization</code>) with <code>repo_name</code>.`,name:"repo_url"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clone the distant repo in a temporary directory or in <code>repo_path_or_name</code> inside the
current working directory. This will slow things down if you are making changes in an existing repo
since you will need to clone the repo before every push.`,name:"use_temp_dir"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;add {object}&quot;</code>.`,name:"commit_message"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.organization",description:`<strong>organization</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Organization in which you want to push your {object} (you must be a member of this organization).`,name:"organization"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private (requires a paying subscription).`,name:"private"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.use_auth_token",description:`<strong>use_auth_token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if
<code>repo_url</code> is not specified.`,name:"use_auth_token"}],returnDescription:`
<p>The url of the commit of your {object} in the given repository.</p>
`,returnType:`
<p><code>str</code></p>
`}}),Zr=new K({props:{code:`from transformers import {object_class}

{object} = {object_class}.from_pretrained("bert-base-cased")

# Push the {object} to your namespace with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
{object}.push_to_hub("my-finetuned-bert")

# Push the {object} to your namespace with the name "my-finetuned-bert" with no local clone.
{object}.push_to_hub("my-finetuned-bert", use_temp_dir=True)

# Push the {object} to an organization with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
{object}.push_to_hub("my-finetuned-bert", organization="huggingface")

# Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.
{object}.push_to_hub("my-finetuned-bert", repo_url="https://huggingface.co/sgugger/my-finetuned-bert")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> {object_class}

{<span class="hljs-built_in">object</span>} = {object_class}.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the {object} to your namespace with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
{<span class="hljs-built_in">object</span>}.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the {object} to your namespace with the name &quot;my-finetuned-bert&quot; with no local clone.</span>
{<span class="hljs-built_in">object</span>}.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, use_temp_dir=<span class="hljs-literal">True</span>)

<span class="hljs-comment"># Push the {object} to an organization with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
{<span class="hljs-built_in">object</span>}.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, organization=<span class="hljs-string">&quot;huggingface&quot;</span>)

<span class="hljs-comment"># Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.</span>
{<span class="hljs-built_in">object</span>}.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, repo_url=<span class="hljs-string">&quot;https://huggingface.co/sgugger/my-finetuned-bert&quot;</span>)`}}),{c(){$=o("meta"),j=d(),x=o("h1"),k=o("a"),W=o("span"),m(z.$$.fragment),A=d(),le=o("span"),Kl=s("Models"),ud=d(),Z=o("p"),Ql=s("The base classes "),an=o("a"),Zl=s("PreTrainedModel"),ec=s(", "),sn=o("a"),tc=s("TFPreTrainedModel"),oc=s(`, and
`),dn=o("a"),rc=s("FlaxPreTrainedModel"),nc=s(` implement the common methods for loading/saving a model either from a local
file or directory, or from a pretrained model configuration provided by the library (downloaded from HuggingFace\u2019s AWS
S3 repository).`),gd=d(),Ae=o("p"),ln=o("a"),ac=s("PreTrainedModel"),sc=s(" and "),cn=o("a"),ic=s("TFPreTrainedModel"),dc=s(` also implement a few methods which
are common among all the models to:`),_d=d(),Ze=o("ul"),Qn=o("li"),lc=s("resize the input token embeddings when new tokens are added to the vocabulary"),cc=d(),Zn=o("li"),mc=s("prune the attention heads of the model."),bd=d(),L=o("p"),pc=s("The other methods that are common to each model are defined in "),mn=o("a"),hc=s("ModuleUtilsMixin"),fc=s(`
(for the PyTorch models) and `),ea=o("code"),uc=s("TFModuleUtilsMixin"),gc=s(` (for the TensorFlow models) or
for text generation, `),pn=o("a"),_c=s("GenerationMixin"),bc=s(` (for the PyTorch models),
`),hn=o("a"),vc=s("TFGenerationMixin"),yc=s(` (for the TensorFlow models) and
`),fn=o("a"),wc=s("FlaxGenerationMixin"),$c=s(" (for the Flax/JAX models)."),vd=d(),Le=o("h2"),et=o("a"),ta=o("span"),m(so.$$.fragment),Tc=d(),oa=o("span"),xc=s("PreTrainedModel"),yd=d(),T=o("div"),m(io.$$.fragment),Pc=d(),ra=o("p"),kc=s("Base class for all models."),Mc=d(),un=o("p"),gn=o("a"),Ec=s("PreTrainedModel"),jc=s(` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models as well as a few methods common to all models to:`),Fc=d(),lo=o("ul"),na=o("li"),Dc=s("resize the input embeddings,"),qc=d(),aa=o("li"),zc=s("prune heads in the self-attention heads."),Cc=d(),sa=o("p"),Ic=s("Class attributes (overridden by derived classes):"),Ac=d(),H=o("ul"),ia=o("li"),ge=o("p"),da=o("strong"),Lc=s("config_class"),Oc=s(" ("),_n=o("a"),Uc=s("PretrainedConfig"),Nc=s(") \u2014 A subclass of "),bn=o("a"),Bc=s("PretrainedConfig"),Xc=s(` to use as configuration class
for this model architecture.`),Vc=d(),co=o("li"),_e=o("p"),la=o("strong"),Sc=s("load_tf_weights"),Wc=s(" ("),ca=o("code"),Hc=s("Callable"),Gc=s(") \u2014 A python "),ma=o("em"),Rc=s("method"),Yc=s(` for loading a TensorFlow checkpoint in a PyTorch model,
taking as arguments:`),Jc=d(),Oe=o("ul"),tt=o("li"),pa=o("strong"),Kc=s("model"),Qc=s(" ("),vn=o("a"),Zc=s("PreTrainedModel"),em=s(") \u2014 An instance of the model on which to load the TensorFlow checkpoint."),tm=d(),ot=o("li"),ha=o("strong"),om=s("config"),rm=s(" ("),fa=o("code"),nm=s("PreTrainedConfig"),am=s(") \u2014 An instance of the configuration associated to the model."),sm=d(),rt=o("li"),ua=o("strong"),im=s("path"),dm=s(" ("),ga=o("code"),lm=s("str"),cm=s(") \u2014 A path to the TensorFlow checkpoint."),mm=d(),_a=o("li"),nt=o("p"),ba=o("strong"),pm=s("base_model_prefix"),hm=s(" ("),va=o("code"),fm=s("str"),um=s(`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),gm=d(),ya=o("li"),at=o("p"),wa=o("strong"),_m=s("is_parallelizable"),bm=s(" ("),$a=o("code"),vm=s("bool"),ym=s(") \u2014 A flag indicating whether this model supports model parallelization."),wm=d(),Ta=o("li"),U=o("p"),xa=o("strong"),$m=s("main_input_name"),Tm=s(" ("),Pa=o("code"),xm=s("str"),Pm=s(") \u2014 The name of the principal input to the model (often "),ka=o("code"),km=s("input_ids"),Mm=s(` for NLP
models, `),Ma=o("code"),Em=s("pixel_values"),jm=s(" for vision models and "),Ea=o("code"),Fm=s("input_values"),Dm=s(" for speech models)."),qm=d(),ee=o("div"),m(mo.$$.fragment),zm=d(),po=o("p"),Cm=s("Upload the model files to the \u{1F917} Model Hub while synchronizing a local clone of the repo in "),ja=o("code"),Im=s("repo_path_or_name"),Am=s("."),Lm=d(),Fa=o("p"),Om=s("Examples:"),Um=d(),m(ho.$$.fragment),Nm=d(),D=o("div"),m(fo.$$.fragment),Bm=d(),Da=o("p"),Xm=s("Instantiate a pretrained pytorch model from a pre-trained model configuration."),Vm=d(),Ue=o("p"),Sm=s("The model is set in evaluation mode by default using "),qa=o("code"),Wm=s("model.eval()"),Hm=s(` (Dropout modules are deactivated). To train
the model, you should first set it back in training mode with `),za=o("code"),Gm=s("model.train()"),Rm=s("."),Ym=d(),uo=o("p"),Jm=s("The warning "),Ca=o("em"),Km=s("Weights from XXX not initialized from pretrained model"),Qm=s(` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),Zm=d(),go=o("p"),ep=s("The warning "),Ia=o("em"),tp=s("Weights from XXX not used in YYY"),op=s(` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),rp=d(),m(st.$$.fragment),np=d(),m(it.$$.fragment),ap=d(),Aa=o("p"),sp=s("Examples:"),ip=d(),m(_o.$$.fragment),dp=d(),dt=o("div"),m(bo.$$.fragment),lp=d(),La=o("p"),cp=s("Returns the model\u2019s input embeddings."),mp=d(),lt=o("div"),m(vo.$$.fragment),pp=d(),Oa=o("p"),hp=s("Returns the model\u2019s output embeddings."),fp=d(),be=o("div"),m(yo.$$.fragment),up=d(),Ua=o("p"),gp=s("Deactivates gradient checkpointing for the current model."),_p=d(),Na=o("p"),bp=s(`Note that in other frameworks this feature can be referred to as \u201Cactivation checkpointing\u201D or \u201Ccheckpoint
activations\u201D.`),vp=d(),ve=o("div"),m(wo.$$.fragment),yp=d(),Ba=o("p"),wp=s("Activates gradient checkpointing for the current model."),$p=d(),Xa=o("p"),Tp=s(`Note that in other frameworks this feature can be referred to as \u201Cactivation checkpointing\u201D or \u201Ccheckpoint
activations\u201D.`),xp=d(),ct=o("div"),m($o.$$.fragment),Pp=d(),Va=o("p"),kp=s("If needed prunes and maybe initializes weights."),Mp=d(),mt=o("div"),m(To.$$.fragment),Ep=d(),Sa=o("p"),jp=s(`A method executed at the end of each Transformer model initialization, to execute code that needs the model\u2019s
modules properly initialized (such as weight initialization).`),Fp=d(),pt=o("div"),m(xo.$$.fragment),Dp=d(),Wa=o("p"),qp=s("Prunes heads of the base model."),zp=d(),ye=o("div"),m(Po.$$.fragment),Cp=d(),Ha=o("p"),Ip=s(`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`),Ap=d(),m(ht.$$.fragment),Lp=d(),we=o("div"),m(ko.$$.fragment),Op=d(),Mo=o("p"),Up=s("Resizes input token embeddings matrix of the model if "),Ga=o("code"),Np=s("new_num_tokens != config.vocab_size"),Bp=s("."),Xp=d(),Eo=o("p"),Vp=s("Takes care of tying weights embeddings afterwards if the model class has a "),Ra=o("code"),Sp=s("tie_weights()"),Wp=s(" method."),Hp=d(),ft=o("div"),m(jo.$$.fragment),Gp=d(),Fo=o("p"),Rp=s(`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),Ya=o("code"),Yp=s("[from_pretrained()](/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)"),Jp=s(" class method."),Kp=d(),ut=o("div"),m(Do.$$.fragment),Qp=d(),Ja=o("p"),Zp=s("Set model\u2019s input embeddings."),eh=d(),$e=o("div"),m(qo.$$.fragment),th=d(),Ka=o("p"),oh=s("Tie the weights between the input embeddings and the output embeddings."),rh=d(),zo=o("p"),nh=s("If the "),Qa=o("code"),ah=s("torchscript"),sh=s(` flag is set in the configuration, can\u2019t handle parameter sharing so we are cloning the
weights instead.`),wd=d(),yn=o("a"),$d=d(),Ne=o("h3"),gt=o("a"),Za=o("span"),m(Co.$$.fragment),ih=d(),es=o("span"),dh=s("Model Instantiation dtype"),Td=d(),te=o("p"),lh=s("Under Pytorch a model normally gets instantiated with "),ts=o("code"),ch=s("torch.float32"),mh=s(` format. This can be an issue if one tries to
load a model whose weights are in fp16, since it\u2019d require twice as much memory. To overcome this limitation, you can
either explicitly pass the desired `),os=o("code"),ph=s("dtype"),hh=s(" using "),rs=o("code"),fh=s("torch_dtype"),uh=s(" argument:"),xd=d(),m(Io.$$.fragment),Pd=d(),Te=o("p"),gh=s("or, if you want the model to always load in the most optimal memory pattern, you can use the special value "),ns=o("code"),_h=s('"auto"'),bh=s(`,
and then `),as=o("code"),vh=s("dtype"),yh=s(" will be automatically derived from the model\u2019s weights:"),kd=d(),m(Ao.$$.fragment),Md=d(),_t=o("p"),wh=s("Models instantiated from scratch can also be told which "),ss=o("code"),$h=s("dtype"),Th=s(" to use with:"),Ed=d(),m(Lo.$$.fragment),jd=d(),wn=o("p"),xh=s("Due to Pytorch design, this functionality is only available for floating dtypes."),Fd=d(),Be=o("h2"),bt=o("a"),is=o("span"),m(Oo.$$.fragment),Ph=d(),ds=o("span"),kh=s("ModuleUtilsMixin"),Dd=d(),E=o("div"),m(Uo.$$.fragment),Mh=d(),No=o("p"),Eh=s("A few utilities for "),ls=o("code"),jh=s("torch.nn.Modules"),Fh=s(", to be used as a mixin."),Dh=d(),xe=o("div"),m(Bo.$$.fragment),qh=d(),cs=o("p"),zh=s("Add a memory hook before and after each sub-module forward pass to record increase in memory consumption."),Ch=d(),Xe=o("p"),Ih=s("Increase in memory consumption is stored in a "),ms=o("code"),Ah=s("mem_rss_diff"),Lh=s(` attribute for each module and can be reset to zero
with `),ps=o("code"),Oh=s("model.reset_memory_hooks_state()"),Uh=s("."),Nh=d(),vt=o("div"),m(Xo.$$.fragment),Bh=d(),hs=o("p"),Xh=s("Helper function to estimate the total number of tokens from the model inputs."),Vh=d(),yt=o("div"),m(Vo.$$.fragment),Sh=d(),Ve=o("p"),Wh=s(`Get number of (optionally, non-embeddings) floating-point operations for the forward and backward passes of a
batch with this transformer model. Default approximation neglects the quadratic dependency on the number of
tokens (valid if `),fs=o("code"),Hh=s("12 * d_model << sequence_length"),Gh=s(") as laid out in "),So=o("a"),Rh=s(`this
paper`),Yh=s(` section 2.1. Should be overridden for transformers with parameter
re-use e.g. Albert or Universal Transformers, or if doing long-range modeling with very high sequence lengths.`),Jh=d(),wt=o("div"),m(Wo.$$.fragment),Kh=d(),us=o("p"),Qh=s("Makes broadcastable attention and causal masks so that future and masked tokens are ignored."),Zh=d(),$t=o("div"),m(Ho.$$.fragment),ef=d(),gs=o("p"),tf=s("Prepare the head mask if needed."),of=d(),Tt=o("div"),m(Go.$$.fragment),rf=d(),_s=o("p"),nf=s("Invert an attention mask (e.g., switches 0. and 1.)."),af=d(),xt=o("div"),m(Ro.$$.fragment),sf=d(),bs=o("p"),df=s("Get number of (optionally, trainable or non-embeddings) parameters in the module."),lf=d(),Pt=o("div"),m(Yo.$$.fragment),cf=d(),Se=o("p"),mf=s("Reset the "),vs=o("code"),pf=s("mem_rss_diff"),hf=s(" attribute of each module (see "),$n=o("a"),ff=s("add_memory_hooks()"),uf=s(")."),qd=d(),We=o("h2"),kt=o("a"),ys=o("span"),m(Jo.$$.fragment),gf=d(),ws=o("span"),_f=s("TFPreTrainedModel"),zd=d(),b=o("div"),m(Ko.$$.fragment),bf=d(),$s=o("p"),vf=s("Base class for all TF models."),yf=d(),Tn=o("p"),xn=o("a"),wf=s("TFPreTrainedModel"),$f=s(` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models as well as a few methods common to all models to:`),Tf=d(),Qo=o("ul"),Ts=o("li"),xf=s("resize the input embeddings,"),Pf=d(),xs=o("li"),kf=s("prune heads in the self-attention heads."),Mf=d(),Ps=o("p"),Ef=s("Class attributes (overridden by derived classes):"),jf=d(),He=o("ul"),Pe=o("li"),ks=o("strong"),Ff=s("config_class"),Df=s(" ("),Pn=o("a"),qf=s("PretrainedConfig"),zf=s(") \u2014 A subclass of "),kn=o("a"),Cf=s("PretrainedConfig"),If=s(` to use as configuration class
for this model architecture.`),Af=d(),Mt=o("li"),Ms=o("strong"),Lf=s("base_model_prefix"),Of=s(" ("),Es=o("code"),Uf=s("str"),Nf=s(`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),Bf=d(),N=o("li"),js=o("strong"),Xf=s("main_input_name"),Vf=s(" ("),Fs=o("code"),Sf=s("str"),Wf=s(") \u2014 The name of the principal input to the model (often "),Ds=o("code"),Hf=s("input_ids"),Gf=s(` for NLP
models, `),qs=o("code"),Rf=s("pixel_values"),Yf=s(" for vision models and "),zs=o("code"),Jf=s("input_values"),Kf=s(" for speech models)."),Qf=d(),oe=o("div"),m(Zo.$$.fragment),Zf=d(),er=o("p"),eu=s(`Upload the model checkpoint to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),Cs=o("code"),tu=s("repo_path_or_name"),ou=s("."),ru=d(),Is=o("p"),nu=s("Examples:"),au=d(),m(tr.$$.fragment),su=d(),Et=o("div"),m(or.$$.fragment),iu=d(),As=o("p"),du=s(`This is a thin wrapper that sets the model\u2019s loss output head as the loss if the user does not specify a loss
function themselves.`),lu=d(),C=o("div"),m(rr.$$.fragment),cu=d(),Ls=o("p"),mu=s("Instantiate a pretrained TF 2.0 model from a pre-trained model configuration."),pu=d(),nr=o("p"),hu=s("The warning "),Os=o("em"),fu=s("Weights from XXX not initialized from pretrained model"),uu=s(` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),gu=d(),ar=o("p"),_u=s("The warning "),Us=o("em"),bu=s("Weights from XXX not used in YYY"),vu=s(` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),yu=d(),m(jt.$$.fragment),wu=d(),Ns=o("p"),$u=s("Examples:"),Tu=d(),m(sr.$$.fragment),xu=d(),Ft=o("div"),m(ir.$$.fragment),Pu=d(),Bs=o("p"),ku=s("Dict of bias attached to an LM head. The key represents the name of the bias attribute."),Mu=d(),Dt=o("div"),m(dr.$$.fragment),Eu=d(),Xs=o("p"),ju=s("Returns the model\u2019s input embeddings layer."),Fu=d(),qt=o("div"),m(lr.$$.fragment),Du=d(),Vs=o("p"),qu=s("The LM Head layer. This method must be overwritten by all the models that have a lm head."),zu=d(),zt=o("div"),m(cr.$$.fragment),Cu=d(),Ss=o("p"),Iu=s("Returns the model\u2019s output embeddings"),Au=d(),Ct=o("div"),m(mr.$$.fragment),Lu=d(),Ws=o("p"),Ou=s(`Get the layer that handles a bias attribute in case the model has an LM head with weights tied to the
embeddings`),Uu=d(),It=o("div"),m(pr.$$.fragment),Nu=d(),Hs=o("p"),Bu=s("Get the concatenated _prefix name of the bias from the model name to the parent layer"),Xu=d(),At=o("div"),m(hr.$$.fragment),Vu=d(),Gs=o("p"),Su=s(`Loads a saved checkpoint (model weights and optimizer state) from a repo. Returns the current epoch count when
the checkpoint was made.`),Wu=d(),Lt=o("div"),m(fr.$$.fragment),Hu=d(),Rs=o("p"),Gu=s("Prunes heads of the base model."),Ru=d(),ke=o("div"),m(ur.$$.fragment),Yu=d(),gr=o("p"),Ju=s("Resizes input token embeddings matrix of the model if "),Ys=o("code"),Ku=s("new_num_tokens != config.vocab_size"),Qu=s("."),Zu=d(),_r=o("p"),eg=s("Takes care of tying weights embeddings afterwards if the model class has a "),Js=o("code"),tg=s("tie_weights()"),og=s(" method."),rg=d(),Ot=o("div"),m(br.$$.fragment),ng=d(),vr=o("p"),ag=s(`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),Mn=o("a"),sg=s("from_pretrained()"),ig=s(" class method."),dg=d(),Ut=o("div"),m(yr.$$.fragment),lg=d(),Ks=o("p"),cg=s("Method used for serving the model."),mg=d(),Nt=o("div"),m(wr.$$.fragment),pg=d(),Qs=o("p"),hg=s("Prepare the output of the saved model. Each model must implement this function."),fg=d(),Bt=o("div"),m($r.$$.fragment),ug=d(),Zs=o("p"),gg=s("Set all the bias in the LM head."),_g=d(),Xt=o("div"),m(Tr.$$.fragment),bg=d(),ei=o("p"),vg=s("Set model\u2019s input embeddings"),yg=d(),Vt=o("div"),m(xr.$$.fragment),wg=d(),ti=o("p"),$g=s("Set model\u2019s output embeddings"),Tg=d(),St=o("div"),m(Pr.$$.fragment),xg=d(),oi=o("p"),Pg=s("A modification of Keras\u2019s default test_step that cleans up the printed metrics when we use a dummy loss."),kg=d(),re=o("div"),m(kr.$$.fragment),Mg=d(),G=o("p"),Eg=s("A modification of Keras\u2019s default "),ri=o("code"),jg=s("train_step"),Fg=s(` that cleans up the printed metrics when we use a dummy loss. If
a user specifies a loss at model compile time, this function behaves as the original Keras `),ni=o("code"),Dg=s("train_step"),qg=s(`. In
this case, it expects the same `),ai=o("code"),zg=s("data"),Cg=s(" as the original function (i.e. "),si=o("code"),Ig=s("(inputs, labels)"),Ag=s(")."),Lg=d(),Ge=o("p"),Og=s(`However, when the model is compiled without specifying the loss AND the expected label columns are passed as
part of the input dictionary, the loss is computed internally (inside the model class) and is used in the
backwards pass. In this case, `),ii=o("code"),Ug=s("data"),Ng=s(" is a singleton tuple containing "),di=o("code"),Bg=s("(inputs,)"),Xg=s("."),Vg=d(),Re=o("p"),Sg=s(`This is possible under the aforementioned circumstances because our overriden compile function can set an
additional loss function that reduces a `),li=o("code"),Wg=s("loss"),Hg=s(" output, and the model will output a "),ci=o("code"),Gg=s("loss"),Rg=s(` component (notice the
name matching) containing the loss that was used to train the pre-trained model.`),Cd=d(),Ye=o("h2"),Wt=o("a"),mi=o("span"),m(Mr.$$.fragment),Yg=d(),pi=o("span"),Jg=s("TFModelUtilsMixin"),Id=d(),ce=o("div"),m(Er.$$.fragment),Kg=d(),jr=o("p"),Qg=s("A few utilities for "),hi=o("code"),Zg=s("tf.keras.Model"),e_=s(", to be used as a mixin."),t_=d(),Ht=o("div"),m(Fr.$$.fragment),o_=d(),fi=o("p"),r_=s("Get the number of (optionally, trainable) parameters in the model."),Ad=d(),Je=o("h2"),Gt=o("a"),ui=o("span"),m(Dr.$$.fragment),n_=d(),gi=o("span"),a_=s("FlaxPreTrainedModel"),Ld=d(),M=o("div"),m(qr.$$.fragment),s_=d(),_i=o("p"),i_=s("Base class for all models."),d_=d(),En=o("p"),jn=o("a"),l_=s("FlaxPreTrainedModel"),c_=s(` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models.`),m_=d(),bi=o("p"),p_=s("Class attributes (overridden by derived classes):"),h_=d(),Ke=o("ul"),Me=o("li"),vi=o("strong"),f_=s("config_class"),u_=s(" ("),Fn=o("a"),g_=s("PretrainedConfig"),__=s(") \u2014 A subclass of "),Dn=o("a"),b_=s("PretrainedConfig"),v_=s(` to use as configuration class
for this model architecture.`),y_=d(),Rt=o("li"),yi=o("strong"),w_=s("base_model_prefix"),$_=s(" ("),wi=o("code"),T_=s("str"),x_=s(`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),P_=d(),B=o("li"),$i=o("strong"),k_=s("main_input_name"),M_=s(" ("),Ti=o("code"),E_=s("str"),j_=s(") \u2014 The name of the principal input to the model (often "),xi=o("code"),F_=s("input_ids"),D_=s(` for NLP
models, `),Pi=o("code"),q_=s("pixel_values"),z_=s(" for vision models and "),ki=o("code"),C_=s("input_values"),I_=s(" for speech models)."),A_=d(),ne=o("div"),m(zr.$$.fragment),L_=d(),Cr=o("p"),O_=s(`Upload the model checkpoint to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),Mi=o("code"),U_=s("repo_path_or_name"),N_=s("."),B_=d(),Ei=o("p"),X_=s("Examples:"),V_=d(),m(Ir.$$.fragment),S_=d(),O=o("div"),m(Ar.$$.fragment),W_=d(),ji=o("p"),H_=s("Instantiate a pretrained flax model from a pre-trained model configuration."),G_=d(),Lr=o("p"),R_=s("The warning "),Fi=o("em"),Y_=s("Weights from XXX not initialized from pretrained model"),J_=s(` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),K_=d(),Or=o("p"),Q_=s("The warning "),Di=o("em"),Z_=s("Weights from XXX not used in YYY"),eb=s(` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),tb=d(),qi=o("p"),ob=s("Examples:"),rb=d(),m(Ur.$$.fragment),nb=d(),Ee=o("div"),m(Nr.$$.fragment),ab=d(),zi=o("p"),sb=s(`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`),ib=d(),m(Yt.$$.fragment),db=d(),Jt=o("div"),m(Br.$$.fragment),lb=d(),Xr=o("p"),cb=s(`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),Ci=o("code"),mb=s("[from_pretrained()](/docs/transformers/pr_16543/en/main_classes/model#transformers.FlaxPreTrainedModel.from_pretrained)"),pb=s(" class method"),hb=d(),X=o("div"),m(Vr.$$.fragment),fb=d(),R=o("p"),ub=s("Cast the floating-point "),Ii=o("code"),gb=s("params"),_b=s(" to "),Ai=o("code"),bb=s("jax.numpy.bfloat16"),vb=s(". This returns a new "),Li=o("code"),yb=s("params"),wb=s(` tree and does not cast
the `),Oi=o("code"),$b=s("params"),Tb=s(" in place."),xb=d(),Ui=o("p"),Pb=s(`This method can be used on TPU to explicitly convert the model parameters to bfloat16 precision to do full
half-precision training or to save weights in bfloat16 for inference in order to save memory and improve speed.`),kb=d(),Ni=o("p"),Mb=s("Examples:"),Eb=d(),m(Sr.$$.fragment),jb=d(),V=o("div"),m(Wr.$$.fragment),Fb=d(),Y=o("p"),Db=s("Cast the floating-point "),Bi=o("code"),qb=s("parmas"),zb=s(" to "),Xi=o("code"),Cb=s("jax.numpy.float16"),Ib=s(". This returns a new "),Vi=o("code"),Ab=s("params"),Lb=s(` tree and does not cast the
`),Si=o("code"),Ob=s("params"),Ub=s(" in place."),Nb=d(),Wi=o("p"),Bb=s(`This method can be used on GPU to explicitly convert the model parameters to float16 precision to do full
half-precision training or to save weights in float16 for inference in order to save memory and improve speed.`),Xb=d(),Hi=o("p"),Vb=s("Examples:"),Sb=d(),m(Hr.$$.fragment),Wb=d(),ae=o("div"),m(Gr.$$.fragment),Hb=d(),J=o("p"),Gb=s("Cast the floating-point "),Gi=o("code"),Rb=s("parmas"),Yb=s(" to "),Ri=o("code"),Jb=s("jax.numpy.float32"),Kb=s(`. This method can be used to explicitly convert the
model parameters to fp32 precision. This returns a new `),Yi=o("code"),Qb=s("params"),Zb=s(" tree and does not cast the "),Ji=o("code"),ev=s("params"),tv=s(" in place."),ov=d(),Ki=o("p"),rv=s("Examples:"),nv=d(),m(Rr.$$.fragment),Od=d(),Qe=o("h2"),Kt=o("a"),Qi=o("span"),m(Yr.$$.fragment),av=d(),Zi=o("span"),sv=s("Pushing to the Hub"),Ud=d(),me=o("div"),m(Jr.$$.fragment),iv=d(),ed=o("p"),dv=s("A Mixin containing the functionality to push a model or tokenizer to the hub."),lv=d(),se=o("div"),m(Kr.$$.fragment),cv=d(),Qr=o("p"),mv=s(`Upload the {object_files} to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),td=o("code"),pv=s("repo_path_or_name"),hv=s("."),fv=d(),od=o("p"),uv=s("Examples:"),gv=d(),m(Zr.$$.fragment),this.h()},l(a){const _=n$('[data-svelte="svelte-1phssyn"]',document.head);$=r(_,"META",{name:!0,content:!0}),_.forEach(t),j=l(a),x=r(a,"H1",{class:!0});var en=n(x);k=r(en,"A",{id:!0,class:!0,href:!0});var rd=n(k);W=r(rd,"SPAN",{});var nd=n(W);p(z.$$.fragment,nd),nd.forEach(t),rd.forEach(t),A=l(en),le=r(en,"SPAN",{});var ad=n(le);Kl=i(ad,"Models"),ad.forEach(t),en.forEach(t),ud=l(a),Z=r(a,"P",{});var pe=n(Z);Ql=i(pe,"The base classes "),an=r(pe,"A",{href:!0});var yv=n(an);Zl=i(yv,"PreTrainedModel"),yv.forEach(t),ec=i(pe,", "),sn=r(pe,"A",{href:!0});var wv=n(sn);tc=i(wv,"TFPreTrainedModel"),wv.forEach(t),oc=i(pe,`, and
`),dn=r(pe,"A",{href:!0});var $v=n(dn);rc=i($v,"FlaxPreTrainedModel"),$v.forEach(t),nc=i(pe,` implement the common methods for loading/saving a model either from a local
file or directory, or from a pretrained model configuration provided by the library (downloaded from HuggingFace\u2019s AWS
S3 repository).`),pe.forEach(t),gd=l(a),Ae=r(a,"P",{});var sd=n(Ae);ln=r(sd,"A",{href:!0});var Tv=n(ln);ac=i(Tv,"PreTrainedModel"),Tv.forEach(t),sc=i(sd," and "),cn=r(sd,"A",{href:!0});var xv=n(cn);ic=i(xv,"TFPreTrainedModel"),xv.forEach(t),dc=i(sd,` also implement a few methods which
are common among all the models to:`),sd.forEach(t),_d=l(a),Ze=r(a,"UL",{});var Bd=n(Ze);Qn=r(Bd,"LI",{});var Pv=n(Qn);lc=i(Pv,"resize the input token embeddings when new tokens are added to the vocabulary"),Pv.forEach(t),cc=l(Bd),Zn=r(Bd,"LI",{});var kv=n(Zn);mc=i(kv,"prune the attention heads of the model."),kv.forEach(t),Bd.forEach(t),bd=l(a),L=r(a,"P",{});var ie=n(L);pc=i(ie,"The other methods that are common to each model are defined in "),mn=r(ie,"A",{href:!0});var Mv=n(mn);hc=i(Mv,"ModuleUtilsMixin"),Mv.forEach(t),fc=i(ie,`
(for the PyTorch models) and `),ea=r(ie,"CODE",{});var Ev=n(ea);uc=i(Ev,"TFModuleUtilsMixin"),Ev.forEach(t),gc=i(ie,` (for the TensorFlow models) or
for text generation, `),pn=r(ie,"A",{href:!0});var jv=n(pn);_c=i(jv,"GenerationMixin"),jv.forEach(t),bc=i(ie,` (for the PyTorch models),
`),hn=r(ie,"A",{href:!0});var Fv=n(hn);vc=i(Fv,"TFGenerationMixin"),Fv.forEach(t),yc=i(ie,` (for the TensorFlow models) and
`),fn=r(ie,"A",{href:!0});var Dv=n(fn);wc=i(Dv,"FlaxGenerationMixin"),Dv.forEach(t),$c=i(ie," (for the Flax/JAX models)."),ie.forEach(t),vd=l(a),Le=r(a,"H2",{class:!0});var Xd=n(Le);et=r(Xd,"A",{id:!0,class:!0,href:!0});var qv=n(et);ta=r(qv,"SPAN",{});var zv=n(ta);p(so.$$.fragment,zv),zv.forEach(t),qv.forEach(t),Tc=l(Xd),oa=r(Xd,"SPAN",{});var Cv=n(oa);xc=i(Cv,"PreTrainedModel"),Cv.forEach(t),Xd.forEach(t),yd=l(a),T=r(a,"DIV",{class:!0});var P=n(T);p(io.$$.fragment,P),Pc=l(P),ra=r(P,"P",{});var Iv=n(ra);kc=i(Iv,"Base class for all models."),Iv.forEach(t),Mc=l(P),un=r(P,"P",{});var _v=n(un);gn=r(_v,"A",{href:!0});var Av=n(gn);Ec=i(Av,"PreTrainedModel"),Av.forEach(t),jc=i(_v,` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models as well as a few methods common to all models to:`),_v.forEach(t),Fc=l(P),lo=r(P,"UL",{});var Vd=n(lo);na=r(Vd,"LI",{});var Lv=n(na);Dc=i(Lv,"resize the input embeddings,"),Lv.forEach(t),qc=l(Vd),aa=r(Vd,"LI",{});var Ov=n(aa);zc=i(Ov,"prune heads in the self-attention heads."),Ov.forEach(t),Vd.forEach(t),Cc=l(P),sa=r(P,"P",{});var Uv=n(sa);Ic=i(Uv,"Class attributes (overridden by derived classes):"),Uv.forEach(t),Ac=l(P),H=r(P,"UL",{});var je=n(H);ia=r(je,"LI",{});var Nv=n(ia);ge=r(Nv,"P",{});var tn=n(ge);da=r(tn,"STRONG",{});var Bv=n(da);Lc=i(Bv,"config_class"),Bv.forEach(t),Oc=i(tn," ("),_n=r(tn,"A",{href:!0});var Xv=n(_n);Uc=i(Xv,"PretrainedConfig"),Xv.forEach(t),Nc=i(tn,") \u2014 A subclass of "),bn=r(tn,"A",{href:!0});var Vv=n(bn);Bc=i(Vv,"PretrainedConfig"),Vv.forEach(t),Xc=i(tn,` to use as configuration class
for this model architecture.`),tn.forEach(t),Nv.forEach(t),Vc=l(je),co=r(je,"LI",{});var Sd=n(co);_e=r(Sd,"P",{});var on=n(_e);la=r(on,"STRONG",{});var Sv=n(la);Sc=i(Sv,"load_tf_weights"),Sv.forEach(t),Wc=i(on," ("),ca=r(on,"CODE",{});var Wv=n(ca);Hc=i(Wv,"Callable"),Wv.forEach(t),Gc=i(on,") \u2014 A python "),ma=r(on,"EM",{});var Hv=n(ma);Rc=i(Hv,"method"),Hv.forEach(t),Yc=i(on,` for loading a TensorFlow checkpoint in a PyTorch model,
taking as arguments:`),on.forEach(t),Jc=l(Sd),Oe=r(Sd,"UL",{});var qn=n(Oe);tt=r(qn,"LI",{});var id=n(tt);pa=r(id,"STRONG",{});var Gv=n(pa);Kc=i(Gv,"model"),Gv.forEach(t),Qc=i(id," ("),vn=r(id,"A",{href:!0});var Rv=n(vn);Zc=i(Rv,"PreTrainedModel"),Rv.forEach(t),em=i(id,") \u2014 An instance of the model on which to load the TensorFlow checkpoint."),id.forEach(t),tm=l(qn),ot=r(qn,"LI",{});var dd=n(ot);ha=r(dd,"STRONG",{});var Yv=n(ha);om=i(Yv,"config"),Yv.forEach(t),rm=i(dd," ("),fa=r(dd,"CODE",{});var Jv=n(fa);nm=i(Jv,"PreTrainedConfig"),Jv.forEach(t),am=i(dd,") \u2014 An instance of the configuration associated to the model."),dd.forEach(t),sm=l(qn),rt=r(qn,"LI",{});var ld=n(rt);ua=r(ld,"STRONG",{});var Kv=n(ua);im=i(Kv,"path"),Kv.forEach(t),dm=i(ld," ("),ga=r(ld,"CODE",{});var Qv=n(ga);lm=i(Qv,"str"),Qv.forEach(t),cm=i(ld,") \u2014 A path to the TensorFlow checkpoint."),ld.forEach(t),qn.forEach(t),Sd.forEach(t),mm=l(je),_a=r(je,"LI",{});var Zv=n(_a);nt=r(Zv,"P",{});var cd=n(nt);ba=r(cd,"STRONG",{});var ey=n(ba);pm=i(ey,"base_model_prefix"),ey.forEach(t),hm=i(cd," ("),va=r(cd,"CODE",{});var ty=n(va);fm=i(ty,"str"),ty.forEach(t),um=i(cd,`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),cd.forEach(t),Zv.forEach(t),gm=l(je),ya=r(je,"LI",{});var oy=n(ya);at=r(oy,"P",{});var md=n(at);wa=r(md,"STRONG",{});var ry=n(wa);_m=i(ry,"is_parallelizable"),ry.forEach(t),bm=i(md," ("),$a=r(md,"CODE",{});var ny=n($a);vm=i(ny,"bool"),ny.forEach(t),ym=i(md,") \u2014 A flag indicating whether this model supports model parallelization."),md.forEach(t),oy.forEach(t),wm=l(je),Ta=r(je,"LI",{});var ay=n(Ta);U=r(ay,"P",{});var he=n(U);xa=r(he,"STRONG",{});var sy=n(xa);$m=i(sy,"main_input_name"),sy.forEach(t),Tm=i(he," ("),Pa=r(he,"CODE",{});var iy=n(Pa);xm=i(iy,"str"),iy.forEach(t),Pm=i(he,") \u2014 The name of the principal input to the model (often "),ka=r(he,"CODE",{});var dy=n(ka);km=i(dy,"input_ids"),dy.forEach(t),Mm=i(he,` for NLP
models, `),Ma=r(he,"CODE",{});var ly=n(Ma);Em=i(ly,"pixel_values"),ly.forEach(t),jm=i(he," for vision models and "),Ea=r(he,"CODE",{});var cy=n(Ea);Fm=i(cy,"input_values"),cy.forEach(t),Dm=i(he," for speech models)."),he.forEach(t),ay.forEach(t),je.forEach(t),qm=l(P),ee=r(P,"DIV",{class:!0});var Qt=n(ee);p(mo.$$.fragment,Qt),zm=l(Qt),po=r(Qt,"P",{});var Wd=n(po);Cm=i(Wd,"Upload the model files to the \u{1F917} Model Hub while synchronizing a local clone of the repo in "),ja=r(Wd,"CODE",{});var my=n(ja);Im=i(my,"repo_path_or_name"),my.forEach(t),Am=i(Wd,"."),Wd.forEach(t),Lm=l(Qt),Fa=r(Qt,"P",{});var py=n(Fa);Om=i(py,"Examples:"),py.forEach(t),Um=l(Qt),p(ho.$$.fragment,Qt),Qt.forEach(t),Nm=l(P),D=r(P,"DIV",{class:!0});var I=n(D);p(fo.$$.fragment,I),Bm=l(I),Da=r(I,"P",{});var hy=n(Da);Xm=i(hy,"Instantiate a pretrained pytorch model from a pre-trained model configuration."),hy.forEach(t),Vm=l(I),Ue=r(I,"P",{});var zn=n(Ue);Sm=i(zn,"The model is set in evaluation mode by default using "),qa=r(zn,"CODE",{});var fy=n(qa);Wm=i(fy,"model.eval()"),fy.forEach(t),Hm=i(zn,` (Dropout modules are deactivated). To train
the model, you should first set it back in training mode with `),za=r(zn,"CODE",{});var uy=n(za);Gm=i(uy,"model.train()"),uy.forEach(t),Rm=i(zn,"."),zn.forEach(t),Ym=l(I),uo=r(I,"P",{});var Hd=n(uo);Jm=i(Hd,"The warning "),Ca=r(Hd,"EM",{});var gy=n(Ca);Km=i(gy,"Weights from XXX not initialized from pretrained model"),gy.forEach(t),Qm=i(Hd,` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),Hd.forEach(t),Zm=l(I),go=r(I,"P",{});var Gd=n(go);ep=i(Gd,"The warning "),Ia=r(Gd,"EM",{});var _y=n(Ia);tp=i(_y,"Weights from XXX not used in YYY"),_y.forEach(t),op=i(Gd,` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),Gd.forEach(t),rp=l(I),p(st.$$.fragment,I),np=l(I),p(it.$$.fragment,I),ap=l(I),Aa=r(I,"P",{});var by=n(Aa);sp=i(by,"Examples:"),by.forEach(t),ip=l(I),p(_o.$$.fragment,I),I.forEach(t),dp=l(P),dt=r(P,"DIV",{class:!0});var Rd=n(dt);p(bo.$$.fragment,Rd),lp=l(Rd),La=r(Rd,"P",{});var vy=n(La);cp=i(vy,"Returns the model\u2019s input embeddings."),vy.forEach(t),Rd.forEach(t),mp=l(P),lt=r(P,"DIV",{class:!0});var Yd=n(lt);p(vo.$$.fragment,Yd),pp=l(Yd),Oa=r(Yd,"P",{});var yy=n(Oa);hp=i(yy,"Returns the model\u2019s output embeddings."),yy.forEach(t),Yd.forEach(t),fp=l(P),be=r(P,"DIV",{class:!0});var Cn=n(be);p(yo.$$.fragment,Cn),up=l(Cn),Ua=r(Cn,"P",{});var wy=n(Ua);gp=i(wy,"Deactivates gradient checkpointing for the current model."),wy.forEach(t),_p=l(Cn),Na=r(Cn,"P",{});var $y=n(Na);bp=i($y,`Note that in other frameworks this feature can be referred to as \u201Cactivation checkpointing\u201D or \u201Ccheckpoint
activations\u201D.`),$y.forEach(t),Cn.forEach(t),vp=l(P),ve=r(P,"DIV",{class:!0});var In=n(ve);p(wo.$$.fragment,In),yp=l(In),Ba=r(In,"P",{});var Ty=n(Ba);wp=i(Ty,"Activates gradient checkpointing for the current model."),Ty.forEach(t),$p=l(In),Xa=r(In,"P",{});var xy=n(Xa);Tp=i(xy,`Note that in other frameworks this feature can be referred to as \u201Cactivation checkpointing\u201D or \u201Ccheckpoint
activations\u201D.`),xy.forEach(t),In.forEach(t),xp=l(P),ct=r(P,"DIV",{class:!0});var Jd=n(ct);p($o.$$.fragment,Jd),Pp=l(Jd),Va=r(Jd,"P",{});var Py=n(Va);kp=i(Py,"If needed prunes and maybe initializes weights."),Py.forEach(t),Jd.forEach(t),Mp=l(P),mt=r(P,"DIV",{class:!0});var Kd=n(mt);p(To.$$.fragment,Kd),Ep=l(Kd),Sa=r(Kd,"P",{});var ky=n(Sa);jp=i(ky,`A method executed at the end of each Transformer model initialization, to execute code that needs the model\u2019s
modules properly initialized (such as weight initialization).`),ky.forEach(t),Kd.forEach(t),Fp=l(P),pt=r(P,"DIV",{class:!0});var Qd=n(pt);p(xo.$$.fragment,Qd),Dp=l(Qd),Wa=r(Qd,"P",{});var My=n(Wa);qp=i(My,"Prunes heads of the base model."),My.forEach(t),Qd.forEach(t),zp=l(P),ye=r(P,"DIV",{class:!0});var An=n(ye);p(Po.$$.fragment,An),Cp=l(An),Ha=r(An,"P",{});var Ey=n(Ha);Ip=i(Ey,`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`),Ey.forEach(t),Ap=l(An),p(ht.$$.fragment,An),An.forEach(t),Lp=l(P),we=r(P,"DIV",{class:!0});var Ln=n(we);p(ko.$$.fragment,Ln),Op=l(Ln),Mo=r(Ln,"P",{});var Zd=n(Mo);Up=i(Zd,"Resizes input token embeddings matrix of the model if "),Ga=r(Zd,"CODE",{});var jy=n(Ga);Np=i(jy,"new_num_tokens != config.vocab_size"),jy.forEach(t),Bp=i(Zd,"."),Zd.forEach(t),Xp=l(Ln),Eo=r(Ln,"P",{});var el=n(Eo);Vp=i(el,"Takes care of tying weights embeddings afterwards if the model class has a "),Ra=r(el,"CODE",{});var Fy=n(Ra);Sp=i(Fy,"tie_weights()"),Fy.forEach(t),Wp=i(el," method."),el.forEach(t),Ln.forEach(t),Hp=l(P),ft=r(P,"DIV",{class:!0});var tl=n(ft);p(jo.$$.fragment,tl),Gp=l(tl),Fo=r(tl,"P",{});var ol=n(Fo);Rp=i(ol,`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),Ya=r(ol,"CODE",{});var Dy=n(Ya);Yp=i(Dy,"[from_pretrained()](/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)"),Dy.forEach(t),Jp=i(ol," class method."),ol.forEach(t),tl.forEach(t),Kp=l(P),ut=r(P,"DIV",{class:!0});var rl=n(ut);p(Do.$$.fragment,rl),Qp=l(rl),Ja=r(rl,"P",{});var qy=n(Ja);Zp=i(qy,"Set model\u2019s input embeddings."),qy.forEach(t),rl.forEach(t),eh=l(P),$e=r(P,"DIV",{class:!0});var On=n($e);p(qo.$$.fragment,On),th=l(On),Ka=r(On,"P",{});var zy=n(Ka);oh=i(zy,"Tie the weights between the input embeddings and the output embeddings."),zy.forEach(t),rh=l(On),zo=r(On,"P",{});var nl=n(zo);nh=i(nl,"If the "),Qa=r(nl,"CODE",{});var Cy=n(Qa);ah=i(Cy,"torchscript"),Cy.forEach(t),sh=i(nl,` flag is set in the configuration, can\u2019t handle parameter sharing so we are cloning the
weights instead.`),nl.forEach(t),On.forEach(t),P.forEach(t),wd=l(a),yn=r(a,"A",{id:!0}),n(yn).forEach(t),$d=l(a),Ne=r(a,"H3",{class:!0});var al=n(Ne);gt=r(al,"A",{id:!0,class:!0,href:!0});var Iy=n(gt);Za=r(Iy,"SPAN",{});var Ay=n(Za);p(Co.$$.fragment,Ay),Ay.forEach(t),Iy.forEach(t),ih=l(al),es=r(al,"SPAN",{});var Ly=n(es);dh=i(Ly,"Model Instantiation dtype"),Ly.forEach(t),al.forEach(t),Td=l(a),te=r(a,"P",{});var Zt=n(te);lh=i(Zt,"Under Pytorch a model normally gets instantiated with "),ts=r(Zt,"CODE",{});var Oy=n(ts);ch=i(Oy,"torch.float32"),Oy.forEach(t),mh=i(Zt,` format. This can be an issue if one tries to
load a model whose weights are in fp16, since it\u2019d require twice as much memory. To overcome this limitation, you can
either explicitly pass the desired `),os=r(Zt,"CODE",{});var Uy=n(os);ph=i(Uy,"dtype"),Uy.forEach(t),hh=i(Zt," using "),rs=r(Zt,"CODE",{});var Ny=n(rs);fh=i(Ny,"torch_dtype"),Ny.forEach(t),uh=i(Zt," argument:"),Zt.forEach(t),xd=l(a),p(Io.$$.fragment,a),Pd=l(a),Te=r(a,"P",{});var Un=n(Te);gh=i(Un,"or, if you want the model to always load in the most optimal memory pattern, you can use the special value "),ns=r(Un,"CODE",{});var By=n(ns);_h=i(By,'"auto"'),By.forEach(t),bh=i(Un,`,
and then `),as=r(Un,"CODE",{});var Xy=n(as);vh=i(Xy,"dtype"),Xy.forEach(t),yh=i(Un," will be automatically derived from the model\u2019s weights:"),Un.forEach(t),kd=l(a),p(Ao.$$.fragment,a),Md=l(a),_t=r(a,"P",{});var sl=n(_t);wh=i(sl,"Models instantiated from scratch can also be told which "),ss=r(sl,"CODE",{});var Vy=n(ss);$h=i(Vy,"dtype"),Vy.forEach(t),Th=i(sl," to use with:"),sl.forEach(t),Ed=l(a),p(Lo.$$.fragment,a),jd=l(a),wn=r(a,"P",{});var Sy=n(wn);xh=i(Sy,"Due to Pytorch design, this functionality is only available for floating dtypes."),Sy.forEach(t),Fd=l(a),Be=r(a,"H2",{class:!0});var il=n(Be);bt=r(il,"A",{id:!0,class:!0,href:!0});var Wy=n(bt);is=r(Wy,"SPAN",{});var Hy=n(is);p(Oo.$$.fragment,Hy),Hy.forEach(t),Wy.forEach(t),Ph=l(il),ds=r(il,"SPAN",{});var Gy=n(ds);kh=i(Gy,"ModuleUtilsMixin"),Gy.forEach(t),il.forEach(t),Dd=l(a),E=r(a,"DIV",{class:!0});var q=n(E);p(Uo.$$.fragment,q),Mh=l(q),No=r(q,"P",{});var dl=n(No);Eh=i(dl,"A few utilities for "),ls=r(dl,"CODE",{});var Ry=n(ls);jh=i(Ry,"torch.nn.Modules"),Ry.forEach(t),Fh=i(dl,", to be used as a mixin."),dl.forEach(t),Dh=l(q),xe=r(q,"DIV",{class:!0});var Nn=n(xe);p(Bo.$$.fragment,Nn),qh=l(Nn),cs=r(Nn,"P",{});var Yy=n(cs);zh=i(Yy,"Add a memory hook before and after each sub-module forward pass to record increase in memory consumption."),Yy.forEach(t),Ch=l(Nn),Xe=r(Nn,"P",{});var Bn=n(Xe);Ih=i(Bn,"Increase in memory consumption is stored in a "),ms=r(Bn,"CODE",{});var Jy=n(ms);Ah=i(Jy,"mem_rss_diff"),Jy.forEach(t),Lh=i(Bn,` attribute for each module and can be reset to zero
with `),ps=r(Bn,"CODE",{});var Ky=n(ps);Oh=i(Ky,"model.reset_memory_hooks_state()"),Ky.forEach(t),Uh=i(Bn,"."),Bn.forEach(t),Nn.forEach(t),Nh=l(q),vt=r(q,"DIV",{class:!0});var ll=n(vt);p(Xo.$$.fragment,ll),Bh=l(ll),hs=r(ll,"P",{});var Qy=n(hs);Xh=i(Qy,"Helper function to estimate the total number of tokens from the model inputs."),Qy.forEach(t),ll.forEach(t),Vh=l(q),yt=r(q,"DIV",{class:!0});var cl=n(yt);p(Vo.$$.fragment,cl),Sh=l(cl),Ve=r(cl,"P",{});var Xn=n(Ve);Wh=i(Xn,`Get number of (optionally, non-embeddings) floating-point operations for the forward and backward passes of a
batch with this transformer model. Default approximation neglects the quadratic dependency on the number of
tokens (valid if `),fs=r(Xn,"CODE",{});var Zy=n(fs);Hh=i(Zy,"12 * d_model << sequence_length"),Zy.forEach(t),Gh=i(Xn,") as laid out in "),So=r(Xn,"A",{href:!0,rel:!0});var e1=n(So);Rh=i(e1,`this
paper`),e1.forEach(t),Yh=i(Xn,` section 2.1. Should be overridden for transformers with parameter
re-use e.g. Albert or Universal Transformers, or if doing long-range modeling with very high sequence lengths.`),Xn.forEach(t),cl.forEach(t),Jh=l(q),wt=r(q,"DIV",{class:!0});var ml=n(wt);p(Wo.$$.fragment,ml),Kh=l(ml),us=r(ml,"P",{});var t1=n(us);Qh=i(t1,"Makes broadcastable attention and causal masks so that future and masked tokens are ignored."),t1.forEach(t),ml.forEach(t),Zh=l(q),$t=r(q,"DIV",{class:!0});var pl=n($t);p(Ho.$$.fragment,pl),ef=l(pl),gs=r(pl,"P",{});var o1=n(gs);tf=i(o1,"Prepare the head mask if needed."),o1.forEach(t),pl.forEach(t),of=l(q),Tt=r(q,"DIV",{class:!0});var hl=n(Tt);p(Go.$$.fragment,hl),rf=l(hl),_s=r(hl,"P",{});var r1=n(_s);nf=i(r1,"Invert an attention mask (e.g., switches 0. and 1.)."),r1.forEach(t),hl.forEach(t),af=l(q),xt=r(q,"DIV",{class:!0});var fl=n(xt);p(Ro.$$.fragment,fl),sf=l(fl),bs=r(fl,"P",{});var n1=n(bs);df=i(n1,"Get number of (optionally, trainable or non-embeddings) parameters in the module."),n1.forEach(t),fl.forEach(t),lf=l(q),Pt=r(q,"DIV",{class:!0});var ul=n(Pt);p(Yo.$$.fragment,ul),cf=l(ul),Se=r(ul,"P",{});var Vn=n(Se);mf=i(Vn,"Reset the "),vs=r(Vn,"CODE",{});var a1=n(vs);pf=i(a1,"mem_rss_diff"),a1.forEach(t),hf=i(Vn," attribute of each module (see "),$n=r(Vn,"A",{href:!0});var s1=n($n);ff=i(s1,"add_memory_hooks()"),s1.forEach(t),uf=i(Vn,")."),Vn.forEach(t),ul.forEach(t),q.forEach(t),qd=l(a),We=r(a,"H2",{class:!0});var gl=n(We);kt=r(gl,"A",{id:!0,class:!0,href:!0});var i1=n(kt);ys=r(i1,"SPAN",{});var d1=n(ys);p(Jo.$$.fragment,d1),d1.forEach(t),i1.forEach(t),gf=l(gl),ws=r(gl,"SPAN",{});var l1=n(ws);_f=i(l1,"TFPreTrainedModel"),l1.forEach(t),gl.forEach(t),zd=l(a),b=r(a,"DIV",{class:!0});var w=n(b);p(Ko.$$.fragment,w),bf=l(w),$s=r(w,"P",{});var c1=n($s);vf=i(c1,"Base class for all TF models."),c1.forEach(t),yf=l(w),Tn=r(w,"P",{});var bv=n(Tn);xn=r(bv,"A",{href:!0});var m1=n(xn);wf=i(m1,"TFPreTrainedModel"),m1.forEach(t),$f=i(bv,` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models as well as a few methods common to all models to:`),bv.forEach(t),Tf=l(w),Qo=r(w,"UL",{});var _l=n(Qo);Ts=r(_l,"LI",{});var p1=n(Ts);xf=i(p1,"resize the input embeddings,"),p1.forEach(t),Pf=l(_l),xs=r(_l,"LI",{});var h1=n(xs);kf=i(h1,"prune heads in the self-attention heads."),h1.forEach(t),_l.forEach(t),Mf=l(w),Ps=r(w,"P",{});var f1=n(Ps);Ef=i(f1,"Class attributes (overridden by derived classes):"),f1.forEach(t),jf=l(w),He=r(w,"UL",{});var Sn=n(He);Pe=r(Sn,"LI",{});var rn=n(Pe);ks=r(rn,"STRONG",{});var u1=n(ks);Ff=i(u1,"config_class"),u1.forEach(t),Df=i(rn," ("),Pn=r(rn,"A",{href:!0});var g1=n(Pn);qf=i(g1,"PretrainedConfig"),g1.forEach(t),zf=i(rn,") \u2014 A subclass of "),kn=r(rn,"A",{href:!0});var _1=n(kn);Cf=i(_1,"PretrainedConfig"),_1.forEach(t),If=i(rn,` to use as configuration class
for this model architecture.`),rn.forEach(t),Af=l(Sn),Mt=r(Sn,"LI",{});var pd=n(Mt);Ms=r(pd,"STRONG",{});var b1=n(Ms);Lf=i(b1,"base_model_prefix"),b1.forEach(t),Of=i(pd," ("),Es=r(pd,"CODE",{});var v1=n(Es);Uf=i(v1,"str"),v1.forEach(t),Nf=i(pd,`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),pd.forEach(t),Bf=l(Sn),N=r(Sn,"LI",{});var fe=n(N);js=r(fe,"STRONG",{});var y1=n(js);Xf=i(y1,"main_input_name"),y1.forEach(t),Vf=i(fe," ("),Fs=r(fe,"CODE",{});var w1=n(Fs);Sf=i(w1,"str"),w1.forEach(t),Wf=i(fe,") \u2014 The name of the principal input to the model (often "),Ds=r(fe,"CODE",{});var $1=n(Ds);Hf=i($1,"input_ids"),$1.forEach(t),Gf=i(fe,` for NLP
models, `),qs=r(fe,"CODE",{});var T1=n(qs);Rf=i(T1,"pixel_values"),T1.forEach(t),Yf=i(fe," for vision models and "),zs=r(fe,"CODE",{});var x1=n(zs);Jf=i(x1,"input_values"),x1.forEach(t),Kf=i(fe," for speech models)."),fe.forEach(t),Sn.forEach(t),Qf=l(w),oe=r(w,"DIV",{class:!0});var eo=n(oe);p(Zo.$$.fragment,eo),Zf=l(eo),er=r(eo,"P",{});var bl=n(er);eu=i(bl,`Upload the model checkpoint to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),Cs=r(bl,"CODE",{});var P1=n(Cs);tu=i(P1,"repo_path_or_name"),P1.forEach(t),ou=i(bl,"."),bl.forEach(t),ru=l(eo),Is=r(eo,"P",{});var k1=n(Is);nu=i(k1,"Examples:"),k1.forEach(t),au=l(eo),p(tr.$$.fragment,eo),eo.forEach(t),su=l(w),Et=r(w,"DIV",{class:!0});var vl=n(Et);p(or.$$.fragment,vl),iu=l(vl),As=r(vl,"P",{});var M1=n(As);du=i(M1,`This is a thin wrapper that sets the model\u2019s loss output head as the loss if the user does not specify a loss
function themselves.`),M1.forEach(t),vl.forEach(t),lu=l(w),C=r(w,"DIV",{class:!0});var S=n(C);p(rr.$$.fragment,S),cu=l(S),Ls=r(S,"P",{});var E1=n(Ls);mu=i(E1,"Instantiate a pretrained TF 2.0 model from a pre-trained model configuration."),E1.forEach(t),pu=l(S),nr=r(S,"P",{});var yl=n(nr);hu=i(yl,"The warning "),Os=r(yl,"EM",{});var j1=n(Os);fu=i(j1,"Weights from XXX not initialized from pretrained model"),j1.forEach(t),uu=i(yl,` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),yl.forEach(t),gu=l(S),ar=r(S,"P",{});var wl=n(ar);_u=i(wl,"The warning "),Us=r(wl,"EM",{});var F1=n(Us);bu=i(F1,"Weights from XXX not used in YYY"),F1.forEach(t),vu=i(wl,` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),wl.forEach(t),yu=l(S),p(jt.$$.fragment,S),wu=l(S),Ns=r(S,"P",{});var D1=n(Ns);$u=i(D1,"Examples:"),D1.forEach(t),Tu=l(S),p(sr.$$.fragment,S),S.forEach(t),xu=l(w),Ft=r(w,"DIV",{class:!0});var $l=n(Ft);p(ir.$$.fragment,$l),Pu=l($l),Bs=r($l,"P",{});var q1=n(Bs);ku=i(q1,"Dict of bias attached to an LM head. The key represents the name of the bias attribute."),q1.forEach(t),$l.forEach(t),Mu=l(w),Dt=r(w,"DIV",{class:!0});var Tl=n(Dt);p(dr.$$.fragment,Tl),Eu=l(Tl),Xs=r(Tl,"P",{});var z1=n(Xs);ju=i(z1,"Returns the model\u2019s input embeddings layer."),z1.forEach(t),Tl.forEach(t),Fu=l(w),qt=r(w,"DIV",{class:!0});var xl=n(qt);p(lr.$$.fragment,xl),Du=l(xl),Vs=r(xl,"P",{});var C1=n(Vs);qu=i(C1,"The LM Head layer. This method must be overwritten by all the models that have a lm head."),C1.forEach(t),xl.forEach(t),zu=l(w),zt=r(w,"DIV",{class:!0});var Pl=n(zt);p(cr.$$.fragment,Pl),Cu=l(Pl),Ss=r(Pl,"P",{});var I1=n(Ss);Iu=i(I1,"Returns the model\u2019s output embeddings"),I1.forEach(t),Pl.forEach(t),Au=l(w),Ct=r(w,"DIV",{class:!0});var kl=n(Ct);p(mr.$$.fragment,kl),Lu=l(kl),Ws=r(kl,"P",{});var A1=n(Ws);Ou=i(A1,`Get the layer that handles a bias attribute in case the model has an LM head with weights tied to the
embeddings`),A1.forEach(t),kl.forEach(t),Uu=l(w),It=r(w,"DIV",{class:!0});var Ml=n(It);p(pr.$$.fragment,Ml),Nu=l(Ml),Hs=r(Ml,"P",{});var L1=n(Hs);Bu=i(L1,"Get the concatenated _prefix name of the bias from the model name to the parent layer"),L1.forEach(t),Ml.forEach(t),Xu=l(w),At=r(w,"DIV",{class:!0});var El=n(At);p(hr.$$.fragment,El),Vu=l(El),Gs=r(El,"P",{});var O1=n(Gs);Su=i(O1,`Loads a saved checkpoint (model weights and optimizer state) from a repo. Returns the current epoch count when
the checkpoint was made.`),O1.forEach(t),El.forEach(t),Wu=l(w),Lt=r(w,"DIV",{class:!0});var jl=n(Lt);p(fr.$$.fragment,jl),Hu=l(jl),Rs=r(jl,"P",{});var U1=n(Rs);Gu=i(U1,"Prunes heads of the base model."),U1.forEach(t),jl.forEach(t),Ru=l(w),ke=r(w,"DIV",{class:!0});var Wn=n(ke);p(ur.$$.fragment,Wn),Yu=l(Wn),gr=r(Wn,"P",{});var Fl=n(gr);Ju=i(Fl,"Resizes input token embeddings matrix of the model if "),Ys=r(Fl,"CODE",{});var N1=n(Ys);Ku=i(N1,"new_num_tokens != config.vocab_size"),N1.forEach(t),Qu=i(Fl,"."),Fl.forEach(t),Zu=l(Wn),_r=r(Wn,"P",{});var Dl=n(_r);eg=i(Dl,"Takes care of tying weights embeddings afterwards if the model class has a "),Js=r(Dl,"CODE",{});var B1=n(Js);tg=i(B1,"tie_weights()"),B1.forEach(t),og=i(Dl," method."),Dl.forEach(t),Wn.forEach(t),rg=l(w),Ot=r(w,"DIV",{class:!0});var ql=n(Ot);p(br.$$.fragment,ql),ng=l(ql),vr=r(ql,"P",{});var zl=n(vr);ag=i(zl,`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),Mn=r(zl,"A",{href:!0});var X1=n(Mn);sg=i(X1,"from_pretrained()"),X1.forEach(t),ig=i(zl," class method."),zl.forEach(t),ql.forEach(t),dg=l(w),Ut=r(w,"DIV",{class:!0});var Cl=n(Ut);p(yr.$$.fragment,Cl),lg=l(Cl),Ks=r(Cl,"P",{});var V1=n(Ks);cg=i(V1,"Method used for serving the model."),V1.forEach(t),Cl.forEach(t),mg=l(w),Nt=r(w,"DIV",{class:!0});var Il=n(Nt);p(wr.$$.fragment,Il),pg=l(Il),Qs=r(Il,"P",{});var S1=n(Qs);hg=i(S1,"Prepare the output of the saved model. Each model must implement this function."),S1.forEach(t),Il.forEach(t),fg=l(w),Bt=r(w,"DIV",{class:!0});var Al=n(Bt);p($r.$$.fragment,Al),ug=l(Al),Zs=r(Al,"P",{});var W1=n(Zs);gg=i(W1,"Set all the bias in the LM head."),W1.forEach(t),Al.forEach(t),_g=l(w),Xt=r(w,"DIV",{class:!0});var Ll=n(Xt);p(Tr.$$.fragment,Ll),bg=l(Ll),ei=r(Ll,"P",{});var H1=n(ei);vg=i(H1,"Set model\u2019s input embeddings"),H1.forEach(t),Ll.forEach(t),yg=l(w),Vt=r(w,"DIV",{class:!0});var Ol=n(Vt);p(xr.$$.fragment,Ol),wg=l(Ol),ti=r(Ol,"P",{});var G1=n(ti);$g=i(G1,"Set model\u2019s output embeddings"),G1.forEach(t),Ol.forEach(t),Tg=l(w),St=r(w,"DIV",{class:!0});var Ul=n(St);p(Pr.$$.fragment,Ul),xg=l(Ul),oi=r(Ul,"P",{});var R1=n(oi);Pg=i(R1,"A modification of Keras\u2019s default test_step that cleans up the printed metrics when we use a dummy loss."),R1.forEach(t),Ul.forEach(t),kg=l(w),re=r(w,"DIV",{class:!0});var to=n(re);p(kr.$$.fragment,to),Mg=l(to),G=r(to,"P",{});var Fe=n(G);Eg=i(Fe,"A modification of Keras\u2019s default "),ri=r(Fe,"CODE",{});var Y1=n(ri);jg=i(Y1,"train_step"),Y1.forEach(t),Fg=i(Fe,` that cleans up the printed metrics when we use a dummy loss. If
a user specifies a loss at model compile time, this function behaves as the original Keras `),ni=r(Fe,"CODE",{});var J1=n(ni);Dg=i(J1,"train_step"),J1.forEach(t),qg=i(Fe,`. In
this case, it expects the same `),ai=r(Fe,"CODE",{});var K1=n(ai);zg=i(K1,"data"),K1.forEach(t),Cg=i(Fe," as the original function (i.e. "),si=r(Fe,"CODE",{});var Q1=n(si);Ig=i(Q1,"(inputs, labels)"),Q1.forEach(t),Ag=i(Fe,")."),Fe.forEach(t),Lg=l(to),Ge=r(to,"P",{});var Hn=n(Ge);Og=i(Hn,`However, when the model is compiled without specifying the loss AND the expected label columns are passed as
part of the input dictionary, the loss is computed internally (inside the model class) and is used in the
backwards pass. In this case, `),ii=r(Hn,"CODE",{});var Z1=n(ii);Ug=i(Z1,"data"),Z1.forEach(t),Ng=i(Hn," is a singleton tuple containing "),di=r(Hn,"CODE",{});var ew=n(di);Bg=i(ew,"(inputs,)"),ew.forEach(t),Xg=i(Hn,"."),Hn.forEach(t),Vg=l(to),Re=r(to,"P",{});var Gn=n(Re);Sg=i(Gn,`This is possible under the aforementioned circumstances because our overriden compile function can set an
additional loss function that reduces a `),li=r(Gn,"CODE",{});var tw=n(li);Wg=i(tw,"loss"),tw.forEach(t),Hg=i(Gn," output, and the model will output a "),ci=r(Gn,"CODE",{});var ow=n(ci);Gg=i(ow,"loss"),ow.forEach(t),Rg=i(Gn,` component (notice the
name matching) containing the loss that was used to train the pre-trained model.`),Gn.forEach(t),to.forEach(t),w.forEach(t),Cd=l(a),Ye=r(a,"H2",{class:!0});var Nl=n(Ye);Wt=r(Nl,"A",{id:!0,class:!0,href:!0});var rw=n(Wt);mi=r(rw,"SPAN",{});var nw=n(mi);p(Mr.$$.fragment,nw),nw.forEach(t),rw.forEach(t),Yg=l(Nl),pi=r(Nl,"SPAN",{});var aw=n(pi);Jg=i(aw,"TFModelUtilsMixin"),aw.forEach(t),Nl.forEach(t),Id=l(a),ce=r(a,"DIV",{class:!0});var Rn=n(ce);p(Er.$$.fragment,Rn),Kg=l(Rn),jr=r(Rn,"P",{});var Bl=n(jr);Qg=i(Bl,"A few utilities for "),hi=r(Bl,"CODE",{});var sw=n(hi);Zg=i(sw,"tf.keras.Model"),sw.forEach(t),e_=i(Bl,", to be used as a mixin."),Bl.forEach(t),t_=l(Rn),Ht=r(Rn,"DIV",{class:!0});var Xl=n(Ht);p(Fr.$$.fragment,Xl),o_=l(Xl),fi=r(Xl,"P",{});var iw=n(fi);r_=i(iw,"Get the number of (optionally, trainable) parameters in the model."),iw.forEach(t),Xl.forEach(t),Rn.forEach(t),Ad=l(a),Je=r(a,"H2",{class:!0});var Vl=n(Je);Gt=r(Vl,"A",{id:!0,class:!0,href:!0});var dw=n(Gt);ui=r(dw,"SPAN",{});var lw=n(ui);p(Dr.$$.fragment,lw),lw.forEach(t),dw.forEach(t),n_=l(Vl),gi=r(Vl,"SPAN",{});var cw=n(gi);a_=i(cw,"FlaxPreTrainedModel"),cw.forEach(t),Vl.forEach(t),Ld=l(a),M=r(a,"DIV",{class:!0});var F=n(M);p(qr.$$.fragment,F),s_=l(F),_i=r(F,"P",{});var mw=n(_i);i_=i(mw,"Base class for all models."),mw.forEach(t),d_=l(F),En=r(F,"P",{});var vv=n(En);jn=r(vv,"A",{href:!0});var pw=n(jn);l_=i(pw,"FlaxPreTrainedModel"),pw.forEach(t),c_=i(vv,` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models.`),vv.forEach(t),m_=l(F),bi=r(F,"P",{});var hw=n(bi);p_=i(hw,"Class attributes (overridden by derived classes):"),hw.forEach(t),h_=l(F),Ke=r(F,"UL",{});var Yn=n(Ke);Me=r(Yn,"LI",{});var nn=n(Me);vi=r(nn,"STRONG",{});var fw=n(vi);f_=i(fw,"config_class"),fw.forEach(t),u_=i(nn," ("),Fn=r(nn,"A",{href:!0});var uw=n(Fn);g_=i(uw,"PretrainedConfig"),uw.forEach(t),__=i(nn,") \u2014 A subclass of "),Dn=r(nn,"A",{href:!0});var gw=n(Dn);b_=i(gw,"PretrainedConfig"),gw.forEach(t),v_=i(nn,` to use as configuration class
for this model architecture.`),nn.forEach(t),y_=l(Yn),Rt=r(Yn,"LI",{});var hd=n(Rt);yi=r(hd,"STRONG",{});var _w=n(yi);w_=i(_w,"base_model_prefix"),_w.forEach(t),$_=i(hd," ("),wi=r(hd,"CODE",{});var bw=n(wi);T_=i(bw,"str"),bw.forEach(t),x_=i(hd,`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),hd.forEach(t),P_=l(Yn),B=r(Yn,"LI",{});var ue=n(B);$i=r(ue,"STRONG",{});var vw=n($i);k_=i(vw,"main_input_name"),vw.forEach(t),M_=i(ue," ("),Ti=r(ue,"CODE",{});var yw=n(Ti);E_=i(yw,"str"),yw.forEach(t),j_=i(ue,") \u2014 The name of the principal input to the model (often "),xi=r(ue,"CODE",{});var ww=n(xi);F_=i(ww,"input_ids"),ww.forEach(t),D_=i(ue,` for NLP
models, `),Pi=r(ue,"CODE",{});var $w=n(Pi);q_=i($w,"pixel_values"),$w.forEach(t),z_=i(ue," for vision models and "),ki=r(ue,"CODE",{});var Tw=n(ki);C_=i(Tw,"input_values"),Tw.forEach(t),I_=i(ue," for speech models)."),ue.forEach(t),Yn.forEach(t),A_=l(F),ne=r(F,"DIV",{class:!0});var oo=n(ne);p(zr.$$.fragment,oo),L_=l(oo),Cr=r(oo,"P",{});var Sl=n(Cr);O_=i(Sl,`Upload the model checkpoint to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),Mi=r(Sl,"CODE",{});var xw=n(Mi);U_=i(xw,"repo_path_or_name"),xw.forEach(t),N_=i(Sl,"."),Sl.forEach(t),B_=l(oo),Ei=r(oo,"P",{});var Pw=n(Ei);X_=i(Pw,"Examples:"),Pw.forEach(t),V_=l(oo),p(Ir.$$.fragment,oo),oo.forEach(t),S_=l(F),O=r(F,"DIV",{class:!0});var de=n(O);p(Ar.$$.fragment,de),W_=l(de),ji=r(de,"P",{});var kw=n(ji);H_=i(kw,"Instantiate a pretrained flax model from a pre-trained model configuration."),kw.forEach(t),G_=l(de),Lr=r(de,"P",{});var Wl=n(Lr);R_=i(Wl,"The warning "),Fi=r(Wl,"EM",{});var Mw=n(Fi);Y_=i(Mw,"Weights from XXX not initialized from pretrained model"),Mw.forEach(t),J_=i(Wl,` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),Wl.forEach(t),K_=l(de),Or=r(de,"P",{});var Hl=n(Or);Q_=i(Hl,"The warning "),Di=r(Hl,"EM",{});var Ew=n(Di);Z_=i(Ew,"Weights from XXX not used in YYY"),Ew.forEach(t),eb=i(Hl,` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),Hl.forEach(t),tb=l(de),qi=r(de,"P",{});var jw=n(qi);ob=i(jw,"Examples:"),jw.forEach(t),rb=l(de),p(Ur.$$.fragment,de),de.forEach(t),nb=l(F),Ee=r(F,"DIV",{class:!0});var Jn=n(Ee);p(Nr.$$.fragment,Jn),ab=l(Jn),zi=r(Jn,"P",{});var Fw=n(zi);sb=i(Fw,`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`),Fw.forEach(t),ib=l(Jn),p(Yt.$$.fragment,Jn),Jn.forEach(t),db=l(F),Jt=r(F,"DIV",{class:!0});var Gl=n(Jt);p(Br.$$.fragment,Gl),lb=l(Gl),Xr=r(Gl,"P",{});var Rl=n(Xr);cb=i(Rl,`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),Ci=r(Rl,"CODE",{});var Dw=n(Ci);mb=i(Dw,"[from_pretrained()](/docs/transformers/pr_16543/en/main_classes/model#transformers.FlaxPreTrainedModel.from_pretrained)"),Dw.forEach(t),pb=i(Rl," class method"),Rl.forEach(t),Gl.forEach(t),hb=l(F),X=r(F,"DIV",{class:!0});var De=n(X);p(Vr.$$.fragment,De),fb=l(De),R=r(De,"P",{});var qe=n(R);ub=i(qe,"Cast the floating-point "),Ii=r(qe,"CODE",{});var qw=n(Ii);gb=i(qw,"params"),qw.forEach(t),_b=i(qe," to "),Ai=r(qe,"CODE",{});var zw=n(Ai);bb=i(zw,"jax.numpy.bfloat16"),zw.forEach(t),vb=i(qe,". This returns a new "),Li=r(qe,"CODE",{});var Cw=n(Li);yb=i(Cw,"params"),Cw.forEach(t),wb=i(qe,` tree and does not cast
the `),Oi=r(qe,"CODE",{});var Iw=n(Oi);$b=i(Iw,"params"),Iw.forEach(t),Tb=i(qe," in place."),qe.forEach(t),xb=l(De),Ui=r(De,"P",{});var Aw=n(Ui);Pb=i(Aw,`This method can be used on TPU to explicitly convert the model parameters to bfloat16 precision to do full
half-precision training or to save weights in bfloat16 for inference in order to save memory and improve speed.`),Aw.forEach(t),kb=l(De),Ni=r(De,"P",{});var Lw=n(Ni);Mb=i(Lw,"Examples:"),Lw.forEach(t),Eb=l(De),p(Sr.$$.fragment,De),De.forEach(t),jb=l(F),V=r(F,"DIV",{class:!0});var ze=n(V);p(Wr.$$.fragment,ze),Fb=l(ze),Y=r(ze,"P",{});var Ce=n(Y);Db=i(Ce,"Cast the floating-point "),Bi=r(Ce,"CODE",{});var Ow=n(Bi);qb=i(Ow,"parmas"),Ow.forEach(t),zb=i(Ce," to "),Xi=r(Ce,"CODE",{});var Uw=n(Xi);Cb=i(Uw,"jax.numpy.float16"),Uw.forEach(t),Ib=i(Ce,". This returns a new "),Vi=r(Ce,"CODE",{});var Nw=n(Vi);Ab=i(Nw,"params"),Nw.forEach(t),Lb=i(Ce,` tree and does not cast the
`),Si=r(Ce,"CODE",{});var Bw=n(Si);Ob=i(Bw,"params"),Bw.forEach(t),Ub=i(Ce," in place."),Ce.forEach(t),Nb=l(ze),Wi=r(ze,"P",{});var Xw=n(Wi);Bb=i(Xw,`This method can be used on GPU to explicitly convert the model parameters to float16 precision to do full
half-precision training or to save weights in float16 for inference in order to save memory and improve speed.`),Xw.forEach(t),Xb=l(ze),Hi=r(ze,"P",{});var Vw=n(Hi);Vb=i(Vw,"Examples:"),Vw.forEach(t),Sb=l(ze),p(Hr.$$.fragment,ze),ze.forEach(t),Wb=l(F),ae=r(F,"DIV",{class:!0});var ro=n(ae);p(Gr.$$.fragment,ro),Hb=l(ro),J=r(ro,"P",{});var Ie=n(J);Gb=i(Ie,"Cast the floating-point "),Gi=r(Ie,"CODE",{});var Sw=n(Gi);Rb=i(Sw,"parmas"),Sw.forEach(t),Yb=i(Ie," to "),Ri=r(Ie,"CODE",{});var Ww=n(Ri);Jb=i(Ww,"jax.numpy.float32"),Ww.forEach(t),Kb=i(Ie,`. This method can be used to explicitly convert the
model parameters to fp32 precision. This returns a new `),Yi=r(Ie,"CODE",{});var Hw=n(Yi);Qb=i(Hw,"params"),Hw.forEach(t),Zb=i(Ie," tree and does not cast the "),Ji=r(Ie,"CODE",{});var Gw=n(Ji);ev=i(Gw,"params"),Gw.forEach(t),tv=i(Ie," in place."),Ie.forEach(t),ov=l(ro),Ki=r(ro,"P",{});var Rw=n(Ki);rv=i(Rw,"Examples:"),Rw.forEach(t),nv=l(ro),p(Rr.$$.fragment,ro),ro.forEach(t),F.forEach(t),Od=l(a),Qe=r(a,"H2",{class:!0});var Yl=n(Qe);Kt=r(Yl,"A",{id:!0,class:!0,href:!0});var Yw=n(Kt);Qi=r(Yw,"SPAN",{});var Jw=n(Qi);p(Yr.$$.fragment,Jw),Jw.forEach(t),Yw.forEach(t),av=l(Yl),Zi=r(Yl,"SPAN",{});var Kw=n(Zi);sv=i(Kw,"Pushing to the Hub"),Kw.forEach(t),Yl.forEach(t),Ud=l(a),me=r(a,"DIV",{class:!0});var Kn=n(me);p(Jr.$$.fragment,Kn),iv=l(Kn),ed=r(Kn,"P",{});var Qw=n(ed);dv=i(Qw,"A Mixin containing the functionality to push a model or tokenizer to the hub."),Qw.forEach(t),lv=l(Kn),se=r(Kn,"DIV",{class:!0});var no=n(se);p(Kr.$$.fragment,no),cv=l(no),Qr=r(no,"P",{});var Jl=n(Qr);mv=i(Jl,`Upload the {object_files} to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),td=r(Jl,"CODE",{});var Zw=n(td);pv=i(Zw,"repo_path_or_name"),Zw.forEach(t),hv=i(Jl,"."),Jl.forEach(t),fv=l(no),od=r(no,"P",{});var e$=n(od);uv=i(e$,"Examples:"),e$.forEach(t),gv=l(no),p(Zr.$$.fragment,no),no.forEach(t),Kn.forEach(t),this.h()},h(){c($,"name","hf:doc:metadata"),c($,"content",JSON.stringify(p$)),c(k,"id","models"),c(k,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k,"href","#models"),c(x,"class","relative group"),c(an,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel"),c(sn,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.TFPreTrainedModel"),c(dn,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.FlaxPreTrainedModel"),c(ln,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel"),c(cn,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.TFPreTrainedModel"),c(mn,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.modeling_utils.ModuleUtilsMixin"),c(pn,"href","/docs/transformers/pr_16543/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin"),c(hn,"href","/docs/transformers/pr_16543/en/main_classes/text_generation#transformers.generation_tf_utils.TFGenerationMixin"),c(fn,"href","/docs/transformers/pr_16543/en/main_classes/text_generation#transformers.generation_flax_utils.FlaxGenerationMixin"),c(et,"id","transformers.PreTrainedModel"),c(et,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(et,"href","#transformers.PreTrainedModel"),c(Le,"class","relative group"),c(gn,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel"),c(_n,"href","/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig"),c(bn,"href","/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig"),c(vn,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel"),c(ee,"class","docstring"),c(D,"class","docstring"),c(dt,"class","docstring"),c(lt,"class","docstring"),c(be,"class","docstring"),c(ve,"class","docstring"),c(ct,"class","docstring"),c(mt,"class","docstring"),c(pt,"class","docstring"),c(ye,"class","docstring"),c(we,"class","docstring"),c(ft,"class","docstring"),c(ut,"class","docstring"),c($e,"class","docstring"),c(T,"class","docstring"),c(yn,"id","from_pretrained-torch-dtype"),c(gt,"id","model-instantiation-dtype"),c(gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gt,"href","#model-instantiation-dtype"),c(Ne,"class","relative group"),c(bt,"id","transformers.modeling_utils.ModuleUtilsMixin"),c(bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bt,"href","#transformers.modeling_utils.ModuleUtilsMixin"),c(Be,"class","relative group"),c(xe,"class","docstring"),c(vt,"class","docstring"),c(So,"href","https://arxiv.org/pdf/2001.08361.pdf"),c(So,"rel","nofollow"),c(yt,"class","docstring"),c(wt,"class","docstring"),c($t,"class","docstring"),c(Tt,"class","docstring"),c(xt,"class","docstring"),c($n,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.modeling_utils.ModuleUtilsMixin.add_memory_hooks"),c(Pt,"class","docstring"),c(E,"class","docstring"),c(kt,"id","transformers.TFPreTrainedModel"),c(kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kt,"href","#transformers.TFPreTrainedModel"),c(We,"class","relative group"),c(xn,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.TFPreTrainedModel"),c(Pn,"href","/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig"),c(kn,"href","/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig"),c(oe,"class","docstring"),c(Et,"class","docstring"),c(C,"class","docstring"),c(Ft,"class","docstring"),c(Dt,"class","docstring"),c(qt,"class","docstring"),c(zt,"class","docstring"),c(Ct,"class","docstring"),c(It,"class","docstring"),c(At,"class","docstring"),c(Lt,"class","docstring"),c(ke,"class","docstring"),c(Mn,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained"),c(Ot,"class","docstring"),c(Ut,"class","docstring"),c(Nt,"class","docstring"),c(Bt,"class","docstring"),c(Xt,"class","docstring"),c(Vt,"class","docstring"),c(St,"class","docstring"),c(re,"class","docstring"),c(b,"class","docstring"),c(Wt,"id","transformers.modeling_tf_utils.TFModelUtilsMixin"),c(Wt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wt,"href","#transformers.modeling_tf_utils.TFModelUtilsMixin"),c(Ye,"class","relative group"),c(Ht,"class","docstring"),c(ce,"class","docstring"),c(Gt,"id","transformers.FlaxPreTrainedModel"),c(Gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gt,"href","#transformers.FlaxPreTrainedModel"),c(Je,"class","relative group"),c(jn,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.FlaxPreTrainedModel"),c(Fn,"href","/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig"),c(Dn,"href","/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig"),c(ne,"class","docstring"),c(O,"class","docstring"),c(Ee,"class","docstring"),c(Jt,"class","docstring"),c(X,"class","docstring"),c(V,"class","docstring"),c(ae,"class","docstring"),c(M,"class","docstring"),c(Kt,"id","transformers.utils.PushToHubMixin"),c(Kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kt,"href","#transformers.utils.PushToHubMixin"),c(Qe,"class","relative group"),c(se,"class","docstring"),c(me,"class","docstring")},m(a,_){e(document.head,$),y(a,j,_),y(a,x,_),e(x,k),e(k,W),h(z,W,null),e(x,A),e(x,le),e(le,Kl),y(a,ud,_),y(a,Z,_),e(Z,Ql),e(Z,an),e(an,Zl),e(Z,ec),e(Z,sn),e(sn,tc),e(Z,oc),e(Z,dn),e(dn,rc),e(Z,nc),y(a,gd,_),y(a,Ae,_),e(Ae,ln),e(ln,ac),e(Ae,sc),e(Ae,cn),e(cn,ic),e(Ae,dc),y(a,_d,_),y(a,Ze,_),e(Ze,Qn),e(Qn,lc),e(Ze,cc),e(Ze,Zn),e(Zn,mc),y(a,bd,_),y(a,L,_),e(L,pc),e(L,mn),e(mn,hc),e(L,fc),e(L,ea),e(ea,uc),e(L,gc),e(L,pn),e(pn,_c),e(L,bc),e(L,hn),e(hn,vc),e(L,yc),e(L,fn),e(fn,wc),e(L,$c),y(a,vd,_),y(a,Le,_),e(Le,et),e(et,ta),h(so,ta,null),e(Le,Tc),e(Le,oa),e(oa,xc),y(a,yd,_),y(a,T,_),h(io,T,null),e(T,Pc),e(T,ra),e(ra,kc),e(T,Mc),e(T,un),e(un,gn),e(gn,Ec),e(un,jc),e(T,Fc),e(T,lo),e(lo,na),e(na,Dc),e(lo,qc),e(lo,aa),e(aa,zc),e(T,Cc),e(T,sa),e(sa,Ic),e(T,Ac),e(T,H),e(H,ia),e(ia,ge),e(ge,da),e(da,Lc),e(ge,Oc),e(ge,_n),e(_n,Uc),e(ge,Nc),e(ge,bn),e(bn,Bc),e(ge,Xc),e(H,Vc),e(H,co),e(co,_e),e(_e,la),e(la,Sc),e(_e,Wc),e(_e,ca),e(ca,Hc),e(_e,Gc),e(_e,ma),e(ma,Rc),e(_e,Yc),e(co,Jc),e(co,Oe),e(Oe,tt),e(tt,pa),e(pa,Kc),e(tt,Qc),e(tt,vn),e(vn,Zc),e(tt,em),e(Oe,tm),e(Oe,ot),e(ot,ha),e(ha,om),e(ot,rm),e(ot,fa),e(fa,nm),e(ot,am),e(Oe,sm),e(Oe,rt),e(rt,ua),e(ua,im),e(rt,dm),e(rt,ga),e(ga,lm),e(rt,cm),e(H,mm),e(H,_a),e(_a,nt),e(nt,ba),e(ba,pm),e(nt,hm),e(nt,va),e(va,fm),e(nt,um),e(H,gm),e(H,ya),e(ya,at),e(at,wa),e(wa,_m),e(at,bm),e(at,$a),e($a,vm),e(at,ym),e(H,wm),e(H,Ta),e(Ta,U),e(U,xa),e(xa,$m),e(U,Tm),e(U,Pa),e(Pa,xm),e(U,Pm),e(U,ka),e(ka,km),e(U,Mm),e(U,Ma),e(Ma,Em),e(U,jm),e(U,Ea),e(Ea,Fm),e(U,Dm),e(T,qm),e(T,ee),h(mo,ee,null),e(ee,zm),e(ee,po),e(po,Cm),e(po,ja),e(ja,Im),e(po,Am),e(ee,Lm),e(ee,Fa),e(Fa,Om),e(ee,Um),h(ho,ee,null),e(T,Nm),e(T,D),h(fo,D,null),e(D,Bm),e(D,Da),e(Da,Xm),e(D,Vm),e(D,Ue),e(Ue,Sm),e(Ue,qa),e(qa,Wm),e(Ue,Hm),e(Ue,za),e(za,Gm),e(Ue,Rm),e(D,Ym),e(D,uo),e(uo,Jm),e(uo,Ca),e(Ca,Km),e(uo,Qm),e(D,Zm),e(D,go),e(go,ep),e(go,Ia),e(Ia,tp),e(go,op),e(D,rp),h(st,D,null),e(D,np),h(it,D,null),e(D,ap),e(D,Aa),e(Aa,sp),e(D,ip),h(_o,D,null),e(T,dp),e(T,dt),h(bo,dt,null),e(dt,lp),e(dt,La),e(La,cp),e(T,mp),e(T,lt),h(vo,lt,null),e(lt,pp),e(lt,Oa),e(Oa,hp),e(T,fp),e(T,be),h(yo,be,null),e(be,up),e(be,Ua),e(Ua,gp),e(be,_p),e(be,Na),e(Na,bp),e(T,vp),e(T,ve),h(wo,ve,null),e(ve,yp),e(ve,Ba),e(Ba,wp),e(ve,$p),e(ve,Xa),e(Xa,Tp),e(T,xp),e(T,ct),h($o,ct,null),e(ct,Pp),e(ct,Va),e(Va,kp),e(T,Mp),e(T,mt),h(To,mt,null),e(mt,Ep),e(mt,Sa),e(Sa,jp),e(T,Fp),e(T,pt),h(xo,pt,null),e(pt,Dp),e(pt,Wa),e(Wa,qp),e(T,zp),e(T,ye),h(Po,ye,null),e(ye,Cp),e(ye,Ha),e(Ha,Ip),e(ye,Ap),h(ht,ye,null),e(T,Lp),e(T,we),h(ko,we,null),e(we,Op),e(we,Mo),e(Mo,Up),e(Mo,Ga),e(Ga,Np),e(Mo,Bp),e(we,Xp),e(we,Eo),e(Eo,Vp),e(Eo,Ra),e(Ra,Sp),e(Eo,Wp),e(T,Hp),e(T,ft),h(jo,ft,null),e(ft,Gp),e(ft,Fo),e(Fo,Rp),e(Fo,Ya),e(Ya,Yp),e(Fo,Jp),e(T,Kp),e(T,ut),h(Do,ut,null),e(ut,Qp),e(ut,Ja),e(Ja,Zp),e(T,eh),e(T,$e),h(qo,$e,null),e($e,th),e($e,Ka),e(Ka,oh),e($e,rh),e($e,zo),e(zo,nh),e(zo,Qa),e(Qa,ah),e(zo,sh),y(a,wd,_),y(a,yn,_),y(a,$d,_),y(a,Ne,_),e(Ne,gt),e(gt,Za),h(Co,Za,null),e(Ne,ih),e(Ne,es),e(es,dh),y(a,Td,_),y(a,te,_),e(te,lh),e(te,ts),e(ts,ch),e(te,mh),e(te,os),e(os,ph),e(te,hh),e(te,rs),e(rs,fh),e(te,uh),y(a,xd,_),h(Io,a,_),y(a,Pd,_),y(a,Te,_),e(Te,gh),e(Te,ns),e(ns,_h),e(Te,bh),e(Te,as),e(as,vh),e(Te,yh),y(a,kd,_),h(Ao,a,_),y(a,Md,_),y(a,_t,_),e(_t,wh),e(_t,ss),e(ss,$h),e(_t,Th),y(a,Ed,_),h(Lo,a,_),y(a,jd,_),y(a,wn,_),e(wn,xh),y(a,Fd,_),y(a,Be,_),e(Be,bt),e(bt,is),h(Oo,is,null),e(Be,Ph),e(Be,ds),e(ds,kh),y(a,Dd,_),y(a,E,_),h(Uo,E,null),e(E,Mh),e(E,No),e(No,Eh),e(No,ls),e(ls,jh),e(No,Fh),e(E,Dh),e(E,xe),h(Bo,xe,null),e(xe,qh),e(xe,cs),e(cs,zh),e(xe,Ch),e(xe,Xe),e(Xe,Ih),e(Xe,ms),e(ms,Ah),e(Xe,Lh),e(Xe,ps),e(ps,Oh),e(Xe,Uh),e(E,Nh),e(E,vt),h(Xo,vt,null),e(vt,Bh),e(vt,hs),e(hs,Xh),e(E,Vh),e(E,yt),h(Vo,yt,null),e(yt,Sh),e(yt,Ve),e(Ve,Wh),e(Ve,fs),e(fs,Hh),e(Ve,Gh),e(Ve,So),e(So,Rh),e(Ve,Yh),e(E,Jh),e(E,wt),h(Wo,wt,null),e(wt,Kh),e(wt,us),e(us,Qh),e(E,Zh),e(E,$t),h(Ho,$t,null),e($t,ef),e($t,gs),e(gs,tf),e(E,of),e(E,Tt),h(Go,Tt,null),e(Tt,rf),e(Tt,_s),e(_s,nf),e(E,af),e(E,xt),h(Ro,xt,null),e(xt,sf),e(xt,bs),e(bs,df),e(E,lf),e(E,Pt),h(Yo,Pt,null),e(Pt,cf),e(Pt,Se),e(Se,mf),e(Se,vs),e(vs,pf),e(Se,hf),e(Se,$n),e($n,ff),e(Se,uf),y(a,qd,_),y(a,We,_),e(We,kt),e(kt,ys),h(Jo,ys,null),e(We,gf),e(We,ws),e(ws,_f),y(a,zd,_),y(a,b,_),h(Ko,b,null),e(b,bf),e(b,$s),e($s,vf),e(b,yf),e(b,Tn),e(Tn,xn),e(xn,wf),e(Tn,$f),e(b,Tf),e(b,Qo),e(Qo,Ts),e(Ts,xf),e(Qo,Pf),e(Qo,xs),e(xs,kf),e(b,Mf),e(b,Ps),e(Ps,Ef),e(b,jf),e(b,He),e(He,Pe),e(Pe,ks),e(ks,Ff),e(Pe,Df),e(Pe,Pn),e(Pn,qf),e(Pe,zf),e(Pe,kn),e(kn,Cf),e(Pe,If),e(He,Af),e(He,Mt),e(Mt,Ms),e(Ms,Lf),e(Mt,Of),e(Mt,Es),e(Es,Uf),e(Mt,Nf),e(He,Bf),e(He,N),e(N,js),e(js,Xf),e(N,Vf),e(N,Fs),e(Fs,Sf),e(N,Wf),e(N,Ds),e(Ds,Hf),e(N,Gf),e(N,qs),e(qs,Rf),e(N,Yf),e(N,zs),e(zs,Jf),e(N,Kf),e(b,Qf),e(b,oe),h(Zo,oe,null),e(oe,Zf),e(oe,er),e(er,eu),e(er,Cs),e(Cs,tu),e(er,ou),e(oe,ru),e(oe,Is),e(Is,nu),e(oe,au),h(tr,oe,null),e(b,su),e(b,Et),h(or,Et,null),e(Et,iu),e(Et,As),e(As,du),e(b,lu),e(b,C),h(rr,C,null),e(C,cu),e(C,Ls),e(Ls,mu),e(C,pu),e(C,nr),e(nr,hu),e(nr,Os),e(Os,fu),e(nr,uu),e(C,gu),e(C,ar),e(ar,_u),e(ar,Us),e(Us,bu),e(ar,vu),e(C,yu),h(jt,C,null),e(C,wu),e(C,Ns),e(Ns,$u),e(C,Tu),h(sr,C,null),e(b,xu),e(b,Ft),h(ir,Ft,null),e(Ft,Pu),e(Ft,Bs),e(Bs,ku),e(b,Mu),e(b,Dt),h(dr,Dt,null),e(Dt,Eu),e(Dt,Xs),e(Xs,ju),e(b,Fu),e(b,qt),h(lr,qt,null),e(qt,Du),e(qt,Vs),e(Vs,qu),e(b,zu),e(b,zt),h(cr,zt,null),e(zt,Cu),e(zt,Ss),e(Ss,Iu),e(b,Au),e(b,Ct),h(mr,Ct,null),e(Ct,Lu),e(Ct,Ws),e(Ws,Ou),e(b,Uu),e(b,It),h(pr,It,null),e(It,Nu),e(It,Hs),e(Hs,Bu),e(b,Xu),e(b,At),h(hr,At,null),e(At,Vu),e(At,Gs),e(Gs,Su),e(b,Wu),e(b,Lt),h(fr,Lt,null),e(Lt,Hu),e(Lt,Rs),e(Rs,Gu),e(b,Ru),e(b,ke),h(ur,ke,null),e(ke,Yu),e(ke,gr),e(gr,Ju),e(gr,Ys),e(Ys,Ku),e(gr,Qu),e(ke,Zu),e(ke,_r),e(_r,eg),e(_r,Js),e(Js,tg),e(_r,og),e(b,rg),e(b,Ot),h(br,Ot,null),e(Ot,ng),e(Ot,vr),e(vr,ag),e(vr,Mn),e(Mn,sg),e(vr,ig),e(b,dg),e(b,Ut),h(yr,Ut,null),e(Ut,lg),e(Ut,Ks),e(Ks,cg),e(b,mg),e(b,Nt),h(wr,Nt,null),e(Nt,pg),e(Nt,Qs),e(Qs,hg),e(b,fg),e(b,Bt),h($r,Bt,null),e(Bt,ug),e(Bt,Zs),e(Zs,gg),e(b,_g),e(b,Xt),h(Tr,Xt,null),e(Xt,bg),e(Xt,ei),e(ei,vg),e(b,yg),e(b,Vt),h(xr,Vt,null),e(Vt,wg),e(Vt,ti),e(ti,$g),e(b,Tg),e(b,St),h(Pr,St,null),e(St,xg),e(St,oi),e(oi,Pg),e(b,kg),e(b,re),h(kr,re,null),e(re,Mg),e(re,G),e(G,Eg),e(G,ri),e(ri,jg),e(G,Fg),e(G,ni),e(ni,Dg),e(G,qg),e(G,ai),e(ai,zg),e(G,Cg),e(G,si),e(si,Ig),e(G,Ag),e(re,Lg),e(re,Ge),e(Ge,Og),e(Ge,ii),e(ii,Ug),e(Ge,Ng),e(Ge,di),e(di,Bg),e(Ge,Xg),e(re,Vg),e(re,Re),e(Re,Sg),e(Re,li),e(li,Wg),e(Re,Hg),e(Re,ci),e(ci,Gg),e(Re,Rg),y(a,Cd,_),y(a,Ye,_),e(Ye,Wt),e(Wt,mi),h(Mr,mi,null),e(Ye,Yg),e(Ye,pi),e(pi,Jg),y(a,Id,_),y(a,ce,_),h(Er,ce,null),e(ce,Kg),e(ce,jr),e(jr,Qg),e(jr,hi),e(hi,Zg),e(jr,e_),e(ce,t_),e(ce,Ht),h(Fr,Ht,null),e(Ht,o_),e(Ht,fi),e(fi,r_),y(a,Ad,_),y(a,Je,_),e(Je,Gt),e(Gt,ui),h(Dr,ui,null),e(Je,n_),e(Je,gi),e(gi,a_),y(a,Ld,_),y(a,M,_),h(qr,M,null),e(M,s_),e(M,_i),e(_i,i_),e(M,d_),e(M,En),e(En,jn),e(jn,l_),e(En,c_),e(M,m_),e(M,bi),e(bi,p_),e(M,h_),e(M,Ke),e(Ke,Me),e(Me,vi),e(vi,f_),e(Me,u_),e(Me,Fn),e(Fn,g_),e(Me,__),e(Me,Dn),e(Dn,b_),e(Me,v_),e(Ke,y_),e(Ke,Rt),e(Rt,yi),e(yi,w_),e(Rt,$_),e(Rt,wi),e(wi,T_),e(Rt,x_),e(Ke,P_),e(Ke,B),e(B,$i),e($i,k_),e(B,M_),e(B,Ti),e(Ti,E_),e(B,j_),e(B,xi),e(xi,F_),e(B,D_),e(B,Pi),e(Pi,q_),e(B,z_),e(B,ki),e(ki,C_),e(B,I_),e(M,A_),e(M,ne),h(zr,ne,null),e(ne,L_),e(ne,Cr),e(Cr,O_),e(Cr,Mi),e(Mi,U_),e(Cr,N_),e(ne,B_),e(ne,Ei),e(Ei,X_),e(ne,V_),h(Ir,ne,null),e(M,S_),e(M,O),h(Ar,O,null),e(O,W_),e(O,ji),e(ji,H_),e(O,G_),e(O,Lr),e(Lr,R_),e(Lr,Fi),e(Fi,Y_),e(Lr,J_),e(O,K_),e(O,Or),e(Or,Q_),e(Or,Di),e(Di,Z_),e(Or,eb),e(O,tb),e(O,qi),e(qi,ob),e(O,rb),h(Ur,O,null),e(M,nb),e(M,Ee),h(Nr,Ee,null),e(Ee,ab),e(Ee,zi),e(zi,sb),e(Ee,ib),h(Yt,Ee,null),e(M,db),e(M,Jt),h(Br,Jt,null),e(Jt,lb),e(Jt,Xr),e(Xr,cb),e(Xr,Ci),e(Ci,mb),e(Xr,pb),e(M,hb),e(M,X),h(Vr,X,null),e(X,fb),e(X,R),e(R,ub),e(R,Ii),e(Ii,gb),e(R,_b),e(R,Ai),e(Ai,bb),e(R,vb),e(R,Li),e(Li,yb),e(R,wb),e(R,Oi),e(Oi,$b),e(R,Tb),e(X,xb),e(X,Ui),e(Ui,Pb),e(X,kb),e(X,Ni),e(Ni,Mb),e(X,Eb),h(Sr,X,null),e(M,jb),e(M,V),h(Wr,V,null),e(V,Fb),e(V,Y),e(Y,Db),e(Y,Bi),e(Bi,qb),e(Y,zb),e(Y,Xi),e(Xi,Cb),e(Y,Ib),e(Y,Vi),e(Vi,Ab),e(Y,Lb),e(Y,Si),e(Si,Ob),e(Y,Ub),e(V,Nb),e(V,Wi),e(Wi,Bb),e(V,Xb),e(V,Hi),e(Hi,Vb),e(V,Sb),h(Hr,V,null),e(M,Wb),e(M,ae),h(Gr,ae,null),e(ae,Hb),e(ae,J),e(J,Gb),e(J,Gi),e(Gi,Rb),e(J,Yb),e(J,Ri),e(Ri,Jb),e(J,Kb),e(J,Yi),e(Yi,Qb),e(J,Zb),e(J,Ji),e(Ji,ev),e(J,tv),e(ae,ov),e(ae,Ki),e(Ki,rv),e(ae,nv),h(Rr,ae,null),y(a,Od,_),y(a,Qe,_),e(Qe,Kt),e(Kt,Qi),h(Yr,Qi,null),e(Qe,av),e(Qe,Zi),e(Zi,sv),y(a,Ud,_),y(a,me,_),h(Jr,me,null),e(me,iv),e(me,ed),e(ed,dv),e(me,lv),e(me,se),h(Kr,se,null),e(se,cv),e(se,Qr),e(Qr,mv),e(Qr,td),e(td,pv),e(Qr,hv),e(se,fv),e(se,od),e(od,uv),e(se,gv),h(Zr,se,null),Nd=!0},p(a,[_]){const en={};_&2&&(en.$$scope={dirty:_,ctx:a}),st.$set(en);const rd={};_&2&&(rd.$$scope={dirty:_,ctx:a}),it.$set(rd);const nd={};_&2&&(nd.$$scope={dirty:_,ctx:a}),ht.$set(nd);const ad={};_&2&&(ad.$$scope={dirty:_,ctx:a}),jt.$set(ad);const pe={};_&2&&(pe.$$scope={dirty:_,ctx:a}),Yt.$set(pe)},i(a){Nd||(f(z.$$.fragment,a),f(so.$$.fragment,a),f(io.$$.fragment,a),f(mo.$$.fragment,a),f(ho.$$.fragment,a),f(fo.$$.fragment,a),f(st.$$.fragment,a),f(it.$$.fragment,a),f(_o.$$.fragment,a),f(bo.$$.fragment,a),f(vo.$$.fragment,a),f(yo.$$.fragment,a),f(wo.$$.fragment,a),f($o.$$.fragment,a),f(To.$$.fragment,a),f(xo.$$.fragment,a),f(Po.$$.fragment,a),f(ht.$$.fragment,a),f(ko.$$.fragment,a),f(jo.$$.fragment,a),f(Do.$$.fragment,a),f(qo.$$.fragment,a),f(Co.$$.fragment,a),f(Io.$$.fragment,a),f(Ao.$$.fragment,a),f(Lo.$$.fragment,a),f(Oo.$$.fragment,a),f(Uo.$$.fragment,a),f(Bo.$$.fragment,a),f(Xo.$$.fragment,a),f(Vo.$$.fragment,a),f(Wo.$$.fragment,a),f(Ho.$$.fragment,a),f(Go.$$.fragment,a),f(Ro.$$.fragment,a),f(Yo.$$.fragment,a),f(Jo.$$.fragment,a),f(Ko.$$.fragment,a),f(Zo.$$.fragment,a),f(tr.$$.fragment,a),f(or.$$.fragment,a),f(rr.$$.fragment,a),f(jt.$$.fragment,a),f(sr.$$.fragment,a),f(ir.$$.fragment,a),f(dr.$$.fragment,a),f(lr.$$.fragment,a),f(cr.$$.fragment,a),f(mr.$$.fragment,a),f(pr.$$.fragment,a),f(hr.$$.fragment,a),f(fr.$$.fragment,a),f(ur.$$.fragment,a),f(br.$$.fragment,a),f(yr.$$.fragment,a),f(wr.$$.fragment,a),f($r.$$.fragment,a),f(Tr.$$.fragment,a),f(xr.$$.fragment,a),f(Pr.$$.fragment,a),f(kr.$$.fragment,a),f(Mr.$$.fragment,a),f(Er.$$.fragment,a),f(Fr.$$.fragment,a),f(Dr.$$.fragment,a),f(qr.$$.fragment,a),f(zr.$$.fragment,a),f(Ir.$$.fragment,a),f(Ar.$$.fragment,a),f(Ur.$$.fragment,a),f(Nr.$$.fragment,a),f(Yt.$$.fragment,a),f(Br.$$.fragment,a),f(Vr.$$.fragment,a),f(Sr.$$.fragment,a),f(Wr.$$.fragment,a),f(Hr.$$.fragment,a),f(Gr.$$.fragment,a),f(Rr.$$.fragment,a),f(Yr.$$.fragment,a),f(Jr.$$.fragment,a),f(Kr.$$.fragment,a),f(Zr.$$.fragment,a),Nd=!0)},o(a){u(z.$$.fragment,a),u(so.$$.fragment,a),u(io.$$.fragment,a),u(mo.$$.fragment,a),u(ho.$$.fragment,a),u(fo.$$.fragment,a),u(st.$$.fragment,a),u(it.$$.fragment,a),u(_o.$$.fragment,a),u(bo.$$.fragment,a),u(vo.$$.fragment,a),u(yo.$$.fragment,a),u(wo.$$.fragment,a),u($o.$$.fragment,a),u(To.$$.fragment,a),u(xo.$$.fragment,a),u(Po.$$.fragment,a),u(ht.$$.fragment,a),u(ko.$$.fragment,a),u(jo.$$.fragment,a),u(Do.$$.fragment,a),u(qo.$$.fragment,a),u(Co.$$.fragment,a),u(Io.$$.fragment,a),u(Ao.$$.fragment,a),u(Lo.$$.fragment,a),u(Oo.$$.fragment,a),u(Uo.$$.fragment,a),u(Bo.$$.fragment,a),u(Xo.$$.fragment,a),u(Vo.$$.fragment,a),u(Wo.$$.fragment,a),u(Ho.$$.fragment,a),u(Go.$$.fragment,a),u(Ro.$$.fragment,a),u(Yo.$$.fragment,a),u(Jo.$$.fragment,a),u(Ko.$$.fragment,a),u(Zo.$$.fragment,a),u(tr.$$.fragment,a),u(or.$$.fragment,a),u(rr.$$.fragment,a),u(jt.$$.fragment,a),u(sr.$$.fragment,a),u(ir.$$.fragment,a),u(dr.$$.fragment,a),u(lr.$$.fragment,a),u(cr.$$.fragment,a),u(mr.$$.fragment,a),u(pr.$$.fragment,a),u(hr.$$.fragment,a),u(fr.$$.fragment,a),u(ur.$$.fragment,a),u(br.$$.fragment,a),u(yr.$$.fragment,a),u(wr.$$.fragment,a),u($r.$$.fragment,a),u(Tr.$$.fragment,a),u(xr.$$.fragment,a),u(Pr.$$.fragment,a),u(kr.$$.fragment,a),u(Mr.$$.fragment,a),u(Er.$$.fragment,a),u(Fr.$$.fragment,a),u(Dr.$$.fragment,a),u(qr.$$.fragment,a),u(zr.$$.fragment,a),u(Ir.$$.fragment,a),u(Ar.$$.fragment,a),u(Ur.$$.fragment,a),u(Nr.$$.fragment,a),u(Yt.$$.fragment,a),u(Br.$$.fragment,a),u(Vr.$$.fragment,a),u(Sr.$$.fragment,a),u(Wr.$$.fragment,a),u(Hr.$$.fragment,a),u(Gr.$$.fragment,a),u(Rr.$$.fragment,a),u(Yr.$$.fragment,a),u(Jr.$$.fragment,a),u(Kr.$$.fragment,a),u(Zr.$$.fragment,a),Nd=!1},d(a){t($),a&&t(j),a&&t(x),g(z),a&&t(ud),a&&t(Z),a&&t(gd),a&&t(Ae),a&&t(_d),a&&t(Ze),a&&t(bd),a&&t(L),a&&t(vd),a&&t(Le),g(so),a&&t(yd),a&&t(T),g(io),g(mo),g(ho),g(fo),g(st),g(it),g(_o),g(bo),g(vo),g(yo),g(wo),g($o),g(To),g(xo),g(Po),g(ht),g(ko),g(jo),g(Do),g(qo),a&&t(wd),a&&t(yn),a&&t($d),a&&t(Ne),g(Co),a&&t(Td),a&&t(te),a&&t(xd),g(Io,a),a&&t(Pd),a&&t(Te),a&&t(kd),g(Ao,a),a&&t(Md),a&&t(_t),a&&t(Ed),g(Lo,a),a&&t(jd),a&&t(wn),a&&t(Fd),a&&t(Be),g(Oo),a&&t(Dd),a&&t(E),g(Uo),g(Bo),g(Xo),g(Vo),g(Wo),g(Ho),g(Go),g(Ro),g(Yo),a&&t(qd),a&&t(We),g(Jo),a&&t(zd),a&&t(b),g(Ko),g(Zo),g(tr),g(or),g(rr),g(jt),g(sr),g(ir),g(dr),g(lr),g(cr),g(mr),g(pr),g(hr),g(fr),g(ur),g(br),g(yr),g(wr),g($r),g(Tr),g(xr),g(Pr),g(kr),a&&t(Cd),a&&t(Ye),g(Mr),a&&t(Id),a&&t(ce),g(Er),g(Fr),a&&t(Ad),a&&t(Je),g(Dr),a&&t(Ld),a&&t(M),g(qr),g(zr),g(Ir),g(Ar),g(Ur),g(Nr),g(Yt),g(Br),g(Vr),g(Sr),g(Wr),g(Hr),g(Gr),g(Rr),a&&t(Od),a&&t(Qe),g(Yr),a&&t(Ud),a&&t(me),g(Jr),g(Kr),g(Zr)}}}const p$={local:"models",sections:[{local:"transformers.PreTrainedModel",sections:[{local:"model-instantiation-dtype",title:"Model Instantiation dtype"}],title:"PreTrainedModel"},{local:"transformers.modeling_utils.ModuleUtilsMixin",title:"ModuleUtilsMixin"},{local:"transformers.TFPreTrainedModel",title:"TFPreTrainedModel"},{local:"transformers.modeling_tf_utils.TFModelUtilsMixin",title:"TFModelUtilsMixin"},{local:"transformers.FlaxPreTrainedModel",title:"FlaxPreTrainedModel"},{local:"transformers.utils.PushToHubMixin",title:"Pushing to the Hub"}],title:"Models"};function h$(Q){return a$(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class v$ extends t${constructor($){super();o$(this,$,h$,m$,r$,{})}}export{v$ as default,p$ as metadata};
