import{S as bEt,i as FEt,s as vEt,e as a,k as l,w as f,t as o,M as TEt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as MEt}from"../../chunks/vendor-6b77c823.js";import{T as ZRr}from"../../chunks/Tip-39098574.js";import{D as E}from"../../chunks/Docstring-abef54e3.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function EEt(If){let Z,io,ce,Ce,lo,ge,Me,Xo,Ii,qf,fa,qi,Ni,uC,Nf,xe,co,ji,Gn,bC,On,Vn,FC,Di,Xn,vC,Gi,jf,Da;return{c(){Z=a("p"),io=o("If your "),ce=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),ge=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),Ii=a("code"),qf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),qi=a("code"),Ni=o('"new-model"'),uC=o(")."),Nf=l(),xe=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),bC=o(" is a subclass of "),On=a("a"),Vn=o("PreTrainedModel"),FC=o(`, make sure its
`),Di=a("code"),Xn=o("config_class"),vC=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jf=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var _e=s(Z);io=r(_e,"If your "),ce=n(_e,"CODE",{});var d9=s(ce);Ce=r(d9,"NewModelConfig"),d9.forEach(t),lo=r(_e," is a subclass of "),ge=n(_e,"CODE",{});var Oi=s(ge);Me=r(Oi,"PretrainedConfig"),Oi.forEach(t),Xo=r(_e,`, make sure its
`),Ii=n(_e,"CODE",{});var c9=s(Ii);qf=r(c9,"model_type"),c9.forEach(t),fa=r(_e," attribute is set to the same key you use when registering the config (here "),qi=n(_e,"CODE",{});var f9=s(qi);Ni=r(f9,'"new-model"'),f9.forEach(t),uC=r(_e,")."),_e.forEach(t),Nf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),bC=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var m9=s(On);Vn=r(m9,"PreTrainedModel"),m9.forEach(t),FC=r(zo,`, make sure its
`),Di=n(zo,"CODE",{});var Df=s(Di);Xn=r(Df,"config_class"),Df.forEach(t),vC=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var g9=s(Gi);jf=r(g9,"NewModelConfig"),g9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,Z,_e),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo),e(Z,ge),e(ge,Me),e(Z,Xo),e(Z,Ii),e(Ii,qf),e(Z,fa),e(Z,qi),e(qi,Ni),e(Z,uC),b(fo,Nf,_e),b(fo,xe,_e),e(xe,co),e(xe,ji),e(ji,Gn),e(xe,bC),e(xe,On),e(On,Vn),e(xe,FC),e(xe,Di),e(Di,Xn),e(xe,vC),e(xe,Gi),e(Gi,jf),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(Nf),fo&&t(xe)}}}function CEt(If){let Z,io,ce,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(ge){Z=n(ge,"P",{});var Me=s(Z);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(ge,Me){b(ge,Z,Me),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo)},d(ge){ge&&t(Z)}}}function wEt(If){let Z,io,ce,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(ge){Z=n(ge,"P",{});var Me=s(Z);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(ge,Me){b(ge,Z,Me),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo)},d(ge){ge&&t(Z)}}}function AEt(If){let Z,io,ce,Ce,lo,ge,Me,Xo,Ii,qf,fa,qi,Ni,uC,Nf,xe,co,ji,Gn,bC,On,Vn,FC,Di,Xn,vC,Gi,jf,Da,fo,_e,d9,Oi,c9,f9,zo,Ga,m9,Df,g9,aIe,zSe,Vi,Gf,VJ,TC,nIe,XJ,sIe,QSe,zn,lIe,zJ,iIe,dIe,QJ,cIe,fIe,WSe,MC,HSe,h9,mIe,USe,Of,JSe,Xi,Vf,WJ,EC,gIe,HJ,hIe,YSe,Qo,CC,pIe,wC,_Ie,p9,uIe,bIe,FIe,AC,vIe,UJ,TIe,MIe,EIe,mo,yC,CIe,JJ,wIe,AIe,zi,yIe,YJ,LIe,xIe,KJ,kIe,SIe,RIe,F,Xf,ZJ,BIe,PIe,_9,$Ie,IIe,qIe,zf,eY,NIe,jIe,u9,DIe,GIe,OIe,Qf,oY,VIe,XIe,b9,zIe,QIe,WIe,Wf,rY,HIe,UIe,F9,JIe,YIe,KIe,Hf,tY,ZIe,eqe,v9,oqe,rqe,tqe,Uf,aY,aqe,nqe,T9,sqe,lqe,iqe,Jf,nY,dqe,cqe,M9,fqe,mqe,gqe,Yf,sY,hqe,pqe,E9,_qe,uqe,bqe,Kf,lY,Fqe,vqe,C9,Tqe,Mqe,Eqe,Zf,iY,Cqe,wqe,w9,Aqe,yqe,Lqe,em,dY,xqe,kqe,A9,Sqe,Rqe,Bqe,om,cY,Pqe,$qe,y9,Iqe,qqe,Nqe,rm,fY,jqe,Dqe,L9,Gqe,Oqe,Vqe,tm,mY,Xqe,zqe,x9,Qqe,Wqe,Hqe,am,gY,Uqe,Jqe,k9,Yqe,Kqe,Zqe,nm,hY,eNe,oNe,S9,rNe,tNe,aNe,sm,pY,nNe,sNe,R9,lNe,iNe,dNe,lm,_Y,cNe,fNe,B9,mNe,gNe,hNe,im,uY,pNe,_Ne,P9,uNe,bNe,FNe,dm,bY,vNe,TNe,$9,MNe,ENe,CNe,cm,FY,wNe,ANe,I9,yNe,LNe,xNe,fm,vY,kNe,SNe,q9,RNe,BNe,PNe,mm,TY,$Ne,INe,N9,qNe,NNe,jNe,gm,MY,DNe,GNe,j9,ONe,VNe,XNe,hm,EY,zNe,QNe,D9,WNe,HNe,UNe,pm,CY,JNe,YNe,G9,KNe,ZNe,eje,_m,wY,oje,rje,O9,tje,aje,nje,um,AY,sje,lje,V9,ije,dje,cje,bm,yY,fje,mje,X9,gje,hje,pje,Fm,LY,_je,uje,z9,bje,Fje,vje,vm,xY,Tje,Mje,Q9,Eje,Cje,wje,Tm,kY,Aje,yje,W9,Lje,xje,kje,Mm,SY,Sje,Rje,H9,Bje,Pje,$je,Em,RY,Ije,qje,U9,Nje,jje,Dje,Cm,BY,Gje,Oje,J9,Vje,Xje,zje,wm,PY,Qje,Wje,Y9,Hje,Uje,Jje,Am,$Y,Yje,Kje,K9,Zje,eDe,oDe,ym,IY,rDe,tDe,Z9,aDe,nDe,sDe,Lm,qY,lDe,iDe,ex,dDe,cDe,fDe,xm,NY,mDe,gDe,ox,hDe,pDe,_De,km,jY,uDe,bDe,rx,FDe,vDe,TDe,Sm,DY,MDe,EDe,tx,CDe,wDe,ADe,Rm,GY,yDe,LDe,ax,xDe,kDe,SDe,Bm,OY,RDe,BDe,nx,PDe,$De,IDe,Pm,VY,qDe,NDe,sx,jDe,DDe,GDe,$m,XY,ODe,VDe,lx,XDe,zDe,QDe,Im,zY,WDe,HDe,ix,UDe,JDe,YDe,qm,QY,KDe,ZDe,dx,eGe,oGe,rGe,Nm,WY,tGe,aGe,cx,nGe,sGe,lGe,jm,HY,iGe,dGe,fx,cGe,fGe,mGe,Dm,UY,gGe,hGe,mx,pGe,_Ge,uGe,Gm,JY,bGe,FGe,gx,vGe,TGe,MGe,Om,YY,EGe,CGe,hx,wGe,AGe,yGe,Vm,KY,LGe,xGe,px,kGe,SGe,RGe,Xm,ZY,BGe,PGe,_x,$Ge,IGe,qGe,zm,eK,NGe,jGe,ux,DGe,GGe,OGe,Qm,oK,VGe,XGe,bx,zGe,QGe,WGe,Wm,rK,HGe,UGe,Fx,JGe,YGe,KGe,Hm,tK,ZGe,eOe,vx,oOe,rOe,tOe,Um,aK,aOe,nOe,Tx,sOe,lOe,iOe,Jm,nK,dOe,cOe,Mx,fOe,mOe,gOe,Ym,sK,hOe,pOe,Ex,_Oe,uOe,bOe,Km,lK,FOe,vOe,Cx,TOe,MOe,EOe,Zm,iK,COe,wOe,wx,AOe,yOe,LOe,eg,dK,xOe,kOe,Ax,SOe,ROe,BOe,og,cK,POe,$Oe,yx,IOe,qOe,NOe,rg,fK,jOe,DOe,Lx,GOe,OOe,VOe,tg,mK,XOe,zOe,xx,QOe,WOe,HOe,ag,gK,UOe,JOe,kx,YOe,KOe,ZOe,ng,hK,eVe,oVe,Sx,rVe,tVe,aVe,sg,pK,nVe,sVe,Rx,lVe,iVe,dVe,lg,_K,cVe,fVe,Bx,mVe,gVe,hVe,ig,uK,pVe,_Ve,Px,uVe,bVe,FVe,dg,bK,vVe,TVe,$x,MVe,EVe,CVe,cg,FK,wVe,AVe,Ix,yVe,LVe,xVe,fg,vK,kVe,SVe,qx,RVe,BVe,PVe,mg,TK,$Ve,IVe,Nx,qVe,NVe,jVe,gg,MK,DVe,GVe,jx,OVe,VVe,XVe,hg,EK,zVe,QVe,Dx,WVe,HVe,UVe,pg,CK,JVe,YVe,Gx,KVe,ZVe,eXe,_g,wK,oXe,rXe,Ox,tXe,aXe,nXe,ug,AK,sXe,lXe,Vx,iXe,dXe,cXe,bg,yK,fXe,mXe,Xx,gXe,hXe,pXe,Fg,LK,_Xe,uXe,zx,bXe,FXe,vXe,vg,xK,TXe,MXe,Qx,EXe,CXe,wXe,Tg,kK,AXe,yXe,Wx,LXe,xXe,kXe,Mg,SK,SXe,RXe,Hx,BXe,PXe,$Xe,Eg,RK,IXe,qXe,Ux,NXe,jXe,DXe,Cg,BK,GXe,OXe,Jx,VXe,XXe,zXe,wg,PK,QXe,WXe,Yx,HXe,UXe,JXe,Ag,$K,YXe,KXe,Kx,ZXe,eze,oze,yg,IK,rze,tze,Zx,aze,nze,sze,Lg,qK,lze,ize,ek,dze,cze,fze,xg,NK,mze,gze,ok,hze,pze,_ze,kg,jK,uze,bze,rk,Fze,vze,Tze,Sg,DK,Mze,Eze,tk,Cze,wze,Aze,Rg,GK,yze,Lze,ak,xze,kze,Sze,Bg,OK,Rze,Bze,nk,Pze,$ze,Ize,Pg,VK,qze,Nze,sk,jze,Dze,Gze,XK,Oze,Vze,LC,Xze,$g,xC,zze,zK,Qze,KSe,Qi,Ig,QK,kC,Wze,WK,Hze,ZSe,Wo,SC,Uze,RC,Jze,lk,Yze,Kze,Zze,BC,eQe,HK,oQe,rQe,tQe,go,PC,aQe,UK,nQe,sQe,Oa,lQe,JK,iQe,dQe,YK,cQe,fQe,KK,mQe,gQe,hQe,C,Qn,ZK,pQe,_Qe,ik,uQe,bQe,dk,FQe,vQe,TQe,Wn,eZ,MQe,EQe,ck,CQe,wQe,fk,AQe,yQe,LQe,Hn,oZ,xQe,kQe,mk,SQe,RQe,gk,BQe,PQe,$Qe,qg,rZ,IQe,qQe,hk,NQe,jQe,DQe,Un,tZ,GQe,OQe,pk,VQe,XQe,_k,zQe,QQe,WQe,Ng,aZ,HQe,UQe,uk,JQe,YQe,KQe,jg,nZ,ZQe,eWe,bk,oWe,rWe,tWe,Dg,sZ,aWe,nWe,Fk,sWe,lWe,iWe,Jn,lZ,dWe,cWe,vk,fWe,mWe,Tk,gWe,hWe,pWe,Yn,iZ,_We,uWe,Mk,bWe,FWe,Ek,vWe,TWe,MWe,Kn,dZ,EWe,CWe,Ck,wWe,AWe,wk,yWe,LWe,xWe,Gg,cZ,kWe,SWe,Ak,RWe,BWe,PWe,Og,fZ,$We,IWe,yk,qWe,NWe,jWe,Zn,mZ,DWe,GWe,Lk,OWe,VWe,xk,XWe,zWe,QWe,Vg,gZ,WWe,HWe,kk,UWe,JWe,YWe,es,hZ,KWe,ZWe,Sk,eHe,oHe,Rk,rHe,tHe,aHe,os,pZ,nHe,sHe,Bk,lHe,iHe,Pk,dHe,cHe,fHe,rs,_Z,mHe,gHe,$k,hHe,pHe,uZ,_He,uHe,bHe,Xg,bZ,FHe,vHe,Ik,THe,MHe,EHe,ts,FZ,CHe,wHe,qk,AHe,yHe,Nk,LHe,xHe,kHe,zg,vZ,SHe,RHe,jk,BHe,PHe,$He,as,TZ,IHe,qHe,Dk,NHe,jHe,Gk,DHe,GHe,OHe,ns,MZ,VHe,XHe,Ok,zHe,QHe,Vk,WHe,HHe,UHe,ss,EZ,JHe,YHe,Xk,KHe,ZHe,zk,eUe,oUe,rUe,Qg,CZ,tUe,aUe,Qk,nUe,sUe,lUe,ls,wZ,iUe,dUe,Wk,cUe,fUe,Hk,mUe,gUe,hUe,Wg,AZ,pUe,_Ue,Uk,uUe,bUe,FUe,is,yZ,vUe,TUe,Jk,MUe,EUe,Yk,CUe,wUe,AUe,ds,LZ,yUe,LUe,Kk,xUe,kUe,Zk,SUe,RUe,BUe,cs,xZ,PUe,$Ue,eS,IUe,qUe,oS,NUe,jUe,DUe,fs,kZ,GUe,OUe,rS,VUe,XUe,tS,zUe,QUe,WUe,Hg,SZ,HUe,UUe,aS,JUe,YUe,KUe,ms,RZ,ZUe,eJe,nS,oJe,rJe,sS,tJe,aJe,nJe,gs,BZ,sJe,lJe,lS,iJe,dJe,iS,cJe,fJe,mJe,hs,PZ,gJe,hJe,dS,pJe,_Je,cS,uJe,bJe,FJe,ps,$Z,vJe,TJe,fS,MJe,EJe,mS,CJe,wJe,AJe,_s,IZ,yJe,LJe,gS,xJe,kJe,hS,SJe,RJe,BJe,us,qZ,PJe,$Je,pS,IJe,qJe,_S,NJe,jJe,DJe,Ug,NZ,GJe,OJe,uS,VJe,XJe,zJe,bs,jZ,QJe,WJe,bS,HJe,UJe,FS,JJe,YJe,KJe,Jg,DZ,ZJe,eYe,vS,oYe,rYe,tYe,Yg,GZ,aYe,nYe,TS,sYe,lYe,iYe,Fs,OZ,dYe,cYe,MS,fYe,mYe,ES,gYe,hYe,pYe,vs,VZ,_Ye,uYe,CS,bYe,FYe,wS,vYe,TYe,MYe,Kg,XZ,EYe,CYe,AS,wYe,AYe,yYe,Ts,zZ,LYe,xYe,yS,kYe,SYe,LS,RYe,BYe,PYe,Ms,QZ,$Ye,IYe,xS,qYe,NYe,kS,jYe,DYe,GYe,Es,WZ,OYe,VYe,SS,XYe,zYe,RS,QYe,WYe,HYe,Cs,HZ,UYe,JYe,BS,YYe,KYe,PS,ZYe,eKe,oKe,ws,UZ,rKe,tKe,$S,aKe,nKe,IS,sKe,lKe,iKe,Zg,JZ,dKe,cKe,qS,fKe,mKe,gKe,eh,YZ,hKe,pKe,NS,_Ke,uKe,bKe,oh,KZ,FKe,vKe,jS,TKe,MKe,EKe,rh,ZZ,CKe,wKe,DS,AKe,yKe,LKe,As,eee,xKe,kKe,GS,SKe,RKe,OS,BKe,PKe,$Ke,th,oee,IKe,qKe,VS,NKe,jKe,DKe,ys,ree,GKe,OKe,XS,VKe,XKe,zS,zKe,QKe,WKe,Ls,tee,HKe,UKe,QS,JKe,YKe,WS,KKe,ZKe,eZe,xs,aee,oZe,rZe,HS,tZe,aZe,US,nZe,sZe,lZe,ks,nee,iZe,dZe,JS,cZe,fZe,YS,mZe,gZe,hZe,Ss,see,pZe,_Ze,KS,uZe,bZe,ZS,FZe,vZe,TZe,Rs,lee,MZe,EZe,eR,CZe,wZe,oR,AZe,yZe,LZe,ah,iee,xZe,kZe,rR,SZe,RZe,BZe,nh,dee,PZe,$Ze,tR,IZe,qZe,NZe,Bs,cee,jZe,DZe,aR,GZe,OZe,nR,VZe,XZe,zZe,Ps,fee,QZe,WZe,sR,HZe,UZe,lR,JZe,YZe,KZe,$s,mee,ZZe,eeo,iR,oeo,reo,dR,teo,aeo,neo,sh,gee,seo,leo,cR,ieo,deo,ceo,lh,hee,feo,meo,fR,geo,heo,peo,ih,pee,_eo,ueo,mR,beo,Feo,veo,dh,_ee,Teo,Meo,gR,Eeo,Ceo,weo,Is,uee,Aeo,yeo,hR,Leo,xeo,pR,keo,Seo,Reo,ch,bee,Beo,Peo,_R,$eo,Ieo,qeo,fh,Fee,Neo,jeo,uR,Deo,Geo,Oeo,qs,vee,Veo,Xeo,bR,zeo,Qeo,FR,Weo,Heo,Ueo,Ns,Tee,Jeo,Yeo,vR,Keo,Zeo,TR,eoo,ooo,roo,Mee,too,aoo,$C,noo,mh,IC,soo,Eee,loo,eRe,Wi,gh,Cee,qC,ioo,wee,doo,oRe,Ho,NC,coo,jC,foo,MR,moo,goo,hoo,DC,poo,Aee,_oo,uoo,boo,$e,GC,Foo,yee,voo,Too,Va,Moo,Lee,Eoo,Coo,xee,woo,Aoo,kee,yoo,Loo,xoo,te,hh,See,koo,Soo,ER,Roo,Boo,Poo,ph,Ree,$oo,Ioo,CR,qoo,Noo,joo,_h,Bee,Doo,Goo,wR,Ooo,Voo,Xoo,uh,Pee,zoo,Qoo,AR,Woo,Hoo,Uoo,bh,$ee,Joo,Yoo,yR,Koo,Zoo,ero,Fh,Iee,oro,rro,LR,tro,aro,nro,vh,qee,sro,lro,xR,iro,dro,cro,Th,Nee,fro,mro,kR,gro,hro,pro,Mh,jee,_ro,uro,SR,bro,Fro,vro,Eh,Dee,Tro,Mro,RR,Ero,Cro,wro,Ch,Gee,Aro,yro,BR,Lro,xro,kro,wh,Oee,Sro,Rro,PR,Bro,Pro,$ro,Ah,Vee,Iro,qro,$R,Nro,jro,Dro,yh,Xee,Gro,Oro,IR,Vro,Xro,zro,Lh,zee,Qro,Wro,qR,Hro,Uro,Jro,xh,Qee,Yro,Kro,NR,Zro,eto,oto,kh,Wee,rto,tto,jR,ato,nto,sto,Sh,Hee,lto,ito,DR,dto,cto,fto,Rh,mto,Uee,gto,hto,OC,pto,Bh,VC,_to,Jee,uto,rRe,Hi,Ph,Yee,XC,bto,Kee,Fto,tRe,Uo,zC,vto,QC,Tto,GR,Mto,Eto,Cto,WC,wto,Zee,Ato,yto,Lto,Ie,HC,xto,eoe,kto,Sto,Ui,Rto,ooe,Bto,Pto,roe,$to,Ito,qto,ke,$h,toe,Nto,jto,OR,Dto,Gto,Oto,Ih,aoe,Vto,Xto,VR,zto,Qto,Wto,qh,noe,Hto,Uto,XR,Jto,Yto,Kto,Nh,soe,Zto,eao,zR,oao,rao,tao,jh,loe,aao,nao,QR,sao,lao,iao,Dh,ioe,dao,cao,WR,fao,mao,gao,Gh,doe,hao,pao,HR,_ao,uao,bao,Oh,coe,Fao,vao,UR,Tao,Mao,Eao,Vh,Cao,foe,wao,Aao,UC,yao,Xh,JC,Lao,moe,xao,aRe,Ji,zh,goe,YC,kao,hoe,Sao,nRe,Jo,KC,Rao,Yi,Bao,JR,Pao,$ao,YR,Iao,qao,Nao,ZC,jao,poe,Dao,Gao,Oao,Xr,ew,Vao,_oe,Xao,zao,Ki,Qao,uoe,Wao,Hao,KR,Uao,Jao,Yao,boe,Kao,Zao,ow,eno,qe,rw,ono,Foe,rno,tno,Xa,ano,voe,nno,sno,Toe,lno,ino,Moe,dno,cno,fno,T,Qh,Eoe,mno,gno,ZR,hno,pno,_no,Wh,Coe,uno,bno,eB,Fno,vno,Tno,Hh,woe,Mno,Eno,oB,Cno,wno,Ano,Uh,Aoe,yno,Lno,rB,xno,kno,Sno,Jh,yoe,Rno,Bno,tB,Pno,$no,Ino,Yh,Loe,qno,Nno,aB,jno,Dno,Gno,Kh,xoe,Ono,Vno,nB,Xno,zno,Qno,Zh,koe,Wno,Hno,sB,Uno,Jno,Yno,ep,Soe,Kno,Zno,lB,eso,oso,rso,op,Roe,tso,aso,iB,nso,sso,lso,rp,Boe,iso,dso,dB,cso,fso,mso,tp,Poe,gso,hso,cB,pso,_so,uso,ap,$oe,bso,Fso,fB,vso,Tso,Mso,np,Ioe,Eso,Cso,mB,wso,Aso,yso,sp,qoe,Lso,xso,gB,kso,Sso,Rso,lp,Noe,Bso,Pso,hB,$so,Iso,qso,ip,joe,Nso,jso,pB,Dso,Gso,Oso,dp,Doe,Vso,Xso,_B,zso,Qso,Wso,cp,Goe,Hso,Uso,uB,Jso,Yso,Kso,fp,Ooe,Zso,elo,bB,olo,rlo,tlo,mp,Voe,alo,nlo,FB,slo,llo,ilo,gp,Xoe,dlo,clo,vB,flo,mlo,glo,hp,zoe,hlo,plo,TB,_lo,ulo,blo,pp,Qoe,Flo,vlo,MB,Tlo,Mlo,Elo,_p,Woe,Clo,wlo,EB,Alo,ylo,Llo,up,Hoe,xlo,klo,CB,Slo,Rlo,Blo,bp,Uoe,Plo,$lo,wB,Ilo,qlo,Nlo,Fp,Joe,jlo,Dlo,AB,Glo,Olo,Vlo,vp,Yoe,Xlo,zlo,yB,Qlo,Wlo,Hlo,js,Koe,Ulo,Jlo,LB,Ylo,Klo,xB,Zlo,eio,oio,Tp,Zoe,rio,tio,kB,aio,nio,sio,Mp,ere,lio,iio,SB,dio,cio,fio,Ep,ore,mio,gio,RB,hio,pio,_io,Cp,rre,uio,bio,BB,Fio,vio,Tio,wp,tre,Mio,Eio,PB,Cio,wio,Aio,Ap,are,yio,Lio,$B,xio,kio,Sio,yp,nre,Rio,Bio,IB,Pio,$io,Iio,Lp,sre,qio,Nio,qB,jio,Dio,Gio,xp,lre,Oio,Vio,NB,Xio,zio,Qio,kp,ire,Wio,Hio,jB,Uio,Jio,Yio,Sp,dre,Kio,Zio,DB,edo,odo,rdo,Rp,cre,tdo,ado,GB,ndo,sdo,ldo,Bp,fre,ido,ddo,OB,cdo,fdo,mdo,Pp,mre,gdo,hdo,VB,pdo,_do,udo,$p,gre,bdo,Fdo,XB,vdo,Tdo,Mdo,Ip,hre,Edo,Cdo,zB,wdo,Ado,ydo,qp,pre,Ldo,xdo,QB,kdo,Sdo,Rdo,Np,_re,Bdo,Pdo,WB,$do,Ido,qdo,jp,ure,Ndo,jdo,HB,Ddo,Gdo,Odo,Dp,bre,Vdo,Xdo,UB,zdo,Qdo,Wdo,Gp,Fre,Hdo,Udo,JB,Jdo,Ydo,Kdo,Op,vre,Zdo,eco,YB,oco,rco,tco,Vp,Tre,aco,nco,KB,sco,lco,ico,Xp,Mre,dco,cco,ZB,fco,mco,gco,zp,Ere,hco,pco,eP,_co,uco,bco,Qp,Cre,Fco,vco,oP,Tco,Mco,Eco,Wp,wre,Cco,wco,rP,Aco,yco,Lco,Hp,Are,xco,kco,tP,Sco,Rco,Bco,Up,yre,Pco,$co,aP,Ico,qco,Nco,Jp,Lre,jco,Dco,nP,Gco,Oco,Vco,Yp,xre,Xco,zco,sP,Qco,Wco,Hco,Kp,kre,Uco,Jco,lP,Yco,Kco,Zco,Zp,Sre,efo,ofo,iP,rfo,tfo,afo,e_,Rre,nfo,sfo,dP,lfo,ifo,dfo,o_,Bre,cfo,ffo,cP,mfo,gfo,hfo,r_,Pre,pfo,_fo,fP,ufo,bfo,Ffo,t_,$re,vfo,Tfo,mP,Mfo,Efo,Cfo,a_,Ire,wfo,Afo,gP,yfo,Lfo,xfo,n_,qre,kfo,Sfo,hP,Rfo,Bfo,Pfo,s_,Nre,$fo,Ifo,pP,qfo,Nfo,jfo,l_,jre,Dfo,Gfo,_P,Ofo,Vfo,Xfo,i_,Dre,zfo,Qfo,uP,Wfo,Hfo,Ufo,d_,Gre,Jfo,Yfo,bP,Kfo,Zfo,emo,c_,Ore,omo,rmo,FP,tmo,amo,nmo,f_,Vre,smo,lmo,vP,imo,dmo,cmo,m_,Xre,fmo,mmo,TP,gmo,hmo,pmo,g_,zre,_mo,umo,MP,bmo,Fmo,vmo,h_,Qre,Tmo,Mmo,EP,Emo,Cmo,wmo,p_,Wre,Amo,ymo,CP,Lmo,xmo,kmo,__,Hre,Smo,Rmo,wP,Bmo,Pmo,$mo,u_,Ure,Imo,qmo,AP,Nmo,jmo,Dmo,b_,Jre,Gmo,Omo,yP,Vmo,Xmo,zmo,F_,Yre,Qmo,Wmo,LP,Hmo,Umo,Jmo,v_,Kre,Ymo,Kmo,xP,Zmo,ego,ogo,T_,Zre,rgo,tgo,kP,ago,ngo,sgo,M_,ete,lgo,igo,SP,dgo,cgo,fgo,E_,ote,mgo,ggo,RP,hgo,pgo,_go,C_,rte,ugo,bgo,BP,Fgo,vgo,Tgo,w_,tte,Mgo,Ego,PP,Cgo,wgo,Ago,A_,ate,ygo,Lgo,$P,xgo,kgo,Sgo,y_,nte,Rgo,Bgo,IP,Pgo,$go,Igo,L_,ste,qgo,Ngo,qP,jgo,Dgo,Ggo,x_,Ogo,lte,Vgo,Xgo,ite,zgo,Qgo,dte,Wgo,Hgo,tw,sRe,Zi,k_,cte,aw,Ugo,fte,Jgo,lRe,Yo,nw,Ygo,ed,Kgo,NP,Zgo,eho,jP,oho,rho,tho,sw,aho,mte,nho,sho,lho,zr,lw,iho,gte,dho,cho,od,fho,hte,mho,gho,DP,hho,pho,_ho,pte,uho,bho,iw,Fho,Ne,dw,vho,_te,Tho,Mho,za,Eho,ute,Cho,who,bte,Aho,yho,Fte,Lho,xho,kho,S,S_,vte,Sho,Rho,GP,Bho,Pho,$ho,R_,Tte,Iho,qho,OP,Nho,jho,Dho,B_,Mte,Gho,Oho,VP,Vho,Xho,zho,P_,Ete,Qho,Who,XP,Hho,Uho,Jho,$_,Cte,Yho,Kho,zP,Zho,epo,opo,I_,wte,rpo,tpo,QP,apo,npo,spo,q_,Ate,lpo,ipo,WP,dpo,cpo,fpo,N_,yte,mpo,gpo,HP,hpo,ppo,_po,j_,Lte,upo,bpo,UP,Fpo,vpo,Tpo,D_,xte,Mpo,Epo,JP,Cpo,wpo,Apo,G_,kte,ypo,Lpo,YP,xpo,kpo,Spo,O_,Ste,Rpo,Bpo,KP,Ppo,$po,Ipo,V_,Rte,qpo,Npo,ZP,jpo,Dpo,Gpo,X_,Bte,Opo,Vpo,e$,Xpo,zpo,Qpo,z_,Pte,Wpo,Hpo,o$,Upo,Jpo,Ypo,Q_,$te,Kpo,Zpo,r$,e_o,o_o,r_o,W_,Ite,t_o,a_o,t$,n_o,s_o,l_o,H_,qte,i_o,d_o,a$,c_o,f_o,m_o,U_,Nte,g_o,h_o,n$,p_o,__o,u_o,J_,jte,b_o,F_o,s$,v_o,T_o,M_o,Y_,Dte,E_o,C_o,l$,w_o,A_o,y_o,K_,Gte,L_o,x_o,i$,k_o,S_o,R_o,Z_,Ote,B_o,P_o,d$,$_o,I_o,q_o,eu,Vte,N_o,j_o,c$,D_o,G_o,O_o,ou,Xte,V_o,X_o,f$,z_o,Q_o,W_o,ru,zte,H_o,U_o,m$,J_o,Y_o,K_o,tu,Qte,Z_o,euo,g$,ouo,ruo,tuo,au,Wte,auo,nuo,h$,suo,luo,iuo,nu,Hte,duo,cuo,p$,fuo,muo,guo,su,Ute,huo,puo,_$,_uo,uuo,buo,lu,Jte,Fuo,vuo,u$,Tuo,Muo,Euo,iu,Yte,Cuo,wuo,b$,Auo,yuo,Luo,du,Kte,xuo,kuo,F$,Suo,Ruo,Buo,cu,Zte,Puo,$uo,v$,Iuo,quo,Nuo,fu,eae,juo,Duo,T$,Guo,Ouo,Vuo,mu,oae,Xuo,zuo,M$,Quo,Wuo,Huo,gu,rae,Uuo,Juo,E$,Yuo,Kuo,Zuo,hu,tae,e1o,o1o,C$,r1o,t1o,a1o,pu,aae,n1o,s1o,w$,l1o,i1o,d1o,_u,c1o,nae,f1o,m1o,sae,g1o,h1o,lae,p1o,_1o,cw,iRe,rd,uu,iae,fw,u1o,dae,b1o,dRe,Ko,mw,F1o,td,v1o,A$,T1o,M1o,y$,E1o,C1o,w1o,gw,A1o,cae,y1o,L1o,x1o,Qr,hw,k1o,fae,S1o,R1o,ad,B1o,mae,P1o,$1o,L$,I1o,q1o,N1o,gae,j1o,D1o,pw,G1o,je,_w,O1o,hae,V1o,X1o,Qa,z1o,pae,Q1o,W1o,_ae,H1o,U1o,uae,J1o,Y1o,K1o,$,bu,bae,Z1o,e4o,x$,o4o,r4o,t4o,Fu,Fae,a4o,n4o,k$,s4o,l4o,i4o,vu,vae,d4o,c4o,S$,f4o,m4o,g4o,Tu,Tae,h4o,p4o,R$,_4o,u4o,b4o,Mu,Mae,F4o,v4o,B$,T4o,M4o,E4o,Eu,Eae,C4o,w4o,P$,A4o,y4o,L4o,Cu,Cae,x4o,k4o,$$,S4o,R4o,B4o,wu,wae,P4o,$4o,I$,I4o,q4o,N4o,Au,Aae,j4o,D4o,q$,G4o,O4o,V4o,yu,yae,X4o,z4o,N$,Q4o,W4o,H4o,Lu,Lae,U4o,J4o,j$,Y4o,K4o,Z4o,xu,xae,ebo,obo,D$,rbo,tbo,abo,ku,kae,nbo,sbo,G$,lbo,ibo,dbo,Su,Sae,cbo,fbo,O$,mbo,gbo,hbo,Ru,Rae,pbo,_bo,V$,ubo,bbo,Fbo,Bu,Bae,vbo,Tbo,X$,Mbo,Ebo,Cbo,Pu,Pae,wbo,Abo,z$,ybo,Lbo,xbo,$u,$ae,kbo,Sbo,Q$,Rbo,Bbo,Pbo,Iu,Iae,$bo,Ibo,W$,qbo,Nbo,jbo,qu,qae,Dbo,Gbo,H$,Obo,Vbo,Xbo,Nu,Nae,zbo,Qbo,U$,Wbo,Hbo,Ubo,ju,jae,Jbo,Ybo,J$,Kbo,Zbo,e5o,Du,Dae,o5o,r5o,Y$,t5o,a5o,n5o,Gu,Gae,s5o,l5o,K$,i5o,d5o,c5o,Ou,Oae,f5o,m5o,Z$,g5o,h5o,p5o,Vu,Vae,_5o,u5o,eI,b5o,F5o,v5o,Xu,Xae,T5o,M5o,oI,E5o,C5o,w5o,zu,zae,A5o,y5o,rI,L5o,x5o,k5o,Qu,Qae,S5o,R5o,tI,B5o,P5o,$5o,Wu,Wae,I5o,q5o,aI,N5o,j5o,D5o,Hu,Hae,G5o,O5o,nI,V5o,X5o,z5o,Uu,Uae,Q5o,W5o,sI,H5o,U5o,J5o,Ju,Jae,Y5o,K5o,lI,Z5o,e3o,o3o,Yu,Yae,r3o,t3o,iI,a3o,n3o,s3o,Ku,Kae,l3o,i3o,dI,d3o,c3o,f3o,Zu,m3o,Zae,g3o,h3o,ene,p3o,_3o,one,u3o,b3o,uw,cRe,nd,e1,rne,bw,F3o,tne,v3o,fRe,Zo,Fw,T3o,sd,M3o,cI,E3o,C3o,fI,w3o,A3o,y3o,vw,L3o,ane,x3o,k3o,S3o,Wr,Tw,R3o,nne,B3o,P3o,ld,$3o,sne,I3o,q3o,mI,N3o,j3o,D3o,lne,G3o,O3o,Mw,V3o,De,Ew,X3o,ine,z3o,Q3o,Wa,W3o,dne,H3o,U3o,cne,J3o,Y3o,fne,K3o,Z3o,e2o,I,o1,mne,o2o,r2o,gI,t2o,a2o,n2o,r1,gne,s2o,l2o,hI,i2o,d2o,c2o,t1,hne,f2o,m2o,pI,g2o,h2o,p2o,a1,pne,_2o,u2o,_I,b2o,F2o,v2o,n1,_ne,T2o,M2o,uI,E2o,C2o,w2o,s1,une,A2o,y2o,bI,L2o,x2o,k2o,l1,bne,S2o,R2o,FI,B2o,P2o,$2o,i1,Fne,I2o,q2o,vI,N2o,j2o,D2o,d1,vne,G2o,O2o,TI,V2o,X2o,z2o,c1,Tne,Q2o,W2o,MI,H2o,U2o,J2o,f1,Mne,Y2o,K2o,EI,Z2o,eFo,oFo,m1,Ene,rFo,tFo,CI,aFo,nFo,sFo,g1,Cne,lFo,iFo,wI,dFo,cFo,fFo,h1,wne,mFo,gFo,AI,hFo,pFo,_Fo,p1,Ane,uFo,bFo,yI,FFo,vFo,TFo,_1,yne,MFo,EFo,LI,CFo,wFo,AFo,u1,Lne,yFo,LFo,xI,xFo,kFo,SFo,b1,xne,RFo,BFo,kI,PFo,$Fo,IFo,F1,kne,qFo,NFo,SI,jFo,DFo,GFo,v1,Sne,OFo,VFo,RI,XFo,zFo,QFo,T1,Rne,WFo,HFo,BI,UFo,JFo,YFo,M1,Bne,KFo,ZFo,PI,evo,ovo,rvo,E1,Pne,tvo,avo,$I,nvo,svo,lvo,C1,$ne,ivo,dvo,II,cvo,fvo,mvo,w1,Ine,gvo,hvo,qI,pvo,_vo,uvo,A1,qne,bvo,Fvo,NI,vvo,Tvo,Mvo,y1,Nne,Evo,Cvo,jI,wvo,Avo,yvo,L1,jne,Lvo,xvo,DI,kvo,Svo,Rvo,x1,Dne,Bvo,Pvo,GI,$vo,Ivo,qvo,k1,Gne,Nvo,jvo,OI,Dvo,Gvo,Ovo,S1,One,Vvo,Xvo,Vne,zvo,Qvo,Wvo,R1,Xne,Hvo,Uvo,VI,Jvo,Yvo,Kvo,B1,zne,Zvo,e6o,XI,o6o,r6o,t6o,P1,Qne,a6o,n6o,zI,s6o,l6o,i6o,$1,Wne,d6o,c6o,QI,f6o,m6o,g6o,I1,h6o,Hne,p6o,_6o,Une,u6o,b6o,Jne,F6o,v6o,Cw,mRe,id,q1,Yne,ww,T6o,Kne,M6o,gRe,er,Aw,E6o,dd,C6o,WI,w6o,A6o,HI,y6o,L6o,x6o,yw,k6o,Zne,S6o,R6o,B6o,Hr,Lw,P6o,ese,$6o,I6o,cd,q6o,ose,N6o,j6o,UI,D6o,G6o,O6o,rse,V6o,X6o,xw,z6o,Ge,kw,Q6o,tse,W6o,H6o,Ha,U6o,ase,J6o,Y6o,nse,K6o,Z6o,sse,eTo,oTo,rTo,se,N1,lse,tTo,aTo,JI,nTo,sTo,lTo,j1,ise,iTo,dTo,YI,cTo,fTo,mTo,D1,dse,gTo,hTo,KI,pTo,_To,uTo,G1,cse,bTo,FTo,ZI,vTo,TTo,MTo,O1,fse,ETo,CTo,eq,wTo,ATo,yTo,V1,mse,LTo,xTo,oq,kTo,STo,RTo,X1,gse,BTo,PTo,rq,$To,ITo,qTo,z1,hse,NTo,jTo,tq,DTo,GTo,OTo,Q1,pse,VTo,XTo,aq,zTo,QTo,WTo,W1,_se,HTo,UTo,nq,JTo,YTo,KTo,H1,use,ZTo,eMo,sq,oMo,rMo,tMo,U1,bse,aMo,nMo,lq,sMo,lMo,iMo,J1,Fse,dMo,cMo,iq,fMo,mMo,gMo,Y1,vse,hMo,pMo,dq,_Mo,uMo,bMo,K1,Tse,FMo,vMo,cq,TMo,MMo,EMo,Z1,Mse,CMo,wMo,fq,AMo,yMo,LMo,e4,xMo,Ese,kMo,SMo,Cse,RMo,BMo,wse,PMo,$Mo,Sw,hRe,fd,o4,Ase,Rw,IMo,yse,qMo,pRe,or,Bw,NMo,md,jMo,mq,DMo,GMo,gq,OMo,VMo,XMo,Pw,zMo,Lse,QMo,WMo,HMo,Ur,$w,UMo,xse,JMo,YMo,gd,KMo,kse,ZMo,eEo,hq,oEo,rEo,tEo,Sse,aEo,nEo,Iw,sEo,Oe,qw,lEo,Rse,iEo,dEo,Ua,cEo,Bse,fEo,mEo,Pse,gEo,hEo,$se,pEo,_Eo,uEo,y,r4,Ise,bEo,FEo,pq,vEo,TEo,MEo,t4,qse,EEo,CEo,_q,wEo,AEo,yEo,a4,Nse,LEo,xEo,uq,kEo,SEo,REo,n4,jse,BEo,PEo,bq,$Eo,IEo,qEo,s4,Dse,NEo,jEo,Fq,DEo,GEo,OEo,l4,Gse,VEo,XEo,vq,zEo,QEo,WEo,i4,Ose,HEo,UEo,Tq,JEo,YEo,KEo,d4,Vse,ZEo,eCo,Mq,oCo,rCo,tCo,c4,Xse,aCo,nCo,Eq,sCo,lCo,iCo,f4,zse,dCo,cCo,Cq,fCo,mCo,gCo,m4,Qse,hCo,pCo,wq,_Co,uCo,bCo,g4,Wse,FCo,vCo,Aq,TCo,MCo,ECo,h4,Hse,CCo,wCo,yq,ACo,yCo,LCo,p4,Use,xCo,kCo,Lq,SCo,RCo,BCo,_4,Jse,PCo,$Co,xq,ICo,qCo,NCo,u4,Yse,jCo,DCo,kq,GCo,OCo,VCo,b4,Kse,XCo,zCo,Sq,QCo,WCo,HCo,F4,Zse,UCo,JCo,Rq,YCo,KCo,ZCo,v4,ele,ewo,owo,Bq,rwo,two,awo,T4,ole,nwo,swo,Pq,lwo,iwo,dwo,M4,rle,cwo,fwo,$q,mwo,gwo,hwo,E4,tle,pwo,_wo,Iq,uwo,bwo,Fwo,C4,ale,vwo,Two,qq,Mwo,Ewo,Cwo,w4,nle,wwo,Awo,Nq,ywo,Lwo,xwo,A4,sle,kwo,Swo,jq,Rwo,Bwo,Pwo,y4,lle,$wo,Iwo,Dq,qwo,Nwo,jwo,L4,ile,Dwo,Gwo,Gq,Owo,Vwo,Xwo,x4,dle,zwo,Qwo,Oq,Wwo,Hwo,Uwo,k4,cle,Jwo,Ywo,Vq,Kwo,Zwo,eAo,S4,fle,oAo,rAo,Xq,tAo,aAo,nAo,R4,mle,sAo,lAo,zq,iAo,dAo,cAo,B4,gle,fAo,mAo,Qq,gAo,hAo,pAo,P4,hle,_Ao,uAo,Wq,bAo,FAo,vAo,$4,ple,TAo,MAo,Hq,EAo,CAo,wAo,I4,_le,AAo,yAo,Uq,LAo,xAo,kAo,q4,ule,SAo,RAo,Jq,BAo,PAo,$Ao,N4,ble,IAo,qAo,Yq,NAo,jAo,DAo,j4,Fle,GAo,OAo,Kq,VAo,XAo,zAo,D4,vle,QAo,WAo,Zq,HAo,UAo,JAo,G4,Tle,YAo,KAo,eN,ZAo,e0o,o0o,O4,Mle,r0o,t0o,oN,a0o,n0o,s0o,V4,Ele,l0o,i0o,rN,d0o,c0o,f0o,X4,Cle,m0o,g0o,tN,h0o,p0o,_0o,z4,wle,u0o,b0o,aN,F0o,v0o,T0o,Q4,Ale,M0o,E0o,nN,C0o,w0o,A0o,W4,yle,y0o,L0o,sN,x0o,k0o,S0o,H4,R0o,Lle,B0o,P0o,xle,$0o,I0o,kle,q0o,N0o,Nw,_Re,hd,U4,Sle,jw,j0o,Rle,D0o,uRe,rr,Dw,G0o,pd,O0o,lN,V0o,X0o,iN,z0o,Q0o,W0o,Gw,H0o,Ble,U0o,J0o,Y0o,Jr,Ow,K0o,Ple,Z0o,eyo,_d,oyo,$le,ryo,tyo,dN,ayo,nyo,syo,Ile,lyo,iyo,Vw,dyo,Ve,Xw,cyo,qle,fyo,myo,Ja,gyo,Nle,hyo,pyo,jle,_yo,uyo,Dle,byo,Fyo,vyo,G,J4,Gle,Tyo,Myo,cN,Eyo,Cyo,wyo,Y4,Ole,Ayo,yyo,fN,Lyo,xyo,kyo,K4,Vle,Syo,Ryo,mN,Byo,Pyo,$yo,Z4,Xle,Iyo,qyo,gN,Nyo,jyo,Dyo,eb,zle,Gyo,Oyo,hN,Vyo,Xyo,zyo,ob,Qle,Qyo,Wyo,pN,Hyo,Uyo,Jyo,rb,Wle,Yyo,Kyo,_N,Zyo,eLo,oLo,tb,Hle,rLo,tLo,uN,aLo,nLo,sLo,ab,Ule,lLo,iLo,bN,dLo,cLo,fLo,nb,Jle,mLo,gLo,FN,hLo,pLo,_Lo,sb,Yle,uLo,bLo,vN,FLo,vLo,TLo,lb,Kle,MLo,ELo,TN,CLo,wLo,ALo,ib,Zle,yLo,LLo,MN,xLo,kLo,SLo,db,eie,RLo,BLo,EN,PLo,$Lo,ILo,cb,oie,qLo,NLo,CN,jLo,DLo,GLo,fb,rie,OLo,VLo,wN,XLo,zLo,QLo,mb,tie,WLo,HLo,AN,ULo,JLo,YLo,gb,aie,KLo,ZLo,yN,e8o,o8o,r8o,hb,nie,t8o,a8o,LN,n8o,s8o,l8o,pb,sie,i8o,d8o,xN,c8o,f8o,m8o,_b,lie,g8o,h8o,kN,p8o,_8o,u8o,ub,iie,b8o,F8o,SN,v8o,T8o,M8o,bb,die,E8o,C8o,RN,w8o,A8o,y8o,Fb,cie,L8o,x8o,BN,k8o,S8o,R8o,vb,fie,B8o,P8o,PN,$8o,I8o,q8o,Tb,mie,N8o,j8o,$N,D8o,G8o,O8o,Mb,gie,V8o,X8o,IN,z8o,Q8o,W8o,Eb,hie,H8o,U8o,qN,J8o,Y8o,K8o,Cb,Z8o,pie,e7o,o7o,_ie,r7o,t7o,uie,a7o,n7o,zw,bRe,ud,wb,bie,Qw,s7o,Fie,l7o,FRe,tr,Ww,i7o,bd,d7o,NN,c7o,f7o,jN,m7o,g7o,h7o,Hw,p7o,vie,_7o,u7o,b7o,Yr,Uw,F7o,Tie,v7o,T7o,Fd,M7o,Mie,E7o,C7o,DN,w7o,A7o,y7o,Eie,L7o,x7o,Jw,k7o,Xe,Yw,S7o,Cie,R7o,B7o,Ya,P7o,wie,$7o,I7o,Aie,q7o,N7o,yie,j7o,D7o,G7o,da,Ab,Lie,O7o,V7o,GN,X7o,z7o,Q7o,yb,xie,W7o,H7o,ON,U7o,J7o,Y7o,Lb,kie,K7o,Z7o,VN,e9o,o9o,r9o,xb,Sie,t9o,a9o,XN,n9o,s9o,l9o,kb,Rie,i9o,d9o,zN,c9o,f9o,m9o,Sb,g9o,Bie,h9o,p9o,Pie,_9o,u9o,$ie,b9o,F9o,Kw,vRe,vd,Rb,Iie,Zw,v9o,qie,T9o,TRe,ar,eA,M9o,Td,E9o,QN,C9o,w9o,WN,A9o,y9o,L9o,oA,x9o,Nie,k9o,S9o,R9o,Kr,rA,B9o,jie,P9o,$9o,Md,I9o,Die,q9o,N9o,HN,j9o,D9o,G9o,Gie,O9o,V9o,tA,X9o,ze,aA,z9o,Oie,Q9o,W9o,Ka,H9o,Vie,U9o,J9o,Xie,Y9o,K9o,zie,Z9o,exo,oxo,j,Bb,Qie,rxo,txo,UN,axo,nxo,sxo,Pb,Wie,lxo,ixo,JN,dxo,cxo,fxo,$b,Hie,mxo,gxo,YN,hxo,pxo,_xo,Ib,Uie,uxo,bxo,KN,Fxo,vxo,Txo,qb,Jie,Mxo,Exo,ZN,Cxo,wxo,Axo,Nb,Yie,yxo,Lxo,ej,xxo,kxo,Sxo,jb,Kie,Rxo,Bxo,oj,Pxo,$xo,Ixo,Db,Zie,qxo,Nxo,rj,jxo,Dxo,Gxo,Gb,ede,Oxo,Vxo,tj,Xxo,zxo,Qxo,Ob,ode,Wxo,Hxo,aj,Uxo,Jxo,Yxo,Vb,rde,Kxo,Zxo,nj,eko,oko,rko,Xb,tde,tko,ako,sj,nko,sko,lko,zb,ade,iko,dko,lj,cko,fko,mko,Qb,nde,gko,hko,ij,pko,_ko,uko,Wb,sde,bko,Fko,dj,vko,Tko,Mko,Hb,lde,Eko,Cko,cj,wko,Ako,yko,Ub,ide,Lko,xko,fj,kko,Sko,Rko,Jb,dde,Bko,Pko,mj,$ko,Iko,qko,Yb,cde,Nko,jko,gj,Dko,Gko,Oko,Kb,fde,Vko,Xko,hj,zko,Qko,Wko,Zb,mde,Hko,Uko,pj,Jko,Yko,Kko,e5,gde,Zko,eSo,_j,oSo,rSo,tSo,o5,hde,aSo,nSo,uj,sSo,lSo,iSo,r5,pde,dSo,cSo,bj,fSo,mSo,gSo,t5,_de,hSo,pSo,Fj,_So,uSo,bSo,a5,ude,FSo,vSo,vj,TSo,MSo,ESo,n5,bde,CSo,wSo,Tj,ASo,ySo,LSo,s5,Fde,xSo,kSo,Mj,SSo,RSo,BSo,l5,vde,PSo,$So,Ej,ISo,qSo,NSo,i5,Tde,jSo,DSo,Cj,GSo,OSo,VSo,d5,Mde,XSo,zSo,wj,QSo,WSo,HSo,c5,Ede,USo,JSo,Aj,YSo,KSo,ZSo,f5,Cde,eRo,oRo,yj,rRo,tRo,aRo,m5,nRo,wde,sRo,lRo,Ade,iRo,dRo,yde,cRo,fRo,nA,MRe,Ed,g5,Lde,sA,mRo,xde,gRo,ERe,nr,lA,hRo,Cd,pRo,Lj,_Ro,uRo,xj,bRo,FRo,vRo,iA,TRo,kde,MRo,ERo,CRo,Zr,dA,wRo,Sde,ARo,yRo,wd,LRo,Rde,xRo,kRo,kj,SRo,RRo,BRo,Bde,PRo,$Ro,cA,IRo,Qe,fA,qRo,Pde,NRo,jRo,Za,DRo,$de,GRo,ORo,Ide,VRo,XRo,qde,zRo,QRo,WRo,R,h5,Nde,HRo,URo,Sj,JRo,YRo,KRo,p5,jde,ZRo,eBo,Rj,oBo,rBo,tBo,_5,Dde,aBo,nBo,Bj,sBo,lBo,iBo,u5,Gde,dBo,cBo,Pj,fBo,mBo,gBo,b5,Ode,hBo,pBo,$j,_Bo,uBo,bBo,F5,Vde,FBo,vBo,Ij,TBo,MBo,EBo,v5,Xde,CBo,wBo,qj,ABo,yBo,LBo,T5,zde,xBo,kBo,Nj,SBo,RBo,BBo,M5,Qde,PBo,$Bo,jj,IBo,qBo,NBo,E5,Wde,jBo,DBo,Dj,GBo,OBo,VBo,C5,Hde,XBo,zBo,Gj,QBo,WBo,HBo,w5,Ude,UBo,JBo,Oj,YBo,KBo,ZBo,A5,Jde,ePo,oPo,Vj,rPo,tPo,aPo,y5,Yde,nPo,sPo,Xj,lPo,iPo,dPo,L5,Kde,cPo,fPo,zj,mPo,gPo,hPo,x5,Zde,pPo,_Po,Qj,uPo,bPo,FPo,k5,ece,vPo,TPo,Wj,MPo,EPo,CPo,S5,oce,wPo,APo,Hj,yPo,LPo,xPo,R5,rce,kPo,SPo,Uj,RPo,BPo,PPo,B5,tce,$Po,IPo,Jj,qPo,NPo,jPo,P5,ace,DPo,GPo,Yj,OPo,VPo,XPo,$5,nce,zPo,QPo,Kj,WPo,HPo,UPo,I5,sce,JPo,YPo,Zj,KPo,ZPo,e$o,q5,lce,o$o,r$o,eD,t$o,a$o,n$o,N5,ice,s$o,l$o,oD,i$o,d$o,c$o,j5,dce,f$o,m$o,rD,g$o,h$o,p$o,D5,cce,_$o,u$o,tD,b$o,F$o,v$o,G5,fce,T$o,M$o,aD,E$o,C$o,w$o,O5,mce,A$o,y$o,nD,L$o,x$o,k$o,V5,gce,S$o,R$o,sD,B$o,P$o,$$o,X5,hce,I$o,q$o,lD,N$o,j$o,D$o,z5,pce,G$o,O$o,iD,V$o,X$o,z$o,Q5,_ce,Q$o,W$o,dD,H$o,U$o,J$o,W5,uce,Y$o,K$o,cD,Z$o,eIo,oIo,H5,bce,rIo,tIo,fD,aIo,nIo,sIo,U5,Fce,lIo,iIo,mD,dIo,cIo,fIo,J5,vce,mIo,gIo,gD,hIo,pIo,_Io,Y5,Tce,uIo,bIo,hD,FIo,vIo,TIo,K5,Mce,MIo,EIo,pD,CIo,wIo,AIo,Z5,yIo,Ece,LIo,xIo,Cce,kIo,SIo,wce,RIo,BIo,mA,CRe,Ad,e3,Ace,gA,PIo,yce,$Io,wRe,sr,hA,IIo,yd,qIo,_D,NIo,jIo,uD,DIo,GIo,OIo,pA,VIo,Lce,XIo,zIo,QIo,et,_A,WIo,xce,HIo,UIo,Ld,JIo,kce,YIo,KIo,bD,ZIo,eqo,oqo,Sce,rqo,tqo,uA,aqo,We,bA,nqo,Rce,sqo,lqo,en,iqo,Bce,dqo,cqo,Pce,fqo,mqo,$ce,gqo,hqo,pqo,Ice,o3,qce,_qo,uqo,FD,bqo,Fqo,vqo,r3,Tqo,Nce,Mqo,Eqo,jce,Cqo,wqo,Dce,Aqo,yqo,FA,ARe,xd,t3,Gce,vA,Lqo,Oce,xqo,yRe,lr,TA,kqo,kd,Sqo,vD,Rqo,Bqo,TD,Pqo,$qo,Iqo,MA,qqo,Vce,Nqo,jqo,Dqo,ot,EA,Gqo,Xce,Oqo,Vqo,Sd,Xqo,zce,zqo,Qqo,MD,Wqo,Hqo,Uqo,Qce,Jqo,Yqo,CA,Kqo,He,wA,Zqo,Wce,eNo,oNo,on,rNo,Hce,tNo,aNo,Uce,nNo,sNo,Jce,lNo,iNo,dNo,he,a3,Yce,cNo,fNo,ED,mNo,gNo,hNo,n3,Kce,pNo,_No,CD,uNo,bNo,FNo,Ds,Zce,vNo,TNo,wD,MNo,ENo,AD,CNo,wNo,ANo,s3,efe,yNo,LNo,yD,xNo,kNo,SNo,ma,ofe,RNo,BNo,LD,PNo,$No,xD,INo,qNo,kD,NNo,jNo,DNo,l3,rfe,GNo,ONo,SD,VNo,XNo,zNo,i3,tfe,QNo,WNo,RD,HNo,UNo,JNo,d3,afe,YNo,KNo,BD,ZNo,ejo,ojo,c3,nfe,rjo,tjo,PD,ajo,njo,sjo,f3,sfe,ljo,ijo,$D,djo,cjo,fjo,m3,lfe,mjo,gjo,ID,hjo,pjo,_jo,g3,ujo,ife,bjo,Fjo,dfe,vjo,Tjo,cfe,Mjo,Ejo,AA,LRe,Rd,h3,ffe,yA,Cjo,mfe,wjo,xRe,ir,LA,Ajo,Bd,yjo,qD,Ljo,xjo,ND,kjo,Sjo,Rjo,xA,Bjo,gfe,Pjo,$jo,Ijo,rt,kA,qjo,hfe,Njo,jjo,Pd,Djo,pfe,Gjo,Ojo,jD,Vjo,Xjo,zjo,_fe,Qjo,Wjo,SA,Hjo,Ue,RA,Ujo,ufe,Jjo,Yjo,rn,Kjo,bfe,Zjo,eDo,Ffe,oDo,rDo,vfe,tDo,aDo,nDo,Tfe,p3,Mfe,sDo,lDo,DD,iDo,dDo,cDo,_3,fDo,Efe,mDo,gDo,Cfe,hDo,pDo,wfe,_Do,uDo,BA,kRe,$d,u3,Afe,PA,bDo,yfe,FDo,SRe,dr,$A,vDo,Id,TDo,GD,MDo,EDo,OD,CDo,wDo,ADo,IA,yDo,Lfe,LDo,xDo,kDo,tt,qA,SDo,xfe,RDo,BDo,qd,PDo,kfe,$Do,IDo,VD,qDo,NDo,jDo,Sfe,DDo,GDo,NA,ODo,Je,jA,VDo,Rfe,XDo,zDo,tn,QDo,Bfe,WDo,HDo,Pfe,UDo,JDo,$fe,YDo,KDo,ZDo,Se,b3,Ife,eGo,oGo,XD,rGo,tGo,aGo,F3,qfe,nGo,sGo,zD,lGo,iGo,dGo,v3,Nfe,cGo,fGo,QD,mGo,gGo,hGo,T3,jfe,pGo,_Go,WD,uGo,bGo,FGo,M3,Dfe,vGo,TGo,HD,MGo,EGo,CGo,E3,Gfe,wGo,AGo,UD,yGo,LGo,xGo,C3,Ofe,kGo,SGo,JD,RGo,BGo,PGo,w3,Vfe,$Go,IGo,YD,qGo,NGo,jGo,A3,DGo,Xfe,GGo,OGo,zfe,VGo,XGo,Qfe,zGo,QGo,DA,RRe,Nd,y3,Wfe,GA,WGo,Hfe,HGo,BRe,cr,OA,UGo,jd,JGo,KD,YGo,KGo,ZD,ZGo,eOo,oOo,VA,rOo,Ufe,tOo,aOo,nOo,at,XA,sOo,Jfe,lOo,iOo,Dd,dOo,Yfe,cOo,fOo,eG,mOo,gOo,hOo,Kfe,pOo,_Oo,zA,uOo,Ye,QA,bOo,Zfe,FOo,vOo,an,TOo,eme,MOo,EOo,ome,COo,wOo,rme,AOo,yOo,LOo,nn,L3,tme,xOo,kOo,oG,SOo,ROo,BOo,x3,ame,POo,$Oo,rG,IOo,qOo,NOo,k3,nme,jOo,DOo,tG,GOo,OOo,VOo,S3,sme,XOo,zOo,aG,QOo,WOo,HOo,R3,UOo,lme,JOo,YOo,ime,KOo,ZOo,dme,eVo,oVo,WA,PRe,Gd,B3,cme,HA,rVo,fme,tVo,$Re,fr,UA,aVo,Od,nVo,nG,sVo,lVo,sG,iVo,dVo,cVo,JA,fVo,mme,mVo,gVo,hVo,nt,YA,pVo,gme,_Vo,uVo,Vd,bVo,hme,FVo,vVo,lG,TVo,MVo,EVo,pme,CVo,wVo,KA,AVo,Ke,ZA,yVo,_me,LVo,xVo,sn,kVo,ume,SVo,RVo,bme,BVo,PVo,Fme,$Vo,IVo,qVo,Re,P3,vme,NVo,jVo,iG,DVo,GVo,OVo,$3,Tme,VVo,XVo,dG,zVo,QVo,WVo,I3,Mme,HVo,UVo,cG,JVo,YVo,KVo,q3,Eme,ZVo,eXo,fG,oXo,rXo,tXo,N3,Cme,aXo,nXo,mG,sXo,lXo,iXo,j3,wme,dXo,cXo,gG,fXo,mXo,gXo,D3,Ame,hXo,pXo,hG,_Xo,uXo,bXo,G3,yme,FXo,vXo,pG,TXo,MXo,EXo,O3,CXo,Lme,wXo,AXo,xme,yXo,LXo,kme,xXo,kXo,e0,IRe,Xd,V3,Sme,o0,SXo,Rme,RXo,qRe,mr,r0,BXo,zd,PXo,_G,$Xo,IXo,uG,qXo,NXo,jXo,t0,DXo,Bme,GXo,OXo,VXo,st,a0,XXo,Pme,zXo,QXo,Qd,WXo,$me,HXo,UXo,bG,JXo,YXo,KXo,Ime,ZXo,ezo,n0,ozo,Ze,s0,rzo,qme,tzo,azo,ln,nzo,Nme,szo,lzo,jme,izo,dzo,Dme,czo,fzo,mzo,l0,X3,Gme,gzo,hzo,FG,pzo,_zo,uzo,z3,Ome,bzo,Fzo,vG,vzo,Tzo,Mzo,Q3,Ezo,Vme,Czo,wzo,Xme,Azo,yzo,zme,Lzo,xzo,i0,NRe,Wd,W3,Qme,d0,kzo,Wme,Szo,jRe,gr,c0,Rzo,Hd,Bzo,TG,Pzo,$zo,MG,Izo,qzo,Nzo,f0,jzo,Hme,Dzo,Gzo,Ozo,lt,m0,Vzo,Ume,Xzo,zzo,Ud,Qzo,Jme,Wzo,Hzo,EG,Uzo,Jzo,Yzo,Yme,Kzo,Zzo,g0,eQo,eo,h0,oQo,Kme,rQo,tQo,dn,aQo,Zme,nQo,sQo,ege,lQo,iQo,oge,dQo,cQo,fQo,cn,H3,rge,mQo,gQo,CG,hQo,pQo,_Qo,U3,tge,uQo,bQo,wG,FQo,vQo,TQo,J3,age,MQo,EQo,AG,CQo,wQo,AQo,Y3,nge,yQo,LQo,yG,xQo,kQo,SQo,K3,RQo,sge,BQo,PQo,lge,$Qo,IQo,ige,qQo,NQo,p0,DRe,Jd,Z3,dge,_0,jQo,cge,DQo,GRe,hr,u0,GQo,Yd,OQo,LG,VQo,XQo,xG,zQo,QQo,WQo,b0,HQo,fge,UQo,JQo,YQo,it,F0,KQo,mge,ZQo,eWo,Kd,oWo,gge,rWo,tWo,kG,aWo,nWo,sWo,hge,lWo,iWo,v0,dWo,oo,T0,cWo,pge,fWo,mWo,fn,gWo,_ge,hWo,pWo,uge,_Wo,uWo,bge,bWo,FWo,vWo,Zd,e2,Fge,TWo,MWo,SG,EWo,CWo,wWo,o2,vge,AWo,yWo,RG,LWo,xWo,kWo,r2,Tge,SWo,RWo,BG,BWo,PWo,$Wo,t2,IWo,Mge,qWo,NWo,Ege,jWo,DWo,Cge,GWo,OWo,M0,ORe,ec,a2,wge,E0,VWo,Age,XWo,VRe,pr,C0,zWo,oc,QWo,PG,WWo,HWo,$G,UWo,JWo,YWo,w0,KWo,yge,ZWo,eHo,oHo,dt,A0,rHo,Lge,tHo,aHo,rc,nHo,xge,sHo,lHo,IG,iHo,dHo,cHo,kge,fHo,mHo,y0,gHo,ro,L0,hHo,Sge,pHo,_Ho,mn,uHo,Rge,bHo,FHo,Bge,vHo,THo,Pge,MHo,EHo,CHo,$ge,n2,Ige,wHo,AHo,qG,yHo,LHo,xHo,s2,kHo,qge,SHo,RHo,Nge,BHo,PHo,jge,$Ho,IHo,x0,XRe,tc,l2,Dge,k0,qHo,Gge,NHo,zRe,_r,S0,jHo,ac,DHo,NG,GHo,OHo,jG,VHo,XHo,zHo,R0,QHo,Oge,WHo,HHo,UHo,ct,B0,JHo,Vge,YHo,KHo,nc,ZHo,Xge,eUo,oUo,DG,rUo,tUo,aUo,zge,nUo,sUo,P0,lUo,to,$0,iUo,Qge,dUo,cUo,gn,fUo,Wge,mUo,gUo,Hge,hUo,pUo,Uge,_Uo,uUo,bUo,Jge,i2,Yge,FUo,vUo,GG,TUo,MUo,EUo,d2,CUo,Kge,wUo,AUo,Zge,yUo,LUo,ehe,xUo,kUo,I0,QRe,sc,c2,ohe,q0,SUo,rhe,RUo,WRe,ur,N0,BUo,lc,PUo,OG,$Uo,IUo,VG,qUo,NUo,jUo,j0,DUo,the,GUo,OUo,VUo,ft,D0,XUo,ahe,zUo,QUo,ic,WUo,nhe,HUo,UUo,XG,JUo,YUo,KUo,she,ZUo,eJo,G0,oJo,ao,O0,rJo,lhe,tJo,aJo,hn,nJo,ihe,sJo,lJo,dhe,iJo,dJo,che,cJo,fJo,mJo,dc,f2,fhe,gJo,hJo,zG,pJo,_Jo,uJo,m2,mhe,bJo,FJo,QG,vJo,TJo,MJo,g2,ghe,EJo,CJo,WG,wJo,AJo,yJo,h2,LJo,hhe,xJo,kJo,phe,SJo,RJo,_he,BJo,PJo,V0,HRe,cc,p2,uhe,X0,$Jo,bhe,IJo,URe,br,z0,qJo,fc,NJo,HG,jJo,DJo,UG,GJo,OJo,VJo,Q0,XJo,Fhe,zJo,QJo,WJo,mt,W0,HJo,vhe,UJo,JJo,mc,YJo,The,KJo,ZJo,JG,eYo,oYo,rYo,Mhe,tYo,aYo,H0,nYo,no,U0,sYo,Ehe,lYo,iYo,pn,dYo,Che,cYo,fYo,whe,mYo,gYo,Ahe,hYo,pYo,_Yo,yhe,_2,Lhe,uYo,bYo,YG,FYo,vYo,TYo,u2,MYo,xhe,EYo,CYo,khe,wYo,AYo,She,yYo,LYo,J0,JRe,gc,b2,Rhe,Y0,xYo,Bhe,kYo,YRe,Fr,K0,SYo,hc,RYo,KG,BYo,PYo,ZG,$Yo,IYo,qYo,Z0,NYo,Phe,jYo,DYo,GYo,gt,ey,OYo,$he,VYo,XYo,pc,zYo,Ihe,QYo,WYo,eO,HYo,UYo,JYo,qhe,YYo,KYo,oy,ZYo,ho,ry,eKo,Nhe,oKo,rKo,_n,tKo,jhe,aKo,nKo,Dhe,sKo,lKo,Ghe,iKo,dKo,cKo,L,F2,Ohe,fKo,mKo,oO,gKo,hKo,pKo,v2,Vhe,_Ko,uKo,rO,bKo,FKo,vKo,T2,Xhe,TKo,MKo,tO,EKo,CKo,wKo,M2,zhe,AKo,yKo,aO,LKo,xKo,kKo,E2,Qhe,SKo,RKo,nO,BKo,PKo,$Ko,C2,Whe,IKo,qKo,sO,NKo,jKo,DKo,w2,Hhe,GKo,OKo,lO,VKo,XKo,zKo,A2,Uhe,QKo,WKo,iO,HKo,UKo,JKo,y2,Jhe,YKo,KKo,dO,ZKo,eZo,oZo,L2,Yhe,rZo,tZo,cO,aZo,nZo,sZo,x2,Khe,lZo,iZo,fO,dZo,cZo,fZo,k2,Zhe,mZo,gZo,mO,hZo,pZo,_Zo,S2,epe,uZo,bZo,gO,FZo,vZo,TZo,R2,ope,MZo,EZo,hO,CZo,wZo,AZo,B2,rpe,yZo,LZo,pO,xZo,kZo,SZo,P2,tpe,RZo,BZo,_O,PZo,$Zo,IZo,Gs,ape,qZo,NZo,uO,jZo,DZo,bO,GZo,OZo,VZo,$2,npe,XZo,zZo,FO,QZo,WZo,HZo,I2,spe,UZo,JZo,vO,YZo,KZo,ZZo,q2,lpe,eer,oer,TO,rer,ter,aer,N2,ipe,ner,ser,MO,ler,ier,der,j2,dpe,cer,fer,EO,mer,ger,her,D2,cpe,per,_er,CO,uer,ber,Fer,G2,fpe,ver,Ter,wO,Mer,Eer,Cer,O2,mpe,wer,Aer,AO,yer,Ler,xer,V2,gpe,ker,Ser,yO,Rer,Ber,Per,X2,hpe,$er,Ier,LO,qer,Ner,jer,z2,ppe,Der,Ger,xO,Oer,Ver,Xer,Q2,_pe,zer,Qer,kO,Wer,Her,Uer,W2,upe,Jer,Yer,SO,Ker,Zer,eor,H2,bpe,oor,ror,RO,tor,aor,nor,U2,Fpe,sor,lor,BO,ior,dor,cor,J2,vpe,mor,gor,PO,hor,por,_or,Y2,Tpe,uor,bor,$O,For,vor,Tor,K2,Mpe,Mor,Eor,IO,Cor,wor,Aor,Z2,Epe,yor,Lor,qO,xor,kor,Sor,eF,Cpe,Ror,Bor,NO,Por,$or,Ior,oF,wpe,qor,Nor,jO,jor,Dor,Gor,rF,Ape,Oor,Vor,DO,Xor,zor,Qor,tF,ype,Wor,Hor,GO,Uor,Jor,Yor,aF,Lpe,Kor,Zor,OO,err,orr,rrr,nF,xpe,trr,arr,VO,nrr,srr,lrr,sF,kpe,irr,drr,XO,crr,frr,mrr,lF,Spe,grr,hrr,zO,prr,_rr,urr,iF,Rpe,brr,Frr,QO,vrr,Trr,Mrr,Bpe,Err,Crr,ty,KRe,_c,dF,Ppe,ay,wrr,$pe,Arr,ZRe,vr,ny,yrr,uc,Lrr,WO,xrr,krr,HO,Srr,Rrr,Brr,sy,Prr,Ipe,$rr,Irr,qrr,ht,ly,Nrr,qpe,jrr,Drr,bc,Grr,Npe,Orr,Vrr,UO,Xrr,zrr,Qrr,jpe,Wrr,Hrr,iy,Urr,po,dy,Jrr,Dpe,Yrr,Krr,un,Zrr,Gpe,etr,otr,Ope,rtr,ttr,Vpe,atr,ntr,str,H,cF,Xpe,ltr,itr,JO,dtr,ctr,ftr,fF,zpe,mtr,gtr,YO,htr,ptr,_tr,mF,Qpe,utr,btr,KO,Ftr,vtr,Ttr,gF,Wpe,Mtr,Etr,ZO,Ctr,wtr,Atr,hF,Hpe,ytr,Ltr,eV,xtr,ktr,Str,pF,Upe,Rtr,Btr,oV,Ptr,$tr,Itr,_F,Jpe,qtr,Ntr,rV,jtr,Dtr,Gtr,uF,Ype,Otr,Vtr,tV,Xtr,ztr,Qtr,bF,Kpe,Wtr,Htr,aV,Utr,Jtr,Ytr,FF,Zpe,Ktr,Ztr,nV,ear,oar,rar,vF,e_e,tar,aar,sV,nar,sar,lar,TF,o_e,iar,dar,lV,car,far,mar,MF,r_e,gar,har,iV,par,_ar,uar,EF,t_e,bar,Far,dV,Tar,Mar,Ear,CF,a_e,Car,war,cV,Aar,yar,Lar,wF,n_e,xar,kar,fV,Sar,Rar,Bar,AF,s_e,Par,$ar,mV,Iar,qar,Nar,yF,l_e,jar,Dar,gV,Gar,Oar,Var,LF,i_e,Xar,zar,hV,Qar,War,Har,xF,d_e,Uar,Jar,pV,Yar,Kar,Zar,kF,c_e,enr,onr,_V,rnr,tnr,anr,SF,f_e,nnr,snr,uV,lnr,inr,dnr,RF,m_e,cnr,fnr,bV,mnr,gnr,hnr,g_e,pnr,_nr,cy,eBe,Fc,BF,h_e,fy,unr,p_e,bnr,oBe,Tr,my,Fnr,vc,vnr,FV,Tnr,Mnr,vV,Enr,Cnr,wnr,gy,Anr,__e,ynr,Lnr,xnr,pt,hy,knr,u_e,Snr,Rnr,Tc,Bnr,b_e,Pnr,$nr,TV,Inr,qnr,Nnr,F_e,jnr,Dnr,py,Gnr,_o,_y,Onr,v_e,Vnr,Xnr,bn,znr,T_e,Qnr,Wnr,M_e,Hnr,Unr,E_e,Jnr,Ynr,Knr,de,PF,C_e,Znr,esr,MV,osr,rsr,tsr,$F,w_e,asr,nsr,EV,ssr,lsr,isr,IF,A_e,dsr,csr,CV,fsr,msr,gsr,qF,y_e,hsr,psr,wV,_sr,usr,bsr,NF,L_e,Fsr,vsr,AV,Tsr,Msr,Esr,jF,x_e,Csr,wsr,yV,Asr,ysr,Lsr,DF,k_e,xsr,ksr,LV,Ssr,Rsr,Bsr,GF,S_e,Psr,$sr,xV,Isr,qsr,Nsr,OF,R_e,jsr,Dsr,kV,Gsr,Osr,Vsr,VF,B_e,Xsr,zsr,SV,Qsr,Wsr,Hsr,XF,P_e,Usr,Jsr,RV,Ysr,Ksr,Zsr,zF,$_e,elr,olr,BV,rlr,tlr,alr,QF,I_e,nlr,slr,PV,llr,ilr,dlr,q_e,clr,flr,uy,rBe,Mc,WF,N_e,by,mlr,j_e,glr,tBe,Mr,Fy,hlr,Ec,plr,$V,_lr,ulr,IV,blr,Flr,vlr,vy,Tlr,D_e,Mlr,Elr,Clr,_t,Ty,wlr,G_e,Alr,ylr,Cc,Llr,O_e,xlr,klr,qV,Slr,Rlr,Blr,V_e,Plr,$lr,My,Ilr,uo,Ey,qlr,X_e,Nlr,jlr,Fn,Dlr,z_e,Glr,Olr,Q_e,Vlr,Xlr,W_e,zlr,Qlr,Wlr,Cy,HF,H_e,Hlr,Ulr,NV,Jlr,Ylr,Klr,UF,U_e,Zlr,eir,jV,oir,rir,tir,J_e,air,nir,wy,aBe,wc,JF,Y_e,Ay,sir,K_e,lir,nBe,Er,yy,iir,Ac,dir,DV,cir,fir,GV,mir,gir,hir,Ly,pir,Z_e,_ir,uir,bir,ut,xy,Fir,eue,vir,Tir,yc,Mir,oue,Eir,Cir,OV,wir,Air,yir,rue,Lir,xir,ky,kir,bo,Sy,Sir,tue,Rir,Bir,vn,Pir,aue,$ir,Iir,nue,qir,Nir,sue,jir,Dir,Gir,J,YF,lue,Oir,Vir,VV,Xir,zir,Qir,KF,iue,Wir,Hir,XV,Uir,Jir,Yir,ZF,due,Kir,Zir,zV,edr,odr,rdr,ev,cue,tdr,adr,QV,ndr,sdr,ldr,ov,fue,idr,ddr,WV,cdr,fdr,mdr,rv,mue,gdr,hdr,HV,pdr,_dr,udr,tv,gue,bdr,Fdr,UV,vdr,Tdr,Mdr,av,hue,Edr,Cdr,JV,wdr,Adr,ydr,nv,pue,Ldr,xdr,YV,kdr,Sdr,Rdr,sv,_ue,Bdr,Pdr,KV,$dr,Idr,qdr,lv,uue,Ndr,jdr,ZV,Ddr,Gdr,Odr,iv,bue,Vdr,Xdr,eX,zdr,Qdr,Wdr,dv,Fue,Hdr,Udr,oX,Jdr,Ydr,Kdr,cv,vue,Zdr,ecr,rX,ocr,rcr,tcr,fv,Tue,acr,ncr,tX,scr,lcr,icr,mv,Mue,dcr,ccr,aX,fcr,mcr,gcr,gv,Eue,hcr,pcr,nX,_cr,ucr,bcr,hv,Cue,Fcr,vcr,sX,Tcr,Mcr,Ecr,pv,wue,Ccr,wcr,lX,Acr,ycr,Lcr,_v,Aue,xcr,kcr,iX,Scr,Rcr,Bcr,yue,Pcr,$cr,Ry,sBe,Lc,uv,Lue,By,Icr,xue,qcr,lBe,Cr,Py,Ncr,xc,jcr,dX,Dcr,Gcr,cX,Ocr,Vcr,Xcr,$y,zcr,kue,Qcr,Wcr,Hcr,bt,Iy,Ucr,Sue,Jcr,Ycr,kc,Kcr,Rue,Zcr,efr,fX,ofr,rfr,tfr,Bue,afr,nfr,qy,sfr,Fo,Ny,lfr,Pue,ifr,dfr,Tn,cfr,$ue,ffr,mfr,Iue,gfr,hfr,que,pfr,_fr,ufr,ue,bv,Nue,bfr,Ffr,mX,vfr,Tfr,Mfr,Fv,jue,Efr,Cfr,gX,wfr,Afr,yfr,vv,Due,Lfr,xfr,hX,kfr,Sfr,Rfr,Tv,Gue,Bfr,Pfr,pX,$fr,Ifr,qfr,Mv,Oue,Nfr,jfr,_X,Dfr,Gfr,Ofr,Ev,Vue,Vfr,Xfr,uX,zfr,Qfr,Wfr,Cv,Xue,Hfr,Ufr,bX,Jfr,Yfr,Kfr,wv,zue,Zfr,emr,FX,omr,rmr,tmr,Av,Que,amr,nmr,vX,smr,lmr,imr,yv,Wue,dmr,cmr,TX,fmr,mmr,gmr,Hue,hmr,pmr,jy,iBe,Sc,Lv,Uue,Dy,_mr,Jue,umr,dBe,wr,Gy,bmr,Rc,Fmr,MX,vmr,Tmr,EX,Mmr,Emr,Cmr,Oy,wmr,Yue,Amr,ymr,Lmr,Ft,Vy,xmr,Kue,kmr,Smr,Bc,Rmr,Zue,Bmr,Pmr,CX,$mr,Imr,qmr,e1e,Nmr,jmr,Xy,Dmr,vo,zy,Gmr,o1e,Omr,Vmr,Mn,Xmr,r1e,zmr,Qmr,t1e,Wmr,Hmr,a1e,Umr,Jmr,Ymr,V,xv,n1e,Kmr,Zmr,wX,egr,ogr,rgr,kv,s1e,tgr,agr,AX,ngr,sgr,lgr,Sv,l1e,igr,dgr,yX,cgr,fgr,mgr,Rv,i1e,ggr,hgr,LX,pgr,_gr,ugr,Bv,d1e,bgr,Fgr,xX,vgr,Tgr,Mgr,Pv,c1e,Egr,Cgr,kX,wgr,Agr,ygr,$v,f1e,Lgr,xgr,SX,kgr,Sgr,Rgr,Iv,m1e,Bgr,Pgr,RX,$gr,Igr,qgr,qv,g1e,Ngr,jgr,BX,Dgr,Ggr,Ogr,Nv,h1e,Vgr,Xgr,PX,zgr,Qgr,Wgr,jv,p1e,Hgr,Ugr,$X,Jgr,Ygr,Kgr,Dv,_1e,Zgr,ehr,IX,ohr,rhr,thr,Gv,u1e,ahr,nhr,qX,shr,lhr,ihr,Ov,b1e,dhr,chr,NX,fhr,mhr,ghr,Vv,F1e,hhr,phr,jX,_hr,uhr,bhr,Xv,v1e,Fhr,vhr,DX,Thr,Mhr,Ehr,zv,T1e,Chr,whr,GX,Ahr,yhr,Lhr,Qv,M1e,xhr,khr,OX,Shr,Rhr,Bhr,Wv,E1e,Phr,$hr,VX,Ihr,qhr,Nhr,Hv,C1e,jhr,Dhr,XX,Ghr,Ohr,Vhr,Uv,w1e,Xhr,zhr,zX,Qhr,Whr,Hhr,Jv,A1e,Uhr,Jhr,QX,Yhr,Khr,Zhr,Yv,y1e,epr,opr,WX,rpr,tpr,apr,Kv,L1e,npr,spr,HX,lpr,ipr,dpr,Zv,x1e,cpr,fpr,UX,mpr,gpr,hpr,e6,k1e,ppr,_pr,JX,upr,bpr,Fpr,S1e,vpr,Tpr,Qy,cBe,Pc,o6,R1e,Wy,Mpr,B1e,Epr,fBe,Ar,Hy,Cpr,$c,wpr,YX,Apr,ypr,KX,Lpr,xpr,kpr,Uy,Spr,P1e,Rpr,Bpr,Ppr,vt,Jy,$pr,$1e,Ipr,qpr,Ic,Npr,I1e,jpr,Dpr,ZX,Gpr,Opr,Vpr,q1e,Xpr,zpr,Yy,Qpr,To,Ky,Wpr,N1e,Hpr,Upr,En,Jpr,j1e,Ypr,Kpr,D1e,Zpr,e_r,G1e,o_r,r_r,t_r,ae,r6,O1e,a_r,n_r,ez,s_r,l_r,i_r,t6,V1e,d_r,c_r,oz,f_r,m_r,g_r,a6,X1e,h_r,p_r,rz,__r,u_r,b_r,n6,z1e,F_r,v_r,tz,T_r,M_r,E_r,s6,Q1e,C_r,w_r,az,A_r,y_r,L_r,l6,W1e,x_r,k_r,nz,S_r,R_r,B_r,i6,H1e,P_r,$_r,sz,I_r,q_r,N_r,d6,U1e,j_r,D_r,lz,G_r,O_r,V_r,c6,J1e,X_r,z_r,iz,Q_r,W_r,H_r,f6,Y1e,U_r,J_r,dz,Y_r,K_r,Z_r,m6,K1e,eur,our,cz,rur,tur,aur,g6,Z1e,nur,sur,fz,lur,iur,dur,h6,e4e,cur,fur,mz,mur,gur,hur,p6,o4e,pur,_ur,gz,uur,bur,Fur,_6,r4e,vur,Tur,hz,Mur,Eur,Cur,u6,t4e,wur,Aur,pz,yur,Lur,xur,b6,a4e,kur,Sur,_z,Rur,Bur,Pur,n4e,$ur,Iur,Zy,mBe,qc,F6,s4e,eL,qur,l4e,Nur,gBe,yr,oL,jur,Nc,Dur,uz,Gur,Our,bz,Vur,Xur,zur,rL,Qur,i4e,Wur,Hur,Uur,Tt,tL,Jur,d4e,Yur,Kur,jc,Zur,c4e,e1r,o1r,Fz,r1r,t1r,a1r,f4e,n1r,s1r,aL,l1r,Mo,nL,i1r,m4e,d1r,c1r,Cn,f1r,g4e,m1r,g1r,h4e,h1r,p1r,p4e,_1r,u1r,b1r,_4e,v6,u4e,F1r,v1r,vz,T1r,M1r,E1r,b4e,C1r,w1r,sL,hBe,Dc,T6,F4e,lL,A1r,v4e,y1r,pBe,Lr,iL,L1r,Gc,x1r,Tz,k1r,S1r,Mz,R1r,B1r,P1r,dL,$1r,T4e,I1r,q1r,N1r,Mt,cL,j1r,M4e,D1r,G1r,Oc,O1r,E4e,V1r,X1r,Ez,z1r,Q1r,W1r,C4e,H1r,U1r,fL,J1r,Eo,mL,Y1r,w4e,K1r,Z1r,wn,e4r,A4e,o4r,r4r,y4e,t4r,a4r,L4e,n4r,s4r,l4r,Y,M6,x4e,i4r,d4r,Cz,c4r,f4r,m4r,E6,k4e,g4r,h4r,wz,p4r,_4r,u4r,C6,S4e,b4r,F4r,Az,v4r,T4r,M4r,w6,R4e,E4r,C4r,yz,w4r,A4r,y4r,A6,B4e,L4r,x4r,Lz,k4r,S4r,R4r,y6,P4e,B4r,P4r,xz,$4r,I4r,q4r,L6,$4e,N4r,j4r,kz,D4r,G4r,O4r,x6,I4e,V4r,X4r,Sz,z4r,Q4r,W4r,k6,q4e,H4r,U4r,Rz,J4r,Y4r,K4r,S6,N4e,Z4r,ebr,Bz,obr,rbr,tbr,R6,j4e,abr,nbr,Pz,sbr,lbr,ibr,B6,D4e,dbr,cbr,$z,fbr,mbr,gbr,P6,G4e,hbr,pbr,Iz,_br,ubr,bbr,$6,O4e,Fbr,vbr,qz,Tbr,Mbr,Ebr,I6,V4e,Cbr,wbr,Nz,Abr,ybr,Lbr,q6,X4e,xbr,kbr,jz,Sbr,Rbr,Bbr,N6,z4e,Pbr,$br,Dz,Ibr,qbr,Nbr,j6,Q4e,jbr,Dbr,Gz,Gbr,Obr,Vbr,D6,W4e,Xbr,zbr,Oz,Qbr,Wbr,Hbr,G6,H4e,Ubr,Jbr,Vz,Ybr,Kbr,Zbr,U4e,e5r,o5r,gL,_Be,Vc,O6,J4e,hL,r5r,Y4e,t5r,uBe,xr,pL,a5r,Xc,n5r,Xz,s5r,l5r,zz,i5r,d5r,c5r,_L,f5r,K4e,m5r,g5r,h5r,Et,uL,p5r,Z4e,_5r,u5r,zc,b5r,ebe,F5r,v5r,Qz,T5r,M5r,E5r,obe,C5r,w5r,bL,A5r,Co,FL,y5r,rbe,L5r,x5r,An,k5r,tbe,S5r,R5r,abe,B5r,P5r,nbe,$5r,I5r,q5r,K,V6,sbe,N5r,j5r,Wz,D5r,G5r,O5r,X6,lbe,V5r,X5r,Hz,z5r,Q5r,W5r,z6,ibe,H5r,U5r,Uz,J5r,Y5r,K5r,Q6,dbe,Z5r,e3r,Jz,o3r,r3r,t3r,W6,cbe,a3r,n3r,Yz,s3r,l3r,i3r,H6,fbe,d3r,c3r,Kz,f3r,m3r,g3r,U6,mbe,h3r,p3r,Zz,_3r,u3r,b3r,J6,gbe,F3r,v3r,eQ,T3r,M3r,E3r,Y6,hbe,C3r,w3r,oQ,A3r,y3r,L3r,K6,pbe,x3r,k3r,rQ,S3r,R3r,B3r,Z6,_be,P3r,$3r,tQ,I3r,q3r,N3r,eT,ube,j3r,D3r,aQ,G3r,O3r,V3r,oT,bbe,X3r,z3r,nQ,Q3r,W3r,H3r,rT,Fbe,U3r,J3r,sQ,Y3r,K3r,Z3r,tT,vbe,e2r,o2r,lQ,r2r,t2r,a2r,aT,Tbe,n2r,s2r,iQ,l2r,i2r,d2r,nT,Mbe,c2r,f2r,dQ,m2r,g2r,h2r,sT,Ebe,p2r,_2r,cQ,u2r,b2r,F2r,lT,Cbe,v2r,T2r,fQ,M2r,E2r,C2r,iT,wbe,w2r,A2r,mQ,y2r,L2r,x2r,Abe,k2r,S2r,vL,bBe,Qc,dT,ybe,TL,R2r,Lbe,B2r,FBe,kr,ML,P2r,Wc,$2r,gQ,I2r,q2r,hQ,N2r,j2r,D2r,EL,G2r,xbe,O2r,V2r,X2r,Ct,CL,z2r,kbe,Q2r,W2r,Hc,H2r,Sbe,U2r,J2r,pQ,Y2r,K2r,Z2r,Rbe,eFr,oFr,wL,rFr,wo,AL,tFr,Bbe,aFr,nFr,yn,sFr,Pbe,lFr,iFr,$be,dFr,cFr,Ibe,fFr,mFr,gFr,qbe,cT,Nbe,hFr,pFr,_Q,_Fr,uFr,bFr,jbe,FFr,vFr,yL,vBe,Uc,fT,Dbe,LL,TFr,Gbe,MFr,TBe,Sr,xL,EFr,Jc,CFr,uQ,wFr,AFr,bQ,yFr,LFr,xFr,kL,kFr,Obe,SFr,RFr,BFr,wt,SL,PFr,Vbe,$Fr,IFr,Yc,qFr,Xbe,NFr,jFr,FQ,DFr,GFr,OFr,zbe,VFr,XFr,RL,zFr,Ao,BL,QFr,Qbe,WFr,HFr,Ln,UFr,Wbe,JFr,YFr,Hbe,KFr,ZFr,Ube,evr,ovr,rvr,Jbe,mT,Ybe,tvr,avr,vQ,nvr,svr,lvr,Kbe,ivr,dvr,PL,MBe,Kc,gT,Zbe,$L,cvr,e5e,fvr,EBe,Rr,IL,mvr,Zc,gvr,TQ,hvr,pvr,MQ,_vr,uvr,bvr,qL,Fvr,o5e,vvr,Tvr,Mvr,At,NL,Evr,r5e,Cvr,wvr,ef,Avr,t5e,yvr,Lvr,EQ,xvr,kvr,Svr,a5e,Rvr,Bvr,jL,Pvr,yo,DL,$vr,n5e,Ivr,qvr,xn,Nvr,s5e,jvr,Dvr,l5e,Gvr,Ovr,i5e,Vvr,Xvr,zvr,z,hT,d5e,Qvr,Wvr,CQ,Hvr,Uvr,Jvr,pT,c5e,Yvr,Kvr,wQ,Zvr,e6r,o6r,_T,f5e,r6r,t6r,AQ,a6r,n6r,s6r,uT,m5e,l6r,i6r,yQ,d6r,c6r,f6r,bT,g5e,m6r,g6r,LQ,h6r,p6r,_6r,FT,h5e,u6r,b6r,xQ,F6r,v6r,T6r,vT,p5e,M6r,E6r,kQ,C6r,w6r,A6r,TT,_5e,y6r,L6r,SQ,x6r,k6r,S6r,MT,u5e,R6r,B6r,RQ,P6r,$6r,I6r,ET,b5e,q6r,N6r,BQ,j6r,D6r,G6r,CT,F5e,O6r,V6r,PQ,X6r,z6r,Q6r,wT,v5e,W6r,H6r,$Q,U6r,J6r,Y6r,AT,T5e,K6r,Z6r,IQ,eTr,oTr,rTr,yT,M5e,tTr,aTr,qQ,nTr,sTr,lTr,LT,E5e,iTr,dTr,NQ,cTr,fTr,mTr,xT,C5e,gTr,hTr,jQ,pTr,_Tr,uTr,kT,w5e,bTr,FTr,DQ,vTr,TTr,MTr,ST,A5e,ETr,CTr,GQ,wTr,ATr,yTr,RT,y5e,LTr,xTr,OQ,kTr,STr,RTr,BT,L5e,BTr,PTr,VQ,$Tr,ITr,qTr,PT,x5e,NTr,jTr,XQ,DTr,GTr,OTr,$T,k5e,VTr,XTr,zQ,zTr,QTr,WTr,IT,S5e,HTr,UTr,QQ,JTr,YTr,KTr,qT,R5e,ZTr,eMr,WQ,oMr,rMr,tMr,NT,B5e,aMr,nMr,HQ,sMr,lMr,iMr,P5e,dMr,cMr,GL,CBe,of,jT,$5e,OL,fMr,I5e,mMr,wBe,Br,VL,gMr,rf,hMr,UQ,pMr,_Mr,JQ,uMr,bMr,FMr,XL,vMr,q5e,TMr,MMr,EMr,yt,zL,CMr,N5e,wMr,AMr,tf,yMr,j5e,LMr,xMr,YQ,kMr,SMr,RMr,D5e,BMr,PMr,QL,$Mr,Lo,WL,IMr,G5e,qMr,NMr,kn,jMr,O5e,DMr,GMr,V5e,OMr,VMr,X5e,XMr,zMr,QMr,ca,DT,z5e,WMr,HMr,KQ,UMr,JMr,YMr,GT,Q5e,KMr,ZMr,ZQ,eEr,oEr,rEr,OT,W5e,tEr,aEr,eW,nEr,sEr,lEr,VT,H5e,iEr,dEr,oW,cEr,fEr,mEr,XT,U5e,gEr,hEr,rW,pEr,_Er,uEr,J5e,bEr,FEr,HL,ABe,af,zT,Y5e,UL,vEr,K5e,TEr,yBe,Pr,JL,MEr,nf,EEr,tW,CEr,wEr,aW,AEr,yEr,LEr,YL,xEr,Z5e,kEr,SEr,REr,Lt,KL,BEr,e3e,PEr,$Er,sf,IEr,o3e,qEr,NEr,nW,jEr,DEr,GEr,r3e,OEr,VEr,ZL,XEr,xo,e8,zEr,t3e,QEr,WEr,Sn,HEr,a3e,UEr,JEr,n3e,YEr,KEr,s3e,ZEr,eCr,oCr,fe,QT,l3e,rCr,tCr,sW,aCr,nCr,sCr,WT,i3e,lCr,iCr,lW,dCr,cCr,fCr,HT,d3e,mCr,gCr,iW,hCr,pCr,_Cr,UT,c3e,uCr,bCr,dW,FCr,vCr,TCr,JT,f3e,MCr,ECr,cW,CCr,wCr,ACr,YT,m3e,yCr,LCr,fW,xCr,kCr,SCr,KT,g3e,RCr,BCr,mW,PCr,$Cr,ICr,ZT,h3e,qCr,NCr,gW,jCr,DCr,GCr,eM,p3e,OCr,VCr,hW,XCr,zCr,QCr,oM,_3e,WCr,HCr,pW,UCr,JCr,YCr,rM,u3e,KCr,ZCr,_W,ewr,owr,rwr,tM,b3e,twr,awr,uW,nwr,swr,lwr,F3e,iwr,dwr,o8,LBe,lf,aM,v3e,r8,cwr,T3e,fwr,xBe,$r,t8,mwr,df,gwr,bW,hwr,pwr,FW,_wr,uwr,bwr,a8,Fwr,M3e,vwr,Twr,Mwr,xt,n8,Ewr,E3e,Cwr,wwr,cf,Awr,C3e,ywr,Lwr,vW,xwr,kwr,Swr,w3e,Rwr,Bwr,s8,Pwr,ko,l8,$wr,A3e,Iwr,qwr,Rn,Nwr,y3e,jwr,Dwr,L3e,Gwr,Owr,x3e,Vwr,Xwr,zwr,be,nM,k3e,Qwr,Wwr,TW,Hwr,Uwr,Jwr,sM,S3e,Ywr,Kwr,MW,Zwr,eAr,oAr,lM,R3e,rAr,tAr,EW,aAr,nAr,sAr,iM,B3e,lAr,iAr,CW,dAr,cAr,fAr,dM,P3e,mAr,gAr,wW,hAr,pAr,_Ar,cM,$3e,uAr,bAr,AW,FAr,vAr,TAr,fM,I3e,MAr,EAr,yW,CAr,wAr,AAr,mM,q3e,yAr,LAr,LW,xAr,kAr,SAr,gM,N3e,RAr,BAr,xW,PAr,$Ar,IAr,hM,j3e,qAr,NAr,kW,jAr,DAr,GAr,D3e,OAr,VAr,i8,kBe,ff,pM,G3e,d8,XAr,O3e,zAr,SBe,Ir,c8,QAr,mf,WAr,SW,HAr,UAr,RW,JAr,YAr,KAr,f8,ZAr,V3e,e0r,o0r,r0r,kt,m8,t0r,X3e,a0r,n0r,gf,s0r,z3e,l0r,i0r,BW,d0r,c0r,f0r,Q3e,m0r,g0r,g8,h0r,So,h8,p0r,W3e,_0r,u0r,Bn,b0r,H3e,F0r,v0r,U3e,T0r,M0r,J3e,E0r,C0r,w0r,Ee,_M,Y3e,A0r,y0r,PW,L0r,x0r,k0r,uM,K3e,S0r,R0r,$W,B0r,P0r,$0r,bM,Z3e,I0r,q0r,IW,N0r,j0r,D0r,FM,e2e,G0r,O0r,qW,V0r,X0r,z0r,vM,o2e,Q0r,W0r,NW,H0r,U0r,J0r,TM,r2e,Y0r,K0r,jW,Z0r,eyr,oyr,MM,t2e,ryr,tyr,DW,ayr,nyr,syr,EM,a2e,lyr,iyr,GW,dyr,cyr,fyr,CM,n2e,myr,gyr,OW,hyr,pyr,_yr,s2e,uyr,byr,p8,RBe,hf,wM,l2e,_8,Fyr,i2e,vyr,BBe,qr,u8,Tyr,pf,Myr,VW,Eyr,Cyr,XW,wyr,Ayr,yyr,b8,Lyr,d2e,xyr,kyr,Syr,St,F8,Ryr,c2e,Byr,Pyr,_f,$yr,f2e,Iyr,qyr,zW,Nyr,jyr,Dyr,m2e,Gyr,Oyr,v8,Vyr,Ro,T8,Xyr,g2e,zyr,Qyr,Pn,Wyr,h2e,Hyr,Uyr,p2e,Jyr,Yyr,_2e,Kyr,Zyr,eLr,Fe,AM,u2e,oLr,rLr,QW,tLr,aLr,nLr,yM,b2e,sLr,lLr,WW,iLr,dLr,cLr,LM,F2e,fLr,mLr,HW,gLr,hLr,pLr,xM,v2e,_Lr,uLr,UW,bLr,FLr,vLr,kM,T2e,TLr,MLr,JW,ELr,CLr,wLr,SM,M2e,ALr,yLr,YW,LLr,xLr,kLr,RM,E2e,SLr,RLr,KW,BLr,PLr,$Lr,BM,C2e,ILr,qLr,ZW,NLr,jLr,DLr,PM,w2e,GLr,OLr,eH,VLr,XLr,zLr,$M,A2e,QLr,WLr,oH,HLr,ULr,JLr,y2e,YLr,KLr,M8,PBe,uf,IM,L2e,E8,ZLr,x2e,e8r,$Be,Nr,C8,o8r,bf,r8r,rH,t8r,a8r,tH,n8r,s8r,l8r,w8,i8r,k2e,d8r,c8r,f8r,Rt,A8,m8r,S2e,g8r,h8r,Ff,p8r,R2e,_8r,u8r,aH,b8r,F8r,v8r,B2e,T8r,M8r,y8,E8r,Bo,L8,C8r,P2e,w8r,A8r,$n,y8r,$2e,L8r,x8r,I2e,k8r,S8r,q2e,R8r,B8r,P8r,ve,qM,N2e,$8r,I8r,nH,q8r,N8r,j8r,NM,j2e,D8r,G8r,sH,O8r,V8r,X8r,jM,D2e,z8r,Q8r,lH,W8r,H8r,U8r,DM,G2e,J8r,Y8r,iH,K8r,Z8r,e7r,GM,O2e,o7r,r7r,dH,t7r,a7r,n7r,OM,V2e,s7r,l7r,cH,i7r,d7r,c7r,VM,X2e,f7r,m7r,fH,g7r,h7r,p7r,XM,z2e,_7r,u7r,mH,b7r,F7r,v7r,zM,Q2e,T7r,M7r,gH,E7r,C7r,w7r,QM,W2e,A7r,y7r,hH,L7r,x7r,k7r,H2e,S7r,R7r,x8,IBe,vf,WM,U2e,k8,B7r,J2e,P7r,qBe,jr,S8,$7r,Tf,I7r,pH,q7r,N7r,_H,j7r,D7r,G7r,R8,O7r,Y2e,V7r,X7r,z7r,Bt,B8,Q7r,K2e,W7r,H7r,Mf,U7r,Z2e,J7r,Y7r,uH,K7r,Z7r,e9r,eFe,o9r,r9r,P8,t9r,Po,$8,a9r,oFe,n9r,s9r,In,l9r,rFe,i9r,d9r,tFe,c9r,f9r,aFe,m9r,g9r,h9r,Be,HM,nFe,p9r,_9r,bH,u9r,b9r,F9r,UM,sFe,v9r,T9r,FH,M9r,E9r,C9r,JM,lFe,w9r,A9r,vH,y9r,L9r,x9r,YM,iFe,k9r,S9r,TH,R9r,B9r,P9r,KM,dFe,$9r,I9r,MH,q9r,N9r,j9r,ZM,cFe,D9r,G9r,EH,O9r,V9r,X9r,eE,fFe,z9r,Q9r,CH,W9r,H9r,U9r,oE,mFe,J9r,Y9r,wH,K9r,Z9r,exr,gFe,oxr,rxr,I8,NBe,Ef,rE,hFe,q8,txr,pFe,axr,jBe,Dr,N8,nxr,Cf,sxr,AH,lxr,ixr,yH,dxr,cxr,fxr,j8,mxr,_Fe,gxr,hxr,pxr,Pt,D8,_xr,uFe,uxr,bxr,wf,Fxr,bFe,vxr,Txr,LH,Mxr,Exr,Cxr,FFe,wxr,Axr,G8,yxr,$o,O8,Lxr,vFe,xxr,kxr,qn,Sxr,TFe,Rxr,Bxr,MFe,Pxr,$xr,EFe,Ixr,qxr,Nxr,Pe,tE,CFe,jxr,Dxr,xH,Gxr,Oxr,Vxr,aE,wFe,Xxr,zxr,kH,Qxr,Wxr,Hxr,nE,AFe,Uxr,Jxr,SH,Yxr,Kxr,Zxr,sE,yFe,ekr,okr,RH,rkr,tkr,akr,lE,LFe,nkr,skr,BH,lkr,ikr,dkr,iE,xFe,ckr,fkr,PH,mkr,gkr,hkr,dE,kFe,pkr,_kr,$H,ukr,bkr,Fkr,cE,SFe,vkr,Tkr,IH,Mkr,Ekr,Ckr,RFe,wkr,Akr,V8,DBe,Af,fE,BFe,X8,ykr,PFe,Lkr,GBe,Gr,z8,xkr,yf,kkr,qH,Skr,Rkr,NH,Bkr,Pkr,$kr,Q8,Ikr,$Fe,qkr,Nkr,jkr,$t,W8,Dkr,IFe,Gkr,Okr,Lf,Vkr,qFe,Xkr,zkr,jH,Qkr,Wkr,Hkr,NFe,Ukr,Jkr,H8,Ykr,Io,U8,Kkr,jFe,Zkr,eSr,Nn,oSr,DFe,rSr,tSr,GFe,aSr,nSr,OFe,sSr,lSr,iSr,VFe,mE,XFe,dSr,cSr,DH,fSr,mSr,gSr,zFe,hSr,pSr,J8,OBe,xf,gE,QFe,Y8,_Sr,WFe,uSr,VBe,Or,K8,bSr,kf,FSr,GH,vSr,TSr,OH,MSr,ESr,CSr,Z8,wSr,HFe,ASr,ySr,LSr,It,e7,xSr,UFe,kSr,SSr,Sf,RSr,JFe,BSr,PSr,VH,$Sr,ISr,qSr,YFe,NSr,jSr,o7,DSr,qo,r7,GSr,KFe,OSr,VSr,jn,XSr,ZFe,zSr,QSr,eve,WSr,HSr,ove,USr,JSr,YSr,t7,hE,rve,KSr,ZSr,XH,eRr,oRr,rRr,pE,tve,tRr,aRr,zH,nRr,sRr,lRr,ave,iRr,dRr,a7,XBe,Rf,_E,nve,n7,cRr,sve,fRr,zBe,Vr,s7,mRr,Bf,gRr,QH,hRr,pRr,WH,_Rr,uRr,bRr,l7,FRr,lve,vRr,TRr,MRr,qt,i7,ERr,ive,CRr,wRr,Pf,ARr,dve,yRr,LRr,HH,xRr,kRr,SRr,cve,RRr,BRr,d7,PRr,No,c7,$Rr,fve,IRr,qRr,Dn,NRr,mve,jRr,DRr,gve,GRr,ORr,hve,VRr,XRr,zRr,pve,uE,_ve,QRr,WRr,UH,HRr,URr,JRr,uve,YRr,KRr,f7,QBe;return ge=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),TC=new X({}),MC=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new ZRr({props:{warning:!0,$$slots:{default:[EEt]},$$scope:{ctx:If}}}),EC=new X({}),CC=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/configuration_auto.py#L541"}}),yC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/configuration_auto.py#L564",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),LC=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),xC=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/configuration_auto.py#L686",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),kC=new X({}),SC=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/tokenization_auto.py#L351"}}),PC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16543/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),$C=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),IC=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),qC=new X({}),NC=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),GC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16543/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Rh=new ZRr({props:{$$slots:{default:[CEt]},$$scope:{ctx:If}}}),OC=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),VC=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),XC=new X({}),zC=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/processing_auto.py#L70"}}),HC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Vh=new ZRr({props:{$$slots:{default:[wEt]},$$scope:{ctx:If}}}),UC=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),JC=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),YC=new X({}),KC=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L707"}}),ew=new E({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),ow=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),rw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aw=new X({}),nw=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L714"}}),lw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),iw=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),dw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cw=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fw=new X({}),mw=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L729"}}),hw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),pw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),_w=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bw=new X({}),Fw=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L736"}}),Tw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Mw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),Ew=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Cw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ww=new X({}),Aw=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L743"}}),Lw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),xw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),kw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Rw=new X({}),Bw=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L752"}}),$w=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Iw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),qw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Nw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jw=new X({}),Dw=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L786"}}),Ow=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Vw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),Xw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qw=new X({}),Ww=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L793"}}),Uw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),Jw=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),Yw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Kw=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zw=new X({}),eA=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L779"}}),rA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),tA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),aA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sA=new X({}),lA=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L761"}}),dA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),cA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),fA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gA=new X({}),hA=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L768"}}),_A=new E({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),uA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),bA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vA=new X({}),TA=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L802"}}),EA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),CA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),wA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),AA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yA=new X({}),LA=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L841"}}),kA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),SA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),RA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),BA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PA=new X({}),$A=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L848"}}),qA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),NA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),jA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),DA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GA=new X({}),OA=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L871"}}),XA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),zA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),QA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),WA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HA=new X({}),UA=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L855"}}),YA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),KA=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),ZA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e0=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o0=new X({}),r0=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L862"}}),a0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),n0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),s0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),i0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d0=new X({}),c0=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L880"}}),m0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),g0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),h0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),p0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_0=new X({}),u0=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L887"}}),F0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),v0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),T0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),M0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E0=new X({}),C0=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L834"}}),A0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),y0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),L0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k0=new X({}),S0=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L809"}}),B0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),P0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),$0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),I0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q0=new X({}),N0=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L816"}}),D0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),G0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),O0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),V0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X0=new X({}),z0=new E({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L825"}}),W0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),H0=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),U0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),J0=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y0=new X({}),K0=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),ey=new E({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),oy=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),ry=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ty=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ay=new X({}),ny=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),ly=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),iy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),dy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fy=new X({}),my=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),hy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),py=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),_y=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),by=new X({}),Fy=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),Ty=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),My=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),Ey=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ay=new X({}),yy=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L426"}}),xy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),ky=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),Sy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ry=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),By=new X({}),Py=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),Iy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),qy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),Ny=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dy=new X({}),Gy=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),Vy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Xy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),zy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Wy=new X({}),Hy=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),Jy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Yy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Ky=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Zy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eL=new X({}),oL=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L458"}}),tL=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),aL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),nL=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lL=new X({}),iL=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),cL=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),fL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),mL=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hL=new X({}),pL=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),uL=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),bL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),FL=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TL=new X({}),ML=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L419"}}),CL=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),wL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),AL=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LL=new X({}),xL=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),SL=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),RL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),BL=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),PL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$L=new X({}),IL=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),NL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),jL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),DL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),GL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OL=new X({}),VL=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),zL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),QL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),WL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),HL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UL=new X({}),JL=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),KL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),ZL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),e8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),o8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r8=new X({}),t8=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),n8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),s8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),l8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),i8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d8=new X({}),c8=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),m8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),g8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),h8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),p8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_8=new X({}),u8=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),F8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),v8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),T8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),M8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E8=new X({}),C8=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),A8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),y8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),L8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k8=new X({}),S8=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),B8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),P8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),$8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),I8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q8=new X({}),N8=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),D8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),G8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),O8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),V8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X8=new X({}),z8=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),W8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),H8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),U8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),J8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y8=new X({}),K8=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),e7=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),o7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),r7=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),a7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n7=new X({}),s7=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),i7=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),d7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),c7=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),f7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),ce=a("h1"),Ce=a("a"),lo=a("span"),f(ge.$$.fragment),Me=l(),Xo=a("span"),Ii=o("Auto Classes"),qf=l(),fa=a("p"),qi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),uC=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),bC=o("AutoConfig"),On=o(", "),Vn=a("a"),FC=o("AutoModel"),Di=o(`, and
`),Xn=a("a"),vC=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(Da.$$.fragment),fo=l(),_e=a("p"),d9=o("will create a model that is an instance of "),Oi=a("a"),c9=o("BertModel"),f9=o("."),zo=l(),Ga=a("p"),m9=o("There is one class of "),Df=a("code"),g9=o("AutoModel"),aIe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),zSe=l(),Vi=a("h2"),Gf=a("a"),VJ=a("span"),f(TC.$$.fragment),nIe=l(),XJ=a("span"),sIe=o("Extending the Auto Classes"),QSe=l(),zn=a("p"),lIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),zJ=a("code"),iIe=o("NewModel"),dIe=o(", make sure you have a "),QJ=a("code"),cIe=o("NewModelConfig"),fIe=o(` then you can add those to the auto
classes like this:`),WSe=l(),f(MC.$$.fragment),HSe=l(),h9=a("p"),mIe=o("You will then be able to use the auto classes like you would usually do!"),USe=l(),f(Of.$$.fragment),JSe=l(),Xi=a("h2"),Vf=a("a"),WJ=a("span"),f(EC.$$.fragment),gIe=l(),HJ=a("span"),hIe=o("AutoConfig"),YSe=l(),Qo=a("div"),f(CC.$$.fragment),pIe=l(),wC=a("p"),_Ie=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),p9=a("a"),uIe=o("from_pretrained()"),bIe=o(" class method."),FIe=l(),AC=a("p"),vIe=o("This class cannot be instantiated directly using "),UJ=a("code"),TIe=o("__init__()"),MIe=o(" (throws an error)."),EIe=l(),mo=a("div"),f(yC.$$.fragment),CIe=l(),JJ=a("p"),wIe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),AIe=l(),zi=a("p"),yIe=o("The configuration class to instantiate is selected based on the "),YJ=a("code"),LIe=o("model_type"),xIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),KJ=a("code"),kIe=o("pretrained_model_name_or_path"),SIe=o(":"),RIe=l(),F=a("ul"),Xf=a("li"),ZJ=a("strong"),BIe=o("albert"),PIe=o(" \u2014 "),_9=a("a"),$Ie=o("AlbertConfig"),IIe=o(" (ALBERT model)"),qIe=l(),zf=a("li"),eY=a("strong"),NIe=o("bart"),jIe=o(" \u2014 "),u9=a("a"),DIe=o("BartConfig"),GIe=o(" (BART model)"),OIe=l(),Qf=a("li"),oY=a("strong"),VIe=o("beit"),XIe=o(" \u2014 "),b9=a("a"),zIe=o("BeitConfig"),QIe=o(" (BEiT model)"),WIe=l(),Wf=a("li"),rY=a("strong"),HIe=o("bert"),UIe=o(" \u2014 "),F9=a("a"),JIe=o("BertConfig"),YIe=o(" (BERT model)"),KIe=l(),Hf=a("li"),tY=a("strong"),ZIe=o("bert-generation"),eqe=o(" \u2014 "),v9=a("a"),oqe=o("BertGenerationConfig"),rqe=o(" (Bert Generation model)"),tqe=l(),Uf=a("li"),aY=a("strong"),aqe=o("big_bird"),nqe=o(" \u2014 "),T9=a("a"),sqe=o("BigBirdConfig"),lqe=o(" (BigBird model)"),iqe=l(),Jf=a("li"),nY=a("strong"),dqe=o("bigbird_pegasus"),cqe=o(" \u2014 "),M9=a("a"),fqe=o("BigBirdPegasusConfig"),mqe=o(" (BigBirdPegasus model)"),gqe=l(),Yf=a("li"),sY=a("strong"),hqe=o("blenderbot"),pqe=o(" \u2014 "),E9=a("a"),_qe=o("BlenderbotConfig"),uqe=o(" (Blenderbot model)"),bqe=l(),Kf=a("li"),lY=a("strong"),Fqe=o("blenderbot-small"),vqe=o(" \u2014 "),C9=a("a"),Tqe=o("BlenderbotSmallConfig"),Mqe=o(" (BlenderbotSmall model)"),Eqe=l(),Zf=a("li"),iY=a("strong"),Cqe=o("camembert"),wqe=o(" \u2014 "),w9=a("a"),Aqe=o("CamembertConfig"),yqe=o(" (CamemBERT model)"),Lqe=l(),em=a("li"),dY=a("strong"),xqe=o("canine"),kqe=o(" \u2014 "),A9=a("a"),Sqe=o("CanineConfig"),Rqe=o(" (Canine model)"),Bqe=l(),om=a("li"),cY=a("strong"),Pqe=o("clip"),$qe=o(" \u2014 "),y9=a("a"),Iqe=o("CLIPConfig"),qqe=o(" (CLIP model)"),Nqe=l(),rm=a("li"),fY=a("strong"),jqe=o("convbert"),Dqe=o(" \u2014 "),L9=a("a"),Gqe=o("ConvBertConfig"),Oqe=o(" (ConvBERT model)"),Vqe=l(),tm=a("li"),mY=a("strong"),Xqe=o("convnext"),zqe=o(" \u2014 "),x9=a("a"),Qqe=o("ConvNextConfig"),Wqe=o(" (ConvNext model)"),Hqe=l(),am=a("li"),gY=a("strong"),Uqe=o("ctrl"),Jqe=o(" \u2014 "),k9=a("a"),Yqe=o("CTRLConfig"),Kqe=o(" (CTRL model)"),Zqe=l(),nm=a("li"),hY=a("strong"),eNe=o("data2vec-audio"),oNe=o(" \u2014 "),S9=a("a"),rNe=o("Data2VecAudioConfig"),tNe=o(" (Data2VecAudio model)"),aNe=l(),sm=a("li"),pY=a("strong"),nNe=o("data2vec-text"),sNe=o(" \u2014 "),R9=a("a"),lNe=o("Data2VecTextConfig"),iNe=o(" (Data2VecText model)"),dNe=l(),lm=a("li"),_Y=a("strong"),cNe=o("deberta"),fNe=o(" \u2014 "),B9=a("a"),mNe=o("DebertaConfig"),gNe=o(" (DeBERTa model)"),hNe=l(),im=a("li"),uY=a("strong"),pNe=o("deberta-v2"),_Ne=o(" \u2014 "),P9=a("a"),uNe=o("DebertaV2Config"),bNe=o(" (DeBERTa-v2 model)"),FNe=l(),dm=a("li"),bY=a("strong"),vNe=o("decision_transformer"),TNe=o(" \u2014 "),$9=a("a"),MNe=o("DecisionTransformerConfig"),ENe=o(" (Decision Transformer model)"),CNe=l(),cm=a("li"),FY=a("strong"),wNe=o("deit"),ANe=o(" \u2014 "),I9=a("a"),yNe=o("DeiTConfig"),LNe=o(" (DeiT model)"),xNe=l(),fm=a("li"),vY=a("strong"),kNe=o("detr"),SNe=o(" \u2014 "),q9=a("a"),RNe=o("DetrConfig"),BNe=o(" (DETR model)"),PNe=l(),mm=a("li"),TY=a("strong"),$Ne=o("distilbert"),INe=o(" \u2014 "),N9=a("a"),qNe=o("DistilBertConfig"),NNe=o(" (DistilBERT model)"),jNe=l(),gm=a("li"),MY=a("strong"),DNe=o("dpr"),GNe=o(" \u2014 "),j9=a("a"),ONe=o("DPRConfig"),VNe=o(" (DPR model)"),XNe=l(),hm=a("li"),EY=a("strong"),zNe=o("dpt"),QNe=o(" \u2014 "),D9=a("a"),WNe=o("DPTConfig"),HNe=o(" (DPT model)"),UNe=l(),pm=a("li"),CY=a("strong"),JNe=o("electra"),YNe=o(" \u2014 "),G9=a("a"),KNe=o("ElectraConfig"),ZNe=o(" (ELECTRA model)"),eje=l(),_m=a("li"),wY=a("strong"),oje=o("encoder-decoder"),rje=o(" \u2014 "),O9=a("a"),tje=o("EncoderDecoderConfig"),aje=o(" (Encoder decoder model)"),nje=l(),um=a("li"),AY=a("strong"),sje=o("flaubert"),lje=o(" \u2014 "),V9=a("a"),ije=o("FlaubertConfig"),dje=o(" (FlauBERT model)"),cje=l(),bm=a("li"),yY=a("strong"),fje=o("fnet"),mje=o(" \u2014 "),X9=a("a"),gje=o("FNetConfig"),hje=o(" (FNet model)"),pje=l(),Fm=a("li"),LY=a("strong"),_je=o("fsmt"),uje=o(" \u2014 "),z9=a("a"),bje=o("FSMTConfig"),Fje=o(" (FairSeq Machine-Translation model)"),vje=l(),vm=a("li"),xY=a("strong"),Tje=o("funnel"),Mje=o(" \u2014 "),Q9=a("a"),Eje=o("FunnelConfig"),Cje=o(" (Funnel Transformer model)"),wje=l(),Tm=a("li"),kY=a("strong"),Aje=o("glpn"),yje=o(" \u2014 "),W9=a("a"),Lje=o("GLPNConfig"),xje=o(" (GLPN model)"),kje=l(),Mm=a("li"),SY=a("strong"),Sje=o("gpt2"),Rje=o(" \u2014 "),H9=a("a"),Bje=o("GPT2Config"),Pje=o(" (OpenAI GPT-2 model)"),$je=l(),Em=a("li"),RY=a("strong"),Ije=o("gpt_neo"),qje=o(" \u2014 "),U9=a("a"),Nje=o("GPTNeoConfig"),jje=o(" (GPT Neo model)"),Dje=l(),Cm=a("li"),BY=a("strong"),Gje=o("gptj"),Oje=o(" \u2014 "),J9=a("a"),Vje=o("GPTJConfig"),Xje=o(" (GPT-J model)"),zje=l(),wm=a("li"),PY=a("strong"),Qje=o("hubert"),Wje=o(" \u2014 "),Y9=a("a"),Hje=o("HubertConfig"),Uje=o(" (Hubert model)"),Jje=l(),Am=a("li"),$Y=a("strong"),Yje=o("ibert"),Kje=o(" \u2014 "),K9=a("a"),Zje=o("IBertConfig"),eDe=o(" (I-BERT model)"),oDe=l(),ym=a("li"),IY=a("strong"),rDe=o("imagegpt"),tDe=o(" \u2014 "),Z9=a("a"),aDe=o("ImageGPTConfig"),nDe=o(" (ImageGPT model)"),sDe=l(),Lm=a("li"),qY=a("strong"),lDe=o("layoutlm"),iDe=o(" \u2014 "),ex=a("a"),dDe=o("LayoutLMConfig"),cDe=o(" (LayoutLM model)"),fDe=l(),xm=a("li"),NY=a("strong"),mDe=o("layoutlmv2"),gDe=o(" \u2014 "),ox=a("a"),hDe=o("LayoutLMv2Config"),pDe=o(" (LayoutLMv2 model)"),_De=l(),km=a("li"),jY=a("strong"),uDe=o("led"),bDe=o(" \u2014 "),rx=a("a"),FDe=o("LEDConfig"),vDe=o(" (LED model)"),TDe=l(),Sm=a("li"),DY=a("strong"),MDe=o("longformer"),EDe=o(" \u2014 "),tx=a("a"),CDe=o("LongformerConfig"),wDe=o(" (Longformer model)"),ADe=l(),Rm=a("li"),GY=a("strong"),yDe=o("luke"),LDe=o(" \u2014 "),ax=a("a"),xDe=o("LukeConfig"),kDe=o(" (LUKE model)"),SDe=l(),Bm=a("li"),OY=a("strong"),RDe=o("lxmert"),BDe=o(" \u2014 "),nx=a("a"),PDe=o("LxmertConfig"),$De=o(" (LXMERT model)"),IDe=l(),Pm=a("li"),VY=a("strong"),qDe=o("m2m_100"),NDe=o(" \u2014 "),sx=a("a"),jDe=o("M2M100Config"),DDe=o(" (M2M100 model)"),GDe=l(),$m=a("li"),XY=a("strong"),ODe=o("marian"),VDe=o(" \u2014 "),lx=a("a"),XDe=o("MarianConfig"),zDe=o(" (Marian model)"),QDe=l(),Im=a("li"),zY=a("strong"),WDe=o("maskformer"),HDe=o(" \u2014 "),ix=a("a"),UDe=o("MaskFormerConfig"),JDe=o(" (MaskFormer model)"),YDe=l(),qm=a("li"),QY=a("strong"),KDe=o("mbart"),ZDe=o(" \u2014 "),dx=a("a"),eGe=o("MBartConfig"),oGe=o(" (mBART model)"),rGe=l(),Nm=a("li"),WY=a("strong"),tGe=o("megatron-bert"),aGe=o(" \u2014 "),cx=a("a"),nGe=o("MegatronBertConfig"),sGe=o(" (MegatronBert model)"),lGe=l(),jm=a("li"),HY=a("strong"),iGe=o("mobilebert"),dGe=o(" \u2014 "),fx=a("a"),cGe=o("MobileBertConfig"),fGe=o(" (MobileBERT model)"),mGe=l(),Dm=a("li"),UY=a("strong"),gGe=o("mpnet"),hGe=o(" \u2014 "),mx=a("a"),pGe=o("MPNetConfig"),_Ge=o(" (MPNet model)"),uGe=l(),Gm=a("li"),JY=a("strong"),bGe=o("mt5"),FGe=o(" \u2014 "),gx=a("a"),vGe=o("MT5Config"),TGe=o(" (mT5 model)"),MGe=l(),Om=a("li"),YY=a("strong"),EGe=o("nystromformer"),CGe=o(" \u2014 "),hx=a("a"),wGe=o("NystromformerConfig"),AGe=o(" (Nystromformer model)"),yGe=l(),Vm=a("li"),KY=a("strong"),LGe=o("openai-gpt"),xGe=o(" \u2014 "),px=a("a"),kGe=o("OpenAIGPTConfig"),SGe=o(" (OpenAI GPT model)"),RGe=l(),Xm=a("li"),ZY=a("strong"),BGe=o("pegasus"),PGe=o(" \u2014 "),_x=a("a"),$Ge=o("PegasusConfig"),IGe=o(" (Pegasus model)"),qGe=l(),zm=a("li"),eK=a("strong"),NGe=o("perceiver"),jGe=o(" \u2014 "),ux=a("a"),DGe=o("PerceiverConfig"),GGe=o(" (Perceiver model)"),OGe=l(),Qm=a("li"),oK=a("strong"),VGe=o("plbart"),XGe=o(" \u2014 "),bx=a("a"),zGe=o("PLBartConfig"),QGe=o(" (PLBart model)"),WGe=l(),Wm=a("li"),rK=a("strong"),HGe=o("poolformer"),UGe=o(" \u2014 "),Fx=a("a"),JGe=o("PoolFormerConfig"),YGe=o(" (PoolFormer model)"),KGe=l(),Hm=a("li"),tK=a("strong"),ZGe=o("prophetnet"),eOe=o(" \u2014 "),vx=a("a"),oOe=o("ProphetNetConfig"),rOe=o(" (ProphetNet model)"),tOe=l(),Um=a("li"),aK=a("strong"),aOe=o("qdqbert"),nOe=o(" \u2014 "),Tx=a("a"),sOe=o("QDQBertConfig"),lOe=o(" (QDQBert model)"),iOe=l(),Jm=a("li"),nK=a("strong"),dOe=o("rag"),cOe=o(" \u2014 "),Mx=a("a"),fOe=o("RagConfig"),mOe=o(" (RAG model)"),gOe=l(),Ym=a("li"),sK=a("strong"),hOe=o("realm"),pOe=o(" \u2014 "),Ex=a("a"),_Oe=o("RealmConfig"),uOe=o(" (Realm model)"),bOe=l(),Km=a("li"),lK=a("strong"),FOe=o("reformer"),vOe=o(" \u2014 "),Cx=a("a"),TOe=o("ReformerConfig"),MOe=o(" (Reformer model)"),EOe=l(),Zm=a("li"),iK=a("strong"),COe=o("rembert"),wOe=o(" \u2014 "),wx=a("a"),AOe=o("RemBertConfig"),yOe=o(" (RemBERT model)"),LOe=l(),eg=a("li"),dK=a("strong"),xOe=o("resnet"),kOe=o(" \u2014 "),Ax=a("a"),SOe=o("ResNetConfig"),ROe=o(" (ResNet model)"),BOe=l(),og=a("li"),cK=a("strong"),POe=o("retribert"),$Oe=o(" \u2014 "),yx=a("a"),IOe=o("RetriBertConfig"),qOe=o(" (RetriBERT model)"),NOe=l(),rg=a("li"),fK=a("strong"),jOe=o("roberta"),DOe=o(" \u2014 "),Lx=a("a"),GOe=o("RobertaConfig"),OOe=o(" (RoBERTa model)"),VOe=l(),tg=a("li"),mK=a("strong"),XOe=o("roformer"),zOe=o(" \u2014 "),xx=a("a"),QOe=o("RoFormerConfig"),WOe=o(" (RoFormer model)"),HOe=l(),ag=a("li"),gK=a("strong"),UOe=o("segformer"),JOe=o(" \u2014 "),kx=a("a"),YOe=o("SegformerConfig"),KOe=o(" (SegFormer model)"),ZOe=l(),ng=a("li"),hK=a("strong"),eVe=o("sew"),oVe=o(" \u2014 "),Sx=a("a"),rVe=o("SEWConfig"),tVe=o(" (SEW model)"),aVe=l(),sg=a("li"),pK=a("strong"),nVe=o("sew-d"),sVe=o(" \u2014 "),Rx=a("a"),lVe=o("SEWDConfig"),iVe=o(" (SEW-D model)"),dVe=l(),lg=a("li"),_K=a("strong"),cVe=o("speech-encoder-decoder"),fVe=o(" \u2014 "),Bx=a("a"),mVe=o("SpeechEncoderDecoderConfig"),gVe=o(" (Speech Encoder decoder model)"),hVe=l(),ig=a("li"),uK=a("strong"),pVe=o("speech_to_text"),_Ve=o(" \u2014 "),Px=a("a"),uVe=o("Speech2TextConfig"),bVe=o(" (Speech2Text model)"),FVe=l(),dg=a("li"),bK=a("strong"),vVe=o("speech_to_text_2"),TVe=o(" \u2014 "),$x=a("a"),MVe=o("Speech2Text2Config"),EVe=o(" (Speech2Text2 model)"),CVe=l(),cg=a("li"),FK=a("strong"),wVe=o("splinter"),AVe=o(" \u2014 "),Ix=a("a"),yVe=o("SplinterConfig"),LVe=o(" (Splinter model)"),xVe=l(),fg=a("li"),vK=a("strong"),kVe=o("squeezebert"),SVe=o(" \u2014 "),qx=a("a"),RVe=o("SqueezeBertConfig"),BVe=o(" (SqueezeBERT model)"),PVe=l(),mg=a("li"),TK=a("strong"),$Ve=o("swin"),IVe=o(" \u2014 "),Nx=a("a"),qVe=o("SwinConfig"),NVe=o(" (Swin model)"),jVe=l(),gg=a("li"),MK=a("strong"),DVe=o("t5"),GVe=o(" \u2014 "),jx=a("a"),OVe=o("T5Config"),VVe=o(" (T5 model)"),XVe=l(),hg=a("li"),EK=a("strong"),zVe=o("tapas"),QVe=o(" \u2014 "),Dx=a("a"),WVe=o("TapasConfig"),HVe=o(" (TAPAS model)"),UVe=l(),pg=a("li"),CK=a("strong"),JVe=o("transfo-xl"),YVe=o(" \u2014 "),Gx=a("a"),KVe=o("TransfoXLConfig"),ZVe=o(" (Transformer-XL model)"),eXe=l(),_g=a("li"),wK=a("strong"),oXe=o("trocr"),rXe=o(" \u2014 "),Ox=a("a"),tXe=o("TrOCRConfig"),aXe=o(" (TrOCR model)"),nXe=l(),ug=a("li"),AK=a("strong"),sXe=o("unispeech"),lXe=o(" \u2014 "),Vx=a("a"),iXe=o("UniSpeechConfig"),dXe=o(" (UniSpeech model)"),cXe=l(),bg=a("li"),yK=a("strong"),fXe=o("unispeech-sat"),mXe=o(" \u2014 "),Xx=a("a"),gXe=o("UniSpeechSatConfig"),hXe=o(" (UniSpeechSat model)"),pXe=l(),Fg=a("li"),LK=a("strong"),_Xe=o("van"),uXe=o(" \u2014 "),zx=a("a"),bXe=o("VanConfig"),FXe=o(" (VAN model)"),vXe=l(),vg=a("li"),xK=a("strong"),TXe=o("vilt"),MXe=o(" \u2014 "),Qx=a("a"),EXe=o("ViltConfig"),CXe=o(" (ViLT model)"),wXe=l(),Tg=a("li"),kK=a("strong"),AXe=o("vision-encoder-decoder"),yXe=o(" \u2014 "),Wx=a("a"),LXe=o("VisionEncoderDecoderConfig"),xXe=o(" (Vision Encoder decoder model)"),kXe=l(),Mg=a("li"),SK=a("strong"),SXe=o("vision-text-dual-encoder"),RXe=o(" \u2014 "),Hx=a("a"),BXe=o("VisionTextDualEncoderConfig"),PXe=o(" (VisionTextDualEncoder model)"),$Xe=l(),Eg=a("li"),RK=a("strong"),IXe=o("visual_bert"),qXe=o(" \u2014 "),Ux=a("a"),NXe=o("VisualBertConfig"),jXe=o(" (VisualBert model)"),DXe=l(),Cg=a("li"),BK=a("strong"),GXe=o("vit"),OXe=o(" \u2014 "),Jx=a("a"),VXe=o("ViTConfig"),XXe=o(" (ViT model)"),zXe=l(),wg=a("li"),PK=a("strong"),QXe=o("vit_mae"),WXe=o(" \u2014 "),Yx=a("a"),HXe=o("ViTMAEConfig"),UXe=o(" (ViTMAE model)"),JXe=l(),Ag=a("li"),$K=a("strong"),YXe=o("wav2vec2"),KXe=o(" \u2014 "),Kx=a("a"),ZXe=o("Wav2Vec2Config"),eze=o(" (Wav2Vec2 model)"),oze=l(),yg=a("li"),IK=a("strong"),rze=o("wavlm"),tze=o(" \u2014 "),Zx=a("a"),aze=o("WavLMConfig"),nze=o(" (WavLM model)"),sze=l(),Lg=a("li"),qK=a("strong"),lze=o("xglm"),ize=o(" \u2014 "),ek=a("a"),dze=o("XGLMConfig"),cze=o(" (XGLM model)"),fze=l(),xg=a("li"),NK=a("strong"),mze=o("xlm"),gze=o(" \u2014 "),ok=a("a"),hze=o("XLMConfig"),pze=o(" (XLM model)"),_ze=l(),kg=a("li"),jK=a("strong"),uze=o("xlm-prophetnet"),bze=o(" \u2014 "),rk=a("a"),Fze=o("XLMProphetNetConfig"),vze=o(" (XLMProphetNet model)"),Tze=l(),Sg=a("li"),DK=a("strong"),Mze=o("xlm-roberta"),Eze=o(" \u2014 "),tk=a("a"),Cze=o("XLMRobertaConfig"),wze=o(" (XLM-RoBERTa model)"),Aze=l(),Rg=a("li"),GK=a("strong"),yze=o("xlm-roberta-xl"),Lze=o(" \u2014 "),ak=a("a"),xze=o("XLMRobertaXLConfig"),kze=o(" (XLM-RoBERTa-XL model)"),Sze=l(),Bg=a("li"),OK=a("strong"),Rze=o("xlnet"),Bze=o(" \u2014 "),nk=a("a"),Pze=o("XLNetConfig"),$ze=o(" (XLNet model)"),Ize=l(),Pg=a("li"),VK=a("strong"),qze=o("yoso"),Nze=o(" \u2014 "),sk=a("a"),jze=o("YosoConfig"),Dze=o(" (YOSO model)"),Gze=l(),XK=a("p"),Oze=o("Examples:"),Vze=l(),f(LC.$$.fragment),Xze=l(),$g=a("div"),f(xC.$$.fragment),zze=l(),zK=a("p"),Qze=o("Register a new configuration for this class."),KSe=l(),Qi=a("h2"),Ig=a("a"),QK=a("span"),f(kC.$$.fragment),Wze=l(),WK=a("span"),Hze=o("AutoTokenizer"),ZSe=l(),Wo=a("div"),f(SC.$$.fragment),Uze=l(),RC=a("p"),Jze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),lk=a("a"),Yze=o("AutoTokenizer.from_pretrained()"),Kze=o(" class method."),Zze=l(),BC=a("p"),eQe=o("This class cannot be instantiated directly using "),HK=a("code"),oQe=o("__init__()"),rQe=o(" (throws an error)."),tQe=l(),go=a("div"),f(PC.$$.fragment),aQe=l(),UK=a("p"),nQe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),sQe=l(),Oa=a("p"),lQe=o("The tokenizer class to instantiate is selected based on the "),JK=a("code"),iQe=o("model_type"),dQe=o(` property of the config object (either
passed as an argument or loaded from `),YK=a("code"),cQe=o("pretrained_model_name_or_path"),fQe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KK=a("code"),mQe=o("pretrained_model_name_or_path"),gQe=o(":"),hQe=l(),C=a("ul"),Qn=a("li"),ZK=a("strong"),pQe=o("albert"),_Qe=o(" \u2014 "),ik=a("a"),uQe=o("AlbertTokenizer"),bQe=o(" or "),dk=a("a"),FQe=o("AlbertTokenizerFast"),vQe=o(" (ALBERT model)"),TQe=l(),Wn=a("li"),eZ=a("strong"),MQe=o("bart"),EQe=o(" \u2014 "),ck=a("a"),CQe=o("BartTokenizer"),wQe=o(" or "),fk=a("a"),AQe=o("BartTokenizerFast"),yQe=o(" (BART model)"),LQe=l(),Hn=a("li"),oZ=a("strong"),xQe=o("barthez"),kQe=o(" \u2014 "),mk=a("a"),SQe=o("BarthezTokenizer"),RQe=o(" or "),gk=a("a"),BQe=o("BarthezTokenizerFast"),PQe=o(" (BARThez model)"),$Qe=l(),qg=a("li"),rZ=a("strong"),IQe=o("bartpho"),qQe=o(" \u2014 "),hk=a("a"),NQe=o("BartphoTokenizer"),jQe=o(" (BARTpho model)"),DQe=l(),Un=a("li"),tZ=a("strong"),GQe=o("bert"),OQe=o(" \u2014 "),pk=a("a"),VQe=o("BertTokenizer"),XQe=o(" or "),_k=a("a"),zQe=o("BertTokenizerFast"),QQe=o(" (BERT model)"),WQe=l(),Ng=a("li"),aZ=a("strong"),HQe=o("bert-generation"),UQe=o(" \u2014 "),uk=a("a"),JQe=o("BertGenerationTokenizer"),YQe=o(" (Bert Generation model)"),KQe=l(),jg=a("li"),nZ=a("strong"),ZQe=o("bert-japanese"),eWe=o(" \u2014 "),bk=a("a"),oWe=o("BertJapaneseTokenizer"),rWe=o(" (BertJapanese model)"),tWe=l(),Dg=a("li"),sZ=a("strong"),aWe=o("bertweet"),nWe=o(" \u2014 "),Fk=a("a"),sWe=o("BertweetTokenizer"),lWe=o(" (Bertweet model)"),iWe=l(),Jn=a("li"),lZ=a("strong"),dWe=o("big_bird"),cWe=o(" \u2014 "),vk=a("a"),fWe=o("BigBirdTokenizer"),mWe=o(" or "),Tk=a("a"),gWe=o("BigBirdTokenizerFast"),hWe=o(" (BigBird model)"),pWe=l(),Yn=a("li"),iZ=a("strong"),_We=o("bigbird_pegasus"),uWe=o(" \u2014 "),Mk=a("a"),bWe=o("PegasusTokenizer"),FWe=o(" or "),Ek=a("a"),vWe=o("PegasusTokenizerFast"),TWe=o(" (BigBirdPegasus model)"),MWe=l(),Kn=a("li"),dZ=a("strong"),EWe=o("blenderbot"),CWe=o(" \u2014 "),Ck=a("a"),wWe=o("BlenderbotTokenizer"),AWe=o(" or "),wk=a("a"),yWe=o("BlenderbotTokenizerFast"),LWe=o(" (Blenderbot model)"),xWe=l(),Gg=a("li"),cZ=a("strong"),kWe=o("blenderbot-small"),SWe=o(" \u2014 "),Ak=a("a"),RWe=o("BlenderbotSmallTokenizer"),BWe=o(" (BlenderbotSmall model)"),PWe=l(),Og=a("li"),fZ=a("strong"),$We=o("byt5"),IWe=o(" \u2014 "),yk=a("a"),qWe=o("ByT5Tokenizer"),NWe=o(" (ByT5 model)"),jWe=l(),Zn=a("li"),mZ=a("strong"),DWe=o("camembert"),GWe=o(" \u2014 "),Lk=a("a"),OWe=o("CamembertTokenizer"),VWe=o(" or "),xk=a("a"),XWe=o("CamembertTokenizerFast"),zWe=o(" (CamemBERT model)"),QWe=l(),Vg=a("li"),gZ=a("strong"),WWe=o("canine"),HWe=o(" \u2014 "),kk=a("a"),UWe=o("CanineTokenizer"),JWe=o(" (Canine model)"),YWe=l(),es=a("li"),hZ=a("strong"),KWe=o("clip"),ZWe=o(" \u2014 "),Sk=a("a"),eHe=o("CLIPTokenizer"),oHe=o(" or "),Rk=a("a"),rHe=o("CLIPTokenizerFast"),tHe=o(" (CLIP model)"),aHe=l(),os=a("li"),pZ=a("strong"),nHe=o("convbert"),sHe=o(" \u2014 "),Bk=a("a"),lHe=o("ConvBertTokenizer"),iHe=o(" or "),Pk=a("a"),dHe=o("ConvBertTokenizerFast"),cHe=o(" (ConvBERT model)"),fHe=l(),rs=a("li"),_Z=a("strong"),mHe=o("cpm"),gHe=o(" \u2014 "),$k=a("a"),hHe=o("CpmTokenizer"),pHe=o(" or "),uZ=a("code"),_He=o("CpmTokenizerFast"),uHe=o(" (CPM model)"),bHe=l(),Xg=a("li"),bZ=a("strong"),FHe=o("ctrl"),vHe=o(" \u2014 "),Ik=a("a"),THe=o("CTRLTokenizer"),MHe=o(" (CTRL model)"),EHe=l(),ts=a("li"),FZ=a("strong"),CHe=o("deberta"),wHe=o(" \u2014 "),qk=a("a"),AHe=o("DebertaTokenizer"),yHe=o(" or "),Nk=a("a"),LHe=o("DebertaTokenizerFast"),xHe=o(" (DeBERTa model)"),kHe=l(),zg=a("li"),vZ=a("strong"),SHe=o("deberta-v2"),RHe=o(" \u2014 "),jk=a("a"),BHe=o("DebertaV2Tokenizer"),PHe=o(" (DeBERTa-v2 model)"),$He=l(),as=a("li"),TZ=a("strong"),IHe=o("distilbert"),qHe=o(" \u2014 "),Dk=a("a"),NHe=o("DistilBertTokenizer"),jHe=o(" or "),Gk=a("a"),DHe=o("DistilBertTokenizerFast"),GHe=o(" (DistilBERT model)"),OHe=l(),ns=a("li"),MZ=a("strong"),VHe=o("dpr"),XHe=o(" \u2014 "),Ok=a("a"),zHe=o("DPRQuestionEncoderTokenizer"),QHe=o(" or "),Vk=a("a"),WHe=o("DPRQuestionEncoderTokenizerFast"),HHe=o(" (DPR model)"),UHe=l(),ss=a("li"),EZ=a("strong"),JHe=o("electra"),YHe=o(" \u2014 "),Xk=a("a"),KHe=o("ElectraTokenizer"),ZHe=o(" or "),zk=a("a"),eUe=o("ElectraTokenizerFast"),oUe=o(" (ELECTRA model)"),rUe=l(),Qg=a("li"),CZ=a("strong"),tUe=o("flaubert"),aUe=o(" \u2014 "),Qk=a("a"),nUe=o("FlaubertTokenizer"),sUe=o(" (FlauBERT model)"),lUe=l(),ls=a("li"),wZ=a("strong"),iUe=o("fnet"),dUe=o(" \u2014 "),Wk=a("a"),cUe=o("FNetTokenizer"),fUe=o(" or "),Hk=a("a"),mUe=o("FNetTokenizerFast"),gUe=o(" (FNet model)"),hUe=l(),Wg=a("li"),AZ=a("strong"),pUe=o("fsmt"),_Ue=o(" \u2014 "),Uk=a("a"),uUe=o("FSMTTokenizer"),bUe=o(" (FairSeq Machine-Translation model)"),FUe=l(),is=a("li"),yZ=a("strong"),vUe=o("funnel"),TUe=o(" \u2014 "),Jk=a("a"),MUe=o("FunnelTokenizer"),EUe=o(" or "),Yk=a("a"),CUe=o("FunnelTokenizerFast"),wUe=o(" (Funnel Transformer model)"),AUe=l(),ds=a("li"),LZ=a("strong"),yUe=o("gpt2"),LUe=o(" \u2014 "),Kk=a("a"),xUe=o("GPT2Tokenizer"),kUe=o(" or "),Zk=a("a"),SUe=o("GPT2TokenizerFast"),RUe=o(" (OpenAI GPT-2 model)"),BUe=l(),cs=a("li"),xZ=a("strong"),PUe=o("gpt_neo"),$Ue=o(" \u2014 "),eS=a("a"),IUe=o("GPT2Tokenizer"),qUe=o(" or "),oS=a("a"),NUe=o("GPT2TokenizerFast"),jUe=o(" (GPT Neo model)"),DUe=l(),fs=a("li"),kZ=a("strong"),GUe=o("herbert"),OUe=o(" \u2014 "),rS=a("a"),VUe=o("HerbertTokenizer"),XUe=o(" or "),tS=a("a"),zUe=o("HerbertTokenizerFast"),QUe=o(" (HerBERT model)"),WUe=l(),Hg=a("li"),SZ=a("strong"),HUe=o("hubert"),UUe=o(" \u2014 "),aS=a("a"),JUe=o("Wav2Vec2CTCTokenizer"),YUe=o(" (Hubert model)"),KUe=l(),ms=a("li"),RZ=a("strong"),ZUe=o("ibert"),eJe=o(" \u2014 "),nS=a("a"),oJe=o("RobertaTokenizer"),rJe=o(" or "),sS=a("a"),tJe=o("RobertaTokenizerFast"),aJe=o(" (I-BERT model)"),nJe=l(),gs=a("li"),BZ=a("strong"),sJe=o("layoutlm"),lJe=o(" \u2014 "),lS=a("a"),iJe=o("LayoutLMTokenizer"),dJe=o(" or "),iS=a("a"),cJe=o("LayoutLMTokenizerFast"),fJe=o(" (LayoutLM model)"),mJe=l(),hs=a("li"),PZ=a("strong"),gJe=o("layoutlmv2"),hJe=o(" \u2014 "),dS=a("a"),pJe=o("LayoutLMv2Tokenizer"),_Je=o(" or "),cS=a("a"),uJe=o("LayoutLMv2TokenizerFast"),bJe=o(" (LayoutLMv2 model)"),FJe=l(),ps=a("li"),$Z=a("strong"),vJe=o("layoutxlm"),TJe=o(" \u2014 "),fS=a("a"),MJe=o("LayoutXLMTokenizer"),EJe=o(" or "),mS=a("a"),CJe=o("LayoutXLMTokenizerFast"),wJe=o(" (LayoutXLM model)"),AJe=l(),_s=a("li"),IZ=a("strong"),yJe=o("led"),LJe=o(" \u2014 "),gS=a("a"),xJe=o("LEDTokenizer"),kJe=o(" or "),hS=a("a"),SJe=o("LEDTokenizerFast"),RJe=o(" (LED model)"),BJe=l(),us=a("li"),qZ=a("strong"),PJe=o("longformer"),$Je=o(" \u2014 "),pS=a("a"),IJe=o("LongformerTokenizer"),qJe=o(" or "),_S=a("a"),NJe=o("LongformerTokenizerFast"),jJe=o(" (Longformer model)"),DJe=l(),Ug=a("li"),NZ=a("strong"),GJe=o("luke"),OJe=o(" \u2014 "),uS=a("a"),VJe=o("LukeTokenizer"),XJe=o(" (LUKE model)"),zJe=l(),bs=a("li"),jZ=a("strong"),QJe=o("lxmert"),WJe=o(" \u2014 "),bS=a("a"),HJe=o("LxmertTokenizer"),UJe=o(" or "),FS=a("a"),JJe=o("LxmertTokenizerFast"),YJe=o(" (LXMERT model)"),KJe=l(),Jg=a("li"),DZ=a("strong"),ZJe=o("m2m_100"),eYe=o(" \u2014 "),vS=a("a"),oYe=o("M2M100Tokenizer"),rYe=o(" (M2M100 model)"),tYe=l(),Yg=a("li"),GZ=a("strong"),aYe=o("marian"),nYe=o(" \u2014 "),TS=a("a"),sYe=o("MarianTokenizer"),lYe=o(" (Marian model)"),iYe=l(),Fs=a("li"),OZ=a("strong"),dYe=o("mbart"),cYe=o(" \u2014 "),MS=a("a"),fYe=o("MBartTokenizer"),mYe=o(" or "),ES=a("a"),gYe=o("MBartTokenizerFast"),hYe=o(" (mBART model)"),pYe=l(),vs=a("li"),VZ=a("strong"),_Ye=o("mbart50"),uYe=o(" \u2014 "),CS=a("a"),bYe=o("MBart50Tokenizer"),FYe=o(" or "),wS=a("a"),vYe=o("MBart50TokenizerFast"),TYe=o(" (mBART-50 model)"),MYe=l(),Kg=a("li"),XZ=a("strong"),EYe=o("mluke"),CYe=o(" \u2014 "),AS=a("a"),wYe=o("MLukeTokenizer"),AYe=o(" (mLUKE model)"),yYe=l(),Ts=a("li"),zZ=a("strong"),LYe=o("mobilebert"),xYe=o(" \u2014 "),yS=a("a"),kYe=o("MobileBertTokenizer"),SYe=o(" or "),LS=a("a"),RYe=o("MobileBertTokenizerFast"),BYe=o(" (MobileBERT model)"),PYe=l(),Ms=a("li"),QZ=a("strong"),$Ye=o("mpnet"),IYe=o(" \u2014 "),xS=a("a"),qYe=o("MPNetTokenizer"),NYe=o(" or "),kS=a("a"),jYe=o("MPNetTokenizerFast"),DYe=o(" (MPNet model)"),GYe=l(),Es=a("li"),WZ=a("strong"),OYe=o("mt5"),VYe=o(" \u2014 "),SS=a("a"),XYe=o("MT5Tokenizer"),zYe=o(" or "),RS=a("a"),QYe=o("MT5TokenizerFast"),WYe=o(" (mT5 model)"),HYe=l(),Cs=a("li"),HZ=a("strong"),UYe=o("openai-gpt"),JYe=o(" \u2014 "),BS=a("a"),YYe=o("OpenAIGPTTokenizer"),KYe=o(" or "),PS=a("a"),ZYe=o("OpenAIGPTTokenizerFast"),eKe=o(" (OpenAI GPT model)"),oKe=l(),ws=a("li"),UZ=a("strong"),rKe=o("pegasus"),tKe=o(" \u2014 "),$S=a("a"),aKe=o("PegasusTokenizer"),nKe=o(" or "),IS=a("a"),sKe=o("PegasusTokenizerFast"),lKe=o(" (Pegasus model)"),iKe=l(),Zg=a("li"),JZ=a("strong"),dKe=o("perceiver"),cKe=o(" \u2014 "),qS=a("a"),fKe=o("PerceiverTokenizer"),mKe=o(" (Perceiver model)"),gKe=l(),eh=a("li"),YZ=a("strong"),hKe=o("phobert"),pKe=o(" \u2014 "),NS=a("a"),_Ke=o("PhobertTokenizer"),uKe=o(" (PhoBERT model)"),bKe=l(),oh=a("li"),KZ=a("strong"),FKe=o("plbart"),vKe=o(" \u2014 "),jS=a("a"),TKe=o("PLBartTokenizer"),MKe=o(" (PLBart model)"),EKe=l(),rh=a("li"),ZZ=a("strong"),CKe=o("prophetnet"),wKe=o(" \u2014 "),DS=a("a"),AKe=o("ProphetNetTokenizer"),yKe=o(" (ProphetNet model)"),LKe=l(),As=a("li"),eee=a("strong"),xKe=o("qdqbert"),kKe=o(" \u2014 "),GS=a("a"),SKe=o("BertTokenizer"),RKe=o(" or "),OS=a("a"),BKe=o("BertTokenizerFast"),PKe=o(" (QDQBert model)"),$Ke=l(),th=a("li"),oee=a("strong"),IKe=o("rag"),qKe=o(" \u2014 "),VS=a("a"),NKe=o("RagTokenizer"),jKe=o(" (RAG model)"),DKe=l(),ys=a("li"),ree=a("strong"),GKe=o("realm"),OKe=o(" \u2014 "),XS=a("a"),VKe=o("RealmTokenizer"),XKe=o(" or "),zS=a("a"),zKe=o("RealmTokenizerFast"),QKe=o(" (Realm model)"),WKe=l(),Ls=a("li"),tee=a("strong"),HKe=o("reformer"),UKe=o(" \u2014 "),QS=a("a"),JKe=o("ReformerTokenizer"),YKe=o(" or "),WS=a("a"),KKe=o("ReformerTokenizerFast"),ZKe=o(" (Reformer model)"),eZe=l(),xs=a("li"),aee=a("strong"),oZe=o("rembert"),rZe=o(" \u2014 "),HS=a("a"),tZe=o("RemBertTokenizer"),aZe=o(" or "),US=a("a"),nZe=o("RemBertTokenizerFast"),sZe=o(" (RemBERT model)"),lZe=l(),ks=a("li"),nee=a("strong"),iZe=o("retribert"),dZe=o(" \u2014 "),JS=a("a"),cZe=o("RetriBertTokenizer"),fZe=o(" or "),YS=a("a"),mZe=o("RetriBertTokenizerFast"),gZe=o(" (RetriBERT model)"),hZe=l(),Ss=a("li"),see=a("strong"),pZe=o("roberta"),_Ze=o(" \u2014 "),KS=a("a"),uZe=o("RobertaTokenizer"),bZe=o(" or "),ZS=a("a"),FZe=o("RobertaTokenizerFast"),vZe=o(" (RoBERTa model)"),TZe=l(),Rs=a("li"),lee=a("strong"),MZe=o("roformer"),EZe=o(" \u2014 "),eR=a("a"),CZe=o("RoFormerTokenizer"),wZe=o(" or "),oR=a("a"),AZe=o("RoFormerTokenizerFast"),yZe=o(" (RoFormer model)"),LZe=l(),ah=a("li"),iee=a("strong"),xZe=o("speech_to_text"),kZe=o(" \u2014 "),rR=a("a"),SZe=o("Speech2TextTokenizer"),RZe=o(" (Speech2Text model)"),BZe=l(),nh=a("li"),dee=a("strong"),PZe=o("speech_to_text_2"),$Ze=o(" \u2014 "),tR=a("a"),IZe=o("Speech2Text2Tokenizer"),qZe=o(" (Speech2Text2 model)"),NZe=l(),Bs=a("li"),cee=a("strong"),jZe=o("splinter"),DZe=o(" \u2014 "),aR=a("a"),GZe=o("SplinterTokenizer"),OZe=o(" or "),nR=a("a"),VZe=o("SplinterTokenizerFast"),XZe=o(" (Splinter model)"),zZe=l(),Ps=a("li"),fee=a("strong"),QZe=o("squeezebert"),WZe=o(" \u2014 "),sR=a("a"),HZe=o("SqueezeBertTokenizer"),UZe=o(" or "),lR=a("a"),JZe=o("SqueezeBertTokenizerFast"),YZe=o(" (SqueezeBERT model)"),KZe=l(),$s=a("li"),mee=a("strong"),ZZe=o("t5"),eeo=o(" \u2014 "),iR=a("a"),oeo=o("T5Tokenizer"),reo=o(" or "),dR=a("a"),teo=o("T5TokenizerFast"),aeo=o(" (T5 model)"),neo=l(),sh=a("li"),gee=a("strong"),seo=o("tapas"),leo=o(" \u2014 "),cR=a("a"),ieo=o("TapasTokenizer"),deo=o(" (TAPAS model)"),ceo=l(),lh=a("li"),hee=a("strong"),feo=o("transfo-xl"),meo=o(" \u2014 "),fR=a("a"),geo=o("TransfoXLTokenizer"),heo=o(" (Transformer-XL model)"),peo=l(),ih=a("li"),pee=a("strong"),_eo=o("wav2vec2"),ueo=o(" \u2014 "),mR=a("a"),beo=o("Wav2Vec2CTCTokenizer"),Feo=o(" (Wav2Vec2 model)"),veo=l(),dh=a("li"),_ee=a("strong"),Teo=o("wav2vec2_phoneme"),Meo=o(" \u2014 "),gR=a("a"),Eeo=o("Wav2Vec2PhonemeCTCTokenizer"),Ceo=o(" (Wav2Vec2Phoneme model)"),weo=l(),Is=a("li"),uee=a("strong"),Aeo=o("xglm"),yeo=o(" \u2014 "),hR=a("a"),Leo=o("XGLMTokenizer"),xeo=o(" or "),pR=a("a"),keo=o("XGLMTokenizerFast"),Seo=o(" (XGLM model)"),Reo=l(),ch=a("li"),bee=a("strong"),Beo=o("xlm"),Peo=o(" \u2014 "),_R=a("a"),$eo=o("XLMTokenizer"),Ieo=o(" (XLM model)"),qeo=l(),fh=a("li"),Fee=a("strong"),Neo=o("xlm-prophetnet"),jeo=o(" \u2014 "),uR=a("a"),Deo=o("XLMProphetNetTokenizer"),Geo=o(" (XLMProphetNet model)"),Oeo=l(),qs=a("li"),vee=a("strong"),Veo=o("xlm-roberta"),Xeo=o(" \u2014 "),bR=a("a"),zeo=o("XLMRobertaTokenizer"),Qeo=o(" or "),FR=a("a"),Weo=o("XLMRobertaTokenizerFast"),Heo=o(" (XLM-RoBERTa model)"),Ueo=l(),Ns=a("li"),Tee=a("strong"),Jeo=o("xlnet"),Yeo=o(" \u2014 "),vR=a("a"),Keo=o("XLNetTokenizer"),Zeo=o(" or "),TR=a("a"),eoo=o("XLNetTokenizerFast"),ooo=o(" (XLNet model)"),roo=l(),Mee=a("p"),too=o("Examples:"),aoo=l(),f($C.$$.fragment),noo=l(),mh=a("div"),f(IC.$$.fragment),soo=l(),Eee=a("p"),loo=o("Register a new tokenizer in this mapping."),eRe=l(),Wi=a("h2"),gh=a("a"),Cee=a("span"),f(qC.$$.fragment),ioo=l(),wee=a("span"),doo=o("AutoFeatureExtractor"),oRe=l(),Ho=a("div"),f(NC.$$.fragment),coo=l(),jC=a("p"),foo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),MR=a("a"),moo=o("AutoFeatureExtractor.from_pretrained()"),goo=o(" class method."),hoo=l(),DC=a("p"),poo=o("This class cannot be instantiated directly using "),Aee=a("code"),_oo=o("__init__()"),uoo=o(" (throws an error)."),boo=l(),$e=a("div"),f(GC.$$.fragment),Foo=l(),yee=a("p"),voo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Too=l(),Va=a("p"),Moo=o("The feature extractor class to instantiate is selected based on the "),Lee=a("code"),Eoo=o("model_type"),Coo=o(` property of the config object
(either passed as an argument or loaded from `),xee=a("code"),woo=o("pretrained_model_name_or_path"),Aoo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),kee=a("code"),yoo=o("pretrained_model_name_or_path"),Loo=o(":"),xoo=l(),te=a("ul"),hh=a("li"),See=a("strong"),koo=o("beit"),Soo=o(" \u2014 "),ER=a("a"),Roo=o("BeitFeatureExtractor"),Boo=o(" (BEiT model)"),Poo=l(),ph=a("li"),Ree=a("strong"),$oo=o("clip"),Ioo=o(" \u2014 "),CR=a("a"),qoo=o("CLIPFeatureExtractor"),Noo=o(" (CLIP model)"),joo=l(),_h=a("li"),Bee=a("strong"),Doo=o("convnext"),Goo=o(" \u2014 "),wR=a("a"),Ooo=o("ConvNextFeatureExtractor"),Voo=o(" (ConvNext model)"),Xoo=l(),uh=a("li"),Pee=a("strong"),zoo=o("deit"),Qoo=o(" \u2014 "),AR=a("a"),Woo=o("DeiTFeatureExtractor"),Hoo=o(" (DeiT model)"),Uoo=l(),bh=a("li"),$ee=a("strong"),Joo=o("detr"),Yoo=o(" \u2014 "),yR=a("a"),Koo=o("DetrFeatureExtractor"),Zoo=o(" (DETR model)"),ero=l(),Fh=a("li"),Iee=a("strong"),oro=o("hubert"),rro=o(" \u2014 "),LR=a("a"),tro=o("Wav2Vec2FeatureExtractor"),aro=o(" (Hubert model)"),nro=l(),vh=a("li"),qee=a("strong"),sro=o("layoutlmv2"),lro=o(" \u2014 "),xR=a("a"),iro=o("LayoutLMv2FeatureExtractor"),dro=o(" (LayoutLMv2 model)"),cro=l(),Th=a("li"),Nee=a("strong"),fro=o("maskformer"),mro=o(" \u2014 "),kR=a("a"),gro=o("MaskFormerFeatureExtractor"),hro=o(" (MaskFormer model)"),pro=l(),Mh=a("li"),jee=a("strong"),_ro=o("perceiver"),uro=o(" \u2014 "),SR=a("a"),bro=o("PerceiverFeatureExtractor"),Fro=o(" (Perceiver model)"),vro=l(),Eh=a("li"),Dee=a("strong"),Tro=o("poolformer"),Mro=o(" \u2014 "),RR=a("a"),Ero=o("PoolFormerFeatureExtractor"),Cro=o(" (PoolFormer model)"),wro=l(),Ch=a("li"),Gee=a("strong"),Aro=o("resnet"),yro=o(" \u2014 "),BR=a("a"),Lro=o("ConvNextFeatureExtractor"),xro=o(" (ResNet model)"),kro=l(),wh=a("li"),Oee=a("strong"),Sro=o("segformer"),Rro=o(" \u2014 "),PR=a("a"),Bro=o("SegformerFeatureExtractor"),Pro=o(" (SegFormer model)"),$ro=l(),Ah=a("li"),Vee=a("strong"),Iro=o("speech_to_text"),qro=o(" \u2014 "),$R=a("a"),Nro=o("Speech2TextFeatureExtractor"),jro=o(" (Speech2Text model)"),Dro=l(),yh=a("li"),Xee=a("strong"),Gro=o("swin"),Oro=o(" \u2014 "),IR=a("a"),Vro=o("ViTFeatureExtractor"),Xro=o(" (Swin model)"),zro=l(),Lh=a("li"),zee=a("strong"),Qro=o("van"),Wro=o(" \u2014 "),qR=a("a"),Hro=o("ConvNextFeatureExtractor"),Uro=o(" (VAN model)"),Jro=l(),xh=a("li"),Qee=a("strong"),Yro=o("vit"),Kro=o(" \u2014 "),NR=a("a"),Zro=o("ViTFeatureExtractor"),eto=o(" (ViT model)"),oto=l(),kh=a("li"),Wee=a("strong"),rto=o("vit_mae"),tto=o(" \u2014 "),jR=a("a"),ato=o("ViTFeatureExtractor"),nto=o(" (ViTMAE model)"),sto=l(),Sh=a("li"),Hee=a("strong"),lto=o("wav2vec2"),ito=o(" \u2014 "),DR=a("a"),dto=o("Wav2Vec2FeatureExtractor"),cto=o(" (Wav2Vec2 model)"),fto=l(),f(Rh.$$.fragment),mto=l(),Uee=a("p"),gto=o("Examples:"),hto=l(),f(OC.$$.fragment),pto=l(),Bh=a("div"),f(VC.$$.fragment),_to=l(),Jee=a("p"),uto=o("Register a new feature extractor for this class."),rRe=l(),Hi=a("h2"),Ph=a("a"),Yee=a("span"),f(XC.$$.fragment),bto=l(),Kee=a("span"),Fto=o("AutoProcessor"),tRe=l(),Uo=a("div"),f(zC.$$.fragment),vto=l(),QC=a("p"),Tto=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),GR=a("a"),Mto=o("AutoProcessor.from_pretrained()"),Eto=o(" class method."),Cto=l(),WC=a("p"),wto=o("This class cannot be instantiated directly using "),Zee=a("code"),Ato=o("__init__()"),yto=o(" (throws an error)."),Lto=l(),Ie=a("div"),f(HC.$$.fragment),xto=l(),eoe=a("p"),kto=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Sto=l(),Ui=a("p"),Rto=o("The processor class to instantiate is selected based on the "),ooe=a("code"),Bto=o("model_type"),Pto=o(` property of the config object (either
passed as an argument or loaded from `),roe=a("code"),$to=o("pretrained_model_name_or_path"),Ito=o(" if possible):"),qto=l(),ke=a("ul"),$h=a("li"),toe=a("strong"),Nto=o("clip"),jto=o(" \u2014 "),OR=a("a"),Dto=o("CLIPProcessor"),Gto=o(" (CLIP model)"),Oto=l(),Ih=a("li"),aoe=a("strong"),Vto=o("layoutlmv2"),Xto=o(" \u2014 "),VR=a("a"),zto=o("LayoutLMv2Processor"),Qto=o(" (LayoutLMv2 model)"),Wto=l(),qh=a("li"),noe=a("strong"),Hto=o("layoutxlm"),Uto=o(" \u2014 "),XR=a("a"),Jto=o("LayoutXLMProcessor"),Yto=o(" (LayoutXLM model)"),Kto=l(),Nh=a("li"),soe=a("strong"),Zto=o("speech_to_text"),eao=o(" \u2014 "),zR=a("a"),oao=o("Speech2TextProcessor"),rao=o(" (Speech2Text model)"),tao=l(),jh=a("li"),loe=a("strong"),aao=o("speech_to_text_2"),nao=o(" \u2014 "),QR=a("a"),sao=o("Speech2Text2Processor"),lao=o(" (Speech2Text2 model)"),iao=l(),Dh=a("li"),ioe=a("strong"),dao=o("trocr"),cao=o(" \u2014 "),WR=a("a"),fao=o("TrOCRProcessor"),mao=o(" (TrOCR model)"),gao=l(),Gh=a("li"),doe=a("strong"),hao=o("vision-text-dual-encoder"),pao=o(" \u2014 "),HR=a("a"),_ao=o("VisionTextDualEncoderProcessor"),uao=o(" (VisionTextDualEncoder model)"),bao=l(),Oh=a("li"),coe=a("strong"),Fao=o("wav2vec2"),vao=o(" \u2014 "),UR=a("a"),Tao=o("Wav2Vec2Processor"),Mao=o(" (Wav2Vec2 model)"),Eao=l(),f(Vh.$$.fragment),Cao=l(),foe=a("p"),wao=o("Examples:"),Aao=l(),f(UC.$$.fragment),yao=l(),Xh=a("div"),f(JC.$$.fragment),Lao=l(),moe=a("p"),xao=o("Register a new processor for this class."),aRe=l(),Ji=a("h2"),zh=a("a"),goe=a("span"),f(YC.$$.fragment),kao=l(),hoe=a("span"),Sao=o("AutoModel"),nRe=l(),Jo=a("div"),f(KC.$$.fragment),Rao=l(),Yi=a("p"),Bao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JR=a("a"),Pao=o("from_pretrained()"),$ao=o(" class method or the "),YR=a("a"),Iao=o("from_config()"),qao=o(` class
method.`),Nao=l(),ZC=a("p"),jao=o("This class cannot be instantiated directly using "),poe=a("code"),Dao=o("__init__()"),Gao=o(" (throws an error)."),Oao=l(),Xr=a("div"),f(ew.$$.fragment),Vao=l(),_oe=a("p"),Xao=o("Instantiates one of the base model classes of the library from a configuration."),zao=l(),Ki=a("p"),Qao=o(`Note:
Loading a model from its configuration file does `),uoe=a("strong"),Wao=o("not"),Hao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KR=a("a"),Uao=o("from_pretrained()"),Jao=o(" to load the model weights."),Yao=l(),boe=a("p"),Kao=o("Examples:"),Zao=l(),f(ow.$$.fragment),eno=l(),qe=a("div"),f(rw.$$.fragment),ono=l(),Foe=a("p"),rno=o("Instantiate one of the base model classes of the library from a pretrained model."),tno=l(),Xa=a("p"),ano=o("The model class to instantiate is selected based on the "),voe=a("code"),nno=o("model_type"),sno=o(` property of the config object (either
passed as an argument or loaded from `),Toe=a("code"),lno=o("pretrained_model_name_or_path"),ino=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Moe=a("code"),dno=o("pretrained_model_name_or_path"),cno=o(":"),fno=l(),T=a("ul"),Qh=a("li"),Eoe=a("strong"),mno=o("albert"),gno=o(" \u2014 "),ZR=a("a"),hno=o("AlbertModel"),pno=o(" (ALBERT model)"),_no=l(),Wh=a("li"),Coe=a("strong"),uno=o("bart"),bno=o(" \u2014 "),eB=a("a"),Fno=o("BartModel"),vno=o(" (BART model)"),Tno=l(),Hh=a("li"),woe=a("strong"),Mno=o("beit"),Eno=o(" \u2014 "),oB=a("a"),Cno=o("BeitModel"),wno=o(" (BEiT model)"),Ano=l(),Uh=a("li"),Aoe=a("strong"),yno=o("bert"),Lno=o(" \u2014 "),rB=a("a"),xno=o("BertModel"),kno=o(" (BERT model)"),Sno=l(),Jh=a("li"),yoe=a("strong"),Rno=o("bert-generation"),Bno=o(" \u2014 "),tB=a("a"),Pno=o("BertGenerationEncoder"),$no=o(" (Bert Generation model)"),Ino=l(),Yh=a("li"),Loe=a("strong"),qno=o("big_bird"),Nno=o(" \u2014 "),aB=a("a"),jno=o("BigBirdModel"),Dno=o(" (BigBird model)"),Gno=l(),Kh=a("li"),xoe=a("strong"),Ono=o("bigbird_pegasus"),Vno=o(" \u2014 "),nB=a("a"),Xno=o("BigBirdPegasusModel"),zno=o(" (BigBirdPegasus model)"),Qno=l(),Zh=a("li"),koe=a("strong"),Wno=o("blenderbot"),Hno=o(" \u2014 "),sB=a("a"),Uno=o("BlenderbotModel"),Jno=o(" (Blenderbot model)"),Yno=l(),ep=a("li"),Soe=a("strong"),Kno=o("blenderbot-small"),Zno=o(" \u2014 "),lB=a("a"),eso=o("BlenderbotSmallModel"),oso=o(" (BlenderbotSmall model)"),rso=l(),op=a("li"),Roe=a("strong"),tso=o("camembert"),aso=o(" \u2014 "),iB=a("a"),nso=o("CamembertModel"),sso=o(" (CamemBERT model)"),lso=l(),rp=a("li"),Boe=a("strong"),iso=o("canine"),dso=o(" \u2014 "),dB=a("a"),cso=o("CanineModel"),fso=o(" (Canine model)"),mso=l(),tp=a("li"),Poe=a("strong"),gso=o("clip"),hso=o(" \u2014 "),cB=a("a"),pso=o("CLIPModel"),_so=o(" (CLIP model)"),uso=l(),ap=a("li"),$oe=a("strong"),bso=o("convbert"),Fso=o(" \u2014 "),fB=a("a"),vso=o("ConvBertModel"),Tso=o(" (ConvBERT model)"),Mso=l(),np=a("li"),Ioe=a("strong"),Eso=o("convnext"),Cso=o(" \u2014 "),mB=a("a"),wso=o("ConvNextModel"),Aso=o(" (ConvNext model)"),yso=l(),sp=a("li"),qoe=a("strong"),Lso=o("ctrl"),xso=o(" \u2014 "),gB=a("a"),kso=o("CTRLModel"),Sso=o(" (CTRL model)"),Rso=l(),lp=a("li"),Noe=a("strong"),Bso=o("data2vec-audio"),Pso=o(" \u2014 "),hB=a("a"),$so=o("Data2VecAudioModel"),Iso=o(" (Data2VecAudio model)"),qso=l(),ip=a("li"),joe=a("strong"),Nso=o("data2vec-text"),jso=o(" \u2014 "),pB=a("a"),Dso=o("Data2VecTextModel"),Gso=o(" (Data2VecText model)"),Oso=l(),dp=a("li"),Doe=a("strong"),Vso=o("deberta"),Xso=o(" \u2014 "),_B=a("a"),zso=o("DebertaModel"),Qso=o(" (DeBERTa model)"),Wso=l(),cp=a("li"),Goe=a("strong"),Hso=o("deberta-v2"),Uso=o(" \u2014 "),uB=a("a"),Jso=o("DebertaV2Model"),Yso=o(" (DeBERTa-v2 model)"),Kso=l(),fp=a("li"),Ooe=a("strong"),Zso=o("decision_transformer"),elo=o(" \u2014 "),bB=a("a"),olo=o("DecisionTransformerModel"),rlo=o(" (Decision Transformer model)"),tlo=l(),mp=a("li"),Voe=a("strong"),alo=o("deit"),nlo=o(" \u2014 "),FB=a("a"),slo=o("DeiTModel"),llo=o(" (DeiT model)"),ilo=l(),gp=a("li"),Xoe=a("strong"),dlo=o("detr"),clo=o(" \u2014 "),vB=a("a"),flo=o("DetrModel"),mlo=o(" (DETR model)"),glo=l(),hp=a("li"),zoe=a("strong"),hlo=o("distilbert"),plo=o(" \u2014 "),TB=a("a"),_lo=o("DistilBertModel"),ulo=o(" (DistilBERT model)"),blo=l(),pp=a("li"),Qoe=a("strong"),Flo=o("dpr"),vlo=o(" \u2014 "),MB=a("a"),Tlo=o("DPRQuestionEncoder"),Mlo=o(" (DPR model)"),Elo=l(),_p=a("li"),Woe=a("strong"),Clo=o("dpt"),wlo=o(" \u2014 "),EB=a("a"),Alo=o("DPTModel"),ylo=o(" (DPT model)"),Llo=l(),up=a("li"),Hoe=a("strong"),xlo=o("electra"),klo=o(" \u2014 "),CB=a("a"),Slo=o("ElectraModel"),Rlo=o(" (ELECTRA model)"),Blo=l(),bp=a("li"),Uoe=a("strong"),Plo=o("flaubert"),$lo=o(" \u2014 "),wB=a("a"),Ilo=o("FlaubertModel"),qlo=o(" (FlauBERT model)"),Nlo=l(),Fp=a("li"),Joe=a("strong"),jlo=o("fnet"),Dlo=o(" \u2014 "),AB=a("a"),Glo=o("FNetModel"),Olo=o(" (FNet model)"),Vlo=l(),vp=a("li"),Yoe=a("strong"),Xlo=o("fsmt"),zlo=o(" \u2014 "),yB=a("a"),Qlo=o("FSMTModel"),Wlo=o(" (FairSeq Machine-Translation model)"),Hlo=l(),js=a("li"),Koe=a("strong"),Ulo=o("funnel"),Jlo=o(" \u2014 "),LB=a("a"),Ylo=o("FunnelModel"),Klo=o(" or "),xB=a("a"),Zlo=o("FunnelBaseModel"),eio=o(" (Funnel Transformer model)"),oio=l(),Tp=a("li"),Zoe=a("strong"),rio=o("glpn"),tio=o(" \u2014 "),kB=a("a"),aio=o("GLPNModel"),nio=o(" (GLPN model)"),sio=l(),Mp=a("li"),ere=a("strong"),lio=o("gpt2"),iio=o(" \u2014 "),SB=a("a"),dio=o("GPT2Model"),cio=o(" (OpenAI GPT-2 model)"),fio=l(),Ep=a("li"),ore=a("strong"),mio=o("gpt_neo"),gio=o(" \u2014 "),RB=a("a"),hio=o("GPTNeoModel"),pio=o(" (GPT Neo model)"),_io=l(),Cp=a("li"),rre=a("strong"),uio=o("gptj"),bio=o(" \u2014 "),BB=a("a"),Fio=o("GPTJModel"),vio=o(" (GPT-J model)"),Tio=l(),wp=a("li"),tre=a("strong"),Mio=o("hubert"),Eio=o(" \u2014 "),PB=a("a"),Cio=o("HubertModel"),wio=o(" (Hubert model)"),Aio=l(),Ap=a("li"),are=a("strong"),yio=o("ibert"),Lio=o(" \u2014 "),$B=a("a"),xio=o("IBertModel"),kio=o(" (I-BERT model)"),Sio=l(),yp=a("li"),nre=a("strong"),Rio=o("imagegpt"),Bio=o(" \u2014 "),IB=a("a"),Pio=o("ImageGPTModel"),$io=o(" (ImageGPT model)"),Iio=l(),Lp=a("li"),sre=a("strong"),qio=o("layoutlm"),Nio=o(" \u2014 "),qB=a("a"),jio=o("LayoutLMModel"),Dio=o(" (LayoutLM model)"),Gio=l(),xp=a("li"),lre=a("strong"),Oio=o("layoutlmv2"),Vio=o(" \u2014 "),NB=a("a"),Xio=o("LayoutLMv2Model"),zio=o(" (LayoutLMv2 model)"),Qio=l(),kp=a("li"),ire=a("strong"),Wio=o("led"),Hio=o(" \u2014 "),jB=a("a"),Uio=o("LEDModel"),Jio=o(" (LED model)"),Yio=l(),Sp=a("li"),dre=a("strong"),Kio=o("longformer"),Zio=o(" \u2014 "),DB=a("a"),edo=o("LongformerModel"),odo=o(" (Longformer model)"),rdo=l(),Rp=a("li"),cre=a("strong"),tdo=o("luke"),ado=o(" \u2014 "),GB=a("a"),ndo=o("LukeModel"),sdo=o(" (LUKE model)"),ldo=l(),Bp=a("li"),fre=a("strong"),ido=o("lxmert"),ddo=o(" \u2014 "),OB=a("a"),cdo=o("LxmertModel"),fdo=o(" (LXMERT model)"),mdo=l(),Pp=a("li"),mre=a("strong"),gdo=o("m2m_100"),hdo=o(" \u2014 "),VB=a("a"),pdo=o("M2M100Model"),_do=o(" (M2M100 model)"),udo=l(),$p=a("li"),gre=a("strong"),bdo=o("marian"),Fdo=o(" \u2014 "),XB=a("a"),vdo=o("MarianModel"),Tdo=o(" (Marian model)"),Mdo=l(),Ip=a("li"),hre=a("strong"),Edo=o("maskformer"),Cdo=o(" \u2014 "),zB=a("a"),wdo=o("MaskFormerModel"),Ado=o(" (MaskFormer model)"),ydo=l(),qp=a("li"),pre=a("strong"),Ldo=o("mbart"),xdo=o(" \u2014 "),QB=a("a"),kdo=o("MBartModel"),Sdo=o(" (mBART model)"),Rdo=l(),Np=a("li"),_re=a("strong"),Bdo=o("megatron-bert"),Pdo=o(" \u2014 "),WB=a("a"),$do=o("MegatronBertModel"),Ido=o(" (MegatronBert model)"),qdo=l(),jp=a("li"),ure=a("strong"),Ndo=o("mobilebert"),jdo=o(" \u2014 "),HB=a("a"),Ddo=o("MobileBertModel"),Gdo=o(" (MobileBERT model)"),Odo=l(),Dp=a("li"),bre=a("strong"),Vdo=o("mpnet"),Xdo=o(" \u2014 "),UB=a("a"),zdo=o("MPNetModel"),Qdo=o(" (MPNet model)"),Wdo=l(),Gp=a("li"),Fre=a("strong"),Hdo=o("mt5"),Udo=o(" \u2014 "),JB=a("a"),Jdo=o("MT5Model"),Ydo=o(" (mT5 model)"),Kdo=l(),Op=a("li"),vre=a("strong"),Zdo=o("nystromformer"),eco=o(" \u2014 "),YB=a("a"),oco=o("NystromformerModel"),rco=o(" (Nystromformer model)"),tco=l(),Vp=a("li"),Tre=a("strong"),aco=o("openai-gpt"),nco=o(" \u2014 "),KB=a("a"),sco=o("OpenAIGPTModel"),lco=o(" (OpenAI GPT model)"),ico=l(),Xp=a("li"),Mre=a("strong"),dco=o("pegasus"),cco=o(" \u2014 "),ZB=a("a"),fco=o("PegasusModel"),mco=o(" (Pegasus model)"),gco=l(),zp=a("li"),Ere=a("strong"),hco=o("perceiver"),pco=o(" \u2014 "),eP=a("a"),_co=o("PerceiverModel"),uco=o(" (Perceiver model)"),bco=l(),Qp=a("li"),Cre=a("strong"),Fco=o("plbart"),vco=o(" \u2014 "),oP=a("a"),Tco=o("PLBartModel"),Mco=o(" (PLBart model)"),Eco=l(),Wp=a("li"),wre=a("strong"),Cco=o("poolformer"),wco=o(" \u2014 "),rP=a("a"),Aco=o("PoolFormerModel"),yco=o(" (PoolFormer model)"),Lco=l(),Hp=a("li"),Are=a("strong"),xco=o("prophetnet"),kco=o(" \u2014 "),tP=a("a"),Sco=o("ProphetNetModel"),Rco=o(" (ProphetNet model)"),Bco=l(),Up=a("li"),yre=a("strong"),Pco=o("qdqbert"),$co=o(" \u2014 "),aP=a("a"),Ico=o("QDQBertModel"),qco=o(" (QDQBert model)"),Nco=l(),Jp=a("li"),Lre=a("strong"),jco=o("reformer"),Dco=o(" \u2014 "),nP=a("a"),Gco=o("ReformerModel"),Oco=o(" (Reformer model)"),Vco=l(),Yp=a("li"),xre=a("strong"),Xco=o("rembert"),zco=o(" \u2014 "),sP=a("a"),Qco=o("RemBertModel"),Wco=o(" (RemBERT model)"),Hco=l(),Kp=a("li"),kre=a("strong"),Uco=o("resnet"),Jco=o(" \u2014 "),lP=a("a"),Yco=o("ResNetModel"),Kco=o(" (ResNet model)"),Zco=l(),Zp=a("li"),Sre=a("strong"),efo=o("retribert"),ofo=o(" \u2014 "),iP=a("a"),rfo=o("RetriBertModel"),tfo=o(" (RetriBERT model)"),afo=l(),e_=a("li"),Rre=a("strong"),nfo=o("roberta"),sfo=o(" \u2014 "),dP=a("a"),lfo=o("RobertaModel"),ifo=o(" (RoBERTa model)"),dfo=l(),o_=a("li"),Bre=a("strong"),cfo=o("roformer"),ffo=o(" \u2014 "),cP=a("a"),mfo=o("RoFormerModel"),gfo=o(" (RoFormer model)"),hfo=l(),r_=a("li"),Pre=a("strong"),pfo=o("segformer"),_fo=o(" \u2014 "),fP=a("a"),ufo=o("SegformerModel"),bfo=o(" (SegFormer model)"),Ffo=l(),t_=a("li"),$re=a("strong"),vfo=o("sew"),Tfo=o(" \u2014 "),mP=a("a"),Mfo=o("SEWModel"),Efo=o(" (SEW model)"),Cfo=l(),a_=a("li"),Ire=a("strong"),wfo=o("sew-d"),Afo=o(" \u2014 "),gP=a("a"),yfo=o("SEWDModel"),Lfo=o(" (SEW-D model)"),xfo=l(),n_=a("li"),qre=a("strong"),kfo=o("speech_to_text"),Sfo=o(" \u2014 "),hP=a("a"),Rfo=o("Speech2TextModel"),Bfo=o(" (Speech2Text model)"),Pfo=l(),s_=a("li"),Nre=a("strong"),$fo=o("splinter"),Ifo=o(" \u2014 "),pP=a("a"),qfo=o("SplinterModel"),Nfo=o(" (Splinter model)"),jfo=l(),l_=a("li"),jre=a("strong"),Dfo=o("squeezebert"),Gfo=o(" \u2014 "),_P=a("a"),Ofo=o("SqueezeBertModel"),Vfo=o(" (SqueezeBERT model)"),Xfo=l(),i_=a("li"),Dre=a("strong"),zfo=o("swin"),Qfo=o(" \u2014 "),uP=a("a"),Wfo=o("SwinModel"),Hfo=o(" (Swin model)"),Ufo=l(),d_=a("li"),Gre=a("strong"),Jfo=o("t5"),Yfo=o(" \u2014 "),bP=a("a"),Kfo=o("T5Model"),Zfo=o(" (T5 model)"),emo=l(),c_=a("li"),Ore=a("strong"),omo=o("tapas"),rmo=o(" \u2014 "),FP=a("a"),tmo=o("TapasModel"),amo=o(" (TAPAS model)"),nmo=l(),f_=a("li"),Vre=a("strong"),smo=o("transfo-xl"),lmo=o(" \u2014 "),vP=a("a"),imo=o("TransfoXLModel"),dmo=o(" (Transformer-XL model)"),cmo=l(),m_=a("li"),Xre=a("strong"),fmo=o("unispeech"),mmo=o(" \u2014 "),TP=a("a"),gmo=o("UniSpeechModel"),hmo=o(" (UniSpeech model)"),pmo=l(),g_=a("li"),zre=a("strong"),_mo=o("unispeech-sat"),umo=o(" \u2014 "),MP=a("a"),bmo=o("UniSpeechSatModel"),Fmo=o(" (UniSpeechSat model)"),vmo=l(),h_=a("li"),Qre=a("strong"),Tmo=o("van"),Mmo=o(" \u2014 "),EP=a("a"),Emo=o("VanModel"),Cmo=o(" (VAN model)"),wmo=l(),p_=a("li"),Wre=a("strong"),Amo=o("vilt"),ymo=o(" \u2014 "),CP=a("a"),Lmo=o("ViltModel"),xmo=o(" (ViLT model)"),kmo=l(),__=a("li"),Hre=a("strong"),Smo=o("vision-text-dual-encoder"),Rmo=o(" \u2014 "),wP=a("a"),Bmo=o("VisionTextDualEncoderModel"),Pmo=o(" (VisionTextDualEncoder model)"),$mo=l(),u_=a("li"),Ure=a("strong"),Imo=o("visual_bert"),qmo=o(" \u2014 "),AP=a("a"),Nmo=o("VisualBertModel"),jmo=o(" (VisualBert model)"),Dmo=l(),b_=a("li"),Jre=a("strong"),Gmo=o("vit"),Omo=o(" \u2014 "),yP=a("a"),Vmo=o("ViTModel"),Xmo=o(" (ViT model)"),zmo=l(),F_=a("li"),Yre=a("strong"),Qmo=o("vit_mae"),Wmo=o(" \u2014 "),LP=a("a"),Hmo=o("ViTMAEModel"),Umo=o(" (ViTMAE model)"),Jmo=l(),v_=a("li"),Kre=a("strong"),Ymo=o("wav2vec2"),Kmo=o(" \u2014 "),xP=a("a"),Zmo=o("Wav2Vec2Model"),ego=o(" (Wav2Vec2 model)"),ogo=l(),T_=a("li"),Zre=a("strong"),rgo=o("wavlm"),tgo=o(" \u2014 "),kP=a("a"),ago=o("WavLMModel"),ngo=o(" (WavLM model)"),sgo=l(),M_=a("li"),ete=a("strong"),lgo=o("xglm"),igo=o(" \u2014 "),SP=a("a"),dgo=o("XGLMModel"),cgo=o(" (XGLM model)"),fgo=l(),E_=a("li"),ote=a("strong"),mgo=o("xlm"),ggo=o(" \u2014 "),RP=a("a"),hgo=o("XLMModel"),pgo=o(" (XLM model)"),_go=l(),C_=a("li"),rte=a("strong"),ugo=o("xlm-prophetnet"),bgo=o(" \u2014 "),BP=a("a"),Fgo=o("XLMProphetNetModel"),vgo=o(" (XLMProphetNet model)"),Tgo=l(),w_=a("li"),tte=a("strong"),Mgo=o("xlm-roberta"),Ego=o(" \u2014 "),PP=a("a"),Cgo=o("XLMRobertaModel"),wgo=o(" (XLM-RoBERTa model)"),Ago=l(),A_=a("li"),ate=a("strong"),ygo=o("xlm-roberta-xl"),Lgo=o(" \u2014 "),$P=a("a"),xgo=o("XLMRobertaXLModel"),kgo=o(" (XLM-RoBERTa-XL model)"),Sgo=l(),y_=a("li"),nte=a("strong"),Rgo=o("xlnet"),Bgo=o(" \u2014 "),IP=a("a"),Pgo=o("XLNetModel"),$go=o(" (XLNet model)"),Igo=l(),L_=a("li"),ste=a("strong"),qgo=o("yoso"),Ngo=o(" \u2014 "),qP=a("a"),jgo=o("YosoModel"),Dgo=o(" (YOSO model)"),Ggo=l(),x_=a("p"),Ogo=o("The model is set in evaluation mode by default using "),lte=a("code"),Vgo=o("model.eval()"),Xgo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ite=a("code"),zgo=o("model.train()"),Qgo=l(),dte=a("p"),Wgo=o("Examples:"),Hgo=l(),f(tw.$$.fragment),sRe=l(),Zi=a("h2"),k_=a("a"),cte=a("span"),f(aw.$$.fragment),Ugo=l(),fte=a("span"),Jgo=o("AutoModelForPreTraining"),lRe=l(),Yo=a("div"),f(nw.$$.fragment),Ygo=l(),ed=a("p"),Kgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NP=a("a"),Zgo=o("from_pretrained()"),eho=o(" class method or the "),jP=a("a"),oho=o("from_config()"),rho=o(` class
method.`),tho=l(),sw=a("p"),aho=o("This class cannot be instantiated directly using "),mte=a("code"),nho=o("__init__()"),sho=o(" (throws an error)."),lho=l(),zr=a("div"),f(lw.$$.fragment),iho=l(),gte=a("p"),dho=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cho=l(),od=a("p"),fho=o(`Note:
Loading a model from its configuration file does `),hte=a("strong"),mho=o("not"),gho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DP=a("a"),hho=o("from_pretrained()"),pho=o(" to load the model weights."),_ho=l(),pte=a("p"),uho=o("Examples:"),bho=l(),f(iw.$$.fragment),Fho=l(),Ne=a("div"),f(dw.$$.fragment),vho=l(),_te=a("p"),Tho=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Mho=l(),za=a("p"),Eho=o("The model class to instantiate is selected based on the "),ute=a("code"),Cho=o("model_type"),who=o(` property of the config object (either
passed as an argument or loaded from `),bte=a("code"),Aho=o("pretrained_model_name_or_path"),yho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fte=a("code"),Lho=o("pretrained_model_name_or_path"),xho=o(":"),kho=l(),S=a("ul"),S_=a("li"),vte=a("strong"),Sho=o("albert"),Rho=o(" \u2014 "),GP=a("a"),Bho=o("AlbertForPreTraining"),Pho=o(" (ALBERT model)"),$ho=l(),R_=a("li"),Tte=a("strong"),Iho=o("bart"),qho=o(" \u2014 "),OP=a("a"),Nho=o("BartForConditionalGeneration"),jho=o(" (BART model)"),Dho=l(),B_=a("li"),Mte=a("strong"),Gho=o("bert"),Oho=o(" \u2014 "),VP=a("a"),Vho=o("BertForPreTraining"),Xho=o(" (BERT model)"),zho=l(),P_=a("li"),Ete=a("strong"),Qho=o("big_bird"),Who=o(" \u2014 "),XP=a("a"),Hho=o("BigBirdForPreTraining"),Uho=o(" (BigBird model)"),Jho=l(),$_=a("li"),Cte=a("strong"),Yho=o("camembert"),Kho=o(" \u2014 "),zP=a("a"),Zho=o("CamembertForMaskedLM"),epo=o(" (CamemBERT model)"),opo=l(),I_=a("li"),wte=a("strong"),rpo=o("ctrl"),tpo=o(" \u2014 "),QP=a("a"),apo=o("CTRLLMHeadModel"),npo=o(" (CTRL model)"),spo=l(),q_=a("li"),Ate=a("strong"),lpo=o("data2vec-text"),ipo=o(" \u2014 "),WP=a("a"),dpo=o("Data2VecTextForMaskedLM"),cpo=o(" (Data2VecText model)"),fpo=l(),N_=a("li"),yte=a("strong"),mpo=o("deberta"),gpo=o(" \u2014 "),HP=a("a"),hpo=o("DebertaForMaskedLM"),ppo=o(" (DeBERTa model)"),_po=l(),j_=a("li"),Lte=a("strong"),upo=o("deberta-v2"),bpo=o(" \u2014 "),UP=a("a"),Fpo=o("DebertaV2ForMaskedLM"),vpo=o(" (DeBERTa-v2 model)"),Tpo=l(),D_=a("li"),xte=a("strong"),Mpo=o("distilbert"),Epo=o(" \u2014 "),JP=a("a"),Cpo=o("DistilBertForMaskedLM"),wpo=o(" (DistilBERT model)"),Apo=l(),G_=a("li"),kte=a("strong"),ypo=o("electra"),Lpo=o(" \u2014 "),YP=a("a"),xpo=o("ElectraForPreTraining"),kpo=o(" (ELECTRA model)"),Spo=l(),O_=a("li"),Ste=a("strong"),Rpo=o("flaubert"),Bpo=o(" \u2014 "),KP=a("a"),Ppo=o("FlaubertWithLMHeadModel"),$po=o(" (FlauBERT model)"),Ipo=l(),V_=a("li"),Rte=a("strong"),qpo=o("fnet"),Npo=o(" \u2014 "),ZP=a("a"),jpo=o("FNetForPreTraining"),Dpo=o(" (FNet model)"),Gpo=l(),X_=a("li"),Bte=a("strong"),Opo=o("fsmt"),Vpo=o(" \u2014 "),e$=a("a"),Xpo=o("FSMTForConditionalGeneration"),zpo=o(" (FairSeq Machine-Translation model)"),Qpo=l(),z_=a("li"),Pte=a("strong"),Wpo=o("funnel"),Hpo=o(" \u2014 "),o$=a("a"),Upo=o("FunnelForPreTraining"),Jpo=o(" (Funnel Transformer model)"),Ypo=l(),Q_=a("li"),$te=a("strong"),Kpo=o("gpt2"),Zpo=o(" \u2014 "),r$=a("a"),e_o=o("GPT2LMHeadModel"),o_o=o(" (OpenAI GPT-2 model)"),r_o=l(),W_=a("li"),Ite=a("strong"),t_o=o("ibert"),a_o=o(" \u2014 "),t$=a("a"),n_o=o("IBertForMaskedLM"),s_o=o(" (I-BERT model)"),l_o=l(),H_=a("li"),qte=a("strong"),i_o=o("layoutlm"),d_o=o(" \u2014 "),a$=a("a"),c_o=o("LayoutLMForMaskedLM"),f_o=o(" (LayoutLM model)"),m_o=l(),U_=a("li"),Nte=a("strong"),g_o=o("longformer"),h_o=o(" \u2014 "),n$=a("a"),p_o=o("LongformerForMaskedLM"),__o=o(" (Longformer model)"),u_o=l(),J_=a("li"),jte=a("strong"),b_o=o("lxmert"),F_o=o(" \u2014 "),s$=a("a"),v_o=o("LxmertForPreTraining"),T_o=o(" (LXMERT model)"),M_o=l(),Y_=a("li"),Dte=a("strong"),E_o=o("megatron-bert"),C_o=o(" \u2014 "),l$=a("a"),w_o=o("MegatronBertForPreTraining"),A_o=o(" (MegatronBert model)"),y_o=l(),K_=a("li"),Gte=a("strong"),L_o=o("mobilebert"),x_o=o(" \u2014 "),i$=a("a"),k_o=o("MobileBertForPreTraining"),S_o=o(" (MobileBERT model)"),R_o=l(),Z_=a("li"),Ote=a("strong"),B_o=o("mpnet"),P_o=o(" \u2014 "),d$=a("a"),$_o=o("MPNetForMaskedLM"),I_o=o(" (MPNet model)"),q_o=l(),eu=a("li"),Vte=a("strong"),N_o=o("openai-gpt"),j_o=o(" \u2014 "),c$=a("a"),D_o=o("OpenAIGPTLMHeadModel"),G_o=o(" (OpenAI GPT model)"),O_o=l(),ou=a("li"),Xte=a("strong"),V_o=o("retribert"),X_o=o(" \u2014 "),f$=a("a"),z_o=o("RetriBertModel"),Q_o=o(" (RetriBERT model)"),W_o=l(),ru=a("li"),zte=a("strong"),H_o=o("roberta"),U_o=o(" \u2014 "),m$=a("a"),J_o=o("RobertaForMaskedLM"),Y_o=o(" (RoBERTa model)"),K_o=l(),tu=a("li"),Qte=a("strong"),Z_o=o("squeezebert"),euo=o(" \u2014 "),g$=a("a"),ouo=o("SqueezeBertForMaskedLM"),ruo=o(" (SqueezeBERT model)"),tuo=l(),au=a("li"),Wte=a("strong"),auo=o("t5"),nuo=o(" \u2014 "),h$=a("a"),suo=o("T5ForConditionalGeneration"),luo=o(" (T5 model)"),iuo=l(),nu=a("li"),Hte=a("strong"),duo=o("tapas"),cuo=o(" \u2014 "),p$=a("a"),fuo=o("TapasForMaskedLM"),muo=o(" (TAPAS model)"),guo=l(),su=a("li"),Ute=a("strong"),huo=o("transfo-xl"),puo=o(" \u2014 "),_$=a("a"),_uo=o("TransfoXLLMHeadModel"),uuo=o(" (Transformer-XL model)"),buo=l(),lu=a("li"),Jte=a("strong"),Fuo=o("unispeech"),vuo=o(" \u2014 "),u$=a("a"),Tuo=o("UniSpeechForPreTraining"),Muo=o(" (UniSpeech model)"),Euo=l(),iu=a("li"),Yte=a("strong"),Cuo=o("unispeech-sat"),wuo=o(" \u2014 "),b$=a("a"),Auo=o("UniSpeechSatForPreTraining"),yuo=o(" (UniSpeechSat model)"),Luo=l(),du=a("li"),Kte=a("strong"),xuo=o("visual_bert"),kuo=o(" \u2014 "),F$=a("a"),Suo=o("VisualBertForPreTraining"),Ruo=o(" (VisualBert model)"),Buo=l(),cu=a("li"),Zte=a("strong"),Puo=o("vit_mae"),$uo=o(" \u2014 "),v$=a("a"),Iuo=o("ViTMAEForPreTraining"),quo=o(" (ViTMAE model)"),Nuo=l(),fu=a("li"),eae=a("strong"),juo=o("wav2vec2"),Duo=o(" \u2014 "),T$=a("a"),Guo=o("Wav2Vec2ForPreTraining"),Ouo=o(" (Wav2Vec2 model)"),Vuo=l(),mu=a("li"),oae=a("strong"),Xuo=o("xlm"),zuo=o(" \u2014 "),M$=a("a"),Quo=o("XLMWithLMHeadModel"),Wuo=o(" (XLM model)"),Huo=l(),gu=a("li"),rae=a("strong"),Uuo=o("xlm-roberta"),Juo=o(" \u2014 "),E$=a("a"),Yuo=o("XLMRobertaForMaskedLM"),Kuo=o(" (XLM-RoBERTa model)"),Zuo=l(),hu=a("li"),tae=a("strong"),e1o=o("xlm-roberta-xl"),o1o=o(" \u2014 "),C$=a("a"),r1o=o("XLMRobertaXLForMaskedLM"),t1o=o(" (XLM-RoBERTa-XL model)"),a1o=l(),pu=a("li"),aae=a("strong"),n1o=o("xlnet"),s1o=o(" \u2014 "),w$=a("a"),l1o=o("XLNetLMHeadModel"),i1o=o(" (XLNet model)"),d1o=l(),_u=a("p"),c1o=o("The model is set in evaluation mode by default using "),nae=a("code"),f1o=o("model.eval()"),m1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sae=a("code"),g1o=o("model.train()"),h1o=l(),lae=a("p"),p1o=o("Examples:"),_1o=l(),f(cw.$$.fragment),iRe=l(),rd=a("h2"),uu=a("a"),iae=a("span"),f(fw.$$.fragment),u1o=l(),dae=a("span"),b1o=o("AutoModelForCausalLM"),dRe=l(),Ko=a("div"),f(mw.$$.fragment),F1o=l(),td=a("p"),v1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),A$=a("a"),T1o=o("from_pretrained()"),M1o=o(" class method or the "),y$=a("a"),E1o=o("from_config()"),C1o=o(` class
method.`),w1o=l(),gw=a("p"),A1o=o("This class cannot be instantiated directly using "),cae=a("code"),y1o=o("__init__()"),L1o=o(" (throws an error)."),x1o=l(),Qr=a("div"),f(hw.$$.fragment),k1o=l(),fae=a("p"),S1o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),R1o=l(),ad=a("p"),B1o=o(`Note:
Loading a model from its configuration file does `),mae=a("strong"),P1o=o("not"),$1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),L$=a("a"),I1o=o("from_pretrained()"),q1o=o(" to load the model weights."),N1o=l(),gae=a("p"),j1o=o("Examples:"),D1o=l(),f(pw.$$.fragment),G1o=l(),je=a("div"),f(_w.$$.fragment),O1o=l(),hae=a("p"),V1o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),X1o=l(),Qa=a("p"),z1o=o("The model class to instantiate is selected based on the "),pae=a("code"),Q1o=o("model_type"),W1o=o(` property of the config object (either
passed as an argument or loaded from `),_ae=a("code"),H1o=o("pretrained_model_name_or_path"),U1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uae=a("code"),J1o=o("pretrained_model_name_or_path"),Y1o=o(":"),K1o=l(),$=a("ul"),bu=a("li"),bae=a("strong"),Z1o=o("bart"),e4o=o(" \u2014 "),x$=a("a"),o4o=o("BartForCausalLM"),r4o=o(" (BART model)"),t4o=l(),Fu=a("li"),Fae=a("strong"),a4o=o("bert"),n4o=o(" \u2014 "),k$=a("a"),s4o=o("BertLMHeadModel"),l4o=o(" (BERT model)"),i4o=l(),vu=a("li"),vae=a("strong"),d4o=o("bert-generation"),c4o=o(" \u2014 "),S$=a("a"),f4o=o("BertGenerationDecoder"),m4o=o(" (Bert Generation model)"),g4o=l(),Tu=a("li"),Tae=a("strong"),h4o=o("big_bird"),p4o=o(" \u2014 "),R$=a("a"),_4o=o("BigBirdForCausalLM"),u4o=o(" (BigBird model)"),b4o=l(),Mu=a("li"),Mae=a("strong"),F4o=o("bigbird_pegasus"),v4o=o(" \u2014 "),B$=a("a"),T4o=o("BigBirdPegasusForCausalLM"),M4o=o(" (BigBirdPegasus model)"),E4o=l(),Eu=a("li"),Eae=a("strong"),C4o=o("blenderbot"),w4o=o(" \u2014 "),P$=a("a"),A4o=o("BlenderbotForCausalLM"),y4o=o(" (Blenderbot model)"),L4o=l(),Cu=a("li"),Cae=a("strong"),x4o=o("blenderbot-small"),k4o=o(" \u2014 "),$$=a("a"),S4o=o("BlenderbotSmallForCausalLM"),R4o=o(" (BlenderbotSmall model)"),B4o=l(),wu=a("li"),wae=a("strong"),P4o=o("camembert"),$4o=o(" \u2014 "),I$=a("a"),I4o=o("CamembertForCausalLM"),q4o=o(" (CamemBERT model)"),N4o=l(),Au=a("li"),Aae=a("strong"),j4o=o("ctrl"),D4o=o(" \u2014 "),q$=a("a"),G4o=o("CTRLLMHeadModel"),O4o=o(" (CTRL model)"),V4o=l(),yu=a("li"),yae=a("strong"),X4o=o("data2vec-text"),z4o=o(" \u2014 "),N$=a("a"),Q4o=o("Data2VecTextForCausalLM"),W4o=o(" (Data2VecText model)"),H4o=l(),Lu=a("li"),Lae=a("strong"),U4o=o("electra"),J4o=o(" \u2014 "),j$=a("a"),Y4o=o("ElectraForCausalLM"),K4o=o(" (ELECTRA model)"),Z4o=l(),xu=a("li"),xae=a("strong"),ebo=o("gpt2"),obo=o(" \u2014 "),D$=a("a"),rbo=o("GPT2LMHeadModel"),tbo=o(" (OpenAI GPT-2 model)"),abo=l(),ku=a("li"),kae=a("strong"),nbo=o("gpt_neo"),sbo=o(" \u2014 "),G$=a("a"),lbo=o("GPTNeoForCausalLM"),ibo=o(" (GPT Neo model)"),dbo=l(),Su=a("li"),Sae=a("strong"),cbo=o("gptj"),fbo=o(" \u2014 "),O$=a("a"),mbo=o("GPTJForCausalLM"),gbo=o(" (GPT-J model)"),hbo=l(),Ru=a("li"),Rae=a("strong"),pbo=o("marian"),_bo=o(" \u2014 "),V$=a("a"),ubo=o("MarianForCausalLM"),bbo=o(" (Marian model)"),Fbo=l(),Bu=a("li"),Bae=a("strong"),vbo=o("mbart"),Tbo=o(" \u2014 "),X$=a("a"),Mbo=o("MBartForCausalLM"),Ebo=o(" (mBART model)"),Cbo=l(),Pu=a("li"),Pae=a("strong"),wbo=o("megatron-bert"),Abo=o(" \u2014 "),z$=a("a"),ybo=o("MegatronBertForCausalLM"),Lbo=o(" (MegatronBert model)"),xbo=l(),$u=a("li"),$ae=a("strong"),kbo=o("openai-gpt"),Sbo=o(" \u2014 "),Q$=a("a"),Rbo=o("OpenAIGPTLMHeadModel"),Bbo=o(" (OpenAI GPT model)"),Pbo=l(),Iu=a("li"),Iae=a("strong"),$bo=o("pegasus"),Ibo=o(" \u2014 "),W$=a("a"),qbo=o("PegasusForCausalLM"),Nbo=o(" (Pegasus model)"),jbo=l(),qu=a("li"),qae=a("strong"),Dbo=o("plbart"),Gbo=o(" \u2014 "),H$=a("a"),Obo=o("PLBartForCausalLM"),Vbo=o(" (PLBart model)"),Xbo=l(),Nu=a("li"),Nae=a("strong"),zbo=o("prophetnet"),Qbo=o(" \u2014 "),U$=a("a"),Wbo=o("ProphetNetForCausalLM"),Hbo=o(" (ProphetNet model)"),Ubo=l(),ju=a("li"),jae=a("strong"),Jbo=o("qdqbert"),Ybo=o(" \u2014 "),J$=a("a"),Kbo=o("QDQBertLMHeadModel"),Zbo=o(" (QDQBert model)"),e5o=l(),Du=a("li"),Dae=a("strong"),o5o=o("reformer"),r5o=o(" \u2014 "),Y$=a("a"),t5o=o("ReformerModelWithLMHead"),a5o=o(" (Reformer model)"),n5o=l(),Gu=a("li"),Gae=a("strong"),s5o=o("rembert"),l5o=o(" \u2014 "),K$=a("a"),i5o=o("RemBertForCausalLM"),d5o=o(" (RemBERT model)"),c5o=l(),Ou=a("li"),Oae=a("strong"),f5o=o("roberta"),m5o=o(" \u2014 "),Z$=a("a"),g5o=o("RobertaForCausalLM"),h5o=o(" (RoBERTa model)"),p5o=l(),Vu=a("li"),Vae=a("strong"),_5o=o("roformer"),u5o=o(" \u2014 "),eI=a("a"),b5o=o("RoFormerForCausalLM"),F5o=o(" (RoFormer model)"),v5o=l(),Xu=a("li"),Xae=a("strong"),T5o=o("speech_to_text_2"),M5o=o(" \u2014 "),oI=a("a"),E5o=o("Speech2Text2ForCausalLM"),C5o=o(" (Speech2Text2 model)"),w5o=l(),zu=a("li"),zae=a("strong"),A5o=o("transfo-xl"),y5o=o(" \u2014 "),rI=a("a"),L5o=o("TransfoXLLMHeadModel"),x5o=o(" (Transformer-XL model)"),k5o=l(),Qu=a("li"),Qae=a("strong"),S5o=o("trocr"),R5o=o(" \u2014 "),tI=a("a"),B5o=o("TrOCRForCausalLM"),P5o=o(" (TrOCR model)"),$5o=l(),Wu=a("li"),Wae=a("strong"),I5o=o("xglm"),q5o=o(" \u2014 "),aI=a("a"),N5o=o("XGLMForCausalLM"),j5o=o(" (XGLM model)"),D5o=l(),Hu=a("li"),Hae=a("strong"),G5o=o("xlm"),O5o=o(" \u2014 "),nI=a("a"),V5o=o("XLMWithLMHeadModel"),X5o=o(" (XLM model)"),z5o=l(),Uu=a("li"),Uae=a("strong"),Q5o=o("xlm-prophetnet"),W5o=o(" \u2014 "),sI=a("a"),H5o=o("XLMProphetNetForCausalLM"),U5o=o(" (XLMProphetNet model)"),J5o=l(),Ju=a("li"),Jae=a("strong"),Y5o=o("xlm-roberta"),K5o=o(" \u2014 "),lI=a("a"),Z5o=o("XLMRobertaForCausalLM"),e3o=o(" (XLM-RoBERTa model)"),o3o=l(),Yu=a("li"),Yae=a("strong"),r3o=o("xlm-roberta-xl"),t3o=o(" \u2014 "),iI=a("a"),a3o=o("XLMRobertaXLForCausalLM"),n3o=o(" (XLM-RoBERTa-XL model)"),s3o=l(),Ku=a("li"),Kae=a("strong"),l3o=o("xlnet"),i3o=o(" \u2014 "),dI=a("a"),d3o=o("XLNetLMHeadModel"),c3o=o(" (XLNet model)"),f3o=l(),Zu=a("p"),m3o=o("The model is set in evaluation mode by default using "),Zae=a("code"),g3o=o("model.eval()"),h3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ene=a("code"),p3o=o("model.train()"),_3o=l(),one=a("p"),u3o=o("Examples:"),b3o=l(),f(uw.$$.fragment),cRe=l(),nd=a("h2"),e1=a("a"),rne=a("span"),f(bw.$$.fragment),F3o=l(),tne=a("span"),v3o=o("AutoModelForMaskedLM"),fRe=l(),Zo=a("div"),f(Fw.$$.fragment),T3o=l(),sd=a("p"),M3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cI=a("a"),E3o=o("from_pretrained()"),C3o=o(" class method or the "),fI=a("a"),w3o=o("from_config()"),A3o=o(` class
method.`),y3o=l(),vw=a("p"),L3o=o("This class cannot be instantiated directly using "),ane=a("code"),x3o=o("__init__()"),k3o=o(" (throws an error)."),S3o=l(),Wr=a("div"),f(Tw.$$.fragment),R3o=l(),nne=a("p"),B3o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),P3o=l(),ld=a("p"),$3o=o(`Note:
Loading a model from its configuration file does `),sne=a("strong"),I3o=o("not"),q3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mI=a("a"),N3o=o("from_pretrained()"),j3o=o(" to load the model weights."),D3o=l(),lne=a("p"),G3o=o("Examples:"),O3o=l(),f(Mw.$$.fragment),V3o=l(),De=a("div"),f(Ew.$$.fragment),X3o=l(),ine=a("p"),z3o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Q3o=l(),Wa=a("p"),W3o=o("The model class to instantiate is selected based on the "),dne=a("code"),H3o=o("model_type"),U3o=o(` property of the config object (either
passed as an argument or loaded from `),cne=a("code"),J3o=o("pretrained_model_name_or_path"),Y3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fne=a("code"),K3o=o("pretrained_model_name_or_path"),Z3o=o(":"),e2o=l(),I=a("ul"),o1=a("li"),mne=a("strong"),o2o=o("albert"),r2o=o(" \u2014 "),gI=a("a"),t2o=o("AlbertForMaskedLM"),a2o=o(" (ALBERT model)"),n2o=l(),r1=a("li"),gne=a("strong"),s2o=o("bart"),l2o=o(" \u2014 "),hI=a("a"),i2o=o("BartForConditionalGeneration"),d2o=o(" (BART model)"),c2o=l(),t1=a("li"),hne=a("strong"),f2o=o("bert"),m2o=o(" \u2014 "),pI=a("a"),g2o=o("BertForMaskedLM"),h2o=o(" (BERT model)"),p2o=l(),a1=a("li"),pne=a("strong"),_2o=o("big_bird"),u2o=o(" \u2014 "),_I=a("a"),b2o=o("BigBirdForMaskedLM"),F2o=o(" (BigBird model)"),v2o=l(),n1=a("li"),_ne=a("strong"),T2o=o("camembert"),M2o=o(" \u2014 "),uI=a("a"),E2o=o("CamembertForMaskedLM"),C2o=o(" (CamemBERT model)"),w2o=l(),s1=a("li"),une=a("strong"),A2o=o("convbert"),y2o=o(" \u2014 "),bI=a("a"),L2o=o("ConvBertForMaskedLM"),x2o=o(" (ConvBERT model)"),k2o=l(),l1=a("li"),bne=a("strong"),S2o=o("data2vec-text"),R2o=o(" \u2014 "),FI=a("a"),B2o=o("Data2VecTextForMaskedLM"),P2o=o(" (Data2VecText model)"),$2o=l(),i1=a("li"),Fne=a("strong"),I2o=o("deberta"),q2o=o(" \u2014 "),vI=a("a"),N2o=o("DebertaForMaskedLM"),j2o=o(" (DeBERTa model)"),D2o=l(),d1=a("li"),vne=a("strong"),G2o=o("deberta-v2"),O2o=o(" \u2014 "),TI=a("a"),V2o=o("DebertaV2ForMaskedLM"),X2o=o(" (DeBERTa-v2 model)"),z2o=l(),c1=a("li"),Tne=a("strong"),Q2o=o("distilbert"),W2o=o(" \u2014 "),MI=a("a"),H2o=o("DistilBertForMaskedLM"),U2o=o(" (DistilBERT model)"),J2o=l(),f1=a("li"),Mne=a("strong"),Y2o=o("electra"),K2o=o(" \u2014 "),EI=a("a"),Z2o=o("ElectraForMaskedLM"),eFo=o(" (ELECTRA model)"),oFo=l(),m1=a("li"),Ene=a("strong"),rFo=o("flaubert"),tFo=o(" \u2014 "),CI=a("a"),aFo=o("FlaubertWithLMHeadModel"),nFo=o(" (FlauBERT model)"),sFo=l(),g1=a("li"),Cne=a("strong"),lFo=o("fnet"),iFo=o(" \u2014 "),wI=a("a"),dFo=o("FNetForMaskedLM"),cFo=o(" (FNet model)"),fFo=l(),h1=a("li"),wne=a("strong"),mFo=o("funnel"),gFo=o(" \u2014 "),AI=a("a"),hFo=o("FunnelForMaskedLM"),pFo=o(" (Funnel Transformer model)"),_Fo=l(),p1=a("li"),Ane=a("strong"),uFo=o("ibert"),bFo=o(" \u2014 "),yI=a("a"),FFo=o("IBertForMaskedLM"),vFo=o(" (I-BERT model)"),TFo=l(),_1=a("li"),yne=a("strong"),MFo=o("layoutlm"),EFo=o(" \u2014 "),LI=a("a"),CFo=o("LayoutLMForMaskedLM"),wFo=o(" (LayoutLM model)"),AFo=l(),u1=a("li"),Lne=a("strong"),yFo=o("longformer"),LFo=o(" \u2014 "),xI=a("a"),xFo=o("LongformerForMaskedLM"),kFo=o(" (Longformer model)"),SFo=l(),b1=a("li"),xne=a("strong"),RFo=o("mbart"),BFo=o(" \u2014 "),kI=a("a"),PFo=o("MBartForConditionalGeneration"),$Fo=o(" (mBART model)"),IFo=l(),F1=a("li"),kne=a("strong"),qFo=o("megatron-bert"),NFo=o(" \u2014 "),SI=a("a"),jFo=o("MegatronBertForMaskedLM"),DFo=o(" (MegatronBert model)"),GFo=l(),v1=a("li"),Sne=a("strong"),OFo=o("mobilebert"),VFo=o(" \u2014 "),RI=a("a"),XFo=o("MobileBertForMaskedLM"),zFo=o(" (MobileBERT model)"),QFo=l(),T1=a("li"),Rne=a("strong"),WFo=o("mpnet"),HFo=o(" \u2014 "),BI=a("a"),UFo=o("MPNetForMaskedLM"),JFo=o(" (MPNet model)"),YFo=l(),M1=a("li"),Bne=a("strong"),KFo=o("nystromformer"),ZFo=o(" \u2014 "),PI=a("a"),evo=o("NystromformerForMaskedLM"),ovo=o(" (Nystromformer model)"),rvo=l(),E1=a("li"),Pne=a("strong"),tvo=o("perceiver"),avo=o(" \u2014 "),$I=a("a"),nvo=o("PerceiverForMaskedLM"),svo=o(" (Perceiver model)"),lvo=l(),C1=a("li"),$ne=a("strong"),ivo=o("qdqbert"),dvo=o(" \u2014 "),II=a("a"),cvo=o("QDQBertForMaskedLM"),fvo=o(" (QDQBert model)"),mvo=l(),w1=a("li"),Ine=a("strong"),gvo=o("reformer"),hvo=o(" \u2014 "),qI=a("a"),pvo=o("ReformerForMaskedLM"),_vo=o(" (Reformer model)"),uvo=l(),A1=a("li"),qne=a("strong"),bvo=o("rembert"),Fvo=o(" \u2014 "),NI=a("a"),vvo=o("RemBertForMaskedLM"),Tvo=o(" (RemBERT model)"),Mvo=l(),y1=a("li"),Nne=a("strong"),Evo=o("roberta"),Cvo=o(" \u2014 "),jI=a("a"),wvo=o("RobertaForMaskedLM"),Avo=o(" (RoBERTa model)"),yvo=l(),L1=a("li"),jne=a("strong"),Lvo=o("roformer"),xvo=o(" \u2014 "),DI=a("a"),kvo=o("RoFormerForMaskedLM"),Svo=o(" (RoFormer model)"),Rvo=l(),x1=a("li"),Dne=a("strong"),Bvo=o("squeezebert"),Pvo=o(" \u2014 "),GI=a("a"),$vo=o("SqueezeBertForMaskedLM"),Ivo=o(" (SqueezeBERT model)"),qvo=l(),k1=a("li"),Gne=a("strong"),Nvo=o("tapas"),jvo=o(" \u2014 "),OI=a("a"),Dvo=o("TapasForMaskedLM"),Gvo=o(" (TAPAS model)"),Ovo=l(),S1=a("li"),One=a("strong"),Vvo=o("wav2vec2"),Xvo=o(" \u2014 "),Vne=a("code"),zvo=o("Wav2Vec2ForMaskedLM"),Qvo=o("(Wav2Vec2 model)"),Wvo=l(),R1=a("li"),Xne=a("strong"),Hvo=o("xlm"),Uvo=o(" \u2014 "),VI=a("a"),Jvo=o("XLMWithLMHeadModel"),Yvo=o(" (XLM model)"),Kvo=l(),B1=a("li"),zne=a("strong"),Zvo=o("xlm-roberta"),e6o=o(" \u2014 "),XI=a("a"),o6o=o("XLMRobertaForMaskedLM"),r6o=o(" (XLM-RoBERTa model)"),t6o=l(),P1=a("li"),Qne=a("strong"),a6o=o("xlm-roberta-xl"),n6o=o(" \u2014 "),zI=a("a"),s6o=o("XLMRobertaXLForMaskedLM"),l6o=o(" (XLM-RoBERTa-XL model)"),i6o=l(),$1=a("li"),Wne=a("strong"),d6o=o("yoso"),c6o=o(" \u2014 "),QI=a("a"),f6o=o("YosoForMaskedLM"),m6o=o(" (YOSO model)"),g6o=l(),I1=a("p"),h6o=o("The model is set in evaluation mode by default using "),Hne=a("code"),p6o=o("model.eval()"),_6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Une=a("code"),u6o=o("model.train()"),b6o=l(),Jne=a("p"),F6o=o("Examples:"),v6o=l(),f(Cw.$$.fragment),mRe=l(),id=a("h2"),q1=a("a"),Yne=a("span"),f(ww.$$.fragment),T6o=l(),Kne=a("span"),M6o=o("AutoModelForSeq2SeqLM"),gRe=l(),er=a("div"),f(Aw.$$.fragment),E6o=l(),dd=a("p"),C6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WI=a("a"),w6o=o("from_pretrained()"),A6o=o(" class method or the "),HI=a("a"),y6o=o("from_config()"),L6o=o(` class
method.`),x6o=l(),yw=a("p"),k6o=o("This class cannot be instantiated directly using "),Zne=a("code"),S6o=o("__init__()"),R6o=o(" (throws an error)."),B6o=l(),Hr=a("div"),f(Lw.$$.fragment),P6o=l(),ese=a("p"),$6o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),I6o=l(),cd=a("p"),q6o=o(`Note:
Loading a model from its configuration file does `),ose=a("strong"),N6o=o("not"),j6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UI=a("a"),D6o=o("from_pretrained()"),G6o=o(" to load the model weights."),O6o=l(),rse=a("p"),V6o=o("Examples:"),X6o=l(),f(xw.$$.fragment),z6o=l(),Ge=a("div"),f(kw.$$.fragment),Q6o=l(),tse=a("p"),W6o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),H6o=l(),Ha=a("p"),U6o=o("The model class to instantiate is selected based on the "),ase=a("code"),J6o=o("model_type"),Y6o=o(` property of the config object (either
passed as an argument or loaded from `),nse=a("code"),K6o=o("pretrained_model_name_or_path"),Z6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sse=a("code"),eTo=o("pretrained_model_name_or_path"),oTo=o(":"),rTo=l(),se=a("ul"),N1=a("li"),lse=a("strong"),tTo=o("bart"),aTo=o(" \u2014 "),JI=a("a"),nTo=o("BartForConditionalGeneration"),sTo=o(" (BART model)"),lTo=l(),j1=a("li"),ise=a("strong"),iTo=o("bigbird_pegasus"),dTo=o(" \u2014 "),YI=a("a"),cTo=o("BigBirdPegasusForConditionalGeneration"),fTo=o(" (BigBirdPegasus model)"),mTo=l(),D1=a("li"),dse=a("strong"),gTo=o("blenderbot"),hTo=o(" \u2014 "),KI=a("a"),pTo=o("BlenderbotForConditionalGeneration"),_To=o(" (Blenderbot model)"),uTo=l(),G1=a("li"),cse=a("strong"),bTo=o("blenderbot-small"),FTo=o(" \u2014 "),ZI=a("a"),vTo=o("BlenderbotSmallForConditionalGeneration"),TTo=o(" (BlenderbotSmall model)"),MTo=l(),O1=a("li"),fse=a("strong"),ETo=o("encoder-decoder"),CTo=o(" \u2014 "),eq=a("a"),wTo=o("EncoderDecoderModel"),ATo=o(" (Encoder decoder model)"),yTo=l(),V1=a("li"),mse=a("strong"),LTo=o("fsmt"),xTo=o(" \u2014 "),oq=a("a"),kTo=o("FSMTForConditionalGeneration"),STo=o(" (FairSeq Machine-Translation model)"),RTo=l(),X1=a("li"),gse=a("strong"),BTo=o("led"),PTo=o(" \u2014 "),rq=a("a"),$To=o("LEDForConditionalGeneration"),ITo=o(" (LED model)"),qTo=l(),z1=a("li"),hse=a("strong"),NTo=o("m2m_100"),jTo=o(" \u2014 "),tq=a("a"),DTo=o("M2M100ForConditionalGeneration"),GTo=o(" (M2M100 model)"),OTo=l(),Q1=a("li"),pse=a("strong"),VTo=o("marian"),XTo=o(" \u2014 "),aq=a("a"),zTo=o("MarianMTModel"),QTo=o(" (Marian model)"),WTo=l(),W1=a("li"),_se=a("strong"),HTo=o("mbart"),UTo=o(" \u2014 "),nq=a("a"),JTo=o("MBartForConditionalGeneration"),YTo=o(" (mBART model)"),KTo=l(),H1=a("li"),use=a("strong"),ZTo=o("mt5"),eMo=o(" \u2014 "),sq=a("a"),oMo=o("MT5ForConditionalGeneration"),rMo=o(" (mT5 model)"),tMo=l(),U1=a("li"),bse=a("strong"),aMo=o("pegasus"),nMo=o(" \u2014 "),lq=a("a"),sMo=o("PegasusForConditionalGeneration"),lMo=o(" (Pegasus model)"),iMo=l(),J1=a("li"),Fse=a("strong"),dMo=o("plbart"),cMo=o(" \u2014 "),iq=a("a"),fMo=o("PLBartForConditionalGeneration"),mMo=o(" (PLBart model)"),gMo=l(),Y1=a("li"),vse=a("strong"),hMo=o("prophetnet"),pMo=o(" \u2014 "),dq=a("a"),_Mo=o("ProphetNetForConditionalGeneration"),uMo=o(" (ProphetNet model)"),bMo=l(),K1=a("li"),Tse=a("strong"),FMo=o("t5"),vMo=o(" \u2014 "),cq=a("a"),TMo=o("T5ForConditionalGeneration"),MMo=o(" (T5 model)"),EMo=l(),Z1=a("li"),Mse=a("strong"),CMo=o("xlm-prophetnet"),wMo=o(" \u2014 "),fq=a("a"),AMo=o("XLMProphetNetForConditionalGeneration"),yMo=o(" (XLMProphetNet model)"),LMo=l(),e4=a("p"),xMo=o("The model is set in evaluation mode by default using "),Ese=a("code"),kMo=o("model.eval()"),SMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cse=a("code"),RMo=o("model.train()"),BMo=l(),wse=a("p"),PMo=o("Examples:"),$Mo=l(),f(Sw.$$.fragment),hRe=l(),fd=a("h2"),o4=a("a"),Ase=a("span"),f(Rw.$$.fragment),IMo=l(),yse=a("span"),qMo=o("AutoModelForSequenceClassification"),pRe=l(),or=a("div"),f(Bw.$$.fragment),NMo=l(),md=a("p"),jMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mq=a("a"),DMo=o("from_pretrained()"),GMo=o(" class method or the "),gq=a("a"),OMo=o("from_config()"),VMo=o(` class
method.`),XMo=l(),Pw=a("p"),zMo=o("This class cannot be instantiated directly using "),Lse=a("code"),QMo=o("__init__()"),WMo=o(" (throws an error)."),HMo=l(),Ur=a("div"),f($w.$$.fragment),UMo=l(),xse=a("p"),JMo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),YMo=l(),gd=a("p"),KMo=o(`Note:
Loading a model from its configuration file does `),kse=a("strong"),ZMo=o("not"),eEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hq=a("a"),oEo=o("from_pretrained()"),rEo=o(" to load the model weights."),tEo=l(),Sse=a("p"),aEo=o("Examples:"),nEo=l(),f(Iw.$$.fragment),sEo=l(),Oe=a("div"),f(qw.$$.fragment),lEo=l(),Rse=a("p"),iEo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dEo=l(),Ua=a("p"),cEo=o("The model class to instantiate is selected based on the "),Bse=a("code"),fEo=o("model_type"),mEo=o(` property of the config object (either
passed as an argument or loaded from `),Pse=a("code"),gEo=o("pretrained_model_name_or_path"),hEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$se=a("code"),pEo=o("pretrained_model_name_or_path"),_Eo=o(":"),uEo=l(),y=a("ul"),r4=a("li"),Ise=a("strong"),bEo=o("albert"),FEo=o(" \u2014 "),pq=a("a"),vEo=o("AlbertForSequenceClassification"),TEo=o(" (ALBERT model)"),MEo=l(),t4=a("li"),qse=a("strong"),EEo=o("bart"),CEo=o(" \u2014 "),_q=a("a"),wEo=o("BartForSequenceClassification"),AEo=o(" (BART model)"),yEo=l(),a4=a("li"),Nse=a("strong"),LEo=o("bert"),xEo=o(" \u2014 "),uq=a("a"),kEo=o("BertForSequenceClassification"),SEo=o(" (BERT model)"),REo=l(),n4=a("li"),jse=a("strong"),BEo=o("big_bird"),PEo=o(" \u2014 "),bq=a("a"),$Eo=o("BigBirdForSequenceClassification"),IEo=o(" (BigBird model)"),qEo=l(),s4=a("li"),Dse=a("strong"),NEo=o("bigbird_pegasus"),jEo=o(" \u2014 "),Fq=a("a"),DEo=o("BigBirdPegasusForSequenceClassification"),GEo=o(" (BigBirdPegasus model)"),OEo=l(),l4=a("li"),Gse=a("strong"),VEo=o("camembert"),XEo=o(" \u2014 "),vq=a("a"),zEo=o("CamembertForSequenceClassification"),QEo=o(" (CamemBERT model)"),WEo=l(),i4=a("li"),Ose=a("strong"),HEo=o("canine"),UEo=o(" \u2014 "),Tq=a("a"),JEo=o("CanineForSequenceClassification"),YEo=o(" (Canine model)"),KEo=l(),d4=a("li"),Vse=a("strong"),ZEo=o("convbert"),eCo=o(" \u2014 "),Mq=a("a"),oCo=o("ConvBertForSequenceClassification"),rCo=o(" (ConvBERT model)"),tCo=l(),c4=a("li"),Xse=a("strong"),aCo=o("ctrl"),nCo=o(" \u2014 "),Eq=a("a"),sCo=o("CTRLForSequenceClassification"),lCo=o(" (CTRL model)"),iCo=l(),f4=a("li"),zse=a("strong"),dCo=o("data2vec-text"),cCo=o(" \u2014 "),Cq=a("a"),fCo=o("Data2VecTextForSequenceClassification"),mCo=o(" (Data2VecText model)"),gCo=l(),m4=a("li"),Qse=a("strong"),hCo=o("deberta"),pCo=o(" \u2014 "),wq=a("a"),_Co=o("DebertaForSequenceClassification"),uCo=o(" (DeBERTa model)"),bCo=l(),g4=a("li"),Wse=a("strong"),FCo=o("deberta-v2"),vCo=o(" \u2014 "),Aq=a("a"),TCo=o("DebertaV2ForSequenceClassification"),MCo=o(" (DeBERTa-v2 model)"),ECo=l(),h4=a("li"),Hse=a("strong"),CCo=o("distilbert"),wCo=o(" \u2014 "),yq=a("a"),ACo=o("DistilBertForSequenceClassification"),yCo=o(" (DistilBERT model)"),LCo=l(),p4=a("li"),Use=a("strong"),xCo=o("electra"),kCo=o(" \u2014 "),Lq=a("a"),SCo=o("ElectraForSequenceClassification"),RCo=o(" (ELECTRA model)"),BCo=l(),_4=a("li"),Jse=a("strong"),PCo=o("flaubert"),$Co=o(" \u2014 "),xq=a("a"),ICo=o("FlaubertForSequenceClassification"),qCo=o(" (FlauBERT model)"),NCo=l(),u4=a("li"),Yse=a("strong"),jCo=o("fnet"),DCo=o(" \u2014 "),kq=a("a"),GCo=o("FNetForSequenceClassification"),OCo=o(" (FNet model)"),VCo=l(),b4=a("li"),Kse=a("strong"),XCo=o("funnel"),zCo=o(" \u2014 "),Sq=a("a"),QCo=o("FunnelForSequenceClassification"),WCo=o(" (Funnel Transformer model)"),HCo=l(),F4=a("li"),Zse=a("strong"),UCo=o("gpt2"),JCo=o(" \u2014 "),Rq=a("a"),YCo=o("GPT2ForSequenceClassification"),KCo=o(" (OpenAI GPT-2 model)"),ZCo=l(),v4=a("li"),ele=a("strong"),ewo=o("gpt_neo"),owo=o(" \u2014 "),Bq=a("a"),rwo=o("GPTNeoForSequenceClassification"),two=o(" (GPT Neo model)"),awo=l(),T4=a("li"),ole=a("strong"),nwo=o("gptj"),swo=o(" \u2014 "),Pq=a("a"),lwo=o("GPTJForSequenceClassification"),iwo=o(" (GPT-J model)"),dwo=l(),M4=a("li"),rle=a("strong"),cwo=o("ibert"),fwo=o(" \u2014 "),$q=a("a"),mwo=o("IBertForSequenceClassification"),gwo=o(" (I-BERT model)"),hwo=l(),E4=a("li"),tle=a("strong"),pwo=o("layoutlm"),_wo=o(" \u2014 "),Iq=a("a"),uwo=o("LayoutLMForSequenceClassification"),bwo=o(" (LayoutLM model)"),Fwo=l(),C4=a("li"),ale=a("strong"),vwo=o("layoutlmv2"),Two=o(" \u2014 "),qq=a("a"),Mwo=o("LayoutLMv2ForSequenceClassification"),Ewo=o(" (LayoutLMv2 model)"),Cwo=l(),w4=a("li"),nle=a("strong"),wwo=o("led"),Awo=o(" \u2014 "),Nq=a("a"),ywo=o("LEDForSequenceClassification"),Lwo=o(" (LED model)"),xwo=l(),A4=a("li"),sle=a("strong"),kwo=o("longformer"),Swo=o(" \u2014 "),jq=a("a"),Rwo=o("LongformerForSequenceClassification"),Bwo=o(" (Longformer model)"),Pwo=l(),y4=a("li"),lle=a("strong"),$wo=o("mbart"),Iwo=o(" \u2014 "),Dq=a("a"),qwo=o("MBartForSequenceClassification"),Nwo=o(" (mBART model)"),jwo=l(),L4=a("li"),ile=a("strong"),Dwo=o("megatron-bert"),Gwo=o(" \u2014 "),Gq=a("a"),Owo=o("MegatronBertForSequenceClassification"),Vwo=o(" (MegatronBert model)"),Xwo=l(),x4=a("li"),dle=a("strong"),zwo=o("mobilebert"),Qwo=o(" \u2014 "),Oq=a("a"),Wwo=o("MobileBertForSequenceClassification"),Hwo=o(" (MobileBERT model)"),Uwo=l(),k4=a("li"),cle=a("strong"),Jwo=o("mpnet"),Ywo=o(" \u2014 "),Vq=a("a"),Kwo=o("MPNetForSequenceClassification"),Zwo=o(" (MPNet model)"),eAo=l(),S4=a("li"),fle=a("strong"),oAo=o("nystromformer"),rAo=o(" \u2014 "),Xq=a("a"),tAo=o("NystromformerForSequenceClassification"),aAo=o(" (Nystromformer model)"),nAo=l(),R4=a("li"),mle=a("strong"),sAo=o("openai-gpt"),lAo=o(" \u2014 "),zq=a("a"),iAo=o("OpenAIGPTForSequenceClassification"),dAo=o(" (OpenAI GPT model)"),cAo=l(),B4=a("li"),gle=a("strong"),fAo=o("perceiver"),mAo=o(" \u2014 "),Qq=a("a"),gAo=o("PerceiverForSequenceClassification"),hAo=o(" (Perceiver model)"),pAo=l(),P4=a("li"),hle=a("strong"),_Ao=o("plbart"),uAo=o(" \u2014 "),Wq=a("a"),bAo=o("PLBartForSequenceClassification"),FAo=o(" (PLBart model)"),vAo=l(),$4=a("li"),ple=a("strong"),TAo=o("qdqbert"),MAo=o(" \u2014 "),Hq=a("a"),EAo=o("QDQBertForSequenceClassification"),CAo=o(" (QDQBert model)"),wAo=l(),I4=a("li"),_le=a("strong"),AAo=o("reformer"),yAo=o(" \u2014 "),Uq=a("a"),LAo=o("ReformerForSequenceClassification"),xAo=o(" (Reformer model)"),kAo=l(),q4=a("li"),ule=a("strong"),SAo=o("rembert"),RAo=o(" \u2014 "),Jq=a("a"),BAo=o("RemBertForSequenceClassification"),PAo=o(" (RemBERT model)"),$Ao=l(),N4=a("li"),ble=a("strong"),IAo=o("roberta"),qAo=o(" \u2014 "),Yq=a("a"),NAo=o("RobertaForSequenceClassification"),jAo=o(" (RoBERTa model)"),DAo=l(),j4=a("li"),Fle=a("strong"),GAo=o("roformer"),OAo=o(" \u2014 "),Kq=a("a"),VAo=o("RoFormerForSequenceClassification"),XAo=o(" (RoFormer model)"),zAo=l(),D4=a("li"),vle=a("strong"),QAo=o("squeezebert"),WAo=o(" \u2014 "),Zq=a("a"),HAo=o("SqueezeBertForSequenceClassification"),UAo=o(" (SqueezeBERT model)"),JAo=l(),G4=a("li"),Tle=a("strong"),YAo=o("tapas"),KAo=o(" \u2014 "),eN=a("a"),ZAo=o("TapasForSequenceClassification"),e0o=o(" (TAPAS model)"),o0o=l(),O4=a("li"),Mle=a("strong"),r0o=o("transfo-xl"),t0o=o(" \u2014 "),oN=a("a"),a0o=o("TransfoXLForSequenceClassification"),n0o=o(" (Transformer-XL model)"),s0o=l(),V4=a("li"),Ele=a("strong"),l0o=o("xlm"),i0o=o(" \u2014 "),rN=a("a"),d0o=o("XLMForSequenceClassification"),c0o=o(" (XLM model)"),f0o=l(),X4=a("li"),Cle=a("strong"),m0o=o("xlm-roberta"),g0o=o(" \u2014 "),tN=a("a"),h0o=o("XLMRobertaForSequenceClassification"),p0o=o(" (XLM-RoBERTa model)"),_0o=l(),z4=a("li"),wle=a("strong"),u0o=o("xlm-roberta-xl"),b0o=o(" \u2014 "),aN=a("a"),F0o=o("XLMRobertaXLForSequenceClassification"),v0o=o(" (XLM-RoBERTa-XL model)"),T0o=l(),Q4=a("li"),Ale=a("strong"),M0o=o("xlnet"),E0o=o(" \u2014 "),nN=a("a"),C0o=o("XLNetForSequenceClassification"),w0o=o(" (XLNet model)"),A0o=l(),W4=a("li"),yle=a("strong"),y0o=o("yoso"),L0o=o(" \u2014 "),sN=a("a"),x0o=o("YosoForSequenceClassification"),k0o=o(" (YOSO model)"),S0o=l(),H4=a("p"),R0o=o("The model is set in evaluation mode by default using "),Lle=a("code"),B0o=o("model.eval()"),P0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xle=a("code"),$0o=o("model.train()"),I0o=l(),kle=a("p"),q0o=o("Examples:"),N0o=l(),f(Nw.$$.fragment),_Re=l(),hd=a("h2"),U4=a("a"),Sle=a("span"),f(jw.$$.fragment),j0o=l(),Rle=a("span"),D0o=o("AutoModelForMultipleChoice"),uRe=l(),rr=a("div"),f(Dw.$$.fragment),G0o=l(),pd=a("p"),O0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lN=a("a"),V0o=o("from_pretrained()"),X0o=o(" class method or the "),iN=a("a"),z0o=o("from_config()"),Q0o=o(` class
method.`),W0o=l(),Gw=a("p"),H0o=o("This class cannot be instantiated directly using "),Ble=a("code"),U0o=o("__init__()"),J0o=o(" (throws an error)."),Y0o=l(),Jr=a("div"),f(Ow.$$.fragment),K0o=l(),Ple=a("p"),Z0o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eyo=l(),_d=a("p"),oyo=o(`Note:
Loading a model from its configuration file does `),$le=a("strong"),ryo=o("not"),tyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dN=a("a"),ayo=o("from_pretrained()"),nyo=o(" to load the model weights."),syo=l(),Ile=a("p"),lyo=o("Examples:"),iyo=l(),f(Vw.$$.fragment),dyo=l(),Ve=a("div"),f(Xw.$$.fragment),cyo=l(),qle=a("p"),fyo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),myo=l(),Ja=a("p"),gyo=o("The model class to instantiate is selected based on the "),Nle=a("code"),hyo=o("model_type"),pyo=o(` property of the config object (either
passed as an argument or loaded from `),jle=a("code"),_yo=o("pretrained_model_name_or_path"),uyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dle=a("code"),byo=o("pretrained_model_name_or_path"),Fyo=o(":"),vyo=l(),G=a("ul"),J4=a("li"),Gle=a("strong"),Tyo=o("albert"),Myo=o(" \u2014 "),cN=a("a"),Eyo=o("AlbertForMultipleChoice"),Cyo=o(" (ALBERT model)"),wyo=l(),Y4=a("li"),Ole=a("strong"),Ayo=o("bert"),yyo=o(" \u2014 "),fN=a("a"),Lyo=o("BertForMultipleChoice"),xyo=o(" (BERT model)"),kyo=l(),K4=a("li"),Vle=a("strong"),Syo=o("big_bird"),Ryo=o(" \u2014 "),mN=a("a"),Byo=o("BigBirdForMultipleChoice"),Pyo=o(" (BigBird model)"),$yo=l(),Z4=a("li"),Xle=a("strong"),Iyo=o("camembert"),qyo=o(" \u2014 "),gN=a("a"),Nyo=o("CamembertForMultipleChoice"),jyo=o(" (CamemBERT model)"),Dyo=l(),eb=a("li"),zle=a("strong"),Gyo=o("canine"),Oyo=o(" \u2014 "),hN=a("a"),Vyo=o("CanineForMultipleChoice"),Xyo=o(" (Canine model)"),zyo=l(),ob=a("li"),Qle=a("strong"),Qyo=o("convbert"),Wyo=o(" \u2014 "),pN=a("a"),Hyo=o("ConvBertForMultipleChoice"),Uyo=o(" (ConvBERT model)"),Jyo=l(),rb=a("li"),Wle=a("strong"),Yyo=o("data2vec-text"),Kyo=o(" \u2014 "),_N=a("a"),Zyo=o("Data2VecTextForMultipleChoice"),eLo=o(" (Data2VecText model)"),oLo=l(),tb=a("li"),Hle=a("strong"),rLo=o("distilbert"),tLo=o(" \u2014 "),uN=a("a"),aLo=o("DistilBertForMultipleChoice"),nLo=o(" (DistilBERT model)"),sLo=l(),ab=a("li"),Ule=a("strong"),lLo=o("electra"),iLo=o(" \u2014 "),bN=a("a"),dLo=o("ElectraForMultipleChoice"),cLo=o(" (ELECTRA model)"),fLo=l(),nb=a("li"),Jle=a("strong"),mLo=o("flaubert"),gLo=o(" \u2014 "),FN=a("a"),hLo=o("FlaubertForMultipleChoice"),pLo=o(" (FlauBERT model)"),_Lo=l(),sb=a("li"),Yle=a("strong"),uLo=o("fnet"),bLo=o(" \u2014 "),vN=a("a"),FLo=o("FNetForMultipleChoice"),vLo=o(" (FNet model)"),TLo=l(),lb=a("li"),Kle=a("strong"),MLo=o("funnel"),ELo=o(" \u2014 "),TN=a("a"),CLo=o("FunnelForMultipleChoice"),wLo=o(" (Funnel Transformer model)"),ALo=l(),ib=a("li"),Zle=a("strong"),yLo=o("ibert"),LLo=o(" \u2014 "),MN=a("a"),xLo=o("IBertForMultipleChoice"),kLo=o(" (I-BERT model)"),SLo=l(),db=a("li"),eie=a("strong"),RLo=o("longformer"),BLo=o(" \u2014 "),EN=a("a"),PLo=o("LongformerForMultipleChoice"),$Lo=o(" (Longformer model)"),ILo=l(),cb=a("li"),oie=a("strong"),qLo=o("megatron-bert"),NLo=o(" \u2014 "),CN=a("a"),jLo=o("MegatronBertForMultipleChoice"),DLo=o(" (MegatronBert model)"),GLo=l(),fb=a("li"),rie=a("strong"),OLo=o("mobilebert"),VLo=o(" \u2014 "),wN=a("a"),XLo=o("MobileBertForMultipleChoice"),zLo=o(" (MobileBERT model)"),QLo=l(),mb=a("li"),tie=a("strong"),WLo=o("mpnet"),HLo=o(" \u2014 "),AN=a("a"),ULo=o("MPNetForMultipleChoice"),JLo=o(" (MPNet model)"),YLo=l(),gb=a("li"),aie=a("strong"),KLo=o("nystromformer"),ZLo=o(" \u2014 "),yN=a("a"),e8o=o("NystromformerForMultipleChoice"),o8o=o(" (Nystromformer model)"),r8o=l(),hb=a("li"),nie=a("strong"),t8o=o("qdqbert"),a8o=o(" \u2014 "),LN=a("a"),n8o=o("QDQBertForMultipleChoice"),s8o=o(" (QDQBert model)"),l8o=l(),pb=a("li"),sie=a("strong"),i8o=o("rembert"),d8o=o(" \u2014 "),xN=a("a"),c8o=o("RemBertForMultipleChoice"),f8o=o(" (RemBERT model)"),m8o=l(),_b=a("li"),lie=a("strong"),g8o=o("roberta"),h8o=o(" \u2014 "),kN=a("a"),p8o=o("RobertaForMultipleChoice"),_8o=o(" (RoBERTa model)"),u8o=l(),ub=a("li"),iie=a("strong"),b8o=o("roformer"),F8o=o(" \u2014 "),SN=a("a"),v8o=o("RoFormerForMultipleChoice"),T8o=o(" (RoFormer model)"),M8o=l(),bb=a("li"),die=a("strong"),E8o=o("squeezebert"),C8o=o(" \u2014 "),RN=a("a"),w8o=o("SqueezeBertForMultipleChoice"),A8o=o(" (SqueezeBERT model)"),y8o=l(),Fb=a("li"),cie=a("strong"),L8o=o("xlm"),x8o=o(" \u2014 "),BN=a("a"),k8o=o("XLMForMultipleChoice"),S8o=o(" (XLM model)"),R8o=l(),vb=a("li"),fie=a("strong"),B8o=o("xlm-roberta"),P8o=o(" \u2014 "),PN=a("a"),$8o=o("XLMRobertaForMultipleChoice"),I8o=o(" (XLM-RoBERTa model)"),q8o=l(),Tb=a("li"),mie=a("strong"),N8o=o("xlm-roberta-xl"),j8o=o(" \u2014 "),$N=a("a"),D8o=o("XLMRobertaXLForMultipleChoice"),G8o=o(" (XLM-RoBERTa-XL model)"),O8o=l(),Mb=a("li"),gie=a("strong"),V8o=o("xlnet"),X8o=o(" \u2014 "),IN=a("a"),z8o=o("XLNetForMultipleChoice"),Q8o=o(" (XLNet model)"),W8o=l(),Eb=a("li"),hie=a("strong"),H8o=o("yoso"),U8o=o(" \u2014 "),qN=a("a"),J8o=o("YosoForMultipleChoice"),Y8o=o(" (YOSO model)"),K8o=l(),Cb=a("p"),Z8o=o("The model is set in evaluation mode by default using "),pie=a("code"),e7o=o("model.eval()"),o7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ie=a("code"),r7o=o("model.train()"),t7o=l(),uie=a("p"),a7o=o("Examples:"),n7o=l(),f(zw.$$.fragment),bRe=l(),ud=a("h2"),wb=a("a"),bie=a("span"),f(Qw.$$.fragment),s7o=l(),Fie=a("span"),l7o=o("AutoModelForNextSentencePrediction"),FRe=l(),tr=a("div"),f(Ww.$$.fragment),i7o=l(),bd=a("p"),d7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NN=a("a"),c7o=o("from_pretrained()"),f7o=o(" class method or the "),jN=a("a"),m7o=o("from_config()"),g7o=o(` class
method.`),h7o=l(),Hw=a("p"),p7o=o("This class cannot be instantiated directly using "),vie=a("code"),_7o=o("__init__()"),u7o=o(" (throws an error)."),b7o=l(),Yr=a("div"),f(Uw.$$.fragment),F7o=l(),Tie=a("p"),v7o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),T7o=l(),Fd=a("p"),M7o=o(`Note:
Loading a model from its configuration file does `),Mie=a("strong"),E7o=o("not"),C7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DN=a("a"),w7o=o("from_pretrained()"),A7o=o(" to load the model weights."),y7o=l(),Eie=a("p"),L7o=o("Examples:"),x7o=l(),f(Jw.$$.fragment),k7o=l(),Xe=a("div"),f(Yw.$$.fragment),S7o=l(),Cie=a("p"),R7o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),B7o=l(),Ya=a("p"),P7o=o("The model class to instantiate is selected based on the "),wie=a("code"),$7o=o("model_type"),I7o=o(` property of the config object (either
passed as an argument or loaded from `),Aie=a("code"),q7o=o("pretrained_model_name_or_path"),N7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=a("code"),j7o=o("pretrained_model_name_or_path"),D7o=o(":"),G7o=l(),da=a("ul"),Ab=a("li"),Lie=a("strong"),O7o=o("bert"),V7o=o(" \u2014 "),GN=a("a"),X7o=o("BertForNextSentencePrediction"),z7o=o(" (BERT model)"),Q7o=l(),yb=a("li"),xie=a("strong"),W7o=o("fnet"),H7o=o(" \u2014 "),ON=a("a"),U7o=o("FNetForNextSentencePrediction"),J7o=o(" (FNet model)"),Y7o=l(),Lb=a("li"),kie=a("strong"),K7o=o("megatron-bert"),Z7o=o(" \u2014 "),VN=a("a"),e9o=o("MegatronBertForNextSentencePrediction"),o9o=o(" (MegatronBert model)"),r9o=l(),xb=a("li"),Sie=a("strong"),t9o=o("mobilebert"),a9o=o(" \u2014 "),XN=a("a"),n9o=o("MobileBertForNextSentencePrediction"),s9o=o(" (MobileBERT model)"),l9o=l(),kb=a("li"),Rie=a("strong"),i9o=o("qdqbert"),d9o=o(" \u2014 "),zN=a("a"),c9o=o("QDQBertForNextSentencePrediction"),f9o=o(" (QDQBert model)"),m9o=l(),Sb=a("p"),g9o=o("The model is set in evaluation mode by default using "),Bie=a("code"),h9o=o("model.eval()"),p9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pie=a("code"),_9o=o("model.train()"),u9o=l(),$ie=a("p"),b9o=o("Examples:"),F9o=l(),f(Kw.$$.fragment),vRe=l(),vd=a("h2"),Rb=a("a"),Iie=a("span"),f(Zw.$$.fragment),v9o=l(),qie=a("span"),T9o=o("AutoModelForTokenClassification"),TRe=l(),ar=a("div"),f(eA.$$.fragment),M9o=l(),Td=a("p"),E9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QN=a("a"),C9o=o("from_pretrained()"),w9o=o(" class method or the "),WN=a("a"),A9o=o("from_config()"),y9o=o(` class
method.`),L9o=l(),oA=a("p"),x9o=o("This class cannot be instantiated directly using "),Nie=a("code"),k9o=o("__init__()"),S9o=o(" (throws an error)."),R9o=l(),Kr=a("div"),f(rA.$$.fragment),B9o=l(),jie=a("p"),P9o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),$9o=l(),Md=a("p"),I9o=o(`Note:
Loading a model from its configuration file does `),Die=a("strong"),q9o=o("not"),N9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HN=a("a"),j9o=o("from_pretrained()"),D9o=o(" to load the model weights."),G9o=l(),Gie=a("p"),O9o=o("Examples:"),V9o=l(),f(tA.$$.fragment),X9o=l(),ze=a("div"),f(aA.$$.fragment),z9o=l(),Oie=a("p"),Q9o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),W9o=l(),Ka=a("p"),H9o=o("The model class to instantiate is selected based on the "),Vie=a("code"),U9o=o("model_type"),J9o=o(` property of the config object (either
passed as an argument or loaded from `),Xie=a("code"),Y9o=o("pretrained_model_name_or_path"),K9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zie=a("code"),Z9o=o("pretrained_model_name_or_path"),exo=o(":"),oxo=l(),j=a("ul"),Bb=a("li"),Qie=a("strong"),rxo=o("albert"),txo=o(" \u2014 "),UN=a("a"),axo=o("AlbertForTokenClassification"),nxo=o(" (ALBERT model)"),sxo=l(),Pb=a("li"),Wie=a("strong"),lxo=o("bert"),ixo=o(" \u2014 "),JN=a("a"),dxo=o("BertForTokenClassification"),cxo=o(" (BERT model)"),fxo=l(),$b=a("li"),Hie=a("strong"),mxo=o("big_bird"),gxo=o(" \u2014 "),YN=a("a"),hxo=o("BigBirdForTokenClassification"),pxo=o(" (BigBird model)"),_xo=l(),Ib=a("li"),Uie=a("strong"),uxo=o("camembert"),bxo=o(" \u2014 "),KN=a("a"),Fxo=o("CamembertForTokenClassification"),vxo=o(" (CamemBERT model)"),Txo=l(),qb=a("li"),Jie=a("strong"),Mxo=o("canine"),Exo=o(" \u2014 "),ZN=a("a"),Cxo=o("CanineForTokenClassification"),wxo=o(" (Canine model)"),Axo=l(),Nb=a("li"),Yie=a("strong"),yxo=o("convbert"),Lxo=o(" \u2014 "),ej=a("a"),xxo=o("ConvBertForTokenClassification"),kxo=o(" (ConvBERT model)"),Sxo=l(),jb=a("li"),Kie=a("strong"),Rxo=o("data2vec-text"),Bxo=o(" \u2014 "),oj=a("a"),Pxo=o("Data2VecTextForTokenClassification"),$xo=o(" (Data2VecText model)"),Ixo=l(),Db=a("li"),Zie=a("strong"),qxo=o("deberta"),Nxo=o(" \u2014 "),rj=a("a"),jxo=o("DebertaForTokenClassification"),Dxo=o(" (DeBERTa model)"),Gxo=l(),Gb=a("li"),ede=a("strong"),Oxo=o("deberta-v2"),Vxo=o(" \u2014 "),tj=a("a"),Xxo=o("DebertaV2ForTokenClassification"),zxo=o(" (DeBERTa-v2 model)"),Qxo=l(),Ob=a("li"),ode=a("strong"),Wxo=o("distilbert"),Hxo=o(" \u2014 "),aj=a("a"),Uxo=o("DistilBertForTokenClassification"),Jxo=o(" (DistilBERT model)"),Yxo=l(),Vb=a("li"),rde=a("strong"),Kxo=o("electra"),Zxo=o(" \u2014 "),nj=a("a"),eko=o("ElectraForTokenClassification"),oko=o(" (ELECTRA model)"),rko=l(),Xb=a("li"),tde=a("strong"),tko=o("flaubert"),ako=o(" \u2014 "),sj=a("a"),nko=o("FlaubertForTokenClassification"),sko=o(" (FlauBERT model)"),lko=l(),zb=a("li"),ade=a("strong"),iko=o("fnet"),dko=o(" \u2014 "),lj=a("a"),cko=o("FNetForTokenClassification"),fko=o(" (FNet model)"),mko=l(),Qb=a("li"),nde=a("strong"),gko=o("funnel"),hko=o(" \u2014 "),ij=a("a"),pko=o("FunnelForTokenClassification"),_ko=o(" (Funnel Transformer model)"),uko=l(),Wb=a("li"),sde=a("strong"),bko=o("gpt2"),Fko=o(" \u2014 "),dj=a("a"),vko=o("GPT2ForTokenClassification"),Tko=o(" (OpenAI GPT-2 model)"),Mko=l(),Hb=a("li"),lde=a("strong"),Eko=o("ibert"),Cko=o(" \u2014 "),cj=a("a"),wko=o("IBertForTokenClassification"),Ako=o(" (I-BERT model)"),yko=l(),Ub=a("li"),ide=a("strong"),Lko=o("layoutlm"),xko=o(" \u2014 "),fj=a("a"),kko=o("LayoutLMForTokenClassification"),Sko=o(" (LayoutLM model)"),Rko=l(),Jb=a("li"),dde=a("strong"),Bko=o("layoutlmv2"),Pko=o(" \u2014 "),mj=a("a"),$ko=o("LayoutLMv2ForTokenClassification"),Iko=o(" (LayoutLMv2 model)"),qko=l(),Yb=a("li"),cde=a("strong"),Nko=o("longformer"),jko=o(" \u2014 "),gj=a("a"),Dko=o("LongformerForTokenClassification"),Gko=o(" (Longformer model)"),Oko=l(),Kb=a("li"),fde=a("strong"),Vko=o("megatron-bert"),Xko=o(" \u2014 "),hj=a("a"),zko=o("MegatronBertForTokenClassification"),Qko=o(" (MegatronBert model)"),Wko=l(),Zb=a("li"),mde=a("strong"),Hko=o("mobilebert"),Uko=o(" \u2014 "),pj=a("a"),Jko=o("MobileBertForTokenClassification"),Yko=o(" (MobileBERT model)"),Kko=l(),e5=a("li"),gde=a("strong"),Zko=o("mpnet"),eSo=o(" \u2014 "),_j=a("a"),oSo=o("MPNetForTokenClassification"),rSo=o(" (MPNet model)"),tSo=l(),o5=a("li"),hde=a("strong"),aSo=o("nystromformer"),nSo=o(" \u2014 "),uj=a("a"),sSo=o("NystromformerForTokenClassification"),lSo=o(" (Nystromformer model)"),iSo=l(),r5=a("li"),pde=a("strong"),dSo=o("qdqbert"),cSo=o(" \u2014 "),bj=a("a"),fSo=o("QDQBertForTokenClassification"),mSo=o(" (QDQBert model)"),gSo=l(),t5=a("li"),_de=a("strong"),hSo=o("rembert"),pSo=o(" \u2014 "),Fj=a("a"),_So=o("RemBertForTokenClassification"),uSo=o(" (RemBERT model)"),bSo=l(),a5=a("li"),ude=a("strong"),FSo=o("roberta"),vSo=o(" \u2014 "),vj=a("a"),TSo=o("RobertaForTokenClassification"),MSo=o(" (RoBERTa model)"),ESo=l(),n5=a("li"),bde=a("strong"),CSo=o("roformer"),wSo=o(" \u2014 "),Tj=a("a"),ASo=o("RoFormerForTokenClassification"),ySo=o(" (RoFormer model)"),LSo=l(),s5=a("li"),Fde=a("strong"),xSo=o("squeezebert"),kSo=o(" \u2014 "),Mj=a("a"),SSo=o("SqueezeBertForTokenClassification"),RSo=o(" (SqueezeBERT model)"),BSo=l(),l5=a("li"),vde=a("strong"),PSo=o("xlm"),$So=o(" \u2014 "),Ej=a("a"),ISo=o("XLMForTokenClassification"),qSo=o(" (XLM model)"),NSo=l(),i5=a("li"),Tde=a("strong"),jSo=o("xlm-roberta"),DSo=o(" \u2014 "),Cj=a("a"),GSo=o("XLMRobertaForTokenClassification"),OSo=o(" (XLM-RoBERTa model)"),VSo=l(),d5=a("li"),Mde=a("strong"),XSo=o("xlm-roberta-xl"),zSo=o(" \u2014 "),wj=a("a"),QSo=o("XLMRobertaXLForTokenClassification"),WSo=o(" (XLM-RoBERTa-XL model)"),HSo=l(),c5=a("li"),Ede=a("strong"),USo=o("xlnet"),JSo=o(" \u2014 "),Aj=a("a"),YSo=o("XLNetForTokenClassification"),KSo=o(" (XLNet model)"),ZSo=l(),f5=a("li"),Cde=a("strong"),eRo=o("yoso"),oRo=o(" \u2014 "),yj=a("a"),rRo=o("YosoForTokenClassification"),tRo=o(" (YOSO model)"),aRo=l(),m5=a("p"),nRo=o("The model is set in evaluation mode by default using "),wde=a("code"),sRo=o("model.eval()"),lRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ade=a("code"),iRo=o("model.train()"),dRo=l(),yde=a("p"),cRo=o("Examples:"),fRo=l(),f(nA.$$.fragment),MRe=l(),Ed=a("h2"),g5=a("a"),Lde=a("span"),f(sA.$$.fragment),mRo=l(),xde=a("span"),gRo=o("AutoModelForQuestionAnswering"),ERe=l(),nr=a("div"),f(lA.$$.fragment),hRo=l(),Cd=a("p"),pRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Lj=a("a"),_Ro=o("from_pretrained()"),uRo=o(" class method or the "),xj=a("a"),bRo=o("from_config()"),FRo=o(` class
method.`),vRo=l(),iA=a("p"),TRo=o("This class cannot be instantiated directly using "),kde=a("code"),MRo=o("__init__()"),ERo=o(" (throws an error)."),CRo=l(),Zr=a("div"),f(dA.$$.fragment),wRo=l(),Sde=a("p"),ARo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yRo=l(),wd=a("p"),LRo=o(`Note:
Loading a model from its configuration file does `),Rde=a("strong"),xRo=o("not"),kRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kj=a("a"),SRo=o("from_pretrained()"),RRo=o(" to load the model weights."),BRo=l(),Bde=a("p"),PRo=o("Examples:"),$Ro=l(),f(cA.$$.fragment),IRo=l(),Qe=a("div"),f(fA.$$.fragment),qRo=l(),Pde=a("p"),NRo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jRo=l(),Za=a("p"),DRo=o("The model class to instantiate is selected based on the "),$de=a("code"),GRo=o("model_type"),ORo=o(` property of the config object (either
passed as an argument or loaded from `),Ide=a("code"),VRo=o("pretrained_model_name_or_path"),XRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qde=a("code"),zRo=o("pretrained_model_name_or_path"),QRo=o(":"),WRo=l(),R=a("ul"),h5=a("li"),Nde=a("strong"),HRo=o("albert"),URo=o(" \u2014 "),Sj=a("a"),JRo=o("AlbertForQuestionAnswering"),YRo=o(" (ALBERT model)"),KRo=l(),p5=a("li"),jde=a("strong"),ZRo=o("bart"),eBo=o(" \u2014 "),Rj=a("a"),oBo=o("BartForQuestionAnswering"),rBo=o(" (BART model)"),tBo=l(),_5=a("li"),Dde=a("strong"),aBo=o("bert"),nBo=o(" \u2014 "),Bj=a("a"),sBo=o("BertForQuestionAnswering"),lBo=o(" (BERT model)"),iBo=l(),u5=a("li"),Gde=a("strong"),dBo=o("big_bird"),cBo=o(" \u2014 "),Pj=a("a"),fBo=o("BigBirdForQuestionAnswering"),mBo=o(" (BigBird model)"),gBo=l(),b5=a("li"),Ode=a("strong"),hBo=o("bigbird_pegasus"),pBo=o(" \u2014 "),$j=a("a"),_Bo=o("BigBirdPegasusForQuestionAnswering"),uBo=o(" (BigBirdPegasus model)"),bBo=l(),F5=a("li"),Vde=a("strong"),FBo=o("camembert"),vBo=o(" \u2014 "),Ij=a("a"),TBo=o("CamembertForQuestionAnswering"),MBo=o(" (CamemBERT model)"),EBo=l(),v5=a("li"),Xde=a("strong"),CBo=o("canine"),wBo=o(" \u2014 "),qj=a("a"),ABo=o("CanineForQuestionAnswering"),yBo=o(" (Canine model)"),LBo=l(),T5=a("li"),zde=a("strong"),xBo=o("convbert"),kBo=o(" \u2014 "),Nj=a("a"),SBo=o("ConvBertForQuestionAnswering"),RBo=o(" (ConvBERT model)"),BBo=l(),M5=a("li"),Qde=a("strong"),PBo=o("data2vec-text"),$Bo=o(" \u2014 "),jj=a("a"),IBo=o("Data2VecTextForQuestionAnswering"),qBo=o(" (Data2VecText model)"),NBo=l(),E5=a("li"),Wde=a("strong"),jBo=o("deberta"),DBo=o(" \u2014 "),Dj=a("a"),GBo=o("DebertaForQuestionAnswering"),OBo=o(" (DeBERTa model)"),VBo=l(),C5=a("li"),Hde=a("strong"),XBo=o("deberta-v2"),zBo=o(" \u2014 "),Gj=a("a"),QBo=o("DebertaV2ForQuestionAnswering"),WBo=o(" (DeBERTa-v2 model)"),HBo=l(),w5=a("li"),Ude=a("strong"),UBo=o("distilbert"),JBo=o(" \u2014 "),Oj=a("a"),YBo=o("DistilBertForQuestionAnswering"),KBo=o(" (DistilBERT model)"),ZBo=l(),A5=a("li"),Jde=a("strong"),ePo=o("electra"),oPo=o(" \u2014 "),Vj=a("a"),rPo=o("ElectraForQuestionAnswering"),tPo=o(" (ELECTRA model)"),aPo=l(),y5=a("li"),Yde=a("strong"),nPo=o("flaubert"),sPo=o(" \u2014 "),Xj=a("a"),lPo=o("FlaubertForQuestionAnsweringSimple"),iPo=o(" (FlauBERT model)"),dPo=l(),L5=a("li"),Kde=a("strong"),cPo=o("fnet"),fPo=o(" \u2014 "),zj=a("a"),mPo=o("FNetForQuestionAnswering"),gPo=o(" (FNet model)"),hPo=l(),x5=a("li"),Zde=a("strong"),pPo=o("funnel"),_Po=o(" \u2014 "),Qj=a("a"),uPo=o("FunnelForQuestionAnswering"),bPo=o(" (Funnel Transformer model)"),FPo=l(),k5=a("li"),ece=a("strong"),vPo=o("gptj"),TPo=o(" \u2014 "),Wj=a("a"),MPo=o("GPTJForQuestionAnswering"),EPo=o(" (GPT-J model)"),CPo=l(),S5=a("li"),oce=a("strong"),wPo=o("ibert"),APo=o(" \u2014 "),Hj=a("a"),yPo=o("IBertForQuestionAnswering"),LPo=o(" (I-BERT model)"),xPo=l(),R5=a("li"),rce=a("strong"),kPo=o("layoutlmv2"),SPo=o(" \u2014 "),Uj=a("a"),RPo=o("LayoutLMv2ForQuestionAnswering"),BPo=o(" (LayoutLMv2 model)"),PPo=l(),B5=a("li"),tce=a("strong"),$Po=o("led"),IPo=o(" \u2014 "),Jj=a("a"),qPo=o("LEDForQuestionAnswering"),NPo=o(" (LED model)"),jPo=l(),P5=a("li"),ace=a("strong"),DPo=o("longformer"),GPo=o(" \u2014 "),Yj=a("a"),OPo=o("LongformerForQuestionAnswering"),VPo=o(" (Longformer model)"),XPo=l(),$5=a("li"),nce=a("strong"),zPo=o("lxmert"),QPo=o(" \u2014 "),Kj=a("a"),WPo=o("LxmertForQuestionAnswering"),HPo=o(" (LXMERT model)"),UPo=l(),I5=a("li"),sce=a("strong"),JPo=o("mbart"),YPo=o(" \u2014 "),Zj=a("a"),KPo=o("MBartForQuestionAnswering"),ZPo=o(" (mBART model)"),e$o=l(),q5=a("li"),lce=a("strong"),o$o=o("megatron-bert"),r$o=o(" \u2014 "),eD=a("a"),t$o=o("MegatronBertForQuestionAnswering"),a$o=o(" (MegatronBert model)"),n$o=l(),N5=a("li"),ice=a("strong"),s$o=o("mobilebert"),l$o=o(" \u2014 "),oD=a("a"),i$o=o("MobileBertForQuestionAnswering"),d$o=o(" (MobileBERT model)"),c$o=l(),j5=a("li"),dce=a("strong"),f$o=o("mpnet"),m$o=o(" \u2014 "),rD=a("a"),g$o=o("MPNetForQuestionAnswering"),h$o=o(" (MPNet model)"),p$o=l(),D5=a("li"),cce=a("strong"),_$o=o("nystromformer"),u$o=o(" \u2014 "),tD=a("a"),b$o=o("NystromformerForQuestionAnswering"),F$o=o(" (Nystromformer model)"),v$o=l(),G5=a("li"),fce=a("strong"),T$o=o("qdqbert"),M$o=o(" \u2014 "),aD=a("a"),E$o=o("QDQBertForQuestionAnswering"),C$o=o(" (QDQBert model)"),w$o=l(),O5=a("li"),mce=a("strong"),A$o=o("reformer"),y$o=o(" \u2014 "),nD=a("a"),L$o=o("ReformerForQuestionAnswering"),x$o=o(" (Reformer model)"),k$o=l(),V5=a("li"),gce=a("strong"),S$o=o("rembert"),R$o=o(" \u2014 "),sD=a("a"),B$o=o("RemBertForQuestionAnswering"),P$o=o(" (RemBERT model)"),$$o=l(),X5=a("li"),hce=a("strong"),I$o=o("roberta"),q$o=o(" \u2014 "),lD=a("a"),N$o=o("RobertaForQuestionAnswering"),j$o=o(" (RoBERTa model)"),D$o=l(),z5=a("li"),pce=a("strong"),G$o=o("roformer"),O$o=o(" \u2014 "),iD=a("a"),V$o=o("RoFormerForQuestionAnswering"),X$o=o(" (RoFormer model)"),z$o=l(),Q5=a("li"),_ce=a("strong"),Q$o=o("splinter"),W$o=o(" \u2014 "),dD=a("a"),H$o=o("SplinterForQuestionAnswering"),U$o=o(" (Splinter model)"),J$o=l(),W5=a("li"),uce=a("strong"),Y$o=o("squeezebert"),K$o=o(" \u2014 "),cD=a("a"),Z$o=o("SqueezeBertForQuestionAnswering"),eIo=o(" (SqueezeBERT model)"),oIo=l(),H5=a("li"),bce=a("strong"),rIo=o("xlm"),tIo=o(" \u2014 "),fD=a("a"),aIo=o("XLMForQuestionAnsweringSimple"),nIo=o(" (XLM model)"),sIo=l(),U5=a("li"),Fce=a("strong"),lIo=o("xlm-roberta"),iIo=o(" \u2014 "),mD=a("a"),dIo=o("XLMRobertaForQuestionAnswering"),cIo=o(" (XLM-RoBERTa model)"),fIo=l(),J5=a("li"),vce=a("strong"),mIo=o("xlm-roberta-xl"),gIo=o(" \u2014 "),gD=a("a"),hIo=o("XLMRobertaXLForQuestionAnswering"),pIo=o(" (XLM-RoBERTa-XL model)"),_Io=l(),Y5=a("li"),Tce=a("strong"),uIo=o("xlnet"),bIo=o(" \u2014 "),hD=a("a"),FIo=o("XLNetForQuestionAnsweringSimple"),vIo=o(" (XLNet model)"),TIo=l(),K5=a("li"),Mce=a("strong"),MIo=o("yoso"),EIo=o(" \u2014 "),pD=a("a"),CIo=o("YosoForQuestionAnswering"),wIo=o(" (YOSO model)"),AIo=l(),Z5=a("p"),yIo=o("The model is set in evaluation mode by default using "),Ece=a("code"),LIo=o("model.eval()"),xIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cce=a("code"),kIo=o("model.train()"),SIo=l(),wce=a("p"),RIo=o("Examples:"),BIo=l(),f(mA.$$.fragment),CRe=l(),Ad=a("h2"),e3=a("a"),Ace=a("span"),f(gA.$$.fragment),PIo=l(),yce=a("span"),$Io=o("AutoModelForTableQuestionAnswering"),wRe=l(),sr=a("div"),f(hA.$$.fragment),IIo=l(),yd=a("p"),qIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_D=a("a"),NIo=o("from_pretrained()"),jIo=o(" class method or the "),uD=a("a"),DIo=o("from_config()"),GIo=o(` class
method.`),OIo=l(),pA=a("p"),VIo=o("This class cannot be instantiated directly using "),Lce=a("code"),XIo=o("__init__()"),zIo=o(" (throws an error)."),QIo=l(),et=a("div"),f(_A.$$.fragment),WIo=l(),xce=a("p"),HIo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),UIo=l(),Ld=a("p"),JIo=o(`Note:
Loading a model from its configuration file does `),kce=a("strong"),YIo=o("not"),KIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bD=a("a"),ZIo=o("from_pretrained()"),eqo=o(" to load the model weights."),oqo=l(),Sce=a("p"),rqo=o("Examples:"),tqo=l(),f(uA.$$.fragment),aqo=l(),We=a("div"),f(bA.$$.fragment),nqo=l(),Rce=a("p"),sqo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),lqo=l(),en=a("p"),iqo=o("The model class to instantiate is selected based on the "),Bce=a("code"),dqo=o("model_type"),cqo=o(` property of the config object (either
passed as an argument or loaded from `),Pce=a("code"),fqo=o("pretrained_model_name_or_path"),mqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ce=a("code"),gqo=o("pretrained_model_name_or_path"),hqo=o(":"),pqo=l(),Ice=a("ul"),o3=a("li"),qce=a("strong"),_qo=o("tapas"),uqo=o(" \u2014 "),FD=a("a"),bqo=o("TapasForQuestionAnswering"),Fqo=o(" (TAPAS model)"),vqo=l(),r3=a("p"),Tqo=o("The model is set in evaluation mode by default using "),Nce=a("code"),Mqo=o("model.eval()"),Eqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jce=a("code"),Cqo=o("model.train()"),wqo=l(),Dce=a("p"),Aqo=o("Examples:"),yqo=l(),f(FA.$$.fragment),ARe=l(),xd=a("h2"),t3=a("a"),Gce=a("span"),f(vA.$$.fragment),Lqo=l(),Oce=a("span"),xqo=o("AutoModelForImageClassification"),yRe=l(),lr=a("div"),f(TA.$$.fragment),kqo=l(),kd=a("p"),Sqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vD=a("a"),Rqo=o("from_pretrained()"),Bqo=o(" class method or the "),TD=a("a"),Pqo=o("from_config()"),$qo=o(` class
method.`),Iqo=l(),MA=a("p"),qqo=o("This class cannot be instantiated directly using "),Vce=a("code"),Nqo=o("__init__()"),jqo=o(" (throws an error)."),Dqo=l(),ot=a("div"),f(EA.$$.fragment),Gqo=l(),Xce=a("p"),Oqo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Vqo=l(),Sd=a("p"),Xqo=o(`Note:
Loading a model from its configuration file does `),zce=a("strong"),zqo=o("not"),Qqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MD=a("a"),Wqo=o("from_pretrained()"),Hqo=o(" to load the model weights."),Uqo=l(),Qce=a("p"),Jqo=o("Examples:"),Yqo=l(),f(CA.$$.fragment),Kqo=l(),He=a("div"),f(wA.$$.fragment),Zqo=l(),Wce=a("p"),eNo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),oNo=l(),on=a("p"),rNo=o("The model class to instantiate is selected based on the "),Hce=a("code"),tNo=o("model_type"),aNo=o(` property of the config object (either
passed as an argument or loaded from `),Uce=a("code"),nNo=o("pretrained_model_name_or_path"),sNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jce=a("code"),lNo=o("pretrained_model_name_or_path"),iNo=o(":"),dNo=l(),he=a("ul"),a3=a("li"),Yce=a("strong"),cNo=o("beit"),fNo=o(" \u2014 "),ED=a("a"),mNo=o("BeitForImageClassification"),gNo=o(" (BEiT model)"),hNo=l(),n3=a("li"),Kce=a("strong"),pNo=o("convnext"),_No=o(" \u2014 "),CD=a("a"),uNo=o("ConvNextForImageClassification"),bNo=o(" (ConvNext model)"),FNo=l(),Ds=a("li"),Zce=a("strong"),vNo=o("deit"),TNo=o(" \u2014 "),wD=a("a"),MNo=o("DeiTForImageClassification"),ENo=o(" or "),AD=a("a"),CNo=o("DeiTForImageClassificationWithTeacher"),wNo=o(" (DeiT model)"),ANo=l(),s3=a("li"),efe=a("strong"),yNo=o("imagegpt"),LNo=o(" \u2014 "),yD=a("a"),xNo=o("ImageGPTForImageClassification"),kNo=o(" (ImageGPT model)"),SNo=l(),ma=a("li"),ofe=a("strong"),RNo=o("perceiver"),BNo=o(" \u2014 "),LD=a("a"),PNo=o("PerceiverForImageClassificationLearned"),$No=o(" or "),xD=a("a"),INo=o("PerceiverForImageClassificationFourier"),qNo=o(" or "),kD=a("a"),NNo=o("PerceiverForImageClassificationConvProcessing"),jNo=o(" (Perceiver model)"),DNo=l(),l3=a("li"),rfe=a("strong"),GNo=o("poolformer"),ONo=o(" \u2014 "),SD=a("a"),VNo=o("PoolFormerForImageClassification"),XNo=o(" (PoolFormer model)"),zNo=l(),i3=a("li"),tfe=a("strong"),QNo=o("resnet"),WNo=o(" \u2014 "),RD=a("a"),HNo=o("ResNetForImageClassification"),UNo=o(" (ResNet model)"),JNo=l(),d3=a("li"),afe=a("strong"),YNo=o("segformer"),KNo=o(" \u2014 "),BD=a("a"),ZNo=o("SegformerForImageClassification"),ejo=o(" (SegFormer model)"),ojo=l(),c3=a("li"),nfe=a("strong"),rjo=o("swin"),tjo=o(" \u2014 "),PD=a("a"),ajo=o("SwinForImageClassification"),njo=o(" (Swin model)"),sjo=l(),f3=a("li"),sfe=a("strong"),ljo=o("van"),ijo=o(" \u2014 "),$D=a("a"),djo=o("VanForImageClassification"),cjo=o(" (VAN model)"),fjo=l(),m3=a("li"),lfe=a("strong"),mjo=o("vit"),gjo=o(" \u2014 "),ID=a("a"),hjo=o("ViTForImageClassification"),pjo=o(" (ViT model)"),_jo=l(),g3=a("p"),ujo=o("The model is set in evaluation mode by default using "),ife=a("code"),bjo=o("model.eval()"),Fjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dfe=a("code"),vjo=o("model.train()"),Tjo=l(),cfe=a("p"),Mjo=o("Examples:"),Ejo=l(),f(AA.$$.fragment),LRe=l(),Rd=a("h2"),h3=a("a"),ffe=a("span"),f(yA.$$.fragment),Cjo=l(),mfe=a("span"),wjo=o("AutoModelForVision2Seq"),xRe=l(),ir=a("div"),f(LA.$$.fragment),Ajo=l(),Bd=a("p"),yjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qD=a("a"),Ljo=o("from_pretrained()"),xjo=o(" class method or the "),ND=a("a"),kjo=o("from_config()"),Sjo=o(` class
method.`),Rjo=l(),xA=a("p"),Bjo=o("This class cannot be instantiated directly using "),gfe=a("code"),Pjo=o("__init__()"),$jo=o(" (throws an error)."),Ijo=l(),rt=a("div"),f(kA.$$.fragment),qjo=l(),hfe=a("p"),Njo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jjo=l(),Pd=a("p"),Djo=o(`Note:
Loading a model from its configuration file does `),pfe=a("strong"),Gjo=o("not"),Ojo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=a("a"),Vjo=o("from_pretrained()"),Xjo=o(" to load the model weights."),zjo=l(),_fe=a("p"),Qjo=o("Examples:"),Wjo=l(),f(SA.$$.fragment),Hjo=l(),Ue=a("div"),f(RA.$$.fragment),Ujo=l(),ufe=a("p"),Jjo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Yjo=l(),rn=a("p"),Kjo=o("The model class to instantiate is selected based on the "),bfe=a("code"),Zjo=o("model_type"),eDo=o(` property of the config object (either
passed as an argument or loaded from `),Ffe=a("code"),oDo=o("pretrained_model_name_or_path"),rDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vfe=a("code"),tDo=o("pretrained_model_name_or_path"),aDo=o(":"),nDo=l(),Tfe=a("ul"),p3=a("li"),Mfe=a("strong"),sDo=o("vision-encoder-decoder"),lDo=o(" \u2014 "),DD=a("a"),iDo=o("VisionEncoderDecoderModel"),dDo=o(" (Vision Encoder decoder model)"),cDo=l(),_3=a("p"),fDo=o("The model is set in evaluation mode by default using "),Efe=a("code"),mDo=o("model.eval()"),gDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cfe=a("code"),hDo=o("model.train()"),pDo=l(),wfe=a("p"),_Do=o("Examples:"),uDo=l(),f(BA.$$.fragment),kRe=l(),$d=a("h2"),u3=a("a"),Afe=a("span"),f(PA.$$.fragment),bDo=l(),yfe=a("span"),FDo=o("AutoModelForAudioClassification"),SRe=l(),dr=a("div"),f($A.$$.fragment),vDo=l(),Id=a("p"),TDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),GD=a("a"),MDo=o("from_pretrained()"),EDo=o(" class method or the "),OD=a("a"),CDo=o("from_config()"),wDo=o(` class
method.`),ADo=l(),IA=a("p"),yDo=o("This class cannot be instantiated directly using "),Lfe=a("code"),LDo=o("__init__()"),xDo=o(" (throws an error)."),kDo=l(),tt=a("div"),f(qA.$$.fragment),SDo=l(),xfe=a("p"),RDo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),BDo=l(),qd=a("p"),PDo=o(`Note:
Loading a model from its configuration file does `),kfe=a("strong"),$Do=o("not"),IDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=a("a"),qDo=o("from_pretrained()"),NDo=o(" to load the model weights."),jDo=l(),Sfe=a("p"),DDo=o("Examples:"),GDo=l(),f(NA.$$.fragment),ODo=l(),Je=a("div"),f(jA.$$.fragment),VDo=l(),Rfe=a("p"),XDo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),zDo=l(),tn=a("p"),QDo=o("The model class to instantiate is selected based on the "),Bfe=a("code"),WDo=o("model_type"),HDo=o(` property of the config object (either
passed as an argument or loaded from `),Pfe=a("code"),UDo=o("pretrained_model_name_or_path"),JDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$fe=a("code"),YDo=o("pretrained_model_name_or_path"),KDo=o(":"),ZDo=l(),Se=a("ul"),b3=a("li"),Ife=a("strong"),eGo=o("data2vec-audio"),oGo=o(" \u2014 "),XD=a("a"),rGo=o("Data2VecAudioForSequenceClassification"),tGo=o(" (Data2VecAudio model)"),aGo=l(),F3=a("li"),qfe=a("strong"),nGo=o("hubert"),sGo=o(" \u2014 "),zD=a("a"),lGo=o("HubertForSequenceClassification"),iGo=o(" (Hubert model)"),dGo=l(),v3=a("li"),Nfe=a("strong"),cGo=o("sew"),fGo=o(" \u2014 "),QD=a("a"),mGo=o("SEWForSequenceClassification"),gGo=o(" (SEW model)"),hGo=l(),T3=a("li"),jfe=a("strong"),pGo=o("sew-d"),_Go=o(" \u2014 "),WD=a("a"),uGo=o("SEWDForSequenceClassification"),bGo=o(" (SEW-D model)"),FGo=l(),M3=a("li"),Dfe=a("strong"),vGo=o("unispeech"),TGo=o(" \u2014 "),HD=a("a"),MGo=o("UniSpeechForSequenceClassification"),EGo=o(" (UniSpeech model)"),CGo=l(),E3=a("li"),Gfe=a("strong"),wGo=o("unispeech-sat"),AGo=o(" \u2014 "),UD=a("a"),yGo=o("UniSpeechSatForSequenceClassification"),LGo=o(" (UniSpeechSat model)"),xGo=l(),C3=a("li"),Ofe=a("strong"),kGo=o("wav2vec2"),SGo=o(" \u2014 "),JD=a("a"),RGo=o("Wav2Vec2ForSequenceClassification"),BGo=o(" (Wav2Vec2 model)"),PGo=l(),w3=a("li"),Vfe=a("strong"),$Go=o("wavlm"),IGo=o(" \u2014 "),YD=a("a"),qGo=o("WavLMForSequenceClassification"),NGo=o(" (WavLM model)"),jGo=l(),A3=a("p"),DGo=o("The model is set in evaluation mode by default using "),Xfe=a("code"),GGo=o("model.eval()"),OGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zfe=a("code"),VGo=o("model.train()"),XGo=l(),Qfe=a("p"),zGo=o("Examples:"),QGo=l(),f(DA.$$.fragment),RRe=l(),Nd=a("h2"),y3=a("a"),Wfe=a("span"),f(GA.$$.fragment),WGo=l(),Hfe=a("span"),HGo=o("AutoModelForAudioFrameClassification"),BRe=l(),cr=a("div"),f(OA.$$.fragment),UGo=l(),jd=a("p"),JGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),KD=a("a"),YGo=o("from_pretrained()"),KGo=o(" class method or the "),ZD=a("a"),ZGo=o("from_config()"),eOo=o(` class
method.`),oOo=l(),VA=a("p"),rOo=o("This class cannot be instantiated directly using "),Ufe=a("code"),tOo=o("__init__()"),aOo=o(" (throws an error)."),nOo=l(),at=a("div"),f(XA.$$.fragment),sOo=l(),Jfe=a("p"),lOo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),iOo=l(),Dd=a("p"),dOo=o(`Note:
Loading a model from its configuration file does `),Yfe=a("strong"),cOo=o("not"),fOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eG=a("a"),mOo=o("from_pretrained()"),gOo=o(" to load the model weights."),hOo=l(),Kfe=a("p"),pOo=o("Examples:"),_Oo=l(),f(zA.$$.fragment),uOo=l(),Ye=a("div"),f(QA.$$.fragment),bOo=l(),Zfe=a("p"),FOo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),vOo=l(),an=a("p"),TOo=o("The model class to instantiate is selected based on the "),eme=a("code"),MOo=o("model_type"),EOo=o(` property of the config object (either
passed as an argument or loaded from `),ome=a("code"),COo=o("pretrained_model_name_or_path"),wOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rme=a("code"),AOo=o("pretrained_model_name_or_path"),yOo=o(":"),LOo=l(),nn=a("ul"),L3=a("li"),tme=a("strong"),xOo=o("data2vec-audio"),kOo=o(" \u2014 "),oG=a("a"),SOo=o("Data2VecAudioForAudioFrameClassification"),ROo=o(" (Data2VecAudio model)"),BOo=l(),x3=a("li"),ame=a("strong"),POo=o("unispeech-sat"),$Oo=o(" \u2014 "),rG=a("a"),IOo=o("UniSpeechSatForAudioFrameClassification"),qOo=o(" (UniSpeechSat model)"),NOo=l(),k3=a("li"),nme=a("strong"),jOo=o("wav2vec2"),DOo=o(" \u2014 "),tG=a("a"),GOo=o("Wav2Vec2ForAudioFrameClassification"),OOo=o(" (Wav2Vec2 model)"),VOo=l(),S3=a("li"),sme=a("strong"),XOo=o("wavlm"),zOo=o(" \u2014 "),aG=a("a"),QOo=o("WavLMForAudioFrameClassification"),WOo=o(" (WavLM model)"),HOo=l(),R3=a("p"),UOo=o("The model is set in evaluation mode by default using "),lme=a("code"),JOo=o("model.eval()"),YOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ime=a("code"),KOo=o("model.train()"),ZOo=l(),dme=a("p"),eVo=o("Examples:"),oVo=l(),f(WA.$$.fragment),PRe=l(),Gd=a("h2"),B3=a("a"),cme=a("span"),f(HA.$$.fragment),rVo=l(),fme=a("span"),tVo=o("AutoModelForCTC"),$Re=l(),fr=a("div"),f(UA.$$.fragment),aVo=l(),Od=a("p"),nVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),nG=a("a"),sVo=o("from_pretrained()"),lVo=o(" class method or the "),sG=a("a"),iVo=o("from_config()"),dVo=o(` class
method.`),cVo=l(),JA=a("p"),fVo=o("This class cannot be instantiated directly using "),mme=a("code"),mVo=o("__init__()"),gVo=o(" (throws an error)."),hVo=l(),nt=a("div"),f(YA.$$.fragment),pVo=l(),gme=a("p"),_Vo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),uVo=l(),Vd=a("p"),bVo=o(`Note:
Loading a model from its configuration file does `),hme=a("strong"),FVo=o("not"),vVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lG=a("a"),TVo=o("from_pretrained()"),MVo=o(" to load the model weights."),EVo=l(),pme=a("p"),CVo=o("Examples:"),wVo=l(),f(KA.$$.fragment),AVo=l(),Ke=a("div"),f(ZA.$$.fragment),yVo=l(),_me=a("p"),LVo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),xVo=l(),sn=a("p"),kVo=o("The model class to instantiate is selected based on the "),ume=a("code"),SVo=o("model_type"),RVo=o(` property of the config object (either
passed as an argument or loaded from `),bme=a("code"),BVo=o("pretrained_model_name_or_path"),PVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fme=a("code"),$Vo=o("pretrained_model_name_or_path"),IVo=o(":"),qVo=l(),Re=a("ul"),P3=a("li"),vme=a("strong"),NVo=o("data2vec-audio"),jVo=o(" \u2014 "),iG=a("a"),DVo=o("Data2VecAudioForCTC"),GVo=o(" (Data2VecAudio model)"),OVo=l(),$3=a("li"),Tme=a("strong"),VVo=o("hubert"),XVo=o(" \u2014 "),dG=a("a"),zVo=o("HubertForCTC"),QVo=o(" (Hubert model)"),WVo=l(),I3=a("li"),Mme=a("strong"),HVo=o("sew"),UVo=o(" \u2014 "),cG=a("a"),JVo=o("SEWForCTC"),YVo=o(" (SEW model)"),KVo=l(),q3=a("li"),Eme=a("strong"),ZVo=o("sew-d"),eXo=o(" \u2014 "),fG=a("a"),oXo=o("SEWDForCTC"),rXo=o(" (SEW-D model)"),tXo=l(),N3=a("li"),Cme=a("strong"),aXo=o("unispeech"),nXo=o(" \u2014 "),mG=a("a"),sXo=o("UniSpeechForCTC"),lXo=o(" (UniSpeech model)"),iXo=l(),j3=a("li"),wme=a("strong"),dXo=o("unispeech-sat"),cXo=o(" \u2014 "),gG=a("a"),fXo=o("UniSpeechSatForCTC"),mXo=o(" (UniSpeechSat model)"),gXo=l(),D3=a("li"),Ame=a("strong"),hXo=o("wav2vec2"),pXo=o(" \u2014 "),hG=a("a"),_Xo=o("Wav2Vec2ForCTC"),uXo=o(" (Wav2Vec2 model)"),bXo=l(),G3=a("li"),yme=a("strong"),FXo=o("wavlm"),vXo=o(" \u2014 "),pG=a("a"),TXo=o("WavLMForCTC"),MXo=o(" (WavLM model)"),EXo=l(),O3=a("p"),CXo=o("The model is set in evaluation mode by default using "),Lme=a("code"),wXo=o("model.eval()"),AXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xme=a("code"),yXo=o("model.train()"),LXo=l(),kme=a("p"),xXo=o("Examples:"),kXo=l(),f(e0.$$.fragment),IRe=l(),Xd=a("h2"),V3=a("a"),Sme=a("span"),f(o0.$$.fragment),SXo=l(),Rme=a("span"),RXo=o("AutoModelForSpeechSeq2Seq"),qRe=l(),mr=a("div"),f(r0.$$.fragment),BXo=l(),zd=a("p"),PXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),_G=a("a"),$Xo=o("from_pretrained()"),IXo=o(" class method or the "),uG=a("a"),qXo=o("from_config()"),NXo=o(` class
method.`),jXo=l(),t0=a("p"),DXo=o("This class cannot be instantiated directly using "),Bme=a("code"),GXo=o("__init__()"),OXo=o(" (throws an error)."),VXo=l(),st=a("div"),f(a0.$$.fragment),XXo=l(),Pme=a("p"),zXo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),QXo=l(),Qd=a("p"),WXo=o(`Note:
Loading a model from its configuration file does `),$me=a("strong"),HXo=o("not"),UXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=a("a"),JXo=o("from_pretrained()"),YXo=o(" to load the model weights."),KXo=l(),Ime=a("p"),ZXo=o("Examples:"),ezo=l(),f(n0.$$.fragment),ozo=l(),Ze=a("div"),f(s0.$$.fragment),rzo=l(),qme=a("p"),tzo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),azo=l(),ln=a("p"),nzo=o("The model class to instantiate is selected based on the "),Nme=a("code"),szo=o("model_type"),lzo=o(` property of the config object (either
passed as an argument or loaded from `),jme=a("code"),izo=o("pretrained_model_name_or_path"),dzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dme=a("code"),czo=o("pretrained_model_name_or_path"),fzo=o(":"),mzo=l(),l0=a("ul"),X3=a("li"),Gme=a("strong"),gzo=o("speech-encoder-decoder"),hzo=o(" \u2014 "),FG=a("a"),pzo=o("SpeechEncoderDecoderModel"),_zo=o(" (Speech Encoder decoder model)"),uzo=l(),z3=a("li"),Ome=a("strong"),bzo=o("speech_to_text"),Fzo=o(" \u2014 "),vG=a("a"),vzo=o("Speech2TextForConditionalGeneration"),Tzo=o(" (Speech2Text model)"),Mzo=l(),Q3=a("p"),Ezo=o("The model is set in evaluation mode by default using "),Vme=a("code"),Czo=o("model.eval()"),wzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xme=a("code"),Azo=o("model.train()"),yzo=l(),zme=a("p"),Lzo=o("Examples:"),xzo=l(),f(i0.$$.fragment),NRe=l(),Wd=a("h2"),W3=a("a"),Qme=a("span"),f(d0.$$.fragment),kzo=l(),Wme=a("span"),Szo=o("AutoModelForAudioXVector"),jRe=l(),gr=a("div"),f(c0.$$.fragment),Rzo=l(),Hd=a("p"),Bzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),TG=a("a"),Pzo=o("from_pretrained()"),$zo=o(" class method or the "),MG=a("a"),Izo=o("from_config()"),qzo=o(` class
method.`),Nzo=l(),f0=a("p"),jzo=o("This class cannot be instantiated directly using "),Hme=a("code"),Dzo=o("__init__()"),Gzo=o(" (throws an error)."),Ozo=l(),lt=a("div"),f(m0.$$.fragment),Vzo=l(),Ume=a("p"),Xzo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),zzo=l(),Ud=a("p"),Qzo=o(`Note:
Loading a model from its configuration file does `),Jme=a("strong"),Wzo=o("not"),Hzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EG=a("a"),Uzo=o("from_pretrained()"),Jzo=o(" to load the model weights."),Yzo=l(),Yme=a("p"),Kzo=o("Examples:"),Zzo=l(),f(g0.$$.fragment),eQo=l(),eo=a("div"),f(h0.$$.fragment),oQo=l(),Kme=a("p"),rQo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),tQo=l(),dn=a("p"),aQo=o("The model class to instantiate is selected based on the "),Zme=a("code"),nQo=o("model_type"),sQo=o(` property of the config object (either
passed as an argument or loaded from `),ege=a("code"),lQo=o("pretrained_model_name_or_path"),iQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=a("code"),dQo=o("pretrained_model_name_or_path"),cQo=o(":"),fQo=l(),cn=a("ul"),H3=a("li"),rge=a("strong"),mQo=o("data2vec-audio"),gQo=o(" \u2014 "),CG=a("a"),hQo=o("Data2VecAudioForXVector"),pQo=o(" (Data2VecAudio model)"),_Qo=l(),U3=a("li"),tge=a("strong"),uQo=o("unispeech-sat"),bQo=o(" \u2014 "),wG=a("a"),FQo=o("UniSpeechSatForXVector"),vQo=o(" (UniSpeechSat model)"),TQo=l(),J3=a("li"),age=a("strong"),MQo=o("wav2vec2"),EQo=o(" \u2014 "),AG=a("a"),CQo=o("Wav2Vec2ForXVector"),wQo=o(" (Wav2Vec2 model)"),AQo=l(),Y3=a("li"),nge=a("strong"),yQo=o("wavlm"),LQo=o(" \u2014 "),yG=a("a"),xQo=o("WavLMForXVector"),kQo=o(" (WavLM model)"),SQo=l(),K3=a("p"),RQo=o("The model is set in evaluation mode by default using "),sge=a("code"),BQo=o("model.eval()"),PQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lge=a("code"),$Qo=o("model.train()"),IQo=l(),ige=a("p"),qQo=o("Examples:"),NQo=l(),f(p0.$$.fragment),DRe=l(),Jd=a("h2"),Z3=a("a"),dge=a("span"),f(_0.$$.fragment),jQo=l(),cge=a("span"),DQo=o("AutoModelForMaskedImageModeling"),GRe=l(),hr=a("div"),f(u0.$$.fragment),GQo=l(),Yd=a("p"),OQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),LG=a("a"),VQo=o("from_pretrained()"),XQo=o(" class method or the "),xG=a("a"),zQo=o("from_config()"),QQo=o(` class
method.`),WQo=l(),b0=a("p"),HQo=o("This class cannot be instantiated directly using "),fge=a("code"),UQo=o("__init__()"),JQo=o(" (throws an error)."),YQo=l(),it=a("div"),f(F0.$$.fragment),KQo=l(),mge=a("p"),ZQo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),eWo=l(),Kd=a("p"),oWo=o(`Note:
Loading a model from its configuration file does `),gge=a("strong"),rWo=o("not"),tWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kG=a("a"),aWo=o("from_pretrained()"),nWo=o(" to load the model weights."),sWo=l(),hge=a("p"),lWo=o("Examples:"),iWo=l(),f(v0.$$.fragment),dWo=l(),oo=a("div"),f(T0.$$.fragment),cWo=l(),pge=a("p"),fWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),mWo=l(),fn=a("p"),gWo=o("The model class to instantiate is selected based on the "),_ge=a("code"),hWo=o("model_type"),pWo=o(` property of the config object (either
passed as an argument or loaded from `),uge=a("code"),_Wo=o("pretrained_model_name_or_path"),uWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=a("code"),bWo=o("pretrained_model_name_or_path"),FWo=o(":"),vWo=l(),Zd=a("ul"),e2=a("li"),Fge=a("strong"),TWo=o("deit"),MWo=o(" \u2014 "),SG=a("a"),EWo=o("DeiTForMaskedImageModeling"),CWo=o(" (DeiT model)"),wWo=l(),o2=a("li"),vge=a("strong"),AWo=o("swin"),yWo=o(" \u2014 "),RG=a("a"),LWo=o("SwinForMaskedImageModeling"),xWo=o(" (Swin model)"),kWo=l(),r2=a("li"),Tge=a("strong"),SWo=o("vit"),RWo=o(" \u2014 "),BG=a("a"),BWo=o("ViTForMaskedImageModeling"),PWo=o(" (ViT model)"),$Wo=l(),t2=a("p"),IWo=o("The model is set in evaluation mode by default using "),Mge=a("code"),qWo=o("model.eval()"),NWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ege=a("code"),jWo=o("model.train()"),DWo=l(),Cge=a("p"),GWo=o("Examples:"),OWo=l(),f(M0.$$.fragment),ORe=l(),ec=a("h2"),a2=a("a"),wge=a("span"),f(E0.$$.fragment),VWo=l(),Age=a("span"),XWo=o("AutoModelForObjectDetection"),VRe=l(),pr=a("div"),f(C0.$$.fragment),zWo=l(),oc=a("p"),QWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),PG=a("a"),WWo=o("from_pretrained()"),HWo=o(" class method or the "),$G=a("a"),UWo=o("from_config()"),JWo=o(` class
method.`),YWo=l(),w0=a("p"),KWo=o("This class cannot be instantiated directly using "),yge=a("code"),ZWo=o("__init__()"),eHo=o(" (throws an error)."),oHo=l(),dt=a("div"),f(A0.$$.fragment),rHo=l(),Lge=a("p"),tHo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),aHo=l(),rc=a("p"),nHo=o(`Note:
Loading a model from its configuration file does `),xge=a("strong"),sHo=o("not"),lHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=a("a"),iHo=o("from_pretrained()"),dHo=o(" to load the model weights."),cHo=l(),kge=a("p"),fHo=o("Examples:"),mHo=l(),f(y0.$$.fragment),gHo=l(),ro=a("div"),f(L0.$$.fragment),hHo=l(),Sge=a("p"),pHo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_Ho=l(),mn=a("p"),uHo=o("The model class to instantiate is selected based on the "),Rge=a("code"),bHo=o("model_type"),FHo=o(` property of the config object (either
passed as an argument or loaded from `),Bge=a("code"),vHo=o("pretrained_model_name_or_path"),THo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=a("code"),MHo=o("pretrained_model_name_or_path"),EHo=o(":"),CHo=l(),$ge=a("ul"),n2=a("li"),Ige=a("strong"),wHo=o("detr"),AHo=o(" \u2014 "),qG=a("a"),yHo=o("DetrForObjectDetection"),LHo=o(" (DETR model)"),xHo=l(),s2=a("p"),kHo=o("The model is set in evaluation mode by default using "),qge=a("code"),SHo=o("model.eval()"),RHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nge=a("code"),BHo=o("model.train()"),PHo=l(),jge=a("p"),$Ho=o("Examples:"),IHo=l(),f(x0.$$.fragment),XRe=l(),tc=a("h2"),l2=a("a"),Dge=a("span"),f(k0.$$.fragment),qHo=l(),Gge=a("span"),NHo=o("AutoModelForImageSegmentation"),zRe=l(),_r=a("div"),f(S0.$$.fragment),jHo=l(),ac=a("p"),DHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),NG=a("a"),GHo=o("from_pretrained()"),OHo=o(" class method or the "),jG=a("a"),VHo=o("from_config()"),XHo=o(` class
method.`),zHo=l(),R0=a("p"),QHo=o("This class cannot be instantiated directly using "),Oge=a("code"),WHo=o("__init__()"),HHo=o(" (throws an error)."),UHo=l(),ct=a("div"),f(B0.$$.fragment),JHo=l(),Vge=a("p"),YHo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),KHo=l(),nc=a("p"),ZHo=o(`Note:
Loading a model from its configuration file does `),Xge=a("strong"),eUo=o("not"),oUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=a("a"),rUo=o("from_pretrained()"),tUo=o(" to load the model weights."),aUo=l(),zge=a("p"),nUo=o("Examples:"),sUo=l(),f(P0.$$.fragment),lUo=l(),to=a("div"),f($0.$$.fragment),iUo=l(),Qge=a("p"),dUo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),cUo=l(),gn=a("p"),fUo=o("The model class to instantiate is selected based on the "),Wge=a("code"),mUo=o("model_type"),gUo=o(` property of the config object (either
passed as an argument or loaded from `),Hge=a("code"),hUo=o("pretrained_model_name_or_path"),pUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uge=a("code"),_Uo=o("pretrained_model_name_or_path"),uUo=o(":"),bUo=l(),Jge=a("ul"),i2=a("li"),Yge=a("strong"),FUo=o("detr"),vUo=o(" \u2014 "),GG=a("a"),TUo=o("DetrForSegmentation"),MUo=o(" (DETR model)"),EUo=l(),d2=a("p"),CUo=o("The model is set in evaluation mode by default using "),Kge=a("code"),wUo=o("model.eval()"),AUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zge=a("code"),yUo=o("model.train()"),LUo=l(),ehe=a("p"),xUo=o("Examples:"),kUo=l(),f(I0.$$.fragment),QRe=l(),sc=a("h2"),c2=a("a"),ohe=a("span"),f(q0.$$.fragment),SUo=l(),rhe=a("span"),RUo=o("AutoModelForSemanticSegmentation"),WRe=l(),ur=a("div"),f(N0.$$.fragment),BUo=l(),lc=a("p"),PUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),OG=a("a"),$Uo=o("from_pretrained()"),IUo=o(" class method or the "),VG=a("a"),qUo=o("from_config()"),NUo=o(` class
method.`),jUo=l(),j0=a("p"),DUo=o("This class cannot be instantiated directly using "),the=a("code"),GUo=o("__init__()"),OUo=o(" (throws an error)."),VUo=l(),ft=a("div"),f(D0.$$.fragment),XUo=l(),ahe=a("p"),zUo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),QUo=l(),ic=a("p"),WUo=o(`Note:
Loading a model from its configuration file does `),nhe=a("strong"),HUo=o("not"),UUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XG=a("a"),JUo=o("from_pretrained()"),YUo=o(" to load the model weights."),KUo=l(),she=a("p"),ZUo=o("Examples:"),eJo=l(),f(G0.$$.fragment),oJo=l(),ao=a("div"),f(O0.$$.fragment),rJo=l(),lhe=a("p"),tJo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),aJo=l(),hn=a("p"),nJo=o("The model class to instantiate is selected based on the "),ihe=a("code"),sJo=o("model_type"),lJo=o(` property of the config object (either
passed as an argument or loaded from `),dhe=a("code"),iJo=o("pretrained_model_name_or_path"),dJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=a("code"),cJo=o("pretrained_model_name_or_path"),fJo=o(":"),mJo=l(),dc=a("ul"),f2=a("li"),fhe=a("strong"),gJo=o("beit"),hJo=o(" \u2014 "),zG=a("a"),pJo=o("BeitForSemanticSegmentation"),_Jo=o(" (BEiT model)"),uJo=l(),m2=a("li"),mhe=a("strong"),bJo=o("dpt"),FJo=o(" \u2014 "),QG=a("a"),vJo=o("DPTForSemanticSegmentation"),TJo=o(" (DPT model)"),MJo=l(),g2=a("li"),ghe=a("strong"),EJo=o("segformer"),CJo=o(" \u2014 "),WG=a("a"),wJo=o("SegformerForSemanticSegmentation"),AJo=o(" (SegFormer model)"),yJo=l(),h2=a("p"),LJo=o("The model is set in evaluation mode by default using "),hhe=a("code"),xJo=o("model.eval()"),kJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),phe=a("code"),SJo=o("model.train()"),RJo=l(),_he=a("p"),BJo=o("Examples:"),PJo=l(),f(V0.$$.fragment),HRe=l(),cc=a("h2"),p2=a("a"),uhe=a("span"),f(X0.$$.fragment),$Jo=l(),bhe=a("span"),IJo=o("AutoModelForInstanceSegmentation"),URe=l(),br=a("div"),f(z0.$$.fragment),qJo=l(),fc=a("p"),NJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),HG=a("a"),jJo=o("from_pretrained()"),DJo=o(" class method or the "),UG=a("a"),GJo=o("from_config()"),OJo=o(` class
method.`),VJo=l(),Q0=a("p"),XJo=o("This class cannot be instantiated directly using "),Fhe=a("code"),zJo=o("__init__()"),QJo=o(" (throws an error)."),WJo=l(),mt=a("div"),f(W0.$$.fragment),HJo=l(),vhe=a("p"),UJo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),JJo=l(),mc=a("p"),YJo=o(`Note:
Loading a model from its configuration file does `),The=a("strong"),KJo=o("not"),ZJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=a("a"),eYo=o("from_pretrained()"),oYo=o(" to load the model weights."),rYo=l(),Mhe=a("p"),tYo=o("Examples:"),aYo=l(),f(H0.$$.fragment),nYo=l(),no=a("div"),f(U0.$$.fragment),sYo=l(),Ehe=a("p"),lYo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),iYo=l(),pn=a("p"),dYo=o("The model class to instantiate is selected based on the "),Che=a("code"),cYo=o("model_type"),fYo=o(` property of the config object (either
passed as an argument or loaded from `),whe=a("code"),mYo=o("pretrained_model_name_or_path"),gYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=a("code"),hYo=o("pretrained_model_name_or_path"),pYo=o(":"),_Yo=l(),yhe=a("ul"),_2=a("li"),Lhe=a("strong"),uYo=o("maskformer"),bYo=o(" \u2014 "),YG=a("a"),FYo=o("MaskFormerForInstanceSegmentation"),vYo=o(" (MaskFormer model)"),TYo=l(),u2=a("p"),MYo=o("The model is set in evaluation mode by default using "),xhe=a("code"),EYo=o("model.eval()"),CYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=a("code"),wYo=o("model.train()"),AYo=l(),She=a("p"),yYo=o("Examples:"),LYo=l(),f(J0.$$.fragment),JRe=l(),gc=a("h2"),b2=a("a"),Rhe=a("span"),f(Y0.$$.fragment),xYo=l(),Bhe=a("span"),kYo=o("TFAutoModel"),YRe=l(),Fr=a("div"),f(K0.$$.fragment),SYo=l(),hc=a("p"),RYo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KG=a("a"),BYo=o("from_pretrained()"),PYo=o(" class method or the "),ZG=a("a"),$Yo=o("from_config()"),IYo=o(` class
method.`),qYo=l(),Z0=a("p"),NYo=o("This class cannot be instantiated directly using "),Phe=a("code"),jYo=o("__init__()"),DYo=o(" (throws an error)."),GYo=l(),gt=a("div"),f(ey.$$.fragment),OYo=l(),$he=a("p"),VYo=o("Instantiates one of the base model classes of the library from a configuration."),XYo=l(),pc=a("p"),zYo=o(`Note:
Loading a model from its configuration file does `),Ihe=a("strong"),QYo=o("not"),WYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=a("a"),HYo=o("from_pretrained()"),UYo=o(" to load the model weights."),JYo=l(),qhe=a("p"),YYo=o("Examples:"),KYo=l(),f(oy.$$.fragment),ZYo=l(),ho=a("div"),f(ry.$$.fragment),eKo=l(),Nhe=a("p"),oKo=o("Instantiate one of the base model classes of the library from a pretrained model."),rKo=l(),_n=a("p"),tKo=o("The model class to instantiate is selected based on the "),jhe=a("code"),aKo=o("model_type"),nKo=o(` property of the config object (either
passed as an argument or loaded from `),Dhe=a("code"),sKo=o("pretrained_model_name_or_path"),lKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ghe=a("code"),iKo=o("pretrained_model_name_or_path"),dKo=o(":"),cKo=l(),L=a("ul"),F2=a("li"),Ohe=a("strong"),fKo=o("albert"),mKo=o(" \u2014 "),oO=a("a"),gKo=o("TFAlbertModel"),hKo=o(" (ALBERT model)"),pKo=l(),v2=a("li"),Vhe=a("strong"),_Ko=o("bart"),uKo=o(" \u2014 "),rO=a("a"),bKo=o("TFBartModel"),FKo=o(" (BART model)"),vKo=l(),T2=a("li"),Xhe=a("strong"),TKo=o("bert"),MKo=o(" \u2014 "),tO=a("a"),EKo=o("TFBertModel"),CKo=o(" (BERT model)"),wKo=l(),M2=a("li"),zhe=a("strong"),AKo=o("blenderbot"),yKo=o(" \u2014 "),aO=a("a"),LKo=o("TFBlenderbotModel"),xKo=o(" (Blenderbot model)"),kKo=l(),E2=a("li"),Qhe=a("strong"),SKo=o("blenderbot-small"),RKo=o(" \u2014 "),nO=a("a"),BKo=o("TFBlenderbotSmallModel"),PKo=o(" (BlenderbotSmall model)"),$Ko=l(),C2=a("li"),Whe=a("strong"),IKo=o("camembert"),qKo=o(" \u2014 "),sO=a("a"),NKo=o("TFCamembertModel"),jKo=o(" (CamemBERT model)"),DKo=l(),w2=a("li"),Hhe=a("strong"),GKo=o("clip"),OKo=o(" \u2014 "),lO=a("a"),VKo=o("TFCLIPModel"),XKo=o(" (CLIP model)"),zKo=l(),A2=a("li"),Uhe=a("strong"),QKo=o("convbert"),WKo=o(" \u2014 "),iO=a("a"),HKo=o("TFConvBertModel"),UKo=o(" (ConvBERT model)"),JKo=l(),y2=a("li"),Jhe=a("strong"),YKo=o("convnext"),KKo=o(" \u2014 "),dO=a("a"),ZKo=o("TFConvNextModel"),eZo=o(" (ConvNext model)"),oZo=l(),L2=a("li"),Yhe=a("strong"),rZo=o("ctrl"),tZo=o(" \u2014 "),cO=a("a"),aZo=o("TFCTRLModel"),nZo=o(" (CTRL model)"),sZo=l(),x2=a("li"),Khe=a("strong"),lZo=o("deberta"),iZo=o(" \u2014 "),fO=a("a"),dZo=o("TFDebertaModel"),cZo=o(" (DeBERTa model)"),fZo=l(),k2=a("li"),Zhe=a("strong"),mZo=o("deberta-v2"),gZo=o(" \u2014 "),mO=a("a"),hZo=o("TFDebertaV2Model"),pZo=o(" (DeBERTa-v2 model)"),_Zo=l(),S2=a("li"),epe=a("strong"),uZo=o("distilbert"),bZo=o(" \u2014 "),gO=a("a"),FZo=o("TFDistilBertModel"),vZo=o(" (DistilBERT model)"),TZo=l(),R2=a("li"),ope=a("strong"),MZo=o("dpr"),EZo=o(" \u2014 "),hO=a("a"),CZo=o("TFDPRQuestionEncoder"),wZo=o(" (DPR model)"),AZo=l(),B2=a("li"),rpe=a("strong"),yZo=o("electra"),LZo=o(" \u2014 "),pO=a("a"),xZo=o("TFElectraModel"),kZo=o(" (ELECTRA model)"),SZo=l(),P2=a("li"),tpe=a("strong"),RZo=o("flaubert"),BZo=o(" \u2014 "),_O=a("a"),PZo=o("TFFlaubertModel"),$Zo=o(" (FlauBERT model)"),IZo=l(),Gs=a("li"),ape=a("strong"),qZo=o("funnel"),NZo=o(" \u2014 "),uO=a("a"),jZo=o("TFFunnelModel"),DZo=o(" or "),bO=a("a"),GZo=o("TFFunnelBaseModel"),OZo=o(" (Funnel Transformer model)"),VZo=l(),$2=a("li"),npe=a("strong"),XZo=o("gpt2"),zZo=o(" \u2014 "),FO=a("a"),QZo=o("TFGPT2Model"),WZo=o(" (OpenAI GPT-2 model)"),HZo=l(),I2=a("li"),spe=a("strong"),UZo=o("gptj"),JZo=o(" \u2014 "),vO=a("a"),YZo=o("TFGPTJModel"),KZo=o(" (GPT-J model)"),ZZo=l(),q2=a("li"),lpe=a("strong"),eer=o("hubert"),oer=o(" \u2014 "),TO=a("a"),rer=o("TFHubertModel"),ter=o(" (Hubert model)"),aer=l(),N2=a("li"),ipe=a("strong"),ner=o("layoutlm"),ser=o(" \u2014 "),MO=a("a"),ler=o("TFLayoutLMModel"),ier=o(" (LayoutLM model)"),der=l(),j2=a("li"),dpe=a("strong"),cer=o("led"),fer=o(" \u2014 "),EO=a("a"),mer=o("TFLEDModel"),ger=o(" (LED model)"),her=l(),D2=a("li"),cpe=a("strong"),per=o("longformer"),_er=o(" \u2014 "),CO=a("a"),uer=o("TFLongformerModel"),ber=o(" (Longformer model)"),Fer=l(),G2=a("li"),fpe=a("strong"),ver=o("lxmert"),Ter=o(" \u2014 "),wO=a("a"),Mer=o("TFLxmertModel"),Eer=o(" (LXMERT model)"),Cer=l(),O2=a("li"),mpe=a("strong"),wer=o("marian"),Aer=o(" \u2014 "),AO=a("a"),yer=o("TFMarianModel"),Ler=o(" (Marian model)"),xer=l(),V2=a("li"),gpe=a("strong"),ker=o("mbart"),Ser=o(" \u2014 "),yO=a("a"),Rer=o("TFMBartModel"),Ber=o(" (mBART model)"),Per=l(),X2=a("li"),hpe=a("strong"),$er=o("mobilebert"),Ier=o(" \u2014 "),LO=a("a"),qer=o("TFMobileBertModel"),Ner=o(" (MobileBERT model)"),jer=l(),z2=a("li"),ppe=a("strong"),Der=o("mpnet"),Ger=o(" \u2014 "),xO=a("a"),Oer=o("TFMPNetModel"),Ver=o(" (MPNet model)"),Xer=l(),Q2=a("li"),_pe=a("strong"),zer=o("mt5"),Qer=o(" \u2014 "),kO=a("a"),Wer=o("TFMT5Model"),Her=o(" (mT5 model)"),Uer=l(),W2=a("li"),upe=a("strong"),Jer=o("openai-gpt"),Yer=o(" \u2014 "),SO=a("a"),Ker=o("TFOpenAIGPTModel"),Zer=o(" (OpenAI GPT model)"),eor=l(),H2=a("li"),bpe=a("strong"),oor=o("pegasus"),ror=o(" \u2014 "),RO=a("a"),tor=o("TFPegasusModel"),aor=o(" (Pegasus model)"),nor=l(),U2=a("li"),Fpe=a("strong"),sor=o("rembert"),lor=o(" \u2014 "),BO=a("a"),ior=o("TFRemBertModel"),dor=o(" (RemBERT model)"),cor=l(),J2=a("li"),vpe=a("strong"),mor=o("roberta"),gor=o(" \u2014 "),PO=a("a"),hor=o("TFRobertaModel"),por=o(" (RoBERTa model)"),_or=l(),Y2=a("li"),Tpe=a("strong"),uor=o("roformer"),bor=o(" \u2014 "),$O=a("a"),For=o("TFRoFormerModel"),vor=o(" (RoFormer model)"),Tor=l(),K2=a("li"),Mpe=a("strong"),Mor=o("speech_to_text"),Eor=o(" \u2014 "),IO=a("a"),Cor=o("TFSpeech2TextModel"),wor=o(" (Speech2Text model)"),Aor=l(),Z2=a("li"),Epe=a("strong"),yor=o("t5"),Lor=o(" \u2014 "),qO=a("a"),xor=o("TFT5Model"),kor=o(" (T5 model)"),Sor=l(),eF=a("li"),Cpe=a("strong"),Ror=o("tapas"),Bor=o(" \u2014 "),NO=a("a"),Por=o("TFTapasModel"),$or=o(" (TAPAS model)"),Ior=l(),oF=a("li"),wpe=a("strong"),qor=o("transfo-xl"),Nor=o(" \u2014 "),jO=a("a"),jor=o("TFTransfoXLModel"),Dor=o(" (Transformer-XL model)"),Gor=l(),rF=a("li"),Ape=a("strong"),Oor=o("vit"),Vor=o(" \u2014 "),DO=a("a"),Xor=o("TFViTModel"),zor=o(" (ViT model)"),Qor=l(),tF=a("li"),ype=a("strong"),Wor=o("vit_mae"),Hor=o(" \u2014 "),GO=a("a"),Uor=o("TFViTMAEModel"),Jor=o(" (ViTMAE model)"),Yor=l(),aF=a("li"),Lpe=a("strong"),Kor=o("wav2vec2"),Zor=o(" \u2014 "),OO=a("a"),err=o("TFWav2Vec2Model"),orr=o(" (Wav2Vec2 model)"),rrr=l(),nF=a("li"),xpe=a("strong"),trr=o("xglm"),arr=o(" \u2014 "),VO=a("a"),nrr=o("TFXGLMModel"),srr=o(" (XGLM model)"),lrr=l(),sF=a("li"),kpe=a("strong"),irr=o("xlm"),drr=o(" \u2014 "),XO=a("a"),crr=o("TFXLMModel"),frr=o(" (XLM model)"),mrr=l(),lF=a("li"),Spe=a("strong"),grr=o("xlm-roberta"),hrr=o(" \u2014 "),zO=a("a"),prr=o("TFXLMRobertaModel"),_rr=o(" (XLM-RoBERTa model)"),urr=l(),iF=a("li"),Rpe=a("strong"),brr=o("xlnet"),Frr=o(" \u2014 "),QO=a("a"),vrr=o("TFXLNetModel"),Trr=o(" (XLNet model)"),Mrr=l(),Bpe=a("p"),Err=o("Examples:"),Crr=l(),f(ty.$$.fragment),KRe=l(),_c=a("h2"),dF=a("a"),Ppe=a("span"),f(ay.$$.fragment),wrr=l(),$pe=a("span"),Arr=o("TFAutoModelForPreTraining"),ZRe=l(),vr=a("div"),f(ny.$$.fragment),yrr=l(),uc=a("p"),Lrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WO=a("a"),xrr=o("from_pretrained()"),krr=o(" class method or the "),HO=a("a"),Srr=o("from_config()"),Rrr=o(` class
method.`),Brr=l(),sy=a("p"),Prr=o("This class cannot be instantiated directly using "),Ipe=a("code"),$rr=o("__init__()"),Irr=o(" (throws an error)."),qrr=l(),ht=a("div"),f(ly.$$.fragment),Nrr=l(),qpe=a("p"),jrr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Drr=l(),bc=a("p"),Grr=o(`Note:
Loading a model from its configuration file does `),Npe=a("strong"),Orr=o("not"),Vrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=a("a"),Xrr=o("from_pretrained()"),zrr=o(" to load the model weights."),Qrr=l(),jpe=a("p"),Wrr=o("Examples:"),Hrr=l(),f(iy.$$.fragment),Urr=l(),po=a("div"),f(dy.$$.fragment),Jrr=l(),Dpe=a("p"),Yrr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Krr=l(),un=a("p"),Zrr=o("The model class to instantiate is selected based on the "),Gpe=a("code"),etr=o("model_type"),otr=o(` property of the config object (either
passed as an argument or loaded from `),Ope=a("code"),rtr=o("pretrained_model_name_or_path"),ttr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=a("code"),atr=o("pretrained_model_name_or_path"),ntr=o(":"),str=l(),H=a("ul"),cF=a("li"),Xpe=a("strong"),ltr=o("albert"),itr=o(" \u2014 "),JO=a("a"),dtr=o("TFAlbertForPreTraining"),ctr=o(" (ALBERT model)"),ftr=l(),fF=a("li"),zpe=a("strong"),mtr=o("bart"),gtr=o(" \u2014 "),YO=a("a"),htr=o("TFBartForConditionalGeneration"),ptr=o(" (BART model)"),_tr=l(),mF=a("li"),Qpe=a("strong"),utr=o("bert"),btr=o(" \u2014 "),KO=a("a"),Ftr=o("TFBertForPreTraining"),vtr=o(" (BERT model)"),Ttr=l(),gF=a("li"),Wpe=a("strong"),Mtr=o("camembert"),Etr=o(" \u2014 "),ZO=a("a"),Ctr=o("TFCamembertForMaskedLM"),wtr=o(" (CamemBERT model)"),Atr=l(),hF=a("li"),Hpe=a("strong"),ytr=o("ctrl"),Ltr=o(" \u2014 "),eV=a("a"),xtr=o("TFCTRLLMHeadModel"),ktr=o(" (CTRL model)"),Str=l(),pF=a("li"),Upe=a("strong"),Rtr=o("distilbert"),Btr=o(" \u2014 "),oV=a("a"),Ptr=o("TFDistilBertForMaskedLM"),$tr=o(" (DistilBERT model)"),Itr=l(),_F=a("li"),Jpe=a("strong"),qtr=o("electra"),Ntr=o(" \u2014 "),rV=a("a"),jtr=o("TFElectraForPreTraining"),Dtr=o(" (ELECTRA model)"),Gtr=l(),uF=a("li"),Ype=a("strong"),Otr=o("flaubert"),Vtr=o(" \u2014 "),tV=a("a"),Xtr=o("TFFlaubertWithLMHeadModel"),ztr=o(" (FlauBERT model)"),Qtr=l(),bF=a("li"),Kpe=a("strong"),Wtr=o("funnel"),Htr=o(" \u2014 "),aV=a("a"),Utr=o("TFFunnelForPreTraining"),Jtr=o(" (Funnel Transformer model)"),Ytr=l(),FF=a("li"),Zpe=a("strong"),Ktr=o("gpt2"),Ztr=o(" \u2014 "),nV=a("a"),ear=o("TFGPT2LMHeadModel"),oar=o(" (OpenAI GPT-2 model)"),rar=l(),vF=a("li"),e_e=a("strong"),tar=o("layoutlm"),aar=o(" \u2014 "),sV=a("a"),nar=o("TFLayoutLMForMaskedLM"),sar=o(" (LayoutLM model)"),lar=l(),TF=a("li"),o_e=a("strong"),iar=o("lxmert"),dar=o(" \u2014 "),lV=a("a"),car=o("TFLxmertForPreTraining"),far=o(" (LXMERT model)"),mar=l(),MF=a("li"),r_e=a("strong"),gar=o("mobilebert"),har=o(" \u2014 "),iV=a("a"),par=o("TFMobileBertForPreTraining"),_ar=o(" (MobileBERT model)"),uar=l(),EF=a("li"),t_e=a("strong"),bar=o("mpnet"),Far=o(" \u2014 "),dV=a("a"),Tar=o("TFMPNetForMaskedLM"),Mar=o(" (MPNet model)"),Ear=l(),CF=a("li"),a_e=a("strong"),Car=o("openai-gpt"),war=o(" \u2014 "),cV=a("a"),Aar=o("TFOpenAIGPTLMHeadModel"),yar=o(" (OpenAI GPT model)"),Lar=l(),wF=a("li"),n_e=a("strong"),xar=o("roberta"),kar=o(" \u2014 "),fV=a("a"),Sar=o("TFRobertaForMaskedLM"),Rar=o(" (RoBERTa model)"),Bar=l(),AF=a("li"),s_e=a("strong"),Par=o("t5"),$ar=o(" \u2014 "),mV=a("a"),Iar=o("TFT5ForConditionalGeneration"),qar=o(" (T5 model)"),Nar=l(),yF=a("li"),l_e=a("strong"),jar=o("tapas"),Dar=o(" \u2014 "),gV=a("a"),Gar=o("TFTapasForMaskedLM"),Oar=o(" (TAPAS model)"),Var=l(),LF=a("li"),i_e=a("strong"),Xar=o("transfo-xl"),zar=o(" \u2014 "),hV=a("a"),Qar=o("TFTransfoXLLMHeadModel"),War=o(" (Transformer-XL model)"),Har=l(),xF=a("li"),d_e=a("strong"),Uar=o("vit_mae"),Jar=o(" \u2014 "),pV=a("a"),Yar=o("TFViTMAEForPreTraining"),Kar=o(" (ViTMAE model)"),Zar=l(),kF=a("li"),c_e=a("strong"),enr=o("xlm"),onr=o(" \u2014 "),_V=a("a"),rnr=o("TFXLMWithLMHeadModel"),tnr=o(" (XLM model)"),anr=l(),SF=a("li"),f_e=a("strong"),nnr=o("xlm-roberta"),snr=o(" \u2014 "),uV=a("a"),lnr=o("TFXLMRobertaForMaskedLM"),inr=o(" (XLM-RoBERTa model)"),dnr=l(),RF=a("li"),m_e=a("strong"),cnr=o("xlnet"),fnr=o(" \u2014 "),bV=a("a"),mnr=o("TFXLNetLMHeadModel"),gnr=o(" (XLNet model)"),hnr=l(),g_e=a("p"),pnr=o("Examples:"),_nr=l(),f(cy.$$.fragment),eBe=l(),Fc=a("h2"),BF=a("a"),h_e=a("span"),f(fy.$$.fragment),unr=l(),p_e=a("span"),bnr=o("TFAutoModelForCausalLM"),oBe=l(),Tr=a("div"),f(my.$$.fragment),Fnr=l(),vc=a("p"),vnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FV=a("a"),Tnr=o("from_pretrained()"),Mnr=o(" class method or the "),vV=a("a"),Enr=o("from_config()"),Cnr=o(` class
method.`),wnr=l(),gy=a("p"),Anr=o("This class cannot be instantiated directly using "),__e=a("code"),ynr=o("__init__()"),Lnr=o(" (throws an error)."),xnr=l(),pt=a("div"),f(hy.$$.fragment),knr=l(),u_e=a("p"),Snr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Rnr=l(),Tc=a("p"),Bnr=o(`Note:
Loading a model from its configuration file does `),b_e=a("strong"),Pnr=o("not"),$nr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=a("a"),Inr=o("from_pretrained()"),qnr=o(" to load the model weights."),Nnr=l(),F_e=a("p"),jnr=o("Examples:"),Dnr=l(),f(py.$$.fragment),Gnr=l(),_o=a("div"),f(_y.$$.fragment),Onr=l(),v_e=a("p"),Vnr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Xnr=l(),bn=a("p"),znr=o("The model class to instantiate is selected based on the "),T_e=a("code"),Qnr=o("model_type"),Wnr=o(` property of the config object (either
passed as an argument or loaded from `),M_e=a("code"),Hnr=o("pretrained_model_name_or_path"),Unr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E_e=a("code"),Jnr=o("pretrained_model_name_or_path"),Ynr=o(":"),Knr=l(),de=a("ul"),PF=a("li"),C_e=a("strong"),Znr=o("bert"),esr=o(" \u2014 "),MV=a("a"),osr=o("TFBertLMHeadModel"),rsr=o(" (BERT model)"),tsr=l(),$F=a("li"),w_e=a("strong"),asr=o("camembert"),nsr=o(" \u2014 "),EV=a("a"),ssr=o("TFCamembertForCausalLM"),lsr=o(" (CamemBERT model)"),isr=l(),IF=a("li"),A_e=a("strong"),dsr=o("ctrl"),csr=o(" \u2014 "),CV=a("a"),fsr=o("TFCTRLLMHeadModel"),msr=o(" (CTRL model)"),gsr=l(),qF=a("li"),y_e=a("strong"),hsr=o("gpt2"),psr=o(" \u2014 "),wV=a("a"),_sr=o("TFGPT2LMHeadModel"),usr=o(" (OpenAI GPT-2 model)"),bsr=l(),NF=a("li"),L_e=a("strong"),Fsr=o("gptj"),vsr=o(" \u2014 "),AV=a("a"),Tsr=o("TFGPTJForCausalLM"),Msr=o(" (GPT-J model)"),Esr=l(),jF=a("li"),x_e=a("strong"),Csr=o("openai-gpt"),wsr=o(" \u2014 "),yV=a("a"),Asr=o("TFOpenAIGPTLMHeadModel"),ysr=o(" (OpenAI GPT model)"),Lsr=l(),DF=a("li"),k_e=a("strong"),xsr=o("rembert"),ksr=o(" \u2014 "),LV=a("a"),Ssr=o("TFRemBertForCausalLM"),Rsr=o(" (RemBERT model)"),Bsr=l(),GF=a("li"),S_e=a("strong"),Psr=o("roberta"),$sr=o(" \u2014 "),xV=a("a"),Isr=o("TFRobertaForCausalLM"),qsr=o(" (RoBERTa model)"),Nsr=l(),OF=a("li"),R_e=a("strong"),jsr=o("roformer"),Dsr=o(" \u2014 "),kV=a("a"),Gsr=o("TFRoFormerForCausalLM"),Osr=o(" (RoFormer model)"),Vsr=l(),VF=a("li"),B_e=a("strong"),Xsr=o("transfo-xl"),zsr=o(" \u2014 "),SV=a("a"),Qsr=o("TFTransfoXLLMHeadModel"),Wsr=o(" (Transformer-XL model)"),Hsr=l(),XF=a("li"),P_e=a("strong"),Usr=o("xglm"),Jsr=o(" \u2014 "),RV=a("a"),Ysr=o("XGLMForCausalLM"),Ksr=o(" (XGLM model)"),Zsr=l(),zF=a("li"),$_e=a("strong"),elr=o("xlm"),olr=o(" \u2014 "),BV=a("a"),rlr=o("TFXLMWithLMHeadModel"),tlr=o(" (XLM model)"),alr=l(),QF=a("li"),I_e=a("strong"),nlr=o("xlnet"),slr=o(" \u2014 "),PV=a("a"),llr=o("TFXLNetLMHeadModel"),ilr=o(" (XLNet model)"),dlr=l(),q_e=a("p"),clr=o("Examples:"),flr=l(),f(uy.$$.fragment),rBe=l(),Mc=a("h2"),WF=a("a"),N_e=a("span"),f(by.$$.fragment),mlr=l(),j_e=a("span"),glr=o("TFAutoModelForImageClassification"),tBe=l(),Mr=a("div"),f(Fy.$$.fragment),hlr=l(),Ec=a("p"),plr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$V=a("a"),_lr=o("from_pretrained()"),ulr=o(" class method or the "),IV=a("a"),blr=o("from_config()"),Flr=o(` class
method.`),vlr=l(),vy=a("p"),Tlr=o("This class cannot be instantiated directly using "),D_e=a("code"),Mlr=o("__init__()"),Elr=o(" (throws an error)."),Clr=l(),_t=a("div"),f(Ty.$$.fragment),wlr=l(),G_e=a("p"),Alr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ylr=l(),Cc=a("p"),Llr=o(`Note:
Loading a model from its configuration file does `),O_e=a("strong"),xlr=o("not"),klr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=a("a"),Slr=o("from_pretrained()"),Rlr=o(" to load the model weights."),Blr=l(),V_e=a("p"),Plr=o("Examples:"),$lr=l(),f(My.$$.fragment),Ilr=l(),uo=a("div"),f(Ey.$$.fragment),qlr=l(),X_e=a("p"),Nlr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jlr=l(),Fn=a("p"),Dlr=o("The model class to instantiate is selected based on the "),z_e=a("code"),Glr=o("model_type"),Olr=o(` property of the config object (either
passed as an argument or loaded from `),Q_e=a("code"),Vlr=o("pretrained_model_name_or_path"),Xlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=a("code"),zlr=o("pretrained_model_name_or_path"),Qlr=o(":"),Wlr=l(),Cy=a("ul"),HF=a("li"),H_e=a("strong"),Hlr=o("convnext"),Ulr=o(" \u2014 "),NV=a("a"),Jlr=o("TFConvNextForImageClassification"),Ylr=o(" (ConvNext model)"),Klr=l(),UF=a("li"),U_e=a("strong"),Zlr=o("vit"),eir=o(" \u2014 "),jV=a("a"),oir=o("TFViTForImageClassification"),rir=o(" (ViT model)"),tir=l(),J_e=a("p"),air=o("Examples:"),nir=l(),f(wy.$$.fragment),aBe=l(),wc=a("h2"),JF=a("a"),Y_e=a("span"),f(Ay.$$.fragment),sir=l(),K_e=a("span"),lir=o("TFAutoModelForMaskedLM"),nBe=l(),Er=a("div"),f(yy.$$.fragment),iir=l(),Ac=a("p"),dir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),DV=a("a"),cir=o("from_pretrained()"),fir=o(" class method or the "),GV=a("a"),mir=o("from_config()"),gir=o(` class
method.`),hir=l(),Ly=a("p"),pir=o("This class cannot be instantiated directly using "),Z_e=a("code"),_ir=o("__init__()"),uir=o(" (throws an error)."),bir=l(),ut=a("div"),f(xy.$$.fragment),Fir=l(),eue=a("p"),vir=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Tir=l(),yc=a("p"),Mir=o(`Note:
Loading a model from its configuration file does `),oue=a("strong"),Eir=o("not"),Cir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=a("a"),wir=o("from_pretrained()"),Air=o(" to load the model weights."),yir=l(),rue=a("p"),Lir=o("Examples:"),xir=l(),f(ky.$$.fragment),kir=l(),bo=a("div"),f(Sy.$$.fragment),Sir=l(),tue=a("p"),Rir=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Bir=l(),vn=a("p"),Pir=o("The model class to instantiate is selected based on the "),aue=a("code"),$ir=o("model_type"),Iir=o(` property of the config object (either
passed as an argument or loaded from `),nue=a("code"),qir=o("pretrained_model_name_or_path"),Nir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=a("code"),jir=o("pretrained_model_name_or_path"),Dir=o(":"),Gir=l(),J=a("ul"),YF=a("li"),lue=a("strong"),Oir=o("albert"),Vir=o(" \u2014 "),VV=a("a"),Xir=o("TFAlbertForMaskedLM"),zir=o(" (ALBERT model)"),Qir=l(),KF=a("li"),iue=a("strong"),Wir=o("bert"),Hir=o(" \u2014 "),XV=a("a"),Uir=o("TFBertForMaskedLM"),Jir=o(" (BERT model)"),Yir=l(),ZF=a("li"),due=a("strong"),Kir=o("camembert"),Zir=o(" \u2014 "),zV=a("a"),edr=o("TFCamembertForMaskedLM"),odr=o(" (CamemBERT model)"),rdr=l(),ev=a("li"),cue=a("strong"),tdr=o("convbert"),adr=o(" \u2014 "),QV=a("a"),ndr=o("TFConvBertForMaskedLM"),sdr=o(" (ConvBERT model)"),ldr=l(),ov=a("li"),fue=a("strong"),idr=o("deberta"),ddr=o(" \u2014 "),WV=a("a"),cdr=o("TFDebertaForMaskedLM"),fdr=o(" (DeBERTa model)"),mdr=l(),rv=a("li"),mue=a("strong"),gdr=o("deberta-v2"),hdr=o(" \u2014 "),HV=a("a"),pdr=o("TFDebertaV2ForMaskedLM"),_dr=o(" (DeBERTa-v2 model)"),udr=l(),tv=a("li"),gue=a("strong"),bdr=o("distilbert"),Fdr=o(" \u2014 "),UV=a("a"),vdr=o("TFDistilBertForMaskedLM"),Tdr=o(" (DistilBERT model)"),Mdr=l(),av=a("li"),hue=a("strong"),Edr=o("electra"),Cdr=o(" \u2014 "),JV=a("a"),wdr=o("TFElectraForMaskedLM"),Adr=o(" (ELECTRA model)"),ydr=l(),nv=a("li"),pue=a("strong"),Ldr=o("flaubert"),xdr=o(" \u2014 "),YV=a("a"),kdr=o("TFFlaubertWithLMHeadModel"),Sdr=o(" (FlauBERT model)"),Rdr=l(),sv=a("li"),_ue=a("strong"),Bdr=o("funnel"),Pdr=o(" \u2014 "),KV=a("a"),$dr=o("TFFunnelForMaskedLM"),Idr=o(" (Funnel Transformer model)"),qdr=l(),lv=a("li"),uue=a("strong"),Ndr=o("layoutlm"),jdr=o(" \u2014 "),ZV=a("a"),Ddr=o("TFLayoutLMForMaskedLM"),Gdr=o(" (LayoutLM model)"),Odr=l(),iv=a("li"),bue=a("strong"),Vdr=o("longformer"),Xdr=o(" \u2014 "),eX=a("a"),zdr=o("TFLongformerForMaskedLM"),Qdr=o(" (Longformer model)"),Wdr=l(),dv=a("li"),Fue=a("strong"),Hdr=o("mobilebert"),Udr=o(" \u2014 "),oX=a("a"),Jdr=o("TFMobileBertForMaskedLM"),Ydr=o(" (MobileBERT model)"),Kdr=l(),cv=a("li"),vue=a("strong"),Zdr=o("mpnet"),ecr=o(" \u2014 "),rX=a("a"),ocr=o("TFMPNetForMaskedLM"),rcr=o(" (MPNet model)"),tcr=l(),fv=a("li"),Tue=a("strong"),acr=o("rembert"),ncr=o(" \u2014 "),tX=a("a"),scr=o("TFRemBertForMaskedLM"),lcr=o(" (RemBERT model)"),icr=l(),mv=a("li"),Mue=a("strong"),dcr=o("roberta"),ccr=o(" \u2014 "),aX=a("a"),fcr=o("TFRobertaForMaskedLM"),mcr=o(" (RoBERTa model)"),gcr=l(),gv=a("li"),Eue=a("strong"),hcr=o("roformer"),pcr=o(" \u2014 "),nX=a("a"),_cr=o("TFRoFormerForMaskedLM"),ucr=o(" (RoFormer model)"),bcr=l(),hv=a("li"),Cue=a("strong"),Fcr=o("tapas"),vcr=o(" \u2014 "),sX=a("a"),Tcr=o("TFTapasForMaskedLM"),Mcr=o(" (TAPAS model)"),Ecr=l(),pv=a("li"),wue=a("strong"),Ccr=o("xlm"),wcr=o(" \u2014 "),lX=a("a"),Acr=o("TFXLMWithLMHeadModel"),ycr=o(" (XLM model)"),Lcr=l(),_v=a("li"),Aue=a("strong"),xcr=o("xlm-roberta"),kcr=o(" \u2014 "),iX=a("a"),Scr=o("TFXLMRobertaForMaskedLM"),Rcr=o(" (XLM-RoBERTa model)"),Bcr=l(),yue=a("p"),Pcr=o("Examples:"),$cr=l(),f(Ry.$$.fragment),sBe=l(),Lc=a("h2"),uv=a("a"),Lue=a("span"),f(By.$$.fragment),Icr=l(),xue=a("span"),qcr=o("TFAutoModelForSeq2SeqLM"),lBe=l(),Cr=a("div"),f(Py.$$.fragment),Ncr=l(),xc=a("p"),jcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dX=a("a"),Dcr=o("from_pretrained()"),Gcr=o(" class method or the "),cX=a("a"),Ocr=o("from_config()"),Vcr=o(` class
method.`),Xcr=l(),$y=a("p"),zcr=o("This class cannot be instantiated directly using "),kue=a("code"),Qcr=o("__init__()"),Wcr=o(" (throws an error)."),Hcr=l(),bt=a("div"),f(Iy.$$.fragment),Ucr=l(),Sue=a("p"),Jcr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ycr=l(),kc=a("p"),Kcr=o(`Note:
Loading a model from its configuration file does `),Rue=a("strong"),Zcr=o("not"),efr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=a("a"),ofr=o("from_pretrained()"),rfr=o(" to load the model weights."),tfr=l(),Bue=a("p"),afr=o("Examples:"),nfr=l(),f(qy.$$.fragment),sfr=l(),Fo=a("div"),f(Ny.$$.fragment),lfr=l(),Pue=a("p"),ifr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dfr=l(),Tn=a("p"),cfr=o("The model class to instantiate is selected based on the "),$ue=a("code"),ffr=o("model_type"),mfr=o(` property of the config object (either
passed as an argument or loaded from `),Iue=a("code"),gfr=o("pretrained_model_name_or_path"),hfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=a("code"),pfr=o("pretrained_model_name_or_path"),_fr=o(":"),ufr=l(),ue=a("ul"),bv=a("li"),Nue=a("strong"),bfr=o("bart"),Ffr=o(" \u2014 "),mX=a("a"),vfr=o("TFBartForConditionalGeneration"),Tfr=o(" (BART model)"),Mfr=l(),Fv=a("li"),jue=a("strong"),Efr=o("blenderbot"),Cfr=o(" \u2014 "),gX=a("a"),wfr=o("TFBlenderbotForConditionalGeneration"),Afr=o(" (Blenderbot model)"),yfr=l(),vv=a("li"),Due=a("strong"),Lfr=o("blenderbot-small"),xfr=o(" \u2014 "),hX=a("a"),kfr=o("TFBlenderbotSmallForConditionalGeneration"),Sfr=o(" (BlenderbotSmall model)"),Rfr=l(),Tv=a("li"),Gue=a("strong"),Bfr=o("encoder-decoder"),Pfr=o(" \u2014 "),pX=a("a"),$fr=o("TFEncoderDecoderModel"),Ifr=o(" (Encoder decoder model)"),qfr=l(),Mv=a("li"),Oue=a("strong"),Nfr=o("led"),jfr=o(" \u2014 "),_X=a("a"),Dfr=o("TFLEDForConditionalGeneration"),Gfr=o(" (LED model)"),Ofr=l(),Ev=a("li"),Vue=a("strong"),Vfr=o("marian"),Xfr=o(" \u2014 "),uX=a("a"),zfr=o("TFMarianMTModel"),Qfr=o(" (Marian model)"),Wfr=l(),Cv=a("li"),Xue=a("strong"),Hfr=o("mbart"),Ufr=o(" \u2014 "),bX=a("a"),Jfr=o("TFMBartForConditionalGeneration"),Yfr=o(" (mBART model)"),Kfr=l(),wv=a("li"),zue=a("strong"),Zfr=o("mt5"),emr=o(" \u2014 "),FX=a("a"),omr=o("TFMT5ForConditionalGeneration"),rmr=o(" (mT5 model)"),tmr=l(),Av=a("li"),Que=a("strong"),amr=o("pegasus"),nmr=o(" \u2014 "),vX=a("a"),smr=o("TFPegasusForConditionalGeneration"),lmr=o(" (Pegasus model)"),imr=l(),yv=a("li"),Wue=a("strong"),dmr=o("t5"),cmr=o(" \u2014 "),TX=a("a"),fmr=o("TFT5ForConditionalGeneration"),mmr=o(" (T5 model)"),gmr=l(),Hue=a("p"),hmr=o("Examples:"),pmr=l(),f(jy.$$.fragment),iBe=l(),Sc=a("h2"),Lv=a("a"),Uue=a("span"),f(Dy.$$.fragment),_mr=l(),Jue=a("span"),umr=o("TFAutoModelForSequenceClassification"),dBe=l(),wr=a("div"),f(Gy.$$.fragment),bmr=l(),Rc=a("p"),Fmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),MX=a("a"),vmr=o("from_pretrained()"),Tmr=o(" class method or the "),EX=a("a"),Mmr=o("from_config()"),Emr=o(` class
method.`),Cmr=l(),Oy=a("p"),wmr=o("This class cannot be instantiated directly using "),Yue=a("code"),Amr=o("__init__()"),ymr=o(" (throws an error)."),Lmr=l(),Ft=a("div"),f(Vy.$$.fragment),xmr=l(),Kue=a("p"),kmr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Smr=l(),Bc=a("p"),Rmr=o(`Note:
Loading a model from its configuration file does `),Zue=a("strong"),Bmr=o("not"),Pmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=a("a"),$mr=o("from_pretrained()"),Imr=o(" to load the model weights."),qmr=l(),e1e=a("p"),Nmr=o("Examples:"),jmr=l(),f(Xy.$$.fragment),Dmr=l(),vo=a("div"),f(zy.$$.fragment),Gmr=l(),o1e=a("p"),Omr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Vmr=l(),Mn=a("p"),Xmr=o("The model class to instantiate is selected based on the "),r1e=a("code"),zmr=o("model_type"),Qmr=o(` property of the config object (either
passed as an argument or loaded from `),t1e=a("code"),Wmr=o("pretrained_model_name_or_path"),Hmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=a("code"),Umr=o("pretrained_model_name_or_path"),Jmr=o(":"),Ymr=l(),V=a("ul"),xv=a("li"),n1e=a("strong"),Kmr=o("albert"),Zmr=o(" \u2014 "),wX=a("a"),egr=o("TFAlbertForSequenceClassification"),ogr=o(" (ALBERT model)"),rgr=l(),kv=a("li"),s1e=a("strong"),tgr=o("bert"),agr=o(" \u2014 "),AX=a("a"),ngr=o("TFBertForSequenceClassification"),sgr=o(" (BERT model)"),lgr=l(),Sv=a("li"),l1e=a("strong"),igr=o("camembert"),dgr=o(" \u2014 "),yX=a("a"),cgr=o("TFCamembertForSequenceClassification"),fgr=o(" (CamemBERT model)"),mgr=l(),Rv=a("li"),i1e=a("strong"),ggr=o("convbert"),hgr=o(" \u2014 "),LX=a("a"),pgr=o("TFConvBertForSequenceClassification"),_gr=o(" (ConvBERT model)"),ugr=l(),Bv=a("li"),d1e=a("strong"),bgr=o("ctrl"),Fgr=o(" \u2014 "),xX=a("a"),vgr=o("TFCTRLForSequenceClassification"),Tgr=o(" (CTRL model)"),Mgr=l(),Pv=a("li"),c1e=a("strong"),Egr=o("deberta"),Cgr=o(" \u2014 "),kX=a("a"),wgr=o("TFDebertaForSequenceClassification"),Agr=o(" (DeBERTa model)"),ygr=l(),$v=a("li"),f1e=a("strong"),Lgr=o("deberta-v2"),xgr=o(" \u2014 "),SX=a("a"),kgr=o("TFDebertaV2ForSequenceClassification"),Sgr=o(" (DeBERTa-v2 model)"),Rgr=l(),Iv=a("li"),m1e=a("strong"),Bgr=o("distilbert"),Pgr=o(" \u2014 "),RX=a("a"),$gr=o("TFDistilBertForSequenceClassification"),Igr=o(" (DistilBERT model)"),qgr=l(),qv=a("li"),g1e=a("strong"),Ngr=o("electra"),jgr=o(" \u2014 "),BX=a("a"),Dgr=o("TFElectraForSequenceClassification"),Ggr=o(" (ELECTRA model)"),Ogr=l(),Nv=a("li"),h1e=a("strong"),Vgr=o("flaubert"),Xgr=o(" \u2014 "),PX=a("a"),zgr=o("TFFlaubertForSequenceClassification"),Qgr=o(" (FlauBERT model)"),Wgr=l(),jv=a("li"),p1e=a("strong"),Hgr=o("funnel"),Ugr=o(" \u2014 "),$X=a("a"),Jgr=o("TFFunnelForSequenceClassification"),Ygr=o(" (Funnel Transformer model)"),Kgr=l(),Dv=a("li"),_1e=a("strong"),Zgr=o("gpt2"),ehr=o(" \u2014 "),IX=a("a"),ohr=o("TFGPT2ForSequenceClassification"),rhr=o(" (OpenAI GPT-2 model)"),thr=l(),Gv=a("li"),u1e=a("strong"),ahr=o("gptj"),nhr=o(" \u2014 "),qX=a("a"),shr=o("TFGPTJForSequenceClassification"),lhr=o(" (GPT-J model)"),ihr=l(),Ov=a("li"),b1e=a("strong"),dhr=o("layoutlm"),chr=o(" \u2014 "),NX=a("a"),fhr=o("TFLayoutLMForSequenceClassification"),mhr=o(" (LayoutLM model)"),ghr=l(),Vv=a("li"),F1e=a("strong"),hhr=o("longformer"),phr=o(" \u2014 "),jX=a("a"),_hr=o("TFLongformerForSequenceClassification"),uhr=o(" (Longformer model)"),bhr=l(),Xv=a("li"),v1e=a("strong"),Fhr=o("mobilebert"),vhr=o(" \u2014 "),DX=a("a"),Thr=o("TFMobileBertForSequenceClassification"),Mhr=o(" (MobileBERT model)"),Ehr=l(),zv=a("li"),T1e=a("strong"),Chr=o("mpnet"),whr=o(" \u2014 "),GX=a("a"),Ahr=o("TFMPNetForSequenceClassification"),yhr=o(" (MPNet model)"),Lhr=l(),Qv=a("li"),M1e=a("strong"),xhr=o("openai-gpt"),khr=o(" \u2014 "),OX=a("a"),Shr=o("TFOpenAIGPTForSequenceClassification"),Rhr=o(" (OpenAI GPT model)"),Bhr=l(),Wv=a("li"),E1e=a("strong"),Phr=o("rembert"),$hr=o(" \u2014 "),VX=a("a"),Ihr=o("TFRemBertForSequenceClassification"),qhr=o(" (RemBERT model)"),Nhr=l(),Hv=a("li"),C1e=a("strong"),jhr=o("roberta"),Dhr=o(" \u2014 "),XX=a("a"),Ghr=o("TFRobertaForSequenceClassification"),Ohr=o(" (RoBERTa model)"),Vhr=l(),Uv=a("li"),w1e=a("strong"),Xhr=o("roformer"),zhr=o(" \u2014 "),zX=a("a"),Qhr=o("TFRoFormerForSequenceClassification"),Whr=o(" (RoFormer model)"),Hhr=l(),Jv=a("li"),A1e=a("strong"),Uhr=o("tapas"),Jhr=o(" \u2014 "),QX=a("a"),Yhr=o("TFTapasForSequenceClassification"),Khr=o(" (TAPAS model)"),Zhr=l(),Yv=a("li"),y1e=a("strong"),epr=o("transfo-xl"),opr=o(" \u2014 "),WX=a("a"),rpr=o("TFTransfoXLForSequenceClassification"),tpr=o(" (Transformer-XL model)"),apr=l(),Kv=a("li"),L1e=a("strong"),npr=o("xlm"),spr=o(" \u2014 "),HX=a("a"),lpr=o("TFXLMForSequenceClassification"),ipr=o(" (XLM model)"),dpr=l(),Zv=a("li"),x1e=a("strong"),cpr=o("xlm-roberta"),fpr=o(" \u2014 "),UX=a("a"),mpr=o("TFXLMRobertaForSequenceClassification"),gpr=o(" (XLM-RoBERTa model)"),hpr=l(),e6=a("li"),k1e=a("strong"),ppr=o("xlnet"),_pr=o(" \u2014 "),JX=a("a"),upr=o("TFXLNetForSequenceClassification"),bpr=o(" (XLNet model)"),Fpr=l(),S1e=a("p"),vpr=o("Examples:"),Tpr=l(),f(Qy.$$.fragment),cBe=l(),Pc=a("h2"),o6=a("a"),R1e=a("span"),f(Wy.$$.fragment),Mpr=l(),B1e=a("span"),Epr=o("TFAutoModelForMultipleChoice"),fBe=l(),Ar=a("div"),f(Hy.$$.fragment),Cpr=l(),$c=a("p"),wpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YX=a("a"),Apr=o("from_pretrained()"),ypr=o(" class method or the "),KX=a("a"),Lpr=o("from_config()"),xpr=o(` class
method.`),kpr=l(),Uy=a("p"),Spr=o("This class cannot be instantiated directly using "),P1e=a("code"),Rpr=o("__init__()"),Bpr=o(" (throws an error)."),Ppr=l(),vt=a("div"),f(Jy.$$.fragment),$pr=l(),$1e=a("p"),Ipr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qpr=l(),Ic=a("p"),Npr=o(`Note:
Loading a model from its configuration file does `),I1e=a("strong"),jpr=o("not"),Dpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),Gpr=o("from_pretrained()"),Opr=o(" to load the model weights."),Vpr=l(),q1e=a("p"),Xpr=o("Examples:"),zpr=l(),f(Yy.$$.fragment),Qpr=l(),To=a("div"),f(Ky.$$.fragment),Wpr=l(),N1e=a("p"),Hpr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Upr=l(),En=a("p"),Jpr=o("The model class to instantiate is selected based on the "),j1e=a("code"),Ypr=o("model_type"),Kpr=o(` property of the config object (either
passed as an argument or loaded from `),D1e=a("code"),Zpr=o("pretrained_model_name_or_path"),e_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=a("code"),o_r=o("pretrained_model_name_or_path"),r_r=o(":"),t_r=l(),ae=a("ul"),r6=a("li"),O1e=a("strong"),a_r=o("albert"),n_r=o(" \u2014 "),ez=a("a"),s_r=o("TFAlbertForMultipleChoice"),l_r=o(" (ALBERT model)"),i_r=l(),t6=a("li"),V1e=a("strong"),d_r=o("bert"),c_r=o(" \u2014 "),oz=a("a"),f_r=o("TFBertForMultipleChoice"),m_r=o(" (BERT model)"),g_r=l(),a6=a("li"),X1e=a("strong"),h_r=o("camembert"),p_r=o(" \u2014 "),rz=a("a"),__r=o("TFCamembertForMultipleChoice"),u_r=o(" (CamemBERT model)"),b_r=l(),n6=a("li"),z1e=a("strong"),F_r=o("convbert"),v_r=o(" \u2014 "),tz=a("a"),T_r=o("TFConvBertForMultipleChoice"),M_r=o(" (ConvBERT model)"),E_r=l(),s6=a("li"),Q1e=a("strong"),C_r=o("distilbert"),w_r=o(" \u2014 "),az=a("a"),A_r=o("TFDistilBertForMultipleChoice"),y_r=o(" (DistilBERT model)"),L_r=l(),l6=a("li"),W1e=a("strong"),x_r=o("electra"),k_r=o(" \u2014 "),nz=a("a"),S_r=o("TFElectraForMultipleChoice"),R_r=o(" (ELECTRA model)"),B_r=l(),i6=a("li"),H1e=a("strong"),P_r=o("flaubert"),$_r=o(" \u2014 "),sz=a("a"),I_r=o("TFFlaubertForMultipleChoice"),q_r=o(" (FlauBERT model)"),N_r=l(),d6=a("li"),U1e=a("strong"),j_r=o("funnel"),D_r=o(" \u2014 "),lz=a("a"),G_r=o("TFFunnelForMultipleChoice"),O_r=o(" (Funnel Transformer model)"),V_r=l(),c6=a("li"),J1e=a("strong"),X_r=o("longformer"),z_r=o(" \u2014 "),iz=a("a"),Q_r=o("TFLongformerForMultipleChoice"),W_r=o(" (Longformer model)"),H_r=l(),f6=a("li"),Y1e=a("strong"),U_r=o("mobilebert"),J_r=o(" \u2014 "),dz=a("a"),Y_r=o("TFMobileBertForMultipleChoice"),K_r=o(" (MobileBERT model)"),Z_r=l(),m6=a("li"),K1e=a("strong"),eur=o("mpnet"),our=o(" \u2014 "),cz=a("a"),rur=o("TFMPNetForMultipleChoice"),tur=o(" (MPNet model)"),aur=l(),g6=a("li"),Z1e=a("strong"),nur=o("rembert"),sur=o(" \u2014 "),fz=a("a"),lur=o("TFRemBertForMultipleChoice"),iur=o(" (RemBERT model)"),dur=l(),h6=a("li"),e4e=a("strong"),cur=o("roberta"),fur=o(" \u2014 "),mz=a("a"),mur=o("TFRobertaForMultipleChoice"),gur=o(" (RoBERTa model)"),hur=l(),p6=a("li"),o4e=a("strong"),pur=o("roformer"),_ur=o(" \u2014 "),gz=a("a"),uur=o("TFRoFormerForMultipleChoice"),bur=o(" (RoFormer model)"),Fur=l(),_6=a("li"),r4e=a("strong"),vur=o("xlm"),Tur=o(" \u2014 "),hz=a("a"),Mur=o("TFXLMForMultipleChoice"),Eur=o(" (XLM model)"),Cur=l(),u6=a("li"),t4e=a("strong"),wur=o("xlm-roberta"),Aur=o(" \u2014 "),pz=a("a"),yur=o("TFXLMRobertaForMultipleChoice"),Lur=o(" (XLM-RoBERTa model)"),xur=l(),b6=a("li"),a4e=a("strong"),kur=o("xlnet"),Sur=o(" \u2014 "),_z=a("a"),Rur=o("TFXLNetForMultipleChoice"),Bur=o(" (XLNet model)"),Pur=l(),n4e=a("p"),$ur=o("Examples:"),Iur=l(),f(Zy.$$.fragment),mBe=l(),qc=a("h2"),F6=a("a"),s4e=a("span"),f(eL.$$.fragment),qur=l(),l4e=a("span"),Nur=o("TFAutoModelForTableQuestionAnswering"),gBe=l(),yr=a("div"),f(oL.$$.fragment),jur=l(),Nc=a("p"),Dur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uz=a("a"),Gur=o("from_pretrained()"),Our=o(" class method or the "),bz=a("a"),Vur=o("from_config()"),Xur=o(` class
method.`),zur=l(),rL=a("p"),Qur=o("This class cannot be instantiated directly using "),i4e=a("code"),Wur=o("__init__()"),Hur=o(" (throws an error)."),Uur=l(),Tt=a("div"),f(tL.$$.fragment),Jur=l(),d4e=a("p"),Yur=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Kur=l(),jc=a("p"),Zur=o(`Note:
Loading a model from its configuration file does `),c4e=a("strong"),e1r=o("not"),o1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=a("a"),r1r=o("from_pretrained()"),t1r=o(" to load the model weights."),a1r=l(),f4e=a("p"),n1r=o("Examples:"),s1r=l(),f(aL.$$.fragment),l1r=l(),Mo=a("div"),f(nL.$$.fragment),i1r=l(),m4e=a("p"),d1r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),c1r=l(),Cn=a("p"),f1r=o("The model class to instantiate is selected based on the "),g4e=a("code"),m1r=o("model_type"),g1r=o(` property of the config object (either
passed as an argument or loaded from `),h4e=a("code"),h1r=o("pretrained_model_name_or_path"),p1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p4e=a("code"),_1r=o("pretrained_model_name_or_path"),u1r=o(":"),b1r=l(),_4e=a("ul"),v6=a("li"),u4e=a("strong"),F1r=o("tapas"),v1r=o(" \u2014 "),vz=a("a"),T1r=o("TFTapasForQuestionAnswering"),M1r=o(" (TAPAS model)"),E1r=l(),b4e=a("p"),C1r=o("Examples:"),w1r=l(),f(sL.$$.fragment),hBe=l(),Dc=a("h2"),T6=a("a"),F4e=a("span"),f(lL.$$.fragment),A1r=l(),v4e=a("span"),y1r=o("TFAutoModelForTokenClassification"),pBe=l(),Lr=a("div"),f(iL.$$.fragment),L1r=l(),Gc=a("p"),x1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Tz=a("a"),k1r=o("from_pretrained()"),S1r=o(" class method or the "),Mz=a("a"),R1r=o("from_config()"),B1r=o(` class
method.`),P1r=l(),dL=a("p"),$1r=o("This class cannot be instantiated directly using "),T4e=a("code"),I1r=o("__init__()"),q1r=o(" (throws an error)."),N1r=l(),Mt=a("div"),f(cL.$$.fragment),j1r=l(),M4e=a("p"),D1r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),G1r=l(),Oc=a("p"),O1r=o(`Note:
Loading a model from its configuration file does `),E4e=a("strong"),V1r=o("not"),X1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=a("a"),z1r=o("from_pretrained()"),Q1r=o(" to load the model weights."),W1r=l(),C4e=a("p"),H1r=o("Examples:"),U1r=l(),f(fL.$$.fragment),J1r=l(),Eo=a("div"),f(mL.$$.fragment),Y1r=l(),w4e=a("p"),K1r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Z1r=l(),wn=a("p"),e4r=o("The model class to instantiate is selected based on the "),A4e=a("code"),o4r=o("model_type"),r4r=o(` property of the config object (either
passed as an argument or loaded from `),y4e=a("code"),t4r=o("pretrained_model_name_or_path"),a4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L4e=a("code"),n4r=o("pretrained_model_name_or_path"),s4r=o(":"),l4r=l(),Y=a("ul"),M6=a("li"),x4e=a("strong"),i4r=o("albert"),d4r=o(" \u2014 "),Cz=a("a"),c4r=o("TFAlbertForTokenClassification"),f4r=o(" (ALBERT model)"),m4r=l(),E6=a("li"),k4e=a("strong"),g4r=o("bert"),h4r=o(" \u2014 "),wz=a("a"),p4r=o("TFBertForTokenClassification"),_4r=o(" (BERT model)"),u4r=l(),C6=a("li"),S4e=a("strong"),b4r=o("camembert"),F4r=o(" \u2014 "),Az=a("a"),v4r=o("TFCamembertForTokenClassification"),T4r=o(" (CamemBERT model)"),M4r=l(),w6=a("li"),R4e=a("strong"),E4r=o("convbert"),C4r=o(" \u2014 "),yz=a("a"),w4r=o("TFConvBertForTokenClassification"),A4r=o(" (ConvBERT model)"),y4r=l(),A6=a("li"),B4e=a("strong"),L4r=o("deberta"),x4r=o(" \u2014 "),Lz=a("a"),k4r=o("TFDebertaForTokenClassification"),S4r=o(" (DeBERTa model)"),R4r=l(),y6=a("li"),P4e=a("strong"),B4r=o("deberta-v2"),P4r=o(" \u2014 "),xz=a("a"),$4r=o("TFDebertaV2ForTokenClassification"),I4r=o(" (DeBERTa-v2 model)"),q4r=l(),L6=a("li"),$4e=a("strong"),N4r=o("distilbert"),j4r=o(" \u2014 "),kz=a("a"),D4r=o("TFDistilBertForTokenClassification"),G4r=o(" (DistilBERT model)"),O4r=l(),x6=a("li"),I4e=a("strong"),V4r=o("electra"),X4r=o(" \u2014 "),Sz=a("a"),z4r=o("TFElectraForTokenClassification"),Q4r=o(" (ELECTRA model)"),W4r=l(),k6=a("li"),q4e=a("strong"),H4r=o("flaubert"),U4r=o(" \u2014 "),Rz=a("a"),J4r=o("TFFlaubertForTokenClassification"),Y4r=o(" (FlauBERT model)"),K4r=l(),S6=a("li"),N4e=a("strong"),Z4r=o("funnel"),ebr=o(" \u2014 "),Bz=a("a"),obr=o("TFFunnelForTokenClassification"),rbr=o(" (Funnel Transformer model)"),tbr=l(),R6=a("li"),j4e=a("strong"),abr=o("layoutlm"),nbr=o(" \u2014 "),Pz=a("a"),sbr=o("TFLayoutLMForTokenClassification"),lbr=o(" (LayoutLM model)"),ibr=l(),B6=a("li"),D4e=a("strong"),dbr=o("longformer"),cbr=o(" \u2014 "),$z=a("a"),fbr=o("TFLongformerForTokenClassification"),mbr=o(" (Longformer model)"),gbr=l(),P6=a("li"),G4e=a("strong"),hbr=o("mobilebert"),pbr=o(" \u2014 "),Iz=a("a"),_br=o("TFMobileBertForTokenClassification"),ubr=o(" (MobileBERT model)"),bbr=l(),$6=a("li"),O4e=a("strong"),Fbr=o("mpnet"),vbr=o(" \u2014 "),qz=a("a"),Tbr=o("TFMPNetForTokenClassification"),Mbr=o(" (MPNet model)"),Ebr=l(),I6=a("li"),V4e=a("strong"),Cbr=o("rembert"),wbr=o(" \u2014 "),Nz=a("a"),Abr=o("TFRemBertForTokenClassification"),ybr=o(" (RemBERT model)"),Lbr=l(),q6=a("li"),X4e=a("strong"),xbr=o("roberta"),kbr=o(" \u2014 "),jz=a("a"),Sbr=o("TFRobertaForTokenClassification"),Rbr=o(" (RoBERTa model)"),Bbr=l(),N6=a("li"),z4e=a("strong"),Pbr=o("roformer"),$br=o(" \u2014 "),Dz=a("a"),Ibr=o("TFRoFormerForTokenClassification"),qbr=o(" (RoFormer model)"),Nbr=l(),j6=a("li"),Q4e=a("strong"),jbr=o("xlm"),Dbr=o(" \u2014 "),Gz=a("a"),Gbr=o("TFXLMForTokenClassification"),Obr=o(" (XLM model)"),Vbr=l(),D6=a("li"),W4e=a("strong"),Xbr=o("xlm-roberta"),zbr=o(" \u2014 "),Oz=a("a"),Qbr=o("TFXLMRobertaForTokenClassification"),Wbr=o(" (XLM-RoBERTa model)"),Hbr=l(),G6=a("li"),H4e=a("strong"),Ubr=o("xlnet"),Jbr=o(" \u2014 "),Vz=a("a"),Ybr=o("TFXLNetForTokenClassification"),Kbr=o(" (XLNet model)"),Zbr=l(),U4e=a("p"),e5r=o("Examples:"),o5r=l(),f(gL.$$.fragment),_Be=l(),Vc=a("h2"),O6=a("a"),J4e=a("span"),f(hL.$$.fragment),r5r=l(),Y4e=a("span"),t5r=o("TFAutoModelForQuestionAnswering"),uBe=l(),xr=a("div"),f(pL.$$.fragment),a5r=l(),Xc=a("p"),n5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Xz=a("a"),s5r=o("from_pretrained()"),l5r=o(" class method or the "),zz=a("a"),i5r=o("from_config()"),d5r=o(` class
method.`),c5r=l(),_L=a("p"),f5r=o("This class cannot be instantiated directly using "),K4e=a("code"),m5r=o("__init__()"),g5r=o(" (throws an error)."),h5r=l(),Et=a("div"),f(uL.$$.fragment),p5r=l(),Z4e=a("p"),_5r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),u5r=l(),zc=a("p"),b5r=o(`Note:
Loading a model from its configuration file does `),ebe=a("strong"),F5r=o("not"),v5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),T5r=o("from_pretrained()"),M5r=o(" to load the model weights."),E5r=l(),obe=a("p"),C5r=o("Examples:"),w5r=l(),f(bL.$$.fragment),A5r=l(),Co=a("div"),f(FL.$$.fragment),y5r=l(),rbe=a("p"),L5r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),x5r=l(),An=a("p"),k5r=o("The model class to instantiate is selected based on the "),tbe=a("code"),S5r=o("model_type"),R5r=o(` property of the config object (either
passed as an argument or loaded from `),abe=a("code"),B5r=o("pretrained_model_name_or_path"),P5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=a("code"),$5r=o("pretrained_model_name_or_path"),I5r=o(":"),q5r=l(),K=a("ul"),V6=a("li"),sbe=a("strong"),N5r=o("albert"),j5r=o(" \u2014 "),Wz=a("a"),D5r=o("TFAlbertForQuestionAnswering"),G5r=o(" (ALBERT model)"),O5r=l(),X6=a("li"),lbe=a("strong"),V5r=o("bert"),X5r=o(" \u2014 "),Hz=a("a"),z5r=o("TFBertForQuestionAnswering"),Q5r=o(" (BERT model)"),W5r=l(),z6=a("li"),ibe=a("strong"),H5r=o("camembert"),U5r=o(" \u2014 "),Uz=a("a"),J5r=o("TFCamembertForQuestionAnswering"),Y5r=o(" (CamemBERT model)"),K5r=l(),Q6=a("li"),dbe=a("strong"),Z5r=o("convbert"),e3r=o(" \u2014 "),Jz=a("a"),o3r=o("TFConvBertForQuestionAnswering"),r3r=o(" (ConvBERT model)"),t3r=l(),W6=a("li"),cbe=a("strong"),a3r=o("deberta"),n3r=o(" \u2014 "),Yz=a("a"),s3r=o("TFDebertaForQuestionAnswering"),l3r=o(" (DeBERTa model)"),i3r=l(),H6=a("li"),fbe=a("strong"),d3r=o("deberta-v2"),c3r=o(" \u2014 "),Kz=a("a"),f3r=o("TFDebertaV2ForQuestionAnswering"),m3r=o(" (DeBERTa-v2 model)"),g3r=l(),U6=a("li"),mbe=a("strong"),h3r=o("distilbert"),p3r=o(" \u2014 "),Zz=a("a"),_3r=o("TFDistilBertForQuestionAnswering"),u3r=o(" (DistilBERT model)"),b3r=l(),J6=a("li"),gbe=a("strong"),F3r=o("electra"),v3r=o(" \u2014 "),eQ=a("a"),T3r=o("TFElectraForQuestionAnswering"),M3r=o(" (ELECTRA model)"),E3r=l(),Y6=a("li"),hbe=a("strong"),C3r=o("flaubert"),w3r=o(" \u2014 "),oQ=a("a"),A3r=o("TFFlaubertForQuestionAnsweringSimple"),y3r=o(" (FlauBERT model)"),L3r=l(),K6=a("li"),pbe=a("strong"),x3r=o("funnel"),k3r=o(" \u2014 "),rQ=a("a"),S3r=o("TFFunnelForQuestionAnswering"),R3r=o(" (Funnel Transformer model)"),B3r=l(),Z6=a("li"),_be=a("strong"),P3r=o("gptj"),$3r=o(" \u2014 "),tQ=a("a"),I3r=o("TFGPTJForQuestionAnswering"),q3r=o(" (GPT-J model)"),N3r=l(),eT=a("li"),ube=a("strong"),j3r=o("longformer"),D3r=o(" \u2014 "),aQ=a("a"),G3r=o("TFLongformerForQuestionAnswering"),O3r=o(" (Longformer model)"),V3r=l(),oT=a("li"),bbe=a("strong"),X3r=o("mobilebert"),z3r=o(" \u2014 "),nQ=a("a"),Q3r=o("TFMobileBertForQuestionAnswering"),W3r=o(" (MobileBERT model)"),H3r=l(),rT=a("li"),Fbe=a("strong"),U3r=o("mpnet"),J3r=o(" \u2014 "),sQ=a("a"),Y3r=o("TFMPNetForQuestionAnswering"),K3r=o(" (MPNet model)"),Z3r=l(),tT=a("li"),vbe=a("strong"),e2r=o("rembert"),o2r=o(" \u2014 "),lQ=a("a"),r2r=o("TFRemBertForQuestionAnswering"),t2r=o(" (RemBERT model)"),a2r=l(),aT=a("li"),Tbe=a("strong"),n2r=o("roberta"),s2r=o(" \u2014 "),iQ=a("a"),l2r=o("TFRobertaForQuestionAnswering"),i2r=o(" (RoBERTa model)"),d2r=l(),nT=a("li"),Mbe=a("strong"),c2r=o("roformer"),f2r=o(" \u2014 "),dQ=a("a"),m2r=o("TFRoFormerForQuestionAnswering"),g2r=o(" (RoFormer model)"),h2r=l(),sT=a("li"),Ebe=a("strong"),p2r=o("xlm"),_2r=o(" \u2014 "),cQ=a("a"),u2r=o("TFXLMForQuestionAnsweringSimple"),b2r=o(" (XLM model)"),F2r=l(),lT=a("li"),Cbe=a("strong"),v2r=o("xlm-roberta"),T2r=o(" \u2014 "),fQ=a("a"),M2r=o("TFXLMRobertaForQuestionAnswering"),E2r=o(" (XLM-RoBERTa model)"),C2r=l(),iT=a("li"),wbe=a("strong"),w2r=o("xlnet"),A2r=o(" \u2014 "),mQ=a("a"),y2r=o("TFXLNetForQuestionAnsweringSimple"),L2r=o(" (XLNet model)"),x2r=l(),Abe=a("p"),k2r=o("Examples:"),S2r=l(),f(vL.$$.fragment),bBe=l(),Qc=a("h2"),dT=a("a"),ybe=a("span"),f(TL.$$.fragment),R2r=l(),Lbe=a("span"),B2r=o("TFAutoModelForVision2Seq"),FBe=l(),kr=a("div"),f(ML.$$.fragment),P2r=l(),Wc=a("p"),$2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gQ=a("a"),I2r=o("from_pretrained()"),q2r=o(" class method or the "),hQ=a("a"),N2r=o("from_config()"),j2r=o(` class
method.`),D2r=l(),EL=a("p"),G2r=o("This class cannot be instantiated directly using "),xbe=a("code"),O2r=o("__init__()"),V2r=o(" (throws an error)."),X2r=l(),Ct=a("div"),f(CL.$$.fragment),z2r=l(),kbe=a("p"),Q2r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),W2r=l(),Hc=a("p"),H2r=o(`Note:
Loading a model from its configuration file does `),Sbe=a("strong"),U2r=o("not"),J2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=a("a"),Y2r=o("from_pretrained()"),K2r=o(" to load the model weights."),Z2r=l(),Rbe=a("p"),eFr=o("Examples:"),oFr=l(),f(wL.$$.fragment),rFr=l(),wo=a("div"),f(AL.$$.fragment),tFr=l(),Bbe=a("p"),aFr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),nFr=l(),yn=a("p"),sFr=o("The model class to instantiate is selected based on the "),Pbe=a("code"),lFr=o("model_type"),iFr=o(` property of the config object (either
passed as an argument or loaded from `),$be=a("code"),dFr=o("pretrained_model_name_or_path"),cFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=a("code"),fFr=o("pretrained_model_name_or_path"),mFr=o(":"),gFr=l(),qbe=a("ul"),cT=a("li"),Nbe=a("strong"),hFr=o("vision-encoder-decoder"),pFr=o(" \u2014 "),_Q=a("a"),_Fr=o("TFVisionEncoderDecoderModel"),uFr=o(" (Vision Encoder decoder model)"),bFr=l(),jbe=a("p"),FFr=o("Examples:"),vFr=l(),f(yL.$$.fragment),vBe=l(),Uc=a("h2"),fT=a("a"),Dbe=a("span"),f(LL.$$.fragment),TFr=l(),Gbe=a("span"),MFr=o("TFAutoModelForSpeechSeq2Seq"),TBe=l(),Sr=a("div"),f(xL.$$.fragment),EFr=l(),Jc=a("p"),CFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uQ=a("a"),wFr=o("from_pretrained()"),AFr=o(" class method or the "),bQ=a("a"),yFr=o("from_config()"),LFr=o(` class
method.`),xFr=l(),kL=a("p"),kFr=o("This class cannot be instantiated directly using "),Obe=a("code"),SFr=o("__init__()"),RFr=o(" (throws an error)."),BFr=l(),wt=a("div"),f(SL.$$.fragment),PFr=l(),Vbe=a("p"),$Fr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),IFr=l(),Yc=a("p"),qFr=o(`Note:
Loading a model from its configuration file does `),Xbe=a("strong"),NFr=o("not"),jFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),DFr=o("from_pretrained()"),GFr=o(" to load the model weights."),OFr=l(),zbe=a("p"),VFr=o("Examples:"),XFr=l(),f(RL.$$.fragment),zFr=l(),Ao=a("div"),f(BL.$$.fragment),QFr=l(),Qbe=a("p"),WFr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),HFr=l(),Ln=a("p"),UFr=o("The model class to instantiate is selected based on the "),Wbe=a("code"),JFr=o("model_type"),YFr=o(` property of the config object (either
passed as an argument or loaded from `),Hbe=a("code"),KFr=o("pretrained_model_name_or_path"),ZFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=a("code"),evr=o("pretrained_model_name_or_path"),ovr=o(":"),rvr=l(),Jbe=a("ul"),mT=a("li"),Ybe=a("strong"),tvr=o("speech_to_text"),avr=o(" \u2014 "),vQ=a("a"),nvr=o("TFSpeech2TextForConditionalGeneration"),svr=o(" (Speech2Text model)"),lvr=l(),Kbe=a("p"),ivr=o("Examples:"),dvr=l(),f(PL.$$.fragment),MBe=l(),Kc=a("h2"),gT=a("a"),Zbe=a("span"),f($L.$$.fragment),cvr=l(),e5e=a("span"),fvr=o("FlaxAutoModel"),EBe=l(),Rr=a("div"),f(IL.$$.fragment),mvr=l(),Zc=a("p"),gvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TQ=a("a"),hvr=o("from_pretrained()"),pvr=o(" class method or the "),MQ=a("a"),_vr=o("from_config()"),uvr=o(` class
method.`),bvr=l(),qL=a("p"),Fvr=o("This class cannot be instantiated directly using "),o5e=a("code"),vvr=o("__init__()"),Tvr=o(" (throws an error)."),Mvr=l(),At=a("div"),f(NL.$$.fragment),Evr=l(),r5e=a("p"),Cvr=o("Instantiates one of the base model classes of the library from a configuration."),wvr=l(),ef=a("p"),Avr=o(`Note:
Loading a model from its configuration file does `),t5e=a("strong"),yvr=o("not"),Lvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=a("a"),xvr=o("from_pretrained()"),kvr=o(" to load the model weights."),Svr=l(),a5e=a("p"),Rvr=o("Examples:"),Bvr=l(),f(jL.$$.fragment),Pvr=l(),yo=a("div"),f(DL.$$.fragment),$vr=l(),n5e=a("p"),Ivr=o("Instantiate one of the base model classes of the library from a pretrained model."),qvr=l(),xn=a("p"),Nvr=o("The model class to instantiate is selected based on the "),s5e=a("code"),jvr=o("model_type"),Dvr=o(` property of the config object (either
passed as an argument or loaded from `),l5e=a("code"),Gvr=o("pretrained_model_name_or_path"),Ovr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=a("code"),Vvr=o("pretrained_model_name_or_path"),Xvr=o(":"),zvr=l(),z=a("ul"),hT=a("li"),d5e=a("strong"),Qvr=o("albert"),Wvr=o(" \u2014 "),CQ=a("a"),Hvr=o("FlaxAlbertModel"),Uvr=o(" (ALBERT model)"),Jvr=l(),pT=a("li"),c5e=a("strong"),Yvr=o("bart"),Kvr=o(" \u2014 "),wQ=a("a"),Zvr=o("FlaxBartModel"),e6r=o(" (BART model)"),o6r=l(),_T=a("li"),f5e=a("strong"),r6r=o("beit"),t6r=o(" \u2014 "),AQ=a("a"),a6r=o("FlaxBeitModel"),n6r=o(" (BEiT model)"),s6r=l(),uT=a("li"),m5e=a("strong"),l6r=o("bert"),i6r=o(" \u2014 "),yQ=a("a"),d6r=o("FlaxBertModel"),c6r=o(" (BERT model)"),f6r=l(),bT=a("li"),g5e=a("strong"),m6r=o("big_bird"),g6r=o(" \u2014 "),LQ=a("a"),h6r=o("FlaxBigBirdModel"),p6r=o(" (BigBird model)"),_6r=l(),FT=a("li"),h5e=a("strong"),u6r=o("blenderbot"),b6r=o(" \u2014 "),xQ=a("a"),F6r=o("FlaxBlenderbotModel"),v6r=o(" (Blenderbot model)"),T6r=l(),vT=a("li"),p5e=a("strong"),M6r=o("blenderbot-small"),E6r=o(" \u2014 "),kQ=a("a"),C6r=o("FlaxBlenderbotSmallModel"),w6r=o(" (BlenderbotSmall model)"),A6r=l(),TT=a("li"),_5e=a("strong"),y6r=o("clip"),L6r=o(" \u2014 "),SQ=a("a"),x6r=o("FlaxCLIPModel"),k6r=o(" (CLIP model)"),S6r=l(),MT=a("li"),u5e=a("strong"),R6r=o("distilbert"),B6r=o(" \u2014 "),RQ=a("a"),P6r=o("FlaxDistilBertModel"),$6r=o(" (DistilBERT model)"),I6r=l(),ET=a("li"),b5e=a("strong"),q6r=o("electra"),N6r=o(" \u2014 "),BQ=a("a"),j6r=o("FlaxElectraModel"),D6r=o(" (ELECTRA model)"),G6r=l(),CT=a("li"),F5e=a("strong"),O6r=o("gpt2"),V6r=o(" \u2014 "),PQ=a("a"),X6r=o("FlaxGPT2Model"),z6r=o(" (OpenAI GPT-2 model)"),Q6r=l(),wT=a("li"),v5e=a("strong"),W6r=o("gpt_neo"),H6r=o(" \u2014 "),$Q=a("a"),U6r=o("FlaxGPTNeoModel"),J6r=o(" (GPT Neo model)"),Y6r=l(),AT=a("li"),T5e=a("strong"),K6r=o("gptj"),Z6r=o(" \u2014 "),IQ=a("a"),eTr=o("FlaxGPTJModel"),oTr=o(" (GPT-J model)"),rTr=l(),yT=a("li"),M5e=a("strong"),tTr=o("marian"),aTr=o(" \u2014 "),qQ=a("a"),nTr=o("FlaxMarianModel"),sTr=o(" (Marian model)"),lTr=l(),LT=a("li"),E5e=a("strong"),iTr=o("mbart"),dTr=o(" \u2014 "),NQ=a("a"),cTr=o("FlaxMBartModel"),fTr=o(" (mBART model)"),mTr=l(),xT=a("li"),C5e=a("strong"),gTr=o("mt5"),hTr=o(" \u2014 "),jQ=a("a"),pTr=o("FlaxMT5Model"),_Tr=o(" (mT5 model)"),uTr=l(),kT=a("li"),w5e=a("strong"),bTr=o("pegasus"),FTr=o(" \u2014 "),DQ=a("a"),vTr=o("FlaxPegasusModel"),TTr=o(" (Pegasus model)"),MTr=l(),ST=a("li"),A5e=a("strong"),ETr=o("roberta"),CTr=o(" \u2014 "),GQ=a("a"),wTr=o("FlaxRobertaModel"),ATr=o(" (RoBERTa model)"),yTr=l(),RT=a("li"),y5e=a("strong"),LTr=o("roformer"),xTr=o(" \u2014 "),OQ=a("a"),kTr=o("FlaxRoFormerModel"),STr=o(" (RoFormer model)"),RTr=l(),BT=a("li"),L5e=a("strong"),BTr=o("t5"),PTr=o(" \u2014 "),VQ=a("a"),$Tr=o("FlaxT5Model"),ITr=o(" (T5 model)"),qTr=l(),PT=a("li"),x5e=a("strong"),NTr=o("vision-text-dual-encoder"),jTr=o(" \u2014 "),XQ=a("a"),DTr=o("FlaxVisionTextDualEncoderModel"),GTr=o(" (VisionTextDualEncoder model)"),OTr=l(),$T=a("li"),k5e=a("strong"),VTr=o("vit"),XTr=o(" \u2014 "),zQ=a("a"),zTr=o("FlaxViTModel"),QTr=o(" (ViT model)"),WTr=l(),IT=a("li"),S5e=a("strong"),HTr=o("wav2vec2"),UTr=o(" \u2014 "),QQ=a("a"),JTr=o("FlaxWav2Vec2Model"),YTr=o(" (Wav2Vec2 model)"),KTr=l(),qT=a("li"),R5e=a("strong"),ZTr=o("xglm"),eMr=o(" \u2014 "),WQ=a("a"),oMr=o("FlaxXGLMModel"),rMr=o(" (XGLM model)"),tMr=l(),NT=a("li"),B5e=a("strong"),aMr=o("xlm-roberta"),nMr=o(" \u2014 "),HQ=a("a"),sMr=o("FlaxXLMRobertaModel"),lMr=o(" (XLM-RoBERTa model)"),iMr=l(),P5e=a("p"),dMr=o("Examples:"),cMr=l(),f(GL.$$.fragment),CBe=l(),of=a("h2"),jT=a("a"),$5e=a("span"),f(OL.$$.fragment),fMr=l(),I5e=a("span"),mMr=o("FlaxAutoModelForCausalLM"),wBe=l(),Br=a("div"),f(VL.$$.fragment),gMr=l(),rf=a("p"),hMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),UQ=a("a"),pMr=o("from_pretrained()"),_Mr=o(" class method or the "),JQ=a("a"),uMr=o("from_config()"),bMr=o(` class
method.`),FMr=l(),XL=a("p"),vMr=o("This class cannot be instantiated directly using "),q5e=a("code"),TMr=o("__init__()"),MMr=o(" (throws an error)."),EMr=l(),yt=a("div"),f(zL.$$.fragment),CMr=l(),N5e=a("p"),wMr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),AMr=l(),tf=a("p"),yMr=o(`Note:
Loading a model from its configuration file does `),j5e=a("strong"),LMr=o("not"),xMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=a("a"),kMr=o("from_pretrained()"),SMr=o(" to load the model weights."),RMr=l(),D5e=a("p"),BMr=o("Examples:"),PMr=l(),f(QL.$$.fragment),$Mr=l(),Lo=a("div"),f(WL.$$.fragment),IMr=l(),G5e=a("p"),qMr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),NMr=l(),kn=a("p"),jMr=o("The model class to instantiate is selected based on the "),O5e=a("code"),DMr=o("model_type"),GMr=o(` property of the config object (either
passed as an argument or loaded from `),V5e=a("code"),OMr=o("pretrained_model_name_or_path"),VMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X5e=a("code"),XMr=o("pretrained_model_name_or_path"),zMr=o(":"),QMr=l(),ca=a("ul"),DT=a("li"),z5e=a("strong"),WMr=o("bart"),HMr=o(" \u2014 "),KQ=a("a"),UMr=o("FlaxBartForCausalLM"),JMr=o(" (BART model)"),YMr=l(),GT=a("li"),Q5e=a("strong"),KMr=o("gpt2"),ZMr=o(" \u2014 "),ZQ=a("a"),eEr=o("FlaxGPT2LMHeadModel"),oEr=o(" (OpenAI GPT-2 model)"),rEr=l(),OT=a("li"),W5e=a("strong"),tEr=o("gpt_neo"),aEr=o(" \u2014 "),eW=a("a"),nEr=o("FlaxGPTNeoForCausalLM"),sEr=o(" (GPT Neo model)"),lEr=l(),VT=a("li"),H5e=a("strong"),iEr=o("gptj"),dEr=o(" \u2014 "),oW=a("a"),cEr=o("FlaxGPTJForCausalLM"),fEr=o(" (GPT-J model)"),mEr=l(),XT=a("li"),U5e=a("strong"),gEr=o("xglm"),hEr=o(" \u2014 "),rW=a("a"),pEr=o("FlaxXGLMForCausalLM"),_Er=o(" (XGLM model)"),uEr=l(),J5e=a("p"),bEr=o("Examples:"),FEr=l(),f(HL.$$.fragment),ABe=l(),af=a("h2"),zT=a("a"),Y5e=a("span"),f(UL.$$.fragment),vEr=l(),K5e=a("span"),TEr=o("FlaxAutoModelForPreTraining"),yBe=l(),Pr=a("div"),f(JL.$$.fragment),MEr=l(),nf=a("p"),EEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tW=a("a"),CEr=o("from_pretrained()"),wEr=o(" class method or the "),aW=a("a"),AEr=o("from_config()"),yEr=o(` class
method.`),LEr=l(),YL=a("p"),xEr=o("This class cannot be instantiated directly using "),Z5e=a("code"),kEr=o("__init__()"),SEr=o(" (throws an error)."),REr=l(),Lt=a("div"),f(KL.$$.fragment),BEr=l(),e3e=a("p"),PEr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$Er=l(),sf=a("p"),IEr=o(`Note:
Loading a model from its configuration file does `),o3e=a("strong"),qEr=o("not"),NEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=a("a"),jEr=o("from_pretrained()"),DEr=o(" to load the model weights."),GEr=l(),r3e=a("p"),OEr=o("Examples:"),VEr=l(),f(ZL.$$.fragment),XEr=l(),xo=a("div"),f(e8.$$.fragment),zEr=l(),t3e=a("p"),QEr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),WEr=l(),Sn=a("p"),HEr=o("The model class to instantiate is selected based on the "),a3e=a("code"),UEr=o("model_type"),JEr=o(` property of the config object (either
passed as an argument or loaded from `),n3e=a("code"),YEr=o("pretrained_model_name_or_path"),KEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s3e=a("code"),ZEr=o("pretrained_model_name_or_path"),eCr=o(":"),oCr=l(),fe=a("ul"),QT=a("li"),l3e=a("strong"),rCr=o("albert"),tCr=o(" \u2014 "),sW=a("a"),aCr=o("FlaxAlbertForPreTraining"),nCr=o(" (ALBERT model)"),sCr=l(),WT=a("li"),i3e=a("strong"),lCr=o("bart"),iCr=o(" \u2014 "),lW=a("a"),dCr=o("FlaxBartForConditionalGeneration"),cCr=o(" (BART model)"),fCr=l(),HT=a("li"),d3e=a("strong"),mCr=o("bert"),gCr=o(" \u2014 "),iW=a("a"),hCr=o("FlaxBertForPreTraining"),pCr=o(" (BERT model)"),_Cr=l(),UT=a("li"),c3e=a("strong"),uCr=o("big_bird"),bCr=o(" \u2014 "),dW=a("a"),FCr=o("FlaxBigBirdForPreTraining"),vCr=o(" (BigBird model)"),TCr=l(),JT=a("li"),f3e=a("strong"),MCr=o("electra"),ECr=o(" \u2014 "),cW=a("a"),CCr=o("FlaxElectraForPreTraining"),wCr=o(" (ELECTRA model)"),ACr=l(),YT=a("li"),m3e=a("strong"),yCr=o("mbart"),LCr=o(" \u2014 "),fW=a("a"),xCr=o("FlaxMBartForConditionalGeneration"),kCr=o(" (mBART model)"),SCr=l(),KT=a("li"),g3e=a("strong"),RCr=o("mt5"),BCr=o(" \u2014 "),mW=a("a"),PCr=o("FlaxMT5ForConditionalGeneration"),$Cr=o(" (mT5 model)"),ICr=l(),ZT=a("li"),h3e=a("strong"),qCr=o("roberta"),NCr=o(" \u2014 "),gW=a("a"),jCr=o("FlaxRobertaForMaskedLM"),DCr=o(" (RoBERTa model)"),GCr=l(),eM=a("li"),p3e=a("strong"),OCr=o("roformer"),VCr=o(" \u2014 "),hW=a("a"),XCr=o("FlaxRoFormerForMaskedLM"),zCr=o(" (RoFormer model)"),QCr=l(),oM=a("li"),_3e=a("strong"),WCr=o("t5"),HCr=o(" \u2014 "),pW=a("a"),UCr=o("FlaxT5ForConditionalGeneration"),JCr=o(" (T5 model)"),YCr=l(),rM=a("li"),u3e=a("strong"),KCr=o("wav2vec2"),ZCr=o(" \u2014 "),_W=a("a"),ewr=o("FlaxWav2Vec2ForPreTraining"),owr=o(" (Wav2Vec2 model)"),rwr=l(),tM=a("li"),b3e=a("strong"),twr=o("xlm-roberta"),awr=o(" \u2014 "),uW=a("a"),nwr=o("FlaxXLMRobertaForMaskedLM"),swr=o(" (XLM-RoBERTa model)"),lwr=l(),F3e=a("p"),iwr=o("Examples:"),dwr=l(),f(o8.$$.fragment),LBe=l(),lf=a("h2"),aM=a("a"),v3e=a("span"),f(r8.$$.fragment),cwr=l(),T3e=a("span"),fwr=o("FlaxAutoModelForMaskedLM"),xBe=l(),$r=a("div"),f(t8.$$.fragment),mwr=l(),df=a("p"),gwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bW=a("a"),hwr=o("from_pretrained()"),pwr=o(" class method or the "),FW=a("a"),_wr=o("from_config()"),uwr=o(` class
method.`),bwr=l(),a8=a("p"),Fwr=o("This class cannot be instantiated directly using "),M3e=a("code"),vwr=o("__init__()"),Twr=o(" (throws an error)."),Mwr=l(),xt=a("div"),f(n8.$$.fragment),Ewr=l(),E3e=a("p"),Cwr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wwr=l(),cf=a("p"),Awr=o(`Note:
Loading a model from its configuration file does `),C3e=a("strong"),ywr=o("not"),Lwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=a("a"),xwr=o("from_pretrained()"),kwr=o(" to load the model weights."),Swr=l(),w3e=a("p"),Rwr=o("Examples:"),Bwr=l(),f(s8.$$.fragment),Pwr=l(),ko=a("div"),f(l8.$$.fragment),$wr=l(),A3e=a("p"),Iwr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qwr=l(),Rn=a("p"),Nwr=o("The model class to instantiate is selected based on the "),y3e=a("code"),jwr=o("model_type"),Dwr=o(` property of the config object (either
passed as an argument or loaded from `),L3e=a("code"),Gwr=o("pretrained_model_name_or_path"),Owr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x3e=a("code"),Vwr=o("pretrained_model_name_or_path"),Xwr=o(":"),zwr=l(),be=a("ul"),nM=a("li"),k3e=a("strong"),Qwr=o("albert"),Wwr=o(" \u2014 "),TW=a("a"),Hwr=o("FlaxAlbertForMaskedLM"),Uwr=o(" (ALBERT model)"),Jwr=l(),sM=a("li"),S3e=a("strong"),Ywr=o("bart"),Kwr=o(" \u2014 "),MW=a("a"),Zwr=o("FlaxBartForConditionalGeneration"),eAr=o(" (BART model)"),oAr=l(),lM=a("li"),R3e=a("strong"),rAr=o("bert"),tAr=o(" \u2014 "),EW=a("a"),aAr=o("FlaxBertForMaskedLM"),nAr=o(" (BERT model)"),sAr=l(),iM=a("li"),B3e=a("strong"),lAr=o("big_bird"),iAr=o(" \u2014 "),CW=a("a"),dAr=o("FlaxBigBirdForMaskedLM"),cAr=o(" (BigBird model)"),fAr=l(),dM=a("li"),P3e=a("strong"),mAr=o("distilbert"),gAr=o(" \u2014 "),wW=a("a"),hAr=o("FlaxDistilBertForMaskedLM"),pAr=o(" (DistilBERT model)"),_Ar=l(),cM=a("li"),$3e=a("strong"),uAr=o("electra"),bAr=o(" \u2014 "),AW=a("a"),FAr=o("FlaxElectraForMaskedLM"),vAr=o(" (ELECTRA model)"),TAr=l(),fM=a("li"),I3e=a("strong"),MAr=o("mbart"),EAr=o(" \u2014 "),yW=a("a"),CAr=o("FlaxMBartForConditionalGeneration"),wAr=o(" (mBART model)"),AAr=l(),mM=a("li"),q3e=a("strong"),yAr=o("roberta"),LAr=o(" \u2014 "),LW=a("a"),xAr=o("FlaxRobertaForMaskedLM"),kAr=o(" (RoBERTa model)"),SAr=l(),gM=a("li"),N3e=a("strong"),RAr=o("roformer"),BAr=o(" \u2014 "),xW=a("a"),PAr=o("FlaxRoFormerForMaskedLM"),$Ar=o(" (RoFormer model)"),IAr=l(),hM=a("li"),j3e=a("strong"),qAr=o("xlm-roberta"),NAr=o(" \u2014 "),kW=a("a"),jAr=o("FlaxXLMRobertaForMaskedLM"),DAr=o(" (XLM-RoBERTa model)"),GAr=l(),D3e=a("p"),OAr=o("Examples:"),VAr=l(),f(i8.$$.fragment),kBe=l(),ff=a("h2"),pM=a("a"),G3e=a("span"),f(d8.$$.fragment),XAr=l(),O3e=a("span"),zAr=o("FlaxAutoModelForSeq2SeqLM"),SBe=l(),Ir=a("div"),f(c8.$$.fragment),QAr=l(),mf=a("p"),WAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),SW=a("a"),HAr=o("from_pretrained()"),UAr=o(" class method or the "),RW=a("a"),JAr=o("from_config()"),YAr=o(` class
method.`),KAr=l(),f8=a("p"),ZAr=o("This class cannot be instantiated directly using "),V3e=a("code"),e0r=o("__init__()"),o0r=o(" (throws an error)."),r0r=l(),kt=a("div"),f(m8.$$.fragment),t0r=l(),X3e=a("p"),a0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),n0r=l(),gf=a("p"),s0r=o(`Note:
Loading a model from its configuration file does `),z3e=a("strong"),l0r=o("not"),i0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=a("a"),d0r=o("from_pretrained()"),c0r=o(" to load the model weights."),f0r=l(),Q3e=a("p"),m0r=o("Examples:"),g0r=l(),f(g8.$$.fragment),h0r=l(),So=a("div"),f(h8.$$.fragment),p0r=l(),W3e=a("p"),_0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),u0r=l(),Bn=a("p"),b0r=o("The model class to instantiate is selected based on the "),H3e=a("code"),F0r=o("model_type"),v0r=o(` property of the config object (either
passed as an argument or loaded from `),U3e=a("code"),T0r=o("pretrained_model_name_or_path"),M0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J3e=a("code"),E0r=o("pretrained_model_name_or_path"),C0r=o(":"),w0r=l(),Ee=a("ul"),_M=a("li"),Y3e=a("strong"),A0r=o("bart"),y0r=o(" \u2014 "),PW=a("a"),L0r=o("FlaxBartForConditionalGeneration"),x0r=o(" (BART model)"),k0r=l(),uM=a("li"),K3e=a("strong"),S0r=o("blenderbot"),R0r=o(" \u2014 "),$W=a("a"),B0r=o("FlaxBlenderbotForConditionalGeneration"),P0r=o(" (Blenderbot model)"),$0r=l(),bM=a("li"),Z3e=a("strong"),I0r=o("blenderbot-small"),q0r=o(" \u2014 "),IW=a("a"),N0r=o("FlaxBlenderbotSmallForConditionalGeneration"),j0r=o(" (BlenderbotSmall model)"),D0r=l(),FM=a("li"),e2e=a("strong"),G0r=o("encoder-decoder"),O0r=o(" \u2014 "),qW=a("a"),V0r=o("FlaxEncoderDecoderModel"),X0r=o(" (Encoder decoder model)"),z0r=l(),vM=a("li"),o2e=a("strong"),Q0r=o("marian"),W0r=o(" \u2014 "),NW=a("a"),H0r=o("FlaxMarianMTModel"),U0r=o(" (Marian model)"),J0r=l(),TM=a("li"),r2e=a("strong"),Y0r=o("mbart"),K0r=o(" \u2014 "),jW=a("a"),Z0r=o("FlaxMBartForConditionalGeneration"),eyr=o(" (mBART model)"),oyr=l(),MM=a("li"),t2e=a("strong"),ryr=o("mt5"),tyr=o(" \u2014 "),DW=a("a"),ayr=o("FlaxMT5ForConditionalGeneration"),nyr=o(" (mT5 model)"),syr=l(),EM=a("li"),a2e=a("strong"),lyr=o("pegasus"),iyr=o(" \u2014 "),GW=a("a"),dyr=o("FlaxPegasusForConditionalGeneration"),cyr=o(" (Pegasus model)"),fyr=l(),CM=a("li"),n2e=a("strong"),myr=o("t5"),gyr=o(" \u2014 "),OW=a("a"),hyr=o("FlaxT5ForConditionalGeneration"),pyr=o(" (T5 model)"),_yr=l(),s2e=a("p"),uyr=o("Examples:"),byr=l(),f(p8.$$.fragment),RBe=l(),hf=a("h2"),wM=a("a"),l2e=a("span"),f(_8.$$.fragment),Fyr=l(),i2e=a("span"),vyr=o("FlaxAutoModelForSequenceClassification"),BBe=l(),qr=a("div"),f(u8.$$.fragment),Tyr=l(),pf=a("p"),Myr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VW=a("a"),Eyr=o("from_pretrained()"),Cyr=o(" class method or the "),XW=a("a"),wyr=o("from_config()"),Ayr=o(` class
method.`),yyr=l(),b8=a("p"),Lyr=o("This class cannot be instantiated directly using "),d2e=a("code"),xyr=o("__init__()"),kyr=o(" (throws an error)."),Syr=l(),St=a("div"),f(F8.$$.fragment),Ryr=l(),c2e=a("p"),Byr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Pyr=l(),_f=a("p"),$yr=o(`Note:
Loading a model from its configuration file does `),f2e=a("strong"),Iyr=o("not"),qyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=a("a"),Nyr=o("from_pretrained()"),jyr=o(" to load the model weights."),Dyr=l(),m2e=a("p"),Gyr=o("Examples:"),Oyr=l(),f(v8.$$.fragment),Vyr=l(),Ro=a("div"),f(T8.$$.fragment),Xyr=l(),g2e=a("p"),zyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Qyr=l(),Pn=a("p"),Wyr=o("The model class to instantiate is selected based on the "),h2e=a("code"),Hyr=o("model_type"),Uyr=o(` property of the config object (either
passed as an argument or loaded from `),p2e=a("code"),Jyr=o("pretrained_model_name_or_path"),Yyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=a("code"),Kyr=o("pretrained_model_name_or_path"),Zyr=o(":"),eLr=l(),Fe=a("ul"),AM=a("li"),u2e=a("strong"),oLr=o("albert"),rLr=o(" \u2014 "),QW=a("a"),tLr=o("FlaxAlbertForSequenceClassification"),aLr=o(" (ALBERT model)"),nLr=l(),yM=a("li"),b2e=a("strong"),sLr=o("bart"),lLr=o(" \u2014 "),WW=a("a"),iLr=o("FlaxBartForSequenceClassification"),dLr=o(" (BART model)"),cLr=l(),LM=a("li"),F2e=a("strong"),fLr=o("bert"),mLr=o(" \u2014 "),HW=a("a"),gLr=o("FlaxBertForSequenceClassification"),hLr=o(" (BERT model)"),pLr=l(),xM=a("li"),v2e=a("strong"),_Lr=o("big_bird"),uLr=o(" \u2014 "),UW=a("a"),bLr=o("FlaxBigBirdForSequenceClassification"),FLr=o(" (BigBird model)"),vLr=l(),kM=a("li"),T2e=a("strong"),TLr=o("distilbert"),MLr=o(" \u2014 "),JW=a("a"),ELr=o("FlaxDistilBertForSequenceClassification"),CLr=o(" (DistilBERT model)"),wLr=l(),SM=a("li"),M2e=a("strong"),ALr=o("electra"),yLr=o(" \u2014 "),YW=a("a"),LLr=o("FlaxElectraForSequenceClassification"),xLr=o(" (ELECTRA model)"),kLr=l(),RM=a("li"),E2e=a("strong"),SLr=o("mbart"),RLr=o(" \u2014 "),KW=a("a"),BLr=o("FlaxMBartForSequenceClassification"),PLr=o(" (mBART model)"),$Lr=l(),BM=a("li"),C2e=a("strong"),ILr=o("roberta"),qLr=o(" \u2014 "),ZW=a("a"),NLr=o("FlaxRobertaForSequenceClassification"),jLr=o(" (RoBERTa model)"),DLr=l(),PM=a("li"),w2e=a("strong"),GLr=o("roformer"),OLr=o(" \u2014 "),eH=a("a"),VLr=o("FlaxRoFormerForSequenceClassification"),XLr=o(" (RoFormer model)"),zLr=l(),$M=a("li"),A2e=a("strong"),QLr=o("xlm-roberta"),WLr=o(" \u2014 "),oH=a("a"),HLr=o("FlaxXLMRobertaForSequenceClassification"),ULr=o(" (XLM-RoBERTa model)"),JLr=l(),y2e=a("p"),YLr=o("Examples:"),KLr=l(),f(M8.$$.fragment),PBe=l(),uf=a("h2"),IM=a("a"),L2e=a("span"),f(E8.$$.fragment),ZLr=l(),x2e=a("span"),e8r=o("FlaxAutoModelForQuestionAnswering"),$Be=l(),Nr=a("div"),f(C8.$$.fragment),o8r=l(),bf=a("p"),r8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rH=a("a"),t8r=o("from_pretrained()"),a8r=o(" class method or the "),tH=a("a"),n8r=o("from_config()"),s8r=o(` class
method.`),l8r=l(),w8=a("p"),i8r=o("This class cannot be instantiated directly using "),k2e=a("code"),d8r=o("__init__()"),c8r=o(" (throws an error)."),f8r=l(),Rt=a("div"),f(A8.$$.fragment),m8r=l(),S2e=a("p"),g8r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),h8r=l(),Ff=a("p"),p8r=o(`Note:
Loading a model from its configuration file does `),R2e=a("strong"),_8r=o("not"),u8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=a("a"),b8r=o("from_pretrained()"),F8r=o(" to load the model weights."),v8r=l(),B2e=a("p"),T8r=o("Examples:"),M8r=l(),f(y8.$$.fragment),E8r=l(),Bo=a("div"),f(L8.$$.fragment),C8r=l(),P2e=a("p"),w8r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),A8r=l(),$n=a("p"),y8r=o("The model class to instantiate is selected based on the "),$2e=a("code"),L8r=o("model_type"),x8r=o(` property of the config object (either
passed as an argument or loaded from `),I2e=a("code"),k8r=o("pretrained_model_name_or_path"),S8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=a("code"),R8r=o("pretrained_model_name_or_path"),B8r=o(":"),P8r=l(),ve=a("ul"),qM=a("li"),N2e=a("strong"),$8r=o("albert"),I8r=o(" \u2014 "),nH=a("a"),q8r=o("FlaxAlbertForQuestionAnswering"),N8r=o(" (ALBERT model)"),j8r=l(),NM=a("li"),j2e=a("strong"),D8r=o("bart"),G8r=o(" \u2014 "),sH=a("a"),O8r=o("FlaxBartForQuestionAnswering"),V8r=o(" (BART model)"),X8r=l(),jM=a("li"),D2e=a("strong"),z8r=o("bert"),Q8r=o(" \u2014 "),lH=a("a"),W8r=o("FlaxBertForQuestionAnswering"),H8r=o(" (BERT model)"),U8r=l(),DM=a("li"),G2e=a("strong"),J8r=o("big_bird"),Y8r=o(" \u2014 "),iH=a("a"),K8r=o("FlaxBigBirdForQuestionAnswering"),Z8r=o(" (BigBird model)"),e7r=l(),GM=a("li"),O2e=a("strong"),o7r=o("distilbert"),r7r=o(" \u2014 "),dH=a("a"),t7r=o("FlaxDistilBertForQuestionAnswering"),a7r=o(" (DistilBERT model)"),n7r=l(),OM=a("li"),V2e=a("strong"),s7r=o("electra"),l7r=o(" \u2014 "),cH=a("a"),i7r=o("FlaxElectraForQuestionAnswering"),d7r=o(" (ELECTRA model)"),c7r=l(),VM=a("li"),X2e=a("strong"),f7r=o("mbart"),m7r=o(" \u2014 "),fH=a("a"),g7r=o("FlaxMBartForQuestionAnswering"),h7r=o(" (mBART model)"),p7r=l(),XM=a("li"),z2e=a("strong"),_7r=o("roberta"),u7r=o(" \u2014 "),mH=a("a"),b7r=o("FlaxRobertaForQuestionAnswering"),F7r=o(" (RoBERTa model)"),v7r=l(),zM=a("li"),Q2e=a("strong"),T7r=o("roformer"),M7r=o(" \u2014 "),gH=a("a"),E7r=o("FlaxRoFormerForQuestionAnswering"),C7r=o(" (RoFormer model)"),w7r=l(),QM=a("li"),W2e=a("strong"),A7r=o("xlm-roberta"),y7r=o(" \u2014 "),hH=a("a"),L7r=o("FlaxXLMRobertaForQuestionAnswering"),x7r=o(" (XLM-RoBERTa model)"),k7r=l(),H2e=a("p"),S7r=o("Examples:"),R7r=l(),f(x8.$$.fragment),IBe=l(),vf=a("h2"),WM=a("a"),U2e=a("span"),f(k8.$$.fragment),B7r=l(),J2e=a("span"),P7r=o("FlaxAutoModelForTokenClassification"),qBe=l(),jr=a("div"),f(S8.$$.fragment),$7r=l(),Tf=a("p"),I7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pH=a("a"),q7r=o("from_pretrained()"),N7r=o(" class method or the "),_H=a("a"),j7r=o("from_config()"),D7r=o(` class
method.`),G7r=l(),R8=a("p"),O7r=o("This class cannot be instantiated directly using "),Y2e=a("code"),V7r=o("__init__()"),X7r=o(" (throws an error)."),z7r=l(),Bt=a("div"),f(B8.$$.fragment),Q7r=l(),K2e=a("p"),W7r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),H7r=l(),Mf=a("p"),U7r=o(`Note:
Loading a model from its configuration file does `),Z2e=a("strong"),J7r=o("not"),Y7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=a("a"),K7r=o("from_pretrained()"),Z7r=o(" to load the model weights."),e9r=l(),eFe=a("p"),o9r=o("Examples:"),r9r=l(),f(P8.$$.fragment),t9r=l(),Po=a("div"),f($8.$$.fragment),a9r=l(),oFe=a("p"),n9r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),s9r=l(),In=a("p"),l9r=o("The model class to instantiate is selected based on the "),rFe=a("code"),i9r=o("model_type"),d9r=o(` property of the config object (either
passed as an argument or loaded from `),tFe=a("code"),c9r=o("pretrained_model_name_or_path"),f9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=a("code"),m9r=o("pretrained_model_name_or_path"),g9r=o(":"),h9r=l(),Be=a("ul"),HM=a("li"),nFe=a("strong"),p9r=o("albert"),_9r=o(" \u2014 "),bH=a("a"),u9r=o("FlaxAlbertForTokenClassification"),b9r=o(" (ALBERT model)"),F9r=l(),UM=a("li"),sFe=a("strong"),v9r=o("bert"),T9r=o(" \u2014 "),FH=a("a"),M9r=o("FlaxBertForTokenClassification"),E9r=o(" (BERT model)"),C9r=l(),JM=a("li"),lFe=a("strong"),w9r=o("big_bird"),A9r=o(" \u2014 "),vH=a("a"),y9r=o("FlaxBigBirdForTokenClassification"),L9r=o(" (BigBird model)"),x9r=l(),YM=a("li"),iFe=a("strong"),k9r=o("distilbert"),S9r=o(" \u2014 "),TH=a("a"),R9r=o("FlaxDistilBertForTokenClassification"),B9r=o(" (DistilBERT model)"),P9r=l(),KM=a("li"),dFe=a("strong"),$9r=o("electra"),I9r=o(" \u2014 "),MH=a("a"),q9r=o("FlaxElectraForTokenClassification"),N9r=o(" (ELECTRA model)"),j9r=l(),ZM=a("li"),cFe=a("strong"),D9r=o("roberta"),G9r=o(" \u2014 "),EH=a("a"),O9r=o("FlaxRobertaForTokenClassification"),V9r=o(" (RoBERTa model)"),X9r=l(),eE=a("li"),fFe=a("strong"),z9r=o("roformer"),Q9r=o(" \u2014 "),CH=a("a"),W9r=o("FlaxRoFormerForTokenClassification"),H9r=o(" (RoFormer model)"),U9r=l(),oE=a("li"),mFe=a("strong"),J9r=o("xlm-roberta"),Y9r=o(" \u2014 "),wH=a("a"),K9r=o("FlaxXLMRobertaForTokenClassification"),Z9r=o(" (XLM-RoBERTa model)"),exr=l(),gFe=a("p"),oxr=o("Examples:"),rxr=l(),f(I8.$$.fragment),NBe=l(),Ef=a("h2"),rE=a("a"),hFe=a("span"),f(q8.$$.fragment),txr=l(),pFe=a("span"),axr=o("FlaxAutoModelForMultipleChoice"),jBe=l(),Dr=a("div"),f(N8.$$.fragment),nxr=l(),Cf=a("p"),sxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AH=a("a"),lxr=o("from_pretrained()"),ixr=o(" class method or the "),yH=a("a"),dxr=o("from_config()"),cxr=o(` class
method.`),fxr=l(),j8=a("p"),mxr=o("This class cannot be instantiated directly using "),_Fe=a("code"),gxr=o("__init__()"),hxr=o(" (throws an error)."),pxr=l(),Pt=a("div"),f(D8.$$.fragment),_xr=l(),uFe=a("p"),uxr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bxr=l(),wf=a("p"),Fxr=o(`Note:
Loading a model from its configuration file does `),bFe=a("strong"),vxr=o("not"),Txr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=a("a"),Mxr=o("from_pretrained()"),Exr=o(" to load the model weights."),Cxr=l(),FFe=a("p"),wxr=o("Examples:"),Axr=l(),f(G8.$$.fragment),yxr=l(),$o=a("div"),f(O8.$$.fragment),Lxr=l(),vFe=a("p"),xxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kxr=l(),qn=a("p"),Sxr=o("The model class to instantiate is selected based on the "),TFe=a("code"),Rxr=o("model_type"),Bxr=o(` property of the config object (either
passed as an argument or loaded from `),MFe=a("code"),Pxr=o("pretrained_model_name_or_path"),$xr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=a("code"),Ixr=o("pretrained_model_name_or_path"),qxr=o(":"),Nxr=l(),Pe=a("ul"),tE=a("li"),CFe=a("strong"),jxr=o("albert"),Dxr=o(" \u2014 "),xH=a("a"),Gxr=o("FlaxAlbertForMultipleChoice"),Oxr=o(" (ALBERT model)"),Vxr=l(),aE=a("li"),wFe=a("strong"),Xxr=o("bert"),zxr=o(" \u2014 "),kH=a("a"),Qxr=o("FlaxBertForMultipleChoice"),Wxr=o(" (BERT model)"),Hxr=l(),nE=a("li"),AFe=a("strong"),Uxr=o("big_bird"),Jxr=o(" \u2014 "),SH=a("a"),Yxr=o("FlaxBigBirdForMultipleChoice"),Kxr=o(" (BigBird model)"),Zxr=l(),sE=a("li"),yFe=a("strong"),ekr=o("distilbert"),okr=o(" \u2014 "),RH=a("a"),rkr=o("FlaxDistilBertForMultipleChoice"),tkr=o(" (DistilBERT model)"),akr=l(),lE=a("li"),LFe=a("strong"),nkr=o("electra"),skr=o(" \u2014 "),BH=a("a"),lkr=o("FlaxElectraForMultipleChoice"),ikr=o(" (ELECTRA model)"),dkr=l(),iE=a("li"),xFe=a("strong"),ckr=o("roberta"),fkr=o(" \u2014 "),PH=a("a"),mkr=o("FlaxRobertaForMultipleChoice"),gkr=o(" (RoBERTa model)"),hkr=l(),dE=a("li"),kFe=a("strong"),pkr=o("roformer"),_kr=o(" \u2014 "),$H=a("a"),ukr=o("FlaxRoFormerForMultipleChoice"),bkr=o(" (RoFormer model)"),Fkr=l(),cE=a("li"),SFe=a("strong"),vkr=o("xlm-roberta"),Tkr=o(" \u2014 "),IH=a("a"),Mkr=o("FlaxXLMRobertaForMultipleChoice"),Ekr=o(" (XLM-RoBERTa model)"),Ckr=l(),RFe=a("p"),wkr=o("Examples:"),Akr=l(),f(V8.$$.fragment),DBe=l(),Af=a("h2"),fE=a("a"),BFe=a("span"),f(X8.$$.fragment),ykr=l(),PFe=a("span"),Lkr=o("FlaxAutoModelForNextSentencePrediction"),GBe=l(),Gr=a("div"),f(z8.$$.fragment),xkr=l(),yf=a("p"),kkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qH=a("a"),Skr=o("from_pretrained()"),Rkr=o(" class method or the "),NH=a("a"),Bkr=o("from_config()"),Pkr=o(` class
method.`),$kr=l(),Q8=a("p"),Ikr=o("This class cannot be instantiated directly using "),$Fe=a("code"),qkr=o("__init__()"),Nkr=o(" (throws an error)."),jkr=l(),$t=a("div"),f(W8.$$.fragment),Dkr=l(),IFe=a("p"),Gkr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Okr=l(),Lf=a("p"),Vkr=o(`Note:
Loading a model from its configuration file does `),qFe=a("strong"),Xkr=o("not"),zkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=a("a"),Qkr=o("from_pretrained()"),Wkr=o(" to load the model weights."),Hkr=l(),NFe=a("p"),Ukr=o("Examples:"),Jkr=l(),f(H8.$$.fragment),Ykr=l(),Io=a("div"),f(U8.$$.fragment),Kkr=l(),jFe=a("p"),Zkr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),eSr=l(),Nn=a("p"),oSr=o("The model class to instantiate is selected based on the "),DFe=a("code"),rSr=o("model_type"),tSr=o(` property of the config object (either
passed as an argument or loaded from `),GFe=a("code"),aSr=o("pretrained_model_name_or_path"),nSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=a("code"),sSr=o("pretrained_model_name_or_path"),lSr=o(":"),iSr=l(),VFe=a("ul"),mE=a("li"),XFe=a("strong"),dSr=o("bert"),cSr=o(" \u2014 "),DH=a("a"),fSr=o("FlaxBertForNextSentencePrediction"),mSr=o(" (BERT model)"),gSr=l(),zFe=a("p"),hSr=o("Examples:"),pSr=l(),f(J8.$$.fragment),OBe=l(),xf=a("h2"),gE=a("a"),QFe=a("span"),f(Y8.$$.fragment),_Sr=l(),WFe=a("span"),uSr=o("FlaxAutoModelForImageClassification"),VBe=l(),Or=a("div"),f(K8.$$.fragment),bSr=l(),kf=a("p"),FSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),GH=a("a"),vSr=o("from_pretrained()"),TSr=o(" class method or the "),OH=a("a"),MSr=o("from_config()"),ESr=o(` class
method.`),CSr=l(),Z8=a("p"),wSr=o("This class cannot be instantiated directly using "),HFe=a("code"),ASr=o("__init__()"),ySr=o(" (throws an error)."),LSr=l(),It=a("div"),f(e7.$$.fragment),xSr=l(),UFe=a("p"),kSr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),SSr=l(),Sf=a("p"),RSr=o(`Note:
Loading a model from its configuration file does `),JFe=a("strong"),BSr=o("not"),PSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=a("a"),$Sr=o("from_pretrained()"),ISr=o(" to load the model weights."),qSr=l(),YFe=a("p"),NSr=o("Examples:"),jSr=l(),f(o7.$$.fragment),DSr=l(),qo=a("div"),f(r7.$$.fragment),GSr=l(),KFe=a("p"),OSr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),VSr=l(),jn=a("p"),XSr=o("The model class to instantiate is selected based on the "),ZFe=a("code"),zSr=o("model_type"),QSr=o(` property of the config object (either
passed as an argument or loaded from `),eve=a("code"),WSr=o("pretrained_model_name_or_path"),HSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=a("code"),USr=o("pretrained_model_name_or_path"),JSr=o(":"),YSr=l(),t7=a("ul"),hE=a("li"),rve=a("strong"),KSr=o("beit"),ZSr=o(" \u2014 "),XH=a("a"),eRr=o("FlaxBeitForImageClassification"),oRr=o(" (BEiT model)"),rRr=l(),pE=a("li"),tve=a("strong"),tRr=o("vit"),aRr=o(" \u2014 "),zH=a("a"),nRr=o("FlaxViTForImageClassification"),sRr=o(" (ViT model)"),lRr=l(),ave=a("p"),iRr=o("Examples:"),dRr=l(),f(a7.$$.fragment),XBe=l(),Rf=a("h2"),_E=a("a"),nve=a("span"),f(n7.$$.fragment),cRr=l(),sve=a("span"),fRr=o("FlaxAutoModelForVision2Seq"),zBe=l(),Vr=a("div"),f(s7.$$.fragment),mRr=l(),Bf=a("p"),gRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),QH=a("a"),hRr=o("from_pretrained()"),pRr=o(" class method or the "),WH=a("a"),_Rr=o("from_config()"),uRr=o(` class
method.`),bRr=l(),l7=a("p"),FRr=o("This class cannot be instantiated directly using "),lve=a("code"),vRr=o("__init__()"),TRr=o(" (throws an error)."),MRr=l(),qt=a("div"),f(i7.$$.fragment),ERr=l(),ive=a("p"),CRr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wRr=l(),Pf=a("p"),ARr=o(`Note:
Loading a model from its configuration file does `),dve=a("strong"),yRr=o("not"),LRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),xRr=o("from_pretrained()"),kRr=o(" to load the model weights."),SRr=l(),cve=a("p"),RRr=o("Examples:"),BRr=l(),f(d7.$$.fragment),PRr=l(),No=a("div"),f(c7.$$.fragment),$Rr=l(),fve=a("p"),IRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qRr=l(),Dn=a("p"),NRr=o("The model class to instantiate is selected based on the "),mve=a("code"),jRr=o("model_type"),DRr=o(` property of the config object (either
passed as an argument or loaded from `),gve=a("code"),GRr=o("pretrained_model_name_or_path"),ORr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=a("code"),VRr=o("pretrained_model_name_or_path"),XRr=o(":"),zRr=l(),pve=a("ul"),uE=a("li"),_ve=a("strong"),QRr=o("vision-encoder-decoder"),WRr=o(" \u2014 "),UH=a("a"),HRr=o("FlaxVisionEncoderDecoderModel"),URr=o(" (Vision Encoder decoder model)"),JRr=l(),uve=a("p"),YRr=o("Examples:"),KRr=l(),f(f7.$$.fragment),this.h()},l(c){const u=TEt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),ce=n(c,"H1",{class:!0});var m7=s(ce);Ce=n(m7,"A",{id:!0,class:!0,href:!0});var bve=s(Ce);lo=n(bve,"SPAN",{});var Fve=s(lo);m(ge.$$.fragment,Fve),Fve.forEach(t),bve.forEach(t),Me=i(m7),Xo=n(m7,"SPAN",{});var eBr=s(Xo);Ii=r(eBr,"Auto Classes"),eBr.forEach(t),m7.forEach(t),qf=i(c),fa=n(c,"P",{});var WBe=s(fa);qi=r(WBe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(WBe,"CODE",{});var oBr=s(Ni);uC=r(oBr,"from_pretrained()"),oBr.forEach(t),Nf=r(WBe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),WBe.forEach(t),xe=i(c),co=n(c,"P",{});var bE=s(co);ji=r(bE,"Instantiating one of "),Gn=n(bE,"A",{href:!0});var rBr=s(Gn);bC=r(rBr,"AutoConfig"),rBr.forEach(t),On=r(bE,", "),Vn=n(bE,"A",{href:!0});var tBr=s(Vn);FC=r(tBr,"AutoModel"),tBr.forEach(t),Di=r(bE,`, and
`),Xn=n(bE,"A",{href:!0});var aBr=s(Xn);vC=r(aBr,"AutoTokenizer"),aBr.forEach(t),Gi=r(bE," will directly create a class of the relevant architecture. For instance"),bE.forEach(t),jf=i(c),m(Da.$$.fragment,c),fo=i(c),_e=n(c,"P",{});var HBe=s(_e);d9=r(HBe,"will create a model that is an instance of "),Oi=n(HBe,"A",{href:!0});var nBr=s(Oi);c9=r(nBr,"BertModel"),nBr.forEach(t),f9=r(HBe,"."),HBe.forEach(t),zo=i(c),Ga=n(c,"P",{});var UBe=s(Ga);m9=r(UBe,"There is one class of "),Df=n(UBe,"CODE",{});var sBr=s(Df);g9=r(sBr,"AutoModel"),sBr.forEach(t),aIe=r(UBe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),UBe.forEach(t),zSe=i(c),Vi=n(c,"H2",{class:!0});var JBe=s(Vi);Gf=n(JBe,"A",{id:!0,class:!0,href:!0});var lBr=s(Gf);VJ=n(lBr,"SPAN",{});var iBr=s(VJ);m(TC.$$.fragment,iBr),iBr.forEach(t),lBr.forEach(t),nIe=i(JBe),XJ=n(JBe,"SPAN",{});var dBr=s(XJ);sIe=r(dBr,"Extending the Auto Classes"),dBr.forEach(t),JBe.forEach(t),QSe=i(c),zn=n(c,"P",{});var JH=s(zn);lIe=r(JH,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),zJ=n(JH,"CODE",{});var cBr=s(zJ);iIe=r(cBr,"NewModel"),cBr.forEach(t),dIe=r(JH,", make sure you have a "),QJ=n(JH,"CODE",{});var fBr=s(QJ);cIe=r(fBr,"NewModelConfig"),fBr.forEach(t),fIe=r(JH,` then you can add those to the auto
classes like this:`),JH.forEach(t),WSe=i(c),m(MC.$$.fragment,c),HSe=i(c),h9=n(c,"P",{});var mBr=s(h9);mIe=r(mBr,"You will then be able to use the auto classes like you would usually do!"),mBr.forEach(t),USe=i(c),m(Of.$$.fragment,c),JSe=i(c),Xi=n(c,"H2",{class:!0});var YBe=s(Xi);Vf=n(YBe,"A",{id:!0,class:!0,href:!0});var gBr=s(Vf);WJ=n(gBr,"SPAN",{});var hBr=s(WJ);m(EC.$$.fragment,hBr),hBr.forEach(t),gBr.forEach(t),gIe=i(YBe),HJ=n(YBe,"SPAN",{});var pBr=s(HJ);hIe=r(pBr,"AutoConfig"),pBr.forEach(t),YBe.forEach(t),YSe=i(c),Qo=n(c,"DIV",{class:!0});var Os=s(Qo);m(CC.$$.fragment,Os),pIe=i(Os),wC=n(Os,"P",{});var KBe=s(wC);_Ie=r(KBe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),p9=n(KBe,"A",{href:!0});var _Br=s(p9);uIe=r(_Br,"from_pretrained()"),_Br.forEach(t),bIe=r(KBe," class method."),KBe.forEach(t),FIe=i(Os),AC=n(Os,"P",{});var ZBe=s(AC);vIe=r(ZBe,"This class cannot be instantiated directly using "),UJ=n(ZBe,"CODE",{});var uBr=s(UJ);TIe=r(uBr,"__init__()"),uBr.forEach(t),MIe=r(ZBe," (throws an error)."),ZBe.forEach(t),EIe=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(yC.$$.fragment,ga),CIe=i(ga),JJ=n(ga,"P",{});var bBr=s(JJ);wIe=r(bBr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),bBr.forEach(t),AIe=i(ga),zi=n(ga,"P",{});var YH=s(zi);yIe=r(YH,"The configuration class to instantiate is selected based on the "),YJ=n(YH,"CODE",{});var FBr=s(YJ);LIe=r(FBr,"model_type"),FBr.forEach(t),xIe=r(YH,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),KJ=n(YH,"CODE",{});var vBr=s(KJ);kIe=r(vBr,"pretrained_model_name_or_path"),vBr.forEach(t),SIe=r(YH,":"),YH.forEach(t),RIe=i(ga),F=n(ga,"UL",{});var v=s(F);Xf=n(v,"LI",{});var vve=s(Xf);ZJ=n(vve,"STRONG",{});var TBr=s(ZJ);BIe=r(TBr,"albert"),TBr.forEach(t),PIe=r(vve," \u2014 "),_9=n(vve,"A",{href:!0});var MBr=s(_9);$Ie=r(MBr,"AlbertConfig"),MBr.forEach(t),IIe=r(vve," (ALBERT model)"),vve.forEach(t),qIe=i(v),zf=n(v,"LI",{});var Tve=s(zf);eY=n(Tve,"STRONG",{});var EBr=s(eY);NIe=r(EBr,"bart"),EBr.forEach(t),jIe=r(Tve," \u2014 "),u9=n(Tve,"A",{href:!0});var CBr=s(u9);DIe=r(CBr,"BartConfig"),CBr.forEach(t),GIe=r(Tve," (BART model)"),Tve.forEach(t),OIe=i(v),Qf=n(v,"LI",{});var Mve=s(Qf);oY=n(Mve,"STRONG",{});var wBr=s(oY);VIe=r(wBr,"beit"),wBr.forEach(t),XIe=r(Mve," \u2014 "),b9=n(Mve,"A",{href:!0});var ABr=s(b9);zIe=r(ABr,"BeitConfig"),ABr.forEach(t),QIe=r(Mve," (BEiT model)"),Mve.forEach(t),WIe=i(v),Wf=n(v,"LI",{});var Eve=s(Wf);rY=n(Eve,"STRONG",{});var yBr=s(rY);HIe=r(yBr,"bert"),yBr.forEach(t),UIe=r(Eve," \u2014 "),F9=n(Eve,"A",{href:!0});var LBr=s(F9);JIe=r(LBr,"BertConfig"),LBr.forEach(t),YIe=r(Eve," (BERT model)"),Eve.forEach(t),KIe=i(v),Hf=n(v,"LI",{});var Cve=s(Hf);tY=n(Cve,"STRONG",{});var xBr=s(tY);ZIe=r(xBr,"bert-generation"),xBr.forEach(t),eqe=r(Cve," \u2014 "),v9=n(Cve,"A",{href:!0});var kBr=s(v9);oqe=r(kBr,"BertGenerationConfig"),kBr.forEach(t),rqe=r(Cve," (Bert Generation model)"),Cve.forEach(t),tqe=i(v),Uf=n(v,"LI",{});var wve=s(Uf);aY=n(wve,"STRONG",{});var SBr=s(aY);aqe=r(SBr,"big_bird"),SBr.forEach(t),nqe=r(wve," \u2014 "),T9=n(wve,"A",{href:!0});var RBr=s(T9);sqe=r(RBr,"BigBirdConfig"),RBr.forEach(t),lqe=r(wve," (BigBird model)"),wve.forEach(t),iqe=i(v),Jf=n(v,"LI",{});var Ave=s(Jf);nY=n(Ave,"STRONG",{});var BBr=s(nY);dqe=r(BBr,"bigbird_pegasus"),BBr.forEach(t),cqe=r(Ave," \u2014 "),M9=n(Ave,"A",{href:!0});var PBr=s(M9);fqe=r(PBr,"BigBirdPegasusConfig"),PBr.forEach(t),mqe=r(Ave," (BigBirdPegasus model)"),Ave.forEach(t),gqe=i(v),Yf=n(v,"LI",{});var yve=s(Yf);sY=n(yve,"STRONG",{});var $Br=s(sY);hqe=r($Br,"blenderbot"),$Br.forEach(t),pqe=r(yve," \u2014 "),E9=n(yve,"A",{href:!0});var IBr=s(E9);_qe=r(IBr,"BlenderbotConfig"),IBr.forEach(t),uqe=r(yve," (Blenderbot model)"),yve.forEach(t),bqe=i(v),Kf=n(v,"LI",{});var Lve=s(Kf);lY=n(Lve,"STRONG",{});var qBr=s(lY);Fqe=r(qBr,"blenderbot-small"),qBr.forEach(t),vqe=r(Lve," \u2014 "),C9=n(Lve,"A",{href:!0});var NBr=s(C9);Tqe=r(NBr,"BlenderbotSmallConfig"),NBr.forEach(t),Mqe=r(Lve," (BlenderbotSmall model)"),Lve.forEach(t),Eqe=i(v),Zf=n(v,"LI",{});var xve=s(Zf);iY=n(xve,"STRONG",{});var jBr=s(iY);Cqe=r(jBr,"camembert"),jBr.forEach(t),wqe=r(xve," \u2014 "),w9=n(xve,"A",{href:!0});var DBr=s(w9);Aqe=r(DBr,"CamembertConfig"),DBr.forEach(t),yqe=r(xve," (CamemBERT model)"),xve.forEach(t),Lqe=i(v),em=n(v,"LI",{});var kve=s(em);dY=n(kve,"STRONG",{});var GBr=s(dY);xqe=r(GBr,"canine"),GBr.forEach(t),kqe=r(kve," \u2014 "),A9=n(kve,"A",{href:!0});var OBr=s(A9);Sqe=r(OBr,"CanineConfig"),OBr.forEach(t),Rqe=r(kve," (Canine model)"),kve.forEach(t),Bqe=i(v),om=n(v,"LI",{});var Sve=s(om);cY=n(Sve,"STRONG",{});var VBr=s(cY);Pqe=r(VBr,"clip"),VBr.forEach(t),$qe=r(Sve," \u2014 "),y9=n(Sve,"A",{href:!0});var XBr=s(y9);Iqe=r(XBr,"CLIPConfig"),XBr.forEach(t),qqe=r(Sve," (CLIP model)"),Sve.forEach(t),Nqe=i(v),rm=n(v,"LI",{});var Rve=s(rm);fY=n(Rve,"STRONG",{});var zBr=s(fY);jqe=r(zBr,"convbert"),zBr.forEach(t),Dqe=r(Rve," \u2014 "),L9=n(Rve,"A",{href:!0});var QBr=s(L9);Gqe=r(QBr,"ConvBertConfig"),QBr.forEach(t),Oqe=r(Rve," (ConvBERT model)"),Rve.forEach(t),Vqe=i(v),tm=n(v,"LI",{});var Bve=s(tm);mY=n(Bve,"STRONG",{});var WBr=s(mY);Xqe=r(WBr,"convnext"),WBr.forEach(t),zqe=r(Bve," \u2014 "),x9=n(Bve,"A",{href:!0});var HBr=s(x9);Qqe=r(HBr,"ConvNextConfig"),HBr.forEach(t),Wqe=r(Bve," (ConvNext model)"),Bve.forEach(t),Hqe=i(v),am=n(v,"LI",{});var Pve=s(am);gY=n(Pve,"STRONG",{});var UBr=s(gY);Uqe=r(UBr,"ctrl"),UBr.forEach(t),Jqe=r(Pve," \u2014 "),k9=n(Pve,"A",{href:!0});var JBr=s(k9);Yqe=r(JBr,"CTRLConfig"),JBr.forEach(t),Kqe=r(Pve," (CTRL model)"),Pve.forEach(t),Zqe=i(v),nm=n(v,"LI",{});var $ve=s(nm);hY=n($ve,"STRONG",{});var YBr=s(hY);eNe=r(YBr,"data2vec-audio"),YBr.forEach(t),oNe=r($ve," \u2014 "),S9=n($ve,"A",{href:!0});var KBr=s(S9);rNe=r(KBr,"Data2VecAudioConfig"),KBr.forEach(t),tNe=r($ve," (Data2VecAudio model)"),$ve.forEach(t),aNe=i(v),sm=n(v,"LI",{});var Ive=s(sm);pY=n(Ive,"STRONG",{});var ZBr=s(pY);nNe=r(ZBr,"data2vec-text"),ZBr.forEach(t),sNe=r(Ive," \u2014 "),R9=n(Ive,"A",{href:!0});var ePr=s(R9);lNe=r(ePr,"Data2VecTextConfig"),ePr.forEach(t),iNe=r(Ive," (Data2VecText model)"),Ive.forEach(t),dNe=i(v),lm=n(v,"LI",{});var qve=s(lm);_Y=n(qve,"STRONG",{});var oPr=s(_Y);cNe=r(oPr,"deberta"),oPr.forEach(t),fNe=r(qve," \u2014 "),B9=n(qve,"A",{href:!0});var rPr=s(B9);mNe=r(rPr,"DebertaConfig"),rPr.forEach(t),gNe=r(qve," (DeBERTa model)"),qve.forEach(t),hNe=i(v),im=n(v,"LI",{});var Nve=s(im);uY=n(Nve,"STRONG",{});var tPr=s(uY);pNe=r(tPr,"deberta-v2"),tPr.forEach(t),_Ne=r(Nve," \u2014 "),P9=n(Nve,"A",{href:!0});var aPr=s(P9);uNe=r(aPr,"DebertaV2Config"),aPr.forEach(t),bNe=r(Nve," (DeBERTa-v2 model)"),Nve.forEach(t),FNe=i(v),dm=n(v,"LI",{});var jve=s(dm);bY=n(jve,"STRONG",{});var nPr=s(bY);vNe=r(nPr,"decision_transformer"),nPr.forEach(t),TNe=r(jve," \u2014 "),$9=n(jve,"A",{href:!0});var sPr=s($9);MNe=r(sPr,"DecisionTransformerConfig"),sPr.forEach(t),ENe=r(jve," (Decision Transformer model)"),jve.forEach(t),CNe=i(v),cm=n(v,"LI",{});var Dve=s(cm);FY=n(Dve,"STRONG",{});var lPr=s(FY);wNe=r(lPr,"deit"),lPr.forEach(t),ANe=r(Dve," \u2014 "),I9=n(Dve,"A",{href:!0});var iPr=s(I9);yNe=r(iPr,"DeiTConfig"),iPr.forEach(t),LNe=r(Dve," (DeiT model)"),Dve.forEach(t),xNe=i(v),fm=n(v,"LI",{});var Gve=s(fm);vY=n(Gve,"STRONG",{});var dPr=s(vY);kNe=r(dPr,"detr"),dPr.forEach(t),SNe=r(Gve," \u2014 "),q9=n(Gve,"A",{href:!0});var cPr=s(q9);RNe=r(cPr,"DetrConfig"),cPr.forEach(t),BNe=r(Gve," (DETR model)"),Gve.forEach(t),PNe=i(v),mm=n(v,"LI",{});var Ove=s(mm);TY=n(Ove,"STRONG",{});var fPr=s(TY);$Ne=r(fPr,"distilbert"),fPr.forEach(t),INe=r(Ove," \u2014 "),N9=n(Ove,"A",{href:!0});var mPr=s(N9);qNe=r(mPr,"DistilBertConfig"),mPr.forEach(t),NNe=r(Ove," (DistilBERT model)"),Ove.forEach(t),jNe=i(v),gm=n(v,"LI",{});var Vve=s(gm);MY=n(Vve,"STRONG",{});var gPr=s(MY);DNe=r(gPr,"dpr"),gPr.forEach(t),GNe=r(Vve," \u2014 "),j9=n(Vve,"A",{href:!0});var hPr=s(j9);ONe=r(hPr,"DPRConfig"),hPr.forEach(t),VNe=r(Vve," (DPR model)"),Vve.forEach(t),XNe=i(v),hm=n(v,"LI",{});var Xve=s(hm);EY=n(Xve,"STRONG",{});var pPr=s(EY);zNe=r(pPr,"dpt"),pPr.forEach(t),QNe=r(Xve," \u2014 "),D9=n(Xve,"A",{href:!0});var _Pr=s(D9);WNe=r(_Pr,"DPTConfig"),_Pr.forEach(t),HNe=r(Xve," (DPT model)"),Xve.forEach(t),UNe=i(v),pm=n(v,"LI",{});var zve=s(pm);CY=n(zve,"STRONG",{});var uPr=s(CY);JNe=r(uPr,"electra"),uPr.forEach(t),YNe=r(zve," \u2014 "),G9=n(zve,"A",{href:!0});var bPr=s(G9);KNe=r(bPr,"ElectraConfig"),bPr.forEach(t),ZNe=r(zve," (ELECTRA model)"),zve.forEach(t),eje=i(v),_m=n(v,"LI",{});var Qve=s(_m);wY=n(Qve,"STRONG",{});var FPr=s(wY);oje=r(FPr,"encoder-decoder"),FPr.forEach(t),rje=r(Qve," \u2014 "),O9=n(Qve,"A",{href:!0});var vPr=s(O9);tje=r(vPr,"EncoderDecoderConfig"),vPr.forEach(t),aje=r(Qve," (Encoder decoder model)"),Qve.forEach(t),nje=i(v),um=n(v,"LI",{});var Wve=s(um);AY=n(Wve,"STRONG",{});var TPr=s(AY);sje=r(TPr,"flaubert"),TPr.forEach(t),lje=r(Wve," \u2014 "),V9=n(Wve,"A",{href:!0});var MPr=s(V9);ije=r(MPr,"FlaubertConfig"),MPr.forEach(t),dje=r(Wve," (FlauBERT model)"),Wve.forEach(t),cje=i(v),bm=n(v,"LI",{});var Hve=s(bm);yY=n(Hve,"STRONG",{});var EPr=s(yY);fje=r(EPr,"fnet"),EPr.forEach(t),mje=r(Hve," \u2014 "),X9=n(Hve,"A",{href:!0});var CPr=s(X9);gje=r(CPr,"FNetConfig"),CPr.forEach(t),hje=r(Hve," (FNet model)"),Hve.forEach(t),pje=i(v),Fm=n(v,"LI",{});var Uve=s(Fm);LY=n(Uve,"STRONG",{});var wPr=s(LY);_je=r(wPr,"fsmt"),wPr.forEach(t),uje=r(Uve," \u2014 "),z9=n(Uve,"A",{href:!0});var APr=s(z9);bje=r(APr,"FSMTConfig"),APr.forEach(t),Fje=r(Uve," (FairSeq Machine-Translation model)"),Uve.forEach(t),vje=i(v),vm=n(v,"LI",{});var Jve=s(vm);xY=n(Jve,"STRONG",{});var yPr=s(xY);Tje=r(yPr,"funnel"),yPr.forEach(t),Mje=r(Jve," \u2014 "),Q9=n(Jve,"A",{href:!0});var LPr=s(Q9);Eje=r(LPr,"FunnelConfig"),LPr.forEach(t),Cje=r(Jve," (Funnel Transformer model)"),Jve.forEach(t),wje=i(v),Tm=n(v,"LI",{});var Yve=s(Tm);kY=n(Yve,"STRONG",{});var xPr=s(kY);Aje=r(xPr,"glpn"),xPr.forEach(t),yje=r(Yve," \u2014 "),W9=n(Yve,"A",{href:!0});var kPr=s(W9);Lje=r(kPr,"GLPNConfig"),kPr.forEach(t),xje=r(Yve," (GLPN model)"),Yve.forEach(t),kje=i(v),Mm=n(v,"LI",{});var Kve=s(Mm);SY=n(Kve,"STRONG",{});var SPr=s(SY);Sje=r(SPr,"gpt2"),SPr.forEach(t),Rje=r(Kve," \u2014 "),H9=n(Kve,"A",{href:!0});var RPr=s(H9);Bje=r(RPr,"GPT2Config"),RPr.forEach(t),Pje=r(Kve," (OpenAI GPT-2 model)"),Kve.forEach(t),$je=i(v),Em=n(v,"LI",{});var Zve=s(Em);RY=n(Zve,"STRONG",{});var BPr=s(RY);Ije=r(BPr,"gpt_neo"),BPr.forEach(t),qje=r(Zve," \u2014 "),U9=n(Zve,"A",{href:!0});var PPr=s(U9);Nje=r(PPr,"GPTNeoConfig"),PPr.forEach(t),jje=r(Zve," (GPT Neo model)"),Zve.forEach(t),Dje=i(v),Cm=n(v,"LI",{});var e6e=s(Cm);BY=n(e6e,"STRONG",{});var $Pr=s(BY);Gje=r($Pr,"gptj"),$Pr.forEach(t),Oje=r(e6e," \u2014 "),J9=n(e6e,"A",{href:!0});var IPr=s(J9);Vje=r(IPr,"GPTJConfig"),IPr.forEach(t),Xje=r(e6e," (GPT-J model)"),e6e.forEach(t),zje=i(v),wm=n(v,"LI",{});var o6e=s(wm);PY=n(o6e,"STRONG",{});var qPr=s(PY);Qje=r(qPr,"hubert"),qPr.forEach(t),Wje=r(o6e," \u2014 "),Y9=n(o6e,"A",{href:!0});var NPr=s(Y9);Hje=r(NPr,"HubertConfig"),NPr.forEach(t),Uje=r(o6e," (Hubert model)"),o6e.forEach(t),Jje=i(v),Am=n(v,"LI",{});var r6e=s(Am);$Y=n(r6e,"STRONG",{});var jPr=s($Y);Yje=r(jPr,"ibert"),jPr.forEach(t),Kje=r(r6e," \u2014 "),K9=n(r6e,"A",{href:!0});var DPr=s(K9);Zje=r(DPr,"IBertConfig"),DPr.forEach(t),eDe=r(r6e," (I-BERT model)"),r6e.forEach(t),oDe=i(v),ym=n(v,"LI",{});var t6e=s(ym);IY=n(t6e,"STRONG",{});var GPr=s(IY);rDe=r(GPr,"imagegpt"),GPr.forEach(t),tDe=r(t6e," \u2014 "),Z9=n(t6e,"A",{href:!0});var OPr=s(Z9);aDe=r(OPr,"ImageGPTConfig"),OPr.forEach(t),nDe=r(t6e," (ImageGPT model)"),t6e.forEach(t),sDe=i(v),Lm=n(v,"LI",{});var a6e=s(Lm);qY=n(a6e,"STRONG",{});var VPr=s(qY);lDe=r(VPr,"layoutlm"),VPr.forEach(t),iDe=r(a6e," \u2014 "),ex=n(a6e,"A",{href:!0});var XPr=s(ex);dDe=r(XPr,"LayoutLMConfig"),XPr.forEach(t),cDe=r(a6e," (LayoutLM model)"),a6e.forEach(t),fDe=i(v),xm=n(v,"LI",{});var n6e=s(xm);NY=n(n6e,"STRONG",{});var zPr=s(NY);mDe=r(zPr,"layoutlmv2"),zPr.forEach(t),gDe=r(n6e," \u2014 "),ox=n(n6e,"A",{href:!0});var QPr=s(ox);hDe=r(QPr,"LayoutLMv2Config"),QPr.forEach(t),pDe=r(n6e," (LayoutLMv2 model)"),n6e.forEach(t),_De=i(v),km=n(v,"LI",{});var s6e=s(km);jY=n(s6e,"STRONG",{});var WPr=s(jY);uDe=r(WPr,"led"),WPr.forEach(t),bDe=r(s6e," \u2014 "),rx=n(s6e,"A",{href:!0});var HPr=s(rx);FDe=r(HPr,"LEDConfig"),HPr.forEach(t),vDe=r(s6e," (LED model)"),s6e.forEach(t),TDe=i(v),Sm=n(v,"LI",{});var l6e=s(Sm);DY=n(l6e,"STRONG",{});var UPr=s(DY);MDe=r(UPr,"longformer"),UPr.forEach(t),EDe=r(l6e," \u2014 "),tx=n(l6e,"A",{href:!0});var JPr=s(tx);CDe=r(JPr,"LongformerConfig"),JPr.forEach(t),wDe=r(l6e," (Longformer model)"),l6e.forEach(t),ADe=i(v),Rm=n(v,"LI",{});var i6e=s(Rm);GY=n(i6e,"STRONG",{});var YPr=s(GY);yDe=r(YPr,"luke"),YPr.forEach(t),LDe=r(i6e," \u2014 "),ax=n(i6e,"A",{href:!0});var KPr=s(ax);xDe=r(KPr,"LukeConfig"),KPr.forEach(t),kDe=r(i6e," (LUKE model)"),i6e.forEach(t),SDe=i(v),Bm=n(v,"LI",{});var d6e=s(Bm);OY=n(d6e,"STRONG",{});var ZPr=s(OY);RDe=r(ZPr,"lxmert"),ZPr.forEach(t),BDe=r(d6e," \u2014 "),nx=n(d6e,"A",{href:!0});var e$r=s(nx);PDe=r(e$r,"LxmertConfig"),e$r.forEach(t),$De=r(d6e," (LXMERT model)"),d6e.forEach(t),IDe=i(v),Pm=n(v,"LI",{});var c6e=s(Pm);VY=n(c6e,"STRONG",{});var o$r=s(VY);qDe=r(o$r,"m2m_100"),o$r.forEach(t),NDe=r(c6e," \u2014 "),sx=n(c6e,"A",{href:!0});var r$r=s(sx);jDe=r(r$r,"M2M100Config"),r$r.forEach(t),DDe=r(c6e," (M2M100 model)"),c6e.forEach(t),GDe=i(v),$m=n(v,"LI",{});var f6e=s($m);XY=n(f6e,"STRONG",{});var t$r=s(XY);ODe=r(t$r,"marian"),t$r.forEach(t),VDe=r(f6e," \u2014 "),lx=n(f6e,"A",{href:!0});var a$r=s(lx);XDe=r(a$r,"MarianConfig"),a$r.forEach(t),zDe=r(f6e," (Marian model)"),f6e.forEach(t),QDe=i(v),Im=n(v,"LI",{});var m6e=s(Im);zY=n(m6e,"STRONG",{});var n$r=s(zY);WDe=r(n$r,"maskformer"),n$r.forEach(t),HDe=r(m6e," \u2014 "),ix=n(m6e,"A",{href:!0});var s$r=s(ix);UDe=r(s$r,"MaskFormerConfig"),s$r.forEach(t),JDe=r(m6e," (MaskFormer model)"),m6e.forEach(t),YDe=i(v),qm=n(v,"LI",{});var g6e=s(qm);QY=n(g6e,"STRONG",{});var l$r=s(QY);KDe=r(l$r,"mbart"),l$r.forEach(t),ZDe=r(g6e," \u2014 "),dx=n(g6e,"A",{href:!0});var i$r=s(dx);eGe=r(i$r,"MBartConfig"),i$r.forEach(t),oGe=r(g6e," (mBART model)"),g6e.forEach(t),rGe=i(v),Nm=n(v,"LI",{});var h6e=s(Nm);WY=n(h6e,"STRONG",{});var d$r=s(WY);tGe=r(d$r,"megatron-bert"),d$r.forEach(t),aGe=r(h6e," \u2014 "),cx=n(h6e,"A",{href:!0});var c$r=s(cx);nGe=r(c$r,"MegatronBertConfig"),c$r.forEach(t),sGe=r(h6e," (MegatronBert model)"),h6e.forEach(t),lGe=i(v),jm=n(v,"LI",{});var p6e=s(jm);HY=n(p6e,"STRONG",{});var f$r=s(HY);iGe=r(f$r,"mobilebert"),f$r.forEach(t),dGe=r(p6e," \u2014 "),fx=n(p6e,"A",{href:!0});var m$r=s(fx);cGe=r(m$r,"MobileBertConfig"),m$r.forEach(t),fGe=r(p6e," (MobileBERT model)"),p6e.forEach(t),mGe=i(v),Dm=n(v,"LI",{});var _6e=s(Dm);UY=n(_6e,"STRONG",{});var g$r=s(UY);gGe=r(g$r,"mpnet"),g$r.forEach(t),hGe=r(_6e," \u2014 "),mx=n(_6e,"A",{href:!0});var h$r=s(mx);pGe=r(h$r,"MPNetConfig"),h$r.forEach(t),_Ge=r(_6e," (MPNet model)"),_6e.forEach(t),uGe=i(v),Gm=n(v,"LI",{});var u6e=s(Gm);JY=n(u6e,"STRONG",{});var p$r=s(JY);bGe=r(p$r,"mt5"),p$r.forEach(t),FGe=r(u6e," \u2014 "),gx=n(u6e,"A",{href:!0});var _$r=s(gx);vGe=r(_$r,"MT5Config"),_$r.forEach(t),TGe=r(u6e," (mT5 model)"),u6e.forEach(t),MGe=i(v),Om=n(v,"LI",{});var b6e=s(Om);YY=n(b6e,"STRONG",{});var u$r=s(YY);EGe=r(u$r,"nystromformer"),u$r.forEach(t),CGe=r(b6e," \u2014 "),hx=n(b6e,"A",{href:!0});var b$r=s(hx);wGe=r(b$r,"NystromformerConfig"),b$r.forEach(t),AGe=r(b6e," (Nystromformer model)"),b6e.forEach(t),yGe=i(v),Vm=n(v,"LI",{});var F6e=s(Vm);KY=n(F6e,"STRONG",{});var F$r=s(KY);LGe=r(F$r,"openai-gpt"),F$r.forEach(t),xGe=r(F6e," \u2014 "),px=n(F6e,"A",{href:!0});var v$r=s(px);kGe=r(v$r,"OpenAIGPTConfig"),v$r.forEach(t),SGe=r(F6e," (OpenAI GPT model)"),F6e.forEach(t),RGe=i(v),Xm=n(v,"LI",{});var v6e=s(Xm);ZY=n(v6e,"STRONG",{});var T$r=s(ZY);BGe=r(T$r,"pegasus"),T$r.forEach(t),PGe=r(v6e," \u2014 "),_x=n(v6e,"A",{href:!0});var M$r=s(_x);$Ge=r(M$r,"PegasusConfig"),M$r.forEach(t),IGe=r(v6e," (Pegasus model)"),v6e.forEach(t),qGe=i(v),zm=n(v,"LI",{});var T6e=s(zm);eK=n(T6e,"STRONG",{});var E$r=s(eK);NGe=r(E$r,"perceiver"),E$r.forEach(t),jGe=r(T6e," \u2014 "),ux=n(T6e,"A",{href:!0});var C$r=s(ux);DGe=r(C$r,"PerceiverConfig"),C$r.forEach(t),GGe=r(T6e," (Perceiver model)"),T6e.forEach(t),OGe=i(v),Qm=n(v,"LI",{});var M6e=s(Qm);oK=n(M6e,"STRONG",{});var w$r=s(oK);VGe=r(w$r,"plbart"),w$r.forEach(t),XGe=r(M6e," \u2014 "),bx=n(M6e,"A",{href:!0});var A$r=s(bx);zGe=r(A$r,"PLBartConfig"),A$r.forEach(t),QGe=r(M6e," (PLBart model)"),M6e.forEach(t),WGe=i(v),Wm=n(v,"LI",{});var E6e=s(Wm);rK=n(E6e,"STRONG",{});var y$r=s(rK);HGe=r(y$r,"poolformer"),y$r.forEach(t),UGe=r(E6e," \u2014 "),Fx=n(E6e,"A",{href:!0});var L$r=s(Fx);JGe=r(L$r,"PoolFormerConfig"),L$r.forEach(t),YGe=r(E6e," (PoolFormer model)"),E6e.forEach(t),KGe=i(v),Hm=n(v,"LI",{});var C6e=s(Hm);tK=n(C6e,"STRONG",{});var x$r=s(tK);ZGe=r(x$r,"prophetnet"),x$r.forEach(t),eOe=r(C6e," \u2014 "),vx=n(C6e,"A",{href:!0});var k$r=s(vx);oOe=r(k$r,"ProphetNetConfig"),k$r.forEach(t),rOe=r(C6e," (ProphetNet model)"),C6e.forEach(t),tOe=i(v),Um=n(v,"LI",{});var w6e=s(Um);aK=n(w6e,"STRONG",{});var S$r=s(aK);aOe=r(S$r,"qdqbert"),S$r.forEach(t),nOe=r(w6e," \u2014 "),Tx=n(w6e,"A",{href:!0});var R$r=s(Tx);sOe=r(R$r,"QDQBertConfig"),R$r.forEach(t),lOe=r(w6e," (QDQBert model)"),w6e.forEach(t),iOe=i(v),Jm=n(v,"LI",{});var A6e=s(Jm);nK=n(A6e,"STRONG",{});var B$r=s(nK);dOe=r(B$r,"rag"),B$r.forEach(t),cOe=r(A6e," \u2014 "),Mx=n(A6e,"A",{href:!0});var P$r=s(Mx);fOe=r(P$r,"RagConfig"),P$r.forEach(t),mOe=r(A6e," (RAG model)"),A6e.forEach(t),gOe=i(v),Ym=n(v,"LI",{});var y6e=s(Ym);sK=n(y6e,"STRONG",{});var $$r=s(sK);hOe=r($$r,"realm"),$$r.forEach(t),pOe=r(y6e," \u2014 "),Ex=n(y6e,"A",{href:!0});var I$r=s(Ex);_Oe=r(I$r,"RealmConfig"),I$r.forEach(t),uOe=r(y6e," (Realm model)"),y6e.forEach(t),bOe=i(v),Km=n(v,"LI",{});var L6e=s(Km);lK=n(L6e,"STRONG",{});var q$r=s(lK);FOe=r(q$r,"reformer"),q$r.forEach(t),vOe=r(L6e," \u2014 "),Cx=n(L6e,"A",{href:!0});var N$r=s(Cx);TOe=r(N$r,"ReformerConfig"),N$r.forEach(t),MOe=r(L6e," (Reformer model)"),L6e.forEach(t),EOe=i(v),Zm=n(v,"LI",{});var x6e=s(Zm);iK=n(x6e,"STRONG",{});var j$r=s(iK);COe=r(j$r,"rembert"),j$r.forEach(t),wOe=r(x6e," \u2014 "),wx=n(x6e,"A",{href:!0});var D$r=s(wx);AOe=r(D$r,"RemBertConfig"),D$r.forEach(t),yOe=r(x6e," (RemBERT model)"),x6e.forEach(t),LOe=i(v),eg=n(v,"LI",{});var k6e=s(eg);dK=n(k6e,"STRONG",{});var G$r=s(dK);xOe=r(G$r,"resnet"),G$r.forEach(t),kOe=r(k6e," \u2014 "),Ax=n(k6e,"A",{href:!0});var O$r=s(Ax);SOe=r(O$r,"ResNetConfig"),O$r.forEach(t),ROe=r(k6e," (ResNet model)"),k6e.forEach(t),BOe=i(v),og=n(v,"LI",{});var S6e=s(og);cK=n(S6e,"STRONG",{});var V$r=s(cK);POe=r(V$r,"retribert"),V$r.forEach(t),$Oe=r(S6e," \u2014 "),yx=n(S6e,"A",{href:!0});var X$r=s(yx);IOe=r(X$r,"RetriBertConfig"),X$r.forEach(t),qOe=r(S6e," (RetriBERT model)"),S6e.forEach(t),NOe=i(v),rg=n(v,"LI",{});var R6e=s(rg);fK=n(R6e,"STRONG",{});var z$r=s(fK);jOe=r(z$r,"roberta"),z$r.forEach(t),DOe=r(R6e," \u2014 "),Lx=n(R6e,"A",{href:!0});var Q$r=s(Lx);GOe=r(Q$r,"RobertaConfig"),Q$r.forEach(t),OOe=r(R6e," (RoBERTa model)"),R6e.forEach(t),VOe=i(v),tg=n(v,"LI",{});var B6e=s(tg);mK=n(B6e,"STRONG",{});var W$r=s(mK);XOe=r(W$r,"roformer"),W$r.forEach(t),zOe=r(B6e," \u2014 "),xx=n(B6e,"A",{href:!0});var H$r=s(xx);QOe=r(H$r,"RoFormerConfig"),H$r.forEach(t),WOe=r(B6e," (RoFormer model)"),B6e.forEach(t),HOe=i(v),ag=n(v,"LI",{});var P6e=s(ag);gK=n(P6e,"STRONG",{});var U$r=s(gK);UOe=r(U$r,"segformer"),U$r.forEach(t),JOe=r(P6e," \u2014 "),kx=n(P6e,"A",{href:!0});var J$r=s(kx);YOe=r(J$r,"SegformerConfig"),J$r.forEach(t),KOe=r(P6e," (SegFormer model)"),P6e.forEach(t),ZOe=i(v),ng=n(v,"LI",{});var $6e=s(ng);hK=n($6e,"STRONG",{});var Y$r=s(hK);eVe=r(Y$r,"sew"),Y$r.forEach(t),oVe=r($6e," \u2014 "),Sx=n($6e,"A",{href:!0});var K$r=s(Sx);rVe=r(K$r,"SEWConfig"),K$r.forEach(t),tVe=r($6e," (SEW model)"),$6e.forEach(t),aVe=i(v),sg=n(v,"LI",{});var I6e=s(sg);pK=n(I6e,"STRONG",{});var Z$r=s(pK);nVe=r(Z$r,"sew-d"),Z$r.forEach(t),sVe=r(I6e," \u2014 "),Rx=n(I6e,"A",{href:!0});var eIr=s(Rx);lVe=r(eIr,"SEWDConfig"),eIr.forEach(t),iVe=r(I6e," (SEW-D model)"),I6e.forEach(t),dVe=i(v),lg=n(v,"LI",{});var q6e=s(lg);_K=n(q6e,"STRONG",{});var oIr=s(_K);cVe=r(oIr,"speech-encoder-decoder"),oIr.forEach(t),fVe=r(q6e," \u2014 "),Bx=n(q6e,"A",{href:!0});var rIr=s(Bx);mVe=r(rIr,"SpeechEncoderDecoderConfig"),rIr.forEach(t),gVe=r(q6e," (Speech Encoder decoder model)"),q6e.forEach(t),hVe=i(v),ig=n(v,"LI",{});var N6e=s(ig);uK=n(N6e,"STRONG",{});var tIr=s(uK);pVe=r(tIr,"speech_to_text"),tIr.forEach(t),_Ve=r(N6e," \u2014 "),Px=n(N6e,"A",{href:!0});var aIr=s(Px);uVe=r(aIr,"Speech2TextConfig"),aIr.forEach(t),bVe=r(N6e," (Speech2Text model)"),N6e.forEach(t),FVe=i(v),dg=n(v,"LI",{});var j6e=s(dg);bK=n(j6e,"STRONG",{});var nIr=s(bK);vVe=r(nIr,"speech_to_text_2"),nIr.forEach(t),TVe=r(j6e," \u2014 "),$x=n(j6e,"A",{href:!0});var sIr=s($x);MVe=r(sIr,"Speech2Text2Config"),sIr.forEach(t),EVe=r(j6e," (Speech2Text2 model)"),j6e.forEach(t),CVe=i(v),cg=n(v,"LI",{});var D6e=s(cg);FK=n(D6e,"STRONG",{});var lIr=s(FK);wVe=r(lIr,"splinter"),lIr.forEach(t),AVe=r(D6e," \u2014 "),Ix=n(D6e,"A",{href:!0});var iIr=s(Ix);yVe=r(iIr,"SplinterConfig"),iIr.forEach(t),LVe=r(D6e," (Splinter model)"),D6e.forEach(t),xVe=i(v),fg=n(v,"LI",{});var G6e=s(fg);vK=n(G6e,"STRONG",{});var dIr=s(vK);kVe=r(dIr,"squeezebert"),dIr.forEach(t),SVe=r(G6e," \u2014 "),qx=n(G6e,"A",{href:!0});var cIr=s(qx);RVe=r(cIr,"SqueezeBertConfig"),cIr.forEach(t),BVe=r(G6e," (SqueezeBERT model)"),G6e.forEach(t),PVe=i(v),mg=n(v,"LI",{});var O6e=s(mg);TK=n(O6e,"STRONG",{});var fIr=s(TK);$Ve=r(fIr,"swin"),fIr.forEach(t),IVe=r(O6e," \u2014 "),Nx=n(O6e,"A",{href:!0});var mIr=s(Nx);qVe=r(mIr,"SwinConfig"),mIr.forEach(t),NVe=r(O6e," (Swin model)"),O6e.forEach(t),jVe=i(v),gg=n(v,"LI",{});var V6e=s(gg);MK=n(V6e,"STRONG",{});var gIr=s(MK);DVe=r(gIr,"t5"),gIr.forEach(t),GVe=r(V6e," \u2014 "),jx=n(V6e,"A",{href:!0});var hIr=s(jx);OVe=r(hIr,"T5Config"),hIr.forEach(t),VVe=r(V6e," (T5 model)"),V6e.forEach(t),XVe=i(v),hg=n(v,"LI",{});var X6e=s(hg);EK=n(X6e,"STRONG",{});var pIr=s(EK);zVe=r(pIr,"tapas"),pIr.forEach(t),QVe=r(X6e," \u2014 "),Dx=n(X6e,"A",{href:!0});var _Ir=s(Dx);WVe=r(_Ir,"TapasConfig"),_Ir.forEach(t),HVe=r(X6e," (TAPAS model)"),X6e.forEach(t),UVe=i(v),pg=n(v,"LI",{});var z6e=s(pg);CK=n(z6e,"STRONG",{});var uIr=s(CK);JVe=r(uIr,"transfo-xl"),uIr.forEach(t),YVe=r(z6e," \u2014 "),Gx=n(z6e,"A",{href:!0});var bIr=s(Gx);KVe=r(bIr,"TransfoXLConfig"),bIr.forEach(t),ZVe=r(z6e," (Transformer-XL model)"),z6e.forEach(t),eXe=i(v),_g=n(v,"LI",{});var Q6e=s(_g);wK=n(Q6e,"STRONG",{});var FIr=s(wK);oXe=r(FIr,"trocr"),FIr.forEach(t),rXe=r(Q6e," \u2014 "),Ox=n(Q6e,"A",{href:!0});var vIr=s(Ox);tXe=r(vIr,"TrOCRConfig"),vIr.forEach(t),aXe=r(Q6e," (TrOCR model)"),Q6e.forEach(t),nXe=i(v),ug=n(v,"LI",{});var W6e=s(ug);AK=n(W6e,"STRONG",{});var TIr=s(AK);sXe=r(TIr,"unispeech"),TIr.forEach(t),lXe=r(W6e," \u2014 "),Vx=n(W6e,"A",{href:!0});var MIr=s(Vx);iXe=r(MIr,"UniSpeechConfig"),MIr.forEach(t),dXe=r(W6e," (UniSpeech model)"),W6e.forEach(t),cXe=i(v),bg=n(v,"LI",{});var H6e=s(bg);yK=n(H6e,"STRONG",{});var EIr=s(yK);fXe=r(EIr,"unispeech-sat"),EIr.forEach(t),mXe=r(H6e," \u2014 "),Xx=n(H6e,"A",{href:!0});var CIr=s(Xx);gXe=r(CIr,"UniSpeechSatConfig"),CIr.forEach(t),hXe=r(H6e," (UniSpeechSat model)"),H6e.forEach(t),pXe=i(v),Fg=n(v,"LI",{});var U6e=s(Fg);LK=n(U6e,"STRONG",{});var wIr=s(LK);_Xe=r(wIr,"van"),wIr.forEach(t),uXe=r(U6e," \u2014 "),zx=n(U6e,"A",{href:!0});var AIr=s(zx);bXe=r(AIr,"VanConfig"),AIr.forEach(t),FXe=r(U6e," (VAN model)"),U6e.forEach(t),vXe=i(v),vg=n(v,"LI",{});var J6e=s(vg);xK=n(J6e,"STRONG",{});var yIr=s(xK);TXe=r(yIr,"vilt"),yIr.forEach(t),MXe=r(J6e," \u2014 "),Qx=n(J6e,"A",{href:!0});var LIr=s(Qx);EXe=r(LIr,"ViltConfig"),LIr.forEach(t),CXe=r(J6e," (ViLT model)"),J6e.forEach(t),wXe=i(v),Tg=n(v,"LI",{});var Y6e=s(Tg);kK=n(Y6e,"STRONG",{});var xIr=s(kK);AXe=r(xIr,"vision-encoder-decoder"),xIr.forEach(t),yXe=r(Y6e," \u2014 "),Wx=n(Y6e,"A",{href:!0});var kIr=s(Wx);LXe=r(kIr,"VisionEncoderDecoderConfig"),kIr.forEach(t),xXe=r(Y6e," (Vision Encoder decoder model)"),Y6e.forEach(t),kXe=i(v),Mg=n(v,"LI",{});var K6e=s(Mg);SK=n(K6e,"STRONG",{});var SIr=s(SK);SXe=r(SIr,"vision-text-dual-encoder"),SIr.forEach(t),RXe=r(K6e," \u2014 "),Hx=n(K6e,"A",{href:!0});var RIr=s(Hx);BXe=r(RIr,"VisionTextDualEncoderConfig"),RIr.forEach(t),PXe=r(K6e," (VisionTextDualEncoder model)"),K6e.forEach(t),$Xe=i(v),Eg=n(v,"LI",{});var Z6e=s(Eg);RK=n(Z6e,"STRONG",{});var BIr=s(RK);IXe=r(BIr,"visual_bert"),BIr.forEach(t),qXe=r(Z6e," \u2014 "),Ux=n(Z6e,"A",{href:!0});var PIr=s(Ux);NXe=r(PIr,"VisualBertConfig"),PIr.forEach(t),jXe=r(Z6e," (VisualBert model)"),Z6e.forEach(t),DXe=i(v),Cg=n(v,"LI",{});var eTe=s(Cg);BK=n(eTe,"STRONG",{});var $Ir=s(BK);GXe=r($Ir,"vit"),$Ir.forEach(t),OXe=r(eTe," \u2014 "),Jx=n(eTe,"A",{href:!0});var IIr=s(Jx);VXe=r(IIr,"ViTConfig"),IIr.forEach(t),XXe=r(eTe," (ViT model)"),eTe.forEach(t),zXe=i(v),wg=n(v,"LI",{});var oTe=s(wg);PK=n(oTe,"STRONG",{});var qIr=s(PK);QXe=r(qIr,"vit_mae"),qIr.forEach(t),WXe=r(oTe," \u2014 "),Yx=n(oTe,"A",{href:!0});var NIr=s(Yx);HXe=r(NIr,"ViTMAEConfig"),NIr.forEach(t),UXe=r(oTe," (ViTMAE model)"),oTe.forEach(t),JXe=i(v),Ag=n(v,"LI",{});var rTe=s(Ag);$K=n(rTe,"STRONG",{});var jIr=s($K);YXe=r(jIr,"wav2vec2"),jIr.forEach(t),KXe=r(rTe," \u2014 "),Kx=n(rTe,"A",{href:!0});var DIr=s(Kx);ZXe=r(DIr,"Wav2Vec2Config"),DIr.forEach(t),eze=r(rTe," (Wav2Vec2 model)"),rTe.forEach(t),oze=i(v),yg=n(v,"LI",{});var tTe=s(yg);IK=n(tTe,"STRONG",{});var GIr=s(IK);rze=r(GIr,"wavlm"),GIr.forEach(t),tze=r(tTe," \u2014 "),Zx=n(tTe,"A",{href:!0});var OIr=s(Zx);aze=r(OIr,"WavLMConfig"),OIr.forEach(t),nze=r(tTe," (WavLM model)"),tTe.forEach(t),sze=i(v),Lg=n(v,"LI",{});var aTe=s(Lg);qK=n(aTe,"STRONG",{});var VIr=s(qK);lze=r(VIr,"xglm"),VIr.forEach(t),ize=r(aTe," \u2014 "),ek=n(aTe,"A",{href:!0});var XIr=s(ek);dze=r(XIr,"XGLMConfig"),XIr.forEach(t),cze=r(aTe," (XGLM model)"),aTe.forEach(t),fze=i(v),xg=n(v,"LI",{});var nTe=s(xg);NK=n(nTe,"STRONG",{});var zIr=s(NK);mze=r(zIr,"xlm"),zIr.forEach(t),gze=r(nTe," \u2014 "),ok=n(nTe,"A",{href:!0});var QIr=s(ok);hze=r(QIr,"XLMConfig"),QIr.forEach(t),pze=r(nTe," (XLM model)"),nTe.forEach(t),_ze=i(v),kg=n(v,"LI",{});var sTe=s(kg);jK=n(sTe,"STRONG",{});var WIr=s(jK);uze=r(WIr,"xlm-prophetnet"),WIr.forEach(t),bze=r(sTe," \u2014 "),rk=n(sTe,"A",{href:!0});var HIr=s(rk);Fze=r(HIr,"XLMProphetNetConfig"),HIr.forEach(t),vze=r(sTe," (XLMProphetNet model)"),sTe.forEach(t),Tze=i(v),Sg=n(v,"LI",{});var lTe=s(Sg);DK=n(lTe,"STRONG",{});var UIr=s(DK);Mze=r(UIr,"xlm-roberta"),UIr.forEach(t),Eze=r(lTe," \u2014 "),tk=n(lTe,"A",{href:!0});var JIr=s(tk);Cze=r(JIr,"XLMRobertaConfig"),JIr.forEach(t),wze=r(lTe," (XLM-RoBERTa model)"),lTe.forEach(t),Aze=i(v),Rg=n(v,"LI",{});var iTe=s(Rg);GK=n(iTe,"STRONG",{});var YIr=s(GK);yze=r(YIr,"xlm-roberta-xl"),YIr.forEach(t),Lze=r(iTe," \u2014 "),ak=n(iTe,"A",{href:!0});var KIr=s(ak);xze=r(KIr,"XLMRobertaXLConfig"),KIr.forEach(t),kze=r(iTe," (XLM-RoBERTa-XL model)"),iTe.forEach(t),Sze=i(v),Bg=n(v,"LI",{});var dTe=s(Bg);OK=n(dTe,"STRONG",{});var ZIr=s(OK);Rze=r(ZIr,"xlnet"),ZIr.forEach(t),Bze=r(dTe," \u2014 "),nk=n(dTe,"A",{href:!0});var eqr=s(nk);Pze=r(eqr,"XLNetConfig"),eqr.forEach(t),$ze=r(dTe," (XLNet model)"),dTe.forEach(t),Ize=i(v),Pg=n(v,"LI",{});var cTe=s(Pg);VK=n(cTe,"STRONG",{});var oqr=s(VK);qze=r(oqr,"yoso"),oqr.forEach(t),Nze=r(cTe," \u2014 "),sk=n(cTe,"A",{href:!0});var rqr=s(sk);jze=r(rqr,"YosoConfig"),rqr.forEach(t),Dze=r(cTe," (YOSO model)"),cTe.forEach(t),v.forEach(t),Gze=i(ga),XK=n(ga,"P",{});var tqr=s(XK);Oze=r(tqr,"Examples:"),tqr.forEach(t),Vze=i(ga),m(LC.$$.fragment,ga),ga.forEach(t),Xze=i(Os),$g=n(Os,"DIV",{class:!0});var ePe=s($g);m(xC.$$.fragment,ePe),zze=i(ePe),zK=n(ePe,"P",{});var aqr=s(zK);Qze=r(aqr,"Register a new configuration for this class."),aqr.forEach(t),ePe.forEach(t),Os.forEach(t),KSe=i(c),Qi=n(c,"H2",{class:!0});var oPe=s(Qi);Ig=n(oPe,"A",{id:!0,class:!0,href:!0});var nqr=s(Ig);QK=n(nqr,"SPAN",{});var sqr=s(QK);m(kC.$$.fragment,sqr),sqr.forEach(t),nqr.forEach(t),Wze=i(oPe),WK=n(oPe,"SPAN",{});var lqr=s(WK);Hze=r(lqr,"AutoTokenizer"),lqr.forEach(t),oPe.forEach(t),ZSe=i(c),Wo=n(c,"DIV",{class:!0});var Vs=s(Wo);m(SC.$$.fragment,Vs),Uze=i(Vs),RC=n(Vs,"P",{});var rPe=s(RC);Jze=r(rPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),lk=n(rPe,"A",{href:!0});var iqr=s(lk);Yze=r(iqr,"AutoTokenizer.from_pretrained()"),iqr.forEach(t),Kze=r(rPe," class method."),rPe.forEach(t),Zze=i(Vs),BC=n(Vs,"P",{});var tPe=s(BC);eQe=r(tPe,"This class cannot be instantiated directly using "),HK=n(tPe,"CODE",{});var dqr=s(HK);oQe=r(dqr,"__init__()"),dqr.forEach(t),rQe=r(tPe," (throws an error)."),tPe.forEach(t),tQe=i(Vs),go=n(Vs,"DIV",{class:!0});var ha=s(go);m(PC.$$.fragment,ha),aQe=i(ha),UK=n(ha,"P",{});var cqr=s(UK);nQe=r(cqr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),cqr.forEach(t),sQe=i(ha),Oa=n(ha,"P",{});var FE=s(Oa);lQe=r(FE,"The tokenizer class to instantiate is selected based on the "),JK=n(FE,"CODE",{});var fqr=s(JK);iQe=r(fqr,"model_type"),fqr.forEach(t),dQe=r(FE,` property of the config object (either
passed as an argument or loaded from `),YK=n(FE,"CODE",{});var mqr=s(YK);cQe=r(mqr,"pretrained_model_name_or_path"),mqr.forEach(t),fQe=r(FE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KK=n(FE,"CODE",{});var gqr=s(KK);mQe=r(gqr,"pretrained_model_name_or_path"),gqr.forEach(t),gQe=r(FE,":"),FE.forEach(t),hQe=i(ha),C=n(ha,"UL",{});var w=s(C);Qn=n(w,"LI",{});var g7=s(Qn);ZK=n(g7,"STRONG",{});var hqr=s(ZK);pQe=r(hqr,"albert"),hqr.forEach(t),_Qe=r(g7," \u2014 "),ik=n(g7,"A",{href:!0});var pqr=s(ik);uQe=r(pqr,"AlbertTokenizer"),pqr.forEach(t),bQe=r(g7," or "),dk=n(g7,"A",{href:!0});var _qr=s(dk);FQe=r(_qr,"AlbertTokenizerFast"),_qr.forEach(t),vQe=r(g7," (ALBERT model)"),g7.forEach(t),TQe=i(w),Wn=n(w,"LI",{});var h7=s(Wn);eZ=n(h7,"STRONG",{});var uqr=s(eZ);MQe=r(uqr,"bart"),uqr.forEach(t),EQe=r(h7," \u2014 "),ck=n(h7,"A",{href:!0});var bqr=s(ck);CQe=r(bqr,"BartTokenizer"),bqr.forEach(t),wQe=r(h7," or "),fk=n(h7,"A",{href:!0});var Fqr=s(fk);AQe=r(Fqr,"BartTokenizerFast"),Fqr.forEach(t),yQe=r(h7," (BART model)"),h7.forEach(t),LQe=i(w),Hn=n(w,"LI",{});var p7=s(Hn);oZ=n(p7,"STRONG",{});var vqr=s(oZ);xQe=r(vqr,"barthez"),vqr.forEach(t),kQe=r(p7," \u2014 "),mk=n(p7,"A",{href:!0});var Tqr=s(mk);SQe=r(Tqr,"BarthezTokenizer"),Tqr.forEach(t),RQe=r(p7," or "),gk=n(p7,"A",{href:!0});var Mqr=s(gk);BQe=r(Mqr,"BarthezTokenizerFast"),Mqr.forEach(t),PQe=r(p7," (BARThez model)"),p7.forEach(t),$Qe=i(w),qg=n(w,"LI",{});var fTe=s(qg);rZ=n(fTe,"STRONG",{});var Eqr=s(rZ);IQe=r(Eqr,"bartpho"),Eqr.forEach(t),qQe=r(fTe," \u2014 "),hk=n(fTe,"A",{href:!0});var Cqr=s(hk);NQe=r(Cqr,"BartphoTokenizer"),Cqr.forEach(t),jQe=r(fTe," (BARTpho model)"),fTe.forEach(t),DQe=i(w),Un=n(w,"LI",{});var _7=s(Un);tZ=n(_7,"STRONG",{});var wqr=s(tZ);GQe=r(wqr,"bert"),wqr.forEach(t),OQe=r(_7," \u2014 "),pk=n(_7,"A",{href:!0});var Aqr=s(pk);VQe=r(Aqr,"BertTokenizer"),Aqr.forEach(t),XQe=r(_7," or "),_k=n(_7,"A",{href:!0});var yqr=s(_k);zQe=r(yqr,"BertTokenizerFast"),yqr.forEach(t),QQe=r(_7," (BERT model)"),_7.forEach(t),WQe=i(w),Ng=n(w,"LI",{});var mTe=s(Ng);aZ=n(mTe,"STRONG",{});var Lqr=s(aZ);HQe=r(Lqr,"bert-generation"),Lqr.forEach(t),UQe=r(mTe," \u2014 "),uk=n(mTe,"A",{href:!0});var xqr=s(uk);JQe=r(xqr,"BertGenerationTokenizer"),xqr.forEach(t),YQe=r(mTe," (Bert Generation model)"),mTe.forEach(t),KQe=i(w),jg=n(w,"LI",{});var gTe=s(jg);nZ=n(gTe,"STRONG",{});var kqr=s(nZ);ZQe=r(kqr,"bert-japanese"),kqr.forEach(t),eWe=r(gTe," \u2014 "),bk=n(gTe,"A",{href:!0});var Sqr=s(bk);oWe=r(Sqr,"BertJapaneseTokenizer"),Sqr.forEach(t),rWe=r(gTe," (BertJapanese model)"),gTe.forEach(t),tWe=i(w),Dg=n(w,"LI",{});var hTe=s(Dg);sZ=n(hTe,"STRONG",{});var Rqr=s(sZ);aWe=r(Rqr,"bertweet"),Rqr.forEach(t),nWe=r(hTe," \u2014 "),Fk=n(hTe,"A",{href:!0});var Bqr=s(Fk);sWe=r(Bqr,"BertweetTokenizer"),Bqr.forEach(t),lWe=r(hTe," (Bertweet model)"),hTe.forEach(t),iWe=i(w),Jn=n(w,"LI",{});var u7=s(Jn);lZ=n(u7,"STRONG",{});var Pqr=s(lZ);dWe=r(Pqr,"big_bird"),Pqr.forEach(t),cWe=r(u7," \u2014 "),vk=n(u7,"A",{href:!0});var $qr=s(vk);fWe=r($qr,"BigBirdTokenizer"),$qr.forEach(t),mWe=r(u7," or "),Tk=n(u7,"A",{href:!0});var Iqr=s(Tk);gWe=r(Iqr,"BigBirdTokenizerFast"),Iqr.forEach(t),hWe=r(u7," (BigBird model)"),u7.forEach(t),pWe=i(w),Yn=n(w,"LI",{});var b7=s(Yn);iZ=n(b7,"STRONG",{});var qqr=s(iZ);_We=r(qqr,"bigbird_pegasus"),qqr.forEach(t),uWe=r(b7," \u2014 "),Mk=n(b7,"A",{href:!0});var Nqr=s(Mk);bWe=r(Nqr,"PegasusTokenizer"),Nqr.forEach(t),FWe=r(b7," or "),Ek=n(b7,"A",{href:!0});var jqr=s(Ek);vWe=r(jqr,"PegasusTokenizerFast"),jqr.forEach(t),TWe=r(b7," (BigBirdPegasus model)"),b7.forEach(t),MWe=i(w),Kn=n(w,"LI",{});var F7=s(Kn);dZ=n(F7,"STRONG",{});var Dqr=s(dZ);EWe=r(Dqr,"blenderbot"),Dqr.forEach(t),CWe=r(F7," \u2014 "),Ck=n(F7,"A",{href:!0});var Gqr=s(Ck);wWe=r(Gqr,"BlenderbotTokenizer"),Gqr.forEach(t),AWe=r(F7," or "),wk=n(F7,"A",{href:!0});var Oqr=s(wk);yWe=r(Oqr,"BlenderbotTokenizerFast"),Oqr.forEach(t),LWe=r(F7," (Blenderbot model)"),F7.forEach(t),xWe=i(w),Gg=n(w,"LI",{});var pTe=s(Gg);cZ=n(pTe,"STRONG",{});var Vqr=s(cZ);kWe=r(Vqr,"blenderbot-small"),Vqr.forEach(t),SWe=r(pTe," \u2014 "),Ak=n(pTe,"A",{href:!0});var Xqr=s(Ak);RWe=r(Xqr,"BlenderbotSmallTokenizer"),Xqr.forEach(t),BWe=r(pTe," (BlenderbotSmall model)"),pTe.forEach(t),PWe=i(w),Og=n(w,"LI",{});var _Te=s(Og);fZ=n(_Te,"STRONG",{});var zqr=s(fZ);$We=r(zqr,"byt5"),zqr.forEach(t),IWe=r(_Te," \u2014 "),yk=n(_Te,"A",{href:!0});var Qqr=s(yk);qWe=r(Qqr,"ByT5Tokenizer"),Qqr.forEach(t),NWe=r(_Te," (ByT5 model)"),_Te.forEach(t),jWe=i(w),Zn=n(w,"LI",{});var v7=s(Zn);mZ=n(v7,"STRONG",{});var Wqr=s(mZ);DWe=r(Wqr,"camembert"),Wqr.forEach(t),GWe=r(v7," \u2014 "),Lk=n(v7,"A",{href:!0});var Hqr=s(Lk);OWe=r(Hqr,"CamembertTokenizer"),Hqr.forEach(t),VWe=r(v7," or "),xk=n(v7,"A",{href:!0});var Uqr=s(xk);XWe=r(Uqr,"CamembertTokenizerFast"),Uqr.forEach(t),zWe=r(v7," (CamemBERT model)"),v7.forEach(t),QWe=i(w),Vg=n(w,"LI",{});var uTe=s(Vg);gZ=n(uTe,"STRONG",{});var Jqr=s(gZ);WWe=r(Jqr,"canine"),Jqr.forEach(t),HWe=r(uTe," \u2014 "),kk=n(uTe,"A",{href:!0});var Yqr=s(kk);UWe=r(Yqr,"CanineTokenizer"),Yqr.forEach(t),JWe=r(uTe," (Canine model)"),uTe.forEach(t),YWe=i(w),es=n(w,"LI",{});var T7=s(es);hZ=n(T7,"STRONG",{});var Kqr=s(hZ);KWe=r(Kqr,"clip"),Kqr.forEach(t),ZWe=r(T7," \u2014 "),Sk=n(T7,"A",{href:!0});var Zqr=s(Sk);eHe=r(Zqr,"CLIPTokenizer"),Zqr.forEach(t),oHe=r(T7," or "),Rk=n(T7,"A",{href:!0});var eNr=s(Rk);rHe=r(eNr,"CLIPTokenizerFast"),eNr.forEach(t),tHe=r(T7," (CLIP model)"),T7.forEach(t),aHe=i(w),os=n(w,"LI",{});var M7=s(os);pZ=n(M7,"STRONG",{});var oNr=s(pZ);nHe=r(oNr,"convbert"),oNr.forEach(t),sHe=r(M7," \u2014 "),Bk=n(M7,"A",{href:!0});var rNr=s(Bk);lHe=r(rNr,"ConvBertTokenizer"),rNr.forEach(t),iHe=r(M7," or "),Pk=n(M7,"A",{href:!0});var tNr=s(Pk);dHe=r(tNr,"ConvBertTokenizerFast"),tNr.forEach(t),cHe=r(M7," (ConvBERT model)"),M7.forEach(t),fHe=i(w),rs=n(w,"LI",{});var E7=s(rs);_Z=n(E7,"STRONG",{});var aNr=s(_Z);mHe=r(aNr,"cpm"),aNr.forEach(t),gHe=r(E7," \u2014 "),$k=n(E7,"A",{href:!0});var nNr=s($k);hHe=r(nNr,"CpmTokenizer"),nNr.forEach(t),pHe=r(E7," or "),uZ=n(E7,"CODE",{});var sNr=s(uZ);_He=r(sNr,"CpmTokenizerFast"),sNr.forEach(t),uHe=r(E7," (CPM model)"),E7.forEach(t),bHe=i(w),Xg=n(w,"LI",{});var bTe=s(Xg);bZ=n(bTe,"STRONG",{});var lNr=s(bZ);FHe=r(lNr,"ctrl"),lNr.forEach(t),vHe=r(bTe," \u2014 "),Ik=n(bTe,"A",{href:!0});var iNr=s(Ik);THe=r(iNr,"CTRLTokenizer"),iNr.forEach(t),MHe=r(bTe," (CTRL model)"),bTe.forEach(t),EHe=i(w),ts=n(w,"LI",{});var C7=s(ts);FZ=n(C7,"STRONG",{});var dNr=s(FZ);CHe=r(dNr,"deberta"),dNr.forEach(t),wHe=r(C7," \u2014 "),qk=n(C7,"A",{href:!0});var cNr=s(qk);AHe=r(cNr,"DebertaTokenizer"),cNr.forEach(t),yHe=r(C7," or "),Nk=n(C7,"A",{href:!0});var fNr=s(Nk);LHe=r(fNr,"DebertaTokenizerFast"),fNr.forEach(t),xHe=r(C7," (DeBERTa model)"),C7.forEach(t),kHe=i(w),zg=n(w,"LI",{});var FTe=s(zg);vZ=n(FTe,"STRONG",{});var mNr=s(vZ);SHe=r(mNr,"deberta-v2"),mNr.forEach(t),RHe=r(FTe," \u2014 "),jk=n(FTe,"A",{href:!0});var gNr=s(jk);BHe=r(gNr,"DebertaV2Tokenizer"),gNr.forEach(t),PHe=r(FTe," (DeBERTa-v2 model)"),FTe.forEach(t),$He=i(w),as=n(w,"LI",{});var w7=s(as);TZ=n(w7,"STRONG",{});var hNr=s(TZ);IHe=r(hNr,"distilbert"),hNr.forEach(t),qHe=r(w7," \u2014 "),Dk=n(w7,"A",{href:!0});var pNr=s(Dk);NHe=r(pNr,"DistilBertTokenizer"),pNr.forEach(t),jHe=r(w7," or "),Gk=n(w7,"A",{href:!0});var _Nr=s(Gk);DHe=r(_Nr,"DistilBertTokenizerFast"),_Nr.forEach(t),GHe=r(w7," (DistilBERT model)"),w7.forEach(t),OHe=i(w),ns=n(w,"LI",{});var A7=s(ns);MZ=n(A7,"STRONG",{});var uNr=s(MZ);VHe=r(uNr,"dpr"),uNr.forEach(t),XHe=r(A7," \u2014 "),Ok=n(A7,"A",{href:!0});var bNr=s(Ok);zHe=r(bNr,"DPRQuestionEncoderTokenizer"),bNr.forEach(t),QHe=r(A7," or "),Vk=n(A7,"A",{href:!0});var FNr=s(Vk);WHe=r(FNr,"DPRQuestionEncoderTokenizerFast"),FNr.forEach(t),HHe=r(A7," (DPR model)"),A7.forEach(t),UHe=i(w),ss=n(w,"LI",{});var y7=s(ss);EZ=n(y7,"STRONG",{});var vNr=s(EZ);JHe=r(vNr,"electra"),vNr.forEach(t),YHe=r(y7," \u2014 "),Xk=n(y7,"A",{href:!0});var TNr=s(Xk);KHe=r(TNr,"ElectraTokenizer"),TNr.forEach(t),ZHe=r(y7," or "),zk=n(y7,"A",{href:!0});var MNr=s(zk);eUe=r(MNr,"ElectraTokenizerFast"),MNr.forEach(t),oUe=r(y7," (ELECTRA model)"),y7.forEach(t),rUe=i(w),Qg=n(w,"LI",{});var vTe=s(Qg);CZ=n(vTe,"STRONG",{});var ENr=s(CZ);tUe=r(ENr,"flaubert"),ENr.forEach(t),aUe=r(vTe," \u2014 "),Qk=n(vTe,"A",{href:!0});var CNr=s(Qk);nUe=r(CNr,"FlaubertTokenizer"),CNr.forEach(t),sUe=r(vTe," (FlauBERT model)"),vTe.forEach(t),lUe=i(w),ls=n(w,"LI",{});var L7=s(ls);wZ=n(L7,"STRONG",{});var wNr=s(wZ);iUe=r(wNr,"fnet"),wNr.forEach(t),dUe=r(L7," \u2014 "),Wk=n(L7,"A",{href:!0});var ANr=s(Wk);cUe=r(ANr,"FNetTokenizer"),ANr.forEach(t),fUe=r(L7," or "),Hk=n(L7,"A",{href:!0});var yNr=s(Hk);mUe=r(yNr,"FNetTokenizerFast"),yNr.forEach(t),gUe=r(L7," (FNet model)"),L7.forEach(t),hUe=i(w),Wg=n(w,"LI",{});var TTe=s(Wg);AZ=n(TTe,"STRONG",{});var LNr=s(AZ);pUe=r(LNr,"fsmt"),LNr.forEach(t),_Ue=r(TTe," \u2014 "),Uk=n(TTe,"A",{href:!0});var xNr=s(Uk);uUe=r(xNr,"FSMTTokenizer"),xNr.forEach(t),bUe=r(TTe," (FairSeq Machine-Translation model)"),TTe.forEach(t),FUe=i(w),is=n(w,"LI",{});var x7=s(is);yZ=n(x7,"STRONG",{});var kNr=s(yZ);vUe=r(kNr,"funnel"),kNr.forEach(t),TUe=r(x7," \u2014 "),Jk=n(x7,"A",{href:!0});var SNr=s(Jk);MUe=r(SNr,"FunnelTokenizer"),SNr.forEach(t),EUe=r(x7," or "),Yk=n(x7,"A",{href:!0});var RNr=s(Yk);CUe=r(RNr,"FunnelTokenizerFast"),RNr.forEach(t),wUe=r(x7," (Funnel Transformer model)"),x7.forEach(t),AUe=i(w),ds=n(w,"LI",{});var k7=s(ds);LZ=n(k7,"STRONG",{});var BNr=s(LZ);yUe=r(BNr,"gpt2"),BNr.forEach(t),LUe=r(k7," \u2014 "),Kk=n(k7,"A",{href:!0});var PNr=s(Kk);xUe=r(PNr,"GPT2Tokenizer"),PNr.forEach(t),kUe=r(k7," or "),Zk=n(k7,"A",{href:!0});var $Nr=s(Zk);SUe=r($Nr,"GPT2TokenizerFast"),$Nr.forEach(t),RUe=r(k7," (OpenAI GPT-2 model)"),k7.forEach(t),BUe=i(w),cs=n(w,"LI",{});var S7=s(cs);xZ=n(S7,"STRONG",{});var INr=s(xZ);PUe=r(INr,"gpt_neo"),INr.forEach(t),$Ue=r(S7," \u2014 "),eS=n(S7,"A",{href:!0});var qNr=s(eS);IUe=r(qNr,"GPT2Tokenizer"),qNr.forEach(t),qUe=r(S7," or "),oS=n(S7,"A",{href:!0});var NNr=s(oS);NUe=r(NNr,"GPT2TokenizerFast"),NNr.forEach(t),jUe=r(S7," (GPT Neo model)"),S7.forEach(t),DUe=i(w),fs=n(w,"LI",{});var R7=s(fs);kZ=n(R7,"STRONG",{});var jNr=s(kZ);GUe=r(jNr,"herbert"),jNr.forEach(t),OUe=r(R7," \u2014 "),rS=n(R7,"A",{href:!0});var DNr=s(rS);VUe=r(DNr,"HerbertTokenizer"),DNr.forEach(t),XUe=r(R7," or "),tS=n(R7,"A",{href:!0});var GNr=s(tS);zUe=r(GNr,"HerbertTokenizerFast"),GNr.forEach(t),QUe=r(R7," (HerBERT model)"),R7.forEach(t),WUe=i(w),Hg=n(w,"LI",{});var MTe=s(Hg);SZ=n(MTe,"STRONG",{});var ONr=s(SZ);HUe=r(ONr,"hubert"),ONr.forEach(t),UUe=r(MTe," \u2014 "),aS=n(MTe,"A",{href:!0});var VNr=s(aS);JUe=r(VNr,"Wav2Vec2CTCTokenizer"),VNr.forEach(t),YUe=r(MTe," (Hubert model)"),MTe.forEach(t),KUe=i(w),ms=n(w,"LI",{});var B7=s(ms);RZ=n(B7,"STRONG",{});var XNr=s(RZ);ZUe=r(XNr,"ibert"),XNr.forEach(t),eJe=r(B7," \u2014 "),nS=n(B7,"A",{href:!0});var zNr=s(nS);oJe=r(zNr,"RobertaTokenizer"),zNr.forEach(t),rJe=r(B7," or "),sS=n(B7,"A",{href:!0});var QNr=s(sS);tJe=r(QNr,"RobertaTokenizerFast"),QNr.forEach(t),aJe=r(B7," (I-BERT model)"),B7.forEach(t),nJe=i(w),gs=n(w,"LI",{});var P7=s(gs);BZ=n(P7,"STRONG",{});var WNr=s(BZ);sJe=r(WNr,"layoutlm"),WNr.forEach(t),lJe=r(P7," \u2014 "),lS=n(P7,"A",{href:!0});var HNr=s(lS);iJe=r(HNr,"LayoutLMTokenizer"),HNr.forEach(t),dJe=r(P7," or "),iS=n(P7,"A",{href:!0});var UNr=s(iS);cJe=r(UNr,"LayoutLMTokenizerFast"),UNr.forEach(t),fJe=r(P7," (LayoutLM model)"),P7.forEach(t),mJe=i(w),hs=n(w,"LI",{});var $7=s(hs);PZ=n($7,"STRONG",{});var JNr=s(PZ);gJe=r(JNr,"layoutlmv2"),JNr.forEach(t),hJe=r($7," \u2014 "),dS=n($7,"A",{href:!0});var YNr=s(dS);pJe=r(YNr,"LayoutLMv2Tokenizer"),YNr.forEach(t),_Je=r($7," or "),cS=n($7,"A",{href:!0});var KNr=s(cS);uJe=r(KNr,"LayoutLMv2TokenizerFast"),KNr.forEach(t),bJe=r($7," (LayoutLMv2 model)"),$7.forEach(t),FJe=i(w),ps=n(w,"LI",{});var I7=s(ps);$Z=n(I7,"STRONG",{});var ZNr=s($Z);vJe=r(ZNr,"layoutxlm"),ZNr.forEach(t),TJe=r(I7," \u2014 "),fS=n(I7,"A",{href:!0});var ejr=s(fS);MJe=r(ejr,"LayoutXLMTokenizer"),ejr.forEach(t),EJe=r(I7," or "),mS=n(I7,"A",{href:!0});var ojr=s(mS);CJe=r(ojr,"LayoutXLMTokenizerFast"),ojr.forEach(t),wJe=r(I7," (LayoutXLM model)"),I7.forEach(t),AJe=i(w),_s=n(w,"LI",{});var q7=s(_s);IZ=n(q7,"STRONG",{});var rjr=s(IZ);yJe=r(rjr,"led"),rjr.forEach(t),LJe=r(q7," \u2014 "),gS=n(q7,"A",{href:!0});var tjr=s(gS);xJe=r(tjr,"LEDTokenizer"),tjr.forEach(t),kJe=r(q7," or "),hS=n(q7,"A",{href:!0});var ajr=s(hS);SJe=r(ajr,"LEDTokenizerFast"),ajr.forEach(t),RJe=r(q7," (LED model)"),q7.forEach(t),BJe=i(w),us=n(w,"LI",{});var N7=s(us);qZ=n(N7,"STRONG",{});var njr=s(qZ);PJe=r(njr,"longformer"),njr.forEach(t),$Je=r(N7," \u2014 "),pS=n(N7,"A",{href:!0});var sjr=s(pS);IJe=r(sjr,"LongformerTokenizer"),sjr.forEach(t),qJe=r(N7," or "),_S=n(N7,"A",{href:!0});var ljr=s(_S);NJe=r(ljr,"LongformerTokenizerFast"),ljr.forEach(t),jJe=r(N7," (Longformer model)"),N7.forEach(t),DJe=i(w),Ug=n(w,"LI",{});var ETe=s(Ug);NZ=n(ETe,"STRONG",{});var ijr=s(NZ);GJe=r(ijr,"luke"),ijr.forEach(t),OJe=r(ETe," \u2014 "),uS=n(ETe,"A",{href:!0});var djr=s(uS);VJe=r(djr,"LukeTokenizer"),djr.forEach(t),XJe=r(ETe," (LUKE model)"),ETe.forEach(t),zJe=i(w),bs=n(w,"LI",{});var j7=s(bs);jZ=n(j7,"STRONG",{});var cjr=s(jZ);QJe=r(cjr,"lxmert"),cjr.forEach(t),WJe=r(j7," \u2014 "),bS=n(j7,"A",{href:!0});var fjr=s(bS);HJe=r(fjr,"LxmertTokenizer"),fjr.forEach(t),UJe=r(j7," or "),FS=n(j7,"A",{href:!0});var mjr=s(FS);JJe=r(mjr,"LxmertTokenizerFast"),mjr.forEach(t),YJe=r(j7," (LXMERT model)"),j7.forEach(t),KJe=i(w),Jg=n(w,"LI",{});var CTe=s(Jg);DZ=n(CTe,"STRONG",{});var gjr=s(DZ);ZJe=r(gjr,"m2m_100"),gjr.forEach(t),eYe=r(CTe," \u2014 "),vS=n(CTe,"A",{href:!0});var hjr=s(vS);oYe=r(hjr,"M2M100Tokenizer"),hjr.forEach(t),rYe=r(CTe," (M2M100 model)"),CTe.forEach(t),tYe=i(w),Yg=n(w,"LI",{});var wTe=s(Yg);GZ=n(wTe,"STRONG",{});var pjr=s(GZ);aYe=r(pjr,"marian"),pjr.forEach(t),nYe=r(wTe," \u2014 "),TS=n(wTe,"A",{href:!0});var _jr=s(TS);sYe=r(_jr,"MarianTokenizer"),_jr.forEach(t),lYe=r(wTe," (Marian model)"),wTe.forEach(t),iYe=i(w),Fs=n(w,"LI",{});var D7=s(Fs);OZ=n(D7,"STRONG",{});var ujr=s(OZ);dYe=r(ujr,"mbart"),ujr.forEach(t),cYe=r(D7," \u2014 "),MS=n(D7,"A",{href:!0});var bjr=s(MS);fYe=r(bjr,"MBartTokenizer"),bjr.forEach(t),mYe=r(D7," or "),ES=n(D7,"A",{href:!0});var Fjr=s(ES);gYe=r(Fjr,"MBartTokenizerFast"),Fjr.forEach(t),hYe=r(D7," (mBART model)"),D7.forEach(t),pYe=i(w),vs=n(w,"LI",{});var G7=s(vs);VZ=n(G7,"STRONG",{});var vjr=s(VZ);_Ye=r(vjr,"mbart50"),vjr.forEach(t),uYe=r(G7," \u2014 "),CS=n(G7,"A",{href:!0});var Tjr=s(CS);bYe=r(Tjr,"MBart50Tokenizer"),Tjr.forEach(t),FYe=r(G7," or "),wS=n(G7,"A",{href:!0});var Mjr=s(wS);vYe=r(Mjr,"MBart50TokenizerFast"),Mjr.forEach(t),TYe=r(G7," (mBART-50 model)"),G7.forEach(t),MYe=i(w),Kg=n(w,"LI",{});var ATe=s(Kg);XZ=n(ATe,"STRONG",{});var Ejr=s(XZ);EYe=r(Ejr,"mluke"),Ejr.forEach(t),CYe=r(ATe," \u2014 "),AS=n(ATe,"A",{href:!0});var Cjr=s(AS);wYe=r(Cjr,"MLukeTokenizer"),Cjr.forEach(t),AYe=r(ATe," (mLUKE model)"),ATe.forEach(t),yYe=i(w),Ts=n(w,"LI",{});var O7=s(Ts);zZ=n(O7,"STRONG",{});var wjr=s(zZ);LYe=r(wjr,"mobilebert"),wjr.forEach(t),xYe=r(O7," \u2014 "),yS=n(O7,"A",{href:!0});var Ajr=s(yS);kYe=r(Ajr,"MobileBertTokenizer"),Ajr.forEach(t),SYe=r(O7," or "),LS=n(O7,"A",{href:!0});var yjr=s(LS);RYe=r(yjr,"MobileBertTokenizerFast"),yjr.forEach(t),BYe=r(O7," (MobileBERT model)"),O7.forEach(t),PYe=i(w),Ms=n(w,"LI",{});var V7=s(Ms);QZ=n(V7,"STRONG",{});var Ljr=s(QZ);$Ye=r(Ljr,"mpnet"),Ljr.forEach(t),IYe=r(V7," \u2014 "),xS=n(V7,"A",{href:!0});var xjr=s(xS);qYe=r(xjr,"MPNetTokenizer"),xjr.forEach(t),NYe=r(V7," or "),kS=n(V7,"A",{href:!0});var kjr=s(kS);jYe=r(kjr,"MPNetTokenizerFast"),kjr.forEach(t),DYe=r(V7," (MPNet model)"),V7.forEach(t),GYe=i(w),Es=n(w,"LI",{});var X7=s(Es);WZ=n(X7,"STRONG",{});var Sjr=s(WZ);OYe=r(Sjr,"mt5"),Sjr.forEach(t),VYe=r(X7," \u2014 "),SS=n(X7,"A",{href:!0});var Rjr=s(SS);XYe=r(Rjr,"MT5Tokenizer"),Rjr.forEach(t),zYe=r(X7," or "),RS=n(X7,"A",{href:!0});var Bjr=s(RS);QYe=r(Bjr,"MT5TokenizerFast"),Bjr.forEach(t),WYe=r(X7," (mT5 model)"),X7.forEach(t),HYe=i(w),Cs=n(w,"LI",{});var z7=s(Cs);HZ=n(z7,"STRONG",{});var Pjr=s(HZ);UYe=r(Pjr,"openai-gpt"),Pjr.forEach(t),JYe=r(z7," \u2014 "),BS=n(z7,"A",{href:!0});var $jr=s(BS);YYe=r($jr,"OpenAIGPTTokenizer"),$jr.forEach(t),KYe=r(z7," or "),PS=n(z7,"A",{href:!0});var Ijr=s(PS);ZYe=r(Ijr,"OpenAIGPTTokenizerFast"),Ijr.forEach(t),eKe=r(z7," (OpenAI GPT model)"),z7.forEach(t),oKe=i(w),ws=n(w,"LI",{});var Q7=s(ws);UZ=n(Q7,"STRONG",{});var qjr=s(UZ);rKe=r(qjr,"pegasus"),qjr.forEach(t),tKe=r(Q7," \u2014 "),$S=n(Q7,"A",{href:!0});var Njr=s($S);aKe=r(Njr,"PegasusTokenizer"),Njr.forEach(t),nKe=r(Q7," or "),IS=n(Q7,"A",{href:!0});var jjr=s(IS);sKe=r(jjr,"PegasusTokenizerFast"),jjr.forEach(t),lKe=r(Q7," (Pegasus model)"),Q7.forEach(t),iKe=i(w),Zg=n(w,"LI",{});var yTe=s(Zg);JZ=n(yTe,"STRONG",{});var Djr=s(JZ);dKe=r(Djr,"perceiver"),Djr.forEach(t),cKe=r(yTe," \u2014 "),qS=n(yTe,"A",{href:!0});var Gjr=s(qS);fKe=r(Gjr,"PerceiverTokenizer"),Gjr.forEach(t),mKe=r(yTe," (Perceiver model)"),yTe.forEach(t),gKe=i(w),eh=n(w,"LI",{});var LTe=s(eh);YZ=n(LTe,"STRONG",{});var Ojr=s(YZ);hKe=r(Ojr,"phobert"),Ojr.forEach(t),pKe=r(LTe," \u2014 "),NS=n(LTe,"A",{href:!0});var Vjr=s(NS);_Ke=r(Vjr,"PhobertTokenizer"),Vjr.forEach(t),uKe=r(LTe," (PhoBERT model)"),LTe.forEach(t),bKe=i(w),oh=n(w,"LI",{});var xTe=s(oh);KZ=n(xTe,"STRONG",{});var Xjr=s(KZ);FKe=r(Xjr,"plbart"),Xjr.forEach(t),vKe=r(xTe," \u2014 "),jS=n(xTe,"A",{href:!0});var zjr=s(jS);TKe=r(zjr,"PLBartTokenizer"),zjr.forEach(t),MKe=r(xTe," (PLBart model)"),xTe.forEach(t),EKe=i(w),rh=n(w,"LI",{});var kTe=s(rh);ZZ=n(kTe,"STRONG",{});var Qjr=s(ZZ);CKe=r(Qjr,"prophetnet"),Qjr.forEach(t),wKe=r(kTe," \u2014 "),DS=n(kTe,"A",{href:!0});var Wjr=s(DS);AKe=r(Wjr,"ProphetNetTokenizer"),Wjr.forEach(t),yKe=r(kTe," (ProphetNet model)"),kTe.forEach(t),LKe=i(w),As=n(w,"LI",{});var W7=s(As);eee=n(W7,"STRONG",{});var Hjr=s(eee);xKe=r(Hjr,"qdqbert"),Hjr.forEach(t),kKe=r(W7," \u2014 "),GS=n(W7,"A",{href:!0});var Ujr=s(GS);SKe=r(Ujr,"BertTokenizer"),Ujr.forEach(t),RKe=r(W7," or "),OS=n(W7,"A",{href:!0});var Jjr=s(OS);BKe=r(Jjr,"BertTokenizerFast"),Jjr.forEach(t),PKe=r(W7," (QDQBert model)"),W7.forEach(t),$Ke=i(w),th=n(w,"LI",{});var STe=s(th);oee=n(STe,"STRONG",{});var Yjr=s(oee);IKe=r(Yjr,"rag"),Yjr.forEach(t),qKe=r(STe," \u2014 "),VS=n(STe,"A",{href:!0});var Kjr=s(VS);NKe=r(Kjr,"RagTokenizer"),Kjr.forEach(t),jKe=r(STe," (RAG model)"),STe.forEach(t),DKe=i(w),ys=n(w,"LI",{});var H7=s(ys);ree=n(H7,"STRONG",{});var Zjr=s(ree);GKe=r(Zjr,"realm"),Zjr.forEach(t),OKe=r(H7," \u2014 "),XS=n(H7,"A",{href:!0});var eDr=s(XS);VKe=r(eDr,"RealmTokenizer"),eDr.forEach(t),XKe=r(H7," or "),zS=n(H7,"A",{href:!0});var oDr=s(zS);zKe=r(oDr,"RealmTokenizerFast"),oDr.forEach(t),QKe=r(H7," (Realm model)"),H7.forEach(t),WKe=i(w),Ls=n(w,"LI",{});var U7=s(Ls);tee=n(U7,"STRONG",{});var rDr=s(tee);HKe=r(rDr,"reformer"),rDr.forEach(t),UKe=r(U7," \u2014 "),QS=n(U7,"A",{href:!0});var tDr=s(QS);JKe=r(tDr,"ReformerTokenizer"),tDr.forEach(t),YKe=r(U7," or "),WS=n(U7,"A",{href:!0});var aDr=s(WS);KKe=r(aDr,"ReformerTokenizerFast"),aDr.forEach(t),ZKe=r(U7," (Reformer model)"),U7.forEach(t),eZe=i(w),xs=n(w,"LI",{});var J7=s(xs);aee=n(J7,"STRONG",{});var nDr=s(aee);oZe=r(nDr,"rembert"),nDr.forEach(t),rZe=r(J7," \u2014 "),HS=n(J7,"A",{href:!0});var sDr=s(HS);tZe=r(sDr,"RemBertTokenizer"),sDr.forEach(t),aZe=r(J7," or "),US=n(J7,"A",{href:!0});var lDr=s(US);nZe=r(lDr,"RemBertTokenizerFast"),lDr.forEach(t),sZe=r(J7," (RemBERT model)"),J7.forEach(t),lZe=i(w),ks=n(w,"LI",{});var Y7=s(ks);nee=n(Y7,"STRONG",{});var iDr=s(nee);iZe=r(iDr,"retribert"),iDr.forEach(t),dZe=r(Y7," \u2014 "),JS=n(Y7,"A",{href:!0});var dDr=s(JS);cZe=r(dDr,"RetriBertTokenizer"),dDr.forEach(t),fZe=r(Y7," or "),YS=n(Y7,"A",{href:!0});var cDr=s(YS);mZe=r(cDr,"RetriBertTokenizerFast"),cDr.forEach(t),gZe=r(Y7," (RetriBERT model)"),Y7.forEach(t),hZe=i(w),Ss=n(w,"LI",{});var K7=s(Ss);see=n(K7,"STRONG",{});var fDr=s(see);pZe=r(fDr,"roberta"),fDr.forEach(t),_Ze=r(K7," \u2014 "),KS=n(K7,"A",{href:!0});var mDr=s(KS);uZe=r(mDr,"RobertaTokenizer"),mDr.forEach(t),bZe=r(K7," or "),ZS=n(K7,"A",{href:!0});var gDr=s(ZS);FZe=r(gDr,"RobertaTokenizerFast"),gDr.forEach(t),vZe=r(K7," (RoBERTa model)"),K7.forEach(t),TZe=i(w),Rs=n(w,"LI",{});var Z7=s(Rs);lee=n(Z7,"STRONG",{});var hDr=s(lee);MZe=r(hDr,"roformer"),hDr.forEach(t),EZe=r(Z7," \u2014 "),eR=n(Z7,"A",{href:!0});var pDr=s(eR);CZe=r(pDr,"RoFormerTokenizer"),pDr.forEach(t),wZe=r(Z7," or "),oR=n(Z7,"A",{href:!0});var _Dr=s(oR);AZe=r(_Dr,"RoFormerTokenizerFast"),_Dr.forEach(t),yZe=r(Z7," (RoFormer model)"),Z7.forEach(t),LZe=i(w),ah=n(w,"LI",{});var RTe=s(ah);iee=n(RTe,"STRONG",{});var uDr=s(iee);xZe=r(uDr,"speech_to_text"),uDr.forEach(t),kZe=r(RTe," \u2014 "),rR=n(RTe,"A",{href:!0});var bDr=s(rR);SZe=r(bDr,"Speech2TextTokenizer"),bDr.forEach(t),RZe=r(RTe," (Speech2Text model)"),RTe.forEach(t),BZe=i(w),nh=n(w,"LI",{});var BTe=s(nh);dee=n(BTe,"STRONG",{});var FDr=s(dee);PZe=r(FDr,"speech_to_text_2"),FDr.forEach(t),$Ze=r(BTe," \u2014 "),tR=n(BTe,"A",{href:!0});var vDr=s(tR);IZe=r(vDr,"Speech2Text2Tokenizer"),vDr.forEach(t),qZe=r(BTe," (Speech2Text2 model)"),BTe.forEach(t),NZe=i(w),Bs=n(w,"LI",{});var e9=s(Bs);cee=n(e9,"STRONG",{});var TDr=s(cee);jZe=r(TDr,"splinter"),TDr.forEach(t),DZe=r(e9," \u2014 "),aR=n(e9,"A",{href:!0});var MDr=s(aR);GZe=r(MDr,"SplinterTokenizer"),MDr.forEach(t),OZe=r(e9," or "),nR=n(e9,"A",{href:!0});var EDr=s(nR);VZe=r(EDr,"SplinterTokenizerFast"),EDr.forEach(t),XZe=r(e9," (Splinter model)"),e9.forEach(t),zZe=i(w),Ps=n(w,"LI",{});var o9=s(Ps);fee=n(o9,"STRONG",{});var CDr=s(fee);QZe=r(CDr,"squeezebert"),CDr.forEach(t),WZe=r(o9," \u2014 "),sR=n(o9,"A",{href:!0});var wDr=s(sR);HZe=r(wDr,"SqueezeBertTokenizer"),wDr.forEach(t),UZe=r(o9," or "),lR=n(o9,"A",{href:!0});var ADr=s(lR);JZe=r(ADr,"SqueezeBertTokenizerFast"),ADr.forEach(t),YZe=r(o9," (SqueezeBERT model)"),o9.forEach(t),KZe=i(w),$s=n(w,"LI",{});var r9=s($s);mee=n(r9,"STRONG",{});var yDr=s(mee);ZZe=r(yDr,"t5"),yDr.forEach(t),eeo=r(r9," \u2014 "),iR=n(r9,"A",{href:!0});var LDr=s(iR);oeo=r(LDr,"T5Tokenizer"),LDr.forEach(t),reo=r(r9," or "),dR=n(r9,"A",{href:!0});var xDr=s(dR);teo=r(xDr,"T5TokenizerFast"),xDr.forEach(t),aeo=r(r9," (T5 model)"),r9.forEach(t),neo=i(w),sh=n(w,"LI",{});var PTe=s(sh);gee=n(PTe,"STRONG",{});var kDr=s(gee);seo=r(kDr,"tapas"),kDr.forEach(t),leo=r(PTe," \u2014 "),cR=n(PTe,"A",{href:!0});var SDr=s(cR);ieo=r(SDr,"TapasTokenizer"),SDr.forEach(t),deo=r(PTe," (TAPAS model)"),PTe.forEach(t),ceo=i(w),lh=n(w,"LI",{});var $Te=s(lh);hee=n($Te,"STRONG",{});var RDr=s(hee);feo=r(RDr,"transfo-xl"),RDr.forEach(t),meo=r($Te," \u2014 "),fR=n($Te,"A",{href:!0});var BDr=s(fR);geo=r(BDr,"TransfoXLTokenizer"),BDr.forEach(t),heo=r($Te," (Transformer-XL model)"),$Te.forEach(t),peo=i(w),ih=n(w,"LI",{});var ITe=s(ih);pee=n(ITe,"STRONG",{});var PDr=s(pee);_eo=r(PDr,"wav2vec2"),PDr.forEach(t),ueo=r(ITe," \u2014 "),mR=n(ITe,"A",{href:!0});var $Dr=s(mR);beo=r($Dr,"Wav2Vec2CTCTokenizer"),$Dr.forEach(t),Feo=r(ITe," (Wav2Vec2 model)"),ITe.forEach(t),veo=i(w),dh=n(w,"LI",{});var qTe=s(dh);_ee=n(qTe,"STRONG",{});var IDr=s(_ee);Teo=r(IDr,"wav2vec2_phoneme"),IDr.forEach(t),Meo=r(qTe," \u2014 "),gR=n(qTe,"A",{href:!0});var qDr=s(gR);Eeo=r(qDr,"Wav2Vec2PhonemeCTCTokenizer"),qDr.forEach(t),Ceo=r(qTe," (Wav2Vec2Phoneme model)"),qTe.forEach(t),weo=i(w),Is=n(w,"LI",{});var t9=s(Is);uee=n(t9,"STRONG",{});var NDr=s(uee);Aeo=r(NDr,"xglm"),NDr.forEach(t),yeo=r(t9," \u2014 "),hR=n(t9,"A",{href:!0});var jDr=s(hR);Leo=r(jDr,"XGLMTokenizer"),jDr.forEach(t),xeo=r(t9," or "),pR=n(t9,"A",{href:!0});var DDr=s(pR);keo=r(DDr,"XGLMTokenizerFast"),DDr.forEach(t),Seo=r(t9," (XGLM model)"),t9.forEach(t),Reo=i(w),ch=n(w,"LI",{});var NTe=s(ch);bee=n(NTe,"STRONG",{});var GDr=s(bee);Beo=r(GDr,"xlm"),GDr.forEach(t),Peo=r(NTe," \u2014 "),_R=n(NTe,"A",{href:!0});var ODr=s(_R);$eo=r(ODr,"XLMTokenizer"),ODr.forEach(t),Ieo=r(NTe," (XLM model)"),NTe.forEach(t),qeo=i(w),fh=n(w,"LI",{});var jTe=s(fh);Fee=n(jTe,"STRONG",{});var VDr=s(Fee);Neo=r(VDr,"xlm-prophetnet"),VDr.forEach(t),jeo=r(jTe," \u2014 "),uR=n(jTe,"A",{href:!0});var XDr=s(uR);Deo=r(XDr,"XLMProphetNetTokenizer"),XDr.forEach(t),Geo=r(jTe," (XLMProphetNet model)"),jTe.forEach(t),Oeo=i(w),qs=n(w,"LI",{});var a9=s(qs);vee=n(a9,"STRONG",{});var zDr=s(vee);Veo=r(zDr,"xlm-roberta"),zDr.forEach(t),Xeo=r(a9," \u2014 "),bR=n(a9,"A",{href:!0});var QDr=s(bR);zeo=r(QDr,"XLMRobertaTokenizer"),QDr.forEach(t),Qeo=r(a9," or "),FR=n(a9,"A",{href:!0});var WDr=s(FR);Weo=r(WDr,"XLMRobertaTokenizerFast"),WDr.forEach(t),Heo=r(a9," (XLM-RoBERTa model)"),a9.forEach(t),Ueo=i(w),Ns=n(w,"LI",{});var n9=s(Ns);Tee=n(n9,"STRONG",{});var HDr=s(Tee);Jeo=r(HDr,"xlnet"),HDr.forEach(t),Yeo=r(n9," \u2014 "),vR=n(n9,"A",{href:!0});var UDr=s(vR);Keo=r(UDr,"XLNetTokenizer"),UDr.forEach(t),Zeo=r(n9," or "),TR=n(n9,"A",{href:!0});var JDr=s(TR);eoo=r(JDr,"XLNetTokenizerFast"),JDr.forEach(t),ooo=r(n9," (XLNet model)"),n9.forEach(t),w.forEach(t),roo=i(ha),Mee=n(ha,"P",{});var YDr=s(Mee);too=r(YDr,"Examples:"),YDr.forEach(t),aoo=i(ha),m($C.$$.fragment,ha),ha.forEach(t),noo=i(Vs),mh=n(Vs,"DIV",{class:!0});var aPe=s(mh);m(IC.$$.fragment,aPe),soo=i(aPe),Eee=n(aPe,"P",{});var KDr=s(Eee);loo=r(KDr,"Register a new tokenizer in this mapping."),KDr.forEach(t),aPe.forEach(t),Vs.forEach(t),eRe=i(c),Wi=n(c,"H2",{class:!0});var nPe=s(Wi);gh=n(nPe,"A",{id:!0,class:!0,href:!0});var ZDr=s(gh);Cee=n(ZDr,"SPAN",{});var eGr=s(Cee);m(qC.$$.fragment,eGr),eGr.forEach(t),ZDr.forEach(t),ioo=i(nPe),wee=n(nPe,"SPAN",{});var oGr=s(wee);doo=r(oGr,"AutoFeatureExtractor"),oGr.forEach(t),nPe.forEach(t),oRe=i(c),Ho=n(c,"DIV",{class:!0});var Xs=s(Ho);m(NC.$$.fragment,Xs),coo=i(Xs),jC=n(Xs,"P",{});var sPe=s(jC);foo=r(sPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),MR=n(sPe,"A",{href:!0});var rGr=s(MR);moo=r(rGr,"AutoFeatureExtractor.from_pretrained()"),rGr.forEach(t),goo=r(sPe," class method."),sPe.forEach(t),hoo=i(Xs),DC=n(Xs,"P",{});var lPe=s(DC);poo=r(lPe,"This class cannot be instantiated directly using "),Aee=n(lPe,"CODE",{});var tGr=s(Aee);_oo=r(tGr,"__init__()"),tGr.forEach(t),uoo=r(lPe," (throws an error)."),lPe.forEach(t),boo=i(Xs),$e=n(Xs,"DIV",{class:!0});var Nt=s($e);m(GC.$$.fragment,Nt),Foo=i(Nt),yee=n(Nt,"P",{});var aGr=s(yee);voo=r(aGr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),aGr.forEach(t),Too=i(Nt),Va=n(Nt,"P",{});var vE=s(Va);Moo=r(vE,"The feature extractor class to instantiate is selected based on the "),Lee=n(vE,"CODE",{});var nGr=s(Lee);Eoo=r(nGr,"model_type"),nGr.forEach(t),Coo=r(vE,` property of the config object
(either passed as an argument or loaded from `),xee=n(vE,"CODE",{});var sGr=s(xee);woo=r(sGr,"pretrained_model_name_or_path"),sGr.forEach(t),Aoo=r(vE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),kee=n(vE,"CODE",{});var lGr=s(kee);yoo=r(lGr,"pretrained_model_name_or_path"),lGr.forEach(t),Loo=r(vE,":"),vE.forEach(t),xoo=i(Nt),te=n(Nt,"UL",{});var ne=s(te);hh=n(ne,"LI",{});var DTe=s(hh);See=n(DTe,"STRONG",{});var iGr=s(See);koo=r(iGr,"beit"),iGr.forEach(t),Soo=r(DTe," \u2014 "),ER=n(DTe,"A",{href:!0});var dGr=s(ER);Roo=r(dGr,"BeitFeatureExtractor"),dGr.forEach(t),Boo=r(DTe," (BEiT model)"),DTe.forEach(t),Poo=i(ne),ph=n(ne,"LI",{});var GTe=s(ph);Ree=n(GTe,"STRONG",{});var cGr=s(Ree);$oo=r(cGr,"clip"),cGr.forEach(t),Ioo=r(GTe," \u2014 "),CR=n(GTe,"A",{href:!0});var fGr=s(CR);qoo=r(fGr,"CLIPFeatureExtractor"),fGr.forEach(t),Noo=r(GTe," (CLIP model)"),GTe.forEach(t),joo=i(ne),_h=n(ne,"LI",{});var OTe=s(_h);Bee=n(OTe,"STRONG",{});var mGr=s(Bee);Doo=r(mGr,"convnext"),mGr.forEach(t),Goo=r(OTe," \u2014 "),wR=n(OTe,"A",{href:!0});var gGr=s(wR);Ooo=r(gGr,"ConvNextFeatureExtractor"),gGr.forEach(t),Voo=r(OTe," (ConvNext model)"),OTe.forEach(t),Xoo=i(ne),uh=n(ne,"LI",{});var VTe=s(uh);Pee=n(VTe,"STRONG",{});var hGr=s(Pee);zoo=r(hGr,"deit"),hGr.forEach(t),Qoo=r(VTe," \u2014 "),AR=n(VTe,"A",{href:!0});var pGr=s(AR);Woo=r(pGr,"DeiTFeatureExtractor"),pGr.forEach(t),Hoo=r(VTe," (DeiT model)"),VTe.forEach(t),Uoo=i(ne),bh=n(ne,"LI",{});var XTe=s(bh);$ee=n(XTe,"STRONG",{});var _Gr=s($ee);Joo=r(_Gr,"detr"),_Gr.forEach(t),Yoo=r(XTe," \u2014 "),yR=n(XTe,"A",{href:!0});var uGr=s(yR);Koo=r(uGr,"DetrFeatureExtractor"),uGr.forEach(t),Zoo=r(XTe," (DETR model)"),XTe.forEach(t),ero=i(ne),Fh=n(ne,"LI",{});var zTe=s(Fh);Iee=n(zTe,"STRONG",{});var bGr=s(Iee);oro=r(bGr,"hubert"),bGr.forEach(t),rro=r(zTe," \u2014 "),LR=n(zTe,"A",{href:!0});var FGr=s(LR);tro=r(FGr,"Wav2Vec2FeatureExtractor"),FGr.forEach(t),aro=r(zTe," (Hubert model)"),zTe.forEach(t),nro=i(ne),vh=n(ne,"LI",{});var QTe=s(vh);qee=n(QTe,"STRONG",{});var vGr=s(qee);sro=r(vGr,"layoutlmv2"),vGr.forEach(t),lro=r(QTe," \u2014 "),xR=n(QTe,"A",{href:!0});var TGr=s(xR);iro=r(TGr,"LayoutLMv2FeatureExtractor"),TGr.forEach(t),dro=r(QTe," (LayoutLMv2 model)"),QTe.forEach(t),cro=i(ne),Th=n(ne,"LI",{});var WTe=s(Th);Nee=n(WTe,"STRONG",{});var MGr=s(Nee);fro=r(MGr,"maskformer"),MGr.forEach(t),mro=r(WTe," \u2014 "),kR=n(WTe,"A",{href:!0});var EGr=s(kR);gro=r(EGr,"MaskFormerFeatureExtractor"),EGr.forEach(t),hro=r(WTe," (MaskFormer model)"),WTe.forEach(t),pro=i(ne),Mh=n(ne,"LI",{});var HTe=s(Mh);jee=n(HTe,"STRONG",{});var CGr=s(jee);_ro=r(CGr,"perceiver"),CGr.forEach(t),uro=r(HTe," \u2014 "),SR=n(HTe,"A",{href:!0});var wGr=s(SR);bro=r(wGr,"PerceiverFeatureExtractor"),wGr.forEach(t),Fro=r(HTe," (Perceiver model)"),HTe.forEach(t),vro=i(ne),Eh=n(ne,"LI",{});var UTe=s(Eh);Dee=n(UTe,"STRONG",{});var AGr=s(Dee);Tro=r(AGr,"poolformer"),AGr.forEach(t),Mro=r(UTe," \u2014 "),RR=n(UTe,"A",{href:!0});var yGr=s(RR);Ero=r(yGr,"PoolFormerFeatureExtractor"),yGr.forEach(t),Cro=r(UTe," (PoolFormer model)"),UTe.forEach(t),wro=i(ne),Ch=n(ne,"LI",{});var JTe=s(Ch);Gee=n(JTe,"STRONG",{});var LGr=s(Gee);Aro=r(LGr,"resnet"),LGr.forEach(t),yro=r(JTe," \u2014 "),BR=n(JTe,"A",{href:!0});var xGr=s(BR);Lro=r(xGr,"ConvNextFeatureExtractor"),xGr.forEach(t),xro=r(JTe," (ResNet model)"),JTe.forEach(t),kro=i(ne),wh=n(ne,"LI",{});var YTe=s(wh);Oee=n(YTe,"STRONG",{});var kGr=s(Oee);Sro=r(kGr,"segformer"),kGr.forEach(t),Rro=r(YTe," \u2014 "),PR=n(YTe,"A",{href:!0});var SGr=s(PR);Bro=r(SGr,"SegformerFeatureExtractor"),SGr.forEach(t),Pro=r(YTe," (SegFormer model)"),YTe.forEach(t),$ro=i(ne),Ah=n(ne,"LI",{});var KTe=s(Ah);Vee=n(KTe,"STRONG",{});var RGr=s(Vee);Iro=r(RGr,"speech_to_text"),RGr.forEach(t),qro=r(KTe," \u2014 "),$R=n(KTe,"A",{href:!0});var BGr=s($R);Nro=r(BGr,"Speech2TextFeatureExtractor"),BGr.forEach(t),jro=r(KTe," (Speech2Text model)"),KTe.forEach(t),Dro=i(ne),yh=n(ne,"LI",{});var ZTe=s(yh);Xee=n(ZTe,"STRONG",{});var PGr=s(Xee);Gro=r(PGr,"swin"),PGr.forEach(t),Oro=r(ZTe," \u2014 "),IR=n(ZTe,"A",{href:!0});var $Gr=s(IR);Vro=r($Gr,"ViTFeatureExtractor"),$Gr.forEach(t),Xro=r(ZTe," (Swin model)"),ZTe.forEach(t),zro=i(ne),Lh=n(ne,"LI",{});var eMe=s(Lh);zee=n(eMe,"STRONG",{});var IGr=s(zee);Qro=r(IGr,"van"),IGr.forEach(t),Wro=r(eMe," \u2014 "),qR=n(eMe,"A",{href:!0});var qGr=s(qR);Hro=r(qGr,"ConvNextFeatureExtractor"),qGr.forEach(t),Uro=r(eMe," (VAN model)"),eMe.forEach(t),Jro=i(ne),xh=n(ne,"LI",{});var oMe=s(xh);Qee=n(oMe,"STRONG",{});var NGr=s(Qee);Yro=r(NGr,"vit"),NGr.forEach(t),Kro=r(oMe," \u2014 "),NR=n(oMe,"A",{href:!0});var jGr=s(NR);Zro=r(jGr,"ViTFeatureExtractor"),jGr.forEach(t),eto=r(oMe," (ViT model)"),oMe.forEach(t),oto=i(ne),kh=n(ne,"LI",{});var rMe=s(kh);Wee=n(rMe,"STRONG",{});var DGr=s(Wee);rto=r(DGr,"vit_mae"),DGr.forEach(t),tto=r(rMe," \u2014 "),jR=n(rMe,"A",{href:!0});var GGr=s(jR);ato=r(GGr,"ViTFeatureExtractor"),GGr.forEach(t),nto=r(rMe," (ViTMAE model)"),rMe.forEach(t),sto=i(ne),Sh=n(ne,"LI",{});var tMe=s(Sh);Hee=n(tMe,"STRONG",{});var OGr=s(Hee);lto=r(OGr,"wav2vec2"),OGr.forEach(t),ito=r(tMe," \u2014 "),DR=n(tMe,"A",{href:!0});var VGr=s(DR);dto=r(VGr,"Wav2Vec2FeatureExtractor"),VGr.forEach(t),cto=r(tMe," (Wav2Vec2 model)"),tMe.forEach(t),ne.forEach(t),fto=i(Nt),m(Rh.$$.fragment,Nt),mto=i(Nt),Uee=n(Nt,"P",{});var XGr=s(Uee);gto=r(XGr,"Examples:"),XGr.forEach(t),hto=i(Nt),m(OC.$$.fragment,Nt),Nt.forEach(t),pto=i(Xs),Bh=n(Xs,"DIV",{class:!0});var iPe=s(Bh);m(VC.$$.fragment,iPe),_to=i(iPe),Jee=n(iPe,"P",{});var zGr=s(Jee);uto=r(zGr,"Register a new feature extractor for this class."),zGr.forEach(t),iPe.forEach(t),Xs.forEach(t),rRe=i(c),Hi=n(c,"H2",{class:!0});var dPe=s(Hi);Ph=n(dPe,"A",{id:!0,class:!0,href:!0});var QGr=s(Ph);Yee=n(QGr,"SPAN",{});var WGr=s(Yee);m(XC.$$.fragment,WGr),WGr.forEach(t),QGr.forEach(t),bto=i(dPe),Kee=n(dPe,"SPAN",{});var HGr=s(Kee);Fto=r(HGr,"AutoProcessor"),HGr.forEach(t),dPe.forEach(t),tRe=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(zC.$$.fragment,zs),vto=i(zs),QC=n(zs,"P",{});var cPe=s(QC);Tto=r(cPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),GR=n(cPe,"A",{href:!0});var UGr=s(GR);Mto=r(UGr,"AutoProcessor.from_pretrained()"),UGr.forEach(t),Eto=r(cPe," class method."),cPe.forEach(t),Cto=i(zs),WC=n(zs,"P",{});var fPe=s(WC);wto=r(fPe,"This class cannot be instantiated directly using "),Zee=n(fPe,"CODE",{});var JGr=s(Zee);Ato=r(JGr,"__init__()"),JGr.forEach(t),yto=r(fPe," (throws an error)."),fPe.forEach(t),Lto=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);m(HC.$$.fragment,jt),xto=i(jt),eoe=n(jt,"P",{});var YGr=s(eoe);kto=r(YGr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),YGr.forEach(t),Sto=i(jt),Ui=n(jt,"P",{});var KH=s(Ui);Rto=r(KH,"The processor class to instantiate is selected based on the "),ooe=n(KH,"CODE",{});var KGr=s(ooe);Bto=r(KGr,"model_type"),KGr.forEach(t),Pto=r(KH,` property of the config object (either
passed as an argument or loaded from `),roe=n(KH,"CODE",{});var ZGr=s(roe);$to=r(ZGr,"pretrained_model_name_or_path"),ZGr.forEach(t),Ito=r(KH," if possible):"),KH.forEach(t),qto=i(jt),ke=n(jt,"UL",{});var jo=s(ke);$h=n(jo,"LI",{});var aMe=s($h);toe=n(aMe,"STRONG",{});var eOr=s(toe);Nto=r(eOr,"clip"),eOr.forEach(t),jto=r(aMe," \u2014 "),OR=n(aMe,"A",{href:!0});var oOr=s(OR);Dto=r(oOr,"CLIPProcessor"),oOr.forEach(t),Gto=r(aMe," (CLIP model)"),aMe.forEach(t),Oto=i(jo),Ih=n(jo,"LI",{});var nMe=s(Ih);aoe=n(nMe,"STRONG",{});var rOr=s(aoe);Vto=r(rOr,"layoutlmv2"),rOr.forEach(t),Xto=r(nMe," \u2014 "),VR=n(nMe,"A",{href:!0});var tOr=s(VR);zto=r(tOr,"LayoutLMv2Processor"),tOr.forEach(t),Qto=r(nMe," (LayoutLMv2 model)"),nMe.forEach(t),Wto=i(jo),qh=n(jo,"LI",{});var sMe=s(qh);noe=n(sMe,"STRONG",{});var aOr=s(noe);Hto=r(aOr,"layoutxlm"),aOr.forEach(t),Uto=r(sMe," \u2014 "),XR=n(sMe,"A",{href:!0});var nOr=s(XR);Jto=r(nOr,"LayoutXLMProcessor"),nOr.forEach(t),Yto=r(sMe," (LayoutXLM model)"),sMe.forEach(t),Kto=i(jo),Nh=n(jo,"LI",{});var lMe=s(Nh);soe=n(lMe,"STRONG",{});var sOr=s(soe);Zto=r(sOr,"speech_to_text"),sOr.forEach(t),eao=r(lMe," \u2014 "),zR=n(lMe,"A",{href:!0});var lOr=s(zR);oao=r(lOr,"Speech2TextProcessor"),lOr.forEach(t),rao=r(lMe," (Speech2Text model)"),lMe.forEach(t),tao=i(jo),jh=n(jo,"LI",{});var iMe=s(jh);loe=n(iMe,"STRONG",{});var iOr=s(loe);aao=r(iOr,"speech_to_text_2"),iOr.forEach(t),nao=r(iMe," \u2014 "),QR=n(iMe,"A",{href:!0});var dOr=s(QR);sao=r(dOr,"Speech2Text2Processor"),dOr.forEach(t),lao=r(iMe," (Speech2Text2 model)"),iMe.forEach(t),iao=i(jo),Dh=n(jo,"LI",{});var dMe=s(Dh);ioe=n(dMe,"STRONG",{});var cOr=s(ioe);dao=r(cOr,"trocr"),cOr.forEach(t),cao=r(dMe," \u2014 "),WR=n(dMe,"A",{href:!0});var fOr=s(WR);fao=r(fOr,"TrOCRProcessor"),fOr.forEach(t),mao=r(dMe," (TrOCR model)"),dMe.forEach(t),gao=i(jo),Gh=n(jo,"LI",{});var cMe=s(Gh);doe=n(cMe,"STRONG",{});var mOr=s(doe);hao=r(mOr,"vision-text-dual-encoder"),mOr.forEach(t),pao=r(cMe," \u2014 "),HR=n(cMe,"A",{href:!0});var gOr=s(HR);_ao=r(gOr,"VisionTextDualEncoderProcessor"),gOr.forEach(t),uao=r(cMe," (VisionTextDualEncoder model)"),cMe.forEach(t),bao=i(jo),Oh=n(jo,"LI",{});var fMe=s(Oh);coe=n(fMe,"STRONG",{});var hOr=s(coe);Fao=r(hOr,"wav2vec2"),hOr.forEach(t),vao=r(fMe," \u2014 "),UR=n(fMe,"A",{href:!0});var pOr=s(UR);Tao=r(pOr,"Wav2Vec2Processor"),pOr.forEach(t),Mao=r(fMe," (Wav2Vec2 model)"),fMe.forEach(t),jo.forEach(t),Eao=i(jt),m(Vh.$$.fragment,jt),Cao=i(jt),foe=n(jt,"P",{});var _Or=s(foe);wao=r(_Or,"Examples:"),_Or.forEach(t),Aao=i(jt),m(UC.$$.fragment,jt),jt.forEach(t),yao=i(zs),Xh=n(zs,"DIV",{class:!0});var mPe=s(Xh);m(JC.$$.fragment,mPe),Lao=i(mPe),moe=n(mPe,"P",{});var uOr=s(moe);xao=r(uOr,"Register a new processor for this class."),uOr.forEach(t),mPe.forEach(t),zs.forEach(t),aRe=i(c),Ji=n(c,"H2",{class:!0});var gPe=s(Ji);zh=n(gPe,"A",{id:!0,class:!0,href:!0});var bOr=s(zh);goe=n(bOr,"SPAN",{});var FOr=s(goe);m(YC.$$.fragment,FOr),FOr.forEach(t),bOr.forEach(t),kao=i(gPe),hoe=n(gPe,"SPAN",{});var vOr=s(hoe);Sao=r(vOr,"AutoModel"),vOr.forEach(t),gPe.forEach(t),nRe=i(c),Jo=n(c,"DIV",{class:!0});var Qs=s(Jo);m(KC.$$.fragment,Qs),Rao=i(Qs),Yi=n(Qs,"P",{});var ZH=s(Yi);Bao=r(ZH,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JR=n(ZH,"A",{href:!0});var TOr=s(JR);Pao=r(TOr,"from_pretrained()"),TOr.forEach(t),$ao=r(ZH," class method or the "),YR=n(ZH,"A",{href:!0});var MOr=s(YR);Iao=r(MOr,"from_config()"),MOr.forEach(t),qao=r(ZH,` class
method.`),ZH.forEach(t),Nao=i(Qs),ZC=n(Qs,"P",{});var hPe=s(ZC);jao=r(hPe,"This class cannot be instantiated directly using "),poe=n(hPe,"CODE",{});var EOr=s(poe);Dao=r(EOr,"__init__()"),EOr.forEach(t),Gao=r(hPe," (throws an error)."),hPe.forEach(t),Oao=i(Qs),Xr=n(Qs,"DIV",{class:!0});var Ws=s(Xr);m(ew.$$.fragment,Ws),Vao=i(Ws),_oe=n(Ws,"P",{});var COr=s(_oe);Xao=r(COr,"Instantiates one of the base model classes of the library from a configuration."),COr.forEach(t),zao=i(Ws),Ki=n(Ws,"P",{});var eU=s(Ki);Qao=r(eU,`Note:
Loading a model from its configuration file does `),uoe=n(eU,"STRONG",{});var wOr=s(uoe);Wao=r(wOr,"not"),wOr.forEach(t),Hao=r(eU,` load the model weights. It only affects the
model\u2019s configuration. Use `),KR=n(eU,"A",{href:!0});var AOr=s(KR);Uao=r(AOr,"from_pretrained()"),AOr.forEach(t),Jao=r(eU," to load the model weights."),eU.forEach(t),Yao=i(Ws),boe=n(Ws,"P",{});var yOr=s(boe);Kao=r(yOr,"Examples:"),yOr.forEach(t),Zao=i(Ws),m(ow.$$.fragment,Ws),Ws.forEach(t),eno=i(Qs),qe=n(Qs,"DIV",{class:!0});var Dt=s(qe);m(rw.$$.fragment,Dt),ono=i(Dt),Foe=n(Dt,"P",{});var LOr=s(Foe);rno=r(LOr,"Instantiate one of the base model classes of the library from a pretrained model."),LOr.forEach(t),tno=i(Dt),Xa=n(Dt,"P",{});var TE=s(Xa);ano=r(TE,"The model class to instantiate is selected based on the "),voe=n(TE,"CODE",{});var xOr=s(voe);nno=r(xOr,"model_type"),xOr.forEach(t),sno=r(TE,` property of the config object (either
passed as an argument or loaded from `),Toe=n(TE,"CODE",{});var kOr=s(Toe);lno=r(kOr,"pretrained_model_name_or_path"),kOr.forEach(t),ino=r(TE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Moe=n(TE,"CODE",{});var SOr=s(Moe);dno=r(SOr,"pretrained_model_name_or_path"),SOr.forEach(t),cno=r(TE,":"),TE.forEach(t),fno=i(Dt),T=n(Dt,"UL",{});var M=s(T);Qh=n(M,"LI",{});var mMe=s(Qh);Eoe=n(mMe,"STRONG",{});var ROr=s(Eoe);mno=r(ROr,"albert"),ROr.forEach(t),gno=r(mMe," \u2014 "),ZR=n(mMe,"A",{href:!0});var BOr=s(ZR);hno=r(BOr,"AlbertModel"),BOr.forEach(t),pno=r(mMe," (ALBERT model)"),mMe.forEach(t),_no=i(M),Wh=n(M,"LI",{});var gMe=s(Wh);Coe=n(gMe,"STRONG",{});var POr=s(Coe);uno=r(POr,"bart"),POr.forEach(t),bno=r(gMe," \u2014 "),eB=n(gMe,"A",{href:!0});var $Or=s(eB);Fno=r($Or,"BartModel"),$Or.forEach(t),vno=r(gMe," (BART model)"),gMe.forEach(t),Tno=i(M),Hh=n(M,"LI",{});var hMe=s(Hh);woe=n(hMe,"STRONG",{});var IOr=s(woe);Mno=r(IOr,"beit"),IOr.forEach(t),Eno=r(hMe," \u2014 "),oB=n(hMe,"A",{href:!0});var qOr=s(oB);Cno=r(qOr,"BeitModel"),qOr.forEach(t),wno=r(hMe," (BEiT model)"),hMe.forEach(t),Ano=i(M),Uh=n(M,"LI",{});var pMe=s(Uh);Aoe=n(pMe,"STRONG",{});var NOr=s(Aoe);yno=r(NOr,"bert"),NOr.forEach(t),Lno=r(pMe," \u2014 "),rB=n(pMe,"A",{href:!0});var jOr=s(rB);xno=r(jOr,"BertModel"),jOr.forEach(t),kno=r(pMe," (BERT model)"),pMe.forEach(t),Sno=i(M),Jh=n(M,"LI",{});var _Me=s(Jh);yoe=n(_Me,"STRONG",{});var DOr=s(yoe);Rno=r(DOr,"bert-generation"),DOr.forEach(t),Bno=r(_Me," \u2014 "),tB=n(_Me,"A",{href:!0});var GOr=s(tB);Pno=r(GOr,"BertGenerationEncoder"),GOr.forEach(t),$no=r(_Me," (Bert Generation model)"),_Me.forEach(t),Ino=i(M),Yh=n(M,"LI",{});var uMe=s(Yh);Loe=n(uMe,"STRONG",{});var OOr=s(Loe);qno=r(OOr,"big_bird"),OOr.forEach(t),Nno=r(uMe," \u2014 "),aB=n(uMe,"A",{href:!0});var VOr=s(aB);jno=r(VOr,"BigBirdModel"),VOr.forEach(t),Dno=r(uMe," (BigBird model)"),uMe.forEach(t),Gno=i(M),Kh=n(M,"LI",{});var bMe=s(Kh);xoe=n(bMe,"STRONG",{});var XOr=s(xoe);Ono=r(XOr,"bigbird_pegasus"),XOr.forEach(t),Vno=r(bMe," \u2014 "),nB=n(bMe,"A",{href:!0});var zOr=s(nB);Xno=r(zOr,"BigBirdPegasusModel"),zOr.forEach(t),zno=r(bMe," (BigBirdPegasus model)"),bMe.forEach(t),Qno=i(M),Zh=n(M,"LI",{});var FMe=s(Zh);koe=n(FMe,"STRONG",{});var QOr=s(koe);Wno=r(QOr,"blenderbot"),QOr.forEach(t),Hno=r(FMe," \u2014 "),sB=n(FMe,"A",{href:!0});var WOr=s(sB);Uno=r(WOr,"BlenderbotModel"),WOr.forEach(t),Jno=r(FMe," (Blenderbot model)"),FMe.forEach(t),Yno=i(M),ep=n(M,"LI",{});var vMe=s(ep);Soe=n(vMe,"STRONG",{});var HOr=s(Soe);Kno=r(HOr,"blenderbot-small"),HOr.forEach(t),Zno=r(vMe," \u2014 "),lB=n(vMe,"A",{href:!0});var UOr=s(lB);eso=r(UOr,"BlenderbotSmallModel"),UOr.forEach(t),oso=r(vMe," (BlenderbotSmall model)"),vMe.forEach(t),rso=i(M),op=n(M,"LI",{});var TMe=s(op);Roe=n(TMe,"STRONG",{});var JOr=s(Roe);tso=r(JOr,"camembert"),JOr.forEach(t),aso=r(TMe," \u2014 "),iB=n(TMe,"A",{href:!0});var YOr=s(iB);nso=r(YOr,"CamembertModel"),YOr.forEach(t),sso=r(TMe," (CamemBERT model)"),TMe.forEach(t),lso=i(M),rp=n(M,"LI",{});var MMe=s(rp);Boe=n(MMe,"STRONG",{});var KOr=s(Boe);iso=r(KOr,"canine"),KOr.forEach(t),dso=r(MMe," \u2014 "),dB=n(MMe,"A",{href:!0});var ZOr=s(dB);cso=r(ZOr,"CanineModel"),ZOr.forEach(t),fso=r(MMe," (Canine model)"),MMe.forEach(t),mso=i(M),tp=n(M,"LI",{});var EMe=s(tp);Poe=n(EMe,"STRONG",{});var eVr=s(Poe);gso=r(eVr,"clip"),eVr.forEach(t),hso=r(EMe," \u2014 "),cB=n(EMe,"A",{href:!0});var oVr=s(cB);pso=r(oVr,"CLIPModel"),oVr.forEach(t),_so=r(EMe," (CLIP model)"),EMe.forEach(t),uso=i(M),ap=n(M,"LI",{});var CMe=s(ap);$oe=n(CMe,"STRONG",{});var rVr=s($oe);bso=r(rVr,"convbert"),rVr.forEach(t),Fso=r(CMe," \u2014 "),fB=n(CMe,"A",{href:!0});var tVr=s(fB);vso=r(tVr,"ConvBertModel"),tVr.forEach(t),Tso=r(CMe," (ConvBERT model)"),CMe.forEach(t),Mso=i(M),np=n(M,"LI",{});var wMe=s(np);Ioe=n(wMe,"STRONG",{});var aVr=s(Ioe);Eso=r(aVr,"convnext"),aVr.forEach(t),Cso=r(wMe," \u2014 "),mB=n(wMe,"A",{href:!0});var nVr=s(mB);wso=r(nVr,"ConvNextModel"),nVr.forEach(t),Aso=r(wMe," (ConvNext model)"),wMe.forEach(t),yso=i(M),sp=n(M,"LI",{});var AMe=s(sp);qoe=n(AMe,"STRONG",{});var sVr=s(qoe);Lso=r(sVr,"ctrl"),sVr.forEach(t),xso=r(AMe," \u2014 "),gB=n(AMe,"A",{href:!0});var lVr=s(gB);kso=r(lVr,"CTRLModel"),lVr.forEach(t),Sso=r(AMe," (CTRL model)"),AMe.forEach(t),Rso=i(M),lp=n(M,"LI",{});var yMe=s(lp);Noe=n(yMe,"STRONG",{});var iVr=s(Noe);Bso=r(iVr,"data2vec-audio"),iVr.forEach(t),Pso=r(yMe," \u2014 "),hB=n(yMe,"A",{href:!0});var dVr=s(hB);$so=r(dVr,"Data2VecAudioModel"),dVr.forEach(t),Iso=r(yMe," (Data2VecAudio model)"),yMe.forEach(t),qso=i(M),ip=n(M,"LI",{});var LMe=s(ip);joe=n(LMe,"STRONG",{});var cVr=s(joe);Nso=r(cVr,"data2vec-text"),cVr.forEach(t),jso=r(LMe," \u2014 "),pB=n(LMe,"A",{href:!0});var fVr=s(pB);Dso=r(fVr,"Data2VecTextModel"),fVr.forEach(t),Gso=r(LMe," (Data2VecText model)"),LMe.forEach(t),Oso=i(M),dp=n(M,"LI",{});var xMe=s(dp);Doe=n(xMe,"STRONG",{});var mVr=s(Doe);Vso=r(mVr,"deberta"),mVr.forEach(t),Xso=r(xMe," \u2014 "),_B=n(xMe,"A",{href:!0});var gVr=s(_B);zso=r(gVr,"DebertaModel"),gVr.forEach(t),Qso=r(xMe," (DeBERTa model)"),xMe.forEach(t),Wso=i(M),cp=n(M,"LI",{});var kMe=s(cp);Goe=n(kMe,"STRONG",{});var hVr=s(Goe);Hso=r(hVr,"deberta-v2"),hVr.forEach(t),Uso=r(kMe," \u2014 "),uB=n(kMe,"A",{href:!0});var pVr=s(uB);Jso=r(pVr,"DebertaV2Model"),pVr.forEach(t),Yso=r(kMe," (DeBERTa-v2 model)"),kMe.forEach(t),Kso=i(M),fp=n(M,"LI",{});var SMe=s(fp);Ooe=n(SMe,"STRONG",{});var _Vr=s(Ooe);Zso=r(_Vr,"decision_transformer"),_Vr.forEach(t),elo=r(SMe," \u2014 "),bB=n(SMe,"A",{href:!0});var uVr=s(bB);olo=r(uVr,"DecisionTransformerModel"),uVr.forEach(t),rlo=r(SMe," (Decision Transformer model)"),SMe.forEach(t),tlo=i(M),mp=n(M,"LI",{});var RMe=s(mp);Voe=n(RMe,"STRONG",{});var bVr=s(Voe);alo=r(bVr,"deit"),bVr.forEach(t),nlo=r(RMe," \u2014 "),FB=n(RMe,"A",{href:!0});var FVr=s(FB);slo=r(FVr,"DeiTModel"),FVr.forEach(t),llo=r(RMe," (DeiT model)"),RMe.forEach(t),ilo=i(M),gp=n(M,"LI",{});var BMe=s(gp);Xoe=n(BMe,"STRONG",{});var vVr=s(Xoe);dlo=r(vVr,"detr"),vVr.forEach(t),clo=r(BMe," \u2014 "),vB=n(BMe,"A",{href:!0});var TVr=s(vB);flo=r(TVr,"DetrModel"),TVr.forEach(t),mlo=r(BMe," (DETR model)"),BMe.forEach(t),glo=i(M),hp=n(M,"LI",{});var PMe=s(hp);zoe=n(PMe,"STRONG",{});var MVr=s(zoe);hlo=r(MVr,"distilbert"),MVr.forEach(t),plo=r(PMe," \u2014 "),TB=n(PMe,"A",{href:!0});var EVr=s(TB);_lo=r(EVr,"DistilBertModel"),EVr.forEach(t),ulo=r(PMe," (DistilBERT model)"),PMe.forEach(t),blo=i(M),pp=n(M,"LI",{});var $Me=s(pp);Qoe=n($Me,"STRONG",{});var CVr=s(Qoe);Flo=r(CVr,"dpr"),CVr.forEach(t),vlo=r($Me," \u2014 "),MB=n($Me,"A",{href:!0});var wVr=s(MB);Tlo=r(wVr,"DPRQuestionEncoder"),wVr.forEach(t),Mlo=r($Me," (DPR model)"),$Me.forEach(t),Elo=i(M),_p=n(M,"LI",{});var IMe=s(_p);Woe=n(IMe,"STRONG",{});var AVr=s(Woe);Clo=r(AVr,"dpt"),AVr.forEach(t),wlo=r(IMe," \u2014 "),EB=n(IMe,"A",{href:!0});var yVr=s(EB);Alo=r(yVr,"DPTModel"),yVr.forEach(t),ylo=r(IMe," (DPT model)"),IMe.forEach(t),Llo=i(M),up=n(M,"LI",{});var qMe=s(up);Hoe=n(qMe,"STRONG",{});var LVr=s(Hoe);xlo=r(LVr,"electra"),LVr.forEach(t),klo=r(qMe," \u2014 "),CB=n(qMe,"A",{href:!0});var xVr=s(CB);Slo=r(xVr,"ElectraModel"),xVr.forEach(t),Rlo=r(qMe," (ELECTRA model)"),qMe.forEach(t),Blo=i(M),bp=n(M,"LI",{});var NMe=s(bp);Uoe=n(NMe,"STRONG",{});var kVr=s(Uoe);Plo=r(kVr,"flaubert"),kVr.forEach(t),$lo=r(NMe," \u2014 "),wB=n(NMe,"A",{href:!0});var SVr=s(wB);Ilo=r(SVr,"FlaubertModel"),SVr.forEach(t),qlo=r(NMe," (FlauBERT model)"),NMe.forEach(t),Nlo=i(M),Fp=n(M,"LI",{});var jMe=s(Fp);Joe=n(jMe,"STRONG",{});var RVr=s(Joe);jlo=r(RVr,"fnet"),RVr.forEach(t),Dlo=r(jMe," \u2014 "),AB=n(jMe,"A",{href:!0});var BVr=s(AB);Glo=r(BVr,"FNetModel"),BVr.forEach(t),Olo=r(jMe," (FNet model)"),jMe.forEach(t),Vlo=i(M),vp=n(M,"LI",{});var DMe=s(vp);Yoe=n(DMe,"STRONG",{});var PVr=s(Yoe);Xlo=r(PVr,"fsmt"),PVr.forEach(t),zlo=r(DMe," \u2014 "),yB=n(DMe,"A",{href:!0});var $Vr=s(yB);Qlo=r($Vr,"FSMTModel"),$Vr.forEach(t),Wlo=r(DMe," (FairSeq Machine-Translation model)"),DMe.forEach(t),Hlo=i(M),js=n(M,"LI",{});var s9=s(js);Koe=n(s9,"STRONG",{});var IVr=s(Koe);Ulo=r(IVr,"funnel"),IVr.forEach(t),Jlo=r(s9," \u2014 "),LB=n(s9,"A",{href:!0});var qVr=s(LB);Ylo=r(qVr,"FunnelModel"),qVr.forEach(t),Klo=r(s9," or "),xB=n(s9,"A",{href:!0});var NVr=s(xB);Zlo=r(NVr,"FunnelBaseModel"),NVr.forEach(t),eio=r(s9," (Funnel Transformer model)"),s9.forEach(t),oio=i(M),Tp=n(M,"LI",{});var GMe=s(Tp);Zoe=n(GMe,"STRONG",{});var jVr=s(Zoe);rio=r(jVr,"glpn"),jVr.forEach(t),tio=r(GMe," \u2014 "),kB=n(GMe,"A",{href:!0});var DVr=s(kB);aio=r(DVr,"GLPNModel"),DVr.forEach(t),nio=r(GMe," (GLPN model)"),GMe.forEach(t),sio=i(M),Mp=n(M,"LI",{});var OMe=s(Mp);ere=n(OMe,"STRONG",{});var GVr=s(ere);lio=r(GVr,"gpt2"),GVr.forEach(t),iio=r(OMe," \u2014 "),SB=n(OMe,"A",{href:!0});var OVr=s(SB);dio=r(OVr,"GPT2Model"),OVr.forEach(t),cio=r(OMe," (OpenAI GPT-2 model)"),OMe.forEach(t),fio=i(M),Ep=n(M,"LI",{});var VMe=s(Ep);ore=n(VMe,"STRONG",{});var VVr=s(ore);mio=r(VVr,"gpt_neo"),VVr.forEach(t),gio=r(VMe," \u2014 "),RB=n(VMe,"A",{href:!0});var XVr=s(RB);hio=r(XVr,"GPTNeoModel"),XVr.forEach(t),pio=r(VMe," (GPT Neo model)"),VMe.forEach(t),_io=i(M),Cp=n(M,"LI",{});var XMe=s(Cp);rre=n(XMe,"STRONG",{});var zVr=s(rre);uio=r(zVr,"gptj"),zVr.forEach(t),bio=r(XMe," \u2014 "),BB=n(XMe,"A",{href:!0});var QVr=s(BB);Fio=r(QVr,"GPTJModel"),QVr.forEach(t),vio=r(XMe," (GPT-J model)"),XMe.forEach(t),Tio=i(M),wp=n(M,"LI",{});var zMe=s(wp);tre=n(zMe,"STRONG",{});var WVr=s(tre);Mio=r(WVr,"hubert"),WVr.forEach(t),Eio=r(zMe," \u2014 "),PB=n(zMe,"A",{href:!0});var HVr=s(PB);Cio=r(HVr,"HubertModel"),HVr.forEach(t),wio=r(zMe," (Hubert model)"),zMe.forEach(t),Aio=i(M),Ap=n(M,"LI",{});var QMe=s(Ap);are=n(QMe,"STRONG",{});var UVr=s(are);yio=r(UVr,"ibert"),UVr.forEach(t),Lio=r(QMe," \u2014 "),$B=n(QMe,"A",{href:!0});var JVr=s($B);xio=r(JVr,"IBertModel"),JVr.forEach(t),kio=r(QMe," (I-BERT model)"),QMe.forEach(t),Sio=i(M),yp=n(M,"LI",{});var WMe=s(yp);nre=n(WMe,"STRONG",{});var YVr=s(nre);Rio=r(YVr,"imagegpt"),YVr.forEach(t),Bio=r(WMe," \u2014 "),IB=n(WMe,"A",{href:!0});var KVr=s(IB);Pio=r(KVr,"ImageGPTModel"),KVr.forEach(t),$io=r(WMe," (ImageGPT model)"),WMe.forEach(t),Iio=i(M),Lp=n(M,"LI",{});var HMe=s(Lp);sre=n(HMe,"STRONG",{});var ZVr=s(sre);qio=r(ZVr,"layoutlm"),ZVr.forEach(t),Nio=r(HMe," \u2014 "),qB=n(HMe,"A",{href:!0});var eXr=s(qB);jio=r(eXr,"LayoutLMModel"),eXr.forEach(t),Dio=r(HMe," (LayoutLM model)"),HMe.forEach(t),Gio=i(M),xp=n(M,"LI",{});var UMe=s(xp);lre=n(UMe,"STRONG",{});var oXr=s(lre);Oio=r(oXr,"layoutlmv2"),oXr.forEach(t),Vio=r(UMe," \u2014 "),NB=n(UMe,"A",{href:!0});var rXr=s(NB);Xio=r(rXr,"LayoutLMv2Model"),rXr.forEach(t),zio=r(UMe," (LayoutLMv2 model)"),UMe.forEach(t),Qio=i(M),kp=n(M,"LI",{});var JMe=s(kp);ire=n(JMe,"STRONG",{});var tXr=s(ire);Wio=r(tXr,"led"),tXr.forEach(t),Hio=r(JMe," \u2014 "),jB=n(JMe,"A",{href:!0});var aXr=s(jB);Uio=r(aXr,"LEDModel"),aXr.forEach(t),Jio=r(JMe," (LED model)"),JMe.forEach(t),Yio=i(M),Sp=n(M,"LI",{});var YMe=s(Sp);dre=n(YMe,"STRONG",{});var nXr=s(dre);Kio=r(nXr,"longformer"),nXr.forEach(t),Zio=r(YMe," \u2014 "),DB=n(YMe,"A",{href:!0});var sXr=s(DB);edo=r(sXr,"LongformerModel"),sXr.forEach(t),odo=r(YMe," (Longformer model)"),YMe.forEach(t),rdo=i(M),Rp=n(M,"LI",{});var KMe=s(Rp);cre=n(KMe,"STRONG",{});var lXr=s(cre);tdo=r(lXr,"luke"),lXr.forEach(t),ado=r(KMe," \u2014 "),GB=n(KMe,"A",{href:!0});var iXr=s(GB);ndo=r(iXr,"LukeModel"),iXr.forEach(t),sdo=r(KMe," (LUKE model)"),KMe.forEach(t),ldo=i(M),Bp=n(M,"LI",{});var ZMe=s(Bp);fre=n(ZMe,"STRONG",{});var dXr=s(fre);ido=r(dXr,"lxmert"),dXr.forEach(t),ddo=r(ZMe," \u2014 "),OB=n(ZMe,"A",{href:!0});var cXr=s(OB);cdo=r(cXr,"LxmertModel"),cXr.forEach(t),fdo=r(ZMe," (LXMERT model)"),ZMe.forEach(t),mdo=i(M),Pp=n(M,"LI",{});var eEe=s(Pp);mre=n(eEe,"STRONG",{});var fXr=s(mre);gdo=r(fXr,"m2m_100"),fXr.forEach(t),hdo=r(eEe," \u2014 "),VB=n(eEe,"A",{href:!0});var mXr=s(VB);pdo=r(mXr,"M2M100Model"),mXr.forEach(t),_do=r(eEe," (M2M100 model)"),eEe.forEach(t),udo=i(M),$p=n(M,"LI",{});var oEe=s($p);gre=n(oEe,"STRONG",{});var gXr=s(gre);bdo=r(gXr,"marian"),gXr.forEach(t),Fdo=r(oEe," \u2014 "),XB=n(oEe,"A",{href:!0});var hXr=s(XB);vdo=r(hXr,"MarianModel"),hXr.forEach(t),Tdo=r(oEe," (Marian model)"),oEe.forEach(t),Mdo=i(M),Ip=n(M,"LI",{});var rEe=s(Ip);hre=n(rEe,"STRONG",{});var pXr=s(hre);Edo=r(pXr,"maskformer"),pXr.forEach(t),Cdo=r(rEe," \u2014 "),zB=n(rEe,"A",{href:!0});var _Xr=s(zB);wdo=r(_Xr,"MaskFormerModel"),_Xr.forEach(t),Ado=r(rEe," (MaskFormer model)"),rEe.forEach(t),ydo=i(M),qp=n(M,"LI",{});var tEe=s(qp);pre=n(tEe,"STRONG",{});var uXr=s(pre);Ldo=r(uXr,"mbart"),uXr.forEach(t),xdo=r(tEe," \u2014 "),QB=n(tEe,"A",{href:!0});var bXr=s(QB);kdo=r(bXr,"MBartModel"),bXr.forEach(t),Sdo=r(tEe," (mBART model)"),tEe.forEach(t),Rdo=i(M),Np=n(M,"LI",{});var aEe=s(Np);_re=n(aEe,"STRONG",{});var FXr=s(_re);Bdo=r(FXr,"megatron-bert"),FXr.forEach(t),Pdo=r(aEe," \u2014 "),WB=n(aEe,"A",{href:!0});var vXr=s(WB);$do=r(vXr,"MegatronBertModel"),vXr.forEach(t),Ido=r(aEe," (MegatronBert model)"),aEe.forEach(t),qdo=i(M),jp=n(M,"LI",{});var nEe=s(jp);ure=n(nEe,"STRONG",{});var TXr=s(ure);Ndo=r(TXr,"mobilebert"),TXr.forEach(t),jdo=r(nEe," \u2014 "),HB=n(nEe,"A",{href:!0});var MXr=s(HB);Ddo=r(MXr,"MobileBertModel"),MXr.forEach(t),Gdo=r(nEe," (MobileBERT model)"),nEe.forEach(t),Odo=i(M),Dp=n(M,"LI",{});var sEe=s(Dp);bre=n(sEe,"STRONG",{});var EXr=s(bre);Vdo=r(EXr,"mpnet"),EXr.forEach(t),Xdo=r(sEe," \u2014 "),UB=n(sEe,"A",{href:!0});var CXr=s(UB);zdo=r(CXr,"MPNetModel"),CXr.forEach(t),Qdo=r(sEe," (MPNet model)"),sEe.forEach(t),Wdo=i(M),Gp=n(M,"LI",{});var lEe=s(Gp);Fre=n(lEe,"STRONG",{});var wXr=s(Fre);Hdo=r(wXr,"mt5"),wXr.forEach(t),Udo=r(lEe," \u2014 "),JB=n(lEe,"A",{href:!0});var AXr=s(JB);Jdo=r(AXr,"MT5Model"),AXr.forEach(t),Ydo=r(lEe," (mT5 model)"),lEe.forEach(t),Kdo=i(M),Op=n(M,"LI",{});var iEe=s(Op);vre=n(iEe,"STRONG",{});var yXr=s(vre);Zdo=r(yXr,"nystromformer"),yXr.forEach(t),eco=r(iEe," \u2014 "),YB=n(iEe,"A",{href:!0});var LXr=s(YB);oco=r(LXr,"NystromformerModel"),LXr.forEach(t),rco=r(iEe," (Nystromformer model)"),iEe.forEach(t),tco=i(M),Vp=n(M,"LI",{});var dEe=s(Vp);Tre=n(dEe,"STRONG",{});var xXr=s(Tre);aco=r(xXr,"openai-gpt"),xXr.forEach(t),nco=r(dEe," \u2014 "),KB=n(dEe,"A",{href:!0});var kXr=s(KB);sco=r(kXr,"OpenAIGPTModel"),kXr.forEach(t),lco=r(dEe," (OpenAI GPT model)"),dEe.forEach(t),ico=i(M),Xp=n(M,"LI",{});var cEe=s(Xp);Mre=n(cEe,"STRONG",{});var SXr=s(Mre);dco=r(SXr,"pegasus"),SXr.forEach(t),cco=r(cEe," \u2014 "),ZB=n(cEe,"A",{href:!0});var RXr=s(ZB);fco=r(RXr,"PegasusModel"),RXr.forEach(t),mco=r(cEe," (Pegasus model)"),cEe.forEach(t),gco=i(M),zp=n(M,"LI",{});var fEe=s(zp);Ere=n(fEe,"STRONG",{});var BXr=s(Ere);hco=r(BXr,"perceiver"),BXr.forEach(t),pco=r(fEe," \u2014 "),eP=n(fEe,"A",{href:!0});var PXr=s(eP);_co=r(PXr,"PerceiverModel"),PXr.forEach(t),uco=r(fEe," (Perceiver model)"),fEe.forEach(t),bco=i(M),Qp=n(M,"LI",{});var mEe=s(Qp);Cre=n(mEe,"STRONG",{});var $Xr=s(Cre);Fco=r($Xr,"plbart"),$Xr.forEach(t),vco=r(mEe," \u2014 "),oP=n(mEe,"A",{href:!0});var IXr=s(oP);Tco=r(IXr,"PLBartModel"),IXr.forEach(t),Mco=r(mEe," (PLBart model)"),mEe.forEach(t),Eco=i(M),Wp=n(M,"LI",{});var gEe=s(Wp);wre=n(gEe,"STRONG",{});var qXr=s(wre);Cco=r(qXr,"poolformer"),qXr.forEach(t),wco=r(gEe," \u2014 "),rP=n(gEe,"A",{href:!0});var NXr=s(rP);Aco=r(NXr,"PoolFormerModel"),NXr.forEach(t),yco=r(gEe," (PoolFormer model)"),gEe.forEach(t),Lco=i(M),Hp=n(M,"LI",{});var hEe=s(Hp);Are=n(hEe,"STRONG",{});var jXr=s(Are);xco=r(jXr,"prophetnet"),jXr.forEach(t),kco=r(hEe," \u2014 "),tP=n(hEe,"A",{href:!0});var DXr=s(tP);Sco=r(DXr,"ProphetNetModel"),DXr.forEach(t),Rco=r(hEe," (ProphetNet model)"),hEe.forEach(t),Bco=i(M),Up=n(M,"LI",{});var pEe=s(Up);yre=n(pEe,"STRONG",{});var GXr=s(yre);Pco=r(GXr,"qdqbert"),GXr.forEach(t),$co=r(pEe," \u2014 "),aP=n(pEe,"A",{href:!0});var OXr=s(aP);Ico=r(OXr,"QDQBertModel"),OXr.forEach(t),qco=r(pEe," (QDQBert model)"),pEe.forEach(t),Nco=i(M),Jp=n(M,"LI",{});var _Ee=s(Jp);Lre=n(_Ee,"STRONG",{});var VXr=s(Lre);jco=r(VXr,"reformer"),VXr.forEach(t),Dco=r(_Ee," \u2014 "),nP=n(_Ee,"A",{href:!0});var XXr=s(nP);Gco=r(XXr,"ReformerModel"),XXr.forEach(t),Oco=r(_Ee," (Reformer model)"),_Ee.forEach(t),Vco=i(M),Yp=n(M,"LI",{});var uEe=s(Yp);xre=n(uEe,"STRONG",{});var zXr=s(xre);Xco=r(zXr,"rembert"),zXr.forEach(t),zco=r(uEe," \u2014 "),sP=n(uEe,"A",{href:!0});var QXr=s(sP);Qco=r(QXr,"RemBertModel"),QXr.forEach(t),Wco=r(uEe," (RemBERT model)"),uEe.forEach(t),Hco=i(M),Kp=n(M,"LI",{});var bEe=s(Kp);kre=n(bEe,"STRONG",{});var WXr=s(kre);Uco=r(WXr,"resnet"),WXr.forEach(t),Jco=r(bEe," \u2014 "),lP=n(bEe,"A",{href:!0});var HXr=s(lP);Yco=r(HXr,"ResNetModel"),HXr.forEach(t),Kco=r(bEe," (ResNet model)"),bEe.forEach(t),Zco=i(M),Zp=n(M,"LI",{});var FEe=s(Zp);Sre=n(FEe,"STRONG",{});var UXr=s(Sre);efo=r(UXr,"retribert"),UXr.forEach(t),ofo=r(FEe," \u2014 "),iP=n(FEe,"A",{href:!0});var JXr=s(iP);rfo=r(JXr,"RetriBertModel"),JXr.forEach(t),tfo=r(FEe," (RetriBERT model)"),FEe.forEach(t),afo=i(M),e_=n(M,"LI",{});var vEe=s(e_);Rre=n(vEe,"STRONG",{});var YXr=s(Rre);nfo=r(YXr,"roberta"),YXr.forEach(t),sfo=r(vEe," \u2014 "),dP=n(vEe,"A",{href:!0});var KXr=s(dP);lfo=r(KXr,"RobertaModel"),KXr.forEach(t),ifo=r(vEe," (RoBERTa model)"),vEe.forEach(t),dfo=i(M),o_=n(M,"LI",{});var TEe=s(o_);Bre=n(TEe,"STRONG",{});var ZXr=s(Bre);cfo=r(ZXr,"roformer"),ZXr.forEach(t),ffo=r(TEe," \u2014 "),cP=n(TEe,"A",{href:!0});var ezr=s(cP);mfo=r(ezr,"RoFormerModel"),ezr.forEach(t),gfo=r(TEe," (RoFormer model)"),TEe.forEach(t),hfo=i(M),r_=n(M,"LI",{});var MEe=s(r_);Pre=n(MEe,"STRONG",{});var ozr=s(Pre);pfo=r(ozr,"segformer"),ozr.forEach(t),_fo=r(MEe," \u2014 "),fP=n(MEe,"A",{href:!0});var rzr=s(fP);ufo=r(rzr,"SegformerModel"),rzr.forEach(t),bfo=r(MEe," (SegFormer model)"),MEe.forEach(t),Ffo=i(M),t_=n(M,"LI",{});var EEe=s(t_);$re=n(EEe,"STRONG",{});var tzr=s($re);vfo=r(tzr,"sew"),tzr.forEach(t),Tfo=r(EEe," \u2014 "),mP=n(EEe,"A",{href:!0});var azr=s(mP);Mfo=r(azr,"SEWModel"),azr.forEach(t),Efo=r(EEe," (SEW model)"),EEe.forEach(t),Cfo=i(M),a_=n(M,"LI",{});var CEe=s(a_);Ire=n(CEe,"STRONG",{});var nzr=s(Ire);wfo=r(nzr,"sew-d"),nzr.forEach(t),Afo=r(CEe," \u2014 "),gP=n(CEe,"A",{href:!0});var szr=s(gP);yfo=r(szr,"SEWDModel"),szr.forEach(t),Lfo=r(CEe," (SEW-D model)"),CEe.forEach(t),xfo=i(M),n_=n(M,"LI",{});var wEe=s(n_);qre=n(wEe,"STRONG",{});var lzr=s(qre);kfo=r(lzr,"speech_to_text"),lzr.forEach(t),Sfo=r(wEe," \u2014 "),hP=n(wEe,"A",{href:!0});var izr=s(hP);Rfo=r(izr,"Speech2TextModel"),izr.forEach(t),Bfo=r(wEe," (Speech2Text model)"),wEe.forEach(t),Pfo=i(M),s_=n(M,"LI",{});var AEe=s(s_);Nre=n(AEe,"STRONG",{});var dzr=s(Nre);$fo=r(dzr,"splinter"),dzr.forEach(t),Ifo=r(AEe," \u2014 "),pP=n(AEe,"A",{href:!0});var czr=s(pP);qfo=r(czr,"SplinterModel"),czr.forEach(t),Nfo=r(AEe," (Splinter model)"),AEe.forEach(t),jfo=i(M),l_=n(M,"LI",{});var yEe=s(l_);jre=n(yEe,"STRONG",{});var fzr=s(jre);Dfo=r(fzr,"squeezebert"),fzr.forEach(t),Gfo=r(yEe," \u2014 "),_P=n(yEe,"A",{href:!0});var mzr=s(_P);Ofo=r(mzr,"SqueezeBertModel"),mzr.forEach(t),Vfo=r(yEe," (SqueezeBERT model)"),yEe.forEach(t),Xfo=i(M),i_=n(M,"LI",{});var LEe=s(i_);Dre=n(LEe,"STRONG",{});var gzr=s(Dre);zfo=r(gzr,"swin"),gzr.forEach(t),Qfo=r(LEe," \u2014 "),uP=n(LEe,"A",{href:!0});var hzr=s(uP);Wfo=r(hzr,"SwinModel"),hzr.forEach(t),Hfo=r(LEe," (Swin model)"),LEe.forEach(t),Ufo=i(M),d_=n(M,"LI",{});var xEe=s(d_);Gre=n(xEe,"STRONG",{});var pzr=s(Gre);Jfo=r(pzr,"t5"),pzr.forEach(t),Yfo=r(xEe," \u2014 "),bP=n(xEe,"A",{href:!0});var _zr=s(bP);Kfo=r(_zr,"T5Model"),_zr.forEach(t),Zfo=r(xEe," (T5 model)"),xEe.forEach(t),emo=i(M),c_=n(M,"LI",{});var kEe=s(c_);Ore=n(kEe,"STRONG",{});var uzr=s(Ore);omo=r(uzr,"tapas"),uzr.forEach(t),rmo=r(kEe," \u2014 "),FP=n(kEe,"A",{href:!0});var bzr=s(FP);tmo=r(bzr,"TapasModel"),bzr.forEach(t),amo=r(kEe," (TAPAS model)"),kEe.forEach(t),nmo=i(M),f_=n(M,"LI",{});var SEe=s(f_);Vre=n(SEe,"STRONG",{});var Fzr=s(Vre);smo=r(Fzr,"transfo-xl"),Fzr.forEach(t),lmo=r(SEe," \u2014 "),vP=n(SEe,"A",{href:!0});var vzr=s(vP);imo=r(vzr,"TransfoXLModel"),vzr.forEach(t),dmo=r(SEe," (Transformer-XL model)"),SEe.forEach(t),cmo=i(M),m_=n(M,"LI",{});var REe=s(m_);Xre=n(REe,"STRONG",{});var Tzr=s(Xre);fmo=r(Tzr,"unispeech"),Tzr.forEach(t),mmo=r(REe," \u2014 "),TP=n(REe,"A",{href:!0});var Mzr=s(TP);gmo=r(Mzr,"UniSpeechModel"),Mzr.forEach(t),hmo=r(REe," (UniSpeech model)"),REe.forEach(t),pmo=i(M),g_=n(M,"LI",{});var BEe=s(g_);zre=n(BEe,"STRONG",{});var Ezr=s(zre);_mo=r(Ezr,"unispeech-sat"),Ezr.forEach(t),umo=r(BEe," \u2014 "),MP=n(BEe,"A",{href:!0});var Czr=s(MP);bmo=r(Czr,"UniSpeechSatModel"),Czr.forEach(t),Fmo=r(BEe," (UniSpeechSat model)"),BEe.forEach(t),vmo=i(M),h_=n(M,"LI",{});var PEe=s(h_);Qre=n(PEe,"STRONG",{});var wzr=s(Qre);Tmo=r(wzr,"van"),wzr.forEach(t),Mmo=r(PEe," \u2014 "),EP=n(PEe,"A",{href:!0});var Azr=s(EP);Emo=r(Azr,"VanModel"),Azr.forEach(t),Cmo=r(PEe," (VAN model)"),PEe.forEach(t),wmo=i(M),p_=n(M,"LI",{});var $Ee=s(p_);Wre=n($Ee,"STRONG",{});var yzr=s(Wre);Amo=r(yzr,"vilt"),yzr.forEach(t),ymo=r($Ee," \u2014 "),CP=n($Ee,"A",{href:!0});var Lzr=s(CP);Lmo=r(Lzr,"ViltModel"),Lzr.forEach(t),xmo=r($Ee," (ViLT model)"),$Ee.forEach(t),kmo=i(M),__=n(M,"LI",{});var IEe=s(__);Hre=n(IEe,"STRONG",{});var xzr=s(Hre);Smo=r(xzr,"vision-text-dual-encoder"),xzr.forEach(t),Rmo=r(IEe," \u2014 "),wP=n(IEe,"A",{href:!0});var kzr=s(wP);Bmo=r(kzr,"VisionTextDualEncoderModel"),kzr.forEach(t),Pmo=r(IEe," (VisionTextDualEncoder model)"),IEe.forEach(t),$mo=i(M),u_=n(M,"LI",{});var qEe=s(u_);Ure=n(qEe,"STRONG",{});var Szr=s(Ure);Imo=r(Szr,"visual_bert"),Szr.forEach(t),qmo=r(qEe," \u2014 "),AP=n(qEe,"A",{href:!0});var Rzr=s(AP);Nmo=r(Rzr,"VisualBertModel"),Rzr.forEach(t),jmo=r(qEe," (VisualBert model)"),qEe.forEach(t),Dmo=i(M),b_=n(M,"LI",{});var NEe=s(b_);Jre=n(NEe,"STRONG",{});var Bzr=s(Jre);Gmo=r(Bzr,"vit"),Bzr.forEach(t),Omo=r(NEe," \u2014 "),yP=n(NEe,"A",{href:!0});var Pzr=s(yP);Vmo=r(Pzr,"ViTModel"),Pzr.forEach(t),Xmo=r(NEe," (ViT model)"),NEe.forEach(t),zmo=i(M),F_=n(M,"LI",{});var jEe=s(F_);Yre=n(jEe,"STRONG",{});var $zr=s(Yre);Qmo=r($zr,"vit_mae"),$zr.forEach(t),Wmo=r(jEe," \u2014 "),LP=n(jEe,"A",{href:!0});var Izr=s(LP);Hmo=r(Izr,"ViTMAEModel"),Izr.forEach(t),Umo=r(jEe," (ViTMAE model)"),jEe.forEach(t),Jmo=i(M),v_=n(M,"LI",{});var DEe=s(v_);Kre=n(DEe,"STRONG",{});var qzr=s(Kre);Ymo=r(qzr,"wav2vec2"),qzr.forEach(t),Kmo=r(DEe," \u2014 "),xP=n(DEe,"A",{href:!0});var Nzr=s(xP);Zmo=r(Nzr,"Wav2Vec2Model"),Nzr.forEach(t),ego=r(DEe," (Wav2Vec2 model)"),DEe.forEach(t),ogo=i(M),T_=n(M,"LI",{});var GEe=s(T_);Zre=n(GEe,"STRONG",{});var jzr=s(Zre);rgo=r(jzr,"wavlm"),jzr.forEach(t),tgo=r(GEe," \u2014 "),kP=n(GEe,"A",{href:!0});var Dzr=s(kP);ago=r(Dzr,"WavLMModel"),Dzr.forEach(t),ngo=r(GEe," (WavLM model)"),GEe.forEach(t),sgo=i(M),M_=n(M,"LI",{});var OEe=s(M_);ete=n(OEe,"STRONG",{});var Gzr=s(ete);lgo=r(Gzr,"xglm"),Gzr.forEach(t),igo=r(OEe," \u2014 "),SP=n(OEe,"A",{href:!0});var Ozr=s(SP);dgo=r(Ozr,"XGLMModel"),Ozr.forEach(t),cgo=r(OEe," (XGLM model)"),OEe.forEach(t),fgo=i(M),E_=n(M,"LI",{});var VEe=s(E_);ote=n(VEe,"STRONG",{});var Vzr=s(ote);mgo=r(Vzr,"xlm"),Vzr.forEach(t),ggo=r(VEe," \u2014 "),RP=n(VEe,"A",{href:!0});var Xzr=s(RP);hgo=r(Xzr,"XLMModel"),Xzr.forEach(t),pgo=r(VEe," (XLM model)"),VEe.forEach(t),_go=i(M),C_=n(M,"LI",{});var XEe=s(C_);rte=n(XEe,"STRONG",{});var zzr=s(rte);ugo=r(zzr,"xlm-prophetnet"),zzr.forEach(t),bgo=r(XEe," \u2014 "),BP=n(XEe,"A",{href:!0});var Qzr=s(BP);Fgo=r(Qzr,"XLMProphetNetModel"),Qzr.forEach(t),vgo=r(XEe," (XLMProphetNet model)"),XEe.forEach(t),Tgo=i(M),w_=n(M,"LI",{});var zEe=s(w_);tte=n(zEe,"STRONG",{});var Wzr=s(tte);Mgo=r(Wzr,"xlm-roberta"),Wzr.forEach(t),Ego=r(zEe," \u2014 "),PP=n(zEe,"A",{href:!0});var Hzr=s(PP);Cgo=r(Hzr,"XLMRobertaModel"),Hzr.forEach(t),wgo=r(zEe," (XLM-RoBERTa model)"),zEe.forEach(t),Ago=i(M),A_=n(M,"LI",{});var QEe=s(A_);ate=n(QEe,"STRONG",{});var Uzr=s(ate);ygo=r(Uzr,"xlm-roberta-xl"),Uzr.forEach(t),Lgo=r(QEe," \u2014 "),$P=n(QEe,"A",{href:!0});var Jzr=s($P);xgo=r(Jzr,"XLMRobertaXLModel"),Jzr.forEach(t),kgo=r(QEe," (XLM-RoBERTa-XL model)"),QEe.forEach(t),Sgo=i(M),y_=n(M,"LI",{});var WEe=s(y_);nte=n(WEe,"STRONG",{});var Yzr=s(nte);Rgo=r(Yzr,"xlnet"),Yzr.forEach(t),Bgo=r(WEe," \u2014 "),IP=n(WEe,"A",{href:!0});var Kzr=s(IP);Pgo=r(Kzr,"XLNetModel"),Kzr.forEach(t),$go=r(WEe," (XLNet model)"),WEe.forEach(t),Igo=i(M),L_=n(M,"LI",{});var HEe=s(L_);ste=n(HEe,"STRONG",{});var Zzr=s(ste);qgo=r(Zzr,"yoso"),Zzr.forEach(t),Ngo=r(HEe," \u2014 "),qP=n(HEe,"A",{href:!0});var eQr=s(qP);jgo=r(eQr,"YosoModel"),eQr.forEach(t),Dgo=r(HEe," (YOSO model)"),HEe.forEach(t),M.forEach(t),Ggo=i(Dt),x_=n(Dt,"P",{});var UEe=s(x_);Ogo=r(UEe,"The model is set in evaluation mode by default using "),lte=n(UEe,"CODE",{});var oQr=s(lte);Vgo=r(oQr,"model.eval()"),oQr.forEach(t),Xgo=r(UEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ite=n(UEe,"CODE",{});var rQr=s(ite);zgo=r(rQr,"model.train()"),rQr.forEach(t),UEe.forEach(t),Qgo=i(Dt),dte=n(Dt,"P",{});var tQr=s(dte);Wgo=r(tQr,"Examples:"),tQr.forEach(t),Hgo=i(Dt),m(tw.$$.fragment,Dt),Dt.forEach(t),Qs.forEach(t),sRe=i(c),Zi=n(c,"H2",{class:!0});var pPe=s(Zi);k_=n(pPe,"A",{id:!0,class:!0,href:!0});var aQr=s(k_);cte=n(aQr,"SPAN",{});var nQr=s(cte);m(aw.$$.fragment,nQr),nQr.forEach(t),aQr.forEach(t),Ugo=i(pPe),fte=n(pPe,"SPAN",{});var sQr=s(fte);Jgo=r(sQr,"AutoModelForPreTraining"),sQr.forEach(t),pPe.forEach(t),lRe=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(nw.$$.fragment,Hs),Ygo=i(Hs),ed=n(Hs,"P",{});var oU=s(ed);Kgo=r(oU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NP=n(oU,"A",{href:!0});var lQr=s(NP);Zgo=r(lQr,"from_pretrained()"),lQr.forEach(t),eho=r(oU," class method or the "),jP=n(oU,"A",{href:!0});var iQr=s(jP);oho=r(iQr,"from_config()"),iQr.forEach(t),rho=r(oU,` class
method.`),oU.forEach(t),tho=i(Hs),sw=n(Hs,"P",{});var _Pe=s(sw);aho=r(_Pe,"This class cannot be instantiated directly using "),mte=n(_Pe,"CODE",{});var dQr=s(mte);nho=r(dQr,"__init__()"),dQr.forEach(t),sho=r(_Pe," (throws an error)."),_Pe.forEach(t),lho=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(lw.$$.fragment,Us),iho=i(Us),gte=n(Us,"P",{});var cQr=s(gte);dho=r(cQr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cQr.forEach(t),cho=i(Us),od=n(Us,"P",{});var rU=s(od);fho=r(rU,`Note:
Loading a model from its configuration file does `),hte=n(rU,"STRONG",{});var fQr=s(hte);mho=r(fQr,"not"),fQr.forEach(t),gho=r(rU,` load the model weights. It only affects the
model\u2019s configuration. Use `),DP=n(rU,"A",{href:!0});var mQr=s(DP);hho=r(mQr,"from_pretrained()"),mQr.forEach(t),pho=r(rU," to load the model weights."),rU.forEach(t),_ho=i(Us),pte=n(Us,"P",{});var gQr=s(pte);uho=r(gQr,"Examples:"),gQr.forEach(t),bho=i(Us),m(iw.$$.fragment,Us),Us.forEach(t),Fho=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);m(dw.$$.fragment,Gt),vho=i(Gt),_te=n(Gt,"P",{});var hQr=s(_te);Tho=r(hQr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hQr.forEach(t),Mho=i(Gt),za=n(Gt,"P",{});var ME=s(za);Eho=r(ME,"The model class to instantiate is selected based on the "),ute=n(ME,"CODE",{});var pQr=s(ute);Cho=r(pQr,"model_type"),pQr.forEach(t),who=r(ME,` property of the config object (either
passed as an argument or loaded from `),bte=n(ME,"CODE",{});var _Qr=s(bte);Aho=r(_Qr,"pretrained_model_name_or_path"),_Qr.forEach(t),yho=r(ME,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fte=n(ME,"CODE",{});var uQr=s(Fte);Lho=r(uQr,"pretrained_model_name_or_path"),uQr.forEach(t),xho=r(ME,":"),ME.forEach(t),kho=i(Gt),S=n(Gt,"UL",{});var B=s(S);S_=n(B,"LI",{});var JEe=s(S_);vte=n(JEe,"STRONG",{});var bQr=s(vte);Sho=r(bQr,"albert"),bQr.forEach(t),Rho=r(JEe," \u2014 "),GP=n(JEe,"A",{href:!0});var FQr=s(GP);Bho=r(FQr,"AlbertForPreTraining"),FQr.forEach(t),Pho=r(JEe," (ALBERT model)"),JEe.forEach(t),$ho=i(B),R_=n(B,"LI",{});var YEe=s(R_);Tte=n(YEe,"STRONG",{});var vQr=s(Tte);Iho=r(vQr,"bart"),vQr.forEach(t),qho=r(YEe," \u2014 "),OP=n(YEe,"A",{href:!0});var TQr=s(OP);Nho=r(TQr,"BartForConditionalGeneration"),TQr.forEach(t),jho=r(YEe," (BART model)"),YEe.forEach(t),Dho=i(B),B_=n(B,"LI",{});var KEe=s(B_);Mte=n(KEe,"STRONG",{});var MQr=s(Mte);Gho=r(MQr,"bert"),MQr.forEach(t),Oho=r(KEe," \u2014 "),VP=n(KEe,"A",{href:!0});var EQr=s(VP);Vho=r(EQr,"BertForPreTraining"),EQr.forEach(t),Xho=r(KEe," (BERT model)"),KEe.forEach(t),zho=i(B),P_=n(B,"LI",{});var ZEe=s(P_);Ete=n(ZEe,"STRONG",{});var CQr=s(Ete);Qho=r(CQr,"big_bird"),CQr.forEach(t),Who=r(ZEe," \u2014 "),XP=n(ZEe,"A",{href:!0});var wQr=s(XP);Hho=r(wQr,"BigBirdForPreTraining"),wQr.forEach(t),Uho=r(ZEe," (BigBird model)"),ZEe.forEach(t),Jho=i(B),$_=n(B,"LI",{});var eCe=s($_);Cte=n(eCe,"STRONG",{});var AQr=s(Cte);Yho=r(AQr,"camembert"),AQr.forEach(t),Kho=r(eCe," \u2014 "),zP=n(eCe,"A",{href:!0});var yQr=s(zP);Zho=r(yQr,"CamembertForMaskedLM"),yQr.forEach(t),epo=r(eCe," (CamemBERT model)"),eCe.forEach(t),opo=i(B),I_=n(B,"LI",{});var oCe=s(I_);wte=n(oCe,"STRONG",{});var LQr=s(wte);rpo=r(LQr,"ctrl"),LQr.forEach(t),tpo=r(oCe," \u2014 "),QP=n(oCe,"A",{href:!0});var xQr=s(QP);apo=r(xQr,"CTRLLMHeadModel"),xQr.forEach(t),npo=r(oCe," (CTRL model)"),oCe.forEach(t),spo=i(B),q_=n(B,"LI",{});var rCe=s(q_);Ate=n(rCe,"STRONG",{});var kQr=s(Ate);lpo=r(kQr,"data2vec-text"),kQr.forEach(t),ipo=r(rCe," \u2014 "),WP=n(rCe,"A",{href:!0});var SQr=s(WP);dpo=r(SQr,"Data2VecTextForMaskedLM"),SQr.forEach(t),cpo=r(rCe," (Data2VecText model)"),rCe.forEach(t),fpo=i(B),N_=n(B,"LI",{});var tCe=s(N_);yte=n(tCe,"STRONG",{});var RQr=s(yte);mpo=r(RQr,"deberta"),RQr.forEach(t),gpo=r(tCe," \u2014 "),HP=n(tCe,"A",{href:!0});var BQr=s(HP);hpo=r(BQr,"DebertaForMaskedLM"),BQr.forEach(t),ppo=r(tCe," (DeBERTa model)"),tCe.forEach(t),_po=i(B),j_=n(B,"LI",{});var aCe=s(j_);Lte=n(aCe,"STRONG",{});var PQr=s(Lte);upo=r(PQr,"deberta-v2"),PQr.forEach(t),bpo=r(aCe," \u2014 "),UP=n(aCe,"A",{href:!0});var $Qr=s(UP);Fpo=r($Qr,"DebertaV2ForMaskedLM"),$Qr.forEach(t),vpo=r(aCe," (DeBERTa-v2 model)"),aCe.forEach(t),Tpo=i(B),D_=n(B,"LI",{});var nCe=s(D_);xte=n(nCe,"STRONG",{});var IQr=s(xte);Mpo=r(IQr,"distilbert"),IQr.forEach(t),Epo=r(nCe," \u2014 "),JP=n(nCe,"A",{href:!0});var qQr=s(JP);Cpo=r(qQr,"DistilBertForMaskedLM"),qQr.forEach(t),wpo=r(nCe," (DistilBERT model)"),nCe.forEach(t),Apo=i(B),G_=n(B,"LI",{});var sCe=s(G_);kte=n(sCe,"STRONG",{});var NQr=s(kte);ypo=r(NQr,"electra"),NQr.forEach(t),Lpo=r(sCe," \u2014 "),YP=n(sCe,"A",{href:!0});var jQr=s(YP);xpo=r(jQr,"ElectraForPreTraining"),jQr.forEach(t),kpo=r(sCe," (ELECTRA model)"),sCe.forEach(t),Spo=i(B),O_=n(B,"LI",{});var lCe=s(O_);Ste=n(lCe,"STRONG",{});var DQr=s(Ste);Rpo=r(DQr,"flaubert"),DQr.forEach(t),Bpo=r(lCe," \u2014 "),KP=n(lCe,"A",{href:!0});var GQr=s(KP);Ppo=r(GQr,"FlaubertWithLMHeadModel"),GQr.forEach(t),$po=r(lCe," (FlauBERT model)"),lCe.forEach(t),Ipo=i(B),V_=n(B,"LI",{});var iCe=s(V_);Rte=n(iCe,"STRONG",{});var OQr=s(Rte);qpo=r(OQr,"fnet"),OQr.forEach(t),Npo=r(iCe," \u2014 "),ZP=n(iCe,"A",{href:!0});var VQr=s(ZP);jpo=r(VQr,"FNetForPreTraining"),VQr.forEach(t),Dpo=r(iCe," (FNet model)"),iCe.forEach(t),Gpo=i(B),X_=n(B,"LI",{});var dCe=s(X_);Bte=n(dCe,"STRONG",{});var XQr=s(Bte);Opo=r(XQr,"fsmt"),XQr.forEach(t),Vpo=r(dCe," \u2014 "),e$=n(dCe,"A",{href:!0});var zQr=s(e$);Xpo=r(zQr,"FSMTForConditionalGeneration"),zQr.forEach(t),zpo=r(dCe," (FairSeq Machine-Translation model)"),dCe.forEach(t),Qpo=i(B),z_=n(B,"LI",{});var cCe=s(z_);Pte=n(cCe,"STRONG",{});var QQr=s(Pte);Wpo=r(QQr,"funnel"),QQr.forEach(t),Hpo=r(cCe," \u2014 "),o$=n(cCe,"A",{href:!0});var WQr=s(o$);Upo=r(WQr,"FunnelForPreTraining"),WQr.forEach(t),Jpo=r(cCe," (Funnel Transformer model)"),cCe.forEach(t),Ypo=i(B),Q_=n(B,"LI",{});var fCe=s(Q_);$te=n(fCe,"STRONG",{});var HQr=s($te);Kpo=r(HQr,"gpt2"),HQr.forEach(t),Zpo=r(fCe," \u2014 "),r$=n(fCe,"A",{href:!0});var UQr=s(r$);e_o=r(UQr,"GPT2LMHeadModel"),UQr.forEach(t),o_o=r(fCe," (OpenAI GPT-2 model)"),fCe.forEach(t),r_o=i(B),W_=n(B,"LI",{});var mCe=s(W_);Ite=n(mCe,"STRONG",{});var JQr=s(Ite);t_o=r(JQr,"ibert"),JQr.forEach(t),a_o=r(mCe," \u2014 "),t$=n(mCe,"A",{href:!0});var YQr=s(t$);n_o=r(YQr,"IBertForMaskedLM"),YQr.forEach(t),s_o=r(mCe," (I-BERT model)"),mCe.forEach(t),l_o=i(B),H_=n(B,"LI",{});var gCe=s(H_);qte=n(gCe,"STRONG",{});var KQr=s(qte);i_o=r(KQr,"layoutlm"),KQr.forEach(t),d_o=r(gCe," \u2014 "),a$=n(gCe,"A",{href:!0});var ZQr=s(a$);c_o=r(ZQr,"LayoutLMForMaskedLM"),ZQr.forEach(t),f_o=r(gCe," (LayoutLM model)"),gCe.forEach(t),m_o=i(B),U_=n(B,"LI",{});var hCe=s(U_);Nte=n(hCe,"STRONG",{});var eWr=s(Nte);g_o=r(eWr,"longformer"),eWr.forEach(t),h_o=r(hCe," \u2014 "),n$=n(hCe,"A",{href:!0});var oWr=s(n$);p_o=r(oWr,"LongformerForMaskedLM"),oWr.forEach(t),__o=r(hCe," (Longformer model)"),hCe.forEach(t),u_o=i(B),J_=n(B,"LI",{});var pCe=s(J_);jte=n(pCe,"STRONG",{});var rWr=s(jte);b_o=r(rWr,"lxmert"),rWr.forEach(t),F_o=r(pCe," \u2014 "),s$=n(pCe,"A",{href:!0});var tWr=s(s$);v_o=r(tWr,"LxmertForPreTraining"),tWr.forEach(t),T_o=r(pCe," (LXMERT model)"),pCe.forEach(t),M_o=i(B),Y_=n(B,"LI",{});var _Ce=s(Y_);Dte=n(_Ce,"STRONG",{});var aWr=s(Dte);E_o=r(aWr,"megatron-bert"),aWr.forEach(t),C_o=r(_Ce," \u2014 "),l$=n(_Ce,"A",{href:!0});var nWr=s(l$);w_o=r(nWr,"MegatronBertForPreTraining"),nWr.forEach(t),A_o=r(_Ce," (MegatronBert model)"),_Ce.forEach(t),y_o=i(B),K_=n(B,"LI",{});var uCe=s(K_);Gte=n(uCe,"STRONG",{});var sWr=s(Gte);L_o=r(sWr,"mobilebert"),sWr.forEach(t),x_o=r(uCe," \u2014 "),i$=n(uCe,"A",{href:!0});var lWr=s(i$);k_o=r(lWr,"MobileBertForPreTraining"),lWr.forEach(t),S_o=r(uCe," (MobileBERT model)"),uCe.forEach(t),R_o=i(B),Z_=n(B,"LI",{});var bCe=s(Z_);Ote=n(bCe,"STRONG",{});var iWr=s(Ote);B_o=r(iWr,"mpnet"),iWr.forEach(t),P_o=r(bCe," \u2014 "),d$=n(bCe,"A",{href:!0});var dWr=s(d$);$_o=r(dWr,"MPNetForMaskedLM"),dWr.forEach(t),I_o=r(bCe," (MPNet model)"),bCe.forEach(t),q_o=i(B),eu=n(B,"LI",{});var FCe=s(eu);Vte=n(FCe,"STRONG",{});var cWr=s(Vte);N_o=r(cWr,"openai-gpt"),cWr.forEach(t),j_o=r(FCe," \u2014 "),c$=n(FCe,"A",{href:!0});var fWr=s(c$);D_o=r(fWr,"OpenAIGPTLMHeadModel"),fWr.forEach(t),G_o=r(FCe," (OpenAI GPT model)"),FCe.forEach(t),O_o=i(B),ou=n(B,"LI",{});var vCe=s(ou);Xte=n(vCe,"STRONG",{});var mWr=s(Xte);V_o=r(mWr,"retribert"),mWr.forEach(t),X_o=r(vCe," \u2014 "),f$=n(vCe,"A",{href:!0});var gWr=s(f$);z_o=r(gWr,"RetriBertModel"),gWr.forEach(t),Q_o=r(vCe," (RetriBERT model)"),vCe.forEach(t),W_o=i(B),ru=n(B,"LI",{});var TCe=s(ru);zte=n(TCe,"STRONG",{});var hWr=s(zte);H_o=r(hWr,"roberta"),hWr.forEach(t),U_o=r(TCe," \u2014 "),m$=n(TCe,"A",{href:!0});var pWr=s(m$);J_o=r(pWr,"RobertaForMaskedLM"),pWr.forEach(t),Y_o=r(TCe," (RoBERTa model)"),TCe.forEach(t),K_o=i(B),tu=n(B,"LI",{});var MCe=s(tu);Qte=n(MCe,"STRONG",{});var _Wr=s(Qte);Z_o=r(_Wr,"squeezebert"),_Wr.forEach(t),euo=r(MCe," \u2014 "),g$=n(MCe,"A",{href:!0});var uWr=s(g$);ouo=r(uWr,"SqueezeBertForMaskedLM"),uWr.forEach(t),ruo=r(MCe," (SqueezeBERT model)"),MCe.forEach(t),tuo=i(B),au=n(B,"LI",{});var ECe=s(au);Wte=n(ECe,"STRONG",{});var bWr=s(Wte);auo=r(bWr,"t5"),bWr.forEach(t),nuo=r(ECe," \u2014 "),h$=n(ECe,"A",{href:!0});var FWr=s(h$);suo=r(FWr,"T5ForConditionalGeneration"),FWr.forEach(t),luo=r(ECe," (T5 model)"),ECe.forEach(t),iuo=i(B),nu=n(B,"LI",{});var CCe=s(nu);Hte=n(CCe,"STRONG",{});var vWr=s(Hte);duo=r(vWr,"tapas"),vWr.forEach(t),cuo=r(CCe," \u2014 "),p$=n(CCe,"A",{href:!0});var TWr=s(p$);fuo=r(TWr,"TapasForMaskedLM"),TWr.forEach(t),muo=r(CCe," (TAPAS model)"),CCe.forEach(t),guo=i(B),su=n(B,"LI",{});var wCe=s(su);Ute=n(wCe,"STRONG",{});var MWr=s(Ute);huo=r(MWr,"transfo-xl"),MWr.forEach(t),puo=r(wCe," \u2014 "),_$=n(wCe,"A",{href:!0});var EWr=s(_$);_uo=r(EWr,"TransfoXLLMHeadModel"),EWr.forEach(t),uuo=r(wCe," (Transformer-XL model)"),wCe.forEach(t),buo=i(B),lu=n(B,"LI",{});var ACe=s(lu);Jte=n(ACe,"STRONG",{});var CWr=s(Jte);Fuo=r(CWr,"unispeech"),CWr.forEach(t),vuo=r(ACe," \u2014 "),u$=n(ACe,"A",{href:!0});var wWr=s(u$);Tuo=r(wWr,"UniSpeechForPreTraining"),wWr.forEach(t),Muo=r(ACe," (UniSpeech model)"),ACe.forEach(t),Euo=i(B),iu=n(B,"LI",{});var yCe=s(iu);Yte=n(yCe,"STRONG",{});var AWr=s(Yte);Cuo=r(AWr,"unispeech-sat"),AWr.forEach(t),wuo=r(yCe," \u2014 "),b$=n(yCe,"A",{href:!0});var yWr=s(b$);Auo=r(yWr,"UniSpeechSatForPreTraining"),yWr.forEach(t),yuo=r(yCe," (UniSpeechSat model)"),yCe.forEach(t),Luo=i(B),du=n(B,"LI",{});var LCe=s(du);Kte=n(LCe,"STRONG",{});var LWr=s(Kte);xuo=r(LWr,"visual_bert"),LWr.forEach(t),kuo=r(LCe," \u2014 "),F$=n(LCe,"A",{href:!0});var xWr=s(F$);Suo=r(xWr,"VisualBertForPreTraining"),xWr.forEach(t),Ruo=r(LCe," (VisualBert model)"),LCe.forEach(t),Buo=i(B),cu=n(B,"LI",{});var xCe=s(cu);Zte=n(xCe,"STRONG",{});var kWr=s(Zte);Puo=r(kWr,"vit_mae"),kWr.forEach(t),$uo=r(xCe," \u2014 "),v$=n(xCe,"A",{href:!0});var SWr=s(v$);Iuo=r(SWr,"ViTMAEForPreTraining"),SWr.forEach(t),quo=r(xCe," (ViTMAE model)"),xCe.forEach(t),Nuo=i(B),fu=n(B,"LI",{});var kCe=s(fu);eae=n(kCe,"STRONG",{});var RWr=s(eae);juo=r(RWr,"wav2vec2"),RWr.forEach(t),Duo=r(kCe," \u2014 "),T$=n(kCe,"A",{href:!0});var BWr=s(T$);Guo=r(BWr,"Wav2Vec2ForPreTraining"),BWr.forEach(t),Ouo=r(kCe," (Wav2Vec2 model)"),kCe.forEach(t),Vuo=i(B),mu=n(B,"LI",{});var SCe=s(mu);oae=n(SCe,"STRONG",{});var PWr=s(oae);Xuo=r(PWr,"xlm"),PWr.forEach(t),zuo=r(SCe," \u2014 "),M$=n(SCe,"A",{href:!0});var $Wr=s(M$);Quo=r($Wr,"XLMWithLMHeadModel"),$Wr.forEach(t),Wuo=r(SCe," (XLM model)"),SCe.forEach(t),Huo=i(B),gu=n(B,"LI",{});var RCe=s(gu);rae=n(RCe,"STRONG",{});var IWr=s(rae);Uuo=r(IWr,"xlm-roberta"),IWr.forEach(t),Juo=r(RCe," \u2014 "),E$=n(RCe,"A",{href:!0});var qWr=s(E$);Yuo=r(qWr,"XLMRobertaForMaskedLM"),qWr.forEach(t),Kuo=r(RCe," (XLM-RoBERTa model)"),RCe.forEach(t),Zuo=i(B),hu=n(B,"LI",{});var BCe=s(hu);tae=n(BCe,"STRONG",{});var NWr=s(tae);e1o=r(NWr,"xlm-roberta-xl"),NWr.forEach(t),o1o=r(BCe," \u2014 "),C$=n(BCe,"A",{href:!0});var jWr=s(C$);r1o=r(jWr,"XLMRobertaXLForMaskedLM"),jWr.forEach(t),t1o=r(BCe," (XLM-RoBERTa-XL model)"),BCe.forEach(t),a1o=i(B),pu=n(B,"LI",{});var PCe=s(pu);aae=n(PCe,"STRONG",{});var DWr=s(aae);n1o=r(DWr,"xlnet"),DWr.forEach(t),s1o=r(PCe," \u2014 "),w$=n(PCe,"A",{href:!0});var GWr=s(w$);l1o=r(GWr,"XLNetLMHeadModel"),GWr.forEach(t),i1o=r(PCe," (XLNet model)"),PCe.forEach(t),B.forEach(t),d1o=i(Gt),_u=n(Gt,"P",{});var $Ce=s(_u);c1o=r($Ce,"The model is set in evaluation mode by default using "),nae=n($Ce,"CODE",{});var OWr=s(nae);f1o=r(OWr,"model.eval()"),OWr.forEach(t),m1o=r($Ce,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sae=n($Ce,"CODE",{});var VWr=s(sae);g1o=r(VWr,"model.train()"),VWr.forEach(t),$Ce.forEach(t),h1o=i(Gt),lae=n(Gt,"P",{});var XWr=s(lae);p1o=r(XWr,"Examples:"),XWr.forEach(t),_1o=i(Gt),m(cw.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),iRe=i(c),rd=n(c,"H2",{class:!0});var uPe=s(rd);uu=n(uPe,"A",{id:!0,class:!0,href:!0});var zWr=s(uu);iae=n(zWr,"SPAN",{});var QWr=s(iae);m(fw.$$.fragment,QWr),QWr.forEach(t),zWr.forEach(t),u1o=i(uPe),dae=n(uPe,"SPAN",{});var WWr=s(dae);b1o=r(WWr,"AutoModelForCausalLM"),WWr.forEach(t),uPe.forEach(t),dRe=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(mw.$$.fragment,Js),F1o=i(Js),td=n(Js,"P",{});var tU=s(td);v1o=r(tU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),A$=n(tU,"A",{href:!0});var HWr=s(A$);T1o=r(HWr,"from_pretrained()"),HWr.forEach(t),M1o=r(tU," class method or the "),y$=n(tU,"A",{href:!0});var UWr=s(y$);E1o=r(UWr,"from_config()"),UWr.forEach(t),C1o=r(tU,` class
method.`),tU.forEach(t),w1o=i(Js),gw=n(Js,"P",{});var bPe=s(gw);A1o=r(bPe,"This class cannot be instantiated directly using "),cae=n(bPe,"CODE",{});var JWr=s(cae);y1o=r(JWr,"__init__()"),JWr.forEach(t),L1o=r(bPe," (throws an error)."),bPe.forEach(t),x1o=i(Js),Qr=n(Js,"DIV",{class:!0});var Ys=s(Qr);m(hw.$$.fragment,Ys),k1o=i(Ys),fae=n(Ys,"P",{});var YWr=s(fae);S1o=r(YWr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),YWr.forEach(t),R1o=i(Ys),ad=n(Ys,"P",{});var aU=s(ad);B1o=r(aU,`Note:
Loading a model from its configuration file does `),mae=n(aU,"STRONG",{});var KWr=s(mae);P1o=r(KWr,"not"),KWr.forEach(t),$1o=r(aU,` load the model weights. It only affects the
model\u2019s configuration. Use `),L$=n(aU,"A",{href:!0});var ZWr=s(L$);I1o=r(ZWr,"from_pretrained()"),ZWr.forEach(t),q1o=r(aU," to load the model weights."),aU.forEach(t),N1o=i(Ys),gae=n(Ys,"P",{});var eHr=s(gae);j1o=r(eHr,"Examples:"),eHr.forEach(t),D1o=i(Ys),m(pw.$$.fragment,Ys),Ys.forEach(t),G1o=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(_w.$$.fragment,Ot),O1o=i(Ot),hae=n(Ot,"P",{});var oHr=s(hae);V1o=r(oHr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),oHr.forEach(t),X1o=i(Ot),Qa=n(Ot,"P",{});var EE=s(Qa);z1o=r(EE,"The model class to instantiate is selected based on the "),pae=n(EE,"CODE",{});var rHr=s(pae);Q1o=r(rHr,"model_type"),rHr.forEach(t),W1o=r(EE,` property of the config object (either
passed as an argument or loaded from `),_ae=n(EE,"CODE",{});var tHr=s(_ae);H1o=r(tHr,"pretrained_model_name_or_path"),tHr.forEach(t),U1o=r(EE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uae=n(EE,"CODE",{});var aHr=s(uae);J1o=r(aHr,"pretrained_model_name_or_path"),aHr.forEach(t),Y1o=r(EE,":"),EE.forEach(t),K1o=i(Ot),$=n(Ot,"UL",{});var q=s($);bu=n(q,"LI",{});var ICe=s(bu);bae=n(ICe,"STRONG",{});var nHr=s(bae);Z1o=r(nHr,"bart"),nHr.forEach(t),e4o=r(ICe," \u2014 "),x$=n(ICe,"A",{href:!0});var sHr=s(x$);o4o=r(sHr,"BartForCausalLM"),sHr.forEach(t),r4o=r(ICe," (BART model)"),ICe.forEach(t),t4o=i(q),Fu=n(q,"LI",{});var qCe=s(Fu);Fae=n(qCe,"STRONG",{});var lHr=s(Fae);a4o=r(lHr,"bert"),lHr.forEach(t),n4o=r(qCe," \u2014 "),k$=n(qCe,"A",{href:!0});var iHr=s(k$);s4o=r(iHr,"BertLMHeadModel"),iHr.forEach(t),l4o=r(qCe," (BERT model)"),qCe.forEach(t),i4o=i(q),vu=n(q,"LI",{});var NCe=s(vu);vae=n(NCe,"STRONG",{});var dHr=s(vae);d4o=r(dHr,"bert-generation"),dHr.forEach(t),c4o=r(NCe," \u2014 "),S$=n(NCe,"A",{href:!0});var cHr=s(S$);f4o=r(cHr,"BertGenerationDecoder"),cHr.forEach(t),m4o=r(NCe," (Bert Generation model)"),NCe.forEach(t),g4o=i(q),Tu=n(q,"LI",{});var jCe=s(Tu);Tae=n(jCe,"STRONG",{});var fHr=s(Tae);h4o=r(fHr,"big_bird"),fHr.forEach(t),p4o=r(jCe," \u2014 "),R$=n(jCe,"A",{href:!0});var mHr=s(R$);_4o=r(mHr,"BigBirdForCausalLM"),mHr.forEach(t),u4o=r(jCe," (BigBird model)"),jCe.forEach(t),b4o=i(q),Mu=n(q,"LI",{});var DCe=s(Mu);Mae=n(DCe,"STRONG",{});var gHr=s(Mae);F4o=r(gHr,"bigbird_pegasus"),gHr.forEach(t),v4o=r(DCe," \u2014 "),B$=n(DCe,"A",{href:!0});var hHr=s(B$);T4o=r(hHr,"BigBirdPegasusForCausalLM"),hHr.forEach(t),M4o=r(DCe," (BigBirdPegasus model)"),DCe.forEach(t),E4o=i(q),Eu=n(q,"LI",{});var GCe=s(Eu);Eae=n(GCe,"STRONG",{});var pHr=s(Eae);C4o=r(pHr,"blenderbot"),pHr.forEach(t),w4o=r(GCe," \u2014 "),P$=n(GCe,"A",{href:!0});var _Hr=s(P$);A4o=r(_Hr,"BlenderbotForCausalLM"),_Hr.forEach(t),y4o=r(GCe," (Blenderbot model)"),GCe.forEach(t),L4o=i(q),Cu=n(q,"LI",{});var OCe=s(Cu);Cae=n(OCe,"STRONG",{});var uHr=s(Cae);x4o=r(uHr,"blenderbot-small"),uHr.forEach(t),k4o=r(OCe," \u2014 "),$$=n(OCe,"A",{href:!0});var bHr=s($$);S4o=r(bHr,"BlenderbotSmallForCausalLM"),bHr.forEach(t),R4o=r(OCe," (BlenderbotSmall model)"),OCe.forEach(t),B4o=i(q),wu=n(q,"LI",{});var VCe=s(wu);wae=n(VCe,"STRONG",{});var FHr=s(wae);P4o=r(FHr,"camembert"),FHr.forEach(t),$4o=r(VCe," \u2014 "),I$=n(VCe,"A",{href:!0});var vHr=s(I$);I4o=r(vHr,"CamembertForCausalLM"),vHr.forEach(t),q4o=r(VCe," (CamemBERT model)"),VCe.forEach(t),N4o=i(q),Au=n(q,"LI",{});var XCe=s(Au);Aae=n(XCe,"STRONG",{});var THr=s(Aae);j4o=r(THr,"ctrl"),THr.forEach(t),D4o=r(XCe," \u2014 "),q$=n(XCe,"A",{href:!0});var MHr=s(q$);G4o=r(MHr,"CTRLLMHeadModel"),MHr.forEach(t),O4o=r(XCe," (CTRL model)"),XCe.forEach(t),V4o=i(q),yu=n(q,"LI",{});var zCe=s(yu);yae=n(zCe,"STRONG",{});var EHr=s(yae);X4o=r(EHr,"data2vec-text"),EHr.forEach(t),z4o=r(zCe," \u2014 "),N$=n(zCe,"A",{href:!0});var CHr=s(N$);Q4o=r(CHr,"Data2VecTextForCausalLM"),CHr.forEach(t),W4o=r(zCe," (Data2VecText model)"),zCe.forEach(t),H4o=i(q),Lu=n(q,"LI",{});var QCe=s(Lu);Lae=n(QCe,"STRONG",{});var wHr=s(Lae);U4o=r(wHr,"electra"),wHr.forEach(t),J4o=r(QCe," \u2014 "),j$=n(QCe,"A",{href:!0});var AHr=s(j$);Y4o=r(AHr,"ElectraForCausalLM"),AHr.forEach(t),K4o=r(QCe," (ELECTRA model)"),QCe.forEach(t),Z4o=i(q),xu=n(q,"LI",{});var WCe=s(xu);xae=n(WCe,"STRONG",{});var yHr=s(xae);ebo=r(yHr,"gpt2"),yHr.forEach(t),obo=r(WCe," \u2014 "),D$=n(WCe,"A",{href:!0});var LHr=s(D$);rbo=r(LHr,"GPT2LMHeadModel"),LHr.forEach(t),tbo=r(WCe," (OpenAI GPT-2 model)"),WCe.forEach(t),abo=i(q),ku=n(q,"LI",{});var HCe=s(ku);kae=n(HCe,"STRONG",{});var xHr=s(kae);nbo=r(xHr,"gpt_neo"),xHr.forEach(t),sbo=r(HCe," \u2014 "),G$=n(HCe,"A",{href:!0});var kHr=s(G$);lbo=r(kHr,"GPTNeoForCausalLM"),kHr.forEach(t),ibo=r(HCe," (GPT Neo model)"),HCe.forEach(t),dbo=i(q),Su=n(q,"LI",{});var UCe=s(Su);Sae=n(UCe,"STRONG",{});var SHr=s(Sae);cbo=r(SHr,"gptj"),SHr.forEach(t),fbo=r(UCe," \u2014 "),O$=n(UCe,"A",{href:!0});var RHr=s(O$);mbo=r(RHr,"GPTJForCausalLM"),RHr.forEach(t),gbo=r(UCe," (GPT-J model)"),UCe.forEach(t),hbo=i(q),Ru=n(q,"LI",{});var JCe=s(Ru);Rae=n(JCe,"STRONG",{});var BHr=s(Rae);pbo=r(BHr,"marian"),BHr.forEach(t),_bo=r(JCe," \u2014 "),V$=n(JCe,"A",{href:!0});var PHr=s(V$);ubo=r(PHr,"MarianForCausalLM"),PHr.forEach(t),bbo=r(JCe," (Marian model)"),JCe.forEach(t),Fbo=i(q),Bu=n(q,"LI",{});var YCe=s(Bu);Bae=n(YCe,"STRONG",{});var $Hr=s(Bae);vbo=r($Hr,"mbart"),$Hr.forEach(t),Tbo=r(YCe," \u2014 "),X$=n(YCe,"A",{href:!0});var IHr=s(X$);Mbo=r(IHr,"MBartForCausalLM"),IHr.forEach(t),Ebo=r(YCe," (mBART model)"),YCe.forEach(t),Cbo=i(q),Pu=n(q,"LI",{});var KCe=s(Pu);Pae=n(KCe,"STRONG",{});var qHr=s(Pae);wbo=r(qHr,"megatron-bert"),qHr.forEach(t),Abo=r(KCe," \u2014 "),z$=n(KCe,"A",{href:!0});var NHr=s(z$);ybo=r(NHr,"MegatronBertForCausalLM"),NHr.forEach(t),Lbo=r(KCe," (MegatronBert model)"),KCe.forEach(t),xbo=i(q),$u=n(q,"LI",{});var ZCe=s($u);$ae=n(ZCe,"STRONG",{});var jHr=s($ae);kbo=r(jHr,"openai-gpt"),jHr.forEach(t),Sbo=r(ZCe," \u2014 "),Q$=n(ZCe,"A",{href:!0});var DHr=s(Q$);Rbo=r(DHr,"OpenAIGPTLMHeadModel"),DHr.forEach(t),Bbo=r(ZCe," (OpenAI GPT model)"),ZCe.forEach(t),Pbo=i(q),Iu=n(q,"LI",{});var ewe=s(Iu);Iae=n(ewe,"STRONG",{});var GHr=s(Iae);$bo=r(GHr,"pegasus"),GHr.forEach(t),Ibo=r(ewe," \u2014 "),W$=n(ewe,"A",{href:!0});var OHr=s(W$);qbo=r(OHr,"PegasusForCausalLM"),OHr.forEach(t),Nbo=r(ewe," (Pegasus model)"),ewe.forEach(t),jbo=i(q),qu=n(q,"LI",{});var owe=s(qu);qae=n(owe,"STRONG",{});var VHr=s(qae);Dbo=r(VHr,"plbart"),VHr.forEach(t),Gbo=r(owe," \u2014 "),H$=n(owe,"A",{href:!0});var XHr=s(H$);Obo=r(XHr,"PLBartForCausalLM"),XHr.forEach(t),Vbo=r(owe," (PLBart model)"),owe.forEach(t),Xbo=i(q),Nu=n(q,"LI",{});var rwe=s(Nu);Nae=n(rwe,"STRONG",{});var zHr=s(Nae);zbo=r(zHr,"prophetnet"),zHr.forEach(t),Qbo=r(rwe," \u2014 "),U$=n(rwe,"A",{href:!0});var QHr=s(U$);Wbo=r(QHr,"ProphetNetForCausalLM"),QHr.forEach(t),Hbo=r(rwe," (ProphetNet model)"),rwe.forEach(t),Ubo=i(q),ju=n(q,"LI",{});var twe=s(ju);jae=n(twe,"STRONG",{});var WHr=s(jae);Jbo=r(WHr,"qdqbert"),WHr.forEach(t),Ybo=r(twe," \u2014 "),J$=n(twe,"A",{href:!0});var HHr=s(J$);Kbo=r(HHr,"QDQBertLMHeadModel"),HHr.forEach(t),Zbo=r(twe," (QDQBert model)"),twe.forEach(t),e5o=i(q),Du=n(q,"LI",{});var awe=s(Du);Dae=n(awe,"STRONG",{});var UHr=s(Dae);o5o=r(UHr,"reformer"),UHr.forEach(t),r5o=r(awe," \u2014 "),Y$=n(awe,"A",{href:!0});var JHr=s(Y$);t5o=r(JHr,"ReformerModelWithLMHead"),JHr.forEach(t),a5o=r(awe," (Reformer model)"),awe.forEach(t),n5o=i(q),Gu=n(q,"LI",{});var nwe=s(Gu);Gae=n(nwe,"STRONG",{});var YHr=s(Gae);s5o=r(YHr,"rembert"),YHr.forEach(t),l5o=r(nwe," \u2014 "),K$=n(nwe,"A",{href:!0});var KHr=s(K$);i5o=r(KHr,"RemBertForCausalLM"),KHr.forEach(t),d5o=r(nwe," (RemBERT model)"),nwe.forEach(t),c5o=i(q),Ou=n(q,"LI",{});var swe=s(Ou);Oae=n(swe,"STRONG",{});var ZHr=s(Oae);f5o=r(ZHr,"roberta"),ZHr.forEach(t),m5o=r(swe," \u2014 "),Z$=n(swe,"A",{href:!0});var eUr=s(Z$);g5o=r(eUr,"RobertaForCausalLM"),eUr.forEach(t),h5o=r(swe," (RoBERTa model)"),swe.forEach(t),p5o=i(q),Vu=n(q,"LI",{});var lwe=s(Vu);Vae=n(lwe,"STRONG",{});var oUr=s(Vae);_5o=r(oUr,"roformer"),oUr.forEach(t),u5o=r(lwe," \u2014 "),eI=n(lwe,"A",{href:!0});var rUr=s(eI);b5o=r(rUr,"RoFormerForCausalLM"),rUr.forEach(t),F5o=r(lwe," (RoFormer model)"),lwe.forEach(t),v5o=i(q),Xu=n(q,"LI",{});var iwe=s(Xu);Xae=n(iwe,"STRONG",{});var tUr=s(Xae);T5o=r(tUr,"speech_to_text_2"),tUr.forEach(t),M5o=r(iwe," \u2014 "),oI=n(iwe,"A",{href:!0});var aUr=s(oI);E5o=r(aUr,"Speech2Text2ForCausalLM"),aUr.forEach(t),C5o=r(iwe," (Speech2Text2 model)"),iwe.forEach(t),w5o=i(q),zu=n(q,"LI",{});var dwe=s(zu);zae=n(dwe,"STRONG",{});var nUr=s(zae);A5o=r(nUr,"transfo-xl"),nUr.forEach(t),y5o=r(dwe," \u2014 "),rI=n(dwe,"A",{href:!0});var sUr=s(rI);L5o=r(sUr,"TransfoXLLMHeadModel"),sUr.forEach(t),x5o=r(dwe," (Transformer-XL model)"),dwe.forEach(t),k5o=i(q),Qu=n(q,"LI",{});var cwe=s(Qu);Qae=n(cwe,"STRONG",{});var lUr=s(Qae);S5o=r(lUr,"trocr"),lUr.forEach(t),R5o=r(cwe," \u2014 "),tI=n(cwe,"A",{href:!0});var iUr=s(tI);B5o=r(iUr,"TrOCRForCausalLM"),iUr.forEach(t),P5o=r(cwe," (TrOCR model)"),cwe.forEach(t),$5o=i(q),Wu=n(q,"LI",{});var fwe=s(Wu);Wae=n(fwe,"STRONG",{});var dUr=s(Wae);I5o=r(dUr,"xglm"),dUr.forEach(t),q5o=r(fwe," \u2014 "),aI=n(fwe,"A",{href:!0});var cUr=s(aI);N5o=r(cUr,"XGLMForCausalLM"),cUr.forEach(t),j5o=r(fwe," (XGLM model)"),fwe.forEach(t),D5o=i(q),Hu=n(q,"LI",{});var mwe=s(Hu);Hae=n(mwe,"STRONG",{});var fUr=s(Hae);G5o=r(fUr,"xlm"),fUr.forEach(t),O5o=r(mwe," \u2014 "),nI=n(mwe,"A",{href:!0});var mUr=s(nI);V5o=r(mUr,"XLMWithLMHeadModel"),mUr.forEach(t),X5o=r(mwe," (XLM model)"),mwe.forEach(t),z5o=i(q),Uu=n(q,"LI",{});var gwe=s(Uu);Uae=n(gwe,"STRONG",{});var gUr=s(Uae);Q5o=r(gUr,"xlm-prophetnet"),gUr.forEach(t),W5o=r(gwe," \u2014 "),sI=n(gwe,"A",{href:!0});var hUr=s(sI);H5o=r(hUr,"XLMProphetNetForCausalLM"),hUr.forEach(t),U5o=r(gwe," (XLMProphetNet model)"),gwe.forEach(t),J5o=i(q),Ju=n(q,"LI",{});var hwe=s(Ju);Jae=n(hwe,"STRONG",{});var pUr=s(Jae);Y5o=r(pUr,"xlm-roberta"),pUr.forEach(t),K5o=r(hwe," \u2014 "),lI=n(hwe,"A",{href:!0});var _Ur=s(lI);Z5o=r(_Ur,"XLMRobertaForCausalLM"),_Ur.forEach(t),e3o=r(hwe," (XLM-RoBERTa model)"),hwe.forEach(t),o3o=i(q),Yu=n(q,"LI",{});var pwe=s(Yu);Yae=n(pwe,"STRONG",{});var uUr=s(Yae);r3o=r(uUr,"xlm-roberta-xl"),uUr.forEach(t),t3o=r(pwe," \u2014 "),iI=n(pwe,"A",{href:!0});var bUr=s(iI);a3o=r(bUr,"XLMRobertaXLForCausalLM"),bUr.forEach(t),n3o=r(pwe," (XLM-RoBERTa-XL model)"),pwe.forEach(t),s3o=i(q),Ku=n(q,"LI",{});var _we=s(Ku);Kae=n(_we,"STRONG",{});var FUr=s(Kae);l3o=r(FUr,"xlnet"),FUr.forEach(t),i3o=r(_we," \u2014 "),dI=n(_we,"A",{href:!0});var vUr=s(dI);d3o=r(vUr,"XLNetLMHeadModel"),vUr.forEach(t),c3o=r(_we," (XLNet model)"),_we.forEach(t),q.forEach(t),f3o=i(Ot),Zu=n(Ot,"P",{});var uwe=s(Zu);m3o=r(uwe,"The model is set in evaluation mode by default using "),Zae=n(uwe,"CODE",{});var TUr=s(Zae);g3o=r(TUr,"model.eval()"),TUr.forEach(t),h3o=r(uwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ene=n(uwe,"CODE",{});var MUr=s(ene);p3o=r(MUr,"model.train()"),MUr.forEach(t),uwe.forEach(t),_3o=i(Ot),one=n(Ot,"P",{});var EUr=s(one);u3o=r(EUr,"Examples:"),EUr.forEach(t),b3o=i(Ot),m(uw.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),cRe=i(c),nd=n(c,"H2",{class:!0});var FPe=s(nd);e1=n(FPe,"A",{id:!0,class:!0,href:!0});var CUr=s(e1);rne=n(CUr,"SPAN",{});var wUr=s(rne);m(bw.$$.fragment,wUr),wUr.forEach(t),CUr.forEach(t),F3o=i(FPe),tne=n(FPe,"SPAN",{});var AUr=s(tne);v3o=r(AUr,"AutoModelForMaskedLM"),AUr.forEach(t),FPe.forEach(t),fRe=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(Fw.$$.fragment,Ks),T3o=i(Ks),sd=n(Ks,"P",{});var nU=s(sd);M3o=r(nU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cI=n(nU,"A",{href:!0});var yUr=s(cI);E3o=r(yUr,"from_pretrained()"),yUr.forEach(t),C3o=r(nU," class method or the "),fI=n(nU,"A",{href:!0});var LUr=s(fI);w3o=r(LUr,"from_config()"),LUr.forEach(t),A3o=r(nU,` class
method.`),nU.forEach(t),y3o=i(Ks),vw=n(Ks,"P",{});var vPe=s(vw);L3o=r(vPe,"This class cannot be instantiated directly using "),ane=n(vPe,"CODE",{});var xUr=s(ane);x3o=r(xUr,"__init__()"),xUr.forEach(t),k3o=r(vPe," (throws an error)."),vPe.forEach(t),S3o=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);m(Tw.$$.fragment,Zs),R3o=i(Zs),nne=n(Zs,"P",{});var kUr=s(nne);B3o=r(kUr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kUr.forEach(t),P3o=i(Zs),ld=n(Zs,"P",{});var sU=s(ld);$3o=r(sU,`Note:
Loading a model from its configuration file does `),sne=n(sU,"STRONG",{});var SUr=s(sne);I3o=r(SUr,"not"),SUr.forEach(t),q3o=r(sU,` load the model weights. It only affects the
model\u2019s configuration. Use `),mI=n(sU,"A",{href:!0});var RUr=s(mI);N3o=r(RUr,"from_pretrained()"),RUr.forEach(t),j3o=r(sU," to load the model weights."),sU.forEach(t),D3o=i(Zs),lne=n(Zs,"P",{});var BUr=s(lne);G3o=r(BUr,"Examples:"),BUr.forEach(t),O3o=i(Zs),m(Mw.$$.fragment,Zs),Zs.forEach(t),V3o=i(Ks),De=n(Ks,"DIV",{class:!0});var Vt=s(De);m(Ew.$$.fragment,Vt),X3o=i(Vt),ine=n(Vt,"P",{});var PUr=s(ine);z3o=r(PUr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),PUr.forEach(t),Q3o=i(Vt),Wa=n(Vt,"P",{});var CE=s(Wa);W3o=r(CE,"The model class to instantiate is selected based on the "),dne=n(CE,"CODE",{});var $Ur=s(dne);H3o=r($Ur,"model_type"),$Ur.forEach(t),U3o=r(CE,` property of the config object (either
passed as an argument or loaded from `),cne=n(CE,"CODE",{});var IUr=s(cne);J3o=r(IUr,"pretrained_model_name_or_path"),IUr.forEach(t),Y3o=r(CE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fne=n(CE,"CODE",{});var qUr=s(fne);K3o=r(qUr,"pretrained_model_name_or_path"),qUr.forEach(t),Z3o=r(CE,":"),CE.forEach(t),e2o=i(Vt),I=n(Vt,"UL",{});var N=s(I);o1=n(N,"LI",{});var bwe=s(o1);mne=n(bwe,"STRONG",{});var NUr=s(mne);o2o=r(NUr,"albert"),NUr.forEach(t),r2o=r(bwe," \u2014 "),gI=n(bwe,"A",{href:!0});var jUr=s(gI);t2o=r(jUr,"AlbertForMaskedLM"),jUr.forEach(t),a2o=r(bwe," (ALBERT model)"),bwe.forEach(t),n2o=i(N),r1=n(N,"LI",{});var Fwe=s(r1);gne=n(Fwe,"STRONG",{});var DUr=s(gne);s2o=r(DUr,"bart"),DUr.forEach(t),l2o=r(Fwe," \u2014 "),hI=n(Fwe,"A",{href:!0});var GUr=s(hI);i2o=r(GUr,"BartForConditionalGeneration"),GUr.forEach(t),d2o=r(Fwe," (BART model)"),Fwe.forEach(t),c2o=i(N),t1=n(N,"LI",{});var vwe=s(t1);hne=n(vwe,"STRONG",{});var OUr=s(hne);f2o=r(OUr,"bert"),OUr.forEach(t),m2o=r(vwe," \u2014 "),pI=n(vwe,"A",{href:!0});var VUr=s(pI);g2o=r(VUr,"BertForMaskedLM"),VUr.forEach(t),h2o=r(vwe," (BERT model)"),vwe.forEach(t),p2o=i(N),a1=n(N,"LI",{});var Twe=s(a1);pne=n(Twe,"STRONG",{});var XUr=s(pne);_2o=r(XUr,"big_bird"),XUr.forEach(t),u2o=r(Twe," \u2014 "),_I=n(Twe,"A",{href:!0});var zUr=s(_I);b2o=r(zUr,"BigBirdForMaskedLM"),zUr.forEach(t),F2o=r(Twe," (BigBird model)"),Twe.forEach(t),v2o=i(N),n1=n(N,"LI",{});var Mwe=s(n1);_ne=n(Mwe,"STRONG",{});var QUr=s(_ne);T2o=r(QUr,"camembert"),QUr.forEach(t),M2o=r(Mwe," \u2014 "),uI=n(Mwe,"A",{href:!0});var WUr=s(uI);E2o=r(WUr,"CamembertForMaskedLM"),WUr.forEach(t),C2o=r(Mwe," (CamemBERT model)"),Mwe.forEach(t),w2o=i(N),s1=n(N,"LI",{});var Ewe=s(s1);une=n(Ewe,"STRONG",{});var HUr=s(une);A2o=r(HUr,"convbert"),HUr.forEach(t),y2o=r(Ewe," \u2014 "),bI=n(Ewe,"A",{href:!0});var UUr=s(bI);L2o=r(UUr,"ConvBertForMaskedLM"),UUr.forEach(t),x2o=r(Ewe," (ConvBERT model)"),Ewe.forEach(t),k2o=i(N),l1=n(N,"LI",{});var Cwe=s(l1);bne=n(Cwe,"STRONG",{});var JUr=s(bne);S2o=r(JUr,"data2vec-text"),JUr.forEach(t),R2o=r(Cwe," \u2014 "),FI=n(Cwe,"A",{href:!0});var YUr=s(FI);B2o=r(YUr,"Data2VecTextForMaskedLM"),YUr.forEach(t),P2o=r(Cwe," (Data2VecText model)"),Cwe.forEach(t),$2o=i(N),i1=n(N,"LI",{});var wwe=s(i1);Fne=n(wwe,"STRONG",{});var KUr=s(Fne);I2o=r(KUr,"deberta"),KUr.forEach(t),q2o=r(wwe," \u2014 "),vI=n(wwe,"A",{href:!0});var ZUr=s(vI);N2o=r(ZUr,"DebertaForMaskedLM"),ZUr.forEach(t),j2o=r(wwe," (DeBERTa model)"),wwe.forEach(t),D2o=i(N),d1=n(N,"LI",{});var Awe=s(d1);vne=n(Awe,"STRONG",{});var eJr=s(vne);G2o=r(eJr,"deberta-v2"),eJr.forEach(t),O2o=r(Awe," \u2014 "),TI=n(Awe,"A",{href:!0});var oJr=s(TI);V2o=r(oJr,"DebertaV2ForMaskedLM"),oJr.forEach(t),X2o=r(Awe," (DeBERTa-v2 model)"),Awe.forEach(t),z2o=i(N),c1=n(N,"LI",{});var ywe=s(c1);Tne=n(ywe,"STRONG",{});var rJr=s(Tne);Q2o=r(rJr,"distilbert"),rJr.forEach(t),W2o=r(ywe," \u2014 "),MI=n(ywe,"A",{href:!0});var tJr=s(MI);H2o=r(tJr,"DistilBertForMaskedLM"),tJr.forEach(t),U2o=r(ywe," (DistilBERT model)"),ywe.forEach(t),J2o=i(N),f1=n(N,"LI",{});var Lwe=s(f1);Mne=n(Lwe,"STRONG",{});var aJr=s(Mne);Y2o=r(aJr,"electra"),aJr.forEach(t),K2o=r(Lwe," \u2014 "),EI=n(Lwe,"A",{href:!0});var nJr=s(EI);Z2o=r(nJr,"ElectraForMaskedLM"),nJr.forEach(t),eFo=r(Lwe," (ELECTRA model)"),Lwe.forEach(t),oFo=i(N),m1=n(N,"LI",{});var xwe=s(m1);Ene=n(xwe,"STRONG",{});var sJr=s(Ene);rFo=r(sJr,"flaubert"),sJr.forEach(t),tFo=r(xwe," \u2014 "),CI=n(xwe,"A",{href:!0});var lJr=s(CI);aFo=r(lJr,"FlaubertWithLMHeadModel"),lJr.forEach(t),nFo=r(xwe," (FlauBERT model)"),xwe.forEach(t),sFo=i(N),g1=n(N,"LI",{});var kwe=s(g1);Cne=n(kwe,"STRONG",{});var iJr=s(Cne);lFo=r(iJr,"fnet"),iJr.forEach(t),iFo=r(kwe," \u2014 "),wI=n(kwe,"A",{href:!0});var dJr=s(wI);dFo=r(dJr,"FNetForMaskedLM"),dJr.forEach(t),cFo=r(kwe," (FNet model)"),kwe.forEach(t),fFo=i(N),h1=n(N,"LI",{});var Swe=s(h1);wne=n(Swe,"STRONG",{});var cJr=s(wne);mFo=r(cJr,"funnel"),cJr.forEach(t),gFo=r(Swe," \u2014 "),AI=n(Swe,"A",{href:!0});var fJr=s(AI);hFo=r(fJr,"FunnelForMaskedLM"),fJr.forEach(t),pFo=r(Swe," (Funnel Transformer model)"),Swe.forEach(t),_Fo=i(N),p1=n(N,"LI",{});var Rwe=s(p1);Ane=n(Rwe,"STRONG",{});var mJr=s(Ane);uFo=r(mJr,"ibert"),mJr.forEach(t),bFo=r(Rwe," \u2014 "),yI=n(Rwe,"A",{href:!0});var gJr=s(yI);FFo=r(gJr,"IBertForMaskedLM"),gJr.forEach(t),vFo=r(Rwe," (I-BERT model)"),Rwe.forEach(t),TFo=i(N),_1=n(N,"LI",{});var Bwe=s(_1);yne=n(Bwe,"STRONG",{});var hJr=s(yne);MFo=r(hJr,"layoutlm"),hJr.forEach(t),EFo=r(Bwe," \u2014 "),LI=n(Bwe,"A",{href:!0});var pJr=s(LI);CFo=r(pJr,"LayoutLMForMaskedLM"),pJr.forEach(t),wFo=r(Bwe," (LayoutLM model)"),Bwe.forEach(t),AFo=i(N),u1=n(N,"LI",{});var Pwe=s(u1);Lne=n(Pwe,"STRONG",{});var _Jr=s(Lne);yFo=r(_Jr,"longformer"),_Jr.forEach(t),LFo=r(Pwe," \u2014 "),xI=n(Pwe,"A",{href:!0});var uJr=s(xI);xFo=r(uJr,"LongformerForMaskedLM"),uJr.forEach(t),kFo=r(Pwe," (Longformer model)"),Pwe.forEach(t),SFo=i(N),b1=n(N,"LI",{});var $we=s(b1);xne=n($we,"STRONG",{});var bJr=s(xne);RFo=r(bJr,"mbart"),bJr.forEach(t),BFo=r($we," \u2014 "),kI=n($we,"A",{href:!0});var FJr=s(kI);PFo=r(FJr,"MBartForConditionalGeneration"),FJr.forEach(t),$Fo=r($we," (mBART model)"),$we.forEach(t),IFo=i(N),F1=n(N,"LI",{});var Iwe=s(F1);kne=n(Iwe,"STRONG",{});var vJr=s(kne);qFo=r(vJr,"megatron-bert"),vJr.forEach(t),NFo=r(Iwe," \u2014 "),SI=n(Iwe,"A",{href:!0});var TJr=s(SI);jFo=r(TJr,"MegatronBertForMaskedLM"),TJr.forEach(t),DFo=r(Iwe," (MegatronBert model)"),Iwe.forEach(t),GFo=i(N),v1=n(N,"LI",{});var qwe=s(v1);Sne=n(qwe,"STRONG",{});var MJr=s(Sne);OFo=r(MJr,"mobilebert"),MJr.forEach(t),VFo=r(qwe," \u2014 "),RI=n(qwe,"A",{href:!0});var EJr=s(RI);XFo=r(EJr,"MobileBertForMaskedLM"),EJr.forEach(t),zFo=r(qwe," (MobileBERT model)"),qwe.forEach(t),QFo=i(N),T1=n(N,"LI",{});var Nwe=s(T1);Rne=n(Nwe,"STRONG",{});var CJr=s(Rne);WFo=r(CJr,"mpnet"),CJr.forEach(t),HFo=r(Nwe," \u2014 "),BI=n(Nwe,"A",{href:!0});var wJr=s(BI);UFo=r(wJr,"MPNetForMaskedLM"),wJr.forEach(t),JFo=r(Nwe," (MPNet model)"),Nwe.forEach(t),YFo=i(N),M1=n(N,"LI",{});var jwe=s(M1);Bne=n(jwe,"STRONG",{});var AJr=s(Bne);KFo=r(AJr,"nystromformer"),AJr.forEach(t),ZFo=r(jwe," \u2014 "),PI=n(jwe,"A",{href:!0});var yJr=s(PI);evo=r(yJr,"NystromformerForMaskedLM"),yJr.forEach(t),ovo=r(jwe," (Nystromformer model)"),jwe.forEach(t),rvo=i(N),E1=n(N,"LI",{});var Dwe=s(E1);Pne=n(Dwe,"STRONG",{});var LJr=s(Pne);tvo=r(LJr,"perceiver"),LJr.forEach(t),avo=r(Dwe," \u2014 "),$I=n(Dwe,"A",{href:!0});var xJr=s($I);nvo=r(xJr,"PerceiverForMaskedLM"),xJr.forEach(t),svo=r(Dwe," (Perceiver model)"),Dwe.forEach(t),lvo=i(N),C1=n(N,"LI",{});var Gwe=s(C1);$ne=n(Gwe,"STRONG",{});var kJr=s($ne);ivo=r(kJr,"qdqbert"),kJr.forEach(t),dvo=r(Gwe," \u2014 "),II=n(Gwe,"A",{href:!0});var SJr=s(II);cvo=r(SJr,"QDQBertForMaskedLM"),SJr.forEach(t),fvo=r(Gwe," (QDQBert model)"),Gwe.forEach(t),mvo=i(N),w1=n(N,"LI",{});var Owe=s(w1);Ine=n(Owe,"STRONG",{});var RJr=s(Ine);gvo=r(RJr,"reformer"),RJr.forEach(t),hvo=r(Owe," \u2014 "),qI=n(Owe,"A",{href:!0});var BJr=s(qI);pvo=r(BJr,"ReformerForMaskedLM"),BJr.forEach(t),_vo=r(Owe," (Reformer model)"),Owe.forEach(t),uvo=i(N),A1=n(N,"LI",{});var Vwe=s(A1);qne=n(Vwe,"STRONG",{});var PJr=s(qne);bvo=r(PJr,"rembert"),PJr.forEach(t),Fvo=r(Vwe," \u2014 "),NI=n(Vwe,"A",{href:!0});var $Jr=s(NI);vvo=r($Jr,"RemBertForMaskedLM"),$Jr.forEach(t),Tvo=r(Vwe," (RemBERT model)"),Vwe.forEach(t),Mvo=i(N),y1=n(N,"LI",{});var Xwe=s(y1);Nne=n(Xwe,"STRONG",{});var IJr=s(Nne);Evo=r(IJr,"roberta"),IJr.forEach(t),Cvo=r(Xwe," \u2014 "),jI=n(Xwe,"A",{href:!0});var qJr=s(jI);wvo=r(qJr,"RobertaForMaskedLM"),qJr.forEach(t),Avo=r(Xwe," (RoBERTa model)"),Xwe.forEach(t),yvo=i(N),L1=n(N,"LI",{});var zwe=s(L1);jne=n(zwe,"STRONG",{});var NJr=s(jne);Lvo=r(NJr,"roformer"),NJr.forEach(t),xvo=r(zwe," \u2014 "),DI=n(zwe,"A",{href:!0});var jJr=s(DI);kvo=r(jJr,"RoFormerForMaskedLM"),jJr.forEach(t),Svo=r(zwe," (RoFormer model)"),zwe.forEach(t),Rvo=i(N),x1=n(N,"LI",{});var Qwe=s(x1);Dne=n(Qwe,"STRONG",{});var DJr=s(Dne);Bvo=r(DJr,"squeezebert"),DJr.forEach(t),Pvo=r(Qwe," \u2014 "),GI=n(Qwe,"A",{href:!0});var GJr=s(GI);$vo=r(GJr,"SqueezeBertForMaskedLM"),GJr.forEach(t),Ivo=r(Qwe," (SqueezeBERT model)"),Qwe.forEach(t),qvo=i(N),k1=n(N,"LI",{});var Wwe=s(k1);Gne=n(Wwe,"STRONG",{});var OJr=s(Gne);Nvo=r(OJr,"tapas"),OJr.forEach(t),jvo=r(Wwe," \u2014 "),OI=n(Wwe,"A",{href:!0});var VJr=s(OI);Dvo=r(VJr,"TapasForMaskedLM"),VJr.forEach(t),Gvo=r(Wwe," (TAPAS model)"),Wwe.forEach(t),Ovo=i(N),S1=n(N,"LI",{});var Hwe=s(S1);One=n(Hwe,"STRONG",{});var XJr=s(One);Vvo=r(XJr,"wav2vec2"),XJr.forEach(t),Xvo=r(Hwe," \u2014 "),Vne=n(Hwe,"CODE",{});var zJr=s(Vne);zvo=r(zJr,"Wav2Vec2ForMaskedLM"),zJr.forEach(t),Qvo=r(Hwe,"(Wav2Vec2 model)"),Hwe.forEach(t),Wvo=i(N),R1=n(N,"LI",{});var Uwe=s(R1);Xne=n(Uwe,"STRONG",{});var QJr=s(Xne);Hvo=r(QJr,"xlm"),QJr.forEach(t),Uvo=r(Uwe," \u2014 "),VI=n(Uwe,"A",{href:!0});var WJr=s(VI);Jvo=r(WJr,"XLMWithLMHeadModel"),WJr.forEach(t),Yvo=r(Uwe," (XLM model)"),Uwe.forEach(t),Kvo=i(N),B1=n(N,"LI",{});var Jwe=s(B1);zne=n(Jwe,"STRONG",{});var HJr=s(zne);Zvo=r(HJr,"xlm-roberta"),HJr.forEach(t),e6o=r(Jwe," \u2014 "),XI=n(Jwe,"A",{href:!0});var UJr=s(XI);o6o=r(UJr,"XLMRobertaForMaskedLM"),UJr.forEach(t),r6o=r(Jwe," (XLM-RoBERTa model)"),Jwe.forEach(t),t6o=i(N),P1=n(N,"LI",{});var Ywe=s(P1);Qne=n(Ywe,"STRONG",{});var JJr=s(Qne);a6o=r(JJr,"xlm-roberta-xl"),JJr.forEach(t),n6o=r(Ywe," \u2014 "),zI=n(Ywe,"A",{href:!0});var YJr=s(zI);s6o=r(YJr,"XLMRobertaXLForMaskedLM"),YJr.forEach(t),l6o=r(Ywe," (XLM-RoBERTa-XL model)"),Ywe.forEach(t),i6o=i(N),$1=n(N,"LI",{});var Kwe=s($1);Wne=n(Kwe,"STRONG",{});var KJr=s(Wne);d6o=r(KJr,"yoso"),KJr.forEach(t),c6o=r(Kwe," \u2014 "),QI=n(Kwe,"A",{href:!0});var ZJr=s(QI);f6o=r(ZJr,"YosoForMaskedLM"),ZJr.forEach(t),m6o=r(Kwe," (YOSO model)"),Kwe.forEach(t),N.forEach(t),g6o=i(Vt),I1=n(Vt,"P",{});var Zwe=s(I1);h6o=r(Zwe,"The model is set in evaluation mode by default using "),Hne=n(Zwe,"CODE",{});var eYr=s(Hne);p6o=r(eYr,"model.eval()"),eYr.forEach(t),_6o=r(Zwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Une=n(Zwe,"CODE",{});var oYr=s(Une);u6o=r(oYr,"model.train()"),oYr.forEach(t),Zwe.forEach(t),b6o=i(Vt),Jne=n(Vt,"P",{});var rYr=s(Jne);F6o=r(rYr,"Examples:"),rYr.forEach(t),v6o=i(Vt),m(Cw.$$.fragment,Vt),Vt.forEach(t),Ks.forEach(t),mRe=i(c),id=n(c,"H2",{class:!0});var TPe=s(id);q1=n(TPe,"A",{id:!0,class:!0,href:!0});var tYr=s(q1);Yne=n(tYr,"SPAN",{});var aYr=s(Yne);m(ww.$$.fragment,aYr),aYr.forEach(t),tYr.forEach(t),T6o=i(TPe),Kne=n(TPe,"SPAN",{});var nYr=s(Kne);M6o=r(nYr,"AutoModelForSeq2SeqLM"),nYr.forEach(t),TPe.forEach(t),gRe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(Aw.$$.fragment,el),E6o=i(el),dd=n(el,"P",{});var lU=s(dd);C6o=r(lU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WI=n(lU,"A",{href:!0});var sYr=s(WI);w6o=r(sYr,"from_pretrained()"),sYr.forEach(t),A6o=r(lU," class method or the "),HI=n(lU,"A",{href:!0});var lYr=s(HI);y6o=r(lYr,"from_config()"),lYr.forEach(t),L6o=r(lU,` class
method.`),lU.forEach(t),x6o=i(el),yw=n(el,"P",{});var MPe=s(yw);k6o=r(MPe,"This class cannot be instantiated directly using "),Zne=n(MPe,"CODE",{});var iYr=s(Zne);S6o=r(iYr,"__init__()"),iYr.forEach(t),R6o=r(MPe," (throws an error)."),MPe.forEach(t),B6o=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(Lw.$$.fragment,ol),P6o=i(ol),ese=n(ol,"P",{});var dYr=s(ese);$6o=r(dYr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),dYr.forEach(t),I6o=i(ol),cd=n(ol,"P",{});var iU=s(cd);q6o=r(iU,`Note:
Loading a model from its configuration file does `),ose=n(iU,"STRONG",{});var cYr=s(ose);N6o=r(cYr,"not"),cYr.forEach(t),j6o=r(iU,` load the model weights. It only affects the
model\u2019s configuration. Use `),UI=n(iU,"A",{href:!0});var fYr=s(UI);D6o=r(fYr,"from_pretrained()"),fYr.forEach(t),G6o=r(iU," to load the model weights."),iU.forEach(t),O6o=i(ol),rse=n(ol,"P",{});var mYr=s(rse);V6o=r(mYr,"Examples:"),mYr.forEach(t),X6o=i(ol),m(xw.$$.fragment,ol),ol.forEach(t),z6o=i(el),Ge=n(el,"DIV",{class:!0});var Xt=s(Ge);m(kw.$$.fragment,Xt),Q6o=i(Xt),tse=n(Xt,"P",{});var gYr=s(tse);W6o=r(gYr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),gYr.forEach(t),H6o=i(Xt),Ha=n(Xt,"P",{});var wE=s(Ha);U6o=r(wE,"The model class to instantiate is selected based on the "),ase=n(wE,"CODE",{});var hYr=s(ase);J6o=r(hYr,"model_type"),hYr.forEach(t),Y6o=r(wE,` property of the config object (either
passed as an argument or loaded from `),nse=n(wE,"CODE",{});var pYr=s(nse);K6o=r(pYr,"pretrained_model_name_or_path"),pYr.forEach(t),Z6o=r(wE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sse=n(wE,"CODE",{});var _Yr=s(sse);eTo=r(_Yr,"pretrained_model_name_or_path"),_Yr.forEach(t),oTo=r(wE,":"),wE.forEach(t),rTo=i(Xt),se=n(Xt,"UL",{});var ie=s(se);N1=n(ie,"LI",{});var eAe=s(N1);lse=n(eAe,"STRONG",{});var uYr=s(lse);tTo=r(uYr,"bart"),uYr.forEach(t),aTo=r(eAe," \u2014 "),JI=n(eAe,"A",{href:!0});var bYr=s(JI);nTo=r(bYr,"BartForConditionalGeneration"),bYr.forEach(t),sTo=r(eAe," (BART model)"),eAe.forEach(t),lTo=i(ie),j1=n(ie,"LI",{});var oAe=s(j1);ise=n(oAe,"STRONG",{});var FYr=s(ise);iTo=r(FYr,"bigbird_pegasus"),FYr.forEach(t),dTo=r(oAe," \u2014 "),YI=n(oAe,"A",{href:!0});var vYr=s(YI);cTo=r(vYr,"BigBirdPegasusForConditionalGeneration"),vYr.forEach(t),fTo=r(oAe," (BigBirdPegasus model)"),oAe.forEach(t),mTo=i(ie),D1=n(ie,"LI",{});var rAe=s(D1);dse=n(rAe,"STRONG",{});var TYr=s(dse);gTo=r(TYr,"blenderbot"),TYr.forEach(t),hTo=r(rAe," \u2014 "),KI=n(rAe,"A",{href:!0});var MYr=s(KI);pTo=r(MYr,"BlenderbotForConditionalGeneration"),MYr.forEach(t),_To=r(rAe," (Blenderbot model)"),rAe.forEach(t),uTo=i(ie),G1=n(ie,"LI",{});var tAe=s(G1);cse=n(tAe,"STRONG",{});var EYr=s(cse);bTo=r(EYr,"blenderbot-small"),EYr.forEach(t),FTo=r(tAe," \u2014 "),ZI=n(tAe,"A",{href:!0});var CYr=s(ZI);vTo=r(CYr,"BlenderbotSmallForConditionalGeneration"),CYr.forEach(t),TTo=r(tAe," (BlenderbotSmall model)"),tAe.forEach(t),MTo=i(ie),O1=n(ie,"LI",{});var aAe=s(O1);fse=n(aAe,"STRONG",{});var wYr=s(fse);ETo=r(wYr,"encoder-decoder"),wYr.forEach(t),CTo=r(aAe," \u2014 "),eq=n(aAe,"A",{href:!0});var AYr=s(eq);wTo=r(AYr,"EncoderDecoderModel"),AYr.forEach(t),ATo=r(aAe," (Encoder decoder model)"),aAe.forEach(t),yTo=i(ie),V1=n(ie,"LI",{});var nAe=s(V1);mse=n(nAe,"STRONG",{});var yYr=s(mse);LTo=r(yYr,"fsmt"),yYr.forEach(t),xTo=r(nAe," \u2014 "),oq=n(nAe,"A",{href:!0});var LYr=s(oq);kTo=r(LYr,"FSMTForConditionalGeneration"),LYr.forEach(t),STo=r(nAe," (FairSeq Machine-Translation model)"),nAe.forEach(t),RTo=i(ie),X1=n(ie,"LI",{});var sAe=s(X1);gse=n(sAe,"STRONG",{});var xYr=s(gse);BTo=r(xYr,"led"),xYr.forEach(t),PTo=r(sAe," \u2014 "),rq=n(sAe,"A",{href:!0});var kYr=s(rq);$To=r(kYr,"LEDForConditionalGeneration"),kYr.forEach(t),ITo=r(sAe," (LED model)"),sAe.forEach(t),qTo=i(ie),z1=n(ie,"LI",{});var lAe=s(z1);hse=n(lAe,"STRONG",{});var SYr=s(hse);NTo=r(SYr,"m2m_100"),SYr.forEach(t),jTo=r(lAe," \u2014 "),tq=n(lAe,"A",{href:!0});var RYr=s(tq);DTo=r(RYr,"M2M100ForConditionalGeneration"),RYr.forEach(t),GTo=r(lAe," (M2M100 model)"),lAe.forEach(t),OTo=i(ie),Q1=n(ie,"LI",{});var iAe=s(Q1);pse=n(iAe,"STRONG",{});var BYr=s(pse);VTo=r(BYr,"marian"),BYr.forEach(t),XTo=r(iAe," \u2014 "),aq=n(iAe,"A",{href:!0});var PYr=s(aq);zTo=r(PYr,"MarianMTModel"),PYr.forEach(t),QTo=r(iAe," (Marian model)"),iAe.forEach(t),WTo=i(ie),W1=n(ie,"LI",{});var dAe=s(W1);_se=n(dAe,"STRONG",{});var $Yr=s(_se);HTo=r($Yr,"mbart"),$Yr.forEach(t),UTo=r(dAe," \u2014 "),nq=n(dAe,"A",{href:!0});var IYr=s(nq);JTo=r(IYr,"MBartForConditionalGeneration"),IYr.forEach(t),YTo=r(dAe," (mBART model)"),dAe.forEach(t),KTo=i(ie),H1=n(ie,"LI",{});var cAe=s(H1);use=n(cAe,"STRONG",{});var qYr=s(use);ZTo=r(qYr,"mt5"),qYr.forEach(t),eMo=r(cAe," \u2014 "),sq=n(cAe,"A",{href:!0});var NYr=s(sq);oMo=r(NYr,"MT5ForConditionalGeneration"),NYr.forEach(t),rMo=r(cAe," (mT5 model)"),cAe.forEach(t),tMo=i(ie),U1=n(ie,"LI",{});var fAe=s(U1);bse=n(fAe,"STRONG",{});var jYr=s(bse);aMo=r(jYr,"pegasus"),jYr.forEach(t),nMo=r(fAe," \u2014 "),lq=n(fAe,"A",{href:!0});var DYr=s(lq);sMo=r(DYr,"PegasusForConditionalGeneration"),DYr.forEach(t),lMo=r(fAe," (Pegasus model)"),fAe.forEach(t),iMo=i(ie),J1=n(ie,"LI",{});var mAe=s(J1);Fse=n(mAe,"STRONG",{});var GYr=s(Fse);dMo=r(GYr,"plbart"),GYr.forEach(t),cMo=r(mAe," \u2014 "),iq=n(mAe,"A",{href:!0});var OYr=s(iq);fMo=r(OYr,"PLBartForConditionalGeneration"),OYr.forEach(t),mMo=r(mAe," (PLBart model)"),mAe.forEach(t),gMo=i(ie),Y1=n(ie,"LI",{});var gAe=s(Y1);vse=n(gAe,"STRONG",{});var VYr=s(vse);hMo=r(VYr,"prophetnet"),VYr.forEach(t),pMo=r(gAe," \u2014 "),dq=n(gAe,"A",{href:!0});var XYr=s(dq);_Mo=r(XYr,"ProphetNetForConditionalGeneration"),XYr.forEach(t),uMo=r(gAe," (ProphetNet model)"),gAe.forEach(t),bMo=i(ie),K1=n(ie,"LI",{});var hAe=s(K1);Tse=n(hAe,"STRONG",{});var zYr=s(Tse);FMo=r(zYr,"t5"),zYr.forEach(t),vMo=r(hAe," \u2014 "),cq=n(hAe,"A",{href:!0});var QYr=s(cq);TMo=r(QYr,"T5ForConditionalGeneration"),QYr.forEach(t),MMo=r(hAe," (T5 model)"),hAe.forEach(t),EMo=i(ie),Z1=n(ie,"LI",{});var pAe=s(Z1);Mse=n(pAe,"STRONG",{});var WYr=s(Mse);CMo=r(WYr,"xlm-prophetnet"),WYr.forEach(t),wMo=r(pAe," \u2014 "),fq=n(pAe,"A",{href:!0});var HYr=s(fq);AMo=r(HYr,"XLMProphetNetForConditionalGeneration"),HYr.forEach(t),yMo=r(pAe," (XLMProphetNet model)"),pAe.forEach(t),ie.forEach(t),LMo=i(Xt),e4=n(Xt,"P",{});var _Ae=s(e4);xMo=r(_Ae,"The model is set in evaluation mode by default using "),Ese=n(_Ae,"CODE",{});var UYr=s(Ese);kMo=r(UYr,"model.eval()"),UYr.forEach(t),SMo=r(_Ae,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cse=n(_Ae,"CODE",{});var JYr=s(Cse);RMo=r(JYr,"model.train()"),JYr.forEach(t),_Ae.forEach(t),BMo=i(Xt),wse=n(Xt,"P",{});var YYr=s(wse);PMo=r(YYr,"Examples:"),YYr.forEach(t),$Mo=i(Xt),m(Sw.$$.fragment,Xt),Xt.forEach(t),el.forEach(t),hRe=i(c),fd=n(c,"H2",{class:!0});var EPe=s(fd);o4=n(EPe,"A",{id:!0,class:!0,href:!0});var KYr=s(o4);Ase=n(KYr,"SPAN",{});var ZYr=s(Ase);m(Rw.$$.fragment,ZYr),ZYr.forEach(t),KYr.forEach(t),IMo=i(EPe),yse=n(EPe,"SPAN",{});var eKr=s(yse);qMo=r(eKr,"AutoModelForSequenceClassification"),eKr.forEach(t),EPe.forEach(t),pRe=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(Bw.$$.fragment,rl),NMo=i(rl),md=n(rl,"P",{});var dU=s(md);jMo=r(dU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mq=n(dU,"A",{href:!0});var oKr=s(mq);DMo=r(oKr,"from_pretrained()"),oKr.forEach(t),GMo=r(dU," class method or the "),gq=n(dU,"A",{href:!0});var rKr=s(gq);OMo=r(rKr,"from_config()"),rKr.forEach(t),VMo=r(dU,` class
method.`),dU.forEach(t),XMo=i(rl),Pw=n(rl,"P",{});var CPe=s(Pw);zMo=r(CPe,"This class cannot be instantiated directly using "),Lse=n(CPe,"CODE",{});var tKr=s(Lse);QMo=r(tKr,"__init__()"),tKr.forEach(t),WMo=r(CPe," (throws an error)."),CPe.forEach(t),HMo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m($w.$$.fragment,tl),UMo=i(tl),xse=n(tl,"P",{});var aKr=s(xse);JMo=r(aKr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aKr.forEach(t),YMo=i(tl),gd=n(tl,"P",{});var cU=s(gd);KMo=r(cU,`Note:
Loading a model from its configuration file does `),kse=n(cU,"STRONG",{});var nKr=s(kse);ZMo=r(nKr,"not"),nKr.forEach(t),eEo=r(cU,` load the model weights. It only affects the
model\u2019s configuration. Use `),hq=n(cU,"A",{href:!0});var sKr=s(hq);oEo=r(sKr,"from_pretrained()"),sKr.forEach(t),rEo=r(cU," to load the model weights."),cU.forEach(t),tEo=i(tl),Sse=n(tl,"P",{});var lKr=s(Sse);aEo=r(lKr,"Examples:"),lKr.forEach(t),nEo=i(tl),m(Iw.$$.fragment,tl),tl.forEach(t),sEo=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(qw.$$.fragment,zt),lEo=i(zt),Rse=n(zt,"P",{});var iKr=s(Rse);iEo=r(iKr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iKr.forEach(t),dEo=i(zt),Ua=n(zt,"P",{});var AE=s(Ua);cEo=r(AE,"The model class to instantiate is selected based on the "),Bse=n(AE,"CODE",{});var dKr=s(Bse);fEo=r(dKr,"model_type"),dKr.forEach(t),mEo=r(AE,` property of the config object (either
passed as an argument or loaded from `),Pse=n(AE,"CODE",{});var cKr=s(Pse);gEo=r(cKr,"pretrained_model_name_or_path"),cKr.forEach(t),hEo=r(AE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$se=n(AE,"CODE",{});var fKr=s($se);pEo=r(fKr,"pretrained_model_name_or_path"),fKr.forEach(t),_Eo=r(AE,":"),AE.forEach(t),uEo=i(zt),y=n(zt,"UL",{});var x=s(y);r4=n(x,"LI",{});var uAe=s(r4);Ise=n(uAe,"STRONG",{});var mKr=s(Ise);bEo=r(mKr,"albert"),mKr.forEach(t),FEo=r(uAe," \u2014 "),pq=n(uAe,"A",{href:!0});var gKr=s(pq);vEo=r(gKr,"AlbertForSequenceClassification"),gKr.forEach(t),TEo=r(uAe," (ALBERT model)"),uAe.forEach(t),MEo=i(x),t4=n(x,"LI",{});var bAe=s(t4);qse=n(bAe,"STRONG",{});var hKr=s(qse);EEo=r(hKr,"bart"),hKr.forEach(t),CEo=r(bAe," \u2014 "),_q=n(bAe,"A",{href:!0});var pKr=s(_q);wEo=r(pKr,"BartForSequenceClassification"),pKr.forEach(t),AEo=r(bAe," (BART model)"),bAe.forEach(t),yEo=i(x),a4=n(x,"LI",{});var FAe=s(a4);Nse=n(FAe,"STRONG",{});var _Kr=s(Nse);LEo=r(_Kr,"bert"),_Kr.forEach(t),xEo=r(FAe," \u2014 "),uq=n(FAe,"A",{href:!0});var uKr=s(uq);kEo=r(uKr,"BertForSequenceClassification"),uKr.forEach(t),SEo=r(FAe," (BERT model)"),FAe.forEach(t),REo=i(x),n4=n(x,"LI",{});var vAe=s(n4);jse=n(vAe,"STRONG",{});var bKr=s(jse);BEo=r(bKr,"big_bird"),bKr.forEach(t),PEo=r(vAe," \u2014 "),bq=n(vAe,"A",{href:!0});var FKr=s(bq);$Eo=r(FKr,"BigBirdForSequenceClassification"),FKr.forEach(t),IEo=r(vAe," (BigBird model)"),vAe.forEach(t),qEo=i(x),s4=n(x,"LI",{});var TAe=s(s4);Dse=n(TAe,"STRONG",{});var vKr=s(Dse);NEo=r(vKr,"bigbird_pegasus"),vKr.forEach(t),jEo=r(TAe," \u2014 "),Fq=n(TAe,"A",{href:!0});var TKr=s(Fq);DEo=r(TKr,"BigBirdPegasusForSequenceClassification"),TKr.forEach(t),GEo=r(TAe," (BigBirdPegasus model)"),TAe.forEach(t),OEo=i(x),l4=n(x,"LI",{});var MAe=s(l4);Gse=n(MAe,"STRONG",{});var MKr=s(Gse);VEo=r(MKr,"camembert"),MKr.forEach(t),XEo=r(MAe," \u2014 "),vq=n(MAe,"A",{href:!0});var EKr=s(vq);zEo=r(EKr,"CamembertForSequenceClassification"),EKr.forEach(t),QEo=r(MAe," (CamemBERT model)"),MAe.forEach(t),WEo=i(x),i4=n(x,"LI",{});var EAe=s(i4);Ose=n(EAe,"STRONG",{});var CKr=s(Ose);HEo=r(CKr,"canine"),CKr.forEach(t),UEo=r(EAe," \u2014 "),Tq=n(EAe,"A",{href:!0});var wKr=s(Tq);JEo=r(wKr,"CanineForSequenceClassification"),wKr.forEach(t),YEo=r(EAe," (Canine model)"),EAe.forEach(t),KEo=i(x),d4=n(x,"LI",{});var CAe=s(d4);Vse=n(CAe,"STRONG",{});var AKr=s(Vse);ZEo=r(AKr,"convbert"),AKr.forEach(t),eCo=r(CAe," \u2014 "),Mq=n(CAe,"A",{href:!0});var yKr=s(Mq);oCo=r(yKr,"ConvBertForSequenceClassification"),yKr.forEach(t),rCo=r(CAe," (ConvBERT model)"),CAe.forEach(t),tCo=i(x),c4=n(x,"LI",{});var wAe=s(c4);Xse=n(wAe,"STRONG",{});var LKr=s(Xse);aCo=r(LKr,"ctrl"),LKr.forEach(t),nCo=r(wAe," \u2014 "),Eq=n(wAe,"A",{href:!0});var xKr=s(Eq);sCo=r(xKr,"CTRLForSequenceClassification"),xKr.forEach(t),lCo=r(wAe," (CTRL model)"),wAe.forEach(t),iCo=i(x),f4=n(x,"LI",{});var AAe=s(f4);zse=n(AAe,"STRONG",{});var kKr=s(zse);dCo=r(kKr,"data2vec-text"),kKr.forEach(t),cCo=r(AAe," \u2014 "),Cq=n(AAe,"A",{href:!0});var SKr=s(Cq);fCo=r(SKr,"Data2VecTextForSequenceClassification"),SKr.forEach(t),mCo=r(AAe," (Data2VecText model)"),AAe.forEach(t),gCo=i(x),m4=n(x,"LI",{});var yAe=s(m4);Qse=n(yAe,"STRONG",{});var RKr=s(Qse);hCo=r(RKr,"deberta"),RKr.forEach(t),pCo=r(yAe," \u2014 "),wq=n(yAe,"A",{href:!0});var BKr=s(wq);_Co=r(BKr,"DebertaForSequenceClassification"),BKr.forEach(t),uCo=r(yAe," (DeBERTa model)"),yAe.forEach(t),bCo=i(x),g4=n(x,"LI",{});var LAe=s(g4);Wse=n(LAe,"STRONG",{});var PKr=s(Wse);FCo=r(PKr,"deberta-v2"),PKr.forEach(t),vCo=r(LAe," \u2014 "),Aq=n(LAe,"A",{href:!0});var $Kr=s(Aq);TCo=r($Kr,"DebertaV2ForSequenceClassification"),$Kr.forEach(t),MCo=r(LAe," (DeBERTa-v2 model)"),LAe.forEach(t),ECo=i(x),h4=n(x,"LI",{});var xAe=s(h4);Hse=n(xAe,"STRONG",{});var IKr=s(Hse);CCo=r(IKr,"distilbert"),IKr.forEach(t),wCo=r(xAe," \u2014 "),yq=n(xAe,"A",{href:!0});var qKr=s(yq);ACo=r(qKr,"DistilBertForSequenceClassification"),qKr.forEach(t),yCo=r(xAe," (DistilBERT model)"),xAe.forEach(t),LCo=i(x),p4=n(x,"LI",{});var kAe=s(p4);Use=n(kAe,"STRONG",{});var NKr=s(Use);xCo=r(NKr,"electra"),NKr.forEach(t),kCo=r(kAe," \u2014 "),Lq=n(kAe,"A",{href:!0});var jKr=s(Lq);SCo=r(jKr,"ElectraForSequenceClassification"),jKr.forEach(t),RCo=r(kAe," (ELECTRA model)"),kAe.forEach(t),BCo=i(x),_4=n(x,"LI",{});var SAe=s(_4);Jse=n(SAe,"STRONG",{});var DKr=s(Jse);PCo=r(DKr,"flaubert"),DKr.forEach(t),$Co=r(SAe," \u2014 "),xq=n(SAe,"A",{href:!0});var GKr=s(xq);ICo=r(GKr,"FlaubertForSequenceClassification"),GKr.forEach(t),qCo=r(SAe," (FlauBERT model)"),SAe.forEach(t),NCo=i(x),u4=n(x,"LI",{});var RAe=s(u4);Yse=n(RAe,"STRONG",{});var OKr=s(Yse);jCo=r(OKr,"fnet"),OKr.forEach(t),DCo=r(RAe," \u2014 "),kq=n(RAe,"A",{href:!0});var VKr=s(kq);GCo=r(VKr,"FNetForSequenceClassification"),VKr.forEach(t),OCo=r(RAe," (FNet model)"),RAe.forEach(t),VCo=i(x),b4=n(x,"LI",{});var BAe=s(b4);Kse=n(BAe,"STRONG",{});var XKr=s(Kse);XCo=r(XKr,"funnel"),XKr.forEach(t),zCo=r(BAe," \u2014 "),Sq=n(BAe,"A",{href:!0});var zKr=s(Sq);QCo=r(zKr,"FunnelForSequenceClassification"),zKr.forEach(t),WCo=r(BAe," (Funnel Transformer model)"),BAe.forEach(t),HCo=i(x),F4=n(x,"LI",{});var PAe=s(F4);Zse=n(PAe,"STRONG",{});var QKr=s(Zse);UCo=r(QKr,"gpt2"),QKr.forEach(t),JCo=r(PAe," \u2014 "),Rq=n(PAe,"A",{href:!0});var WKr=s(Rq);YCo=r(WKr,"GPT2ForSequenceClassification"),WKr.forEach(t),KCo=r(PAe," (OpenAI GPT-2 model)"),PAe.forEach(t),ZCo=i(x),v4=n(x,"LI",{});var $Ae=s(v4);ele=n($Ae,"STRONG",{});var HKr=s(ele);ewo=r(HKr,"gpt_neo"),HKr.forEach(t),owo=r($Ae," \u2014 "),Bq=n($Ae,"A",{href:!0});var UKr=s(Bq);rwo=r(UKr,"GPTNeoForSequenceClassification"),UKr.forEach(t),two=r($Ae," (GPT Neo model)"),$Ae.forEach(t),awo=i(x),T4=n(x,"LI",{});var IAe=s(T4);ole=n(IAe,"STRONG",{});var JKr=s(ole);nwo=r(JKr,"gptj"),JKr.forEach(t),swo=r(IAe," \u2014 "),Pq=n(IAe,"A",{href:!0});var YKr=s(Pq);lwo=r(YKr,"GPTJForSequenceClassification"),YKr.forEach(t),iwo=r(IAe," (GPT-J model)"),IAe.forEach(t),dwo=i(x),M4=n(x,"LI",{});var qAe=s(M4);rle=n(qAe,"STRONG",{});var KKr=s(rle);cwo=r(KKr,"ibert"),KKr.forEach(t),fwo=r(qAe," \u2014 "),$q=n(qAe,"A",{href:!0});var ZKr=s($q);mwo=r(ZKr,"IBertForSequenceClassification"),ZKr.forEach(t),gwo=r(qAe," (I-BERT model)"),qAe.forEach(t),hwo=i(x),E4=n(x,"LI",{});var NAe=s(E4);tle=n(NAe,"STRONG",{});var eZr=s(tle);pwo=r(eZr,"layoutlm"),eZr.forEach(t),_wo=r(NAe," \u2014 "),Iq=n(NAe,"A",{href:!0});var oZr=s(Iq);uwo=r(oZr,"LayoutLMForSequenceClassification"),oZr.forEach(t),bwo=r(NAe," (LayoutLM model)"),NAe.forEach(t),Fwo=i(x),C4=n(x,"LI",{});var jAe=s(C4);ale=n(jAe,"STRONG",{});var rZr=s(ale);vwo=r(rZr,"layoutlmv2"),rZr.forEach(t),Two=r(jAe," \u2014 "),qq=n(jAe,"A",{href:!0});var tZr=s(qq);Mwo=r(tZr,"LayoutLMv2ForSequenceClassification"),tZr.forEach(t),Ewo=r(jAe," (LayoutLMv2 model)"),jAe.forEach(t),Cwo=i(x),w4=n(x,"LI",{});var DAe=s(w4);nle=n(DAe,"STRONG",{});var aZr=s(nle);wwo=r(aZr,"led"),aZr.forEach(t),Awo=r(DAe," \u2014 "),Nq=n(DAe,"A",{href:!0});var nZr=s(Nq);ywo=r(nZr,"LEDForSequenceClassification"),nZr.forEach(t),Lwo=r(DAe," (LED model)"),DAe.forEach(t),xwo=i(x),A4=n(x,"LI",{});var GAe=s(A4);sle=n(GAe,"STRONG",{});var sZr=s(sle);kwo=r(sZr,"longformer"),sZr.forEach(t),Swo=r(GAe," \u2014 "),jq=n(GAe,"A",{href:!0});var lZr=s(jq);Rwo=r(lZr,"LongformerForSequenceClassification"),lZr.forEach(t),Bwo=r(GAe," (Longformer model)"),GAe.forEach(t),Pwo=i(x),y4=n(x,"LI",{});var OAe=s(y4);lle=n(OAe,"STRONG",{});var iZr=s(lle);$wo=r(iZr,"mbart"),iZr.forEach(t),Iwo=r(OAe," \u2014 "),Dq=n(OAe,"A",{href:!0});var dZr=s(Dq);qwo=r(dZr,"MBartForSequenceClassification"),dZr.forEach(t),Nwo=r(OAe," (mBART model)"),OAe.forEach(t),jwo=i(x),L4=n(x,"LI",{});var VAe=s(L4);ile=n(VAe,"STRONG",{});var cZr=s(ile);Dwo=r(cZr,"megatron-bert"),cZr.forEach(t),Gwo=r(VAe," \u2014 "),Gq=n(VAe,"A",{href:!0});var fZr=s(Gq);Owo=r(fZr,"MegatronBertForSequenceClassification"),fZr.forEach(t),Vwo=r(VAe," (MegatronBert model)"),VAe.forEach(t),Xwo=i(x),x4=n(x,"LI",{});var XAe=s(x4);dle=n(XAe,"STRONG",{});var mZr=s(dle);zwo=r(mZr,"mobilebert"),mZr.forEach(t),Qwo=r(XAe," \u2014 "),Oq=n(XAe,"A",{href:!0});var gZr=s(Oq);Wwo=r(gZr,"MobileBertForSequenceClassification"),gZr.forEach(t),Hwo=r(XAe," (MobileBERT model)"),XAe.forEach(t),Uwo=i(x),k4=n(x,"LI",{});var zAe=s(k4);cle=n(zAe,"STRONG",{});var hZr=s(cle);Jwo=r(hZr,"mpnet"),hZr.forEach(t),Ywo=r(zAe," \u2014 "),Vq=n(zAe,"A",{href:!0});var pZr=s(Vq);Kwo=r(pZr,"MPNetForSequenceClassification"),pZr.forEach(t),Zwo=r(zAe," (MPNet model)"),zAe.forEach(t),eAo=i(x),S4=n(x,"LI",{});var QAe=s(S4);fle=n(QAe,"STRONG",{});var _Zr=s(fle);oAo=r(_Zr,"nystromformer"),_Zr.forEach(t),rAo=r(QAe," \u2014 "),Xq=n(QAe,"A",{href:!0});var uZr=s(Xq);tAo=r(uZr,"NystromformerForSequenceClassification"),uZr.forEach(t),aAo=r(QAe," (Nystromformer model)"),QAe.forEach(t),nAo=i(x),R4=n(x,"LI",{});var WAe=s(R4);mle=n(WAe,"STRONG",{});var bZr=s(mle);sAo=r(bZr,"openai-gpt"),bZr.forEach(t),lAo=r(WAe," \u2014 "),zq=n(WAe,"A",{href:!0});var FZr=s(zq);iAo=r(FZr,"OpenAIGPTForSequenceClassification"),FZr.forEach(t),dAo=r(WAe," (OpenAI GPT model)"),WAe.forEach(t),cAo=i(x),B4=n(x,"LI",{});var HAe=s(B4);gle=n(HAe,"STRONG",{});var vZr=s(gle);fAo=r(vZr,"perceiver"),vZr.forEach(t),mAo=r(HAe," \u2014 "),Qq=n(HAe,"A",{href:!0});var TZr=s(Qq);gAo=r(TZr,"PerceiverForSequenceClassification"),TZr.forEach(t),hAo=r(HAe," (Perceiver model)"),HAe.forEach(t),pAo=i(x),P4=n(x,"LI",{});var UAe=s(P4);hle=n(UAe,"STRONG",{});var MZr=s(hle);_Ao=r(MZr,"plbart"),MZr.forEach(t),uAo=r(UAe," \u2014 "),Wq=n(UAe,"A",{href:!0});var EZr=s(Wq);bAo=r(EZr,"PLBartForSequenceClassification"),EZr.forEach(t),FAo=r(UAe," (PLBart model)"),UAe.forEach(t),vAo=i(x),$4=n(x,"LI",{});var JAe=s($4);ple=n(JAe,"STRONG",{});var CZr=s(ple);TAo=r(CZr,"qdqbert"),CZr.forEach(t),MAo=r(JAe," \u2014 "),Hq=n(JAe,"A",{href:!0});var wZr=s(Hq);EAo=r(wZr,"QDQBertForSequenceClassification"),wZr.forEach(t),CAo=r(JAe," (QDQBert model)"),JAe.forEach(t),wAo=i(x),I4=n(x,"LI",{});var YAe=s(I4);_le=n(YAe,"STRONG",{});var AZr=s(_le);AAo=r(AZr,"reformer"),AZr.forEach(t),yAo=r(YAe," \u2014 "),Uq=n(YAe,"A",{href:!0});var yZr=s(Uq);LAo=r(yZr,"ReformerForSequenceClassification"),yZr.forEach(t),xAo=r(YAe," (Reformer model)"),YAe.forEach(t),kAo=i(x),q4=n(x,"LI",{});var KAe=s(q4);ule=n(KAe,"STRONG",{});var LZr=s(ule);SAo=r(LZr,"rembert"),LZr.forEach(t),RAo=r(KAe," \u2014 "),Jq=n(KAe,"A",{href:!0});var xZr=s(Jq);BAo=r(xZr,"RemBertForSequenceClassification"),xZr.forEach(t),PAo=r(KAe," (RemBERT model)"),KAe.forEach(t),$Ao=i(x),N4=n(x,"LI",{});var ZAe=s(N4);ble=n(ZAe,"STRONG",{});var kZr=s(ble);IAo=r(kZr,"roberta"),kZr.forEach(t),qAo=r(ZAe," \u2014 "),Yq=n(ZAe,"A",{href:!0});var SZr=s(Yq);NAo=r(SZr,"RobertaForSequenceClassification"),SZr.forEach(t),jAo=r(ZAe," (RoBERTa model)"),ZAe.forEach(t),DAo=i(x),j4=n(x,"LI",{});var e0e=s(j4);Fle=n(e0e,"STRONG",{});var RZr=s(Fle);GAo=r(RZr,"roformer"),RZr.forEach(t),OAo=r(e0e," \u2014 "),Kq=n(e0e,"A",{href:!0});var BZr=s(Kq);VAo=r(BZr,"RoFormerForSequenceClassification"),BZr.forEach(t),XAo=r(e0e," (RoFormer model)"),e0e.forEach(t),zAo=i(x),D4=n(x,"LI",{});var o0e=s(D4);vle=n(o0e,"STRONG",{});var PZr=s(vle);QAo=r(PZr,"squeezebert"),PZr.forEach(t),WAo=r(o0e," \u2014 "),Zq=n(o0e,"A",{href:!0});var $Zr=s(Zq);HAo=r($Zr,"SqueezeBertForSequenceClassification"),$Zr.forEach(t),UAo=r(o0e," (SqueezeBERT model)"),o0e.forEach(t),JAo=i(x),G4=n(x,"LI",{});var r0e=s(G4);Tle=n(r0e,"STRONG",{});var IZr=s(Tle);YAo=r(IZr,"tapas"),IZr.forEach(t),KAo=r(r0e," \u2014 "),eN=n(r0e,"A",{href:!0});var qZr=s(eN);ZAo=r(qZr,"TapasForSequenceClassification"),qZr.forEach(t),e0o=r(r0e," (TAPAS model)"),r0e.forEach(t),o0o=i(x),O4=n(x,"LI",{});var t0e=s(O4);Mle=n(t0e,"STRONG",{});var NZr=s(Mle);r0o=r(NZr,"transfo-xl"),NZr.forEach(t),t0o=r(t0e," \u2014 "),oN=n(t0e,"A",{href:!0});var jZr=s(oN);a0o=r(jZr,"TransfoXLForSequenceClassification"),jZr.forEach(t),n0o=r(t0e," (Transformer-XL model)"),t0e.forEach(t),s0o=i(x),V4=n(x,"LI",{});var a0e=s(V4);Ele=n(a0e,"STRONG",{});var DZr=s(Ele);l0o=r(DZr,"xlm"),DZr.forEach(t),i0o=r(a0e," \u2014 "),rN=n(a0e,"A",{href:!0});var GZr=s(rN);d0o=r(GZr,"XLMForSequenceClassification"),GZr.forEach(t),c0o=r(a0e," (XLM model)"),a0e.forEach(t),f0o=i(x),X4=n(x,"LI",{});var n0e=s(X4);Cle=n(n0e,"STRONG",{});var OZr=s(Cle);m0o=r(OZr,"xlm-roberta"),OZr.forEach(t),g0o=r(n0e," \u2014 "),tN=n(n0e,"A",{href:!0});var VZr=s(tN);h0o=r(VZr,"XLMRobertaForSequenceClassification"),VZr.forEach(t),p0o=r(n0e," (XLM-RoBERTa model)"),n0e.forEach(t),_0o=i(x),z4=n(x,"LI",{});var s0e=s(z4);wle=n(s0e,"STRONG",{});var XZr=s(wle);u0o=r(XZr,"xlm-roberta-xl"),XZr.forEach(t),b0o=r(s0e," \u2014 "),aN=n(s0e,"A",{href:!0});var zZr=s(aN);F0o=r(zZr,"XLMRobertaXLForSequenceClassification"),zZr.forEach(t),v0o=r(s0e," (XLM-RoBERTa-XL model)"),s0e.forEach(t),T0o=i(x),Q4=n(x,"LI",{});var l0e=s(Q4);Ale=n(l0e,"STRONG",{});var QZr=s(Ale);M0o=r(QZr,"xlnet"),QZr.forEach(t),E0o=r(l0e," \u2014 "),nN=n(l0e,"A",{href:!0});var WZr=s(nN);C0o=r(WZr,"XLNetForSequenceClassification"),WZr.forEach(t),w0o=r(l0e," (XLNet model)"),l0e.forEach(t),A0o=i(x),W4=n(x,"LI",{});var i0e=s(W4);yle=n(i0e,"STRONG",{});var HZr=s(yle);y0o=r(HZr,"yoso"),HZr.forEach(t),L0o=r(i0e," \u2014 "),sN=n(i0e,"A",{href:!0});var UZr=s(sN);x0o=r(UZr,"YosoForSequenceClassification"),UZr.forEach(t),k0o=r(i0e," (YOSO model)"),i0e.forEach(t),x.forEach(t),S0o=i(zt),H4=n(zt,"P",{});var d0e=s(H4);R0o=r(d0e,"The model is set in evaluation mode by default using "),Lle=n(d0e,"CODE",{});var JZr=s(Lle);B0o=r(JZr,"model.eval()"),JZr.forEach(t),P0o=r(d0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xle=n(d0e,"CODE",{});var YZr=s(xle);$0o=r(YZr,"model.train()"),YZr.forEach(t),d0e.forEach(t),I0o=i(zt),kle=n(zt,"P",{});var KZr=s(kle);q0o=r(KZr,"Examples:"),KZr.forEach(t),N0o=i(zt),m(Nw.$$.fragment,zt),zt.forEach(t),rl.forEach(t),_Re=i(c),hd=n(c,"H2",{class:!0});var wPe=s(hd);U4=n(wPe,"A",{id:!0,class:!0,href:!0});var ZZr=s(U4);Sle=n(ZZr,"SPAN",{});var eet=s(Sle);m(jw.$$.fragment,eet),eet.forEach(t),ZZr.forEach(t),j0o=i(wPe),Rle=n(wPe,"SPAN",{});var oet=s(Rle);D0o=r(oet,"AutoModelForMultipleChoice"),oet.forEach(t),wPe.forEach(t),uRe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(Dw.$$.fragment,al),G0o=i(al),pd=n(al,"P",{});var fU=s(pd);O0o=r(fU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lN=n(fU,"A",{href:!0});var ret=s(lN);V0o=r(ret,"from_pretrained()"),ret.forEach(t),X0o=r(fU," class method or the "),iN=n(fU,"A",{href:!0});var tet=s(iN);z0o=r(tet,"from_config()"),tet.forEach(t),Q0o=r(fU,` class
method.`),fU.forEach(t),W0o=i(al),Gw=n(al,"P",{});var APe=s(Gw);H0o=r(APe,"This class cannot be instantiated directly using "),Ble=n(APe,"CODE",{});var aet=s(Ble);U0o=r(aet,"__init__()"),aet.forEach(t),J0o=r(APe," (throws an error)."),APe.forEach(t),Y0o=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(Ow.$$.fragment,nl),K0o=i(nl),Ple=n(nl,"P",{});var net=s(Ple);Z0o=r(net,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),net.forEach(t),eyo=i(nl),_d=n(nl,"P",{});var mU=s(_d);oyo=r(mU,`Note:
Loading a model from its configuration file does `),$le=n(mU,"STRONG",{});var set=s($le);ryo=r(set,"not"),set.forEach(t),tyo=r(mU,` load the model weights. It only affects the
model\u2019s configuration. Use `),dN=n(mU,"A",{href:!0});var iet=s(dN);ayo=r(iet,"from_pretrained()"),iet.forEach(t),nyo=r(mU," to load the model weights."),mU.forEach(t),syo=i(nl),Ile=n(nl,"P",{});var det=s(Ile);lyo=r(det,"Examples:"),det.forEach(t),iyo=i(nl),m(Vw.$$.fragment,nl),nl.forEach(t),dyo=i(al),Ve=n(al,"DIV",{class:!0});var Qt=s(Ve);m(Xw.$$.fragment,Qt),cyo=i(Qt),qle=n(Qt,"P",{});var cet=s(qle);fyo=r(cet,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),cet.forEach(t),myo=i(Qt),Ja=n(Qt,"P",{});var yE=s(Ja);gyo=r(yE,"The model class to instantiate is selected based on the "),Nle=n(yE,"CODE",{});var fet=s(Nle);hyo=r(fet,"model_type"),fet.forEach(t),pyo=r(yE,` property of the config object (either
passed as an argument or loaded from `),jle=n(yE,"CODE",{});var met=s(jle);_yo=r(met,"pretrained_model_name_or_path"),met.forEach(t),uyo=r(yE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dle=n(yE,"CODE",{});var get=s(Dle);byo=r(get,"pretrained_model_name_or_path"),get.forEach(t),Fyo=r(yE,":"),yE.forEach(t),vyo=i(Qt),G=n(Qt,"UL",{});var O=s(G);J4=n(O,"LI",{});var c0e=s(J4);Gle=n(c0e,"STRONG",{});var het=s(Gle);Tyo=r(het,"albert"),het.forEach(t),Myo=r(c0e," \u2014 "),cN=n(c0e,"A",{href:!0});var pet=s(cN);Eyo=r(pet,"AlbertForMultipleChoice"),pet.forEach(t),Cyo=r(c0e," (ALBERT model)"),c0e.forEach(t),wyo=i(O),Y4=n(O,"LI",{});var f0e=s(Y4);Ole=n(f0e,"STRONG",{});var _et=s(Ole);Ayo=r(_et,"bert"),_et.forEach(t),yyo=r(f0e," \u2014 "),fN=n(f0e,"A",{href:!0});var uet=s(fN);Lyo=r(uet,"BertForMultipleChoice"),uet.forEach(t),xyo=r(f0e," (BERT model)"),f0e.forEach(t),kyo=i(O),K4=n(O,"LI",{});var m0e=s(K4);Vle=n(m0e,"STRONG",{});var bet=s(Vle);Syo=r(bet,"big_bird"),bet.forEach(t),Ryo=r(m0e," \u2014 "),mN=n(m0e,"A",{href:!0});var Fet=s(mN);Byo=r(Fet,"BigBirdForMultipleChoice"),Fet.forEach(t),Pyo=r(m0e," (BigBird model)"),m0e.forEach(t),$yo=i(O),Z4=n(O,"LI",{});var g0e=s(Z4);Xle=n(g0e,"STRONG",{});var vet=s(Xle);Iyo=r(vet,"camembert"),vet.forEach(t),qyo=r(g0e," \u2014 "),gN=n(g0e,"A",{href:!0});var Tet=s(gN);Nyo=r(Tet,"CamembertForMultipleChoice"),Tet.forEach(t),jyo=r(g0e," (CamemBERT model)"),g0e.forEach(t),Dyo=i(O),eb=n(O,"LI",{});var h0e=s(eb);zle=n(h0e,"STRONG",{});var Met=s(zle);Gyo=r(Met,"canine"),Met.forEach(t),Oyo=r(h0e," \u2014 "),hN=n(h0e,"A",{href:!0});var Eet=s(hN);Vyo=r(Eet,"CanineForMultipleChoice"),Eet.forEach(t),Xyo=r(h0e," (Canine model)"),h0e.forEach(t),zyo=i(O),ob=n(O,"LI",{});var p0e=s(ob);Qle=n(p0e,"STRONG",{});var Cet=s(Qle);Qyo=r(Cet,"convbert"),Cet.forEach(t),Wyo=r(p0e," \u2014 "),pN=n(p0e,"A",{href:!0});var wet=s(pN);Hyo=r(wet,"ConvBertForMultipleChoice"),wet.forEach(t),Uyo=r(p0e," (ConvBERT model)"),p0e.forEach(t),Jyo=i(O),rb=n(O,"LI",{});var _0e=s(rb);Wle=n(_0e,"STRONG",{});var Aet=s(Wle);Yyo=r(Aet,"data2vec-text"),Aet.forEach(t),Kyo=r(_0e," \u2014 "),_N=n(_0e,"A",{href:!0});var yet=s(_N);Zyo=r(yet,"Data2VecTextForMultipleChoice"),yet.forEach(t),eLo=r(_0e," (Data2VecText model)"),_0e.forEach(t),oLo=i(O),tb=n(O,"LI",{});var u0e=s(tb);Hle=n(u0e,"STRONG",{});var Let=s(Hle);rLo=r(Let,"distilbert"),Let.forEach(t),tLo=r(u0e," \u2014 "),uN=n(u0e,"A",{href:!0});var xet=s(uN);aLo=r(xet,"DistilBertForMultipleChoice"),xet.forEach(t),nLo=r(u0e," (DistilBERT model)"),u0e.forEach(t),sLo=i(O),ab=n(O,"LI",{});var b0e=s(ab);Ule=n(b0e,"STRONG",{});var ket=s(Ule);lLo=r(ket,"electra"),ket.forEach(t),iLo=r(b0e," \u2014 "),bN=n(b0e,"A",{href:!0});var Set=s(bN);dLo=r(Set,"ElectraForMultipleChoice"),Set.forEach(t),cLo=r(b0e," (ELECTRA model)"),b0e.forEach(t),fLo=i(O),nb=n(O,"LI",{});var F0e=s(nb);Jle=n(F0e,"STRONG",{});var Ret=s(Jle);mLo=r(Ret,"flaubert"),Ret.forEach(t),gLo=r(F0e," \u2014 "),FN=n(F0e,"A",{href:!0});var Bet=s(FN);hLo=r(Bet,"FlaubertForMultipleChoice"),Bet.forEach(t),pLo=r(F0e," (FlauBERT model)"),F0e.forEach(t),_Lo=i(O),sb=n(O,"LI",{});var v0e=s(sb);Yle=n(v0e,"STRONG",{});var Pet=s(Yle);uLo=r(Pet,"fnet"),Pet.forEach(t),bLo=r(v0e," \u2014 "),vN=n(v0e,"A",{href:!0});var $et=s(vN);FLo=r($et,"FNetForMultipleChoice"),$et.forEach(t),vLo=r(v0e," (FNet model)"),v0e.forEach(t),TLo=i(O),lb=n(O,"LI",{});var T0e=s(lb);Kle=n(T0e,"STRONG",{});var Iet=s(Kle);MLo=r(Iet,"funnel"),Iet.forEach(t),ELo=r(T0e," \u2014 "),TN=n(T0e,"A",{href:!0});var qet=s(TN);CLo=r(qet,"FunnelForMultipleChoice"),qet.forEach(t),wLo=r(T0e," (Funnel Transformer model)"),T0e.forEach(t),ALo=i(O),ib=n(O,"LI",{});var M0e=s(ib);Zle=n(M0e,"STRONG",{});var Net=s(Zle);yLo=r(Net,"ibert"),Net.forEach(t),LLo=r(M0e," \u2014 "),MN=n(M0e,"A",{href:!0});var jet=s(MN);xLo=r(jet,"IBertForMultipleChoice"),jet.forEach(t),kLo=r(M0e," (I-BERT model)"),M0e.forEach(t),SLo=i(O),db=n(O,"LI",{});var E0e=s(db);eie=n(E0e,"STRONG",{});var Det=s(eie);RLo=r(Det,"longformer"),Det.forEach(t),BLo=r(E0e," \u2014 "),EN=n(E0e,"A",{href:!0});var Get=s(EN);PLo=r(Get,"LongformerForMultipleChoice"),Get.forEach(t),$Lo=r(E0e," (Longformer model)"),E0e.forEach(t),ILo=i(O),cb=n(O,"LI",{});var C0e=s(cb);oie=n(C0e,"STRONG",{});var Oet=s(oie);qLo=r(Oet,"megatron-bert"),Oet.forEach(t),NLo=r(C0e," \u2014 "),CN=n(C0e,"A",{href:!0});var Vet=s(CN);jLo=r(Vet,"MegatronBertForMultipleChoice"),Vet.forEach(t),DLo=r(C0e," (MegatronBert model)"),C0e.forEach(t),GLo=i(O),fb=n(O,"LI",{});var w0e=s(fb);rie=n(w0e,"STRONG",{});var Xet=s(rie);OLo=r(Xet,"mobilebert"),Xet.forEach(t),VLo=r(w0e," \u2014 "),wN=n(w0e,"A",{href:!0});var zet=s(wN);XLo=r(zet,"MobileBertForMultipleChoice"),zet.forEach(t),zLo=r(w0e," (MobileBERT model)"),w0e.forEach(t),QLo=i(O),mb=n(O,"LI",{});var A0e=s(mb);tie=n(A0e,"STRONG",{});var Qet=s(tie);WLo=r(Qet,"mpnet"),Qet.forEach(t),HLo=r(A0e," \u2014 "),AN=n(A0e,"A",{href:!0});var Wet=s(AN);ULo=r(Wet,"MPNetForMultipleChoice"),Wet.forEach(t),JLo=r(A0e," (MPNet model)"),A0e.forEach(t),YLo=i(O),gb=n(O,"LI",{});var y0e=s(gb);aie=n(y0e,"STRONG",{});var Het=s(aie);KLo=r(Het,"nystromformer"),Het.forEach(t),ZLo=r(y0e," \u2014 "),yN=n(y0e,"A",{href:!0});var Uet=s(yN);e8o=r(Uet,"NystromformerForMultipleChoice"),Uet.forEach(t),o8o=r(y0e," (Nystromformer model)"),y0e.forEach(t),r8o=i(O),hb=n(O,"LI",{});var L0e=s(hb);nie=n(L0e,"STRONG",{});var Jet=s(nie);t8o=r(Jet,"qdqbert"),Jet.forEach(t),a8o=r(L0e," \u2014 "),LN=n(L0e,"A",{href:!0});var Yet=s(LN);n8o=r(Yet,"QDQBertForMultipleChoice"),Yet.forEach(t),s8o=r(L0e," (QDQBert model)"),L0e.forEach(t),l8o=i(O),pb=n(O,"LI",{});var x0e=s(pb);sie=n(x0e,"STRONG",{});var Ket=s(sie);i8o=r(Ket,"rembert"),Ket.forEach(t),d8o=r(x0e," \u2014 "),xN=n(x0e,"A",{href:!0});var Zet=s(xN);c8o=r(Zet,"RemBertForMultipleChoice"),Zet.forEach(t),f8o=r(x0e," (RemBERT model)"),x0e.forEach(t),m8o=i(O),_b=n(O,"LI",{});var k0e=s(_b);lie=n(k0e,"STRONG",{});var eot=s(lie);g8o=r(eot,"roberta"),eot.forEach(t),h8o=r(k0e," \u2014 "),kN=n(k0e,"A",{href:!0});var oot=s(kN);p8o=r(oot,"RobertaForMultipleChoice"),oot.forEach(t),_8o=r(k0e," (RoBERTa model)"),k0e.forEach(t),u8o=i(O),ub=n(O,"LI",{});var S0e=s(ub);iie=n(S0e,"STRONG",{});var rot=s(iie);b8o=r(rot,"roformer"),rot.forEach(t),F8o=r(S0e," \u2014 "),SN=n(S0e,"A",{href:!0});var tot=s(SN);v8o=r(tot,"RoFormerForMultipleChoice"),tot.forEach(t),T8o=r(S0e," (RoFormer model)"),S0e.forEach(t),M8o=i(O),bb=n(O,"LI",{});var R0e=s(bb);die=n(R0e,"STRONG",{});var aot=s(die);E8o=r(aot,"squeezebert"),aot.forEach(t),C8o=r(R0e," \u2014 "),RN=n(R0e,"A",{href:!0});var not=s(RN);w8o=r(not,"SqueezeBertForMultipleChoice"),not.forEach(t),A8o=r(R0e," (SqueezeBERT model)"),R0e.forEach(t),y8o=i(O),Fb=n(O,"LI",{});var B0e=s(Fb);cie=n(B0e,"STRONG",{});var sot=s(cie);L8o=r(sot,"xlm"),sot.forEach(t),x8o=r(B0e," \u2014 "),BN=n(B0e,"A",{href:!0});var lot=s(BN);k8o=r(lot,"XLMForMultipleChoice"),lot.forEach(t),S8o=r(B0e," (XLM model)"),B0e.forEach(t),R8o=i(O),vb=n(O,"LI",{});var P0e=s(vb);fie=n(P0e,"STRONG",{});var iot=s(fie);B8o=r(iot,"xlm-roberta"),iot.forEach(t),P8o=r(P0e," \u2014 "),PN=n(P0e,"A",{href:!0});var dot=s(PN);$8o=r(dot,"XLMRobertaForMultipleChoice"),dot.forEach(t),I8o=r(P0e," (XLM-RoBERTa model)"),P0e.forEach(t),q8o=i(O),Tb=n(O,"LI",{});var $0e=s(Tb);mie=n($0e,"STRONG",{});var cot=s(mie);N8o=r(cot,"xlm-roberta-xl"),cot.forEach(t),j8o=r($0e," \u2014 "),$N=n($0e,"A",{href:!0});var fot=s($N);D8o=r(fot,"XLMRobertaXLForMultipleChoice"),fot.forEach(t),G8o=r($0e," (XLM-RoBERTa-XL model)"),$0e.forEach(t),O8o=i(O),Mb=n(O,"LI",{});var I0e=s(Mb);gie=n(I0e,"STRONG",{});var mot=s(gie);V8o=r(mot,"xlnet"),mot.forEach(t),X8o=r(I0e," \u2014 "),IN=n(I0e,"A",{href:!0});var got=s(IN);z8o=r(got,"XLNetForMultipleChoice"),got.forEach(t),Q8o=r(I0e," (XLNet model)"),I0e.forEach(t),W8o=i(O),Eb=n(O,"LI",{});var q0e=s(Eb);hie=n(q0e,"STRONG",{});var hot=s(hie);H8o=r(hot,"yoso"),hot.forEach(t),U8o=r(q0e," \u2014 "),qN=n(q0e,"A",{href:!0});var pot=s(qN);J8o=r(pot,"YosoForMultipleChoice"),pot.forEach(t),Y8o=r(q0e," (YOSO model)"),q0e.forEach(t),O.forEach(t),K8o=i(Qt),Cb=n(Qt,"P",{});var N0e=s(Cb);Z8o=r(N0e,"The model is set in evaluation mode by default using "),pie=n(N0e,"CODE",{});var _ot=s(pie);e7o=r(_ot,"model.eval()"),_ot.forEach(t),o7o=r(N0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ie=n(N0e,"CODE",{});var uot=s(_ie);r7o=r(uot,"model.train()"),uot.forEach(t),N0e.forEach(t),t7o=i(Qt),uie=n(Qt,"P",{});var bot=s(uie);a7o=r(bot,"Examples:"),bot.forEach(t),n7o=i(Qt),m(zw.$$.fragment,Qt),Qt.forEach(t),al.forEach(t),bRe=i(c),ud=n(c,"H2",{class:!0});var yPe=s(ud);wb=n(yPe,"A",{id:!0,class:!0,href:!0});var Fot=s(wb);bie=n(Fot,"SPAN",{});var vot=s(bie);m(Qw.$$.fragment,vot),vot.forEach(t),Fot.forEach(t),s7o=i(yPe),Fie=n(yPe,"SPAN",{});var Tot=s(Fie);l7o=r(Tot,"AutoModelForNextSentencePrediction"),Tot.forEach(t),yPe.forEach(t),FRe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(Ww.$$.fragment,sl),i7o=i(sl),bd=n(sl,"P",{});var gU=s(bd);d7o=r(gU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NN=n(gU,"A",{href:!0});var Mot=s(NN);c7o=r(Mot,"from_pretrained()"),Mot.forEach(t),f7o=r(gU," class method or the "),jN=n(gU,"A",{href:!0});var Eot=s(jN);m7o=r(Eot,"from_config()"),Eot.forEach(t),g7o=r(gU,` class
method.`),gU.forEach(t),h7o=i(sl),Hw=n(sl,"P",{});var LPe=s(Hw);p7o=r(LPe,"This class cannot be instantiated directly using "),vie=n(LPe,"CODE",{});var Cot=s(vie);_7o=r(Cot,"__init__()"),Cot.forEach(t),u7o=r(LPe," (throws an error)."),LPe.forEach(t),b7o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(Uw.$$.fragment,ll),F7o=i(ll),Tie=n(ll,"P",{});var wot=s(Tie);v7o=r(wot,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wot.forEach(t),T7o=i(ll),Fd=n(ll,"P",{});var hU=s(Fd);M7o=r(hU,`Note:
Loading a model from its configuration file does `),Mie=n(hU,"STRONG",{});var Aot=s(Mie);E7o=r(Aot,"not"),Aot.forEach(t),C7o=r(hU,` load the model weights. It only affects the
model\u2019s configuration. Use `),DN=n(hU,"A",{href:!0});var yot=s(DN);w7o=r(yot,"from_pretrained()"),yot.forEach(t),A7o=r(hU," to load the model weights."),hU.forEach(t),y7o=i(ll),Eie=n(ll,"P",{});var Lot=s(Eie);L7o=r(Lot,"Examples:"),Lot.forEach(t),x7o=i(ll),m(Jw.$$.fragment,ll),ll.forEach(t),k7o=i(sl),Xe=n(sl,"DIV",{class:!0});var Wt=s(Xe);m(Yw.$$.fragment,Wt),S7o=i(Wt),Cie=n(Wt,"P",{});var xot=s(Cie);R7o=r(xot,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xot.forEach(t),B7o=i(Wt),Ya=n(Wt,"P",{});var LE=s(Ya);P7o=r(LE,"The model class to instantiate is selected based on the "),wie=n(LE,"CODE",{});var kot=s(wie);$7o=r(kot,"model_type"),kot.forEach(t),I7o=r(LE,` property of the config object (either
passed as an argument or loaded from `),Aie=n(LE,"CODE",{});var Sot=s(Aie);q7o=r(Sot,"pretrained_model_name_or_path"),Sot.forEach(t),N7o=r(LE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=n(LE,"CODE",{});var Rot=s(yie);j7o=r(Rot,"pretrained_model_name_or_path"),Rot.forEach(t),D7o=r(LE,":"),LE.forEach(t),G7o=i(Wt),da=n(Wt,"UL",{});var il=s(da);Ab=n(il,"LI",{});var j0e=s(Ab);Lie=n(j0e,"STRONG",{});var Bot=s(Lie);O7o=r(Bot,"bert"),Bot.forEach(t),V7o=r(j0e," \u2014 "),GN=n(j0e,"A",{href:!0});var Pot=s(GN);X7o=r(Pot,"BertForNextSentencePrediction"),Pot.forEach(t),z7o=r(j0e," (BERT model)"),j0e.forEach(t),Q7o=i(il),yb=n(il,"LI",{});var D0e=s(yb);xie=n(D0e,"STRONG",{});var $ot=s(xie);W7o=r($ot,"fnet"),$ot.forEach(t),H7o=r(D0e," \u2014 "),ON=n(D0e,"A",{href:!0});var Iot=s(ON);U7o=r(Iot,"FNetForNextSentencePrediction"),Iot.forEach(t),J7o=r(D0e," (FNet model)"),D0e.forEach(t),Y7o=i(il),Lb=n(il,"LI",{});var G0e=s(Lb);kie=n(G0e,"STRONG",{});var qot=s(kie);K7o=r(qot,"megatron-bert"),qot.forEach(t),Z7o=r(G0e," \u2014 "),VN=n(G0e,"A",{href:!0});var Not=s(VN);e9o=r(Not,"MegatronBertForNextSentencePrediction"),Not.forEach(t),o9o=r(G0e," (MegatronBert model)"),G0e.forEach(t),r9o=i(il),xb=n(il,"LI",{});var O0e=s(xb);Sie=n(O0e,"STRONG",{});var jot=s(Sie);t9o=r(jot,"mobilebert"),jot.forEach(t),a9o=r(O0e," \u2014 "),XN=n(O0e,"A",{href:!0});var Dot=s(XN);n9o=r(Dot,"MobileBertForNextSentencePrediction"),Dot.forEach(t),s9o=r(O0e," (MobileBERT model)"),O0e.forEach(t),l9o=i(il),kb=n(il,"LI",{});var V0e=s(kb);Rie=n(V0e,"STRONG",{});var Got=s(Rie);i9o=r(Got,"qdqbert"),Got.forEach(t),d9o=r(V0e," \u2014 "),zN=n(V0e,"A",{href:!0});var Oot=s(zN);c9o=r(Oot,"QDQBertForNextSentencePrediction"),Oot.forEach(t),f9o=r(V0e," (QDQBert model)"),V0e.forEach(t),il.forEach(t),m9o=i(Wt),Sb=n(Wt,"P",{});var X0e=s(Sb);g9o=r(X0e,"The model is set in evaluation mode by default using "),Bie=n(X0e,"CODE",{});var Vot=s(Bie);h9o=r(Vot,"model.eval()"),Vot.forEach(t),p9o=r(X0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pie=n(X0e,"CODE",{});var Xot=s(Pie);_9o=r(Xot,"model.train()"),Xot.forEach(t),X0e.forEach(t),u9o=i(Wt),$ie=n(Wt,"P",{});var zot=s($ie);b9o=r(zot,"Examples:"),zot.forEach(t),F9o=i(Wt),m(Kw.$$.fragment,Wt),Wt.forEach(t),sl.forEach(t),vRe=i(c),vd=n(c,"H2",{class:!0});var xPe=s(vd);Rb=n(xPe,"A",{id:!0,class:!0,href:!0});var Qot=s(Rb);Iie=n(Qot,"SPAN",{});var Wot=s(Iie);m(Zw.$$.fragment,Wot),Wot.forEach(t),Qot.forEach(t),v9o=i(xPe),qie=n(xPe,"SPAN",{});var Hot=s(qie);T9o=r(Hot,"AutoModelForTokenClassification"),Hot.forEach(t),xPe.forEach(t),TRe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(eA.$$.fragment,dl),M9o=i(dl),Td=n(dl,"P",{});var pU=s(Td);E9o=r(pU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QN=n(pU,"A",{href:!0});var Uot=s(QN);C9o=r(Uot,"from_pretrained()"),Uot.forEach(t),w9o=r(pU," class method or the "),WN=n(pU,"A",{href:!0});var Jot=s(WN);A9o=r(Jot,"from_config()"),Jot.forEach(t),y9o=r(pU,` class
method.`),pU.forEach(t),L9o=i(dl),oA=n(dl,"P",{});var kPe=s(oA);x9o=r(kPe,"This class cannot be instantiated directly using "),Nie=n(kPe,"CODE",{});var Yot=s(Nie);k9o=r(Yot,"__init__()"),Yot.forEach(t),S9o=r(kPe," (throws an error)."),kPe.forEach(t),R9o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(rA.$$.fragment,cl),B9o=i(cl),jie=n(cl,"P",{});var Kot=s(jie);P9o=r(Kot,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Kot.forEach(t),$9o=i(cl),Md=n(cl,"P",{});var _U=s(Md);I9o=r(_U,`Note:
Loading a model from its configuration file does `),Die=n(_U,"STRONG",{});var Zot=s(Die);q9o=r(Zot,"not"),Zot.forEach(t),N9o=r(_U,` load the model weights. It only affects the
model\u2019s configuration. Use `),HN=n(_U,"A",{href:!0});var ert=s(HN);j9o=r(ert,"from_pretrained()"),ert.forEach(t),D9o=r(_U," to load the model weights."),_U.forEach(t),G9o=i(cl),Gie=n(cl,"P",{});var ort=s(Gie);O9o=r(ort,"Examples:"),ort.forEach(t),V9o=i(cl),m(tA.$$.fragment,cl),cl.forEach(t),X9o=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(aA.$$.fragment,Ht),z9o=i(Ht),Oie=n(Ht,"P",{});var rrt=s(Oie);Q9o=r(rrt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rrt.forEach(t),W9o=i(Ht),Ka=n(Ht,"P",{});var xE=s(Ka);H9o=r(xE,"The model class to instantiate is selected based on the "),Vie=n(xE,"CODE",{});var trt=s(Vie);U9o=r(trt,"model_type"),trt.forEach(t),J9o=r(xE,` property of the config object (either
passed as an argument or loaded from `),Xie=n(xE,"CODE",{});var art=s(Xie);Y9o=r(art,"pretrained_model_name_or_path"),art.forEach(t),K9o=r(xE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zie=n(xE,"CODE",{});var nrt=s(zie);Z9o=r(nrt,"pretrained_model_name_or_path"),nrt.forEach(t),exo=r(xE,":"),xE.forEach(t),oxo=i(Ht),j=n(Ht,"UL",{});var D=s(j);Bb=n(D,"LI",{});var z0e=s(Bb);Qie=n(z0e,"STRONG",{});var srt=s(Qie);rxo=r(srt,"albert"),srt.forEach(t),txo=r(z0e," \u2014 "),UN=n(z0e,"A",{href:!0});var lrt=s(UN);axo=r(lrt,"AlbertForTokenClassification"),lrt.forEach(t),nxo=r(z0e," (ALBERT model)"),z0e.forEach(t),sxo=i(D),Pb=n(D,"LI",{});var Q0e=s(Pb);Wie=n(Q0e,"STRONG",{});var irt=s(Wie);lxo=r(irt,"bert"),irt.forEach(t),ixo=r(Q0e," \u2014 "),JN=n(Q0e,"A",{href:!0});var drt=s(JN);dxo=r(drt,"BertForTokenClassification"),drt.forEach(t),cxo=r(Q0e," (BERT model)"),Q0e.forEach(t),fxo=i(D),$b=n(D,"LI",{});var W0e=s($b);Hie=n(W0e,"STRONG",{});var crt=s(Hie);mxo=r(crt,"big_bird"),crt.forEach(t),gxo=r(W0e," \u2014 "),YN=n(W0e,"A",{href:!0});var frt=s(YN);hxo=r(frt,"BigBirdForTokenClassification"),frt.forEach(t),pxo=r(W0e," (BigBird model)"),W0e.forEach(t),_xo=i(D),Ib=n(D,"LI",{});var H0e=s(Ib);Uie=n(H0e,"STRONG",{});var mrt=s(Uie);uxo=r(mrt,"camembert"),mrt.forEach(t),bxo=r(H0e," \u2014 "),KN=n(H0e,"A",{href:!0});var grt=s(KN);Fxo=r(grt,"CamembertForTokenClassification"),grt.forEach(t),vxo=r(H0e," (CamemBERT model)"),H0e.forEach(t),Txo=i(D),qb=n(D,"LI",{});var U0e=s(qb);Jie=n(U0e,"STRONG",{});var hrt=s(Jie);Mxo=r(hrt,"canine"),hrt.forEach(t),Exo=r(U0e," \u2014 "),ZN=n(U0e,"A",{href:!0});var prt=s(ZN);Cxo=r(prt,"CanineForTokenClassification"),prt.forEach(t),wxo=r(U0e," (Canine model)"),U0e.forEach(t),Axo=i(D),Nb=n(D,"LI",{});var J0e=s(Nb);Yie=n(J0e,"STRONG",{});var _rt=s(Yie);yxo=r(_rt,"convbert"),_rt.forEach(t),Lxo=r(J0e," \u2014 "),ej=n(J0e,"A",{href:!0});var urt=s(ej);xxo=r(urt,"ConvBertForTokenClassification"),urt.forEach(t),kxo=r(J0e," (ConvBERT model)"),J0e.forEach(t),Sxo=i(D),jb=n(D,"LI",{});var Y0e=s(jb);Kie=n(Y0e,"STRONG",{});var brt=s(Kie);Rxo=r(brt,"data2vec-text"),brt.forEach(t),Bxo=r(Y0e," \u2014 "),oj=n(Y0e,"A",{href:!0});var Frt=s(oj);Pxo=r(Frt,"Data2VecTextForTokenClassification"),Frt.forEach(t),$xo=r(Y0e," (Data2VecText model)"),Y0e.forEach(t),Ixo=i(D),Db=n(D,"LI",{});var K0e=s(Db);Zie=n(K0e,"STRONG",{});var vrt=s(Zie);qxo=r(vrt,"deberta"),vrt.forEach(t),Nxo=r(K0e," \u2014 "),rj=n(K0e,"A",{href:!0});var Trt=s(rj);jxo=r(Trt,"DebertaForTokenClassification"),Trt.forEach(t),Dxo=r(K0e," (DeBERTa model)"),K0e.forEach(t),Gxo=i(D),Gb=n(D,"LI",{});var Z0e=s(Gb);ede=n(Z0e,"STRONG",{});var Mrt=s(ede);Oxo=r(Mrt,"deberta-v2"),Mrt.forEach(t),Vxo=r(Z0e," \u2014 "),tj=n(Z0e,"A",{href:!0});var Ert=s(tj);Xxo=r(Ert,"DebertaV2ForTokenClassification"),Ert.forEach(t),zxo=r(Z0e," (DeBERTa-v2 model)"),Z0e.forEach(t),Qxo=i(D),Ob=n(D,"LI",{});var eye=s(Ob);ode=n(eye,"STRONG",{});var Crt=s(ode);Wxo=r(Crt,"distilbert"),Crt.forEach(t),Hxo=r(eye," \u2014 "),aj=n(eye,"A",{href:!0});var wrt=s(aj);Uxo=r(wrt,"DistilBertForTokenClassification"),wrt.forEach(t),Jxo=r(eye," (DistilBERT model)"),eye.forEach(t),Yxo=i(D),Vb=n(D,"LI",{});var oye=s(Vb);rde=n(oye,"STRONG",{});var Art=s(rde);Kxo=r(Art,"electra"),Art.forEach(t),Zxo=r(oye," \u2014 "),nj=n(oye,"A",{href:!0});var yrt=s(nj);eko=r(yrt,"ElectraForTokenClassification"),yrt.forEach(t),oko=r(oye," (ELECTRA model)"),oye.forEach(t),rko=i(D),Xb=n(D,"LI",{});var rye=s(Xb);tde=n(rye,"STRONG",{});var Lrt=s(tde);tko=r(Lrt,"flaubert"),Lrt.forEach(t),ako=r(rye," \u2014 "),sj=n(rye,"A",{href:!0});var xrt=s(sj);nko=r(xrt,"FlaubertForTokenClassification"),xrt.forEach(t),sko=r(rye," (FlauBERT model)"),rye.forEach(t),lko=i(D),zb=n(D,"LI",{});var tye=s(zb);ade=n(tye,"STRONG",{});var krt=s(ade);iko=r(krt,"fnet"),krt.forEach(t),dko=r(tye," \u2014 "),lj=n(tye,"A",{href:!0});var Srt=s(lj);cko=r(Srt,"FNetForTokenClassification"),Srt.forEach(t),fko=r(tye," (FNet model)"),tye.forEach(t),mko=i(D),Qb=n(D,"LI",{});var aye=s(Qb);nde=n(aye,"STRONG",{});var Rrt=s(nde);gko=r(Rrt,"funnel"),Rrt.forEach(t),hko=r(aye," \u2014 "),ij=n(aye,"A",{href:!0});var Brt=s(ij);pko=r(Brt,"FunnelForTokenClassification"),Brt.forEach(t),_ko=r(aye," (Funnel Transformer model)"),aye.forEach(t),uko=i(D),Wb=n(D,"LI",{});var nye=s(Wb);sde=n(nye,"STRONG",{});var Prt=s(sde);bko=r(Prt,"gpt2"),Prt.forEach(t),Fko=r(nye," \u2014 "),dj=n(nye,"A",{href:!0});var $rt=s(dj);vko=r($rt,"GPT2ForTokenClassification"),$rt.forEach(t),Tko=r(nye," (OpenAI GPT-2 model)"),nye.forEach(t),Mko=i(D),Hb=n(D,"LI",{});var sye=s(Hb);lde=n(sye,"STRONG",{});var Irt=s(lde);Eko=r(Irt,"ibert"),Irt.forEach(t),Cko=r(sye," \u2014 "),cj=n(sye,"A",{href:!0});var qrt=s(cj);wko=r(qrt,"IBertForTokenClassification"),qrt.forEach(t),Ako=r(sye," (I-BERT model)"),sye.forEach(t),yko=i(D),Ub=n(D,"LI",{});var lye=s(Ub);ide=n(lye,"STRONG",{});var Nrt=s(ide);Lko=r(Nrt,"layoutlm"),Nrt.forEach(t),xko=r(lye," \u2014 "),fj=n(lye,"A",{href:!0});var jrt=s(fj);kko=r(jrt,"LayoutLMForTokenClassification"),jrt.forEach(t),Sko=r(lye," (LayoutLM model)"),lye.forEach(t),Rko=i(D),Jb=n(D,"LI",{});var iye=s(Jb);dde=n(iye,"STRONG",{});var Drt=s(dde);Bko=r(Drt,"layoutlmv2"),Drt.forEach(t),Pko=r(iye," \u2014 "),mj=n(iye,"A",{href:!0});var Grt=s(mj);$ko=r(Grt,"LayoutLMv2ForTokenClassification"),Grt.forEach(t),Iko=r(iye," (LayoutLMv2 model)"),iye.forEach(t),qko=i(D),Yb=n(D,"LI",{});var dye=s(Yb);cde=n(dye,"STRONG",{});var Ort=s(cde);Nko=r(Ort,"longformer"),Ort.forEach(t),jko=r(dye," \u2014 "),gj=n(dye,"A",{href:!0});var Vrt=s(gj);Dko=r(Vrt,"LongformerForTokenClassification"),Vrt.forEach(t),Gko=r(dye," (Longformer model)"),dye.forEach(t),Oko=i(D),Kb=n(D,"LI",{});var cye=s(Kb);fde=n(cye,"STRONG",{});var Xrt=s(fde);Vko=r(Xrt,"megatron-bert"),Xrt.forEach(t),Xko=r(cye," \u2014 "),hj=n(cye,"A",{href:!0});var zrt=s(hj);zko=r(zrt,"MegatronBertForTokenClassification"),zrt.forEach(t),Qko=r(cye," (MegatronBert model)"),cye.forEach(t),Wko=i(D),Zb=n(D,"LI",{});var fye=s(Zb);mde=n(fye,"STRONG",{});var Qrt=s(mde);Hko=r(Qrt,"mobilebert"),Qrt.forEach(t),Uko=r(fye," \u2014 "),pj=n(fye,"A",{href:!0});var Wrt=s(pj);Jko=r(Wrt,"MobileBertForTokenClassification"),Wrt.forEach(t),Yko=r(fye," (MobileBERT model)"),fye.forEach(t),Kko=i(D),e5=n(D,"LI",{});var mye=s(e5);gde=n(mye,"STRONG",{});var Hrt=s(gde);Zko=r(Hrt,"mpnet"),Hrt.forEach(t),eSo=r(mye," \u2014 "),_j=n(mye,"A",{href:!0});var Urt=s(_j);oSo=r(Urt,"MPNetForTokenClassification"),Urt.forEach(t),rSo=r(mye," (MPNet model)"),mye.forEach(t),tSo=i(D),o5=n(D,"LI",{});var gye=s(o5);hde=n(gye,"STRONG",{});var Jrt=s(hde);aSo=r(Jrt,"nystromformer"),Jrt.forEach(t),nSo=r(gye," \u2014 "),uj=n(gye,"A",{href:!0});var Yrt=s(uj);sSo=r(Yrt,"NystromformerForTokenClassification"),Yrt.forEach(t),lSo=r(gye," (Nystromformer model)"),gye.forEach(t),iSo=i(D),r5=n(D,"LI",{});var hye=s(r5);pde=n(hye,"STRONG",{});var Krt=s(pde);dSo=r(Krt,"qdqbert"),Krt.forEach(t),cSo=r(hye," \u2014 "),bj=n(hye,"A",{href:!0});var Zrt=s(bj);fSo=r(Zrt,"QDQBertForTokenClassification"),Zrt.forEach(t),mSo=r(hye," (QDQBert model)"),hye.forEach(t),gSo=i(D),t5=n(D,"LI",{});var pye=s(t5);_de=n(pye,"STRONG",{});var ett=s(_de);hSo=r(ett,"rembert"),ett.forEach(t),pSo=r(pye," \u2014 "),Fj=n(pye,"A",{href:!0});var ott=s(Fj);_So=r(ott,"RemBertForTokenClassification"),ott.forEach(t),uSo=r(pye," (RemBERT model)"),pye.forEach(t),bSo=i(D),a5=n(D,"LI",{});var _ye=s(a5);ude=n(_ye,"STRONG",{});var rtt=s(ude);FSo=r(rtt,"roberta"),rtt.forEach(t),vSo=r(_ye," \u2014 "),vj=n(_ye,"A",{href:!0});var ttt=s(vj);TSo=r(ttt,"RobertaForTokenClassification"),ttt.forEach(t),MSo=r(_ye," (RoBERTa model)"),_ye.forEach(t),ESo=i(D),n5=n(D,"LI",{});var uye=s(n5);bde=n(uye,"STRONG",{});var att=s(bde);CSo=r(att,"roformer"),att.forEach(t),wSo=r(uye," \u2014 "),Tj=n(uye,"A",{href:!0});var ntt=s(Tj);ASo=r(ntt,"RoFormerForTokenClassification"),ntt.forEach(t),ySo=r(uye," (RoFormer model)"),uye.forEach(t),LSo=i(D),s5=n(D,"LI",{});var bye=s(s5);Fde=n(bye,"STRONG",{});var stt=s(Fde);xSo=r(stt,"squeezebert"),stt.forEach(t),kSo=r(bye," \u2014 "),Mj=n(bye,"A",{href:!0});var ltt=s(Mj);SSo=r(ltt,"SqueezeBertForTokenClassification"),ltt.forEach(t),RSo=r(bye," (SqueezeBERT model)"),bye.forEach(t),BSo=i(D),l5=n(D,"LI",{});var Fye=s(l5);vde=n(Fye,"STRONG",{});var itt=s(vde);PSo=r(itt,"xlm"),itt.forEach(t),$So=r(Fye," \u2014 "),Ej=n(Fye,"A",{href:!0});var dtt=s(Ej);ISo=r(dtt,"XLMForTokenClassification"),dtt.forEach(t),qSo=r(Fye," (XLM model)"),Fye.forEach(t),NSo=i(D),i5=n(D,"LI",{});var vye=s(i5);Tde=n(vye,"STRONG",{});var ctt=s(Tde);jSo=r(ctt,"xlm-roberta"),ctt.forEach(t),DSo=r(vye," \u2014 "),Cj=n(vye,"A",{href:!0});var ftt=s(Cj);GSo=r(ftt,"XLMRobertaForTokenClassification"),ftt.forEach(t),OSo=r(vye," (XLM-RoBERTa model)"),vye.forEach(t),VSo=i(D),d5=n(D,"LI",{});var Tye=s(d5);Mde=n(Tye,"STRONG",{});var mtt=s(Mde);XSo=r(mtt,"xlm-roberta-xl"),mtt.forEach(t),zSo=r(Tye," \u2014 "),wj=n(Tye,"A",{href:!0});var gtt=s(wj);QSo=r(gtt,"XLMRobertaXLForTokenClassification"),gtt.forEach(t),WSo=r(Tye," (XLM-RoBERTa-XL model)"),Tye.forEach(t),HSo=i(D),c5=n(D,"LI",{});var Mye=s(c5);Ede=n(Mye,"STRONG",{});var htt=s(Ede);USo=r(htt,"xlnet"),htt.forEach(t),JSo=r(Mye," \u2014 "),Aj=n(Mye,"A",{href:!0});var ptt=s(Aj);YSo=r(ptt,"XLNetForTokenClassification"),ptt.forEach(t),KSo=r(Mye," (XLNet model)"),Mye.forEach(t),ZSo=i(D),f5=n(D,"LI",{});var Eye=s(f5);Cde=n(Eye,"STRONG",{});var _tt=s(Cde);eRo=r(_tt,"yoso"),_tt.forEach(t),oRo=r(Eye," \u2014 "),yj=n(Eye,"A",{href:!0});var utt=s(yj);rRo=r(utt,"YosoForTokenClassification"),utt.forEach(t),tRo=r(Eye," (YOSO model)"),Eye.forEach(t),D.forEach(t),aRo=i(Ht),m5=n(Ht,"P",{});var Cye=s(m5);nRo=r(Cye,"The model is set in evaluation mode by default using "),wde=n(Cye,"CODE",{});var btt=s(wde);sRo=r(btt,"model.eval()"),btt.forEach(t),lRo=r(Cye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ade=n(Cye,"CODE",{});var Ftt=s(Ade);iRo=r(Ftt,"model.train()"),Ftt.forEach(t),Cye.forEach(t),dRo=i(Ht),yde=n(Ht,"P",{});var vtt=s(yde);cRo=r(vtt,"Examples:"),vtt.forEach(t),fRo=i(Ht),m(nA.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),MRe=i(c),Ed=n(c,"H2",{class:!0});var SPe=s(Ed);g5=n(SPe,"A",{id:!0,class:!0,href:!0});var Ttt=s(g5);Lde=n(Ttt,"SPAN",{});var Mtt=s(Lde);m(sA.$$.fragment,Mtt),Mtt.forEach(t),Ttt.forEach(t),mRo=i(SPe),xde=n(SPe,"SPAN",{});var Ett=s(xde);gRo=r(Ett,"AutoModelForQuestionAnswering"),Ett.forEach(t),SPe.forEach(t),ERe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(lA.$$.fragment,fl),hRo=i(fl),Cd=n(fl,"P",{});var uU=s(Cd);pRo=r(uU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Lj=n(uU,"A",{href:!0});var Ctt=s(Lj);_Ro=r(Ctt,"from_pretrained()"),Ctt.forEach(t),uRo=r(uU," class method or the "),xj=n(uU,"A",{href:!0});var wtt=s(xj);bRo=r(wtt,"from_config()"),wtt.forEach(t),FRo=r(uU,` class
method.`),uU.forEach(t),vRo=i(fl),iA=n(fl,"P",{});var RPe=s(iA);TRo=r(RPe,"This class cannot be instantiated directly using "),kde=n(RPe,"CODE",{});var Att=s(kde);MRo=r(Att,"__init__()"),Att.forEach(t),ERo=r(RPe," (throws an error)."),RPe.forEach(t),CRo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(dA.$$.fragment,ml),wRo=i(ml),Sde=n(ml,"P",{});var ytt=s(Sde);ARo=r(ytt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ytt.forEach(t),yRo=i(ml),wd=n(ml,"P",{});var bU=s(wd);LRo=r(bU,`Note:
Loading a model from its configuration file does `),Rde=n(bU,"STRONG",{});var Ltt=s(Rde);xRo=r(Ltt,"not"),Ltt.forEach(t),kRo=r(bU,` load the model weights. It only affects the
model\u2019s configuration. Use `),kj=n(bU,"A",{href:!0});var xtt=s(kj);SRo=r(xtt,"from_pretrained()"),xtt.forEach(t),RRo=r(bU," to load the model weights."),bU.forEach(t),BRo=i(ml),Bde=n(ml,"P",{});var ktt=s(Bde);PRo=r(ktt,"Examples:"),ktt.forEach(t),$Ro=i(ml),m(cA.$$.fragment,ml),ml.forEach(t),IRo=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);m(fA.$$.fragment,Ut),qRo=i(Ut),Pde=n(Ut,"P",{});var Stt=s(Pde);NRo=r(Stt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Stt.forEach(t),jRo=i(Ut),Za=n(Ut,"P",{});var kE=s(Za);DRo=r(kE,"The model class to instantiate is selected based on the "),$de=n(kE,"CODE",{});var Rtt=s($de);GRo=r(Rtt,"model_type"),Rtt.forEach(t),ORo=r(kE,` property of the config object (either
passed as an argument or loaded from `),Ide=n(kE,"CODE",{});var Btt=s(Ide);VRo=r(Btt,"pretrained_model_name_or_path"),Btt.forEach(t),XRo=r(kE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qde=n(kE,"CODE",{});var Ptt=s(qde);zRo=r(Ptt,"pretrained_model_name_or_path"),Ptt.forEach(t),QRo=r(kE,":"),kE.forEach(t),WRo=i(Ut),R=n(Ut,"UL",{});var P=s(R);h5=n(P,"LI",{});var wye=s(h5);Nde=n(wye,"STRONG",{});var $tt=s(Nde);HRo=r($tt,"albert"),$tt.forEach(t),URo=r(wye," \u2014 "),Sj=n(wye,"A",{href:!0});var Itt=s(Sj);JRo=r(Itt,"AlbertForQuestionAnswering"),Itt.forEach(t),YRo=r(wye," (ALBERT model)"),wye.forEach(t),KRo=i(P),p5=n(P,"LI",{});var Aye=s(p5);jde=n(Aye,"STRONG",{});var qtt=s(jde);ZRo=r(qtt,"bart"),qtt.forEach(t),eBo=r(Aye," \u2014 "),Rj=n(Aye,"A",{href:!0});var Ntt=s(Rj);oBo=r(Ntt,"BartForQuestionAnswering"),Ntt.forEach(t),rBo=r(Aye," (BART model)"),Aye.forEach(t),tBo=i(P),_5=n(P,"LI",{});var yye=s(_5);Dde=n(yye,"STRONG",{});var jtt=s(Dde);aBo=r(jtt,"bert"),jtt.forEach(t),nBo=r(yye," \u2014 "),Bj=n(yye,"A",{href:!0});var Dtt=s(Bj);sBo=r(Dtt,"BertForQuestionAnswering"),Dtt.forEach(t),lBo=r(yye," (BERT model)"),yye.forEach(t),iBo=i(P),u5=n(P,"LI",{});var Lye=s(u5);Gde=n(Lye,"STRONG",{});var Gtt=s(Gde);dBo=r(Gtt,"big_bird"),Gtt.forEach(t),cBo=r(Lye," \u2014 "),Pj=n(Lye,"A",{href:!0});var Ott=s(Pj);fBo=r(Ott,"BigBirdForQuestionAnswering"),Ott.forEach(t),mBo=r(Lye," (BigBird model)"),Lye.forEach(t),gBo=i(P),b5=n(P,"LI",{});var xye=s(b5);Ode=n(xye,"STRONG",{});var Vtt=s(Ode);hBo=r(Vtt,"bigbird_pegasus"),Vtt.forEach(t),pBo=r(xye," \u2014 "),$j=n(xye,"A",{href:!0});var Xtt=s($j);_Bo=r(Xtt,"BigBirdPegasusForQuestionAnswering"),Xtt.forEach(t),uBo=r(xye," (BigBirdPegasus model)"),xye.forEach(t),bBo=i(P),F5=n(P,"LI",{});var kye=s(F5);Vde=n(kye,"STRONG",{});var ztt=s(Vde);FBo=r(ztt,"camembert"),ztt.forEach(t),vBo=r(kye," \u2014 "),Ij=n(kye,"A",{href:!0});var Qtt=s(Ij);TBo=r(Qtt,"CamembertForQuestionAnswering"),Qtt.forEach(t),MBo=r(kye," (CamemBERT model)"),kye.forEach(t),EBo=i(P),v5=n(P,"LI",{});var Sye=s(v5);Xde=n(Sye,"STRONG",{});var Wtt=s(Xde);CBo=r(Wtt,"canine"),Wtt.forEach(t),wBo=r(Sye," \u2014 "),qj=n(Sye,"A",{href:!0});var Htt=s(qj);ABo=r(Htt,"CanineForQuestionAnswering"),Htt.forEach(t),yBo=r(Sye," (Canine model)"),Sye.forEach(t),LBo=i(P),T5=n(P,"LI",{});var Rye=s(T5);zde=n(Rye,"STRONG",{});var Utt=s(zde);xBo=r(Utt,"convbert"),Utt.forEach(t),kBo=r(Rye," \u2014 "),Nj=n(Rye,"A",{href:!0});var Jtt=s(Nj);SBo=r(Jtt,"ConvBertForQuestionAnswering"),Jtt.forEach(t),RBo=r(Rye," (ConvBERT model)"),Rye.forEach(t),BBo=i(P),M5=n(P,"LI",{});var Bye=s(M5);Qde=n(Bye,"STRONG",{});var Ytt=s(Qde);PBo=r(Ytt,"data2vec-text"),Ytt.forEach(t),$Bo=r(Bye," \u2014 "),jj=n(Bye,"A",{href:!0});var Ktt=s(jj);IBo=r(Ktt,"Data2VecTextForQuestionAnswering"),Ktt.forEach(t),qBo=r(Bye," (Data2VecText model)"),Bye.forEach(t),NBo=i(P),E5=n(P,"LI",{});var Pye=s(E5);Wde=n(Pye,"STRONG",{});var Ztt=s(Wde);jBo=r(Ztt,"deberta"),Ztt.forEach(t),DBo=r(Pye," \u2014 "),Dj=n(Pye,"A",{href:!0});var eat=s(Dj);GBo=r(eat,"DebertaForQuestionAnswering"),eat.forEach(t),OBo=r(Pye," (DeBERTa model)"),Pye.forEach(t),VBo=i(P),C5=n(P,"LI",{});var $ye=s(C5);Hde=n($ye,"STRONG",{});var oat=s(Hde);XBo=r(oat,"deberta-v2"),oat.forEach(t),zBo=r($ye," \u2014 "),Gj=n($ye,"A",{href:!0});var rat=s(Gj);QBo=r(rat,"DebertaV2ForQuestionAnswering"),rat.forEach(t),WBo=r($ye," (DeBERTa-v2 model)"),$ye.forEach(t),HBo=i(P),w5=n(P,"LI",{});var Iye=s(w5);Ude=n(Iye,"STRONG",{});var tat=s(Ude);UBo=r(tat,"distilbert"),tat.forEach(t),JBo=r(Iye," \u2014 "),Oj=n(Iye,"A",{href:!0});var aat=s(Oj);YBo=r(aat,"DistilBertForQuestionAnswering"),aat.forEach(t),KBo=r(Iye," (DistilBERT model)"),Iye.forEach(t),ZBo=i(P),A5=n(P,"LI",{});var qye=s(A5);Jde=n(qye,"STRONG",{});var nat=s(Jde);ePo=r(nat,"electra"),nat.forEach(t),oPo=r(qye," \u2014 "),Vj=n(qye,"A",{href:!0});var sat=s(Vj);rPo=r(sat,"ElectraForQuestionAnswering"),sat.forEach(t),tPo=r(qye," (ELECTRA model)"),qye.forEach(t),aPo=i(P),y5=n(P,"LI",{});var Nye=s(y5);Yde=n(Nye,"STRONG",{});var lat=s(Yde);nPo=r(lat,"flaubert"),lat.forEach(t),sPo=r(Nye," \u2014 "),Xj=n(Nye,"A",{href:!0});var iat=s(Xj);lPo=r(iat,"FlaubertForQuestionAnsweringSimple"),iat.forEach(t),iPo=r(Nye," (FlauBERT model)"),Nye.forEach(t),dPo=i(P),L5=n(P,"LI",{});var jye=s(L5);Kde=n(jye,"STRONG",{});var dat=s(Kde);cPo=r(dat,"fnet"),dat.forEach(t),fPo=r(jye," \u2014 "),zj=n(jye,"A",{href:!0});var cat=s(zj);mPo=r(cat,"FNetForQuestionAnswering"),cat.forEach(t),gPo=r(jye," (FNet model)"),jye.forEach(t),hPo=i(P),x5=n(P,"LI",{});var Dye=s(x5);Zde=n(Dye,"STRONG",{});var fat=s(Zde);pPo=r(fat,"funnel"),fat.forEach(t),_Po=r(Dye," \u2014 "),Qj=n(Dye,"A",{href:!0});var mat=s(Qj);uPo=r(mat,"FunnelForQuestionAnswering"),mat.forEach(t),bPo=r(Dye," (Funnel Transformer model)"),Dye.forEach(t),FPo=i(P),k5=n(P,"LI",{});var Gye=s(k5);ece=n(Gye,"STRONG",{});var gat=s(ece);vPo=r(gat,"gptj"),gat.forEach(t),TPo=r(Gye," \u2014 "),Wj=n(Gye,"A",{href:!0});var hat=s(Wj);MPo=r(hat,"GPTJForQuestionAnswering"),hat.forEach(t),EPo=r(Gye," (GPT-J model)"),Gye.forEach(t),CPo=i(P),S5=n(P,"LI",{});var Oye=s(S5);oce=n(Oye,"STRONG",{});var pat=s(oce);wPo=r(pat,"ibert"),pat.forEach(t),APo=r(Oye," \u2014 "),Hj=n(Oye,"A",{href:!0});var _at=s(Hj);yPo=r(_at,"IBertForQuestionAnswering"),_at.forEach(t),LPo=r(Oye," (I-BERT model)"),Oye.forEach(t),xPo=i(P),R5=n(P,"LI",{});var Vye=s(R5);rce=n(Vye,"STRONG",{});var uat=s(rce);kPo=r(uat,"layoutlmv2"),uat.forEach(t),SPo=r(Vye," \u2014 "),Uj=n(Vye,"A",{href:!0});var bat=s(Uj);RPo=r(bat,"LayoutLMv2ForQuestionAnswering"),bat.forEach(t),BPo=r(Vye," (LayoutLMv2 model)"),Vye.forEach(t),PPo=i(P),B5=n(P,"LI",{});var Xye=s(B5);tce=n(Xye,"STRONG",{});var Fat=s(tce);$Po=r(Fat,"led"),Fat.forEach(t),IPo=r(Xye," \u2014 "),Jj=n(Xye,"A",{href:!0});var vat=s(Jj);qPo=r(vat,"LEDForQuestionAnswering"),vat.forEach(t),NPo=r(Xye," (LED model)"),Xye.forEach(t),jPo=i(P),P5=n(P,"LI",{});var zye=s(P5);ace=n(zye,"STRONG",{});var Tat=s(ace);DPo=r(Tat,"longformer"),Tat.forEach(t),GPo=r(zye," \u2014 "),Yj=n(zye,"A",{href:!0});var Mat=s(Yj);OPo=r(Mat,"LongformerForQuestionAnswering"),Mat.forEach(t),VPo=r(zye," (Longformer model)"),zye.forEach(t),XPo=i(P),$5=n(P,"LI",{});var Qye=s($5);nce=n(Qye,"STRONG",{});var Eat=s(nce);zPo=r(Eat,"lxmert"),Eat.forEach(t),QPo=r(Qye," \u2014 "),Kj=n(Qye,"A",{href:!0});var Cat=s(Kj);WPo=r(Cat,"LxmertForQuestionAnswering"),Cat.forEach(t),HPo=r(Qye," (LXMERT model)"),Qye.forEach(t),UPo=i(P),I5=n(P,"LI",{});var Wye=s(I5);sce=n(Wye,"STRONG",{});var wat=s(sce);JPo=r(wat,"mbart"),wat.forEach(t),YPo=r(Wye," \u2014 "),Zj=n(Wye,"A",{href:!0});var Aat=s(Zj);KPo=r(Aat,"MBartForQuestionAnswering"),Aat.forEach(t),ZPo=r(Wye," (mBART model)"),Wye.forEach(t),e$o=i(P),q5=n(P,"LI",{});var Hye=s(q5);lce=n(Hye,"STRONG",{});var yat=s(lce);o$o=r(yat,"megatron-bert"),yat.forEach(t),r$o=r(Hye," \u2014 "),eD=n(Hye,"A",{href:!0});var Lat=s(eD);t$o=r(Lat,"MegatronBertForQuestionAnswering"),Lat.forEach(t),a$o=r(Hye," (MegatronBert model)"),Hye.forEach(t),n$o=i(P),N5=n(P,"LI",{});var Uye=s(N5);ice=n(Uye,"STRONG",{});var xat=s(ice);s$o=r(xat,"mobilebert"),xat.forEach(t),l$o=r(Uye," \u2014 "),oD=n(Uye,"A",{href:!0});var kat=s(oD);i$o=r(kat,"MobileBertForQuestionAnswering"),kat.forEach(t),d$o=r(Uye," (MobileBERT model)"),Uye.forEach(t),c$o=i(P),j5=n(P,"LI",{});var Jye=s(j5);dce=n(Jye,"STRONG",{});var Sat=s(dce);f$o=r(Sat,"mpnet"),Sat.forEach(t),m$o=r(Jye," \u2014 "),rD=n(Jye,"A",{href:!0});var Rat=s(rD);g$o=r(Rat,"MPNetForQuestionAnswering"),Rat.forEach(t),h$o=r(Jye," (MPNet model)"),Jye.forEach(t),p$o=i(P),D5=n(P,"LI",{});var Yye=s(D5);cce=n(Yye,"STRONG",{});var Bat=s(cce);_$o=r(Bat,"nystromformer"),Bat.forEach(t),u$o=r(Yye," \u2014 "),tD=n(Yye,"A",{href:!0});var Pat=s(tD);b$o=r(Pat,"NystromformerForQuestionAnswering"),Pat.forEach(t),F$o=r(Yye," (Nystromformer model)"),Yye.forEach(t),v$o=i(P),G5=n(P,"LI",{});var Kye=s(G5);fce=n(Kye,"STRONG",{});var $at=s(fce);T$o=r($at,"qdqbert"),$at.forEach(t),M$o=r(Kye," \u2014 "),aD=n(Kye,"A",{href:!0});var Iat=s(aD);E$o=r(Iat,"QDQBertForQuestionAnswering"),Iat.forEach(t),C$o=r(Kye," (QDQBert model)"),Kye.forEach(t),w$o=i(P),O5=n(P,"LI",{});var Zye=s(O5);mce=n(Zye,"STRONG",{});var qat=s(mce);A$o=r(qat,"reformer"),qat.forEach(t),y$o=r(Zye," \u2014 "),nD=n(Zye,"A",{href:!0});var Nat=s(nD);L$o=r(Nat,"ReformerForQuestionAnswering"),Nat.forEach(t),x$o=r(Zye," (Reformer model)"),Zye.forEach(t),k$o=i(P),V5=n(P,"LI",{});var eLe=s(V5);gce=n(eLe,"STRONG",{});var jat=s(gce);S$o=r(jat,"rembert"),jat.forEach(t),R$o=r(eLe," \u2014 "),sD=n(eLe,"A",{href:!0});var Dat=s(sD);B$o=r(Dat,"RemBertForQuestionAnswering"),Dat.forEach(t),P$o=r(eLe," (RemBERT model)"),eLe.forEach(t),$$o=i(P),X5=n(P,"LI",{});var oLe=s(X5);hce=n(oLe,"STRONG",{});var Gat=s(hce);I$o=r(Gat,"roberta"),Gat.forEach(t),q$o=r(oLe," \u2014 "),lD=n(oLe,"A",{href:!0});var Oat=s(lD);N$o=r(Oat,"RobertaForQuestionAnswering"),Oat.forEach(t),j$o=r(oLe," (RoBERTa model)"),oLe.forEach(t),D$o=i(P),z5=n(P,"LI",{});var rLe=s(z5);pce=n(rLe,"STRONG",{});var Vat=s(pce);G$o=r(Vat,"roformer"),Vat.forEach(t),O$o=r(rLe," \u2014 "),iD=n(rLe,"A",{href:!0});var Xat=s(iD);V$o=r(Xat,"RoFormerForQuestionAnswering"),Xat.forEach(t),X$o=r(rLe," (RoFormer model)"),rLe.forEach(t),z$o=i(P),Q5=n(P,"LI",{});var tLe=s(Q5);_ce=n(tLe,"STRONG",{});var zat=s(_ce);Q$o=r(zat,"splinter"),zat.forEach(t),W$o=r(tLe," \u2014 "),dD=n(tLe,"A",{href:!0});var Qat=s(dD);H$o=r(Qat,"SplinterForQuestionAnswering"),Qat.forEach(t),U$o=r(tLe," (Splinter model)"),tLe.forEach(t),J$o=i(P),W5=n(P,"LI",{});var aLe=s(W5);uce=n(aLe,"STRONG",{});var Wat=s(uce);Y$o=r(Wat,"squeezebert"),Wat.forEach(t),K$o=r(aLe," \u2014 "),cD=n(aLe,"A",{href:!0});var Hat=s(cD);Z$o=r(Hat,"SqueezeBertForQuestionAnswering"),Hat.forEach(t),eIo=r(aLe," (SqueezeBERT model)"),aLe.forEach(t),oIo=i(P),H5=n(P,"LI",{});var nLe=s(H5);bce=n(nLe,"STRONG",{});var Uat=s(bce);rIo=r(Uat,"xlm"),Uat.forEach(t),tIo=r(nLe," \u2014 "),fD=n(nLe,"A",{href:!0});var Jat=s(fD);aIo=r(Jat,"XLMForQuestionAnsweringSimple"),Jat.forEach(t),nIo=r(nLe," (XLM model)"),nLe.forEach(t),sIo=i(P),U5=n(P,"LI",{});var sLe=s(U5);Fce=n(sLe,"STRONG",{});var Yat=s(Fce);lIo=r(Yat,"xlm-roberta"),Yat.forEach(t),iIo=r(sLe," \u2014 "),mD=n(sLe,"A",{href:!0});var Kat=s(mD);dIo=r(Kat,"XLMRobertaForQuestionAnswering"),Kat.forEach(t),cIo=r(sLe," (XLM-RoBERTa model)"),sLe.forEach(t),fIo=i(P),J5=n(P,"LI",{});var lLe=s(J5);vce=n(lLe,"STRONG",{});var Zat=s(vce);mIo=r(Zat,"xlm-roberta-xl"),Zat.forEach(t),gIo=r(lLe," \u2014 "),gD=n(lLe,"A",{href:!0});var ent=s(gD);hIo=r(ent,"XLMRobertaXLForQuestionAnswering"),ent.forEach(t),pIo=r(lLe," (XLM-RoBERTa-XL model)"),lLe.forEach(t),_Io=i(P),Y5=n(P,"LI",{});var iLe=s(Y5);Tce=n(iLe,"STRONG",{});var ont=s(Tce);uIo=r(ont,"xlnet"),ont.forEach(t),bIo=r(iLe," \u2014 "),hD=n(iLe,"A",{href:!0});var rnt=s(hD);FIo=r(rnt,"XLNetForQuestionAnsweringSimple"),rnt.forEach(t),vIo=r(iLe," (XLNet model)"),iLe.forEach(t),TIo=i(P),K5=n(P,"LI",{});var dLe=s(K5);Mce=n(dLe,"STRONG",{});var tnt=s(Mce);MIo=r(tnt,"yoso"),tnt.forEach(t),EIo=r(dLe," \u2014 "),pD=n(dLe,"A",{href:!0});var ant=s(pD);CIo=r(ant,"YosoForQuestionAnswering"),ant.forEach(t),wIo=r(dLe," (YOSO model)"),dLe.forEach(t),P.forEach(t),AIo=i(Ut),Z5=n(Ut,"P",{});var cLe=s(Z5);yIo=r(cLe,"The model is set in evaluation mode by default using "),Ece=n(cLe,"CODE",{});var nnt=s(Ece);LIo=r(nnt,"model.eval()"),nnt.forEach(t),xIo=r(cLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cce=n(cLe,"CODE",{});var snt=s(Cce);kIo=r(snt,"model.train()"),snt.forEach(t),cLe.forEach(t),SIo=i(Ut),wce=n(Ut,"P",{});var lnt=s(wce);RIo=r(lnt,"Examples:"),lnt.forEach(t),BIo=i(Ut),m(mA.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),CRe=i(c),Ad=n(c,"H2",{class:!0});var BPe=s(Ad);e3=n(BPe,"A",{id:!0,class:!0,href:!0});var int=s(e3);Ace=n(int,"SPAN",{});var dnt=s(Ace);m(gA.$$.fragment,dnt),dnt.forEach(t),int.forEach(t),PIo=i(BPe),yce=n(BPe,"SPAN",{});var cnt=s(yce);$Io=r(cnt,"AutoModelForTableQuestionAnswering"),cnt.forEach(t),BPe.forEach(t),wRe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(hA.$$.fragment,gl),IIo=i(gl),yd=n(gl,"P",{});var FU=s(yd);qIo=r(FU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_D=n(FU,"A",{href:!0});var fnt=s(_D);NIo=r(fnt,"from_pretrained()"),fnt.forEach(t),jIo=r(FU," class method or the "),uD=n(FU,"A",{href:!0});var mnt=s(uD);DIo=r(mnt,"from_config()"),mnt.forEach(t),GIo=r(FU,` class
method.`),FU.forEach(t),OIo=i(gl),pA=n(gl,"P",{});var PPe=s(pA);VIo=r(PPe,"This class cannot be instantiated directly using "),Lce=n(PPe,"CODE",{});var gnt=s(Lce);XIo=r(gnt,"__init__()"),gnt.forEach(t),zIo=r(PPe," (throws an error)."),PPe.forEach(t),QIo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(_A.$$.fragment,hl),WIo=i(hl),xce=n(hl,"P",{});var hnt=s(xce);HIo=r(hnt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hnt.forEach(t),UIo=i(hl),Ld=n(hl,"P",{});var vU=s(Ld);JIo=r(vU,`Note:
Loading a model from its configuration file does `),kce=n(vU,"STRONG",{});var pnt=s(kce);YIo=r(pnt,"not"),pnt.forEach(t),KIo=r(vU,` load the model weights. It only affects the
model\u2019s configuration. Use `),bD=n(vU,"A",{href:!0});var _nt=s(bD);ZIo=r(_nt,"from_pretrained()"),_nt.forEach(t),eqo=r(vU," to load the model weights."),vU.forEach(t),oqo=i(hl),Sce=n(hl,"P",{});var unt=s(Sce);rqo=r(unt,"Examples:"),unt.forEach(t),tqo=i(hl),m(uA.$$.fragment,hl),hl.forEach(t),aqo=i(gl),We=n(gl,"DIV",{class:!0});var Jt=s(We);m(bA.$$.fragment,Jt),nqo=i(Jt),Rce=n(Jt,"P",{});var bnt=s(Rce);sqo=r(bnt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bnt.forEach(t),lqo=i(Jt),en=n(Jt,"P",{});var SE=s(en);iqo=r(SE,"The model class to instantiate is selected based on the "),Bce=n(SE,"CODE",{});var Fnt=s(Bce);dqo=r(Fnt,"model_type"),Fnt.forEach(t),cqo=r(SE,` property of the config object (either
passed as an argument or loaded from `),Pce=n(SE,"CODE",{});var vnt=s(Pce);fqo=r(vnt,"pretrained_model_name_or_path"),vnt.forEach(t),mqo=r(SE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ce=n(SE,"CODE",{});var Tnt=s($ce);gqo=r(Tnt,"pretrained_model_name_or_path"),Tnt.forEach(t),hqo=r(SE,":"),SE.forEach(t),pqo=i(Jt),Ice=n(Jt,"UL",{});var Mnt=s(Ice);o3=n(Mnt,"LI",{});var fLe=s(o3);qce=n(fLe,"STRONG",{});var Ent=s(qce);_qo=r(Ent,"tapas"),Ent.forEach(t),uqo=r(fLe," \u2014 "),FD=n(fLe,"A",{href:!0});var Cnt=s(FD);bqo=r(Cnt,"TapasForQuestionAnswering"),Cnt.forEach(t),Fqo=r(fLe," (TAPAS model)"),fLe.forEach(t),Mnt.forEach(t),vqo=i(Jt),r3=n(Jt,"P",{});var mLe=s(r3);Tqo=r(mLe,"The model is set in evaluation mode by default using "),Nce=n(mLe,"CODE",{});var wnt=s(Nce);Mqo=r(wnt,"model.eval()"),wnt.forEach(t),Eqo=r(mLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jce=n(mLe,"CODE",{});var Ant=s(jce);Cqo=r(Ant,"model.train()"),Ant.forEach(t),mLe.forEach(t),wqo=i(Jt),Dce=n(Jt,"P",{});var ynt=s(Dce);Aqo=r(ynt,"Examples:"),ynt.forEach(t),yqo=i(Jt),m(FA.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),ARe=i(c),xd=n(c,"H2",{class:!0});var $Pe=s(xd);t3=n($Pe,"A",{id:!0,class:!0,href:!0});var Lnt=s(t3);Gce=n(Lnt,"SPAN",{});var xnt=s(Gce);m(vA.$$.fragment,xnt),xnt.forEach(t),Lnt.forEach(t),Lqo=i($Pe),Oce=n($Pe,"SPAN",{});var knt=s(Oce);xqo=r(knt,"AutoModelForImageClassification"),knt.forEach(t),$Pe.forEach(t),yRe=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(TA.$$.fragment,pl),kqo=i(pl),kd=n(pl,"P",{});var TU=s(kd);Sqo=r(TU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vD=n(TU,"A",{href:!0});var Snt=s(vD);Rqo=r(Snt,"from_pretrained()"),Snt.forEach(t),Bqo=r(TU," class method or the "),TD=n(TU,"A",{href:!0});var Rnt=s(TD);Pqo=r(Rnt,"from_config()"),Rnt.forEach(t),$qo=r(TU,` class
method.`),TU.forEach(t),Iqo=i(pl),MA=n(pl,"P",{});var IPe=s(MA);qqo=r(IPe,"This class cannot be instantiated directly using "),Vce=n(IPe,"CODE",{});var Bnt=s(Vce);Nqo=r(Bnt,"__init__()"),Bnt.forEach(t),jqo=r(IPe," (throws an error)."),IPe.forEach(t),Dqo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(EA.$$.fragment,_l),Gqo=i(_l),Xce=n(_l,"P",{});var Pnt=s(Xce);Oqo=r(Pnt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Pnt.forEach(t),Vqo=i(_l),Sd=n(_l,"P",{});var MU=s(Sd);Xqo=r(MU,`Note:
Loading a model from its configuration file does `),zce=n(MU,"STRONG",{});var $nt=s(zce);zqo=r($nt,"not"),$nt.forEach(t),Qqo=r(MU,` load the model weights. It only affects the
model\u2019s configuration. Use `),MD=n(MU,"A",{href:!0});var Int=s(MD);Wqo=r(Int,"from_pretrained()"),Int.forEach(t),Hqo=r(MU," to load the model weights."),MU.forEach(t),Uqo=i(_l),Qce=n(_l,"P",{});var qnt=s(Qce);Jqo=r(qnt,"Examples:"),qnt.forEach(t),Yqo=i(_l),m(CA.$$.fragment,_l),_l.forEach(t),Kqo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(wA.$$.fragment,Yt),Zqo=i(Yt),Wce=n(Yt,"P",{});var Nnt=s(Wce);eNo=r(Nnt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Nnt.forEach(t),oNo=i(Yt),on=n(Yt,"P",{});var RE=s(on);rNo=r(RE,"The model class to instantiate is selected based on the "),Hce=n(RE,"CODE",{});var jnt=s(Hce);tNo=r(jnt,"model_type"),jnt.forEach(t),aNo=r(RE,` property of the config object (either
passed as an argument or loaded from `),Uce=n(RE,"CODE",{});var Dnt=s(Uce);nNo=r(Dnt,"pretrained_model_name_or_path"),Dnt.forEach(t),sNo=r(RE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jce=n(RE,"CODE",{});var Gnt=s(Jce);lNo=r(Gnt,"pretrained_model_name_or_path"),Gnt.forEach(t),iNo=r(RE,":"),RE.forEach(t),dNo=i(Yt),he=n(Yt,"UL",{});var Te=s(he);a3=n(Te,"LI",{});var gLe=s(a3);Yce=n(gLe,"STRONG",{});var Ont=s(Yce);cNo=r(Ont,"beit"),Ont.forEach(t),fNo=r(gLe," \u2014 "),ED=n(gLe,"A",{href:!0});var Vnt=s(ED);mNo=r(Vnt,"BeitForImageClassification"),Vnt.forEach(t),gNo=r(gLe," (BEiT model)"),gLe.forEach(t),hNo=i(Te),n3=n(Te,"LI",{});var hLe=s(n3);Kce=n(hLe,"STRONG",{});var Xnt=s(Kce);pNo=r(Xnt,"convnext"),Xnt.forEach(t),_No=r(hLe," \u2014 "),CD=n(hLe,"A",{href:!0});var znt=s(CD);uNo=r(znt,"ConvNextForImageClassification"),znt.forEach(t),bNo=r(hLe," (ConvNext model)"),hLe.forEach(t),FNo=i(Te),Ds=n(Te,"LI",{});var l9=s(Ds);Zce=n(l9,"STRONG",{});var Qnt=s(Zce);vNo=r(Qnt,"deit"),Qnt.forEach(t),TNo=r(l9," \u2014 "),wD=n(l9,"A",{href:!0});var Wnt=s(wD);MNo=r(Wnt,"DeiTForImageClassification"),Wnt.forEach(t),ENo=r(l9," or "),AD=n(l9,"A",{href:!0});var Hnt=s(AD);CNo=r(Hnt,"DeiTForImageClassificationWithTeacher"),Hnt.forEach(t),wNo=r(l9," (DeiT model)"),l9.forEach(t),ANo=i(Te),s3=n(Te,"LI",{});var pLe=s(s3);efe=n(pLe,"STRONG",{});var Unt=s(efe);yNo=r(Unt,"imagegpt"),Unt.forEach(t),LNo=r(pLe," \u2014 "),yD=n(pLe,"A",{href:!0});var Jnt=s(yD);xNo=r(Jnt,"ImageGPTForImageClassification"),Jnt.forEach(t),kNo=r(pLe," (ImageGPT model)"),pLe.forEach(t),SNo=i(Te),ma=n(Te,"LI",{});var $f=s(ma);ofe=n($f,"STRONG",{});var Ynt=s(ofe);RNo=r(Ynt,"perceiver"),Ynt.forEach(t),BNo=r($f," \u2014 "),LD=n($f,"A",{href:!0});var Knt=s(LD);PNo=r(Knt,"PerceiverForImageClassificationLearned"),Knt.forEach(t),$No=r($f," or "),xD=n($f,"A",{href:!0});var Znt=s(xD);INo=r(Znt,"PerceiverForImageClassificationFourier"),Znt.forEach(t),qNo=r($f," or "),kD=n($f,"A",{href:!0});var est=s(kD);NNo=r(est,"PerceiverForImageClassificationConvProcessing"),est.forEach(t),jNo=r($f," (Perceiver model)"),$f.forEach(t),DNo=i(Te),l3=n(Te,"LI",{});var _Le=s(l3);rfe=n(_Le,"STRONG",{});var ost=s(rfe);GNo=r(ost,"poolformer"),ost.forEach(t),ONo=r(_Le," \u2014 "),SD=n(_Le,"A",{href:!0});var rst=s(SD);VNo=r(rst,"PoolFormerForImageClassification"),rst.forEach(t),XNo=r(_Le," (PoolFormer model)"),_Le.forEach(t),zNo=i(Te),i3=n(Te,"LI",{});var uLe=s(i3);tfe=n(uLe,"STRONG",{});var tst=s(tfe);QNo=r(tst,"resnet"),tst.forEach(t),WNo=r(uLe," \u2014 "),RD=n(uLe,"A",{href:!0});var ast=s(RD);HNo=r(ast,"ResNetForImageClassification"),ast.forEach(t),UNo=r(uLe," (ResNet model)"),uLe.forEach(t),JNo=i(Te),d3=n(Te,"LI",{});var bLe=s(d3);afe=n(bLe,"STRONG",{});var nst=s(afe);YNo=r(nst,"segformer"),nst.forEach(t),KNo=r(bLe," \u2014 "),BD=n(bLe,"A",{href:!0});var sst=s(BD);ZNo=r(sst,"SegformerForImageClassification"),sst.forEach(t),ejo=r(bLe," (SegFormer model)"),bLe.forEach(t),ojo=i(Te),c3=n(Te,"LI",{});var FLe=s(c3);nfe=n(FLe,"STRONG",{});var lst=s(nfe);rjo=r(lst,"swin"),lst.forEach(t),tjo=r(FLe," \u2014 "),PD=n(FLe,"A",{href:!0});var ist=s(PD);ajo=r(ist,"SwinForImageClassification"),ist.forEach(t),njo=r(FLe," (Swin model)"),FLe.forEach(t),sjo=i(Te),f3=n(Te,"LI",{});var vLe=s(f3);sfe=n(vLe,"STRONG",{});var dst=s(sfe);ljo=r(dst,"van"),dst.forEach(t),ijo=r(vLe," \u2014 "),$D=n(vLe,"A",{href:!0});var cst=s($D);djo=r(cst,"VanForImageClassification"),cst.forEach(t),cjo=r(vLe," (VAN model)"),vLe.forEach(t),fjo=i(Te),m3=n(Te,"LI",{});var TLe=s(m3);lfe=n(TLe,"STRONG",{});var fst=s(lfe);mjo=r(fst,"vit"),fst.forEach(t),gjo=r(TLe," \u2014 "),ID=n(TLe,"A",{href:!0});var mst=s(ID);hjo=r(mst,"ViTForImageClassification"),mst.forEach(t),pjo=r(TLe," (ViT model)"),TLe.forEach(t),Te.forEach(t),_jo=i(Yt),g3=n(Yt,"P",{});var MLe=s(g3);ujo=r(MLe,"The model is set in evaluation mode by default using "),ife=n(MLe,"CODE",{});var gst=s(ife);bjo=r(gst,"model.eval()"),gst.forEach(t),Fjo=r(MLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dfe=n(MLe,"CODE",{});var hst=s(dfe);vjo=r(hst,"model.train()"),hst.forEach(t),MLe.forEach(t),Tjo=i(Yt),cfe=n(Yt,"P",{});var pst=s(cfe);Mjo=r(pst,"Examples:"),pst.forEach(t),Ejo=i(Yt),m(AA.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),LRe=i(c),Rd=n(c,"H2",{class:!0});var qPe=s(Rd);h3=n(qPe,"A",{id:!0,class:!0,href:!0});var _st=s(h3);ffe=n(_st,"SPAN",{});var ust=s(ffe);m(yA.$$.fragment,ust),ust.forEach(t),_st.forEach(t),Cjo=i(qPe),mfe=n(qPe,"SPAN",{});var bst=s(mfe);wjo=r(bst,"AutoModelForVision2Seq"),bst.forEach(t),qPe.forEach(t),xRe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(LA.$$.fragment,ul),Ajo=i(ul),Bd=n(ul,"P",{});var EU=s(Bd);yjo=r(EU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qD=n(EU,"A",{href:!0});var Fst=s(qD);Ljo=r(Fst,"from_pretrained()"),Fst.forEach(t),xjo=r(EU," class method or the "),ND=n(EU,"A",{href:!0});var vst=s(ND);kjo=r(vst,"from_config()"),vst.forEach(t),Sjo=r(EU,` class
method.`),EU.forEach(t),Rjo=i(ul),xA=n(ul,"P",{});var NPe=s(xA);Bjo=r(NPe,"This class cannot be instantiated directly using "),gfe=n(NPe,"CODE",{});var Tst=s(gfe);Pjo=r(Tst,"__init__()"),Tst.forEach(t),$jo=r(NPe," (throws an error)."),NPe.forEach(t),Ijo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(kA.$$.fragment,bl),qjo=i(bl),hfe=n(bl,"P",{});var Mst=s(hfe);Njo=r(Mst,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Mst.forEach(t),jjo=i(bl),Pd=n(bl,"P",{});var CU=s(Pd);Djo=r(CU,`Note:
Loading a model from its configuration file does `),pfe=n(CU,"STRONG",{});var Est=s(pfe);Gjo=r(Est,"not"),Est.forEach(t),Ojo=r(CU,` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=n(CU,"A",{href:!0});var Cst=s(jD);Vjo=r(Cst,"from_pretrained()"),Cst.forEach(t),Xjo=r(CU," to load the model weights."),CU.forEach(t),zjo=i(bl),_fe=n(bl,"P",{});var wst=s(_fe);Qjo=r(wst,"Examples:"),wst.forEach(t),Wjo=i(bl),m(SA.$$.fragment,bl),bl.forEach(t),Hjo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(RA.$$.fragment,Kt),Ujo=i(Kt),ufe=n(Kt,"P",{});var Ast=s(ufe);Jjo=r(Ast,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ast.forEach(t),Yjo=i(Kt),rn=n(Kt,"P",{});var BE=s(rn);Kjo=r(BE,"The model class to instantiate is selected based on the "),bfe=n(BE,"CODE",{});var yst=s(bfe);Zjo=r(yst,"model_type"),yst.forEach(t),eDo=r(BE,` property of the config object (either
passed as an argument or loaded from `),Ffe=n(BE,"CODE",{});var Lst=s(Ffe);oDo=r(Lst,"pretrained_model_name_or_path"),Lst.forEach(t),rDo=r(BE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vfe=n(BE,"CODE",{});var xst=s(vfe);tDo=r(xst,"pretrained_model_name_or_path"),xst.forEach(t),aDo=r(BE,":"),BE.forEach(t),nDo=i(Kt),Tfe=n(Kt,"UL",{});var kst=s(Tfe);p3=n(kst,"LI",{});var ELe=s(p3);Mfe=n(ELe,"STRONG",{});var Sst=s(Mfe);sDo=r(Sst,"vision-encoder-decoder"),Sst.forEach(t),lDo=r(ELe," \u2014 "),DD=n(ELe,"A",{href:!0});var Rst=s(DD);iDo=r(Rst,"VisionEncoderDecoderModel"),Rst.forEach(t),dDo=r(ELe," (Vision Encoder decoder model)"),ELe.forEach(t),kst.forEach(t),cDo=i(Kt),_3=n(Kt,"P",{});var CLe=s(_3);fDo=r(CLe,"The model is set in evaluation mode by default using "),Efe=n(CLe,"CODE",{});var Bst=s(Efe);mDo=r(Bst,"model.eval()"),Bst.forEach(t),gDo=r(CLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cfe=n(CLe,"CODE",{});var Pst=s(Cfe);hDo=r(Pst,"model.train()"),Pst.forEach(t),CLe.forEach(t),pDo=i(Kt),wfe=n(Kt,"P",{});var $st=s(wfe);_Do=r($st,"Examples:"),$st.forEach(t),uDo=i(Kt),m(BA.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),kRe=i(c),$d=n(c,"H2",{class:!0});var jPe=s($d);u3=n(jPe,"A",{id:!0,class:!0,href:!0});var Ist=s(u3);Afe=n(Ist,"SPAN",{});var qst=s(Afe);m(PA.$$.fragment,qst),qst.forEach(t),Ist.forEach(t),bDo=i(jPe),yfe=n(jPe,"SPAN",{});var Nst=s(yfe);FDo=r(Nst,"AutoModelForAudioClassification"),Nst.forEach(t),jPe.forEach(t),SRe=i(c),dr=n(c,"DIV",{class:!0});var Fl=s(dr);m($A.$$.fragment,Fl),vDo=i(Fl),Id=n(Fl,"P",{});var wU=s(Id);TDo=r(wU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),GD=n(wU,"A",{href:!0});var jst=s(GD);MDo=r(jst,"from_pretrained()"),jst.forEach(t),EDo=r(wU," class method or the "),OD=n(wU,"A",{href:!0});var Dst=s(OD);CDo=r(Dst,"from_config()"),Dst.forEach(t),wDo=r(wU,` class
method.`),wU.forEach(t),ADo=i(Fl),IA=n(Fl,"P",{});var DPe=s(IA);yDo=r(DPe,"This class cannot be instantiated directly using "),Lfe=n(DPe,"CODE",{});var Gst=s(Lfe);LDo=r(Gst,"__init__()"),Gst.forEach(t),xDo=r(DPe," (throws an error)."),DPe.forEach(t),kDo=i(Fl),tt=n(Fl,"DIV",{class:!0});var vl=s(tt);m(qA.$$.fragment,vl),SDo=i(vl),xfe=n(vl,"P",{});var Ost=s(xfe);RDo=r(Ost,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Ost.forEach(t),BDo=i(vl),qd=n(vl,"P",{});var AU=s(qd);PDo=r(AU,`Note:
Loading a model from its configuration file does `),kfe=n(AU,"STRONG",{});var Vst=s(kfe);$Do=r(Vst,"not"),Vst.forEach(t),IDo=r(AU,` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=n(AU,"A",{href:!0});var Xst=s(VD);qDo=r(Xst,"from_pretrained()"),Xst.forEach(t),NDo=r(AU," to load the model weights."),AU.forEach(t),jDo=i(vl),Sfe=n(vl,"P",{});var zst=s(Sfe);DDo=r(zst,"Examples:"),zst.forEach(t),GDo=i(vl),m(NA.$$.fragment,vl),vl.forEach(t),ODo=i(Fl),Je=n(Fl,"DIV",{class:!0});var Zt=s(Je);m(jA.$$.fragment,Zt),VDo=i(Zt),Rfe=n(Zt,"P",{});var Qst=s(Rfe);XDo=r(Qst,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Qst.forEach(t),zDo=i(Zt),tn=n(Zt,"P",{});var PE=s(tn);QDo=r(PE,"The model class to instantiate is selected based on the "),Bfe=n(PE,"CODE",{});var Wst=s(Bfe);WDo=r(Wst,"model_type"),Wst.forEach(t),HDo=r(PE,` property of the config object (either
passed as an argument or loaded from `),Pfe=n(PE,"CODE",{});var Hst=s(Pfe);UDo=r(Hst,"pretrained_model_name_or_path"),Hst.forEach(t),JDo=r(PE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$fe=n(PE,"CODE",{});var Ust=s($fe);YDo=r(Ust,"pretrained_model_name_or_path"),Ust.forEach(t),KDo=r(PE,":"),PE.forEach(t),ZDo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);b3=n(Do,"LI",{});var wLe=s(b3);Ife=n(wLe,"STRONG",{});var Jst=s(Ife);eGo=r(Jst,"data2vec-audio"),Jst.forEach(t),oGo=r(wLe," \u2014 "),XD=n(wLe,"A",{href:!0});var Yst=s(XD);rGo=r(Yst,"Data2VecAudioForSequenceClassification"),Yst.forEach(t),tGo=r(wLe," (Data2VecAudio model)"),wLe.forEach(t),aGo=i(Do),F3=n(Do,"LI",{});var ALe=s(F3);qfe=n(ALe,"STRONG",{});var Kst=s(qfe);nGo=r(Kst,"hubert"),Kst.forEach(t),sGo=r(ALe," \u2014 "),zD=n(ALe,"A",{href:!0});var Zst=s(zD);lGo=r(Zst,"HubertForSequenceClassification"),Zst.forEach(t),iGo=r(ALe," (Hubert model)"),ALe.forEach(t),dGo=i(Do),v3=n(Do,"LI",{});var yLe=s(v3);Nfe=n(yLe,"STRONG",{});var elt=s(Nfe);cGo=r(elt,"sew"),elt.forEach(t),fGo=r(yLe," \u2014 "),QD=n(yLe,"A",{href:!0});var olt=s(QD);mGo=r(olt,"SEWForSequenceClassification"),olt.forEach(t),gGo=r(yLe," (SEW model)"),yLe.forEach(t),hGo=i(Do),T3=n(Do,"LI",{});var LLe=s(T3);jfe=n(LLe,"STRONG",{});var rlt=s(jfe);pGo=r(rlt,"sew-d"),rlt.forEach(t),_Go=r(LLe," \u2014 "),WD=n(LLe,"A",{href:!0});var tlt=s(WD);uGo=r(tlt,"SEWDForSequenceClassification"),tlt.forEach(t),bGo=r(LLe," (SEW-D model)"),LLe.forEach(t),FGo=i(Do),M3=n(Do,"LI",{});var xLe=s(M3);Dfe=n(xLe,"STRONG",{});var alt=s(Dfe);vGo=r(alt,"unispeech"),alt.forEach(t),TGo=r(xLe," \u2014 "),HD=n(xLe,"A",{href:!0});var nlt=s(HD);MGo=r(nlt,"UniSpeechForSequenceClassification"),nlt.forEach(t),EGo=r(xLe," (UniSpeech model)"),xLe.forEach(t),CGo=i(Do),E3=n(Do,"LI",{});var kLe=s(E3);Gfe=n(kLe,"STRONG",{});var slt=s(Gfe);wGo=r(slt,"unispeech-sat"),slt.forEach(t),AGo=r(kLe," \u2014 "),UD=n(kLe,"A",{href:!0});var llt=s(UD);yGo=r(llt,"UniSpeechSatForSequenceClassification"),llt.forEach(t),LGo=r(kLe," (UniSpeechSat model)"),kLe.forEach(t),xGo=i(Do),C3=n(Do,"LI",{});var SLe=s(C3);Ofe=n(SLe,"STRONG",{});var ilt=s(Ofe);kGo=r(ilt,"wav2vec2"),ilt.forEach(t),SGo=r(SLe," \u2014 "),JD=n(SLe,"A",{href:!0});var dlt=s(JD);RGo=r(dlt,"Wav2Vec2ForSequenceClassification"),dlt.forEach(t),BGo=r(SLe," (Wav2Vec2 model)"),SLe.forEach(t),PGo=i(Do),w3=n(Do,"LI",{});var RLe=s(w3);Vfe=n(RLe,"STRONG",{});var clt=s(Vfe);$Go=r(clt,"wavlm"),clt.forEach(t),IGo=r(RLe," \u2014 "),YD=n(RLe,"A",{href:!0});var flt=s(YD);qGo=r(flt,"WavLMForSequenceClassification"),flt.forEach(t),NGo=r(RLe," (WavLM model)"),RLe.forEach(t),Do.forEach(t),jGo=i(Zt),A3=n(Zt,"P",{});var BLe=s(A3);DGo=r(BLe,"The model is set in evaluation mode by default using "),Xfe=n(BLe,"CODE",{});var mlt=s(Xfe);GGo=r(mlt,"model.eval()"),mlt.forEach(t),OGo=r(BLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zfe=n(BLe,"CODE",{});var glt=s(zfe);VGo=r(glt,"model.train()"),glt.forEach(t),BLe.forEach(t),XGo=i(Zt),Qfe=n(Zt,"P",{});var hlt=s(Qfe);zGo=r(hlt,"Examples:"),hlt.forEach(t),QGo=i(Zt),m(DA.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),RRe=i(c),Nd=n(c,"H2",{class:!0});var GPe=s(Nd);y3=n(GPe,"A",{id:!0,class:!0,href:!0});var plt=s(y3);Wfe=n(plt,"SPAN",{});var _lt=s(Wfe);m(GA.$$.fragment,_lt),_lt.forEach(t),plt.forEach(t),WGo=i(GPe),Hfe=n(GPe,"SPAN",{});var ult=s(Hfe);HGo=r(ult,"AutoModelForAudioFrameClassification"),ult.forEach(t),GPe.forEach(t),BRe=i(c),cr=n(c,"DIV",{class:!0});var Tl=s(cr);m(OA.$$.fragment,Tl),UGo=i(Tl),jd=n(Tl,"P",{});var yU=s(jd);JGo=r(yU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),KD=n(yU,"A",{href:!0});var blt=s(KD);YGo=r(blt,"from_pretrained()"),blt.forEach(t),KGo=r(yU," class method or the "),ZD=n(yU,"A",{href:!0});var Flt=s(ZD);ZGo=r(Flt,"from_config()"),Flt.forEach(t),eOo=r(yU,` class
method.`),yU.forEach(t),oOo=i(Tl),VA=n(Tl,"P",{});var OPe=s(VA);rOo=r(OPe,"This class cannot be instantiated directly using "),Ufe=n(OPe,"CODE",{});var vlt=s(Ufe);tOo=r(vlt,"__init__()"),vlt.forEach(t),aOo=r(OPe," (throws an error)."),OPe.forEach(t),nOo=i(Tl),at=n(Tl,"DIV",{class:!0});var Ml=s(at);m(XA.$$.fragment,Ml),sOo=i(Ml),Jfe=n(Ml,"P",{});var Tlt=s(Jfe);lOo=r(Tlt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Tlt.forEach(t),iOo=i(Ml),Dd=n(Ml,"P",{});var LU=s(Dd);dOo=r(LU,`Note:
Loading a model from its configuration file does `),Yfe=n(LU,"STRONG",{});var Mlt=s(Yfe);cOo=r(Mlt,"not"),Mlt.forEach(t),fOo=r(LU,` load the model weights. It only affects the
model\u2019s configuration. Use `),eG=n(LU,"A",{href:!0});var Elt=s(eG);mOo=r(Elt,"from_pretrained()"),Elt.forEach(t),gOo=r(LU," to load the model weights."),LU.forEach(t),hOo=i(Ml),Kfe=n(Ml,"P",{});var Clt=s(Kfe);pOo=r(Clt,"Examples:"),Clt.forEach(t),_Oo=i(Ml),m(zA.$$.fragment,Ml),Ml.forEach(t),uOo=i(Tl),Ye=n(Tl,"DIV",{class:!0});var ea=s(Ye);m(QA.$$.fragment,ea),bOo=i(ea),Zfe=n(ea,"P",{});var wlt=s(Zfe);FOo=r(wlt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),wlt.forEach(t),vOo=i(ea),an=n(ea,"P",{});var $E=s(an);TOo=r($E,"The model class to instantiate is selected based on the "),eme=n($E,"CODE",{});var Alt=s(eme);MOo=r(Alt,"model_type"),Alt.forEach(t),EOo=r($E,` property of the config object (either
passed as an argument or loaded from `),ome=n($E,"CODE",{});var ylt=s(ome);COo=r(ylt,"pretrained_model_name_or_path"),ylt.forEach(t),wOo=r($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rme=n($E,"CODE",{});var Llt=s(rme);AOo=r(Llt,"pretrained_model_name_or_path"),Llt.forEach(t),yOo=r($E,":"),$E.forEach(t),LOo=i(ea),nn=n(ea,"UL",{});var IE=s(nn);L3=n(IE,"LI",{});var PLe=s(L3);tme=n(PLe,"STRONG",{});var xlt=s(tme);xOo=r(xlt,"data2vec-audio"),xlt.forEach(t),kOo=r(PLe," \u2014 "),oG=n(PLe,"A",{href:!0});var klt=s(oG);SOo=r(klt,"Data2VecAudioForAudioFrameClassification"),klt.forEach(t),ROo=r(PLe," (Data2VecAudio model)"),PLe.forEach(t),BOo=i(IE),x3=n(IE,"LI",{});var $Le=s(x3);ame=n($Le,"STRONG",{});var Slt=s(ame);POo=r(Slt,"unispeech-sat"),Slt.forEach(t),$Oo=r($Le," \u2014 "),rG=n($Le,"A",{href:!0});var Rlt=s(rG);IOo=r(Rlt,"UniSpeechSatForAudioFrameClassification"),Rlt.forEach(t),qOo=r($Le," (UniSpeechSat model)"),$Le.forEach(t),NOo=i(IE),k3=n(IE,"LI",{});var ILe=s(k3);nme=n(ILe,"STRONG",{});var Blt=s(nme);jOo=r(Blt,"wav2vec2"),Blt.forEach(t),DOo=r(ILe," \u2014 "),tG=n(ILe,"A",{href:!0});var Plt=s(tG);GOo=r(Plt,"Wav2Vec2ForAudioFrameClassification"),Plt.forEach(t),OOo=r(ILe," (Wav2Vec2 model)"),ILe.forEach(t),VOo=i(IE),S3=n(IE,"LI",{});var qLe=s(S3);sme=n(qLe,"STRONG",{});var $lt=s(sme);XOo=r($lt,"wavlm"),$lt.forEach(t),zOo=r(qLe," \u2014 "),aG=n(qLe,"A",{href:!0});var Ilt=s(aG);QOo=r(Ilt,"WavLMForAudioFrameClassification"),Ilt.forEach(t),WOo=r(qLe," (WavLM model)"),qLe.forEach(t),IE.forEach(t),HOo=i(ea),R3=n(ea,"P",{});var NLe=s(R3);UOo=r(NLe,"The model is set in evaluation mode by default using "),lme=n(NLe,"CODE",{});var qlt=s(lme);JOo=r(qlt,"model.eval()"),qlt.forEach(t),YOo=r(NLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ime=n(NLe,"CODE",{});var Nlt=s(ime);KOo=r(Nlt,"model.train()"),Nlt.forEach(t),NLe.forEach(t),ZOo=i(ea),dme=n(ea,"P",{});var jlt=s(dme);eVo=r(jlt,"Examples:"),jlt.forEach(t),oVo=i(ea),m(WA.$$.fragment,ea),ea.forEach(t),Tl.forEach(t),PRe=i(c),Gd=n(c,"H2",{class:!0});var VPe=s(Gd);B3=n(VPe,"A",{id:!0,class:!0,href:!0});var Dlt=s(B3);cme=n(Dlt,"SPAN",{});var Glt=s(cme);m(HA.$$.fragment,Glt),Glt.forEach(t),Dlt.forEach(t),rVo=i(VPe),fme=n(VPe,"SPAN",{});var Olt=s(fme);tVo=r(Olt,"AutoModelForCTC"),Olt.forEach(t),VPe.forEach(t),$Re=i(c),fr=n(c,"DIV",{class:!0});var El=s(fr);m(UA.$$.fragment,El),aVo=i(El),Od=n(El,"P",{});var xU=s(Od);nVo=r(xU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),nG=n(xU,"A",{href:!0});var Vlt=s(nG);sVo=r(Vlt,"from_pretrained()"),Vlt.forEach(t),lVo=r(xU," class method or the "),sG=n(xU,"A",{href:!0});var Xlt=s(sG);iVo=r(Xlt,"from_config()"),Xlt.forEach(t),dVo=r(xU,` class
method.`),xU.forEach(t),cVo=i(El),JA=n(El,"P",{});var XPe=s(JA);fVo=r(XPe,"This class cannot be instantiated directly using "),mme=n(XPe,"CODE",{});var zlt=s(mme);mVo=r(zlt,"__init__()"),zlt.forEach(t),gVo=r(XPe," (throws an error)."),XPe.forEach(t),hVo=i(El),nt=n(El,"DIV",{class:!0});var Cl=s(nt);m(YA.$$.fragment,Cl),pVo=i(Cl),gme=n(Cl,"P",{});var Qlt=s(gme);_Vo=r(Qlt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Qlt.forEach(t),uVo=i(Cl),Vd=n(Cl,"P",{});var kU=s(Vd);bVo=r(kU,`Note:
Loading a model from its configuration file does `),hme=n(kU,"STRONG",{});var Wlt=s(hme);FVo=r(Wlt,"not"),Wlt.forEach(t),vVo=r(kU,` load the model weights. It only affects the
model\u2019s configuration. Use `),lG=n(kU,"A",{href:!0});var Hlt=s(lG);TVo=r(Hlt,"from_pretrained()"),Hlt.forEach(t),MVo=r(kU," to load the model weights."),kU.forEach(t),EVo=i(Cl),pme=n(Cl,"P",{});var Ult=s(pme);CVo=r(Ult,"Examples:"),Ult.forEach(t),wVo=i(Cl),m(KA.$$.fragment,Cl),Cl.forEach(t),AVo=i(El),Ke=n(El,"DIV",{class:!0});var oa=s(Ke);m(ZA.$$.fragment,oa),yVo=i(oa),_me=n(oa,"P",{});var Jlt=s(_me);LVo=r(Jlt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Jlt.forEach(t),xVo=i(oa),sn=n(oa,"P",{});var qE=s(sn);kVo=r(qE,"The model class to instantiate is selected based on the "),ume=n(qE,"CODE",{});var Ylt=s(ume);SVo=r(Ylt,"model_type"),Ylt.forEach(t),RVo=r(qE,` property of the config object (either
passed as an argument or loaded from `),bme=n(qE,"CODE",{});var Klt=s(bme);BVo=r(Klt,"pretrained_model_name_or_path"),Klt.forEach(t),PVo=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fme=n(qE,"CODE",{});var Zlt=s(Fme);$Vo=r(Zlt,"pretrained_model_name_or_path"),Zlt.forEach(t),IVo=r(qE,":"),qE.forEach(t),qVo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);P3=n(Go,"LI",{});var jLe=s(P3);vme=n(jLe,"STRONG",{});var eit=s(vme);NVo=r(eit,"data2vec-audio"),eit.forEach(t),jVo=r(jLe," \u2014 "),iG=n(jLe,"A",{href:!0});var oit=s(iG);DVo=r(oit,"Data2VecAudioForCTC"),oit.forEach(t),GVo=r(jLe," (Data2VecAudio model)"),jLe.forEach(t),OVo=i(Go),$3=n(Go,"LI",{});var DLe=s($3);Tme=n(DLe,"STRONG",{});var rit=s(Tme);VVo=r(rit,"hubert"),rit.forEach(t),XVo=r(DLe," \u2014 "),dG=n(DLe,"A",{href:!0});var tit=s(dG);zVo=r(tit,"HubertForCTC"),tit.forEach(t),QVo=r(DLe," (Hubert model)"),DLe.forEach(t),WVo=i(Go),I3=n(Go,"LI",{});var GLe=s(I3);Mme=n(GLe,"STRONG",{});var ait=s(Mme);HVo=r(ait,"sew"),ait.forEach(t),UVo=r(GLe," \u2014 "),cG=n(GLe,"A",{href:!0});var nit=s(cG);JVo=r(nit,"SEWForCTC"),nit.forEach(t),YVo=r(GLe," (SEW model)"),GLe.forEach(t),KVo=i(Go),q3=n(Go,"LI",{});var OLe=s(q3);Eme=n(OLe,"STRONG",{});var sit=s(Eme);ZVo=r(sit,"sew-d"),sit.forEach(t),eXo=r(OLe," \u2014 "),fG=n(OLe,"A",{href:!0});var lit=s(fG);oXo=r(lit,"SEWDForCTC"),lit.forEach(t),rXo=r(OLe," (SEW-D model)"),OLe.forEach(t),tXo=i(Go),N3=n(Go,"LI",{});var VLe=s(N3);Cme=n(VLe,"STRONG",{});var iit=s(Cme);aXo=r(iit,"unispeech"),iit.forEach(t),nXo=r(VLe," \u2014 "),mG=n(VLe,"A",{href:!0});var dit=s(mG);sXo=r(dit,"UniSpeechForCTC"),dit.forEach(t),lXo=r(VLe," (UniSpeech model)"),VLe.forEach(t),iXo=i(Go),j3=n(Go,"LI",{});var XLe=s(j3);wme=n(XLe,"STRONG",{});var cit=s(wme);dXo=r(cit,"unispeech-sat"),cit.forEach(t),cXo=r(XLe," \u2014 "),gG=n(XLe,"A",{href:!0});var fit=s(gG);fXo=r(fit,"UniSpeechSatForCTC"),fit.forEach(t),mXo=r(XLe," (UniSpeechSat model)"),XLe.forEach(t),gXo=i(Go),D3=n(Go,"LI",{});var zLe=s(D3);Ame=n(zLe,"STRONG",{});var mit=s(Ame);hXo=r(mit,"wav2vec2"),mit.forEach(t),pXo=r(zLe," \u2014 "),hG=n(zLe,"A",{href:!0});var git=s(hG);_Xo=r(git,"Wav2Vec2ForCTC"),git.forEach(t),uXo=r(zLe," (Wav2Vec2 model)"),zLe.forEach(t),bXo=i(Go),G3=n(Go,"LI",{});var QLe=s(G3);yme=n(QLe,"STRONG",{});var hit=s(yme);FXo=r(hit,"wavlm"),hit.forEach(t),vXo=r(QLe," \u2014 "),pG=n(QLe,"A",{href:!0});var pit=s(pG);TXo=r(pit,"WavLMForCTC"),pit.forEach(t),MXo=r(QLe," (WavLM model)"),QLe.forEach(t),Go.forEach(t),EXo=i(oa),O3=n(oa,"P",{});var WLe=s(O3);CXo=r(WLe,"The model is set in evaluation mode by default using "),Lme=n(WLe,"CODE",{});var _it=s(Lme);wXo=r(_it,"model.eval()"),_it.forEach(t),AXo=r(WLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xme=n(WLe,"CODE",{});var uit=s(xme);yXo=r(uit,"model.train()"),uit.forEach(t),WLe.forEach(t),LXo=i(oa),kme=n(oa,"P",{});var bit=s(kme);xXo=r(bit,"Examples:"),bit.forEach(t),kXo=i(oa),m(e0.$$.fragment,oa),oa.forEach(t),El.forEach(t),IRe=i(c),Xd=n(c,"H2",{class:!0});var zPe=s(Xd);V3=n(zPe,"A",{id:!0,class:!0,href:!0});var Fit=s(V3);Sme=n(Fit,"SPAN",{});var vit=s(Sme);m(o0.$$.fragment,vit),vit.forEach(t),Fit.forEach(t),SXo=i(zPe),Rme=n(zPe,"SPAN",{});var Tit=s(Rme);RXo=r(Tit,"AutoModelForSpeechSeq2Seq"),Tit.forEach(t),zPe.forEach(t),qRe=i(c),mr=n(c,"DIV",{class:!0});var wl=s(mr);m(r0.$$.fragment,wl),BXo=i(wl),zd=n(wl,"P",{});var SU=s(zd);PXo=r(SU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),_G=n(SU,"A",{href:!0});var Mit=s(_G);$Xo=r(Mit,"from_pretrained()"),Mit.forEach(t),IXo=r(SU," class method or the "),uG=n(SU,"A",{href:!0});var Eit=s(uG);qXo=r(Eit,"from_config()"),Eit.forEach(t),NXo=r(SU,` class
method.`),SU.forEach(t),jXo=i(wl),t0=n(wl,"P",{});var QPe=s(t0);DXo=r(QPe,"This class cannot be instantiated directly using "),Bme=n(QPe,"CODE",{});var Cit=s(Bme);GXo=r(Cit,"__init__()"),Cit.forEach(t),OXo=r(QPe," (throws an error)."),QPe.forEach(t),VXo=i(wl),st=n(wl,"DIV",{class:!0});var Al=s(st);m(a0.$$.fragment,Al),XXo=i(Al),Pme=n(Al,"P",{});var wit=s(Pme);zXo=r(wit,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),wit.forEach(t),QXo=i(Al),Qd=n(Al,"P",{});var RU=s(Qd);WXo=r(RU,`Note:
Loading a model from its configuration file does `),$me=n(RU,"STRONG",{});var Ait=s($me);HXo=r(Ait,"not"),Ait.forEach(t),UXo=r(RU,` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=n(RU,"A",{href:!0});var yit=s(bG);JXo=r(yit,"from_pretrained()"),yit.forEach(t),YXo=r(RU," to load the model weights."),RU.forEach(t),KXo=i(Al),Ime=n(Al,"P",{});var Lit=s(Ime);ZXo=r(Lit,"Examples:"),Lit.forEach(t),ezo=i(Al),m(n0.$$.fragment,Al),Al.forEach(t),ozo=i(wl),Ze=n(wl,"DIV",{class:!0});var ra=s(Ze);m(s0.$$.fragment,ra),rzo=i(ra),qme=n(ra,"P",{});var xit=s(qme);tzo=r(xit,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),xit.forEach(t),azo=i(ra),ln=n(ra,"P",{});var NE=s(ln);nzo=r(NE,"The model class to instantiate is selected based on the "),Nme=n(NE,"CODE",{});var kit=s(Nme);szo=r(kit,"model_type"),kit.forEach(t),lzo=r(NE,` property of the config object (either
passed as an argument or loaded from `),jme=n(NE,"CODE",{});var Sit=s(jme);izo=r(Sit,"pretrained_model_name_or_path"),Sit.forEach(t),dzo=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dme=n(NE,"CODE",{});var Rit=s(Dme);czo=r(Rit,"pretrained_model_name_or_path"),Rit.forEach(t),fzo=r(NE,":"),NE.forEach(t),mzo=i(ra),l0=n(ra,"UL",{});var WPe=s(l0);X3=n(WPe,"LI",{});var HLe=s(X3);Gme=n(HLe,"STRONG",{});var Bit=s(Gme);gzo=r(Bit,"speech-encoder-decoder"),Bit.forEach(t),hzo=r(HLe," \u2014 "),FG=n(HLe,"A",{href:!0});var Pit=s(FG);pzo=r(Pit,"SpeechEncoderDecoderModel"),Pit.forEach(t),_zo=r(HLe," (Speech Encoder decoder model)"),HLe.forEach(t),uzo=i(WPe),z3=n(WPe,"LI",{});var ULe=s(z3);Ome=n(ULe,"STRONG",{});var $it=s(Ome);bzo=r($it,"speech_to_text"),$it.forEach(t),Fzo=r(ULe," \u2014 "),vG=n(ULe,"A",{href:!0});var Iit=s(vG);vzo=r(Iit,"Speech2TextForConditionalGeneration"),Iit.forEach(t),Tzo=r(ULe," (Speech2Text model)"),ULe.forEach(t),WPe.forEach(t),Mzo=i(ra),Q3=n(ra,"P",{});var JLe=s(Q3);Ezo=r(JLe,"The model is set in evaluation mode by default using "),Vme=n(JLe,"CODE",{});var qit=s(Vme);Czo=r(qit,"model.eval()"),qit.forEach(t),wzo=r(JLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xme=n(JLe,"CODE",{});var Nit=s(Xme);Azo=r(Nit,"model.train()"),Nit.forEach(t),JLe.forEach(t),yzo=i(ra),zme=n(ra,"P",{});var jit=s(zme);Lzo=r(jit,"Examples:"),jit.forEach(t),xzo=i(ra),m(i0.$$.fragment,ra),ra.forEach(t),wl.forEach(t),NRe=i(c),Wd=n(c,"H2",{class:!0});var HPe=s(Wd);W3=n(HPe,"A",{id:!0,class:!0,href:!0});var Dit=s(W3);Qme=n(Dit,"SPAN",{});var Git=s(Qme);m(d0.$$.fragment,Git),Git.forEach(t),Dit.forEach(t),kzo=i(HPe),Wme=n(HPe,"SPAN",{});var Oit=s(Wme);Szo=r(Oit,"AutoModelForAudioXVector"),Oit.forEach(t),HPe.forEach(t),jRe=i(c),gr=n(c,"DIV",{class:!0});var yl=s(gr);m(c0.$$.fragment,yl),Rzo=i(yl),Hd=n(yl,"P",{});var BU=s(Hd);Bzo=r(BU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),TG=n(BU,"A",{href:!0});var Vit=s(TG);Pzo=r(Vit,"from_pretrained()"),Vit.forEach(t),$zo=r(BU," class method or the "),MG=n(BU,"A",{href:!0});var Xit=s(MG);Izo=r(Xit,"from_config()"),Xit.forEach(t),qzo=r(BU,` class
method.`),BU.forEach(t),Nzo=i(yl),f0=n(yl,"P",{});var UPe=s(f0);jzo=r(UPe,"This class cannot be instantiated directly using "),Hme=n(UPe,"CODE",{});var zit=s(Hme);Dzo=r(zit,"__init__()"),zit.forEach(t),Gzo=r(UPe," (throws an error)."),UPe.forEach(t),Ozo=i(yl),lt=n(yl,"DIV",{class:!0});var Ll=s(lt);m(m0.$$.fragment,Ll),Vzo=i(Ll),Ume=n(Ll,"P",{});var Qit=s(Ume);Xzo=r(Qit,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Qit.forEach(t),zzo=i(Ll),Ud=n(Ll,"P",{});var PU=s(Ud);Qzo=r(PU,`Note:
Loading a model from its configuration file does `),Jme=n(PU,"STRONG",{});var Wit=s(Jme);Wzo=r(Wit,"not"),Wit.forEach(t),Hzo=r(PU,` load the model weights. It only affects the
model\u2019s configuration. Use `),EG=n(PU,"A",{href:!0});var Hit=s(EG);Uzo=r(Hit,"from_pretrained()"),Hit.forEach(t),Jzo=r(PU," to load the model weights."),PU.forEach(t),Yzo=i(Ll),Yme=n(Ll,"P",{});var Uit=s(Yme);Kzo=r(Uit,"Examples:"),Uit.forEach(t),Zzo=i(Ll),m(g0.$$.fragment,Ll),Ll.forEach(t),eQo=i(yl),eo=n(yl,"DIV",{class:!0});var ta=s(eo);m(h0.$$.fragment,ta),oQo=i(ta),Kme=n(ta,"P",{});var Jit=s(Kme);rQo=r(Jit,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Jit.forEach(t),tQo=i(ta),dn=n(ta,"P",{});var jE=s(dn);aQo=r(jE,"The model class to instantiate is selected based on the "),Zme=n(jE,"CODE",{});var Yit=s(Zme);nQo=r(Yit,"model_type"),Yit.forEach(t),sQo=r(jE,` property of the config object (either
passed as an argument or loaded from `),ege=n(jE,"CODE",{});var Kit=s(ege);lQo=r(Kit,"pretrained_model_name_or_path"),Kit.forEach(t),iQo=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=n(jE,"CODE",{});var Zit=s(oge);dQo=r(Zit,"pretrained_model_name_or_path"),Zit.forEach(t),cQo=r(jE,":"),jE.forEach(t),fQo=i(ta),cn=n(ta,"UL",{});var DE=s(cn);H3=n(DE,"LI",{});var YLe=s(H3);rge=n(YLe,"STRONG",{});var edt=s(rge);mQo=r(edt,"data2vec-audio"),edt.forEach(t),gQo=r(YLe," \u2014 "),CG=n(YLe,"A",{href:!0});var odt=s(CG);hQo=r(odt,"Data2VecAudioForXVector"),odt.forEach(t),pQo=r(YLe," (Data2VecAudio model)"),YLe.forEach(t),_Qo=i(DE),U3=n(DE,"LI",{});var KLe=s(U3);tge=n(KLe,"STRONG",{});var rdt=s(tge);uQo=r(rdt,"unispeech-sat"),rdt.forEach(t),bQo=r(KLe," \u2014 "),wG=n(KLe,"A",{href:!0});var tdt=s(wG);FQo=r(tdt,"UniSpeechSatForXVector"),tdt.forEach(t),vQo=r(KLe," (UniSpeechSat model)"),KLe.forEach(t),TQo=i(DE),J3=n(DE,"LI",{});var ZLe=s(J3);age=n(ZLe,"STRONG",{});var adt=s(age);MQo=r(adt,"wav2vec2"),adt.forEach(t),EQo=r(ZLe," \u2014 "),AG=n(ZLe,"A",{href:!0});var ndt=s(AG);CQo=r(ndt,"Wav2Vec2ForXVector"),ndt.forEach(t),wQo=r(ZLe," (Wav2Vec2 model)"),ZLe.forEach(t),AQo=i(DE),Y3=n(DE,"LI",{});var e8e=s(Y3);nge=n(e8e,"STRONG",{});var sdt=s(nge);yQo=r(sdt,"wavlm"),sdt.forEach(t),LQo=r(e8e," \u2014 "),yG=n(e8e,"A",{href:!0});var ldt=s(yG);xQo=r(ldt,"WavLMForXVector"),ldt.forEach(t),kQo=r(e8e," (WavLM model)"),e8e.forEach(t),DE.forEach(t),SQo=i(ta),K3=n(ta,"P",{});var o8e=s(K3);RQo=r(o8e,"The model is set in evaluation mode by default using "),sge=n(o8e,"CODE",{});var idt=s(sge);BQo=r(idt,"model.eval()"),idt.forEach(t),PQo=r(o8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lge=n(o8e,"CODE",{});var ddt=s(lge);$Qo=r(ddt,"model.train()"),ddt.forEach(t),o8e.forEach(t),IQo=i(ta),ige=n(ta,"P",{});var cdt=s(ige);qQo=r(cdt,"Examples:"),cdt.forEach(t),NQo=i(ta),m(p0.$$.fragment,ta),ta.forEach(t),yl.forEach(t),DRe=i(c),Jd=n(c,"H2",{class:!0});var JPe=s(Jd);Z3=n(JPe,"A",{id:!0,class:!0,href:!0});var fdt=s(Z3);dge=n(fdt,"SPAN",{});var mdt=s(dge);m(_0.$$.fragment,mdt),mdt.forEach(t),fdt.forEach(t),jQo=i(JPe),cge=n(JPe,"SPAN",{});var gdt=s(cge);DQo=r(gdt,"AutoModelForMaskedImageModeling"),gdt.forEach(t),JPe.forEach(t),GRe=i(c),hr=n(c,"DIV",{class:!0});var xl=s(hr);m(u0.$$.fragment,xl),GQo=i(xl),Yd=n(xl,"P",{});var $U=s(Yd);OQo=r($U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),LG=n($U,"A",{href:!0});var hdt=s(LG);VQo=r(hdt,"from_pretrained()"),hdt.forEach(t),XQo=r($U," class method or the "),xG=n($U,"A",{href:!0});var pdt=s(xG);zQo=r(pdt,"from_config()"),pdt.forEach(t),QQo=r($U,` class
method.`),$U.forEach(t),WQo=i(xl),b0=n(xl,"P",{});var YPe=s(b0);HQo=r(YPe,"This class cannot be instantiated directly using "),fge=n(YPe,"CODE",{});var _dt=s(fge);UQo=r(_dt,"__init__()"),_dt.forEach(t),JQo=r(YPe," (throws an error)."),YPe.forEach(t),YQo=i(xl),it=n(xl,"DIV",{class:!0});var kl=s(it);m(F0.$$.fragment,kl),KQo=i(kl),mge=n(kl,"P",{});var udt=s(mge);ZQo=r(udt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),udt.forEach(t),eWo=i(kl),Kd=n(kl,"P",{});var IU=s(Kd);oWo=r(IU,`Note:
Loading a model from its configuration file does `),gge=n(IU,"STRONG",{});var bdt=s(gge);rWo=r(bdt,"not"),bdt.forEach(t),tWo=r(IU,` load the model weights. It only affects the
model\u2019s configuration. Use `),kG=n(IU,"A",{href:!0});var Fdt=s(kG);aWo=r(Fdt,"from_pretrained()"),Fdt.forEach(t),nWo=r(IU," to load the model weights."),IU.forEach(t),sWo=i(kl),hge=n(kl,"P",{});var vdt=s(hge);lWo=r(vdt,"Examples:"),vdt.forEach(t),iWo=i(kl),m(v0.$$.fragment,kl),kl.forEach(t),dWo=i(xl),oo=n(xl,"DIV",{class:!0});var aa=s(oo);m(T0.$$.fragment,aa),cWo=i(aa),pge=n(aa,"P",{});var Tdt=s(pge);fWo=r(Tdt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Tdt.forEach(t),mWo=i(aa),fn=n(aa,"P",{});var GE=s(fn);gWo=r(GE,"The model class to instantiate is selected based on the "),_ge=n(GE,"CODE",{});var Mdt=s(_ge);hWo=r(Mdt,"model_type"),Mdt.forEach(t),pWo=r(GE,` property of the config object (either
passed as an argument or loaded from `),uge=n(GE,"CODE",{});var Edt=s(uge);_Wo=r(Edt,"pretrained_model_name_or_path"),Edt.forEach(t),uWo=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=n(GE,"CODE",{});var Cdt=s(bge);bWo=r(Cdt,"pretrained_model_name_or_path"),Cdt.forEach(t),FWo=r(GE,":"),GE.forEach(t),vWo=i(aa),Zd=n(aa,"UL",{});var qU=s(Zd);e2=n(qU,"LI",{});var r8e=s(e2);Fge=n(r8e,"STRONG",{});var wdt=s(Fge);TWo=r(wdt,"deit"),wdt.forEach(t),MWo=r(r8e," \u2014 "),SG=n(r8e,"A",{href:!0});var Adt=s(SG);EWo=r(Adt,"DeiTForMaskedImageModeling"),Adt.forEach(t),CWo=r(r8e," (DeiT model)"),r8e.forEach(t),wWo=i(qU),o2=n(qU,"LI",{});var t8e=s(o2);vge=n(t8e,"STRONG",{});var ydt=s(vge);AWo=r(ydt,"swin"),ydt.forEach(t),yWo=r(t8e," \u2014 "),RG=n(t8e,"A",{href:!0});var Ldt=s(RG);LWo=r(Ldt,"SwinForMaskedImageModeling"),Ldt.forEach(t),xWo=r(t8e," (Swin model)"),t8e.forEach(t),kWo=i(qU),r2=n(qU,"LI",{});var a8e=s(r2);Tge=n(a8e,"STRONG",{});var xdt=s(Tge);SWo=r(xdt,"vit"),xdt.forEach(t),RWo=r(a8e," \u2014 "),BG=n(a8e,"A",{href:!0});var kdt=s(BG);BWo=r(kdt,"ViTForMaskedImageModeling"),kdt.forEach(t),PWo=r(a8e," (ViT model)"),a8e.forEach(t),qU.forEach(t),$Wo=i(aa),t2=n(aa,"P",{});var n8e=s(t2);IWo=r(n8e,"The model is set in evaluation mode by default using "),Mge=n(n8e,"CODE",{});var Sdt=s(Mge);qWo=r(Sdt,"model.eval()"),Sdt.forEach(t),NWo=r(n8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ege=n(n8e,"CODE",{});var Rdt=s(Ege);jWo=r(Rdt,"model.train()"),Rdt.forEach(t),n8e.forEach(t),DWo=i(aa),Cge=n(aa,"P",{});var Bdt=s(Cge);GWo=r(Bdt,"Examples:"),Bdt.forEach(t),OWo=i(aa),m(M0.$$.fragment,aa),aa.forEach(t),xl.forEach(t),ORe=i(c),ec=n(c,"H2",{class:!0});var KPe=s(ec);a2=n(KPe,"A",{id:!0,class:!0,href:!0});var Pdt=s(a2);wge=n(Pdt,"SPAN",{});var $dt=s(wge);m(E0.$$.fragment,$dt),$dt.forEach(t),Pdt.forEach(t),VWo=i(KPe),Age=n(KPe,"SPAN",{});var Idt=s(Age);XWo=r(Idt,"AutoModelForObjectDetection"),Idt.forEach(t),KPe.forEach(t),VRe=i(c),pr=n(c,"DIV",{class:!0});var Sl=s(pr);m(C0.$$.fragment,Sl),zWo=i(Sl),oc=n(Sl,"P",{});var NU=s(oc);QWo=r(NU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),PG=n(NU,"A",{href:!0});var qdt=s(PG);WWo=r(qdt,"from_pretrained()"),qdt.forEach(t),HWo=r(NU," class method or the "),$G=n(NU,"A",{href:!0});var Ndt=s($G);UWo=r(Ndt,"from_config()"),Ndt.forEach(t),JWo=r(NU,` class
method.`),NU.forEach(t),YWo=i(Sl),w0=n(Sl,"P",{});var ZPe=s(w0);KWo=r(ZPe,"This class cannot be instantiated directly using "),yge=n(ZPe,"CODE",{});var jdt=s(yge);ZWo=r(jdt,"__init__()"),jdt.forEach(t),eHo=r(ZPe," (throws an error)."),ZPe.forEach(t),oHo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Rl=s(dt);m(A0.$$.fragment,Rl),rHo=i(Rl),Lge=n(Rl,"P",{});var Ddt=s(Lge);tHo=r(Ddt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Ddt.forEach(t),aHo=i(Rl),rc=n(Rl,"P",{});var jU=s(rc);nHo=r(jU,`Note:
Loading a model from its configuration file does `),xge=n(jU,"STRONG",{});var Gdt=s(xge);sHo=r(Gdt,"not"),Gdt.forEach(t),lHo=r(jU,` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=n(jU,"A",{href:!0});var Odt=s(IG);iHo=r(Odt,"from_pretrained()"),Odt.forEach(t),dHo=r(jU," to load the model weights."),jU.forEach(t),cHo=i(Rl),kge=n(Rl,"P",{});var Vdt=s(kge);fHo=r(Vdt,"Examples:"),Vdt.forEach(t),mHo=i(Rl),m(y0.$$.fragment,Rl),Rl.forEach(t),gHo=i(Sl),ro=n(Sl,"DIV",{class:!0});var na=s(ro);m(L0.$$.fragment,na),hHo=i(na),Sge=n(na,"P",{});var Xdt=s(Sge);pHo=r(Xdt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Xdt.forEach(t),_Ho=i(na),mn=n(na,"P",{});var OE=s(mn);uHo=r(OE,"The model class to instantiate is selected based on the "),Rge=n(OE,"CODE",{});var zdt=s(Rge);bHo=r(zdt,"model_type"),zdt.forEach(t),FHo=r(OE,` property of the config object (either
passed as an argument or loaded from `),Bge=n(OE,"CODE",{});var Qdt=s(Bge);vHo=r(Qdt,"pretrained_model_name_or_path"),Qdt.forEach(t),THo=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=n(OE,"CODE",{});var Wdt=s(Pge);MHo=r(Wdt,"pretrained_model_name_or_path"),Wdt.forEach(t),EHo=r(OE,":"),OE.forEach(t),CHo=i(na),$ge=n(na,"UL",{});var Hdt=s($ge);n2=n(Hdt,"LI",{});var s8e=s(n2);Ige=n(s8e,"STRONG",{});var Udt=s(Ige);wHo=r(Udt,"detr"),Udt.forEach(t),AHo=r(s8e," \u2014 "),qG=n(s8e,"A",{href:!0});var Jdt=s(qG);yHo=r(Jdt,"DetrForObjectDetection"),Jdt.forEach(t),LHo=r(s8e," (DETR model)"),s8e.forEach(t),Hdt.forEach(t),xHo=i(na),s2=n(na,"P",{});var l8e=s(s2);kHo=r(l8e,"The model is set in evaluation mode by default using "),qge=n(l8e,"CODE",{});var Ydt=s(qge);SHo=r(Ydt,"model.eval()"),Ydt.forEach(t),RHo=r(l8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nge=n(l8e,"CODE",{});var Kdt=s(Nge);BHo=r(Kdt,"model.train()"),Kdt.forEach(t),l8e.forEach(t),PHo=i(na),jge=n(na,"P",{});var Zdt=s(jge);$Ho=r(Zdt,"Examples:"),Zdt.forEach(t),IHo=i(na),m(x0.$$.fragment,na),na.forEach(t),Sl.forEach(t),XRe=i(c),tc=n(c,"H2",{class:!0});var e$e=s(tc);l2=n(e$e,"A",{id:!0,class:!0,href:!0});var ect=s(l2);Dge=n(ect,"SPAN",{});var oct=s(Dge);m(k0.$$.fragment,oct),oct.forEach(t),ect.forEach(t),qHo=i(e$e),Gge=n(e$e,"SPAN",{});var rct=s(Gge);NHo=r(rct,"AutoModelForImageSegmentation"),rct.forEach(t),e$e.forEach(t),zRe=i(c),_r=n(c,"DIV",{class:!0});var Bl=s(_r);m(S0.$$.fragment,Bl),jHo=i(Bl),ac=n(Bl,"P",{});var DU=s(ac);DHo=r(DU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),NG=n(DU,"A",{href:!0});var tct=s(NG);GHo=r(tct,"from_pretrained()"),tct.forEach(t),OHo=r(DU," class method or the "),jG=n(DU,"A",{href:!0});var act=s(jG);VHo=r(act,"from_config()"),act.forEach(t),XHo=r(DU,` class
method.`),DU.forEach(t),zHo=i(Bl),R0=n(Bl,"P",{});var o$e=s(R0);QHo=r(o$e,"This class cannot be instantiated directly using "),Oge=n(o$e,"CODE",{});var nct=s(Oge);WHo=r(nct,"__init__()"),nct.forEach(t),HHo=r(o$e," (throws an error)."),o$e.forEach(t),UHo=i(Bl),ct=n(Bl,"DIV",{class:!0});var Pl=s(ct);m(B0.$$.fragment,Pl),JHo=i(Pl),Vge=n(Pl,"P",{});var sct=s(Vge);YHo=r(sct,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),sct.forEach(t),KHo=i(Pl),nc=n(Pl,"P",{});var GU=s(nc);ZHo=r(GU,`Note:
Loading a model from its configuration file does `),Xge=n(GU,"STRONG",{});var lct=s(Xge);eUo=r(lct,"not"),lct.forEach(t),oUo=r(GU,` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=n(GU,"A",{href:!0});var ict=s(DG);rUo=r(ict,"from_pretrained()"),ict.forEach(t),tUo=r(GU," to load the model weights."),GU.forEach(t),aUo=i(Pl),zge=n(Pl,"P",{});var dct=s(zge);nUo=r(dct,"Examples:"),dct.forEach(t),sUo=i(Pl),m(P0.$$.fragment,Pl),Pl.forEach(t),lUo=i(Bl),to=n(Bl,"DIV",{class:!0});var sa=s(to);m($0.$$.fragment,sa),iUo=i(sa),Qge=n(sa,"P",{});var cct=s(Qge);dUo=r(cct,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),cct.forEach(t),cUo=i(sa),gn=n(sa,"P",{});var VE=s(gn);fUo=r(VE,"The model class to instantiate is selected based on the "),Wge=n(VE,"CODE",{});var fct=s(Wge);mUo=r(fct,"model_type"),fct.forEach(t),gUo=r(VE,` property of the config object (either
passed as an argument or loaded from `),Hge=n(VE,"CODE",{});var mct=s(Hge);hUo=r(mct,"pretrained_model_name_or_path"),mct.forEach(t),pUo=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uge=n(VE,"CODE",{});var gct=s(Uge);_Uo=r(gct,"pretrained_model_name_or_path"),gct.forEach(t),uUo=r(VE,":"),VE.forEach(t),bUo=i(sa),Jge=n(sa,"UL",{});var hct=s(Jge);i2=n(hct,"LI",{});var i8e=s(i2);Yge=n(i8e,"STRONG",{});var pct=s(Yge);FUo=r(pct,"detr"),pct.forEach(t),vUo=r(i8e," \u2014 "),GG=n(i8e,"A",{href:!0});var _ct=s(GG);TUo=r(_ct,"DetrForSegmentation"),_ct.forEach(t),MUo=r(i8e," (DETR model)"),i8e.forEach(t),hct.forEach(t),EUo=i(sa),d2=n(sa,"P",{});var d8e=s(d2);CUo=r(d8e,"The model is set in evaluation mode by default using "),Kge=n(d8e,"CODE",{});var uct=s(Kge);wUo=r(uct,"model.eval()"),uct.forEach(t),AUo=r(d8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zge=n(d8e,"CODE",{});var bct=s(Zge);yUo=r(bct,"model.train()"),bct.forEach(t),d8e.forEach(t),LUo=i(sa),ehe=n(sa,"P",{});var Fct=s(ehe);xUo=r(Fct,"Examples:"),Fct.forEach(t),kUo=i(sa),m(I0.$$.fragment,sa),sa.forEach(t),Bl.forEach(t),QRe=i(c),sc=n(c,"H2",{class:!0});var r$e=s(sc);c2=n(r$e,"A",{id:!0,class:!0,href:!0});var vct=s(c2);ohe=n(vct,"SPAN",{});var Tct=s(ohe);m(q0.$$.fragment,Tct),Tct.forEach(t),vct.forEach(t),SUo=i(r$e),rhe=n(r$e,"SPAN",{});var Mct=s(rhe);RUo=r(Mct,"AutoModelForSemanticSegmentation"),Mct.forEach(t),r$e.forEach(t),WRe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(N0.$$.fragment,$l),BUo=i($l),lc=n($l,"P",{});var OU=s(lc);PUo=r(OU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),OG=n(OU,"A",{href:!0});var Ect=s(OG);$Uo=r(Ect,"from_pretrained()"),Ect.forEach(t),IUo=r(OU," class method or the "),VG=n(OU,"A",{href:!0});var Cct=s(VG);qUo=r(Cct,"from_config()"),Cct.forEach(t),NUo=r(OU,` class
method.`),OU.forEach(t),jUo=i($l),j0=n($l,"P",{});var t$e=s(j0);DUo=r(t$e,"This class cannot be instantiated directly using "),the=n(t$e,"CODE",{});var wct=s(the);GUo=r(wct,"__init__()"),wct.forEach(t),OUo=r(t$e," (throws an error)."),t$e.forEach(t),VUo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(D0.$$.fragment,Il),XUo=i(Il),ahe=n(Il,"P",{});var Act=s(ahe);zUo=r(Act,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Act.forEach(t),QUo=i(Il),ic=n(Il,"P",{});var VU=s(ic);WUo=r(VU,`Note:
Loading a model from its configuration file does `),nhe=n(VU,"STRONG",{});var yct=s(nhe);HUo=r(yct,"not"),yct.forEach(t),UUo=r(VU,` load the model weights. It only affects the
model\u2019s configuration. Use `),XG=n(VU,"A",{href:!0});var Lct=s(XG);JUo=r(Lct,"from_pretrained()"),Lct.forEach(t),YUo=r(VU," to load the model weights."),VU.forEach(t),KUo=i(Il),she=n(Il,"P",{});var xct=s(she);ZUo=r(xct,"Examples:"),xct.forEach(t),eJo=i(Il),m(G0.$$.fragment,Il),Il.forEach(t),oJo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(O0.$$.fragment,la),rJo=i(la),lhe=n(la,"P",{});var kct=s(lhe);tJo=r(kct,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),kct.forEach(t),aJo=i(la),hn=n(la,"P",{});var XE=s(hn);nJo=r(XE,"The model class to instantiate is selected based on the "),ihe=n(XE,"CODE",{});var Sct=s(ihe);sJo=r(Sct,"model_type"),Sct.forEach(t),lJo=r(XE,` property of the config object (either
passed as an argument or loaded from `),dhe=n(XE,"CODE",{});var Rct=s(dhe);iJo=r(Rct,"pretrained_model_name_or_path"),Rct.forEach(t),dJo=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=n(XE,"CODE",{});var Bct=s(che);cJo=r(Bct,"pretrained_model_name_or_path"),Bct.forEach(t),fJo=r(XE,":"),XE.forEach(t),mJo=i(la),dc=n(la,"UL",{});var XU=s(dc);f2=n(XU,"LI",{});var c8e=s(f2);fhe=n(c8e,"STRONG",{});var Pct=s(fhe);gJo=r(Pct,"beit"),Pct.forEach(t),hJo=r(c8e," \u2014 "),zG=n(c8e,"A",{href:!0});var $ct=s(zG);pJo=r($ct,"BeitForSemanticSegmentation"),$ct.forEach(t),_Jo=r(c8e," (BEiT model)"),c8e.forEach(t),uJo=i(XU),m2=n(XU,"LI",{});var f8e=s(m2);mhe=n(f8e,"STRONG",{});var Ict=s(mhe);bJo=r(Ict,"dpt"),Ict.forEach(t),FJo=r(f8e," \u2014 "),QG=n(f8e,"A",{href:!0});var qct=s(QG);vJo=r(qct,"DPTForSemanticSegmentation"),qct.forEach(t),TJo=r(f8e," (DPT model)"),f8e.forEach(t),MJo=i(XU),g2=n(XU,"LI",{});var m8e=s(g2);ghe=n(m8e,"STRONG",{});var Nct=s(ghe);EJo=r(Nct,"segformer"),Nct.forEach(t),CJo=r(m8e," \u2014 "),WG=n(m8e,"A",{href:!0});var jct=s(WG);wJo=r(jct,"SegformerForSemanticSegmentation"),jct.forEach(t),AJo=r(m8e," (SegFormer model)"),m8e.forEach(t),XU.forEach(t),yJo=i(la),h2=n(la,"P",{});var g8e=s(h2);LJo=r(g8e,"The model is set in evaluation mode by default using "),hhe=n(g8e,"CODE",{});var Dct=s(hhe);xJo=r(Dct,"model.eval()"),Dct.forEach(t),kJo=r(g8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),phe=n(g8e,"CODE",{});var Gct=s(phe);SJo=r(Gct,"model.train()"),Gct.forEach(t),g8e.forEach(t),RJo=i(la),_he=n(la,"P",{});var Oct=s(_he);BJo=r(Oct,"Examples:"),Oct.forEach(t),PJo=i(la),m(V0.$$.fragment,la),la.forEach(t),$l.forEach(t),HRe=i(c),cc=n(c,"H2",{class:!0});var a$e=s(cc);p2=n(a$e,"A",{id:!0,class:!0,href:!0});var Vct=s(p2);uhe=n(Vct,"SPAN",{});var Xct=s(uhe);m(X0.$$.fragment,Xct),Xct.forEach(t),Vct.forEach(t),$Jo=i(a$e),bhe=n(a$e,"SPAN",{});var zct=s(bhe);IJo=r(zct,"AutoModelForInstanceSegmentation"),zct.forEach(t),a$e.forEach(t),URe=i(c),br=n(c,"DIV",{class:!0});var ql=s(br);m(z0.$$.fragment,ql),qJo=i(ql),fc=n(ql,"P",{});var zU=s(fc);NJo=r(zU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),HG=n(zU,"A",{href:!0});var Qct=s(HG);jJo=r(Qct,"from_pretrained()"),Qct.forEach(t),DJo=r(zU," class method or the "),UG=n(zU,"A",{href:!0});var Wct=s(UG);GJo=r(Wct,"from_config()"),Wct.forEach(t),OJo=r(zU,` class
method.`),zU.forEach(t),VJo=i(ql),Q0=n(ql,"P",{});var n$e=s(Q0);XJo=r(n$e,"This class cannot be instantiated directly using "),Fhe=n(n$e,"CODE",{});var Hct=s(Fhe);zJo=r(Hct,"__init__()"),Hct.forEach(t),QJo=r(n$e," (throws an error)."),n$e.forEach(t),WJo=i(ql),mt=n(ql,"DIV",{class:!0});var Nl=s(mt);m(W0.$$.fragment,Nl),HJo=i(Nl),vhe=n(Nl,"P",{});var Uct=s(vhe);UJo=r(Uct,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Uct.forEach(t),JJo=i(Nl),mc=n(Nl,"P",{});var QU=s(mc);YJo=r(QU,`Note:
Loading a model from its configuration file does `),The=n(QU,"STRONG",{});var Jct=s(The);KJo=r(Jct,"not"),Jct.forEach(t),ZJo=r(QU,` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=n(QU,"A",{href:!0});var Yct=s(JG);eYo=r(Yct,"from_pretrained()"),Yct.forEach(t),oYo=r(QU," to load the model weights."),QU.forEach(t),rYo=i(Nl),Mhe=n(Nl,"P",{});var Kct=s(Mhe);tYo=r(Kct,"Examples:"),Kct.forEach(t),aYo=i(Nl),m(H0.$$.fragment,Nl),Nl.forEach(t),nYo=i(ql),no=n(ql,"DIV",{class:!0});var ia=s(no);m(U0.$$.fragment,ia),sYo=i(ia),Ehe=n(ia,"P",{});var Zct=s(Ehe);lYo=r(Zct,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Zct.forEach(t),iYo=i(ia),pn=n(ia,"P",{});var zE=s(pn);dYo=r(zE,"The model class to instantiate is selected based on the "),Che=n(zE,"CODE",{});var eft=s(Che);cYo=r(eft,"model_type"),eft.forEach(t),fYo=r(zE,` property of the config object (either
passed as an argument or loaded from `),whe=n(zE,"CODE",{});var oft=s(whe);mYo=r(oft,"pretrained_model_name_or_path"),oft.forEach(t),gYo=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=n(zE,"CODE",{});var rft=s(Ahe);hYo=r(rft,"pretrained_model_name_or_path"),rft.forEach(t),pYo=r(zE,":"),zE.forEach(t),_Yo=i(ia),yhe=n(ia,"UL",{});var tft=s(yhe);_2=n(tft,"LI",{});var h8e=s(_2);Lhe=n(h8e,"STRONG",{});var aft=s(Lhe);uYo=r(aft,"maskformer"),aft.forEach(t),bYo=r(h8e," \u2014 "),YG=n(h8e,"A",{href:!0});var nft=s(YG);FYo=r(nft,"MaskFormerForInstanceSegmentation"),nft.forEach(t),vYo=r(h8e," (MaskFormer model)"),h8e.forEach(t),tft.forEach(t),TYo=i(ia),u2=n(ia,"P",{});var p8e=s(u2);MYo=r(p8e,"The model is set in evaluation mode by default using "),xhe=n(p8e,"CODE",{});var sft=s(xhe);EYo=r(sft,"model.eval()"),sft.forEach(t),CYo=r(p8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=n(p8e,"CODE",{});var lft=s(khe);wYo=r(lft,"model.train()"),lft.forEach(t),p8e.forEach(t),AYo=i(ia),She=n(ia,"P",{});var ift=s(She);yYo=r(ift,"Examples:"),ift.forEach(t),LYo=i(ia),m(J0.$$.fragment,ia),ia.forEach(t),ql.forEach(t),JRe=i(c),gc=n(c,"H2",{class:!0});var s$e=s(gc);b2=n(s$e,"A",{id:!0,class:!0,href:!0});var dft=s(b2);Rhe=n(dft,"SPAN",{});var cft=s(Rhe);m(Y0.$$.fragment,cft),cft.forEach(t),dft.forEach(t),xYo=i(s$e),Bhe=n(s$e,"SPAN",{});var fft=s(Bhe);kYo=r(fft,"TFAutoModel"),fft.forEach(t),s$e.forEach(t),YRe=i(c),Fr=n(c,"DIV",{class:!0});var jl=s(Fr);m(K0.$$.fragment,jl),SYo=i(jl),hc=n(jl,"P",{});var WU=s(hc);RYo=r(WU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KG=n(WU,"A",{href:!0});var mft=s(KG);BYo=r(mft,"from_pretrained()"),mft.forEach(t),PYo=r(WU," class method or the "),ZG=n(WU,"A",{href:!0});var gft=s(ZG);$Yo=r(gft,"from_config()"),gft.forEach(t),IYo=r(WU,` class
method.`),WU.forEach(t),qYo=i(jl),Z0=n(jl,"P",{});var l$e=s(Z0);NYo=r(l$e,"This class cannot be instantiated directly using "),Phe=n(l$e,"CODE",{});var hft=s(Phe);jYo=r(hft,"__init__()"),hft.forEach(t),DYo=r(l$e," (throws an error)."),l$e.forEach(t),GYo=i(jl),gt=n(jl,"DIV",{class:!0});var Dl=s(gt);m(ey.$$.fragment,Dl),OYo=i(Dl),$he=n(Dl,"P",{});var pft=s($he);VYo=r(pft,"Instantiates one of the base model classes of the library from a configuration."),pft.forEach(t),XYo=i(Dl),pc=n(Dl,"P",{});var HU=s(pc);zYo=r(HU,`Note:
Loading a model from its configuration file does `),Ihe=n(HU,"STRONG",{});var _ft=s(Ihe);QYo=r(_ft,"not"),_ft.forEach(t),WYo=r(HU,` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=n(HU,"A",{href:!0});var uft=s(eO);HYo=r(uft,"from_pretrained()"),uft.forEach(t),UYo=r(HU," to load the model weights."),HU.forEach(t),JYo=i(Dl),qhe=n(Dl,"P",{});var bft=s(qhe);YYo=r(bft,"Examples:"),bft.forEach(t),KYo=i(Dl),m(oy.$$.fragment,Dl),Dl.forEach(t),ZYo=i(jl),ho=n(jl,"DIV",{class:!0});var pa=s(ho);m(ry.$$.fragment,pa),eKo=i(pa),Nhe=n(pa,"P",{});var Fft=s(Nhe);oKo=r(Fft,"Instantiate one of the base model classes of the library from a pretrained model."),Fft.forEach(t),rKo=i(pa),_n=n(pa,"P",{});var QE=s(_n);tKo=r(QE,"The model class to instantiate is selected based on the "),jhe=n(QE,"CODE",{});var vft=s(jhe);aKo=r(vft,"model_type"),vft.forEach(t),nKo=r(QE,` property of the config object (either
passed as an argument or loaded from `),Dhe=n(QE,"CODE",{});var Tft=s(Dhe);sKo=r(Tft,"pretrained_model_name_or_path"),Tft.forEach(t),lKo=r(QE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ghe=n(QE,"CODE",{});var Mft=s(Ghe);iKo=r(Mft,"pretrained_model_name_or_path"),Mft.forEach(t),dKo=r(QE,":"),QE.forEach(t),cKo=i(pa),L=n(pa,"UL",{});var k=s(L);F2=n(k,"LI",{});var _8e=s(F2);Ohe=n(_8e,"STRONG",{});var Eft=s(Ohe);fKo=r(Eft,"albert"),Eft.forEach(t),mKo=r(_8e," \u2014 "),oO=n(_8e,"A",{href:!0});var Cft=s(oO);gKo=r(Cft,"TFAlbertModel"),Cft.forEach(t),hKo=r(_8e," (ALBERT model)"),_8e.forEach(t),pKo=i(k),v2=n(k,"LI",{});var u8e=s(v2);Vhe=n(u8e,"STRONG",{});var wft=s(Vhe);_Ko=r(wft,"bart"),wft.forEach(t),uKo=r(u8e," \u2014 "),rO=n(u8e,"A",{href:!0});var Aft=s(rO);bKo=r(Aft,"TFBartModel"),Aft.forEach(t),FKo=r(u8e," (BART model)"),u8e.forEach(t),vKo=i(k),T2=n(k,"LI",{});var b8e=s(T2);Xhe=n(b8e,"STRONG",{});var yft=s(Xhe);TKo=r(yft,"bert"),yft.forEach(t),MKo=r(b8e," \u2014 "),tO=n(b8e,"A",{href:!0});var Lft=s(tO);EKo=r(Lft,"TFBertModel"),Lft.forEach(t),CKo=r(b8e," (BERT model)"),b8e.forEach(t),wKo=i(k),M2=n(k,"LI",{});var F8e=s(M2);zhe=n(F8e,"STRONG",{});var xft=s(zhe);AKo=r(xft,"blenderbot"),xft.forEach(t),yKo=r(F8e," \u2014 "),aO=n(F8e,"A",{href:!0});var kft=s(aO);LKo=r(kft,"TFBlenderbotModel"),kft.forEach(t),xKo=r(F8e," (Blenderbot model)"),F8e.forEach(t),kKo=i(k),E2=n(k,"LI",{});var v8e=s(E2);Qhe=n(v8e,"STRONG",{});var Sft=s(Qhe);SKo=r(Sft,"blenderbot-small"),Sft.forEach(t),RKo=r(v8e," \u2014 "),nO=n(v8e,"A",{href:!0});var Rft=s(nO);BKo=r(Rft,"TFBlenderbotSmallModel"),Rft.forEach(t),PKo=r(v8e," (BlenderbotSmall model)"),v8e.forEach(t),$Ko=i(k),C2=n(k,"LI",{});var T8e=s(C2);Whe=n(T8e,"STRONG",{});var Bft=s(Whe);IKo=r(Bft,"camembert"),Bft.forEach(t),qKo=r(T8e," \u2014 "),sO=n(T8e,"A",{href:!0});var Pft=s(sO);NKo=r(Pft,"TFCamembertModel"),Pft.forEach(t),jKo=r(T8e," (CamemBERT model)"),T8e.forEach(t),DKo=i(k),w2=n(k,"LI",{});var M8e=s(w2);Hhe=n(M8e,"STRONG",{});var $ft=s(Hhe);GKo=r($ft,"clip"),$ft.forEach(t),OKo=r(M8e," \u2014 "),lO=n(M8e,"A",{href:!0});var Ift=s(lO);VKo=r(Ift,"TFCLIPModel"),Ift.forEach(t),XKo=r(M8e," (CLIP model)"),M8e.forEach(t),zKo=i(k),A2=n(k,"LI",{});var E8e=s(A2);Uhe=n(E8e,"STRONG",{});var qft=s(Uhe);QKo=r(qft,"convbert"),qft.forEach(t),WKo=r(E8e," \u2014 "),iO=n(E8e,"A",{href:!0});var Nft=s(iO);HKo=r(Nft,"TFConvBertModel"),Nft.forEach(t),UKo=r(E8e," (ConvBERT model)"),E8e.forEach(t),JKo=i(k),y2=n(k,"LI",{});var C8e=s(y2);Jhe=n(C8e,"STRONG",{});var jft=s(Jhe);YKo=r(jft,"convnext"),jft.forEach(t),KKo=r(C8e," \u2014 "),dO=n(C8e,"A",{href:!0});var Dft=s(dO);ZKo=r(Dft,"TFConvNextModel"),Dft.forEach(t),eZo=r(C8e," (ConvNext model)"),C8e.forEach(t),oZo=i(k),L2=n(k,"LI",{});var w8e=s(L2);Yhe=n(w8e,"STRONG",{});var Gft=s(Yhe);rZo=r(Gft,"ctrl"),Gft.forEach(t),tZo=r(w8e," \u2014 "),cO=n(w8e,"A",{href:!0});var Oft=s(cO);aZo=r(Oft,"TFCTRLModel"),Oft.forEach(t),nZo=r(w8e," (CTRL model)"),w8e.forEach(t),sZo=i(k),x2=n(k,"LI",{});var A8e=s(x2);Khe=n(A8e,"STRONG",{});var Vft=s(Khe);lZo=r(Vft,"deberta"),Vft.forEach(t),iZo=r(A8e," \u2014 "),fO=n(A8e,"A",{href:!0});var Xft=s(fO);dZo=r(Xft,"TFDebertaModel"),Xft.forEach(t),cZo=r(A8e," (DeBERTa model)"),A8e.forEach(t),fZo=i(k),k2=n(k,"LI",{});var y8e=s(k2);Zhe=n(y8e,"STRONG",{});var zft=s(Zhe);mZo=r(zft,"deberta-v2"),zft.forEach(t),gZo=r(y8e," \u2014 "),mO=n(y8e,"A",{href:!0});var Qft=s(mO);hZo=r(Qft,"TFDebertaV2Model"),Qft.forEach(t),pZo=r(y8e," (DeBERTa-v2 model)"),y8e.forEach(t),_Zo=i(k),S2=n(k,"LI",{});var L8e=s(S2);epe=n(L8e,"STRONG",{});var Wft=s(epe);uZo=r(Wft,"distilbert"),Wft.forEach(t),bZo=r(L8e," \u2014 "),gO=n(L8e,"A",{href:!0});var Hft=s(gO);FZo=r(Hft,"TFDistilBertModel"),Hft.forEach(t),vZo=r(L8e," (DistilBERT model)"),L8e.forEach(t),TZo=i(k),R2=n(k,"LI",{});var x8e=s(R2);ope=n(x8e,"STRONG",{});var Uft=s(ope);MZo=r(Uft,"dpr"),Uft.forEach(t),EZo=r(x8e," \u2014 "),hO=n(x8e,"A",{href:!0});var Jft=s(hO);CZo=r(Jft,"TFDPRQuestionEncoder"),Jft.forEach(t),wZo=r(x8e," (DPR model)"),x8e.forEach(t),AZo=i(k),B2=n(k,"LI",{});var k8e=s(B2);rpe=n(k8e,"STRONG",{});var Yft=s(rpe);yZo=r(Yft,"electra"),Yft.forEach(t),LZo=r(k8e," \u2014 "),pO=n(k8e,"A",{href:!0});var Kft=s(pO);xZo=r(Kft,"TFElectraModel"),Kft.forEach(t),kZo=r(k8e," (ELECTRA model)"),k8e.forEach(t),SZo=i(k),P2=n(k,"LI",{});var S8e=s(P2);tpe=n(S8e,"STRONG",{});var Zft=s(tpe);RZo=r(Zft,"flaubert"),Zft.forEach(t),BZo=r(S8e," \u2014 "),_O=n(S8e,"A",{href:!0});var emt=s(_O);PZo=r(emt,"TFFlaubertModel"),emt.forEach(t),$Zo=r(S8e," (FlauBERT model)"),S8e.forEach(t),IZo=i(k),Gs=n(k,"LI",{});var i9=s(Gs);ape=n(i9,"STRONG",{});var omt=s(ape);qZo=r(omt,"funnel"),omt.forEach(t),NZo=r(i9," \u2014 "),uO=n(i9,"A",{href:!0});var rmt=s(uO);jZo=r(rmt,"TFFunnelModel"),rmt.forEach(t),DZo=r(i9," or "),bO=n(i9,"A",{href:!0});var tmt=s(bO);GZo=r(tmt,"TFFunnelBaseModel"),tmt.forEach(t),OZo=r(i9," (Funnel Transformer model)"),i9.forEach(t),VZo=i(k),$2=n(k,"LI",{});var R8e=s($2);npe=n(R8e,"STRONG",{});var amt=s(npe);XZo=r(amt,"gpt2"),amt.forEach(t),zZo=r(R8e," \u2014 "),FO=n(R8e,"A",{href:!0});var nmt=s(FO);QZo=r(nmt,"TFGPT2Model"),nmt.forEach(t),WZo=r(R8e," (OpenAI GPT-2 model)"),R8e.forEach(t),HZo=i(k),I2=n(k,"LI",{});var B8e=s(I2);spe=n(B8e,"STRONG",{});var smt=s(spe);UZo=r(smt,"gptj"),smt.forEach(t),JZo=r(B8e," \u2014 "),vO=n(B8e,"A",{href:!0});var lmt=s(vO);YZo=r(lmt,"TFGPTJModel"),lmt.forEach(t),KZo=r(B8e," (GPT-J model)"),B8e.forEach(t),ZZo=i(k),q2=n(k,"LI",{});var P8e=s(q2);lpe=n(P8e,"STRONG",{});var imt=s(lpe);eer=r(imt,"hubert"),imt.forEach(t),oer=r(P8e," \u2014 "),TO=n(P8e,"A",{href:!0});var dmt=s(TO);rer=r(dmt,"TFHubertModel"),dmt.forEach(t),ter=r(P8e," (Hubert model)"),P8e.forEach(t),aer=i(k),N2=n(k,"LI",{});var $8e=s(N2);ipe=n($8e,"STRONG",{});var cmt=s(ipe);ner=r(cmt,"layoutlm"),cmt.forEach(t),ser=r($8e," \u2014 "),MO=n($8e,"A",{href:!0});var fmt=s(MO);ler=r(fmt,"TFLayoutLMModel"),fmt.forEach(t),ier=r($8e," (LayoutLM model)"),$8e.forEach(t),der=i(k),j2=n(k,"LI",{});var I8e=s(j2);dpe=n(I8e,"STRONG",{});var mmt=s(dpe);cer=r(mmt,"led"),mmt.forEach(t),fer=r(I8e," \u2014 "),EO=n(I8e,"A",{href:!0});var gmt=s(EO);mer=r(gmt,"TFLEDModel"),gmt.forEach(t),ger=r(I8e," (LED model)"),I8e.forEach(t),her=i(k),D2=n(k,"LI",{});var q8e=s(D2);cpe=n(q8e,"STRONG",{});var hmt=s(cpe);per=r(hmt,"longformer"),hmt.forEach(t),_er=r(q8e," \u2014 "),CO=n(q8e,"A",{href:!0});var pmt=s(CO);uer=r(pmt,"TFLongformerModel"),pmt.forEach(t),ber=r(q8e," (Longformer model)"),q8e.forEach(t),Fer=i(k),G2=n(k,"LI",{});var N8e=s(G2);fpe=n(N8e,"STRONG",{});var _mt=s(fpe);ver=r(_mt,"lxmert"),_mt.forEach(t),Ter=r(N8e," \u2014 "),wO=n(N8e,"A",{href:!0});var umt=s(wO);Mer=r(umt,"TFLxmertModel"),umt.forEach(t),Eer=r(N8e," (LXMERT model)"),N8e.forEach(t),Cer=i(k),O2=n(k,"LI",{});var j8e=s(O2);mpe=n(j8e,"STRONG",{});var bmt=s(mpe);wer=r(bmt,"marian"),bmt.forEach(t),Aer=r(j8e," \u2014 "),AO=n(j8e,"A",{href:!0});var Fmt=s(AO);yer=r(Fmt,"TFMarianModel"),Fmt.forEach(t),Ler=r(j8e," (Marian model)"),j8e.forEach(t),xer=i(k),V2=n(k,"LI",{});var D8e=s(V2);gpe=n(D8e,"STRONG",{});var vmt=s(gpe);ker=r(vmt,"mbart"),vmt.forEach(t),Ser=r(D8e," \u2014 "),yO=n(D8e,"A",{href:!0});var Tmt=s(yO);Rer=r(Tmt,"TFMBartModel"),Tmt.forEach(t),Ber=r(D8e," (mBART model)"),D8e.forEach(t),Per=i(k),X2=n(k,"LI",{});var G8e=s(X2);hpe=n(G8e,"STRONG",{});var Mmt=s(hpe);$er=r(Mmt,"mobilebert"),Mmt.forEach(t),Ier=r(G8e," \u2014 "),LO=n(G8e,"A",{href:!0});var Emt=s(LO);qer=r(Emt,"TFMobileBertModel"),Emt.forEach(t),Ner=r(G8e," (MobileBERT model)"),G8e.forEach(t),jer=i(k),z2=n(k,"LI",{});var O8e=s(z2);ppe=n(O8e,"STRONG",{});var Cmt=s(ppe);Der=r(Cmt,"mpnet"),Cmt.forEach(t),Ger=r(O8e," \u2014 "),xO=n(O8e,"A",{href:!0});var wmt=s(xO);Oer=r(wmt,"TFMPNetModel"),wmt.forEach(t),Ver=r(O8e," (MPNet model)"),O8e.forEach(t),Xer=i(k),Q2=n(k,"LI",{});var V8e=s(Q2);_pe=n(V8e,"STRONG",{});var Amt=s(_pe);zer=r(Amt,"mt5"),Amt.forEach(t),Qer=r(V8e," \u2014 "),kO=n(V8e,"A",{href:!0});var ymt=s(kO);Wer=r(ymt,"TFMT5Model"),ymt.forEach(t),Her=r(V8e," (mT5 model)"),V8e.forEach(t),Uer=i(k),W2=n(k,"LI",{});var X8e=s(W2);upe=n(X8e,"STRONG",{});var Lmt=s(upe);Jer=r(Lmt,"openai-gpt"),Lmt.forEach(t),Yer=r(X8e," \u2014 "),SO=n(X8e,"A",{href:!0});var xmt=s(SO);Ker=r(xmt,"TFOpenAIGPTModel"),xmt.forEach(t),Zer=r(X8e," (OpenAI GPT model)"),X8e.forEach(t),eor=i(k),H2=n(k,"LI",{});var z8e=s(H2);bpe=n(z8e,"STRONG",{});var kmt=s(bpe);oor=r(kmt,"pegasus"),kmt.forEach(t),ror=r(z8e," \u2014 "),RO=n(z8e,"A",{href:!0});var Smt=s(RO);tor=r(Smt,"TFPegasusModel"),Smt.forEach(t),aor=r(z8e," (Pegasus model)"),z8e.forEach(t),nor=i(k),U2=n(k,"LI",{});var Q8e=s(U2);Fpe=n(Q8e,"STRONG",{});var Rmt=s(Fpe);sor=r(Rmt,"rembert"),Rmt.forEach(t),lor=r(Q8e," \u2014 "),BO=n(Q8e,"A",{href:!0});var Bmt=s(BO);ior=r(Bmt,"TFRemBertModel"),Bmt.forEach(t),dor=r(Q8e," (RemBERT model)"),Q8e.forEach(t),cor=i(k),J2=n(k,"LI",{});var W8e=s(J2);vpe=n(W8e,"STRONG",{});var Pmt=s(vpe);mor=r(Pmt,"roberta"),Pmt.forEach(t),gor=r(W8e," \u2014 "),PO=n(W8e,"A",{href:!0});var $mt=s(PO);hor=r($mt,"TFRobertaModel"),$mt.forEach(t),por=r(W8e," (RoBERTa model)"),W8e.forEach(t),_or=i(k),Y2=n(k,"LI",{});var H8e=s(Y2);Tpe=n(H8e,"STRONG",{});var Imt=s(Tpe);uor=r(Imt,"roformer"),Imt.forEach(t),bor=r(H8e," \u2014 "),$O=n(H8e,"A",{href:!0});var qmt=s($O);For=r(qmt,"TFRoFormerModel"),qmt.forEach(t),vor=r(H8e," (RoFormer model)"),H8e.forEach(t),Tor=i(k),K2=n(k,"LI",{});var U8e=s(K2);Mpe=n(U8e,"STRONG",{});var Nmt=s(Mpe);Mor=r(Nmt,"speech_to_text"),Nmt.forEach(t),Eor=r(U8e," \u2014 "),IO=n(U8e,"A",{href:!0});var jmt=s(IO);Cor=r(jmt,"TFSpeech2TextModel"),jmt.forEach(t),wor=r(U8e," (Speech2Text model)"),U8e.forEach(t),Aor=i(k),Z2=n(k,"LI",{});var J8e=s(Z2);Epe=n(J8e,"STRONG",{});var Dmt=s(Epe);yor=r(Dmt,"t5"),Dmt.forEach(t),Lor=r(J8e," \u2014 "),qO=n(J8e,"A",{href:!0});var Gmt=s(qO);xor=r(Gmt,"TFT5Model"),Gmt.forEach(t),kor=r(J8e," (T5 model)"),J8e.forEach(t),Sor=i(k),eF=n(k,"LI",{});var Y8e=s(eF);Cpe=n(Y8e,"STRONG",{});var Omt=s(Cpe);Ror=r(Omt,"tapas"),Omt.forEach(t),Bor=r(Y8e," \u2014 "),NO=n(Y8e,"A",{href:!0});var Vmt=s(NO);Por=r(Vmt,"TFTapasModel"),Vmt.forEach(t),$or=r(Y8e," (TAPAS model)"),Y8e.forEach(t),Ior=i(k),oF=n(k,"LI",{});var K8e=s(oF);wpe=n(K8e,"STRONG",{});var Xmt=s(wpe);qor=r(Xmt,"transfo-xl"),Xmt.forEach(t),Nor=r(K8e," \u2014 "),jO=n(K8e,"A",{href:!0});var zmt=s(jO);jor=r(zmt,"TFTransfoXLModel"),zmt.forEach(t),Dor=r(K8e," (Transformer-XL model)"),K8e.forEach(t),Gor=i(k),rF=n(k,"LI",{});var Z8e=s(rF);Ape=n(Z8e,"STRONG",{});var Qmt=s(Ape);Oor=r(Qmt,"vit"),Qmt.forEach(t),Vor=r(Z8e," \u2014 "),DO=n(Z8e,"A",{href:!0});var Wmt=s(DO);Xor=r(Wmt,"TFViTModel"),Wmt.forEach(t),zor=r(Z8e," (ViT model)"),Z8e.forEach(t),Qor=i(k),tF=n(k,"LI",{});var e7e=s(tF);ype=n(e7e,"STRONG",{});var Hmt=s(ype);Wor=r(Hmt,"vit_mae"),Hmt.forEach(t),Hor=r(e7e," \u2014 "),GO=n(e7e,"A",{href:!0});var Umt=s(GO);Uor=r(Umt,"TFViTMAEModel"),Umt.forEach(t),Jor=r(e7e," (ViTMAE model)"),e7e.forEach(t),Yor=i(k),aF=n(k,"LI",{});var o7e=s(aF);Lpe=n(o7e,"STRONG",{});var Jmt=s(Lpe);Kor=r(Jmt,"wav2vec2"),Jmt.forEach(t),Zor=r(o7e," \u2014 "),OO=n(o7e,"A",{href:!0});var Ymt=s(OO);err=r(Ymt,"TFWav2Vec2Model"),Ymt.forEach(t),orr=r(o7e," (Wav2Vec2 model)"),o7e.forEach(t),rrr=i(k),nF=n(k,"LI",{});var r7e=s(nF);xpe=n(r7e,"STRONG",{});var Kmt=s(xpe);trr=r(Kmt,"xglm"),Kmt.forEach(t),arr=r(r7e," \u2014 "),VO=n(r7e,"A",{href:!0});var Zmt=s(VO);nrr=r(Zmt,"TFXGLMModel"),Zmt.forEach(t),srr=r(r7e," (XGLM model)"),r7e.forEach(t),lrr=i(k),sF=n(k,"LI",{});var t7e=s(sF);kpe=n(t7e,"STRONG",{});var egt=s(kpe);irr=r(egt,"xlm"),egt.forEach(t),drr=r(t7e," \u2014 "),XO=n(t7e,"A",{href:!0});var ogt=s(XO);crr=r(ogt,"TFXLMModel"),ogt.forEach(t),frr=r(t7e," (XLM model)"),t7e.forEach(t),mrr=i(k),lF=n(k,"LI",{});var a7e=s(lF);Spe=n(a7e,"STRONG",{});var rgt=s(Spe);grr=r(rgt,"xlm-roberta"),rgt.forEach(t),hrr=r(a7e," \u2014 "),zO=n(a7e,"A",{href:!0});var tgt=s(zO);prr=r(tgt,"TFXLMRobertaModel"),tgt.forEach(t),_rr=r(a7e," (XLM-RoBERTa model)"),a7e.forEach(t),urr=i(k),iF=n(k,"LI",{});var n7e=s(iF);Rpe=n(n7e,"STRONG",{});var agt=s(Rpe);brr=r(agt,"xlnet"),agt.forEach(t),Frr=r(n7e," \u2014 "),QO=n(n7e,"A",{href:!0});var ngt=s(QO);vrr=r(ngt,"TFXLNetModel"),ngt.forEach(t),Trr=r(n7e," (XLNet model)"),n7e.forEach(t),k.forEach(t),Mrr=i(pa),Bpe=n(pa,"P",{});var sgt=s(Bpe);Err=r(sgt,"Examples:"),sgt.forEach(t),Crr=i(pa),m(ty.$$.fragment,pa),pa.forEach(t),jl.forEach(t),KRe=i(c),_c=n(c,"H2",{class:!0});var i$e=s(_c);dF=n(i$e,"A",{id:!0,class:!0,href:!0});var lgt=s(dF);Ppe=n(lgt,"SPAN",{});var igt=s(Ppe);m(ay.$$.fragment,igt),igt.forEach(t),lgt.forEach(t),wrr=i(i$e),$pe=n(i$e,"SPAN",{});var dgt=s($pe);Arr=r(dgt,"TFAutoModelForPreTraining"),dgt.forEach(t),i$e.forEach(t),ZRe=i(c),vr=n(c,"DIV",{class:!0});var Gl=s(vr);m(ny.$$.fragment,Gl),yrr=i(Gl),uc=n(Gl,"P",{});var UU=s(uc);Lrr=r(UU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WO=n(UU,"A",{href:!0});var cgt=s(WO);xrr=r(cgt,"from_pretrained()"),cgt.forEach(t),krr=r(UU," class method or the "),HO=n(UU,"A",{href:!0});var fgt=s(HO);Srr=r(fgt,"from_config()"),fgt.forEach(t),Rrr=r(UU,` class
method.`),UU.forEach(t),Brr=i(Gl),sy=n(Gl,"P",{});var d$e=s(sy);Prr=r(d$e,"This class cannot be instantiated directly using "),Ipe=n(d$e,"CODE",{});var mgt=s(Ipe);$rr=r(mgt,"__init__()"),mgt.forEach(t),Irr=r(d$e," (throws an error)."),d$e.forEach(t),qrr=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(ly.$$.fragment,Ol),Nrr=i(Ol),qpe=n(Ol,"P",{});var ggt=s(qpe);jrr=r(ggt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ggt.forEach(t),Drr=i(Ol),bc=n(Ol,"P",{});var JU=s(bc);Grr=r(JU,`Note:
Loading a model from its configuration file does `),Npe=n(JU,"STRONG",{});var hgt=s(Npe);Orr=r(hgt,"not"),hgt.forEach(t),Vrr=r(JU,` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=n(JU,"A",{href:!0});var pgt=s(UO);Xrr=r(pgt,"from_pretrained()"),pgt.forEach(t),zrr=r(JU," to load the model weights."),JU.forEach(t),Qrr=i(Ol),jpe=n(Ol,"P",{});var _gt=s(jpe);Wrr=r(_gt,"Examples:"),_gt.forEach(t),Hrr=i(Ol),m(iy.$$.fragment,Ol),Ol.forEach(t),Urr=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(dy.$$.fragment,_a),Jrr=i(_a),Dpe=n(_a,"P",{});var ugt=s(Dpe);Yrr=r(ugt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ugt.forEach(t),Krr=i(_a),un=n(_a,"P",{});var WE=s(un);Zrr=r(WE,"The model class to instantiate is selected based on the "),Gpe=n(WE,"CODE",{});var bgt=s(Gpe);etr=r(bgt,"model_type"),bgt.forEach(t),otr=r(WE,` property of the config object (either
passed as an argument or loaded from `),Ope=n(WE,"CODE",{});var Fgt=s(Ope);rtr=r(Fgt,"pretrained_model_name_or_path"),Fgt.forEach(t),ttr=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=n(WE,"CODE",{});var vgt=s(Vpe);atr=r(vgt,"pretrained_model_name_or_path"),vgt.forEach(t),ntr=r(WE,":"),WE.forEach(t),str=i(_a),H=n(_a,"UL",{});var U=s(H);cF=n(U,"LI",{});var s7e=s(cF);Xpe=n(s7e,"STRONG",{});var Tgt=s(Xpe);ltr=r(Tgt,"albert"),Tgt.forEach(t),itr=r(s7e," \u2014 "),JO=n(s7e,"A",{href:!0});var Mgt=s(JO);dtr=r(Mgt,"TFAlbertForPreTraining"),Mgt.forEach(t),ctr=r(s7e," (ALBERT model)"),s7e.forEach(t),ftr=i(U),fF=n(U,"LI",{});var l7e=s(fF);zpe=n(l7e,"STRONG",{});var Egt=s(zpe);mtr=r(Egt,"bart"),Egt.forEach(t),gtr=r(l7e," \u2014 "),YO=n(l7e,"A",{href:!0});var Cgt=s(YO);htr=r(Cgt,"TFBartForConditionalGeneration"),Cgt.forEach(t),ptr=r(l7e," (BART model)"),l7e.forEach(t),_tr=i(U),mF=n(U,"LI",{});var i7e=s(mF);Qpe=n(i7e,"STRONG",{});var wgt=s(Qpe);utr=r(wgt,"bert"),wgt.forEach(t),btr=r(i7e," \u2014 "),KO=n(i7e,"A",{href:!0});var Agt=s(KO);Ftr=r(Agt,"TFBertForPreTraining"),Agt.forEach(t),vtr=r(i7e," (BERT model)"),i7e.forEach(t),Ttr=i(U),gF=n(U,"LI",{});var d7e=s(gF);Wpe=n(d7e,"STRONG",{});var ygt=s(Wpe);Mtr=r(ygt,"camembert"),ygt.forEach(t),Etr=r(d7e," \u2014 "),ZO=n(d7e,"A",{href:!0});var Lgt=s(ZO);Ctr=r(Lgt,"TFCamembertForMaskedLM"),Lgt.forEach(t),wtr=r(d7e," (CamemBERT model)"),d7e.forEach(t),Atr=i(U),hF=n(U,"LI",{});var c7e=s(hF);Hpe=n(c7e,"STRONG",{});var xgt=s(Hpe);ytr=r(xgt,"ctrl"),xgt.forEach(t),Ltr=r(c7e," \u2014 "),eV=n(c7e,"A",{href:!0});var kgt=s(eV);xtr=r(kgt,"TFCTRLLMHeadModel"),kgt.forEach(t),ktr=r(c7e," (CTRL model)"),c7e.forEach(t),Str=i(U),pF=n(U,"LI",{});var f7e=s(pF);Upe=n(f7e,"STRONG",{});var Sgt=s(Upe);Rtr=r(Sgt,"distilbert"),Sgt.forEach(t),Btr=r(f7e," \u2014 "),oV=n(f7e,"A",{href:!0});var Rgt=s(oV);Ptr=r(Rgt,"TFDistilBertForMaskedLM"),Rgt.forEach(t),$tr=r(f7e," (DistilBERT model)"),f7e.forEach(t),Itr=i(U),_F=n(U,"LI",{});var m7e=s(_F);Jpe=n(m7e,"STRONG",{});var Bgt=s(Jpe);qtr=r(Bgt,"electra"),Bgt.forEach(t),Ntr=r(m7e," \u2014 "),rV=n(m7e,"A",{href:!0});var Pgt=s(rV);jtr=r(Pgt,"TFElectraForPreTraining"),Pgt.forEach(t),Dtr=r(m7e," (ELECTRA model)"),m7e.forEach(t),Gtr=i(U),uF=n(U,"LI",{});var g7e=s(uF);Ype=n(g7e,"STRONG",{});var $gt=s(Ype);Otr=r($gt,"flaubert"),$gt.forEach(t),Vtr=r(g7e," \u2014 "),tV=n(g7e,"A",{href:!0});var Igt=s(tV);Xtr=r(Igt,"TFFlaubertWithLMHeadModel"),Igt.forEach(t),ztr=r(g7e," (FlauBERT model)"),g7e.forEach(t),Qtr=i(U),bF=n(U,"LI",{});var h7e=s(bF);Kpe=n(h7e,"STRONG",{});var qgt=s(Kpe);Wtr=r(qgt,"funnel"),qgt.forEach(t),Htr=r(h7e," \u2014 "),aV=n(h7e,"A",{href:!0});var Ngt=s(aV);Utr=r(Ngt,"TFFunnelForPreTraining"),Ngt.forEach(t),Jtr=r(h7e," (Funnel Transformer model)"),h7e.forEach(t),Ytr=i(U),FF=n(U,"LI",{});var p7e=s(FF);Zpe=n(p7e,"STRONG",{});var jgt=s(Zpe);Ktr=r(jgt,"gpt2"),jgt.forEach(t),Ztr=r(p7e," \u2014 "),nV=n(p7e,"A",{href:!0});var Dgt=s(nV);ear=r(Dgt,"TFGPT2LMHeadModel"),Dgt.forEach(t),oar=r(p7e," (OpenAI GPT-2 model)"),p7e.forEach(t),rar=i(U),vF=n(U,"LI",{});var _7e=s(vF);e_e=n(_7e,"STRONG",{});var Ggt=s(e_e);tar=r(Ggt,"layoutlm"),Ggt.forEach(t),aar=r(_7e," \u2014 "),sV=n(_7e,"A",{href:!0});var Ogt=s(sV);nar=r(Ogt,"TFLayoutLMForMaskedLM"),Ogt.forEach(t),sar=r(_7e," (LayoutLM model)"),_7e.forEach(t),lar=i(U),TF=n(U,"LI",{});var u7e=s(TF);o_e=n(u7e,"STRONG",{});var Vgt=s(o_e);iar=r(Vgt,"lxmert"),Vgt.forEach(t),dar=r(u7e," \u2014 "),lV=n(u7e,"A",{href:!0});var Xgt=s(lV);car=r(Xgt,"TFLxmertForPreTraining"),Xgt.forEach(t),far=r(u7e," (LXMERT model)"),u7e.forEach(t),mar=i(U),MF=n(U,"LI",{});var b7e=s(MF);r_e=n(b7e,"STRONG",{});var zgt=s(r_e);gar=r(zgt,"mobilebert"),zgt.forEach(t),har=r(b7e," \u2014 "),iV=n(b7e,"A",{href:!0});var Qgt=s(iV);par=r(Qgt,"TFMobileBertForPreTraining"),Qgt.forEach(t),_ar=r(b7e," (MobileBERT model)"),b7e.forEach(t),uar=i(U),EF=n(U,"LI",{});var F7e=s(EF);t_e=n(F7e,"STRONG",{});var Wgt=s(t_e);bar=r(Wgt,"mpnet"),Wgt.forEach(t),Far=r(F7e," \u2014 "),dV=n(F7e,"A",{href:!0});var Hgt=s(dV);Tar=r(Hgt,"TFMPNetForMaskedLM"),Hgt.forEach(t),Mar=r(F7e," (MPNet model)"),F7e.forEach(t),Ear=i(U),CF=n(U,"LI",{});var v7e=s(CF);a_e=n(v7e,"STRONG",{});var Ugt=s(a_e);Car=r(Ugt,"openai-gpt"),Ugt.forEach(t),war=r(v7e," \u2014 "),cV=n(v7e,"A",{href:!0});var Jgt=s(cV);Aar=r(Jgt,"TFOpenAIGPTLMHeadModel"),Jgt.forEach(t),yar=r(v7e," (OpenAI GPT model)"),v7e.forEach(t),Lar=i(U),wF=n(U,"LI",{});var T7e=s(wF);n_e=n(T7e,"STRONG",{});var Ygt=s(n_e);xar=r(Ygt,"roberta"),Ygt.forEach(t),kar=r(T7e," \u2014 "),fV=n(T7e,"A",{href:!0});var Kgt=s(fV);Sar=r(Kgt,"TFRobertaForMaskedLM"),Kgt.forEach(t),Rar=r(T7e," (RoBERTa model)"),T7e.forEach(t),Bar=i(U),AF=n(U,"LI",{});var M7e=s(AF);s_e=n(M7e,"STRONG",{});var Zgt=s(s_e);Par=r(Zgt,"t5"),Zgt.forEach(t),$ar=r(M7e," \u2014 "),mV=n(M7e,"A",{href:!0});var eht=s(mV);Iar=r(eht,"TFT5ForConditionalGeneration"),eht.forEach(t),qar=r(M7e," (T5 model)"),M7e.forEach(t),Nar=i(U),yF=n(U,"LI",{});var E7e=s(yF);l_e=n(E7e,"STRONG",{});var oht=s(l_e);jar=r(oht,"tapas"),oht.forEach(t),Dar=r(E7e," \u2014 "),gV=n(E7e,"A",{href:!0});var rht=s(gV);Gar=r(rht,"TFTapasForMaskedLM"),rht.forEach(t),Oar=r(E7e," (TAPAS model)"),E7e.forEach(t),Var=i(U),LF=n(U,"LI",{});var C7e=s(LF);i_e=n(C7e,"STRONG",{});var tht=s(i_e);Xar=r(tht,"transfo-xl"),tht.forEach(t),zar=r(C7e," \u2014 "),hV=n(C7e,"A",{href:!0});var aht=s(hV);Qar=r(aht,"TFTransfoXLLMHeadModel"),aht.forEach(t),War=r(C7e," (Transformer-XL model)"),C7e.forEach(t),Har=i(U),xF=n(U,"LI",{});var w7e=s(xF);d_e=n(w7e,"STRONG",{});var nht=s(d_e);Uar=r(nht,"vit_mae"),nht.forEach(t),Jar=r(w7e," \u2014 "),pV=n(w7e,"A",{href:!0});var sht=s(pV);Yar=r(sht,"TFViTMAEForPreTraining"),sht.forEach(t),Kar=r(w7e," (ViTMAE model)"),w7e.forEach(t),Zar=i(U),kF=n(U,"LI",{});var A7e=s(kF);c_e=n(A7e,"STRONG",{});var lht=s(c_e);enr=r(lht,"xlm"),lht.forEach(t),onr=r(A7e," \u2014 "),_V=n(A7e,"A",{href:!0});var iht=s(_V);rnr=r(iht,"TFXLMWithLMHeadModel"),iht.forEach(t),tnr=r(A7e," (XLM model)"),A7e.forEach(t),anr=i(U),SF=n(U,"LI",{});var y7e=s(SF);f_e=n(y7e,"STRONG",{});var dht=s(f_e);nnr=r(dht,"xlm-roberta"),dht.forEach(t),snr=r(y7e," \u2014 "),uV=n(y7e,"A",{href:!0});var cht=s(uV);lnr=r(cht,"TFXLMRobertaForMaskedLM"),cht.forEach(t),inr=r(y7e," (XLM-RoBERTa model)"),y7e.forEach(t),dnr=i(U),RF=n(U,"LI",{});var L7e=s(RF);m_e=n(L7e,"STRONG",{});var fht=s(m_e);cnr=r(fht,"xlnet"),fht.forEach(t),fnr=r(L7e," \u2014 "),bV=n(L7e,"A",{href:!0});var mht=s(bV);mnr=r(mht,"TFXLNetLMHeadModel"),mht.forEach(t),gnr=r(L7e," (XLNet model)"),L7e.forEach(t),U.forEach(t),hnr=i(_a),g_e=n(_a,"P",{});var ght=s(g_e);pnr=r(ght,"Examples:"),ght.forEach(t),_nr=i(_a),m(cy.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),eBe=i(c),Fc=n(c,"H2",{class:!0});var c$e=s(Fc);BF=n(c$e,"A",{id:!0,class:!0,href:!0});var hht=s(BF);h_e=n(hht,"SPAN",{});var pht=s(h_e);m(fy.$$.fragment,pht),pht.forEach(t),hht.forEach(t),unr=i(c$e),p_e=n(c$e,"SPAN",{});var _ht=s(p_e);bnr=r(_ht,"TFAutoModelForCausalLM"),_ht.forEach(t),c$e.forEach(t),oBe=i(c),Tr=n(c,"DIV",{class:!0});var Vl=s(Tr);m(my.$$.fragment,Vl),Fnr=i(Vl),vc=n(Vl,"P",{});var YU=s(vc);vnr=r(YU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FV=n(YU,"A",{href:!0});var uht=s(FV);Tnr=r(uht,"from_pretrained()"),uht.forEach(t),Mnr=r(YU," class method or the "),vV=n(YU,"A",{href:!0});var bht=s(vV);Enr=r(bht,"from_config()"),bht.forEach(t),Cnr=r(YU,` class
method.`),YU.forEach(t),wnr=i(Vl),gy=n(Vl,"P",{});var f$e=s(gy);Anr=r(f$e,"This class cannot be instantiated directly using "),__e=n(f$e,"CODE",{});var Fht=s(__e);ynr=r(Fht,"__init__()"),Fht.forEach(t),Lnr=r(f$e," (throws an error)."),f$e.forEach(t),xnr=i(Vl),pt=n(Vl,"DIV",{class:!0});var Xl=s(pt);m(hy.$$.fragment,Xl),knr=i(Xl),u_e=n(Xl,"P",{});var vht=s(u_e);Snr=r(vht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vht.forEach(t),Rnr=i(Xl),Tc=n(Xl,"P",{});var KU=s(Tc);Bnr=r(KU,`Note:
Loading a model from its configuration file does `),b_e=n(KU,"STRONG",{});var Tht=s(b_e);Pnr=r(Tht,"not"),Tht.forEach(t),$nr=r(KU,` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=n(KU,"A",{href:!0});var Mht=s(TV);Inr=r(Mht,"from_pretrained()"),Mht.forEach(t),qnr=r(KU," to load the model weights."),KU.forEach(t),Nnr=i(Xl),F_e=n(Xl,"P",{});var Eht=s(F_e);jnr=r(Eht,"Examples:"),Eht.forEach(t),Dnr=i(Xl),m(py.$$.fragment,Xl),Xl.forEach(t),Gnr=i(Vl),_o=n(Vl,"DIV",{class:!0});var ua=s(_o);m(_y.$$.fragment,ua),Onr=i(ua),v_e=n(ua,"P",{});var Cht=s(v_e);Vnr=r(Cht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Cht.forEach(t),Xnr=i(ua),bn=n(ua,"P",{});var HE=s(bn);znr=r(HE,"The model class to instantiate is selected based on the "),T_e=n(HE,"CODE",{});var wht=s(T_e);Qnr=r(wht,"model_type"),wht.forEach(t),Wnr=r(HE,` property of the config object (either
passed as an argument or loaded from `),M_e=n(HE,"CODE",{});var Aht=s(M_e);Hnr=r(Aht,"pretrained_model_name_or_path"),Aht.forEach(t),Unr=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E_e=n(HE,"CODE",{});var yht=s(E_e);Jnr=r(yht,"pretrained_model_name_or_path"),yht.forEach(t),Ynr=r(HE,":"),HE.forEach(t),Knr=i(ua),de=n(ua,"UL",{});var me=s(de);PF=n(me,"LI",{});var x7e=s(PF);C_e=n(x7e,"STRONG",{});var Lht=s(C_e);Znr=r(Lht,"bert"),Lht.forEach(t),esr=r(x7e," \u2014 "),MV=n(x7e,"A",{href:!0});var xht=s(MV);osr=r(xht,"TFBertLMHeadModel"),xht.forEach(t),rsr=r(x7e," (BERT model)"),x7e.forEach(t),tsr=i(me),$F=n(me,"LI",{});var k7e=s($F);w_e=n(k7e,"STRONG",{});var kht=s(w_e);asr=r(kht,"camembert"),kht.forEach(t),nsr=r(k7e," \u2014 "),EV=n(k7e,"A",{href:!0});var Sht=s(EV);ssr=r(Sht,"TFCamembertForCausalLM"),Sht.forEach(t),lsr=r(k7e," (CamemBERT model)"),k7e.forEach(t),isr=i(me),IF=n(me,"LI",{});var S7e=s(IF);A_e=n(S7e,"STRONG",{});var Rht=s(A_e);dsr=r(Rht,"ctrl"),Rht.forEach(t),csr=r(S7e," \u2014 "),CV=n(S7e,"A",{href:!0});var Bht=s(CV);fsr=r(Bht,"TFCTRLLMHeadModel"),Bht.forEach(t),msr=r(S7e," (CTRL model)"),S7e.forEach(t),gsr=i(me),qF=n(me,"LI",{});var R7e=s(qF);y_e=n(R7e,"STRONG",{});var Pht=s(y_e);hsr=r(Pht,"gpt2"),Pht.forEach(t),psr=r(R7e," \u2014 "),wV=n(R7e,"A",{href:!0});var $ht=s(wV);_sr=r($ht,"TFGPT2LMHeadModel"),$ht.forEach(t),usr=r(R7e," (OpenAI GPT-2 model)"),R7e.forEach(t),bsr=i(me),NF=n(me,"LI",{});var B7e=s(NF);L_e=n(B7e,"STRONG",{});var Iht=s(L_e);Fsr=r(Iht,"gptj"),Iht.forEach(t),vsr=r(B7e," \u2014 "),AV=n(B7e,"A",{href:!0});var qht=s(AV);Tsr=r(qht,"TFGPTJForCausalLM"),qht.forEach(t),Msr=r(B7e," (GPT-J model)"),B7e.forEach(t),Esr=i(me),jF=n(me,"LI",{});var P7e=s(jF);x_e=n(P7e,"STRONG",{});var Nht=s(x_e);Csr=r(Nht,"openai-gpt"),Nht.forEach(t),wsr=r(P7e," \u2014 "),yV=n(P7e,"A",{href:!0});var jht=s(yV);Asr=r(jht,"TFOpenAIGPTLMHeadModel"),jht.forEach(t),ysr=r(P7e," (OpenAI GPT model)"),P7e.forEach(t),Lsr=i(me),DF=n(me,"LI",{});var $7e=s(DF);k_e=n($7e,"STRONG",{});var Dht=s(k_e);xsr=r(Dht,"rembert"),Dht.forEach(t),ksr=r($7e," \u2014 "),LV=n($7e,"A",{href:!0});var Ght=s(LV);Ssr=r(Ght,"TFRemBertForCausalLM"),Ght.forEach(t),Rsr=r($7e," (RemBERT model)"),$7e.forEach(t),Bsr=i(me),GF=n(me,"LI",{});var I7e=s(GF);S_e=n(I7e,"STRONG",{});var Oht=s(S_e);Psr=r(Oht,"roberta"),Oht.forEach(t),$sr=r(I7e," \u2014 "),xV=n(I7e,"A",{href:!0});var Vht=s(xV);Isr=r(Vht,"TFRobertaForCausalLM"),Vht.forEach(t),qsr=r(I7e," (RoBERTa model)"),I7e.forEach(t),Nsr=i(me),OF=n(me,"LI",{});var q7e=s(OF);R_e=n(q7e,"STRONG",{});var Xht=s(R_e);jsr=r(Xht,"roformer"),Xht.forEach(t),Dsr=r(q7e," \u2014 "),kV=n(q7e,"A",{href:!0});var zht=s(kV);Gsr=r(zht,"TFRoFormerForCausalLM"),zht.forEach(t),Osr=r(q7e," (RoFormer model)"),q7e.forEach(t),Vsr=i(me),VF=n(me,"LI",{});var N7e=s(VF);B_e=n(N7e,"STRONG",{});var Qht=s(B_e);Xsr=r(Qht,"transfo-xl"),Qht.forEach(t),zsr=r(N7e," \u2014 "),SV=n(N7e,"A",{href:!0});var Wht=s(SV);Qsr=r(Wht,"TFTransfoXLLMHeadModel"),Wht.forEach(t),Wsr=r(N7e," (Transformer-XL model)"),N7e.forEach(t),Hsr=i(me),XF=n(me,"LI",{});var j7e=s(XF);P_e=n(j7e,"STRONG",{});var Hht=s(P_e);Usr=r(Hht,"xglm"),Hht.forEach(t),Jsr=r(j7e," \u2014 "),RV=n(j7e,"A",{href:!0});var Uht=s(RV);Ysr=r(Uht,"XGLMForCausalLM"),Uht.forEach(t),Ksr=r(j7e," (XGLM model)"),j7e.forEach(t),Zsr=i(me),zF=n(me,"LI",{});var D7e=s(zF);$_e=n(D7e,"STRONG",{});var Jht=s($_e);elr=r(Jht,"xlm"),Jht.forEach(t),olr=r(D7e," \u2014 "),BV=n(D7e,"A",{href:!0});var Yht=s(BV);rlr=r(Yht,"TFXLMWithLMHeadModel"),Yht.forEach(t),tlr=r(D7e," (XLM model)"),D7e.forEach(t),alr=i(me),QF=n(me,"LI",{});var G7e=s(QF);I_e=n(G7e,"STRONG",{});var Kht=s(I_e);nlr=r(Kht,"xlnet"),Kht.forEach(t),slr=r(G7e," \u2014 "),PV=n(G7e,"A",{href:!0});var Zht=s(PV);llr=r(Zht,"TFXLNetLMHeadModel"),Zht.forEach(t),ilr=r(G7e," (XLNet model)"),G7e.forEach(t),me.forEach(t),dlr=i(ua),q_e=n(ua,"P",{});var ept=s(q_e);clr=r(ept,"Examples:"),ept.forEach(t),flr=i(ua),m(uy.$$.fragment,ua),ua.forEach(t),Vl.forEach(t),rBe=i(c),Mc=n(c,"H2",{class:!0});var m$e=s(Mc);WF=n(m$e,"A",{id:!0,class:!0,href:!0});var opt=s(WF);N_e=n(opt,"SPAN",{});var rpt=s(N_e);m(by.$$.fragment,rpt),rpt.forEach(t),opt.forEach(t),mlr=i(m$e),j_e=n(m$e,"SPAN",{});var tpt=s(j_e);glr=r(tpt,"TFAutoModelForImageClassification"),tpt.forEach(t),m$e.forEach(t),tBe=i(c),Mr=n(c,"DIV",{class:!0});var zl=s(Mr);m(Fy.$$.fragment,zl),hlr=i(zl),Ec=n(zl,"P",{});var ZU=s(Ec);plr=r(ZU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$V=n(ZU,"A",{href:!0});var apt=s($V);_lr=r(apt,"from_pretrained()"),apt.forEach(t),ulr=r(ZU," class method or the "),IV=n(ZU,"A",{href:!0});var npt=s(IV);blr=r(npt,"from_config()"),npt.forEach(t),Flr=r(ZU,` class
method.`),ZU.forEach(t),vlr=i(zl),vy=n(zl,"P",{});var g$e=s(vy);Tlr=r(g$e,"This class cannot be instantiated directly using "),D_e=n(g$e,"CODE",{});var spt=s(D_e);Mlr=r(spt,"__init__()"),spt.forEach(t),Elr=r(g$e," (throws an error)."),g$e.forEach(t),Clr=i(zl),_t=n(zl,"DIV",{class:!0});var Ql=s(_t);m(Ty.$$.fragment,Ql),wlr=i(Ql),G_e=n(Ql,"P",{});var lpt=s(G_e);Alr=r(lpt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lpt.forEach(t),ylr=i(Ql),Cc=n(Ql,"P",{});var eJ=s(Cc);Llr=r(eJ,`Note:
Loading a model from its configuration file does `),O_e=n(eJ,"STRONG",{});var ipt=s(O_e);xlr=r(ipt,"not"),ipt.forEach(t),klr=r(eJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=n(eJ,"A",{href:!0});var dpt=s(qV);Slr=r(dpt,"from_pretrained()"),dpt.forEach(t),Rlr=r(eJ," to load the model weights."),eJ.forEach(t),Blr=i(Ql),V_e=n(Ql,"P",{});var cpt=s(V_e);Plr=r(cpt,"Examples:"),cpt.forEach(t),$lr=i(Ql),m(My.$$.fragment,Ql),Ql.forEach(t),Ilr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(Ey.$$.fragment,ba),qlr=i(ba),X_e=n(ba,"P",{});var fpt=s(X_e);Nlr=r(fpt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fpt.forEach(t),jlr=i(ba),Fn=n(ba,"P",{});var UE=s(Fn);Dlr=r(UE,"The model class to instantiate is selected based on the "),z_e=n(UE,"CODE",{});var mpt=s(z_e);Glr=r(mpt,"model_type"),mpt.forEach(t),Olr=r(UE,` property of the config object (either
passed as an argument or loaded from `),Q_e=n(UE,"CODE",{});var gpt=s(Q_e);Vlr=r(gpt,"pretrained_model_name_or_path"),gpt.forEach(t),Xlr=r(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=n(UE,"CODE",{});var hpt=s(W_e);zlr=r(hpt,"pretrained_model_name_or_path"),hpt.forEach(t),Qlr=r(UE,":"),UE.forEach(t),Wlr=i(ba),Cy=n(ba,"UL",{});var h$e=s(Cy);HF=n(h$e,"LI",{});var O7e=s(HF);H_e=n(O7e,"STRONG",{});var ppt=s(H_e);Hlr=r(ppt,"convnext"),ppt.forEach(t),Ulr=r(O7e," \u2014 "),NV=n(O7e,"A",{href:!0});var _pt=s(NV);Jlr=r(_pt,"TFConvNextForImageClassification"),_pt.forEach(t),Ylr=r(O7e," (ConvNext model)"),O7e.forEach(t),Klr=i(h$e),UF=n(h$e,"LI",{});var V7e=s(UF);U_e=n(V7e,"STRONG",{});var upt=s(U_e);Zlr=r(upt,"vit"),upt.forEach(t),eir=r(V7e," \u2014 "),jV=n(V7e,"A",{href:!0});var bpt=s(jV);oir=r(bpt,"TFViTForImageClassification"),bpt.forEach(t),rir=r(V7e," (ViT model)"),V7e.forEach(t),h$e.forEach(t),tir=i(ba),J_e=n(ba,"P",{});var Fpt=s(J_e);air=r(Fpt,"Examples:"),Fpt.forEach(t),nir=i(ba),m(wy.$$.fragment,ba),ba.forEach(t),zl.forEach(t),aBe=i(c),wc=n(c,"H2",{class:!0});var p$e=s(wc);JF=n(p$e,"A",{id:!0,class:!0,href:!0});var vpt=s(JF);Y_e=n(vpt,"SPAN",{});var Tpt=s(Y_e);m(Ay.$$.fragment,Tpt),Tpt.forEach(t),vpt.forEach(t),sir=i(p$e),K_e=n(p$e,"SPAN",{});var Mpt=s(K_e);lir=r(Mpt,"TFAutoModelForMaskedLM"),Mpt.forEach(t),p$e.forEach(t),nBe=i(c),Er=n(c,"DIV",{class:!0});var Wl=s(Er);m(yy.$$.fragment,Wl),iir=i(Wl),Ac=n(Wl,"P",{});var oJ=s(Ac);dir=r(oJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),DV=n(oJ,"A",{href:!0});var Ept=s(DV);cir=r(Ept,"from_pretrained()"),Ept.forEach(t),fir=r(oJ," class method or the "),GV=n(oJ,"A",{href:!0});var Cpt=s(GV);mir=r(Cpt,"from_config()"),Cpt.forEach(t),gir=r(oJ,` class
method.`),oJ.forEach(t),hir=i(Wl),Ly=n(Wl,"P",{});var _$e=s(Ly);pir=r(_$e,"This class cannot be instantiated directly using "),Z_e=n(_$e,"CODE",{});var wpt=s(Z_e);_ir=r(wpt,"__init__()"),wpt.forEach(t),uir=r(_$e," (throws an error)."),_$e.forEach(t),bir=i(Wl),ut=n(Wl,"DIV",{class:!0});var Hl=s(ut);m(xy.$$.fragment,Hl),Fir=i(Hl),eue=n(Hl,"P",{});var Apt=s(eue);vir=r(Apt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Apt.forEach(t),Tir=i(Hl),yc=n(Hl,"P",{});var rJ=s(yc);Mir=r(rJ,`Note:
Loading a model from its configuration file does `),oue=n(rJ,"STRONG",{});var ypt=s(oue);Eir=r(ypt,"not"),ypt.forEach(t),Cir=r(rJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=n(rJ,"A",{href:!0});var Lpt=s(OV);wir=r(Lpt,"from_pretrained()"),Lpt.forEach(t),Air=r(rJ," to load the model weights."),rJ.forEach(t),yir=i(Hl),rue=n(Hl,"P",{});var xpt=s(rue);Lir=r(xpt,"Examples:"),xpt.forEach(t),xir=i(Hl),m(ky.$$.fragment,Hl),Hl.forEach(t),kir=i(Wl),bo=n(Wl,"DIV",{class:!0});var Fa=s(bo);m(Sy.$$.fragment,Fa),Sir=i(Fa),tue=n(Fa,"P",{});var kpt=s(tue);Rir=r(kpt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kpt.forEach(t),Bir=i(Fa),vn=n(Fa,"P",{});var JE=s(vn);Pir=r(JE,"The model class to instantiate is selected based on the "),aue=n(JE,"CODE",{});var Spt=s(aue);$ir=r(Spt,"model_type"),Spt.forEach(t),Iir=r(JE,` property of the config object (either
passed as an argument or loaded from `),nue=n(JE,"CODE",{});var Rpt=s(nue);qir=r(Rpt,"pretrained_model_name_or_path"),Rpt.forEach(t),Nir=r(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=n(JE,"CODE",{});var Bpt=s(sue);jir=r(Bpt,"pretrained_model_name_or_path"),Bpt.forEach(t),Dir=r(JE,":"),JE.forEach(t),Gir=i(Fa),J=n(Fa,"UL",{});var ee=s(J);YF=n(ee,"LI",{});var X7e=s(YF);lue=n(X7e,"STRONG",{});var Ppt=s(lue);Oir=r(Ppt,"albert"),Ppt.forEach(t),Vir=r(X7e," \u2014 "),VV=n(X7e,"A",{href:!0});var $pt=s(VV);Xir=r($pt,"TFAlbertForMaskedLM"),$pt.forEach(t),zir=r(X7e," (ALBERT model)"),X7e.forEach(t),Qir=i(ee),KF=n(ee,"LI",{});var z7e=s(KF);iue=n(z7e,"STRONG",{});var Ipt=s(iue);Wir=r(Ipt,"bert"),Ipt.forEach(t),Hir=r(z7e," \u2014 "),XV=n(z7e,"A",{href:!0});var qpt=s(XV);Uir=r(qpt,"TFBertForMaskedLM"),qpt.forEach(t),Jir=r(z7e," (BERT model)"),z7e.forEach(t),Yir=i(ee),ZF=n(ee,"LI",{});var Q7e=s(ZF);due=n(Q7e,"STRONG",{});var Npt=s(due);Kir=r(Npt,"camembert"),Npt.forEach(t),Zir=r(Q7e," \u2014 "),zV=n(Q7e,"A",{href:!0});var jpt=s(zV);edr=r(jpt,"TFCamembertForMaskedLM"),jpt.forEach(t),odr=r(Q7e," (CamemBERT model)"),Q7e.forEach(t),rdr=i(ee),ev=n(ee,"LI",{});var W7e=s(ev);cue=n(W7e,"STRONG",{});var Dpt=s(cue);tdr=r(Dpt,"convbert"),Dpt.forEach(t),adr=r(W7e," \u2014 "),QV=n(W7e,"A",{href:!0});var Gpt=s(QV);ndr=r(Gpt,"TFConvBertForMaskedLM"),Gpt.forEach(t),sdr=r(W7e," (ConvBERT model)"),W7e.forEach(t),ldr=i(ee),ov=n(ee,"LI",{});var H7e=s(ov);fue=n(H7e,"STRONG",{});var Opt=s(fue);idr=r(Opt,"deberta"),Opt.forEach(t),ddr=r(H7e," \u2014 "),WV=n(H7e,"A",{href:!0});var Vpt=s(WV);cdr=r(Vpt,"TFDebertaForMaskedLM"),Vpt.forEach(t),fdr=r(H7e," (DeBERTa model)"),H7e.forEach(t),mdr=i(ee),rv=n(ee,"LI",{});var U7e=s(rv);mue=n(U7e,"STRONG",{});var Xpt=s(mue);gdr=r(Xpt,"deberta-v2"),Xpt.forEach(t),hdr=r(U7e," \u2014 "),HV=n(U7e,"A",{href:!0});var zpt=s(HV);pdr=r(zpt,"TFDebertaV2ForMaskedLM"),zpt.forEach(t),_dr=r(U7e," (DeBERTa-v2 model)"),U7e.forEach(t),udr=i(ee),tv=n(ee,"LI",{});var J7e=s(tv);gue=n(J7e,"STRONG",{});var Qpt=s(gue);bdr=r(Qpt,"distilbert"),Qpt.forEach(t),Fdr=r(J7e," \u2014 "),UV=n(J7e,"A",{href:!0});var Wpt=s(UV);vdr=r(Wpt,"TFDistilBertForMaskedLM"),Wpt.forEach(t),Tdr=r(J7e," (DistilBERT model)"),J7e.forEach(t),Mdr=i(ee),av=n(ee,"LI",{});var Y7e=s(av);hue=n(Y7e,"STRONG",{});var Hpt=s(hue);Edr=r(Hpt,"electra"),Hpt.forEach(t),Cdr=r(Y7e," \u2014 "),JV=n(Y7e,"A",{href:!0});var Upt=s(JV);wdr=r(Upt,"TFElectraForMaskedLM"),Upt.forEach(t),Adr=r(Y7e," (ELECTRA model)"),Y7e.forEach(t),ydr=i(ee),nv=n(ee,"LI",{});var K7e=s(nv);pue=n(K7e,"STRONG",{});var Jpt=s(pue);Ldr=r(Jpt,"flaubert"),Jpt.forEach(t),xdr=r(K7e," \u2014 "),YV=n(K7e,"A",{href:!0});var Ypt=s(YV);kdr=r(Ypt,"TFFlaubertWithLMHeadModel"),Ypt.forEach(t),Sdr=r(K7e," (FlauBERT model)"),K7e.forEach(t),Rdr=i(ee),sv=n(ee,"LI",{});var Z7e=s(sv);_ue=n(Z7e,"STRONG",{});var Kpt=s(_ue);Bdr=r(Kpt,"funnel"),Kpt.forEach(t),Pdr=r(Z7e," \u2014 "),KV=n(Z7e,"A",{href:!0});var Zpt=s(KV);$dr=r(Zpt,"TFFunnelForMaskedLM"),Zpt.forEach(t),Idr=r(Z7e," (Funnel Transformer model)"),Z7e.forEach(t),qdr=i(ee),lv=n(ee,"LI",{});var e9e=s(lv);uue=n(e9e,"STRONG",{});var e_t=s(uue);Ndr=r(e_t,"layoutlm"),e_t.forEach(t),jdr=r(e9e," \u2014 "),ZV=n(e9e,"A",{href:!0});var o_t=s(ZV);Ddr=r(o_t,"TFLayoutLMForMaskedLM"),o_t.forEach(t),Gdr=r(e9e," (LayoutLM model)"),e9e.forEach(t),Odr=i(ee),iv=n(ee,"LI",{});var o9e=s(iv);bue=n(o9e,"STRONG",{});var r_t=s(bue);Vdr=r(r_t,"longformer"),r_t.forEach(t),Xdr=r(o9e," \u2014 "),eX=n(o9e,"A",{href:!0});var t_t=s(eX);zdr=r(t_t,"TFLongformerForMaskedLM"),t_t.forEach(t),Qdr=r(o9e," (Longformer model)"),o9e.forEach(t),Wdr=i(ee),dv=n(ee,"LI",{});var r9e=s(dv);Fue=n(r9e,"STRONG",{});var a_t=s(Fue);Hdr=r(a_t,"mobilebert"),a_t.forEach(t),Udr=r(r9e," \u2014 "),oX=n(r9e,"A",{href:!0});var n_t=s(oX);Jdr=r(n_t,"TFMobileBertForMaskedLM"),n_t.forEach(t),Ydr=r(r9e," (MobileBERT model)"),r9e.forEach(t),Kdr=i(ee),cv=n(ee,"LI",{});var t9e=s(cv);vue=n(t9e,"STRONG",{});var s_t=s(vue);Zdr=r(s_t,"mpnet"),s_t.forEach(t),ecr=r(t9e," \u2014 "),rX=n(t9e,"A",{href:!0});var l_t=s(rX);ocr=r(l_t,"TFMPNetForMaskedLM"),l_t.forEach(t),rcr=r(t9e," (MPNet model)"),t9e.forEach(t),tcr=i(ee),fv=n(ee,"LI",{});var a9e=s(fv);Tue=n(a9e,"STRONG",{});var i_t=s(Tue);acr=r(i_t,"rembert"),i_t.forEach(t),ncr=r(a9e," \u2014 "),tX=n(a9e,"A",{href:!0});var d_t=s(tX);scr=r(d_t,"TFRemBertForMaskedLM"),d_t.forEach(t),lcr=r(a9e," (RemBERT model)"),a9e.forEach(t),icr=i(ee),mv=n(ee,"LI",{});var n9e=s(mv);Mue=n(n9e,"STRONG",{});var c_t=s(Mue);dcr=r(c_t,"roberta"),c_t.forEach(t),ccr=r(n9e," \u2014 "),aX=n(n9e,"A",{href:!0});var f_t=s(aX);fcr=r(f_t,"TFRobertaForMaskedLM"),f_t.forEach(t),mcr=r(n9e," (RoBERTa model)"),n9e.forEach(t),gcr=i(ee),gv=n(ee,"LI",{});var s9e=s(gv);Eue=n(s9e,"STRONG",{});var m_t=s(Eue);hcr=r(m_t,"roformer"),m_t.forEach(t),pcr=r(s9e," \u2014 "),nX=n(s9e,"A",{href:!0});var g_t=s(nX);_cr=r(g_t,"TFRoFormerForMaskedLM"),g_t.forEach(t),ucr=r(s9e," (RoFormer model)"),s9e.forEach(t),bcr=i(ee),hv=n(ee,"LI",{});var l9e=s(hv);Cue=n(l9e,"STRONG",{});var h_t=s(Cue);Fcr=r(h_t,"tapas"),h_t.forEach(t),vcr=r(l9e," \u2014 "),sX=n(l9e,"A",{href:!0});var p_t=s(sX);Tcr=r(p_t,"TFTapasForMaskedLM"),p_t.forEach(t),Mcr=r(l9e," (TAPAS model)"),l9e.forEach(t),Ecr=i(ee),pv=n(ee,"LI",{});var i9e=s(pv);wue=n(i9e,"STRONG",{});var __t=s(wue);Ccr=r(__t,"xlm"),__t.forEach(t),wcr=r(i9e," \u2014 "),lX=n(i9e,"A",{href:!0});var u_t=s(lX);Acr=r(u_t,"TFXLMWithLMHeadModel"),u_t.forEach(t),ycr=r(i9e," (XLM model)"),i9e.forEach(t),Lcr=i(ee),_v=n(ee,"LI",{});var d9e=s(_v);Aue=n(d9e,"STRONG",{});var b_t=s(Aue);xcr=r(b_t,"xlm-roberta"),b_t.forEach(t),kcr=r(d9e," \u2014 "),iX=n(d9e,"A",{href:!0});var F_t=s(iX);Scr=r(F_t,"TFXLMRobertaForMaskedLM"),F_t.forEach(t),Rcr=r(d9e," (XLM-RoBERTa model)"),d9e.forEach(t),ee.forEach(t),Bcr=i(Fa),yue=n(Fa,"P",{});var v_t=s(yue);Pcr=r(v_t,"Examples:"),v_t.forEach(t),$cr=i(Fa),m(Ry.$$.fragment,Fa),Fa.forEach(t),Wl.forEach(t),sBe=i(c),Lc=n(c,"H2",{class:!0});var u$e=s(Lc);uv=n(u$e,"A",{id:!0,class:!0,href:!0});var T_t=s(uv);Lue=n(T_t,"SPAN",{});var M_t=s(Lue);m(By.$$.fragment,M_t),M_t.forEach(t),T_t.forEach(t),Icr=i(u$e),xue=n(u$e,"SPAN",{});var E_t=s(xue);qcr=r(E_t,"TFAutoModelForSeq2SeqLM"),E_t.forEach(t),u$e.forEach(t),lBe=i(c),Cr=n(c,"DIV",{class:!0});var Ul=s(Cr);m(Py.$$.fragment,Ul),Ncr=i(Ul),xc=n(Ul,"P",{});var tJ=s(xc);jcr=r(tJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dX=n(tJ,"A",{href:!0});var C_t=s(dX);Dcr=r(C_t,"from_pretrained()"),C_t.forEach(t),Gcr=r(tJ," class method or the "),cX=n(tJ,"A",{href:!0});var w_t=s(cX);Ocr=r(w_t,"from_config()"),w_t.forEach(t),Vcr=r(tJ,` class
method.`),tJ.forEach(t),Xcr=i(Ul),$y=n(Ul,"P",{});var b$e=s($y);zcr=r(b$e,"This class cannot be instantiated directly using "),kue=n(b$e,"CODE",{});var A_t=s(kue);Qcr=r(A_t,"__init__()"),A_t.forEach(t),Wcr=r(b$e," (throws an error)."),b$e.forEach(t),Hcr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(Iy.$$.fragment,Jl),Ucr=i(Jl),Sue=n(Jl,"P",{});var y_t=s(Sue);Jcr=r(y_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),y_t.forEach(t),Ycr=i(Jl),kc=n(Jl,"P",{});var aJ=s(kc);Kcr=r(aJ,`Note:
Loading a model from its configuration file does `),Rue=n(aJ,"STRONG",{});var L_t=s(Rue);Zcr=r(L_t,"not"),L_t.forEach(t),efr=r(aJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=n(aJ,"A",{href:!0});var x_t=s(fX);ofr=r(x_t,"from_pretrained()"),x_t.forEach(t),rfr=r(aJ," to load the model weights."),aJ.forEach(t),tfr=i(Jl),Bue=n(Jl,"P",{});var k_t=s(Bue);afr=r(k_t,"Examples:"),k_t.forEach(t),nfr=i(Jl),m(qy.$$.fragment,Jl),Jl.forEach(t),sfr=i(Ul),Fo=n(Ul,"DIV",{class:!0});var va=s(Fo);m(Ny.$$.fragment,va),lfr=i(va),Pue=n(va,"P",{});var S_t=s(Pue);ifr=r(S_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),S_t.forEach(t),dfr=i(va),Tn=n(va,"P",{});var YE=s(Tn);cfr=r(YE,"The model class to instantiate is selected based on the "),$ue=n(YE,"CODE",{});var R_t=s($ue);ffr=r(R_t,"model_type"),R_t.forEach(t),mfr=r(YE,` property of the config object (either
passed as an argument or loaded from `),Iue=n(YE,"CODE",{});var B_t=s(Iue);gfr=r(B_t,"pretrained_model_name_or_path"),B_t.forEach(t),hfr=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=n(YE,"CODE",{});var P_t=s(que);pfr=r(P_t,"pretrained_model_name_or_path"),P_t.forEach(t),_fr=r(YE,":"),YE.forEach(t),ufr=i(va),ue=n(va,"UL",{});var we=s(ue);bv=n(we,"LI",{});var c9e=s(bv);Nue=n(c9e,"STRONG",{});var $_t=s(Nue);bfr=r($_t,"bart"),$_t.forEach(t),Ffr=r(c9e," \u2014 "),mX=n(c9e,"A",{href:!0});var I_t=s(mX);vfr=r(I_t,"TFBartForConditionalGeneration"),I_t.forEach(t),Tfr=r(c9e," (BART model)"),c9e.forEach(t),Mfr=i(we),Fv=n(we,"LI",{});var f9e=s(Fv);jue=n(f9e,"STRONG",{});var q_t=s(jue);Efr=r(q_t,"blenderbot"),q_t.forEach(t),Cfr=r(f9e," \u2014 "),gX=n(f9e,"A",{href:!0});var N_t=s(gX);wfr=r(N_t,"TFBlenderbotForConditionalGeneration"),N_t.forEach(t),Afr=r(f9e," (Blenderbot model)"),f9e.forEach(t),yfr=i(we),vv=n(we,"LI",{});var m9e=s(vv);Due=n(m9e,"STRONG",{});var j_t=s(Due);Lfr=r(j_t,"blenderbot-small"),j_t.forEach(t),xfr=r(m9e," \u2014 "),hX=n(m9e,"A",{href:!0});var D_t=s(hX);kfr=r(D_t,"TFBlenderbotSmallForConditionalGeneration"),D_t.forEach(t),Sfr=r(m9e," (BlenderbotSmall model)"),m9e.forEach(t),Rfr=i(we),Tv=n(we,"LI",{});var g9e=s(Tv);Gue=n(g9e,"STRONG",{});var G_t=s(Gue);Bfr=r(G_t,"encoder-decoder"),G_t.forEach(t),Pfr=r(g9e," \u2014 "),pX=n(g9e,"A",{href:!0});var O_t=s(pX);$fr=r(O_t,"TFEncoderDecoderModel"),O_t.forEach(t),Ifr=r(g9e," (Encoder decoder model)"),g9e.forEach(t),qfr=i(we),Mv=n(we,"LI",{});var h9e=s(Mv);Oue=n(h9e,"STRONG",{});var V_t=s(Oue);Nfr=r(V_t,"led"),V_t.forEach(t),jfr=r(h9e," \u2014 "),_X=n(h9e,"A",{href:!0});var X_t=s(_X);Dfr=r(X_t,"TFLEDForConditionalGeneration"),X_t.forEach(t),Gfr=r(h9e," (LED model)"),h9e.forEach(t),Ofr=i(we),Ev=n(we,"LI",{});var p9e=s(Ev);Vue=n(p9e,"STRONG",{});var z_t=s(Vue);Vfr=r(z_t,"marian"),z_t.forEach(t),Xfr=r(p9e," \u2014 "),uX=n(p9e,"A",{href:!0});var Q_t=s(uX);zfr=r(Q_t,"TFMarianMTModel"),Q_t.forEach(t),Qfr=r(p9e," (Marian model)"),p9e.forEach(t),Wfr=i(we),Cv=n(we,"LI",{});var _9e=s(Cv);Xue=n(_9e,"STRONG",{});var W_t=s(Xue);Hfr=r(W_t,"mbart"),W_t.forEach(t),Ufr=r(_9e," \u2014 "),bX=n(_9e,"A",{href:!0});var H_t=s(bX);Jfr=r(H_t,"TFMBartForConditionalGeneration"),H_t.forEach(t),Yfr=r(_9e," (mBART model)"),_9e.forEach(t),Kfr=i(we),wv=n(we,"LI",{});var u9e=s(wv);zue=n(u9e,"STRONG",{});var U_t=s(zue);Zfr=r(U_t,"mt5"),U_t.forEach(t),emr=r(u9e," \u2014 "),FX=n(u9e,"A",{href:!0});var J_t=s(FX);omr=r(J_t,"TFMT5ForConditionalGeneration"),J_t.forEach(t),rmr=r(u9e," (mT5 model)"),u9e.forEach(t),tmr=i(we),Av=n(we,"LI",{});var b9e=s(Av);Que=n(b9e,"STRONG",{});var Y_t=s(Que);amr=r(Y_t,"pegasus"),Y_t.forEach(t),nmr=r(b9e," \u2014 "),vX=n(b9e,"A",{href:!0});var K_t=s(vX);smr=r(K_t,"TFPegasusForConditionalGeneration"),K_t.forEach(t),lmr=r(b9e," (Pegasus model)"),b9e.forEach(t),imr=i(we),yv=n(we,"LI",{});var F9e=s(yv);Wue=n(F9e,"STRONG",{});var Z_t=s(Wue);dmr=r(Z_t,"t5"),Z_t.forEach(t),cmr=r(F9e," \u2014 "),TX=n(F9e,"A",{href:!0});var eut=s(TX);fmr=r(eut,"TFT5ForConditionalGeneration"),eut.forEach(t),mmr=r(F9e," (T5 model)"),F9e.forEach(t),we.forEach(t),gmr=i(va),Hue=n(va,"P",{});var out=s(Hue);hmr=r(out,"Examples:"),out.forEach(t),pmr=i(va),m(jy.$$.fragment,va),va.forEach(t),Ul.forEach(t),iBe=i(c),Sc=n(c,"H2",{class:!0});var F$e=s(Sc);Lv=n(F$e,"A",{id:!0,class:!0,href:!0});var rut=s(Lv);Uue=n(rut,"SPAN",{});var tut=s(Uue);m(Dy.$$.fragment,tut),tut.forEach(t),rut.forEach(t),_mr=i(F$e),Jue=n(F$e,"SPAN",{});var aut=s(Jue);umr=r(aut,"TFAutoModelForSequenceClassification"),aut.forEach(t),F$e.forEach(t),dBe=i(c),wr=n(c,"DIV",{class:!0});var Yl=s(wr);m(Gy.$$.fragment,Yl),bmr=i(Yl),Rc=n(Yl,"P",{});var nJ=s(Rc);Fmr=r(nJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),MX=n(nJ,"A",{href:!0});var nut=s(MX);vmr=r(nut,"from_pretrained()"),nut.forEach(t),Tmr=r(nJ," class method or the "),EX=n(nJ,"A",{href:!0});var sut=s(EX);Mmr=r(sut,"from_config()"),sut.forEach(t),Emr=r(nJ,` class
method.`),nJ.forEach(t),Cmr=i(Yl),Oy=n(Yl,"P",{});var v$e=s(Oy);wmr=r(v$e,"This class cannot be instantiated directly using "),Yue=n(v$e,"CODE",{});var lut=s(Yue);Amr=r(lut,"__init__()"),lut.forEach(t),ymr=r(v$e," (throws an error)."),v$e.forEach(t),Lmr=i(Yl),Ft=n(Yl,"DIV",{class:!0});var Kl=s(Ft);m(Vy.$$.fragment,Kl),xmr=i(Kl),Kue=n(Kl,"P",{});var iut=s(Kue);kmr=r(iut,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iut.forEach(t),Smr=i(Kl),Bc=n(Kl,"P",{});var sJ=s(Bc);Rmr=r(sJ,`Note:
Loading a model from its configuration file does `),Zue=n(sJ,"STRONG",{});var dut=s(Zue);Bmr=r(dut,"not"),dut.forEach(t),Pmr=r(sJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=n(sJ,"A",{href:!0});var cut=s(CX);$mr=r(cut,"from_pretrained()"),cut.forEach(t),Imr=r(sJ," to load the model weights."),sJ.forEach(t),qmr=i(Kl),e1e=n(Kl,"P",{});var fut=s(e1e);Nmr=r(fut,"Examples:"),fut.forEach(t),jmr=i(Kl),m(Xy.$$.fragment,Kl),Kl.forEach(t),Dmr=i(Yl),vo=n(Yl,"DIV",{class:!0});var Ta=s(vo);m(zy.$$.fragment,Ta),Gmr=i(Ta),o1e=n(Ta,"P",{});var mut=s(o1e);Omr=r(mut,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mut.forEach(t),Vmr=i(Ta),Mn=n(Ta,"P",{});var KE=s(Mn);Xmr=r(KE,"The model class to instantiate is selected based on the "),r1e=n(KE,"CODE",{});var gut=s(r1e);zmr=r(gut,"model_type"),gut.forEach(t),Qmr=r(KE,` property of the config object (either
passed as an argument or loaded from `),t1e=n(KE,"CODE",{});var hut=s(t1e);Wmr=r(hut,"pretrained_model_name_or_path"),hut.forEach(t),Hmr=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=n(KE,"CODE",{});var put=s(a1e);Umr=r(put,"pretrained_model_name_or_path"),put.forEach(t),Jmr=r(KE,":"),KE.forEach(t),Ymr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);xv=n(Q,"LI",{});var v9e=s(xv);n1e=n(v9e,"STRONG",{});var _ut=s(n1e);Kmr=r(_ut,"albert"),_ut.forEach(t),Zmr=r(v9e," \u2014 "),wX=n(v9e,"A",{href:!0});var uut=s(wX);egr=r(uut,"TFAlbertForSequenceClassification"),uut.forEach(t),ogr=r(v9e," (ALBERT model)"),v9e.forEach(t),rgr=i(Q),kv=n(Q,"LI",{});var T9e=s(kv);s1e=n(T9e,"STRONG",{});var but=s(s1e);tgr=r(but,"bert"),but.forEach(t),agr=r(T9e," \u2014 "),AX=n(T9e,"A",{href:!0});var Fut=s(AX);ngr=r(Fut,"TFBertForSequenceClassification"),Fut.forEach(t),sgr=r(T9e," (BERT model)"),T9e.forEach(t),lgr=i(Q),Sv=n(Q,"LI",{});var M9e=s(Sv);l1e=n(M9e,"STRONG",{});var vut=s(l1e);igr=r(vut,"camembert"),vut.forEach(t),dgr=r(M9e," \u2014 "),yX=n(M9e,"A",{href:!0});var Tut=s(yX);cgr=r(Tut,"TFCamembertForSequenceClassification"),Tut.forEach(t),fgr=r(M9e," (CamemBERT model)"),M9e.forEach(t),mgr=i(Q),Rv=n(Q,"LI",{});var E9e=s(Rv);i1e=n(E9e,"STRONG",{});var Mut=s(i1e);ggr=r(Mut,"convbert"),Mut.forEach(t),hgr=r(E9e," \u2014 "),LX=n(E9e,"A",{href:!0});var Eut=s(LX);pgr=r(Eut,"TFConvBertForSequenceClassification"),Eut.forEach(t),_gr=r(E9e," (ConvBERT model)"),E9e.forEach(t),ugr=i(Q),Bv=n(Q,"LI",{});var C9e=s(Bv);d1e=n(C9e,"STRONG",{});var Cut=s(d1e);bgr=r(Cut,"ctrl"),Cut.forEach(t),Fgr=r(C9e," \u2014 "),xX=n(C9e,"A",{href:!0});var wut=s(xX);vgr=r(wut,"TFCTRLForSequenceClassification"),wut.forEach(t),Tgr=r(C9e," (CTRL model)"),C9e.forEach(t),Mgr=i(Q),Pv=n(Q,"LI",{});var w9e=s(Pv);c1e=n(w9e,"STRONG",{});var Aut=s(c1e);Egr=r(Aut,"deberta"),Aut.forEach(t),Cgr=r(w9e," \u2014 "),kX=n(w9e,"A",{href:!0});var yut=s(kX);wgr=r(yut,"TFDebertaForSequenceClassification"),yut.forEach(t),Agr=r(w9e," (DeBERTa model)"),w9e.forEach(t),ygr=i(Q),$v=n(Q,"LI",{});var A9e=s($v);f1e=n(A9e,"STRONG",{});var Lut=s(f1e);Lgr=r(Lut,"deberta-v2"),Lut.forEach(t),xgr=r(A9e," \u2014 "),SX=n(A9e,"A",{href:!0});var xut=s(SX);kgr=r(xut,"TFDebertaV2ForSequenceClassification"),xut.forEach(t),Sgr=r(A9e," (DeBERTa-v2 model)"),A9e.forEach(t),Rgr=i(Q),Iv=n(Q,"LI",{});var y9e=s(Iv);m1e=n(y9e,"STRONG",{});var kut=s(m1e);Bgr=r(kut,"distilbert"),kut.forEach(t),Pgr=r(y9e," \u2014 "),RX=n(y9e,"A",{href:!0});var Sut=s(RX);$gr=r(Sut,"TFDistilBertForSequenceClassification"),Sut.forEach(t),Igr=r(y9e," (DistilBERT model)"),y9e.forEach(t),qgr=i(Q),qv=n(Q,"LI",{});var L9e=s(qv);g1e=n(L9e,"STRONG",{});var Rut=s(g1e);Ngr=r(Rut,"electra"),Rut.forEach(t),jgr=r(L9e," \u2014 "),BX=n(L9e,"A",{href:!0});var But=s(BX);Dgr=r(But,"TFElectraForSequenceClassification"),But.forEach(t),Ggr=r(L9e," (ELECTRA model)"),L9e.forEach(t),Ogr=i(Q),Nv=n(Q,"LI",{});var x9e=s(Nv);h1e=n(x9e,"STRONG",{});var Put=s(h1e);Vgr=r(Put,"flaubert"),Put.forEach(t),Xgr=r(x9e," \u2014 "),PX=n(x9e,"A",{href:!0});var $ut=s(PX);zgr=r($ut,"TFFlaubertForSequenceClassification"),$ut.forEach(t),Qgr=r(x9e," (FlauBERT model)"),x9e.forEach(t),Wgr=i(Q),jv=n(Q,"LI",{});var k9e=s(jv);p1e=n(k9e,"STRONG",{});var Iut=s(p1e);Hgr=r(Iut,"funnel"),Iut.forEach(t),Ugr=r(k9e," \u2014 "),$X=n(k9e,"A",{href:!0});var qut=s($X);Jgr=r(qut,"TFFunnelForSequenceClassification"),qut.forEach(t),Ygr=r(k9e," (Funnel Transformer model)"),k9e.forEach(t),Kgr=i(Q),Dv=n(Q,"LI",{});var S9e=s(Dv);_1e=n(S9e,"STRONG",{});var Nut=s(_1e);Zgr=r(Nut,"gpt2"),Nut.forEach(t),ehr=r(S9e," \u2014 "),IX=n(S9e,"A",{href:!0});var jut=s(IX);ohr=r(jut,"TFGPT2ForSequenceClassification"),jut.forEach(t),rhr=r(S9e," (OpenAI GPT-2 model)"),S9e.forEach(t),thr=i(Q),Gv=n(Q,"LI",{});var R9e=s(Gv);u1e=n(R9e,"STRONG",{});var Dut=s(u1e);ahr=r(Dut,"gptj"),Dut.forEach(t),nhr=r(R9e," \u2014 "),qX=n(R9e,"A",{href:!0});var Gut=s(qX);shr=r(Gut,"TFGPTJForSequenceClassification"),Gut.forEach(t),lhr=r(R9e," (GPT-J model)"),R9e.forEach(t),ihr=i(Q),Ov=n(Q,"LI",{});var B9e=s(Ov);b1e=n(B9e,"STRONG",{});var Out=s(b1e);dhr=r(Out,"layoutlm"),Out.forEach(t),chr=r(B9e," \u2014 "),NX=n(B9e,"A",{href:!0});var Vut=s(NX);fhr=r(Vut,"TFLayoutLMForSequenceClassification"),Vut.forEach(t),mhr=r(B9e," (LayoutLM model)"),B9e.forEach(t),ghr=i(Q),Vv=n(Q,"LI",{});var P9e=s(Vv);F1e=n(P9e,"STRONG",{});var Xut=s(F1e);hhr=r(Xut,"longformer"),Xut.forEach(t),phr=r(P9e," \u2014 "),jX=n(P9e,"A",{href:!0});var zut=s(jX);_hr=r(zut,"TFLongformerForSequenceClassification"),zut.forEach(t),uhr=r(P9e," (Longformer model)"),P9e.forEach(t),bhr=i(Q),Xv=n(Q,"LI",{});var $9e=s(Xv);v1e=n($9e,"STRONG",{});var Qut=s(v1e);Fhr=r(Qut,"mobilebert"),Qut.forEach(t),vhr=r($9e," \u2014 "),DX=n($9e,"A",{href:!0});var Wut=s(DX);Thr=r(Wut,"TFMobileBertForSequenceClassification"),Wut.forEach(t),Mhr=r($9e," (MobileBERT model)"),$9e.forEach(t),Ehr=i(Q),zv=n(Q,"LI",{});var I9e=s(zv);T1e=n(I9e,"STRONG",{});var Hut=s(T1e);Chr=r(Hut,"mpnet"),Hut.forEach(t),whr=r(I9e," \u2014 "),GX=n(I9e,"A",{href:!0});var Uut=s(GX);Ahr=r(Uut,"TFMPNetForSequenceClassification"),Uut.forEach(t),yhr=r(I9e," (MPNet model)"),I9e.forEach(t),Lhr=i(Q),Qv=n(Q,"LI",{});var q9e=s(Qv);M1e=n(q9e,"STRONG",{});var Jut=s(M1e);xhr=r(Jut,"openai-gpt"),Jut.forEach(t),khr=r(q9e," \u2014 "),OX=n(q9e,"A",{href:!0});var Yut=s(OX);Shr=r(Yut,"TFOpenAIGPTForSequenceClassification"),Yut.forEach(t),Rhr=r(q9e," (OpenAI GPT model)"),q9e.forEach(t),Bhr=i(Q),Wv=n(Q,"LI",{});var N9e=s(Wv);E1e=n(N9e,"STRONG",{});var Kut=s(E1e);Phr=r(Kut,"rembert"),Kut.forEach(t),$hr=r(N9e," \u2014 "),VX=n(N9e,"A",{href:!0});var Zut=s(VX);Ihr=r(Zut,"TFRemBertForSequenceClassification"),Zut.forEach(t),qhr=r(N9e," (RemBERT model)"),N9e.forEach(t),Nhr=i(Q),Hv=n(Q,"LI",{});var j9e=s(Hv);C1e=n(j9e,"STRONG",{});var e1t=s(C1e);jhr=r(e1t,"roberta"),e1t.forEach(t),Dhr=r(j9e," \u2014 "),XX=n(j9e,"A",{href:!0});var o1t=s(XX);Ghr=r(o1t,"TFRobertaForSequenceClassification"),o1t.forEach(t),Ohr=r(j9e," (RoBERTa model)"),j9e.forEach(t),Vhr=i(Q),Uv=n(Q,"LI",{});var D9e=s(Uv);w1e=n(D9e,"STRONG",{});var r1t=s(w1e);Xhr=r(r1t,"roformer"),r1t.forEach(t),zhr=r(D9e," \u2014 "),zX=n(D9e,"A",{href:!0});var t1t=s(zX);Qhr=r(t1t,"TFRoFormerForSequenceClassification"),t1t.forEach(t),Whr=r(D9e," (RoFormer model)"),D9e.forEach(t),Hhr=i(Q),Jv=n(Q,"LI",{});var G9e=s(Jv);A1e=n(G9e,"STRONG",{});var a1t=s(A1e);Uhr=r(a1t,"tapas"),a1t.forEach(t),Jhr=r(G9e," \u2014 "),QX=n(G9e,"A",{href:!0});var n1t=s(QX);Yhr=r(n1t,"TFTapasForSequenceClassification"),n1t.forEach(t),Khr=r(G9e," (TAPAS model)"),G9e.forEach(t),Zhr=i(Q),Yv=n(Q,"LI",{});var O9e=s(Yv);y1e=n(O9e,"STRONG",{});var s1t=s(y1e);epr=r(s1t,"transfo-xl"),s1t.forEach(t),opr=r(O9e," \u2014 "),WX=n(O9e,"A",{href:!0});var l1t=s(WX);rpr=r(l1t,"TFTransfoXLForSequenceClassification"),l1t.forEach(t),tpr=r(O9e," (Transformer-XL model)"),O9e.forEach(t),apr=i(Q),Kv=n(Q,"LI",{});var V9e=s(Kv);L1e=n(V9e,"STRONG",{});var i1t=s(L1e);npr=r(i1t,"xlm"),i1t.forEach(t),spr=r(V9e," \u2014 "),HX=n(V9e,"A",{href:!0});var d1t=s(HX);lpr=r(d1t,"TFXLMForSequenceClassification"),d1t.forEach(t),ipr=r(V9e," (XLM model)"),V9e.forEach(t),dpr=i(Q),Zv=n(Q,"LI",{});var X9e=s(Zv);x1e=n(X9e,"STRONG",{});var c1t=s(x1e);cpr=r(c1t,"xlm-roberta"),c1t.forEach(t),fpr=r(X9e," \u2014 "),UX=n(X9e,"A",{href:!0});var f1t=s(UX);mpr=r(f1t,"TFXLMRobertaForSequenceClassification"),f1t.forEach(t),gpr=r(X9e," (XLM-RoBERTa model)"),X9e.forEach(t),hpr=i(Q),e6=n(Q,"LI",{});var z9e=s(e6);k1e=n(z9e,"STRONG",{});var m1t=s(k1e);ppr=r(m1t,"xlnet"),m1t.forEach(t),_pr=r(z9e," \u2014 "),JX=n(z9e,"A",{href:!0});var g1t=s(JX);upr=r(g1t,"TFXLNetForSequenceClassification"),g1t.forEach(t),bpr=r(z9e," (XLNet model)"),z9e.forEach(t),Q.forEach(t),Fpr=i(Ta),S1e=n(Ta,"P",{});var h1t=s(S1e);vpr=r(h1t,"Examples:"),h1t.forEach(t),Tpr=i(Ta),m(Qy.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),cBe=i(c),Pc=n(c,"H2",{class:!0});var T$e=s(Pc);o6=n(T$e,"A",{id:!0,class:!0,href:!0});var p1t=s(o6);R1e=n(p1t,"SPAN",{});var _1t=s(R1e);m(Wy.$$.fragment,_1t),_1t.forEach(t),p1t.forEach(t),Mpr=i(T$e),B1e=n(T$e,"SPAN",{});var u1t=s(B1e);Epr=r(u1t,"TFAutoModelForMultipleChoice"),u1t.forEach(t),T$e.forEach(t),fBe=i(c),Ar=n(c,"DIV",{class:!0});var Zl=s(Ar);m(Hy.$$.fragment,Zl),Cpr=i(Zl),$c=n(Zl,"P",{});var lJ=s($c);wpr=r(lJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YX=n(lJ,"A",{href:!0});var b1t=s(YX);Apr=r(b1t,"from_pretrained()"),b1t.forEach(t),ypr=r(lJ," class method or the "),KX=n(lJ,"A",{href:!0});var F1t=s(KX);Lpr=r(F1t,"from_config()"),F1t.forEach(t),xpr=r(lJ,` class
method.`),lJ.forEach(t),kpr=i(Zl),Uy=n(Zl,"P",{});var M$e=s(Uy);Spr=r(M$e,"This class cannot be instantiated directly using "),P1e=n(M$e,"CODE",{});var v1t=s(P1e);Rpr=r(v1t,"__init__()"),v1t.forEach(t),Bpr=r(M$e," (throws an error)."),M$e.forEach(t),Ppr=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);m(Jy.$$.fragment,ei),$pr=i(ei),$1e=n(ei,"P",{});var T1t=s($1e);Ipr=r(T1t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),T1t.forEach(t),qpr=i(ei),Ic=n(ei,"P",{});var iJ=s(Ic);Npr=r(iJ,`Note:
Loading a model from its configuration file does `),I1e=n(iJ,"STRONG",{});var M1t=s(I1e);jpr=r(M1t,"not"),M1t.forEach(t),Dpr=r(iJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(iJ,"A",{href:!0});var E1t=s(ZX);Gpr=r(E1t,"from_pretrained()"),E1t.forEach(t),Opr=r(iJ," to load the model weights."),iJ.forEach(t),Vpr=i(ei),q1e=n(ei,"P",{});var C1t=s(q1e);Xpr=r(C1t,"Examples:"),C1t.forEach(t),zpr=i(ei),m(Yy.$$.fragment,ei),ei.forEach(t),Qpr=i(Zl),To=n(Zl,"DIV",{class:!0});var Ma=s(To);m(Ky.$$.fragment,Ma),Wpr=i(Ma),N1e=n(Ma,"P",{});var w1t=s(N1e);Hpr=r(w1t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),w1t.forEach(t),Upr=i(Ma),En=n(Ma,"P",{});var ZE=s(En);Jpr=r(ZE,"The model class to instantiate is selected based on the "),j1e=n(ZE,"CODE",{});var A1t=s(j1e);Ypr=r(A1t,"model_type"),A1t.forEach(t),Kpr=r(ZE,` property of the config object (either
passed as an argument or loaded from `),D1e=n(ZE,"CODE",{});var y1t=s(D1e);Zpr=r(y1t,"pretrained_model_name_or_path"),y1t.forEach(t),e_r=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=n(ZE,"CODE",{});var L1t=s(G1e);o_r=r(L1t,"pretrained_model_name_or_path"),L1t.forEach(t),r_r=r(ZE,":"),ZE.forEach(t),t_r=i(Ma),ae=n(Ma,"UL",{});var le=s(ae);r6=n(le,"LI",{});var Q9e=s(r6);O1e=n(Q9e,"STRONG",{});var x1t=s(O1e);a_r=r(x1t,"albert"),x1t.forEach(t),n_r=r(Q9e," \u2014 "),ez=n(Q9e,"A",{href:!0});var k1t=s(ez);s_r=r(k1t,"TFAlbertForMultipleChoice"),k1t.forEach(t),l_r=r(Q9e," (ALBERT model)"),Q9e.forEach(t),i_r=i(le),t6=n(le,"LI",{});var W9e=s(t6);V1e=n(W9e,"STRONG",{});var S1t=s(V1e);d_r=r(S1t,"bert"),S1t.forEach(t),c_r=r(W9e," \u2014 "),oz=n(W9e,"A",{href:!0});var R1t=s(oz);f_r=r(R1t,"TFBertForMultipleChoice"),R1t.forEach(t),m_r=r(W9e," (BERT model)"),W9e.forEach(t),g_r=i(le),a6=n(le,"LI",{});var H9e=s(a6);X1e=n(H9e,"STRONG",{});var B1t=s(X1e);h_r=r(B1t,"camembert"),B1t.forEach(t),p_r=r(H9e," \u2014 "),rz=n(H9e,"A",{href:!0});var P1t=s(rz);__r=r(P1t,"TFCamembertForMultipleChoice"),P1t.forEach(t),u_r=r(H9e," (CamemBERT model)"),H9e.forEach(t),b_r=i(le),n6=n(le,"LI",{});var U9e=s(n6);z1e=n(U9e,"STRONG",{});var $1t=s(z1e);F_r=r($1t,"convbert"),$1t.forEach(t),v_r=r(U9e," \u2014 "),tz=n(U9e,"A",{href:!0});var I1t=s(tz);T_r=r(I1t,"TFConvBertForMultipleChoice"),I1t.forEach(t),M_r=r(U9e," (ConvBERT model)"),U9e.forEach(t),E_r=i(le),s6=n(le,"LI",{});var J9e=s(s6);Q1e=n(J9e,"STRONG",{});var q1t=s(Q1e);C_r=r(q1t,"distilbert"),q1t.forEach(t),w_r=r(J9e," \u2014 "),az=n(J9e,"A",{href:!0});var N1t=s(az);A_r=r(N1t,"TFDistilBertForMultipleChoice"),N1t.forEach(t),y_r=r(J9e," (DistilBERT model)"),J9e.forEach(t),L_r=i(le),l6=n(le,"LI",{});var Y9e=s(l6);W1e=n(Y9e,"STRONG",{});var j1t=s(W1e);x_r=r(j1t,"electra"),j1t.forEach(t),k_r=r(Y9e," \u2014 "),nz=n(Y9e,"A",{href:!0});var D1t=s(nz);S_r=r(D1t,"TFElectraForMultipleChoice"),D1t.forEach(t),R_r=r(Y9e," (ELECTRA model)"),Y9e.forEach(t),B_r=i(le),i6=n(le,"LI",{});var K9e=s(i6);H1e=n(K9e,"STRONG",{});var G1t=s(H1e);P_r=r(G1t,"flaubert"),G1t.forEach(t),$_r=r(K9e," \u2014 "),sz=n(K9e,"A",{href:!0});var O1t=s(sz);I_r=r(O1t,"TFFlaubertForMultipleChoice"),O1t.forEach(t),q_r=r(K9e," (FlauBERT model)"),K9e.forEach(t),N_r=i(le),d6=n(le,"LI",{});var Z9e=s(d6);U1e=n(Z9e,"STRONG",{});var V1t=s(U1e);j_r=r(V1t,"funnel"),V1t.forEach(t),D_r=r(Z9e," \u2014 "),lz=n(Z9e,"A",{href:!0});var X1t=s(lz);G_r=r(X1t,"TFFunnelForMultipleChoice"),X1t.forEach(t),O_r=r(Z9e," (Funnel Transformer model)"),Z9e.forEach(t),V_r=i(le),c6=n(le,"LI",{});var exe=s(c6);J1e=n(exe,"STRONG",{});var z1t=s(J1e);X_r=r(z1t,"longformer"),z1t.forEach(t),z_r=r(exe," \u2014 "),iz=n(exe,"A",{href:!0});var Q1t=s(iz);Q_r=r(Q1t,"TFLongformerForMultipleChoice"),Q1t.forEach(t),W_r=r(exe," (Longformer model)"),exe.forEach(t),H_r=i(le),f6=n(le,"LI",{});var oxe=s(f6);Y1e=n(oxe,"STRONG",{});var W1t=s(Y1e);U_r=r(W1t,"mobilebert"),W1t.forEach(t),J_r=r(oxe," \u2014 "),dz=n(oxe,"A",{href:!0});var H1t=s(dz);Y_r=r(H1t,"TFMobileBertForMultipleChoice"),H1t.forEach(t),K_r=r(oxe," (MobileBERT model)"),oxe.forEach(t),Z_r=i(le),m6=n(le,"LI",{});var rxe=s(m6);K1e=n(rxe,"STRONG",{});var U1t=s(K1e);eur=r(U1t,"mpnet"),U1t.forEach(t),our=r(rxe," \u2014 "),cz=n(rxe,"A",{href:!0});var J1t=s(cz);rur=r(J1t,"TFMPNetForMultipleChoice"),J1t.forEach(t),tur=r(rxe," (MPNet model)"),rxe.forEach(t),aur=i(le),g6=n(le,"LI",{});var txe=s(g6);Z1e=n(txe,"STRONG",{});var Y1t=s(Z1e);nur=r(Y1t,"rembert"),Y1t.forEach(t),sur=r(txe," \u2014 "),fz=n(txe,"A",{href:!0});var K1t=s(fz);lur=r(K1t,"TFRemBertForMultipleChoice"),K1t.forEach(t),iur=r(txe," (RemBERT model)"),txe.forEach(t),dur=i(le),h6=n(le,"LI",{});var axe=s(h6);e4e=n(axe,"STRONG",{});var Z1t=s(e4e);cur=r(Z1t,"roberta"),Z1t.forEach(t),fur=r(axe," \u2014 "),mz=n(axe,"A",{href:!0});var e4t=s(mz);mur=r(e4t,"TFRobertaForMultipleChoice"),e4t.forEach(t),gur=r(axe," (RoBERTa model)"),axe.forEach(t),hur=i(le),p6=n(le,"LI",{});var nxe=s(p6);o4e=n(nxe,"STRONG",{});var o4t=s(o4e);pur=r(o4t,"roformer"),o4t.forEach(t),_ur=r(nxe," \u2014 "),gz=n(nxe,"A",{href:!0});var r4t=s(gz);uur=r(r4t,"TFRoFormerForMultipleChoice"),r4t.forEach(t),bur=r(nxe," (RoFormer model)"),nxe.forEach(t),Fur=i(le),_6=n(le,"LI",{});var sxe=s(_6);r4e=n(sxe,"STRONG",{});var t4t=s(r4e);vur=r(t4t,"xlm"),t4t.forEach(t),Tur=r(sxe," \u2014 "),hz=n(sxe,"A",{href:!0});var a4t=s(hz);Mur=r(a4t,"TFXLMForMultipleChoice"),a4t.forEach(t),Eur=r(sxe," (XLM model)"),sxe.forEach(t),Cur=i(le),u6=n(le,"LI",{});var lxe=s(u6);t4e=n(lxe,"STRONG",{});var n4t=s(t4e);wur=r(n4t,"xlm-roberta"),n4t.forEach(t),Aur=r(lxe," \u2014 "),pz=n(lxe,"A",{href:!0});var s4t=s(pz);yur=r(s4t,"TFXLMRobertaForMultipleChoice"),s4t.forEach(t),Lur=r(lxe," (XLM-RoBERTa model)"),lxe.forEach(t),xur=i(le),b6=n(le,"LI",{});var ixe=s(b6);a4e=n(ixe,"STRONG",{});var l4t=s(a4e);kur=r(l4t,"xlnet"),l4t.forEach(t),Sur=r(ixe," \u2014 "),_z=n(ixe,"A",{href:!0});var i4t=s(_z);Rur=r(i4t,"TFXLNetForMultipleChoice"),i4t.forEach(t),Bur=r(ixe," (XLNet model)"),ixe.forEach(t),le.forEach(t),Pur=i(Ma),n4e=n(Ma,"P",{});var d4t=s(n4e);$ur=r(d4t,"Examples:"),d4t.forEach(t),Iur=i(Ma),m(Zy.$$.fragment,Ma),Ma.forEach(t),Zl.forEach(t),mBe=i(c),qc=n(c,"H2",{class:!0});var E$e=s(qc);F6=n(E$e,"A",{id:!0,class:!0,href:!0});var c4t=s(F6);s4e=n(c4t,"SPAN",{});var f4t=s(s4e);m(eL.$$.fragment,f4t),f4t.forEach(t),c4t.forEach(t),qur=i(E$e),l4e=n(E$e,"SPAN",{});var m4t=s(l4e);Nur=r(m4t,"TFAutoModelForTableQuestionAnswering"),m4t.forEach(t),E$e.forEach(t),gBe=i(c),yr=n(c,"DIV",{class:!0});var oi=s(yr);m(oL.$$.fragment,oi),jur=i(oi),Nc=n(oi,"P",{});var dJ=s(Nc);Dur=r(dJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uz=n(dJ,"A",{href:!0});var g4t=s(uz);Gur=r(g4t,"from_pretrained()"),g4t.forEach(t),Our=r(dJ," class method or the "),bz=n(dJ,"A",{href:!0});var h4t=s(bz);Vur=r(h4t,"from_config()"),h4t.forEach(t),Xur=r(dJ,` class
method.`),dJ.forEach(t),zur=i(oi),rL=n(oi,"P",{});var C$e=s(rL);Qur=r(C$e,"This class cannot be instantiated directly using "),i4e=n(C$e,"CODE",{});var p4t=s(i4e);Wur=r(p4t,"__init__()"),p4t.forEach(t),Hur=r(C$e," (throws an error)."),C$e.forEach(t),Uur=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);m(tL.$$.fragment,ri),Jur=i(ri),d4e=n(ri,"P",{});var _4t=s(d4e);Yur=r(_4t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_4t.forEach(t),Kur=i(ri),jc=n(ri,"P",{});var cJ=s(jc);Zur=r(cJ,`Note:
Loading a model from its configuration file does `),c4e=n(cJ,"STRONG",{});var u4t=s(c4e);e1r=r(u4t,"not"),u4t.forEach(t),o1r=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=n(cJ,"A",{href:!0});var b4t=s(Fz);r1r=r(b4t,"from_pretrained()"),b4t.forEach(t),t1r=r(cJ," to load the model weights."),cJ.forEach(t),a1r=i(ri),f4e=n(ri,"P",{});var F4t=s(f4e);n1r=r(F4t,"Examples:"),F4t.forEach(t),s1r=i(ri),m(aL.$$.fragment,ri),ri.forEach(t),l1r=i(oi),Mo=n(oi,"DIV",{class:!0});var Ea=s(Mo);m(nL.$$.fragment,Ea),i1r=i(Ea),m4e=n(Ea,"P",{});var v4t=s(m4e);d1r=r(v4t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),v4t.forEach(t),c1r=i(Ea),Cn=n(Ea,"P",{});var eC=s(Cn);f1r=r(eC,"The model class to instantiate is selected based on the "),g4e=n(eC,"CODE",{});var T4t=s(g4e);m1r=r(T4t,"model_type"),T4t.forEach(t),g1r=r(eC,` property of the config object (either
passed as an argument or loaded from `),h4e=n(eC,"CODE",{});var M4t=s(h4e);h1r=r(M4t,"pretrained_model_name_or_path"),M4t.forEach(t),p1r=r(eC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p4e=n(eC,"CODE",{});var E4t=s(p4e);_1r=r(E4t,"pretrained_model_name_or_path"),E4t.forEach(t),u1r=r(eC,":"),eC.forEach(t),b1r=i(Ea),_4e=n(Ea,"UL",{});var C4t=s(_4e);v6=n(C4t,"LI",{});var dxe=s(v6);u4e=n(dxe,"STRONG",{});var w4t=s(u4e);F1r=r(w4t,"tapas"),w4t.forEach(t),v1r=r(dxe," \u2014 "),vz=n(dxe,"A",{href:!0});var A4t=s(vz);T1r=r(A4t,"TFTapasForQuestionAnswering"),A4t.forEach(t),M1r=r(dxe," (TAPAS model)"),dxe.forEach(t),C4t.forEach(t),E1r=i(Ea),b4e=n(Ea,"P",{});var y4t=s(b4e);C1r=r(y4t,"Examples:"),y4t.forEach(t),w1r=i(Ea),m(sL.$$.fragment,Ea),Ea.forEach(t),oi.forEach(t),hBe=i(c),Dc=n(c,"H2",{class:!0});var w$e=s(Dc);T6=n(w$e,"A",{id:!0,class:!0,href:!0});var L4t=s(T6);F4e=n(L4t,"SPAN",{});var x4t=s(F4e);m(lL.$$.fragment,x4t),x4t.forEach(t),L4t.forEach(t),A1r=i(w$e),v4e=n(w$e,"SPAN",{});var k4t=s(v4e);y1r=r(k4t,"TFAutoModelForTokenClassification"),k4t.forEach(t),w$e.forEach(t),pBe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(iL.$$.fragment,ti),L1r=i(ti),Gc=n(ti,"P",{});var fJ=s(Gc);x1r=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Tz=n(fJ,"A",{href:!0});var S4t=s(Tz);k1r=r(S4t,"from_pretrained()"),S4t.forEach(t),S1r=r(fJ," class method or the "),Mz=n(fJ,"A",{href:!0});var R4t=s(Mz);R1r=r(R4t,"from_config()"),R4t.forEach(t),B1r=r(fJ,` class
method.`),fJ.forEach(t),P1r=i(ti),dL=n(ti,"P",{});var A$e=s(dL);$1r=r(A$e,"This class cannot be instantiated directly using "),T4e=n(A$e,"CODE",{});var B4t=s(T4e);I1r=r(B4t,"__init__()"),B4t.forEach(t),q1r=r(A$e," (throws an error)."),A$e.forEach(t),N1r=i(ti),Mt=n(ti,"DIV",{class:!0});var ai=s(Mt);m(cL.$$.fragment,ai),j1r=i(ai),M4e=n(ai,"P",{});var P4t=s(M4e);D1r=r(P4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),P4t.forEach(t),G1r=i(ai),Oc=n(ai,"P",{});var mJ=s(Oc);O1r=r(mJ,`Note:
Loading a model from its configuration file does `),E4e=n(mJ,"STRONG",{});var $4t=s(E4e);V1r=r($4t,"not"),$4t.forEach(t),X1r=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=n(mJ,"A",{href:!0});var I4t=s(Ez);z1r=r(I4t,"from_pretrained()"),I4t.forEach(t),Q1r=r(mJ," to load the model weights."),mJ.forEach(t),W1r=i(ai),C4e=n(ai,"P",{});var q4t=s(C4e);H1r=r(q4t,"Examples:"),q4t.forEach(t),U1r=i(ai),m(fL.$$.fragment,ai),ai.forEach(t),J1r=i(ti),Eo=n(ti,"DIV",{class:!0});var Ca=s(Eo);m(mL.$$.fragment,Ca),Y1r=i(Ca),w4e=n(Ca,"P",{});var N4t=s(w4e);K1r=r(N4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),N4t.forEach(t),Z1r=i(Ca),wn=n(Ca,"P",{});var oC=s(wn);e4r=r(oC,"The model class to instantiate is selected based on the "),A4e=n(oC,"CODE",{});var j4t=s(A4e);o4r=r(j4t,"model_type"),j4t.forEach(t),r4r=r(oC,` property of the config object (either
passed as an argument or loaded from `),y4e=n(oC,"CODE",{});var D4t=s(y4e);t4r=r(D4t,"pretrained_model_name_or_path"),D4t.forEach(t),a4r=r(oC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L4e=n(oC,"CODE",{});var G4t=s(L4e);n4r=r(G4t,"pretrained_model_name_or_path"),G4t.forEach(t),s4r=r(oC,":"),oC.forEach(t),l4r=i(Ca),Y=n(Ca,"UL",{});var oe=s(Y);M6=n(oe,"LI",{});var cxe=s(M6);x4e=n(cxe,"STRONG",{});var O4t=s(x4e);i4r=r(O4t,"albert"),O4t.forEach(t),d4r=r(cxe," \u2014 "),Cz=n(cxe,"A",{href:!0});var V4t=s(Cz);c4r=r(V4t,"TFAlbertForTokenClassification"),V4t.forEach(t),f4r=r(cxe," (ALBERT model)"),cxe.forEach(t),m4r=i(oe),E6=n(oe,"LI",{});var fxe=s(E6);k4e=n(fxe,"STRONG",{});var X4t=s(k4e);g4r=r(X4t,"bert"),X4t.forEach(t),h4r=r(fxe," \u2014 "),wz=n(fxe,"A",{href:!0});var z4t=s(wz);p4r=r(z4t,"TFBertForTokenClassification"),z4t.forEach(t),_4r=r(fxe," (BERT model)"),fxe.forEach(t),u4r=i(oe),C6=n(oe,"LI",{});var mxe=s(C6);S4e=n(mxe,"STRONG",{});var Q4t=s(S4e);b4r=r(Q4t,"camembert"),Q4t.forEach(t),F4r=r(mxe," \u2014 "),Az=n(mxe,"A",{href:!0});var W4t=s(Az);v4r=r(W4t,"TFCamembertForTokenClassification"),W4t.forEach(t),T4r=r(mxe," (CamemBERT model)"),mxe.forEach(t),M4r=i(oe),w6=n(oe,"LI",{});var gxe=s(w6);R4e=n(gxe,"STRONG",{});var H4t=s(R4e);E4r=r(H4t,"convbert"),H4t.forEach(t),C4r=r(gxe," \u2014 "),yz=n(gxe,"A",{href:!0});var U4t=s(yz);w4r=r(U4t,"TFConvBertForTokenClassification"),U4t.forEach(t),A4r=r(gxe," (ConvBERT model)"),gxe.forEach(t),y4r=i(oe),A6=n(oe,"LI",{});var hxe=s(A6);B4e=n(hxe,"STRONG",{});var J4t=s(B4e);L4r=r(J4t,"deberta"),J4t.forEach(t),x4r=r(hxe," \u2014 "),Lz=n(hxe,"A",{href:!0});var Y4t=s(Lz);k4r=r(Y4t,"TFDebertaForTokenClassification"),Y4t.forEach(t),S4r=r(hxe," (DeBERTa model)"),hxe.forEach(t),R4r=i(oe),y6=n(oe,"LI",{});var pxe=s(y6);P4e=n(pxe,"STRONG",{});var K4t=s(P4e);B4r=r(K4t,"deberta-v2"),K4t.forEach(t),P4r=r(pxe," \u2014 "),xz=n(pxe,"A",{href:!0});var Z4t=s(xz);$4r=r(Z4t,"TFDebertaV2ForTokenClassification"),Z4t.forEach(t),I4r=r(pxe," (DeBERTa-v2 model)"),pxe.forEach(t),q4r=i(oe),L6=n(oe,"LI",{});var _xe=s(L6);$4e=n(_xe,"STRONG",{});var ebt=s($4e);N4r=r(ebt,"distilbert"),ebt.forEach(t),j4r=r(_xe," \u2014 "),kz=n(_xe,"A",{href:!0});var obt=s(kz);D4r=r(obt,"TFDistilBertForTokenClassification"),obt.forEach(t),G4r=r(_xe," (DistilBERT model)"),_xe.forEach(t),O4r=i(oe),x6=n(oe,"LI",{});var uxe=s(x6);I4e=n(uxe,"STRONG",{});var rbt=s(I4e);V4r=r(rbt,"electra"),rbt.forEach(t),X4r=r(uxe," \u2014 "),Sz=n(uxe,"A",{href:!0});var tbt=s(Sz);z4r=r(tbt,"TFElectraForTokenClassification"),tbt.forEach(t),Q4r=r(uxe," (ELECTRA model)"),uxe.forEach(t),W4r=i(oe),k6=n(oe,"LI",{});var bxe=s(k6);q4e=n(bxe,"STRONG",{});var abt=s(q4e);H4r=r(abt,"flaubert"),abt.forEach(t),U4r=r(bxe," \u2014 "),Rz=n(bxe,"A",{href:!0});var nbt=s(Rz);J4r=r(nbt,"TFFlaubertForTokenClassification"),nbt.forEach(t),Y4r=r(bxe," (FlauBERT model)"),bxe.forEach(t),K4r=i(oe),S6=n(oe,"LI",{});var Fxe=s(S6);N4e=n(Fxe,"STRONG",{});var sbt=s(N4e);Z4r=r(sbt,"funnel"),sbt.forEach(t),ebr=r(Fxe," \u2014 "),Bz=n(Fxe,"A",{href:!0});var lbt=s(Bz);obr=r(lbt,"TFFunnelForTokenClassification"),lbt.forEach(t),rbr=r(Fxe," (Funnel Transformer model)"),Fxe.forEach(t),tbr=i(oe),R6=n(oe,"LI",{});var vxe=s(R6);j4e=n(vxe,"STRONG",{});var ibt=s(j4e);abr=r(ibt,"layoutlm"),ibt.forEach(t),nbr=r(vxe," \u2014 "),Pz=n(vxe,"A",{href:!0});var dbt=s(Pz);sbr=r(dbt,"TFLayoutLMForTokenClassification"),dbt.forEach(t),lbr=r(vxe," (LayoutLM model)"),vxe.forEach(t),ibr=i(oe),B6=n(oe,"LI",{});var Txe=s(B6);D4e=n(Txe,"STRONG",{});var cbt=s(D4e);dbr=r(cbt,"longformer"),cbt.forEach(t),cbr=r(Txe," \u2014 "),$z=n(Txe,"A",{href:!0});var fbt=s($z);fbr=r(fbt,"TFLongformerForTokenClassification"),fbt.forEach(t),mbr=r(Txe," (Longformer model)"),Txe.forEach(t),gbr=i(oe),P6=n(oe,"LI",{});var Mxe=s(P6);G4e=n(Mxe,"STRONG",{});var mbt=s(G4e);hbr=r(mbt,"mobilebert"),mbt.forEach(t),pbr=r(Mxe," \u2014 "),Iz=n(Mxe,"A",{href:!0});var gbt=s(Iz);_br=r(gbt,"TFMobileBertForTokenClassification"),gbt.forEach(t),ubr=r(Mxe," (MobileBERT model)"),Mxe.forEach(t),bbr=i(oe),$6=n(oe,"LI",{});var Exe=s($6);O4e=n(Exe,"STRONG",{});var hbt=s(O4e);Fbr=r(hbt,"mpnet"),hbt.forEach(t),vbr=r(Exe," \u2014 "),qz=n(Exe,"A",{href:!0});var pbt=s(qz);Tbr=r(pbt,"TFMPNetForTokenClassification"),pbt.forEach(t),Mbr=r(Exe," (MPNet model)"),Exe.forEach(t),Ebr=i(oe),I6=n(oe,"LI",{});var Cxe=s(I6);V4e=n(Cxe,"STRONG",{});var _bt=s(V4e);Cbr=r(_bt,"rembert"),_bt.forEach(t),wbr=r(Cxe," \u2014 "),Nz=n(Cxe,"A",{href:!0});var ubt=s(Nz);Abr=r(ubt,"TFRemBertForTokenClassification"),ubt.forEach(t),ybr=r(Cxe," (RemBERT model)"),Cxe.forEach(t),Lbr=i(oe),q6=n(oe,"LI",{});var wxe=s(q6);X4e=n(wxe,"STRONG",{});var bbt=s(X4e);xbr=r(bbt,"roberta"),bbt.forEach(t),kbr=r(wxe," \u2014 "),jz=n(wxe,"A",{href:!0});var Fbt=s(jz);Sbr=r(Fbt,"TFRobertaForTokenClassification"),Fbt.forEach(t),Rbr=r(wxe," (RoBERTa model)"),wxe.forEach(t),Bbr=i(oe),N6=n(oe,"LI",{});var Axe=s(N6);z4e=n(Axe,"STRONG",{});var vbt=s(z4e);Pbr=r(vbt,"roformer"),vbt.forEach(t),$br=r(Axe," \u2014 "),Dz=n(Axe,"A",{href:!0});var Tbt=s(Dz);Ibr=r(Tbt,"TFRoFormerForTokenClassification"),Tbt.forEach(t),qbr=r(Axe," (RoFormer model)"),Axe.forEach(t),Nbr=i(oe),j6=n(oe,"LI",{});var yxe=s(j6);Q4e=n(yxe,"STRONG",{});var Mbt=s(Q4e);jbr=r(Mbt,"xlm"),Mbt.forEach(t),Dbr=r(yxe," \u2014 "),Gz=n(yxe,"A",{href:!0});var Ebt=s(Gz);Gbr=r(Ebt,"TFXLMForTokenClassification"),Ebt.forEach(t),Obr=r(yxe," (XLM model)"),yxe.forEach(t),Vbr=i(oe),D6=n(oe,"LI",{});var Lxe=s(D6);W4e=n(Lxe,"STRONG",{});var Cbt=s(W4e);Xbr=r(Cbt,"xlm-roberta"),Cbt.forEach(t),zbr=r(Lxe," \u2014 "),Oz=n(Lxe,"A",{href:!0});var wbt=s(Oz);Qbr=r(wbt,"TFXLMRobertaForTokenClassification"),wbt.forEach(t),Wbr=r(Lxe," (XLM-RoBERTa model)"),Lxe.forEach(t),Hbr=i(oe),G6=n(oe,"LI",{});var xxe=s(G6);H4e=n(xxe,"STRONG",{});var Abt=s(H4e);Ubr=r(Abt,"xlnet"),Abt.forEach(t),Jbr=r(xxe," \u2014 "),Vz=n(xxe,"A",{href:!0});var ybt=s(Vz);Ybr=r(ybt,"TFXLNetForTokenClassification"),ybt.forEach(t),Kbr=r(xxe," (XLNet model)"),xxe.forEach(t),oe.forEach(t),Zbr=i(Ca),U4e=n(Ca,"P",{});var Lbt=s(U4e);e5r=r(Lbt,"Examples:"),Lbt.forEach(t),o5r=i(Ca),m(gL.$$.fragment,Ca),Ca.forEach(t),ti.forEach(t),_Be=i(c),Vc=n(c,"H2",{class:!0});var y$e=s(Vc);O6=n(y$e,"A",{id:!0,class:!0,href:!0});var xbt=s(O6);J4e=n(xbt,"SPAN",{});var kbt=s(J4e);m(hL.$$.fragment,kbt),kbt.forEach(t),xbt.forEach(t),r5r=i(y$e),Y4e=n(y$e,"SPAN",{});var Sbt=s(Y4e);t5r=r(Sbt,"TFAutoModelForQuestionAnswering"),Sbt.forEach(t),y$e.forEach(t),uBe=i(c),xr=n(c,"DIV",{class:!0});var ni=s(xr);m(pL.$$.fragment,ni),a5r=i(ni),Xc=n(ni,"P",{});var gJ=s(Xc);n5r=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Xz=n(gJ,"A",{href:!0});var Rbt=s(Xz);s5r=r(Rbt,"from_pretrained()"),Rbt.forEach(t),l5r=r(gJ," class method or the "),zz=n(gJ,"A",{href:!0});var Bbt=s(zz);i5r=r(Bbt,"from_config()"),Bbt.forEach(t),d5r=r(gJ,` class
method.`),gJ.forEach(t),c5r=i(ni),_L=n(ni,"P",{});var L$e=s(_L);f5r=r(L$e,"This class cannot be instantiated directly using "),K4e=n(L$e,"CODE",{});var Pbt=s(K4e);m5r=r(Pbt,"__init__()"),Pbt.forEach(t),g5r=r(L$e," (throws an error)."),L$e.forEach(t),h5r=i(ni),Et=n(ni,"DIV",{class:!0});var si=s(Et);m(uL.$$.fragment,si),p5r=i(si),Z4e=n(si,"P",{});var $bt=s(Z4e);_5r=r($bt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$bt.forEach(t),u5r=i(si),zc=n(si,"P",{});var hJ=s(zc);b5r=r(hJ,`Note:
Loading a model from its configuration file does `),ebe=n(hJ,"STRONG",{});var Ibt=s(ebe);F5r=r(Ibt,"not"),Ibt.forEach(t),v5r=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n(hJ,"A",{href:!0});var qbt=s(Qz);T5r=r(qbt,"from_pretrained()"),qbt.forEach(t),M5r=r(hJ," to load the model weights."),hJ.forEach(t),E5r=i(si),obe=n(si,"P",{});var Nbt=s(obe);C5r=r(Nbt,"Examples:"),Nbt.forEach(t),w5r=i(si),m(bL.$$.fragment,si),si.forEach(t),A5r=i(ni),Co=n(ni,"DIV",{class:!0});var wa=s(Co);m(FL.$$.fragment,wa),y5r=i(wa),rbe=n(wa,"P",{});var jbt=s(rbe);L5r=r(jbt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jbt.forEach(t),x5r=i(wa),An=n(wa,"P",{});var rC=s(An);k5r=r(rC,"The model class to instantiate is selected based on the "),tbe=n(rC,"CODE",{});var Dbt=s(tbe);S5r=r(Dbt,"model_type"),Dbt.forEach(t),R5r=r(rC,` property of the config object (either
passed as an argument or loaded from `),abe=n(rC,"CODE",{});var Gbt=s(abe);B5r=r(Gbt,"pretrained_model_name_or_path"),Gbt.forEach(t),P5r=r(rC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=n(rC,"CODE",{});var Obt=s(nbe);$5r=r(Obt,"pretrained_model_name_or_path"),Obt.forEach(t),I5r=r(rC,":"),rC.forEach(t),q5r=i(wa),K=n(wa,"UL",{});var re=s(K);V6=n(re,"LI",{});var kxe=s(V6);sbe=n(kxe,"STRONG",{});var Vbt=s(sbe);N5r=r(Vbt,"albert"),Vbt.forEach(t),j5r=r(kxe," \u2014 "),Wz=n(kxe,"A",{href:!0});var Xbt=s(Wz);D5r=r(Xbt,"TFAlbertForQuestionAnswering"),Xbt.forEach(t),G5r=r(kxe," (ALBERT model)"),kxe.forEach(t),O5r=i(re),X6=n(re,"LI",{});var Sxe=s(X6);lbe=n(Sxe,"STRONG",{});var zbt=s(lbe);V5r=r(zbt,"bert"),zbt.forEach(t),X5r=r(Sxe," \u2014 "),Hz=n(Sxe,"A",{href:!0});var Qbt=s(Hz);z5r=r(Qbt,"TFBertForQuestionAnswering"),Qbt.forEach(t),Q5r=r(Sxe," (BERT model)"),Sxe.forEach(t),W5r=i(re),z6=n(re,"LI",{});var Rxe=s(z6);ibe=n(Rxe,"STRONG",{});var Wbt=s(ibe);H5r=r(Wbt,"camembert"),Wbt.forEach(t),U5r=r(Rxe," \u2014 "),Uz=n(Rxe,"A",{href:!0});var Hbt=s(Uz);J5r=r(Hbt,"TFCamembertForQuestionAnswering"),Hbt.forEach(t),Y5r=r(Rxe," (CamemBERT model)"),Rxe.forEach(t),K5r=i(re),Q6=n(re,"LI",{});var Bxe=s(Q6);dbe=n(Bxe,"STRONG",{});var Ubt=s(dbe);Z5r=r(Ubt,"convbert"),Ubt.forEach(t),e3r=r(Bxe," \u2014 "),Jz=n(Bxe,"A",{href:!0});var Jbt=s(Jz);o3r=r(Jbt,"TFConvBertForQuestionAnswering"),Jbt.forEach(t),r3r=r(Bxe," (ConvBERT model)"),Bxe.forEach(t),t3r=i(re),W6=n(re,"LI",{});var Pxe=s(W6);cbe=n(Pxe,"STRONG",{});var Ybt=s(cbe);a3r=r(Ybt,"deberta"),Ybt.forEach(t),n3r=r(Pxe," \u2014 "),Yz=n(Pxe,"A",{href:!0});var Kbt=s(Yz);s3r=r(Kbt,"TFDebertaForQuestionAnswering"),Kbt.forEach(t),l3r=r(Pxe," (DeBERTa model)"),Pxe.forEach(t),i3r=i(re),H6=n(re,"LI",{});var $xe=s(H6);fbe=n($xe,"STRONG",{});var Zbt=s(fbe);d3r=r(Zbt,"deberta-v2"),Zbt.forEach(t),c3r=r($xe," \u2014 "),Kz=n($xe,"A",{href:!0});var e5t=s(Kz);f3r=r(e5t,"TFDebertaV2ForQuestionAnswering"),e5t.forEach(t),m3r=r($xe," (DeBERTa-v2 model)"),$xe.forEach(t),g3r=i(re),U6=n(re,"LI",{});var Ixe=s(U6);mbe=n(Ixe,"STRONG",{});var o5t=s(mbe);h3r=r(o5t,"distilbert"),o5t.forEach(t),p3r=r(Ixe," \u2014 "),Zz=n(Ixe,"A",{href:!0});var r5t=s(Zz);_3r=r(r5t,"TFDistilBertForQuestionAnswering"),r5t.forEach(t),u3r=r(Ixe," (DistilBERT model)"),Ixe.forEach(t),b3r=i(re),J6=n(re,"LI",{});var qxe=s(J6);gbe=n(qxe,"STRONG",{});var t5t=s(gbe);F3r=r(t5t,"electra"),t5t.forEach(t),v3r=r(qxe," \u2014 "),eQ=n(qxe,"A",{href:!0});var a5t=s(eQ);T3r=r(a5t,"TFElectraForQuestionAnswering"),a5t.forEach(t),M3r=r(qxe," (ELECTRA model)"),qxe.forEach(t),E3r=i(re),Y6=n(re,"LI",{});var Nxe=s(Y6);hbe=n(Nxe,"STRONG",{});var n5t=s(hbe);C3r=r(n5t,"flaubert"),n5t.forEach(t),w3r=r(Nxe," \u2014 "),oQ=n(Nxe,"A",{href:!0});var s5t=s(oQ);A3r=r(s5t,"TFFlaubertForQuestionAnsweringSimple"),s5t.forEach(t),y3r=r(Nxe," (FlauBERT model)"),Nxe.forEach(t),L3r=i(re),K6=n(re,"LI",{});var jxe=s(K6);pbe=n(jxe,"STRONG",{});var l5t=s(pbe);x3r=r(l5t,"funnel"),l5t.forEach(t),k3r=r(jxe," \u2014 "),rQ=n(jxe,"A",{href:!0});var i5t=s(rQ);S3r=r(i5t,"TFFunnelForQuestionAnswering"),i5t.forEach(t),R3r=r(jxe," (Funnel Transformer model)"),jxe.forEach(t),B3r=i(re),Z6=n(re,"LI",{});var Dxe=s(Z6);_be=n(Dxe,"STRONG",{});var d5t=s(_be);P3r=r(d5t,"gptj"),d5t.forEach(t),$3r=r(Dxe," \u2014 "),tQ=n(Dxe,"A",{href:!0});var c5t=s(tQ);I3r=r(c5t,"TFGPTJForQuestionAnswering"),c5t.forEach(t),q3r=r(Dxe," (GPT-J model)"),Dxe.forEach(t),N3r=i(re),eT=n(re,"LI",{});var Gxe=s(eT);ube=n(Gxe,"STRONG",{});var f5t=s(ube);j3r=r(f5t,"longformer"),f5t.forEach(t),D3r=r(Gxe," \u2014 "),aQ=n(Gxe,"A",{href:!0});var m5t=s(aQ);G3r=r(m5t,"TFLongformerForQuestionAnswering"),m5t.forEach(t),O3r=r(Gxe," (Longformer model)"),Gxe.forEach(t),V3r=i(re),oT=n(re,"LI",{});var Oxe=s(oT);bbe=n(Oxe,"STRONG",{});var g5t=s(bbe);X3r=r(g5t,"mobilebert"),g5t.forEach(t),z3r=r(Oxe," \u2014 "),nQ=n(Oxe,"A",{href:!0});var h5t=s(nQ);Q3r=r(h5t,"TFMobileBertForQuestionAnswering"),h5t.forEach(t),W3r=r(Oxe," (MobileBERT model)"),Oxe.forEach(t),H3r=i(re),rT=n(re,"LI",{});var Vxe=s(rT);Fbe=n(Vxe,"STRONG",{});var p5t=s(Fbe);U3r=r(p5t,"mpnet"),p5t.forEach(t),J3r=r(Vxe," \u2014 "),sQ=n(Vxe,"A",{href:!0});var _5t=s(sQ);Y3r=r(_5t,"TFMPNetForQuestionAnswering"),_5t.forEach(t),K3r=r(Vxe," (MPNet model)"),Vxe.forEach(t),Z3r=i(re),tT=n(re,"LI",{});var Xxe=s(tT);vbe=n(Xxe,"STRONG",{});var u5t=s(vbe);e2r=r(u5t,"rembert"),u5t.forEach(t),o2r=r(Xxe," \u2014 "),lQ=n(Xxe,"A",{href:!0});var b5t=s(lQ);r2r=r(b5t,"TFRemBertForQuestionAnswering"),b5t.forEach(t),t2r=r(Xxe," (RemBERT model)"),Xxe.forEach(t),a2r=i(re),aT=n(re,"LI",{});var zxe=s(aT);Tbe=n(zxe,"STRONG",{});var F5t=s(Tbe);n2r=r(F5t,"roberta"),F5t.forEach(t),s2r=r(zxe," \u2014 "),iQ=n(zxe,"A",{href:!0});var v5t=s(iQ);l2r=r(v5t,"TFRobertaForQuestionAnswering"),v5t.forEach(t),i2r=r(zxe," (RoBERTa model)"),zxe.forEach(t),d2r=i(re),nT=n(re,"LI",{});var Qxe=s(nT);Mbe=n(Qxe,"STRONG",{});var T5t=s(Mbe);c2r=r(T5t,"roformer"),T5t.forEach(t),f2r=r(Qxe," \u2014 "),dQ=n(Qxe,"A",{href:!0});var M5t=s(dQ);m2r=r(M5t,"TFRoFormerForQuestionAnswering"),M5t.forEach(t),g2r=r(Qxe," (RoFormer model)"),Qxe.forEach(t),h2r=i(re),sT=n(re,"LI",{});var Wxe=s(sT);Ebe=n(Wxe,"STRONG",{});var E5t=s(Ebe);p2r=r(E5t,"xlm"),E5t.forEach(t),_2r=r(Wxe," \u2014 "),cQ=n(Wxe,"A",{href:!0});var C5t=s(cQ);u2r=r(C5t,"TFXLMForQuestionAnsweringSimple"),C5t.forEach(t),b2r=r(Wxe," (XLM model)"),Wxe.forEach(t),F2r=i(re),lT=n(re,"LI",{});var Hxe=s(lT);Cbe=n(Hxe,"STRONG",{});var w5t=s(Cbe);v2r=r(w5t,"xlm-roberta"),w5t.forEach(t),T2r=r(Hxe," \u2014 "),fQ=n(Hxe,"A",{href:!0});var A5t=s(fQ);M2r=r(A5t,"TFXLMRobertaForQuestionAnswering"),A5t.forEach(t),E2r=r(Hxe," (XLM-RoBERTa model)"),Hxe.forEach(t),C2r=i(re),iT=n(re,"LI",{});var Uxe=s(iT);wbe=n(Uxe,"STRONG",{});var y5t=s(wbe);w2r=r(y5t,"xlnet"),y5t.forEach(t),A2r=r(Uxe," \u2014 "),mQ=n(Uxe,"A",{href:!0});var L5t=s(mQ);y2r=r(L5t,"TFXLNetForQuestionAnsweringSimple"),L5t.forEach(t),L2r=r(Uxe," (XLNet model)"),Uxe.forEach(t),re.forEach(t),x2r=i(wa),Abe=n(wa,"P",{});var x5t=s(Abe);k2r=r(x5t,"Examples:"),x5t.forEach(t),S2r=i(wa),m(vL.$$.fragment,wa),wa.forEach(t),ni.forEach(t),bBe=i(c),Qc=n(c,"H2",{class:!0});var x$e=s(Qc);dT=n(x$e,"A",{id:!0,class:!0,href:!0});var k5t=s(dT);ybe=n(k5t,"SPAN",{});var S5t=s(ybe);m(TL.$$.fragment,S5t),S5t.forEach(t),k5t.forEach(t),R2r=i(x$e),Lbe=n(x$e,"SPAN",{});var R5t=s(Lbe);B2r=r(R5t,"TFAutoModelForVision2Seq"),R5t.forEach(t),x$e.forEach(t),FBe=i(c),kr=n(c,"DIV",{class:!0});var li=s(kr);m(ML.$$.fragment,li),P2r=i(li),Wc=n(li,"P",{});var pJ=s(Wc);$2r=r(pJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gQ=n(pJ,"A",{href:!0});var B5t=s(gQ);I2r=r(B5t,"from_pretrained()"),B5t.forEach(t),q2r=r(pJ," class method or the "),hQ=n(pJ,"A",{href:!0});var P5t=s(hQ);N2r=r(P5t,"from_config()"),P5t.forEach(t),j2r=r(pJ,` class
method.`),pJ.forEach(t),D2r=i(li),EL=n(li,"P",{});var k$e=s(EL);G2r=r(k$e,"This class cannot be instantiated directly using "),xbe=n(k$e,"CODE",{});var $5t=s(xbe);O2r=r($5t,"__init__()"),$5t.forEach(t),V2r=r(k$e," (throws an error)."),k$e.forEach(t),X2r=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);m(CL.$$.fragment,ii),z2r=i(ii),kbe=n(ii,"P",{});var I5t=s(kbe);Q2r=r(I5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),I5t.forEach(t),W2r=i(ii),Hc=n(ii,"P",{});var _J=s(Hc);H2r=r(_J,`Note:
Loading a model from its configuration file does `),Sbe=n(_J,"STRONG",{});var q5t=s(Sbe);U2r=r(q5t,"not"),q5t.forEach(t),J2r=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=n(_J,"A",{href:!0});var N5t=s(pQ);Y2r=r(N5t,"from_pretrained()"),N5t.forEach(t),K2r=r(_J," to load the model weights."),_J.forEach(t),Z2r=i(ii),Rbe=n(ii,"P",{});var j5t=s(Rbe);eFr=r(j5t,"Examples:"),j5t.forEach(t),oFr=i(ii),m(wL.$$.fragment,ii),ii.forEach(t),rFr=i(li),wo=n(li,"DIV",{class:!0});var Aa=s(wo);m(AL.$$.fragment,Aa),tFr=i(Aa),Bbe=n(Aa,"P",{});var D5t=s(Bbe);aFr=r(D5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),D5t.forEach(t),nFr=i(Aa),yn=n(Aa,"P",{});var tC=s(yn);sFr=r(tC,"The model class to instantiate is selected based on the "),Pbe=n(tC,"CODE",{});var G5t=s(Pbe);lFr=r(G5t,"model_type"),G5t.forEach(t),iFr=r(tC,` property of the config object (either
passed as an argument or loaded from `),$be=n(tC,"CODE",{});var O5t=s($be);dFr=r(O5t,"pretrained_model_name_or_path"),O5t.forEach(t),cFr=r(tC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=n(tC,"CODE",{});var V5t=s(Ibe);fFr=r(V5t,"pretrained_model_name_or_path"),V5t.forEach(t),mFr=r(tC,":"),tC.forEach(t),gFr=i(Aa),qbe=n(Aa,"UL",{});var X5t=s(qbe);cT=n(X5t,"LI",{});var Jxe=s(cT);Nbe=n(Jxe,"STRONG",{});var z5t=s(Nbe);hFr=r(z5t,"vision-encoder-decoder"),z5t.forEach(t),pFr=r(Jxe," \u2014 "),_Q=n(Jxe,"A",{href:!0});var Q5t=s(_Q);_Fr=r(Q5t,"TFVisionEncoderDecoderModel"),Q5t.forEach(t),uFr=r(Jxe," (Vision Encoder decoder model)"),Jxe.forEach(t),X5t.forEach(t),bFr=i(Aa),jbe=n(Aa,"P",{});var W5t=s(jbe);FFr=r(W5t,"Examples:"),W5t.forEach(t),vFr=i(Aa),m(yL.$$.fragment,Aa),Aa.forEach(t),li.forEach(t),vBe=i(c),Uc=n(c,"H2",{class:!0});var S$e=s(Uc);fT=n(S$e,"A",{id:!0,class:!0,href:!0});var H5t=s(fT);Dbe=n(H5t,"SPAN",{});var U5t=s(Dbe);m(LL.$$.fragment,U5t),U5t.forEach(t),H5t.forEach(t),TFr=i(S$e),Gbe=n(S$e,"SPAN",{});var J5t=s(Gbe);MFr=r(J5t,"TFAutoModelForSpeechSeq2Seq"),J5t.forEach(t),S$e.forEach(t),TBe=i(c),Sr=n(c,"DIV",{class:!0});var di=s(Sr);m(xL.$$.fragment,di),EFr=i(di),Jc=n(di,"P",{});var uJ=s(Jc);CFr=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uQ=n(uJ,"A",{href:!0});var Y5t=s(uQ);wFr=r(Y5t,"from_pretrained()"),Y5t.forEach(t),AFr=r(uJ," class method or the "),bQ=n(uJ,"A",{href:!0});var K5t=s(bQ);yFr=r(K5t,"from_config()"),K5t.forEach(t),LFr=r(uJ,` class
method.`),uJ.forEach(t),xFr=i(di),kL=n(di,"P",{});var R$e=s(kL);kFr=r(R$e,"This class cannot be instantiated directly using "),Obe=n(R$e,"CODE",{});var Z5t=s(Obe);SFr=r(Z5t,"__init__()"),Z5t.forEach(t),RFr=r(R$e," (throws an error)."),R$e.forEach(t),BFr=i(di),wt=n(di,"DIV",{class:!0});var ci=s(wt);m(SL.$$.fragment,ci),PFr=i(ci),Vbe=n(ci,"P",{});var e3t=s(Vbe);$Fr=r(e3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),e3t.forEach(t),IFr=i(ci),Yc=n(ci,"P",{});var bJ=s(Yc);qFr=r(bJ,`Note:
Loading a model from its configuration file does `),Xbe=n(bJ,"STRONG",{});var o3t=s(Xbe);NFr=r(o3t,"not"),o3t.forEach(t),jFr=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(bJ,"A",{href:!0});var r3t=s(FQ);DFr=r(r3t,"from_pretrained()"),r3t.forEach(t),GFr=r(bJ," to load the model weights."),bJ.forEach(t),OFr=i(ci),zbe=n(ci,"P",{});var t3t=s(zbe);VFr=r(t3t,"Examples:"),t3t.forEach(t),XFr=i(ci),m(RL.$$.fragment,ci),ci.forEach(t),zFr=i(di),Ao=n(di,"DIV",{class:!0});var ya=s(Ao);m(BL.$$.fragment,ya),QFr=i(ya),Qbe=n(ya,"P",{});var a3t=s(Qbe);WFr=r(a3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),a3t.forEach(t),HFr=i(ya),Ln=n(ya,"P",{});var aC=s(Ln);UFr=r(aC,"The model class to instantiate is selected based on the "),Wbe=n(aC,"CODE",{});var n3t=s(Wbe);JFr=r(n3t,"model_type"),n3t.forEach(t),YFr=r(aC,` property of the config object (either
passed as an argument or loaded from `),Hbe=n(aC,"CODE",{});var s3t=s(Hbe);KFr=r(s3t,"pretrained_model_name_or_path"),s3t.forEach(t),ZFr=r(aC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=n(aC,"CODE",{});var l3t=s(Ube);evr=r(l3t,"pretrained_model_name_or_path"),l3t.forEach(t),ovr=r(aC,":"),aC.forEach(t),rvr=i(ya),Jbe=n(ya,"UL",{});var i3t=s(Jbe);mT=n(i3t,"LI",{});var Yxe=s(mT);Ybe=n(Yxe,"STRONG",{});var d3t=s(Ybe);tvr=r(d3t,"speech_to_text"),d3t.forEach(t),avr=r(Yxe," \u2014 "),vQ=n(Yxe,"A",{href:!0});var c3t=s(vQ);nvr=r(c3t,"TFSpeech2TextForConditionalGeneration"),c3t.forEach(t),svr=r(Yxe," (Speech2Text model)"),Yxe.forEach(t),i3t.forEach(t),lvr=i(ya),Kbe=n(ya,"P",{});var f3t=s(Kbe);ivr=r(f3t,"Examples:"),f3t.forEach(t),dvr=i(ya),m(PL.$$.fragment,ya),ya.forEach(t),di.forEach(t),MBe=i(c),Kc=n(c,"H2",{class:!0});var B$e=s(Kc);gT=n(B$e,"A",{id:!0,class:!0,href:!0});var m3t=s(gT);Zbe=n(m3t,"SPAN",{});var g3t=s(Zbe);m($L.$$.fragment,g3t),g3t.forEach(t),m3t.forEach(t),cvr=i(B$e),e5e=n(B$e,"SPAN",{});var h3t=s(e5e);fvr=r(h3t,"FlaxAutoModel"),h3t.forEach(t),B$e.forEach(t),EBe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(IL.$$.fragment,fi),mvr=i(fi),Zc=n(fi,"P",{});var FJ=s(Zc);gvr=r(FJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TQ=n(FJ,"A",{href:!0});var p3t=s(TQ);hvr=r(p3t,"from_pretrained()"),p3t.forEach(t),pvr=r(FJ," class method or the "),MQ=n(FJ,"A",{href:!0});var _3t=s(MQ);_vr=r(_3t,"from_config()"),_3t.forEach(t),uvr=r(FJ,` class
method.`),FJ.forEach(t),bvr=i(fi),qL=n(fi,"P",{});var P$e=s(qL);Fvr=r(P$e,"This class cannot be instantiated directly using "),o5e=n(P$e,"CODE",{});var u3t=s(o5e);vvr=r(u3t,"__init__()"),u3t.forEach(t),Tvr=r(P$e," (throws an error)."),P$e.forEach(t),Mvr=i(fi),At=n(fi,"DIV",{class:!0});var mi=s(At);m(NL.$$.fragment,mi),Evr=i(mi),r5e=n(mi,"P",{});var b3t=s(r5e);Cvr=r(b3t,"Instantiates one of the base model classes of the library from a configuration."),b3t.forEach(t),wvr=i(mi),ef=n(mi,"P",{});var vJ=s(ef);Avr=r(vJ,`Note:
Loading a model from its configuration file does `),t5e=n(vJ,"STRONG",{});var F3t=s(t5e);yvr=r(F3t,"not"),F3t.forEach(t),Lvr=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=n(vJ,"A",{href:!0});var v3t=s(EQ);xvr=r(v3t,"from_pretrained()"),v3t.forEach(t),kvr=r(vJ," to load the model weights."),vJ.forEach(t),Svr=i(mi),a5e=n(mi,"P",{});var T3t=s(a5e);Rvr=r(T3t,"Examples:"),T3t.forEach(t),Bvr=i(mi),m(jL.$$.fragment,mi),mi.forEach(t),Pvr=i(fi),yo=n(fi,"DIV",{class:!0});var La=s(yo);m(DL.$$.fragment,La),$vr=i(La),n5e=n(La,"P",{});var M3t=s(n5e);Ivr=r(M3t,"Instantiate one of the base model classes of the library from a pretrained model."),M3t.forEach(t),qvr=i(La),xn=n(La,"P",{});var nC=s(xn);Nvr=r(nC,"The model class to instantiate is selected based on the "),s5e=n(nC,"CODE",{});var E3t=s(s5e);jvr=r(E3t,"model_type"),E3t.forEach(t),Dvr=r(nC,` property of the config object (either
passed as an argument or loaded from `),l5e=n(nC,"CODE",{});var C3t=s(l5e);Gvr=r(C3t,"pretrained_model_name_or_path"),C3t.forEach(t),Ovr=r(nC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=n(nC,"CODE",{});var w3t=s(i5e);Vvr=r(w3t,"pretrained_model_name_or_path"),w3t.forEach(t),Xvr=r(nC,":"),nC.forEach(t),zvr=i(La),z=n(La,"UL",{});var W=s(z);hT=n(W,"LI",{});var Kxe=s(hT);d5e=n(Kxe,"STRONG",{});var A3t=s(d5e);Qvr=r(A3t,"albert"),A3t.forEach(t),Wvr=r(Kxe," \u2014 "),CQ=n(Kxe,"A",{href:!0});var y3t=s(CQ);Hvr=r(y3t,"FlaxAlbertModel"),y3t.forEach(t),Uvr=r(Kxe," (ALBERT model)"),Kxe.forEach(t),Jvr=i(W),pT=n(W,"LI",{});var Zxe=s(pT);c5e=n(Zxe,"STRONG",{});var L3t=s(c5e);Yvr=r(L3t,"bart"),L3t.forEach(t),Kvr=r(Zxe," \u2014 "),wQ=n(Zxe,"A",{href:!0});var x3t=s(wQ);Zvr=r(x3t,"FlaxBartModel"),x3t.forEach(t),e6r=r(Zxe," (BART model)"),Zxe.forEach(t),o6r=i(W),_T=n(W,"LI",{});var eke=s(_T);f5e=n(eke,"STRONG",{});var k3t=s(f5e);r6r=r(k3t,"beit"),k3t.forEach(t),t6r=r(eke," \u2014 "),AQ=n(eke,"A",{href:!0});var S3t=s(AQ);a6r=r(S3t,"FlaxBeitModel"),S3t.forEach(t),n6r=r(eke," (BEiT model)"),eke.forEach(t),s6r=i(W),uT=n(W,"LI",{});var oke=s(uT);m5e=n(oke,"STRONG",{});var R3t=s(m5e);l6r=r(R3t,"bert"),R3t.forEach(t),i6r=r(oke," \u2014 "),yQ=n(oke,"A",{href:!0});var B3t=s(yQ);d6r=r(B3t,"FlaxBertModel"),B3t.forEach(t),c6r=r(oke," (BERT model)"),oke.forEach(t),f6r=i(W),bT=n(W,"LI",{});var rke=s(bT);g5e=n(rke,"STRONG",{});var P3t=s(g5e);m6r=r(P3t,"big_bird"),P3t.forEach(t),g6r=r(rke," \u2014 "),LQ=n(rke,"A",{href:!0});var $3t=s(LQ);h6r=r($3t,"FlaxBigBirdModel"),$3t.forEach(t),p6r=r(rke," (BigBird model)"),rke.forEach(t),_6r=i(W),FT=n(W,"LI",{});var tke=s(FT);h5e=n(tke,"STRONG",{});var I3t=s(h5e);u6r=r(I3t,"blenderbot"),I3t.forEach(t),b6r=r(tke," \u2014 "),xQ=n(tke,"A",{href:!0});var q3t=s(xQ);F6r=r(q3t,"FlaxBlenderbotModel"),q3t.forEach(t),v6r=r(tke," (Blenderbot model)"),tke.forEach(t),T6r=i(W),vT=n(W,"LI",{});var ake=s(vT);p5e=n(ake,"STRONG",{});var N3t=s(p5e);M6r=r(N3t,"blenderbot-small"),N3t.forEach(t),E6r=r(ake," \u2014 "),kQ=n(ake,"A",{href:!0});var j3t=s(kQ);C6r=r(j3t,"FlaxBlenderbotSmallModel"),j3t.forEach(t),w6r=r(ake," (BlenderbotSmall model)"),ake.forEach(t),A6r=i(W),TT=n(W,"LI",{});var nke=s(TT);_5e=n(nke,"STRONG",{});var D3t=s(_5e);y6r=r(D3t,"clip"),D3t.forEach(t),L6r=r(nke," \u2014 "),SQ=n(nke,"A",{href:!0});var G3t=s(SQ);x6r=r(G3t,"FlaxCLIPModel"),G3t.forEach(t),k6r=r(nke," (CLIP model)"),nke.forEach(t),S6r=i(W),MT=n(W,"LI",{});var ske=s(MT);u5e=n(ske,"STRONG",{});var O3t=s(u5e);R6r=r(O3t,"distilbert"),O3t.forEach(t),B6r=r(ske," \u2014 "),RQ=n(ske,"A",{href:!0});var V3t=s(RQ);P6r=r(V3t,"FlaxDistilBertModel"),V3t.forEach(t),$6r=r(ske," (DistilBERT model)"),ske.forEach(t),I6r=i(W),ET=n(W,"LI",{});var lke=s(ET);b5e=n(lke,"STRONG",{});var X3t=s(b5e);q6r=r(X3t,"electra"),X3t.forEach(t),N6r=r(lke," \u2014 "),BQ=n(lke,"A",{href:!0});var z3t=s(BQ);j6r=r(z3t,"FlaxElectraModel"),z3t.forEach(t),D6r=r(lke," (ELECTRA model)"),lke.forEach(t),G6r=i(W),CT=n(W,"LI",{});var ike=s(CT);F5e=n(ike,"STRONG",{});var Q3t=s(F5e);O6r=r(Q3t,"gpt2"),Q3t.forEach(t),V6r=r(ike," \u2014 "),PQ=n(ike,"A",{href:!0});var W3t=s(PQ);X6r=r(W3t,"FlaxGPT2Model"),W3t.forEach(t),z6r=r(ike," (OpenAI GPT-2 model)"),ike.forEach(t),Q6r=i(W),wT=n(W,"LI",{});var dke=s(wT);v5e=n(dke,"STRONG",{});var H3t=s(v5e);W6r=r(H3t,"gpt_neo"),H3t.forEach(t),H6r=r(dke," \u2014 "),$Q=n(dke,"A",{href:!0});var U3t=s($Q);U6r=r(U3t,"FlaxGPTNeoModel"),U3t.forEach(t),J6r=r(dke," (GPT Neo model)"),dke.forEach(t),Y6r=i(W),AT=n(W,"LI",{});var cke=s(AT);T5e=n(cke,"STRONG",{});var J3t=s(T5e);K6r=r(J3t,"gptj"),J3t.forEach(t),Z6r=r(cke," \u2014 "),IQ=n(cke,"A",{href:!0});var Y3t=s(IQ);eTr=r(Y3t,"FlaxGPTJModel"),Y3t.forEach(t),oTr=r(cke," (GPT-J model)"),cke.forEach(t),rTr=i(W),yT=n(W,"LI",{});var fke=s(yT);M5e=n(fke,"STRONG",{});var K3t=s(M5e);tTr=r(K3t,"marian"),K3t.forEach(t),aTr=r(fke," \u2014 "),qQ=n(fke,"A",{href:!0});var Z3t=s(qQ);nTr=r(Z3t,"FlaxMarianModel"),Z3t.forEach(t),sTr=r(fke," (Marian model)"),fke.forEach(t),lTr=i(W),LT=n(W,"LI",{});var mke=s(LT);E5e=n(mke,"STRONG",{});var e2t=s(E5e);iTr=r(e2t,"mbart"),e2t.forEach(t),dTr=r(mke," \u2014 "),NQ=n(mke,"A",{href:!0});var o2t=s(NQ);cTr=r(o2t,"FlaxMBartModel"),o2t.forEach(t),fTr=r(mke," (mBART model)"),mke.forEach(t),mTr=i(W),xT=n(W,"LI",{});var gke=s(xT);C5e=n(gke,"STRONG",{});var r2t=s(C5e);gTr=r(r2t,"mt5"),r2t.forEach(t),hTr=r(gke," \u2014 "),jQ=n(gke,"A",{href:!0});var t2t=s(jQ);pTr=r(t2t,"FlaxMT5Model"),t2t.forEach(t),_Tr=r(gke," (mT5 model)"),gke.forEach(t),uTr=i(W),kT=n(W,"LI",{});var hke=s(kT);w5e=n(hke,"STRONG",{});var a2t=s(w5e);bTr=r(a2t,"pegasus"),a2t.forEach(t),FTr=r(hke," \u2014 "),DQ=n(hke,"A",{href:!0});var n2t=s(DQ);vTr=r(n2t,"FlaxPegasusModel"),n2t.forEach(t),TTr=r(hke," (Pegasus model)"),hke.forEach(t),MTr=i(W),ST=n(W,"LI",{});var pke=s(ST);A5e=n(pke,"STRONG",{});var s2t=s(A5e);ETr=r(s2t,"roberta"),s2t.forEach(t),CTr=r(pke," \u2014 "),GQ=n(pke,"A",{href:!0});var l2t=s(GQ);wTr=r(l2t,"FlaxRobertaModel"),l2t.forEach(t),ATr=r(pke," (RoBERTa model)"),pke.forEach(t),yTr=i(W),RT=n(W,"LI",{});var _ke=s(RT);y5e=n(_ke,"STRONG",{});var i2t=s(y5e);LTr=r(i2t,"roformer"),i2t.forEach(t),xTr=r(_ke," \u2014 "),OQ=n(_ke,"A",{href:!0});var d2t=s(OQ);kTr=r(d2t,"FlaxRoFormerModel"),d2t.forEach(t),STr=r(_ke," (RoFormer model)"),_ke.forEach(t),RTr=i(W),BT=n(W,"LI",{});var uke=s(BT);L5e=n(uke,"STRONG",{});var c2t=s(L5e);BTr=r(c2t,"t5"),c2t.forEach(t),PTr=r(uke," \u2014 "),VQ=n(uke,"A",{href:!0});var f2t=s(VQ);$Tr=r(f2t,"FlaxT5Model"),f2t.forEach(t),ITr=r(uke," (T5 model)"),uke.forEach(t),qTr=i(W),PT=n(W,"LI",{});var bke=s(PT);x5e=n(bke,"STRONG",{});var m2t=s(x5e);NTr=r(m2t,"vision-text-dual-encoder"),m2t.forEach(t),jTr=r(bke," \u2014 "),XQ=n(bke,"A",{href:!0});var g2t=s(XQ);DTr=r(g2t,"FlaxVisionTextDualEncoderModel"),g2t.forEach(t),GTr=r(bke," (VisionTextDualEncoder model)"),bke.forEach(t),OTr=i(W),$T=n(W,"LI",{});var Fke=s($T);k5e=n(Fke,"STRONG",{});var h2t=s(k5e);VTr=r(h2t,"vit"),h2t.forEach(t),XTr=r(Fke," \u2014 "),zQ=n(Fke,"A",{href:!0});var p2t=s(zQ);zTr=r(p2t,"FlaxViTModel"),p2t.forEach(t),QTr=r(Fke," (ViT model)"),Fke.forEach(t),WTr=i(W),IT=n(W,"LI",{});var vke=s(IT);S5e=n(vke,"STRONG",{});var _2t=s(S5e);HTr=r(_2t,"wav2vec2"),_2t.forEach(t),UTr=r(vke," \u2014 "),QQ=n(vke,"A",{href:!0});var u2t=s(QQ);JTr=r(u2t,"FlaxWav2Vec2Model"),u2t.forEach(t),YTr=r(vke," (Wav2Vec2 model)"),vke.forEach(t),KTr=i(W),qT=n(W,"LI",{});var Tke=s(qT);R5e=n(Tke,"STRONG",{});var b2t=s(R5e);ZTr=r(b2t,"xglm"),b2t.forEach(t),eMr=r(Tke," \u2014 "),WQ=n(Tke,"A",{href:!0});var F2t=s(WQ);oMr=r(F2t,"FlaxXGLMModel"),F2t.forEach(t),rMr=r(Tke," (XGLM model)"),Tke.forEach(t),tMr=i(W),NT=n(W,"LI",{});var Mke=s(NT);B5e=n(Mke,"STRONG",{});var v2t=s(B5e);aMr=r(v2t,"xlm-roberta"),v2t.forEach(t),nMr=r(Mke," \u2014 "),HQ=n(Mke,"A",{href:!0});var T2t=s(HQ);sMr=r(T2t,"FlaxXLMRobertaModel"),T2t.forEach(t),lMr=r(Mke," (XLM-RoBERTa model)"),Mke.forEach(t),W.forEach(t),iMr=i(La),P5e=n(La,"P",{});var M2t=s(P5e);dMr=r(M2t,"Examples:"),M2t.forEach(t),cMr=i(La),m(GL.$$.fragment,La),La.forEach(t),fi.forEach(t),CBe=i(c),of=n(c,"H2",{class:!0});var $$e=s(of);jT=n($$e,"A",{id:!0,class:!0,href:!0});var E2t=s(jT);$5e=n(E2t,"SPAN",{});var C2t=s($5e);m(OL.$$.fragment,C2t),C2t.forEach(t),E2t.forEach(t),fMr=i($$e),I5e=n($$e,"SPAN",{});var w2t=s(I5e);mMr=r(w2t,"FlaxAutoModelForCausalLM"),w2t.forEach(t),$$e.forEach(t),wBe=i(c),Br=n(c,"DIV",{class:!0});var gi=s(Br);m(VL.$$.fragment,gi),gMr=i(gi),rf=n(gi,"P",{});var TJ=s(rf);hMr=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),UQ=n(TJ,"A",{href:!0});var A2t=s(UQ);pMr=r(A2t,"from_pretrained()"),A2t.forEach(t),_Mr=r(TJ," class method or the "),JQ=n(TJ,"A",{href:!0});var y2t=s(JQ);uMr=r(y2t,"from_config()"),y2t.forEach(t),bMr=r(TJ,` class
method.`),TJ.forEach(t),FMr=i(gi),XL=n(gi,"P",{});var I$e=s(XL);vMr=r(I$e,"This class cannot be instantiated directly using "),q5e=n(I$e,"CODE",{});var L2t=s(q5e);TMr=r(L2t,"__init__()"),L2t.forEach(t),MMr=r(I$e," (throws an error)."),I$e.forEach(t),EMr=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);m(zL.$$.fragment,hi),CMr=i(hi),N5e=n(hi,"P",{});var x2t=s(N5e);wMr=r(x2t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),x2t.forEach(t),AMr=i(hi),tf=n(hi,"P",{});var MJ=s(tf);yMr=r(MJ,`Note:
Loading a model from its configuration file does `),j5e=n(MJ,"STRONG",{});var k2t=s(j5e);LMr=r(k2t,"not"),k2t.forEach(t),xMr=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=n(MJ,"A",{href:!0});var S2t=s(YQ);kMr=r(S2t,"from_pretrained()"),S2t.forEach(t),SMr=r(MJ," to load the model weights."),MJ.forEach(t),RMr=i(hi),D5e=n(hi,"P",{});var R2t=s(D5e);BMr=r(R2t,"Examples:"),R2t.forEach(t),PMr=i(hi),m(QL.$$.fragment,hi),hi.forEach(t),$Mr=i(gi),Lo=n(gi,"DIV",{class:!0});var xa=s(Lo);m(WL.$$.fragment,xa),IMr=i(xa),G5e=n(xa,"P",{});var B2t=s(G5e);qMr=r(B2t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),B2t.forEach(t),NMr=i(xa),kn=n(xa,"P",{});var sC=s(kn);jMr=r(sC,"The model class to instantiate is selected based on the "),O5e=n(sC,"CODE",{});var P2t=s(O5e);DMr=r(P2t,"model_type"),P2t.forEach(t),GMr=r(sC,` property of the config object (either
passed as an argument or loaded from `),V5e=n(sC,"CODE",{});var $2t=s(V5e);OMr=r($2t,"pretrained_model_name_or_path"),$2t.forEach(t),VMr=r(sC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X5e=n(sC,"CODE",{});var I2t=s(X5e);XMr=r(I2t,"pretrained_model_name_or_path"),I2t.forEach(t),zMr=r(sC,":"),sC.forEach(t),QMr=i(xa),ca=n(xa,"UL",{});var pi=s(ca);DT=n(pi,"LI",{});var Eke=s(DT);z5e=n(Eke,"STRONG",{});var q2t=s(z5e);WMr=r(q2t,"bart"),q2t.forEach(t),HMr=r(Eke," \u2014 "),KQ=n(Eke,"A",{href:!0});var N2t=s(KQ);UMr=r(N2t,"FlaxBartForCausalLM"),N2t.forEach(t),JMr=r(Eke," (BART model)"),Eke.forEach(t),YMr=i(pi),GT=n(pi,"LI",{});var Cke=s(GT);Q5e=n(Cke,"STRONG",{});var j2t=s(Q5e);KMr=r(j2t,"gpt2"),j2t.forEach(t),ZMr=r(Cke," \u2014 "),ZQ=n(Cke,"A",{href:!0});var D2t=s(ZQ);eEr=r(D2t,"FlaxGPT2LMHeadModel"),D2t.forEach(t),oEr=r(Cke," (OpenAI GPT-2 model)"),Cke.forEach(t),rEr=i(pi),OT=n(pi,"LI",{});var wke=s(OT);W5e=n(wke,"STRONG",{});var G2t=s(W5e);tEr=r(G2t,"gpt_neo"),G2t.forEach(t),aEr=r(wke," \u2014 "),eW=n(wke,"A",{href:!0});var O2t=s(eW);nEr=r(O2t,"FlaxGPTNeoForCausalLM"),O2t.forEach(t),sEr=r(wke," (GPT Neo model)"),wke.forEach(t),lEr=i(pi),VT=n(pi,"LI",{});var Ake=s(VT);H5e=n(Ake,"STRONG",{});var V2t=s(H5e);iEr=r(V2t,"gptj"),V2t.forEach(t),dEr=r(Ake," \u2014 "),oW=n(Ake,"A",{href:!0});var X2t=s(oW);cEr=r(X2t,"FlaxGPTJForCausalLM"),X2t.forEach(t),fEr=r(Ake," (GPT-J model)"),Ake.forEach(t),mEr=i(pi),XT=n(pi,"LI",{});var yke=s(XT);U5e=n(yke,"STRONG",{});var z2t=s(U5e);gEr=r(z2t,"xglm"),z2t.forEach(t),hEr=r(yke," \u2014 "),rW=n(yke,"A",{href:!0});var Q2t=s(rW);pEr=r(Q2t,"FlaxXGLMForCausalLM"),Q2t.forEach(t),_Er=r(yke," (XGLM model)"),yke.forEach(t),pi.forEach(t),uEr=i(xa),J5e=n(xa,"P",{});var W2t=s(J5e);bEr=r(W2t,"Examples:"),W2t.forEach(t),FEr=i(xa),m(HL.$$.fragment,xa),xa.forEach(t),gi.forEach(t),ABe=i(c),af=n(c,"H2",{class:!0});var q$e=s(af);zT=n(q$e,"A",{id:!0,class:!0,href:!0});var H2t=s(zT);Y5e=n(H2t,"SPAN",{});var U2t=s(Y5e);m(UL.$$.fragment,U2t),U2t.forEach(t),H2t.forEach(t),vEr=i(q$e),K5e=n(q$e,"SPAN",{});var J2t=s(K5e);TEr=r(J2t,"FlaxAutoModelForPreTraining"),J2t.forEach(t),q$e.forEach(t),yBe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(JL.$$.fragment,_i),MEr=i(_i),nf=n(_i,"P",{});var EJ=s(nf);EEr=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tW=n(EJ,"A",{href:!0});var Y2t=s(tW);CEr=r(Y2t,"from_pretrained()"),Y2t.forEach(t),wEr=r(EJ," class method or the "),aW=n(EJ,"A",{href:!0});var K2t=s(aW);AEr=r(K2t,"from_config()"),K2t.forEach(t),yEr=r(EJ,` class
method.`),EJ.forEach(t),LEr=i(_i),YL=n(_i,"P",{});var N$e=s(YL);xEr=r(N$e,"This class cannot be instantiated directly using "),Z5e=n(N$e,"CODE",{});var Z2t=s(Z5e);kEr=r(Z2t,"__init__()"),Z2t.forEach(t),SEr=r(N$e," (throws an error)."),N$e.forEach(t),REr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(KL.$$.fragment,ui),BEr=i(ui),e3e=n(ui,"P",{});var eFt=s(e3e);PEr=r(eFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),eFt.forEach(t),$Er=i(ui),sf=n(ui,"P",{});var CJ=s(sf);IEr=r(CJ,`Note:
Loading a model from its configuration file does `),o3e=n(CJ,"STRONG",{});var oFt=s(o3e);qEr=r(oFt,"not"),oFt.forEach(t),NEr=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=n(CJ,"A",{href:!0});var rFt=s(nW);jEr=r(rFt,"from_pretrained()"),rFt.forEach(t),DEr=r(CJ," to load the model weights."),CJ.forEach(t),GEr=i(ui),r3e=n(ui,"P",{});var tFt=s(r3e);OEr=r(tFt,"Examples:"),tFt.forEach(t),VEr=i(ui),m(ZL.$$.fragment,ui),ui.forEach(t),XEr=i(_i),xo=n(_i,"DIV",{class:!0});var ka=s(xo);m(e8.$$.fragment,ka),zEr=i(ka),t3e=n(ka,"P",{});var aFt=s(t3e);QEr=r(aFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),aFt.forEach(t),WEr=i(ka),Sn=n(ka,"P",{});var lC=s(Sn);HEr=r(lC,"The model class to instantiate is selected based on the "),a3e=n(lC,"CODE",{});var nFt=s(a3e);UEr=r(nFt,"model_type"),nFt.forEach(t),JEr=r(lC,` property of the config object (either
passed as an argument or loaded from `),n3e=n(lC,"CODE",{});var sFt=s(n3e);YEr=r(sFt,"pretrained_model_name_or_path"),sFt.forEach(t),KEr=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s3e=n(lC,"CODE",{});var lFt=s(s3e);ZEr=r(lFt,"pretrained_model_name_or_path"),lFt.forEach(t),eCr=r(lC,":"),lC.forEach(t),oCr=i(ka),fe=n(ka,"UL",{});var pe=s(fe);QT=n(pe,"LI",{});var Lke=s(QT);l3e=n(Lke,"STRONG",{});var iFt=s(l3e);rCr=r(iFt,"albert"),iFt.forEach(t),tCr=r(Lke," \u2014 "),sW=n(Lke,"A",{href:!0});var dFt=s(sW);aCr=r(dFt,"FlaxAlbertForPreTraining"),dFt.forEach(t),nCr=r(Lke," (ALBERT model)"),Lke.forEach(t),sCr=i(pe),WT=n(pe,"LI",{});var xke=s(WT);i3e=n(xke,"STRONG",{});var cFt=s(i3e);lCr=r(cFt,"bart"),cFt.forEach(t),iCr=r(xke," \u2014 "),lW=n(xke,"A",{href:!0});var fFt=s(lW);dCr=r(fFt,"FlaxBartForConditionalGeneration"),fFt.forEach(t),cCr=r(xke," (BART model)"),xke.forEach(t),fCr=i(pe),HT=n(pe,"LI",{});var kke=s(HT);d3e=n(kke,"STRONG",{});var mFt=s(d3e);mCr=r(mFt,"bert"),mFt.forEach(t),gCr=r(kke," \u2014 "),iW=n(kke,"A",{href:!0});var gFt=s(iW);hCr=r(gFt,"FlaxBertForPreTraining"),gFt.forEach(t),pCr=r(kke," (BERT model)"),kke.forEach(t),_Cr=i(pe),UT=n(pe,"LI",{});var Ske=s(UT);c3e=n(Ske,"STRONG",{});var hFt=s(c3e);uCr=r(hFt,"big_bird"),hFt.forEach(t),bCr=r(Ske," \u2014 "),dW=n(Ske,"A",{href:!0});var pFt=s(dW);FCr=r(pFt,"FlaxBigBirdForPreTraining"),pFt.forEach(t),vCr=r(Ske," (BigBird model)"),Ske.forEach(t),TCr=i(pe),JT=n(pe,"LI",{});var Rke=s(JT);f3e=n(Rke,"STRONG",{});var _Ft=s(f3e);MCr=r(_Ft,"electra"),_Ft.forEach(t),ECr=r(Rke," \u2014 "),cW=n(Rke,"A",{href:!0});var uFt=s(cW);CCr=r(uFt,"FlaxElectraForPreTraining"),uFt.forEach(t),wCr=r(Rke," (ELECTRA model)"),Rke.forEach(t),ACr=i(pe),YT=n(pe,"LI",{});var Bke=s(YT);m3e=n(Bke,"STRONG",{});var bFt=s(m3e);yCr=r(bFt,"mbart"),bFt.forEach(t),LCr=r(Bke," \u2014 "),fW=n(Bke,"A",{href:!0});var FFt=s(fW);xCr=r(FFt,"FlaxMBartForConditionalGeneration"),FFt.forEach(t),kCr=r(Bke," (mBART model)"),Bke.forEach(t),SCr=i(pe),KT=n(pe,"LI",{});var Pke=s(KT);g3e=n(Pke,"STRONG",{});var vFt=s(g3e);RCr=r(vFt,"mt5"),vFt.forEach(t),BCr=r(Pke," \u2014 "),mW=n(Pke,"A",{href:!0});var TFt=s(mW);PCr=r(TFt,"FlaxMT5ForConditionalGeneration"),TFt.forEach(t),$Cr=r(Pke," (mT5 model)"),Pke.forEach(t),ICr=i(pe),ZT=n(pe,"LI",{});var $ke=s(ZT);h3e=n($ke,"STRONG",{});var MFt=s(h3e);qCr=r(MFt,"roberta"),MFt.forEach(t),NCr=r($ke," \u2014 "),gW=n($ke,"A",{href:!0});var EFt=s(gW);jCr=r(EFt,"FlaxRobertaForMaskedLM"),EFt.forEach(t),DCr=r($ke," (RoBERTa model)"),$ke.forEach(t),GCr=i(pe),eM=n(pe,"LI",{});var Ike=s(eM);p3e=n(Ike,"STRONG",{});var CFt=s(p3e);OCr=r(CFt,"roformer"),CFt.forEach(t),VCr=r(Ike," \u2014 "),hW=n(Ike,"A",{href:!0});var wFt=s(hW);XCr=r(wFt,"FlaxRoFormerForMaskedLM"),wFt.forEach(t),zCr=r(Ike," (RoFormer model)"),Ike.forEach(t),QCr=i(pe),oM=n(pe,"LI",{});var qke=s(oM);_3e=n(qke,"STRONG",{});var AFt=s(_3e);WCr=r(AFt,"t5"),AFt.forEach(t),HCr=r(qke," \u2014 "),pW=n(qke,"A",{href:!0});var yFt=s(pW);UCr=r(yFt,"FlaxT5ForConditionalGeneration"),yFt.forEach(t),JCr=r(qke," (T5 model)"),qke.forEach(t),YCr=i(pe),rM=n(pe,"LI",{});var Nke=s(rM);u3e=n(Nke,"STRONG",{});var LFt=s(u3e);KCr=r(LFt,"wav2vec2"),LFt.forEach(t),ZCr=r(Nke," \u2014 "),_W=n(Nke,"A",{href:!0});var xFt=s(_W);ewr=r(xFt,"FlaxWav2Vec2ForPreTraining"),xFt.forEach(t),owr=r(Nke," (Wav2Vec2 model)"),Nke.forEach(t),rwr=i(pe),tM=n(pe,"LI",{});var jke=s(tM);b3e=n(jke,"STRONG",{});var kFt=s(b3e);twr=r(kFt,"xlm-roberta"),kFt.forEach(t),awr=r(jke," \u2014 "),uW=n(jke,"A",{href:!0});var SFt=s(uW);nwr=r(SFt,"FlaxXLMRobertaForMaskedLM"),SFt.forEach(t),swr=r(jke," (XLM-RoBERTa model)"),jke.forEach(t),pe.forEach(t),lwr=i(ka),F3e=n(ka,"P",{});var RFt=s(F3e);iwr=r(RFt,"Examples:"),RFt.forEach(t),dwr=i(ka),m(o8.$$.fragment,ka),ka.forEach(t),_i.forEach(t),LBe=i(c),lf=n(c,"H2",{class:!0});var j$e=s(lf);aM=n(j$e,"A",{id:!0,class:!0,href:!0});var BFt=s(aM);v3e=n(BFt,"SPAN",{});var PFt=s(v3e);m(r8.$$.fragment,PFt),PFt.forEach(t),BFt.forEach(t),cwr=i(j$e),T3e=n(j$e,"SPAN",{});var $Ft=s(T3e);fwr=r($Ft,"FlaxAutoModelForMaskedLM"),$Ft.forEach(t),j$e.forEach(t),xBe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(t8.$$.fragment,bi),mwr=i(bi),df=n(bi,"P",{});var wJ=s(df);gwr=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bW=n(wJ,"A",{href:!0});var IFt=s(bW);hwr=r(IFt,"from_pretrained()"),IFt.forEach(t),pwr=r(wJ," class method or the "),FW=n(wJ,"A",{href:!0});var qFt=s(FW);_wr=r(qFt,"from_config()"),qFt.forEach(t),uwr=r(wJ,` class
method.`),wJ.forEach(t),bwr=i(bi),a8=n(bi,"P",{});var D$e=s(a8);Fwr=r(D$e,"This class cannot be instantiated directly using "),M3e=n(D$e,"CODE",{});var NFt=s(M3e);vwr=r(NFt,"__init__()"),NFt.forEach(t),Twr=r(D$e," (throws an error)."),D$e.forEach(t),Mwr=i(bi),xt=n(bi,"DIV",{class:!0});var Fi=s(xt);m(n8.$$.fragment,Fi),Ewr=i(Fi),E3e=n(Fi,"P",{});var jFt=s(E3e);Cwr=r(jFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jFt.forEach(t),wwr=i(Fi),cf=n(Fi,"P",{});var AJ=s(cf);Awr=r(AJ,`Note:
Loading a model from its configuration file does `),C3e=n(AJ,"STRONG",{});var DFt=s(C3e);ywr=r(DFt,"not"),DFt.forEach(t),Lwr=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=n(AJ,"A",{href:!0});var GFt=s(vW);xwr=r(GFt,"from_pretrained()"),GFt.forEach(t),kwr=r(AJ," to load the model weights."),AJ.forEach(t),Swr=i(Fi),w3e=n(Fi,"P",{});var OFt=s(w3e);Rwr=r(OFt,"Examples:"),OFt.forEach(t),Bwr=i(Fi),m(s8.$$.fragment,Fi),Fi.forEach(t),Pwr=i(bi),ko=n(bi,"DIV",{class:!0});var Sa=s(ko);m(l8.$$.fragment,Sa),$wr=i(Sa),A3e=n(Sa,"P",{});var VFt=s(A3e);Iwr=r(VFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),VFt.forEach(t),qwr=i(Sa),Rn=n(Sa,"P",{});var iC=s(Rn);Nwr=r(iC,"The model class to instantiate is selected based on the "),y3e=n(iC,"CODE",{});var XFt=s(y3e);jwr=r(XFt,"model_type"),XFt.forEach(t),Dwr=r(iC,` property of the config object (either
passed as an argument or loaded from `),L3e=n(iC,"CODE",{});var zFt=s(L3e);Gwr=r(zFt,"pretrained_model_name_or_path"),zFt.forEach(t),Owr=r(iC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x3e=n(iC,"CODE",{});var QFt=s(x3e);Vwr=r(QFt,"pretrained_model_name_or_path"),QFt.forEach(t),Xwr=r(iC,":"),iC.forEach(t),zwr=i(Sa),be=n(Sa,"UL",{});var Ae=s(be);nM=n(Ae,"LI",{});var Dke=s(nM);k3e=n(Dke,"STRONG",{});var WFt=s(k3e);Qwr=r(WFt,"albert"),WFt.forEach(t),Wwr=r(Dke," \u2014 "),TW=n(Dke,"A",{href:!0});var HFt=s(TW);Hwr=r(HFt,"FlaxAlbertForMaskedLM"),HFt.forEach(t),Uwr=r(Dke," (ALBERT model)"),Dke.forEach(t),Jwr=i(Ae),sM=n(Ae,"LI",{});var Gke=s(sM);S3e=n(Gke,"STRONG",{});var UFt=s(S3e);Ywr=r(UFt,"bart"),UFt.forEach(t),Kwr=r(Gke," \u2014 "),MW=n(Gke,"A",{href:!0});var JFt=s(MW);Zwr=r(JFt,"FlaxBartForConditionalGeneration"),JFt.forEach(t),eAr=r(Gke," (BART model)"),Gke.forEach(t),oAr=i(Ae),lM=n(Ae,"LI",{});var Oke=s(lM);R3e=n(Oke,"STRONG",{});var YFt=s(R3e);rAr=r(YFt,"bert"),YFt.forEach(t),tAr=r(Oke," \u2014 "),EW=n(Oke,"A",{href:!0});var KFt=s(EW);aAr=r(KFt,"FlaxBertForMaskedLM"),KFt.forEach(t),nAr=r(Oke," (BERT model)"),Oke.forEach(t),sAr=i(Ae),iM=n(Ae,"LI",{});var Vke=s(iM);B3e=n(Vke,"STRONG",{});var ZFt=s(B3e);lAr=r(ZFt,"big_bird"),ZFt.forEach(t),iAr=r(Vke," \u2014 "),CW=n(Vke,"A",{href:!0});var evt=s(CW);dAr=r(evt,"FlaxBigBirdForMaskedLM"),evt.forEach(t),cAr=r(Vke," (BigBird model)"),Vke.forEach(t),fAr=i(Ae),dM=n(Ae,"LI",{});var Xke=s(dM);P3e=n(Xke,"STRONG",{});var ovt=s(P3e);mAr=r(ovt,"distilbert"),ovt.forEach(t),gAr=r(Xke," \u2014 "),wW=n(Xke,"A",{href:!0});var rvt=s(wW);hAr=r(rvt,"FlaxDistilBertForMaskedLM"),rvt.forEach(t),pAr=r(Xke," (DistilBERT model)"),Xke.forEach(t),_Ar=i(Ae),cM=n(Ae,"LI",{});var zke=s(cM);$3e=n(zke,"STRONG",{});var tvt=s($3e);uAr=r(tvt,"electra"),tvt.forEach(t),bAr=r(zke," \u2014 "),AW=n(zke,"A",{href:!0});var avt=s(AW);FAr=r(avt,"FlaxElectraForMaskedLM"),avt.forEach(t),vAr=r(zke," (ELECTRA model)"),zke.forEach(t),TAr=i(Ae),fM=n(Ae,"LI",{});var Qke=s(fM);I3e=n(Qke,"STRONG",{});var nvt=s(I3e);MAr=r(nvt,"mbart"),nvt.forEach(t),EAr=r(Qke," \u2014 "),yW=n(Qke,"A",{href:!0});var svt=s(yW);CAr=r(svt,"FlaxMBartForConditionalGeneration"),svt.forEach(t),wAr=r(Qke," (mBART model)"),Qke.forEach(t),AAr=i(Ae),mM=n(Ae,"LI",{});var Wke=s(mM);q3e=n(Wke,"STRONG",{});var lvt=s(q3e);yAr=r(lvt,"roberta"),lvt.forEach(t),LAr=r(Wke," \u2014 "),LW=n(Wke,"A",{href:!0});var ivt=s(LW);xAr=r(ivt,"FlaxRobertaForMaskedLM"),ivt.forEach(t),kAr=r(Wke," (RoBERTa model)"),Wke.forEach(t),SAr=i(Ae),gM=n(Ae,"LI",{});var Hke=s(gM);N3e=n(Hke,"STRONG",{});var dvt=s(N3e);RAr=r(dvt,"roformer"),dvt.forEach(t),BAr=r(Hke," \u2014 "),xW=n(Hke,"A",{href:!0});var cvt=s(xW);PAr=r(cvt,"FlaxRoFormerForMaskedLM"),cvt.forEach(t),$Ar=r(Hke," (RoFormer model)"),Hke.forEach(t),IAr=i(Ae),hM=n(Ae,"LI",{});var Uke=s(hM);j3e=n(Uke,"STRONG",{});var fvt=s(j3e);qAr=r(fvt,"xlm-roberta"),fvt.forEach(t),NAr=r(Uke," \u2014 "),kW=n(Uke,"A",{href:!0});var mvt=s(kW);jAr=r(mvt,"FlaxXLMRobertaForMaskedLM"),mvt.forEach(t),DAr=r(Uke," (XLM-RoBERTa model)"),Uke.forEach(t),Ae.forEach(t),GAr=i(Sa),D3e=n(Sa,"P",{});var gvt=s(D3e);OAr=r(gvt,"Examples:"),gvt.forEach(t),VAr=i(Sa),m(i8.$$.fragment,Sa),Sa.forEach(t),bi.forEach(t),kBe=i(c),ff=n(c,"H2",{class:!0});var G$e=s(ff);pM=n(G$e,"A",{id:!0,class:!0,href:!0});var hvt=s(pM);G3e=n(hvt,"SPAN",{});var pvt=s(G3e);m(d8.$$.fragment,pvt),pvt.forEach(t),hvt.forEach(t),XAr=i(G$e),O3e=n(G$e,"SPAN",{});var _vt=s(O3e);zAr=r(_vt,"FlaxAutoModelForSeq2SeqLM"),_vt.forEach(t),G$e.forEach(t),SBe=i(c),Ir=n(c,"DIV",{class:!0});var vi=s(Ir);m(c8.$$.fragment,vi),QAr=i(vi),mf=n(vi,"P",{});var yJ=s(mf);WAr=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),SW=n(yJ,"A",{href:!0});var uvt=s(SW);HAr=r(uvt,"from_pretrained()"),uvt.forEach(t),UAr=r(yJ," class method or the "),RW=n(yJ,"A",{href:!0});var bvt=s(RW);JAr=r(bvt,"from_config()"),bvt.forEach(t),YAr=r(yJ,` class
method.`),yJ.forEach(t),KAr=i(vi),f8=n(vi,"P",{});var O$e=s(f8);ZAr=r(O$e,"This class cannot be instantiated directly using "),V3e=n(O$e,"CODE",{});var Fvt=s(V3e);e0r=r(Fvt,"__init__()"),Fvt.forEach(t),o0r=r(O$e," (throws an error)."),O$e.forEach(t),r0r=i(vi),kt=n(vi,"DIV",{class:!0});var Ti=s(kt);m(m8.$$.fragment,Ti),t0r=i(Ti),X3e=n(Ti,"P",{});var vvt=s(X3e);a0r=r(vvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vvt.forEach(t),n0r=i(Ti),gf=n(Ti,"P",{});var LJ=s(gf);s0r=r(LJ,`Note:
Loading a model from its configuration file does `),z3e=n(LJ,"STRONG",{});var Tvt=s(z3e);l0r=r(Tvt,"not"),Tvt.forEach(t),i0r=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=n(LJ,"A",{href:!0});var Mvt=s(BW);d0r=r(Mvt,"from_pretrained()"),Mvt.forEach(t),c0r=r(LJ," to load the model weights."),LJ.forEach(t),f0r=i(Ti),Q3e=n(Ti,"P",{});var Evt=s(Q3e);m0r=r(Evt,"Examples:"),Evt.forEach(t),g0r=i(Ti),m(g8.$$.fragment,Ti),Ti.forEach(t),h0r=i(vi),So=n(vi,"DIV",{class:!0});var Ra=s(So);m(h8.$$.fragment,Ra),p0r=i(Ra),W3e=n(Ra,"P",{});var Cvt=s(W3e);_0r=r(Cvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Cvt.forEach(t),u0r=i(Ra),Bn=n(Ra,"P",{});var dC=s(Bn);b0r=r(dC,"The model class to instantiate is selected based on the "),H3e=n(dC,"CODE",{});var wvt=s(H3e);F0r=r(wvt,"model_type"),wvt.forEach(t),v0r=r(dC,` property of the config object (either
passed as an argument or loaded from `),U3e=n(dC,"CODE",{});var Avt=s(U3e);T0r=r(Avt,"pretrained_model_name_or_path"),Avt.forEach(t),M0r=r(dC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J3e=n(dC,"CODE",{});var yvt=s(J3e);E0r=r(yvt,"pretrained_model_name_or_path"),yvt.forEach(t),C0r=r(dC,":"),dC.forEach(t),w0r=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);_M=n(so,"LI",{});var Jke=s(_M);Y3e=n(Jke,"STRONG",{});var Lvt=s(Y3e);A0r=r(Lvt,"bart"),Lvt.forEach(t),y0r=r(Jke," \u2014 "),PW=n(Jke,"A",{href:!0});var xvt=s(PW);L0r=r(xvt,"FlaxBartForConditionalGeneration"),xvt.forEach(t),x0r=r(Jke," (BART model)"),Jke.forEach(t),k0r=i(so),uM=n(so,"LI",{});var Yke=s(uM);K3e=n(Yke,"STRONG",{});var kvt=s(K3e);S0r=r(kvt,"blenderbot"),kvt.forEach(t),R0r=r(Yke," \u2014 "),$W=n(Yke,"A",{href:!0});var Svt=s($W);B0r=r(Svt,"FlaxBlenderbotForConditionalGeneration"),Svt.forEach(t),P0r=r(Yke," (Blenderbot model)"),Yke.forEach(t),$0r=i(so),bM=n(so,"LI",{});var Kke=s(bM);Z3e=n(Kke,"STRONG",{});var Rvt=s(Z3e);I0r=r(Rvt,"blenderbot-small"),Rvt.forEach(t),q0r=r(Kke," \u2014 "),IW=n(Kke,"A",{href:!0});var Bvt=s(IW);N0r=r(Bvt,"FlaxBlenderbotSmallForConditionalGeneration"),Bvt.forEach(t),j0r=r(Kke," (BlenderbotSmall model)"),Kke.forEach(t),D0r=i(so),FM=n(so,"LI",{});var Zke=s(FM);e2e=n(Zke,"STRONG",{});var Pvt=s(e2e);G0r=r(Pvt,"encoder-decoder"),Pvt.forEach(t),O0r=r(Zke," \u2014 "),qW=n(Zke,"A",{href:!0});var $vt=s(qW);V0r=r($vt,"FlaxEncoderDecoderModel"),$vt.forEach(t),X0r=r(Zke," (Encoder decoder model)"),Zke.forEach(t),z0r=i(so),vM=n(so,"LI",{});var eSe=s(vM);o2e=n(eSe,"STRONG",{});var Ivt=s(o2e);Q0r=r(Ivt,"marian"),Ivt.forEach(t),W0r=r(eSe," \u2014 "),NW=n(eSe,"A",{href:!0});var qvt=s(NW);H0r=r(qvt,"FlaxMarianMTModel"),qvt.forEach(t),U0r=r(eSe," (Marian model)"),eSe.forEach(t),J0r=i(so),TM=n(so,"LI",{});var oSe=s(TM);r2e=n(oSe,"STRONG",{});var Nvt=s(r2e);Y0r=r(Nvt,"mbart"),Nvt.forEach(t),K0r=r(oSe," \u2014 "),jW=n(oSe,"A",{href:!0});var jvt=s(jW);Z0r=r(jvt,"FlaxMBartForConditionalGeneration"),jvt.forEach(t),eyr=r(oSe," (mBART model)"),oSe.forEach(t),oyr=i(so),MM=n(so,"LI",{});var rSe=s(MM);t2e=n(rSe,"STRONG",{});var Dvt=s(t2e);ryr=r(Dvt,"mt5"),Dvt.forEach(t),tyr=r(rSe," \u2014 "),DW=n(rSe,"A",{href:!0});var Gvt=s(DW);ayr=r(Gvt,"FlaxMT5ForConditionalGeneration"),Gvt.forEach(t),nyr=r(rSe," (mT5 model)"),rSe.forEach(t),syr=i(so),EM=n(so,"LI",{});var tSe=s(EM);a2e=n(tSe,"STRONG",{});var Ovt=s(a2e);lyr=r(Ovt,"pegasus"),Ovt.forEach(t),iyr=r(tSe," \u2014 "),GW=n(tSe,"A",{href:!0});var Vvt=s(GW);dyr=r(Vvt,"FlaxPegasusForConditionalGeneration"),Vvt.forEach(t),cyr=r(tSe," (Pegasus model)"),tSe.forEach(t),fyr=i(so),CM=n(so,"LI",{});var aSe=s(CM);n2e=n(aSe,"STRONG",{});var Xvt=s(n2e);myr=r(Xvt,"t5"),Xvt.forEach(t),gyr=r(aSe," \u2014 "),OW=n(aSe,"A",{href:!0});var zvt=s(OW);hyr=r(zvt,"FlaxT5ForConditionalGeneration"),zvt.forEach(t),pyr=r(aSe," (T5 model)"),aSe.forEach(t),so.forEach(t),_yr=i(Ra),s2e=n(Ra,"P",{});var Qvt=s(s2e);uyr=r(Qvt,"Examples:"),Qvt.forEach(t),byr=i(Ra),m(p8.$$.fragment,Ra),Ra.forEach(t),vi.forEach(t),RBe=i(c),hf=n(c,"H2",{class:!0});var V$e=s(hf);wM=n(V$e,"A",{id:!0,class:!0,href:!0});var Wvt=s(wM);l2e=n(Wvt,"SPAN",{});var Hvt=s(l2e);m(_8.$$.fragment,Hvt),Hvt.forEach(t),Wvt.forEach(t),Fyr=i(V$e),i2e=n(V$e,"SPAN",{});var Uvt=s(i2e);vyr=r(Uvt,"FlaxAutoModelForSequenceClassification"),Uvt.forEach(t),V$e.forEach(t),BBe=i(c),qr=n(c,"DIV",{class:!0});var Mi=s(qr);m(u8.$$.fragment,Mi),Tyr=i(Mi),pf=n(Mi,"P",{});var xJ=s(pf);Myr=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VW=n(xJ,"A",{href:!0});var Jvt=s(VW);Eyr=r(Jvt,"from_pretrained()"),Jvt.forEach(t),Cyr=r(xJ," class method or the "),XW=n(xJ,"A",{href:!0});var Yvt=s(XW);wyr=r(Yvt,"from_config()"),Yvt.forEach(t),Ayr=r(xJ,` class
method.`),xJ.forEach(t),yyr=i(Mi),b8=n(Mi,"P",{});var X$e=s(b8);Lyr=r(X$e,"This class cannot be instantiated directly using "),d2e=n(X$e,"CODE",{});var Kvt=s(d2e);xyr=r(Kvt,"__init__()"),Kvt.forEach(t),kyr=r(X$e," (throws an error)."),X$e.forEach(t),Syr=i(Mi),St=n(Mi,"DIV",{class:!0});var Ei=s(St);m(F8.$$.fragment,Ei),Ryr=i(Ei),c2e=n(Ei,"P",{});var Zvt=s(c2e);Byr=r(Zvt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Zvt.forEach(t),Pyr=i(Ei),_f=n(Ei,"P",{});var kJ=s(_f);$yr=r(kJ,`Note:
Loading a model from its configuration file does `),f2e=n(kJ,"STRONG",{});var e6t=s(f2e);Iyr=r(e6t,"not"),e6t.forEach(t),qyr=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=n(kJ,"A",{href:!0});var o6t=s(zW);Nyr=r(o6t,"from_pretrained()"),o6t.forEach(t),jyr=r(kJ," to load the model weights."),kJ.forEach(t),Dyr=i(Ei),m2e=n(Ei,"P",{});var r6t=s(m2e);Gyr=r(r6t,"Examples:"),r6t.forEach(t),Oyr=i(Ei),m(v8.$$.fragment,Ei),Ei.forEach(t),Vyr=i(Mi),Ro=n(Mi,"DIV",{class:!0});var Ba=s(Ro);m(T8.$$.fragment,Ba),Xyr=i(Ba),g2e=n(Ba,"P",{});var t6t=s(g2e);zyr=r(t6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),t6t.forEach(t),Qyr=i(Ba),Pn=n(Ba,"P",{});var cC=s(Pn);Wyr=r(cC,"The model class to instantiate is selected based on the "),h2e=n(cC,"CODE",{});var a6t=s(h2e);Hyr=r(a6t,"model_type"),a6t.forEach(t),Uyr=r(cC,` property of the config object (either
passed as an argument or loaded from `),p2e=n(cC,"CODE",{});var n6t=s(p2e);Jyr=r(n6t,"pretrained_model_name_or_path"),n6t.forEach(t),Yyr=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=n(cC,"CODE",{});var s6t=s(_2e);Kyr=r(s6t,"pretrained_model_name_or_path"),s6t.forEach(t),Zyr=r(cC,":"),cC.forEach(t),eLr=i(Ba),Fe=n(Ba,"UL",{});var ye=s(Fe);AM=n(ye,"LI",{});var nSe=s(AM);u2e=n(nSe,"STRONG",{});var l6t=s(u2e);oLr=r(l6t,"albert"),l6t.forEach(t),rLr=r(nSe," \u2014 "),QW=n(nSe,"A",{href:!0});var i6t=s(QW);tLr=r(i6t,"FlaxAlbertForSequenceClassification"),i6t.forEach(t),aLr=r(nSe," (ALBERT model)"),nSe.forEach(t),nLr=i(ye),yM=n(ye,"LI",{});var sSe=s(yM);b2e=n(sSe,"STRONG",{});var d6t=s(b2e);sLr=r(d6t,"bart"),d6t.forEach(t),lLr=r(sSe," \u2014 "),WW=n(sSe,"A",{href:!0});var c6t=s(WW);iLr=r(c6t,"FlaxBartForSequenceClassification"),c6t.forEach(t),dLr=r(sSe," (BART model)"),sSe.forEach(t),cLr=i(ye),LM=n(ye,"LI",{});var lSe=s(LM);F2e=n(lSe,"STRONG",{});var f6t=s(F2e);fLr=r(f6t,"bert"),f6t.forEach(t),mLr=r(lSe," \u2014 "),HW=n(lSe,"A",{href:!0});var m6t=s(HW);gLr=r(m6t,"FlaxBertForSequenceClassification"),m6t.forEach(t),hLr=r(lSe," (BERT model)"),lSe.forEach(t),pLr=i(ye),xM=n(ye,"LI",{});var iSe=s(xM);v2e=n(iSe,"STRONG",{});var g6t=s(v2e);_Lr=r(g6t,"big_bird"),g6t.forEach(t),uLr=r(iSe," \u2014 "),UW=n(iSe,"A",{href:!0});var h6t=s(UW);bLr=r(h6t,"FlaxBigBirdForSequenceClassification"),h6t.forEach(t),FLr=r(iSe," (BigBird model)"),iSe.forEach(t),vLr=i(ye),kM=n(ye,"LI",{});var dSe=s(kM);T2e=n(dSe,"STRONG",{});var p6t=s(T2e);TLr=r(p6t,"distilbert"),p6t.forEach(t),MLr=r(dSe," \u2014 "),JW=n(dSe,"A",{href:!0});var _6t=s(JW);ELr=r(_6t,"FlaxDistilBertForSequenceClassification"),_6t.forEach(t),CLr=r(dSe," (DistilBERT model)"),dSe.forEach(t),wLr=i(ye),SM=n(ye,"LI",{});var cSe=s(SM);M2e=n(cSe,"STRONG",{});var u6t=s(M2e);ALr=r(u6t,"electra"),u6t.forEach(t),yLr=r(cSe," \u2014 "),YW=n(cSe,"A",{href:!0});var b6t=s(YW);LLr=r(b6t,"FlaxElectraForSequenceClassification"),b6t.forEach(t),xLr=r(cSe," (ELECTRA model)"),cSe.forEach(t),kLr=i(ye),RM=n(ye,"LI",{});var fSe=s(RM);E2e=n(fSe,"STRONG",{});var F6t=s(E2e);SLr=r(F6t,"mbart"),F6t.forEach(t),RLr=r(fSe," \u2014 "),KW=n(fSe,"A",{href:!0});var v6t=s(KW);BLr=r(v6t,"FlaxMBartForSequenceClassification"),v6t.forEach(t),PLr=r(fSe," (mBART model)"),fSe.forEach(t),$Lr=i(ye),BM=n(ye,"LI",{});var mSe=s(BM);C2e=n(mSe,"STRONG",{});var T6t=s(C2e);ILr=r(T6t,"roberta"),T6t.forEach(t),qLr=r(mSe," \u2014 "),ZW=n(mSe,"A",{href:!0});var M6t=s(ZW);NLr=r(M6t,"FlaxRobertaForSequenceClassification"),M6t.forEach(t),jLr=r(mSe," (RoBERTa model)"),mSe.forEach(t),DLr=i(ye),PM=n(ye,"LI",{});var gSe=s(PM);w2e=n(gSe,"STRONG",{});var E6t=s(w2e);GLr=r(E6t,"roformer"),E6t.forEach(t),OLr=r(gSe," \u2014 "),eH=n(gSe,"A",{href:!0});var C6t=s(eH);VLr=r(C6t,"FlaxRoFormerForSequenceClassification"),C6t.forEach(t),XLr=r(gSe," (RoFormer model)"),gSe.forEach(t),zLr=i(ye),$M=n(ye,"LI",{});var hSe=s($M);A2e=n(hSe,"STRONG",{});var w6t=s(A2e);QLr=r(w6t,"xlm-roberta"),w6t.forEach(t),WLr=r(hSe," \u2014 "),oH=n(hSe,"A",{href:!0});var A6t=s(oH);HLr=r(A6t,"FlaxXLMRobertaForSequenceClassification"),A6t.forEach(t),ULr=r(hSe," (XLM-RoBERTa model)"),hSe.forEach(t),ye.forEach(t),JLr=i(Ba),y2e=n(Ba,"P",{});var y6t=s(y2e);YLr=r(y6t,"Examples:"),y6t.forEach(t),KLr=i(Ba),m(M8.$$.fragment,Ba),Ba.forEach(t),Mi.forEach(t),PBe=i(c),uf=n(c,"H2",{class:!0});var z$e=s(uf);IM=n(z$e,"A",{id:!0,class:!0,href:!0});var L6t=s(IM);L2e=n(L6t,"SPAN",{});var x6t=s(L2e);m(E8.$$.fragment,x6t),x6t.forEach(t),L6t.forEach(t),ZLr=i(z$e),x2e=n(z$e,"SPAN",{});var k6t=s(x2e);e8r=r(k6t,"FlaxAutoModelForQuestionAnswering"),k6t.forEach(t),z$e.forEach(t),$Be=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);m(C8.$$.fragment,Ci),o8r=i(Ci),bf=n(Ci,"P",{});var SJ=s(bf);r8r=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rH=n(SJ,"A",{href:!0});var S6t=s(rH);t8r=r(S6t,"from_pretrained()"),S6t.forEach(t),a8r=r(SJ," class method or the "),tH=n(SJ,"A",{href:!0});var R6t=s(tH);n8r=r(R6t,"from_config()"),R6t.forEach(t),s8r=r(SJ,` class
method.`),SJ.forEach(t),l8r=i(Ci),w8=n(Ci,"P",{});var Q$e=s(w8);i8r=r(Q$e,"This class cannot be instantiated directly using "),k2e=n(Q$e,"CODE",{});var B6t=s(k2e);d8r=r(B6t,"__init__()"),B6t.forEach(t),c8r=r(Q$e," (throws an error)."),Q$e.forEach(t),f8r=i(Ci),Rt=n(Ci,"DIV",{class:!0});var wi=s(Rt);m(A8.$$.fragment,wi),m8r=i(wi),S2e=n(wi,"P",{});var P6t=s(S2e);g8r=r(P6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),P6t.forEach(t),h8r=i(wi),Ff=n(wi,"P",{});var RJ=s(Ff);p8r=r(RJ,`Note:
Loading a model from its configuration file does `),R2e=n(RJ,"STRONG",{});var $6t=s(R2e);_8r=r($6t,"not"),$6t.forEach(t),u8r=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=n(RJ,"A",{href:!0});var I6t=s(aH);b8r=r(I6t,"from_pretrained()"),I6t.forEach(t),F8r=r(RJ," to load the model weights."),RJ.forEach(t),v8r=i(wi),B2e=n(wi,"P",{});var q6t=s(B2e);T8r=r(q6t,"Examples:"),q6t.forEach(t),M8r=i(wi),m(y8.$$.fragment,wi),wi.forEach(t),E8r=i(Ci),Bo=n(Ci,"DIV",{class:!0});var Pa=s(Bo);m(L8.$$.fragment,Pa),C8r=i(Pa),P2e=n(Pa,"P",{});var N6t=s(P2e);w8r=r(N6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),N6t.forEach(t),A8r=i(Pa),$n=n(Pa,"P",{});var fC=s($n);y8r=r(fC,"The model class to instantiate is selected based on the "),$2e=n(fC,"CODE",{});var j6t=s($2e);L8r=r(j6t,"model_type"),j6t.forEach(t),x8r=r(fC,` property of the config object (either
passed as an argument or loaded from `),I2e=n(fC,"CODE",{});var D6t=s(I2e);k8r=r(D6t,"pretrained_model_name_or_path"),D6t.forEach(t),S8r=r(fC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=n(fC,"CODE",{});var G6t=s(q2e);R8r=r(G6t,"pretrained_model_name_or_path"),G6t.forEach(t),B8r=r(fC,":"),fC.forEach(t),P8r=i(Pa),ve=n(Pa,"UL",{});var Le=s(ve);qM=n(Le,"LI",{});var pSe=s(qM);N2e=n(pSe,"STRONG",{});var O6t=s(N2e);$8r=r(O6t,"albert"),O6t.forEach(t),I8r=r(pSe," \u2014 "),nH=n(pSe,"A",{href:!0});var V6t=s(nH);q8r=r(V6t,"FlaxAlbertForQuestionAnswering"),V6t.forEach(t),N8r=r(pSe," (ALBERT model)"),pSe.forEach(t),j8r=i(Le),NM=n(Le,"LI",{});var _Se=s(NM);j2e=n(_Se,"STRONG",{});var X6t=s(j2e);D8r=r(X6t,"bart"),X6t.forEach(t),G8r=r(_Se," \u2014 "),sH=n(_Se,"A",{href:!0});var z6t=s(sH);O8r=r(z6t,"FlaxBartForQuestionAnswering"),z6t.forEach(t),V8r=r(_Se," (BART model)"),_Se.forEach(t),X8r=i(Le),jM=n(Le,"LI",{});var uSe=s(jM);D2e=n(uSe,"STRONG",{});var Q6t=s(D2e);z8r=r(Q6t,"bert"),Q6t.forEach(t),Q8r=r(uSe," \u2014 "),lH=n(uSe,"A",{href:!0});var W6t=s(lH);W8r=r(W6t,"FlaxBertForQuestionAnswering"),W6t.forEach(t),H8r=r(uSe," (BERT model)"),uSe.forEach(t),U8r=i(Le),DM=n(Le,"LI",{});var bSe=s(DM);G2e=n(bSe,"STRONG",{});var H6t=s(G2e);J8r=r(H6t,"big_bird"),H6t.forEach(t),Y8r=r(bSe," \u2014 "),iH=n(bSe,"A",{href:!0});var U6t=s(iH);K8r=r(U6t,"FlaxBigBirdForQuestionAnswering"),U6t.forEach(t),Z8r=r(bSe," (BigBird model)"),bSe.forEach(t),e7r=i(Le),GM=n(Le,"LI",{});var FSe=s(GM);O2e=n(FSe,"STRONG",{});var J6t=s(O2e);o7r=r(J6t,"distilbert"),J6t.forEach(t),r7r=r(FSe," \u2014 "),dH=n(FSe,"A",{href:!0});var Y6t=s(dH);t7r=r(Y6t,"FlaxDistilBertForQuestionAnswering"),Y6t.forEach(t),a7r=r(FSe," (DistilBERT model)"),FSe.forEach(t),n7r=i(Le),OM=n(Le,"LI",{});var vSe=s(OM);V2e=n(vSe,"STRONG",{});var K6t=s(V2e);s7r=r(K6t,"electra"),K6t.forEach(t),l7r=r(vSe," \u2014 "),cH=n(vSe,"A",{href:!0});var Z6t=s(cH);i7r=r(Z6t,"FlaxElectraForQuestionAnswering"),Z6t.forEach(t),d7r=r(vSe," (ELECTRA model)"),vSe.forEach(t),c7r=i(Le),VM=n(Le,"LI",{});var TSe=s(VM);X2e=n(TSe,"STRONG",{});var eTt=s(X2e);f7r=r(eTt,"mbart"),eTt.forEach(t),m7r=r(TSe," \u2014 "),fH=n(TSe,"A",{href:!0});var oTt=s(fH);g7r=r(oTt,"FlaxMBartForQuestionAnswering"),oTt.forEach(t),h7r=r(TSe," (mBART model)"),TSe.forEach(t),p7r=i(Le),XM=n(Le,"LI",{});var MSe=s(XM);z2e=n(MSe,"STRONG",{});var rTt=s(z2e);_7r=r(rTt,"roberta"),rTt.forEach(t),u7r=r(MSe," \u2014 "),mH=n(MSe,"A",{href:!0});var tTt=s(mH);b7r=r(tTt,"FlaxRobertaForQuestionAnswering"),tTt.forEach(t),F7r=r(MSe," (RoBERTa model)"),MSe.forEach(t),v7r=i(Le),zM=n(Le,"LI",{});var ESe=s(zM);Q2e=n(ESe,"STRONG",{});var aTt=s(Q2e);T7r=r(aTt,"roformer"),aTt.forEach(t),M7r=r(ESe," \u2014 "),gH=n(ESe,"A",{href:!0});var nTt=s(gH);E7r=r(nTt,"FlaxRoFormerForQuestionAnswering"),nTt.forEach(t),C7r=r(ESe," (RoFormer model)"),ESe.forEach(t),w7r=i(Le),QM=n(Le,"LI",{});var CSe=s(QM);W2e=n(CSe,"STRONG",{});var sTt=s(W2e);A7r=r(sTt,"xlm-roberta"),sTt.forEach(t),y7r=r(CSe," \u2014 "),hH=n(CSe,"A",{href:!0});var lTt=s(hH);L7r=r(lTt,"FlaxXLMRobertaForQuestionAnswering"),lTt.forEach(t),x7r=r(CSe," (XLM-RoBERTa model)"),CSe.forEach(t),Le.forEach(t),k7r=i(Pa),H2e=n(Pa,"P",{});var iTt=s(H2e);S7r=r(iTt,"Examples:"),iTt.forEach(t),R7r=i(Pa),m(x8.$$.fragment,Pa),Pa.forEach(t),Ci.forEach(t),IBe=i(c),vf=n(c,"H2",{class:!0});var W$e=s(vf);WM=n(W$e,"A",{id:!0,class:!0,href:!0});var dTt=s(WM);U2e=n(dTt,"SPAN",{});var cTt=s(U2e);m(k8.$$.fragment,cTt),cTt.forEach(t),dTt.forEach(t),B7r=i(W$e),J2e=n(W$e,"SPAN",{});var fTt=s(J2e);P7r=r(fTt,"FlaxAutoModelForTokenClassification"),fTt.forEach(t),W$e.forEach(t),qBe=i(c),jr=n(c,"DIV",{class:!0});var Ai=s(jr);m(S8.$$.fragment,Ai),$7r=i(Ai),Tf=n(Ai,"P",{});var BJ=s(Tf);I7r=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pH=n(BJ,"A",{href:!0});var mTt=s(pH);q7r=r(mTt,"from_pretrained()"),mTt.forEach(t),N7r=r(BJ," class method or the "),_H=n(BJ,"A",{href:!0});var gTt=s(_H);j7r=r(gTt,"from_config()"),gTt.forEach(t),D7r=r(BJ,` class
method.`),BJ.forEach(t),G7r=i(Ai),R8=n(Ai,"P",{});var H$e=s(R8);O7r=r(H$e,"This class cannot be instantiated directly using "),Y2e=n(H$e,"CODE",{});var hTt=s(Y2e);V7r=r(hTt,"__init__()"),hTt.forEach(t),X7r=r(H$e," (throws an error)."),H$e.forEach(t),z7r=i(Ai),Bt=n(Ai,"DIV",{class:!0});var yi=s(Bt);m(B8.$$.fragment,yi),Q7r=i(yi),K2e=n(yi,"P",{});var pTt=s(K2e);W7r=r(pTt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pTt.forEach(t),H7r=i(yi),Mf=n(yi,"P",{});var PJ=s(Mf);U7r=r(PJ,`Note:
Loading a model from its configuration file does `),Z2e=n(PJ,"STRONG",{});var _Tt=s(Z2e);J7r=r(_Tt,"not"),_Tt.forEach(t),Y7r=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=n(PJ,"A",{href:!0});var uTt=s(uH);K7r=r(uTt,"from_pretrained()"),uTt.forEach(t),Z7r=r(PJ," to load the model weights."),PJ.forEach(t),e9r=i(yi),eFe=n(yi,"P",{});var bTt=s(eFe);o9r=r(bTt,"Examples:"),bTt.forEach(t),r9r=i(yi),m(P8.$$.fragment,yi),yi.forEach(t),t9r=i(Ai),Po=n(Ai,"DIV",{class:!0});var $a=s(Po);m($8.$$.fragment,$a),a9r=i($a),oFe=n($a,"P",{});var FTt=s(oFe);n9r=r(FTt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),FTt.forEach(t),s9r=i($a),In=n($a,"P",{});var mC=s(In);l9r=r(mC,"The model class to instantiate is selected based on the "),rFe=n(mC,"CODE",{});var vTt=s(rFe);i9r=r(vTt,"model_type"),vTt.forEach(t),d9r=r(mC,` property of the config object (either
passed as an argument or loaded from `),tFe=n(mC,"CODE",{});var TTt=s(tFe);c9r=r(TTt,"pretrained_model_name_or_path"),TTt.forEach(t),f9r=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=n(mC,"CODE",{});var MTt=s(aFe);m9r=r(MTt,"pretrained_model_name_or_path"),MTt.forEach(t),g9r=r(mC,":"),mC.forEach(t),h9r=i($a),Be=n($a,"UL",{});var Oo=s(Be);HM=n(Oo,"LI",{});var wSe=s(HM);nFe=n(wSe,"STRONG",{});var ETt=s(nFe);p9r=r(ETt,"albert"),ETt.forEach(t),_9r=r(wSe," \u2014 "),bH=n(wSe,"A",{href:!0});var CTt=s(bH);u9r=r(CTt,"FlaxAlbertForTokenClassification"),CTt.forEach(t),b9r=r(wSe," (ALBERT model)"),wSe.forEach(t),F9r=i(Oo),UM=n(Oo,"LI",{});var ASe=s(UM);sFe=n(ASe,"STRONG",{});var wTt=s(sFe);v9r=r(wTt,"bert"),wTt.forEach(t),T9r=r(ASe," \u2014 "),FH=n(ASe,"A",{href:!0});var ATt=s(FH);M9r=r(ATt,"FlaxBertForTokenClassification"),ATt.forEach(t),E9r=r(ASe," (BERT model)"),ASe.forEach(t),C9r=i(Oo),JM=n(Oo,"LI",{});var ySe=s(JM);lFe=n(ySe,"STRONG",{});var yTt=s(lFe);w9r=r(yTt,"big_bird"),yTt.forEach(t),A9r=r(ySe," \u2014 "),vH=n(ySe,"A",{href:!0});var LTt=s(vH);y9r=r(LTt,"FlaxBigBirdForTokenClassification"),LTt.forEach(t),L9r=r(ySe," (BigBird model)"),ySe.forEach(t),x9r=i(Oo),YM=n(Oo,"LI",{});var LSe=s(YM);iFe=n(LSe,"STRONG",{});var xTt=s(iFe);k9r=r(xTt,"distilbert"),xTt.forEach(t),S9r=r(LSe," \u2014 "),TH=n(LSe,"A",{href:!0});var kTt=s(TH);R9r=r(kTt,"FlaxDistilBertForTokenClassification"),kTt.forEach(t),B9r=r(LSe," (DistilBERT model)"),LSe.forEach(t),P9r=i(Oo),KM=n(Oo,"LI",{});var xSe=s(KM);dFe=n(xSe,"STRONG",{});var STt=s(dFe);$9r=r(STt,"electra"),STt.forEach(t),I9r=r(xSe," \u2014 "),MH=n(xSe,"A",{href:!0});var RTt=s(MH);q9r=r(RTt,"FlaxElectraForTokenClassification"),RTt.forEach(t),N9r=r(xSe," (ELECTRA model)"),xSe.forEach(t),j9r=i(Oo),ZM=n(Oo,"LI",{});var kSe=s(ZM);cFe=n(kSe,"STRONG",{});var BTt=s(cFe);D9r=r(BTt,"roberta"),BTt.forEach(t),G9r=r(kSe," \u2014 "),EH=n(kSe,"A",{href:!0});var PTt=s(EH);O9r=r(PTt,"FlaxRobertaForTokenClassification"),PTt.forEach(t),V9r=r(kSe," (RoBERTa model)"),kSe.forEach(t),X9r=i(Oo),eE=n(Oo,"LI",{});var SSe=s(eE);fFe=n(SSe,"STRONG",{});var $Tt=s(fFe);z9r=r($Tt,"roformer"),$Tt.forEach(t),Q9r=r(SSe," \u2014 "),CH=n(SSe,"A",{href:!0});var ITt=s(CH);W9r=r(ITt,"FlaxRoFormerForTokenClassification"),ITt.forEach(t),H9r=r(SSe," (RoFormer model)"),SSe.forEach(t),U9r=i(Oo),oE=n(Oo,"LI",{});var RSe=s(oE);mFe=n(RSe,"STRONG",{});var qTt=s(mFe);J9r=r(qTt,"xlm-roberta"),qTt.forEach(t),Y9r=r(RSe," \u2014 "),wH=n(RSe,"A",{href:!0});var NTt=s(wH);K9r=r(NTt,"FlaxXLMRobertaForTokenClassification"),NTt.forEach(t),Z9r=r(RSe," (XLM-RoBERTa model)"),RSe.forEach(t),Oo.forEach(t),exr=i($a),gFe=n($a,"P",{});var jTt=s(gFe);oxr=r(jTt,"Examples:"),jTt.forEach(t),rxr=i($a),m(I8.$$.fragment,$a),$a.forEach(t),Ai.forEach(t),NBe=i(c),Ef=n(c,"H2",{class:!0});var U$e=s(Ef);rE=n(U$e,"A",{id:!0,class:!0,href:!0});var DTt=s(rE);hFe=n(DTt,"SPAN",{});var GTt=s(hFe);m(q8.$$.fragment,GTt),GTt.forEach(t),DTt.forEach(t),txr=i(U$e),pFe=n(U$e,"SPAN",{});var OTt=s(pFe);axr=r(OTt,"FlaxAutoModelForMultipleChoice"),OTt.forEach(t),U$e.forEach(t),jBe=i(c),Dr=n(c,"DIV",{class:!0});var Li=s(Dr);m(N8.$$.fragment,Li),nxr=i(Li),Cf=n(Li,"P",{});var $J=s(Cf);sxr=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AH=n($J,"A",{href:!0});var VTt=s(AH);lxr=r(VTt,"from_pretrained()"),VTt.forEach(t),ixr=r($J," class method or the "),yH=n($J,"A",{href:!0});var XTt=s(yH);dxr=r(XTt,"from_config()"),XTt.forEach(t),cxr=r($J,` class
method.`),$J.forEach(t),fxr=i(Li),j8=n(Li,"P",{});var J$e=s(j8);mxr=r(J$e,"This class cannot be instantiated directly using "),_Fe=n(J$e,"CODE",{});var zTt=s(_Fe);gxr=r(zTt,"__init__()"),zTt.forEach(t),hxr=r(J$e," (throws an error)."),J$e.forEach(t),pxr=i(Li),Pt=n(Li,"DIV",{class:!0});var xi=s(Pt);m(D8.$$.fragment,xi),_xr=i(xi),uFe=n(xi,"P",{});var QTt=s(uFe);uxr=r(QTt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),QTt.forEach(t),bxr=i(xi),wf=n(xi,"P",{});var IJ=s(wf);Fxr=r(IJ,`Note:
Loading a model from its configuration file does `),bFe=n(IJ,"STRONG",{});var WTt=s(bFe);vxr=r(WTt,"not"),WTt.forEach(t),Txr=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=n(IJ,"A",{href:!0});var HTt=s(LH);Mxr=r(HTt,"from_pretrained()"),HTt.forEach(t),Exr=r(IJ," to load the model weights."),IJ.forEach(t),Cxr=i(xi),FFe=n(xi,"P",{});var UTt=s(FFe);wxr=r(UTt,"Examples:"),UTt.forEach(t),Axr=i(xi),m(G8.$$.fragment,xi),xi.forEach(t),yxr=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(O8.$$.fragment,Ia),Lxr=i(Ia),vFe=n(Ia,"P",{});var JTt=s(vFe);xxr=r(JTt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),JTt.forEach(t),kxr=i(Ia),qn=n(Ia,"P",{});var gC=s(qn);Sxr=r(gC,"The model class to instantiate is selected based on the "),TFe=n(gC,"CODE",{});var YTt=s(TFe);Rxr=r(YTt,"model_type"),YTt.forEach(t),Bxr=r(gC,` property of the config object (either
passed as an argument or loaded from `),MFe=n(gC,"CODE",{});var KTt=s(MFe);Pxr=r(KTt,"pretrained_model_name_or_path"),KTt.forEach(t),$xr=r(gC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=n(gC,"CODE",{});var ZTt=s(EFe);Ixr=r(ZTt,"pretrained_model_name_or_path"),ZTt.forEach(t),qxr=r(gC,":"),gC.forEach(t),Nxr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);tE=n(Vo,"LI",{});var BSe=s(tE);CFe=n(BSe,"STRONG",{});var eMt=s(CFe);jxr=r(eMt,"albert"),eMt.forEach(t),Dxr=r(BSe," \u2014 "),xH=n(BSe,"A",{href:!0});var oMt=s(xH);Gxr=r(oMt,"FlaxAlbertForMultipleChoice"),oMt.forEach(t),Oxr=r(BSe," (ALBERT model)"),BSe.forEach(t),Vxr=i(Vo),aE=n(Vo,"LI",{});var PSe=s(aE);wFe=n(PSe,"STRONG",{});var rMt=s(wFe);Xxr=r(rMt,"bert"),rMt.forEach(t),zxr=r(PSe," \u2014 "),kH=n(PSe,"A",{href:!0});var tMt=s(kH);Qxr=r(tMt,"FlaxBertForMultipleChoice"),tMt.forEach(t),Wxr=r(PSe," (BERT model)"),PSe.forEach(t),Hxr=i(Vo),nE=n(Vo,"LI",{});var $Se=s(nE);AFe=n($Se,"STRONG",{});var aMt=s(AFe);Uxr=r(aMt,"big_bird"),aMt.forEach(t),Jxr=r($Se," \u2014 "),SH=n($Se,"A",{href:!0});var nMt=s(SH);Yxr=r(nMt,"FlaxBigBirdForMultipleChoice"),nMt.forEach(t),Kxr=r($Se," (BigBird model)"),$Se.forEach(t),Zxr=i(Vo),sE=n(Vo,"LI",{});var ISe=s(sE);yFe=n(ISe,"STRONG",{});var sMt=s(yFe);ekr=r(sMt,"distilbert"),sMt.forEach(t),okr=r(ISe," \u2014 "),RH=n(ISe,"A",{href:!0});var lMt=s(RH);rkr=r(lMt,"FlaxDistilBertForMultipleChoice"),lMt.forEach(t),tkr=r(ISe," (DistilBERT model)"),ISe.forEach(t),akr=i(Vo),lE=n(Vo,"LI",{});var qSe=s(lE);LFe=n(qSe,"STRONG",{});var iMt=s(LFe);nkr=r(iMt,"electra"),iMt.forEach(t),skr=r(qSe," \u2014 "),BH=n(qSe,"A",{href:!0});var dMt=s(BH);lkr=r(dMt,"FlaxElectraForMultipleChoice"),dMt.forEach(t),ikr=r(qSe," (ELECTRA model)"),qSe.forEach(t),dkr=i(Vo),iE=n(Vo,"LI",{});var NSe=s(iE);xFe=n(NSe,"STRONG",{});var cMt=s(xFe);ckr=r(cMt,"roberta"),cMt.forEach(t),fkr=r(NSe," \u2014 "),PH=n(NSe,"A",{href:!0});var fMt=s(PH);mkr=r(fMt,"FlaxRobertaForMultipleChoice"),fMt.forEach(t),gkr=r(NSe," (RoBERTa model)"),NSe.forEach(t),hkr=i(Vo),dE=n(Vo,"LI",{});var jSe=s(dE);kFe=n(jSe,"STRONG",{});var mMt=s(kFe);pkr=r(mMt,"roformer"),mMt.forEach(t),_kr=r(jSe," \u2014 "),$H=n(jSe,"A",{href:!0});var gMt=s($H);ukr=r(gMt,"FlaxRoFormerForMultipleChoice"),gMt.forEach(t),bkr=r(jSe," (RoFormer model)"),jSe.forEach(t),Fkr=i(Vo),cE=n(Vo,"LI",{});var DSe=s(cE);SFe=n(DSe,"STRONG",{});var hMt=s(SFe);vkr=r(hMt,"xlm-roberta"),hMt.forEach(t),Tkr=r(DSe," \u2014 "),IH=n(DSe,"A",{href:!0});var pMt=s(IH);Mkr=r(pMt,"FlaxXLMRobertaForMultipleChoice"),pMt.forEach(t),Ekr=r(DSe," (XLM-RoBERTa model)"),DSe.forEach(t),Vo.forEach(t),Ckr=i(Ia),RFe=n(Ia,"P",{});var _Mt=s(RFe);wkr=r(_Mt,"Examples:"),_Mt.forEach(t),Akr=i(Ia),m(V8.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),DBe=i(c),Af=n(c,"H2",{class:!0});var Y$e=s(Af);fE=n(Y$e,"A",{id:!0,class:!0,href:!0});var uMt=s(fE);BFe=n(uMt,"SPAN",{});var bMt=s(BFe);m(X8.$$.fragment,bMt),bMt.forEach(t),uMt.forEach(t),ykr=i(Y$e),PFe=n(Y$e,"SPAN",{});var FMt=s(PFe);Lkr=r(FMt,"FlaxAutoModelForNextSentencePrediction"),FMt.forEach(t),Y$e.forEach(t),GBe=i(c),Gr=n(c,"DIV",{class:!0});var ki=s(Gr);m(z8.$$.fragment,ki),xkr=i(ki),yf=n(ki,"P",{});var qJ=s(yf);kkr=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qH=n(qJ,"A",{href:!0});var vMt=s(qH);Skr=r(vMt,"from_pretrained()"),vMt.forEach(t),Rkr=r(qJ," class method or the "),NH=n(qJ,"A",{href:!0});var TMt=s(NH);Bkr=r(TMt,"from_config()"),TMt.forEach(t),Pkr=r(qJ,` class
method.`),qJ.forEach(t),$kr=i(ki),Q8=n(ki,"P",{});var K$e=s(Q8);Ikr=r(K$e,"This class cannot be instantiated directly using "),$Fe=n(K$e,"CODE",{});var MMt=s($Fe);qkr=r(MMt,"__init__()"),MMt.forEach(t),Nkr=r(K$e," (throws an error)."),K$e.forEach(t),jkr=i(ki),$t=n(ki,"DIV",{class:!0});var Si=s($t);m(W8.$$.fragment,Si),Dkr=i(Si),IFe=n(Si,"P",{});var EMt=s(IFe);Gkr=r(EMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),EMt.forEach(t),Okr=i(Si),Lf=n(Si,"P",{});var NJ=s(Lf);Vkr=r(NJ,`Note:
Loading a model from its configuration file does `),qFe=n(NJ,"STRONG",{});var CMt=s(qFe);Xkr=r(CMt,"not"),CMt.forEach(t),zkr=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=n(NJ,"A",{href:!0});var wMt=s(jH);Qkr=r(wMt,"from_pretrained()"),wMt.forEach(t),Wkr=r(NJ," to load the model weights."),NJ.forEach(t),Hkr=i(Si),NFe=n(Si,"P",{});var AMt=s(NFe);Ukr=r(AMt,"Examples:"),AMt.forEach(t),Jkr=i(Si),m(H8.$$.fragment,Si),Si.forEach(t),Ykr=i(ki),Io=n(ki,"DIV",{class:!0});var qa=s(Io);m(U8.$$.fragment,qa),Kkr=i(qa),jFe=n(qa,"P",{});var yMt=s(jFe);Zkr=r(yMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yMt.forEach(t),eSr=i(qa),Nn=n(qa,"P",{});var hC=s(Nn);oSr=r(hC,"The model class to instantiate is selected based on the "),DFe=n(hC,"CODE",{});var LMt=s(DFe);rSr=r(LMt,"model_type"),LMt.forEach(t),tSr=r(hC,` property of the config object (either
passed as an argument or loaded from `),GFe=n(hC,"CODE",{});var xMt=s(GFe);aSr=r(xMt,"pretrained_model_name_or_path"),xMt.forEach(t),nSr=r(hC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=n(hC,"CODE",{});var kMt=s(OFe);sSr=r(kMt,"pretrained_model_name_or_path"),kMt.forEach(t),lSr=r(hC,":"),hC.forEach(t),iSr=i(qa),VFe=n(qa,"UL",{});var SMt=s(VFe);mE=n(SMt,"LI",{});var GSe=s(mE);XFe=n(GSe,"STRONG",{});var RMt=s(XFe);dSr=r(RMt,"bert"),RMt.forEach(t),cSr=r(GSe," \u2014 "),DH=n(GSe,"A",{href:!0});var BMt=s(DH);fSr=r(BMt,"FlaxBertForNextSentencePrediction"),BMt.forEach(t),mSr=r(GSe," (BERT model)"),GSe.forEach(t),SMt.forEach(t),gSr=i(qa),zFe=n(qa,"P",{});var PMt=s(zFe);hSr=r(PMt,"Examples:"),PMt.forEach(t),pSr=i(qa),m(J8.$$.fragment,qa),qa.forEach(t),ki.forEach(t),OBe=i(c),xf=n(c,"H2",{class:!0});var Z$e=s(xf);gE=n(Z$e,"A",{id:!0,class:!0,href:!0});var $Mt=s(gE);QFe=n($Mt,"SPAN",{});var IMt=s(QFe);m(Y8.$$.fragment,IMt),IMt.forEach(t),$Mt.forEach(t),_Sr=i(Z$e),WFe=n(Z$e,"SPAN",{});var qMt=s(WFe);uSr=r(qMt,"FlaxAutoModelForImageClassification"),qMt.forEach(t),Z$e.forEach(t),VBe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(K8.$$.fragment,Ri),bSr=i(Ri),kf=n(Ri,"P",{});var jJ=s(kf);FSr=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),GH=n(jJ,"A",{href:!0});var NMt=s(GH);vSr=r(NMt,"from_pretrained()"),NMt.forEach(t),TSr=r(jJ," class method or the "),OH=n(jJ,"A",{href:!0});var jMt=s(OH);MSr=r(jMt,"from_config()"),jMt.forEach(t),ESr=r(jJ,` class
method.`),jJ.forEach(t),CSr=i(Ri),Z8=n(Ri,"P",{});var eIe=s(Z8);wSr=r(eIe,"This class cannot be instantiated directly using "),HFe=n(eIe,"CODE",{});var DMt=s(HFe);ASr=r(DMt,"__init__()"),DMt.forEach(t),ySr=r(eIe," (throws an error)."),eIe.forEach(t),LSr=i(Ri),It=n(Ri,"DIV",{class:!0});var Bi=s(It);m(e7.$$.fragment,Bi),xSr=i(Bi),UFe=n(Bi,"P",{});var GMt=s(UFe);kSr=r(GMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),GMt.forEach(t),SSr=i(Bi),Sf=n(Bi,"P",{});var DJ=s(Sf);RSr=r(DJ,`Note:
Loading a model from its configuration file does `),JFe=n(DJ,"STRONG",{});var OMt=s(JFe);BSr=r(OMt,"not"),OMt.forEach(t),PSr=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=n(DJ,"A",{href:!0});var VMt=s(VH);$Sr=r(VMt,"from_pretrained()"),VMt.forEach(t),ISr=r(DJ," to load the model weights."),DJ.forEach(t),qSr=i(Bi),YFe=n(Bi,"P",{});var XMt=s(YFe);NSr=r(XMt,"Examples:"),XMt.forEach(t),jSr=i(Bi),m(o7.$$.fragment,Bi),Bi.forEach(t),DSr=i(Ri),qo=n(Ri,"DIV",{class:!0});var Na=s(qo);m(r7.$$.fragment,Na),GSr=i(Na),KFe=n(Na,"P",{});var zMt=s(KFe);OSr=r(zMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zMt.forEach(t),VSr=i(Na),jn=n(Na,"P",{});var pC=s(jn);XSr=r(pC,"The model class to instantiate is selected based on the "),ZFe=n(pC,"CODE",{});var QMt=s(ZFe);zSr=r(QMt,"model_type"),QMt.forEach(t),QSr=r(pC,` property of the config object (either
passed as an argument or loaded from `),eve=n(pC,"CODE",{});var WMt=s(eve);WSr=r(WMt,"pretrained_model_name_or_path"),WMt.forEach(t),HSr=r(pC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=n(pC,"CODE",{});var HMt=s(ove);USr=r(HMt,"pretrained_model_name_or_path"),HMt.forEach(t),JSr=r(pC,":"),pC.forEach(t),YSr=i(Na),t7=n(Na,"UL",{});var oIe=s(t7);hE=n(oIe,"LI",{});var OSe=s(hE);rve=n(OSe,"STRONG",{});var UMt=s(rve);KSr=r(UMt,"beit"),UMt.forEach(t),ZSr=r(OSe," \u2014 "),XH=n(OSe,"A",{href:!0});var JMt=s(XH);eRr=r(JMt,"FlaxBeitForImageClassification"),JMt.forEach(t),oRr=r(OSe," (BEiT model)"),OSe.forEach(t),rRr=i(oIe),pE=n(oIe,"LI",{});var VSe=s(pE);tve=n(VSe,"STRONG",{});var YMt=s(tve);tRr=r(YMt,"vit"),YMt.forEach(t),aRr=r(VSe," \u2014 "),zH=n(VSe,"A",{href:!0});var KMt=s(zH);nRr=r(KMt,"FlaxViTForImageClassification"),KMt.forEach(t),sRr=r(VSe," (ViT model)"),VSe.forEach(t),oIe.forEach(t),lRr=i(Na),ave=n(Na,"P",{});var ZMt=s(ave);iRr=r(ZMt,"Examples:"),ZMt.forEach(t),dRr=i(Na),m(a7.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),XBe=i(c),Rf=n(c,"H2",{class:!0});var rIe=s(Rf);_E=n(rIe,"A",{id:!0,class:!0,href:!0});var eEt=s(_E);nve=n(eEt,"SPAN",{});var oEt=s(nve);m(n7.$$.fragment,oEt),oEt.forEach(t),eEt.forEach(t),cRr=i(rIe),sve=n(rIe,"SPAN",{});var rEt=s(sve);fRr=r(rEt,"FlaxAutoModelForVision2Seq"),rEt.forEach(t),rIe.forEach(t),zBe=i(c),Vr=n(c,"DIV",{class:!0});var Pi=s(Vr);m(s7.$$.fragment,Pi),mRr=i(Pi),Bf=n(Pi,"P",{});var GJ=s(Bf);gRr=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),QH=n(GJ,"A",{href:!0});var tEt=s(QH);hRr=r(tEt,"from_pretrained()"),tEt.forEach(t),pRr=r(GJ," class method or the "),WH=n(GJ,"A",{href:!0});var aEt=s(WH);_Rr=r(aEt,"from_config()"),aEt.forEach(t),uRr=r(GJ,` class
method.`),GJ.forEach(t),bRr=i(Pi),l7=n(Pi,"P",{});var tIe=s(l7);FRr=r(tIe,"This class cannot be instantiated directly using "),lve=n(tIe,"CODE",{});var nEt=s(lve);vRr=r(nEt,"__init__()"),nEt.forEach(t),TRr=r(tIe," (throws an error)."),tIe.forEach(t),MRr=i(Pi),qt=n(Pi,"DIV",{class:!0});var $i=s(qt);m(i7.$$.fragment,$i),ERr=i($i),ive=n($i,"P",{});var sEt=s(ive);CRr=r(sEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sEt.forEach(t),wRr=i($i),Pf=n($i,"P",{});var OJ=s(Pf);ARr=r(OJ,`Note:
Loading a model from its configuration file does `),dve=n(OJ,"STRONG",{});var lEt=s(dve);yRr=r(lEt,"not"),lEt.forEach(t),LRr=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(OJ,"A",{href:!0});var iEt=s(HH);xRr=r(iEt,"from_pretrained()"),iEt.forEach(t),kRr=r(OJ," to load the model weights."),OJ.forEach(t),SRr=i($i),cve=n($i,"P",{});var dEt=s(cve);RRr=r(dEt,"Examples:"),dEt.forEach(t),BRr=i($i),m(d7.$$.fragment,$i),$i.forEach(t),PRr=i(Pi),No=n(Pi,"DIV",{class:!0});var ja=s(No);m(c7.$$.fragment,ja),$Rr=i(ja),fve=n(ja,"P",{});var cEt=s(fve);IRr=r(cEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cEt.forEach(t),qRr=i(ja),Dn=n(ja,"P",{});var _C=s(Dn);NRr=r(_C,"The model class to instantiate is selected based on the "),mve=n(_C,"CODE",{});var fEt=s(mve);jRr=r(fEt,"model_type"),fEt.forEach(t),DRr=r(_C,` property of the config object (either
passed as an argument or loaded from `),gve=n(_C,"CODE",{});var mEt=s(gve);GRr=r(mEt,"pretrained_model_name_or_path"),mEt.forEach(t),ORr=r(_C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=n(_C,"CODE",{});var gEt=s(hve);VRr=r(gEt,"pretrained_model_name_or_path"),gEt.forEach(t),XRr=r(_C,":"),_C.forEach(t),zRr=i(ja),pve=n(ja,"UL",{});var hEt=s(pve);uE=n(hEt,"LI",{});var XSe=s(uE);_ve=n(XSe,"STRONG",{});var pEt=s(_ve);QRr=r(pEt,"vision-encoder-decoder"),pEt.forEach(t),WRr=r(XSe," \u2014 "),UH=n(XSe,"A",{href:!0});var _Et=s(UH);HRr=r(_Et,"FlaxVisionEncoderDecoderModel"),_Et.forEach(t),URr=r(XSe," (Vision Encoder decoder model)"),XSe.forEach(t),hEt.forEach(t),JRr=i(ja),uve=n(ja,"P",{});var uEt=s(uve);YRr=r(uEt,"Examples:"),uEt.forEach(t),KRr=i(ja),m(f7.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(yEt)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(ce,"class","relative group"),d(Gn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoConfig"),d(Vn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoModel"),d(Xn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Vf,"id","transformers.AutoConfig"),d(Vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vf,"href","#transformers.AutoConfig"),d(Xi,"class","relative group"),d(p9,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(_9,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig"),d(u9,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig"),d(b9,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig"),d(F9,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig"),d(v9,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(T9,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig"),d(M9,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(E9,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(C9,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(w9,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig"),d(A9,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig"),d(y9,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig"),d(L9,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig"),d(x9,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig"),d(k9,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig"),d(S9,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(R9,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(B9,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig"),d(P9,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d($9,"href","/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(I9,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig"),d(q9,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig"),d(N9,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig"),d(j9,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig"),d(D9,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig"),d(G9,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig"),d(O9,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(V9,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig"),d(X9,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig"),d(z9,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig"),d(Q9,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig"),d(W9,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNConfig"),d(H9,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config"),d(U9,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(J9,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig"),d(Y9,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig"),d(K9,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig"),d(Z9,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(ex,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(ox,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(rx,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig"),d(tx,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig"),d(ax,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig"),d(nx,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig"),d(sx,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config"),d(lx,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig"),d(ix,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(dx,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig"),d(cx,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(fx,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(mx,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig"),d(gx,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config"),d(hx,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(px,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(_x,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig"),d(ux,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig"),d(bx,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig"),d(Fx,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(vx,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(Tx,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Mx,"href","/docs/transformers/pr_16543/en/model_doc/rag#transformers.RagConfig"),d(Ex,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmConfig"),d(Cx,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig"),d(wx,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig"),d(Ax,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig"),d(yx,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig"),d(Lx,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig"),d(xx,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig"),d(kx,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig"),d(Sx,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig"),d(Rx,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig"),d(Bx,"href","/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Px,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d($x,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Ix,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig"),d(qx,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(Nx,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig"),d(jx,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config"),d(Dx,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig"),d(Gx,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(Ox,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRConfig"),d(Vx,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(Xx,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(zx,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig"),d(Qx,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig"),d(Wx,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(Hx,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(Ux,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(Jx,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig"),d(Yx,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(Kx,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(Zx,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig"),d(ek,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig"),d(ok,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig"),d(rk,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(tk,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(ak,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(nk,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig"),d(sk,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d($g,"class","docstring"),d(Qo,"class","docstring"),d(Ig,"id","transformers.AutoTokenizer"),d(Ig,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ig,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(lk,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(ik,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),d(dk,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(ck,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartTokenizer"),d(fk,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartTokenizerFast"),d(mk,"href","/docs/transformers/pr_16543/en/model_doc/barthez#transformers.BarthezTokenizer"),d(gk,"href","/docs/transformers/pr_16543/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(hk,"href","/docs/transformers/pr_16543/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(pk,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),d(_k,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),d(uk,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(bk,"href","/docs/transformers/pr_16543/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(Fk,"href","/docs/transformers/pr_16543/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(vk,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(Tk,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Mk,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Ek,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Ck,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(wk,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Ak,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(yk,"href","/docs/transformers/pr_16543/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Lk,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertTokenizer"),d(xk,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(kk,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineTokenizer"),d(Sk,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizer"),d(Rk,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Bk,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Pk,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d($k,"href","/docs/transformers/pr_16543/en/model_doc/cpm#transformers.CpmTokenizer"),d(Ik,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(qk,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Nk,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(jk,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Dk,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Gk,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Ok,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Vk,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Xk,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraTokenizer"),d(zk,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Qk,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Wk,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetTokenizer"),d(Hk,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Uk,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Jk,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Yk,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Kk,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Zk,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(eS,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(oS,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(rS,"href","/docs/transformers/pr_16543/en/model_doc/herbert#transformers.HerbertTokenizer"),d(tS,"href","/docs/transformers/pr_16543/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(aS,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(nS,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),d(sS,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(lS,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(iS,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(dS,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(cS,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(fS,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(mS,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(gS,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDTokenizer"),d(hS,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDTokenizerFast"),d(pS,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerTokenizer"),d(_S,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(uS,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeTokenizer"),d(bS,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(FS,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(vS,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(TS,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianTokenizer"),d(MS,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartTokenizer"),d(ES,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(CS,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(wS,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(AS,"href","/docs/transformers/pr_16543/en/model_doc/mluke#transformers.MLukeTokenizer"),d(yS,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(LS,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(xS,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(kS,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(SS,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5Tokenizer"),d(RS,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5TokenizerFast"),d(BS,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(PS,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d($S,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(IS,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(qS,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(NS,"href","/docs/transformers/pr_16543/en/model_doc/phobert#transformers.PhobertTokenizer"),d(jS,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartTokenizer"),d(DS,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(GS,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),d(OS,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),d(VS,"href","/docs/transformers/pr_16543/en/model_doc/rag#transformers.RagTokenizer"),d(XS,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmTokenizer"),d(zS,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmTokenizerFast"),d(QS,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerTokenizer"),d(WS,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(HS,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertTokenizer"),d(US,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(JS,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(YS,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(KS,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),d(ZS,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(eR,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(oR,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(rR,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(tR,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(aR,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterTokenizer"),d(nR,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(sR,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(lR,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(iR,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5Tokenizer"),d(dR,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5TokenizerFast"),d(cR,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasTokenizer"),d(fR,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(mR,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(gR,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(hR,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMTokenizer"),d(pR,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(_R,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMTokenizer"),d(uR,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(bR,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(FR,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(vR,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(TR,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(mh,"class","docstring"),d(Wo,"class","docstring"),d(gh,"id","transformers.AutoFeatureExtractor"),d(gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gh,"href","#transformers.AutoFeatureExtractor"),d(Wi,"class","relative group"),d(MR,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(ER,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(CR,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(wR,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(AR,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(yR,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(LR,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(xR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(kR,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(SR,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(RR,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(BR,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(PR,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d($R,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(IR,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(qR,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(NR,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(jR,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(DR,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(Bh,"class","docstring"),d(Ho,"class","docstring"),d(Ph,"id","transformers.AutoProcessor"),d(Ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ph,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(GR,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(OR,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPProcessor"),d(VR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(XR,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(zR,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(QR,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(WR,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRProcessor"),d(HR,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(UR,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Xh,"class","docstring"),d(Uo,"class","docstring"),d(zh,"id","transformers.AutoModel"),d(zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(JR,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YR,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KR,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring"),d(ZR,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertModel"),d(eB,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartModel"),d(oB,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitModel"),d(rB,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel"),d(tB,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(aB,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdModel"),d(nB,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(sB,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(lB,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(iB,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertModel"),d(dB,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineModel"),d(cB,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPModel"),d(fB,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertModel"),d(mB,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextModel"),d(gB,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLModel"),d(hB,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(pB,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(_B,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaModel"),d(uB,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(bB,"href","/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(FB,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTModel"),d(vB,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrModel"),d(TB,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertModel"),d(MB,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(EB,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTModel"),d(CB,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraModel"),d(wB,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertModel"),d(AB,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetModel"),d(yB,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTModel"),d(LB,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelModel"),d(xB,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelBaseModel"),d(kB,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNModel"),d(SB,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Model"),d(RB,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(BB,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJModel"),d(PB,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertModel"),d($B,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertModel"),d(IB,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(qB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(NB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(jB,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDModel"),d(DB,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerModel"),d(GB,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeModel"),d(OB,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertModel"),d(VB,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model"),d(XB,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianModel"),d(zB,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerModel"),d(QB,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartModel"),d(WB,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(HB,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertModel"),d(UB,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetModel"),d(JB,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Model"),d(YB,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerModel"),d(KB,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(ZB,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusModel"),d(eP,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverModel"),d(oP,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartModel"),d(rP,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerModel"),d(tP,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(aP,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertModel"),d(nP,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModel"),d(sP,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertModel"),d(lP,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetModel"),d(iP,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel"),d(dP,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaModel"),d(cP,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerModel"),d(fP,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerModel"),d(mP,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWModel"),d(gP,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDModel"),d(hP,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(pP,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterModel"),d(_P,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(uP,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinModel"),d(bP,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Model"),d(FP,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasModel"),d(vP,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(TP,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechModel"),d(MP,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(EP,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanModel"),d(CP,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltModel"),d(wP,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(AP,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertModel"),d(yP,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTModel"),d(LP,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(xP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(kP,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMModel"),d(SP,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMModel"),d(RP,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMModel"),d(BP,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(PP,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d($P,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(IP,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetModel"),d(qP,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring"),d(Jo,"class","docstring"),d(k_,"id","transformers.AutoModelForPreTraining"),d(k_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(NP,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jP,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DP,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring"),d(GP,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForPreTraining"),d(OP,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(VP,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForPreTraining"),d(XP,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(zP,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(QP,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(WP,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(HP,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(UP,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(JP,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(YP,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForPreTraining"),d(KP,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(ZP,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForPreTraining"),d(e$,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(o$,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(r$,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(t$,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(a$,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(n$,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(s$,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(l$,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(i$,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(d$,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(c$,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(f$,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel"),d(m$,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(g$,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(h$,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(p$,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(_$,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(u$,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(b$,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(F$,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(v$,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(T$,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(M$,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(E$,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(C$,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(w$,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(uu,"id","transformers.AutoModelForCausalLM"),d(uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uu,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(A$,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(y$,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(L$,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring"),d(x$,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForCausalLM"),d(k$,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertLMHeadModel"),d(S$,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(R$,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(B$,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(P$,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d($$,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(I$,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(q$,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(N$,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(j$,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForCausalLM"),d(D$,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(G$,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(O$,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(V$,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianForCausalLM"),d(X$,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForCausalLM"),d(z$,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(Q$,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(W$,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(H$,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(U$,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(J$,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(Y$,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(K$,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(Z$,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(eI,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(oI,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(rI,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(tI,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(aI,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(nI,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(sI,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(lI,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(iI,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(dI,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(e1,"id","transformers.AutoModelForMaskedLM"),d(e1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e1,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(cI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring"),d(gI,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(hI,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(pI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMaskedLM"),d(_I,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(uI,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(bI,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(FI,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(vI,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(TI,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(MI,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(EI,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(CI,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(wI,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(AI,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(yI,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(LI,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(xI,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(kI,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(SI,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(RI,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(BI,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(PI,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d($I,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(II,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(qI,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(NI,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(jI,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(DI,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(GI,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(OI,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(VI,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(XI,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(zI,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(QI,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring"),d(Zo,"class","docstring"),d(q1,"id","transformers.AutoModelForSeq2SeqLM"),d(q1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q1,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(WI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring"),d(JI,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(YI,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(KI,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(ZI,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(eq,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(oq,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(rq,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(tq,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(aq,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianMTModel"),d(nq,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(sq,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(lq,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(iq,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(dq,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(cq,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(fq,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(o4,"id","transformers.AutoModelForSequenceClassification"),d(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o4,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(mq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring"),d(pq,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(_q,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification"),d(uq,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForSequenceClassification"),d(bq,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(Fq,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(vq,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Tq,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(Mq,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Eq,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Cq,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(wq,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Aq,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(yq,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Lq,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(xq,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(kq,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(Sq,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(Rq,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(Bq,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(Pq,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d($q,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(Iq,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(qq,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(Nq,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForSequenceClassification"),d(jq,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(Dq,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(zq,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(U4,"id","transformers.AutoModelForMultipleChoice"),d(U4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U4,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(lN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring"),d(cN,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(fN,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMultipleChoice"),d(mN,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(gN,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(hN,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(pN,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(_N,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(uN,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(bN,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(FN,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(vN,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(TN,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(MN,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(EN,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(CN,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(wN,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(AN,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(yN,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(LN,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(xN,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(kN,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(SN,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(RN,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(BN,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(PN,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d($N,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(IN,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(qN,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(wb,"id","transformers.AutoModelForNextSentencePrediction"),d(wb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wb,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(NN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring"),d(GN,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(ON,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(VN,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(XN,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(zN,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring"),d(tr,"class","docstring"),d(Rb,"id","transformers.AutoModelForTokenClassification"),d(Rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rb,"href","#transformers.AutoModelForTokenClassification"),d(vd,"class","relative group"),d(QN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring"),d(UN,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(JN,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForTokenClassification"),d(YN,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(KN,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(ZN,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForTokenClassification"),d(ej,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(oj,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(rj,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(tj,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(aj,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(nj,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(sj,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(lj,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(ij,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(dj,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(cj,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(fj,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(mj,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(gj,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(hj,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(pj,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(_j,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(uj,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(bj,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(Fj,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(vj,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Tj,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Mj,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Ej,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Cj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(wj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Aj,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(yj,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(g5,"id","transformers.AutoModelForQuestionAnswering"),d(g5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g5,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Lj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring"),d(Sj,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(Rj,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(Bj,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(Pj,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d($j,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(Ij,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(qj,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(Nj,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(jj,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(Dj,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(Gj,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(Oj,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(Vj,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(Xj,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(zj,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(Qj,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(Wj,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(Hj,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(Uj,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(Jj,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(Yj,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(Kj,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(Zj,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(mD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(pD,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(e3,"id","transformers.AutoModelForTableQuestionAnswering"),d(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e3,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(_D,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring"),d(FD,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring"),d(sr,"class","docstring"),d(t3,"id","transformers.AutoModelForImageClassification"),d(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t3,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(vD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring"),d(ED,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForImageClassification"),d(CD,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(wD,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassification"),d(AD,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(yD,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(LD,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(xD,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(kD,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(SD,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(RD,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(BD,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(PD,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForImageClassification"),d($D,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanForImageClassification"),d(ID,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(h3,"id","transformers.AutoModelForVision2Seq"),d(h3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h3,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(qD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ND,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring"),d(DD,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(u3,"id","transformers.AutoModelForAudioClassification"),d(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u3,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(GD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring"),d(XD,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(zD,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(QD,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(WD,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(HD,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(UD,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(JD,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(YD,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(y3,"id","transformers.AutoModelForAudioFrameClassification"),d(y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y3,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(KD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring"),d(oG,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(rG,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(tG,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(aG,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(B3,"id","transformers.AutoModelForCTC"),d(B3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(B3,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(nG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring"),d(iG,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(dG,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForCTC"),d(cG,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForCTC"),d(fG,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForCTC"),d(mG,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(gG,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(hG,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(pG,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(V3,"id","transformers.AutoModelForSpeechSeq2Seq"),d(V3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V3,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Xd,"class","relative group"),d(_G,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring"),d(FG,"href","/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(vG,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(W3,"id","transformers.AutoModelForAudioXVector"),d(W3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W3,"href","#transformers.AutoModelForAudioXVector"),d(Wd,"class","relative group"),d(TG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring"),d(CG,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(wG,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(AG,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(yG,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(Z3,"id","transformers.AutoModelForMaskedImageModeling"),d(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z3,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(LG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring"),d(SG,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(RG,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(BG,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(a2,"id","transformers.AutoModelForObjectDetection"),d(a2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a2,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(PG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($G,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring"),d(qG,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(l2,"id","transformers.AutoModelForImageSegmentation"),d(l2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l2,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(NG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring"),d(GG,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(c2,"id","transformers.AutoModelForSemanticSegmentation"),d(c2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c2,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(OG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring"),d(zG,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(QG,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(WG,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(p2,"id","transformers.AutoModelForInstanceSegmentation"),d(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p2,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(HG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring"),d(YG,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(b2,"id","transformers.TFAutoModel"),d(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b2,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(KG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring"),d(oO,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertModel"),d(rO,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartModel"),d(tO,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertModel"),d(aO,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(nO,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(sO,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertModel"),d(lO,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.TFCLIPModel"),d(iO,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertModel"),d(dO,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextModel"),d(cO,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLModel"),d(fO,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaModel"),d(mO,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(gO,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(hO,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(pO,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraModel"),d(_O,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(uO,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelModel"),d(bO,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(FO,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2Model"),d(vO,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJModel"),d(TO,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.TFHubertModel"),d(MO,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(EO,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDModel"),d(CO,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerModel"),d(wO,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertModel"),d(AO,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianModel"),d(yO,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartModel"),d(LO,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(xO,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetModel"),d(kO,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5Model"),d(SO,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(RO,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusModel"),d(BO,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertModel"),d(PO,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaModel"),d($O,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerModel"),d(IO,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(qO,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5Model"),d(NO,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasModel"),d(jO,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(DO,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTModel"),d(GO,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(OO,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(VO,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMModel"),d(XO,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMModel"),d(zO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(QO,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(Fr,"class","docstring"),d(dF,"id","transformers.TFAutoModelForPreTraining"),d(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dF,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(WO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring"),d(JO,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(YO,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(KO,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForPreTraining"),d(ZO,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(eV,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(oV,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(rV,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(tV,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(aV,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(nV,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(sV,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(lV,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(iV,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(dV,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(cV,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(fV,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(mV,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(gV,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(hV,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(pV,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(_V,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(uV,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bV,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(vr,"class","docstring"),d(BF,"id","transformers.TFAutoModelForCausalLM"),d(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BF,"href","#transformers.TFAutoModelForCausalLM"),d(Fc,"class","relative group"),d(FV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring"),d(MV,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(EV,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(CV,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(wV,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(AV,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(yV,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(LV,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(xV,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(kV,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(SV,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(RV,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(BV,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(PV,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Tr,"class","docstring"),d(WF,"id","transformers.TFAutoModelForImageClassification"),d(WF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WF,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d($V,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring"),d(NV,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(jV,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Mr,"class","docstring"),d(JF,"id","transformers.TFAutoModelForMaskedLM"),d(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(JF,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(DV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring"),d(VV,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(XV,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(zV,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(QV,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(WV,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(HV,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(UV,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(JV,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(YV,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(KV,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(ZV,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(eX,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(oX,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(rX,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(tX,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(aX,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(nX,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(sX,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(lX,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(iX,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Er,"class","docstring"),d(uv,"id","transformers.TFAutoModelForSeq2SeqLM"),d(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uv,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(dX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring"),d(mX,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(gX,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(hX,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(pX,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(_X,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(uX,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianMTModel"),d(bX,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(FX,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(vX,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(TX,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring"),d(Cr,"class","docstring"),d(Lv,"id","transformers.TFAutoModelForSequenceClassification"),d(Lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lv,"href","#transformers.TFAutoModelForSequenceClassification"),d(Sc,"class","relative group"),d(MX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring"),d(wX,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(AX,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(yX,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(LX,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(xX,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(kX,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(SX,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(RX,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(BX,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(PX,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d($X,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(IX,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(qX,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(NX,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(jX,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(DX,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(GX,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(OX,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(VX,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(XX,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(zX,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(QX,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(WX,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(HX,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(UX,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(JX,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(wr,"class","docstring"),d(o6,"id","transformers.TFAutoModelForMultipleChoice"),d(o6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o6,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(YX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring"),d(ez,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(oz,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(rz,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(tz,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(az,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(nz,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(sz,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(lz,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(iz,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(dz,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(cz,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(fz,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(mz,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(gz,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(hz,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(pz,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(_z,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Ar,"class","docstring"),d(F6,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(F6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F6,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(qc,"class","relative group"),d(uz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Fz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring"),d(vz,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(T6,"id","transformers.TFAutoModelForTokenClassification"),d(T6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T6,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(Tz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Ez,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring"),d(Cz,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(wz,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Az,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(yz,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(Lz,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(xz,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(kz,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(Sz,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(Rz,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(Bz,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(Pz,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d($z,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(Iz,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(qz,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(Nz,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(jz,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(Dz,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(Gz,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(Oz,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(Vz,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring"),d(Lr,"class","docstring"),d(O6,"id","transformers.TFAutoModelForQuestionAnswering"),d(O6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O6,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(Xz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Qz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring"),d(Wz,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(Hz,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(Uz,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(Jz,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(Yz,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(Kz,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(Zz,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(eQ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(oQ,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(rQ,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(tQ,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(aQ,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(nQ,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(sQ,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(lQ,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(iQ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(dQ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(cQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(fQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(mQ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring"),d(xr,"class","docstring"),d(dT,"id","transformers.TFAutoModelForVision2Seq"),d(dT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dT,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(gQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring"),d(_Q,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(fT,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fT,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(uQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring"),d(vQ,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring"),d(Sr,"class","docstring"),d(gT,"id","transformers.FlaxAutoModel"),d(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gT,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(TQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring"),d(CQ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertModel"),d(wQ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartModel"),d(AQ,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitModel"),d(yQ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertModel"),d(LQ,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(xQ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(kQ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(SQ,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.FlaxCLIPModel"),d(RQ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(BQ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraModel"),d(PQ,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d($Q,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(IQ,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(qQ,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianModel"),d(NQ,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartModel"),d(jQ,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5Model"),d(DQ,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(GQ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(OQ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(VQ,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5Model"),d(XQ,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(zQ,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTModel"),d(QQ,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(WQ,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(HQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring"),d(Rr,"class","docstring"),d(jT,"id","transformers.FlaxAutoModelForCausalLM"),d(jT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jT,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(UQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring"),d(KQ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(ZQ,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(eW,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(oW,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(rW,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Br,"class","docstring"),d(zT,"id","transformers.FlaxAutoModelForPreTraining"),d(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zT,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(tW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring"),d(sW,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(lW,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(iW,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(dW,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(cW,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(fW,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(mW,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(gW,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(hW,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(pW,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(_W,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(uW,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d(Pr,"class","docstring"),d(aM,"id","transformers.FlaxAutoModelForMaskedLM"),d(aM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aM,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(bW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring"),d(TW,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(MW,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(EW,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(CW,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(wW,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(AW,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(yW,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(LW,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(xW,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(kW,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring"),d($r,"class","docstring"),d(pM,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pM,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(SW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring"),d(PW,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d($W,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(IW,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(qW,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(NW,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(jW,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(DW,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(GW,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(OW,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring"),d(Ir,"class","docstring"),d(wM,"id","transformers.FlaxAutoModelForSequenceClassification"),d(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wM,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(VW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring"),d(QW,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(WW,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(HW,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(UW,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(JW,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(YW,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(KW,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(ZW,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(eH,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(oH,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(qr,"class","docstring"),d(IM,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(IM,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(rH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring"),d(nH,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(sH,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(lH,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(iH,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(dH,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(cH,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(fH,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(mH,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(gH,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(hH,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring"),d(Nr,"class","docstring"),d(WM,"id","transformers.FlaxAutoModelForTokenClassification"),d(WM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WM,"href","#transformers.FlaxAutoModelForTokenClassification"),d(vf,"class","relative group"),d(pH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_H,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring"),d(bH,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(FH,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(vH,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(TH,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(MH,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(EH,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(CH,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(wH,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(rE,"id","transformers.FlaxAutoModelForMultipleChoice"),d(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rE,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Ef,"class","relative group"),d(AH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring"),d(xH,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(kH,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(SH,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(RH,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(BH,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(PH,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d($H,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(IH,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(fE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Af,"class","relative group"),d(qH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring"),d(DH,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(gE,"id","transformers.FlaxAutoModelForImageClassification"),d(gE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gE,"href","#transformers.FlaxAutoModelForImageClassification"),d(xf,"class","relative group"),d(GH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring"),d(XH,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(zH,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring"),d(Or,"class","docstring"),d(_E,"id","transformers.FlaxAutoModelForVision2Seq"),d(_E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_E,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(QH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring"),d(UH,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Vr,"class","docstring")},m(c,u){e(document.head,Z),b(c,io,u),b(c,ce,u),e(ce,Ce),e(Ce,lo),g(ge,lo,null),e(ce,Me),e(ce,Xo),e(Xo,Ii),b(c,qf,u),b(c,fa,u),e(fa,qi),e(fa,Ni),e(Ni,uC),e(fa,Nf),b(c,xe,u),b(c,co,u),e(co,ji),e(co,Gn),e(Gn,bC),e(co,On),e(co,Vn),e(Vn,FC),e(co,Di),e(co,Xn),e(Xn,vC),e(co,Gi),b(c,jf,u),g(Da,c,u),b(c,fo,u),b(c,_e,u),e(_e,d9),e(_e,Oi),e(Oi,c9),e(_e,f9),b(c,zo,u),b(c,Ga,u),e(Ga,m9),e(Ga,Df),e(Df,g9),e(Ga,aIe),b(c,zSe,u),b(c,Vi,u),e(Vi,Gf),e(Gf,VJ),g(TC,VJ,null),e(Vi,nIe),e(Vi,XJ),e(XJ,sIe),b(c,QSe,u),b(c,zn,u),e(zn,lIe),e(zn,zJ),e(zJ,iIe),e(zn,dIe),e(zn,QJ),e(QJ,cIe),e(zn,fIe),b(c,WSe,u),g(MC,c,u),b(c,HSe,u),b(c,h9,u),e(h9,mIe),b(c,USe,u),g(Of,c,u),b(c,JSe,u),b(c,Xi,u),e(Xi,Vf),e(Vf,WJ),g(EC,WJ,null),e(Xi,gIe),e(Xi,HJ),e(HJ,hIe),b(c,YSe,u),b(c,Qo,u),g(CC,Qo,null),e(Qo,pIe),e(Qo,wC),e(wC,_Ie),e(wC,p9),e(p9,uIe),e(wC,bIe),e(Qo,FIe),e(Qo,AC),e(AC,vIe),e(AC,UJ),e(UJ,TIe),e(AC,MIe),e(Qo,EIe),e(Qo,mo),g(yC,mo,null),e(mo,CIe),e(mo,JJ),e(JJ,wIe),e(mo,AIe),e(mo,zi),e(zi,yIe),e(zi,YJ),e(YJ,LIe),e(zi,xIe),e(zi,KJ),e(KJ,kIe),e(zi,SIe),e(mo,RIe),e(mo,F),e(F,Xf),e(Xf,ZJ),e(ZJ,BIe),e(Xf,PIe),e(Xf,_9),e(_9,$Ie),e(Xf,IIe),e(F,qIe),e(F,zf),e(zf,eY),e(eY,NIe),e(zf,jIe),e(zf,u9),e(u9,DIe),e(zf,GIe),e(F,OIe),e(F,Qf),e(Qf,oY),e(oY,VIe),e(Qf,XIe),e(Qf,b9),e(b9,zIe),e(Qf,QIe),e(F,WIe),e(F,Wf),e(Wf,rY),e(rY,HIe),e(Wf,UIe),e(Wf,F9),e(F9,JIe),e(Wf,YIe),e(F,KIe),e(F,Hf),e(Hf,tY),e(tY,ZIe),e(Hf,eqe),e(Hf,v9),e(v9,oqe),e(Hf,rqe),e(F,tqe),e(F,Uf),e(Uf,aY),e(aY,aqe),e(Uf,nqe),e(Uf,T9),e(T9,sqe),e(Uf,lqe),e(F,iqe),e(F,Jf),e(Jf,nY),e(nY,dqe),e(Jf,cqe),e(Jf,M9),e(M9,fqe),e(Jf,mqe),e(F,gqe),e(F,Yf),e(Yf,sY),e(sY,hqe),e(Yf,pqe),e(Yf,E9),e(E9,_qe),e(Yf,uqe),e(F,bqe),e(F,Kf),e(Kf,lY),e(lY,Fqe),e(Kf,vqe),e(Kf,C9),e(C9,Tqe),e(Kf,Mqe),e(F,Eqe),e(F,Zf),e(Zf,iY),e(iY,Cqe),e(Zf,wqe),e(Zf,w9),e(w9,Aqe),e(Zf,yqe),e(F,Lqe),e(F,em),e(em,dY),e(dY,xqe),e(em,kqe),e(em,A9),e(A9,Sqe),e(em,Rqe),e(F,Bqe),e(F,om),e(om,cY),e(cY,Pqe),e(om,$qe),e(om,y9),e(y9,Iqe),e(om,qqe),e(F,Nqe),e(F,rm),e(rm,fY),e(fY,jqe),e(rm,Dqe),e(rm,L9),e(L9,Gqe),e(rm,Oqe),e(F,Vqe),e(F,tm),e(tm,mY),e(mY,Xqe),e(tm,zqe),e(tm,x9),e(x9,Qqe),e(tm,Wqe),e(F,Hqe),e(F,am),e(am,gY),e(gY,Uqe),e(am,Jqe),e(am,k9),e(k9,Yqe),e(am,Kqe),e(F,Zqe),e(F,nm),e(nm,hY),e(hY,eNe),e(nm,oNe),e(nm,S9),e(S9,rNe),e(nm,tNe),e(F,aNe),e(F,sm),e(sm,pY),e(pY,nNe),e(sm,sNe),e(sm,R9),e(R9,lNe),e(sm,iNe),e(F,dNe),e(F,lm),e(lm,_Y),e(_Y,cNe),e(lm,fNe),e(lm,B9),e(B9,mNe),e(lm,gNe),e(F,hNe),e(F,im),e(im,uY),e(uY,pNe),e(im,_Ne),e(im,P9),e(P9,uNe),e(im,bNe),e(F,FNe),e(F,dm),e(dm,bY),e(bY,vNe),e(dm,TNe),e(dm,$9),e($9,MNe),e(dm,ENe),e(F,CNe),e(F,cm),e(cm,FY),e(FY,wNe),e(cm,ANe),e(cm,I9),e(I9,yNe),e(cm,LNe),e(F,xNe),e(F,fm),e(fm,vY),e(vY,kNe),e(fm,SNe),e(fm,q9),e(q9,RNe),e(fm,BNe),e(F,PNe),e(F,mm),e(mm,TY),e(TY,$Ne),e(mm,INe),e(mm,N9),e(N9,qNe),e(mm,NNe),e(F,jNe),e(F,gm),e(gm,MY),e(MY,DNe),e(gm,GNe),e(gm,j9),e(j9,ONe),e(gm,VNe),e(F,XNe),e(F,hm),e(hm,EY),e(EY,zNe),e(hm,QNe),e(hm,D9),e(D9,WNe),e(hm,HNe),e(F,UNe),e(F,pm),e(pm,CY),e(CY,JNe),e(pm,YNe),e(pm,G9),e(G9,KNe),e(pm,ZNe),e(F,eje),e(F,_m),e(_m,wY),e(wY,oje),e(_m,rje),e(_m,O9),e(O9,tje),e(_m,aje),e(F,nje),e(F,um),e(um,AY),e(AY,sje),e(um,lje),e(um,V9),e(V9,ije),e(um,dje),e(F,cje),e(F,bm),e(bm,yY),e(yY,fje),e(bm,mje),e(bm,X9),e(X9,gje),e(bm,hje),e(F,pje),e(F,Fm),e(Fm,LY),e(LY,_je),e(Fm,uje),e(Fm,z9),e(z9,bje),e(Fm,Fje),e(F,vje),e(F,vm),e(vm,xY),e(xY,Tje),e(vm,Mje),e(vm,Q9),e(Q9,Eje),e(vm,Cje),e(F,wje),e(F,Tm),e(Tm,kY),e(kY,Aje),e(Tm,yje),e(Tm,W9),e(W9,Lje),e(Tm,xje),e(F,kje),e(F,Mm),e(Mm,SY),e(SY,Sje),e(Mm,Rje),e(Mm,H9),e(H9,Bje),e(Mm,Pje),e(F,$je),e(F,Em),e(Em,RY),e(RY,Ije),e(Em,qje),e(Em,U9),e(U9,Nje),e(Em,jje),e(F,Dje),e(F,Cm),e(Cm,BY),e(BY,Gje),e(Cm,Oje),e(Cm,J9),e(J9,Vje),e(Cm,Xje),e(F,zje),e(F,wm),e(wm,PY),e(PY,Qje),e(wm,Wje),e(wm,Y9),e(Y9,Hje),e(wm,Uje),e(F,Jje),e(F,Am),e(Am,$Y),e($Y,Yje),e(Am,Kje),e(Am,K9),e(K9,Zje),e(Am,eDe),e(F,oDe),e(F,ym),e(ym,IY),e(IY,rDe),e(ym,tDe),e(ym,Z9),e(Z9,aDe),e(ym,nDe),e(F,sDe),e(F,Lm),e(Lm,qY),e(qY,lDe),e(Lm,iDe),e(Lm,ex),e(ex,dDe),e(Lm,cDe),e(F,fDe),e(F,xm),e(xm,NY),e(NY,mDe),e(xm,gDe),e(xm,ox),e(ox,hDe),e(xm,pDe),e(F,_De),e(F,km),e(km,jY),e(jY,uDe),e(km,bDe),e(km,rx),e(rx,FDe),e(km,vDe),e(F,TDe),e(F,Sm),e(Sm,DY),e(DY,MDe),e(Sm,EDe),e(Sm,tx),e(tx,CDe),e(Sm,wDe),e(F,ADe),e(F,Rm),e(Rm,GY),e(GY,yDe),e(Rm,LDe),e(Rm,ax),e(ax,xDe),e(Rm,kDe),e(F,SDe),e(F,Bm),e(Bm,OY),e(OY,RDe),e(Bm,BDe),e(Bm,nx),e(nx,PDe),e(Bm,$De),e(F,IDe),e(F,Pm),e(Pm,VY),e(VY,qDe),e(Pm,NDe),e(Pm,sx),e(sx,jDe),e(Pm,DDe),e(F,GDe),e(F,$m),e($m,XY),e(XY,ODe),e($m,VDe),e($m,lx),e(lx,XDe),e($m,zDe),e(F,QDe),e(F,Im),e(Im,zY),e(zY,WDe),e(Im,HDe),e(Im,ix),e(ix,UDe),e(Im,JDe),e(F,YDe),e(F,qm),e(qm,QY),e(QY,KDe),e(qm,ZDe),e(qm,dx),e(dx,eGe),e(qm,oGe),e(F,rGe),e(F,Nm),e(Nm,WY),e(WY,tGe),e(Nm,aGe),e(Nm,cx),e(cx,nGe),e(Nm,sGe),e(F,lGe),e(F,jm),e(jm,HY),e(HY,iGe),e(jm,dGe),e(jm,fx),e(fx,cGe),e(jm,fGe),e(F,mGe),e(F,Dm),e(Dm,UY),e(UY,gGe),e(Dm,hGe),e(Dm,mx),e(mx,pGe),e(Dm,_Ge),e(F,uGe),e(F,Gm),e(Gm,JY),e(JY,bGe),e(Gm,FGe),e(Gm,gx),e(gx,vGe),e(Gm,TGe),e(F,MGe),e(F,Om),e(Om,YY),e(YY,EGe),e(Om,CGe),e(Om,hx),e(hx,wGe),e(Om,AGe),e(F,yGe),e(F,Vm),e(Vm,KY),e(KY,LGe),e(Vm,xGe),e(Vm,px),e(px,kGe),e(Vm,SGe),e(F,RGe),e(F,Xm),e(Xm,ZY),e(ZY,BGe),e(Xm,PGe),e(Xm,_x),e(_x,$Ge),e(Xm,IGe),e(F,qGe),e(F,zm),e(zm,eK),e(eK,NGe),e(zm,jGe),e(zm,ux),e(ux,DGe),e(zm,GGe),e(F,OGe),e(F,Qm),e(Qm,oK),e(oK,VGe),e(Qm,XGe),e(Qm,bx),e(bx,zGe),e(Qm,QGe),e(F,WGe),e(F,Wm),e(Wm,rK),e(rK,HGe),e(Wm,UGe),e(Wm,Fx),e(Fx,JGe),e(Wm,YGe),e(F,KGe),e(F,Hm),e(Hm,tK),e(tK,ZGe),e(Hm,eOe),e(Hm,vx),e(vx,oOe),e(Hm,rOe),e(F,tOe),e(F,Um),e(Um,aK),e(aK,aOe),e(Um,nOe),e(Um,Tx),e(Tx,sOe),e(Um,lOe),e(F,iOe),e(F,Jm),e(Jm,nK),e(nK,dOe),e(Jm,cOe),e(Jm,Mx),e(Mx,fOe),e(Jm,mOe),e(F,gOe),e(F,Ym),e(Ym,sK),e(sK,hOe),e(Ym,pOe),e(Ym,Ex),e(Ex,_Oe),e(Ym,uOe),e(F,bOe),e(F,Km),e(Km,lK),e(lK,FOe),e(Km,vOe),e(Km,Cx),e(Cx,TOe),e(Km,MOe),e(F,EOe),e(F,Zm),e(Zm,iK),e(iK,COe),e(Zm,wOe),e(Zm,wx),e(wx,AOe),e(Zm,yOe),e(F,LOe),e(F,eg),e(eg,dK),e(dK,xOe),e(eg,kOe),e(eg,Ax),e(Ax,SOe),e(eg,ROe),e(F,BOe),e(F,og),e(og,cK),e(cK,POe),e(og,$Oe),e(og,yx),e(yx,IOe),e(og,qOe),e(F,NOe),e(F,rg),e(rg,fK),e(fK,jOe),e(rg,DOe),e(rg,Lx),e(Lx,GOe),e(rg,OOe),e(F,VOe),e(F,tg),e(tg,mK),e(mK,XOe),e(tg,zOe),e(tg,xx),e(xx,QOe),e(tg,WOe),e(F,HOe),e(F,ag),e(ag,gK),e(gK,UOe),e(ag,JOe),e(ag,kx),e(kx,YOe),e(ag,KOe),e(F,ZOe),e(F,ng),e(ng,hK),e(hK,eVe),e(ng,oVe),e(ng,Sx),e(Sx,rVe),e(ng,tVe),e(F,aVe),e(F,sg),e(sg,pK),e(pK,nVe),e(sg,sVe),e(sg,Rx),e(Rx,lVe),e(sg,iVe),e(F,dVe),e(F,lg),e(lg,_K),e(_K,cVe),e(lg,fVe),e(lg,Bx),e(Bx,mVe),e(lg,gVe),e(F,hVe),e(F,ig),e(ig,uK),e(uK,pVe),e(ig,_Ve),e(ig,Px),e(Px,uVe),e(ig,bVe),e(F,FVe),e(F,dg),e(dg,bK),e(bK,vVe),e(dg,TVe),e(dg,$x),e($x,MVe),e(dg,EVe),e(F,CVe),e(F,cg),e(cg,FK),e(FK,wVe),e(cg,AVe),e(cg,Ix),e(Ix,yVe),e(cg,LVe),e(F,xVe),e(F,fg),e(fg,vK),e(vK,kVe),e(fg,SVe),e(fg,qx),e(qx,RVe),e(fg,BVe),e(F,PVe),e(F,mg),e(mg,TK),e(TK,$Ve),e(mg,IVe),e(mg,Nx),e(Nx,qVe),e(mg,NVe),e(F,jVe),e(F,gg),e(gg,MK),e(MK,DVe),e(gg,GVe),e(gg,jx),e(jx,OVe),e(gg,VVe),e(F,XVe),e(F,hg),e(hg,EK),e(EK,zVe),e(hg,QVe),e(hg,Dx),e(Dx,WVe),e(hg,HVe),e(F,UVe),e(F,pg),e(pg,CK),e(CK,JVe),e(pg,YVe),e(pg,Gx),e(Gx,KVe),e(pg,ZVe),e(F,eXe),e(F,_g),e(_g,wK),e(wK,oXe),e(_g,rXe),e(_g,Ox),e(Ox,tXe),e(_g,aXe),e(F,nXe),e(F,ug),e(ug,AK),e(AK,sXe),e(ug,lXe),e(ug,Vx),e(Vx,iXe),e(ug,dXe),e(F,cXe),e(F,bg),e(bg,yK),e(yK,fXe),e(bg,mXe),e(bg,Xx),e(Xx,gXe),e(bg,hXe),e(F,pXe),e(F,Fg),e(Fg,LK),e(LK,_Xe),e(Fg,uXe),e(Fg,zx),e(zx,bXe),e(Fg,FXe),e(F,vXe),e(F,vg),e(vg,xK),e(xK,TXe),e(vg,MXe),e(vg,Qx),e(Qx,EXe),e(vg,CXe),e(F,wXe),e(F,Tg),e(Tg,kK),e(kK,AXe),e(Tg,yXe),e(Tg,Wx),e(Wx,LXe),e(Tg,xXe),e(F,kXe),e(F,Mg),e(Mg,SK),e(SK,SXe),e(Mg,RXe),e(Mg,Hx),e(Hx,BXe),e(Mg,PXe),e(F,$Xe),e(F,Eg),e(Eg,RK),e(RK,IXe),e(Eg,qXe),e(Eg,Ux),e(Ux,NXe),e(Eg,jXe),e(F,DXe),e(F,Cg),e(Cg,BK),e(BK,GXe),e(Cg,OXe),e(Cg,Jx),e(Jx,VXe),e(Cg,XXe),e(F,zXe),e(F,wg),e(wg,PK),e(PK,QXe),e(wg,WXe),e(wg,Yx),e(Yx,HXe),e(wg,UXe),e(F,JXe),e(F,Ag),e(Ag,$K),e($K,YXe),e(Ag,KXe),e(Ag,Kx),e(Kx,ZXe),e(Ag,eze),e(F,oze),e(F,yg),e(yg,IK),e(IK,rze),e(yg,tze),e(yg,Zx),e(Zx,aze),e(yg,nze),e(F,sze),e(F,Lg),e(Lg,qK),e(qK,lze),e(Lg,ize),e(Lg,ek),e(ek,dze),e(Lg,cze),e(F,fze),e(F,xg),e(xg,NK),e(NK,mze),e(xg,gze),e(xg,ok),e(ok,hze),e(xg,pze),e(F,_ze),e(F,kg),e(kg,jK),e(jK,uze),e(kg,bze),e(kg,rk),e(rk,Fze),e(kg,vze),e(F,Tze),e(F,Sg),e(Sg,DK),e(DK,Mze),e(Sg,Eze),e(Sg,tk),e(tk,Cze),e(Sg,wze),e(F,Aze),e(F,Rg),e(Rg,GK),e(GK,yze),e(Rg,Lze),e(Rg,ak),e(ak,xze),e(Rg,kze),e(F,Sze),e(F,Bg),e(Bg,OK),e(OK,Rze),e(Bg,Bze),e(Bg,nk),e(nk,Pze),e(Bg,$ze),e(F,Ize),e(F,Pg),e(Pg,VK),e(VK,qze),e(Pg,Nze),e(Pg,sk),e(sk,jze),e(Pg,Dze),e(mo,Gze),e(mo,XK),e(XK,Oze),e(mo,Vze),g(LC,mo,null),e(Qo,Xze),e(Qo,$g),g(xC,$g,null),e($g,zze),e($g,zK),e(zK,Qze),b(c,KSe,u),b(c,Qi,u),e(Qi,Ig),e(Ig,QK),g(kC,QK,null),e(Qi,Wze),e(Qi,WK),e(WK,Hze),b(c,ZSe,u),b(c,Wo,u),g(SC,Wo,null),e(Wo,Uze),e(Wo,RC),e(RC,Jze),e(RC,lk),e(lk,Yze),e(RC,Kze),e(Wo,Zze),e(Wo,BC),e(BC,eQe),e(BC,HK),e(HK,oQe),e(BC,rQe),e(Wo,tQe),e(Wo,go),g(PC,go,null),e(go,aQe),e(go,UK),e(UK,nQe),e(go,sQe),e(go,Oa),e(Oa,lQe),e(Oa,JK),e(JK,iQe),e(Oa,dQe),e(Oa,YK),e(YK,cQe),e(Oa,fQe),e(Oa,KK),e(KK,mQe),e(Oa,gQe),e(go,hQe),e(go,C),e(C,Qn),e(Qn,ZK),e(ZK,pQe),e(Qn,_Qe),e(Qn,ik),e(ik,uQe),e(Qn,bQe),e(Qn,dk),e(dk,FQe),e(Qn,vQe),e(C,TQe),e(C,Wn),e(Wn,eZ),e(eZ,MQe),e(Wn,EQe),e(Wn,ck),e(ck,CQe),e(Wn,wQe),e(Wn,fk),e(fk,AQe),e(Wn,yQe),e(C,LQe),e(C,Hn),e(Hn,oZ),e(oZ,xQe),e(Hn,kQe),e(Hn,mk),e(mk,SQe),e(Hn,RQe),e(Hn,gk),e(gk,BQe),e(Hn,PQe),e(C,$Qe),e(C,qg),e(qg,rZ),e(rZ,IQe),e(qg,qQe),e(qg,hk),e(hk,NQe),e(qg,jQe),e(C,DQe),e(C,Un),e(Un,tZ),e(tZ,GQe),e(Un,OQe),e(Un,pk),e(pk,VQe),e(Un,XQe),e(Un,_k),e(_k,zQe),e(Un,QQe),e(C,WQe),e(C,Ng),e(Ng,aZ),e(aZ,HQe),e(Ng,UQe),e(Ng,uk),e(uk,JQe),e(Ng,YQe),e(C,KQe),e(C,jg),e(jg,nZ),e(nZ,ZQe),e(jg,eWe),e(jg,bk),e(bk,oWe),e(jg,rWe),e(C,tWe),e(C,Dg),e(Dg,sZ),e(sZ,aWe),e(Dg,nWe),e(Dg,Fk),e(Fk,sWe),e(Dg,lWe),e(C,iWe),e(C,Jn),e(Jn,lZ),e(lZ,dWe),e(Jn,cWe),e(Jn,vk),e(vk,fWe),e(Jn,mWe),e(Jn,Tk),e(Tk,gWe),e(Jn,hWe),e(C,pWe),e(C,Yn),e(Yn,iZ),e(iZ,_We),e(Yn,uWe),e(Yn,Mk),e(Mk,bWe),e(Yn,FWe),e(Yn,Ek),e(Ek,vWe),e(Yn,TWe),e(C,MWe),e(C,Kn),e(Kn,dZ),e(dZ,EWe),e(Kn,CWe),e(Kn,Ck),e(Ck,wWe),e(Kn,AWe),e(Kn,wk),e(wk,yWe),e(Kn,LWe),e(C,xWe),e(C,Gg),e(Gg,cZ),e(cZ,kWe),e(Gg,SWe),e(Gg,Ak),e(Ak,RWe),e(Gg,BWe),e(C,PWe),e(C,Og),e(Og,fZ),e(fZ,$We),e(Og,IWe),e(Og,yk),e(yk,qWe),e(Og,NWe),e(C,jWe),e(C,Zn),e(Zn,mZ),e(mZ,DWe),e(Zn,GWe),e(Zn,Lk),e(Lk,OWe),e(Zn,VWe),e(Zn,xk),e(xk,XWe),e(Zn,zWe),e(C,QWe),e(C,Vg),e(Vg,gZ),e(gZ,WWe),e(Vg,HWe),e(Vg,kk),e(kk,UWe),e(Vg,JWe),e(C,YWe),e(C,es),e(es,hZ),e(hZ,KWe),e(es,ZWe),e(es,Sk),e(Sk,eHe),e(es,oHe),e(es,Rk),e(Rk,rHe),e(es,tHe),e(C,aHe),e(C,os),e(os,pZ),e(pZ,nHe),e(os,sHe),e(os,Bk),e(Bk,lHe),e(os,iHe),e(os,Pk),e(Pk,dHe),e(os,cHe),e(C,fHe),e(C,rs),e(rs,_Z),e(_Z,mHe),e(rs,gHe),e(rs,$k),e($k,hHe),e(rs,pHe),e(rs,uZ),e(uZ,_He),e(rs,uHe),e(C,bHe),e(C,Xg),e(Xg,bZ),e(bZ,FHe),e(Xg,vHe),e(Xg,Ik),e(Ik,THe),e(Xg,MHe),e(C,EHe),e(C,ts),e(ts,FZ),e(FZ,CHe),e(ts,wHe),e(ts,qk),e(qk,AHe),e(ts,yHe),e(ts,Nk),e(Nk,LHe),e(ts,xHe),e(C,kHe),e(C,zg),e(zg,vZ),e(vZ,SHe),e(zg,RHe),e(zg,jk),e(jk,BHe),e(zg,PHe),e(C,$He),e(C,as),e(as,TZ),e(TZ,IHe),e(as,qHe),e(as,Dk),e(Dk,NHe),e(as,jHe),e(as,Gk),e(Gk,DHe),e(as,GHe),e(C,OHe),e(C,ns),e(ns,MZ),e(MZ,VHe),e(ns,XHe),e(ns,Ok),e(Ok,zHe),e(ns,QHe),e(ns,Vk),e(Vk,WHe),e(ns,HHe),e(C,UHe),e(C,ss),e(ss,EZ),e(EZ,JHe),e(ss,YHe),e(ss,Xk),e(Xk,KHe),e(ss,ZHe),e(ss,zk),e(zk,eUe),e(ss,oUe),e(C,rUe),e(C,Qg),e(Qg,CZ),e(CZ,tUe),e(Qg,aUe),e(Qg,Qk),e(Qk,nUe),e(Qg,sUe),e(C,lUe),e(C,ls),e(ls,wZ),e(wZ,iUe),e(ls,dUe),e(ls,Wk),e(Wk,cUe),e(ls,fUe),e(ls,Hk),e(Hk,mUe),e(ls,gUe),e(C,hUe),e(C,Wg),e(Wg,AZ),e(AZ,pUe),e(Wg,_Ue),e(Wg,Uk),e(Uk,uUe),e(Wg,bUe),e(C,FUe),e(C,is),e(is,yZ),e(yZ,vUe),e(is,TUe),e(is,Jk),e(Jk,MUe),e(is,EUe),e(is,Yk),e(Yk,CUe),e(is,wUe),e(C,AUe),e(C,ds),e(ds,LZ),e(LZ,yUe),e(ds,LUe),e(ds,Kk),e(Kk,xUe),e(ds,kUe),e(ds,Zk),e(Zk,SUe),e(ds,RUe),e(C,BUe),e(C,cs),e(cs,xZ),e(xZ,PUe),e(cs,$Ue),e(cs,eS),e(eS,IUe),e(cs,qUe),e(cs,oS),e(oS,NUe),e(cs,jUe),e(C,DUe),e(C,fs),e(fs,kZ),e(kZ,GUe),e(fs,OUe),e(fs,rS),e(rS,VUe),e(fs,XUe),e(fs,tS),e(tS,zUe),e(fs,QUe),e(C,WUe),e(C,Hg),e(Hg,SZ),e(SZ,HUe),e(Hg,UUe),e(Hg,aS),e(aS,JUe),e(Hg,YUe),e(C,KUe),e(C,ms),e(ms,RZ),e(RZ,ZUe),e(ms,eJe),e(ms,nS),e(nS,oJe),e(ms,rJe),e(ms,sS),e(sS,tJe),e(ms,aJe),e(C,nJe),e(C,gs),e(gs,BZ),e(BZ,sJe),e(gs,lJe),e(gs,lS),e(lS,iJe),e(gs,dJe),e(gs,iS),e(iS,cJe),e(gs,fJe),e(C,mJe),e(C,hs),e(hs,PZ),e(PZ,gJe),e(hs,hJe),e(hs,dS),e(dS,pJe),e(hs,_Je),e(hs,cS),e(cS,uJe),e(hs,bJe),e(C,FJe),e(C,ps),e(ps,$Z),e($Z,vJe),e(ps,TJe),e(ps,fS),e(fS,MJe),e(ps,EJe),e(ps,mS),e(mS,CJe),e(ps,wJe),e(C,AJe),e(C,_s),e(_s,IZ),e(IZ,yJe),e(_s,LJe),e(_s,gS),e(gS,xJe),e(_s,kJe),e(_s,hS),e(hS,SJe),e(_s,RJe),e(C,BJe),e(C,us),e(us,qZ),e(qZ,PJe),e(us,$Je),e(us,pS),e(pS,IJe),e(us,qJe),e(us,_S),e(_S,NJe),e(us,jJe),e(C,DJe),e(C,Ug),e(Ug,NZ),e(NZ,GJe),e(Ug,OJe),e(Ug,uS),e(uS,VJe),e(Ug,XJe),e(C,zJe),e(C,bs),e(bs,jZ),e(jZ,QJe),e(bs,WJe),e(bs,bS),e(bS,HJe),e(bs,UJe),e(bs,FS),e(FS,JJe),e(bs,YJe),e(C,KJe),e(C,Jg),e(Jg,DZ),e(DZ,ZJe),e(Jg,eYe),e(Jg,vS),e(vS,oYe),e(Jg,rYe),e(C,tYe),e(C,Yg),e(Yg,GZ),e(GZ,aYe),e(Yg,nYe),e(Yg,TS),e(TS,sYe),e(Yg,lYe),e(C,iYe),e(C,Fs),e(Fs,OZ),e(OZ,dYe),e(Fs,cYe),e(Fs,MS),e(MS,fYe),e(Fs,mYe),e(Fs,ES),e(ES,gYe),e(Fs,hYe),e(C,pYe),e(C,vs),e(vs,VZ),e(VZ,_Ye),e(vs,uYe),e(vs,CS),e(CS,bYe),e(vs,FYe),e(vs,wS),e(wS,vYe),e(vs,TYe),e(C,MYe),e(C,Kg),e(Kg,XZ),e(XZ,EYe),e(Kg,CYe),e(Kg,AS),e(AS,wYe),e(Kg,AYe),e(C,yYe),e(C,Ts),e(Ts,zZ),e(zZ,LYe),e(Ts,xYe),e(Ts,yS),e(yS,kYe),e(Ts,SYe),e(Ts,LS),e(LS,RYe),e(Ts,BYe),e(C,PYe),e(C,Ms),e(Ms,QZ),e(QZ,$Ye),e(Ms,IYe),e(Ms,xS),e(xS,qYe),e(Ms,NYe),e(Ms,kS),e(kS,jYe),e(Ms,DYe),e(C,GYe),e(C,Es),e(Es,WZ),e(WZ,OYe),e(Es,VYe),e(Es,SS),e(SS,XYe),e(Es,zYe),e(Es,RS),e(RS,QYe),e(Es,WYe),e(C,HYe),e(C,Cs),e(Cs,HZ),e(HZ,UYe),e(Cs,JYe),e(Cs,BS),e(BS,YYe),e(Cs,KYe),e(Cs,PS),e(PS,ZYe),e(Cs,eKe),e(C,oKe),e(C,ws),e(ws,UZ),e(UZ,rKe),e(ws,tKe),e(ws,$S),e($S,aKe),e(ws,nKe),e(ws,IS),e(IS,sKe),e(ws,lKe),e(C,iKe),e(C,Zg),e(Zg,JZ),e(JZ,dKe),e(Zg,cKe),e(Zg,qS),e(qS,fKe),e(Zg,mKe),e(C,gKe),e(C,eh),e(eh,YZ),e(YZ,hKe),e(eh,pKe),e(eh,NS),e(NS,_Ke),e(eh,uKe),e(C,bKe),e(C,oh),e(oh,KZ),e(KZ,FKe),e(oh,vKe),e(oh,jS),e(jS,TKe),e(oh,MKe),e(C,EKe),e(C,rh),e(rh,ZZ),e(ZZ,CKe),e(rh,wKe),e(rh,DS),e(DS,AKe),e(rh,yKe),e(C,LKe),e(C,As),e(As,eee),e(eee,xKe),e(As,kKe),e(As,GS),e(GS,SKe),e(As,RKe),e(As,OS),e(OS,BKe),e(As,PKe),e(C,$Ke),e(C,th),e(th,oee),e(oee,IKe),e(th,qKe),e(th,VS),e(VS,NKe),e(th,jKe),e(C,DKe),e(C,ys),e(ys,ree),e(ree,GKe),e(ys,OKe),e(ys,XS),e(XS,VKe),e(ys,XKe),e(ys,zS),e(zS,zKe),e(ys,QKe),e(C,WKe),e(C,Ls),e(Ls,tee),e(tee,HKe),e(Ls,UKe),e(Ls,QS),e(QS,JKe),e(Ls,YKe),e(Ls,WS),e(WS,KKe),e(Ls,ZKe),e(C,eZe),e(C,xs),e(xs,aee),e(aee,oZe),e(xs,rZe),e(xs,HS),e(HS,tZe),e(xs,aZe),e(xs,US),e(US,nZe),e(xs,sZe),e(C,lZe),e(C,ks),e(ks,nee),e(nee,iZe),e(ks,dZe),e(ks,JS),e(JS,cZe),e(ks,fZe),e(ks,YS),e(YS,mZe),e(ks,gZe),e(C,hZe),e(C,Ss),e(Ss,see),e(see,pZe),e(Ss,_Ze),e(Ss,KS),e(KS,uZe),e(Ss,bZe),e(Ss,ZS),e(ZS,FZe),e(Ss,vZe),e(C,TZe),e(C,Rs),e(Rs,lee),e(lee,MZe),e(Rs,EZe),e(Rs,eR),e(eR,CZe),e(Rs,wZe),e(Rs,oR),e(oR,AZe),e(Rs,yZe),e(C,LZe),e(C,ah),e(ah,iee),e(iee,xZe),e(ah,kZe),e(ah,rR),e(rR,SZe),e(ah,RZe),e(C,BZe),e(C,nh),e(nh,dee),e(dee,PZe),e(nh,$Ze),e(nh,tR),e(tR,IZe),e(nh,qZe),e(C,NZe),e(C,Bs),e(Bs,cee),e(cee,jZe),e(Bs,DZe),e(Bs,aR),e(aR,GZe),e(Bs,OZe),e(Bs,nR),e(nR,VZe),e(Bs,XZe),e(C,zZe),e(C,Ps),e(Ps,fee),e(fee,QZe),e(Ps,WZe),e(Ps,sR),e(sR,HZe),e(Ps,UZe),e(Ps,lR),e(lR,JZe),e(Ps,YZe),e(C,KZe),e(C,$s),e($s,mee),e(mee,ZZe),e($s,eeo),e($s,iR),e(iR,oeo),e($s,reo),e($s,dR),e(dR,teo),e($s,aeo),e(C,neo),e(C,sh),e(sh,gee),e(gee,seo),e(sh,leo),e(sh,cR),e(cR,ieo),e(sh,deo),e(C,ceo),e(C,lh),e(lh,hee),e(hee,feo),e(lh,meo),e(lh,fR),e(fR,geo),e(lh,heo),e(C,peo),e(C,ih),e(ih,pee),e(pee,_eo),e(ih,ueo),e(ih,mR),e(mR,beo),e(ih,Feo),e(C,veo),e(C,dh),e(dh,_ee),e(_ee,Teo),e(dh,Meo),e(dh,gR),e(gR,Eeo),e(dh,Ceo),e(C,weo),e(C,Is),e(Is,uee),e(uee,Aeo),e(Is,yeo),e(Is,hR),e(hR,Leo),e(Is,xeo),e(Is,pR),e(pR,keo),e(Is,Seo),e(C,Reo),e(C,ch),e(ch,bee),e(bee,Beo),e(ch,Peo),e(ch,_R),e(_R,$eo),e(ch,Ieo),e(C,qeo),e(C,fh),e(fh,Fee),e(Fee,Neo),e(fh,jeo),e(fh,uR),e(uR,Deo),e(fh,Geo),e(C,Oeo),e(C,qs),e(qs,vee),e(vee,Veo),e(qs,Xeo),e(qs,bR),e(bR,zeo),e(qs,Qeo),e(qs,FR),e(FR,Weo),e(qs,Heo),e(C,Ueo),e(C,Ns),e(Ns,Tee),e(Tee,Jeo),e(Ns,Yeo),e(Ns,vR),e(vR,Keo),e(Ns,Zeo),e(Ns,TR),e(TR,eoo),e(Ns,ooo),e(go,roo),e(go,Mee),e(Mee,too),e(go,aoo),g($C,go,null),e(Wo,noo),e(Wo,mh),g(IC,mh,null),e(mh,soo),e(mh,Eee),e(Eee,loo),b(c,eRe,u),b(c,Wi,u),e(Wi,gh),e(gh,Cee),g(qC,Cee,null),e(Wi,ioo),e(Wi,wee),e(wee,doo),b(c,oRe,u),b(c,Ho,u),g(NC,Ho,null),e(Ho,coo),e(Ho,jC),e(jC,foo),e(jC,MR),e(MR,moo),e(jC,goo),e(Ho,hoo),e(Ho,DC),e(DC,poo),e(DC,Aee),e(Aee,_oo),e(DC,uoo),e(Ho,boo),e(Ho,$e),g(GC,$e,null),e($e,Foo),e($e,yee),e(yee,voo),e($e,Too),e($e,Va),e(Va,Moo),e(Va,Lee),e(Lee,Eoo),e(Va,Coo),e(Va,xee),e(xee,woo),e(Va,Aoo),e(Va,kee),e(kee,yoo),e(Va,Loo),e($e,xoo),e($e,te),e(te,hh),e(hh,See),e(See,koo),e(hh,Soo),e(hh,ER),e(ER,Roo),e(hh,Boo),e(te,Poo),e(te,ph),e(ph,Ree),e(Ree,$oo),e(ph,Ioo),e(ph,CR),e(CR,qoo),e(ph,Noo),e(te,joo),e(te,_h),e(_h,Bee),e(Bee,Doo),e(_h,Goo),e(_h,wR),e(wR,Ooo),e(_h,Voo),e(te,Xoo),e(te,uh),e(uh,Pee),e(Pee,zoo),e(uh,Qoo),e(uh,AR),e(AR,Woo),e(uh,Hoo),e(te,Uoo),e(te,bh),e(bh,$ee),e($ee,Joo),e(bh,Yoo),e(bh,yR),e(yR,Koo),e(bh,Zoo),e(te,ero),e(te,Fh),e(Fh,Iee),e(Iee,oro),e(Fh,rro),e(Fh,LR),e(LR,tro),e(Fh,aro),e(te,nro),e(te,vh),e(vh,qee),e(qee,sro),e(vh,lro),e(vh,xR),e(xR,iro),e(vh,dro),e(te,cro),e(te,Th),e(Th,Nee),e(Nee,fro),e(Th,mro),e(Th,kR),e(kR,gro),e(Th,hro),e(te,pro),e(te,Mh),e(Mh,jee),e(jee,_ro),e(Mh,uro),e(Mh,SR),e(SR,bro),e(Mh,Fro),e(te,vro),e(te,Eh),e(Eh,Dee),e(Dee,Tro),e(Eh,Mro),e(Eh,RR),e(RR,Ero),e(Eh,Cro),e(te,wro),e(te,Ch),e(Ch,Gee),e(Gee,Aro),e(Ch,yro),e(Ch,BR),e(BR,Lro),e(Ch,xro),e(te,kro),e(te,wh),e(wh,Oee),e(Oee,Sro),e(wh,Rro),e(wh,PR),e(PR,Bro),e(wh,Pro),e(te,$ro),e(te,Ah),e(Ah,Vee),e(Vee,Iro),e(Ah,qro),e(Ah,$R),e($R,Nro),e(Ah,jro),e(te,Dro),e(te,yh),e(yh,Xee),e(Xee,Gro),e(yh,Oro),e(yh,IR),e(IR,Vro),e(yh,Xro),e(te,zro),e(te,Lh),e(Lh,zee),e(zee,Qro),e(Lh,Wro),e(Lh,qR),e(qR,Hro),e(Lh,Uro),e(te,Jro),e(te,xh),e(xh,Qee),e(Qee,Yro),e(xh,Kro),e(xh,NR),e(NR,Zro),e(xh,eto),e(te,oto),e(te,kh),e(kh,Wee),e(Wee,rto),e(kh,tto),e(kh,jR),e(jR,ato),e(kh,nto),e(te,sto),e(te,Sh),e(Sh,Hee),e(Hee,lto),e(Sh,ito),e(Sh,DR),e(DR,dto),e(Sh,cto),e($e,fto),g(Rh,$e,null),e($e,mto),e($e,Uee),e(Uee,gto),e($e,hto),g(OC,$e,null),e(Ho,pto),e(Ho,Bh),g(VC,Bh,null),e(Bh,_to),e(Bh,Jee),e(Jee,uto),b(c,rRe,u),b(c,Hi,u),e(Hi,Ph),e(Ph,Yee),g(XC,Yee,null),e(Hi,bto),e(Hi,Kee),e(Kee,Fto),b(c,tRe,u),b(c,Uo,u),g(zC,Uo,null),e(Uo,vto),e(Uo,QC),e(QC,Tto),e(QC,GR),e(GR,Mto),e(QC,Eto),e(Uo,Cto),e(Uo,WC),e(WC,wto),e(WC,Zee),e(Zee,Ato),e(WC,yto),e(Uo,Lto),e(Uo,Ie),g(HC,Ie,null),e(Ie,xto),e(Ie,eoe),e(eoe,kto),e(Ie,Sto),e(Ie,Ui),e(Ui,Rto),e(Ui,ooe),e(ooe,Bto),e(Ui,Pto),e(Ui,roe),e(roe,$to),e(Ui,Ito),e(Ie,qto),e(Ie,ke),e(ke,$h),e($h,toe),e(toe,Nto),e($h,jto),e($h,OR),e(OR,Dto),e($h,Gto),e(ke,Oto),e(ke,Ih),e(Ih,aoe),e(aoe,Vto),e(Ih,Xto),e(Ih,VR),e(VR,zto),e(Ih,Qto),e(ke,Wto),e(ke,qh),e(qh,noe),e(noe,Hto),e(qh,Uto),e(qh,XR),e(XR,Jto),e(qh,Yto),e(ke,Kto),e(ke,Nh),e(Nh,soe),e(soe,Zto),e(Nh,eao),e(Nh,zR),e(zR,oao),e(Nh,rao),e(ke,tao),e(ke,jh),e(jh,loe),e(loe,aao),e(jh,nao),e(jh,QR),e(QR,sao),e(jh,lao),e(ke,iao),e(ke,Dh),e(Dh,ioe),e(ioe,dao),e(Dh,cao),e(Dh,WR),e(WR,fao),e(Dh,mao),e(ke,gao),e(ke,Gh),e(Gh,doe),e(doe,hao),e(Gh,pao),e(Gh,HR),e(HR,_ao),e(Gh,uao),e(ke,bao),e(ke,Oh),e(Oh,coe),e(coe,Fao),e(Oh,vao),e(Oh,UR),e(UR,Tao),e(Oh,Mao),e(Ie,Eao),g(Vh,Ie,null),e(Ie,Cao),e(Ie,foe),e(foe,wao),e(Ie,Aao),g(UC,Ie,null),e(Uo,yao),e(Uo,Xh),g(JC,Xh,null),e(Xh,Lao),e(Xh,moe),e(moe,xao),b(c,aRe,u),b(c,Ji,u),e(Ji,zh),e(zh,goe),g(YC,goe,null),e(Ji,kao),e(Ji,hoe),e(hoe,Sao),b(c,nRe,u),b(c,Jo,u),g(KC,Jo,null),e(Jo,Rao),e(Jo,Yi),e(Yi,Bao),e(Yi,JR),e(JR,Pao),e(Yi,$ao),e(Yi,YR),e(YR,Iao),e(Yi,qao),e(Jo,Nao),e(Jo,ZC),e(ZC,jao),e(ZC,poe),e(poe,Dao),e(ZC,Gao),e(Jo,Oao),e(Jo,Xr),g(ew,Xr,null),e(Xr,Vao),e(Xr,_oe),e(_oe,Xao),e(Xr,zao),e(Xr,Ki),e(Ki,Qao),e(Ki,uoe),e(uoe,Wao),e(Ki,Hao),e(Ki,KR),e(KR,Uao),e(Ki,Jao),e(Xr,Yao),e(Xr,boe),e(boe,Kao),e(Xr,Zao),g(ow,Xr,null),e(Jo,eno),e(Jo,qe),g(rw,qe,null),e(qe,ono),e(qe,Foe),e(Foe,rno),e(qe,tno),e(qe,Xa),e(Xa,ano),e(Xa,voe),e(voe,nno),e(Xa,sno),e(Xa,Toe),e(Toe,lno),e(Xa,ino),e(Xa,Moe),e(Moe,dno),e(Xa,cno),e(qe,fno),e(qe,T),e(T,Qh),e(Qh,Eoe),e(Eoe,mno),e(Qh,gno),e(Qh,ZR),e(ZR,hno),e(Qh,pno),e(T,_no),e(T,Wh),e(Wh,Coe),e(Coe,uno),e(Wh,bno),e(Wh,eB),e(eB,Fno),e(Wh,vno),e(T,Tno),e(T,Hh),e(Hh,woe),e(woe,Mno),e(Hh,Eno),e(Hh,oB),e(oB,Cno),e(Hh,wno),e(T,Ano),e(T,Uh),e(Uh,Aoe),e(Aoe,yno),e(Uh,Lno),e(Uh,rB),e(rB,xno),e(Uh,kno),e(T,Sno),e(T,Jh),e(Jh,yoe),e(yoe,Rno),e(Jh,Bno),e(Jh,tB),e(tB,Pno),e(Jh,$no),e(T,Ino),e(T,Yh),e(Yh,Loe),e(Loe,qno),e(Yh,Nno),e(Yh,aB),e(aB,jno),e(Yh,Dno),e(T,Gno),e(T,Kh),e(Kh,xoe),e(xoe,Ono),e(Kh,Vno),e(Kh,nB),e(nB,Xno),e(Kh,zno),e(T,Qno),e(T,Zh),e(Zh,koe),e(koe,Wno),e(Zh,Hno),e(Zh,sB),e(sB,Uno),e(Zh,Jno),e(T,Yno),e(T,ep),e(ep,Soe),e(Soe,Kno),e(ep,Zno),e(ep,lB),e(lB,eso),e(ep,oso),e(T,rso),e(T,op),e(op,Roe),e(Roe,tso),e(op,aso),e(op,iB),e(iB,nso),e(op,sso),e(T,lso),e(T,rp),e(rp,Boe),e(Boe,iso),e(rp,dso),e(rp,dB),e(dB,cso),e(rp,fso),e(T,mso),e(T,tp),e(tp,Poe),e(Poe,gso),e(tp,hso),e(tp,cB),e(cB,pso),e(tp,_so),e(T,uso),e(T,ap),e(ap,$oe),e($oe,bso),e(ap,Fso),e(ap,fB),e(fB,vso),e(ap,Tso),e(T,Mso),e(T,np),e(np,Ioe),e(Ioe,Eso),e(np,Cso),e(np,mB),e(mB,wso),e(np,Aso),e(T,yso),e(T,sp),e(sp,qoe),e(qoe,Lso),e(sp,xso),e(sp,gB),e(gB,kso),e(sp,Sso),e(T,Rso),e(T,lp),e(lp,Noe),e(Noe,Bso),e(lp,Pso),e(lp,hB),e(hB,$so),e(lp,Iso),e(T,qso),e(T,ip),e(ip,joe),e(joe,Nso),e(ip,jso),e(ip,pB),e(pB,Dso),e(ip,Gso),e(T,Oso),e(T,dp),e(dp,Doe),e(Doe,Vso),e(dp,Xso),e(dp,_B),e(_B,zso),e(dp,Qso),e(T,Wso),e(T,cp),e(cp,Goe),e(Goe,Hso),e(cp,Uso),e(cp,uB),e(uB,Jso),e(cp,Yso),e(T,Kso),e(T,fp),e(fp,Ooe),e(Ooe,Zso),e(fp,elo),e(fp,bB),e(bB,olo),e(fp,rlo),e(T,tlo),e(T,mp),e(mp,Voe),e(Voe,alo),e(mp,nlo),e(mp,FB),e(FB,slo),e(mp,llo),e(T,ilo),e(T,gp),e(gp,Xoe),e(Xoe,dlo),e(gp,clo),e(gp,vB),e(vB,flo),e(gp,mlo),e(T,glo),e(T,hp),e(hp,zoe),e(zoe,hlo),e(hp,plo),e(hp,TB),e(TB,_lo),e(hp,ulo),e(T,blo),e(T,pp),e(pp,Qoe),e(Qoe,Flo),e(pp,vlo),e(pp,MB),e(MB,Tlo),e(pp,Mlo),e(T,Elo),e(T,_p),e(_p,Woe),e(Woe,Clo),e(_p,wlo),e(_p,EB),e(EB,Alo),e(_p,ylo),e(T,Llo),e(T,up),e(up,Hoe),e(Hoe,xlo),e(up,klo),e(up,CB),e(CB,Slo),e(up,Rlo),e(T,Blo),e(T,bp),e(bp,Uoe),e(Uoe,Plo),e(bp,$lo),e(bp,wB),e(wB,Ilo),e(bp,qlo),e(T,Nlo),e(T,Fp),e(Fp,Joe),e(Joe,jlo),e(Fp,Dlo),e(Fp,AB),e(AB,Glo),e(Fp,Olo),e(T,Vlo),e(T,vp),e(vp,Yoe),e(Yoe,Xlo),e(vp,zlo),e(vp,yB),e(yB,Qlo),e(vp,Wlo),e(T,Hlo),e(T,js),e(js,Koe),e(Koe,Ulo),e(js,Jlo),e(js,LB),e(LB,Ylo),e(js,Klo),e(js,xB),e(xB,Zlo),e(js,eio),e(T,oio),e(T,Tp),e(Tp,Zoe),e(Zoe,rio),e(Tp,tio),e(Tp,kB),e(kB,aio),e(Tp,nio),e(T,sio),e(T,Mp),e(Mp,ere),e(ere,lio),e(Mp,iio),e(Mp,SB),e(SB,dio),e(Mp,cio),e(T,fio),e(T,Ep),e(Ep,ore),e(ore,mio),e(Ep,gio),e(Ep,RB),e(RB,hio),e(Ep,pio),e(T,_io),e(T,Cp),e(Cp,rre),e(rre,uio),e(Cp,bio),e(Cp,BB),e(BB,Fio),e(Cp,vio),e(T,Tio),e(T,wp),e(wp,tre),e(tre,Mio),e(wp,Eio),e(wp,PB),e(PB,Cio),e(wp,wio),e(T,Aio),e(T,Ap),e(Ap,are),e(are,yio),e(Ap,Lio),e(Ap,$B),e($B,xio),e(Ap,kio),e(T,Sio),e(T,yp),e(yp,nre),e(nre,Rio),e(yp,Bio),e(yp,IB),e(IB,Pio),e(yp,$io),e(T,Iio),e(T,Lp),e(Lp,sre),e(sre,qio),e(Lp,Nio),e(Lp,qB),e(qB,jio),e(Lp,Dio),e(T,Gio),e(T,xp),e(xp,lre),e(lre,Oio),e(xp,Vio),e(xp,NB),e(NB,Xio),e(xp,zio),e(T,Qio),e(T,kp),e(kp,ire),e(ire,Wio),e(kp,Hio),e(kp,jB),e(jB,Uio),e(kp,Jio),e(T,Yio),e(T,Sp),e(Sp,dre),e(dre,Kio),e(Sp,Zio),e(Sp,DB),e(DB,edo),e(Sp,odo),e(T,rdo),e(T,Rp),e(Rp,cre),e(cre,tdo),e(Rp,ado),e(Rp,GB),e(GB,ndo),e(Rp,sdo),e(T,ldo),e(T,Bp),e(Bp,fre),e(fre,ido),e(Bp,ddo),e(Bp,OB),e(OB,cdo),e(Bp,fdo),e(T,mdo),e(T,Pp),e(Pp,mre),e(mre,gdo),e(Pp,hdo),e(Pp,VB),e(VB,pdo),e(Pp,_do),e(T,udo),e(T,$p),e($p,gre),e(gre,bdo),e($p,Fdo),e($p,XB),e(XB,vdo),e($p,Tdo),e(T,Mdo),e(T,Ip),e(Ip,hre),e(hre,Edo),e(Ip,Cdo),e(Ip,zB),e(zB,wdo),e(Ip,Ado),e(T,ydo),e(T,qp),e(qp,pre),e(pre,Ldo),e(qp,xdo),e(qp,QB),e(QB,kdo),e(qp,Sdo),e(T,Rdo),e(T,Np),e(Np,_re),e(_re,Bdo),e(Np,Pdo),e(Np,WB),e(WB,$do),e(Np,Ido),e(T,qdo),e(T,jp),e(jp,ure),e(ure,Ndo),e(jp,jdo),e(jp,HB),e(HB,Ddo),e(jp,Gdo),e(T,Odo),e(T,Dp),e(Dp,bre),e(bre,Vdo),e(Dp,Xdo),e(Dp,UB),e(UB,zdo),e(Dp,Qdo),e(T,Wdo),e(T,Gp),e(Gp,Fre),e(Fre,Hdo),e(Gp,Udo),e(Gp,JB),e(JB,Jdo),e(Gp,Ydo),e(T,Kdo),e(T,Op),e(Op,vre),e(vre,Zdo),e(Op,eco),e(Op,YB),e(YB,oco),e(Op,rco),e(T,tco),e(T,Vp),e(Vp,Tre),e(Tre,aco),e(Vp,nco),e(Vp,KB),e(KB,sco),e(Vp,lco),e(T,ico),e(T,Xp),e(Xp,Mre),e(Mre,dco),e(Xp,cco),e(Xp,ZB),e(ZB,fco),e(Xp,mco),e(T,gco),e(T,zp),e(zp,Ere),e(Ere,hco),e(zp,pco),e(zp,eP),e(eP,_co),e(zp,uco),e(T,bco),e(T,Qp),e(Qp,Cre),e(Cre,Fco),e(Qp,vco),e(Qp,oP),e(oP,Tco),e(Qp,Mco),e(T,Eco),e(T,Wp),e(Wp,wre),e(wre,Cco),e(Wp,wco),e(Wp,rP),e(rP,Aco),e(Wp,yco),e(T,Lco),e(T,Hp),e(Hp,Are),e(Are,xco),e(Hp,kco),e(Hp,tP),e(tP,Sco),e(Hp,Rco),e(T,Bco),e(T,Up),e(Up,yre),e(yre,Pco),e(Up,$co),e(Up,aP),e(aP,Ico),e(Up,qco),e(T,Nco),e(T,Jp),e(Jp,Lre),e(Lre,jco),e(Jp,Dco),e(Jp,nP),e(nP,Gco),e(Jp,Oco),e(T,Vco),e(T,Yp),e(Yp,xre),e(xre,Xco),e(Yp,zco),e(Yp,sP),e(sP,Qco),e(Yp,Wco),e(T,Hco),e(T,Kp),e(Kp,kre),e(kre,Uco),e(Kp,Jco),e(Kp,lP),e(lP,Yco),e(Kp,Kco),e(T,Zco),e(T,Zp),e(Zp,Sre),e(Sre,efo),e(Zp,ofo),e(Zp,iP),e(iP,rfo),e(Zp,tfo),e(T,afo),e(T,e_),e(e_,Rre),e(Rre,nfo),e(e_,sfo),e(e_,dP),e(dP,lfo),e(e_,ifo),e(T,dfo),e(T,o_),e(o_,Bre),e(Bre,cfo),e(o_,ffo),e(o_,cP),e(cP,mfo),e(o_,gfo),e(T,hfo),e(T,r_),e(r_,Pre),e(Pre,pfo),e(r_,_fo),e(r_,fP),e(fP,ufo),e(r_,bfo),e(T,Ffo),e(T,t_),e(t_,$re),e($re,vfo),e(t_,Tfo),e(t_,mP),e(mP,Mfo),e(t_,Efo),e(T,Cfo),e(T,a_),e(a_,Ire),e(Ire,wfo),e(a_,Afo),e(a_,gP),e(gP,yfo),e(a_,Lfo),e(T,xfo),e(T,n_),e(n_,qre),e(qre,kfo),e(n_,Sfo),e(n_,hP),e(hP,Rfo),e(n_,Bfo),e(T,Pfo),e(T,s_),e(s_,Nre),e(Nre,$fo),e(s_,Ifo),e(s_,pP),e(pP,qfo),e(s_,Nfo),e(T,jfo),e(T,l_),e(l_,jre),e(jre,Dfo),e(l_,Gfo),e(l_,_P),e(_P,Ofo),e(l_,Vfo),e(T,Xfo),e(T,i_),e(i_,Dre),e(Dre,zfo),e(i_,Qfo),e(i_,uP),e(uP,Wfo),e(i_,Hfo),e(T,Ufo),e(T,d_),e(d_,Gre),e(Gre,Jfo),e(d_,Yfo),e(d_,bP),e(bP,Kfo),e(d_,Zfo),e(T,emo),e(T,c_),e(c_,Ore),e(Ore,omo),e(c_,rmo),e(c_,FP),e(FP,tmo),e(c_,amo),e(T,nmo),e(T,f_),e(f_,Vre),e(Vre,smo),e(f_,lmo),e(f_,vP),e(vP,imo),e(f_,dmo),e(T,cmo),e(T,m_),e(m_,Xre),e(Xre,fmo),e(m_,mmo),e(m_,TP),e(TP,gmo),e(m_,hmo),e(T,pmo),e(T,g_),e(g_,zre),e(zre,_mo),e(g_,umo),e(g_,MP),e(MP,bmo),e(g_,Fmo),e(T,vmo),e(T,h_),e(h_,Qre),e(Qre,Tmo),e(h_,Mmo),e(h_,EP),e(EP,Emo),e(h_,Cmo),e(T,wmo),e(T,p_),e(p_,Wre),e(Wre,Amo),e(p_,ymo),e(p_,CP),e(CP,Lmo),e(p_,xmo),e(T,kmo),e(T,__),e(__,Hre),e(Hre,Smo),e(__,Rmo),e(__,wP),e(wP,Bmo),e(__,Pmo),e(T,$mo),e(T,u_),e(u_,Ure),e(Ure,Imo),e(u_,qmo),e(u_,AP),e(AP,Nmo),e(u_,jmo),e(T,Dmo),e(T,b_),e(b_,Jre),e(Jre,Gmo),e(b_,Omo),e(b_,yP),e(yP,Vmo),e(b_,Xmo),e(T,zmo),e(T,F_),e(F_,Yre),e(Yre,Qmo),e(F_,Wmo),e(F_,LP),e(LP,Hmo),e(F_,Umo),e(T,Jmo),e(T,v_),e(v_,Kre),e(Kre,Ymo),e(v_,Kmo),e(v_,xP),e(xP,Zmo),e(v_,ego),e(T,ogo),e(T,T_),e(T_,Zre),e(Zre,rgo),e(T_,tgo),e(T_,kP),e(kP,ago),e(T_,ngo),e(T,sgo),e(T,M_),e(M_,ete),e(ete,lgo),e(M_,igo),e(M_,SP),e(SP,dgo),e(M_,cgo),e(T,fgo),e(T,E_),e(E_,ote),e(ote,mgo),e(E_,ggo),e(E_,RP),e(RP,hgo),e(E_,pgo),e(T,_go),e(T,C_),e(C_,rte),e(rte,ugo),e(C_,bgo),e(C_,BP),e(BP,Fgo),e(C_,vgo),e(T,Tgo),e(T,w_),e(w_,tte),e(tte,Mgo),e(w_,Ego),e(w_,PP),e(PP,Cgo),e(w_,wgo),e(T,Ago),e(T,A_),e(A_,ate),e(ate,ygo),e(A_,Lgo),e(A_,$P),e($P,xgo),e(A_,kgo),e(T,Sgo),e(T,y_),e(y_,nte),e(nte,Rgo),e(y_,Bgo),e(y_,IP),e(IP,Pgo),e(y_,$go),e(T,Igo),e(T,L_),e(L_,ste),e(ste,qgo),e(L_,Ngo),e(L_,qP),e(qP,jgo),e(L_,Dgo),e(qe,Ggo),e(qe,x_),e(x_,Ogo),e(x_,lte),e(lte,Vgo),e(x_,Xgo),e(x_,ite),e(ite,zgo),e(qe,Qgo),e(qe,dte),e(dte,Wgo),e(qe,Hgo),g(tw,qe,null),b(c,sRe,u),b(c,Zi,u),e(Zi,k_),e(k_,cte),g(aw,cte,null),e(Zi,Ugo),e(Zi,fte),e(fte,Jgo),b(c,lRe,u),b(c,Yo,u),g(nw,Yo,null),e(Yo,Ygo),e(Yo,ed),e(ed,Kgo),e(ed,NP),e(NP,Zgo),e(ed,eho),e(ed,jP),e(jP,oho),e(ed,rho),e(Yo,tho),e(Yo,sw),e(sw,aho),e(sw,mte),e(mte,nho),e(sw,sho),e(Yo,lho),e(Yo,zr),g(lw,zr,null),e(zr,iho),e(zr,gte),e(gte,dho),e(zr,cho),e(zr,od),e(od,fho),e(od,hte),e(hte,mho),e(od,gho),e(od,DP),e(DP,hho),e(od,pho),e(zr,_ho),e(zr,pte),e(pte,uho),e(zr,bho),g(iw,zr,null),e(Yo,Fho),e(Yo,Ne),g(dw,Ne,null),e(Ne,vho),e(Ne,_te),e(_te,Tho),e(Ne,Mho),e(Ne,za),e(za,Eho),e(za,ute),e(ute,Cho),e(za,who),e(za,bte),e(bte,Aho),e(za,yho),e(za,Fte),e(Fte,Lho),e(za,xho),e(Ne,kho),e(Ne,S),e(S,S_),e(S_,vte),e(vte,Sho),e(S_,Rho),e(S_,GP),e(GP,Bho),e(S_,Pho),e(S,$ho),e(S,R_),e(R_,Tte),e(Tte,Iho),e(R_,qho),e(R_,OP),e(OP,Nho),e(R_,jho),e(S,Dho),e(S,B_),e(B_,Mte),e(Mte,Gho),e(B_,Oho),e(B_,VP),e(VP,Vho),e(B_,Xho),e(S,zho),e(S,P_),e(P_,Ete),e(Ete,Qho),e(P_,Who),e(P_,XP),e(XP,Hho),e(P_,Uho),e(S,Jho),e(S,$_),e($_,Cte),e(Cte,Yho),e($_,Kho),e($_,zP),e(zP,Zho),e($_,epo),e(S,opo),e(S,I_),e(I_,wte),e(wte,rpo),e(I_,tpo),e(I_,QP),e(QP,apo),e(I_,npo),e(S,spo),e(S,q_),e(q_,Ate),e(Ate,lpo),e(q_,ipo),e(q_,WP),e(WP,dpo),e(q_,cpo),e(S,fpo),e(S,N_),e(N_,yte),e(yte,mpo),e(N_,gpo),e(N_,HP),e(HP,hpo),e(N_,ppo),e(S,_po),e(S,j_),e(j_,Lte),e(Lte,upo),e(j_,bpo),e(j_,UP),e(UP,Fpo),e(j_,vpo),e(S,Tpo),e(S,D_),e(D_,xte),e(xte,Mpo),e(D_,Epo),e(D_,JP),e(JP,Cpo),e(D_,wpo),e(S,Apo),e(S,G_),e(G_,kte),e(kte,ypo),e(G_,Lpo),e(G_,YP),e(YP,xpo),e(G_,kpo),e(S,Spo),e(S,O_),e(O_,Ste),e(Ste,Rpo),e(O_,Bpo),e(O_,KP),e(KP,Ppo),e(O_,$po),e(S,Ipo),e(S,V_),e(V_,Rte),e(Rte,qpo),e(V_,Npo),e(V_,ZP),e(ZP,jpo),e(V_,Dpo),e(S,Gpo),e(S,X_),e(X_,Bte),e(Bte,Opo),e(X_,Vpo),e(X_,e$),e(e$,Xpo),e(X_,zpo),e(S,Qpo),e(S,z_),e(z_,Pte),e(Pte,Wpo),e(z_,Hpo),e(z_,o$),e(o$,Upo),e(z_,Jpo),e(S,Ypo),e(S,Q_),e(Q_,$te),e($te,Kpo),e(Q_,Zpo),e(Q_,r$),e(r$,e_o),e(Q_,o_o),e(S,r_o),e(S,W_),e(W_,Ite),e(Ite,t_o),e(W_,a_o),e(W_,t$),e(t$,n_o),e(W_,s_o),e(S,l_o),e(S,H_),e(H_,qte),e(qte,i_o),e(H_,d_o),e(H_,a$),e(a$,c_o),e(H_,f_o),e(S,m_o),e(S,U_),e(U_,Nte),e(Nte,g_o),e(U_,h_o),e(U_,n$),e(n$,p_o),e(U_,__o),e(S,u_o),e(S,J_),e(J_,jte),e(jte,b_o),e(J_,F_o),e(J_,s$),e(s$,v_o),e(J_,T_o),e(S,M_o),e(S,Y_),e(Y_,Dte),e(Dte,E_o),e(Y_,C_o),e(Y_,l$),e(l$,w_o),e(Y_,A_o),e(S,y_o),e(S,K_),e(K_,Gte),e(Gte,L_o),e(K_,x_o),e(K_,i$),e(i$,k_o),e(K_,S_o),e(S,R_o),e(S,Z_),e(Z_,Ote),e(Ote,B_o),e(Z_,P_o),e(Z_,d$),e(d$,$_o),e(Z_,I_o),e(S,q_o),e(S,eu),e(eu,Vte),e(Vte,N_o),e(eu,j_o),e(eu,c$),e(c$,D_o),e(eu,G_o),e(S,O_o),e(S,ou),e(ou,Xte),e(Xte,V_o),e(ou,X_o),e(ou,f$),e(f$,z_o),e(ou,Q_o),e(S,W_o),e(S,ru),e(ru,zte),e(zte,H_o),e(ru,U_o),e(ru,m$),e(m$,J_o),e(ru,Y_o),e(S,K_o),e(S,tu),e(tu,Qte),e(Qte,Z_o),e(tu,euo),e(tu,g$),e(g$,ouo),e(tu,ruo),e(S,tuo),e(S,au),e(au,Wte),e(Wte,auo),e(au,nuo),e(au,h$),e(h$,suo),e(au,luo),e(S,iuo),e(S,nu),e(nu,Hte),e(Hte,duo),e(nu,cuo),e(nu,p$),e(p$,fuo),e(nu,muo),e(S,guo),e(S,su),e(su,Ute),e(Ute,huo),e(su,puo),e(su,_$),e(_$,_uo),e(su,uuo),e(S,buo),e(S,lu),e(lu,Jte),e(Jte,Fuo),e(lu,vuo),e(lu,u$),e(u$,Tuo),e(lu,Muo),e(S,Euo),e(S,iu),e(iu,Yte),e(Yte,Cuo),e(iu,wuo),e(iu,b$),e(b$,Auo),e(iu,yuo),e(S,Luo),e(S,du),e(du,Kte),e(Kte,xuo),e(du,kuo),e(du,F$),e(F$,Suo),e(du,Ruo),e(S,Buo),e(S,cu),e(cu,Zte),e(Zte,Puo),e(cu,$uo),e(cu,v$),e(v$,Iuo),e(cu,quo),e(S,Nuo),e(S,fu),e(fu,eae),e(eae,juo),e(fu,Duo),e(fu,T$),e(T$,Guo),e(fu,Ouo),e(S,Vuo),e(S,mu),e(mu,oae),e(oae,Xuo),e(mu,zuo),e(mu,M$),e(M$,Quo),e(mu,Wuo),e(S,Huo),e(S,gu),e(gu,rae),e(rae,Uuo),e(gu,Juo),e(gu,E$),e(E$,Yuo),e(gu,Kuo),e(S,Zuo),e(S,hu),e(hu,tae),e(tae,e1o),e(hu,o1o),e(hu,C$),e(C$,r1o),e(hu,t1o),e(S,a1o),e(S,pu),e(pu,aae),e(aae,n1o),e(pu,s1o),e(pu,w$),e(w$,l1o),e(pu,i1o),e(Ne,d1o),e(Ne,_u),e(_u,c1o),e(_u,nae),e(nae,f1o),e(_u,m1o),e(_u,sae),e(sae,g1o),e(Ne,h1o),e(Ne,lae),e(lae,p1o),e(Ne,_1o),g(cw,Ne,null),b(c,iRe,u),b(c,rd,u),e(rd,uu),e(uu,iae),g(fw,iae,null),e(rd,u1o),e(rd,dae),e(dae,b1o),b(c,dRe,u),b(c,Ko,u),g(mw,Ko,null),e(Ko,F1o),e(Ko,td),e(td,v1o),e(td,A$),e(A$,T1o),e(td,M1o),e(td,y$),e(y$,E1o),e(td,C1o),e(Ko,w1o),e(Ko,gw),e(gw,A1o),e(gw,cae),e(cae,y1o),e(gw,L1o),e(Ko,x1o),e(Ko,Qr),g(hw,Qr,null),e(Qr,k1o),e(Qr,fae),e(fae,S1o),e(Qr,R1o),e(Qr,ad),e(ad,B1o),e(ad,mae),e(mae,P1o),e(ad,$1o),e(ad,L$),e(L$,I1o),e(ad,q1o),e(Qr,N1o),e(Qr,gae),e(gae,j1o),e(Qr,D1o),g(pw,Qr,null),e(Ko,G1o),e(Ko,je),g(_w,je,null),e(je,O1o),e(je,hae),e(hae,V1o),e(je,X1o),e(je,Qa),e(Qa,z1o),e(Qa,pae),e(pae,Q1o),e(Qa,W1o),e(Qa,_ae),e(_ae,H1o),e(Qa,U1o),e(Qa,uae),e(uae,J1o),e(Qa,Y1o),e(je,K1o),e(je,$),e($,bu),e(bu,bae),e(bae,Z1o),e(bu,e4o),e(bu,x$),e(x$,o4o),e(bu,r4o),e($,t4o),e($,Fu),e(Fu,Fae),e(Fae,a4o),e(Fu,n4o),e(Fu,k$),e(k$,s4o),e(Fu,l4o),e($,i4o),e($,vu),e(vu,vae),e(vae,d4o),e(vu,c4o),e(vu,S$),e(S$,f4o),e(vu,m4o),e($,g4o),e($,Tu),e(Tu,Tae),e(Tae,h4o),e(Tu,p4o),e(Tu,R$),e(R$,_4o),e(Tu,u4o),e($,b4o),e($,Mu),e(Mu,Mae),e(Mae,F4o),e(Mu,v4o),e(Mu,B$),e(B$,T4o),e(Mu,M4o),e($,E4o),e($,Eu),e(Eu,Eae),e(Eae,C4o),e(Eu,w4o),e(Eu,P$),e(P$,A4o),e(Eu,y4o),e($,L4o),e($,Cu),e(Cu,Cae),e(Cae,x4o),e(Cu,k4o),e(Cu,$$),e($$,S4o),e(Cu,R4o),e($,B4o),e($,wu),e(wu,wae),e(wae,P4o),e(wu,$4o),e(wu,I$),e(I$,I4o),e(wu,q4o),e($,N4o),e($,Au),e(Au,Aae),e(Aae,j4o),e(Au,D4o),e(Au,q$),e(q$,G4o),e(Au,O4o),e($,V4o),e($,yu),e(yu,yae),e(yae,X4o),e(yu,z4o),e(yu,N$),e(N$,Q4o),e(yu,W4o),e($,H4o),e($,Lu),e(Lu,Lae),e(Lae,U4o),e(Lu,J4o),e(Lu,j$),e(j$,Y4o),e(Lu,K4o),e($,Z4o),e($,xu),e(xu,xae),e(xae,ebo),e(xu,obo),e(xu,D$),e(D$,rbo),e(xu,tbo),e($,abo),e($,ku),e(ku,kae),e(kae,nbo),e(ku,sbo),e(ku,G$),e(G$,lbo),e(ku,ibo),e($,dbo),e($,Su),e(Su,Sae),e(Sae,cbo),e(Su,fbo),e(Su,O$),e(O$,mbo),e(Su,gbo),e($,hbo),e($,Ru),e(Ru,Rae),e(Rae,pbo),e(Ru,_bo),e(Ru,V$),e(V$,ubo),e(Ru,bbo),e($,Fbo),e($,Bu),e(Bu,Bae),e(Bae,vbo),e(Bu,Tbo),e(Bu,X$),e(X$,Mbo),e(Bu,Ebo),e($,Cbo),e($,Pu),e(Pu,Pae),e(Pae,wbo),e(Pu,Abo),e(Pu,z$),e(z$,ybo),e(Pu,Lbo),e($,xbo),e($,$u),e($u,$ae),e($ae,kbo),e($u,Sbo),e($u,Q$),e(Q$,Rbo),e($u,Bbo),e($,Pbo),e($,Iu),e(Iu,Iae),e(Iae,$bo),e(Iu,Ibo),e(Iu,W$),e(W$,qbo),e(Iu,Nbo),e($,jbo),e($,qu),e(qu,qae),e(qae,Dbo),e(qu,Gbo),e(qu,H$),e(H$,Obo),e(qu,Vbo),e($,Xbo),e($,Nu),e(Nu,Nae),e(Nae,zbo),e(Nu,Qbo),e(Nu,U$),e(U$,Wbo),e(Nu,Hbo),e($,Ubo),e($,ju),e(ju,jae),e(jae,Jbo),e(ju,Ybo),e(ju,J$),e(J$,Kbo),e(ju,Zbo),e($,e5o),e($,Du),e(Du,Dae),e(Dae,o5o),e(Du,r5o),e(Du,Y$),e(Y$,t5o),e(Du,a5o),e($,n5o),e($,Gu),e(Gu,Gae),e(Gae,s5o),e(Gu,l5o),e(Gu,K$),e(K$,i5o),e(Gu,d5o),e($,c5o),e($,Ou),e(Ou,Oae),e(Oae,f5o),e(Ou,m5o),e(Ou,Z$),e(Z$,g5o),e(Ou,h5o),e($,p5o),e($,Vu),e(Vu,Vae),e(Vae,_5o),e(Vu,u5o),e(Vu,eI),e(eI,b5o),e(Vu,F5o),e($,v5o),e($,Xu),e(Xu,Xae),e(Xae,T5o),e(Xu,M5o),e(Xu,oI),e(oI,E5o),e(Xu,C5o),e($,w5o),e($,zu),e(zu,zae),e(zae,A5o),e(zu,y5o),e(zu,rI),e(rI,L5o),e(zu,x5o),e($,k5o),e($,Qu),e(Qu,Qae),e(Qae,S5o),e(Qu,R5o),e(Qu,tI),e(tI,B5o),e(Qu,P5o),e($,$5o),e($,Wu),e(Wu,Wae),e(Wae,I5o),e(Wu,q5o),e(Wu,aI),e(aI,N5o),e(Wu,j5o),e($,D5o),e($,Hu),e(Hu,Hae),e(Hae,G5o),e(Hu,O5o),e(Hu,nI),e(nI,V5o),e(Hu,X5o),e($,z5o),e($,Uu),e(Uu,Uae),e(Uae,Q5o),e(Uu,W5o),e(Uu,sI),e(sI,H5o),e(Uu,U5o),e($,J5o),e($,Ju),e(Ju,Jae),e(Jae,Y5o),e(Ju,K5o),e(Ju,lI),e(lI,Z5o),e(Ju,e3o),e($,o3o),e($,Yu),e(Yu,Yae),e(Yae,r3o),e(Yu,t3o),e(Yu,iI),e(iI,a3o),e(Yu,n3o),e($,s3o),e($,Ku),e(Ku,Kae),e(Kae,l3o),e(Ku,i3o),e(Ku,dI),e(dI,d3o),e(Ku,c3o),e(je,f3o),e(je,Zu),e(Zu,m3o),e(Zu,Zae),e(Zae,g3o),e(Zu,h3o),e(Zu,ene),e(ene,p3o),e(je,_3o),e(je,one),e(one,u3o),e(je,b3o),g(uw,je,null),b(c,cRe,u),b(c,nd,u),e(nd,e1),e(e1,rne),g(bw,rne,null),e(nd,F3o),e(nd,tne),e(tne,v3o),b(c,fRe,u),b(c,Zo,u),g(Fw,Zo,null),e(Zo,T3o),e(Zo,sd),e(sd,M3o),e(sd,cI),e(cI,E3o),e(sd,C3o),e(sd,fI),e(fI,w3o),e(sd,A3o),e(Zo,y3o),e(Zo,vw),e(vw,L3o),e(vw,ane),e(ane,x3o),e(vw,k3o),e(Zo,S3o),e(Zo,Wr),g(Tw,Wr,null),e(Wr,R3o),e(Wr,nne),e(nne,B3o),e(Wr,P3o),e(Wr,ld),e(ld,$3o),e(ld,sne),e(sne,I3o),e(ld,q3o),e(ld,mI),e(mI,N3o),e(ld,j3o),e(Wr,D3o),e(Wr,lne),e(lne,G3o),e(Wr,O3o),g(Mw,Wr,null),e(Zo,V3o),e(Zo,De),g(Ew,De,null),e(De,X3o),e(De,ine),e(ine,z3o),e(De,Q3o),e(De,Wa),e(Wa,W3o),e(Wa,dne),e(dne,H3o),e(Wa,U3o),e(Wa,cne),e(cne,J3o),e(Wa,Y3o),e(Wa,fne),e(fne,K3o),e(Wa,Z3o),e(De,e2o),e(De,I),e(I,o1),e(o1,mne),e(mne,o2o),e(o1,r2o),e(o1,gI),e(gI,t2o),e(o1,a2o),e(I,n2o),e(I,r1),e(r1,gne),e(gne,s2o),e(r1,l2o),e(r1,hI),e(hI,i2o),e(r1,d2o),e(I,c2o),e(I,t1),e(t1,hne),e(hne,f2o),e(t1,m2o),e(t1,pI),e(pI,g2o),e(t1,h2o),e(I,p2o),e(I,a1),e(a1,pne),e(pne,_2o),e(a1,u2o),e(a1,_I),e(_I,b2o),e(a1,F2o),e(I,v2o),e(I,n1),e(n1,_ne),e(_ne,T2o),e(n1,M2o),e(n1,uI),e(uI,E2o),e(n1,C2o),e(I,w2o),e(I,s1),e(s1,une),e(une,A2o),e(s1,y2o),e(s1,bI),e(bI,L2o),e(s1,x2o),e(I,k2o),e(I,l1),e(l1,bne),e(bne,S2o),e(l1,R2o),e(l1,FI),e(FI,B2o),e(l1,P2o),e(I,$2o),e(I,i1),e(i1,Fne),e(Fne,I2o),e(i1,q2o),e(i1,vI),e(vI,N2o),e(i1,j2o),e(I,D2o),e(I,d1),e(d1,vne),e(vne,G2o),e(d1,O2o),e(d1,TI),e(TI,V2o),e(d1,X2o),e(I,z2o),e(I,c1),e(c1,Tne),e(Tne,Q2o),e(c1,W2o),e(c1,MI),e(MI,H2o),e(c1,U2o),e(I,J2o),e(I,f1),e(f1,Mne),e(Mne,Y2o),e(f1,K2o),e(f1,EI),e(EI,Z2o),e(f1,eFo),e(I,oFo),e(I,m1),e(m1,Ene),e(Ene,rFo),e(m1,tFo),e(m1,CI),e(CI,aFo),e(m1,nFo),e(I,sFo),e(I,g1),e(g1,Cne),e(Cne,lFo),e(g1,iFo),e(g1,wI),e(wI,dFo),e(g1,cFo),e(I,fFo),e(I,h1),e(h1,wne),e(wne,mFo),e(h1,gFo),e(h1,AI),e(AI,hFo),e(h1,pFo),e(I,_Fo),e(I,p1),e(p1,Ane),e(Ane,uFo),e(p1,bFo),e(p1,yI),e(yI,FFo),e(p1,vFo),e(I,TFo),e(I,_1),e(_1,yne),e(yne,MFo),e(_1,EFo),e(_1,LI),e(LI,CFo),e(_1,wFo),e(I,AFo),e(I,u1),e(u1,Lne),e(Lne,yFo),e(u1,LFo),e(u1,xI),e(xI,xFo),e(u1,kFo),e(I,SFo),e(I,b1),e(b1,xne),e(xne,RFo),e(b1,BFo),e(b1,kI),e(kI,PFo),e(b1,$Fo),e(I,IFo),e(I,F1),e(F1,kne),e(kne,qFo),e(F1,NFo),e(F1,SI),e(SI,jFo),e(F1,DFo),e(I,GFo),e(I,v1),e(v1,Sne),e(Sne,OFo),e(v1,VFo),e(v1,RI),e(RI,XFo),e(v1,zFo),e(I,QFo),e(I,T1),e(T1,Rne),e(Rne,WFo),e(T1,HFo),e(T1,BI),e(BI,UFo),e(T1,JFo),e(I,YFo),e(I,M1),e(M1,Bne),e(Bne,KFo),e(M1,ZFo),e(M1,PI),e(PI,evo),e(M1,ovo),e(I,rvo),e(I,E1),e(E1,Pne),e(Pne,tvo),e(E1,avo),e(E1,$I),e($I,nvo),e(E1,svo),e(I,lvo),e(I,C1),e(C1,$ne),e($ne,ivo),e(C1,dvo),e(C1,II),e(II,cvo),e(C1,fvo),e(I,mvo),e(I,w1),e(w1,Ine),e(Ine,gvo),e(w1,hvo),e(w1,qI),e(qI,pvo),e(w1,_vo),e(I,uvo),e(I,A1),e(A1,qne),e(qne,bvo),e(A1,Fvo),e(A1,NI),e(NI,vvo),e(A1,Tvo),e(I,Mvo),e(I,y1),e(y1,Nne),e(Nne,Evo),e(y1,Cvo),e(y1,jI),e(jI,wvo),e(y1,Avo),e(I,yvo),e(I,L1),e(L1,jne),e(jne,Lvo),e(L1,xvo),e(L1,DI),e(DI,kvo),e(L1,Svo),e(I,Rvo),e(I,x1),e(x1,Dne),e(Dne,Bvo),e(x1,Pvo),e(x1,GI),e(GI,$vo),e(x1,Ivo),e(I,qvo),e(I,k1),e(k1,Gne),e(Gne,Nvo),e(k1,jvo),e(k1,OI),e(OI,Dvo),e(k1,Gvo),e(I,Ovo),e(I,S1),e(S1,One),e(One,Vvo),e(S1,Xvo),e(S1,Vne),e(Vne,zvo),e(S1,Qvo),e(I,Wvo),e(I,R1),e(R1,Xne),e(Xne,Hvo),e(R1,Uvo),e(R1,VI),e(VI,Jvo),e(R1,Yvo),e(I,Kvo),e(I,B1),e(B1,zne),e(zne,Zvo),e(B1,e6o),e(B1,XI),e(XI,o6o),e(B1,r6o),e(I,t6o),e(I,P1),e(P1,Qne),e(Qne,a6o),e(P1,n6o),e(P1,zI),e(zI,s6o),e(P1,l6o),e(I,i6o),e(I,$1),e($1,Wne),e(Wne,d6o),e($1,c6o),e($1,QI),e(QI,f6o),e($1,m6o),e(De,g6o),e(De,I1),e(I1,h6o),e(I1,Hne),e(Hne,p6o),e(I1,_6o),e(I1,Une),e(Une,u6o),e(De,b6o),e(De,Jne),e(Jne,F6o),e(De,v6o),g(Cw,De,null),b(c,mRe,u),b(c,id,u),e(id,q1),e(q1,Yne),g(ww,Yne,null),e(id,T6o),e(id,Kne),e(Kne,M6o),b(c,gRe,u),b(c,er,u),g(Aw,er,null),e(er,E6o),e(er,dd),e(dd,C6o),e(dd,WI),e(WI,w6o),e(dd,A6o),e(dd,HI),e(HI,y6o),e(dd,L6o),e(er,x6o),e(er,yw),e(yw,k6o),e(yw,Zne),e(Zne,S6o),e(yw,R6o),e(er,B6o),e(er,Hr),g(Lw,Hr,null),e(Hr,P6o),e(Hr,ese),e(ese,$6o),e(Hr,I6o),e(Hr,cd),e(cd,q6o),e(cd,ose),e(ose,N6o),e(cd,j6o),e(cd,UI),e(UI,D6o),e(cd,G6o),e(Hr,O6o),e(Hr,rse),e(rse,V6o),e(Hr,X6o),g(xw,Hr,null),e(er,z6o),e(er,Ge),g(kw,Ge,null),e(Ge,Q6o),e(Ge,tse),e(tse,W6o),e(Ge,H6o),e(Ge,Ha),e(Ha,U6o),e(Ha,ase),e(ase,J6o),e(Ha,Y6o),e(Ha,nse),e(nse,K6o),e(Ha,Z6o),e(Ha,sse),e(sse,eTo),e(Ha,oTo),e(Ge,rTo),e(Ge,se),e(se,N1),e(N1,lse),e(lse,tTo),e(N1,aTo),e(N1,JI),e(JI,nTo),e(N1,sTo),e(se,lTo),e(se,j1),e(j1,ise),e(ise,iTo),e(j1,dTo),e(j1,YI),e(YI,cTo),e(j1,fTo),e(se,mTo),e(se,D1),e(D1,dse),e(dse,gTo),e(D1,hTo),e(D1,KI),e(KI,pTo),e(D1,_To),e(se,uTo),e(se,G1),e(G1,cse),e(cse,bTo),e(G1,FTo),e(G1,ZI),e(ZI,vTo),e(G1,TTo),e(se,MTo),e(se,O1),e(O1,fse),e(fse,ETo),e(O1,CTo),e(O1,eq),e(eq,wTo),e(O1,ATo),e(se,yTo),e(se,V1),e(V1,mse),e(mse,LTo),e(V1,xTo),e(V1,oq),e(oq,kTo),e(V1,STo),e(se,RTo),e(se,X1),e(X1,gse),e(gse,BTo),e(X1,PTo),e(X1,rq),e(rq,$To),e(X1,ITo),e(se,qTo),e(se,z1),e(z1,hse),e(hse,NTo),e(z1,jTo),e(z1,tq),e(tq,DTo),e(z1,GTo),e(se,OTo),e(se,Q1),e(Q1,pse),e(pse,VTo),e(Q1,XTo),e(Q1,aq),e(aq,zTo),e(Q1,QTo),e(se,WTo),e(se,W1),e(W1,_se),e(_se,HTo),e(W1,UTo),e(W1,nq),e(nq,JTo),e(W1,YTo),e(se,KTo),e(se,H1),e(H1,use),e(use,ZTo),e(H1,eMo),e(H1,sq),e(sq,oMo),e(H1,rMo),e(se,tMo),e(se,U1),e(U1,bse),e(bse,aMo),e(U1,nMo),e(U1,lq),e(lq,sMo),e(U1,lMo),e(se,iMo),e(se,J1),e(J1,Fse),e(Fse,dMo),e(J1,cMo),e(J1,iq),e(iq,fMo),e(J1,mMo),e(se,gMo),e(se,Y1),e(Y1,vse),e(vse,hMo),e(Y1,pMo),e(Y1,dq),e(dq,_Mo),e(Y1,uMo),e(se,bMo),e(se,K1),e(K1,Tse),e(Tse,FMo),e(K1,vMo),e(K1,cq),e(cq,TMo),e(K1,MMo),e(se,EMo),e(se,Z1),e(Z1,Mse),e(Mse,CMo),e(Z1,wMo),e(Z1,fq),e(fq,AMo),e(Z1,yMo),e(Ge,LMo),e(Ge,e4),e(e4,xMo),e(e4,Ese),e(Ese,kMo),e(e4,SMo),e(e4,Cse),e(Cse,RMo),e(Ge,BMo),e(Ge,wse),e(wse,PMo),e(Ge,$Mo),g(Sw,Ge,null),b(c,hRe,u),b(c,fd,u),e(fd,o4),e(o4,Ase),g(Rw,Ase,null),e(fd,IMo),e(fd,yse),e(yse,qMo),b(c,pRe,u),b(c,or,u),g(Bw,or,null),e(or,NMo),e(or,md),e(md,jMo),e(md,mq),e(mq,DMo),e(md,GMo),e(md,gq),e(gq,OMo),e(md,VMo),e(or,XMo),e(or,Pw),e(Pw,zMo),e(Pw,Lse),e(Lse,QMo),e(Pw,WMo),e(or,HMo),e(or,Ur),g($w,Ur,null),e(Ur,UMo),e(Ur,xse),e(xse,JMo),e(Ur,YMo),e(Ur,gd),e(gd,KMo),e(gd,kse),e(kse,ZMo),e(gd,eEo),e(gd,hq),e(hq,oEo),e(gd,rEo),e(Ur,tEo),e(Ur,Sse),e(Sse,aEo),e(Ur,nEo),g(Iw,Ur,null),e(or,sEo),e(or,Oe),g(qw,Oe,null),e(Oe,lEo),e(Oe,Rse),e(Rse,iEo),e(Oe,dEo),e(Oe,Ua),e(Ua,cEo),e(Ua,Bse),e(Bse,fEo),e(Ua,mEo),e(Ua,Pse),e(Pse,gEo),e(Ua,hEo),e(Ua,$se),e($se,pEo),e(Ua,_Eo),e(Oe,uEo),e(Oe,y),e(y,r4),e(r4,Ise),e(Ise,bEo),e(r4,FEo),e(r4,pq),e(pq,vEo),e(r4,TEo),e(y,MEo),e(y,t4),e(t4,qse),e(qse,EEo),e(t4,CEo),e(t4,_q),e(_q,wEo),e(t4,AEo),e(y,yEo),e(y,a4),e(a4,Nse),e(Nse,LEo),e(a4,xEo),e(a4,uq),e(uq,kEo),e(a4,SEo),e(y,REo),e(y,n4),e(n4,jse),e(jse,BEo),e(n4,PEo),e(n4,bq),e(bq,$Eo),e(n4,IEo),e(y,qEo),e(y,s4),e(s4,Dse),e(Dse,NEo),e(s4,jEo),e(s4,Fq),e(Fq,DEo),e(s4,GEo),e(y,OEo),e(y,l4),e(l4,Gse),e(Gse,VEo),e(l4,XEo),e(l4,vq),e(vq,zEo),e(l4,QEo),e(y,WEo),e(y,i4),e(i4,Ose),e(Ose,HEo),e(i4,UEo),e(i4,Tq),e(Tq,JEo),e(i4,YEo),e(y,KEo),e(y,d4),e(d4,Vse),e(Vse,ZEo),e(d4,eCo),e(d4,Mq),e(Mq,oCo),e(d4,rCo),e(y,tCo),e(y,c4),e(c4,Xse),e(Xse,aCo),e(c4,nCo),e(c4,Eq),e(Eq,sCo),e(c4,lCo),e(y,iCo),e(y,f4),e(f4,zse),e(zse,dCo),e(f4,cCo),e(f4,Cq),e(Cq,fCo),e(f4,mCo),e(y,gCo),e(y,m4),e(m4,Qse),e(Qse,hCo),e(m4,pCo),e(m4,wq),e(wq,_Co),e(m4,uCo),e(y,bCo),e(y,g4),e(g4,Wse),e(Wse,FCo),e(g4,vCo),e(g4,Aq),e(Aq,TCo),e(g4,MCo),e(y,ECo),e(y,h4),e(h4,Hse),e(Hse,CCo),e(h4,wCo),e(h4,yq),e(yq,ACo),e(h4,yCo),e(y,LCo),e(y,p4),e(p4,Use),e(Use,xCo),e(p4,kCo),e(p4,Lq),e(Lq,SCo),e(p4,RCo),e(y,BCo),e(y,_4),e(_4,Jse),e(Jse,PCo),e(_4,$Co),e(_4,xq),e(xq,ICo),e(_4,qCo),e(y,NCo),e(y,u4),e(u4,Yse),e(Yse,jCo),e(u4,DCo),e(u4,kq),e(kq,GCo),e(u4,OCo),e(y,VCo),e(y,b4),e(b4,Kse),e(Kse,XCo),e(b4,zCo),e(b4,Sq),e(Sq,QCo),e(b4,WCo),e(y,HCo),e(y,F4),e(F4,Zse),e(Zse,UCo),e(F4,JCo),e(F4,Rq),e(Rq,YCo),e(F4,KCo),e(y,ZCo),e(y,v4),e(v4,ele),e(ele,ewo),e(v4,owo),e(v4,Bq),e(Bq,rwo),e(v4,two),e(y,awo),e(y,T4),e(T4,ole),e(ole,nwo),e(T4,swo),e(T4,Pq),e(Pq,lwo),e(T4,iwo),e(y,dwo),e(y,M4),e(M4,rle),e(rle,cwo),e(M4,fwo),e(M4,$q),e($q,mwo),e(M4,gwo),e(y,hwo),e(y,E4),e(E4,tle),e(tle,pwo),e(E4,_wo),e(E4,Iq),e(Iq,uwo),e(E4,bwo),e(y,Fwo),e(y,C4),e(C4,ale),e(ale,vwo),e(C4,Two),e(C4,qq),e(qq,Mwo),e(C4,Ewo),e(y,Cwo),e(y,w4),e(w4,nle),e(nle,wwo),e(w4,Awo),e(w4,Nq),e(Nq,ywo),e(w4,Lwo),e(y,xwo),e(y,A4),e(A4,sle),e(sle,kwo),e(A4,Swo),e(A4,jq),e(jq,Rwo),e(A4,Bwo),e(y,Pwo),e(y,y4),e(y4,lle),e(lle,$wo),e(y4,Iwo),e(y4,Dq),e(Dq,qwo),e(y4,Nwo),e(y,jwo),e(y,L4),e(L4,ile),e(ile,Dwo),e(L4,Gwo),e(L4,Gq),e(Gq,Owo),e(L4,Vwo),e(y,Xwo),e(y,x4),e(x4,dle),e(dle,zwo),e(x4,Qwo),e(x4,Oq),e(Oq,Wwo),e(x4,Hwo),e(y,Uwo),e(y,k4),e(k4,cle),e(cle,Jwo),e(k4,Ywo),e(k4,Vq),e(Vq,Kwo),e(k4,Zwo),e(y,eAo),e(y,S4),e(S4,fle),e(fle,oAo),e(S4,rAo),e(S4,Xq),e(Xq,tAo),e(S4,aAo),e(y,nAo),e(y,R4),e(R4,mle),e(mle,sAo),e(R4,lAo),e(R4,zq),e(zq,iAo),e(R4,dAo),e(y,cAo),e(y,B4),e(B4,gle),e(gle,fAo),e(B4,mAo),e(B4,Qq),e(Qq,gAo),e(B4,hAo),e(y,pAo),e(y,P4),e(P4,hle),e(hle,_Ao),e(P4,uAo),e(P4,Wq),e(Wq,bAo),e(P4,FAo),e(y,vAo),e(y,$4),e($4,ple),e(ple,TAo),e($4,MAo),e($4,Hq),e(Hq,EAo),e($4,CAo),e(y,wAo),e(y,I4),e(I4,_le),e(_le,AAo),e(I4,yAo),e(I4,Uq),e(Uq,LAo),e(I4,xAo),e(y,kAo),e(y,q4),e(q4,ule),e(ule,SAo),e(q4,RAo),e(q4,Jq),e(Jq,BAo),e(q4,PAo),e(y,$Ao),e(y,N4),e(N4,ble),e(ble,IAo),e(N4,qAo),e(N4,Yq),e(Yq,NAo),e(N4,jAo),e(y,DAo),e(y,j4),e(j4,Fle),e(Fle,GAo),e(j4,OAo),e(j4,Kq),e(Kq,VAo),e(j4,XAo),e(y,zAo),e(y,D4),e(D4,vle),e(vle,QAo),e(D4,WAo),e(D4,Zq),e(Zq,HAo),e(D4,UAo),e(y,JAo),e(y,G4),e(G4,Tle),e(Tle,YAo),e(G4,KAo),e(G4,eN),e(eN,ZAo),e(G4,e0o),e(y,o0o),e(y,O4),e(O4,Mle),e(Mle,r0o),e(O4,t0o),e(O4,oN),e(oN,a0o),e(O4,n0o),e(y,s0o),e(y,V4),e(V4,Ele),e(Ele,l0o),e(V4,i0o),e(V4,rN),e(rN,d0o),e(V4,c0o),e(y,f0o),e(y,X4),e(X4,Cle),e(Cle,m0o),e(X4,g0o),e(X4,tN),e(tN,h0o),e(X4,p0o),e(y,_0o),e(y,z4),e(z4,wle),e(wle,u0o),e(z4,b0o),e(z4,aN),e(aN,F0o),e(z4,v0o),e(y,T0o),e(y,Q4),e(Q4,Ale),e(Ale,M0o),e(Q4,E0o),e(Q4,nN),e(nN,C0o),e(Q4,w0o),e(y,A0o),e(y,W4),e(W4,yle),e(yle,y0o),e(W4,L0o),e(W4,sN),e(sN,x0o),e(W4,k0o),e(Oe,S0o),e(Oe,H4),e(H4,R0o),e(H4,Lle),e(Lle,B0o),e(H4,P0o),e(H4,xle),e(xle,$0o),e(Oe,I0o),e(Oe,kle),e(kle,q0o),e(Oe,N0o),g(Nw,Oe,null),b(c,_Re,u),b(c,hd,u),e(hd,U4),e(U4,Sle),g(jw,Sle,null),e(hd,j0o),e(hd,Rle),e(Rle,D0o),b(c,uRe,u),b(c,rr,u),g(Dw,rr,null),e(rr,G0o),e(rr,pd),e(pd,O0o),e(pd,lN),e(lN,V0o),e(pd,X0o),e(pd,iN),e(iN,z0o),e(pd,Q0o),e(rr,W0o),e(rr,Gw),e(Gw,H0o),e(Gw,Ble),e(Ble,U0o),e(Gw,J0o),e(rr,Y0o),e(rr,Jr),g(Ow,Jr,null),e(Jr,K0o),e(Jr,Ple),e(Ple,Z0o),e(Jr,eyo),e(Jr,_d),e(_d,oyo),e(_d,$le),e($le,ryo),e(_d,tyo),e(_d,dN),e(dN,ayo),e(_d,nyo),e(Jr,syo),e(Jr,Ile),e(Ile,lyo),e(Jr,iyo),g(Vw,Jr,null),e(rr,dyo),e(rr,Ve),g(Xw,Ve,null),e(Ve,cyo),e(Ve,qle),e(qle,fyo),e(Ve,myo),e(Ve,Ja),e(Ja,gyo),e(Ja,Nle),e(Nle,hyo),e(Ja,pyo),e(Ja,jle),e(jle,_yo),e(Ja,uyo),e(Ja,Dle),e(Dle,byo),e(Ja,Fyo),e(Ve,vyo),e(Ve,G),e(G,J4),e(J4,Gle),e(Gle,Tyo),e(J4,Myo),e(J4,cN),e(cN,Eyo),e(J4,Cyo),e(G,wyo),e(G,Y4),e(Y4,Ole),e(Ole,Ayo),e(Y4,yyo),e(Y4,fN),e(fN,Lyo),e(Y4,xyo),e(G,kyo),e(G,K4),e(K4,Vle),e(Vle,Syo),e(K4,Ryo),e(K4,mN),e(mN,Byo),e(K4,Pyo),e(G,$yo),e(G,Z4),e(Z4,Xle),e(Xle,Iyo),e(Z4,qyo),e(Z4,gN),e(gN,Nyo),e(Z4,jyo),e(G,Dyo),e(G,eb),e(eb,zle),e(zle,Gyo),e(eb,Oyo),e(eb,hN),e(hN,Vyo),e(eb,Xyo),e(G,zyo),e(G,ob),e(ob,Qle),e(Qle,Qyo),e(ob,Wyo),e(ob,pN),e(pN,Hyo),e(ob,Uyo),e(G,Jyo),e(G,rb),e(rb,Wle),e(Wle,Yyo),e(rb,Kyo),e(rb,_N),e(_N,Zyo),e(rb,eLo),e(G,oLo),e(G,tb),e(tb,Hle),e(Hle,rLo),e(tb,tLo),e(tb,uN),e(uN,aLo),e(tb,nLo),e(G,sLo),e(G,ab),e(ab,Ule),e(Ule,lLo),e(ab,iLo),e(ab,bN),e(bN,dLo),e(ab,cLo),e(G,fLo),e(G,nb),e(nb,Jle),e(Jle,mLo),e(nb,gLo),e(nb,FN),e(FN,hLo),e(nb,pLo),e(G,_Lo),e(G,sb),e(sb,Yle),e(Yle,uLo),e(sb,bLo),e(sb,vN),e(vN,FLo),e(sb,vLo),e(G,TLo),e(G,lb),e(lb,Kle),e(Kle,MLo),e(lb,ELo),e(lb,TN),e(TN,CLo),e(lb,wLo),e(G,ALo),e(G,ib),e(ib,Zle),e(Zle,yLo),e(ib,LLo),e(ib,MN),e(MN,xLo),e(ib,kLo),e(G,SLo),e(G,db),e(db,eie),e(eie,RLo),e(db,BLo),e(db,EN),e(EN,PLo),e(db,$Lo),e(G,ILo),e(G,cb),e(cb,oie),e(oie,qLo),e(cb,NLo),e(cb,CN),e(CN,jLo),e(cb,DLo),e(G,GLo),e(G,fb),e(fb,rie),e(rie,OLo),e(fb,VLo),e(fb,wN),e(wN,XLo),e(fb,zLo),e(G,QLo),e(G,mb),e(mb,tie),e(tie,WLo),e(mb,HLo),e(mb,AN),e(AN,ULo),e(mb,JLo),e(G,YLo),e(G,gb),e(gb,aie),e(aie,KLo),e(gb,ZLo),e(gb,yN),e(yN,e8o),e(gb,o8o),e(G,r8o),e(G,hb),e(hb,nie),e(nie,t8o),e(hb,a8o),e(hb,LN),e(LN,n8o),e(hb,s8o),e(G,l8o),e(G,pb),e(pb,sie),e(sie,i8o),e(pb,d8o),e(pb,xN),e(xN,c8o),e(pb,f8o),e(G,m8o),e(G,_b),e(_b,lie),e(lie,g8o),e(_b,h8o),e(_b,kN),e(kN,p8o),e(_b,_8o),e(G,u8o),e(G,ub),e(ub,iie),e(iie,b8o),e(ub,F8o),e(ub,SN),e(SN,v8o),e(ub,T8o),e(G,M8o),e(G,bb),e(bb,die),e(die,E8o),e(bb,C8o),e(bb,RN),e(RN,w8o),e(bb,A8o),e(G,y8o),e(G,Fb),e(Fb,cie),e(cie,L8o),e(Fb,x8o),e(Fb,BN),e(BN,k8o),e(Fb,S8o),e(G,R8o),e(G,vb),e(vb,fie),e(fie,B8o),e(vb,P8o),e(vb,PN),e(PN,$8o),e(vb,I8o),e(G,q8o),e(G,Tb),e(Tb,mie),e(mie,N8o),e(Tb,j8o),e(Tb,$N),e($N,D8o),e(Tb,G8o),e(G,O8o),e(G,Mb),e(Mb,gie),e(gie,V8o),e(Mb,X8o),e(Mb,IN),e(IN,z8o),e(Mb,Q8o),e(G,W8o),e(G,Eb),e(Eb,hie),e(hie,H8o),e(Eb,U8o),e(Eb,qN),e(qN,J8o),e(Eb,Y8o),e(Ve,K8o),e(Ve,Cb),e(Cb,Z8o),e(Cb,pie),e(pie,e7o),e(Cb,o7o),e(Cb,_ie),e(_ie,r7o),e(Ve,t7o),e(Ve,uie),e(uie,a7o),e(Ve,n7o),g(zw,Ve,null),b(c,bRe,u),b(c,ud,u),e(ud,wb),e(wb,bie),g(Qw,bie,null),e(ud,s7o),e(ud,Fie),e(Fie,l7o),b(c,FRe,u),b(c,tr,u),g(Ww,tr,null),e(tr,i7o),e(tr,bd),e(bd,d7o),e(bd,NN),e(NN,c7o),e(bd,f7o),e(bd,jN),e(jN,m7o),e(bd,g7o),e(tr,h7o),e(tr,Hw),e(Hw,p7o),e(Hw,vie),e(vie,_7o),e(Hw,u7o),e(tr,b7o),e(tr,Yr),g(Uw,Yr,null),e(Yr,F7o),e(Yr,Tie),e(Tie,v7o),e(Yr,T7o),e(Yr,Fd),e(Fd,M7o),e(Fd,Mie),e(Mie,E7o),e(Fd,C7o),e(Fd,DN),e(DN,w7o),e(Fd,A7o),e(Yr,y7o),e(Yr,Eie),e(Eie,L7o),e(Yr,x7o),g(Jw,Yr,null),e(tr,k7o),e(tr,Xe),g(Yw,Xe,null),e(Xe,S7o),e(Xe,Cie),e(Cie,R7o),e(Xe,B7o),e(Xe,Ya),e(Ya,P7o),e(Ya,wie),e(wie,$7o),e(Ya,I7o),e(Ya,Aie),e(Aie,q7o),e(Ya,N7o),e(Ya,yie),e(yie,j7o),e(Ya,D7o),e(Xe,G7o),e(Xe,da),e(da,Ab),e(Ab,Lie),e(Lie,O7o),e(Ab,V7o),e(Ab,GN),e(GN,X7o),e(Ab,z7o),e(da,Q7o),e(da,yb),e(yb,xie),e(xie,W7o),e(yb,H7o),e(yb,ON),e(ON,U7o),e(yb,J7o),e(da,Y7o),e(da,Lb),e(Lb,kie),e(kie,K7o),e(Lb,Z7o),e(Lb,VN),e(VN,e9o),e(Lb,o9o),e(da,r9o),e(da,xb),e(xb,Sie),e(Sie,t9o),e(xb,a9o),e(xb,XN),e(XN,n9o),e(xb,s9o),e(da,l9o),e(da,kb),e(kb,Rie),e(Rie,i9o),e(kb,d9o),e(kb,zN),e(zN,c9o),e(kb,f9o),e(Xe,m9o),e(Xe,Sb),e(Sb,g9o),e(Sb,Bie),e(Bie,h9o),e(Sb,p9o),e(Sb,Pie),e(Pie,_9o),e(Xe,u9o),e(Xe,$ie),e($ie,b9o),e(Xe,F9o),g(Kw,Xe,null),b(c,vRe,u),b(c,vd,u),e(vd,Rb),e(Rb,Iie),g(Zw,Iie,null),e(vd,v9o),e(vd,qie),e(qie,T9o),b(c,TRe,u),b(c,ar,u),g(eA,ar,null),e(ar,M9o),e(ar,Td),e(Td,E9o),e(Td,QN),e(QN,C9o),e(Td,w9o),e(Td,WN),e(WN,A9o),e(Td,y9o),e(ar,L9o),e(ar,oA),e(oA,x9o),e(oA,Nie),e(Nie,k9o),e(oA,S9o),e(ar,R9o),e(ar,Kr),g(rA,Kr,null),e(Kr,B9o),e(Kr,jie),e(jie,P9o),e(Kr,$9o),e(Kr,Md),e(Md,I9o),e(Md,Die),e(Die,q9o),e(Md,N9o),e(Md,HN),e(HN,j9o),e(Md,D9o),e(Kr,G9o),e(Kr,Gie),e(Gie,O9o),e(Kr,V9o),g(tA,Kr,null),e(ar,X9o),e(ar,ze),g(aA,ze,null),e(ze,z9o),e(ze,Oie),e(Oie,Q9o),e(ze,W9o),e(ze,Ka),e(Ka,H9o),e(Ka,Vie),e(Vie,U9o),e(Ka,J9o),e(Ka,Xie),e(Xie,Y9o),e(Ka,K9o),e(Ka,zie),e(zie,Z9o),e(Ka,exo),e(ze,oxo),e(ze,j),e(j,Bb),e(Bb,Qie),e(Qie,rxo),e(Bb,txo),e(Bb,UN),e(UN,axo),e(Bb,nxo),e(j,sxo),e(j,Pb),e(Pb,Wie),e(Wie,lxo),e(Pb,ixo),e(Pb,JN),e(JN,dxo),e(Pb,cxo),e(j,fxo),e(j,$b),e($b,Hie),e(Hie,mxo),e($b,gxo),e($b,YN),e(YN,hxo),e($b,pxo),e(j,_xo),e(j,Ib),e(Ib,Uie),e(Uie,uxo),e(Ib,bxo),e(Ib,KN),e(KN,Fxo),e(Ib,vxo),e(j,Txo),e(j,qb),e(qb,Jie),e(Jie,Mxo),e(qb,Exo),e(qb,ZN),e(ZN,Cxo),e(qb,wxo),e(j,Axo),e(j,Nb),e(Nb,Yie),e(Yie,yxo),e(Nb,Lxo),e(Nb,ej),e(ej,xxo),e(Nb,kxo),e(j,Sxo),e(j,jb),e(jb,Kie),e(Kie,Rxo),e(jb,Bxo),e(jb,oj),e(oj,Pxo),e(jb,$xo),e(j,Ixo),e(j,Db),e(Db,Zie),e(Zie,qxo),e(Db,Nxo),e(Db,rj),e(rj,jxo),e(Db,Dxo),e(j,Gxo),e(j,Gb),e(Gb,ede),e(ede,Oxo),e(Gb,Vxo),e(Gb,tj),e(tj,Xxo),e(Gb,zxo),e(j,Qxo),e(j,Ob),e(Ob,ode),e(ode,Wxo),e(Ob,Hxo),e(Ob,aj),e(aj,Uxo),e(Ob,Jxo),e(j,Yxo),e(j,Vb),e(Vb,rde),e(rde,Kxo),e(Vb,Zxo),e(Vb,nj),e(nj,eko),e(Vb,oko),e(j,rko),e(j,Xb),e(Xb,tde),e(tde,tko),e(Xb,ako),e(Xb,sj),e(sj,nko),e(Xb,sko),e(j,lko),e(j,zb),e(zb,ade),e(ade,iko),e(zb,dko),e(zb,lj),e(lj,cko),e(zb,fko),e(j,mko),e(j,Qb),e(Qb,nde),e(nde,gko),e(Qb,hko),e(Qb,ij),e(ij,pko),e(Qb,_ko),e(j,uko),e(j,Wb),e(Wb,sde),e(sde,bko),e(Wb,Fko),e(Wb,dj),e(dj,vko),e(Wb,Tko),e(j,Mko),e(j,Hb),e(Hb,lde),e(lde,Eko),e(Hb,Cko),e(Hb,cj),e(cj,wko),e(Hb,Ako),e(j,yko),e(j,Ub),e(Ub,ide),e(ide,Lko),e(Ub,xko),e(Ub,fj),e(fj,kko),e(Ub,Sko),e(j,Rko),e(j,Jb),e(Jb,dde),e(dde,Bko),e(Jb,Pko),e(Jb,mj),e(mj,$ko),e(Jb,Iko),e(j,qko),e(j,Yb),e(Yb,cde),e(cde,Nko),e(Yb,jko),e(Yb,gj),e(gj,Dko),e(Yb,Gko),e(j,Oko),e(j,Kb),e(Kb,fde),e(fde,Vko),e(Kb,Xko),e(Kb,hj),e(hj,zko),e(Kb,Qko),e(j,Wko),e(j,Zb),e(Zb,mde),e(mde,Hko),e(Zb,Uko),e(Zb,pj),e(pj,Jko),e(Zb,Yko),e(j,Kko),e(j,e5),e(e5,gde),e(gde,Zko),e(e5,eSo),e(e5,_j),e(_j,oSo),e(e5,rSo),e(j,tSo),e(j,o5),e(o5,hde),e(hde,aSo),e(o5,nSo),e(o5,uj),e(uj,sSo),e(o5,lSo),e(j,iSo),e(j,r5),e(r5,pde),e(pde,dSo),e(r5,cSo),e(r5,bj),e(bj,fSo),e(r5,mSo),e(j,gSo),e(j,t5),e(t5,_de),e(_de,hSo),e(t5,pSo),e(t5,Fj),e(Fj,_So),e(t5,uSo),e(j,bSo),e(j,a5),e(a5,ude),e(ude,FSo),e(a5,vSo),e(a5,vj),e(vj,TSo),e(a5,MSo),e(j,ESo),e(j,n5),e(n5,bde),e(bde,CSo),e(n5,wSo),e(n5,Tj),e(Tj,ASo),e(n5,ySo),e(j,LSo),e(j,s5),e(s5,Fde),e(Fde,xSo),e(s5,kSo),e(s5,Mj),e(Mj,SSo),e(s5,RSo),e(j,BSo),e(j,l5),e(l5,vde),e(vde,PSo),e(l5,$So),e(l5,Ej),e(Ej,ISo),e(l5,qSo),e(j,NSo),e(j,i5),e(i5,Tde),e(Tde,jSo),e(i5,DSo),e(i5,Cj),e(Cj,GSo),e(i5,OSo),e(j,VSo),e(j,d5),e(d5,Mde),e(Mde,XSo),e(d5,zSo),e(d5,wj),e(wj,QSo),e(d5,WSo),e(j,HSo),e(j,c5),e(c5,Ede),e(Ede,USo),e(c5,JSo),e(c5,Aj),e(Aj,YSo),e(c5,KSo),e(j,ZSo),e(j,f5),e(f5,Cde),e(Cde,eRo),e(f5,oRo),e(f5,yj),e(yj,rRo),e(f5,tRo),e(ze,aRo),e(ze,m5),e(m5,nRo),e(m5,wde),e(wde,sRo),e(m5,lRo),e(m5,Ade),e(Ade,iRo),e(ze,dRo),e(ze,yde),e(yde,cRo),e(ze,fRo),g(nA,ze,null),b(c,MRe,u),b(c,Ed,u),e(Ed,g5),e(g5,Lde),g(sA,Lde,null),e(Ed,mRo),e(Ed,xde),e(xde,gRo),b(c,ERe,u),b(c,nr,u),g(lA,nr,null),e(nr,hRo),e(nr,Cd),e(Cd,pRo),e(Cd,Lj),e(Lj,_Ro),e(Cd,uRo),e(Cd,xj),e(xj,bRo),e(Cd,FRo),e(nr,vRo),e(nr,iA),e(iA,TRo),e(iA,kde),e(kde,MRo),e(iA,ERo),e(nr,CRo),e(nr,Zr),g(dA,Zr,null),e(Zr,wRo),e(Zr,Sde),e(Sde,ARo),e(Zr,yRo),e(Zr,wd),e(wd,LRo),e(wd,Rde),e(Rde,xRo),e(wd,kRo),e(wd,kj),e(kj,SRo),e(wd,RRo),e(Zr,BRo),e(Zr,Bde),e(Bde,PRo),e(Zr,$Ro),g(cA,Zr,null),e(nr,IRo),e(nr,Qe),g(fA,Qe,null),e(Qe,qRo),e(Qe,Pde),e(Pde,NRo),e(Qe,jRo),e(Qe,Za),e(Za,DRo),e(Za,$de),e($de,GRo),e(Za,ORo),e(Za,Ide),e(Ide,VRo),e(Za,XRo),e(Za,qde),e(qde,zRo),e(Za,QRo),e(Qe,WRo),e(Qe,R),e(R,h5),e(h5,Nde),e(Nde,HRo),e(h5,URo),e(h5,Sj),e(Sj,JRo),e(h5,YRo),e(R,KRo),e(R,p5),e(p5,jde),e(jde,ZRo),e(p5,eBo),e(p5,Rj),e(Rj,oBo),e(p5,rBo),e(R,tBo),e(R,_5),e(_5,Dde),e(Dde,aBo),e(_5,nBo),e(_5,Bj),e(Bj,sBo),e(_5,lBo),e(R,iBo),e(R,u5),e(u5,Gde),e(Gde,dBo),e(u5,cBo),e(u5,Pj),e(Pj,fBo),e(u5,mBo),e(R,gBo),e(R,b5),e(b5,Ode),e(Ode,hBo),e(b5,pBo),e(b5,$j),e($j,_Bo),e(b5,uBo),e(R,bBo),e(R,F5),e(F5,Vde),e(Vde,FBo),e(F5,vBo),e(F5,Ij),e(Ij,TBo),e(F5,MBo),e(R,EBo),e(R,v5),e(v5,Xde),e(Xde,CBo),e(v5,wBo),e(v5,qj),e(qj,ABo),e(v5,yBo),e(R,LBo),e(R,T5),e(T5,zde),e(zde,xBo),e(T5,kBo),e(T5,Nj),e(Nj,SBo),e(T5,RBo),e(R,BBo),e(R,M5),e(M5,Qde),e(Qde,PBo),e(M5,$Bo),e(M5,jj),e(jj,IBo),e(M5,qBo),e(R,NBo),e(R,E5),e(E5,Wde),e(Wde,jBo),e(E5,DBo),e(E5,Dj),e(Dj,GBo),e(E5,OBo),e(R,VBo),e(R,C5),e(C5,Hde),e(Hde,XBo),e(C5,zBo),e(C5,Gj),e(Gj,QBo),e(C5,WBo),e(R,HBo),e(R,w5),e(w5,Ude),e(Ude,UBo),e(w5,JBo),e(w5,Oj),e(Oj,YBo),e(w5,KBo),e(R,ZBo),e(R,A5),e(A5,Jde),e(Jde,ePo),e(A5,oPo),e(A5,Vj),e(Vj,rPo),e(A5,tPo),e(R,aPo),e(R,y5),e(y5,Yde),e(Yde,nPo),e(y5,sPo),e(y5,Xj),e(Xj,lPo),e(y5,iPo),e(R,dPo),e(R,L5),e(L5,Kde),e(Kde,cPo),e(L5,fPo),e(L5,zj),e(zj,mPo),e(L5,gPo),e(R,hPo),e(R,x5),e(x5,Zde),e(Zde,pPo),e(x5,_Po),e(x5,Qj),e(Qj,uPo),e(x5,bPo),e(R,FPo),e(R,k5),e(k5,ece),e(ece,vPo),e(k5,TPo),e(k5,Wj),e(Wj,MPo),e(k5,EPo),e(R,CPo),e(R,S5),e(S5,oce),e(oce,wPo),e(S5,APo),e(S5,Hj),e(Hj,yPo),e(S5,LPo),e(R,xPo),e(R,R5),e(R5,rce),e(rce,kPo),e(R5,SPo),e(R5,Uj),e(Uj,RPo),e(R5,BPo),e(R,PPo),e(R,B5),e(B5,tce),e(tce,$Po),e(B5,IPo),e(B5,Jj),e(Jj,qPo),e(B5,NPo),e(R,jPo),e(R,P5),e(P5,ace),e(ace,DPo),e(P5,GPo),e(P5,Yj),e(Yj,OPo),e(P5,VPo),e(R,XPo),e(R,$5),e($5,nce),e(nce,zPo),e($5,QPo),e($5,Kj),e(Kj,WPo),e($5,HPo),e(R,UPo),e(R,I5),e(I5,sce),e(sce,JPo),e(I5,YPo),e(I5,Zj),e(Zj,KPo),e(I5,ZPo),e(R,e$o),e(R,q5),e(q5,lce),e(lce,o$o),e(q5,r$o),e(q5,eD),e(eD,t$o),e(q5,a$o),e(R,n$o),e(R,N5),e(N5,ice),e(ice,s$o),e(N5,l$o),e(N5,oD),e(oD,i$o),e(N5,d$o),e(R,c$o),e(R,j5),e(j5,dce),e(dce,f$o),e(j5,m$o),e(j5,rD),e(rD,g$o),e(j5,h$o),e(R,p$o),e(R,D5),e(D5,cce),e(cce,_$o),e(D5,u$o),e(D5,tD),e(tD,b$o),e(D5,F$o),e(R,v$o),e(R,G5),e(G5,fce),e(fce,T$o),e(G5,M$o),e(G5,aD),e(aD,E$o),e(G5,C$o),e(R,w$o),e(R,O5),e(O5,mce),e(mce,A$o),e(O5,y$o),e(O5,nD),e(nD,L$o),e(O5,x$o),e(R,k$o),e(R,V5),e(V5,gce),e(gce,S$o),e(V5,R$o),e(V5,sD),e(sD,B$o),e(V5,P$o),e(R,$$o),e(R,X5),e(X5,hce),e(hce,I$o),e(X5,q$o),e(X5,lD),e(lD,N$o),e(X5,j$o),e(R,D$o),e(R,z5),e(z5,pce),e(pce,G$o),e(z5,O$o),e(z5,iD),e(iD,V$o),e(z5,X$o),e(R,z$o),e(R,Q5),e(Q5,_ce),e(_ce,Q$o),e(Q5,W$o),e(Q5,dD),e(dD,H$o),e(Q5,U$o),e(R,J$o),e(R,W5),e(W5,uce),e(uce,Y$o),e(W5,K$o),e(W5,cD),e(cD,Z$o),e(W5,eIo),e(R,oIo),e(R,H5),e(H5,bce),e(bce,rIo),e(H5,tIo),e(H5,fD),e(fD,aIo),e(H5,nIo),e(R,sIo),e(R,U5),e(U5,Fce),e(Fce,lIo),e(U5,iIo),e(U5,mD),e(mD,dIo),e(U5,cIo),e(R,fIo),e(R,J5),e(J5,vce),e(vce,mIo),e(J5,gIo),e(J5,gD),e(gD,hIo),e(J5,pIo),e(R,_Io),e(R,Y5),e(Y5,Tce),e(Tce,uIo),e(Y5,bIo),e(Y5,hD),e(hD,FIo),e(Y5,vIo),e(R,TIo),e(R,K5),e(K5,Mce),e(Mce,MIo),e(K5,EIo),e(K5,pD),e(pD,CIo),e(K5,wIo),e(Qe,AIo),e(Qe,Z5),e(Z5,yIo),e(Z5,Ece),e(Ece,LIo),e(Z5,xIo),e(Z5,Cce),e(Cce,kIo),e(Qe,SIo),e(Qe,wce),e(wce,RIo),e(Qe,BIo),g(mA,Qe,null),b(c,CRe,u),b(c,Ad,u),e(Ad,e3),e(e3,Ace),g(gA,Ace,null),e(Ad,PIo),e(Ad,yce),e(yce,$Io),b(c,wRe,u),b(c,sr,u),g(hA,sr,null),e(sr,IIo),e(sr,yd),e(yd,qIo),e(yd,_D),e(_D,NIo),e(yd,jIo),e(yd,uD),e(uD,DIo),e(yd,GIo),e(sr,OIo),e(sr,pA),e(pA,VIo),e(pA,Lce),e(Lce,XIo),e(pA,zIo),e(sr,QIo),e(sr,et),g(_A,et,null),e(et,WIo),e(et,xce),e(xce,HIo),e(et,UIo),e(et,Ld),e(Ld,JIo),e(Ld,kce),e(kce,YIo),e(Ld,KIo),e(Ld,bD),e(bD,ZIo),e(Ld,eqo),e(et,oqo),e(et,Sce),e(Sce,rqo),e(et,tqo),g(uA,et,null),e(sr,aqo),e(sr,We),g(bA,We,null),e(We,nqo),e(We,Rce),e(Rce,sqo),e(We,lqo),e(We,en),e(en,iqo),e(en,Bce),e(Bce,dqo),e(en,cqo),e(en,Pce),e(Pce,fqo),e(en,mqo),e(en,$ce),e($ce,gqo),e(en,hqo),e(We,pqo),e(We,Ice),e(Ice,o3),e(o3,qce),e(qce,_qo),e(o3,uqo),e(o3,FD),e(FD,bqo),e(o3,Fqo),e(We,vqo),e(We,r3),e(r3,Tqo),e(r3,Nce),e(Nce,Mqo),e(r3,Eqo),e(r3,jce),e(jce,Cqo),e(We,wqo),e(We,Dce),e(Dce,Aqo),e(We,yqo),g(FA,We,null),b(c,ARe,u),b(c,xd,u),e(xd,t3),e(t3,Gce),g(vA,Gce,null),e(xd,Lqo),e(xd,Oce),e(Oce,xqo),b(c,yRe,u),b(c,lr,u),g(TA,lr,null),e(lr,kqo),e(lr,kd),e(kd,Sqo),e(kd,vD),e(vD,Rqo),e(kd,Bqo),e(kd,TD),e(TD,Pqo),e(kd,$qo),e(lr,Iqo),e(lr,MA),e(MA,qqo),e(MA,Vce),e(Vce,Nqo),e(MA,jqo),e(lr,Dqo),e(lr,ot),g(EA,ot,null),e(ot,Gqo),e(ot,Xce),e(Xce,Oqo),e(ot,Vqo),e(ot,Sd),e(Sd,Xqo),e(Sd,zce),e(zce,zqo),e(Sd,Qqo),e(Sd,MD),e(MD,Wqo),e(Sd,Hqo),e(ot,Uqo),e(ot,Qce),e(Qce,Jqo),e(ot,Yqo),g(CA,ot,null),e(lr,Kqo),e(lr,He),g(wA,He,null),e(He,Zqo),e(He,Wce),e(Wce,eNo),e(He,oNo),e(He,on),e(on,rNo),e(on,Hce),e(Hce,tNo),e(on,aNo),e(on,Uce),e(Uce,nNo),e(on,sNo),e(on,Jce),e(Jce,lNo),e(on,iNo),e(He,dNo),e(He,he),e(he,a3),e(a3,Yce),e(Yce,cNo),e(a3,fNo),e(a3,ED),e(ED,mNo),e(a3,gNo),e(he,hNo),e(he,n3),e(n3,Kce),e(Kce,pNo),e(n3,_No),e(n3,CD),e(CD,uNo),e(n3,bNo),e(he,FNo),e(he,Ds),e(Ds,Zce),e(Zce,vNo),e(Ds,TNo),e(Ds,wD),e(wD,MNo),e(Ds,ENo),e(Ds,AD),e(AD,CNo),e(Ds,wNo),e(he,ANo),e(he,s3),e(s3,efe),e(efe,yNo),e(s3,LNo),e(s3,yD),e(yD,xNo),e(s3,kNo),e(he,SNo),e(he,ma),e(ma,ofe),e(ofe,RNo),e(ma,BNo),e(ma,LD),e(LD,PNo),e(ma,$No),e(ma,xD),e(xD,INo),e(ma,qNo),e(ma,kD),e(kD,NNo),e(ma,jNo),e(he,DNo),e(he,l3),e(l3,rfe),e(rfe,GNo),e(l3,ONo),e(l3,SD),e(SD,VNo),e(l3,XNo),e(he,zNo),e(he,i3),e(i3,tfe),e(tfe,QNo),e(i3,WNo),e(i3,RD),e(RD,HNo),e(i3,UNo),e(he,JNo),e(he,d3),e(d3,afe),e(afe,YNo),e(d3,KNo),e(d3,BD),e(BD,ZNo),e(d3,ejo),e(he,ojo),e(he,c3),e(c3,nfe),e(nfe,rjo),e(c3,tjo),e(c3,PD),e(PD,ajo),e(c3,njo),e(he,sjo),e(he,f3),e(f3,sfe),e(sfe,ljo),e(f3,ijo),e(f3,$D),e($D,djo),e(f3,cjo),e(he,fjo),e(he,m3),e(m3,lfe),e(lfe,mjo),e(m3,gjo),e(m3,ID),e(ID,hjo),e(m3,pjo),e(He,_jo),e(He,g3),e(g3,ujo),e(g3,ife),e(ife,bjo),e(g3,Fjo),e(g3,dfe),e(dfe,vjo),e(He,Tjo),e(He,cfe),e(cfe,Mjo),e(He,Ejo),g(AA,He,null),b(c,LRe,u),b(c,Rd,u),e(Rd,h3),e(h3,ffe),g(yA,ffe,null),e(Rd,Cjo),e(Rd,mfe),e(mfe,wjo),b(c,xRe,u),b(c,ir,u),g(LA,ir,null),e(ir,Ajo),e(ir,Bd),e(Bd,yjo),e(Bd,qD),e(qD,Ljo),e(Bd,xjo),e(Bd,ND),e(ND,kjo),e(Bd,Sjo),e(ir,Rjo),e(ir,xA),e(xA,Bjo),e(xA,gfe),e(gfe,Pjo),e(xA,$jo),e(ir,Ijo),e(ir,rt),g(kA,rt,null),e(rt,qjo),e(rt,hfe),e(hfe,Njo),e(rt,jjo),e(rt,Pd),e(Pd,Djo),e(Pd,pfe),e(pfe,Gjo),e(Pd,Ojo),e(Pd,jD),e(jD,Vjo),e(Pd,Xjo),e(rt,zjo),e(rt,_fe),e(_fe,Qjo),e(rt,Wjo),g(SA,rt,null),e(ir,Hjo),e(ir,Ue),g(RA,Ue,null),e(Ue,Ujo),e(Ue,ufe),e(ufe,Jjo),e(Ue,Yjo),e(Ue,rn),e(rn,Kjo),e(rn,bfe),e(bfe,Zjo),e(rn,eDo),e(rn,Ffe),e(Ffe,oDo),e(rn,rDo),e(rn,vfe),e(vfe,tDo),e(rn,aDo),e(Ue,nDo),e(Ue,Tfe),e(Tfe,p3),e(p3,Mfe),e(Mfe,sDo),e(p3,lDo),e(p3,DD),e(DD,iDo),e(p3,dDo),e(Ue,cDo),e(Ue,_3),e(_3,fDo),e(_3,Efe),e(Efe,mDo),e(_3,gDo),e(_3,Cfe),e(Cfe,hDo),e(Ue,pDo),e(Ue,wfe),e(wfe,_Do),e(Ue,uDo),g(BA,Ue,null),b(c,kRe,u),b(c,$d,u),e($d,u3),e(u3,Afe),g(PA,Afe,null),e($d,bDo),e($d,yfe),e(yfe,FDo),b(c,SRe,u),b(c,dr,u),g($A,dr,null),e(dr,vDo),e(dr,Id),e(Id,TDo),e(Id,GD),e(GD,MDo),e(Id,EDo),e(Id,OD),e(OD,CDo),e(Id,wDo),e(dr,ADo),e(dr,IA),e(IA,yDo),e(IA,Lfe),e(Lfe,LDo),e(IA,xDo),e(dr,kDo),e(dr,tt),g(qA,tt,null),e(tt,SDo),e(tt,xfe),e(xfe,RDo),e(tt,BDo),e(tt,qd),e(qd,PDo),e(qd,kfe),e(kfe,$Do),e(qd,IDo),e(qd,VD),e(VD,qDo),e(qd,NDo),e(tt,jDo),e(tt,Sfe),e(Sfe,DDo),e(tt,GDo),g(NA,tt,null),e(dr,ODo),e(dr,Je),g(jA,Je,null),e(Je,VDo),e(Je,Rfe),e(Rfe,XDo),e(Je,zDo),e(Je,tn),e(tn,QDo),e(tn,Bfe),e(Bfe,WDo),e(tn,HDo),e(tn,Pfe),e(Pfe,UDo),e(tn,JDo),e(tn,$fe),e($fe,YDo),e(tn,KDo),e(Je,ZDo),e(Je,Se),e(Se,b3),e(b3,Ife),e(Ife,eGo),e(b3,oGo),e(b3,XD),e(XD,rGo),e(b3,tGo),e(Se,aGo),e(Se,F3),e(F3,qfe),e(qfe,nGo),e(F3,sGo),e(F3,zD),e(zD,lGo),e(F3,iGo),e(Se,dGo),e(Se,v3),e(v3,Nfe),e(Nfe,cGo),e(v3,fGo),e(v3,QD),e(QD,mGo),e(v3,gGo),e(Se,hGo),e(Se,T3),e(T3,jfe),e(jfe,pGo),e(T3,_Go),e(T3,WD),e(WD,uGo),e(T3,bGo),e(Se,FGo),e(Se,M3),e(M3,Dfe),e(Dfe,vGo),e(M3,TGo),e(M3,HD),e(HD,MGo),e(M3,EGo),e(Se,CGo),e(Se,E3),e(E3,Gfe),e(Gfe,wGo),e(E3,AGo),e(E3,UD),e(UD,yGo),e(E3,LGo),e(Se,xGo),e(Se,C3),e(C3,Ofe),e(Ofe,kGo),e(C3,SGo),e(C3,JD),e(JD,RGo),e(C3,BGo),e(Se,PGo),e(Se,w3),e(w3,Vfe),e(Vfe,$Go),e(w3,IGo),e(w3,YD),e(YD,qGo),e(w3,NGo),e(Je,jGo),e(Je,A3),e(A3,DGo),e(A3,Xfe),e(Xfe,GGo),e(A3,OGo),e(A3,zfe),e(zfe,VGo),e(Je,XGo),e(Je,Qfe),e(Qfe,zGo),e(Je,QGo),g(DA,Je,null),b(c,RRe,u),b(c,Nd,u),e(Nd,y3),e(y3,Wfe),g(GA,Wfe,null),e(Nd,WGo),e(Nd,Hfe),e(Hfe,HGo),b(c,BRe,u),b(c,cr,u),g(OA,cr,null),e(cr,UGo),e(cr,jd),e(jd,JGo),e(jd,KD),e(KD,YGo),e(jd,KGo),e(jd,ZD),e(ZD,ZGo),e(jd,eOo),e(cr,oOo),e(cr,VA),e(VA,rOo),e(VA,Ufe),e(Ufe,tOo),e(VA,aOo),e(cr,nOo),e(cr,at),g(XA,at,null),e(at,sOo),e(at,Jfe),e(Jfe,lOo),e(at,iOo),e(at,Dd),e(Dd,dOo),e(Dd,Yfe),e(Yfe,cOo),e(Dd,fOo),e(Dd,eG),e(eG,mOo),e(Dd,gOo),e(at,hOo),e(at,Kfe),e(Kfe,pOo),e(at,_Oo),g(zA,at,null),e(cr,uOo),e(cr,Ye),g(QA,Ye,null),e(Ye,bOo),e(Ye,Zfe),e(Zfe,FOo),e(Ye,vOo),e(Ye,an),e(an,TOo),e(an,eme),e(eme,MOo),e(an,EOo),e(an,ome),e(ome,COo),e(an,wOo),e(an,rme),e(rme,AOo),e(an,yOo),e(Ye,LOo),e(Ye,nn),e(nn,L3),e(L3,tme),e(tme,xOo),e(L3,kOo),e(L3,oG),e(oG,SOo),e(L3,ROo),e(nn,BOo),e(nn,x3),e(x3,ame),e(ame,POo),e(x3,$Oo),e(x3,rG),e(rG,IOo),e(x3,qOo),e(nn,NOo),e(nn,k3),e(k3,nme),e(nme,jOo),e(k3,DOo),e(k3,tG),e(tG,GOo),e(k3,OOo),e(nn,VOo),e(nn,S3),e(S3,sme),e(sme,XOo),e(S3,zOo),e(S3,aG),e(aG,QOo),e(S3,WOo),e(Ye,HOo),e(Ye,R3),e(R3,UOo),e(R3,lme),e(lme,JOo),e(R3,YOo),e(R3,ime),e(ime,KOo),e(Ye,ZOo),e(Ye,dme),e(dme,eVo),e(Ye,oVo),g(WA,Ye,null),b(c,PRe,u),b(c,Gd,u),e(Gd,B3),e(B3,cme),g(HA,cme,null),e(Gd,rVo),e(Gd,fme),e(fme,tVo),b(c,$Re,u),b(c,fr,u),g(UA,fr,null),e(fr,aVo),e(fr,Od),e(Od,nVo),e(Od,nG),e(nG,sVo),e(Od,lVo),e(Od,sG),e(sG,iVo),e(Od,dVo),e(fr,cVo),e(fr,JA),e(JA,fVo),e(JA,mme),e(mme,mVo),e(JA,gVo),e(fr,hVo),e(fr,nt),g(YA,nt,null),e(nt,pVo),e(nt,gme),e(gme,_Vo),e(nt,uVo),e(nt,Vd),e(Vd,bVo),e(Vd,hme),e(hme,FVo),e(Vd,vVo),e(Vd,lG),e(lG,TVo),e(Vd,MVo),e(nt,EVo),e(nt,pme),e(pme,CVo),e(nt,wVo),g(KA,nt,null),e(fr,AVo),e(fr,Ke),g(ZA,Ke,null),e(Ke,yVo),e(Ke,_me),e(_me,LVo),e(Ke,xVo),e(Ke,sn),e(sn,kVo),e(sn,ume),e(ume,SVo),e(sn,RVo),e(sn,bme),e(bme,BVo),e(sn,PVo),e(sn,Fme),e(Fme,$Vo),e(sn,IVo),e(Ke,qVo),e(Ke,Re),e(Re,P3),e(P3,vme),e(vme,NVo),e(P3,jVo),e(P3,iG),e(iG,DVo),e(P3,GVo),e(Re,OVo),e(Re,$3),e($3,Tme),e(Tme,VVo),e($3,XVo),e($3,dG),e(dG,zVo),e($3,QVo),e(Re,WVo),e(Re,I3),e(I3,Mme),e(Mme,HVo),e(I3,UVo),e(I3,cG),e(cG,JVo),e(I3,YVo),e(Re,KVo),e(Re,q3),e(q3,Eme),e(Eme,ZVo),e(q3,eXo),e(q3,fG),e(fG,oXo),e(q3,rXo),e(Re,tXo),e(Re,N3),e(N3,Cme),e(Cme,aXo),e(N3,nXo),e(N3,mG),e(mG,sXo),e(N3,lXo),e(Re,iXo),e(Re,j3),e(j3,wme),e(wme,dXo),e(j3,cXo),e(j3,gG),e(gG,fXo),e(j3,mXo),e(Re,gXo),e(Re,D3),e(D3,Ame),e(Ame,hXo),e(D3,pXo),e(D3,hG),e(hG,_Xo),e(D3,uXo),e(Re,bXo),e(Re,G3),e(G3,yme),e(yme,FXo),e(G3,vXo),e(G3,pG),e(pG,TXo),e(G3,MXo),e(Ke,EXo),e(Ke,O3),e(O3,CXo),e(O3,Lme),e(Lme,wXo),e(O3,AXo),e(O3,xme),e(xme,yXo),e(Ke,LXo),e(Ke,kme),e(kme,xXo),e(Ke,kXo),g(e0,Ke,null),b(c,IRe,u),b(c,Xd,u),e(Xd,V3),e(V3,Sme),g(o0,Sme,null),e(Xd,SXo),e(Xd,Rme),e(Rme,RXo),b(c,qRe,u),b(c,mr,u),g(r0,mr,null),e(mr,BXo),e(mr,zd),e(zd,PXo),e(zd,_G),e(_G,$Xo),e(zd,IXo),e(zd,uG),e(uG,qXo),e(zd,NXo),e(mr,jXo),e(mr,t0),e(t0,DXo),e(t0,Bme),e(Bme,GXo),e(t0,OXo),e(mr,VXo),e(mr,st),g(a0,st,null),e(st,XXo),e(st,Pme),e(Pme,zXo),e(st,QXo),e(st,Qd),e(Qd,WXo),e(Qd,$me),e($me,HXo),e(Qd,UXo),e(Qd,bG),e(bG,JXo),e(Qd,YXo),e(st,KXo),e(st,Ime),e(Ime,ZXo),e(st,ezo),g(n0,st,null),e(mr,ozo),e(mr,Ze),g(s0,Ze,null),e(Ze,rzo),e(Ze,qme),e(qme,tzo),e(Ze,azo),e(Ze,ln),e(ln,nzo),e(ln,Nme),e(Nme,szo),e(ln,lzo),e(ln,jme),e(jme,izo),e(ln,dzo),e(ln,Dme),e(Dme,czo),e(ln,fzo),e(Ze,mzo),e(Ze,l0),e(l0,X3),e(X3,Gme),e(Gme,gzo),e(X3,hzo),e(X3,FG),e(FG,pzo),e(X3,_zo),e(l0,uzo),e(l0,z3),e(z3,Ome),e(Ome,bzo),e(z3,Fzo),e(z3,vG),e(vG,vzo),e(z3,Tzo),e(Ze,Mzo),e(Ze,Q3),e(Q3,Ezo),e(Q3,Vme),e(Vme,Czo),e(Q3,wzo),e(Q3,Xme),e(Xme,Azo),e(Ze,yzo),e(Ze,zme),e(zme,Lzo),e(Ze,xzo),g(i0,Ze,null),b(c,NRe,u),b(c,Wd,u),e(Wd,W3),e(W3,Qme),g(d0,Qme,null),e(Wd,kzo),e(Wd,Wme),e(Wme,Szo),b(c,jRe,u),b(c,gr,u),g(c0,gr,null),e(gr,Rzo),e(gr,Hd),e(Hd,Bzo),e(Hd,TG),e(TG,Pzo),e(Hd,$zo),e(Hd,MG),e(MG,Izo),e(Hd,qzo),e(gr,Nzo),e(gr,f0),e(f0,jzo),e(f0,Hme),e(Hme,Dzo),e(f0,Gzo),e(gr,Ozo),e(gr,lt),g(m0,lt,null),e(lt,Vzo),e(lt,Ume),e(Ume,Xzo),e(lt,zzo),e(lt,Ud),e(Ud,Qzo),e(Ud,Jme),e(Jme,Wzo),e(Ud,Hzo),e(Ud,EG),e(EG,Uzo),e(Ud,Jzo),e(lt,Yzo),e(lt,Yme),e(Yme,Kzo),e(lt,Zzo),g(g0,lt,null),e(gr,eQo),e(gr,eo),g(h0,eo,null),e(eo,oQo),e(eo,Kme),e(Kme,rQo),e(eo,tQo),e(eo,dn),e(dn,aQo),e(dn,Zme),e(Zme,nQo),e(dn,sQo),e(dn,ege),e(ege,lQo),e(dn,iQo),e(dn,oge),e(oge,dQo),e(dn,cQo),e(eo,fQo),e(eo,cn),e(cn,H3),e(H3,rge),e(rge,mQo),e(H3,gQo),e(H3,CG),e(CG,hQo),e(H3,pQo),e(cn,_Qo),e(cn,U3),e(U3,tge),e(tge,uQo),e(U3,bQo),e(U3,wG),e(wG,FQo),e(U3,vQo),e(cn,TQo),e(cn,J3),e(J3,age),e(age,MQo),e(J3,EQo),e(J3,AG),e(AG,CQo),e(J3,wQo),e(cn,AQo),e(cn,Y3),e(Y3,nge),e(nge,yQo),e(Y3,LQo),e(Y3,yG),e(yG,xQo),e(Y3,kQo),e(eo,SQo),e(eo,K3),e(K3,RQo),e(K3,sge),e(sge,BQo),e(K3,PQo),e(K3,lge),e(lge,$Qo),e(eo,IQo),e(eo,ige),e(ige,qQo),e(eo,NQo),g(p0,eo,null),b(c,DRe,u),b(c,Jd,u),e(Jd,Z3),e(Z3,dge),g(_0,dge,null),e(Jd,jQo),e(Jd,cge),e(cge,DQo),b(c,GRe,u),b(c,hr,u),g(u0,hr,null),e(hr,GQo),e(hr,Yd),e(Yd,OQo),e(Yd,LG),e(LG,VQo),e(Yd,XQo),e(Yd,xG),e(xG,zQo),e(Yd,QQo),e(hr,WQo),e(hr,b0),e(b0,HQo),e(b0,fge),e(fge,UQo),e(b0,JQo),e(hr,YQo),e(hr,it),g(F0,it,null),e(it,KQo),e(it,mge),e(mge,ZQo),e(it,eWo),e(it,Kd),e(Kd,oWo),e(Kd,gge),e(gge,rWo),e(Kd,tWo),e(Kd,kG),e(kG,aWo),e(Kd,nWo),e(it,sWo),e(it,hge),e(hge,lWo),e(it,iWo),g(v0,it,null),e(hr,dWo),e(hr,oo),g(T0,oo,null),e(oo,cWo),e(oo,pge),e(pge,fWo),e(oo,mWo),e(oo,fn),e(fn,gWo),e(fn,_ge),e(_ge,hWo),e(fn,pWo),e(fn,uge),e(uge,_Wo),e(fn,uWo),e(fn,bge),e(bge,bWo),e(fn,FWo),e(oo,vWo),e(oo,Zd),e(Zd,e2),e(e2,Fge),e(Fge,TWo),e(e2,MWo),e(e2,SG),e(SG,EWo),e(e2,CWo),e(Zd,wWo),e(Zd,o2),e(o2,vge),e(vge,AWo),e(o2,yWo),e(o2,RG),e(RG,LWo),e(o2,xWo),e(Zd,kWo),e(Zd,r2),e(r2,Tge),e(Tge,SWo),e(r2,RWo),e(r2,BG),e(BG,BWo),e(r2,PWo),e(oo,$Wo),e(oo,t2),e(t2,IWo),e(t2,Mge),e(Mge,qWo),e(t2,NWo),e(t2,Ege),e(Ege,jWo),e(oo,DWo),e(oo,Cge),e(Cge,GWo),e(oo,OWo),g(M0,oo,null),b(c,ORe,u),b(c,ec,u),e(ec,a2),e(a2,wge),g(E0,wge,null),e(ec,VWo),e(ec,Age),e(Age,XWo),b(c,VRe,u),b(c,pr,u),g(C0,pr,null),e(pr,zWo),e(pr,oc),e(oc,QWo),e(oc,PG),e(PG,WWo),e(oc,HWo),e(oc,$G),e($G,UWo),e(oc,JWo),e(pr,YWo),e(pr,w0),e(w0,KWo),e(w0,yge),e(yge,ZWo),e(w0,eHo),e(pr,oHo),e(pr,dt),g(A0,dt,null),e(dt,rHo),e(dt,Lge),e(Lge,tHo),e(dt,aHo),e(dt,rc),e(rc,nHo),e(rc,xge),e(xge,sHo),e(rc,lHo),e(rc,IG),e(IG,iHo),e(rc,dHo),e(dt,cHo),e(dt,kge),e(kge,fHo),e(dt,mHo),g(y0,dt,null),e(pr,gHo),e(pr,ro),g(L0,ro,null),e(ro,hHo),e(ro,Sge),e(Sge,pHo),e(ro,_Ho),e(ro,mn),e(mn,uHo),e(mn,Rge),e(Rge,bHo),e(mn,FHo),e(mn,Bge),e(Bge,vHo),e(mn,THo),e(mn,Pge),e(Pge,MHo),e(mn,EHo),e(ro,CHo),e(ro,$ge),e($ge,n2),e(n2,Ige),e(Ige,wHo),e(n2,AHo),e(n2,qG),e(qG,yHo),e(n2,LHo),e(ro,xHo),e(ro,s2),e(s2,kHo),e(s2,qge),e(qge,SHo),e(s2,RHo),e(s2,Nge),e(Nge,BHo),e(ro,PHo),e(ro,jge),e(jge,$Ho),e(ro,IHo),g(x0,ro,null),b(c,XRe,u),b(c,tc,u),e(tc,l2),e(l2,Dge),g(k0,Dge,null),e(tc,qHo),e(tc,Gge),e(Gge,NHo),b(c,zRe,u),b(c,_r,u),g(S0,_r,null),e(_r,jHo),e(_r,ac),e(ac,DHo),e(ac,NG),e(NG,GHo),e(ac,OHo),e(ac,jG),e(jG,VHo),e(ac,XHo),e(_r,zHo),e(_r,R0),e(R0,QHo),e(R0,Oge),e(Oge,WHo),e(R0,HHo),e(_r,UHo),e(_r,ct),g(B0,ct,null),e(ct,JHo),e(ct,Vge),e(Vge,YHo),e(ct,KHo),e(ct,nc),e(nc,ZHo),e(nc,Xge),e(Xge,eUo),e(nc,oUo),e(nc,DG),e(DG,rUo),e(nc,tUo),e(ct,aUo),e(ct,zge),e(zge,nUo),e(ct,sUo),g(P0,ct,null),e(_r,lUo),e(_r,to),g($0,to,null),e(to,iUo),e(to,Qge),e(Qge,dUo),e(to,cUo),e(to,gn),e(gn,fUo),e(gn,Wge),e(Wge,mUo),e(gn,gUo),e(gn,Hge),e(Hge,hUo),e(gn,pUo),e(gn,Uge),e(Uge,_Uo),e(gn,uUo),e(to,bUo),e(to,Jge),e(Jge,i2),e(i2,Yge),e(Yge,FUo),e(i2,vUo),e(i2,GG),e(GG,TUo),e(i2,MUo),e(to,EUo),e(to,d2),e(d2,CUo),e(d2,Kge),e(Kge,wUo),e(d2,AUo),e(d2,Zge),e(Zge,yUo),e(to,LUo),e(to,ehe),e(ehe,xUo),e(to,kUo),g(I0,to,null),b(c,QRe,u),b(c,sc,u),e(sc,c2),e(c2,ohe),g(q0,ohe,null),e(sc,SUo),e(sc,rhe),e(rhe,RUo),b(c,WRe,u),b(c,ur,u),g(N0,ur,null),e(ur,BUo),e(ur,lc),e(lc,PUo),e(lc,OG),e(OG,$Uo),e(lc,IUo),e(lc,VG),e(VG,qUo),e(lc,NUo),e(ur,jUo),e(ur,j0),e(j0,DUo),e(j0,the),e(the,GUo),e(j0,OUo),e(ur,VUo),e(ur,ft),g(D0,ft,null),e(ft,XUo),e(ft,ahe),e(ahe,zUo),e(ft,QUo),e(ft,ic),e(ic,WUo),e(ic,nhe),e(nhe,HUo),e(ic,UUo),e(ic,XG),e(XG,JUo),e(ic,YUo),e(ft,KUo),e(ft,she),e(she,ZUo),e(ft,eJo),g(G0,ft,null),e(ur,oJo),e(ur,ao),g(O0,ao,null),e(ao,rJo),e(ao,lhe),e(lhe,tJo),e(ao,aJo),e(ao,hn),e(hn,nJo),e(hn,ihe),e(ihe,sJo),e(hn,lJo),e(hn,dhe),e(dhe,iJo),e(hn,dJo),e(hn,che),e(che,cJo),e(hn,fJo),e(ao,mJo),e(ao,dc),e(dc,f2),e(f2,fhe),e(fhe,gJo),e(f2,hJo),e(f2,zG),e(zG,pJo),e(f2,_Jo),e(dc,uJo),e(dc,m2),e(m2,mhe),e(mhe,bJo),e(m2,FJo),e(m2,QG),e(QG,vJo),e(m2,TJo),e(dc,MJo),e(dc,g2),e(g2,ghe),e(ghe,EJo),e(g2,CJo),e(g2,WG),e(WG,wJo),e(g2,AJo),e(ao,yJo),e(ao,h2),e(h2,LJo),e(h2,hhe),e(hhe,xJo),e(h2,kJo),e(h2,phe),e(phe,SJo),e(ao,RJo),e(ao,_he),e(_he,BJo),e(ao,PJo),g(V0,ao,null),b(c,HRe,u),b(c,cc,u),e(cc,p2),e(p2,uhe),g(X0,uhe,null),e(cc,$Jo),e(cc,bhe),e(bhe,IJo),b(c,URe,u),b(c,br,u),g(z0,br,null),e(br,qJo),e(br,fc),e(fc,NJo),e(fc,HG),e(HG,jJo),e(fc,DJo),e(fc,UG),e(UG,GJo),e(fc,OJo),e(br,VJo),e(br,Q0),e(Q0,XJo),e(Q0,Fhe),e(Fhe,zJo),e(Q0,QJo),e(br,WJo),e(br,mt),g(W0,mt,null),e(mt,HJo),e(mt,vhe),e(vhe,UJo),e(mt,JJo),e(mt,mc),e(mc,YJo),e(mc,The),e(The,KJo),e(mc,ZJo),e(mc,JG),e(JG,eYo),e(mc,oYo),e(mt,rYo),e(mt,Mhe),e(Mhe,tYo),e(mt,aYo),g(H0,mt,null),e(br,nYo),e(br,no),g(U0,no,null),e(no,sYo),e(no,Ehe),e(Ehe,lYo),e(no,iYo),e(no,pn),e(pn,dYo),e(pn,Che),e(Che,cYo),e(pn,fYo),e(pn,whe),e(whe,mYo),e(pn,gYo),e(pn,Ahe),e(Ahe,hYo),e(pn,pYo),e(no,_Yo),e(no,yhe),e(yhe,_2),e(_2,Lhe),e(Lhe,uYo),e(_2,bYo),e(_2,YG),e(YG,FYo),e(_2,vYo),e(no,TYo),e(no,u2),e(u2,MYo),e(u2,xhe),e(xhe,EYo),e(u2,CYo),e(u2,khe),e(khe,wYo),e(no,AYo),e(no,She),e(She,yYo),e(no,LYo),g(J0,no,null),b(c,JRe,u),b(c,gc,u),e(gc,b2),e(b2,Rhe),g(Y0,Rhe,null),e(gc,xYo),e(gc,Bhe),e(Bhe,kYo),b(c,YRe,u),b(c,Fr,u),g(K0,Fr,null),e(Fr,SYo),e(Fr,hc),e(hc,RYo),e(hc,KG),e(KG,BYo),e(hc,PYo),e(hc,ZG),e(ZG,$Yo),e(hc,IYo),e(Fr,qYo),e(Fr,Z0),e(Z0,NYo),e(Z0,Phe),e(Phe,jYo),e(Z0,DYo),e(Fr,GYo),e(Fr,gt),g(ey,gt,null),e(gt,OYo),e(gt,$he),e($he,VYo),e(gt,XYo),e(gt,pc),e(pc,zYo),e(pc,Ihe),e(Ihe,QYo),e(pc,WYo),e(pc,eO),e(eO,HYo),e(pc,UYo),e(gt,JYo),e(gt,qhe),e(qhe,YYo),e(gt,KYo),g(oy,gt,null),e(Fr,ZYo),e(Fr,ho),g(ry,ho,null),e(ho,eKo),e(ho,Nhe),e(Nhe,oKo),e(ho,rKo),e(ho,_n),e(_n,tKo),e(_n,jhe),e(jhe,aKo),e(_n,nKo),e(_n,Dhe),e(Dhe,sKo),e(_n,lKo),e(_n,Ghe),e(Ghe,iKo),e(_n,dKo),e(ho,cKo),e(ho,L),e(L,F2),e(F2,Ohe),e(Ohe,fKo),e(F2,mKo),e(F2,oO),e(oO,gKo),e(F2,hKo),e(L,pKo),e(L,v2),e(v2,Vhe),e(Vhe,_Ko),e(v2,uKo),e(v2,rO),e(rO,bKo),e(v2,FKo),e(L,vKo),e(L,T2),e(T2,Xhe),e(Xhe,TKo),e(T2,MKo),e(T2,tO),e(tO,EKo),e(T2,CKo),e(L,wKo),e(L,M2),e(M2,zhe),e(zhe,AKo),e(M2,yKo),e(M2,aO),e(aO,LKo),e(M2,xKo),e(L,kKo),e(L,E2),e(E2,Qhe),e(Qhe,SKo),e(E2,RKo),e(E2,nO),e(nO,BKo),e(E2,PKo),e(L,$Ko),e(L,C2),e(C2,Whe),e(Whe,IKo),e(C2,qKo),e(C2,sO),e(sO,NKo),e(C2,jKo),e(L,DKo),e(L,w2),e(w2,Hhe),e(Hhe,GKo),e(w2,OKo),e(w2,lO),e(lO,VKo),e(w2,XKo),e(L,zKo),e(L,A2),e(A2,Uhe),e(Uhe,QKo),e(A2,WKo),e(A2,iO),e(iO,HKo),e(A2,UKo),e(L,JKo),e(L,y2),e(y2,Jhe),e(Jhe,YKo),e(y2,KKo),e(y2,dO),e(dO,ZKo),e(y2,eZo),e(L,oZo),e(L,L2),e(L2,Yhe),e(Yhe,rZo),e(L2,tZo),e(L2,cO),e(cO,aZo),e(L2,nZo),e(L,sZo),e(L,x2),e(x2,Khe),e(Khe,lZo),e(x2,iZo),e(x2,fO),e(fO,dZo),e(x2,cZo),e(L,fZo),e(L,k2),e(k2,Zhe),e(Zhe,mZo),e(k2,gZo),e(k2,mO),e(mO,hZo),e(k2,pZo),e(L,_Zo),e(L,S2),e(S2,epe),e(epe,uZo),e(S2,bZo),e(S2,gO),e(gO,FZo),e(S2,vZo),e(L,TZo),e(L,R2),e(R2,ope),e(ope,MZo),e(R2,EZo),e(R2,hO),e(hO,CZo),e(R2,wZo),e(L,AZo),e(L,B2),e(B2,rpe),e(rpe,yZo),e(B2,LZo),e(B2,pO),e(pO,xZo),e(B2,kZo),e(L,SZo),e(L,P2),e(P2,tpe),e(tpe,RZo),e(P2,BZo),e(P2,_O),e(_O,PZo),e(P2,$Zo),e(L,IZo),e(L,Gs),e(Gs,ape),e(ape,qZo),e(Gs,NZo),e(Gs,uO),e(uO,jZo),e(Gs,DZo),e(Gs,bO),e(bO,GZo),e(Gs,OZo),e(L,VZo),e(L,$2),e($2,npe),e(npe,XZo),e($2,zZo),e($2,FO),e(FO,QZo),e($2,WZo),e(L,HZo),e(L,I2),e(I2,spe),e(spe,UZo),e(I2,JZo),e(I2,vO),e(vO,YZo),e(I2,KZo),e(L,ZZo),e(L,q2),e(q2,lpe),e(lpe,eer),e(q2,oer),e(q2,TO),e(TO,rer),e(q2,ter),e(L,aer),e(L,N2),e(N2,ipe),e(ipe,ner),e(N2,ser),e(N2,MO),e(MO,ler),e(N2,ier),e(L,der),e(L,j2),e(j2,dpe),e(dpe,cer),e(j2,fer),e(j2,EO),e(EO,mer),e(j2,ger),e(L,her),e(L,D2),e(D2,cpe),e(cpe,per),e(D2,_er),e(D2,CO),e(CO,uer),e(D2,ber),e(L,Fer),e(L,G2),e(G2,fpe),e(fpe,ver),e(G2,Ter),e(G2,wO),e(wO,Mer),e(G2,Eer),e(L,Cer),e(L,O2),e(O2,mpe),e(mpe,wer),e(O2,Aer),e(O2,AO),e(AO,yer),e(O2,Ler),e(L,xer),e(L,V2),e(V2,gpe),e(gpe,ker),e(V2,Ser),e(V2,yO),e(yO,Rer),e(V2,Ber),e(L,Per),e(L,X2),e(X2,hpe),e(hpe,$er),e(X2,Ier),e(X2,LO),e(LO,qer),e(X2,Ner),e(L,jer),e(L,z2),e(z2,ppe),e(ppe,Der),e(z2,Ger),e(z2,xO),e(xO,Oer),e(z2,Ver),e(L,Xer),e(L,Q2),e(Q2,_pe),e(_pe,zer),e(Q2,Qer),e(Q2,kO),e(kO,Wer),e(Q2,Her),e(L,Uer),e(L,W2),e(W2,upe),e(upe,Jer),e(W2,Yer),e(W2,SO),e(SO,Ker),e(W2,Zer),e(L,eor),e(L,H2),e(H2,bpe),e(bpe,oor),e(H2,ror),e(H2,RO),e(RO,tor),e(H2,aor),e(L,nor),e(L,U2),e(U2,Fpe),e(Fpe,sor),e(U2,lor),e(U2,BO),e(BO,ior),e(U2,dor),e(L,cor),e(L,J2),e(J2,vpe),e(vpe,mor),e(J2,gor),e(J2,PO),e(PO,hor),e(J2,por),e(L,_or),e(L,Y2),e(Y2,Tpe),e(Tpe,uor),e(Y2,bor),e(Y2,$O),e($O,For),e(Y2,vor),e(L,Tor),e(L,K2),e(K2,Mpe),e(Mpe,Mor),e(K2,Eor),e(K2,IO),e(IO,Cor),e(K2,wor),e(L,Aor),e(L,Z2),e(Z2,Epe),e(Epe,yor),e(Z2,Lor),e(Z2,qO),e(qO,xor),e(Z2,kor),e(L,Sor),e(L,eF),e(eF,Cpe),e(Cpe,Ror),e(eF,Bor),e(eF,NO),e(NO,Por),e(eF,$or),e(L,Ior),e(L,oF),e(oF,wpe),e(wpe,qor),e(oF,Nor),e(oF,jO),e(jO,jor),e(oF,Dor),e(L,Gor),e(L,rF),e(rF,Ape),e(Ape,Oor),e(rF,Vor),e(rF,DO),e(DO,Xor),e(rF,zor),e(L,Qor),e(L,tF),e(tF,ype),e(ype,Wor),e(tF,Hor),e(tF,GO),e(GO,Uor),e(tF,Jor),e(L,Yor),e(L,aF),e(aF,Lpe),e(Lpe,Kor),e(aF,Zor),e(aF,OO),e(OO,err),e(aF,orr),e(L,rrr),e(L,nF),e(nF,xpe),e(xpe,trr),e(nF,arr),e(nF,VO),e(VO,nrr),e(nF,srr),e(L,lrr),e(L,sF),e(sF,kpe),e(kpe,irr),e(sF,drr),e(sF,XO),e(XO,crr),e(sF,frr),e(L,mrr),e(L,lF),e(lF,Spe),e(Spe,grr),e(lF,hrr),e(lF,zO),e(zO,prr),e(lF,_rr),e(L,urr),e(L,iF),e(iF,Rpe),e(Rpe,brr),e(iF,Frr),e(iF,QO),e(QO,vrr),e(iF,Trr),e(ho,Mrr),e(ho,Bpe),e(Bpe,Err),e(ho,Crr),g(ty,ho,null),b(c,KRe,u),b(c,_c,u),e(_c,dF),e(dF,Ppe),g(ay,Ppe,null),e(_c,wrr),e(_c,$pe),e($pe,Arr),b(c,ZRe,u),b(c,vr,u),g(ny,vr,null),e(vr,yrr),e(vr,uc),e(uc,Lrr),e(uc,WO),e(WO,xrr),e(uc,krr),e(uc,HO),e(HO,Srr),e(uc,Rrr),e(vr,Brr),e(vr,sy),e(sy,Prr),e(sy,Ipe),e(Ipe,$rr),e(sy,Irr),e(vr,qrr),e(vr,ht),g(ly,ht,null),e(ht,Nrr),e(ht,qpe),e(qpe,jrr),e(ht,Drr),e(ht,bc),e(bc,Grr),e(bc,Npe),e(Npe,Orr),e(bc,Vrr),e(bc,UO),e(UO,Xrr),e(bc,zrr),e(ht,Qrr),e(ht,jpe),e(jpe,Wrr),e(ht,Hrr),g(iy,ht,null),e(vr,Urr),e(vr,po),g(dy,po,null),e(po,Jrr),e(po,Dpe),e(Dpe,Yrr),e(po,Krr),e(po,un),e(un,Zrr),e(un,Gpe),e(Gpe,etr),e(un,otr),e(un,Ope),e(Ope,rtr),e(un,ttr),e(un,Vpe),e(Vpe,atr),e(un,ntr),e(po,str),e(po,H),e(H,cF),e(cF,Xpe),e(Xpe,ltr),e(cF,itr),e(cF,JO),e(JO,dtr),e(cF,ctr),e(H,ftr),e(H,fF),e(fF,zpe),e(zpe,mtr),e(fF,gtr),e(fF,YO),e(YO,htr),e(fF,ptr),e(H,_tr),e(H,mF),e(mF,Qpe),e(Qpe,utr),e(mF,btr),e(mF,KO),e(KO,Ftr),e(mF,vtr),e(H,Ttr),e(H,gF),e(gF,Wpe),e(Wpe,Mtr),e(gF,Etr),e(gF,ZO),e(ZO,Ctr),e(gF,wtr),e(H,Atr),e(H,hF),e(hF,Hpe),e(Hpe,ytr),e(hF,Ltr),e(hF,eV),e(eV,xtr),e(hF,ktr),e(H,Str),e(H,pF),e(pF,Upe),e(Upe,Rtr),e(pF,Btr),e(pF,oV),e(oV,Ptr),e(pF,$tr),e(H,Itr),e(H,_F),e(_F,Jpe),e(Jpe,qtr),e(_F,Ntr),e(_F,rV),e(rV,jtr),e(_F,Dtr),e(H,Gtr),e(H,uF),e(uF,Ype),e(Ype,Otr),e(uF,Vtr),e(uF,tV),e(tV,Xtr),e(uF,ztr),e(H,Qtr),e(H,bF),e(bF,Kpe),e(Kpe,Wtr),e(bF,Htr),e(bF,aV),e(aV,Utr),e(bF,Jtr),e(H,Ytr),e(H,FF),e(FF,Zpe),e(Zpe,Ktr),e(FF,Ztr),e(FF,nV),e(nV,ear),e(FF,oar),e(H,rar),e(H,vF),e(vF,e_e),e(e_e,tar),e(vF,aar),e(vF,sV),e(sV,nar),e(vF,sar),e(H,lar),e(H,TF),e(TF,o_e),e(o_e,iar),e(TF,dar),e(TF,lV),e(lV,car),e(TF,far),e(H,mar),e(H,MF),e(MF,r_e),e(r_e,gar),e(MF,har),e(MF,iV),e(iV,par),e(MF,_ar),e(H,uar),e(H,EF),e(EF,t_e),e(t_e,bar),e(EF,Far),e(EF,dV),e(dV,Tar),e(EF,Mar),e(H,Ear),e(H,CF),e(CF,a_e),e(a_e,Car),e(CF,war),e(CF,cV),e(cV,Aar),e(CF,yar),e(H,Lar),e(H,wF),e(wF,n_e),e(n_e,xar),e(wF,kar),e(wF,fV),e(fV,Sar),e(wF,Rar),e(H,Bar),e(H,AF),e(AF,s_e),e(s_e,Par),e(AF,$ar),e(AF,mV),e(mV,Iar),e(AF,qar),e(H,Nar),e(H,yF),e(yF,l_e),e(l_e,jar),e(yF,Dar),e(yF,gV),e(gV,Gar),e(yF,Oar),e(H,Var),e(H,LF),e(LF,i_e),e(i_e,Xar),e(LF,zar),e(LF,hV),e(hV,Qar),e(LF,War),e(H,Har),e(H,xF),e(xF,d_e),e(d_e,Uar),e(xF,Jar),e(xF,pV),e(pV,Yar),e(xF,Kar),e(H,Zar),e(H,kF),e(kF,c_e),e(c_e,enr),e(kF,onr),e(kF,_V),e(_V,rnr),e(kF,tnr),e(H,anr),e(H,SF),e(SF,f_e),e(f_e,nnr),e(SF,snr),e(SF,uV),e(uV,lnr),e(SF,inr),e(H,dnr),e(H,RF),e(RF,m_e),e(m_e,cnr),e(RF,fnr),e(RF,bV),e(bV,mnr),e(RF,gnr),e(po,hnr),e(po,g_e),e(g_e,pnr),e(po,_nr),g(cy,po,null),b(c,eBe,u),b(c,Fc,u),e(Fc,BF),e(BF,h_e),g(fy,h_e,null),e(Fc,unr),e(Fc,p_e),e(p_e,bnr),b(c,oBe,u),b(c,Tr,u),g(my,Tr,null),e(Tr,Fnr),e(Tr,vc),e(vc,vnr),e(vc,FV),e(FV,Tnr),e(vc,Mnr),e(vc,vV),e(vV,Enr),e(vc,Cnr),e(Tr,wnr),e(Tr,gy),e(gy,Anr),e(gy,__e),e(__e,ynr),e(gy,Lnr),e(Tr,xnr),e(Tr,pt),g(hy,pt,null),e(pt,knr),e(pt,u_e),e(u_e,Snr),e(pt,Rnr),e(pt,Tc),e(Tc,Bnr),e(Tc,b_e),e(b_e,Pnr),e(Tc,$nr),e(Tc,TV),e(TV,Inr),e(Tc,qnr),e(pt,Nnr),e(pt,F_e),e(F_e,jnr),e(pt,Dnr),g(py,pt,null),e(Tr,Gnr),e(Tr,_o),g(_y,_o,null),e(_o,Onr),e(_o,v_e),e(v_e,Vnr),e(_o,Xnr),e(_o,bn),e(bn,znr),e(bn,T_e),e(T_e,Qnr),e(bn,Wnr),e(bn,M_e),e(M_e,Hnr),e(bn,Unr),e(bn,E_e),e(E_e,Jnr),e(bn,Ynr),e(_o,Knr),e(_o,de),e(de,PF),e(PF,C_e),e(C_e,Znr),e(PF,esr),e(PF,MV),e(MV,osr),e(PF,rsr),e(de,tsr),e(de,$F),e($F,w_e),e(w_e,asr),e($F,nsr),e($F,EV),e(EV,ssr),e($F,lsr),e(de,isr),e(de,IF),e(IF,A_e),e(A_e,dsr),e(IF,csr),e(IF,CV),e(CV,fsr),e(IF,msr),e(de,gsr),e(de,qF),e(qF,y_e),e(y_e,hsr),e(qF,psr),e(qF,wV),e(wV,_sr),e(qF,usr),e(de,bsr),e(de,NF),e(NF,L_e),e(L_e,Fsr),e(NF,vsr),e(NF,AV),e(AV,Tsr),e(NF,Msr),e(de,Esr),e(de,jF),e(jF,x_e),e(x_e,Csr),e(jF,wsr),e(jF,yV),e(yV,Asr),e(jF,ysr),e(de,Lsr),e(de,DF),e(DF,k_e),e(k_e,xsr),e(DF,ksr),e(DF,LV),e(LV,Ssr),e(DF,Rsr),e(de,Bsr),e(de,GF),e(GF,S_e),e(S_e,Psr),e(GF,$sr),e(GF,xV),e(xV,Isr),e(GF,qsr),e(de,Nsr),e(de,OF),e(OF,R_e),e(R_e,jsr),e(OF,Dsr),e(OF,kV),e(kV,Gsr),e(OF,Osr),e(de,Vsr),e(de,VF),e(VF,B_e),e(B_e,Xsr),e(VF,zsr),e(VF,SV),e(SV,Qsr),e(VF,Wsr),e(de,Hsr),e(de,XF),e(XF,P_e),e(P_e,Usr),e(XF,Jsr),e(XF,RV),e(RV,Ysr),e(XF,Ksr),e(de,Zsr),e(de,zF),e(zF,$_e),e($_e,elr),e(zF,olr),e(zF,BV),e(BV,rlr),e(zF,tlr),e(de,alr),e(de,QF),e(QF,I_e),e(I_e,nlr),e(QF,slr),e(QF,PV),e(PV,llr),e(QF,ilr),e(_o,dlr),e(_o,q_e),e(q_e,clr),e(_o,flr),g(uy,_o,null),b(c,rBe,u),b(c,Mc,u),e(Mc,WF),e(WF,N_e),g(by,N_e,null),e(Mc,mlr),e(Mc,j_e),e(j_e,glr),b(c,tBe,u),b(c,Mr,u),g(Fy,Mr,null),e(Mr,hlr),e(Mr,Ec),e(Ec,plr),e(Ec,$V),e($V,_lr),e(Ec,ulr),e(Ec,IV),e(IV,blr),e(Ec,Flr),e(Mr,vlr),e(Mr,vy),e(vy,Tlr),e(vy,D_e),e(D_e,Mlr),e(vy,Elr),e(Mr,Clr),e(Mr,_t),g(Ty,_t,null),e(_t,wlr),e(_t,G_e),e(G_e,Alr),e(_t,ylr),e(_t,Cc),e(Cc,Llr),e(Cc,O_e),e(O_e,xlr),e(Cc,klr),e(Cc,qV),e(qV,Slr),e(Cc,Rlr),e(_t,Blr),e(_t,V_e),e(V_e,Plr),e(_t,$lr),g(My,_t,null),e(Mr,Ilr),e(Mr,uo),g(Ey,uo,null),e(uo,qlr),e(uo,X_e),e(X_e,Nlr),e(uo,jlr),e(uo,Fn),e(Fn,Dlr),e(Fn,z_e),e(z_e,Glr),e(Fn,Olr),e(Fn,Q_e),e(Q_e,Vlr),e(Fn,Xlr),e(Fn,W_e),e(W_e,zlr),e(Fn,Qlr),e(uo,Wlr),e(uo,Cy),e(Cy,HF),e(HF,H_e),e(H_e,Hlr),e(HF,Ulr),e(HF,NV),e(NV,Jlr),e(HF,Ylr),e(Cy,Klr),e(Cy,UF),e(UF,U_e),e(U_e,Zlr),e(UF,eir),e(UF,jV),e(jV,oir),e(UF,rir),e(uo,tir),e(uo,J_e),e(J_e,air),e(uo,nir),g(wy,uo,null),b(c,aBe,u),b(c,wc,u),e(wc,JF),e(JF,Y_e),g(Ay,Y_e,null),e(wc,sir),e(wc,K_e),e(K_e,lir),b(c,nBe,u),b(c,Er,u),g(yy,Er,null),e(Er,iir),e(Er,Ac),e(Ac,dir),e(Ac,DV),e(DV,cir),e(Ac,fir),e(Ac,GV),e(GV,mir),e(Ac,gir),e(Er,hir),e(Er,Ly),e(Ly,pir),e(Ly,Z_e),e(Z_e,_ir),e(Ly,uir),e(Er,bir),e(Er,ut),g(xy,ut,null),e(ut,Fir),e(ut,eue),e(eue,vir),e(ut,Tir),e(ut,yc),e(yc,Mir),e(yc,oue),e(oue,Eir),e(yc,Cir),e(yc,OV),e(OV,wir),e(yc,Air),e(ut,yir),e(ut,rue),e(rue,Lir),e(ut,xir),g(ky,ut,null),e(Er,kir),e(Er,bo),g(Sy,bo,null),e(bo,Sir),e(bo,tue),e(tue,Rir),e(bo,Bir),e(bo,vn),e(vn,Pir),e(vn,aue),e(aue,$ir),e(vn,Iir),e(vn,nue),e(nue,qir),e(vn,Nir),e(vn,sue),e(sue,jir),e(vn,Dir),e(bo,Gir),e(bo,J),e(J,YF),e(YF,lue),e(lue,Oir),e(YF,Vir),e(YF,VV),e(VV,Xir),e(YF,zir),e(J,Qir),e(J,KF),e(KF,iue),e(iue,Wir),e(KF,Hir),e(KF,XV),e(XV,Uir),e(KF,Jir),e(J,Yir),e(J,ZF),e(ZF,due),e(due,Kir),e(ZF,Zir),e(ZF,zV),e(zV,edr),e(ZF,odr),e(J,rdr),e(J,ev),e(ev,cue),e(cue,tdr),e(ev,adr),e(ev,QV),e(QV,ndr),e(ev,sdr),e(J,ldr),e(J,ov),e(ov,fue),e(fue,idr),e(ov,ddr),e(ov,WV),e(WV,cdr),e(ov,fdr),e(J,mdr),e(J,rv),e(rv,mue),e(mue,gdr),e(rv,hdr),e(rv,HV),e(HV,pdr),e(rv,_dr),e(J,udr),e(J,tv),e(tv,gue),e(gue,bdr),e(tv,Fdr),e(tv,UV),e(UV,vdr),e(tv,Tdr),e(J,Mdr),e(J,av),e(av,hue),e(hue,Edr),e(av,Cdr),e(av,JV),e(JV,wdr),e(av,Adr),e(J,ydr),e(J,nv),e(nv,pue),e(pue,Ldr),e(nv,xdr),e(nv,YV),e(YV,kdr),e(nv,Sdr),e(J,Rdr),e(J,sv),e(sv,_ue),e(_ue,Bdr),e(sv,Pdr),e(sv,KV),e(KV,$dr),e(sv,Idr),e(J,qdr),e(J,lv),e(lv,uue),e(uue,Ndr),e(lv,jdr),e(lv,ZV),e(ZV,Ddr),e(lv,Gdr),e(J,Odr),e(J,iv),e(iv,bue),e(bue,Vdr),e(iv,Xdr),e(iv,eX),e(eX,zdr),e(iv,Qdr),e(J,Wdr),e(J,dv),e(dv,Fue),e(Fue,Hdr),e(dv,Udr),e(dv,oX),e(oX,Jdr),e(dv,Ydr),e(J,Kdr),e(J,cv),e(cv,vue),e(vue,Zdr),e(cv,ecr),e(cv,rX),e(rX,ocr),e(cv,rcr),e(J,tcr),e(J,fv),e(fv,Tue),e(Tue,acr),e(fv,ncr),e(fv,tX),e(tX,scr),e(fv,lcr),e(J,icr),e(J,mv),e(mv,Mue),e(Mue,dcr),e(mv,ccr),e(mv,aX),e(aX,fcr),e(mv,mcr),e(J,gcr),e(J,gv),e(gv,Eue),e(Eue,hcr),e(gv,pcr),e(gv,nX),e(nX,_cr),e(gv,ucr),e(J,bcr),e(J,hv),e(hv,Cue),e(Cue,Fcr),e(hv,vcr),e(hv,sX),e(sX,Tcr),e(hv,Mcr),e(J,Ecr),e(J,pv),e(pv,wue),e(wue,Ccr),e(pv,wcr),e(pv,lX),e(lX,Acr),e(pv,ycr),e(J,Lcr),e(J,_v),e(_v,Aue),e(Aue,xcr),e(_v,kcr),e(_v,iX),e(iX,Scr),e(_v,Rcr),e(bo,Bcr),e(bo,yue),e(yue,Pcr),e(bo,$cr),g(Ry,bo,null),b(c,sBe,u),b(c,Lc,u),e(Lc,uv),e(uv,Lue),g(By,Lue,null),e(Lc,Icr),e(Lc,xue),e(xue,qcr),b(c,lBe,u),b(c,Cr,u),g(Py,Cr,null),e(Cr,Ncr),e(Cr,xc),e(xc,jcr),e(xc,dX),e(dX,Dcr),e(xc,Gcr),e(xc,cX),e(cX,Ocr),e(xc,Vcr),e(Cr,Xcr),e(Cr,$y),e($y,zcr),e($y,kue),e(kue,Qcr),e($y,Wcr),e(Cr,Hcr),e(Cr,bt),g(Iy,bt,null),e(bt,Ucr),e(bt,Sue),e(Sue,Jcr),e(bt,Ycr),e(bt,kc),e(kc,Kcr),e(kc,Rue),e(Rue,Zcr),e(kc,efr),e(kc,fX),e(fX,ofr),e(kc,rfr),e(bt,tfr),e(bt,Bue),e(Bue,afr),e(bt,nfr),g(qy,bt,null),e(Cr,sfr),e(Cr,Fo),g(Ny,Fo,null),e(Fo,lfr),e(Fo,Pue),e(Pue,ifr),e(Fo,dfr),e(Fo,Tn),e(Tn,cfr),e(Tn,$ue),e($ue,ffr),e(Tn,mfr),e(Tn,Iue),e(Iue,gfr),e(Tn,hfr),e(Tn,que),e(que,pfr),e(Tn,_fr),e(Fo,ufr),e(Fo,ue),e(ue,bv),e(bv,Nue),e(Nue,bfr),e(bv,Ffr),e(bv,mX),e(mX,vfr),e(bv,Tfr),e(ue,Mfr),e(ue,Fv),e(Fv,jue),e(jue,Efr),e(Fv,Cfr),e(Fv,gX),e(gX,wfr),e(Fv,Afr),e(ue,yfr),e(ue,vv),e(vv,Due),e(Due,Lfr),e(vv,xfr),e(vv,hX),e(hX,kfr),e(vv,Sfr),e(ue,Rfr),e(ue,Tv),e(Tv,Gue),e(Gue,Bfr),e(Tv,Pfr),e(Tv,pX),e(pX,$fr),e(Tv,Ifr),e(ue,qfr),e(ue,Mv),e(Mv,Oue),e(Oue,Nfr),e(Mv,jfr),e(Mv,_X),e(_X,Dfr),e(Mv,Gfr),e(ue,Ofr),e(ue,Ev),e(Ev,Vue),e(Vue,Vfr),e(Ev,Xfr),e(Ev,uX),e(uX,zfr),e(Ev,Qfr),e(ue,Wfr),e(ue,Cv),e(Cv,Xue),e(Xue,Hfr),e(Cv,Ufr),e(Cv,bX),e(bX,Jfr),e(Cv,Yfr),e(ue,Kfr),e(ue,wv),e(wv,zue),e(zue,Zfr),e(wv,emr),e(wv,FX),e(FX,omr),e(wv,rmr),e(ue,tmr),e(ue,Av),e(Av,Que),e(Que,amr),e(Av,nmr),e(Av,vX),e(vX,smr),e(Av,lmr),e(ue,imr),e(ue,yv),e(yv,Wue),e(Wue,dmr),e(yv,cmr),e(yv,TX),e(TX,fmr),e(yv,mmr),e(Fo,gmr),e(Fo,Hue),e(Hue,hmr),e(Fo,pmr),g(jy,Fo,null),b(c,iBe,u),b(c,Sc,u),e(Sc,Lv),e(Lv,Uue),g(Dy,Uue,null),e(Sc,_mr),e(Sc,Jue),e(Jue,umr),b(c,dBe,u),b(c,wr,u),g(Gy,wr,null),e(wr,bmr),e(wr,Rc),e(Rc,Fmr),e(Rc,MX),e(MX,vmr),e(Rc,Tmr),e(Rc,EX),e(EX,Mmr),e(Rc,Emr),e(wr,Cmr),e(wr,Oy),e(Oy,wmr),e(Oy,Yue),e(Yue,Amr),e(Oy,ymr),e(wr,Lmr),e(wr,Ft),g(Vy,Ft,null),e(Ft,xmr),e(Ft,Kue),e(Kue,kmr),e(Ft,Smr),e(Ft,Bc),e(Bc,Rmr),e(Bc,Zue),e(Zue,Bmr),e(Bc,Pmr),e(Bc,CX),e(CX,$mr),e(Bc,Imr),e(Ft,qmr),e(Ft,e1e),e(e1e,Nmr),e(Ft,jmr),g(Xy,Ft,null),e(wr,Dmr),e(wr,vo),g(zy,vo,null),e(vo,Gmr),e(vo,o1e),e(o1e,Omr),e(vo,Vmr),e(vo,Mn),e(Mn,Xmr),e(Mn,r1e),e(r1e,zmr),e(Mn,Qmr),e(Mn,t1e),e(t1e,Wmr),e(Mn,Hmr),e(Mn,a1e),e(a1e,Umr),e(Mn,Jmr),e(vo,Ymr),e(vo,V),e(V,xv),e(xv,n1e),e(n1e,Kmr),e(xv,Zmr),e(xv,wX),e(wX,egr),e(xv,ogr),e(V,rgr),e(V,kv),e(kv,s1e),e(s1e,tgr),e(kv,agr),e(kv,AX),e(AX,ngr),e(kv,sgr),e(V,lgr),e(V,Sv),e(Sv,l1e),e(l1e,igr),e(Sv,dgr),e(Sv,yX),e(yX,cgr),e(Sv,fgr),e(V,mgr),e(V,Rv),e(Rv,i1e),e(i1e,ggr),e(Rv,hgr),e(Rv,LX),e(LX,pgr),e(Rv,_gr),e(V,ugr),e(V,Bv),e(Bv,d1e),e(d1e,bgr),e(Bv,Fgr),e(Bv,xX),e(xX,vgr),e(Bv,Tgr),e(V,Mgr),e(V,Pv),e(Pv,c1e),e(c1e,Egr),e(Pv,Cgr),e(Pv,kX),e(kX,wgr),e(Pv,Agr),e(V,ygr),e(V,$v),e($v,f1e),e(f1e,Lgr),e($v,xgr),e($v,SX),e(SX,kgr),e($v,Sgr),e(V,Rgr),e(V,Iv),e(Iv,m1e),e(m1e,Bgr),e(Iv,Pgr),e(Iv,RX),e(RX,$gr),e(Iv,Igr),e(V,qgr),e(V,qv),e(qv,g1e),e(g1e,Ngr),e(qv,jgr),e(qv,BX),e(BX,Dgr),e(qv,Ggr),e(V,Ogr),e(V,Nv),e(Nv,h1e),e(h1e,Vgr),e(Nv,Xgr),e(Nv,PX),e(PX,zgr),e(Nv,Qgr),e(V,Wgr),e(V,jv),e(jv,p1e),e(p1e,Hgr),e(jv,Ugr),e(jv,$X),e($X,Jgr),e(jv,Ygr),e(V,Kgr),e(V,Dv),e(Dv,_1e),e(_1e,Zgr),e(Dv,ehr),e(Dv,IX),e(IX,ohr),e(Dv,rhr),e(V,thr),e(V,Gv),e(Gv,u1e),e(u1e,ahr),e(Gv,nhr),e(Gv,qX),e(qX,shr),e(Gv,lhr),e(V,ihr),e(V,Ov),e(Ov,b1e),e(b1e,dhr),e(Ov,chr),e(Ov,NX),e(NX,fhr),e(Ov,mhr),e(V,ghr),e(V,Vv),e(Vv,F1e),e(F1e,hhr),e(Vv,phr),e(Vv,jX),e(jX,_hr),e(Vv,uhr),e(V,bhr),e(V,Xv),e(Xv,v1e),e(v1e,Fhr),e(Xv,vhr),e(Xv,DX),e(DX,Thr),e(Xv,Mhr),e(V,Ehr),e(V,zv),e(zv,T1e),e(T1e,Chr),e(zv,whr),e(zv,GX),e(GX,Ahr),e(zv,yhr),e(V,Lhr),e(V,Qv),e(Qv,M1e),e(M1e,xhr),e(Qv,khr),e(Qv,OX),e(OX,Shr),e(Qv,Rhr),e(V,Bhr),e(V,Wv),e(Wv,E1e),e(E1e,Phr),e(Wv,$hr),e(Wv,VX),e(VX,Ihr),e(Wv,qhr),e(V,Nhr),e(V,Hv),e(Hv,C1e),e(C1e,jhr),e(Hv,Dhr),e(Hv,XX),e(XX,Ghr),e(Hv,Ohr),e(V,Vhr),e(V,Uv),e(Uv,w1e),e(w1e,Xhr),e(Uv,zhr),e(Uv,zX),e(zX,Qhr),e(Uv,Whr),e(V,Hhr),e(V,Jv),e(Jv,A1e),e(A1e,Uhr),e(Jv,Jhr),e(Jv,QX),e(QX,Yhr),e(Jv,Khr),e(V,Zhr),e(V,Yv),e(Yv,y1e),e(y1e,epr),e(Yv,opr),e(Yv,WX),e(WX,rpr),e(Yv,tpr),e(V,apr),e(V,Kv),e(Kv,L1e),e(L1e,npr),e(Kv,spr),e(Kv,HX),e(HX,lpr),e(Kv,ipr),e(V,dpr),e(V,Zv),e(Zv,x1e),e(x1e,cpr),e(Zv,fpr),e(Zv,UX),e(UX,mpr),e(Zv,gpr),e(V,hpr),e(V,e6),e(e6,k1e),e(k1e,ppr),e(e6,_pr),e(e6,JX),e(JX,upr),e(e6,bpr),e(vo,Fpr),e(vo,S1e),e(S1e,vpr),e(vo,Tpr),g(Qy,vo,null),b(c,cBe,u),b(c,Pc,u),e(Pc,o6),e(o6,R1e),g(Wy,R1e,null),e(Pc,Mpr),e(Pc,B1e),e(B1e,Epr),b(c,fBe,u),b(c,Ar,u),g(Hy,Ar,null),e(Ar,Cpr),e(Ar,$c),e($c,wpr),e($c,YX),e(YX,Apr),e($c,ypr),e($c,KX),e(KX,Lpr),e($c,xpr),e(Ar,kpr),e(Ar,Uy),e(Uy,Spr),e(Uy,P1e),e(P1e,Rpr),e(Uy,Bpr),e(Ar,Ppr),e(Ar,vt),g(Jy,vt,null),e(vt,$pr),e(vt,$1e),e($1e,Ipr),e(vt,qpr),e(vt,Ic),e(Ic,Npr),e(Ic,I1e),e(I1e,jpr),e(Ic,Dpr),e(Ic,ZX),e(ZX,Gpr),e(Ic,Opr),e(vt,Vpr),e(vt,q1e),e(q1e,Xpr),e(vt,zpr),g(Yy,vt,null),e(Ar,Qpr),e(Ar,To),g(Ky,To,null),e(To,Wpr),e(To,N1e),e(N1e,Hpr),e(To,Upr),e(To,En),e(En,Jpr),e(En,j1e),e(j1e,Ypr),e(En,Kpr),e(En,D1e),e(D1e,Zpr),e(En,e_r),e(En,G1e),e(G1e,o_r),e(En,r_r),e(To,t_r),e(To,ae),e(ae,r6),e(r6,O1e),e(O1e,a_r),e(r6,n_r),e(r6,ez),e(ez,s_r),e(r6,l_r),e(ae,i_r),e(ae,t6),e(t6,V1e),e(V1e,d_r),e(t6,c_r),e(t6,oz),e(oz,f_r),e(t6,m_r),e(ae,g_r),e(ae,a6),e(a6,X1e),e(X1e,h_r),e(a6,p_r),e(a6,rz),e(rz,__r),e(a6,u_r),e(ae,b_r),e(ae,n6),e(n6,z1e),e(z1e,F_r),e(n6,v_r),e(n6,tz),e(tz,T_r),e(n6,M_r),e(ae,E_r),e(ae,s6),e(s6,Q1e),e(Q1e,C_r),e(s6,w_r),e(s6,az),e(az,A_r),e(s6,y_r),e(ae,L_r),e(ae,l6),e(l6,W1e),e(W1e,x_r),e(l6,k_r),e(l6,nz),e(nz,S_r),e(l6,R_r),e(ae,B_r),e(ae,i6),e(i6,H1e),e(H1e,P_r),e(i6,$_r),e(i6,sz),e(sz,I_r),e(i6,q_r),e(ae,N_r),e(ae,d6),e(d6,U1e),e(U1e,j_r),e(d6,D_r),e(d6,lz),e(lz,G_r),e(d6,O_r),e(ae,V_r),e(ae,c6),e(c6,J1e),e(J1e,X_r),e(c6,z_r),e(c6,iz),e(iz,Q_r),e(c6,W_r),e(ae,H_r),e(ae,f6),e(f6,Y1e),e(Y1e,U_r),e(f6,J_r),e(f6,dz),e(dz,Y_r),e(f6,K_r),e(ae,Z_r),e(ae,m6),e(m6,K1e),e(K1e,eur),e(m6,our),e(m6,cz),e(cz,rur),e(m6,tur),e(ae,aur),e(ae,g6),e(g6,Z1e),e(Z1e,nur),e(g6,sur),e(g6,fz),e(fz,lur),e(g6,iur),e(ae,dur),e(ae,h6),e(h6,e4e),e(e4e,cur),e(h6,fur),e(h6,mz),e(mz,mur),e(h6,gur),e(ae,hur),e(ae,p6),e(p6,o4e),e(o4e,pur),e(p6,_ur),e(p6,gz),e(gz,uur),e(p6,bur),e(ae,Fur),e(ae,_6),e(_6,r4e),e(r4e,vur),e(_6,Tur),e(_6,hz),e(hz,Mur),e(_6,Eur),e(ae,Cur),e(ae,u6),e(u6,t4e),e(t4e,wur),e(u6,Aur),e(u6,pz),e(pz,yur),e(u6,Lur),e(ae,xur),e(ae,b6),e(b6,a4e),e(a4e,kur),e(b6,Sur),e(b6,_z),e(_z,Rur),e(b6,Bur),e(To,Pur),e(To,n4e),e(n4e,$ur),e(To,Iur),g(Zy,To,null),b(c,mBe,u),b(c,qc,u),e(qc,F6),e(F6,s4e),g(eL,s4e,null),e(qc,qur),e(qc,l4e),e(l4e,Nur),b(c,gBe,u),b(c,yr,u),g(oL,yr,null),e(yr,jur),e(yr,Nc),e(Nc,Dur),e(Nc,uz),e(uz,Gur),e(Nc,Our),e(Nc,bz),e(bz,Vur),e(Nc,Xur),e(yr,zur),e(yr,rL),e(rL,Qur),e(rL,i4e),e(i4e,Wur),e(rL,Hur),e(yr,Uur),e(yr,Tt),g(tL,Tt,null),e(Tt,Jur),e(Tt,d4e),e(d4e,Yur),e(Tt,Kur),e(Tt,jc),e(jc,Zur),e(jc,c4e),e(c4e,e1r),e(jc,o1r),e(jc,Fz),e(Fz,r1r),e(jc,t1r),e(Tt,a1r),e(Tt,f4e),e(f4e,n1r),e(Tt,s1r),g(aL,Tt,null),e(yr,l1r),e(yr,Mo),g(nL,Mo,null),e(Mo,i1r),e(Mo,m4e),e(m4e,d1r),e(Mo,c1r),e(Mo,Cn),e(Cn,f1r),e(Cn,g4e),e(g4e,m1r),e(Cn,g1r),e(Cn,h4e),e(h4e,h1r),e(Cn,p1r),e(Cn,p4e),e(p4e,_1r),e(Cn,u1r),e(Mo,b1r),e(Mo,_4e),e(_4e,v6),e(v6,u4e),e(u4e,F1r),e(v6,v1r),e(v6,vz),e(vz,T1r),e(v6,M1r),e(Mo,E1r),e(Mo,b4e),e(b4e,C1r),e(Mo,w1r),g(sL,Mo,null),b(c,hBe,u),b(c,Dc,u),e(Dc,T6),e(T6,F4e),g(lL,F4e,null),e(Dc,A1r),e(Dc,v4e),e(v4e,y1r),b(c,pBe,u),b(c,Lr,u),g(iL,Lr,null),e(Lr,L1r),e(Lr,Gc),e(Gc,x1r),e(Gc,Tz),e(Tz,k1r),e(Gc,S1r),e(Gc,Mz),e(Mz,R1r),e(Gc,B1r),e(Lr,P1r),e(Lr,dL),e(dL,$1r),e(dL,T4e),e(T4e,I1r),e(dL,q1r),e(Lr,N1r),e(Lr,Mt),g(cL,Mt,null),e(Mt,j1r),e(Mt,M4e),e(M4e,D1r),e(Mt,G1r),e(Mt,Oc),e(Oc,O1r),e(Oc,E4e),e(E4e,V1r),e(Oc,X1r),e(Oc,Ez),e(Ez,z1r),e(Oc,Q1r),e(Mt,W1r),e(Mt,C4e),e(C4e,H1r),e(Mt,U1r),g(fL,Mt,null),e(Lr,J1r),e(Lr,Eo),g(mL,Eo,null),e(Eo,Y1r),e(Eo,w4e),e(w4e,K1r),e(Eo,Z1r),e(Eo,wn),e(wn,e4r),e(wn,A4e),e(A4e,o4r),e(wn,r4r),e(wn,y4e),e(y4e,t4r),e(wn,a4r),e(wn,L4e),e(L4e,n4r),e(wn,s4r),e(Eo,l4r),e(Eo,Y),e(Y,M6),e(M6,x4e),e(x4e,i4r),e(M6,d4r),e(M6,Cz),e(Cz,c4r),e(M6,f4r),e(Y,m4r),e(Y,E6),e(E6,k4e),e(k4e,g4r),e(E6,h4r),e(E6,wz),e(wz,p4r),e(E6,_4r),e(Y,u4r),e(Y,C6),e(C6,S4e),e(S4e,b4r),e(C6,F4r),e(C6,Az),e(Az,v4r),e(C6,T4r),e(Y,M4r),e(Y,w6),e(w6,R4e),e(R4e,E4r),e(w6,C4r),e(w6,yz),e(yz,w4r),e(w6,A4r),e(Y,y4r),e(Y,A6),e(A6,B4e),e(B4e,L4r),e(A6,x4r),e(A6,Lz),e(Lz,k4r),e(A6,S4r),e(Y,R4r),e(Y,y6),e(y6,P4e),e(P4e,B4r),e(y6,P4r),e(y6,xz),e(xz,$4r),e(y6,I4r),e(Y,q4r),e(Y,L6),e(L6,$4e),e($4e,N4r),e(L6,j4r),e(L6,kz),e(kz,D4r),e(L6,G4r),e(Y,O4r),e(Y,x6),e(x6,I4e),e(I4e,V4r),e(x6,X4r),e(x6,Sz),e(Sz,z4r),e(x6,Q4r),e(Y,W4r),e(Y,k6),e(k6,q4e),e(q4e,H4r),e(k6,U4r),e(k6,Rz),e(Rz,J4r),e(k6,Y4r),e(Y,K4r),e(Y,S6),e(S6,N4e),e(N4e,Z4r),e(S6,ebr),e(S6,Bz),e(Bz,obr),e(S6,rbr),e(Y,tbr),e(Y,R6),e(R6,j4e),e(j4e,abr),e(R6,nbr),e(R6,Pz),e(Pz,sbr),e(R6,lbr),e(Y,ibr),e(Y,B6),e(B6,D4e),e(D4e,dbr),e(B6,cbr),e(B6,$z),e($z,fbr),e(B6,mbr),e(Y,gbr),e(Y,P6),e(P6,G4e),e(G4e,hbr),e(P6,pbr),e(P6,Iz),e(Iz,_br),e(P6,ubr),e(Y,bbr),e(Y,$6),e($6,O4e),e(O4e,Fbr),e($6,vbr),e($6,qz),e(qz,Tbr),e($6,Mbr),e(Y,Ebr),e(Y,I6),e(I6,V4e),e(V4e,Cbr),e(I6,wbr),e(I6,Nz),e(Nz,Abr),e(I6,ybr),e(Y,Lbr),e(Y,q6),e(q6,X4e),e(X4e,xbr),e(q6,kbr),e(q6,jz),e(jz,Sbr),e(q6,Rbr),e(Y,Bbr),e(Y,N6),e(N6,z4e),e(z4e,Pbr),e(N6,$br),e(N6,Dz),e(Dz,Ibr),e(N6,qbr),e(Y,Nbr),e(Y,j6),e(j6,Q4e),e(Q4e,jbr),e(j6,Dbr),e(j6,Gz),e(Gz,Gbr),e(j6,Obr),e(Y,Vbr),e(Y,D6),e(D6,W4e),e(W4e,Xbr),e(D6,zbr),e(D6,Oz),e(Oz,Qbr),e(D6,Wbr),e(Y,Hbr),e(Y,G6),e(G6,H4e),e(H4e,Ubr),e(G6,Jbr),e(G6,Vz),e(Vz,Ybr),e(G6,Kbr),e(Eo,Zbr),e(Eo,U4e),e(U4e,e5r),e(Eo,o5r),g(gL,Eo,null),b(c,_Be,u),b(c,Vc,u),e(Vc,O6),e(O6,J4e),g(hL,J4e,null),e(Vc,r5r),e(Vc,Y4e),e(Y4e,t5r),b(c,uBe,u),b(c,xr,u),g(pL,xr,null),e(xr,a5r),e(xr,Xc),e(Xc,n5r),e(Xc,Xz),e(Xz,s5r),e(Xc,l5r),e(Xc,zz),e(zz,i5r),e(Xc,d5r),e(xr,c5r),e(xr,_L),e(_L,f5r),e(_L,K4e),e(K4e,m5r),e(_L,g5r),e(xr,h5r),e(xr,Et),g(uL,Et,null),e(Et,p5r),e(Et,Z4e),e(Z4e,_5r),e(Et,u5r),e(Et,zc),e(zc,b5r),e(zc,ebe),e(ebe,F5r),e(zc,v5r),e(zc,Qz),e(Qz,T5r),e(zc,M5r),e(Et,E5r),e(Et,obe),e(obe,C5r),e(Et,w5r),g(bL,Et,null),e(xr,A5r),e(xr,Co),g(FL,Co,null),e(Co,y5r),e(Co,rbe),e(rbe,L5r),e(Co,x5r),e(Co,An),e(An,k5r),e(An,tbe),e(tbe,S5r),e(An,R5r),e(An,abe),e(abe,B5r),e(An,P5r),e(An,nbe),e(nbe,$5r),e(An,I5r),e(Co,q5r),e(Co,K),e(K,V6),e(V6,sbe),e(sbe,N5r),e(V6,j5r),e(V6,Wz),e(Wz,D5r),e(V6,G5r),e(K,O5r),e(K,X6),e(X6,lbe),e(lbe,V5r),e(X6,X5r),e(X6,Hz),e(Hz,z5r),e(X6,Q5r),e(K,W5r),e(K,z6),e(z6,ibe),e(ibe,H5r),e(z6,U5r),e(z6,Uz),e(Uz,J5r),e(z6,Y5r),e(K,K5r),e(K,Q6),e(Q6,dbe),e(dbe,Z5r),e(Q6,e3r),e(Q6,Jz),e(Jz,o3r),e(Q6,r3r),e(K,t3r),e(K,W6),e(W6,cbe),e(cbe,a3r),e(W6,n3r),e(W6,Yz),e(Yz,s3r),e(W6,l3r),e(K,i3r),e(K,H6),e(H6,fbe),e(fbe,d3r),e(H6,c3r),e(H6,Kz),e(Kz,f3r),e(H6,m3r),e(K,g3r),e(K,U6),e(U6,mbe),e(mbe,h3r),e(U6,p3r),e(U6,Zz),e(Zz,_3r),e(U6,u3r),e(K,b3r),e(K,J6),e(J6,gbe),e(gbe,F3r),e(J6,v3r),e(J6,eQ),e(eQ,T3r),e(J6,M3r),e(K,E3r),e(K,Y6),e(Y6,hbe),e(hbe,C3r),e(Y6,w3r),e(Y6,oQ),e(oQ,A3r),e(Y6,y3r),e(K,L3r),e(K,K6),e(K6,pbe),e(pbe,x3r),e(K6,k3r),e(K6,rQ),e(rQ,S3r),e(K6,R3r),e(K,B3r),e(K,Z6),e(Z6,_be),e(_be,P3r),e(Z6,$3r),e(Z6,tQ),e(tQ,I3r),e(Z6,q3r),e(K,N3r),e(K,eT),e(eT,ube),e(ube,j3r),e(eT,D3r),e(eT,aQ),e(aQ,G3r),e(eT,O3r),e(K,V3r),e(K,oT),e(oT,bbe),e(bbe,X3r),e(oT,z3r),e(oT,nQ),e(nQ,Q3r),e(oT,W3r),e(K,H3r),e(K,rT),e(rT,Fbe),e(Fbe,U3r),e(rT,J3r),e(rT,sQ),e(sQ,Y3r),e(rT,K3r),e(K,Z3r),e(K,tT),e(tT,vbe),e(vbe,e2r),e(tT,o2r),e(tT,lQ),e(lQ,r2r),e(tT,t2r),e(K,a2r),e(K,aT),e(aT,Tbe),e(Tbe,n2r),e(aT,s2r),e(aT,iQ),e(iQ,l2r),e(aT,i2r),e(K,d2r),e(K,nT),e(nT,Mbe),e(Mbe,c2r),e(nT,f2r),e(nT,dQ),e(dQ,m2r),e(nT,g2r),e(K,h2r),e(K,sT),e(sT,Ebe),e(Ebe,p2r),e(sT,_2r),e(sT,cQ),e(cQ,u2r),e(sT,b2r),e(K,F2r),e(K,lT),e(lT,Cbe),e(Cbe,v2r),e(lT,T2r),e(lT,fQ),e(fQ,M2r),e(lT,E2r),e(K,C2r),e(K,iT),e(iT,wbe),e(wbe,w2r),e(iT,A2r),e(iT,mQ),e(mQ,y2r),e(iT,L2r),e(Co,x2r),e(Co,Abe),e(Abe,k2r),e(Co,S2r),g(vL,Co,null),b(c,bBe,u),b(c,Qc,u),e(Qc,dT),e(dT,ybe),g(TL,ybe,null),e(Qc,R2r),e(Qc,Lbe),e(Lbe,B2r),b(c,FBe,u),b(c,kr,u),g(ML,kr,null),e(kr,P2r),e(kr,Wc),e(Wc,$2r),e(Wc,gQ),e(gQ,I2r),e(Wc,q2r),e(Wc,hQ),e(hQ,N2r),e(Wc,j2r),e(kr,D2r),e(kr,EL),e(EL,G2r),e(EL,xbe),e(xbe,O2r),e(EL,V2r),e(kr,X2r),e(kr,Ct),g(CL,Ct,null),e(Ct,z2r),e(Ct,kbe),e(kbe,Q2r),e(Ct,W2r),e(Ct,Hc),e(Hc,H2r),e(Hc,Sbe),e(Sbe,U2r),e(Hc,J2r),e(Hc,pQ),e(pQ,Y2r),e(Hc,K2r),e(Ct,Z2r),e(Ct,Rbe),e(Rbe,eFr),e(Ct,oFr),g(wL,Ct,null),e(kr,rFr),e(kr,wo),g(AL,wo,null),e(wo,tFr),e(wo,Bbe),e(Bbe,aFr),e(wo,nFr),e(wo,yn),e(yn,sFr),e(yn,Pbe),e(Pbe,lFr),e(yn,iFr),e(yn,$be),e($be,dFr),e(yn,cFr),e(yn,Ibe),e(Ibe,fFr),e(yn,mFr),e(wo,gFr),e(wo,qbe),e(qbe,cT),e(cT,Nbe),e(Nbe,hFr),e(cT,pFr),e(cT,_Q),e(_Q,_Fr),e(cT,uFr),e(wo,bFr),e(wo,jbe),e(jbe,FFr),e(wo,vFr),g(yL,wo,null),b(c,vBe,u),b(c,Uc,u),e(Uc,fT),e(fT,Dbe),g(LL,Dbe,null),e(Uc,TFr),e(Uc,Gbe),e(Gbe,MFr),b(c,TBe,u),b(c,Sr,u),g(xL,Sr,null),e(Sr,EFr),e(Sr,Jc),e(Jc,CFr),e(Jc,uQ),e(uQ,wFr),e(Jc,AFr),e(Jc,bQ),e(bQ,yFr),e(Jc,LFr),e(Sr,xFr),e(Sr,kL),e(kL,kFr),e(kL,Obe),e(Obe,SFr),e(kL,RFr),e(Sr,BFr),e(Sr,wt),g(SL,wt,null),e(wt,PFr),e(wt,Vbe),e(Vbe,$Fr),e(wt,IFr),e(wt,Yc),e(Yc,qFr),e(Yc,Xbe),e(Xbe,NFr),e(Yc,jFr),e(Yc,FQ),e(FQ,DFr),e(Yc,GFr),e(wt,OFr),e(wt,zbe),e(zbe,VFr),e(wt,XFr),g(RL,wt,null),e(Sr,zFr),e(Sr,Ao),g(BL,Ao,null),e(Ao,QFr),e(Ao,Qbe),e(Qbe,WFr),e(Ao,HFr),e(Ao,Ln),e(Ln,UFr),e(Ln,Wbe),e(Wbe,JFr),e(Ln,YFr),e(Ln,Hbe),e(Hbe,KFr),e(Ln,ZFr),e(Ln,Ube),e(Ube,evr),e(Ln,ovr),e(Ao,rvr),e(Ao,Jbe),e(Jbe,mT),e(mT,Ybe),e(Ybe,tvr),e(mT,avr),e(mT,vQ),e(vQ,nvr),e(mT,svr),e(Ao,lvr),e(Ao,Kbe),e(Kbe,ivr),e(Ao,dvr),g(PL,Ao,null),b(c,MBe,u),b(c,Kc,u),e(Kc,gT),e(gT,Zbe),g($L,Zbe,null),e(Kc,cvr),e(Kc,e5e),e(e5e,fvr),b(c,EBe,u),b(c,Rr,u),g(IL,Rr,null),e(Rr,mvr),e(Rr,Zc),e(Zc,gvr),e(Zc,TQ),e(TQ,hvr),e(Zc,pvr),e(Zc,MQ),e(MQ,_vr),e(Zc,uvr),e(Rr,bvr),e(Rr,qL),e(qL,Fvr),e(qL,o5e),e(o5e,vvr),e(qL,Tvr),e(Rr,Mvr),e(Rr,At),g(NL,At,null),e(At,Evr),e(At,r5e),e(r5e,Cvr),e(At,wvr),e(At,ef),e(ef,Avr),e(ef,t5e),e(t5e,yvr),e(ef,Lvr),e(ef,EQ),e(EQ,xvr),e(ef,kvr),e(At,Svr),e(At,a5e),e(a5e,Rvr),e(At,Bvr),g(jL,At,null),e(Rr,Pvr),e(Rr,yo),g(DL,yo,null),e(yo,$vr),e(yo,n5e),e(n5e,Ivr),e(yo,qvr),e(yo,xn),e(xn,Nvr),e(xn,s5e),e(s5e,jvr),e(xn,Dvr),e(xn,l5e),e(l5e,Gvr),e(xn,Ovr),e(xn,i5e),e(i5e,Vvr),e(xn,Xvr),e(yo,zvr),e(yo,z),e(z,hT),e(hT,d5e),e(d5e,Qvr),e(hT,Wvr),e(hT,CQ),e(CQ,Hvr),e(hT,Uvr),e(z,Jvr),e(z,pT),e(pT,c5e),e(c5e,Yvr),e(pT,Kvr),e(pT,wQ),e(wQ,Zvr),e(pT,e6r),e(z,o6r),e(z,_T),e(_T,f5e),e(f5e,r6r),e(_T,t6r),e(_T,AQ),e(AQ,a6r),e(_T,n6r),e(z,s6r),e(z,uT),e(uT,m5e),e(m5e,l6r),e(uT,i6r),e(uT,yQ),e(yQ,d6r),e(uT,c6r),e(z,f6r),e(z,bT),e(bT,g5e),e(g5e,m6r),e(bT,g6r),e(bT,LQ),e(LQ,h6r),e(bT,p6r),e(z,_6r),e(z,FT),e(FT,h5e),e(h5e,u6r),e(FT,b6r),e(FT,xQ),e(xQ,F6r),e(FT,v6r),e(z,T6r),e(z,vT),e(vT,p5e),e(p5e,M6r),e(vT,E6r),e(vT,kQ),e(kQ,C6r),e(vT,w6r),e(z,A6r),e(z,TT),e(TT,_5e),e(_5e,y6r),e(TT,L6r),e(TT,SQ),e(SQ,x6r),e(TT,k6r),e(z,S6r),e(z,MT),e(MT,u5e),e(u5e,R6r),e(MT,B6r),e(MT,RQ),e(RQ,P6r),e(MT,$6r),e(z,I6r),e(z,ET),e(ET,b5e),e(b5e,q6r),e(ET,N6r),e(ET,BQ),e(BQ,j6r),e(ET,D6r),e(z,G6r),e(z,CT),e(CT,F5e),e(F5e,O6r),e(CT,V6r),e(CT,PQ),e(PQ,X6r),e(CT,z6r),e(z,Q6r),e(z,wT),e(wT,v5e),e(v5e,W6r),e(wT,H6r),e(wT,$Q),e($Q,U6r),e(wT,J6r),e(z,Y6r),e(z,AT),e(AT,T5e),e(T5e,K6r),e(AT,Z6r),e(AT,IQ),e(IQ,eTr),e(AT,oTr),e(z,rTr),e(z,yT),e(yT,M5e),e(M5e,tTr),e(yT,aTr),e(yT,qQ),e(qQ,nTr),e(yT,sTr),e(z,lTr),e(z,LT),e(LT,E5e),e(E5e,iTr),e(LT,dTr),e(LT,NQ),e(NQ,cTr),e(LT,fTr),e(z,mTr),e(z,xT),e(xT,C5e),e(C5e,gTr),e(xT,hTr),e(xT,jQ),e(jQ,pTr),e(xT,_Tr),e(z,uTr),e(z,kT),e(kT,w5e),e(w5e,bTr),e(kT,FTr),e(kT,DQ),e(DQ,vTr),e(kT,TTr),e(z,MTr),e(z,ST),e(ST,A5e),e(A5e,ETr),e(ST,CTr),e(ST,GQ),e(GQ,wTr),e(ST,ATr),e(z,yTr),e(z,RT),e(RT,y5e),e(y5e,LTr),e(RT,xTr),e(RT,OQ),e(OQ,kTr),e(RT,STr),e(z,RTr),e(z,BT),e(BT,L5e),e(L5e,BTr),e(BT,PTr),e(BT,VQ),e(VQ,$Tr),e(BT,ITr),e(z,qTr),e(z,PT),e(PT,x5e),e(x5e,NTr),e(PT,jTr),e(PT,XQ),e(XQ,DTr),e(PT,GTr),e(z,OTr),e(z,$T),e($T,k5e),e(k5e,VTr),e($T,XTr),e($T,zQ),e(zQ,zTr),e($T,QTr),e(z,WTr),e(z,IT),e(IT,S5e),e(S5e,HTr),e(IT,UTr),e(IT,QQ),e(QQ,JTr),e(IT,YTr),e(z,KTr),e(z,qT),e(qT,R5e),e(R5e,ZTr),e(qT,eMr),e(qT,WQ),e(WQ,oMr),e(qT,rMr),e(z,tMr),e(z,NT),e(NT,B5e),e(B5e,aMr),e(NT,nMr),e(NT,HQ),e(HQ,sMr),e(NT,lMr),e(yo,iMr),e(yo,P5e),e(P5e,dMr),e(yo,cMr),g(GL,yo,null),b(c,CBe,u),b(c,of,u),e(of,jT),e(jT,$5e),g(OL,$5e,null),e(of,fMr),e(of,I5e),e(I5e,mMr),b(c,wBe,u),b(c,Br,u),g(VL,Br,null),e(Br,gMr),e(Br,rf),e(rf,hMr),e(rf,UQ),e(UQ,pMr),e(rf,_Mr),e(rf,JQ),e(JQ,uMr),e(rf,bMr),e(Br,FMr),e(Br,XL),e(XL,vMr),e(XL,q5e),e(q5e,TMr),e(XL,MMr),e(Br,EMr),e(Br,yt),g(zL,yt,null),e(yt,CMr),e(yt,N5e),e(N5e,wMr),e(yt,AMr),e(yt,tf),e(tf,yMr),e(tf,j5e),e(j5e,LMr),e(tf,xMr),e(tf,YQ),e(YQ,kMr),e(tf,SMr),e(yt,RMr),e(yt,D5e),e(D5e,BMr),e(yt,PMr),g(QL,yt,null),e(Br,$Mr),e(Br,Lo),g(WL,Lo,null),e(Lo,IMr),e(Lo,G5e),e(G5e,qMr),e(Lo,NMr),e(Lo,kn),e(kn,jMr),e(kn,O5e),e(O5e,DMr),e(kn,GMr),e(kn,V5e),e(V5e,OMr),e(kn,VMr),e(kn,X5e),e(X5e,XMr),e(kn,zMr),e(Lo,QMr),e(Lo,ca),e(ca,DT),e(DT,z5e),e(z5e,WMr),e(DT,HMr),e(DT,KQ),e(KQ,UMr),e(DT,JMr),e(ca,YMr),e(ca,GT),e(GT,Q5e),e(Q5e,KMr),e(GT,ZMr),e(GT,ZQ),e(ZQ,eEr),e(GT,oEr),e(ca,rEr),e(ca,OT),e(OT,W5e),e(W5e,tEr),e(OT,aEr),e(OT,eW),e(eW,nEr),e(OT,sEr),e(ca,lEr),e(ca,VT),e(VT,H5e),e(H5e,iEr),e(VT,dEr),e(VT,oW),e(oW,cEr),e(VT,fEr),e(ca,mEr),e(ca,XT),e(XT,U5e),e(U5e,gEr),e(XT,hEr),e(XT,rW),e(rW,pEr),e(XT,_Er),e(Lo,uEr),e(Lo,J5e),e(J5e,bEr),e(Lo,FEr),g(HL,Lo,null),b(c,ABe,u),b(c,af,u),e(af,zT),e(zT,Y5e),g(UL,Y5e,null),e(af,vEr),e(af,K5e),e(K5e,TEr),b(c,yBe,u),b(c,Pr,u),g(JL,Pr,null),e(Pr,MEr),e(Pr,nf),e(nf,EEr),e(nf,tW),e(tW,CEr),e(nf,wEr),e(nf,aW),e(aW,AEr),e(nf,yEr),e(Pr,LEr),e(Pr,YL),e(YL,xEr),e(YL,Z5e),e(Z5e,kEr),e(YL,SEr),e(Pr,REr),e(Pr,Lt),g(KL,Lt,null),e(Lt,BEr),e(Lt,e3e),e(e3e,PEr),e(Lt,$Er),e(Lt,sf),e(sf,IEr),e(sf,o3e),e(o3e,qEr),e(sf,NEr),e(sf,nW),e(nW,jEr),e(sf,DEr),e(Lt,GEr),e(Lt,r3e),e(r3e,OEr),e(Lt,VEr),g(ZL,Lt,null),e(Pr,XEr),e(Pr,xo),g(e8,xo,null),e(xo,zEr),e(xo,t3e),e(t3e,QEr),e(xo,WEr),e(xo,Sn),e(Sn,HEr),e(Sn,a3e),e(a3e,UEr),e(Sn,JEr),e(Sn,n3e),e(n3e,YEr),e(Sn,KEr),e(Sn,s3e),e(s3e,ZEr),e(Sn,eCr),e(xo,oCr),e(xo,fe),e(fe,QT),e(QT,l3e),e(l3e,rCr),e(QT,tCr),e(QT,sW),e(sW,aCr),e(QT,nCr),e(fe,sCr),e(fe,WT),e(WT,i3e),e(i3e,lCr),e(WT,iCr),e(WT,lW),e(lW,dCr),e(WT,cCr),e(fe,fCr),e(fe,HT),e(HT,d3e),e(d3e,mCr),e(HT,gCr),e(HT,iW),e(iW,hCr),e(HT,pCr),e(fe,_Cr),e(fe,UT),e(UT,c3e),e(c3e,uCr),e(UT,bCr),e(UT,dW),e(dW,FCr),e(UT,vCr),e(fe,TCr),e(fe,JT),e(JT,f3e),e(f3e,MCr),e(JT,ECr),e(JT,cW),e(cW,CCr),e(JT,wCr),e(fe,ACr),e(fe,YT),e(YT,m3e),e(m3e,yCr),e(YT,LCr),e(YT,fW),e(fW,xCr),e(YT,kCr),e(fe,SCr),e(fe,KT),e(KT,g3e),e(g3e,RCr),e(KT,BCr),e(KT,mW),e(mW,PCr),e(KT,$Cr),e(fe,ICr),e(fe,ZT),e(ZT,h3e),e(h3e,qCr),e(ZT,NCr),e(ZT,gW),e(gW,jCr),e(ZT,DCr),e(fe,GCr),e(fe,eM),e(eM,p3e),e(p3e,OCr),e(eM,VCr),e(eM,hW),e(hW,XCr),e(eM,zCr),e(fe,QCr),e(fe,oM),e(oM,_3e),e(_3e,WCr),e(oM,HCr),e(oM,pW),e(pW,UCr),e(oM,JCr),e(fe,YCr),e(fe,rM),e(rM,u3e),e(u3e,KCr),e(rM,ZCr),e(rM,_W),e(_W,ewr),e(rM,owr),e(fe,rwr),e(fe,tM),e(tM,b3e),e(b3e,twr),e(tM,awr),e(tM,uW),e(uW,nwr),e(tM,swr),e(xo,lwr),e(xo,F3e),e(F3e,iwr),e(xo,dwr),g(o8,xo,null),b(c,LBe,u),b(c,lf,u),e(lf,aM),e(aM,v3e),g(r8,v3e,null),e(lf,cwr),e(lf,T3e),e(T3e,fwr),b(c,xBe,u),b(c,$r,u),g(t8,$r,null),e($r,mwr),e($r,df),e(df,gwr),e(df,bW),e(bW,hwr),e(df,pwr),e(df,FW),e(FW,_wr),e(df,uwr),e($r,bwr),e($r,a8),e(a8,Fwr),e(a8,M3e),e(M3e,vwr),e(a8,Twr),e($r,Mwr),e($r,xt),g(n8,xt,null),e(xt,Ewr),e(xt,E3e),e(E3e,Cwr),e(xt,wwr),e(xt,cf),e(cf,Awr),e(cf,C3e),e(C3e,ywr),e(cf,Lwr),e(cf,vW),e(vW,xwr),e(cf,kwr),e(xt,Swr),e(xt,w3e),e(w3e,Rwr),e(xt,Bwr),g(s8,xt,null),e($r,Pwr),e($r,ko),g(l8,ko,null),e(ko,$wr),e(ko,A3e),e(A3e,Iwr),e(ko,qwr),e(ko,Rn),e(Rn,Nwr),e(Rn,y3e),e(y3e,jwr),e(Rn,Dwr),e(Rn,L3e),e(L3e,Gwr),e(Rn,Owr),e(Rn,x3e),e(x3e,Vwr),e(Rn,Xwr),e(ko,zwr),e(ko,be),e(be,nM),e(nM,k3e),e(k3e,Qwr),e(nM,Wwr),e(nM,TW),e(TW,Hwr),e(nM,Uwr),e(be,Jwr),e(be,sM),e(sM,S3e),e(S3e,Ywr),e(sM,Kwr),e(sM,MW),e(MW,Zwr),e(sM,eAr),e(be,oAr),e(be,lM),e(lM,R3e),e(R3e,rAr),e(lM,tAr),e(lM,EW),e(EW,aAr),e(lM,nAr),e(be,sAr),e(be,iM),e(iM,B3e),e(B3e,lAr),e(iM,iAr),e(iM,CW),e(CW,dAr),e(iM,cAr),e(be,fAr),e(be,dM),e(dM,P3e),e(P3e,mAr),e(dM,gAr),e(dM,wW),e(wW,hAr),e(dM,pAr),e(be,_Ar),e(be,cM),e(cM,$3e),e($3e,uAr),e(cM,bAr),e(cM,AW),e(AW,FAr),e(cM,vAr),e(be,TAr),e(be,fM),e(fM,I3e),e(I3e,MAr),e(fM,EAr),e(fM,yW),e(yW,CAr),e(fM,wAr),e(be,AAr),e(be,mM),e(mM,q3e),e(q3e,yAr),e(mM,LAr),e(mM,LW),e(LW,xAr),e(mM,kAr),e(be,SAr),e(be,gM),e(gM,N3e),e(N3e,RAr),e(gM,BAr),e(gM,xW),e(xW,PAr),e(gM,$Ar),e(be,IAr),e(be,hM),e(hM,j3e),e(j3e,qAr),e(hM,NAr),e(hM,kW),e(kW,jAr),e(hM,DAr),e(ko,GAr),e(ko,D3e),e(D3e,OAr),e(ko,VAr),g(i8,ko,null),b(c,kBe,u),b(c,ff,u),e(ff,pM),e(pM,G3e),g(d8,G3e,null),e(ff,XAr),e(ff,O3e),e(O3e,zAr),b(c,SBe,u),b(c,Ir,u),g(c8,Ir,null),e(Ir,QAr),e(Ir,mf),e(mf,WAr),e(mf,SW),e(SW,HAr),e(mf,UAr),e(mf,RW),e(RW,JAr),e(mf,YAr),e(Ir,KAr),e(Ir,f8),e(f8,ZAr),e(f8,V3e),e(V3e,e0r),e(f8,o0r),e(Ir,r0r),e(Ir,kt),g(m8,kt,null),e(kt,t0r),e(kt,X3e),e(X3e,a0r),e(kt,n0r),e(kt,gf),e(gf,s0r),e(gf,z3e),e(z3e,l0r),e(gf,i0r),e(gf,BW),e(BW,d0r),e(gf,c0r),e(kt,f0r),e(kt,Q3e),e(Q3e,m0r),e(kt,g0r),g(g8,kt,null),e(Ir,h0r),e(Ir,So),g(h8,So,null),e(So,p0r),e(So,W3e),e(W3e,_0r),e(So,u0r),e(So,Bn),e(Bn,b0r),e(Bn,H3e),e(H3e,F0r),e(Bn,v0r),e(Bn,U3e),e(U3e,T0r),e(Bn,M0r),e(Bn,J3e),e(J3e,E0r),e(Bn,C0r),e(So,w0r),e(So,Ee),e(Ee,_M),e(_M,Y3e),e(Y3e,A0r),e(_M,y0r),e(_M,PW),e(PW,L0r),e(_M,x0r),e(Ee,k0r),e(Ee,uM),e(uM,K3e),e(K3e,S0r),e(uM,R0r),e(uM,$W),e($W,B0r),e(uM,P0r),e(Ee,$0r),e(Ee,bM),e(bM,Z3e),e(Z3e,I0r),e(bM,q0r),e(bM,IW),e(IW,N0r),e(bM,j0r),e(Ee,D0r),e(Ee,FM),e(FM,e2e),e(e2e,G0r),e(FM,O0r),e(FM,qW),e(qW,V0r),e(FM,X0r),e(Ee,z0r),e(Ee,vM),e(vM,o2e),e(o2e,Q0r),e(vM,W0r),e(vM,NW),e(NW,H0r),e(vM,U0r),e(Ee,J0r),e(Ee,TM),e(TM,r2e),e(r2e,Y0r),e(TM,K0r),e(TM,jW),e(jW,Z0r),e(TM,eyr),e(Ee,oyr),e(Ee,MM),e(MM,t2e),e(t2e,ryr),e(MM,tyr),e(MM,DW),e(DW,ayr),e(MM,nyr),e(Ee,syr),e(Ee,EM),e(EM,a2e),e(a2e,lyr),e(EM,iyr),e(EM,GW),e(GW,dyr),e(EM,cyr),e(Ee,fyr),e(Ee,CM),e(CM,n2e),e(n2e,myr),e(CM,gyr),e(CM,OW),e(OW,hyr),e(CM,pyr),e(So,_yr),e(So,s2e),e(s2e,uyr),e(So,byr),g(p8,So,null),b(c,RBe,u),b(c,hf,u),e(hf,wM),e(wM,l2e),g(_8,l2e,null),e(hf,Fyr),e(hf,i2e),e(i2e,vyr),b(c,BBe,u),b(c,qr,u),g(u8,qr,null),e(qr,Tyr),e(qr,pf),e(pf,Myr),e(pf,VW),e(VW,Eyr),e(pf,Cyr),e(pf,XW),e(XW,wyr),e(pf,Ayr),e(qr,yyr),e(qr,b8),e(b8,Lyr),e(b8,d2e),e(d2e,xyr),e(b8,kyr),e(qr,Syr),e(qr,St),g(F8,St,null),e(St,Ryr),e(St,c2e),e(c2e,Byr),e(St,Pyr),e(St,_f),e(_f,$yr),e(_f,f2e),e(f2e,Iyr),e(_f,qyr),e(_f,zW),e(zW,Nyr),e(_f,jyr),e(St,Dyr),e(St,m2e),e(m2e,Gyr),e(St,Oyr),g(v8,St,null),e(qr,Vyr),e(qr,Ro),g(T8,Ro,null),e(Ro,Xyr),e(Ro,g2e),e(g2e,zyr),e(Ro,Qyr),e(Ro,Pn),e(Pn,Wyr),e(Pn,h2e),e(h2e,Hyr),e(Pn,Uyr),e(Pn,p2e),e(p2e,Jyr),e(Pn,Yyr),e(Pn,_2e),e(_2e,Kyr),e(Pn,Zyr),e(Ro,eLr),e(Ro,Fe),e(Fe,AM),e(AM,u2e),e(u2e,oLr),e(AM,rLr),e(AM,QW),e(QW,tLr),e(AM,aLr),e(Fe,nLr),e(Fe,yM),e(yM,b2e),e(b2e,sLr),e(yM,lLr),e(yM,WW),e(WW,iLr),e(yM,dLr),e(Fe,cLr),e(Fe,LM),e(LM,F2e),e(F2e,fLr),e(LM,mLr),e(LM,HW),e(HW,gLr),e(LM,hLr),e(Fe,pLr),e(Fe,xM),e(xM,v2e),e(v2e,_Lr),e(xM,uLr),e(xM,UW),e(UW,bLr),e(xM,FLr),e(Fe,vLr),e(Fe,kM),e(kM,T2e),e(T2e,TLr),e(kM,MLr),e(kM,JW),e(JW,ELr),e(kM,CLr),e(Fe,wLr),e(Fe,SM),e(SM,M2e),e(M2e,ALr),e(SM,yLr),e(SM,YW),e(YW,LLr),e(SM,xLr),e(Fe,kLr),e(Fe,RM),e(RM,E2e),e(E2e,SLr),e(RM,RLr),e(RM,KW),e(KW,BLr),e(RM,PLr),e(Fe,$Lr),e(Fe,BM),e(BM,C2e),e(C2e,ILr),e(BM,qLr),e(BM,ZW),e(ZW,NLr),e(BM,jLr),e(Fe,DLr),e(Fe,PM),e(PM,w2e),e(w2e,GLr),e(PM,OLr),e(PM,eH),e(eH,VLr),e(PM,XLr),e(Fe,zLr),e(Fe,$M),e($M,A2e),e(A2e,QLr),e($M,WLr),e($M,oH),e(oH,HLr),e($M,ULr),e(Ro,JLr),e(Ro,y2e),e(y2e,YLr),e(Ro,KLr),g(M8,Ro,null),b(c,PBe,u),b(c,uf,u),e(uf,IM),e(IM,L2e),g(E8,L2e,null),e(uf,ZLr),e(uf,x2e),e(x2e,e8r),b(c,$Be,u),b(c,Nr,u),g(C8,Nr,null),e(Nr,o8r),e(Nr,bf),e(bf,r8r),e(bf,rH),e(rH,t8r),e(bf,a8r),e(bf,tH),e(tH,n8r),e(bf,s8r),e(Nr,l8r),e(Nr,w8),e(w8,i8r),e(w8,k2e),e(k2e,d8r),e(w8,c8r),e(Nr,f8r),e(Nr,Rt),g(A8,Rt,null),e(Rt,m8r),e(Rt,S2e),e(S2e,g8r),e(Rt,h8r),e(Rt,Ff),e(Ff,p8r),e(Ff,R2e),e(R2e,_8r),e(Ff,u8r),e(Ff,aH),e(aH,b8r),e(Ff,F8r),e(Rt,v8r),e(Rt,B2e),e(B2e,T8r),e(Rt,M8r),g(y8,Rt,null),e(Nr,E8r),e(Nr,Bo),g(L8,Bo,null),e(Bo,C8r),e(Bo,P2e),e(P2e,w8r),e(Bo,A8r),e(Bo,$n),e($n,y8r),e($n,$2e),e($2e,L8r),e($n,x8r),e($n,I2e),e(I2e,k8r),e($n,S8r),e($n,q2e),e(q2e,R8r),e($n,B8r),e(Bo,P8r),e(Bo,ve),e(ve,qM),e(qM,N2e),e(N2e,$8r),e(qM,I8r),e(qM,nH),e(nH,q8r),e(qM,N8r),e(ve,j8r),e(ve,NM),e(NM,j2e),e(j2e,D8r),e(NM,G8r),e(NM,sH),e(sH,O8r),e(NM,V8r),e(ve,X8r),e(ve,jM),e(jM,D2e),e(D2e,z8r),e(jM,Q8r),e(jM,lH),e(lH,W8r),e(jM,H8r),e(ve,U8r),e(ve,DM),e(DM,G2e),e(G2e,J8r),e(DM,Y8r),e(DM,iH),e(iH,K8r),e(DM,Z8r),e(ve,e7r),e(ve,GM),e(GM,O2e),e(O2e,o7r),e(GM,r7r),e(GM,dH),e(dH,t7r),e(GM,a7r),e(ve,n7r),e(ve,OM),e(OM,V2e),e(V2e,s7r),e(OM,l7r),e(OM,cH),e(cH,i7r),e(OM,d7r),e(ve,c7r),e(ve,VM),e(VM,X2e),e(X2e,f7r),e(VM,m7r),e(VM,fH),e(fH,g7r),e(VM,h7r),e(ve,p7r),e(ve,XM),e(XM,z2e),e(z2e,_7r),e(XM,u7r),e(XM,mH),e(mH,b7r),e(XM,F7r),e(ve,v7r),e(ve,zM),e(zM,Q2e),e(Q2e,T7r),e(zM,M7r),e(zM,gH),e(gH,E7r),e(zM,C7r),e(ve,w7r),e(ve,QM),e(QM,W2e),e(W2e,A7r),e(QM,y7r),e(QM,hH),e(hH,L7r),e(QM,x7r),e(Bo,k7r),e(Bo,H2e),e(H2e,S7r),e(Bo,R7r),g(x8,Bo,null),b(c,IBe,u),b(c,vf,u),e(vf,WM),e(WM,U2e),g(k8,U2e,null),e(vf,B7r),e(vf,J2e),e(J2e,P7r),b(c,qBe,u),b(c,jr,u),g(S8,jr,null),e(jr,$7r),e(jr,Tf),e(Tf,I7r),e(Tf,pH),e(pH,q7r),e(Tf,N7r),e(Tf,_H),e(_H,j7r),e(Tf,D7r),e(jr,G7r),e(jr,R8),e(R8,O7r),e(R8,Y2e),e(Y2e,V7r),e(R8,X7r),e(jr,z7r),e(jr,Bt),g(B8,Bt,null),e(Bt,Q7r),e(Bt,K2e),e(K2e,W7r),e(Bt,H7r),e(Bt,Mf),e(Mf,U7r),e(Mf,Z2e),e(Z2e,J7r),e(Mf,Y7r),e(Mf,uH),e(uH,K7r),e(Mf,Z7r),e(Bt,e9r),e(Bt,eFe),e(eFe,o9r),e(Bt,r9r),g(P8,Bt,null),e(jr,t9r),e(jr,Po),g($8,Po,null),e(Po,a9r),e(Po,oFe),e(oFe,n9r),e(Po,s9r),e(Po,In),e(In,l9r),e(In,rFe),e(rFe,i9r),e(In,d9r),e(In,tFe),e(tFe,c9r),e(In,f9r),e(In,aFe),e(aFe,m9r),e(In,g9r),e(Po,h9r),e(Po,Be),e(Be,HM),e(HM,nFe),e(nFe,p9r),e(HM,_9r),e(HM,bH),e(bH,u9r),e(HM,b9r),e(Be,F9r),e(Be,UM),e(UM,sFe),e(sFe,v9r),e(UM,T9r),e(UM,FH),e(FH,M9r),e(UM,E9r),e(Be,C9r),e(Be,JM),e(JM,lFe),e(lFe,w9r),e(JM,A9r),e(JM,vH),e(vH,y9r),e(JM,L9r),e(Be,x9r),e(Be,YM),e(YM,iFe),e(iFe,k9r),e(YM,S9r),e(YM,TH),e(TH,R9r),e(YM,B9r),e(Be,P9r),e(Be,KM),e(KM,dFe),e(dFe,$9r),e(KM,I9r),e(KM,MH),e(MH,q9r),e(KM,N9r),e(Be,j9r),e(Be,ZM),e(ZM,cFe),e(cFe,D9r),e(ZM,G9r),e(ZM,EH),e(EH,O9r),e(ZM,V9r),e(Be,X9r),e(Be,eE),e(eE,fFe),e(fFe,z9r),e(eE,Q9r),e(eE,CH),e(CH,W9r),e(eE,H9r),e(Be,U9r),e(Be,oE),e(oE,mFe),e(mFe,J9r),e(oE,Y9r),e(oE,wH),e(wH,K9r),e(oE,Z9r),e(Po,exr),e(Po,gFe),e(gFe,oxr),e(Po,rxr),g(I8,Po,null),b(c,NBe,u),b(c,Ef,u),e(Ef,rE),e(rE,hFe),g(q8,hFe,null),e(Ef,txr),e(Ef,pFe),e(pFe,axr),b(c,jBe,u),b(c,Dr,u),g(N8,Dr,null),e(Dr,nxr),e(Dr,Cf),e(Cf,sxr),e(Cf,AH),e(AH,lxr),e(Cf,ixr),e(Cf,yH),e(yH,dxr),e(Cf,cxr),e(Dr,fxr),e(Dr,j8),e(j8,mxr),e(j8,_Fe),e(_Fe,gxr),e(j8,hxr),e(Dr,pxr),e(Dr,Pt),g(D8,Pt,null),e(Pt,_xr),e(Pt,uFe),e(uFe,uxr),e(Pt,bxr),e(Pt,wf),e(wf,Fxr),e(wf,bFe),e(bFe,vxr),e(wf,Txr),e(wf,LH),e(LH,Mxr),e(wf,Exr),e(Pt,Cxr),e(Pt,FFe),e(FFe,wxr),e(Pt,Axr),g(G8,Pt,null),e(Dr,yxr),e(Dr,$o),g(O8,$o,null),e($o,Lxr),e($o,vFe),e(vFe,xxr),e($o,kxr),e($o,qn),e(qn,Sxr),e(qn,TFe),e(TFe,Rxr),e(qn,Bxr),e(qn,MFe),e(MFe,Pxr),e(qn,$xr),e(qn,EFe),e(EFe,Ixr),e(qn,qxr),e($o,Nxr),e($o,Pe),e(Pe,tE),e(tE,CFe),e(CFe,jxr),e(tE,Dxr),e(tE,xH),e(xH,Gxr),e(tE,Oxr),e(Pe,Vxr),e(Pe,aE),e(aE,wFe),e(wFe,Xxr),e(aE,zxr),e(aE,kH),e(kH,Qxr),e(aE,Wxr),e(Pe,Hxr),e(Pe,nE),e(nE,AFe),e(AFe,Uxr),e(nE,Jxr),e(nE,SH),e(SH,Yxr),e(nE,Kxr),e(Pe,Zxr),e(Pe,sE),e(sE,yFe),e(yFe,ekr),e(sE,okr),e(sE,RH),e(RH,rkr),e(sE,tkr),e(Pe,akr),e(Pe,lE),e(lE,LFe),e(LFe,nkr),e(lE,skr),e(lE,BH),e(BH,lkr),e(lE,ikr),e(Pe,dkr),e(Pe,iE),e(iE,xFe),e(xFe,ckr),e(iE,fkr),e(iE,PH),e(PH,mkr),e(iE,gkr),e(Pe,hkr),e(Pe,dE),e(dE,kFe),e(kFe,pkr),e(dE,_kr),e(dE,$H),e($H,ukr),e(dE,bkr),e(Pe,Fkr),e(Pe,cE),e(cE,SFe),e(SFe,vkr),e(cE,Tkr),e(cE,IH),e(IH,Mkr),e(cE,Ekr),e($o,Ckr),e($o,RFe),e(RFe,wkr),e($o,Akr),g(V8,$o,null),b(c,DBe,u),b(c,Af,u),e(Af,fE),e(fE,BFe),g(X8,BFe,null),e(Af,ykr),e(Af,PFe),e(PFe,Lkr),b(c,GBe,u),b(c,Gr,u),g(z8,Gr,null),e(Gr,xkr),e(Gr,yf),e(yf,kkr),e(yf,qH),e(qH,Skr),e(yf,Rkr),e(yf,NH),e(NH,Bkr),e(yf,Pkr),e(Gr,$kr),e(Gr,Q8),e(Q8,Ikr),e(Q8,$Fe),e($Fe,qkr),e(Q8,Nkr),e(Gr,jkr),e(Gr,$t),g(W8,$t,null),e($t,Dkr),e($t,IFe),e(IFe,Gkr),e($t,Okr),e($t,Lf),e(Lf,Vkr),e(Lf,qFe),e(qFe,Xkr),e(Lf,zkr),e(Lf,jH),e(jH,Qkr),e(Lf,Wkr),e($t,Hkr),e($t,NFe),e(NFe,Ukr),e($t,Jkr),g(H8,$t,null),e(Gr,Ykr),e(Gr,Io),g(U8,Io,null),e(Io,Kkr),e(Io,jFe),e(jFe,Zkr),e(Io,eSr),e(Io,Nn),e(Nn,oSr),e(Nn,DFe),e(DFe,rSr),e(Nn,tSr),e(Nn,GFe),e(GFe,aSr),e(Nn,nSr),e(Nn,OFe),e(OFe,sSr),e(Nn,lSr),e(Io,iSr),e(Io,VFe),e(VFe,mE),e(mE,XFe),e(XFe,dSr),e(mE,cSr),e(mE,DH),e(DH,fSr),e(mE,mSr),e(Io,gSr),e(Io,zFe),e(zFe,hSr),e(Io,pSr),g(J8,Io,null),b(c,OBe,u),b(c,xf,u),e(xf,gE),e(gE,QFe),g(Y8,QFe,null),e(xf,_Sr),e(xf,WFe),e(WFe,uSr),b(c,VBe,u),b(c,Or,u),g(K8,Or,null),e(Or,bSr),e(Or,kf),e(kf,FSr),e(kf,GH),e(GH,vSr),e(kf,TSr),e(kf,OH),e(OH,MSr),e(kf,ESr),e(Or,CSr),e(Or,Z8),e(Z8,wSr),e(Z8,HFe),e(HFe,ASr),e(Z8,ySr),e(Or,LSr),e(Or,It),g(e7,It,null),e(It,xSr),e(It,UFe),e(UFe,kSr),e(It,SSr),e(It,Sf),e(Sf,RSr),e(Sf,JFe),e(JFe,BSr),e(Sf,PSr),e(Sf,VH),e(VH,$Sr),e(Sf,ISr),e(It,qSr),e(It,YFe),e(YFe,NSr),e(It,jSr),g(o7,It,null),e(Or,DSr),e(Or,qo),g(r7,qo,null),e(qo,GSr),e(qo,KFe),e(KFe,OSr),e(qo,VSr),e(qo,jn),e(jn,XSr),e(jn,ZFe),e(ZFe,zSr),e(jn,QSr),e(jn,eve),e(eve,WSr),e(jn,HSr),e(jn,ove),e(ove,USr),e(jn,JSr),e(qo,YSr),e(qo,t7),e(t7,hE),e(hE,rve),e(rve,KSr),e(hE,ZSr),e(hE,XH),e(XH,eRr),e(hE,oRr),e(t7,rRr),e(t7,pE),e(pE,tve),e(tve,tRr),e(pE,aRr),e(pE,zH),e(zH,nRr),e(pE,sRr),e(qo,lRr),e(qo,ave),e(ave,iRr),e(qo,dRr),g(a7,qo,null),b(c,XBe,u),b(c,Rf,u),e(Rf,_E),e(_E,nve),g(n7,nve,null),e(Rf,cRr),e(Rf,sve),e(sve,fRr),b(c,zBe,u),b(c,Vr,u),g(s7,Vr,null),e(Vr,mRr),e(Vr,Bf),e(Bf,gRr),e(Bf,QH),e(QH,hRr),e(Bf,pRr),e(Bf,WH),e(WH,_Rr),e(Bf,uRr),e(Vr,bRr),e(Vr,l7),e(l7,FRr),e(l7,lve),e(lve,vRr),e(l7,TRr),e(Vr,MRr),e(Vr,qt),g(i7,qt,null),e(qt,ERr),e(qt,ive),e(ive,CRr),e(qt,wRr),e(qt,Pf),e(Pf,ARr),e(Pf,dve),e(dve,yRr),e(Pf,LRr),e(Pf,HH),e(HH,xRr),e(Pf,kRr),e(qt,SRr),e(qt,cve),e(cve,RRr),e(qt,BRr),g(d7,qt,null),e(Vr,PRr),e(Vr,No),g(c7,No,null),e(No,$Rr),e(No,fve),e(fve,IRr),e(No,qRr),e(No,Dn),e(Dn,NRr),e(Dn,mve),e(mve,jRr),e(Dn,DRr),e(Dn,gve),e(gve,GRr),e(Dn,ORr),e(Dn,hve),e(hve,VRr),e(Dn,XRr),e(No,zRr),e(No,pve),e(pve,uE),e(uE,_ve),e(_ve,QRr),e(uE,WRr),e(uE,UH),e(UH,HRr),e(uE,URr),e(No,JRr),e(No,uve),e(uve,YRr),e(No,KRr),g(f7,No,null),QBe=!0},p(c,[u]){const m7={};u&2&&(m7.$$scope={dirty:u,ctx:c}),Of.$set(m7);const bve={};u&2&&(bve.$$scope={dirty:u,ctx:c}),Rh.$set(bve);const Fve={};u&2&&(Fve.$$scope={dirty:u,ctx:c}),Vh.$set(Fve)},i(c){QBe||(h(ge.$$.fragment,c),h(Da.$$.fragment,c),h(TC.$$.fragment,c),h(MC.$$.fragment,c),h(Of.$$.fragment,c),h(EC.$$.fragment,c),h(CC.$$.fragment,c),h(yC.$$.fragment,c),h(LC.$$.fragment,c),h(xC.$$.fragment,c),h(kC.$$.fragment,c),h(SC.$$.fragment,c),h(PC.$$.fragment,c),h($C.$$.fragment,c),h(IC.$$.fragment,c),h(qC.$$.fragment,c),h(NC.$$.fragment,c),h(GC.$$.fragment,c),h(Rh.$$.fragment,c),h(OC.$$.fragment,c),h(VC.$$.fragment,c),h(XC.$$.fragment,c),h(zC.$$.fragment,c),h(HC.$$.fragment,c),h(Vh.$$.fragment,c),h(UC.$$.fragment,c),h(JC.$$.fragment,c),h(YC.$$.fragment,c),h(KC.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(Fw.$$.fragment,c),h(Tw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(F0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(q0.$$.fragment,c),h(N0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(Fy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(FL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(ML.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(yL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(SL.$$.fragment,c),h(RL.$$.fragment,c),h(BL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(DL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(VL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(WL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(e8.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(n8.$$.fragment,c),h(s8.$$.fragment,c),h(l8.$$.fragment,c),h(i8.$$.fragment,c),h(d8.$$.fragment,c),h(c8.$$.fragment,c),h(m8.$$.fragment,c),h(g8.$$.fragment,c),h(h8.$$.fragment,c),h(p8.$$.fragment,c),h(_8.$$.fragment,c),h(u8.$$.fragment,c),h(F8.$$.fragment,c),h(v8.$$.fragment,c),h(T8.$$.fragment,c),h(M8.$$.fragment,c),h(E8.$$.fragment,c),h(C8.$$.fragment,c),h(A8.$$.fragment,c),h(y8.$$.fragment,c),h(L8.$$.fragment,c),h(x8.$$.fragment,c),h(k8.$$.fragment,c),h(S8.$$.fragment,c),h(B8.$$.fragment,c),h(P8.$$.fragment,c),h($8.$$.fragment,c),h(I8.$$.fragment,c),h(q8.$$.fragment,c),h(N8.$$.fragment,c),h(D8.$$.fragment,c),h(G8.$$.fragment,c),h(O8.$$.fragment,c),h(V8.$$.fragment,c),h(X8.$$.fragment,c),h(z8.$$.fragment,c),h(W8.$$.fragment,c),h(H8.$$.fragment,c),h(U8.$$.fragment,c),h(J8.$$.fragment,c),h(Y8.$$.fragment,c),h(K8.$$.fragment,c),h(e7.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(a7.$$.fragment,c),h(n7.$$.fragment,c),h(s7.$$.fragment,c),h(i7.$$.fragment,c),h(d7.$$.fragment,c),h(c7.$$.fragment,c),h(f7.$$.fragment,c),QBe=!0)},o(c){p(ge.$$.fragment,c),p(Da.$$.fragment,c),p(TC.$$.fragment,c),p(MC.$$.fragment,c),p(Of.$$.fragment,c),p(EC.$$.fragment,c),p(CC.$$.fragment,c),p(yC.$$.fragment,c),p(LC.$$.fragment,c),p(xC.$$.fragment,c),p(kC.$$.fragment,c),p(SC.$$.fragment,c),p(PC.$$.fragment,c),p($C.$$.fragment,c),p(IC.$$.fragment,c),p(qC.$$.fragment,c),p(NC.$$.fragment,c),p(GC.$$.fragment,c),p(Rh.$$.fragment,c),p(OC.$$.fragment,c),p(VC.$$.fragment,c),p(XC.$$.fragment,c),p(zC.$$.fragment,c),p(HC.$$.fragment,c),p(Vh.$$.fragment,c),p(UC.$$.fragment,c),p(JC.$$.fragment,c),p(YC.$$.fragment,c),p(KC.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(Fw.$$.fragment,c),p(Tw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(qw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(FA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(EA.$$.fragment,c),p(CA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(qA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(F0.$$.fragment,c),p(v0.$$.fragment,c),p(T0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(C0.$$.fragment,c),p(A0.$$.fragment,c),p(y0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(S0.$$.fragment,c),p(B0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(q0.$$.fragment,c),p(N0.$$.fragment,c),p(D0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(X0.$$.fragment,c),p(z0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(Fy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(Ry.$$.fragment,c),p(By.$$.fragment,c),p(Py.$$.fragment,c),p(Iy.$$.fragment,c),p(qy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Gy.$$.fragment,c),p(Vy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(FL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(ML.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(yL.$$.fragment,c),p(LL.$$.fragment,c),p(xL.$$.fragment,c),p(SL.$$.fragment,c),p(RL.$$.fragment,c),p(BL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(IL.$$.fragment,c),p(NL.$$.fragment,c),p(jL.$$.fragment,c),p(DL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(VL.$$.fragment,c),p(zL.$$.fragment,c),p(QL.$$.fragment,c),p(WL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(JL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(e8.$$.fragment,c),p(o8.$$.fragment,c),p(r8.$$.fragment,c),p(t8.$$.fragment,c),p(n8.$$.fragment,c),p(s8.$$.fragment,c),p(l8.$$.fragment,c),p(i8.$$.fragment,c),p(d8.$$.fragment,c),p(c8.$$.fragment,c),p(m8.$$.fragment,c),p(g8.$$.fragment,c),p(h8.$$.fragment,c),p(p8.$$.fragment,c),p(_8.$$.fragment,c),p(u8.$$.fragment,c),p(F8.$$.fragment,c),p(v8.$$.fragment,c),p(T8.$$.fragment,c),p(M8.$$.fragment,c),p(E8.$$.fragment,c),p(C8.$$.fragment,c),p(A8.$$.fragment,c),p(y8.$$.fragment,c),p(L8.$$.fragment,c),p(x8.$$.fragment,c),p(k8.$$.fragment,c),p(S8.$$.fragment,c),p(B8.$$.fragment,c),p(P8.$$.fragment,c),p($8.$$.fragment,c),p(I8.$$.fragment,c),p(q8.$$.fragment,c),p(N8.$$.fragment,c),p(D8.$$.fragment,c),p(G8.$$.fragment,c),p(O8.$$.fragment,c),p(V8.$$.fragment,c),p(X8.$$.fragment,c),p(z8.$$.fragment,c),p(W8.$$.fragment,c),p(H8.$$.fragment,c),p(U8.$$.fragment,c),p(J8.$$.fragment,c),p(Y8.$$.fragment,c),p(K8.$$.fragment,c),p(e7.$$.fragment,c),p(o7.$$.fragment,c),p(r7.$$.fragment,c),p(a7.$$.fragment,c),p(n7.$$.fragment,c),p(s7.$$.fragment,c),p(i7.$$.fragment,c),p(d7.$$.fragment,c),p(c7.$$.fragment,c),p(f7.$$.fragment,c),QBe=!1},d(c){t(Z),c&&t(io),c&&t(ce),_(ge),c&&t(qf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(jf),_(Da,c),c&&t(fo),c&&t(_e),c&&t(zo),c&&t(Ga),c&&t(zSe),c&&t(Vi),_(TC),c&&t(QSe),c&&t(zn),c&&t(WSe),_(MC,c),c&&t(HSe),c&&t(h9),c&&t(USe),_(Of,c),c&&t(JSe),c&&t(Xi),_(EC),c&&t(YSe),c&&t(Qo),_(CC),_(yC),_(LC),_(xC),c&&t(KSe),c&&t(Qi),_(kC),c&&t(ZSe),c&&t(Wo),_(SC),_(PC),_($C),_(IC),c&&t(eRe),c&&t(Wi),_(qC),c&&t(oRe),c&&t(Ho),_(NC),_(GC),_(Rh),_(OC),_(VC),c&&t(rRe),c&&t(Hi),_(XC),c&&t(tRe),c&&t(Uo),_(zC),_(HC),_(Vh),_(UC),_(JC),c&&t(aRe),c&&t(Ji),_(YC),c&&t(nRe),c&&t(Jo),_(KC),_(ew),_(ow),_(rw),_(tw),c&&t(sRe),c&&t(Zi),_(aw),c&&t(lRe),c&&t(Yo),_(nw),_(lw),_(iw),_(dw),_(cw),c&&t(iRe),c&&t(rd),_(fw),c&&t(dRe),c&&t(Ko),_(mw),_(hw),_(pw),_(_w),_(uw),c&&t(cRe),c&&t(nd),_(bw),c&&t(fRe),c&&t(Zo),_(Fw),_(Tw),_(Mw),_(Ew),_(Cw),c&&t(mRe),c&&t(id),_(ww),c&&t(gRe),c&&t(er),_(Aw),_(Lw),_(xw),_(kw),_(Sw),c&&t(hRe),c&&t(fd),_(Rw),c&&t(pRe),c&&t(or),_(Bw),_($w),_(Iw),_(qw),_(Nw),c&&t(_Re),c&&t(hd),_(jw),c&&t(uRe),c&&t(rr),_(Dw),_(Ow),_(Vw),_(Xw),_(zw),c&&t(bRe),c&&t(ud),_(Qw),c&&t(FRe),c&&t(tr),_(Ww),_(Uw),_(Jw),_(Yw),_(Kw),c&&t(vRe),c&&t(vd),_(Zw),c&&t(TRe),c&&t(ar),_(eA),_(rA),_(tA),_(aA),_(nA),c&&t(MRe),c&&t(Ed),_(sA),c&&t(ERe),c&&t(nr),_(lA),_(dA),_(cA),_(fA),_(mA),c&&t(CRe),c&&t(Ad),_(gA),c&&t(wRe),c&&t(sr),_(hA),_(_A),_(uA),_(bA),_(FA),c&&t(ARe),c&&t(xd),_(vA),c&&t(yRe),c&&t(lr),_(TA),_(EA),_(CA),_(wA),_(AA),c&&t(LRe),c&&t(Rd),_(yA),c&&t(xRe),c&&t(ir),_(LA),_(kA),_(SA),_(RA),_(BA),c&&t(kRe),c&&t($d),_(PA),c&&t(SRe),c&&t(dr),_($A),_(qA),_(NA),_(jA),_(DA),c&&t(RRe),c&&t(Nd),_(GA),c&&t(BRe),c&&t(cr),_(OA),_(XA),_(zA),_(QA),_(WA),c&&t(PRe),c&&t(Gd),_(HA),c&&t($Re),c&&t(fr),_(UA),_(YA),_(KA),_(ZA),_(e0),c&&t(IRe),c&&t(Xd),_(o0),c&&t(qRe),c&&t(mr),_(r0),_(a0),_(n0),_(s0),_(i0),c&&t(NRe),c&&t(Wd),_(d0),c&&t(jRe),c&&t(gr),_(c0),_(m0),_(g0),_(h0),_(p0),c&&t(DRe),c&&t(Jd),_(_0),c&&t(GRe),c&&t(hr),_(u0),_(F0),_(v0),_(T0),_(M0),c&&t(ORe),c&&t(ec),_(E0),c&&t(VRe),c&&t(pr),_(C0),_(A0),_(y0),_(L0),_(x0),c&&t(XRe),c&&t(tc),_(k0),c&&t(zRe),c&&t(_r),_(S0),_(B0),_(P0),_($0),_(I0),c&&t(QRe),c&&t(sc),_(q0),c&&t(WRe),c&&t(ur),_(N0),_(D0),_(G0),_(O0),_(V0),c&&t(HRe),c&&t(cc),_(X0),c&&t(URe),c&&t(br),_(z0),_(W0),_(H0),_(U0),_(J0),c&&t(JRe),c&&t(gc),_(Y0),c&&t(YRe),c&&t(Fr),_(K0),_(ey),_(oy),_(ry),_(ty),c&&t(KRe),c&&t(_c),_(ay),c&&t(ZRe),c&&t(vr),_(ny),_(ly),_(iy),_(dy),_(cy),c&&t(eBe),c&&t(Fc),_(fy),c&&t(oBe),c&&t(Tr),_(my),_(hy),_(py),_(_y),_(uy),c&&t(rBe),c&&t(Mc),_(by),c&&t(tBe),c&&t(Mr),_(Fy),_(Ty),_(My),_(Ey),_(wy),c&&t(aBe),c&&t(wc),_(Ay),c&&t(nBe),c&&t(Er),_(yy),_(xy),_(ky),_(Sy),_(Ry),c&&t(sBe),c&&t(Lc),_(By),c&&t(lBe),c&&t(Cr),_(Py),_(Iy),_(qy),_(Ny),_(jy),c&&t(iBe),c&&t(Sc),_(Dy),c&&t(dBe),c&&t(wr),_(Gy),_(Vy),_(Xy),_(zy),_(Qy),c&&t(cBe),c&&t(Pc),_(Wy),c&&t(fBe),c&&t(Ar),_(Hy),_(Jy),_(Yy),_(Ky),_(Zy),c&&t(mBe),c&&t(qc),_(eL),c&&t(gBe),c&&t(yr),_(oL),_(tL),_(aL),_(nL),_(sL),c&&t(hBe),c&&t(Dc),_(lL),c&&t(pBe),c&&t(Lr),_(iL),_(cL),_(fL),_(mL),_(gL),c&&t(_Be),c&&t(Vc),_(hL),c&&t(uBe),c&&t(xr),_(pL),_(uL),_(bL),_(FL),_(vL),c&&t(bBe),c&&t(Qc),_(TL),c&&t(FBe),c&&t(kr),_(ML),_(CL),_(wL),_(AL),_(yL),c&&t(vBe),c&&t(Uc),_(LL),c&&t(TBe),c&&t(Sr),_(xL),_(SL),_(RL),_(BL),_(PL),c&&t(MBe),c&&t(Kc),_($L),c&&t(EBe),c&&t(Rr),_(IL),_(NL),_(jL),_(DL),_(GL),c&&t(CBe),c&&t(of),_(OL),c&&t(wBe),c&&t(Br),_(VL),_(zL),_(QL),_(WL),_(HL),c&&t(ABe),c&&t(af),_(UL),c&&t(yBe),c&&t(Pr),_(JL),_(KL),_(ZL),_(e8),_(o8),c&&t(LBe),c&&t(lf),_(r8),c&&t(xBe),c&&t($r),_(t8),_(n8),_(s8),_(l8),_(i8),c&&t(kBe),c&&t(ff),_(d8),c&&t(SBe),c&&t(Ir),_(c8),_(m8),_(g8),_(h8),_(p8),c&&t(RBe),c&&t(hf),_(_8),c&&t(BBe),c&&t(qr),_(u8),_(F8),_(v8),_(T8),_(M8),c&&t(PBe),c&&t(uf),_(E8),c&&t($Be),c&&t(Nr),_(C8),_(A8),_(y8),_(L8),_(x8),c&&t(IBe),c&&t(vf),_(k8),c&&t(qBe),c&&t(jr),_(S8),_(B8),_(P8),_($8),_(I8),c&&t(NBe),c&&t(Ef),_(q8),c&&t(jBe),c&&t(Dr),_(N8),_(D8),_(G8),_(O8),_(V8),c&&t(DBe),c&&t(Af),_(X8),c&&t(GBe),c&&t(Gr),_(z8),_(W8),_(H8),_(U8),_(J8),c&&t(OBe),c&&t(xf),_(Y8),c&&t(VBe),c&&t(Or),_(K8),_(e7),_(o7),_(r7),_(a7),c&&t(XBe),c&&t(Rf),_(n7),c&&t(zBe),c&&t(Vr),_(s7),_(i7),_(d7),_(c7),_(f7)}}}const yEt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function LEt(If){return MEt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class PEt extends bEt{constructor(Z){super();FEt(this,Z,LEt,AEt,vEt,{})}}export{PEt as default,yEt as metadata};
