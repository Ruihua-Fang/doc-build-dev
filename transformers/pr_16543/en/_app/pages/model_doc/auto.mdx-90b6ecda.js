import{S as z8t,i as Q8t,s as W8t,e as a,k as l,w as f,t as o,M as H8t,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as U8t}from"../../chunks/vendor-6b77c823.js";import{T as hNr}from"../../chunks/Tip-39098574.js";import{D as w}from"../../chunks/Docstring-1088f2fb.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function J8t(Xf){let oe,co,ge,Ae,io,ue,Ce,Xo,zi,zf,fa,Qi,Wi,WC,Qf,Se,fo,Hi,On,HC,Vn,Xn,UC,Ui,zn,JC,Ji,Wf,Da;return{c(){oe=a("p"),co=o("If your "),ge=a("code"),Ae=o("NewModelConfig"),io=o(" is a subclass of "),ue=a("code"),Ce=o("PretrainedConfig"),Xo=o(`, make sure its
`),zi=a("code"),zf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Qi=a("code"),Wi=o('"new-model"'),WC=o(")."),Qf=l(),Se=a("p"),fo=o("Likewise, if your "),Hi=a("code"),On=o("NewModel"),HC=o(" is a subclass of "),Vn=a("a"),Xn=o("PreTrainedModel"),UC=o(`, make sure its
`),Ui=a("code"),zn=o("config_class"),JC=o(` attribute is set to the same class you use when registering the model (here
`),Ji=a("code"),Wf=o("NewModelConfig"),Da=o(")."),this.h()},l(mo){oe=n(mo,"P",{});var ve=s(oe);co=r(ve,"If your "),ge=n(ve,"CODE",{});var W9=s(ge);Ae=r(W9,"NewModelConfig"),W9.forEach(t),io=r(ve," is a subclass of "),ue=n(ve,"CODE",{});var Yi=s(ue);Ce=r(Yi,"PretrainedConfig"),Yi.forEach(t),Xo=r(ve,`, make sure its
`),zi=n(ve,"CODE",{});var H9=s(zi);zf=r(H9,"model_type"),H9.forEach(t),fa=r(ve," attribute is set to the same key you use when registering the config (here "),Qi=n(ve,"CODE",{});var U9=s(Qi);Wi=r(U9,'"new-model"'),U9.forEach(t),WC=r(ve,")."),ve.forEach(t),Qf=i(mo),Se=n(mo,"P",{});var zo=s(Se);fo=r(zo,"Likewise, if your "),Hi=n(zo,"CODE",{});var Ga=s(Hi);On=r(Ga,"NewModel"),Ga.forEach(t),HC=r(zo," is a subclass of "),Vn=n(zo,"A",{href:!0});var J9=s(Vn);Xn=r(J9,"PreTrainedModel"),J9.forEach(t),UC=r(zo,`, make sure its
`),Ui=n(zo,"CODE",{});var Hf=s(Ui);zn=r(Hf,"config_class"),Hf.forEach(t),JC=r(zo,` attribute is set to the same class you use when registering the model (here
`),Ji=n(zo,"CODE",{});var Y9=s(Ji);Wf=r(Y9,"NewModelConfig"),Y9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(Vn,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel")},m(mo,ve){b(mo,oe,ve),e(oe,co),e(oe,ge),e(ge,Ae),e(oe,io),e(oe,ue),e(ue,Ce),e(oe,Xo),e(oe,zi),e(zi,zf),e(oe,fa),e(oe,Qi),e(Qi,Wi),e(oe,WC),b(mo,Qf,ve),b(mo,Se,ve),e(Se,fo),e(Se,Hi),e(Hi,On),e(Se,HC),e(Se,Vn),e(Vn,Xn),e(Se,UC),e(Se,Ui),e(Ui,zn),e(Se,JC),e(Se,Ji),e(Ji,Wf),e(Se,Da)},d(mo){mo&&t(oe),mo&&t(Qf),mo&&t(Se)}}}function Y8t(Xf){let oe,co,ge,Ae,io;return{c(){oe=a("p"),co=o("Passing "),ge=a("code"),Ae=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(ue){oe=n(ue,"P",{});var Ce=s(oe);co=r(Ce,"Passing "),ge=n(Ce,"CODE",{});var Xo=s(ge);Ae=r(Xo,"use_auth_token=True"),Xo.forEach(t),io=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(ue,Ce){b(ue,oe,Ce),e(oe,co),e(oe,ge),e(ge,Ae),e(oe,io)},d(ue){ue&&t(oe)}}}function K8t(Xf){let oe,co,ge,Ae,io;return{c(){oe=a("p"),co=o("Passing "),ge=a("code"),Ae=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(ue){oe=n(ue,"P",{});var Ce=s(oe);co=r(Ce,"Passing "),ge=n(Ce,"CODE",{});var Xo=s(ge);Ae=r(Xo,"use_auth_token=True"),Xo.forEach(t),io=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(ue,Ce){b(ue,oe,Ce),e(oe,co),e(oe,ge),e(ge,Ae),e(oe,io)},d(ue){ue&&t(oe)}}}function Z8t(Xf){let oe,co,ge,Ae,io,ue,Ce,Xo,zi,zf,fa,Qi,Wi,WC,Qf,Se,fo,Hi,On,HC,Vn,Xn,UC,Ui,zn,JC,Ji,Wf,Da,mo,ve,W9,Yi,H9,U9,zo,Ga,J9,Hf,Y9,FNe,lPe,Ki,Uf,dK,YC,TNe,cK,MNe,iPe,Qn,ENe,fK,CNe,wNe,mK,ANe,yNe,dPe,KC,cPe,K9,LNe,fPe,Jf,mPe,Zi,Yf,gK,ZC,xNe,hK,kNe,gPe,Qo,ew,SNe,ow,RNe,Z9,BNe,PNe,$Ne,rw,INe,pK,qNe,NNe,jNe,go,tw,DNe,_K,GNe,ONe,ed,VNe,uK,XNe,zNe,bK,QNe,WNe,HNe,v,Kf,vK,UNe,JNe,ex,YNe,KNe,ZNe,Zf,FK,eje,oje,ox,rje,tje,aje,em,TK,nje,sje,rx,lje,ije,dje,om,MK,cje,fje,tx,mje,gje,hje,rm,EK,pje,_je,ax,uje,bje,vje,tm,CK,Fje,Tje,nx,Mje,Eje,Cje,am,wK,wje,Aje,sx,yje,Lje,xje,nm,AK,kje,Sje,lx,Rje,Bje,Pje,sm,yK,$je,Ije,ix,qje,Nje,jje,lm,LK,Dje,Gje,dx,Oje,Vje,Xje,im,xK,zje,Qje,cx,Wje,Hje,Uje,dm,kK,Jje,Yje,fx,Kje,Zje,eDe,cm,SK,oDe,rDe,mx,tDe,aDe,nDe,fm,RK,sDe,lDe,gx,iDe,dDe,cDe,mm,BK,fDe,mDe,hx,gDe,hDe,pDe,gm,PK,_De,uDe,px,bDe,vDe,FDe,hm,$K,TDe,MDe,_x,EDe,CDe,wDe,pm,IK,ADe,yDe,ux,LDe,xDe,kDe,_m,qK,SDe,RDe,bx,BDe,PDe,$De,um,NK,IDe,qDe,vx,NDe,jDe,DDe,bm,jK,GDe,ODe,Fx,VDe,XDe,zDe,vm,DK,QDe,WDe,Tx,HDe,UDe,JDe,Fm,GK,YDe,KDe,Mx,ZDe,eGe,oGe,Tm,OK,rGe,tGe,Ex,aGe,nGe,sGe,Mm,VK,lGe,iGe,Cx,dGe,cGe,fGe,Em,XK,mGe,gGe,wx,hGe,pGe,_Ge,Cm,zK,uGe,bGe,Ax,vGe,FGe,TGe,wm,QK,MGe,EGe,yx,CGe,wGe,AGe,Am,WK,yGe,LGe,Lx,xGe,kGe,SGe,ym,HK,RGe,BGe,xx,PGe,$Ge,IGe,Lm,UK,qGe,NGe,kx,jGe,DGe,GGe,xm,JK,OGe,VGe,Sx,XGe,zGe,QGe,km,YK,WGe,HGe,Rx,UGe,JGe,YGe,Sm,KK,KGe,ZGe,Bx,eOe,oOe,rOe,Rm,ZK,tOe,aOe,Px,nOe,sOe,lOe,Bm,eZ,iOe,dOe,$x,cOe,fOe,mOe,Pm,oZ,gOe,hOe,Ix,pOe,_Oe,uOe,$m,rZ,bOe,vOe,qx,FOe,TOe,MOe,Im,tZ,EOe,COe,Nx,wOe,AOe,yOe,qm,aZ,LOe,xOe,jx,kOe,SOe,ROe,Nm,nZ,BOe,POe,Dx,$Oe,IOe,qOe,jm,sZ,NOe,jOe,Gx,DOe,GOe,OOe,Dm,lZ,VOe,XOe,Ox,zOe,QOe,WOe,Gm,iZ,HOe,UOe,Vx,JOe,YOe,KOe,Om,dZ,ZOe,eVe,Xx,oVe,rVe,tVe,Vm,cZ,aVe,nVe,zx,sVe,lVe,iVe,Xm,fZ,dVe,cVe,Qx,fVe,mVe,gVe,zm,mZ,hVe,pVe,Wx,_Ve,uVe,bVe,Qm,gZ,vVe,FVe,Hx,TVe,MVe,EVe,Wm,hZ,CVe,wVe,Ux,AVe,yVe,LVe,Hm,pZ,xVe,kVe,Jx,SVe,RVe,BVe,Um,_Z,PVe,$Ve,Yx,IVe,qVe,NVe,Jm,uZ,jVe,DVe,Kx,GVe,OVe,VVe,Ym,bZ,XVe,zVe,Zx,QVe,WVe,HVe,Km,vZ,UVe,JVe,ek,YVe,KVe,ZVe,Zm,FZ,eXe,oXe,ok,rXe,tXe,aXe,eg,TZ,nXe,sXe,rk,lXe,iXe,dXe,og,MZ,cXe,fXe,tk,mXe,gXe,hXe,rg,EZ,pXe,_Xe,ak,uXe,bXe,vXe,tg,CZ,FXe,TXe,nk,MXe,EXe,CXe,ag,wZ,wXe,AXe,sk,yXe,LXe,xXe,ng,AZ,kXe,SXe,lk,RXe,BXe,PXe,sg,yZ,$Xe,IXe,ik,qXe,NXe,jXe,lg,LZ,DXe,GXe,dk,OXe,VXe,XXe,ig,xZ,zXe,QXe,ck,WXe,HXe,UXe,dg,kZ,JXe,YXe,fk,KXe,ZXe,eze,cg,SZ,oze,rze,mk,tze,aze,nze,fg,RZ,sze,lze,gk,ize,dze,cze,mg,BZ,fze,mze,hk,gze,hze,pze,gg,PZ,_ze,uze,pk,bze,vze,Fze,hg,$Z,Tze,Mze,_k,Eze,Cze,wze,pg,IZ,Aze,yze,uk,Lze,xze,kze,_g,qZ,Sze,Rze,bk,Bze,Pze,$ze,ug,NZ,Ize,qze,vk,Nze,jze,Dze,bg,jZ,Gze,Oze,Fk,Vze,Xze,zze,vg,DZ,Qze,Wze,Tk,Hze,Uze,Jze,Fg,GZ,Yze,Kze,Mk,Zze,eQe,oQe,Tg,OZ,rQe,tQe,Ek,aQe,nQe,sQe,Mg,VZ,lQe,iQe,Ck,dQe,cQe,fQe,Eg,XZ,mQe,gQe,wk,hQe,pQe,_Qe,Cg,zZ,uQe,bQe,Ak,vQe,FQe,TQe,wg,QZ,MQe,EQe,yk,CQe,wQe,AQe,Ag,WZ,yQe,LQe,Lk,xQe,kQe,SQe,yg,HZ,RQe,BQe,xk,PQe,$Qe,IQe,Lg,UZ,qQe,NQe,kk,jQe,DQe,GQe,xg,JZ,OQe,VQe,Sk,XQe,zQe,QQe,kg,YZ,WQe,HQe,Rk,UQe,JQe,YQe,Sg,KZ,KQe,ZQe,Bk,eWe,oWe,rWe,Rg,ZZ,tWe,aWe,Pk,nWe,sWe,lWe,Bg,eee,iWe,dWe,$k,cWe,fWe,mWe,Pg,oee,gWe,hWe,Ik,pWe,_We,uWe,$g,ree,bWe,vWe,qk,FWe,TWe,MWe,Ig,tee,EWe,CWe,Nk,wWe,AWe,yWe,qg,aee,LWe,xWe,jk,kWe,SWe,RWe,Ng,nee,BWe,PWe,Dk,$We,IWe,qWe,jg,see,NWe,jWe,Gk,DWe,GWe,OWe,Dg,lee,VWe,XWe,Ok,zWe,QWe,WWe,Gg,iee,HWe,UWe,Vk,JWe,YWe,KWe,Og,dee,ZWe,eHe,Xk,oHe,rHe,tHe,Vg,cee,aHe,nHe,zk,sHe,lHe,iHe,Xg,fee,dHe,cHe,Qk,fHe,mHe,gHe,zg,mee,hHe,pHe,Wk,_He,uHe,bHe,gee,vHe,FHe,aw,THe,Qg,nw,MHe,hee,EHe,hPe,od,Wg,pee,sw,CHe,_ee,wHe,pPe,Wo,lw,AHe,iw,yHe,Hk,LHe,xHe,kHe,dw,SHe,uee,RHe,BHe,PHe,ho,cw,$He,bee,IHe,qHe,Oa,NHe,vee,jHe,DHe,Fee,GHe,OHe,Tee,VHe,XHe,zHe,E,Wn,Mee,QHe,WHe,Uk,HHe,UHe,Jk,JHe,YHe,KHe,Hn,Eee,ZHe,eUe,Yk,oUe,rUe,Kk,tUe,aUe,nUe,Un,Cee,sUe,lUe,Zk,iUe,dUe,eS,cUe,fUe,mUe,Hg,wee,gUe,hUe,oS,pUe,_Ue,uUe,Jn,Aee,bUe,vUe,rS,FUe,TUe,tS,MUe,EUe,CUe,Ug,yee,wUe,AUe,aS,yUe,LUe,xUe,Jg,Lee,kUe,SUe,nS,RUe,BUe,PUe,Yg,xee,$Ue,IUe,sS,qUe,NUe,jUe,Yn,kee,DUe,GUe,lS,OUe,VUe,iS,XUe,zUe,QUe,Kn,See,WUe,HUe,dS,UUe,JUe,cS,YUe,KUe,ZUe,Zn,Ree,eJe,oJe,fS,rJe,tJe,mS,aJe,nJe,sJe,Kg,Bee,lJe,iJe,gS,dJe,cJe,fJe,Zg,Pee,mJe,gJe,hS,hJe,pJe,_Je,es,$ee,uJe,bJe,pS,vJe,FJe,_S,TJe,MJe,EJe,eh,Iee,CJe,wJe,uS,AJe,yJe,LJe,os,qee,xJe,kJe,bS,SJe,RJe,vS,BJe,PJe,$Je,rs,Nee,IJe,qJe,FS,NJe,jJe,TS,DJe,GJe,OJe,ts,jee,VJe,XJe,MS,zJe,QJe,Dee,WJe,HJe,UJe,oh,Gee,JJe,YJe,ES,KJe,ZJe,eYe,as,Oee,oYe,rYe,CS,tYe,aYe,wS,nYe,sYe,lYe,ns,Vee,iYe,dYe,AS,cYe,fYe,yS,mYe,gYe,hYe,ss,Xee,pYe,_Ye,LS,uYe,bYe,xS,vYe,FYe,TYe,ls,zee,MYe,EYe,kS,CYe,wYe,SS,AYe,yYe,LYe,is,Qee,xYe,kYe,RS,SYe,RYe,BS,BYe,PYe,$Ye,ds,Wee,IYe,qYe,PS,NYe,jYe,$S,DYe,GYe,OYe,rh,Hee,VYe,XYe,IS,zYe,QYe,WYe,cs,Uee,HYe,UYe,qS,JYe,YYe,NS,KYe,ZYe,eKe,th,Jee,oKe,rKe,jS,tKe,aKe,nKe,fs,Yee,sKe,lKe,DS,iKe,dKe,GS,cKe,fKe,mKe,ms,Kee,gKe,hKe,OS,pKe,_Ke,VS,uKe,bKe,vKe,gs,Zee,FKe,TKe,XS,MKe,EKe,zS,CKe,wKe,AKe,hs,eoe,yKe,LKe,QS,xKe,kKe,WS,SKe,RKe,BKe,ps,ooe,PKe,$Ke,HS,IKe,qKe,US,NKe,jKe,DKe,ah,roe,GKe,OKe,JS,VKe,XKe,zKe,_s,toe,QKe,WKe,YS,HKe,UKe,KS,JKe,YKe,KKe,us,aoe,ZKe,eZe,ZS,oZe,rZe,eR,tZe,aZe,nZe,bs,noe,sZe,lZe,oR,iZe,dZe,rR,cZe,fZe,mZe,vs,soe,gZe,hZe,tR,pZe,_Ze,aR,uZe,bZe,vZe,Fs,loe,FZe,TZe,nR,MZe,EZe,sR,CZe,wZe,AZe,Ts,ioe,yZe,LZe,lR,xZe,kZe,iR,SZe,RZe,BZe,nh,doe,PZe,$Ze,dR,IZe,qZe,NZe,Ms,coe,jZe,DZe,cR,GZe,OZe,fR,VZe,XZe,zZe,sh,foe,QZe,WZe,mR,HZe,UZe,JZe,lh,moe,YZe,KZe,gR,ZZe,eeo,oeo,Es,goe,reo,teo,hR,aeo,neo,pR,seo,leo,ieo,Cs,hoe,deo,ceo,_R,feo,meo,uR,geo,heo,peo,ws,poe,_eo,ueo,bR,beo,veo,vR,Feo,Teo,Meo,ih,_oe,Eeo,Ceo,FR,weo,Aeo,yeo,As,uoe,Leo,xeo,TR,keo,Seo,MR,Reo,Beo,Peo,ys,boe,$eo,Ieo,ER,qeo,Neo,CR,jeo,Deo,Geo,Ls,voe,Oeo,Veo,wR,Xeo,zeo,AR,Qeo,Weo,Heo,xs,Foe,Ueo,Jeo,yR,Yeo,Keo,LR,Zeo,eoo,ooo,ks,Toe,roo,too,xR,aoo,noo,kR,soo,loo,ioo,Ss,Moe,doo,coo,SR,foo,moo,RR,goo,hoo,poo,dh,Eoe,_oo,uoo,BR,boo,voo,Foo,ch,Coe,Too,Moo,PR,Eoo,Coo,woo,fh,woe,Aoo,yoo,$R,Loo,xoo,koo,mh,Aoe,Soo,Roo,IR,Boo,Poo,$oo,Rs,yoe,Ioo,qoo,qR,Noo,joo,NR,Doo,Goo,Ooo,gh,Loe,Voo,Xoo,jR,zoo,Qoo,Woo,Bs,xoe,Hoo,Uoo,DR,Joo,Yoo,GR,Koo,Zoo,ero,Ps,koe,oro,rro,OR,tro,aro,VR,nro,sro,lro,$s,Soe,iro,dro,XR,cro,fro,zR,mro,gro,hro,Is,Roe,pro,_ro,QR,uro,bro,WR,vro,Fro,Tro,qs,Boe,Mro,Ero,HR,Cro,wro,UR,Aro,yro,Lro,Ns,Poe,xro,kro,JR,Sro,Rro,YR,Bro,Pro,$ro,hh,$oe,Iro,qro,KR,Nro,jro,Dro,ph,Ioe,Gro,Oro,ZR,Vro,Xro,zro,js,qoe,Qro,Wro,eB,Hro,Uro,oB,Jro,Yro,Kro,Ds,Noe,Zro,eto,rB,oto,rto,tB,tto,ato,nto,Gs,joe,sto,lto,aB,ito,dto,nB,cto,fto,mto,_h,Doe,gto,hto,sB,pto,_to,uto,uh,Goe,bto,vto,lB,Fto,Tto,Mto,bh,Ooe,Eto,Cto,iB,wto,Ato,yto,Os,Voe,Lto,xto,dB,kto,Sto,cB,Rto,Bto,Pto,vh,Xoe,$to,Ito,fB,qto,Nto,jto,Fh,zoe,Dto,Gto,mB,Oto,Vto,Xto,Vs,Qoe,zto,Qto,gB,Wto,Hto,hB,Uto,Jto,Yto,Th,Woe,Kto,Zto,pB,eao,oao,rao,Mh,Hoe,tao,aao,_B,nao,sao,lao,Xs,Uoe,iao,dao,uB,cao,fao,bB,mao,gao,hao,zs,Joe,pao,_ao,vB,uao,bao,FB,vao,Fao,Tao,Qs,Yoe,Mao,Eao,TB,Cao,wao,MB,Aao,yao,Lao,Ws,Koe,xao,kao,EB,Sao,Rao,CB,Bao,Pao,$ao,Zoe,Iao,qao,fw,Nao,Eh,mw,jao,ere,Dao,_Pe,rd,Ch,ore,gw,Gao,rre,Oao,uPe,Ho,hw,Vao,pw,Xao,wB,zao,Qao,Wao,_w,Hao,tre,Uao,Jao,Yao,Ie,uw,Kao,are,Zao,eno,Va,ono,nre,rno,tno,sre,ano,nno,lre,sno,lno,ino,H,wh,ire,dno,cno,AB,fno,mno,gno,Ah,dre,hno,pno,yB,_no,uno,bno,yh,cre,vno,Fno,LB,Tno,Mno,Eno,Lh,fre,Cno,wno,xB,Ano,yno,Lno,xh,mre,xno,kno,kB,Sno,Rno,Bno,kh,gre,Pno,$no,SB,Ino,qno,Nno,Sh,hre,jno,Dno,RB,Gno,Ono,Vno,Rh,pre,Xno,zno,BB,Qno,Wno,Hno,Bh,_re,Uno,Jno,PB,Yno,Kno,Zno,Ph,ure,eso,oso,$B,rso,tso,aso,$h,bre,nso,sso,IB,lso,iso,dso,Ih,vre,cso,fso,qB,mso,gso,hso,qh,Fre,pso,_so,NB,uso,bso,vso,Nh,Tre,Fso,Tso,jB,Mso,Eso,Cso,jh,Mre,wso,Aso,DB,yso,Lso,xso,Dh,Ere,kso,Sso,GB,Rso,Bso,Pso,Gh,Cre,$so,Iso,OB,qso,Nso,jso,Oh,wre,Dso,Gso,VB,Oso,Vso,Xso,Vh,Are,zso,Qso,XB,Wso,Hso,Uso,Xh,yre,Jso,Yso,zB,Kso,Zso,elo,zh,Lre,olo,rlo,QB,tlo,alo,nlo,Qh,xre,slo,llo,WB,ilo,dlo,clo,Wh,kre,flo,mlo,HB,glo,hlo,plo,Hh,_lo,Sre,ulo,blo,bw,vlo,Uh,vw,Flo,Rre,Tlo,bPe,td,Jh,Bre,Fw,Mlo,Pre,Elo,vPe,Uo,Tw,Clo,Mw,wlo,UB,Alo,ylo,Llo,Ew,xlo,$re,klo,Slo,Rlo,qe,Cw,Blo,Ire,Plo,$lo,ad,Ilo,qre,qlo,Nlo,Nre,jlo,Dlo,Glo,de,Yh,jre,Olo,Vlo,JB,Xlo,zlo,Qlo,Kh,Dre,Wlo,Hlo,YB,Ulo,Jlo,Ylo,Zh,Gre,Klo,Zlo,KB,eio,oio,rio,ep,Ore,tio,aio,ZB,nio,sio,lio,op,Vre,iio,dio,eP,cio,fio,mio,rp,Xre,gio,hio,oP,pio,_io,uio,tp,zre,bio,vio,rP,Fio,Tio,Mio,ap,Qre,Eio,Cio,tP,wio,Aio,yio,np,Wre,Lio,xio,aP,kio,Sio,Rio,sp,Hre,Bio,Pio,nP,$io,Iio,qio,lp,Ure,Nio,jio,sP,Dio,Gio,Oio,ip,Jre,Vio,Xio,lP,zio,Qio,Wio,dp,Yre,Hio,Uio,iP,Jio,Yio,Kio,cp,Kre,Zio,edo,dP,odo,rdo,tdo,fp,ado,Zre,ndo,sdo,ww,ldo,mp,Aw,ido,ete,ddo,FPe,nd,gp,ote,yw,cdo,rte,fdo,TPe,Jo,Lw,mdo,sd,gdo,cP,hdo,pdo,fP,_do,udo,bdo,xw,vdo,tte,Fdo,Tdo,Mdo,Xr,kw,Edo,ate,Cdo,wdo,ld,Ado,nte,ydo,Ldo,mP,xdo,kdo,Sdo,ste,Rdo,Bdo,Sw,Pdo,Ne,Rw,$do,lte,Ido,qdo,Xa,Ndo,ite,jdo,Ddo,dte,Gdo,Odo,cte,Vdo,Xdo,zdo,T,hp,fte,Qdo,Wdo,gP,Hdo,Udo,Jdo,pp,mte,Ydo,Kdo,hP,Zdo,eco,oco,_p,gte,rco,tco,pP,aco,nco,sco,up,hte,lco,ico,_P,dco,cco,fco,bp,pte,mco,gco,uP,hco,pco,_co,vp,_te,uco,bco,bP,vco,Fco,Tco,Fp,ute,Mco,Eco,vP,Cco,wco,Aco,Tp,bte,yco,Lco,FP,xco,kco,Sco,Mp,vte,Rco,Bco,TP,Pco,$co,Ico,Ep,Fte,qco,Nco,MP,jco,Dco,Gco,Cp,Tte,Oco,Vco,EP,Xco,zco,Qco,wp,Mte,Wco,Hco,CP,Uco,Jco,Yco,Ap,Ete,Kco,Zco,wP,efo,ofo,rfo,yp,Cte,tfo,afo,AP,nfo,sfo,lfo,Lp,wte,ifo,dfo,yP,cfo,ffo,mfo,xp,Ate,gfo,hfo,LP,pfo,_fo,ufo,kp,yte,bfo,vfo,xP,Ffo,Tfo,Mfo,Sp,Lte,Efo,Cfo,kP,wfo,Afo,yfo,Rp,xte,Lfo,xfo,SP,kfo,Sfo,Rfo,Bp,kte,Bfo,Pfo,RP,$fo,Ifo,qfo,Pp,Ste,Nfo,jfo,BP,Dfo,Gfo,Ofo,$p,Rte,Vfo,Xfo,PP,zfo,Qfo,Wfo,Ip,Bte,Hfo,Ufo,$P,Jfo,Yfo,Kfo,qp,Pte,Zfo,emo,IP,omo,rmo,tmo,Np,$te,amo,nmo,qP,smo,lmo,imo,jp,Ite,dmo,cmo,NP,fmo,mmo,gmo,Dp,qte,hmo,pmo,jP,_mo,umo,bmo,Gp,Nte,vmo,Fmo,DP,Tmo,Mmo,Emo,Op,jte,Cmo,wmo,GP,Amo,ymo,Lmo,Vp,Dte,xmo,kmo,OP,Smo,Rmo,Bmo,Hs,Gte,Pmo,$mo,VP,Imo,qmo,XP,Nmo,jmo,Dmo,Xp,Ote,Gmo,Omo,zP,Vmo,Xmo,zmo,zp,Vte,Qmo,Wmo,QP,Hmo,Umo,Jmo,Qp,Xte,Ymo,Kmo,WP,Zmo,ego,ogo,Wp,zte,rgo,tgo,HP,ago,ngo,sgo,Hp,Qte,lgo,igo,UP,dgo,cgo,fgo,Up,Wte,mgo,ggo,JP,hgo,pgo,_go,Jp,Hte,ugo,bgo,YP,vgo,Fgo,Tgo,Yp,Ute,Mgo,Ego,KP,Cgo,wgo,Ago,Kp,Jte,ygo,Lgo,ZP,xgo,kgo,Sgo,Zp,Yte,Rgo,Bgo,e$,Pgo,$go,Igo,e_,Kte,qgo,Ngo,o$,jgo,Dgo,Ggo,o_,Zte,Ogo,Vgo,r$,Xgo,zgo,Qgo,r_,eae,Wgo,Hgo,t$,Ugo,Jgo,Ygo,t_,oae,Kgo,Zgo,a$,eho,oho,rho,a_,rae,tho,aho,n$,nho,sho,lho,n_,tae,iho,dho,s$,cho,fho,mho,s_,aae,gho,hho,l$,pho,_ho,uho,l_,nae,bho,vho,i$,Fho,Tho,Mho,i_,sae,Eho,Cho,d$,who,Aho,yho,d_,lae,Lho,xho,c$,kho,Sho,Rho,c_,iae,Bho,Pho,f$,$ho,Iho,qho,f_,dae,Nho,jho,m$,Dho,Gho,Oho,m_,cae,Vho,Xho,g$,zho,Qho,Who,g_,fae,Hho,Uho,h$,Jho,Yho,Kho,h_,mae,Zho,epo,p$,opo,rpo,tpo,p_,gae,apo,npo,_$,spo,lpo,ipo,__,hae,dpo,cpo,u$,fpo,mpo,gpo,u_,pae,hpo,ppo,b$,_po,upo,bpo,b_,_ae,vpo,Fpo,v$,Tpo,Mpo,Epo,v_,uae,Cpo,wpo,F$,Apo,ypo,Lpo,F_,bae,xpo,kpo,T$,Spo,Rpo,Bpo,T_,vae,Ppo,$po,M$,Ipo,qpo,Npo,M_,Fae,jpo,Dpo,E$,Gpo,Opo,Vpo,E_,Tae,Xpo,zpo,C$,Qpo,Wpo,Hpo,C_,Mae,Upo,Jpo,w$,Ypo,Kpo,Zpo,w_,Eae,e_o,o_o,A$,r_o,t_o,a_o,A_,Cae,n_o,s_o,y$,l_o,i_o,d_o,y_,wae,c_o,f_o,L$,m_o,g_o,h_o,L_,Aae,p_o,__o,x$,u_o,b_o,v_o,x_,yae,F_o,T_o,k$,M_o,E_o,C_o,k_,Lae,w_o,A_o,S$,y_o,L_o,x_o,S_,xae,k_o,S_o,R$,R_o,B_o,P_o,R_,kae,$_o,I_o,B$,q_o,N_o,j_o,B_,Sae,D_o,G_o,P$,O_o,V_o,X_o,P_,Rae,z_o,Q_o,$$,W_o,H_o,U_o,$_,Bae,J_o,Y_o,I$,K_o,Z_o,euo,I_,Pae,ouo,ruo,q$,tuo,auo,nuo,q_,$ae,suo,luo,N$,iuo,duo,cuo,N_,Iae,fuo,muo,j$,guo,huo,puo,j_,qae,_uo,uuo,D$,buo,vuo,Fuo,D_,Nae,Tuo,Muo,G$,Euo,Cuo,wuo,G_,jae,Auo,yuo,O$,Luo,xuo,kuo,O_,Dae,Suo,Ruo,V$,Buo,Puo,$uo,V_,Gae,Iuo,quo,X$,Nuo,juo,Duo,X_,Oae,Guo,Ouo,z$,Vuo,Xuo,zuo,z_,Vae,Quo,Wuo,Q$,Huo,Uuo,Juo,Q_,Xae,Yuo,Kuo,W$,Zuo,e1o,o1o,W_,zae,r1o,t1o,H$,a1o,n1o,s1o,H_,Qae,l1o,i1o,U$,d1o,c1o,f1o,U_,Wae,m1o,g1o,J$,h1o,p1o,_1o,J_,Hae,u1o,b1o,Y$,v1o,F1o,T1o,Y_,Uae,M1o,E1o,K$,C1o,w1o,A1o,K_,Jae,y1o,L1o,Z$,x1o,k1o,S1o,Z_,R1o,Yae,B1o,P1o,Kae,$1o,I1o,Zae,q1o,N1o,Bw,MPe,id,eu,ene,Pw,j1o,one,D1o,EPe,Yo,$w,G1o,dd,O1o,eI,V1o,X1o,oI,z1o,Q1o,W1o,Iw,H1o,rne,U1o,J1o,Y1o,zr,qw,K1o,tne,Z1o,e4o,cd,o4o,ane,r4o,t4o,rI,a4o,n4o,s4o,nne,l4o,i4o,Nw,d4o,je,jw,c4o,sne,f4o,m4o,za,g4o,lne,h4o,p4o,ine,_4o,u4o,dne,b4o,v4o,F4o,S,ou,cne,T4o,M4o,tI,E4o,C4o,w4o,ru,fne,A4o,y4o,aI,L4o,x4o,k4o,tu,mne,S4o,R4o,nI,B4o,P4o,$4o,au,gne,I4o,q4o,sI,N4o,j4o,D4o,nu,hne,G4o,O4o,lI,V4o,X4o,z4o,su,pne,Q4o,W4o,iI,H4o,U4o,J4o,lu,_ne,Y4o,K4o,dI,Z4o,ebo,obo,iu,une,rbo,tbo,cI,abo,nbo,sbo,du,bne,lbo,ibo,fI,dbo,cbo,fbo,cu,vne,mbo,gbo,mI,hbo,pbo,_bo,fu,Fne,ubo,bbo,gI,vbo,Fbo,Tbo,mu,Tne,Mbo,Ebo,hI,Cbo,wbo,Abo,gu,Mne,ybo,Lbo,pI,xbo,kbo,Sbo,hu,Ene,Rbo,Bbo,_I,Pbo,$bo,Ibo,pu,Cne,qbo,Nbo,uI,jbo,Dbo,Gbo,_u,wne,Obo,Vbo,bI,Xbo,zbo,Qbo,uu,Ane,Wbo,Hbo,vI,Ubo,Jbo,Ybo,bu,yne,Kbo,Zbo,FI,e2o,o2o,r2o,vu,Lne,t2o,a2o,TI,n2o,s2o,l2o,Fu,xne,i2o,d2o,MI,c2o,f2o,m2o,Tu,kne,g2o,h2o,EI,p2o,_2o,u2o,Mu,Sne,b2o,v2o,CI,F2o,T2o,M2o,Eu,Rne,E2o,C2o,wI,w2o,A2o,y2o,Cu,Bne,L2o,x2o,AI,k2o,S2o,R2o,wu,Pne,B2o,P2o,yI,$2o,I2o,q2o,Au,$ne,N2o,j2o,LI,D2o,G2o,O2o,yu,Ine,V2o,X2o,xI,z2o,Q2o,W2o,Lu,qne,H2o,U2o,kI,J2o,Y2o,K2o,xu,Nne,Z2o,e5o,SI,o5o,r5o,t5o,ku,jne,a5o,n5o,RI,s5o,l5o,i5o,Su,Dne,d5o,c5o,BI,f5o,m5o,g5o,Ru,Gne,h5o,p5o,PI,_5o,u5o,b5o,Bu,One,v5o,F5o,$I,T5o,M5o,E5o,Pu,Vne,C5o,w5o,II,A5o,y5o,L5o,$u,Xne,x5o,k5o,qI,S5o,R5o,B5o,Iu,zne,P5o,$5o,NI,I5o,q5o,N5o,qu,Qne,j5o,D5o,jI,G5o,O5o,V5o,Nu,Wne,X5o,z5o,DI,Q5o,W5o,H5o,ju,Hne,U5o,J5o,GI,Y5o,K5o,Z5o,Du,e3o,Une,o3o,r3o,Jne,t3o,a3o,Yne,n3o,s3o,Dw,CPe,fd,Gu,Kne,Gw,l3o,Zne,i3o,wPe,Ko,Ow,d3o,md,c3o,OI,f3o,m3o,VI,g3o,h3o,p3o,Vw,_3o,ese,u3o,b3o,v3o,Qr,Xw,F3o,ose,T3o,M3o,gd,E3o,rse,C3o,w3o,XI,A3o,y3o,L3o,tse,x3o,k3o,zw,S3o,De,Qw,R3o,ase,B3o,P3o,Qa,$3o,nse,I3o,q3o,sse,N3o,j3o,lse,D3o,G3o,O3o,$,Ou,ise,V3o,X3o,zI,z3o,Q3o,W3o,Vu,dse,H3o,U3o,QI,J3o,Y3o,K3o,Xu,cse,Z3o,e6o,WI,o6o,r6o,t6o,zu,fse,a6o,n6o,HI,s6o,l6o,i6o,Qu,mse,d6o,c6o,UI,f6o,m6o,g6o,Wu,gse,h6o,p6o,JI,_6o,u6o,b6o,Hu,hse,v6o,F6o,YI,T6o,M6o,E6o,Uu,pse,C6o,w6o,KI,A6o,y6o,L6o,Ju,_se,x6o,k6o,ZI,S6o,R6o,B6o,Yu,use,P6o,$6o,eq,I6o,q6o,N6o,Ku,bse,j6o,D6o,oq,G6o,O6o,V6o,Zu,vse,X6o,z6o,rq,Q6o,W6o,H6o,e1,Fse,U6o,J6o,tq,Y6o,K6o,Z6o,o1,Tse,evo,ovo,aq,rvo,tvo,avo,r1,Mse,nvo,svo,nq,lvo,ivo,dvo,t1,Ese,cvo,fvo,sq,mvo,gvo,hvo,a1,Cse,pvo,_vo,lq,uvo,bvo,vvo,n1,wse,Fvo,Tvo,iq,Mvo,Evo,Cvo,s1,Ase,wvo,Avo,dq,yvo,Lvo,xvo,l1,yse,kvo,Svo,cq,Rvo,Bvo,Pvo,i1,Lse,$vo,Ivo,fq,qvo,Nvo,jvo,d1,xse,Dvo,Gvo,mq,Ovo,Vvo,Xvo,c1,kse,zvo,Qvo,gq,Wvo,Hvo,Uvo,f1,Sse,Jvo,Yvo,hq,Kvo,Zvo,eFo,m1,Rse,oFo,rFo,pq,tFo,aFo,nFo,g1,Bse,sFo,lFo,_q,iFo,dFo,cFo,h1,Pse,fFo,mFo,uq,gFo,hFo,pFo,p1,$se,_Fo,uFo,bq,bFo,vFo,FFo,_1,Ise,TFo,MFo,vq,EFo,CFo,wFo,u1,qse,AFo,yFo,Fq,LFo,xFo,kFo,b1,Nse,SFo,RFo,Tq,BFo,PFo,$Fo,v1,jse,IFo,qFo,Mq,NFo,jFo,DFo,F1,Dse,GFo,OFo,Eq,VFo,XFo,zFo,T1,Gse,QFo,WFo,Cq,HFo,UFo,JFo,M1,Ose,YFo,KFo,wq,ZFo,eTo,oTo,E1,rTo,Vse,tTo,aTo,Xse,nTo,sTo,zse,lTo,iTo,Ww,APe,hd,C1,Qse,Hw,dTo,Wse,cTo,yPe,Zo,Uw,fTo,pd,mTo,Aq,gTo,hTo,yq,pTo,_To,uTo,Jw,bTo,Hse,vTo,FTo,TTo,Wr,Yw,MTo,Use,ETo,CTo,_d,wTo,Jse,ATo,yTo,Lq,LTo,xTo,kTo,Yse,STo,RTo,Kw,BTo,Ge,Zw,PTo,Kse,$To,ITo,Wa,qTo,Zse,NTo,jTo,ele,DTo,GTo,ole,OTo,VTo,XTo,I,w1,rle,zTo,QTo,xq,WTo,HTo,UTo,A1,tle,JTo,YTo,kq,KTo,ZTo,eMo,y1,ale,oMo,rMo,Sq,tMo,aMo,nMo,L1,nle,sMo,lMo,Rq,iMo,dMo,cMo,x1,sle,fMo,mMo,Bq,gMo,hMo,pMo,k1,lle,_Mo,uMo,Pq,bMo,vMo,FMo,S1,ile,TMo,MMo,$q,EMo,CMo,wMo,R1,dle,AMo,yMo,Iq,LMo,xMo,kMo,B1,cle,SMo,RMo,qq,BMo,PMo,$Mo,P1,fle,IMo,qMo,Nq,NMo,jMo,DMo,$1,mle,GMo,OMo,jq,VMo,XMo,zMo,I1,gle,QMo,WMo,Dq,HMo,UMo,JMo,q1,hle,YMo,KMo,Gq,ZMo,eEo,oEo,N1,ple,rEo,tEo,Oq,aEo,nEo,sEo,j1,_le,lEo,iEo,Vq,dEo,cEo,fEo,D1,ule,mEo,gEo,Xq,hEo,pEo,_Eo,G1,ble,uEo,bEo,zq,vEo,FEo,TEo,O1,vle,MEo,EEo,Qq,CEo,wEo,AEo,V1,Fle,yEo,LEo,Wq,xEo,kEo,SEo,X1,Tle,REo,BEo,Hq,PEo,$Eo,IEo,z1,Mle,qEo,NEo,Uq,jEo,DEo,GEo,Q1,Ele,OEo,VEo,Jq,XEo,zEo,QEo,W1,Cle,WEo,HEo,Yq,UEo,JEo,YEo,H1,wle,KEo,ZEo,Kq,eCo,oCo,rCo,U1,Ale,tCo,aCo,Zq,nCo,sCo,lCo,J1,yle,iCo,dCo,eN,cCo,fCo,mCo,Y1,Lle,gCo,hCo,oN,pCo,_Co,uCo,K1,xle,bCo,vCo,rN,FCo,TCo,MCo,Z1,kle,ECo,CCo,tN,wCo,ACo,yCo,e4,Sle,LCo,xCo,aN,kCo,SCo,RCo,o4,Rle,BCo,PCo,Ble,$Co,ICo,qCo,r4,Ple,NCo,jCo,nN,DCo,GCo,OCo,t4,$le,VCo,XCo,sN,zCo,QCo,WCo,a4,Ile,HCo,UCo,lN,JCo,YCo,KCo,n4,qle,ZCo,ewo,iN,owo,rwo,two,s4,awo,Nle,nwo,swo,jle,lwo,iwo,Dle,dwo,cwo,eA,LPe,ud,l4,Gle,oA,fwo,Ole,mwo,xPe,er,rA,gwo,bd,hwo,dN,pwo,_wo,cN,uwo,bwo,vwo,tA,Fwo,Vle,Two,Mwo,Ewo,Hr,aA,Cwo,Xle,wwo,Awo,vd,ywo,zle,Lwo,xwo,fN,kwo,Swo,Rwo,Qle,Bwo,Pwo,nA,$wo,Oe,sA,Iwo,Wle,qwo,Nwo,Ha,jwo,Hle,Dwo,Gwo,Ule,Owo,Vwo,Jle,Xwo,zwo,Qwo,ne,i4,Yle,Wwo,Hwo,mN,Uwo,Jwo,Ywo,d4,Kle,Kwo,Zwo,gN,eAo,oAo,rAo,c4,Zle,tAo,aAo,hN,nAo,sAo,lAo,f4,eie,iAo,dAo,pN,cAo,fAo,mAo,m4,oie,gAo,hAo,_N,pAo,_Ao,uAo,g4,rie,bAo,vAo,uN,FAo,TAo,MAo,h4,tie,EAo,CAo,bN,wAo,AAo,yAo,p4,aie,LAo,xAo,vN,kAo,SAo,RAo,_4,nie,BAo,PAo,FN,$Ao,IAo,qAo,u4,sie,NAo,jAo,TN,DAo,GAo,OAo,b4,lie,VAo,XAo,MN,zAo,QAo,WAo,v4,iie,HAo,UAo,EN,JAo,YAo,KAo,F4,die,ZAo,e0o,CN,o0o,r0o,t0o,T4,cie,a0o,n0o,wN,s0o,l0o,i0o,M4,fie,d0o,c0o,AN,f0o,m0o,g0o,E4,mie,h0o,p0o,yN,_0o,u0o,b0o,C4,gie,v0o,F0o,LN,T0o,M0o,E0o,w4,C0o,hie,w0o,A0o,pie,y0o,L0o,_ie,x0o,k0o,lA,kPe,Fd,A4,uie,iA,S0o,bie,R0o,SPe,or,dA,B0o,Td,P0o,xN,$0o,I0o,kN,q0o,N0o,j0o,cA,D0o,vie,G0o,O0o,V0o,Ur,fA,X0o,Fie,z0o,Q0o,Md,W0o,Tie,H0o,U0o,SN,J0o,Y0o,K0o,Mie,Z0o,eyo,mA,oyo,Ve,gA,ryo,Eie,tyo,ayo,Ua,nyo,Cie,syo,lyo,wie,iyo,dyo,Aie,cyo,fyo,myo,y,y4,yie,gyo,hyo,RN,pyo,_yo,uyo,L4,Lie,byo,vyo,BN,Fyo,Tyo,Myo,x4,xie,Eyo,Cyo,PN,wyo,Ayo,yyo,k4,kie,Lyo,xyo,$N,kyo,Syo,Ryo,S4,Sie,Byo,Pyo,IN,$yo,Iyo,qyo,R4,Rie,Nyo,jyo,qN,Dyo,Gyo,Oyo,B4,Bie,Vyo,Xyo,NN,zyo,Qyo,Wyo,P4,Pie,Hyo,Uyo,jN,Jyo,Yyo,Kyo,$4,$ie,Zyo,e8o,DN,o8o,r8o,t8o,I4,Iie,a8o,n8o,GN,s8o,l8o,i8o,q4,qie,d8o,c8o,ON,f8o,m8o,g8o,N4,Nie,h8o,p8o,VN,_8o,u8o,b8o,j4,jie,v8o,F8o,XN,T8o,M8o,E8o,D4,Die,C8o,w8o,zN,A8o,y8o,L8o,G4,Gie,x8o,k8o,QN,S8o,R8o,B8o,O4,Oie,P8o,$8o,WN,I8o,q8o,N8o,V4,Vie,j8o,D8o,HN,G8o,O8o,V8o,X4,Xie,X8o,z8o,UN,Q8o,W8o,H8o,z4,zie,U8o,J8o,JN,Y8o,K8o,Z8o,Q4,Qie,eLo,oLo,YN,rLo,tLo,aLo,W4,Wie,nLo,sLo,KN,lLo,iLo,dLo,H4,Hie,cLo,fLo,ZN,mLo,gLo,hLo,U4,Uie,pLo,_Lo,ej,uLo,bLo,vLo,J4,Jie,FLo,TLo,oj,MLo,ELo,CLo,Y4,Yie,wLo,ALo,rj,yLo,LLo,xLo,K4,Kie,kLo,SLo,tj,RLo,BLo,PLo,Z4,Zie,$Lo,ILo,aj,qLo,NLo,jLo,eb,ede,DLo,GLo,nj,OLo,VLo,XLo,ob,ode,zLo,QLo,sj,WLo,HLo,ULo,rb,rde,JLo,YLo,lj,KLo,ZLo,e7o,tb,tde,o7o,r7o,ij,t7o,a7o,n7o,ab,ade,s7o,l7o,dj,i7o,d7o,c7o,nb,nde,f7o,m7o,cj,g7o,h7o,p7o,sb,sde,_7o,u7o,fj,b7o,v7o,F7o,lb,lde,T7o,M7o,mj,E7o,C7o,w7o,ib,ide,A7o,y7o,gj,L7o,x7o,k7o,db,dde,S7o,R7o,hj,B7o,P7o,$7o,cb,cde,I7o,q7o,pj,N7o,j7o,D7o,fb,fde,G7o,O7o,_j,V7o,X7o,z7o,mb,mde,Q7o,W7o,uj,H7o,U7o,J7o,gb,gde,Y7o,K7o,bj,Z7o,e9o,o9o,hb,hde,r9o,t9o,vj,a9o,n9o,s9o,pb,pde,l9o,i9o,Fj,d9o,c9o,f9o,_b,_de,m9o,g9o,Tj,h9o,p9o,_9o,ub,ude,u9o,b9o,Mj,v9o,F9o,T9o,bb,bde,M9o,E9o,Ej,C9o,w9o,A9o,vb,vde,y9o,L9o,Cj,x9o,k9o,S9o,Fb,R9o,Fde,B9o,P9o,Tde,$9o,I9o,Mde,q9o,N9o,hA,RPe,Ed,Tb,Ede,pA,j9o,Cde,D9o,BPe,rr,_A,G9o,Cd,O9o,wj,V9o,X9o,Aj,z9o,Q9o,W9o,uA,H9o,wde,U9o,J9o,Y9o,Jr,bA,K9o,Ade,Z9o,exo,wd,oxo,yde,rxo,txo,yj,axo,nxo,sxo,Lde,lxo,ixo,vA,dxo,Xe,FA,cxo,xde,fxo,mxo,Ja,gxo,kde,hxo,pxo,Sde,_xo,uxo,Rde,bxo,vxo,Fxo,G,Mb,Bde,Txo,Mxo,Lj,Exo,Cxo,wxo,Eb,Pde,Axo,yxo,xj,Lxo,xxo,kxo,Cb,$de,Sxo,Rxo,kj,Bxo,Pxo,$xo,wb,Ide,Ixo,qxo,Sj,Nxo,jxo,Dxo,Ab,qde,Gxo,Oxo,Rj,Vxo,Xxo,zxo,yb,Nde,Qxo,Wxo,Bj,Hxo,Uxo,Jxo,Lb,jde,Yxo,Kxo,Pj,Zxo,eko,oko,xb,Dde,rko,tko,$j,ako,nko,sko,kb,Gde,lko,iko,Ij,dko,cko,fko,Sb,Ode,mko,gko,qj,hko,pko,_ko,Rb,Vde,uko,bko,Nj,vko,Fko,Tko,Bb,Xde,Mko,Eko,jj,Cko,wko,Ako,Pb,zde,yko,Lko,Dj,xko,kko,Sko,$b,Qde,Rko,Bko,Gj,Pko,$ko,Iko,Ib,Wde,qko,Nko,Oj,jko,Dko,Gko,qb,Hde,Oko,Vko,Vj,Xko,zko,Qko,Nb,Ude,Wko,Hko,Xj,Uko,Jko,Yko,jb,Jde,Kko,Zko,zj,eSo,oSo,rSo,Db,Yde,tSo,aSo,Qj,nSo,sSo,lSo,Gb,Kde,iSo,dSo,Wj,cSo,fSo,mSo,Ob,Zde,gSo,hSo,Hj,pSo,_So,uSo,Vb,ece,bSo,vSo,Uj,FSo,TSo,MSo,Xb,oce,ESo,CSo,Jj,wSo,ASo,ySo,zb,rce,LSo,xSo,Yj,kSo,SSo,RSo,Qb,tce,BSo,PSo,Kj,$So,ISo,qSo,Wb,ace,NSo,jSo,Zj,DSo,GSo,OSo,Hb,nce,VSo,XSo,eD,zSo,QSo,WSo,Ub,sce,HSo,USo,oD,JSo,YSo,KSo,Jb,ZSo,lce,eRo,oRo,ice,rRo,tRo,dce,aRo,nRo,TA,PPe,Ad,Yb,cce,MA,sRo,fce,lRo,$Pe,tr,EA,iRo,yd,dRo,rD,cRo,fRo,tD,mRo,gRo,hRo,CA,pRo,mce,_Ro,uRo,bRo,Yr,wA,vRo,gce,FRo,TRo,Ld,MRo,hce,ERo,CRo,aD,wRo,ARo,yRo,pce,LRo,xRo,AA,kRo,ze,yA,SRo,_ce,RRo,BRo,Ya,PRo,uce,$Ro,IRo,bce,qRo,NRo,vce,jRo,DRo,GRo,da,Kb,Fce,ORo,VRo,nD,XRo,zRo,QRo,Zb,Tce,WRo,HRo,sD,URo,JRo,YRo,e2,Mce,KRo,ZRo,lD,eBo,oBo,rBo,o2,Ece,tBo,aBo,iD,nBo,sBo,lBo,r2,Cce,iBo,dBo,dD,cBo,fBo,mBo,t2,gBo,wce,hBo,pBo,Ace,_Bo,uBo,yce,bBo,vBo,LA,IPe,xd,a2,Lce,xA,FBo,xce,TBo,qPe,ar,kA,MBo,kd,EBo,cD,CBo,wBo,fD,ABo,yBo,LBo,SA,xBo,kce,kBo,SBo,RBo,Kr,RA,BBo,Sce,PBo,$Bo,Sd,IBo,Rce,qBo,NBo,mD,jBo,DBo,GBo,Bce,OBo,VBo,BA,XBo,Qe,PA,zBo,Pce,QBo,WBo,Ka,HBo,$ce,UBo,JBo,Ice,YBo,KBo,qce,ZBo,ePo,oPo,j,n2,Nce,rPo,tPo,gD,aPo,nPo,sPo,s2,jce,lPo,iPo,hD,dPo,cPo,fPo,l2,Dce,mPo,gPo,pD,hPo,pPo,_Po,i2,Gce,uPo,bPo,_D,vPo,FPo,TPo,d2,Oce,MPo,EPo,uD,CPo,wPo,APo,c2,Vce,yPo,LPo,bD,xPo,kPo,SPo,f2,Xce,RPo,BPo,vD,PPo,$Po,IPo,m2,zce,qPo,NPo,FD,jPo,DPo,GPo,g2,Qce,OPo,VPo,TD,XPo,zPo,QPo,h2,Wce,WPo,HPo,MD,UPo,JPo,YPo,p2,Hce,KPo,ZPo,ED,e$o,o$o,r$o,_2,Uce,t$o,a$o,CD,n$o,s$o,l$o,u2,Jce,i$o,d$o,wD,c$o,f$o,m$o,b2,Yce,g$o,h$o,AD,p$o,_$o,u$o,v2,Kce,b$o,v$o,yD,F$o,T$o,M$o,F2,Zce,E$o,C$o,LD,w$o,A$o,y$o,T2,efe,L$o,x$o,xD,k$o,S$o,R$o,M2,ofe,B$o,P$o,kD,$$o,I$o,q$o,E2,rfe,N$o,j$o,SD,D$o,G$o,O$o,C2,tfe,V$o,X$o,RD,z$o,Q$o,W$o,w2,afe,H$o,U$o,BD,J$o,Y$o,K$o,A2,nfe,Z$o,eIo,PD,oIo,rIo,tIo,y2,sfe,aIo,nIo,$D,sIo,lIo,iIo,L2,lfe,dIo,cIo,ID,fIo,mIo,gIo,x2,ife,hIo,pIo,qD,_Io,uIo,bIo,k2,dfe,vIo,FIo,ND,TIo,MIo,EIo,S2,cfe,CIo,wIo,jD,AIo,yIo,LIo,R2,ffe,xIo,kIo,DD,SIo,RIo,BIo,B2,mfe,PIo,$Io,GD,IIo,qIo,NIo,P2,gfe,jIo,DIo,OD,GIo,OIo,VIo,$2,hfe,XIo,zIo,VD,QIo,WIo,HIo,I2,pfe,UIo,JIo,XD,YIo,KIo,ZIo,q2,_fe,eqo,oqo,zD,rqo,tqo,aqo,N2,nqo,ufe,sqo,lqo,bfe,iqo,dqo,vfe,cqo,fqo,$A,NPe,Rd,j2,Ffe,IA,mqo,Tfe,gqo,jPe,nr,qA,hqo,Bd,pqo,QD,_qo,uqo,WD,bqo,vqo,Fqo,NA,Tqo,Mfe,Mqo,Eqo,Cqo,Zr,jA,wqo,Efe,Aqo,yqo,Pd,Lqo,Cfe,xqo,kqo,HD,Sqo,Rqo,Bqo,wfe,Pqo,$qo,DA,Iqo,We,GA,qqo,Afe,Nqo,jqo,Za,Dqo,yfe,Gqo,Oqo,Lfe,Vqo,Xqo,xfe,zqo,Qqo,Wqo,R,D2,kfe,Hqo,Uqo,UD,Jqo,Yqo,Kqo,G2,Sfe,Zqo,eNo,JD,oNo,rNo,tNo,O2,Rfe,aNo,nNo,YD,sNo,lNo,iNo,V2,Bfe,dNo,cNo,KD,fNo,mNo,gNo,X2,Pfe,hNo,pNo,ZD,_No,uNo,bNo,z2,$fe,vNo,FNo,eG,TNo,MNo,ENo,Q2,Ife,CNo,wNo,oG,ANo,yNo,LNo,W2,qfe,xNo,kNo,rG,SNo,RNo,BNo,H2,Nfe,PNo,$No,tG,INo,qNo,NNo,U2,jfe,jNo,DNo,aG,GNo,ONo,VNo,J2,Dfe,XNo,zNo,nG,QNo,WNo,HNo,Y2,Gfe,UNo,JNo,sG,YNo,KNo,ZNo,K2,Ofe,ejo,ojo,lG,rjo,tjo,ajo,Z2,Vfe,njo,sjo,iG,ljo,ijo,djo,e5,Xfe,cjo,fjo,dG,mjo,gjo,hjo,o5,zfe,pjo,_jo,cG,ujo,bjo,vjo,r5,Qfe,Fjo,Tjo,fG,Mjo,Ejo,Cjo,t5,Wfe,wjo,Ajo,mG,yjo,Ljo,xjo,a5,Hfe,kjo,Sjo,gG,Rjo,Bjo,Pjo,n5,Ufe,$jo,Ijo,hG,qjo,Njo,jjo,s5,Jfe,Djo,Gjo,pG,Ojo,Vjo,Xjo,l5,Yfe,zjo,Qjo,_G,Wjo,Hjo,Ujo,i5,Kfe,Jjo,Yjo,uG,Kjo,Zjo,eDo,d5,Zfe,oDo,rDo,bG,tDo,aDo,nDo,c5,eme,sDo,lDo,vG,iDo,dDo,cDo,f5,ome,fDo,mDo,FG,gDo,hDo,pDo,m5,rme,_Do,uDo,TG,bDo,vDo,FDo,g5,tme,TDo,MDo,MG,EDo,CDo,wDo,h5,ame,ADo,yDo,EG,LDo,xDo,kDo,p5,nme,SDo,RDo,CG,BDo,PDo,$Do,_5,sme,IDo,qDo,wG,NDo,jDo,DDo,u5,lme,GDo,ODo,AG,VDo,XDo,zDo,b5,ime,QDo,WDo,yG,HDo,UDo,JDo,v5,dme,YDo,KDo,LG,ZDo,eGo,oGo,F5,cme,rGo,tGo,xG,aGo,nGo,sGo,T5,fme,lGo,iGo,kG,dGo,cGo,fGo,M5,mme,mGo,gGo,SG,hGo,pGo,_Go,E5,gme,uGo,bGo,RG,vGo,FGo,TGo,C5,hme,MGo,EGo,BG,CGo,wGo,AGo,w5,yGo,pme,LGo,xGo,_me,kGo,SGo,ume,RGo,BGo,OA,DPe,$d,A5,bme,VA,PGo,vme,$Go,GPe,sr,XA,IGo,Id,qGo,PG,NGo,jGo,$G,DGo,GGo,OGo,zA,VGo,Fme,XGo,zGo,QGo,et,QA,WGo,Tme,HGo,UGo,qd,JGo,Mme,YGo,KGo,IG,ZGo,eOo,oOo,Eme,rOo,tOo,WA,aOo,He,HA,nOo,Cme,sOo,lOo,en,iOo,wme,dOo,cOo,Ame,fOo,mOo,yme,gOo,hOo,pOo,Lme,y5,xme,_Oo,uOo,qG,bOo,vOo,FOo,L5,TOo,kme,MOo,EOo,Sme,COo,wOo,Rme,AOo,yOo,UA,OPe,Nd,x5,Bme,JA,LOo,Pme,xOo,VPe,lr,YA,kOo,jd,SOo,NG,ROo,BOo,jG,POo,$Oo,IOo,KA,qOo,$me,NOo,jOo,DOo,ot,ZA,GOo,Ime,OOo,VOo,Dd,XOo,qme,zOo,QOo,DG,WOo,HOo,UOo,Nme,JOo,YOo,e0,KOo,Ue,o0,ZOo,jme,eVo,oVo,on,rVo,Dme,tVo,aVo,Gme,nVo,sVo,Ome,lVo,iVo,dVo,ce,k5,Vme,cVo,fVo,GG,mVo,gVo,hVo,S5,Xme,pVo,_Vo,OG,uVo,bVo,vVo,R5,zme,FVo,TVo,VG,MVo,EVo,CVo,Us,Qme,wVo,AVo,XG,yVo,LVo,zG,xVo,kVo,SVo,B5,Wme,RVo,BVo,QG,PVo,$Vo,IVo,ma,Hme,qVo,NVo,WG,jVo,DVo,HG,GVo,OVo,UG,VVo,XVo,zVo,P5,Ume,QVo,WVo,JG,HVo,UVo,JVo,$5,Jme,YVo,KVo,YG,ZVo,eXo,oXo,I5,Yme,rXo,tXo,KG,aXo,nXo,sXo,q5,Kme,lXo,iXo,ZG,dXo,cXo,fXo,N5,Zme,mXo,gXo,eO,hXo,pXo,_Xo,j5,ege,uXo,bXo,oO,vXo,FXo,TXo,D5,oge,MXo,EXo,rO,CXo,wXo,AXo,G5,yXo,rge,LXo,xXo,tge,kXo,SXo,age,RXo,BXo,r0,XPe,Gd,O5,nge,t0,PXo,sge,$Xo,zPe,ir,a0,IXo,Od,qXo,tO,NXo,jXo,aO,DXo,GXo,OXo,n0,VXo,lge,XXo,zXo,QXo,rt,s0,WXo,ige,HXo,UXo,Vd,JXo,dge,YXo,KXo,nO,ZXo,ezo,ozo,cge,rzo,tzo,l0,azo,Je,i0,nzo,fge,szo,lzo,rn,izo,mge,dzo,czo,gge,fzo,mzo,hge,gzo,hzo,pzo,pge,V5,_ge,_zo,uzo,sO,bzo,vzo,Fzo,X5,Tzo,uge,Mzo,Ezo,bge,Czo,wzo,vge,Azo,yzo,d0,QPe,Xd,z5,Fge,c0,Lzo,Tge,xzo,WPe,dr,f0,kzo,zd,Szo,lO,Rzo,Bzo,iO,Pzo,$zo,Izo,m0,qzo,Mge,Nzo,jzo,Dzo,tt,g0,Gzo,Ege,Ozo,Vzo,Qd,Xzo,Cge,zzo,Qzo,dO,Wzo,Hzo,Uzo,wge,Jzo,Yzo,h0,Kzo,Ye,p0,Zzo,Age,eQo,oQo,tn,rQo,yge,tQo,aQo,Lge,nQo,sQo,xge,lQo,iQo,dQo,Re,Q5,kge,cQo,fQo,cO,mQo,gQo,hQo,W5,Sge,pQo,_Qo,fO,uQo,bQo,vQo,H5,Rge,FQo,TQo,mO,MQo,EQo,CQo,U5,Bge,wQo,AQo,gO,yQo,LQo,xQo,J5,Pge,kQo,SQo,hO,RQo,BQo,PQo,Y5,$ge,$Qo,IQo,pO,qQo,NQo,jQo,K5,Ige,DQo,GQo,_O,OQo,VQo,XQo,Z5,qge,zQo,QQo,uO,WQo,HQo,UQo,e3,JQo,Nge,YQo,KQo,jge,ZQo,eWo,Dge,oWo,rWo,_0,HPe,Wd,o3,Gge,u0,tWo,Oge,aWo,UPe,cr,b0,nWo,Hd,sWo,bO,lWo,iWo,vO,dWo,cWo,fWo,v0,mWo,Vge,gWo,hWo,pWo,at,F0,_Wo,Xge,uWo,bWo,Ud,vWo,zge,FWo,TWo,FO,MWo,EWo,CWo,Qge,wWo,AWo,T0,yWo,Ke,M0,LWo,Wge,xWo,kWo,an,SWo,Hge,RWo,BWo,Uge,PWo,$Wo,Jge,IWo,qWo,NWo,nn,r3,Yge,jWo,DWo,TO,GWo,OWo,VWo,t3,Kge,XWo,zWo,MO,QWo,WWo,HWo,a3,Zge,UWo,JWo,EO,YWo,KWo,ZWo,n3,ehe,eHo,oHo,CO,rHo,tHo,aHo,s3,nHo,ohe,sHo,lHo,rhe,iHo,dHo,the,cHo,fHo,E0,JPe,Jd,l3,ahe,C0,mHo,nhe,gHo,YPe,fr,w0,hHo,Yd,pHo,wO,_Ho,uHo,AO,bHo,vHo,FHo,A0,THo,she,MHo,EHo,CHo,nt,y0,wHo,lhe,AHo,yHo,Kd,LHo,ihe,xHo,kHo,yO,SHo,RHo,BHo,dhe,PHo,$Ho,L0,IHo,Ze,x0,qHo,che,NHo,jHo,sn,DHo,fhe,GHo,OHo,mhe,VHo,XHo,ghe,zHo,QHo,WHo,Be,i3,hhe,HHo,UHo,LO,JHo,YHo,KHo,d3,phe,ZHo,eUo,xO,oUo,rUo,tUo,c3,_he,aUo,nUo,kO,sUo,lUo,iUo,f3,uhe,dUo,cUo,SO,fUo,mUo,gUo,m3,bhe,hUo,pUo,RO,_Uo,uUo,bUo,g3,vhe,vUo,FUo,BO,TUo,MUo,EUo,h3,Fhe,CUo,wUo,PO,AUo,yUo,LUo,p3,The,xUo,kUo,$O,SUo,RUo,BUo,_3,PUo,Mhe,$Uo,IUo,Ehe,qUo,NUo,Che,jUo,DUo,k0,KPe,Zd,u3,whe,S0,GUo,Ahe,OUo,ZPe,mr,R0,VUo,ec,XUo,IO,zUo,QUo,qO,WUo,HUo,UUo,B0,JUo,yhe,YUo,KUo,ZUo,st,P0,eJo,Lhe,oJo,rJo,oc,tJo,xhe,aJo,nJo,NO,sJo,lJo,iJo,khe,dJo,cJo,$0,fJo,eo,I0,mJo,She,gJo,hJo,ln,pJo,Rhe,_Jo,uJo,Bhe,bJo,vJo,Phe,FJo,TJo,MJo,q0,b3,$he,EJo,CJo,jO,wJo,AJo,yJo,v3,Ihe,LJo,xJo,DO,kJo,SJo,RJo,F3,BJo,qhe,PJo,$Jo,Nhe,IJo,qJo,jhe,NJo,jJo,N0,e$e,rc,T3,Dhe,j0,DJo,Ghe,GJo,o$e,gr,D0,OJo,tc,VJo,GO,XJo,zJo,OO,QJo,WJo,HJo,G0,UJo,Ohe,JJo,YJo,KJo,lt,O0,ZJo,Vhe,eYo,oYo,ac,rYo,Xhe,tYo,aYo,VO,nYo,sYo,lYo,zhe,iYo,dYo,V0,cYo,oo,X0,fYo,Qhe,mYo,gYo,dn,hYo,Whe,pYo,_Yo,Hhe,uYo,bYo,Uhe,vYo,FYo,TYo,cn,M3,Jhe,MYo,EYo,XO,CYo,wYo,AYo,E3,Yhe,yYo,LYo,zO,xYo,kYo,SYo,C3,Khe,RYo,BYo,QO,PYo,$Yo,IYo,w3,Zhe,qYo,NYo,WO,jYo,DYo,GYo,A3,OYo,epe,VYo,XYo,ope,zYo,QYo,rpe,WYo,HYo,z0,r$e,nc,y3,tpe,Q0,UYo,ape,JYo,t$e,hr,W0,YYo,sc,KYo,HO,ZYo,eKo,UO,oKo,rKo,tKo,H0,aKo,npe,nKo,sKo,lKo,it,U0,iKo,spe,dKo,cKo,lc,fKo,lpe,mKo,gKo,JO,hKo,pKo,_Ko,ipe,uKo,bKo,J0,vKo,ro,Y0,FKo,dpe,TKo,MKo,fn,EKo,cpe,CKo,wKo,fpe,AKo,yKo,mpe,LKo,xKo,kKo,ic,L3,gpe,SKo,RKo,YO,BKo,PKo,$Ko,x3,hpe,IKo,qKo,KO,NKo,jKo,DKo,k3,ppe,GKo,OKo,ZO,VKo,XKo,zKo,S3,QKo,_pe,WKo,HKo,upe,UKo,JKo,bpe,YKo,KKo,K0,a$e,dc,R3,vpe,Z0,ZKo,Fpe,eZo,n$e,pr,ey,oZo,cc,rZo,eV,tZo,aZo,oV,nZo,sZo,lZo,oy,iZo,Tpe,dZo,cZo,fZo,dt,ry,mZo,Mpe,gZo,hZo,fc,pZo,Epe,_Zo,uZo,rV,bZo,vZo,FZo,Cpe,TZo,MZo,ty,EZo,to,ay,CZo,wpe,wZo,AZo,mn,yZo,Ape,LZo,xZo,ype,kZo,SZo,Lpe,RZo,BZo,PZo,xpe,B3,kpe,$Zo,IZo,tV,qZo,NZo,jZo,P3,DZo,Spe,GZo,OZo,Rpe,VZo,XZo,Bpe,zZo,QZo,ny,s$e,mc,$3,Ppe,sy,WZo,$pe,HZo,l$e,_r,ly,UZo,gc,JZo,aV,YZo,KZo,nV,ZZo,eer,oer,iy,rer,Ipe,ter,aer,ner,ct,dy,ser,qpe,ler,ier,hc,der,Npe,cer,fer,sV,mer,ger,her,jpe,per,_er,cy,uer,ao,fy,ber,Dpe,ver,Fer,gn,Ter,Gpe,Mer,Eer,Ope,Cer,wer,Vpe,Aer,yer,Ler,Xpe,I3,zpe,xer,ker,lV,Ser,Rer,Ber,q3,Per,Qpe,$er,Ier,Wpe,qer,Ner,Hpe,jer,Der,my,i$e,pc,N3,Upe,gy,Ger,Jpe,Oer,d$e,ur,hy,Ver,_c,Xer,iV,zer,Qer,dV,Wer,Her,Uer,py,Jer,Ype,Yer,Ker,Zer,ft,_y,eor,Kpe,oor,ror,uc,tor,Zpe,aor,nor,cV,sor,lor,ior,e_e,dor,cor,uy,mor,no,by,gor,o_e,hor,por,hn,_or,r_e,uor,bor,t_e,vor,For,a_e,Tor,Mor,Eor,pn,j3,n_e,Cor,wor,fV,Aor,yor,Lor,D3,s_e,xor,kor,mV,Sor,Ror,Bor,G3,l_e,Por,$or,gV,Ior,qor,Nor,O3,i_e,jor,Dor,hV,Gor,Oor,Vor,V3,Xor,d_e,zor,Qor,c_e,Wor,Hor,f_e,Uor,Jor,vy,c$e,bc,X3,m_e,Fy,Yor,g_e,Kor,f$e,br,Ty,Zor,vc,err,pV,orr,rrr,_V,trr,arr,nrr,My,srr,h_e,lrr,irr,drr,mt,Ey,crr,p_e,frr,mrr,Fc,grr,__e,hrr,prr,uV,_rr,urr,brr,u_e,vrr,Frr,Cy,Trr,so,wy,Mrr,b_e,Err,Crr,_n,wrr,v_e,Arr,yrr,F_e,Lrr,xrr,T_e,krr,Srr,Rrr,M_e,z3,E_e,Brr,Prr,bV,$rr,Irr,qrr,Q3,Nrr,C_e,jrr,Drr,w_e,Grr,Orr,A_e,Vrr,Xrr,Ay,m$e,Tc,W3,y_e,yy,zrr,L_e,Qrr,g$e,vr,Ly,Wrr,Mc,Hrr,vV,Urr,Jrr,FV,Yrr,Krr,Zrr,xy,etr,x_e,otr,rtr,ttr,gt,ky,atr,k_e,ntr,str,Ec,ltr,S_e,itr,dtr,TV,ctr,ftr,mtr,R_e,gtr,htr,Sy,ptr,po,Ry,_tr,B_e,utr,btr,un,vtr,P_e,Ftr,Ttr,$_e,Mtr,Etr,I_e,Ctr,wtr,Atr,x,H3,q_e,ytr,Ltr,MV,xtr,ktr,Str,U3,N_e,Rtr,Btr,EV,Ptr,$tr,Itr,J3,j_e,qtr,Ntr,CV,jtr,Dtr,Gtr,Y3,D_e,Otr,Vtr,wV,Xtr,ztr,Qtr,K3,G_e,Wtr,Htr,AV,Utr,Jtr,Ytr,Z3,O_e,Ktr,Ztr,yV,ear,oar,rar,e6,V_e,tar,aar,LV,nar,sar,lar,o6,X_e,iar,dar,xV,car,far,mar,r6,z_e,gar,har,kV,par,_ar,uar,t6,Q_e,bar,Far,SV,Tar,Mar,Ear,a6,W_e,Car,war,RV,Aar,yar,Lar,n6,H_e,xar,kar,BV,Sar,Rar,Bar,s6,U_e,Par,$ar,PV,Iar,qar,Nar,l6,J_e,jar,Dar,$V,Gar,Oar,Var,i6,Y_e,Xar,zar,IV,Qar,War,Har,d6,K_e,Uar,Jar,qV,Yar,Kar,Zar,Js,Z_e,enr,onr,NV,rnr,tnr,jV,anr,nnr,snr,c6,eue,lnr,inr,DV,dnr,cnr,fnr,f6,oue,mnr,gnr,GV,hnr,pnr,_nr,m6,rue,unr,bnr,OV,vnr,Fnr,Tnr,g6,tue,Mnr,Enr,VV,Cnr,wnr,Anr,h6,aue,ynr,Lnr,XV,xnr,knr,Snr,p6,nue,Rnr,Bnr,zV,Pnr,$nr,Inr,_6,sue,qnr,Nnr,QV,jnr,Dnr,Gnr,u6,lue,Onr,Vnr,WV,Xnr,znr,Qnr,b6,iue,Wnr,Hnr,HV,Unr,Jnr,Ynr,v6,due,Knr,Znr,UV,esr,osr,rsr,F6,cue,tsr,asr,JV,nsr,ssr,lsr,T6,fue,isr,dsr,YV,csr,fsr,msr,M6,mue,gsr,hsr,KV,psr,_sr,usr,E6,gue,bsr,vsr,ZV,Fsr,Tsr,Msr,C6,hue,Esr,Csr,eX,wsr,Asr,ysr,w6,pue,Lsr,xsr,oX,ksr,Ssr,Rsr,A6,_ue,Bsr,Psr,rX,$sr,Isr,qsr,y6,uue,Nsr,jsr,tX,Dsr,Gsr,Osr,L6,bue,Vsr,Xsr,aX,zsr,Qsr,Wsr,x6,vue,Hsr,Usr,nX,Jsr,Ysr,Ksr,k6,Fue,Zsr,elr,sX,olr,rlr,tlr,S6,Tue,alr,nlr,lX,slr,llr,ilr,R6,Mue,dlr,clr,iX,flr,mlr,glr,B6,Eue,hlr,plr,dX,_lr,ulr,blr,P6,Cue,vlr,Flr,cX,Tlr,Mlr,Elr,$6,wue,Clr,wlr,fX,Alr,ylr,Llr,I6,Aue,xlr,klr,mX,Slr,Rlr,Blr,q6,yue,Plr,$lr,gX,Ilr,qlr,Nlr,Lue,jlr,Dlr,By,h$e,Cc,N6,xue,Py,Glr,kue,Olr,p$e,Fr,$y,Vlr,wc,Xlr,hX,zlr,Qlr,pX,Wlr,Hlr,Ulr,Iy,Jlr,Sue,Ylr,Klr,Zlr,ht,qy,eir,Rue,oir,rir,Ac,tir,Bue,air,nir,_X,sir,lir,iir,Pue,dir,cir,Ny,fir,_o,jy,mir,$ue,gir,hir,bn,pir,Iue,_ir,uir,que,bir,vir,Nue,Fir,Tir,Mir,U,j6,jue,Eir,Cir,uX,wir,Air,yir,D6,Due,Lir,xir,bX,kir,Sir,Rir,G6,Gue,Bir,Pir,vX,$ir,Iir,qir,O6,Oue,Nir,jir,FX,Dir,Gir,Oir,V6,Vue,Vir,Xir,TX,zir,Qir,Wir,X6,Xue,Hir,Uir,MX,Jir,Yir,Kir,z6,zue,Zir,edr,EX,odr,rdr,tdr,Q6,Que,adr,ndr,CX,sdr,ldr,idr,W6,Wue,ddr,cdr,wX,fdr,mdr,gdr,H6,Hue,hdr,pdr,AX,_dr,udr,bdr,U6,Uue,vdr,Fdr,yX,Tdr,Mdr,Edr,J6,Jue,Cdr,wdr,LX,Adr,ydr,Ldr,Y6,Yue,xdr,kdr,xX,Sdr,Rdr,Bdr,K6,Kue,Pdr,$dr,kX,Idr,qdr,Ndr,Z6,Zue,jdr,Ddr,SX,Gdr,Odr,Vdr,ev,e1e,Xdr,zdr,RX,Qdr,Wdr,Hdr,ov,o1e,Udr,Jdr,BX,Ydr,Kdr,Zdr,rv,r1e,ecr,ocr,PX,rcr,tcr,acr,tv,t1e,ncr,scr,$X,lcr,icr,dcr,av,a1e,ccr,fcr,IX,mcr,gcr,hcr,nv,n1e,pcr,_cr,qX,ucr,bcr,vcr,sv,s1e,Fcr,Tcr,NX,Mcr,Ecr,Ccr,lv,l1e,wcr,Acr,jX,ycr,Lcr,xcr,i1e,kcr,Scr,Dy,_$e,yc,iv,d1e,Gy,Rcr,c1e,Bcr,u$e,Tr,Oy,Pcr,Lc,$cr,DX,Icr,qcr,GX,Ncr,jcr,Dcr,Vy,Gcr,f1e,Ocr,Vcr,Xcr,pt,Xy,zcr,m1e,Qcr,Wcr,xc,Hcr,g1e,Ucr,Jcr,OX,Ycr,Kcr,Zcr,h1e,efr,ofr,zy,rfr,uo,Qy,tfr,p1e,afr,nfr,vn,sfr,_1e,lfr,ifr,u1e,dfr,cfr,b1e,ffr,mfr,gfr,fe,dv,v1e,hfr,pfr,VX,_fr,ufr,bfr,cv,F1e,vfr,Ffr,XX,Tfr,Mfr,Efr,fv,T1e,Cfr,wfr,zX,Afr,yfr,Lfr,mv,M1e,xfr,kfr,QX,Sfr,Rfr,Bfr,gv,E1e,Pfr,$fr,WX,Ifr,qfr,Nfr,hv,C1e,jfr,Dfr,HX,Gfr,Ofr,Vfr,pv,w1e,Xfr,zfr,UX,Qfr,Wfr,Hfr,_v,A1e,Ufr,Jfr,JX,Yfr,Kfr,Zfr,uv,y1e,emr,omr,YX,rmr,tmr,amr,bv,L1e,nmr,smr,KX,lmr,imr,dmr,vv,x1e,cmr,fmr,ZX,mmr,gmr,hmr,Fv,k1e,pmr,_mr,ez,umr,bmr,vmr,Tv,S1e,Fmr,Tmr,oz,Mmr,Emr,Cmr,R1e,wmr,Amr,Wy,b$e,kc,Mv,B1e,Hy,ymr,P1e,Lmr,v$e,Mr,Uy,xmr,Sc,kmr,rz,Smr,Rmr,tz,Bmr,Pmr,$mr,Jy,Imr,$1e,qmr,Nmr,jmr,_t,Yy,Dmr,I1e,Gmr,Omr,Rc,Vmr,q1e,Xmr,zmr,az,Qmr,Wmr,Hmr,N1e,Umr,Jmr,Ky,Ymr,bo,Zy,Kmr,j1e,Zmr,egr,Fn,ogr,D1e,rgr,tgr,G1e,agr,ngr,O1e,sgr,lgr,igr,e8,Ev,V1e,dgr,cgr,nz,fgr,mgr,ggr,Cv,X1e,hgr,pgr,sz,_gr,ugr,bgr,z1e,vgr,Fgr,o8,F$e,Bc,wv,Q1e,r8,Tgr,W1e,Mgr,T$e,Er,t8,Egr,Pc,Cgr,lz,wgr,Agr,iz,ygr,Lgr,xgr,a8,kgr,H1e,Sgr,Rgr,Bgr,ut,n8,Pgr,U1e,$gr,Igr,$c,qgr,J1e,Ngr,jgr,dz,Dgr,Ggr,Ogr,Y1e,Vgr,Xgr,s8,zgr,vo,l8,Qgr,K1e,Wgr,Hgr,Tn,Ugr,Z1e,Jgr,Ygr,e4e,Kgr,Zgr,o4e,ehr,ohr,rhr,K,Av,r4e,thr,ahr,cz,nhr,shr,lhr,yv,t4e,ihr,dhr,fz,chr,fhr,mhr,Lv,a4e,ghr,hhr,mz,phr,_hr,uhr,xv,n4e,bhr,vhr,gz,Fhr,Thr,Mhr,kv,s4e,Ehr,Chr,hz,whr,Ahr,yhr,Sv,l4e,Lhr,xhr,pz,khr,Shr,Rhr,Rv,i4e,Bhr,Phr,_z,$hr,Ihr,qhr,Bv,d4e,Nhr,jhr,uz,Dhr,Ghr,Ohr,Pv,c4e,Vhr,Xhr,bz,zhr,Qhr,Whr,$v,f4e,Hhr,Uhr,vz,Jhr,Yhr,Khr,Iv,m4e,Zhr,epr,Fz,opr,rpr,tpr,qv,g4e,apr,npr,Tz,spr,lpr,ipr,Nv,h4e,dpr,cpr,Mz,fpr,mpr,gpr,jv,p4e,hpr,ppr,Ez,_pr,upr,bpr,Dv,_4e,vpr,Fpr,Cz,Tpr,Mpr,Epr,Gv,u4e,Cpr,wpr,wz,Apr,ypr,Lpr,Ov,b4e,xpr,kpr,Az,Spr,Rpr,Bpr,Vv,v4e,Ppr,$pr,yz,Ipr,qpr,Npr,Xv,F4e,jpr,Dpr,Lz,Gpr,Opr,Vpr,zv,T4e,Xpr,zpr,xz,Qpr,Wpr,Hpr,M4e,Upr,Jpr,i8,M$e,Ic,Qv,E4e,d8,Ypr,C4e,Kpr,E$e,Cr,c8,Zpr,qc,e_r,kz,o_r,r_r,Sz,t_r,a_r,n_r,f8,s_r,w4e,l_r,i_r,d_r,bt,m8,c_r,A4e,f_r,m_r,Nc,g_r,y4e,h_r,p_r,Rz,__r,u_r,b_r,L4e,v_r,F_r,g8,T_r,Fo,h8,M_r,x4e,E_r,C_r,Mn,w_r,k4e,A_r,y_r,S4e,L_r,x_r,R4e,k_r,S_r,R_r,Fe,Wv,B4e,B_r,P_r,Bz,$_r,I_r,q_r,Hv,P4e,N_r,j_r,Pz,D_r,G_r,O_r,Uv,$4e,V_r,X_r,$z,z_r,Q_r,W_r,Jv,I4e,H_r,U_r,Iz,J_r,Y_r,K_r,Yv,q4e,Z_r,eur,qz,our,rur,tur,Kv,N4e,aur,nur,Nz,sur,lur,iur,Zv,j4e,dur,cur,jz,fur,mur,gur,eF,D4e,hur,pur,Dz,_ur,uur,bur,oF,G4e,vur,Fur,Gz,Tur,Mur,Eur,rF,O4e,Cur,wur,Oz,Aur,yur,Lur,V4e,xur,kur,p8,C$e,jc,tF,X4e,_8,Sur,z4e,Rur,w$e,wr,u8,Bur,Dc,Pur,Vz,$ur,Iur,Xz,qur,Nur,jur,b8,Dur,Q4e,Gur,Our,Vur,vt,v8,Xur,W4e,zur,Qur,Gc,Wur,H4e,Hur,Uur,zz,Jur,Yur,Kur,U4e,Zur,e1r,F8,o1r,To,T8,r1r,J4e,t1r,a1r,En,n1r,Y4e,s1r,l1r,K4e,i1r,d1r,Z4e,c1r,f1r,m1r,V,aF,ebe,g1r,h1r,Qz,p1r,_1r,u1r,nF,obe,b1r,v1r,Wz,F1r,T1r,M1r,sF,rbe,E1r,C1r,Hz,w1r,A1r,y1r,lF,tbe,L1r,x1r,Uz,k1r,S1r,R1r,iF,abe,B1r,P1r,Jz,$1r,I1r,q1r,dF,nbe,N1r,j1r,Yz,D1r,G1r,O1r,cF,sbe,V1r,X1r,Kz,z1r,Q1r,W1r,fF,lbe,H1r,U1r,Zz,J1r,Y1r,K1r,mF,ibe,Z1r,e4r,eQ,o4r,r4r,t4r,gF,dbe,a4r,n4r,oQ,s4r,l4r,i4r,hF,cbe,d4r,c4r,rQ,f4r,m4r,g4r,pF,fbe,h4r,p4r,tQ,_4r,u4r,b4r,_F,mbe,v4r,F4r,aQ,T4r,M4r,E4r,uF,gbe,C4r,w4r,nQ,A4r,y4r,L4r,bF,hbe,x4r,k4r,sQ,S4r,R4r,B4r,vF,pbe,P4r,$4r,lQ,I4r,q4r,N4r,FF,_be,j4r,D4r,iQ,G4r,O4r,V4r,TF,ube,X4r,z4r,dQ,Q4r,W4r,H4r,MF,bbe,U4r,J4r,cQ,Y4r,K4r,Z4r,EF,vbe,ebr,obr,fQ,rbr,tbr,abr,CF,Fbe,nbr,sbr,mQ,lbr,ibr,dbr,wF,Tbe,cbr,fbr,gQ,mbr,gbr,hbr,AF,Mbe,pbr,_br,hQ,ubr,bbr,vbr,yF,Ebe,Fbr,Tbr,pQ,Mbr,Ebr,Cbr,LF,Cbe,wbr,Abr,_Q,ybr,Lbr,xbr,xF,wbe,kbr,Sbr,uQ,Rbr,Bbr,Pbr,Abe,$br,Ibr,M8,A$e,Oc,kF,ybe,E8,qbr,Lbe,Nbr,y$e,Ar,C8,jbr,Vc,Dbr,bQ,Gbr,Obr,vQ,Vbr,Xbr,zbr,w8,Qbr,xbe,Wbr,Hbr,Ubr,Ft,A8,Jbr,kbe,Ybr,Kbr,Xc,Zbr,Sbe,e2r,o2r,FQ,r2r,t2r,a2r,Rbe,n2r,s2r,y8,l2r,Mo,L8,i2r,Bbe,d2r,c2r,Cn,f2r,Pbe,m2r,g2r,$be,h2r,p2r,Ibe,_2r,u2r,b2r,se,SF,qbe,v2r,F2r,TQ,T2r,M2r,E2r,RF,Nbe,C2r,w2r,MQ,A2r,y2r,L2r,BF,jbe,x2r,k2r,EQ,S2r,R2r,B2r,PF,Dbe,P2r,$2r,CQ,I2r,q2r,N2r,$F,Gbe,j2r,D2r,wQ,G2r,O2r,V2r,IF,Obe,X2r,z2r,AQ,Q2r,W2r,H2r,qF,Vbe,U2r,J2r,yQ,Y2r,K2r,Z2r,NF,Xbe,e5r,o5r,LQ,r5r,t5r,a5r,jF,zbe,n5r,s5r,xQ,l5r,i5r,d5r,DF,Qbe,c5r,f5r,kQ,m5r,g5r,h5r,GF,Wbe,p5r,_5r,SQ,u5r,b5r,v5r,OF,Hbe,F5r,T5r,RQ,M5r,E5r,C5r,VF,Ube,w5r,A5r,BQ,y5r,L5r,x5r,XF,Jbe,k5r,S5r,PQ,R5r,B5r,P5r,zF,Ybe,$5r,I5r,$Q,q5r,N5r,j5r,QF,Kbe,D5r,G5r,IQ,O5r,V5r,X5r,WF,Zbe,z5r,Q5r,qQ,W5r,H5r,U5r,e2e,J5r,Y5r,x8,L$e,zc,HF,o2e,k8,K5r,r2e,Z5r,x$e,yr,S8,e3r,Qc,o3r,NQ,r3r,t3r,jQ,a3r,n3r,s3r,R8,l3r,t2e,i3r,d3r,c3r,Tt,B8,f3r,a2e,m3r,g3r,Wc,h3r,n2e,p3r,_3r,DQ,u3r,b3r,v3r,s2e,F3r,T3r,P8,M3r,Eo,$8,E3r,l2e,C3r,w3r,wn,A3r,i2e,y3r,L3r,d2e,x3r,k3r,c2e,S3r,R3r,B3r,f2e,UF,m2e,P3r,$3r,GQ,I3r,q3r,N3r,g2e,j3r,D3r,I8,k$e,Hc,JF,h2e,q8,G3r,p2e,O3r,S$e,Lr,N8,V3r,Uc,X3r,OQ,z3r,Q3r,VQ,W3r,H3r,U3r,j8,J3r,_2e,Y3r,K3r,Z3r,Mt,D8,e6r,u2e,o6r,r6r,Jc,t6r,b2e,a6r,n6r,XQ,s6r,l6r,i6r,v2e,d6r,c6r,G8,f6r,Co,O8,m6r,F2e,g6r,h6r,An,p6r,T2e,_6r,u6r,M2e,b6r,v6r,E2e,F6r,T6r,M6r,Z,YF,C2e,E6r,C6r,zQ,w6r,A6r,y6r,KF,w2e,L6r,x6r,QQ,k6r,S6r,R6r,ZF,A2e,B6r,P6r,WQ,$6r,I6r,q6r,eT,y2e,N6r,j6r,HQ,D6r,G6r,O6r,oT,L2e,V6r,X6r,UQ,z6r,Q6r,W6r,rT,x2e,H6r,U6r,JQ,J6r,Y6r,K6r,tT,k2e,Z6r,evr,YQ,ovr,rvr,tvr,aT,S2e,avr,nvr,KQ,svr,lvr,ivr,nT,R2e,dvr,cvr,ZQ,fvr,mvr,gvr,sT,B2e,hvr,pvr,eW,_vr,uvr,bvr,lT,P2e,vvr,Fvr,oW,Tvr,Mvr,Evr,iT,$2e,Cvr,wvr,rW,Avr,yvr,Lvr,dT,I2e,xvr,kvr,tW,Svr,Rvr,Bvr,cT,q2e,Pvr,$vr,aW,Ivr,qvr,Nvr,fT,N2e,jvr,Dvr,nW,Gvr,Ovr,Vvr,mT,j2e,Xvr,zvr,sW,Qvr,Wvr,Hvr,gT,D2e,Uvr,Jvr,lW,Yvr,Kvr,Zvr,hT,G2e,eFr,oFr,iW,rFr,tFr,aFr,pT,O2e,nFr,sFr,dW,lFr,iFr,dFr,_T,V2e,cFr,fFr,cW,mFr,gFr,hFr,X2e,pFr,_Fr,V8,R$e,Yc,uT,z2e,X8,uFr,Q2e,bFr,B$e,xr,z8,vFr,Kc,FFr,fW,TFr,MFr,mW,EFr,CFr,wFr,Q8,AFr,W2e,yFr,LFr,xFr,Et,W8,kFr,H2e,SFr,RFr,Zc,BFr,U2e,PFr,$Fr,gW,IFr,qFr,NFr,J2e,jFr,DFr,H8,GFr,wo,U8,OFr,Y2e,VFr,XFr,yn,zFr,K2e,QFr,WFr,Z2e,HFr,UFr,e5e,JFr,YFr,KFr,ee,bT,o5e,ZFr,eTr,hW,oTr,rTr,tTr,vT,r5e,aTr,nTr,pW,sTr,lTr,iTr,FT,t5e,dTr,cTr,_W,fTr,mTr,gTr,TT,a5e,hTr,pTr,uW,_Tr,uTr,bTr,MT,n5e,vTr,FTr,bW,TTr,MTr,ETr,ET,s5e,CTr,wTr,vW,ATr,yTr,LTr,CT,l5e,xTr,kTr,FW,STr,RTr,BTr,wT,i5e,PTr,$Tr,TW,ITr,qTr,NTr,AT,d5e,jTr,DTr,MW,GTr,OTr,VTr,yT,c5e,XTr,zTr,EW,QTr,WTr,HTr,LT,f5e,UTr,JTr,CW,YTr,KTr,ZTr,xT,m5e,eMr,oMr,wW,rMr,tMr,aMr,kT,g5e,nMr,sMr,AW,lMr,iMr,dMr,ST,h5e,cMr,fMr,yW,mMr,gMr,hMr,RT,p5e,pMr,_Mr,LW,uMr,bMr,vMr,BT,_5e,FMr,TMr,xW,MMr,EMr,CMr,PT,u5e,wMr,AMr,kW,yMr,LMr,xMr,$T,b5e,kMr,SMr,SW,RMr,BMr,PMr,IT,v5e,$Mr,IMr,RW,qMr,NMr,jMr,qT,F5e,DMr,GMr,BW,OMr,VMr,XMr,T5e,zMr,QMr,J8,P$e,ef,NT,M5e,Y8,WMr,E5e,HMr,$$e,kr,K8,UMr,of,JMr,PW,YMr,KMr,$W,ZMr,eEr,oEr,Z8,rEr,C5e,tEr,aEr,nEr,Ct,eL,sEr,w5e,lEr,iEr,rf,dEr,A5e,cEr,fEr,IW,mEr,gEr,hEr,y5e,pEr,_Er,oL,uEr,Ao,rL,bEr,L5e,vEr,FEr,Ln,TEr,x5e,MEr,EEr,k5e,CEr,wEr,S5e,AEr,yEr,LEr,R5e,jT,B5e,xEr,kEr,qW,SEr,REr,BEr,P5e,PEr,$Er,tL,I$e,tf,DT,$5e,aL,IEr,I5e,qEr,q$e,Sr,nL,NEr,af,jEr,NW,DEr,GEr,jW,OEr,VEr,XEr,sL,zEr,q5e,QEr,WEr,HEr,wt,lL,UEr,N5e,JEr,YEr,nf,KEr,j5e,ZEr,eCr,DW,oCr,rCr,tCr,D5e,aCr,nCr,iL,sCr,yo,dL,lCr,G5e,iCr,dCr,xn,cCr,O5e,fCr,mCr,V5e,gCr,hCr,X5e,pCr,_Cr,uCr,z5e,GT,Q5e,bCr,vCr,GW,FCr,TCr,MCr,W5e,ECr,CCr,cL,N$e,sf,OT,H5e,fL,wCr,U5e,ACr,j$e,Rr,mL,yCr,lf,LCr,OW,xCr,kCr,VW,SCr,RCr,BCr,gL,PCr,J5e,$Cr,ICr,qCr,At,hL,NCr,Y5e,jCr,DCr,df,GCr,K5e,OCr,VCr,XW,XCr,zCr,QCr,Z5e,WCr,HCr,pL,UCr,Lo,_L,JCr,e3e,YCr,KCr,kn,ZCr,o3e,ewr,owr,r3e,rwr,twr,t3e,awr,nwr,swr,z,VT,a3e,lwr,iwr,zW,dwr,cwr,fwr,XT,n3e,mwr,gwr,QW,hwr,pwr,_wr,zT,s3e,uwr,bwr,WW,vwr,Fwr,Twr,QT,l3e,Mwr,Ewr,HW,Cwr,wwr,Awr,WT,i3e,ywr,Lwr,UW,xwr,kwr,Swr,HT,d3e,Rwr,Bwr,JW,Pwr,$wr,Iwr,UT,c3e,qwr,Nwr,YW,jwr,Dwr,Gwr,JT,f3e,Owr,Vwr,KW,Xwr,zwr,Qwr,YT,m3e,Wwr,Hwr,ZW,Uwr,Jwr,Ywr,KT,g3e,Kwr,Zwr,eH,eAr,oAr,rAr,ZT,h3e,tAr,aAr,oH,nAr,sAr,lAr,eM,p3e,iAr,dAr,rH,cAr,fAr,mAr,oM,_3e,gAr,hAr,tH,pAr,_Ar,uAr,rM,u3e,bAr,vAr,aH,FAr,TAr,MAr,tM,b3e,EAr,CAr,nH,wAr,AAr,yAr,aM,v3e,LAr,xAr,sH,kAr,SAr,RAr,nM,F3e,BAr,PAr,lH,$Ar,IAr,qAr,sM,T3e,NAr,jAr,iH,DAr,GAr,OAr,lM,M3e,VAr,XAr,dH,zAr,QAr,WAr,iM,E3e,HAr,UAr,cH,JAr,YAr,KAr,dM,C3e,ZAr,e0r,fH,o0r,r0r,t0r,cM,w3e,a0r,n0r,mH,s0r,l0r,i0r,fM,A3e,d0r,c0r,gH,f0r,m0r,g0r,mM,y3e,h0r,p0r,hH,_0r,u0r,b0r,gM,L3e,v0r,F0r,pH,T0r,M0r,E0r,x3e,C0r,w0r,uL,D$e,cf,hM,k3e,bL,A0r,S3e,y0r,G$e,Br,vL,L0r,ff,x0r,_H,k0r,S0r,uH,R0r,B0r,P0r,FL,$0r,R3e,I0r,q0r,N0r,yt,TL,j0r,B3e,D0r,G0r,mf,O0r,P3e,V0r,X0r,bH,z0r,Q0r,W0r,$3e,H0r,U0r,ML,J0r,xo,EL,Y0r,I3e,K0r,Z0r,Sn,eyr,q3e,oyr,ryr,N3e,tyr,ayr,j3e,nyr,syr,lyr,ca,pM,D3e,iyr,dyr,vH,cyr,fyr,myr,_M,G3e,gyr,hyr,FH,pyr,_yr,uyr,uM,O3e,byr,vyr,TH,Fyr,Tyr,Myr,bM,V3e,Eyr,Cyr,MH,wyr,Ayr,yyr,vM,X3e,Lyr,xyr,EH,kyr,Syr,Ryr,z3e,Byr,Pyr,CL,O$e,gf,FM,Q3e,wL,$yr,W3e,Iyr,V$e,Pr,AL,qyr,hf,Nyr,CH,jyr,Dyr,wH,Gyr,Oyr,Vyr,yL,Xyr,H3e,zyr,Qyr,Wyr,Lt,LL,Hyr,U3e,Uyr,Jyr,pf,Yyr,J3e,Kyr,Zyr,AH,e8r,o8r,r8r,Y3e,t8r,a8r,xL,n8r,ko,kL,s8r,K3e,l8r,i8r,Rn,d8r,Z3e,c8r,f8r,e6e,m8r,g8r,o6e,h8r,p8r,_8r,he,TM,r6e,u8r,b8r,yH,v8r,F8r,T8r,MM,t6e,M8r,E8r,LH,C8r,w8r,A8r,EM,a6e,y8r,L8r,xH,x8r,k8r,S8r,CM,n6e,R8r,B8r,kH,P8r,$8r,I8r,wM,s6e,q8r,N8r,SH,j8r,D8r,G8r,AM,l6e,O8r,V8r,RH,X8r,z8r,Q8r,yM,i6e,W8r,H8r,BH,U8r,J8r,Y8r,LM,d6e,K8r,Z8r,PH,eLr,oLr,rLr,xM,c6e,tLr,aLr,$H,nLr,sLr,lLr,kM,f6e,iLr,dLr,IH,cLr,fLr,mLr,SM,m6e,gLr,hLr,qH,pLr,_Lr,uLr,RM,g6e,bLr,vLr,NH,FLr,TLr,MLr,h6e,ELr,CLr,SL,X$e,_f,BM,p6e,RL,wLr,_6e,ALr,z$e,$r,BL,yLr,uf,LLr,jH,xLr,kLr,DH,SLr,RLr,BLr,PL,PLr,u6e,$Lr,ILr,qLr,xt,$L,NLr,b6e,jLr,DLr,bf,GLr,v6e,OLr,VLr,GH,XLr,zLr,QLr,F6e,WLr,HLr,IL,ULr,So,qL,JLr,T6e,YLr,KLr,Bn,ZLr,M6e,e7r,o7r,E6e,r7r,t7r,C6e,a7r,n7r,s7r,Te,PM,w6e,l7r,i7r,OH,d7r,c7r,f7r,$M,A6e,m7r,g7r,VH,h7r,p7r,_7r,IM,y6e,u7r,b7r,XH,v7r,F7r,T7r,qM,L6e,M7r,E7r,zH,C7r,w7r,A7r,NM,x6e,y7r,L7r,QH,x7r,k7r,S7r,jM,k6e,R7r,B7r,WH,P7r,$7r,I7r,DM,S6e,q7r,N7r,HH,j7r,D7r,G7r,GM,R6e,O7r,V7r,UH,X7r,z7r,Q7r,OM,B6e,W7r,H7r,JH,U7r,J7r,Y7r,VM,P6e,K7r,Z7r,YH,e9r,o9r,r9r,$6e,t9r,a9r,NL,Q$e,vf,XM,I6e,jL,n9r,q6e,s9r,W$e,Ir,DL,l9r,Ff,i9r,KH,d9r,c9r,ZH,f9r,m9r,g9r,GL,h9r,N6e,p9r,_9r,u9r,kt,OL,b9r,j6e,v9r,F9r,Tf,T9r,D6e,M9r,E9r,eU,C9r,w9r,A9r,G6e,y9r,L9r,VL,x9r,Ro,XL,k9r,O6e,S9r,R9r,Pn,B9r,V6e,P9r,$9r,X6e,I9r,q9r,z6e,N9r,j9r,D9r,we,zM,Q6e,G9r,O9r,oU,V9r,X9r,z9r,QM,W6e,Q9r,W9r,rU,H9r,U9r,J9r,WM,H6e,Y9r,K9r,tU,Z9r,exr,oxr,HM,U6e,rxr,txr,aU,axr,nxr,sxr,UM,J6e,lxr,ixr,nU,dxr,cxr,fxr,JM,Y6e,mxr,gxr,sU,hxr,pxr,_xr,YM,K6e,uxr,bxr,lU,vxr,Fxr,Txr,KM,Z6e,Mxr,Exr,iU,Cxr,wxr,Axr,ZM,eve,yxr,Lxr,dU,xxr,kxr,Sxr,ove,Rxr,Bxr,zL,H$e,Mf,eE,rve,QL,Pxr,tve,$xr,U$e,qr,WL,Ixr,Ef,qxr,cU,Nxr,jxr,fU,Dxr,Gxr,Oxr,HL,Vxr,ave,Xxr,zxr,Qxr,St,UL,Wxr,nve,Hxr,Uxr,Cf,Jxr,sve,Yxr,Kxr,mU,Zxr,ekr,okr,lve,rkr,tkr,JL,akr,Bo,YL,nkr,ive,skr,lkr,$n,ikr,dve,dkr,ckr,cve,fkr,mkr,fve,gkr,hkr,pkr,Me,oE,mve,_kr,ukr,gU,bkr,vkr,Fkr,rE,gve,Tkr,Mkr,hU,Ekr,Ckr,wkr,tE,hve,Akr,ykr,pU,Lkr,xkr,kkr,aE,pve,Skr,Rkr,_U,Bkr,Pkr,$kr,nE,_ve,Ikr,qkr,uU,Nkr,jkr,Dkr,sE,uve,Gkr,Okr,bU,Vkr,Xkr,zkr,lE,bve,Qkr,Wkr,vU,Hkr,Ukr,Jkr,iE,vve,Ykr,Kkr,FU,Zkr,eSr,oSr,dE,Fve,rSr,tSr,TU,aSr,nSr,sSr,cE,Tve,lSr,iSr,MU,dSr,cSr,fSr,Mve,mSr,gSr,KL,J$e,wf,fE,Eve,ZL,hSr,Cve,pSr,Y$e,Nr,e7,_Sr,Af,uSr,EU,bSr,vSr,CU,FSr,TSr,MSr,o7,ESr,wve,CSr,wSr,ASr,Rt,r7,ySr,Ave,LSr,xSr,yf,kSr,yve,SSr,RSr,wU,BSr,PSr,$Sr,Lve,ISr,qSr,t7,NSr,Po,a7,jSr,xve,DSr,GSr,In,OSr,kve,VSr,XSr,Sve,zSr,QSr,Rve,WSr,HSr,USr,Ee,mE,Bve,JSr,YSr,AU,KSr,ZSr,eRr,gE,Pve,oRr,rRr,yU,tRr,aRr,nRr,hE,$ve,sRr,lRr,LU,iRr,dRr,cRr,pE,Ive,fRr,mRr,xU,gRr,hRr,pRr,_E,qve,_Rr,uRr,kU,bRr,vRr,FRr,uE,Nve,TRr,MRr,SU,ERr,CRr,wRr,bE,jve,ARr,yRr,RU,LRr,xRr,kRr,vE,Dve,SRr,RRr,BU,BRr,PRr,$Rr,FE,Gve,IRr,qRr,PU,NRr,jRr,DRr,TE,Ove,GRr,ORr,$U,VRr,XRr,zRr,Vve,QRr,WRr,n7,K$e,Lf,ME,Xve,s7,HRr,zve,URr,Z$e,jr,l7,JRr,xf,YRr,IU,KRr,ZRr,qU,eBr,oBr,rBr,i7,tBr,Qve,aBr,nBr,sBr,Bt,d7,lBr,Wve,iBr,dBr,kf,cBr,Hve,fBr,mBr,NU,gBr,hBr,pBr,Uve,_Br,uBr,c7,bBr,$o,f7,vBr,Jve,FBr,TBr,qn,MBr,Yve,EBr,CBr,Kve,wBr,ABr,Zve,yBr,LBr,xBr,Pe,EE,eFe,kBr,SBr,jU,RBr,BBr,PBr,CE,oFe,$Br,IBr,DU,qBr,NBr,jBr,wE,rFe,DBr,GBr,GU,OBr,VBr,XBr,AE,tFe,zBr,QBr,OU,WBr,HBr,UBr,yE,aFe,JBr,YBr,VU,KBr,ZBr,ePr,LE,nFe,oPr,rPr,XU,tPr,aPr,nPr,xE,sFe,sPr,lPr,zU,iPr,dPr,cPr,kE,lFe,fPr,mPr,QU,gPr,hPr,pPr,iFe,_Pr,uPr,m7,eIe,Sf,SE,dFe,g7,bPr,cFe,vPr,oIe,Dr,h7,FPr,Rf,TPr,WU,MPr,EPr,HU,CPr,wPr,APr,p7,yPr,fFe,LPr,xPr,kPr,Pt,_7,SPr,mFe,RPr,BPr,Bf,PPr,gFe,$Pr,IPr,UU,qPr,NPr,jPr,hFe,DPr,GPr,u7,OPr,Io,b7,VPr,pFe,XPr,zPr,Nn,QPr,_Fe,WPr,HPr,uFe,UPr,JPr,bFe,YPr,KPr,ZPr,$e,RE,vFe,e$r,o$r,JU,r$r,t$r,a$r,BE,FFe,n$r,s$r,YU,l$r,i$r,d$r,PE,TFe,c$r,f$r,KU,m$r,g$r,h$r,$E,MFe,p$r,_$r,ZU,u$r,b$r,v$r,IE,EFe,F$r,T$r,eJ,M$r,E$r,C$r,qE,CFe,w$r,A$r,oJ,y$r,L$r,x$r,NE,wFe,k$r,S$r,rJ,R$r,B$r,P$r,jE,AFe,$$r,I$r,tJ,q$r,N$r,j$r,yFe,D$r,G$r,v7,rIe,Pf,DE,LFe,F7,O$r,xFe,V$r,tIe,Gr,T7,X$r,$f,z$r,aJ,Q$r,W$r,nJ,H$r,U$r,J$r,M7,Y$r,kFe,K$r,Z$r,eIr,$t,E7,oIr,SFe,rIr,tIr,If,aIr,RFe,nIr,sIr,sJ,lIr,iIr,dIr,BFe,cIr,fIr,C7,mIr,qo,w7,gIr,PFe,hIr,pIr,jn,_Ir,$Fe,uIr,bIr,IFe,vIr,FIr,qFe,TIr,MIr,EIr,NFe,GE,jFe,CIr,wIr,lJ,AIr,yIr,LIr,DFe,xIr,kIr,A7,aIe,qf,OE,GFe,y7,SIr,OFe,RIr,nIe,Or,L7,BIr,Nf,PIr,iJ,$Ir,IIr,dJ,qIr,NIr,jIr,x7,DIr,VFe,GIr,OIr,VIr,It,k7,XIr,XFe,zIr,QIr,jf,WIr,zFe,HIr,UIr,cJ,JIr,YIr,KIr,QFe,ZIr,eqr,S7,oqr,No,R7,rqr,WFe,tqr,aqr,Dn,nqr,HFe,sqr,lqr,UFe,iqr,dqr,JFe,cqr,fqr,mqr,B7,VE,YFe,gqr,hqr,fJ,pqr,_qr,uqr,XE,KFe,bqr,vqr,mJ,Fqr,Tqr,Mqr,ZFe,Eqr,Cqr,P7,sIe,Df,zE,eTe,$7,wqr,oTe,Aqr,lIe,Vr,I7,yqr,Gf,Lqr,gJ,xqr,kqr,hJ,Sqr,Rqr,Bqr,q7,Pqr,rTe,$qr,Iqr,qqr,qt,N7,Nqr,tTe,jqr,Dqr,Of,Gqr,aTe,Oqr,Vqr,pJ,Xqr,zqr,Qqr,nTe,Wqr,Hqr,j7,Uqr,jo,D7,Jqr,sTe,Yqr,Kqr,Gn,Zqr,lTe,eNr,oNr,iTe,rNr,tNr,dTe,aNr,nNr,sNr,cTe,QE,fTe,lNr,iNr,_J,dNr,cNr,fNr,mTe,mNr,gNr,G7,iIe;return ue=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),YC=new X({}),KC=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Jf=new hNr({props:{warning:!0,$$slots:{default:[J8t]},$$scope:{ctx:Xf}}}),ZC=new X({}),ew=new w({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/configuration_auto.py#L560"}}),tw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/configuration_auto.py#L583"}}),aw=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),nw=new w({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/configuration_auto.py#L705"}}),sw=new X({}),lw=new w({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/tokenization_auto.py#L377"}}),cw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16543/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/tokenization_auto.py#L391"}}),fw=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),mw=new w({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/tokenization_auto.py#L587"}}),gw=new X({}),hw=new w({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/feature_extraction_auto.py#L176"}}),uw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16543/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),Hh=new hNr({props:{$$slots:{default:[Y8t]},$$scope:{ctx:Xf}}}),bw=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),vw=new w({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/feature_extraction_auto.py#L317"}}),Fw=new X({}),Tw=new w({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/processing_auto.py#L76"}}),Cw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/processing_auto.py#L90"}}),fp=new hNr({props:{$$slots:{default:[K8t]},$$scope:{ctx:Xf}}}),ww=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),Aw=new w({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/processing_auto.py#L243"}}),yw=new X({}),Lw=new w({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L714"}}),kw=new w({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Sw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),Rw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Bw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Pw=new X({}),$w=new w({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L721"}}),qw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Nw=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),jw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Dw=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gw=new X({}),Ow=new w({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L736"}}),Xw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),zw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),Qw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Ww=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hw=new X({}),Uw=new w({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L743"}}),Yw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Kw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),Zw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),eA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oA=new X({}),rA=new w({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L750"}}),aA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),nA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),sA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),lA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iA=new X({}),dA=new w({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L759"}}),fA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),mA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),gA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),hA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pA=new X({}),_A=new w({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L793"}}),bA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),vA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),FA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),TA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),MA=new X({}),EA=new w({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L800"}}),wA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),AA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),yA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),LA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xA=new X({}),kA=new w({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L786"}}),RA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),BA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),PA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),$A=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IA=new X({}),qA=new w({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L768"}}),jA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),DA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),GA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),OA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VA=new X({}),XA=new w({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L775"}}),QA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),WA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),HA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),UA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JA=new X({}),YA=new w({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L809"}}),ZA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),e0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),o0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),r0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t0=new X({}),a0=new w({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L848"}}),s0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),l0=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),i0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),d0=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c0=new X({}),f0=new w({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L855"}}),g0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),h0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),p0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),_0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u0=new X({}),b0=new w({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L878"}}),F0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),T0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),M0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),E0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C0=new X({}),w0=new w({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L862"}}),y0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),L0=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),x0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),k0=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S0=new X({}),R0=new w({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L869"}}),P0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),$0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),I0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),N0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j0=new X({}),D0=new w({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L887"}}),O0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),V0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),X0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),z0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q0=new X({}),W0=new w({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L894"}}),U0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),J0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),Y0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),K0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z0=new X({}),ey=new w({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L841"}}),ry=new w({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),ty=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),ay=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),ny=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sy=new X({}),ly=new w({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L816"}}),dy=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),cy=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),fy=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),my=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gy=new X({}),hy=new w({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L823"}}),_y=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),uy=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),by=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),vy=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Fy=new X({}),Ty=new w({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L832"}}),Ey=new w({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Cy=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),wy=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Ay=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yy=new X({}),Ly=new w({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),ky=new w({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Sy=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),Ry=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),By=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Py=new X({}),$y=new w({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),qy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Ny=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),jy=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Dy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gy=new X({}),Oy=new w({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),Xy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),zy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),Qy=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Wy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hy=new X({}),Uy=new w({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),Yy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Ky=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),Zy=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),o8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r8=new X({}),t8=new w({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L426"}}),n8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),s8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),l8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),i8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d8=new X({}),c8=new w({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),m8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),g8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),h8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),p8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_8=new X({}),u8=new w({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),v8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),F8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),T8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),M8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E8=new X({}),C8=new w({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),A8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),y8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),L8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),x8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k8=new X({}),S8=new w({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L458"}}),B8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),P8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),$8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),I8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q8=new X({}),N8=new w({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),D8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),G8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),O8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),V8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X8=new X({}),z8=new w({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),W8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),H8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),U8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),J8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y8=new X({}),K8=new w({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L419"}}),eL=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),oL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),rL=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),tL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aL=new X({}),nL=new w({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),lL=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),iL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),dL=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),cL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fL=new X({}),mL=new w({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),hL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),pL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),_L=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),uL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bL=new X({}),vL=new w({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),TL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),ML=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),EL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),CL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wL=new X({}),AL=new w({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),LL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),xL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),kL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),SL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RL=new X({}),BL=new w({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),$L=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),IL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),qL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),NL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jL=new X({}),DL=new w({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),OL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),VL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),XL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),zL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QL=new X({}),WL=new w({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),UL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),JL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),YL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),KL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZL=new X({}),e7=new w({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),r7=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),t7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),a7=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),n7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s7=new X({}),l7=new w({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),d7=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),c7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),f7=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),m7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g7=new X({}),h7=new w({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),_7=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),u7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),b7=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),v7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F7=new X({}),T7=new w({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),E7=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),C7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),w7=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),A7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y7=new X({}),L7=new w({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),k7=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),S7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),R7=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),P7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$7=new X({}),I7=new w({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),N7=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),j7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),D7=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),G7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){oe=a("meta"),co=l(),ge=a("h1"),Ae=a("a"),io=a("span"),f(ue.$$.fragment),Ce=l(),Xo=a("span"),zi=o("Auto Classes"),zf=l(),fa=a("p"),Qi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Wi=a("code"),WC=o("from_pretrained()"),Qf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Se=l(),fo=a("p"),Hi=o("Instantiating one of "),On=a("a"),HC=o("AutoConfig"),Vn=o(", "),Xn=a("a"),UC=o("AutoModel"),Ui=o(`, and
`),zn=a("a"),JC=o("AutoTokenizer"),Ji=o(" will directly create a class of the relevant architecture. For instance"),Wf=l(),f(Da.$$.fragment),mo=l(),ve=a("p"),W9=o("will create a model that is an instance of "),Yi=a("a"),H9=o("BertModel"),U9=o("."),zo=l(),Ga=a("p"),J9=o("There is one class of "),Hf=a("code"),Y9=o("AutoModel"),FNe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),lPe=l(),Ki=a("h2"),Uf=a("a"),dK=a("span"),f(YC.$$.fragment),TNe=l(),cK=a("span"),MNe=o("Extending the Auto Classes"),iPe=l(),Qn=a("p"),ENe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),fK=a("code"),CNe=o("NewModel"),wNe=o(", make sure you have a "),mK=a("code"),ANe=o("NewModelConfig"),yNe=o(` then you can add those to the auto
classes like this:`),dPe=l(),f(KC.$$.fragment),cPe=l(),K9=a("p"),LNe=o("You will then be able to use the auto classes like you would usually do!"),fPe=l(),f(Jf.$$.fragment),mPe=l(),Zi=a("h2"),Yf=a("a"),gK=a("span"),f(ZC.$$.fragment),xNe=l(),hK=a("span"),kNe=o("AutoConfig"),gPe=l(),Qo=a("div"),f(ew.$$.fragment),SNe=l(),ow=a("p"),RNe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Z9=a("a"),BNe=o("from_pretrained()"),PNe=o(" class method."),$Ne=l(),rw=a("p"),INe=o("This class cannot be instantiated directly using "),pK=a("code"),qNe=o("__init__()"),NNe=o(" (throws an error)."),jNe=l(),go=a("div"),f(tw.$$.fragment),DNe=l(),_K=a("p"),GNe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),ONe=l(),ed=a("p"),VNe=o("The configuration class to instantiate is selected based on the "),uK=a("code"),XNe=o("model_type"),zNe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),bK=a("code"),QNe=o("pretrained_model_name_or_path"),WNe=o(":"),HNe=l(),v=a("ul"),Kf=a("li"),vK=a("strong"),UNe=o("albert"),JNe=o(" \u2014 "),ex=a("a"),YNe=o("AlbertConfig"),KNe=o(" (ALBERT model)"),ZNe=l(),Zf=a("li"),FK=a("strong"),eje=o("bart"),oje=o(" \u2014 "),ox=a("a"),rje=o("BartConfig"),tje=o(" (BART model)"),aje=l(),em=a("li"),TK=a("strong"),nje=o("beit"),sje=o(" \u2014 "),rx=a("a"),lje=o("BeitConfig"),ije=o(" (BEiT model)"),dje=l(),om=a("li"),MK=a("strong"),cje=o("bert"),fje=o(" \u2014 "),tx=a("a"),mje=o("BertConfig"),gje=o(" (BERT model)"),hje=l(),rm=a("li"),EK=a("strong"),pje=o("bert-generation"),_je=o(" \u2014 "),ax=a("a"),uje=o("BertGenerationConfig"),bje=o(" (Bert Generation model)"),vje=l(),tm=a("li"),CK=a("strong"),Fje=o("big_bird"),Tje=o(" \u2014 "),nx=a("a"),Mje=o("BigBirdConfig"),Eje=o(" (BigBird model)"),Cje=l(),am=a("li"),wK=a("strong"),wje=o("bigbird_pegasus"),Aje=o(" \u2014 "),sx=a("a"),yje=o("BigBirdPegasusConfig"),Lje=o(" (BigBirdPegasus model)"),xje=l(),nm=a("li"),AK=a("strong"),kje=o("blenderbot"),Sje=o(" \u2014 "),lx=a("a"),Rje=o("BlenderbotConfig"),Bje=o(" (Blenderbot model)"),Pje=l(),sm=a("li"),yK=a("strong"),$je=o("blenderbot-small"),Ije=o(" \u2014 "),ix=a("a"),qje=o("BlenderbotSmallConfig"),Nje=o(" (BlenderbotSmall model)"),jje=l(),lm=a("li"),LK=a("strong"),Dje=o("camembert"),Gje=o(" \u2014 "),dx=a("a"),Oje=o("CamembertConfig"),Vje=o(" (CamemBERT model)"),Xje=l(),im=a("li"),xK=a("strong"),zje=o("canine"),Qje=o(" \u2014 "),cx=a("a"),Wje=o("CanineConfig"),Hje=o(" (Canine model)"),Uje=l(),dm=a("li"),kK=a("strong"),Jje=o("clip"),Yje=o(" \u2014 "),fx=a("a"),Kje=o("CLIPConfig"),Zje=o(" (CLIP model)"),eDe=l(),cm=a("li"),SK=a("strong"),oDe=o("convbert"),rDe=o(" \u2014 "),mx=a("a"),tDe=o("ConvBertConfig"),aDe=o(" (ConvBERT model)"),nDe=l(),fm=a("li"),RK=a("strong"),sDe=o("convnext"),lDe=o(" \u2014 "),gx=a("a"),iDe=o("ConvNextConfig"),dDe=o(" (ConvNext model)"),cDe=l(),mm=a("li"),BK=a("strong"),fDe=o("ctrl"),mDe=o(" \u2014 "),hx=a("a"),gDe=o("CTRLConfig"),hDe=o(" (CTRL model)"),pDe=l(),gm=a("li"),PK=a("strong"),_De=o("data2vec-audio"),uDe=o(" \u2014 "),px=a("a"),bDe=o("Data2VecAudioConfig"),vDe=o(" (Data2VecAudio model)"),FDe=l(),hm=a("li"),$K=a("strong"),TDe=o("data2vec-text"),MDe=o(" \u2014 "),_x=a("a"),EDe=o("Data2VecTextConfig"),CDe=o(" (Data2VecText model)"),wDe=l(),pm=a("li"),IK=a("strong"),ADe=o("data2vec-vision"),yDe=o(" \u2014 "),ux=a("a"),LDe=o("Data2VecVisionConfig"),xDe=o(" (Data2VecVision model)"),kDe=l(),_m=a("li"),qK=a("strong"),SDe=o("deberta"),RDe=o(" \u2014 "),bx=a("a"),BDe=o("DebertaConfig"),PDe=o(" (DeBERTa model)"),$De=l(),um=a("li"),NK=a("strong"),IDe=o("deberta-v2"),qDe=o(" \u2014 "),vx=a("a"),NDe=o("DebertaV2Config"),jDe=o(" (DeBERTa-v2 model)"),DDe=l(),bm=a("li"),jK=a("strong"),GDe=o("decision_transformer"),ODe=o(" \u2014 "),Fx=a("a"),VDe=o("DecisionTransformerConfig"),XDe=o(" (Decision Transformer model)"),zDe=l(),vm=a("li"),DK=a("strong"),QDe=o("deit"),WDe=o(" \u2014 "),Tx=a("a"),HDe=o("DeiTConfig"),UDe=o(" (DeiT model)"),JDe=l(),Fm=a("li"),GK=a("strong"),YDe=o("detr"),KDe=o(" \u2014 "),Mx=a("a"),ZDe=o("DetrConfig"),eGe=o(" (DETR model)"),oGe=l(),Tm=a("li"),OK=a("strong"),rGe=o("distilbert"),tGe=o(" \u2014 "),Ex=a("a"),aGe=o("DistilBertConfig"),nGe=o(" (DistilBERT model)"),sGe=l(),Mm=a("li"),VK=a("strong"),lGe=o("dpr"),iGe=o(" \u2014 "),Cx=a("a"),dGe=o("DPRConfig"),cGe=o(" (DPR model)"),fGe=l(),Em=a("li"),XK=a("strong"),mGe=o("dpt"),gGe=o(" \u2014 "),wx=a("a"),hGe=o("DPTConfig"),pGe=o(" (DPT model)"),_Ge=l(),Cm=a("li"),zK=a("strong"),uGe=o("electra"),bGe=o(" \u2014 "),Ax=a("a"),vGe=o("ElectraConfig"),FGe=o(" (ELECTRA model)"),TGe=l(),wm=a("li"),QK=a("strong"),MGe=o("encoder-decoder"),EGe=o(" \u2014 "),yx=a("a"),CGe=o("EncoderDecoderConfig"),wGe=o(" (Encoder decoder model)"),AGe=l(),Am=a("li"),WK=a("strong"),yGe=o("flaubert"),LGe=o(" \u2014 "),Lx=a("a"),xGe=o("FlaubertConfig"),kGe=o(" (FlauBERT model)"),SGe=l(),ym=a("li"),HK=a("strong"),RGe=o("fnet"),BGe=o(" \u2014 "),xx=a("a"),PGe=o("FNetConfig"),$Ge=o(" (FNet model)"),IGe=l(),Lm=a("li"),UK=a("strong"),qGe=o("fsmt"),NGe=o(" \u2014 "),kx=a("a"),jGe=o("FSMTConfig"),DGe=o(" (FairSeq Machine-Translation model)"),GGe=l(),xm=a("li"),JK=a("strong"),OGe=o("funnel"),VGe=o(" \u2014 "),Sx=a("a"),XGe=o("FunnelConfig"),zGe=o(" (Funnel Transformer model)"),QGe=l(),km=a("li"),YK=a("strong"),WGe=o("glpn"),HGe=o(" \u2014 "),Rx=a("a"),UGe=o("GLPNConfig"),JGe=o(" (GLPN model)"),YGe=l(),Sm=a("li"),KK=a("strong"),KGe=o("gpt2"),ZGe=o(" \u2014 "),Bx=a("a"),eOe=o("GPT2Config"),oOe=o(" (OpenAI GPT-2 model)"),rOe=l(),Rm=a("li"),ZK=a("strong"),tOe=o("gpt_neo"),aOe=o(" \u2014 "),Px=a("a"),nOe=o("GPTNeoConfig"),sOe=o(" (GPT Neo model)"),lOe=l(),Bm=a("li"),eZ=a("strong"),iOe=o("gptj"),dOe=o(" \u2014 "),$x=a("a"),cOe=o("GPTJConfig"),fOe=o(" (GPT-J model)"),mOe=l(),Pm=a("li"),oZ=a("strong"),gOe=o("hubert"),hOe=o(" \u2014 "),Ix=a("a"),pOe=o("HubertConfig"),_Oe=o(" (Hubert model)"),uOe=l(),$m=a("li"),rZ=a("strong"),bOe=o("ibert"),vOe=o(" \u2014 "),qx=a("a"),FOe=o("IBertConfig"),TOe=o(" (I-BERT model)"),MOe=l(),Im=a("li"),tZ=a("strong"),EOe=o("imagegpt"),COe=o(" \u2014 "),Nx=a("a"),wOe=o("ImageGPTConfig"),AOe=o(" (ImageGPT model)"),yOe=l(),qm=a("li"),aZ=a("strong"),LOe=o("layoutlm"),xOe=o(" \u2014 "),jx=a("a"),kOe=o("LayoutLMConfig"),SOe=o(" (LayoutLM model)"),ROe=l(),Nm=a("li"),nZ=a("strong"),BOe=o("layoutlmv2"),POe=o(" \u2014 "),Dx=a("a"),$Oe=o("LayoutLMv2Config"),IOe=o(" (LayoutLMv2 model)"),qOe=l(),jm=a("li"),sZ=a("strong"),NOe=o("led"),jOe=o(" \u2014 "),Gx=a("a"),DOe=o("LEDConfig"),GOe=o(" (LED model)"),OOe=l(),Dm=a("li"),lZ=a("strong"),VOe=o("longformer"),XOe=o(" \u2014 "),Ox=a("a"),zOe=o("LongformerConfig"),QOe=o(" (Longformer model)"),WOe=l(),Gm=a("li"),iZ=a("strong"),HOe=o("luke"),UOe=o(" \u2014 "),Vx=a("a"),JOe=o("LukeConfig"),YOe=o(" (LUKE model)"),KOe=l(),Om=a("li"),dZ=a("strong"),ZOe=o("lxmert"),eVe=o(" \u2014 "),Xx=a("a"),oVe=o("LxmertConfig"),rVe=o(" (LXMERT model)"),tVe=l(),Vm=a("li"),cZ=a("strong"),aVe=o("m2m_100"),nVe=o(" \u2014 "),zx=a("a"),sVe=o("M2M100Config"),lVe=o(" (M2M100 model)"),iVe=l(),Xm=a("li"),fZ=a("strong"),dVe=o("marian"),cVe=o(" \u2014 "),Qx=a("a"),fVe=o("MarianConfig"),mVe=o(" (Marian model)"),gVe=l(),zm=a("li"),mZ=a("strong"),hVe=o("maskformer"),pVe=o(" \u2014 "),Wx=a("a"),_Ve=o("MaskFormerConfig"),uVe=o(" (MaskFormer model)"),bVe=l(),Qm=a("li"),gZ=a("strong"),vVe=o("mbart"),FVe=o(" \u2014 "),Hx=a("a"),TVe=o("MBartConfig"),MVe=o(" (mBART model)"),EVe=l(),Wm=a("li"),hZ=a("strong"),CVe=o("megatron-bert"),wVe=o(" \u2014 "),Ux=a("a"),AVe=o("MegatronBertConfig"),yVe=o(" (MegatronBert model)"),LVe=l(),Hm=a("li"),pZ=a("strong"),xVe=o("mobilebert"),kVe=o(" \u2014 "),Jx=a("a"),SVe=o("MobileBertConfig"),RVe=o(" (MobileBERT model)"),BVe=l(),Um=a("li"),_Z=a("strong"),PVe=o("mpnet"),$Ve=o(" \u2014 "),Yx=a("a"),IVe=o("MPNetConfig"),qVe=o(" (MPNet model)"),NVe=l(),Jm=a("li"),uZ=a("strong"),jVe=o("mt5"),DVe=o(" \u2014 "),Kx=a("a"),GVe=o("MT5Config"),OVe=o(" (mT5 model)"),VVe=l(),Ym=a("li"),bZ=a("strong"),XVe=o("nystromformer"),zVe=o(" \u2014 "),Zx=a("a"),QVe=o("NystromformerConfig"),WVe=o(" (Nystromformer model)"),HVe=l(),Km=a("li"),vZ=a("strong"),UVe=o("openai-gpt"),JVe=o(" \u2014 "),ek=a("a"),YVe=o("OpenAIGPTConfig"),KVe=o(" (OpenAI GPT model)"),ZVe=l(),Zm=a("li"),FZ=a("strong"),eXe=o("pegasus"),oXe=o(" \u2014 "),ok=a("a"),rXe=o("PegasusConfig"),tXe=o(" (Pegasus model)"),aXe=l(),eg=a("li"),TZ=a("strong"),nXe=o("perceiver"),sXe=o(" \u2014 "),rk=a("a"),lXe=o("PerceiverConfig"),iXe=o(" (Perceiver model)"),dXe=l(),og=a("li"),MZ=a("strong"),cXe=o("plbart"),fXe=o(" \u2014 "),tk=a("a"),mXe=o("PLBartConfig"),gXe=o(" (PLBart model)"),hXe=l(),rg=a("li"),EZ=a("strong"),pXe=o("poolformer"),_Xe=o(" \u2014 "),ak=a("a"),uXe=o("PoolFormerConfig"),bXe=o(" (PoolFormer model)"),vXe=l(),tg=a("li"),CZ=a("strong"),FXe=o("prophetnet"),TXe=o(" \u2014 "),nk=a("a"),MXe=o("ProphetNetConfig"),EXe=o(" (ProphetNet model)"),CXe=l(),ag=a("li"),wZ=a("strong"),wXe=o("qdqbert"),AXe=o(" \u2014 "),sk=a("a"),yXe=o("QDQBertConfig"),LXe=o(" (QDQBert model)"),xXe=l(),ng=a("li"),AZ=a("strong"),kXe=o("rag"),SXe=o(" \u2014 "),lk=a("a"),RXe=o("RagConfig"),BXe=o(" (RAG model)"),PXe=l(),sg=a("li"),yZ=a("strong"),$Xe=o("realm"),IXe=o(" \u2014 "),ik=a("a"),qXe=o("RealmConfig"),NXe=o(" (Realm model)"),jXe=l(),lg=a("li"),LZ=a("strong"),DXe=o("reformer"),GXe=o(" \u2014 "),dk=a("a"),OXe=o("ReformerConfig"),VXe=o(" (Reformer model)"),XXe=l(),ig=a("li"),xZ=a("strong"),zXe=o("regnet"),QXe=o(" \u2014 "),ck=a("a"),WXe=o("RegNetConfig"),HXe=o(" (RegNet model)"),UXe=l(),dg=a("li"),kZ=a("strong"),JXe=o("rembert"),YXe=o(" \u2014 "),fk=a("a"),KXe=o("RemBertConfig"),ZXe=o(" (RemBERT model)"),eze=l(),cg=a("li"),SZ=a("strong"),oze=o("resnet"),rze=o(" \u2014 "),mk=a("a"),tze=o("ResNetConfig"),aze=o(" (ResNet model)"),nze=l(),fg=a("li"),RZ=a("strong"),sze=o("retribert"),lze=o(" \u2014 "),gk=a("a"),ize=o("RetriBertConfig"),dze=o(" (RetriBERT model)"),cze=l(),mg=a("li"),BZ=a("strong"),fze=o("roberta"),mze=o(" \u2014 "),hk=a("a"),gze=o("RobertaConfig"),hze=o(" (RoBERTa model)"),pze=l(),gg=a("li"),PZ=a("strong"),_ze=o("roformer"),uze=o(" \u2014 "),pk=a("a"),bze=o("RoFormerConfig"),vze=o(" (RoFormer model)"),Fze=l(),hg=a("li"),$Z=a("strong"),Tze=o("segformer"),Mze=o(" \u2014 "),_k=a("a"),Eze=o("SegformerConfig"),Cze=o(" (SegFormer model)"),wze=l(),pg=a("li"),IZ=a("strong"),Aze=o("sew"),yze=o(" \u2014 "),uk=a("a"),Lze=o("SEWConfig"),xze=o(" (SEW model)"),kze=l(),_g=a("li"),qZ=a("strong"),Sze=o("sew-d"),Rze=o(" \u2014 "),bk=a("a"),Bze=o("SEWDConfig"),Pze=o(" (SEW-D model)"),$ze=l(),ug=a("li"),NZ=a("strong"),Ize=o("speech-encoder-decoder"),qze=o(" \u2014 "),vk=a("a"),Nze=o("SpeechEncoderDecoderConfig"),jze=o(" (Speech Encoder decoder model)"),Dze=l(),bg=a("li"),jZ=a("strong"),Gze=o("speech_to_text"),Oze=o(" \u2014 "),Fk=a("a"),Vze=o("Speech2TextConfig"),Xze=o(" (Speech2Text model)"),zze=l(),vg=a("li"),DZ=a("strong"),Qze=o("speech_to_text_2"),Wze=o(" \u2014 "),Tk=a("a"),Hze=o("Speech2Text2Config"),Uze=o(" (Speech2Text2 model)"),Jze=l(),Fg=a("li"),GZ=a("strong"),Yze=o("splinter"),Kze=o(" \u2014 "),Mk=a("a"),Zze=o("SplinterConfig"),eQe=o(" (Splinter model)"),oQe=l(),Tg=a("li"),OZ=a("strong"),rQe=o("squeezebert"),tQe=o(" \u2014 "),Ek=a("a"),aQe=o("SqueezeBertConfig"),nQe=o(" (SqueezeBERT model)"),sQe=l(),Mg=a("li"),VZ=a("strong"),lQe=o("swin"),iQe=o(" \u2014 "),Ck=a("a"),dQe=o("SwinConfig"),cQe=o(" (Swin model)"),fQe=l(),Eg=a("li"),XZ=a("strong"),mQe=o("t5"),gQe=o(" \u2014 "),wk=a("a"),hQe=o("T5Config"),pQe=o(" (T5 model)"),_Qe=l(),Cg=a("li"),zZ=a("strong"),uQe=o("tapas"),bQe=o(" \u2014 "),Ak=a("a"),vQe=o("TapasConfig"),FQe=o(" (TAPAS model)"),TQe=l(),wg=a("li"),QZ=a("strong"),MQe=o("tapex"),EQe=o(" \u2014 "),yk=a("a"),CQe=o("BartConfig"),wQe=o(" (TAPEX model)"),AQe=l(),Ag=a("li"),WZ=a("strong"),yQe=o("transfo-xl"),LQe=o(" \u2014 "),Lk=a("a"),xQe=o("TransfoXLConfig"),kQe=o(" (Transformer-XL model)"),SQe=l(),yg=a("li"),HZ=a("strong"),RQe=o("trocr"),BQe=o(" \u2014 "),xk=a("a"),PQe=o("TrOCRConfig"),$Qe=o(" (TrOCR model)"),IQe=l(),Lg=a("li"),UZ=a("strong"),qQe=o("unispeech"),NQe=o(" \u2014 "),kk=a("a"),jQe=o("UniSpeechConfig"),DQe=o(" (UniSpeech model)"),GQe=l(),xg=a("li"),JZ=a("strong"),OQe=o("unispeech-sat"),VQe=o(" \u2014 "),Sk=a("a"),XQe=o("UniSpeechSatConfig"),zQe=o(" (UniSpeechSat model)"),QQe=l(),kg=a("li"),YZ=a("strong"),WQe=o("van"),HQe=o(" \u2014 "),Rk=a("a"),UQe=o("VanConfig"),JQe=o(" (VAN model)"),YQe=l(),Sg=a("li"),KZ=a("strong"),KQe=o("vilt"),ZQe=o(" \u2014 "),Bk=a("a"),eWe=o("ViltConfig"),oWe=o(" (ViLT model)"),rWe=l(),Rg=a("li"),ZZ=a("strong"),tWe=o("vision-encoder-decoder"),aWe=o(" \u2014 "),Pk=a("a"),nWe=o("VisionEncoderDecoderConfig"),sWe=o(" (Vision Encoder decoder model)"),lWe=l(),Bg=a("li"),eee=a("strong"),iWe=o("vision-text-dual-encoder"),dWe=o(" \u2014 "),$k=a("a"),cWe=o("VisionTextDualEncoderConfig"),fWe=o(" (VisionTextDualEncoder model)"),mWe=l(),Pg=a("li"),oee=a("strong"),gWe=o("visual_bert"),hWe=o(" \u2014 "),Ik=a("a"),pWe=o("VisualBertConfig"),_We=o(" (VisualBert model)"),uWe=l(),$g=a("li"),ree=a("strong"),bWe=o("vit"),vWe=o(" \u2014 "),qk=a("a"),FWe=o("ViTConfig"),TWe=o(" (ViT model)"),MWe=l(),Ig=a("li"),tee=a("strong"),EWe=o("vit_mae"),CWe=o(" \u2014 "),Nk=a("a"),wWe=o("ViTMAEConfig"),AWe=o(" (ViTMAE model)"),yWe=l(),qg=a("li"),aee=a("strong"),LWe=o("wav2vec2"),xWe=o(" \u2014 "),jk=a("a"),kWe=o("Wav2Vec2Config"),SWe=o(" (Wav2Vec2 model)"),RWe=l(),Ng=a("li"),nee=a("strong"),BWe=o("wavlm"),PWe=o(" \u2014 "),Dk=a("a"),$We=o("WavLMConfig"),IWe=o(" (WavLM model)"),qWe=l(),jg=a("li"),see=a("strong"),NWe=o("xglm"),jWe=o(" \u2014 "),Gk=a("a"),DWe=o("XGLMConfig"),GWe=o(" (XGLM model)"),OWe=l(),Dg=a("li"),lee=a("strong"),VWe=o("xlm"),XWe=o(" \u2014 "),Ok=a("a"),zWe=o("XLMConfig"),QWe=o(" (XLM model)"),WWe=l(),Gg=a("li"),iee=a("strong"),HWe=o("xlm-prophetnet"),UWe=o(" \u2014 "),Vk=a("a"),JWe=o("XLMProphetNetConfig"),YWe=o(" (XLMProphetNet model)"),KWe=l(),Og=a("li"),dee=a("strong"),ZWe=o("xlm-roberta"),eHe=o(" \u2014 "),Xk=a("a"),oHe=o("XLMRobertaConfig"),rHe=o(" (XLM-RoBERTa model)"),tHe=l(),Vg=a("li"),cee=a("strong"),aHe=o("xlm-roberta-xl"),nHe=o(" \u2014 "),zk=a("a"),sHe=o("XLMRobertaXLConfig"),lHe=o(" (XLM-RoBERTa-XL model)"),iHe=l(),Xg=a("li"),fee=a("strong"),dHe=o("xlnet"),cHe=o(" \u2014 "),Qk=a("a"),fHe=o("XLNetConfig"),mHe=o(" (XLNet model)"),gHe=l(),zg=a("li"),mee=a("strong"),hHe=o("yoso"),pHe=o(" \u2014 "),Wk=a("a"),_He=o("YosoConfig"),uHe=o(" (YOSO model)"),bHe=l(),gee=a("p"),vHe=o("Examples:"),FHe=l(),f(aw.$$.fragment),THe=l(),Qg=a("div"),f(nw.$$.fragment),MHe=l(),hee=a("p"),EHe=o("Register a new configuration for this class."),hPe=l(),od=a("h2"),Wg=a("a"),pee=a("span"),f(sw.$$.fragment),CHe=l(),_ee=a("span"),wHe=o("AutoTokenizer"),pPe=l(),Wo=a("div"),f(lw.$$.fragment),AHe=l(),iw=a("p"),yHe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Hk=a("a"),LHe=o("AutoTokenizer.from_pretrained()"),xHe=o(" class method."),kHe=l(),dw=a("p"),SHe=o("This class cannot be instantiated directly using "),uee=a("code"),RHe=o("__init__()"),BHe=o(" (throws an error)."),PHe=l(),ho=a("div"),f(cw.$$.fragment),$He=l(),bee=a("p"),IHe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),qHe=l(),Oa=a("p"),NHe=o("The tokenizer class to instantiate is selected based on the "),vee=a("code"),jHe=o("model_type"),DHe=o(` property of the config object (either
passed as an argument or loaded from `),Fee=a("code"),GHe=o("pretrained_model_name_or_path"),OHe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tee=a("code"),VHe=o("pretrained_model_name_or_path"),XHe=o(":"),zHe=l(),E=a("ul"),Wn=a("li"),Mee=a("strong"),QHe=o("albert"),WHe=o(" \u2014 "),Uk=a("a"),HHe=o("AlbertTokenizer"),UHe=o(" or "),Jk=a("a"),JHe=o("AlbertTokenizerFast"),YHe=o(" (ALBERT model)"),KHe=l(),Hn=a("li"),Eee=a("strong"),ZHe=o("bart"),eUe=o(" \u2014 "),Yk=a("a"),oUe=o("BartTokenizer"),rUe=o(" or "),Kk=a("a"),tUe=o("BartTokenizerFast"),aUe=o(" (BART model)"),nUe=l(),Un=a("li"),Cee=a("strong"),sUe=o("barthez"),lUe=o(" \u2014 "),Zk=a("a"),iUe=o("BarthezTokenizer"),dUe=o(" or "),eS=a("a"),cUe=o("BarthezTokenizerFast"),fUe=o(" (BARThez model)"),mUe=l(),Hg=a("li"),wee=a("strong"),gUe=o("bartpho"),hUe=o(" \u2014 "),oS=a("a"),pUe=o("BartphoTokenizer"),_Ue=o(" (BARTpho model)"),uUe=l(),Jn=a("li"),Aee=a("strong"),bUe=o("bert"),vUe=o(" \u2014 "),rS=a("a"),FUe=o("BertTokenizer"),TUe=o(" or "),tS=a("a"),MUe=o("BertTokenizerFast"),EUe=o(" (BERT model)"),CUe=l(),Ug=a("li"),yee=a("strong"),wUe=o("bert-generation"),AUe=o(" \u2014 "),aS=a("a"),yUe=o("BertGenerationTokenizer"),LUe=o(" (Bert Generation model)"),xUe=l(),Jg=a("li"),Lee=a("strong"),kUe=o("bert-japanese"),SUe=o(" \u2014 "),nS=a("a"),RUe=o("BertJapaneseTokenizer"),BUe=o(" (BertJapanese model)"),PUe=l(),Yg=a("li"),xee=a("strong"),$Ue=o("bertweet"),IUe=o(" \u2014 "),sS=a("a"),qUe=o("BertweetTokenizer"),NUe=o(" (Bertweet model)"),jUe=l(),Yn=a("li"),kee=a("strong"),DUe=o("big_bird"),GUe=o(" \u2014 "),lS=a("a"),OUe=o("BigBirdTokenizer"),VUe=o(" or "),iS=a("a"),XUe=o("BigBirdTokenizerFast"),zUe=o(" (BigBird model)"),QUe=l(),Kn=a("li"),See=a("strong"),WUe=o("bigbird_pegasus"),HUe=o(" \u2014 "),dS=a("a"),UUe=o("PegasusTokenizer"),JUe=o(" or "),cS=a("a"),YUe=o("PegasusTokenizerFast"),KUe=o(" (BigBirdPegasus model)"),ZUe=l(),Zn=a("li"),Ree=a("strong"),eJe=o("blenderbot"),oJe=o(" \u2014 "),fS=a("a"),rJe=o("BlenderbotTokenizer"),tJe=o(" or "),mS=a("a"),aJe=o("BlenderbotTokenizerFast"),nJe=o(" (Blenderbot model)"),sJe=l(),Kg=a("li"),Bee=a("strong"),lJe=o("blenderbot-small"),iJe=o(" \u2014 "),gS=a("a"),dJe=o("BlenderbotSmallTokenizer"),cJe=o(" (BlenderbotSmall model)"),fJe=l(),Zg=a("li"),Pee=a("strong"),mJe=o("byt5"),gJe=o(" \u2014 "),hS=a("a"),hJe=o("ByT5Tokenizer"),pJe=o(" (ByT5 model)"),_Je=l(),es=a("li"),$ee=a("strong"),uJe=o("camembert"),bJe=o(" \u2014 "),pS=a("a"),vJe=o("CamembertTokenizer"),FJe=o(" or "),_S=a("a"),TJe=o("CamembertTokenizerFast"),MJe=o(" (CamemBERT model)"),EJe=l(),eh=a("li"),Iee=a("strong"),CJe=o("canine"),wJe=o(" \u2014 "),uS=a("a"),AJe=o("CanineTokenizer"),yJe=o(" (Canine model)"),LJe=l(),os=a("li"),qee=a("strong"),xJe=o("clip"),kJe=o(" \u2014 "),bS=a("a"),SJe=o("CLIPTokenizer"),RJe=o(" or "),vS=a("a"),BJe=o("CLIPTokenizerFast"),PJe=o(" (CLIP model)"),$Je=l(),rs=a("li"),Nee=a("strong"),IJe=o("convbert"),qJe=o(" \u2014 "),FS=a("a"),NJe=o("ConvBertTokenizer"),jJe=o(" or "),TS=a("a"),DJe=o("ConvBertTokenizerFast"),GJe=o(" (ConvBERT model)"),OJe=l(),ts=a("li"),jee=a("strong"),VJe=o("cpm"),XJe=o(" \u2014 "),MS=a("a"),zJe=o("CpmTokenizer"),QJe=o(" or "),Dee=a("code"),WJe=o("CpmTokenizerFast"),HJe=o(" (CPM model)"),UJe=l(),oh=a("li"),Gee=a("strong"),JJe=o("ctrl"),YJe=o(" \u2014 "),ES=a("a"),KJe=o("CTRLTokenizer"),ZJe=o(" (CTRL model)"),eYe=l(),as=a("li"),Oee=a("strong"),oYe=o("data2vec-text"),rYe=o(" \u2014 "),CS=a("a"),tYe=o("RobertaTokenizer"),aYe=o(" or "),wS=a("a"),nYe=o("RobertaTokenizerFast"),sYe=o(" (Data2VecText model)"),lYe=l(),ns=a("li"),Vee=a("strong"),iYe=o("deberta"),dYe=o(" \u2014 "),AS=a("a"),cYe=o("DebertaTokenizer"),fYe=o(" or "),yS=a("a"),mYe=o("DebertaTokenizerFast"),gYe=o(" (DeBERTa model)"),hYe=l(),ss=a("li"),Xee=a("strong"),pYe=o("deberta-v2"),_Ye=o(" \u2014 "),LS=a("a"),uYe=o("DebertaV2Tokenizer"),bYe=o(" or "),xS=a("a"),vYe=o("DebertaV2TokenizerFast"),FYe=o(" (DeBERTa-v2 model)"),TYe=l(),ls=a("li"),zee=a("strong"),MYe=o("distilbert"),EYe=o(" \u2014 "),kS=a("a"),CYe=o("DistilBertTokenizer"),wYe=o(" or "),SS=a("a"),AYe=o("DistilBertTokenizerFast"),yYe=o(" (DistilBERT model)"),LYe=l(),is=a("li"),Qee=a("strong"),xYe=o("dpr"),kYe=o(" \u2014 "),RS=a("a"),SYe=o("DPRQuestionEncoderTokenizer"),RYe=o(" or "),BS=a("a"),BYe=o("DPRQuestionEncoderTokenizerFast"),PYe=o(" (DPR model)"),$Ye=l(),ds=a("li"),Wee=a("strong"),IYe=o("electra"),qYe=o(" \u2014 "),PS=a("a"),NYe=o("ElectraTokenizer"),jYe=o(" or "),$S=a("a"),DYe=o("ElectraTokenizerFast"),GYe=o(" (ELECTRA model)"),OYe=l(),rh=a("li"),Hee=a("strong"),VYe=o("flaubert"),XYe=o(" \u2014 "),IS=a("a"),zYe=o("FlaubertTokenizer"),QYe=o(" (FlauBERT model)"),WYe=l(),cs=a("li"),Uee=a("strong"),HYe=o("fnet"),UYe=o(" \u2014 "),qS=a("a"),JYe=o("FNetTokenizer"),YYe=o(" or "),NS=a("a"),KYe=o("FNetTokenizerFast"),ZYe=o(" (FNet model)"),eKe=l(),th=a("li"),Jee=a("strong"),oKe=o("fsmt"),rKe=o(" \u2014 "),jS=a("a"),tKe=o("FSMTTokenizer"),aKe=o(" (FairSeq Machine-Translation model)"),nKe=l(),fs=a("li"),Yee=a("strong"),sKe=o("funnel"),lKe=o(" \u2014 "),DS=a("a"),iKe=o("FunnelTokenizer"),dKe=o(" or "),GS=a("a"),cKe=o("FunnelTokenizerFast"),fKe=o(" (Funnel Transformer model)"),mKe=l(),ms=a("li"),Kee=a("strong"),gKe=o("gpt2"),hKe=o(" \u2014 "),OS=a("a"),pKe=o("GPT2Tokenizer"),_Ke=o(" or "),VS=a("a"),uKe=o("GPT2TokenizerFast"),bKe=o(" (OpenAI GPT-2 model)"),vKe=l(),gs=a("li"),Zee=a("strong"),FKe=o("gpt_neo"),TKe=o(" \u2014 "),XS=a("a"),MKe=o("GPT2Tokenizer"),EKe=o(" or "),zS=a("a"),CKe=o("GPT2TokenizerFast"),wKe=o(" (GPT Neo model)"),AKe=l(),hs=a("li"),eoe=a("strong"),yKe=o("gptj"),LKe=o(" \u2014 "),QS=a("a"),xKe=o("GPT2Tokenizer"),kKe=o(" or "),WS=a("a"),SKe=o("GPT2TokenizerFast"),RKe=o(" (GPT-J model)"),BKe=l(),ps=a("li"),ooe=a("strong"),PKe=o("herbert"),$Ke=o(" \u2014 "),HS=a("a"),IKe=o("HerbertTokenizer"),qKe=o(" or "),US=a("a"),NKe=o("HerbertTokenizerFast"),jKe=o(" (HerBERT model)"),DKe=l(),ah=a("li"),roe=a("strong"),GKe=o("hubert"),OKe=o(" \u2014 "),JS=a("a"),VKe=o("Wav2Vec2CTCTokenizer"),XKe=o(" (Hubert model)"),zKe=l(),_s=a("li"),toe=a("strong"),QKe=o("ibert"),WKe=o(" \u2014 "),YS=a("a"),HKe=o("RobertaTokenizer"),UKe=o(" or "),KS=a("a"),JKe=o("RobertaTokenizerFast"),YKe=o(" (I-BERT model)"),KKe=l(),us=a("li"),aoe=a("strong"),ZKe=o("layoutlm"),eZe=o(" \u2014 "),ZS=a("a"),oZe=o("LayoutLMTokenizer"),rZe=o(" or "),eR=a("a"),tZe=o("LayoutLMTokenizerFast"),aZe=o(" (LayoutLM model)"),nZe=l(),bs=a("li"),noe=a("strong"),sZe=o("layoutlmv2"),lZe=o(" \u2014 "),oR=a("a"),iZe=o("LayoutLMv2Tokenizer"),dZe=o(" or "),rR=a("a"),cZe=o("LayoutLMv2TokenizerFast"),fZe=o(" (LayoutLMv2 model)"),mZe=l(),vs=a("li"),soe=a("strong"),gZe=o("layoutxlm"),hZe=o(" \u2014 "),tR=a("a"),pZe=o("LayoutXLMTokenizer"),_Ze=o(" or "),aR=a("a"),uZe=o("LayoutXLMTokenizerFast"),bZe=o(" (LayoutXLM model)"),vZe=l(),Fs=a("li"),loe=a("strong"),FZe=o("led"),TZe=o(" \u2014 "),nR=a("a"),MZe=o("LEDTokenizer"),EZe=o(" or "),sR=a("a"),CZe=o("LEDTokenizerFast"),wZe=o(" (LED model)"),AZe=l(),Ts=a("li"),ioe=a("strong"),yZe=o("longformer"),LZe=o(" \u2014 "),lR=a("a"),xZe=o("LongformerTokenizer"),kZe=o(" or "),iR=a("a"),SZe=o("LongformerTokenizerFast"),RZe=o(" (Longformer model)"),BZe=l(),nh=a("li"),doe=a("strong"),PZe=o("luke"),$Ze=o(" \u2014 "),dR=a("a"),IZe=o("LukeTokenizer"),qZe=o(" (LUKE model)"),NZe=l(),Ms=a("li"),coe=a("strong"),jZe=o("lxmert"),DZe=o(" \u2014 "),cR=a("a"),GZe=o("LxmertTokenizer"),OZe=o(" or "),fR=a("a"),VZe=o("LxmertTokenizerFast"),XZe=o(" (LXMERT model)"),zZe=l(),sh=a("li"),foe=a("strong"),QZe=o("m2m_100"),WZe=o(" \u2014 "),mR=a("a"),HZe=o("M2M100Tokenizer"),UZe=o(" (M2M100 model)"),JZe=l(),lh=a("li"),moe=a("strong"),YZe=o("marian"),KZe=o(" \u2014 "),gR=a("a"),ZZe=o("MarianTokenizer"),eeo=o(" (Marian model)"),oeo=l(),Es=a("li"),goe=a("strong"),reo=o("mbart"),teo=o(" \u2014 "),hR=a("a"),aeo=o("MBartTokenizer"),neo=o(" or "),pR=a("a"),seo=o("MBartTokenizerFast"),leo=o(" (mBART model)"),ieo=l(),Cs=a("li"),hoe=a("strong"),deo=o("mbart50"),ceo=o(" \u2014 "),_R=a("a"),feo=o("MBart50Tokenizer"),meo=o(" or "),uR=a("a"),geo=o("MBart50TokenizerFast"),heo=o(" (mBART-50 model)"),peo=l(),ws=a("li"),poe=a("strong"),_eo=o("megatron-bert"),ueo=o(" \u2014 "),bR=a("a"),beo=o("BertTokenizer"),veo=o(" or "),vR=a("a"),Feo=o("BertTokenizerFast"),Teo=o(" (MegatronBert model)"),Meo=l(),ih=a("li"),_oe=a("strong"),Eeo=o("mluke"),Ceo=o(" \u2014 "),FR=a("a"),weo=o("MLukeTokenizer"),Aeo=o(" (mLUKE model)"),yeo=l(),As=a("li"),uoe=a("strong"),Leo=o("mobilebert"),xeo=o(" \u2014 "),TR=a("a"),keo=o("MobileBertTokenizer"),Seo=o(" or "),MR=a("a"),Reo=o("MobileBertTokenizerFast"),Beo=o(" (MobileBERT model)"),Peo=l(),ys=a("li"),boe=a("strong"),$eo=o("mpnet"),Ieo=o(" \u2014 "),ER=a("a"),qeo=o("MPNetTokenizer"),Neo=o(" or "),CR=a("a"),jeo=o("MPNetTokenizerFast"),Deo=o(" (MPNet model)"),Geo=l(),Ls=a("li"),voe=a("strong"),Oeo=o("mt5"),Veo=o(" \u2014 "),wR=a("a"),Xeo=o("MT5Tokenizer"),zeo=o(" or "),AR=a("a"),Qeo=o("MT5TokenizerFast"),Weo=o(" (mT5 model)"),Heo=l(),xs=a("li"),Foe=a("strong"),Ueo=o("nystromformer"),Jeo=o(" \u2014 "),yR=a("a"),Yeo=o("AlbertTokenizer"),Keo=o(" or "),LR=a("a"),Zeo=o("AlbertTokenizerFast"),eoo=o(" (Nystromformer model)"),ooo=l(),ks=a("li"),Toe=a("strong"),roo=o("openai-gpt"),too=o(" \u2014 "),xR=a("a"),aoo=o("OpenAIGPTTokenizer"),noo=o(" or "),kR=a("a"),soo=o("OpenAIGPTTokenizerFast"),loo=o(" (OpenAI GPT model)"),ioo=l(),Ss=a("li"),Moe=a("strong"),doo=o("pegasus"),coo=o(" \u2014 "),SR=a("a"),foo=o("PegasusTokenizer"),moo=o(" or "),RR=a("a"),goo=o("PegasusTokenizerFast"),hoo=o(" (Pegasus model)"),poo=l(),dh=a("li"),Eoe=a("strong"),_oo=o("perceiver"),uoo=o(" \u2014 "),BR=a("a"),boo=o("PerceiverTokenizer"),voo=o(" (Perceiver model)"),Foo=l(),ch=a("li"),Coe=a("strong"),Too=o("phobert"),Moo=o(" \u2014 "),PR=a("a"),Eoo=o("PhobertTokenizer"),Coo=o(" (PhoBERT model)"),woo=l(),fh=a("li"),woe=a("strong"),Aoo=o("plbart"),yoo=o(" \u2014 "),$R=a("a"),Loo=o("PLBartTokenizer"),xoo=o(" (PLBart model)"),koo=l(),mh=a("li"),Aoe=a("strong"),Soo=o("prophetnet"),Roo=o(" \u2014 "),IR=a("a"),Boo=o("ProphetNetTokenizer"),Poo=o(" (ProphetNet model)"),$oo=l(),Rs=a("li"),yoe=a("strong"),Ioo=o("qdqbert"),qoo=o(" \u2014 "),qR=a("a"),Noo=o("BertTokenizer"),joo=o(" or "),NR=a("a"),Doo=o("BertTokenizerFast"),Goo=o(" (QDQBert model)"),Ooo=l(),gh=a("li"),Loe=a("strong"),Voo=o("rag"),Xoo=o(" \u2014 "),jR=a("a"),zoo=o("RagTokenizer"),Qoo=o(" (RAG model)"),Woo=l(),Bs=a("li"),xoe=a("strong"),Hoo=o("realm"),Uoo=o(" \u2014 "),DR=a("a"),Joo=o("RealmTokenizer"),Yoo=o(" or "),GR=a("a"),Koo=o("RealmTokenizerFast"),Zoo=o(" (Realm model)"),ero=l(),Ps=a("li"),koe=a("strong"),oro=o("reformer"),rro=o(" \u2014 "),OR=a("a"),tro=o("ReformerTokenizer"),aro=o(" or "),VR=a("a"),nro=o("ReformerTokenizerFast"),sro=o(" (Reformer model)"),lro=l(),$s=a("li"),Soe=a("strong"),iro=o("rembert"),dro=o(" \u2014 "),XR=a("a"),cro=o("RemBertTokenizer"),fro=o(" or "),zR=a("a"),mro=o("RemBertTokenizerFast"),gro=o(" (RemBERT model)"),hro=l(),Is=a("li"),Roe=a("strong"),pro=o("retribert"),_ro=o(" \u2014 "),QR=a("a"),uro=o("RetriBertTokenizer"),bro=o(" or "),WR=a("a"),vro=o("RetriBertTokenizerFast"),Fro=o(" (RetriBERT model)"),Tro=l(),qs=a("li"),Boe=a("strong"),Mro=o("roberta"),Ero=o(" \u2014 "),HR=a("a"),Cro=o("RobertaTokenizer"),wro=o(" or "),UR=a("a"),Aro=o("RobertaTokenizerFast"),yro=o(" (RoBERTa model)"),Lro=l(),Ns=a("li"),Poe=a("strong"),xro=o("roformer"),kro=o(" \u2014 "),JR=a("a"),Sro=o("RoFormerTokenizer"),Rro=o(" or "),YR=a("a"),Bro=o("RoFormerTokenizerFast"),Pro=o(" (RoFormer model)"),$ro=l(),hh=a("li"),$oe=a("strong"),Iro=o("speech_to_text"),qro=o(" \u2014 "),KR=a("a"),Nro=o("Speech2TextTokenizer"),jro=o(" (Speech2Text model)"),Dro=l(),ph=a("li"),Ioe=a("strong"),Gro=o("speech_to_text_2"),Oro=o(" \u2014 "),ZR=a("a"),Vro=o("Speech2Text2Tokenizer"),Xro=o(" (Speech2Text2 model)"),zro=l(),js=a("li"),qoe=a("strong"),Qro=o("splinter"),Wro=o(" \u2014 "),eB=a("a"),Hro=o("SplinterTokenizer"),Uro=o(" or "),oB=a("a"),Jro=o("SplinterTokenizerFast"),Yro=o(" (Splinter model)"),Kro=l(),Ds=a("li"),Noe=a("strong"),Zro=o("squeezebert"),eto=o(" \u2014 "),rB=a("a"),oto=o("SqueezeBertTokenizer"),rto=o(" or "),tB=a("a"),tto=o("SqueezeBertTokenizerFast"),ato=o(" (SqueezeBERT model)"),nto=l(),Gs=a("li"),joe=a("strong"),sto=o("t5"),lto=o(" \u2014 "),aB=a("a"),ito=o("T5Tokenizer"),dto=o(" or "),nB=a("a"),cto=o("T5TokenizerFast"),fto=o(" (T5 model)"),mto=l(),_h=a("li"),Doe=a("strong"),gto=o("tapas"),hto=o(" \u2014 "),sB=a("a"),pto=o("TapasTokenizer"),_to=o(" (TAPAS model)"),uto=l(),uh=a("li"),Goe=a("strong"),bto=o("tapex"),vto=o(" \u2014 "),lB=a("a"),Fto=o("TapexTokenizer"),Tto=o(" (TAPEX model)"),Mto=l(),bh=a("li"),Ooe=a("strong"),Eto=o("transfo-xl"),Cto=o(" \u2014 "),iB=a("a"),wto=o("TransfoXLTokenizer"),Ato=o(" (Transformer-XL model)"),yto=l(),Os=a("li"),Voe=a("strong"),Lto=o("visual_bert"),xto=o(" \u2014 "),dB=a("a"),kto=o("BertTokenizer"),Sto=o(" or "),cB=a("a"),Rto=o("BertTokenizerFast"),Bto=o(" (VisualBert model)"),Pto=l(),vh=a("li"),Xoe=a("strong"),$to=o("wav2vec2"),Ito=o(" \u2014 "),fB=a("a"),qto=o("Wav2Vec2CTCTokenizer"),Nto=o(" (Wav2Vec2 model)"),jto=l(),Fh=a("li"),zoe=a("strong"),Dto=o("wav2vec2_phoneme"),Gto=o(" \u2014 "),mB=a("a"),Oto=o("Wav2Vec2PhonemeCTCTokenizer"),Vto=o(" (Wav2Vec2Phoneme model)"),Xto=l(),Vs=a("li"),Qoe=a("strong"),zto=o("xglm"),Qto=o(" \u2014 "),gB=a("a"),Wto=o("XGLMTokenizer"),Hto=o(" or "),hB=a("a"),Uto=o("XGLMTokenizerFast"),Jto=o(" (XGLM model)"),Yto=l(),Th=a("li"),Woe=a("strong"),Kto=o("xlm"),Zto=o(" \u2014 "),pB=a("a"),eao=o("XLMTokenizer"),oao=o(" (XLM model)"),rao=l(),Mh=a("li"),Hoe=a("strong"),tao=o("xlm-prophetnet"),aao=o(" \u2014 "),_B=a("a"),nao=o("XLMProphetNetTokenizer"),sao=o(" (XLMProphetNet model)"),lao=l(),Xs=a("li"),Uoe=a("strong"),iao=o("xlm-roberta"),dao=o(" \u2014 "),uB=a("a"),cao=o("XLMRobertaTokenizer"),fao=o(" or "),bB=a("a"),mao=o("XLMRobertaTokenizerFast"),gao=o(" (XLM-RoBERTa model)"),hao=l(),zs=a("li"),Joe=a("strong"),pao=o("xlm-roberta-xl"),_ao=o(" \u2014 "),vB=a("a"),uao=o("RobertaTokenizer"),bao=o(" or "),FB=a("a"),vao=o("RobertaTokenizerFast"),Fao=o(" (XLM-RoBERTa-XL model)"),Tao=l(),Qs=a("li"),Yoe=a("strong"),Mao=o("xlnet"),Eao=o(" \u2014 "),TB=a("a"),Cao=o("XLNetTokenizer"),wao=o(" or "),MB=a("a"),Aao=o("XLNetTokenizerFast"),yao=o(" (XLNet model)"),Lao=l(),Ws=a("li"),Koe=a("strong"),xao=o("yoso"),kao=o(" \u2014 "),EB=a("a"),Sao=o("AlbertTokenizer"),Rao=o(" or "),CB=a("a"),Bao=o("AlbertTokenizerFast"),Pao=o(" (YOSO model)"),$ao=l(),Zoe=a("p"),Iao=o("Examples:"),qao=l(),f(fw.$$.fragment),Nao=l(),Eh=a("div"),f(mw.$$.fragment),jao=l(),ere=a("p"),Dao=o("Register a new tokenizer in this mapping."),_Pe=l(),rd=a("h2"),Ch=a("a"),ore=a("span"),f(gw.$$.fragment),Gao=l(),rre=a("span"),Oao=o("AutoFeatureExtractor"),uPe=l(),Ho=a("div"),f(hw.$$.fragment),Vao=l(),pw=a("p"),Xao=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),wB=a("a"),zao=o("AutoFeatureExtractor.from_pretrained()"),Qao=o(" class method."),Wao=l(),_w=a("p"),Hao=o("This class cannot be instantiated directly using "),tre=a("code"),Uao=o("__init__()"),Jao=o(" (throws an error)."),Yao=l(),Ie=a("div"),f(uw.$$.fragment),Kao=l(),are=a("p"),Zao=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),eno=l(),Va=a("p"),ono=o("The feature extractor class to instantiate is selected based on the "),nre=a("code"),rno=o("model_type"),tno=o(` property of the config object
(either passed as an argument or loaded from `),sre=a("code"),ano=o("pretrained_model_name_or_path"),nno=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),lre=a("code"),sno=o("pretrained_model_name_or_path"),lno=o(":"),ino=l(),H=a("ul"),wh=a("li"),ire=a("strong"),dno=o("beit"),cno=o(" \u2014 "),AB=a("a"),fno=o("BeitFeatureExtractor"),mno=o(" (BEiT model)"),gno=l(),Ah=a("li"),dre=a("strong"),hno=o("clip"),pno=o(" \u2014 "),yB=a("a"),_no=o("CLIPFeatureExtractor"),uno=o(" (CLIP model)"),bno=l(),yh=a("li"),cre=a("strong"),vno=o("convnext"),Fno=o(" \u2014 "),LB=a("a"),Tno=o("ConvNextFeatureExtractor"),Mno=o(" (ConvNext model)"),Eno=l(),Lh=a("li"),fre=a("strong"),Cno=o("data2vec-audio"),wno=o(" \u2014 "),xB=a("a"),Ano=o("Wav2Vec2FeatureExtractor"),yno=o(" (Data2VecAudio model)"),Lno=l(),xh=a("li"),mre=a("strong"),xno=o("data2vec-vision"),kno=o(" \u2014 "),kB=a("a"),Sno=o("BeitFeatureExtractor"),Rno=o(" (Data2VecVision model)"),Bno=l(),kh=a("li"),gre=a("strong"),Pno=o("deit"),$no=o(" \u2014 "),SB=a("a"),Ino=o("DeiTFeatureExtractor"),qno=o(" (DeiT model)"),Nno=l(),Sh=a("li"),hre=a("strong"),jno=o("detr"),Dno=o(" \u2014 "),RB=a("a"),Gno=o("DetrFeatureExtractor"),Ono=o(" (DETR model)"),Vno=l(),Rh=a("li"),pre=a("strong"),Xno=o("dpt"),zno=o(" \u2014 "),BB=a("a"),Qno=o("DPTFeatureExtractor"),Wno=o(" (DPT model)"),Hno=l(),Bh=a("li"),_re=a("strong"),Uno=o("glpn"),Jno=o(" \u2014 "),PB=a("a"),Yno=o("GLPNFeatureExtractor"),Kno=o(" (GLPN model)"),Zno=l(),Ph=a("li"),ure=a("strong"),eso=o("hubert"),oso=o(" \u2014 "),$B=a("a"),rso=o("Wav2Vec2FeatureExtractor"),tso=o(" (Hubert model)"),aso=l(),$h=a("li"),bre=a("strong"),nso=o("layoutlmv2"),sso=o(" \u2014 "),IB=a("a"),lso=o("LayoutLMv2FeatureExtractor"),iso=o(" (LayoutLMv2 model)"),dso=l(),Ih=a("li"),vre=a("strong"),cso=o("maskformer"),fso=o(" \u2014 "),qB=a("a"),mso=o("MaskFormerFeatureExtractor"),gso=o(" (MaskFormer model)"),hso=l(),qh=a("li"),Fre=a("strong"),pso=o("perceiver"),_so=o(" \u2014 "),NB=a("a"),uso=o("PerceiverFeatureExtractor"),bso=o(" (Perceiver model)"),vso=l(),Nh=a("li"),Tre=a("strong"),Fso=o("poolformer"),Tso=o(" \u2014 "),jB=a("a"),Mso=o("PoolFormerFeatureExtractor"),Eso=o(" (PoolFormer model)"),Cso=l(),jh=a("li"),Mre=a("strong"),wso=o("regnet"),Aso=o(" \u2014 "),DB=a("a"),yso=o("ConvNextFeatureExtractor"),Lso=o(" (RegNet model)"),xso=l(),Dh=a("li"),Ere=a("strong"),kso=o("resnet"),Sso=o(" \u2014 "),GB=a("a"),Rso=o("ConvNextFeatureExtractor"),Bso=o(" (ResNet model)"),Pso=l(),Gh=a("li"),Cre=a("strong"),$so=o("segformer"),Iso=o(" \u2014 "),OB=a("a"),qso=o("SegformerFeatureExtractor"),Nso=o(" (SegFormer model)"),jso=l(),Oh=a("li"),wre=a("strong"),Dso=o("speech_to_text"),Gso=o(" \u2014 "),VB=a("a"),Oso=o("Speech2TextFeatureExtractor"),Vso=o(" (Speech2Text model)"),Xso=l(),Vh=a("li"),Are=a("strong"),zso=o("swin"),Qso=o(" \u2014 "),XB=a("a"),Wso=o("ViTFeatureExtractor"),Hso=o(" (Swin model)"),Uso=l(),Xh=a("li"),yre=a("strong"),Jso=o("van"),Yso=o(" \u2014 "),zB=a("a"),Kso=o("ConvNextFeatureExtractor"),Zso=o(" (VAN model)"),elo=l(),zh=a("li"),Lre=a("strong"),olo=o("vit"),rlo=o(" \u2014 "),QB=a("a"),tlo=o("ViTFeatureExtractor"),alo=o(" (ViT model)"),nlo=l(),Qh=a("li"),xre=a("strong"),slo=o("vit_mae"),llo=o(" \u2014 "),WB=a("a"),ilo=o("ViTFeatureExtractor"),dlo=o(" (ViTMAE model)"),clo=l(),Wh=a("li"),kre=a("strong"),flo=o("wav2vec2"),mlo=o(" \u2014 "),HB=a("a"),glo=o("Wav2Vec2FeatureExtractor"),hlo=o(" (Wav2Vec2 model)"),plo=l(),f(Hh.$$.fragment),_lo=l(),Sre=a("p"),ulo=o("Examples:"),blo=l(),f(bw.$$.fragment),vlo=l(),Uh=a("div"),f(vw.$$.fragment),Flo=l(),Rre=a("p"),Tlo=o("Register a new feature extractor for this class."),bPe=l(),td=a("h2"),Jh=a("a"),Bre=a("span"),f(Fw.$$.fragment),Mlo=l(),Pre=a("span"),Elo=o("AutoProcessor"),vPe=l(),Uo=a("div"),f(Tw.$$.fragment),Clo=l(),Mw=a("p"),wlo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),UB=a("a"),Alo=o("AutoProcessor.from_pretrained()"),ylo=o(" class method."),Llo=l(),Ew=a("p"),xlo=o("This class cannot be instantiated directly using "),$re=a("code"),klo=o("__init__()"),Slo=o(" (throws an error)."),Rlo=l(),qe=a("div"),f(Cw.$$.fragment),Blo=l(),Ire=a("p"),Plo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),$lo=l(),ad=a("p"),Ilo=o("The processor class to instantiate is selected based on the "),qre=a("code"),qlo=o("model_type"),Nlo=o(` property of the config object (either
passed as an argument or loaded from `),Nre=a("code"),jlo=o("pretrained_model_name_or_path"),Dlo=o(" if possible):"),Glo=l(),de=a("ul"),Yh=a("li"),jre=a("strong"),Olo=o("clip"),Vlo=o(" \u2014 "),JB=a("a"),Xlo=o("CLIPProcessor"),zlo=o(" (CLIP model)"),Qlo=l(),Kh=a("li"),Dre=a("strong"),Wlo=o("layoutlmv2"),Hlo=o(" \u2014 "),YB=a("a"),Ulo=o("LayoutLMv2Processor"),Jlo=o(" (LayoutLMv2 model)"),Ylo=l(),Zh=a("li"),Gre=a("strong"),Klo=o("layoutxlm"),Zlo=o(" \u2014 "),KB=a("a"),eio=o("LayoutXLMProcessor"),oio=o(" (LayoutXLM model)"),rio=l(),ep=a("li"),Ore=a("strong"),tio=o("sew"),aio=o(" \u2014 "),ZB=a("a"),nio=o("Wav2Vec2Processor"),sio=o(" (SEW model)"),lio=l(),op=a("li"),Vre=a("strong"),iio=o("sew-d"),dio=o(" \u2014 "),eP=a("a"),cio=o("Wav2Vec2Processor"),fio=o(" (SEW-D model)"),mio=l(),rp=a("li"),Xre=a("strong"),gio=o("speech_to_text"),hio=o(" \u2014 "),oP=a("a"),pio=o("Speech2TextProcessor"),_io=o(" (Speech2Text model)"),uio=l(),tp=a("li"),zre=a("strong"),bio=o("speech_to_text_2"),vio=o(" \u2014 "),rP=a("a"),Fio=o("Speech2Text2Processor"),Tio=o(" (Speech2Text2 model)"),Mio=l(),ap=a("li"),Qre=a("strong"),Eio=o("trocr"),Cio=o(" \u2014 "),tP=a("a"),wio=o("TrOCRProcessor"),Aio=o(" (TrOCR model)"),yio=l(),np=a("li"),Wre=a("strong"),Lio=o("unispeech"),xio=o(" \u2014 "),aP=a("a"),kio=o("Wav2Vec2Processor"),Sio=o(" (UniSpeech model)"),Rio=l(),sp=a("li"),Hre=a("strong"),Bio=o("unispeech-sat"),Pio=o(" \u2014 "),nP=a("a"),$io=o("Wav2Vec2Processor"),Iio=o(" (UniSpeechSat model)"),qio=l(),lp=a("li"),Ure=a("strong"),Nio=o("vilt"),jio=o(" \u2014 "),sP=a("a"),Dio=o("ViltProcessor"),Gio=o(" (ViLT model)"),Oio=l(),ip=a("li"),Jre=a("strong"),Vio=o("vision-text-dual-encoder"),Xio=o(" \u2014 "),lP=a("a"),zio=o("VisionTextDualEncoderProcessor"),Qio=o(" (VisionTextDualEncoder model)"),Wio=l(),dp=a("li"),Yre=a("strong"),Hio=o("wav2vec2"),Uio=o(" \u2014 "),iP=a("a"),Jio=o("Wav2Vec2Processor"),Yio=o(" (Wav2Vec2 model)"),Kio=l(),cp=a("li"),Kre=a("strong"),Zio=o("wavlm"),edo=o(" \u2014 "),dP=a("a"),odo=o("Wav2Vec2Processor"),rdo=o(" (WavLM model)"),tdo=l(),f(fp.$$.fragment),ado=l(),Zre=a("p"),ndo=o("Examples:"),sdo=l(),f(ww.$$.fragment),ldo=l(),mp=a("div"),f(Aw.$$.fragment),ido=l(),ete=a("p"),ddo=o("Register a new processor for this class."),FPe=l(),nd=a("h2"),gp=a("a"),ote=a("span"),f(yw.$$.fragment),cdo=l(),rte=a("span"),fdo=o("AutoModel"),TPe=l(),Jo=a("div"),f(Lw.$$.fragment),mdo=l(),sd=a("p"),gdo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cP=a("a"),hdo=o("from_pretrained()"),pdo=o(" class method or the "),fP=a("a"),_do=o("from_config()"),udo=o(` class
method.`),bdo=l(),xw=a("p"),vdo=o("This class cannot be instantiated directly using "),tte=a("code"),Fdo=o("__init__()"),Tdo=o(" (throws an error)."),Mdo=l(),Xr=a("div"),f(kw.$$.fragment),Edo=l(),ate=a("p"),Cdo=o("Instantiates one of the base model classes of the library from a configuration."),wdo=l(),ld=a("p"),Ado=o(`Note:
Loading a model from its configuration file does `),nte=a("strong"),ydo=o("not"),Ldo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mP=a("a"),xdo=o("from_pretrained()"),kdo=o(" to load the model weights."),Sdo=l(),ste=a("p"),Rdo=o("Examples:"),Bdo=l(),f(Sw.$$.fragment),Pdo=l(),Ne=a("div"),f(Rw.$$.fragment),$do=l(),lte=a("p"),Ido=o("Instantiate one of the base model classes of the library from a pretrained model."),qdo=l(),Xa=a("p"),Ndo=o("The model class to instantiate is selected based on the "),ite=a("code"),jdo=o("model_type"),Ddo=o(` property of the config object (either
passed as an argument or loaded from `),dte=a("code"),Gdo=o("pretrained_model_name_or_path"),Odo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cte=a("code"),Vdo=o("pretrained_model_name_or_path"),Xdo=o(":"),zdo=l(),T=a("ul"),hp=a("li"),fte=a("strong"),Qdo=o("albert"),Wdo=o(" \u2014 "),gP=a("a"),Hdo=o("AlbertModel"),Udo=o(" (ALBERT model)"),Jdo=l(),pp=a("li"),mte=a("strong"),Ydo=o("bart"),Kdo=o(" \u2014 "),hP=a("a"),Zdo=o("BartModel"),eco=o(" (BART model)"),oco=l(),_p=a("li"),gte=a("strong"),rco=o("beit"),tco=o(" \u2014 "),pP=a("a"),aco=o("BeitModel"),nco=o(" (BEiT model)"),sco=l(),up=a("li"),hte=a("strong"),lco=o("bert"),ico=o(" \u2014 "),_P=a("a"),dco=o("BertModel"),cco=o(" (BERT model)"),fco=l(),bp=a("li"),pte=a("strong"),mco=o("bert-generation"),gco=o(" \u2014 "),uP=a("a"),hco=o("BertGenerationEncoder"),pco=o(" (Bert Generation model)"),_co=l(),vp=a("li"),_te=a("strong"),uco=o("big_bird"),bco=o(" \u2014 "),bP=a("a"),vco=o("BigBirdModel"),Fco=o(" (BigBird model)"),Tco=l(),Fp=a("li"),ute=a("strong"),Mco=o("bigbird_pegasus"),Eco=o(" \u2014 "),vP=a("a"),Cco=o("BigBirdPegasusModel"),wco=o(" (BigBirdPegasus model)"),Aco=l(),Tp=a("li"),bte=a("strong"),yco=o("blenderbot"),Lco=o(" \u2014 "),FP=a("a"),xco=o("BlenderbotModel"),kco=o(" (Blenderbot model)"),Sco=l(),Mp=a("li"),vte=a("strong"),Rco=o("blenderbot-small"),Bco=o(" \u2014 "),TP=a("a"),Pco=o("BlenderbotSmallModel"),$co=o(" (BlenderbotSmall model)"),Ico=l(),Ep=a("li"),Fte=a("strong"),qco=o("camembert"),Nco=o(" \u2014 "),MP=a("a"),jco=o("CamembertModel"),Dco=o(" (CamemBERT model)"),Gco=l(),Cp=a("li"),Tte=a("strong"),Oco=o("canine"),Vco=o(" \u2014 "),EP=a("a"),Xco=o("CanineModel"),zco=o(" (Canine model)"),Qco=l(),wp=a("li"),Mte=a("strong"),Wco=o("clip"),Hco=o(" \u2014 "),CP=a("a"),Uco=o("CLIPModel"),Jco=o(" (CLIP model)"),Yco=l(),Ap=a("li"),Ete=a("strong"),Kco=o("convbert"),Zco=o(" \u2014 "),wP=a("a"),efo=o("ConvBertModel"),ofo=o(" (ConvBERT model)"),rfo=l(),yp=a("li"),Cte=a("strong"),tfo=o("convnext"),afo=o(" \u2014 "),AP=a("a"),nfo=o("ConvNextModel"),sfo=o(" (ConvNext model)"),lfo=l(),Lp=a("li"),wte=a("strong"),ifo=o("ctrl"),dfo=o(" \u2014 "),yP=a("a"),cfo=o("CTRLModel"),ffo=o(" (CTRL model)"),mfo=l(),xp=a("li"),Ate=a("strong"),gfo=o("data2vec-audio"),hfo=o(" \u2014 "),LP=a("a"),pfo=o("Data2VecAudioModel"),_fo=o(" (Data2VecAudio model)"),ufo=l(),kp=a("li"),yte=a("strong"),bfo=o("data2vec-text"),vfo=o(" \u2014 "),xP=a("a"),Ffo=o("Data2VecTextModel"),Tfo=o(" (Data2VecText model)"),Mfo=l(),Sp=a("li"),Lte=a("strong"),Efo=o("data2vec-vision"),Cfo=o(" \u2014 "),kP=a("a"),wfo=o("Data2VecVisionModel"),Afo=o(" (Data2VecVision model)"),yfo=l(),Rp=a("li"),xte=a("strong"),Lfo=o("deberta"),xfo=o(" \u2014 "),SP=a("a"),kfo=o("DebertaModel"),Sfo=o(" (DeBERTa model)"),Rfo=l(),Bp=a("li"),kte=a("strong"),Bfo=o("deberta-v2"),Pfo=o(" \u2014 "),RP=a("a"),$fo=o("DebertaV2Model"),Ifo=o(" (DeBERTa-v2 model)"),qfo=l(),Pp=a("li"),Ste=a("strong"),Nfo=o("decision_transformer"),jfo=o(" \u2014 "),BP=a("a"),Dfo=o("DecisionTransformerModel"),Gfo=o(" (Decision Transformer model)"),Ofo=l(),$p=a("li"),Rte=a("strong"),Vfo=o("deit"),Xfo=o(" \u2014 "),PP=a("a"),zfo=o("DeiTModel"),Qfo=o(" (DeiT model)"),Wfo=l(),Ip=a("li"),Bte=a("strong"),Hfo=o("detr"),Ufo=o(" \u2014 "),$P=a("a"),Jfo=o("DetrModel"),Yfo=o(" (DETR model)"),Kfo=l(),qp=a("li"),Pte=a("strong"),Zfo=o("distilbert"),emo=o(" \u2014 "),IP=a("a"),omo=o("DistilBertModel"),rmo=o(" (DistilBERT model)"),tmo=l(),Np=a("li"),$te=a("strong"),amo=o("dpr"),nmo=o(" \u2014 "),qP=a("a"),smo=o("DPRQuestionEncoder"),lmo=o(" (DPR model)"),imo=l(),jp=a("li"),Ite=a("strong"),dmo=o("dpt"),cmo=o(" \u2014 "),NP=a("a"),fmo=o("DPTModel"),mmo=o(" (DPT model)"),gmo=l(),Dp=a("li"),qte=a("strong"),hmo=o("electra"),pmo=o(" \u2014 "),jP=a("a"),_mo=o("ElectraModel"),umo=o(" (ELECTRA model)"),bmo=l(),Gp=a("li"),Nte=a("strong"),vmo=o("flaubert"),Fmo=o(" \u2014 "),DP=a("a"),Tmo=o("FlaubertModel"),Mmo=o(" (FlauBERT model)"),Emo=l(),Op=a("li"),jte=a("strong"),Cmo=o("fnet"),wmo=o(" \u2014 "),GP=a("a"),Amo=o("FNetModel"),ymo=o(" (FNet model)"),Lmo=l(),Vp=a("li"),Dte=a("strong"),xmo=o("fsmt"),kmo=o(" \u2014 "),OP=a("a"),Smo=o("FSMTModel"),Rmo=o(" (FairSeq Machine-Translation model)"),Bmo=l(),Hs=a("li"),Gte=a("strong"),Pmo=o("funnel"),$mo=o(" \u2014 "),VP=a("a"),Imo=o("FunnelModel"),qmo=o(" or "),XP=a("a"),Nmo=o("FunnelBaseModel"),jmo=o(" (Funnel Transformer model)"),Dmo=l(),Xp=a("li"),Ote=a("strong"),Gmo=o("glpn"),Omo=o(" \u2014 "),zP=a("a"),Vmo=o("GLPNModel"),Xmo=o(" (GLPN model)"),zmo=l(),zp=a("li"),Vte=a("strong"),Qmo=o("gpt2"),Wmo=o(" \u2014 "),QP=a("a"),Hmo=o("GPT2Model"),Umo=o(" (OpenAI GPT-2 model)"),Jmo=l(),Qp=a("li"),Xte=a("strong"),Ymo=o("gpt_neo"),Kmo=o(" \u2014 "),WP=a("a"),Zmo=o("GPTNeoModel"),ego=o(" (GPT Neo model)"),ogo=l(),Wp=a("li"),zte=a("strong"),rgo=o("gptj"),tgo=o(" \u2014 "),HP=a("a"),ago=o("GPTJModel"),ngo=o(" (GPT-J model)"),sgo=l(),Hp=a("li"),Qte=a("strong"),lgo=o("hubert"),igo=o(" \u2014 "),UP=a("a"),dgo=o("HubertModel"),cgo=o(" (Hubert model)"),fgo=l(),Up=a("li"),Wte=a("strong"),mgo=o("ibert"),ggo=o(" \u2014 "),JP=a("a"),hgo=o("IBertModel"),pgo=o(" (I-BERT model)"),_go=l(),Jp=a("li"),Hte=a("strong"),ugo=o("imagegpt"),bgo=o(" \u2014 "),YP=a("a"),vgo=o("ImageGPTModel"),Fgo=o(" (ImageGPT model)"),Tgo=l(),Yp=a("li"),Ute=a("strong"),Mgo=o("layoutlm"),Ego=o(" \u2014 "),KP=a("a"),Cgo=o("LayoutLMModel"),wgo=o(" (LayoutLM model)"),Ago=l(),Kp=a("li"),Jte=a("strong"),ygo=o("layoutlmv2"),Lgo=o(" \u2014 "),ZP=a("a"),xgo=o("LayoutLMv2Model"),kgo=o(" (LayoutLMv2 model)"),Sgo=l(),Zp=a("li"),Yte=a("strong"),Rgo=o("led"),Bgo=o(" \u2014 "),e$=a("a"),Pgo=o("LEDModel"),$go=o(" (LED model)"),Igo=l(),e_=a("li"),Kte=a("strong"),qgo=o("longformer"),Ngo=o(" \u2014 "),o$=a("a"),jgo=o("LongformerModel"),Dgo=o(" (Longformer model)"),Ggo=l(),o_=a("li"),Zte=a("strong"),Ogo=o("luke"),Vgo=o(" \u2014 "),r$=a("a"),Xgo=o("LukeModel"),zgo=o(" (LUKE model)"),Qgo=l(),r_=a("li"),eae=a("strong"),Wgo=o("lxmert"),Hgo=o(" \u2014 "),t$=a("a"),Ugo=o("LxmertModel"),Jgo=o(" (LXMERT model)"),Ygo=l(),t_=a("li"),oae=a("strong"),Kgo=o("m2m_100"),Zgo=o(" \u2014 "),a$=a("a"),eho=o("M2M100Model"),oho=o(" (M2M100 model)"),rho=l(),a_=a("li"),rae=a("strong"),tho=o("marian"),aho=o(" \u2014 "),n$=a("a"),nho=o("MarianModel"),sho=o(" (Marian model)"),lho=l(),n_=a("li"),tae=a("strong"),iho=o("maskformer"),dho=o(" \u2014 "),s$=a("a"),cho=o("MaskFormerModel"),fho=o(" (MaskFormer model)"),mho=l(),s_=a("li"),aae=a("strong"),gho=o("mbart"),hho=o(" \u2014 "),l$=a("a"),pho=o("MBartModel"),_ho=o(" (mBART model)"),uho=l(),l_=a("li"),nae=a("strong"),bho=o("megatron-bert"),vho=o(" \u2014 "),i$=a("a"),Fho=o("MegatronBertModel"),Tho=o(" (MegatronBert model)"),Mho=l(),i_=a("li"),sae=a("strong"),Eho=o("mobilebert"),Cho=o(" \u2014 "),d$=a("a"),who=o("MobileBertModel"),Aho=o(" (MobileBERT model)"),yho=l(),d_=a("li"),lae=a("strong"),Lho=o("mpnet"),xho=o(" \u2014 "),c$=a("a"),kho=o("MPNetModel"),Sho=o(" (MPNet model)"),Rho=l(),c_=a("li"),iae=a("strong"),Bho=o("mt5"),Pho=o(" \u2014 "),f$=a("a"),$ho=o("MT5Model"),Iho=o(" (mT5 model)"),qho=l(),f_=a("li"),dae=a("strong"),Nho=o("nystromformer"),jho=o(" \u2014 "),m$=a("a"),Dho=o("NystromformerModel"),Gho=o(" (Nystromformer model)"),Oho=l(),m_=a("li"),cae=a("strong"),Vho=o("openai-gpt"),Xho=o(" \u2014 "),g$=a("a"),zho=o("OpenAIGPTModel"),Qho=o(" (OpenAI GPT model)"),Who=l(),g_=a("li"),fae=a("strong"),Hho=o("pegasus"),Uho=o(" \u2014 "),h$=a("a"),Jho=o("PegasusModel"),Yho=o(" (Pegasus model)"),Kho=l(),h_=a("li"),mae=a("strong"),Zho=o("perceiver"),epo=o(" \u2014 "),p$=a("a"),opo=o("PerceiverModel"),rpo=o(" (Perceiver model)"),tpo=l(),p_=a("li"),gae=a("strong"),apo=o("plbart"),npo=o(" \u2014 "),_$=a("a"),spo=o("PLBartModel"),lpo=o(" (PLBart model)"),ipo=l(),__=a("li"),hae=a("strong"),dpo=o("poolformer"),cpo=o(" \u2014 "),u$=a("a"),fpo=o("PoolFormerModel"),mpo=o(" (PoolFormer model)"),gpo=l(),u_=a("li"),pae=a("strong"),hpo=o("prophetnet"),ppo=o(" \u2014 "),b$=a("a"),_po=o("ProphetNetModel"),upo=o(" (ProphetNet model)"),bpo=l(),b_=a("li"),_ae=a("strong"),vpo=o("qdqbert"),Fpo=o(" \u2014 "),v$=a("a"),Tpo=o("QDQBertModel"),Mpo=o(" (QDQBert model)"),Epo=l(),v_=a("li"),uae=a("strong"),Cpo=o("reformer"),wpo=o(" \u2014 "),F$=a("a"),Apo=o("ReformerModel"),ypo=o(" (Reformer model)"),Lpo=l(),F_=a("li"),bae=a("strong"),xpo=o("regnet"),kpo=o(" \u2014 "),T$=a("a"),Spo=o("RegNetModel"),Rpo=o(" (RegNet model)"),Bpo=l(),T_=a("li"),vae=a("strong"),Ppo=o("rembert"),$po=o(" \u2014 "),M$=a("a"),Ipo=o("RemBertModel"),qpo=o(" (RemBERT model)"),Npo=l(),M_=a("li"),Fae=a("strong"),jpo=o("resnet"),Dpo=o(" \u2014 "),E$=a("a"),Gpo=o("ResNetModel"),Opo=o(" (ResNet model)"),Vpo=l(),E_=a("li"),Tae=a("strong"),Xpo=o("retribert"),zpo=o(" \u2014 "),C$=a("a"),Qpo=o("RetriBertModel"),Wpo=o(" (RetriBERT model)"),Hpo=l(),C_=a("li"),Mae=a("strong"),Upo=o("roberta"),Jpo=o(" \u2014 "),w$=a("a"),Ypo=o("RobertaModel"),Kpo=o(" (RoBERTa model)"),Zpo=l(),w_=a("li"),Eae=a("strong"),e_o=o("roformer"),o_o=o(" \u2014 "),A$=a("a"),r_o=o("RoFormerModel"),t_o=o(" (RoFormer model)"),a_o=l(),A_=a("li"),Cae=a("strong"),n_o=o("segformer"),s_o=o(" \u2014 "),y$=a("a"),l_o=o("SegformerModel"),i_o=o(" (SegFormer model)"),d_o=l(),y_=a("li"),wae=a("strong"),c_o=o("sew"),f_o=o(" \u2014 "),L$=a("a"),m_o=o("SEWModel"),g_o=o(" (SEW model)"),h_o=l(),L_=a("li"),Aae=a("strong"),p_o=o("sew-d"),__o=o(" \u2014 "),x$=a("a"),u_o=o("SEWDModel"),b_o=o(" (SEW-D model)"),v_o=l(),x_=a("li"),yae=a("strong"),F_o=o("speech_to_text"),T_o=o(" \u2014 "),k$=a("a"),M_o=o("Speech2TextModel"),E_o=o(" (Speech2Text model)"),C_o=l(),k_=a("li"),Lae=a("strong"),w_o=o("splinter"),A_o=o(" \u2014 "),S$=a("a"),y_o=o("SplinterModel"),L_o=o(" (Splinter model)"),x_o=l(),S_=a("li"),xae=a("strong"),k_o=o("squeezebert"),S_o=o(" \u2014 "),R$=a("a"),R_o=o("SqueezeBertModel"),B_o=o(" (SqueezeBERT model)"),P_o=l(),R_=a("li"),kae=a("strong"),$_o=o("swin"),I_o=o(" \u2014 "),B$=a("a"),q_o=o("SwinModel"),N_o=o(" (Swin model)"),j_o=l(),B_=a("li"),Sae=a("strong"),D_o=o("t5"),G_o=o(" \u2014 "),P$=a("a"),O_o=o("T5Model"),V_o=o(" (T5 model)"),X_o=l(),P_=a("li"),Rae=a("strong"),z_o=o("tapas"),Q_o=o(" \u2014 "),$$=a("a"),W_o=o("TapasModel"),H_o=o(" (TAPAS model)"),U_o=l(),$_=a("li"),Bae=a("strong"),J_o=o("transfo-xl"),Y_o=o(" \u2014 "),I$=a("a"),K_o=o("TransfoXLModel"),Z_o=o(" (Transformer-XL model)"),euo=l(),I_=a("li"),Pae=a("strong"),ouo=o("unispeech"),ruo=o(" \u2014 "),q$=a("a"),tuo=o("UniSpeechModel"),auo=o(" (UniSpeech model)"),nuo=l(),q_=a("li"),$ae=a("strong"),suo=o("unispeech-sat"),luo=o(" \u2014 "),N$=a("a"),iuo=o("UniSpeechSatModel"),duo=o(" (UniSpeechSat model)"),cuo=l(),N_=a("li"),Iae=a("strong"),fuo=o("van"),muo=o(" \u2014 "),j$=a("a"),guo=o("VanModel"),huo=o(" (VAN model)"),puo=l(),j_=a("li"),qae=a("strong"),_uo=o("vilt"),uuo=o(" \u2014 "),D$=a("a"),buo=o("ViltModel"),vuo=o(" (ViLT model)"),Fuo=l(),D_=a("li"),Nae=a("strong"),Tuo=o("vision-text-dual-encoder"),Muo=o(" \u2014 "),G$=a("a"),Euo=o("VisionTextDualEncoderModel"),Cuo=o(" (VisionTextDualEncoder model)"),wuo=l(),G_=a("li"),jae=a("strong"),Auo=o("visual_bert"),yuo=o(" \u2014 "),O$=a("a"),Luo=o("VisualBertModel"),xuo=o(" (VisualBert model)"),kuo=l(),O_=a("li"),Dae=a("strong"),Suo=o("vit"),Ruo=o(" \u2014 "),V$=a("a"),Buo=o("ViTModel"),Puo=o(" (ViT model)"),$uo=l(),V_=a("li"),Gae=a("strong"),Iuo=o("vit_mae"),quo=o(" \u2014 "),X$=a("a"),Nuo=o("ViTMAEModel"),juo=o(" (ViTMAE model)"),Duo=l(),X_=a("li"),Oae=a("strong"),Guo=o("wav2vec2"),Ouo=o(" \u2014 "),z$=a("a"),Vuo=o("Wav2Vec2Model"),Xuo=o(" (Wav2Vec2 model)"),zuo=l(),z_=a("li"),Vae=a("strong"),Quo=o("wavlm"),Wuo=o(" \u2014 "),Q$=a("a"),Huo=o("WavLMModel"),Uuo=o(" (WavLM model)"),Juo=l(),Q_=a("li"),Xae=a("strong"),Yuo=o("xglm"),Kuo=o(" \u2014 "),W$=a("a"),Zuo=o("XGLMModel"),e1o=o(" (XGLM model)"),o1o=l(),W_=a("li"),zae=a("strong"),r1o=o("xlm"),t1o=o(" \u2014 "),H$=a("a"),a1o=o("XLMModel"),n1o=o(" (XLM model)"),s1o=l(),H_=a("li"),Qae=a("strong"),l1o=o("xlm-prophetnet"),i1o=o(" \u2014 "),U$=a("a"),d1o=o("XLMProphetNetModel"),c1o=o(" (XLMProphetNet model)"),f1o=l(),U_=a("li"),Wae=a("strong"),m1o=o("xlm-roberta"),g1o=o(" \u2014 "),J$=a("a"),h1o=o("XLMRobertaModel"),p1o=o(" (XLM-RoBERTa model)"),_1o=l(),J_=a("li"),Hae=a("strong"),u1o=o("xlm-roberta-xl"),b1o=o(" \u2014 "),Y$=a("a"),v1o=o("XLMRobertaXLModel"),F1o=o(" (XLM-RoBERTa-XL model)"),T1o=l(),Y_=a("li"),Uae=a("strong"),M1o=o("xlnet"),E1o=o(" \u2014 "),K$=a("a"),C1o=o("XLNetModel"),w1o=o(" (XLNet model)"),A1o=l(),K_=a("li"),Jae=a("strong"),y1o=o("yoso"),L1o=o(" \u2014 "),Z$=a("a"),x1o=o("YosoModel"),k1o=o(" (YOSO model)"),S1o=l(),Z_=a("p"),R1o=o("The model is set in evaluation mode by default using "),Yae=a("code"),B1o=o("model.eval()"),P1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kae=a("code"),$1o=o("model.train()"),I1o=l(),Zae=a("p"),q1o=o("Examples:"),N1o=l(),f(Bw.$$.fragment),MPe=l(),id=a("h2"),eu=a("a"),ene=a("span"),f(Pw.$$.fragment),j1o=l(),one=a("span"),D1o=o("AutoModelForPreTraining"),EPe=l(),Yo=a("div"),f($w.$$.fragment),G1o=l(),dd=a("p"),O1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eI=a("a"),V1o=o("from_pretrained()"),X1o=o(" class method or the "),oI=a("a"),z1o=o("from_config()"),Q1o=o(` class
method.`),W1o=l(),Iw=a("p"),H1o=o("This class cannot be instantiated directly using "),rne=a("code"),U1o=o("__init__()"),J1o=o(" (throws an error)."),Y1o=l(),zr=a("div"),f(qw.$$.fragment),K1o=l(),tne=a("p"),Z1o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),e4o=l(),cd=a("p"),o4o=o(`Note:
Loading a model from its configuration file does `),ane=a("strong"),r4o=o("not"),t4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rI=a("a"),a4o=o("from_pretrained()"),n4o=o(" to load the model weights."),s4o=l(),nne=a("p"),l4o=o("Examples:"),i4o=l(),f(Nw.$$.fragment),d4o=l(),je=a("div"),f(jw.$$.fragment),c4o=l(),sne=a("p"),f4o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),m4o=l(),za=a("p"),g4o=o("The model class to instantiate is selected based on the "),lne=a("code"),h4o=o("model_type"),p4o=o(` property of the config object (either
passed as an argument or loaded from `),ine=a("code"),_4o=o("pretrained_model_name_or_path"),u4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dne=a("code"),b4o=o("pretrained_model_name_or_path"),v4o=o(":"),F4o=l(),S=a("ul"),ou=a("li"),cne=a("strong"),T4o=o("albert"),M4o=o(" \u2014 "),tI=a("a"),E4o=o("AlbertForPreTraining"),C4o=o(" (ALBERT model)"),w4o=l(),ru=a("li"),fne=a("strong"),A4o=o("bart"),y4o=o(" \u2014 "),aI=a("a"),L4o=o("BartForConditionalGeneration"),x4o=o(" (BART model)"),k4o=l(),tu=a("li"),mne=a("strong"),S4o=o("bert"),R4o=o(" \u2014 "),nI=a("a"),B4o=o("BertForPreTraining"),P4o=o(" (BERT model)"),$4o=l(),au=a("li"),gne=a("strong"),I4o=o("big_bird"),q4o=o(" \u2014 "),sI=a("a"),N4o=o("BigBirdForPreTraining"),j4o=o(" (BigBird model)"),D4o=l(),nu=a("li"),hne=a("strong"),G4o=o("camembert"),O4o=o(" \u2014 "),lI=a("a"),V4o=o("CamembertForMaskedLM"),X4o=o(" (CamemBERT model)"),z4o=l(),su=a("li"),pne=a("strong"),Q4o=o("ctrl"),W4o=o(" \u2014 "),iI=a("a"),H4o=o("CTRLLMHeadModel"),U4o=o(" (CTRL model)"),J4o=l(),lu=a("li"),_ne=a("strong"),Y4o=o("data2vec-text"),K4o=o(" \u2014 "),dI=a("a"),Z4o=o("Data2VecTextForMaskedLM"),ebo=o(" (Data2VecText model)"),obo=l(),iu=a("li"),une=a("strong"),rbo=o("deberta"),tbo=o(" \u2014 "),cI=a("a"),abo=o("DebertaForMaskedLM"),nbo=o(" (DeBERTa model)"),sbo=l(),du=a("li"),bne=a("strong"),lbo=o("deberta-v2"),ibo=o(" \u2014 "),fI=a("a"),dbo=o("DebertaV2ForMaskedLM"),cbo=o(" (DeBERTa-v2 model)"),fbo=l(),cu=a("li"),vne=a("strong"),mbo=o("distilbert"),gbo=o(" \u2014 "),mI=a("a"),hbo=o("DistilBertForMaskedLM"),pbo=o(" (DistilBERT model)"),_bo=l(),fu=a("li"),Fne=a("strong"),ubo=o("electra"),bbo=o(" \u2014 "),gI=a("a"),vbo=o("ElectraForPreTraining"),Fbo=o(" (ELECTRA model)"),Tbo=l(),mu=a("li"),Tne=a("strong"),Mbo=o("flaubert"),Ebo=o(" \u2014 "),hI=a("a"),Cbo=o("FlaubertWithLMHeadModel"),wbo=o(" (FlauBERT model)"),Abo=l(),gu=a("li"),Mne=a("strong"),ybo=o("fnet"),Lbo=o(" \u2014 "),pI=a("a"),xbo=o("FNetForPreTraining"),kbo=o(" (FNet model)"),Sbo=l(),hu=a("li"),Ene=a("strong"),Rbo=o("fsmt"),Bbo=o(" \u2014 "),_I=a("a"),Pbo=o("FSMTForConditionalGeneration"),$bo=o(" (FairSeq Machine-Translation model)"),Ibo=l(),pu=a("li"),Cne=a("strong"),qbo=o("funnel"),Nbo=o(" \u2014 "),uI=a("a"),jbo=o("FunnelForPreTraining"),Dbo=o(" (Funnel Transformer model)"),Gbo=l(),_u=a("li"),wne=a("strong"),Obo=o("gpt2"),Vbo=o(" \u2014 "),bI=a("a"),Xbo=o("GPT2LMHeadModel"),zbo=o(" (OpenAI GPT-2 model)"),Qbo=l(),uu=a("li"),Ane=a("strong"),Wbo=o("ibert"),Hbo=o(" \u2014 "),vI=a("a"),Ubo=o("IBertForMaskedLM"),Jbo=o(" (I-BERT model)"),Ybo=l(),bu=a("li"),yne=a("strong"),Kbo=o("layoutlm"),Zbo=o(" \u2014 "),FI=a("a"),e2o=o("LayoutLMForMaskedLM"),o2o=o(" (LayoutLM model)"),r2o=l(),vu=a("li"),Lne=a("strong"),t2o=o("longformer"),a2o=o(" \u2014 "),TI=a("a"),n2o=o("LongformerForMaskedLM"),s2o=o(" (Longformer model)"),l2o=l(),Fu=a("li"),xne=a("strong"),i2o=o("lxmert"),d2o=o(" \u2014 "),MI=a("a"),c2o=o("LxmertForPreTraining"),f2o=o(" (LXMERT model)"),m2o=l(),Tu=a("li"),kne=a("strong"),g2o=o("megatron-bert"),h2o=o(" \u2014 "),EI=a("a"),p2o=o("MegatronBertForPreTraining"),_2o=o(" (MegatronBert model)"),u2o=l(),Mu=a("li"),Sne=a("strong"),b2o=o("mobilebert"),v2o=o(" \u2014 "),CI=a("a"),F2o=o("MobileBertForPreTraining"),T2o=o(" (MobileBERT model)"),M2o=l(),Eu=a("li"),Rne=a("strong"),E2o=o("mpnet"),C2o=o(" \u2014 "),wI=a("a"),w2o=o("MPNetForMaskedLM"),A2o=o(" (MPNet model)"),y2o=l(),Cu=a("li"),Bne=a("strong"),L2o=o("openai-gpt"),x2o=o(" \u2014 "),AI=a("a"),k2o=o("OpenAIGPTLMHeadModel"),S2o=o(" (OpenAI GPT model)"),R2o=l(),wu=a("li"),Pne=a("strong"),B2o=o("retribert"),P2o=o(" \u2014 "),yI=a("a"),$2o=o("RetriBertModel"),I2o=o(" (RetriBERT model)"),q2o=l(),Au=a("li"),$ne=a("strong"),N2o=o("roberta"),j2o=o(" \u2014 "),LI=a("a"),D2o=o("RobertaForMaskedLM"),G2o=o(" (RoBERTa model)"),O2o=l(),yu=a("li"),Ine=a("strong"),V2o=o("squeezebert"),X2o=o(" \u2014 "),xI=a("a"),z2o=o("SqueezeBertForMaskedLM"),Q2o=o(" (SqueezeBERT model)"),W2o=l(),Lu=a("li"),qne=a("strong"),H2o=o("t5"),U2o=o(" \u2014 "),kI=a("a"),J2o=o("T5ForConditionalGeneration"),Y2o=o(" (T5 model)"),K2o=l(),xu=a("li"),Nne=a("strong"),Z2o=o("tapas"),e5o=o(" \u2014 "),SI=a("a"),o5o=o("TapasForMaskedLM"),r5o=o(" (TAPAS model)"),t5o=l(),ku=a("li"),jne=a("strong"),a5o=o("transfo-xl"),n5o=o(" \u2014 "),RI=a("a"),s5o=o("TransfoXLLMHeadModel"),l5o=o(" (Transformer-XL model)"),i5o=l(),Su=a("li"),Dne=a("strong"),d5o=o("unispeech"),c5o=o(" \u2014 "),BI=a("a"),f5o=o("UniSpeechForPreTraining"),m5o=o(" (UniSpeech model)"),g5o=l(),Ru=a("li"),Gne=a("strong"),h5o=o("unispeech-sat"),p5o=o(" \u2014 "),PI=a("a"),_5o=o("UniSpeechSatForPreTraining"),u5o=o(" (UniSpeechSat model)"),b5o=l(),Bu=a("li"),One=a("strong"),v5o=o("visual_bert"),F5o=o(" \u2014 "),$I=a("a"),T5o=o("VisualBertForPreTraining"),M5o=o(" (VisualBert model)"),E5o=l(),Pu=a("li"),Vne=a("strong"),C5o=o("vit_mae"),w5o=o(" \u2014 "),II=a("a"),A5o=o("ViTMAEForPreTraining"),y5o=o(" (ViTMAE model)"),L5o=l(),$u=a("li"),Xne=a("strong"),x5o=o("wav2vec2"),k5o=o(" \u2014 "),qI=a("a"),S5o=o("Wav2Vec2ForPreTraining"),R5o=o(" (Wav2Vec2 model)"),B5o=l(),Iu=a("li"),zne=a("strong"),P5o=o("xlm"),$5o=o(" \u2014 "),NI=a("a"),I5o=o("XLMWithLMHeadModel"),q5o=o(" (XLM model)"),N5o=l(),qu=a("li"),Qne=a("strong"),j5o=o("xlm-roberta"),D5o=o(" \u2014 "),jI=a("a"),G5o=o("XLMRobertaForMaskedLM"),O5o=o(" (XLM-RoBERTa model)"),V5o=l(),Nu=a("li"),Wne=a("strong"),X5o=o("xlm-roberta-xl"),z5o=o(" \u2014 "),DI=a("a"),Q5o=o("XLMRobertaXLForMaskedLM"),W5o=o(" (XLM-RoBERTa-XL model)"),H5o=l(),ju=a("li"),Hne=a("strong"),U5o=o("xlnet"),J5o=o(" \u2014 "),GI=a("a"),Y5o=o("XLNetLMHeadModel"),K5o=o(" (XLNet model)"),Z5o=l(),Du=a("p"),e3o=o("The model is set in evaluation mode by default using "),Une=a("code"),o3o=o("model.eval()"),r3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jne=a("code"),t3o=o("model.train()"),a3o=l(),Yne=a("p"),n3o=o("Examples:"),s3o=l(),f(Dw.$$.fragment),CPe=l(),fd=a("h2"),Gu=a("a"),Kne=a("span"),f(Gw.$$.fragment),l3o=l(),Zne=a("span"),i3o=o("AutoModelForCausalLM"),wPe=l(),Ko=a("div"),f(Ow.$$.fragment),d3o=l(),md=a("p"),c3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OI=a("a"),f3o=o("from_pretrained()"),m3o=o(" class method or the "),VI=a("a"),g3o=o("from_config()"),h3o=o(` class
method.`),p3o=l(),Vw=a("p"),_3o=o("This class cannot be instantiated directly using "),ese=a("code"),u3o=o("__init__()"),b3o=o(" (throws an error)."),v3o=l(),Qr=a("div"),f(Xw.$$.fragment),F3o=l(),ose=a("p"),T3o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),M3o=l(),gd=a("p"),E3o=o(`Note:
Loading a model from its configuration file does `),rse=a("strong"),C3o=o("not"),w3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XI=a("a"),A3o=o("from_pretrained()"),y3o=o(" to load the model weights."),L3o=l(),tse=a("p"),x3o=o("Examples:"),k3o=l(),f(zw.$$.fragment),S3o=l(),De=a("div"),f(Qw.$$.fragment),R3o=l(),ase=a("p"),B3o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),P3o=l(),Qa=a("p"),$3o=o("The model class to instantiate is selected based on the "),nse=a("code"),I3o=o("model_type"),q3o=o(` property of the config object (either
passed as an argument or loaded from `),sse=a("code"),N3o=o("pretrained_model_name_or_path"),j3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lse=a("code"),D3o=o("pretrained_model_name_or_path"),G3o=o(":"),O3o=l(),$=a("ul"),Ou=a("li"),ise=a("strong"),V3o=o("bart"),X3o=o(" \u2014 "),zI=a("a"),z3o=o("BartForCausalLM"),Q3o=o(" (BART model)"),W3o=l(),Vu=a("li"),dse=a("strong"),H3o=o("bert"),U3o=o(" \u2014 "),QI=a("a"),J3o=o("BertLMHeadModel"),Y3o=o(" (BERT model)"),K3o=l(),Xu=a("li"),cse=a("strong"),Z3o=o("bert-generation"),e6o=o(" \u2014 "),WI=a("a"),o6o=o("BertGenerationDecoder"),r6o=o(" (Bert Generation model)"),t6o=l(),zu=a("li"),fse=a("strong"),a6o=o("big_bird"),n6o=o(" \u2014 "),HI=a("a"),s6o=o("BigBirdForCausalLM"),l6o=o(" (BigBird model)"),i6o=l(),Qu=a("li"),mse=a("strong"),d6o=o("bigbird_pegasus"),c6o=o(" \u2014 "),UI=a("a"),f6o=o("BigBirdPegasusForCausalLM"),m6o=o(" (BigBirdPegasus model)"),g6o=l(),Wu=a("li"),gse=a("strong"),h6o=o("blenderbot"),p6o=o(" \u2014 "),JI=a("a"),_6o=o("BlenderbotForCausalLM"),u6o=o(" (Blenderbot model)"),b6o=l(),Hu=a("li"),hse=a("strong"),v6o=o("blenderbot-small"),F6o=o(" \u2014 "),YI=a("a"),T6o=o("BlenderbotSmallForCausalLM"),M6o=o(" (BlenderbotSmall model)"),E6o=l(),Uu=a("li"),pse=a("strong"),C6o=o("camembert"),w6o=o(" \u2014 "),KI=a("a"),A6o=o("CamembertForCausalLM"),y6o=o(" (CamemBERT model)"),L6o=l(),Ju=a("li"),_se=a("strong"),x6o=o("ctrl"),k6o=o(" \u2014 "),ZI=a("a"),S6o=o("CTRLLMHeadModel"),R6o=o(" (CTRL model)"),B6o=l(),Yu=a("li"),use=a("strong"),P6o=o("data2vec-text"),$6o=o(" \u2014 "),eq=a("a"),I6o=o("Data2VecTextForCausalLM"),q6o=o(" (Data2VecText model)"),N6o=l(),Ku=a("li"),bse=a("strong"),j6o=o("electra"),D6o=o(" \u2014 "),oq=a("a"),G6o=o("ElectraForCausalLM"),O6o=o(" (ELECTRA model)"),V6o=l(),Zu=a("li"),vse=a("strong"),X6o=o("gpt2"),z6o=o(" \u2014 "),rq=a("a"),Q6o=o("GPT2LMHeadModel"),W6o=o(" (OpenAI GPT-2 model)"),H6o=l(),e1=a("li"),Fse=a("strong"),U6o=o("gpt_neo"),J6o=o(" \u2014 "),tq=a("a"),Y6o=o("GPTNeoForCausalLM"),K6o=o(" (GPT Neo model)"),Z6o=l(),o1=a("li"),Tse=a("strong"),evo=o("gptj"),ovo=o(" \u2014 "),aq=a("a"),rvo=o("GPTJForCausalLM"),tvo=o(" (GPT-J model)"),avo=l(),r1=a("li"),Mse=a("strong"),nvo=o("marian"),svo=o(" \u2014 "),nq=a("a"),lvo=o("MarianForCausalLM"),ivo=o(" (Marian model)"),dvo=l(),t1=a("li"),Ese=a("strong"),cvo=o("mbart"),fvo=o(" \u2014 "),sq=a("a"),mvo=o("MBartForCausalLM"),gvo=o(" (mBART model)"),hvo=l(),a1=a("li"),Cse=a("strong"),pvo=o("megatron-bert"),_vo=o(" \u2014 "),lq=a("a"),uvo=o("MegatronBertForCausalLM"),bvo=o(" (MegatronBert model)"),vvo=l(),n1=a("li"),wse=a("strong"),Fvo=o("openai-gpt"),Tvo=o(" \u2014 "),iq=a("a"),Mvo=o("OpenAIGPTLMHeadModel"),Evo=o(" (OpenAI GPT model)"),Cvo=l(),s1=a("li"),Ase=a("strong"),wvo=o("pegasus"),Avo=o(" \u2014 "),dq=a("a"),yvo=o("PegasusForCausalLM"),Lvo=o(" (Pegasus model)"),xvo=l(),l1=a("li"),yse=a("strong"),kvo=o("plbart"),Svo=o(" \u2014 "),cq=a("a"),Rvo=o("PLBartForCausalLM"),Bvo=o(" (PLBart model)"),Pvo=l(),i1=a("li"),Lse=a("strong"),$vo=o("prophetnet"),Ivo=o(" \u2014 "),fq=a("a"),qvo=o("ProphetNetForCausalLM"),Nvo=o(" (ProphetNet model)"),jvo=l(),d1=a("li"),xse=a("strong"),Dvo=o("qdqbert"),Gvo=o(" \u2014 "),mq=a("a"),Ovo=o("QDQBertLMHeadModel"),Vvo=o(" (QDQBert model)"),Xvo=l(),c1=a("li"),kse=a("strong"),zvo=o("reformer"),Qvo=o(" \u2014 "),gq=a("a"),Wvo=o("ReformerModelWithLMHead"),Hvo=o(" (Reformer model)"),Uvo=l(),f1=a("li"),Sse=a("strong"),Jvo=o("rembert"),Yvo=o(" \u2014 "),hq=a("a"),Kvo=o("RemBertForCausalLM"),Zvo=o(" (RemBERT model)"),eFo=l(),m1=a("li"),Rse=a("strong"),oFo=o("roberta"),rFo=o(" \u2014 "),pq=a("a"),tFo=o("RobertaForCausalLM"),aFo=o(" (RoBERTa model)"),nFo=l(),g1=a("li"),Bse=a("strong"),sFo=o("roformer"),lFo=o(" \u2014 "),_q=a("a"),iFo=o("RoFormerForCausalLM"),dFo=o(" (RoFormer model)"),cFo=l(),h1=a("li"),Pse=a("strong"),fFo=o("speech_to_text_2"),mFo=o(" \u2014 "),uq=a("a"),gFo=o("Speech2Text2ForCausalLM"),hFo=o(" (Speech2Text2 model)"),pFo=l(),p1=a("li"),$se=a("strong"),_Fo=o("transfo-xl"),uFo=o(" \u2014 "),bq=a("a"),bFo=o("TransfoXLLMHeadModel"),vFo=o(" (Transformer-XL model)"),FFo=l(),_1=a("li"),Ise=a("strong"),TFo=o("trocr"),MFo=o(" \u2014 "),vq=a("a"),EFo=o("TrOCRForCausalLM"),CFo=o(" (TrOCR model)"),wFo=l(),u1=a("li"),qse=a("strong"),AFo=o("xglm"),yFo=o(" \u2014 "),Fq=a("a"),LFo=o("XGLMForCausalLM"),xFo=o(" (XGLM model)"),kFo=l(),b1=a("li"),Nse=a("strong"),SFo=o("xlm"),RFo=o(" \u2014 "),Tq=a("a"),BFo=o("XLMWithLMHeadModel"),PFo=o(" (XLM model)"),$Fo=l(),v1=a("li"),jse=a("strong"),IFo=o("xlm-prophetnet"),qFo=o(" \u2014 "),Mq=a("a"),NFo=o("XLMProphetNetForCausalLM"),jFo=o(" (XLMProphetNet model)"),DFo=l(),F1=a("li"),Dse=a("strong"),GFo=o("xlm-roberta"),OFo=o(" \u2014 "),Eq=a("a"),VFo=o("XLMRobertaForCausalLM"),XFo=o(" (XLM-RoBERTa model)"),zFo=l(),T1=a("li"),Gse=a("strong"),QFo=o("xlm-roberta-xl"),WFo=o(" \u2014 "),Cq=a("a"),HFo=o("XLMRobertaXLForCausalLM"),UFo=o(" (XLM-RoBERTa-XL model)"),JFo=l(),M1=a("li"),Ose=a("strong"),YFo=o("xlnet"),KFo=o(" \u2014 "),wq=a("a"),ZFo=o("XLNetLMHeadModel"),eTo=o(" (XLNet model)"),oTo=l(),E1=a("p"),rTo=o("The model is set in evaluation mode by default using "),Vse=a("code"),tTo=o("model.eval()"),aTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xse=a("code"),nTo=o("model.train()"),sTo=l(),zse=a("p"),lTo=o("Examples:"),iTo=l(),f(Ww.$$.fragment),APe=l(),hd=a("h2"),C1=a("a"),Qse=a("span"),f(Hw.$$.fragment),dTo=l(),Wse=a("span"),cTo=o("AutoModelForMaskedLM"),yPe=l(),Zo=a("div"),f(Uw.$$.fragment),fTo=l(),pd=a("p"),mTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Aq=a("a"),gTo=o("from_pretrained()"),hTo=o(" class method or the "),yq=a("a"),pTo=o("from_config()"),_To=o(` class
method.`),uTo=l(),Jw=a("p"),bTo=o("This class cannot be instantiated directly using "),Hse=a("code"),vTo=o("__init__()"),FTo=o(" (throws an error)."),TTo=l(),Wr=a("div"),f(Yw.$$.fragment),MTo=l(),Use=a("p"),ETo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),CTo=l(),_d=a("p"),wTo=o(`Note:
Loading a model from its configuration file does `),Jse=a("strong"),ATo=o("not"),yTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lq=a("a"),LTo=o("from_pretrained()"),xTo=o(" to load the model weights."),kTo=l(),Yse=a("p"),STo=o("Examples:"),RTo=l(),f(Kw.$$.fragment),BTo=l(),Ge=a("div"),f(Zw.$$.fragment),PTo=l(),Kse=a("p"),$To=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ITo=l(),Wa=a("p"),qTo=o("The model class to instantiate is selected based on the "),Zse=a("code"),NTo=o("model_type"),jTo=o(` property of the config object (either
passed as an argument or loaded from `),ele=a("code"),DTo=o("pretrained_model_name_or_path"),GTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ole=a("code"),OTo=o("pretrained_model_name_or_path"),VTo=o(":"),XTo=l(),I=a("ul"),w1=a("li"),rle=a("strong"),zTo=o("albert"),QTo=o(" \u2014 "),xq=a("a"),WTo=o("AlbertForMaskedLM"),HTo=o(" (ALBERT model)"),UTo=l(),A1=a("li"),tle=a("strong"),JTo=o("bart"),YTo=o(" \u2014 "),kq=a("a"),KTo=o("BartForConditionalGeneration"),ZTo=o(" (BART model)"),eMo=l(),y1=a("li"),ale=a("strong"),oMo=o("bert"),rMo=o(" \u2014 "),Sq=a("a"),tMo=o("BertForMaskedLM"),aMo=o(" (BERT model)"),nMo=l(),L1=a("li"),nle=a("strong"),sMo=o("big_bird"),lMo=o(" \u2014 "),Rq=a("a"),iMo=o("BigBirdForMaskedLM"),dMo=o(" (BigBird model)"),cMo=l(),x1=a("li"),sle=a("strong"),fMo=o("camembert"),mMo=o(" \u2014 "),Bq=a("a"),gMo=o("CamembertForMaskedLM"),hMo=o(" (CamemBERT model)"),pMo=l(),k1=a("li"),lle=a("strong"),_Mo=o("convbert"),uMo=o(" \u2014 "),Pq=a("a"),bMo=o("ConvBertForMaskedLM"),vMo=o(" (ConvBERT model)"),FMo=l(),S1=a("li"),ile=a("strong"),TMo=o("data2vec-text"),MMo=o(" \u2014 "),$q=a("a"),EMo=o("Data2VecTextForMaskedLM"),CMo=o(" (Data2VecText model)"),wMo=l(),R1=a("li"),dle=a("strong"),AMo=o("deberta"),yMo=o(" \u2014 "),Iq=a("a"),LMo=o("DebertaForMaskedLM"),xMo=o(" (DeBERTa model)"),kMo=l(),B1=a("li"),cle=a("strong"),SMo=o("deberta-v2"),RMo=o(" \u2014 "),qq=a("a"),BMo=o("DebertaV2ForMaskedLM"),PMo=o(" (DeBERTa-v2 model)"),$Mo=l(),P1=a("li"),fle=a("strong"),IMo=o("distilbert"),qMo=o(" \u2014 "),Nq=a("a"),NMo=o("DistilBertForMaskedLM"),jMo=o(" (DistilBERT model)"),DMo=l(),$1=a("li"),mle=a("strong"),GMo=o("electra"),OMo=o(" \u2014 "),jq=a("a"),VMo=o("ElectraForMaskedLM"),XMo=o(" (ELECTRA model)"),zMo=l(),I1=a("li"),gle=a("strong"),QMo=o("flaubert"),WMo=o(" \u2014 "),Dq=a("a"),HMo=o("FlaubertWithLMHeadModel"),UMo=o(" (FlauBERT model)"),JMo=l(),q1=a("li"),hle=a("strong"),YMo=o("fnet"),KMo=o(" \u2014 "),Gq=a("a"),ZMo=o("FNetForMaskedLM"),eEo=o(" (FNet model)"),oEo=l(),N1=a("li"),ple=a("strong"),rEo=o("funnel"),tEo=o(" \u2014 "),Oq=a("a"),aEo=o("FunnelForMaskedLM"),nEo=o(" (Funnel Transformer model)"),sEo=l(),j1=a("li"),_le=a("strong"),lEo=o("ibert"),iEo=o(" \u2014 "),Vq=a("a"),dEo=o("IBertForMaskedLM"),cEo=o(" (I-BERT model)"),fEo=l(),D1=a("li"),ule=a("strong"),mEo=o("layoutlm"),gEo=o(" \u2014 "),Xq=a("a"),hEo=o("LayoutLMForMaskedLM"),pEo=o(" (LayoutLM model)"),_Eo=l(),G1=a("li"),ble=a("strong"),uEo=o("longformer"),bEo=o(" \u2014 "),zq=a("a"),vEo=o("LongformerForMaskedLM"),FEo=o(" (Longformer model)"),TEo=l(),O1=a("li"),vle=a("strong"),MEo=o("mbart"),EEo=o(" \u2014 "),Qq=a("a"),CEo=o("MBartForConditionalGeneration"),wEo=o(" (mBART model)"),AEo=l(),V1=a("li"),Fle=a("strong"),yEo=o("megatron-bert"),LEo=o(" \u2014 "),Wq=a("a"),xEo=o("MegatronBertForMaskedLM"),kEo=o(" (MegatronBert model)"),SEo=l(),X1=a("li"),Tle=a("strong"),REo=o("mobilebert"),BEo=o(" \u2014 "),Hq=a("a"),PEo=o("MobileBertForMaskedLM"),$Eo=o(" (MobileBERT model)"),IEo=l(),z1=a("li"),Mle=a("strong"),qEo=o("mpnet"),NEo=o(" \u2014 "),Uq=a("a"),jEo=o("MPNetForMaskedLM"),DEo=o(" (MPNet model)"),GEo=l(),Q1=a("li"),Ele=a("strong"),OEo=o("nystromformer"),VEo=o(" \u2014 "),Jq=a("a"),XEo=o("NystromformerForMaskedLM"),zEo=o(" (Nystromformer model)"),QEo=l(),W1=a("li"),Cle=a("strong"),WEo=o("perceiver"),HEo=o(" \u2014 "),Yq=a("a"),UEo=o("PerceiverForMaskedLM"),JEo=o(" (Perceiver model)"),YEo=l(),H1=a("li"),wle=a("strong"),KEo=o("qdqbert"),ZEo=o(" \u2014 "),Kq=a("a"),eCo=o("QDQBertForMaskedLM"),oCo=o(" (QDQBert model)"),rCo=l(),U1=a("li"),Ale=a("strong"),tCo=o("reformer"),aCo=o(" \u2014 "),Zq=a("a"),nCo=o("ReformerForMaskedLM"),sCo=o(" (Reformer model)"),lCo=l(),J1=a("li"),yle=a("strong"),iCo=o("rembert"),dCo=o(" \u2014 "),eN=a("a"),cCo=o("RemBertForMaskedLM"),fCo=o(" (RemBERT model)"),mCo=l(),Y1=a("li"),Lle=a("strong"),gCo=o("roberta"),hCo=o(" \u2014 "),oN=a("a"),pCo=o("RobertaForMaskedLM"),_Co=o(" (RoBERTa model)"),uCo=l(),K1=a("li"),xle=a("strong"),bCo=o("roformer"),vCo=o(" \u2014 "),rN=a("a"),FCo=o("RoFormerForMaskedLM"),TCo=o(" (RoFormer model)"),MCo=l(),Z1=a("li"),kle=a("strong"),ECo=o("squeezebert"),CCo=o(" \u2014 "),tN=a("a"),wCo=o("SqueezeBertForMaskedLM"),ACo=o(" (SqueezeBERT model)"),yCo=l(),e4=a("li"),Sle=a("strong"),LCo=o("tapas"),xCo=o(" \u2014 "),aN=a("a"),kCo=o("TapasForMaskedLM"),SCo=o(" (TAPAS model)"),RCo=l(),o4=a("li"),Rle=a("strong"),BCo=o("wav2vec2"),PCo=o(" \u2014 "),Ble=a("code"),$Co=o("Wav2Vec2ForMaskedLM"),ICo=o(" (Wav2Vec2 model)"),qCo=l(),r4=a("li"),Ple=a("strong"),NCo=o("xlm"),jCo=o(" \u2014 "),nN=a("a"),DCo=o("XLMWithLMHeadModel"),GCo=o(" (XLM model)"),OCo=l(),t4=a("li"),$le=a("strong"),VCo=o("xlm-roberta"),XCo=o(" \u2014 "),sN=a("a"),zCo=o("XLMRobertaForMaskedLM"),QCo=o(" (XLM-RoBERTa model)"),WCo=l(),a4=a("li"),Ile=a("strong"),HCo=o("xlm-roberta-xl"),UCo=o(" \u2014 "),lN=a("a"),JCo=o("XLMRobertaXLForMaskedLM"),YCo=o(" (XLM-RoBERTa-XL model)"),KCo=l(),n4=a("li"),qle=a("strong"),ZCo=o("yoso"),ewo=o(" \u2014 "),iN=a("a"),owo=o("YosoForMaskedLM"),rwo=o(" (YOSO model)"),two=l(),s4=a("p"),awo=o("The model is set in evaluation mode by default using "),Nle=a("code"),nwo=o("model.eval()"),swo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jle=a("code"),lwo=o("model.train()"),iwo=l(),Dle=a("p"),dwo=o("Examples:"),cwo=l(),f(eA.$$.fragment),LPe=l(),ud=a("h2"),l4=a("a"),Gle=a("span"),f(oA.$$.fragment),fwo=l(),Ole=a("span"),mwo=o("AutoModelForSeq2SeqLM"),xPe=l(),er=a("div"),f(rA.$$.fragment),gwo=l(),bd=a("p"),hwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dN=a("a"),pwo=o("from_pretrained()"),_wo=o(" class method or the "),cN=a("a"),uwo=o("from_config()"),bwo=o(` class
method.`),vwo=l(),tA=a("p"),Fwo=o("This class cannot be instantiated directly using "),Vle=a("code"),Two=o("__init__()"),Mwo=o(" (throws an error)."),Ewo=l(),Hr=a("div"),f(aA.$$.fragment),Cwo=l(),Xle=a("p"),wwo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Awo=l(),vd=a("p"),ywo=o(`Note:
Loading a model from its configuration file does `),zle=a("strong"),Lwo=o("not"),xwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fN=a("a"),kwo=o("from_pretrained()"),Swo=o(" to load the model weights."),Rwo=l(),Qle=a("p"),Bwo=o("Examples:"),Pwo=l(),f(nA.$$.fragment),$wo=l(),Oe=a("div"),f(sA.$$.fragment),Iwo=l(),Wle=a("p"),qwo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Nwo=l(),Ha=a("p"),jwo=o("The model class to instantiate is selected based on the "),Hle=a("code"),Dwo=o("model_type"),Gwo=o(` property of the config object (either
passed as an argument or loaded from `),Ule=a("code"),Owo=o("pretrained_model_name_or_path"),Vwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jle=a("code"),Xwo=o("pretrained_model_name_or_path"),zwo=o(":"),Qwo=l(),ne=a("ul"),i4=a("li"),Yle=a("strong"),Wwo=o("bart"),Hwo=o(" \u2014 "),mN=a("a"),Uwo=o("BartForConditionalGeneration"),Jwo=o(" (BART model)"),Ywo=l(),d4=a("li"),Kle=a("strong"),Kwo=o("bigbird_pegasus"),Zwo=o(" \u2014 "),gN=a("a"),eAo=o("BigBirdPegasusForConditionalGeneration"),oAo=o(" (BigBirdPegasus model)"),rAo=l(),c4=a("li"),Zle=a("strong"),tAo=o("blenderbot"),aAo=o(" \u2014 "),hN=a("a"),nAo=o("BlenderbotForConditionalGeneration"),sAo=o(" (Blenderbot model)"),lAo=l(),f4=a("li"),eie=a("strong"),iAo=o("blenderbot-small"),dAo=o(" \u2014 "),pN=a("a"),cAo=o("BlenderbotSmallForConditionalGeneration"),fAo=o(" (BlenderbotSmall model)"),mAo=l(),m4=a("li"),oie=a("strong"),gAo=o("encoder-decoder"),hAo=o(" \u2014 "),_N=a("a"),pAo=o("EncoderDecoderModel"),_Ao=o(" (Encoder decoder model)"),uAo=l(),g4=a("li"),rie=a("strong"),bAo=o("fsmt"),vAo=o(" \u2014 "),uN=a("a"),FAo=o("FSMTForConditionalGeneration"),TAo=o(" (FairSeq Machine-Translation model)"),MAo=l(),h4=a("li"),tie=a("strong"),EAo=o("led"),CAo=o(" \u2014 "),bN=a("a"),wAo=o("LEDForConditionalGeneration"),AAo=o(" (LED model)"),yAo=l(),p4=a("li"),aie=a("strong"),LAo=o("m2m_100"),xAo=o(" \u2014 "),vN=a("a"),kAo=o("M2M100ForConditionalGeneration"),SAo=o(" (M2M100 model)"),RAo=l(),_4=a("li"),nie=a("strong"),BAo=o("marian"),PAo=o(" \u2014 "),FN=a("a"),$Ao=o("MarianMTModel"),IAo=o(" (Marian model)"),qAo=l(),u4=a("li"),sie=a("strong"),NAo=o("mbart"),jAo=o(" \u2014 "),TN=a("a"),DAo=o("MBartForConditionalGeneration"),GAo=o(" (mBART model)"),OAo=l(),b4=a("li"),lie=a("strong"),VAo=o("mt5"),XAo=o(" \u2014 "),MN=a("a"),zAo=o("MT5ForConditionalGeneration"),QAo=o(" (mT5 model)"),WAo=l(),v4=a("li"),iie=a("strong"),HAo=o("pegasus"),UAo=o(" \u2014 "),EN=a("a"),JAo=o("PegasusForConditionalGeneration"),YAo=o(" (Pegasus model)"),KAo=l(),F4=a("li"),die=a("strong"),ZAo=o("plbart"),e0o=o(" \u2014 "),CN=a("a"),o0o=o("PLBartForConditionalGeneration"),r0o=o(" (PLBart model)"),t0o=l(),T4=a("li"),cie=a("strong"),a0o=o("prophetnet"),n0o=o(" \u2014 "),wN=a("a"),s0o=o("ProphetNetForConditionalGeneration"),l0o=o(" (ProphetNet model)"),i0o=l(),M4=a("li"),fie=a("strong"),d0o=o("t5"),c0o=o(" \u2014 "),AN=a("a"),f0o=o("T5ForConditionalGeneration"),m0o=o(" (T5 model)"),g0o=l(),E4=a("li"),mie=a("strong"),h0o=o("tapex"),p0o=o(" \u2014 "),yN=a("a"),_0o=o("BartForConditionalGeneration"),u0o=o(" (TAPEX model)"),b0o=l(),C4=a("li"),gie=a("strong"),v0o=o("xlm-prophetnet"),F0o=o(" \u2014 "),LN=a("a"),T0o=o("XLMProphetNetForConditionalGeneration"),M0o=o(" (XLMProphetNet model)"),E0o=l(),w4=a("p"),C0o=o("The model is set in evaluation mode by default using "),hie=a("code"),w0o=o("model.eval()"),A0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pie=a("code"),y0o=o("model.train()"),L0o=l(),_ie=a("p"),x0o=o("Examples:"),k0o=l(),f(lA.$$.fragment),kPe=l(),Fd=a("h2"),A4=a("a"),uie=a("span"),f(iA.$$.fragment),S0o=l(),bie=a("span"),R0o=o("AutoModelForSequenceClassification"),SPe=l(),or=a("div"),f(dA.$$.fragment),B0o=l(),Td=a("p"),P0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xN=a("a"),$0o=o("from_pretrained()"),I0o=o(" class method or the "),kN=a("a"),q0o=o("from_config()"),N0o=o(` class
method.`),j0o=l(),cA=a("p"),D0o=o("This class cannot be instantiated directly using "),vie=a("code"),G0o=o("__init__()"),O0o=o(" (throws an error)."),V0o=l(),Ur=a("div"),f(fA.$$.fragment),X0o=l(),Fie=a("p"),z0o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Q0o=l(),Md=a("p"),W0o=o(`Note:
Loading a model from its configuration file does `),Tie=a("strong"),H0o=o("not"),U0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SN=a("a"),J0o=o("from_pretrained()"),Y0o=o(" to load the model weights."),K0o=l(),Mie=a("p"),Z0o=o("Examples:"),eyo=l(),f(mA.$$.fragment),oyo=l(),Ve=a("div"),f(gA.$$.fragment),ryo=l(),Eie=a("p"),tyo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ayo=l(),Ua=a("p"),nyo=o("The model class to instantiate is selected based on the "),Cie=a("code"),syo=o("model_type"),lyo=o(` property of the config object (either
passed as an argument or loaded from `),wie=a("code"),iyo=o("pretrained_model_name_or_path"),dyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aie=a("code"),cyo=o("pretrained_model_name_or_path"),fyo=o(":"),myo=l(),y=a("ul"),y4=a("li"),yie=a("strong"),gyo=o("albert"),hyo=o(" \u2014 "),RN=a("a"),pyo=o("AlbertForSequenceClassification"),_yo=o(" (ALBERT model)"),uyo=l(),L4=a("li"),Lie=a("strong"),byo=o("bart"),vyo=o(" \u2014 "),BN=a("a"),Fyo=o("BartForSequenceClassification"),Tyo=o(" (BART model)"),Myo=l(),x4=a("li"),xie=a("strong"),Eyo=o("bert"),Cyo=o(" \u2014 "),PN=a("a"),wyo=o("BertForSequenceClassification"),Ayo=o(" (BERT model)"),yyo=l(),k4=a("li"),kie=a("strong"),Lyo=o("big_bird"),xyo=o(" \u2014 "),$N=a("a"),kyo=o("BigBirdForSequenceClassification"),Syo=o(" (BigBird model)"),Ryo=l(),S4=a("li"),Sie=a("strong"),Byo=o("bigbird_pegasus"),Pyo=o(" \u2014 "),IN=a("a"),$yo=o("BigBirdPegasusForSequenceClassification"),Iyo=o(" (BigBirdPegasus model)"),qyo=l(),R4=a("li"),Rie=a("strong"),Nyo=o("camembert"),jyo=o(" \u2014 "),qN=a("a"),Dyo=o("CamembertForSequenceClassification"),Gyo=o(" (CamemBERT model)"),Oyo=l(),B4=a("li"),Bie=a("strong"),Vyo=o("canine"),Xyo=o(" \u2014 "),NN=a("a"),zyo=o("CanineForSequenceClassification"),Qyo=o(" (Canine model)"),Wyo=l(),P4=a("li"),Pie=a("strong"),Hyo=o("convbert"),Uyo=o(" \u2014 "),jN=a("a"),Jyo=o("ConvBertForSequenceClassification"),Yyo=o(" (ConvBERT model)"),Kyo=l(),$4=a("li"),$ie=a("strong"),Zyo=o("ctrl"),e8o=o(" \u2014 "),DN=a("a"),o8o=o("CTRLForSequenceClassification"),r8o=o(" (CTRL model)"),t8o=l(),I4=a("li"),Iie=a("strong"),a8o=o("data2vec-text"),n8o=o(" \u2014 "),GN=a("a"),s8o=o("Data2VecTextForSequenceClassification"),l8o=o(" (Data2VecText model)"),i8o=l(),q4=a("li"),qie=a("strong"),d8o=o("deberta"),c8o=o(" \u2014 "),ON=a("a"),f8o=o("DebertaForSequenceClassification"),m8o=o(" (DeBERTa model)"),g8o=l(),N4=a("li"),Nie=a("strong"),h8o=o("deberta-v2"),p8o=o(" \u2014 "),VN=a("a"),_8o=o("DebertaV2ForSequenceClassification"),u8o=o(" (DeBERTa-v2 model)"),b8o=l(),j4=a("li"),jie=a("strong"),v8o=o("distilbert"),F8o=o(" \u2014 "),XN=a("a"),T8o=o("DistilBertForSequenceClassification"),M8o=o(" (DistilBERT model)"),E8o=l(),D4=a("li"),Die=a("strong"),C8o=o("electra"),w8o=o(" \u2014 "),zN=a("a"),A8o=o("ElectraForSequenceClassification"),y8o=o(" (ELECTRA model)"),L8o=l(),G4=a("li"),Gie=a("strong"),x8o=o("flaubert"),k8o=o(" \u2014 "),QN=a("a"),S8o=o("FlaubertForSequenceClassification"),R8o=o(" (FlauBERT model)"),B8o=l(),O4=a("li"),Oie=a("strong"),P8o=o("fnet"),$8o=o(" \u2014 "),WN=a("a"),I8o=o("FNetForSequenceClassification"),q8o=o(" (FNet model)"),N8o=l(),V4=a("li"),Vie=a("strong"),j8o=o("funnel"),D8o=o(" \u2014 "),HN=a("a"),G8o=o("FunnelForSequenceClassification"),O8o=o(" (Funnel Transformer model)"),V8o=l(),X4=a("li"),Xie=a("strong"),X8o=o("gpt2"),z8o=o(" \u2014 "),UN=a("a"),Q8o=o("GPT2ForSequenceClassification"),W8o=o(" (OpenAI GPT-2 model)"),H8o=l(),z4=a("li"),zie=a("strong"),U8o=o("gpt_neo"),J8o=o(" \u2014 "),JN=a("a"),Y8o=o("GPTNeoForSequenceClassification"),K8o=o(" (GPT Neo model)"),Z8o=l(),Q4=a("li"),Qie=a("strong"),eLo=o("gptj"),oLo=o(" \u2014 "),YN=a("a"),rLo=o("GPTJForSequenceClassification"),tLo=o(" (GPT-J model)"),aLo=l(),W4=a("li"),Wie=a("strong"),nLo=o("ibert"),sLo=o(" \u2014 "),KN=a("a"),lLo=o("IBertForSequenceClassification"),iLo=o(" (I-BERT model)"),dLo=l(),H4=a("li"),Hie=a("strong"),cLo=o("layoutlm"),fLo=o(" \u2014 "),ZN=a("a"),mLo=o("LayoutLMForSequenceClassification"),gLo=o(" (LayoutLM model)"),hLo=l(),U4=a("li"),Uie=a("strong"),pLo=o("layoutlmv2"),_Lo=o(" \u2014 "),ej=a("a"),uLo=o("LayoutLMv2ForSequenceClassification"),bLo=o(" (LayoutLMv2 model)"),vLo=l(),J4=a("li"),Jie=a("strong"),FLo=o("led"),TLo=o(" \u2014 "),oj=a("a"),MLo=o("LEDForSequenceClassification"),ELo=o(" (LED model)"),CLo=l(),Y4=a("li"),Yie=a("strong"),wLo=o("longformer"),ALo=o(" \u2014 "),rj=a("a"),yLo=o("LongformerForSequenceClassification"),LLo=o(" (Longformer model)"),xLo=l(),K4=a("li"),Kie=a("strong"),kLo=o("mbart"),SLo=o(" \u2014 "),tj=a("a"),RLo=o("MBartForSequenceClassification"),BLo=o(" (mBART model)"),PLo=l(),Z4=a("li"),Zie=a("strong"),$Lo=o("megatron-bert"),ILo=o(" \u2014 "),aj=a("a"),qLo=o("MegatronBertForSequenceClassification"),NLo=o(" (MegatronBert model)"),jLo=l(),eb=a("li"),ede=a("strong"),DLo=o("mobilebert"),GLo=o(" \u2014 "),nj=a("a"),OLo=o("MobileBertForSequenceClassification"),VLo=o(" (MobileBERT model)"),XLo=l(),ob=a("li"),ode=a("strong"),zLo=o("mpnet"),QLo=o(" \u2014 "),sj=a("a"),WLo=o("MPNetForSequenceClassification"),HLo=o(" (MPNet model)"),ULo=l(),rb=a("li"),rde=a("strong"),JLo=o("nystromformer"),YLo=o(" \u2014 "),lj=a("a"),KLo=o("NystromformerForSequenceClassification"),ZLo=o(" (Nystromformer model)"),e7o=l(),tb=a("li"),tde=a("strong"),o7o=o("openai-gpt"),r7o=o(" \u2014 "),ij=a("a"),t7o=o("OpenAIGPTForSequenceClassification"),a7o=o(" (OpenAI GPT model)"),n7o=l(),ab=a("li"),ade=a("strong"),s7o=o("perceiver"),l7o=o(" \u2014 "),dj=a("a"),i7o=o("PerceiverForSequenceClassification"),d7o=o(" (Perceiver model)"),c7o=l(),nb=a("li"),nde=a("strong"),f7o=o("plbart"),m7o=o(" \u2014 "),cj=a("a"),g7o=o("PLBartForSequenceClassification"),h7o=o(" (PLBart model)"),p7o=l(),sb=a("li"),sde=a("strong"),_7o=o("qdqbert"),u7o=o(" \u2014 "),fj=a("a"),b7o=o("QDQBertForSequenceClassification"),v7o=o(" (QDQBert model)"),F7o=l(),lb=a("li"),lde=a("strong"),T7o=o("reformer"),M7o=o(" \u2014 "),mj=a("a"),E7o=o("ReformerForSequenceClassification"),C7o=o(" (Reformer model)"),w7o=l(),ib=a("li"),ide=a("strong"),A7o=o("rembert"),y7o=o(" \u2014 "),gj=a("a"),L7o=o("RemBertForSequenceClassification"),x7o=o(" (RemBERT model)"),k7o=l(),db=a("li"),dde=a("strong"),S7o=o("roberta"),R7o=o(" \u2014 "),hj=a("a"),B7o=o("RobertaForSequenceClassification"),P7o=o(" (RoBERTa model)"),$7o=l(),cb=a("li"),cde=a("strong"),I7o=o("roformer"),q7o=o(" \u2014 "),pj=a("a"),N7o=o("RoFormerForSequenceClassification"),j7o=o(" (RoFormer model)"),D7o=l(),fb=a("li"),fde=a("strong"),G7o=o("squeezebert"),O7o=o(" \u2014 "),_j=a("a"),V7o=o("SqueezeBertForSequenceClassification"),X7o=o(" (SqueezeBERT model)"),z7o=l(),mb=a("li"),mde=a("strong"),Q7o=o("tapas"),W7o=o(" \u2014 "),uj=a("a"),H7o=o("TapasForSequenceClassification"),U7o=o(" (TAPAS model)"),J7o=l(),gb=a("li"),gde=a("strong"),Y7o=o("tapex"),K7o=o(" \u2014 "),bj=a("a"),Z7o=o("BartForSequenceClassification"),e9o=o(" (TAPEX model)"),o9o=l(),hb=a("li"),hde=a("strong"),r9o=o("transfo-xl"),t9o=o(" \u2014 "),vj=a("a"),a9o=o("TransfoXLForSequenceClassification"),n9o=o(" (Transformer-XL model)"),s9o=l(),pb=a("li"),pde=a("strong"),l9o=o("xlm"),i9o=o(" \u2014 "),Fj=a("a"),d9o=o("XLMForSequenceClassification"),c9o=o(" (XLM model)"),f9o=l(),_b=a("li"),_de=a("strong"),m9o=o("xlm-roberta"),g9o=o(" \u2014 "),Tj=a("a"),h9o=o("XLMRobertaForSequenceClassification"),p9o=o(" (XLM-RoBERTa model)"),_9o=l(),ub=a("li"),ude=a("strong"),u9o=o("xlm-roberta-xl"),b9o=o(" \u2014 "),Mj=a("a"),v9o=o("XLMRobertaXLForSequenceClassification"),F9o=o(" (XLM-RoBERTa-XL model)"),T9o=l(),bb=a("li"),bde=a("strong"),M9o=o("xlnet"),E9o=o(" \u2014 "),Ej=a("a"),C9o=o("XLNetForSequenceClassification"),w9o=o(" (XLNet model)"),A9o=l(),vb=a("li"),vde=a("strong"),y9o=o("yoso"),L9o=o(" \u2014 "),Cj=a("a"),x9o=o("YosoForSequenceClassification"),k9o=o(" (YOSO model)"),S9o=l(),Fb=a("p"),R9o=o("The model is set in evaluation mode by default using "),Fde=a("code"),B9o=o("model.eval()"),P9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tde=a("code"),$9o=o("model.train()"),I9o=l(),Mde=a("p"),q9o=o("Examples:"),N9o=l(),f(hA.$$.fragment),RPe=l(),Ed=a("h2"),Tb=a("a"),Ede=a("span"),f(pA.$$.fragment),j9o=l(),Cde=a("span"),D9o=o("AutoModelForMultipleChoice"),BPe=l(),rr=a("div"),f(_A.$$.fragment),G9o=l(),Cd=a("p"),O9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wj=a("a"),V9o=o("from_pretrained()"),X9o=o(" class method or the "),Aj=a("a"),z9o=o("from_config()"),Q9o=o(` class
method.`),W9o=l(),uA=a("p"),H9o=o("This class cannot be instantiated directly using "),wde=a("code"),U9o=o("__init__()"),J9o=o(" (throws an error)."),Y9o=l(),Jr=a("div"),f(bA.$$.fragment),K9o=l(),Ade=a("p"),Z9o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),exo=l(),wd=a("p"),oxo=o(`Note:
Loading a model from its configuration file does `),yde=a("strong"),rxo=o("not"),txo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yj=a("a"),axo=o("from_pretrained()"),nxo=o(" to load the model weights."),sxo=l(),Lde=a("p"),lxo=o("Examples:"),ixo=l(),f(vA.$$.fragment),dxo=l(),Xe=a("div"),f(FA.$$.fragment),cxo=l(),xde=a("p"),fxo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mxo=l(),Ja=a("p"),gxo=o("The model class to instantiate is selected based on the "),kde=a("code"),hxo=o("model_type"),pxo=o(` property of the config object (either
passed as an argument or loaded from `),Sde=a("code"),_xo=o("pretrained_model_name_or_path"),uxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rde=a("code"),bxo=o("pretrained_model_name_or_path"),vxo=o(":"),Fxo=l(),G=a("ul"),Mb=a("li"),Bde=a("strong"),Txo=o("albert"),Mxo=o(" \u2014 "),Lj=a("a"),Exo=o("AlbertForMultipleChoice"),Cxo=o(" (ALBERT model)"),wxo=l(),Eb=a("li"),Pde=a("strong"),Axo=o("bert"),yxo=o(" \u2014 "),xj=a("a"),Lxo=o("BertForMultipleChoice"),xxo=o(" (BERT model)"),kxo=l(),Cb=a("li"),$de=a("strong"),Sxo=o("big_bird"),Rxo=o(" \u2014 "),kj=a("a"),Bxo=o("BigBirdForMultipleChoice"),Pxo=o(" (BigBird model)"),$xo=l(),wb=a("li"),Ide=a("strong"),Ixo=o("camembert"),qxo=o(" \u2014 "),Sj=a("a"),Nxo=o("CamembertForMultipleChoice"),jxo=o(" (CamemBERT model)"),Dxo=l(),Ab=a("li"),qde=a("strong"),Gxo=o("canine"),Oxo=o(" \u2014 "),Rj=a("a"),Vxo=o("CanineForMultipleChoice"),Xxo=o(" (Canine model)"),zxo=l(),yb=a("li"),Nde=a("strong"),Qxo=o("convbert"),Wxo=o(" \u2014 "),Bj=a("a"),Hxo=o("ConvBertForMultipleChoice"),Uxo=o(" (ConvBERT model)"),Jxo=l(),Lb=a("li"),jde=a("strong"),Yxo=o("data2vec-text"),Kxo=o(" \u2014 "),Pj=a("a"),Zxo=o("Data2VecTextForMultipleChoice"),eko=o(" (Data2VecText model)"),oko=l(),xb=a("li"),Dde=a("strong"),rko=o("distilbert"),tko=o(" \u2014 "),$j=a("a"),ako=o("DistilBertForMultipleChoice"),nko=o(" (DistilBERT model)"),sko=l(),kb=a("li"),Gde=a("strong"),lko=o("electra"),iko=o(" \u2014 "),Ij=a("a"),dko=o("ElectraForMultipleChoice"),cko=o(" (ELECTRA model)"),fko=l(),Sb=a("li"),Ode=a("strong"),mko=o("flaubert"),gko=o(" \u2014 "),qj=a("a"),hko=o("FlaubertForMultipleChoice"),pko=o(" (FlauBERT model)"),_ko=l(),Rb=a("li"),Vde=a("strong"),uko=o("fnet"),bko=o(" \u2014 "),Nj=a("a"),vko=o("FNetForMultipleChoice"),Fko=o(" (FNet model)"),Tko=l(),Bb=a("li"),Xde=a("strong"),Mko=o("funnel"),Eko=o(" \u2014 "),jj=a("a"),Cko=o("FunnelForMultipleChoice"),wko=o(" (Funnel Transformer model)"),Ako=l(),Pb=a("li"),zde=a("strong"),yko=o("ibert"),Lko=o(" \u2014 "),Dj=a("a"),xko=o("IBertForMultipleChoice"),kko=o(" (I-BERT model)"),Sko=l(),$b=a("li"),Qde=a("strong"),Rko=o("longformer"),Bko=o(" \u2014 "),Gj=a("a"),Pko=o("LongformerForMultipleChoice"),$ko=o(" (Longformer model)"),Iko=l(),Ib=a("li"),Wde=a("strong"),qko=o("megatron-bert"),Nko=o(" \u2014 "),Oj=a("a"),jko=o("MegatronBertForMultipleChoice"),Dko=o(" (MegatronBert model)"),Gko=l(),qb=a("li"),Hde=a("strong"),Oko=o("mobilebert"),Vko=o(" \u2014 "),Vj=a("a"),Xko=o("MobileBertForMultipleChoice"),zko=o(" (MobileBERT model)"),Qko=l(),Nb=a("li"),Ude=a("strong"),Wko=o("mpnet"),Hko=o(" \u2014 "),Xj=a("a"),Uko=o("MPNetForMultipleChoice"),Jko=o(" (MPNet model)"),Yko=l(),jb=a("li"),Jde=a("strong"),Kko=o("nystromformer"),Zko=o(" \u2014 "),zj=a("a"),eSo=o("NystromformerForMultipleChoice"),oSo=o(" (Nystromformer model)"),rSo=l(),Db=a("li"),Yde=a("strong"),tSo=o("qdqbert"),aSo=o(" \u2014 "),Qj=a("a"),nSo=o("QDQBertForMultipleChoice"),sSo=o(" (QDQBert model)"),lSo=l(),Gb=a("li"),Kde=a("strong"),iSo=o("rembert"),dSo=o(" \u2014 "),Wj=a("a"),cSo=o("RemBertForMultipleChoice"),fSo=o(" (RemBERT model)"),mSo=l(),Ob=a("li"),Zde=a("strong"),gSo=o("roberta"),hSo=o(" \u2014 "),Hj=a("a"),pSo=o("RobertaForMultipleChoice"),_So=o(" (RoBERTa model)"),uSo=l(),Vb=a("li"),ece=a("strong"),bSo=o("roformer"),vSo=o(" \u2014 "),Uj=a("a"),FSo=o("RoFormerForMultipleChoice"),TSo=o(" (RoFormer model)"),MSo=l(),Xb=a("li"),oce=a("strong"),ESo=o("squeezebert"),CSo=o(" \u2014 "),Jj=a("a"),wSo=o("SqueezeBertForMultipleChoice"),ASo=o(" (SqueezeBERT model)"),ySo=l(),zb=a("li"),rce=a("strong"),LSo=o("xlm"),xSo=o(" \u2014 "),Yj=a("a"),kSo=o("XLMForMultipleChoice"),SSo=o(" (XLM model)"),RSo=l(),Qb=a("li"),tce=a("strong"),BSo=o("xlm-roberta"),PSo=o(" \u2014 "),Kj=a("a"),$So=o("XLMRobertaForMultipleChoice"),ISo=o(" (XLM-RoBERTa model)"),qSo=l(),Wb=a("li"),ace=a("strong"),NSo=o("xlm-roberta-xl"),jSo=o(" \u2014 "),Zj=a("a"),DSo=o("XLMRobertaXLForMultipleChoice"),GSo=o(" (XLM-RoBERTa-XL model)"),OSo=l(),Hb=a("li"),nce=a("strong"),VSo=o("xlnet"),XSo=o(" \u2014 "),eD=a("a"),zSo=o("XLNetForMultipleChoice"),QSo=o(" (XLNet model)"),WSo=l(),Ub=a("li"),sce=a("strong"),HSo=o("yoso"),USo=o(" \u2014 "),oD=a("a"),JSo=o("YosoForMultipleChoice"),YSo=o(" (YOSO model)"),KSo=l(),Jb=a("p"),ZSo=o("The model is set in evaluation mode by default using "),lce=a("code"),eRo=o("model.eval()"),oRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ice=a("code"),rRo=o("model.train()"),tRo=l(),dce=a("p"),aRo=o("Examples:"),nRo=l(),f(TA.$$.fragment),PPe=l(),Ad=a("h2"),Yb=a("a"),cce=a("span"),f(MA.$$.fragment),sRo=l(),fce=a("span"),lRo=o("AutoModelForNextSentencePrediction"),$Pe=l(),tr=a("div"),f(EA.$$.fragment),iRo=l(),yd=a("p"),dRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rD=a("a"),cRo=o("from_pretrained()"),fRo=o(" class method or the "),tD=a("a"),mRo=o("from_config()"),gRo=o(` class
method.`),hRo=l(),CA=a("p"),pRo=o("This class cannot be instantiated directly using "),mce=a("code"),_Ro=o("__init__()"),uRo=o(" (throws an error)."),bRo=l(),Yr=a("div"),f(wA.$$.fragment),vRo=l(),gce=a("p"),FRo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),TRo=l(),Ld=a("p"),MRo=o(`Note:
Loading a model from its configuration file does `),hce=a("strong"),ERo=o("not"),CRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aD=a("a"),wRo=o("from_pretrained()"),ARo=o(" to load the model weights."),yRo=l(),pce=a("p"),LRo=o("Examples:"),xRo=l(),f(AA.$$.fragment),kRo=l(),ze=a("div"),f(yA.$$.fragment),SRo=l(),_ce=a("p"),RRo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),BRo=l(),Ya=a("p"),PRo=o("The model class to instantiate is selected based on the "),uce=a("code"),$Ro=o("model_type"),IRo=o(` property of the config object (either
passed as an argument or loaded from `),bce=a("code"),qRo=o("pretrained_model_name_or_path"),NRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vce=a("code"),jRo=o("pretrained_model_name_or_path"),DRo=o(":"),GRo=l(),da=a("ul"),Kb=a("li"),Fce=a("strong"),ORo=o("bert"),VRo=o(" \u2014 "),nD=a("a"),XRo=o("BertForNextSentencePrediction"),zRo=o(" (BERT model)"),QRo=l(),Zb=a("li"),Tce=a("strong"),WRo=o("fnet"),HRo=o(" \u2014 "),sD=a("a"),URo=o("FNetForNextSentencePrediction"),JRo=o(" (FNet model)"),YRo=l(),e2=a("li"),Mce=a("strong"),KRo=o("megatron-bert"),ZRo=o(" \u2014 "),lD=a("a"),eBo=o("MegatronBertForNextSentencePrediction"),oBo=o(" (MegatronBert model)"),rBo=l(),o2=a("li"),Ece=a("strong"),tBo=o("mobilebert"),aBo=o(" \u2014 "),iD=a("a"),nBo=o("MobileBertForNextSentencePrediction"),sBo=o(" (MobileBERT model)"),lBo=l(),r2=a("li"),Cce=a("strong"),iBo=o("qdqbert"),dBo=o(" \u2014 "),dD=a("a"),cBo=o("QDQBertForNextSentencePrediction"),fBo=o(" (QDQBert model)"),mBo=l(),t2=a("p"),gBo=o("The model is set in evaluation mode by default using "),wce=a("code"),hBo=o("model.eval()"),pBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ace=a("code"),_Bo=o("model.train()"),uBo=l(),yce=a("p"),bBo=o("Examples:"),vBo=l(),f(LA.$$.fragment),IPe=l(),xd=a("h2"),a2=a("a"),Lce=a("span"),f(xA.$$.fragment),FBo=l(),xce=a("span"),TBo=o("AutoModelForTokenClassification"),qPe=l(),ar=a("div"),f(kA.$$.fragment),MBo=l(),kd=a("p"),EBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cD=a("a"),CBo=o("from_pretrained()"),wBo=o(" class method or the "),fD=a("a"),ABo=o("from_config()"),yBo=o(` class
method.`),LBo=l(),SA=a("p"),xBo=o("This class cannot be instantiated directly using "),kce=a("code"),kBo=o("__init__()"),SBo=o(" (throws an error)."),RBo=l(),Kr=a("div"),f(RA.$$.fragment),BBo=l(),Sce=a("p"),PBo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),$Bo=l(),Sd=a("p"),IBo=o(`Note:
Loading a model from its configuration file does `),Rce=a("strong"),qBo=o("not"),NBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mD=a("a"),jBo=o("from_pretrained()"),DBo=o(" to load the model weights."),GBo=l(),Bce=a("p"),OBo=o("Examples:"),VBo=l(),f(BA.$$.fragment),XBo=l(),Qe=a("div"),f(PA.$$.fragment),zBo=l(),Pce=a("p"),QBo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),WBo=l(),Ka=a("p"),HBo=o("The model class to instantiate is selected based on the "),$ce=a("code"),UBo=o("model_type"),JBo=o(` property of the config object (either
passed as an argument or loaded from `),Ice=a("code"),YBo=o("pretrained_model_name_or_path"),KBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qce=a("code"),ZBo=o("pretrained_model_name_or_path"),ePo=o(":"),oPo=l(),j=a("ul"),n2=a("li"),Nce=a("strong"),rPo=o("albert"),tPo=o(" \u2014 "),gD=a("a"),aPo=o("AlbertForTokenClassification"),nPo=o(" (ALBERT model)"),sPo=l(),s2=a("li"),jce=a("strong"),lPo=o("bert"),iPo=o(" \u2014 "),hD=a("a"),dPo=o("BertForTokenClassification"),cPo=o(" (BERT model)"),fPo=l(),l2=a("li"),Dce=a("strong"),mPo=o("big_bird"),gPo=o(" \u2014 "),pD=a("a"),hPo=o("BigBirdForTokenClassification"),pPo=o(" (BigBird model)"),_Po=l(),i2=a("li"),Gce=a("strong"),uPo=o("camembert"),bPo=o(" \u2014 "),_D=a("a"),vPo=o("CamembertForTokenClassification"),FPo=o(" (CamemBERT model)"),TPo=l(),d2=a("li"),Oce=a("strong"),MPo=o("canine"),EPo=o(" \u2014 "),uD=a("a"),CPo=o("CanineForTokenClassification"),wPo=o(" (Canine model)"),APo=l(),c2=a("li"),Vce=a("strong"),yPo=o("convbert"),LPo=o(" \u2014 "),bD=a("a"),xPo=o("ConvBertForTokenClassification"),kPo=o(" (ConvBERT model)"),SPo=l(),f2=a("li"),Xce=a("strong"),RPo=o("data2vec-text"),BPo=o(" \u2014 "),vD=a("a"),PPo=o("Data2VecTextForTokenClassification"),$Po=o(" (Data2VecText model)"),IPo=l(),m2=a("li"),zce=a("strong"),qPo=o("deberta"),NPo=o(" \u2014 "),FD=a("a"),jPo=o("DebertaForTokenClassification"),DPo=o(" (DeBERTa model)"),GPo=l(),g2=a("li"),Qce=a("strong"),OPo=o("deberta-v2"),VPo=o(" \u2014 "),TD=a("a"),XPo=o("DebertaV2ForTokenClassification"),zPo=o(" (DeBERTa-v2 model)"),QPo=l(),h2=a("li"),Wce=a("strong"),WPo=o("distilbert"),HPo=o(" \u2014 "),MD=a("a"),UPo=o("DistilBertForTokenClassification"),JPo=o(" (DistilBERT model)"),YPo=l(),p2=a("li"),Hce=a("strong"),KPo=o("electra"),ZPo=o(" \u2014 "),ED=a("a"),e$o=o("ElectraForTokenClassification"),o$o=o(" (ELECTRA model)"),r$o=l(),_2=a("li"),Uce=a("strong"),t$o=o("flaubert"),a$o=o(" \u2014 "),CD=a("a"),n$o=o("FlaubertForTokenClassification"),s$o=o(" (FlauBERT model)"),l$o=l(),u2=a("li"),Jce=a("strong"),i$o=o("fnet"),d$o=o(" \u2014 "),wD=a("a"),c$o=o("FNetForTokenClassification"),f$o=o(" (FNet model)"),m$o=l(),b2=a("li"),Yce=a("strong"),g$o=o("funnel"),h$o=o(" \u2014 "),AD=a("a"),p$o=o("FunnelForTokenClassification"),_$o=o(" (Funnel Transformer model)"),u$o=l(),v2=a("li"),Kce=a("strong"),b$o=o("gpt2"),v$o=o(" \u2014 "),yD=a("a"),F$o=o("GPT2ForTokenClassification"),T$o=o(" (OpenAI GPT-2 model)"),M$o=l(),F2=a("li"),Zce=a("strong"),E$o=o("ibert"),C$o=o(" \u2014 "),LD=a("a"),w$o=o("IBertForTokenClassification"),A$o=o(" (I-BERT model)"),y$o=l(),T2=a("li"),efe=a("strong"),L$o=o("layoutlm"),x$o=o(" \u2014 "),xD=a("a"),k$o=o("LayoutLMForTokenClassification"),S$o=o(" (LayoutLM model)"),R$o=l(),M2=a("li"),ofe=a("strong"),B$o=o("layoutlmv2"),P$o=o(" \u2014 "),kD=a("a"),$$o=o("LayoutLMv2ForTokenClassification"),I$o=o(" (LayoutLMv2 model)"),q$o=l(),E2=a("li"),rfe=a("strong"),N$o=o("longformer"),j$o=o(" \u2014 "),SD=a("a"),D$o=o("LongformerForTokenClassification"),G$o=o(" (Longformer model)"),O$o=l(),C2=a("li"),tfe=a("strong"),V$o=o("megatron-bert"),X$o=o(" \u2014 "),RD=a("a"),z$o=o("MegatronBertForTokenClassification"),Q$o=o(" (MegatronBert model)"),W$o=l(),w2=a("li"),afe=a("strong"),H$o=o("mobilebert"),U$o=o(" \u2014 "),BD=a("a"),J$o=o("MobileBertForTokenClassification"),Y$o=o(" (MobileBERT model)"),K$o=l(),A2=a("li"),nfe=a("strong"),Z$o=o("mpnet"),eIo=o(" \u2014 "),PD=a("a"),oIo=o("MPNetForTokenClassification"),rIo=o(" (MPNet model)"),tIo=l(),y2=a("li"),sfe=a("strong"),aIo=o("nystromformer"),nIo=o(" \u2014 "),$D=a("a"),sIo=o("NystromformerForTokenClassification"),lIo=o(" (Nystromformer model)"),iIo=l(),L2=a("li"),lfe=a("strong"),dIo=o("qdqbert"),cIo=o(" \u2014 "),ID=a("a"),fIo=o("QDQBertForTokenClassification"),mIo=o(" (QDQBert model)"),gIo=l(),x2=a("li"),ife=a("strong"),hIo=o("rembert"),pIo=o(" \u2014 "),qD=a("a"),_Io=o("RemBertForTokenClassification"),uIo=o(" (RemBERT model)"),bIo=l(),k2=a("li"),dfe=a("strong"),vIo=o("roberta"),FIo=o(" \u2014 "),ND=a("a"),TIo=o("RobertaForTokenClassification"),MIo=o(" (RoBERTa model)"),EIo=l(),S2=a("li"),cfe=a("strong"),CIo=o("roformer"),wIo=o(" \u2014 "),jD=a("a"),AIo=o("RoFormerForTokenClassification"),yIo=o(" (RoFormer model)"),LIo=l(),R2=a("li"),ffe=a("strong"),xIo=o("squeezebert"),kIo=o(" \u2014 "),DD=a("a"),SIo=o("SqueezeBertForTokenClassification"),RIo=o(" (SqueezeBERT model)"),BIo=l(),B2=a("li"),mfe=a("strong"),PIo=o("xlm"),$Io=o(" \u2014 "),GD=a("a"),IIo=o("XLMForTokenClassification"),qIo=o(" (XLM model)"),NIo=l(),P2=a("li"),gfe=a("strong"),jIo=o("xlm-roberta"),DIo=o(" \u2014 "),OD=a("a"),GIo=o("XLMRobertaForTokenClassification"),OIo=o(" (XLM-RoBERTa model)"),VIo=l(),$2=a("li"),hfe=a("strong"),XIo=o("xlm-roberta-xl"),zIo=o(" \u2014 "),VD=a("a"),QIo=o("XLMRobertaXLForTokenClassification"),WIo=o(" (XLM-RoBERTa-XL model)"),HIo=l(),I2=a("li"),pfe=a("strong"),UIo=o("xlnet"),JIo=o(" \u2014 "),XD=a("a"),YIo=o("XLNetForTokenClassification"),KIo=o(" (XLNet model)"),ZIo=l(),q2=a("li"),_fe=a("strong"),eqo=o("yoso"),oqo=o(" \u2014 "),zD=a("a"),rqo=o("YosoForTokenClassification"),tqo=o(" (YOSO model)"),aqo=l(),N2=a("p"),nqo=o("The model is set in evaluation mode by default using "),ufe=a("code"),sqo=o("model.eval()"),lqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bfe=a("code"),iqo=o("model.train()"),dqo=l(),vfe=a("p"),cqo=o("Examples:"),fqo=l(),f($A.$$.fragment),NPe=l(),Rd=a("h2"),j2=a("a"),Ffe=a("span"),f(IA.$$.fragment),mqo=l(),Tfe=a("span"),gqo=o("AutoModelForQuestionAnswering"),jPe=l(),nr=a("div"),f(qA.$$.fragment),hqo=l(),Bd=a("p"),pqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),QD=a("a"),_qo=o("from_pretrained()"),uqo=o(" class method or the "),WD=a("a"),bqo=o("from_config()"),vqo=o(` class
method.`),Fqo=l(),NA=a("p"),Tqo=o("This class cannot be instantiated directly using "),Mfe=a("code"),Mqo=o("__init__()"),Eqo=o(" (throws an error)."),Cqo=l(),Zr=a("div"),f(jA.$$.fragment),wqo=l(),Efe=a("p"),Aqo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yqo=l(),Pd=a("p"),Lqo=o(`Note:
Loading a model from its configuration file does `),Cfe=a("strong"),xqo=o("not"),kqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HD=a("a"),Sqo=o("from_pretrained()"),Rqo=o(" to load the model weights."),Bqo=l(),wfe=a("p"),Pqo=o("Examples:"),$qo=l(),f(DA.$$.fragment),Iqo=l(),We=a("div"),f(GA.$$.fragment),qqo=l(),Afe=a("p"),Nqo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jqo=l(),Za=a("p"),Dqo=o("The model class to instantiate is selected based on the "),yfe=a("code"),Gqo=o("model_type"),Oqo=o(` property of the config object (either
passed as an argument or loaded from `),Lfe=a("code"),Vqo=o("pretrained_model_name_or_path"),Xqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xfe=a("code"),zqo=o("pretrained_model_name_or_path"),Qqo=o(":"),Wqo=l(),R=a("ul"),D2=a("li"),kfe=a("strong"),Hqo=o("albert"),Uqo=o(" \u2014 "),UD=a("a"),Jqo=o("AlbertForQuestionAnswering"),Yqo=o(" (ALBERT model)"),Kqo=l(),G2=a("li"),Sfe=a("strong"),Zqo=o("bart"),eNo=o(" \u2014 "),JD=a("a"),oNo=o("BartForQuestionAnswering"),rNo=o(" (BART model)"),tNo=l(),O2=a("li"),Rfe=a("strong"),aNo=o("bert"),nNo=o(" \u2014 "),YD=a("a"),sNo=o("BertForQuestionAnswering"),lNo=o(" (BERT model)"),iNo=l(),V2=a("li"),Bfe=a("strong"),dNo=o("big_bird"),cNo=o(" \u2014 "),KD=a("a"),fNo=o("BigBirdForQuestionAnswering"),mNo=o(" (BigBird model)"),gNo=l(),X2=a("li"),Pfe=a("strong"),hNo=o("bigbird_pegasus"),pNo=o(" \u2014 "),ZD=a("a"),_No=o("BigBirdPegasusForQuestionAnswering"),uNo=o(" (BigBirdPegasus model)"),bNo=l(),z2=a("li"),$fe=a("strong"),vNo=o("camembert"),FNo=o(" \u2014 "),eG=a("a"),TNo=o("CamembertForQuestionAnswering"),MNo=o(" (CamemBERT model)"),ENo=l(),Q2=a("li"),Ife=a("strong"),CNo=o("canine"),wNo=o(" \u2014 "),oG=a("a"),ANo=o("CanineForQuestionAnswering"),yNo=o(" (Canine model)"),LNo=l(),W2=a("li"),qfe=a("strong"),xNo=o("convbert"),kNo=o(" \u2014 "),rG=a("a"),SNo=o("ConvBertForQuestionAnswering"),RNo=o(" (ConvBERT model)"),BNo=l(),H2=a("li"),Nfe=a("strong"),PNo=o("data2vec-text"),$No=o(" \u2014 "),tG=a("a"),INo=o("Data2VecTextForQuestionAnswering"),qNo=o(" (Data2VecText model)"),NNo=l(),U2=a("li"),jfe=a("strong"),jNo=o("deberta"),DNo=o(" \u2014 "),aG=a("a"),GNo=o("DebertaForQuestionAnswering"),ONo=o(" (DeBERTa model)"),VNo=l(),J2=a("li"),Dfe=a("strong"),XNo=o("deberta-v2"),zNo=o(" \u2014 "),nG=a("a"),QNo=o("DebertaV2ForQuestionAnswering"),WNo=o(" (DeBERTa-v2 model)"),HNo=l(),Y2=a("li"),Gfe=a("strong"),UNo=o("distilbert"),JNo=o(" \u2014 "),sG=a("a"),YNo=o("DistilBertForQuestionAnswering"),KNo=o(" (DistilBERT model)"),ZNo=l(),K2=a("li"),Ofe=a("strong"),ejo=o("electra"),ojo=o(" \u2014 "),lG=a("a"),rjo=o("ElectraForQuestionAnswering"),tjo=o(" (ELECTRA model)"),ajo=l(),Z2=a("li"),Vfe=a("strong"),njo=o("flaubert"),sjo=o(" \u2014 "),iG=a("a"),ljo=o("FlaubertForQuestionAnsweringSimple"),ijo=o(" (FlauBERT model)"),djo=l(),e5=a("li"),Xfe=a("strong"),cjo=o("fnet"),fjo=o(" \u2014 "),dG=a("a"),mjo=o("FNetForQuestionAnswering"),gjo=o(" (FNet model)"),hjo=l(),o5=a("li"),zfe=a("strong"),pjo=o("funnel"),_jo=o(" \u2014 "),cG=a("a"),ujo=o("FunnelForQuestionAnswering"),bjo=o(" (Funnel Transformer model)"),vjo=l(),r5=a("li"),Qfe=a("strong"),Fjo=o("gptj"),Tjo=o(" \u2014 "),fG=a("a"),Mjo=o("GPTJForQuestionAnswering"),Ejo=o(" (GPT-J model)"),Cjo=l(),t5=a("li"),Wfe=a("strong"),wjo=o("ibert"),Ajo=o(" \u2014 "),mG=a("a"),yjo=o("IBertForQuestionAnswering"),Ljo=o(" (I-BERT model)"),xjo=l(),a5=a("li"),Hfe=a("strong"),kjo=o("layoutlmv2"),Sjo=o(" \u2014 "),gG=a("a"),Rjo=o("LayoutLMv2ForQuestionAnswering"),Bjo=o(" (LayoutLMv2 model)"),Pjo=l(),n5=a("li"),Ufe=a("strong"),$jo=o("led"),Ijo=o(" \u2014 "),hG=a("a"),qjo=o("LEDForQuestionAnswering"),Njo=o(" (LED model)"),jjo=l(),s5=a("li"),Jfe=a("strong"),Djo=o("longformer"),Gjo=o(" \u2014 "),pG=a("a"),Ojo=o("LongformerForQuestionAnswering"),Vjo=o(" (Longformer model)"),Xjo=l(),l5=a("li"),Yfe=a("strong"),zjo=o("lxmert"),Qjo=o(" \u2014 "),_G=a("a"),Wjo=o("LxmertForQuestionAnswering"),Hjo=o(" (LXMERT model)"),Ujo=l(),i5=a("li"),Kfe=a("strong"),Jjo=o("mbart"),Yjo=o(" \u2014 "),uG=a("a"),Kjo=o("MBartForQuestionAnswering"),Zjo=o(" (mBART model)"),eDo=l(),d5=a("li"),Zfe=a("strong"),oDo=o("megatron-bert"),rDo=o(" \u2014 "),bG=a("a"),tDo=o("MegatronBertForQuestionAnswering"),aDo=o(" (MegatronBert model)"),nDo=l(),c5=a("li"),eme=a("strong"),sDo=o("mobilebert"),lDo=o(" \u2014 "),vG=a("a"),iDo=o("MobileBertForQuestionAnswering"),dDo=o(" (MobileBERT model)"),cDo=l(),f5=a("li"),ome=a("strong"),fDo=o("mpnet"),mDo=o(" \u2014 "),FG=a("a"),gDo=o("MPNetForQuestionAnswering"),hDo=o(" (MPNet model)"),pDo=l(),m5=a("li"),rme=a("strong"),_Do=o("nystromformer"),uDo=o(" \u2014 "),TG=a("a"),bDo=o("NystromformerForQuestionAnswering"),vDo=o(" (Nystromformer model)"),FDo=l(),g5=a("li"),tme=a("strong"),TDo=o("qdqbert"),MDo=o(" \u2014 "),MG=a("a"),EDo=o("QDQBertForQuestionAnswering"),CDo=o(" (QDQBert model)"),wDo=l(),h5=a("li"),ame=a("strong"),ADo=o("reformer"),yDo=o(" \u2014 "),EG=a("a"),LDo=o("ReformerForQuestionAnswering"),xDo=o(" (Reformer model)"),kDo=l(),p5=a("li"),nme=a("strong"),SDo=o("rembert"),RDo=o(" \u2014 "),CG=a("a"),BDo=o("RemBertForQuestionAnswering"),PDo=o(" (RemBERT model)"),$Do=l(),_5=a("li"),sme=a("strong"),IDo=o("roberta"),qDo=o(" \u2014 "),wG=a("a"),NDo=o("RobertaForQuestionAnswering"),jDo=o(" (RoBERTa model)"),DDo=l(),u5=a("li"),lme=a("strong"),GDo=o("roformer"),ODo=o(" \u2014 "),AG=a("a"),VDo=o("RoFormerForQuestionAnswering"),XDo=o(" (RoFormer model)"),zDo=l(),b5=a("li"),ime=a("strong"),QDo=o("splinter"),WDo=o(" \u2014 "),yG=a("a"),HDo=o("SplinterForQuestionAnswering"),UDo=o(" (Splinter model)"),JDo=l(),v5=a("li"),dme=a("strong"),YDo=o("squeezebert"),KDo=o(" \u2014 "),LG=a("a"),ZDo=o("SqueezeBertForQuestionAnswering"),eGo=o(" (SqueezeBERT model)"),oGo=l(),F5=a("li"),cme=a("strong"),rGo=o("xlm"),tGo=o(" \u2014 "),xG=a("a"),aGo=o("XLMForQuestionAnsweringSimple"),nGo=o(" (XLM model)"),sGo=l(),T5=a("li"),fme=a("strong"),lGo=o("xlm-roberta"),iGo=o(" \u2014 "),kG=a("a"),dGo=o("XLMRobertaForQuestionAnswering"),cGo=o(" (XLM-RoBERTa model)"),fGo=l(),M5=a("li"),mme=a("strong"),mGo=o("xlm-roberta-xl"),gGo=o(" \u2014 "),SG=a("a"),hGo=o("XLMRobertaXLForQuestionAnswering"),pGo=o(" (XLM-RoBERTa-XL model)"),_Go=l(),E5=a("li"),gme=a("strong"),uGo=o("xlnet"),bGo=o(" \u2014 "),RG=a("a"),vGo=o("XLNetForQuestionAnsweringSimple"),FGo=o(" (XLNet model)"),TGo=l(),C5=a("li"),hme=a("strong"),MGo=o("yoso"),EGo=o(" \u2014 "),BG=a("a"),CGo=o("YosoForQuestionAnswering"),wGo=o(" (YOSO model)"),AGo=l(),w5=a("p"),yGo=o("The model is set in evaluation mode by default using "),pme=a("code"),LGo=o("model.eval()"),xGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=a("code"),kGo=o("model.train()"),SGo=l(),ume=a("p"),RGo=o("Examples:"),BGo=l(),f(OA.$$.fragment),DPe=l(),$d=a("h2"),A5=a("a"),bme=a("span"),f(VA.$$.fragment),PGo=l(),vme=a("span"),$Go=o("AutoModelForTableQuestionAnswering"),GPe=l(),sr=a("div"),f(XA.$$.fragment),IGo=l(),Id=a("p"),qGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),PG=a("a"),NGo=o("from_pretrained()"),jGo=o(" class method or the "),$G=a("a"),DGo=o("from_config()"),GGo=o(` class
method.`),OGo=l(),zA=a("p"),VGo=o("This class cannot be instantiated directly using "),Fme=a("code"),XGo=o("__init__()"),zGo=o(" (throws an error)."),QGo=l(),et=a("div"),f(QA.$$.fragment),WGo=l(),Tme=a("p"),HGo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),UGo=l(),qd=a("p"),JGo=o(`Note:
Loading a model from its configuration file does `),Mme=a("strong"),YGo=o("not"),KGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=a("a"),ZGo=o("from_pretrained()"),eOo=o(" to load the model weights."),oOo=l(),Eme=a("p"),rOo=o("Examples:"),tOo=l(),f(WA.$$.fragment),aOo=l(),He=a("div"),f(HA.$$.fragment),nOo=l(),Cme=a("p"),sOo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),lOo=l(),en=a("p"),iOo=o("The model class to instantiate is selected based on the "),wme=a("code"),dOo=o("model_type"),cOo=o(` property of the config object (either
passed as an argument or loaded from `),Ame=a("code"),fOo=o("pretrained_model_name_or_path"),mOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=a("code"),gOo=o("pretrained_model_name_or_path"),hOo=o(":"),pOo=l(),Lme=a("ul"),y5=a("li"),xme=a("strong"),_Oo=o("tapas"),uOo=o(" \u2014 "),qG=a("a"),bOo=o("TapasForQuestionAnswering"),vOo=o(" (TAPAS model)"),FOo=l(),L5=a("p"),TOo=o("The model is set in evaluation mode by default using "),kme=a("code"),MOo=o("model.eval()"),EOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sme=a("code"),COo=o("model.train()"),wOo=l(),Rme=a("p"),AOo=o("Examples:"),yOo=l(),f(UA.$$.fragment),OPe=l(),Nd=a("h2"),x5=a("a"),Bme=a("span"),f(JA.$$.fragment),LOo=l(),Pme=a("span"),xOo=o("AutoModelForImageClassification"),VPe=l(),lr=a("div"),f(YA.$$.fragment),kOo=l(),jd=a("p"),SOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NG=a("a"),ROo=o("from_pretrained()"),BOo=o(" class method or the "),jG=a("a"),POo=o("from_config()"),$Oo=o(` class
method.`),IOo=l(),KA=a("p"),qOo=o("This class cannot be instantiated directly using "),$me=a("code"),NOo=o("__init__()"),jOo=o(" (throws an error)."),DOo=l(),ot=a("div"),f(ZA.$$.fragment),GOo=l(),Ime=a("p"),OOo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),VOo=l(),Dd=a("p"),XOo=o(`Note:
Loading a model from its configuration file does `),qme=a("strong"),zOo=o("not"),QOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=a("a"),WOo=o("from_pretrained()"),HOo=o(" to load the model weights."),UOo=l(),Nme=a("p"),JOo=o("Examples:"),YOo=l(),f(e0.$$.fragment),KOo=l(),Ue=a("div"),f(o0.$$.fragment),ZOo=l(),jme=a("p"),eVo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),oVo=l(),on=a("p"),rVo=o("The model class to instantiate is selected based on the "),Dme=a("code"),tVo=o("model_type"),aVo=o(` property of the config object (either
passed as an argument or loaded from `),Gme=a("code"),nVo=o("pretrained_model_name_or_path"),sVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ome=a("code"),lVo=o("pretrained_model_name_or_path"),iVo=o(":"),dVo=l(),ce=a("ul"),k5=a("li"),Vme=a("strong"),cVo=o("beit"),fVo=o(" \u2014 "),GG=a("a"),mVo=o("BeitForImageClassification"),gVo=o(" (BEiT model)"),hVo=l(),S5=a("li"),Xme=a("strong"),pVo=o("convnext"),_Vo=o(" \u2014 "),OG=a("a"),uVo=o("ConvNextForImageClassification"),bVo=o(" (ConvNext model)"),vVo=l(),R5=a("li"),zme=a("strong"),FVo=o("data2vec-vision"),TVo=o(" \u2014 "),VG=a("a"),MVo=o("Data2VecVisionForImageClassification"),EVo=o(" (Data2VecVision model)"),CVo=l(),Us=a("li"),Qme=a("strong"),wVo=o("deit"),AVo=o(" \u2014 "),XG=a("a"),yVo=o("DeiTForImageClassification"),LVo=o(" or "),zG=a("a"),xVo=o("DeiTForImageClassificationWithTeacher"),kVo=o(" (DeiT model)"),SVo=l(),B5=a("li"),Wme=a("strong"),RVo=o("imagegpt"),BVo=o(" \u2014 "),QG=a("a"),PVo=o("ImageGPTForImageClassification"),$Vo=o(" (ImageGPT model)"),IVo=l(),ma=a("li"),Hme=a("strong"),qVo=o("perceiver"),NVo=o(" \u2014 "),WG=a("a"),jVo=o("PerceiverForImageClassificationLearned"),DVo=o(" or "),HG=a("a"),GVo=o("PerceiverForImageClassificationFourier"),OVo=o(" or "),UG=a("a"),VVo=o("PerceiverForImageClassificationConvProcessing"),XVo=o(" (Perceiver model)"),zVo=l(),P5=a("li"),Ume=a("strong"),QVo=o("poolformer"),WVo=o(" \u2014 "),JG=a("a"),HVo=o("PoolFormerForImageClassification"),UVo=o(" (PoolFormer model)"),JVo=l(),$5=a("li"),Jme=a("strong"),YVo=o("regnet"),KVo=o(" \u2014 "),YG=a("a"),ZVo=o("RegNetForImageClassification"),eXo=o(" (RegNet model)"),oXo=l(),I5=a("li"),Yme=a("strong"),rXo=o("resnet"),tXo=o(" \u2014 "),KG=a("a"),aXo=o("ResNetForImageClassification"),nXo=o(" (ResNet model)"),sXo=l(),q5=a("li"),Kme=a("strong"),lXo=o("segformer"),iXo=o(" \u2014 "),ZG=a("a"),dXo=o("SegformerForImageClassification"),cXo=o(" (SegFormer model)"),fXo=l(),N5=a("li"),Zme=a("strong"),mXo=o("swin"),gXo=o(" \u2014 "),eO=a("a"),hXo=o("SwinForImageClassification"),pXo=o(" (Swin model)"),_Xo=l(),j5=a("li"),ege=a("strong"),uXo=o("van"),bXo=o(" \u2014 "),oO=a("a"),vXo=o("VanForImageClassification"),FXo=o(" (VAN model)"),TXo=l(),D5=a("li"),oge=a("strong"),MXo=o("vit"),EXo=o(" \u2014 "),rO=a("a"),CXo=o("ViTForImageClassification"),wXo=o(" (ViT model)"),AXo=l(),G5=a("p"),yXo=o("The model is set in evaluation mode by default using "),rge=a("code"),LXo=o("model.eval()"),xXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tge=a("code"),kXo=o("model.train()"),SXo=l(),age=a("p"),RXo=o("Examples:"),BXo=l(),f(r0.$$.fragment),XPe=l(),Gd=a("h2"),O5=a("a"),nge=a("span"),f(t0.$$.fragment),PXo=l(),sge=a("span"),$Xo=o("AutoModelForVision2Seq"),zPe=l(),ir=a("div"),f(a0.$$.fragment),IXo=l(),Od=a("p"),qXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tO=a("a"),NXo=o("from_pretrained()"),jXo=o(" class method or the "),aO=a("a"),DXo=o("from_config()"),GXo=o(` class
method.`),OXo=l(),n0=a("p"),VXo=o("This class cannot be instantiated directly using "),lge=a("code"),XXo=o("__init__()"),zXo=o(" (throws an error)."),QXo=l(),rt=a("div"),f(s0.$$.fragment),WXo=l(),ige=a("p"),HXo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),UXo=l(),Vd=a("p"),JXo=o(`Note:
Loading a model from its configuration file does `),dge=a("strong"),YXo=o("not"),KXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nO=a("a"),ZXo=o("from_pretrained()"),ezo=o(" to load the model weights."),ozo=l(),cge=a("p"),rzo=o("Examples:"),tzo=l(),f(l0.$$.fragment),azo=l(),Je=a("div"),f(i0.$$.fragment),nzo=l(),fge=a("p"),szo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lzo=l(),rn=a("p"),izo=o("The model class to instantiate is selected based on the "),mge=a("code"),dzo=o("model_type"),czo=o(` property of the config object (either
passed as an argument or loaded from `),gge=a("code"),fzo=o("pretrained_model_name_or_path"),mzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=a("code"),gzo=o("pretrained_model_name_or_path"),hzo=o(":"),pzo=l(),pge=a("ul"),V5=a("li"),_ge=a("strong"),_zo=o("vision-encoder-decoder"),uzo=o(" \u2014 "),sO=a("a"),bzo=o("VisionEncoderDecoderModel"),vzo=o(" (Vision Encoder decoder model)"),Fzo=l(),X5=a("p"),Tzo=o("The model is set in evaluation mode by default using "),uge=a("code"),Mzo=o("model.eval()"),Ezo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=a("code"),Czo=o("model.train()"),wzo=l(),vge=a("p"),Azo=o("Examples:"),yzo=l(),f(d0.$$.fragment),QPe=l(),Xd=a("h2"),z5=a("a"),Fge=a("span"),f(c0.$$.fragment),Lzo=l(),Tge=a("span"),xzo=o("AutoModelForAudioClassification"),WPe=l(),dr=a("div"),f(f0.$$.fragment),kzo=l(),zd=a("p"),Szo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),lO=a("a"),Rzo=o("from_pretrained()"),Bzo=o(" class method or the "),iO=a("a"),Pzo=o("from_config()"),$zo=o(` class
method.`),Izo=l(),m0=a("p"),qzo=o("This class cannot be instantiated directly using "),Mge=a("code"),Nzo=o("__init__()"),jzo=o(" (throws an error)."),Dzo=l(),tt=a("div"),f(g0.$$.fragment),Gzo=l(),Ege=a("p"),Ozo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Vzo=l(),Qd=a("p"),Xzo=o(`Note:
Loading a model from its configuration file does `),Cge=a("strong"),zzo=o("not"),Qzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dO=a("a"),Wzo=o("from_pretrained()"),Hzo=o(" to load the model weights."),Uzo=l(),wge=a("p"),Jzo=o("Examples:"),Yzo=l(),f(h0.$$.fragment),Kzo=l(),Ye=a("div"),f(p0.$$.fragment),Zzo=l(),Age=a("p"),eQo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),oQo=l(),tn=a("p"),rQo=o("The model class to instantiate is selected based on the "),yge=a("code"),tQo=o("model_type"),aQo=o(` property of the config object (either
passed as an argument or loaded from `),Lge=a("code"),nQo=o("pretrained_model_name_or_path"),sQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xge=a("code"),lQo=o("pretrained_model_name_or_path"),iQo=o(":"),dQo=l(),Re=a("ul"),Q5=a("li"),kge=a("strong"),cQo=o("data2vec-audio"),fQo=o(" \u2014 "),cO=a("a"),mQo=o("Data2VecAudioForSequenceClassification"),gQo=o(" (Data2VecAudio model)"),hQo=l(),W5=a("li"),Sge=a("strong"),pQo=o("hubert"),_Qo=o(" \u2014 "),fO=a("a"),uQo=o("HubertForSequenceClassification"),bQo=o(" (Hubert model)"),vQo=l(),H5=a("li"),Rge=a("strong"),FQo=o("sew"),TQo=o(" \u2014 "),mO=a("a"),MQo=o("SEWForSequenceClassification"),EQo=o(" (SEW model)"),CQo=l(),U5=a("li"),Bge=a("strong"),wQo=o("sew-d"),AQo=o(" \u2014 "),gO=a("a"),yQo=o("SEWDForSequenceClassification"),LQo=o(" (SEW-D model)"),xQo=l(),J5=a("li"),Pge=a("strong"),kQo=o("unispeech"),SQo=o(" \u2014 "),hO=a("a"),RQo=o("UniSpeechForSequenceClassification"),BQo=o(" (UniSpeech model)"),PQo=l(),Y5=a("li"),$ge=a("strong"),$Qo=o("unispeech-sat"),IQo=o(" \u2014 "),pO=a("a"),qQo=o("UniSpeechSatForSequenceClassification"),NQo=o(" (UniSpeechSat model)"),jQo=l(),K5=a("li"),Ige=a("strong"),DQo=o("wav2vec2"),GQo=o(" \u2014 "),_O=a("a"),OQo=o("Wav2Vec2ForSequenceClassification"),VQo=o(" (Wav2Vec2 model)"),XQo=l(),Z5=a("li"),qge=a("strong"),zQo=o("wavlm"),QQo=o(" \u2014 "),uO=a("a"),WQo=o("WavLMForSequenceClassification"),HQo=o(" (WavLM model)"),UQo=l(),e3=a("p"),JQo=o("The model is set in evaluation mode by default using "),Nge=a("code"),YQo=o("model.eval()"),KQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jge=a("code"),ZQo=o("model.train()"),eWo=l(),Dge=a("p"),oWo=o("Examples:"),rWo=l(),f(_0.$$.fragment),HPe=l(),Wd=a("h2"),o3=a("a"),Gge=a("span"),f(u0.$$.fragment),tWo=l(),Oge=a("span"),aWo=o("AutoModelForAudioFrameClassification"),UPe=l(),cr=a("div"),f(b0.$$.fragment),nWo=l(),Hd=a("p"),sWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bO=a("a"),lWo=o("from_pretrained()"),iWo=o(" class method or the "),vO=a("a"),dWo=o("from_config()"),cWo=o(` class
method.`),fWo=l(),v0=a("p"),mWo=o("This class cannot be instantiated directly using "),Vge=a("code"),gWo=o("__init__()"),hWo=o(" (throws an error)."),pWo=l(),at=a("div"),f(F0.$$.fragment),_Wo=l(),Xge=a("p"),uWo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),bWo=l(),Ud=a("p"),vWo=o(`Note:
Loading a model from its configuration file does `),zge=a("strong"),FWo=o("not"),TWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=a("a"),MWo=o("from_pretrained()"),EWo=o(" to load the model weights."),CWo=l(),Qge=a("p"),wWo=o("Examples:"),AWo=l(),f(T0.$$.fragment),yWo=l(),Ke=a("div"),f(M0.$$.fragment),LWo=l(),Wge=a("p"),xWo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),kWo=l(),an=a("p"),SWo=o("The model class to instantiate is selected based on the "),Hge=a("code"),RWo=o("model_type"),BWo=o(` property of the config object (either
passed as an argument or loaded from `),Uge=a("code"),PWo=o("pretrained_model_name_or_path"),$Wo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jge=a("code"),IWo=o("pretrained_model_name_or_path"),qWo=o(":"),NWo=l(),nn=a("ul"),r3=a("li"),Yge=a("strong"),jWo=o("data2vec-audio"),DWo=o(" \u2014 "),TO=a("a"),GWo=o("Data2VecAudioForAudioFrameClassification"),OWo=o(" (Data2VecAudio model)"),VWo=l(),t3=a("li"),Kge=a("strong"),XWo=o("unispeech-sat"),zWo=o(" \u2014 "),MO=a("a"),QWo=o("UniSpeechSatForAudioFrameClassification"),WWo=o(" (UniSpeechSat model)"),HWo=l(),a3=a("li"),Zge=a("strong"),UWo=o("wav2vec2"),JWo=o(" \u2014 "),EO=a("a"),YWo=o("Wav2Vec2ForAudioFrameClassification"),KWo=o(" (Wav2Vec2 model)"),ZWo=l(),n3=a("li"),ehe=a("strong"),eHo=o("wavlm"),oHo=o(" \u2014 "),CO=a("a"),rHo=o("WavLMForAudioFrameClassification"),tHo=o(" (WavLM model)"),aHo=l(),s3=a("p"),nHo=o("The model is set in evaluation mode by default using "),ohe=a("code"),sHo=o("model.eval()"),lHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rhe=a("code"),iHo=o("model.train()"),dHo=l(),the=a("p"),cHo=o("Examples:"),fHo=l(),f(E0.$$.fragment),JPe=l(),Jd=a("h2"),l3=a("a"),ahe=a("span"),f(C0.$$.fragment),mHo=l(),nhe=a("span"),gHo=o("AutoModelForCTC"),YPe=l(),fr=a("div"),f(w0.$$.fragment),hHo=l(),Yd=a("p"),pHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),wO=a("a"),_Ho=o("from_pretrained()"),uHo=o(" class method or the "),AO=a("a"),bHo=o("from_config()"),vHo=o(` class
method.`),FHo=l(),A0=a("p"),THo=o("This class cannot be instantiated directly using "),she=a("code"),MHo=o("__init__()"),EHo=o(" (throws an error)."),CHo=l(),nt=a("div"),f(y0.$$.fragment),wHo=l(),lhe=a("p"),AHo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),yHo=l(),Kd=a("p"),LHo=o(`Note:
Loading a model from its configuration file does `),ihe=a("strong"),xHo=o("not"),kHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=a("a"),SHo=o("from_pretrained()"),RHo=o(" to load the model weights."),BHo=l(),dhe=a("p"),PHo=o("Examples:"),$Ho=l(),f(L0.$$.fragment),IHo=l(),Ze=a("div"),f(x0.$$.fragment),qHo=l(),che=a("p"),NHo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),jHo=l(),sn=a("p"),DHo=o("The model class to instantiate is selected based on the "),fhe=a("code"),GHo=o("model_type"),OHo=o(` property of the config object (either
passed as an argument or loaded from `),mhe=a("code"),VHo=o("pretrained_model_name_or_path"),XHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ghe=a("code"),zHo=o("pretrained_model_name_or_path"),QHo=o(":"),WHo=l(),Be=a("ul"),i3=a("li"),hhe=a("strong"),HHo=o("data2vec-audio"),UHo=o(" \u2014 "),LO=a("a"),JHo=o("Data2VecAudioForCTC"),YHo=o(" (Data2VecAudio model)"),KHo=l(),d3=a("li"),phe=a("strong"),ZHo=o("hubert"),eUo=o(" \u2014 "),xO=a("a"),oUo=o("HubertForCTC"),rUo=o(" (Hubert model)"),tUo=l(),c3=a("li"),_he=a("strong"),aUo=o("sew"),nUo=o(" \u2014 "),kO=a("a"),sUo=o("SEWForCTC"),lUo=o(" (SEW model)"),iUo=l(),f3=a("li"),uhe=a("strong"),dUo=o("sew-d"),cUo=o(" \u2014 "),SO=a("a"),fUo=o("SEWDForCTC"),mUo=o(" (SEW-D model)"),gUo=l(),m3=a("li"),bhe=a("strong"),hUo=o("unispeech"),pUo=o(" \u2014 "),RO=a("a"),_Uo=o("UniSpeechForCTC"),uUo=o(" (UniSpeech model)"),bUo=l(),g3=a("li"),vhe=a("strong"),vUo=o("unispeech-sat"),FUo=o(" \u2014 "),BO=a("a"),TUo=o("UniSpeechSatForCTC"),MUo=o(" (UniSpeechSat model)"),EUo=l(),h3=a("li"),Fhe=a("strong"),CUo=o("wav2vec2"),wUo=o(" \u2014 "),PO=a("a"),AUo=o("Wav2Vec2ForCTC"),yUo=o(" (Wav2Vec2 model)"),LUo=l(),p3=a("li"),The=a("strong"),xUo=o("wavlm"),kUo=o(" \u2014 "),$O=a("a"),SUo=o("WavLMForCTC"),RUo=o(" (WavLM model)"),BUo=l(),_3=a("p"),PUo=o("The model is set in evaluation mode by default using "),Mhe=a("code"),$Uo=o("model.eval()"),IUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ehe=a("code"),qUo=o("model.train()"),NUo=l(),Che=a("p"),jUo=o("Examples:"),DUo=l(),f(k0.$$.fragment),KPe=l(),Zd=a("h2"),u3=a("a"),whe=a("span"),f(S0.$$.fragment),GUo=l(),Ahe=a("span"),OUo=o("AutoModelForSpeechSeq2Seq"),ZPe=l(),mr=a("div"),f(R0.$$.fragment),VUo=l(),ec=a("p"),XUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IO=a("a"),zUo=o("from_pretrained()"),QUo=o(" class method or the "),qO=a("a"),WUo=o("from_config()"),HUo=o(` class
method.`),UUo=l(),B0=a("p"),JUo=o("This class cannot be instantiated directly using "),yhe=a("code"),YUo=o("__init__()"),KUo=o(" (throws an error)."),ZUo=l(),st=a("div"),f(P0.$$.fragment),eJo=l(),Lhe=a("p"),oJo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rJo=l(),oc=a("p"),tJo=o(`Note:
Loading a model from its configuration file does `),xhe=a("strong"),aJo=o("not"),nJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=a("a"),sJo=o("from_pretrained()"),lJo=o(" to load the model weights."),iJo=l(),khe=a("p"),dJo=o("Examples:"),cJo=l(),f($0.$$.fragment),fJo=l(),eo=a("div"),f(I0.$$.fragment),mJo=l(),She=a("p"),gJo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),hJo=l(),ln=a("p"),pJo=o("The model class to instantiate is selected based on the "),Rhe=a("code"),_Jo=o("model_type"),uJo=o(` property of the config object (either
passed as an argument or loaded from `),Bhe=a("code"),bJo=o("pretrained_model_name_or_path"),vJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Phe=a("code"),FJo=o("pretrained_model_name_or_path"),TJo=o(":"),MJo=l(),q0=a("ul"),b3=a("li"),$he=a("strong"),EJo=o("speech-encoder-decoder"),CJo=o(" \u2014 "),jO=a("a"),wJo=o("SpeechEncoderDecoderModel"),AJo=o(" (Speech Encoder decoder model)"),yJo=l(),v3=a("li"),Ihe=a("strong"),LJo=o("speech_to_text"),xJo=o(" \u2014 "),DO=a("a"),kJo=o("Speech2TextForConditionalGeneration"),SJo=o(" (Speech2Text model)"),RJo=l(),F3=a("p"),BJo=o("The model is set in evaluation mode by default using "),qhe=a("code"),PJo=o("model.eval()"),$Jo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=a("code"),IJo=o("model.train()"),qJo=l(),jhe=a("p"),NJo=o("Examples:"),jJo=l(),f(N0.$$.fragment),e$e=l(),rc=a("h2"),T3=a("a"),Dhe=a("span"),f(j0.$$.fragment),DJo=l(),Ghe=a("span"),GJo=o("AutoModelForAudioXVector"),o$e=l(),gr=a("div"),f(D0.$$.fragment),OJo=l(),tc=a("p"),VJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),GO=a("a"),XJo=o("from_pretrained()"),zJo=o(" class method or the "),OO=a("a"),QJo=o("from_config()"),WJo=o(` class
method.`),HJo=l(),G0=a("p"),UJo=o("This class cannot be instantiated directly using "),Ohe=a("code"),JJo=o("__init__()"),YJo=o(" (throws an error)."),KJo=l(),lt=a("div"),f(O0.$$.fragment),ZJo=l(),Vhe=a("p"),eYo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),oYo=l(),ac=a("p"),rYo=o(`Note:
Loading a model from its configuration file does `),Xhe=a("strong"),tYo=o("not"),aYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=a("a"),nYo=o("from_pretrained()"),sYo=o(" to load the model weights."),lYo=l(),zhe=a("p"),iYo=o("Examples:"),dYo=l(),f(V0.$$.fragment),cYo=l(),oo=a("div"),f(X0.$$.fragment),fYo=l(),Qhe=a("p"),mYo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),gYo=l(),dn=a("p"),hYo=o("The model class to instantiate is selected based on the "),Whe=a("code"),pYo=o("model_type"),_Yo=o(` property of the config object (either
passed as an argument or loaded from `),Hhe=a("code"),uYo=o("pretrained_model_name_or_path"),bYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=a("code"),vYo=o("pretrained_model_name_or_path"),FYo=o(":"),TYo=l(),cn=a("ul"),M3=a("li"),Jhe=a("strong"),MYo=o("data2vec-audio"),EYo=o(" \u2014 "),XO=a("a"),CYo=o("Data2VecAudioForXVector"),wYo=o(" (Data2VecAudio model)"),AYo=l(),E3=a("li"),Yhe=a("strong"),yYo=o("unispeech-sat"),LYo=o(" \u2014 "),zO=a("a"),xYo=o("UniSpeechSatForXVector"),kYo=o(" (UniSpeechSat model)"),SYo=l(),C3=a("li"),Khe=a("strong"),RYo=o("wav2vec2"),BYo=o(" \u2014 "),QO=a("a"),PYo=o("Wav2Vec2ForXVector"),$Yo=o(" (Wav2Vec2 model)"),IYo=l(),w3=a("li"),Zhe=a("strong"),qYo=o("wavlm"),NYo=o(" \u2014 "),WO=a("a"),jYo=o("WavLMForXVector"),DYo=o(" (WavLM model)"),GYo=l(),A3=a("p"),OYo=o("The model is set in evaluation mode by default using "),epe=a("code"),VYo=o("model.eval()"),XYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=a("code"),zYo=o("model.train()"),QYo=l(),rpe=a("p"),WYo=o("Examples:"),HYo=l(),f(z0.$$.fragment),r$e=l(),nc=a("h2"),y3=a("a"),tpe=a("span"),f(Q0.$$.fragment),UYo=l(),ape=a("span"),JYo=o("AutoModelForMaskedImageModeling"),t$e=l(),hr=a("div"),f(W0.$$.fragment),YYo=l(),sc=a("p"),KYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),HO=a("a"),ZYo=o("from_pretrained()"),eKo=o(" class method or the "),UO=a("a"),oKo=o("from_config()"),rKo=o(` class
method.`),tKo=l(),H0=a("p"),aKo=o("This class cannot be instantiated directly using "),npe=a("code"),nKo=o("__init__()"),sKo=o(" (throws an error)."),lKo=l(),it=a("div"),f(U0.$$.fragment),iKo=l(),spe=a("p"),dKo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),cKo=l(),lc=a("p"),fKo=o(`Note:
Loading a model from its configuration file does `),lpe=a("strong"),mKo=o("not"),gKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=a("a"),hKo=o("from_pretrained()"),pKo=o(" to load the model weights."),_Ko=l(),ipe=a("p"),uKo=o("Examples:"),bKo=l(),f(J0.$$.fragment),vKo=l(),ro=a("div"),f(Y0.$$.fragment),FKo=l(),dpe=a("p"),TKo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),MKo=l(),fn=a("p"),EKo=o("The model class to instantiate is selected based on the "),cpe=a("code"),CKo=o("model_type"),wKo=o(` property of the config object (either
passed as an argument or loaded from `),fpe=a("code"),AKo=o("pretrained_model_name_or_path"),yKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=a("code"),LKo=o("pretrained_model_name_or_path"),xKo=o(":"),kKo=l(),ic=a("ul"),L3=a("li"),gpe=a("strong"),SKo=o("deit"),RKo=o(" \u2014 "),YO=a("a"),BKo=o("DeiTForMaskedImageModeling"),PKo=o(" (DeiT model)"),$Ko=l(),x3=a("li"),hpe=a("strong"),IKo=o("swin"),qKo=o(" \u2014 "),KO=a("a"),NKo=o("SwinForMaskedImageModeling"),jKo=o(" (Swin model)"),DKo=l(),k3=a("li"),ppe=a("strong"),GKo=o("vit"),OKo=o(" \u2014 "),ZO=a("a"),VKo=o("ViTForMaskedImageModeling"),XKo=o(" (ViT model)"),zKo=l(),S3=a("p"),QKo=o("The model is set in evaluation mode by default using "),_pe=a("code"),WKo=o("model.eval()"),HKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),upe=a("code"),UKo=o("model.train()"),JKo=l(),bpe=a("p"),YKo=o("Examples:"),KKo=l(),f(K0.$$.fragment),a$e=l(),dc=a("h2"),R3=a("a"),vpe=a("span"),f(Z0.$$.fragment),ZKo=l(),Fpe=a("span"),eZo=o("AutoModelForObjectDetection"),n$e=l(),pr=a("div"),f(ey.$$.fragment),oZo=l(),cc=a("p"),rZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),eV=a("a"),tZo=o("from_pretrained()"),aZo=o(" class method or the "),oV=a("a"),nZo=o("from_config()"),sZo=o(` class
method.`),lZo=l(),oy=a("p"),iZo=o("This class cannot be instantiated directly using "),Tpe=a("code"),dZo=o("__init__()"),cZo=o(" (throws an error)."),fZo=l(),dt=a("div"),f(ry.$$.fragment),mZo=l(),Mpe=a("p"),gZo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),hZo=l(),fc=a("p"),pZo=o(`Note:
Loading a model from its configuration file does `),Epe=a("strong"),_Zo=o("not"),uZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rV=a("a"),bZo=o("from_pretrained()"),vZo=o(" to load the model weights."),FZo=l(),Cpe=a("p"),TZo=o("Examples:"),MZo=l(),f(ty.$$.fragment),EZo=l(),to=a("div"),f(ay.$$.fragment),CZo=l(),wpe=a("p"),wZo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),AZo=l(),mn=a("p"),yZo=o("The model class to instantiate is selected based on the "),Ape=a("code"),LZo=o("model_type"),xZo=o(` property of the config object (either
passed as an argument or loaded from `),ype=a("code"),kZo=o("pretrained_model_name_or_path"),SZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=a("code"),RZo=o("pretrained_model_name_or_path"),BZo=o(":"),PZo=l(),xpe=a("ul"),B3=a("li"),kpe=a("strong"),$Zo=o("detr"),IZo=o(" \u2014 "),tV=a("a"),qZo=o("DetrForObjectDetection"),NZo=o(" (DETR model)"),jZo=l(),P3=a("p"),DZo=o("The model is set in evaluation mode by default using "),Spe=a("code"),GZo=o("model.eval()"),OZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=a("code"),VZo=o("model.train()"),XZo=l(),Bpe=a("p"),zZo=o("Examples:"),QZo=l(),f(ny.$$.fragment),s$e=l(),mc=a("h2"),$3=a("a"),Ppe=a("span"),f(sy.$$.fragment),WZo=l(),$pe=a("span"),HZo=o("AutoModelForImageSegmentation"),l$e=l(),_r=a("div"),f(ly.$$.fragment),UZo=l(),gc=a("p"),JZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),aV=a("a"),YZo=o("from_pretrained()"),KZo=o(" class method or the "),nV=a("a"),ZZo=o("from_config()"),eer=o(` class
method.`),oer=l(),iy=a("p"),rer=o("This class cannot be instantiated directly using "),Ipe=a("code"),ter=o("__init__()"),aer=o(" (throws an error)."),ner=l(),ct=a("div"),f(dy.$$.fragment),ser=l(),qpe=a("p"),ler=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),ier=l(),hc=a("p"),der=o(`Note:
Loading a model from its configuration file does `),Npe=a("strong"),cer=o("not"),fer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=a("a"),mer=o("from_pretrained()"),ger=o(" to load the model weights."),her=l(),jpe=a("p"),per=o("Examples:"),_er=l(),f(cy.$$.fragment),uer=l(),ao=a("div"),f(fy.$$.fragment),ber=l(),Dpe=a("p"),ver=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Fer=l(),gn=a("p"),Ter=o("The model class to instantiate is selected based on the "),Gpe=a("code"),Mer=o("model_type"),Eer=o(` property of the config object (either
passed as an argument or loaded from `),Ope=a("code"),Cer=o("pretrained_model_name_or_path"),wer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=a("code"),Aer=o("pretrained_model_name_or_path"),yer=o(":"),Ler=l(),Xpe=a("ul"),I3=a("li"),zpe=a("strong"),xer=o("detr"),ker=o(" \u2014 "),lV=a("a"),Ser=o("DetrForSegmentation"),Rer=o(" (DETR model)"),Ber=l(),q3=a("p"),Per=o("The model is set in evaluation mode by default using "),Qpe=a("code"),$er=o("model.eval()"),Ier=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=a("code"),qer=o("model.train()"),Ner=l(),Hpe=a("p"),jer=o("Examples:"),Der=l(),f(my.$$.fragment),i$e=l(),pc=a("h2"),N3=a("a"),Upe=a("span"),f(gy.$$.fragment),Ger=l(),Jpe=a("span"),Oer=o("AutoModelForSemanticSegmentation"),d$e=l(),ur=a("div"),f(hy.$$.fragment),Ver=l(),_c=a("p"),Xer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iV=a("a"),zer=o("from_pretrained()"),Qer=o(" class method or the "),dV=a("a"),Wer=o("from_config()"),Her=o(` class
method.`),Uer=l(),py=a("p"),Jer=o("This class cannot be instantiated directly using "),Ype=a("code"),Yer=o("__init__()"),Ker=o(" (throws an error)."),Zer=l(),ft=a("div"),f(_y.$$.fragment),eor=l(),Kpe=a("p"),oor=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ror=l(),uc=a("p"),tor=o(`Note:
Loading a model from its configuration file does `),Zpe=a("strong"),aor=o("not"),nor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=a("a"),sor=o("from_pretrained()"),lor=o(" to load the model weights."),ior=l(),e_e=a("p"),dor=o("Examples:"),cor=l(),f(uy.$$.fragment),mor=l(),no=a("div"),f(by.$$.fragment),gor=l(),o_e=a("p"),hor=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),por=l(),hn=a("p"),_or=o("The model class to instantiate is selected based on the "),r_e=a("code"),uor=o("model_type"),bor=o(` property of the config object (either
passed as an argument or loaded from `),t_e=a("code"),vor=o("pretrained_model_name_or_path"),For=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=a("code"),Tor=o("pretrained_model_name_or_path"),Mor=o(":"),Eor=l(),pn=a("ul"),j3=a("li"),n_e=a("strong"),Cor=o("beit"),wor=o(" \u2014 "),fV=a("a"),Aor=o("BeitForSemanticSegmentation"),yor=o(" (BEiT model)"),Lor=l(),D3=a("li"),s_e=a("strong"),xor=o("data2vec-vision"),kor=o(" \u2014 "),mV=a("a"),Sor=o("Data2VecVisionForSemanticSegmentation"),Ror=o(" (Data2VecVision model)"),Bor=l(),G3=a("li"),l_e=a("strong"),Por=o("dpt"),$or=o(" \u2014 "),gV=a("a"),Ior=o("DPTForSemanticSegmentation"),qor=o(" (DPT model)"),Nor=l(),O3=a("li"),i_e=a("strong"),jor=o("segformer"),Dor=o(" \u2014 "),hV=a("a"),Gor=o("SegformerForSemanticSegmentation"),Oor=o(" (SegFormer model)"),Vor=l(),V3=a("p"),Xor=o("The model is set in evaluation mode by default using "),d_e=a("code"),zor=o("model.eval()"),Qor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c_e=a("code"),Wor=o("model.train()"),Hor=l(),f_e=a("p"),Uor=o("Examples:"),Jor=l(),f(vy.$$.fragment),c$e=l(),bc=a("h2"),X3=a("a"),m_e=a("span"),f(Fy.$$.fragment),Yor=l(),g_e=a("span"),Kor=o("AutoModelForInstanceSegmentation"),f$e=l(),br=a("div"),f(Ty.$$.fragment),Zor=l(),vc=a("p"),err=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pV=a("a"),orr=o("from_pretrained()"),rrr=o(" class method or the "),_V=a("a"),trr=o("from_config()"),arr=o(` class
method.`),nrr=l(),My=a("p"),srr=o("This class cannot be instantiated directly using "),h_e=a("code"),lrr=o("__init__()"),irr=o(" (throws an error)."),drr=l(),mt=a("div"),f(Ey.$$.fragment),crr=l(),p_e=a("p"),frr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),mrr=l(),Fc=a("p"),grr=o(`Note:
Loading a model from its configuration file does `),__e=a("strong"),hrr=o("not"),prr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=a("a"),_rr=o("from_pretrained()"),urr=o(" to load the model weights."),brr=l(),u_e=a("p"),vrr=o("Examples:"),Frr=l(),f(Cy.$$.fragment),Trr=l(),so=a("div"),f(wy.$$.fragment),Mrr=l(),b_e=a("p"),Err=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Crr=l(),_n=a("p"),wrr=o("The model class to instantiate is selected based on the "),v_e=a("code"),Arr=o("model_type"),yrr=o(` property of the config object (either
passed as an argument or loaded from `),F_e=a("code"),Lrr=o("pretrained_model_name_or_path"),xrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=a("code"),krr=o("pretrained_model_name_or_path"),Srr=o(":"),Rrr=l(),M_e=a("ul"),z3=a("li"),E_e=a("strong"),Brr=o("maskformer"),Prr=o(" \u2014 "),bV=a("a"),$rr=o("MaskFormerForInstanceSegmentation"),Irr=o(" (MaskFormer model)"),qrr=l(),Q3=a("p"),Nrr=o("The model is set in evaluation mode by default using "),C_e=a("code"),jrr=o("model.eval()"),Drr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=a("code"),Grr=o("model.train()"),Orr=l(),A_e=a("p"),Vrr=o("Examples:"),Xrr=l(),f(Ay.$$.fragment),m$e=l(),Tc=a("h2"),W3=a("a"),y_e=a("span"),f(yy.$$.fragment),zrr=l(),L_e=a("span"),Qrr=o("TFAutoModel"),g$e=l(),vr=a("div"),f(Ly.$$.fragment),Wrr=l(),Mc=a("p"),Hrr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vV=a("a"),Urr=o("from_pretrained()"),Jrr=o(" class method or the "),FV=a("a"),Yrr=o("from_config()"),Krr=o(` class
method.`),Zrr=l(),xy=a("p"),etr=o("This class cannot be instantiated directly using "),x_e=a("code"),otr=o("__init__()"),rtr=o(" (throws an error)."),ttr=l(),gt=a("div"),f(ky.$$.fragment),atr=l(),k_e=a("p"),ntr=o("Instantiates one of the base model classes of the library from a configuration."),str=l(),Ec=a("p"),ltr=o(`Note:
Loading a model from its configuration file does `),S_e=a("strong"),itr=o("not"),dtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=a("a"),ctr=o("from_pretrained()"),ftr=o(" to load the model weights."),mtr=l(),R_e=a("p"),gtr=o("Examples:"),htr=l(),f(Sy.$$.fragment),ptr=l(),po=a("div"),f(Ry.$$.fragment),_tr=l(),B_e=a("p"),utr=o("Instantiate one of the base model classes of the library from a pretrained model."),btr=l(),un=a("p"),vtr=o("The model class to instantiate is selected based on the "),P_e=a("code"),Ftr=o("model_type"),Ttr=o(` property of the config object (either
passed as an argument or loaded from `),$_e=a("code"),Mtr=o("pretrained_model_name_or_path"),Etr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=a("code"),Ctr=o("pretrained_model_name_or_path"),wtr=o(":"),Atr=l(),x=a("ul"),H3=a("li"),q_e=a("strong"),ytr=o("albert"),Ltr=o(" \u2014 "),MV=a("a"),xtr=o("TFAlbertModel"),ktr=o(" (ALBERT model)"),Str=l(),U3=a("li"),N_e=a("strong"),Rtr=o("bart"),Btr=o(" \u2014 "),EV=a("a"),Ptr=o("TFBartModel"),$tr=o(" (BART model)"),Itr=l(),J3=a("li"),j_e=a("strong"),qtr=o("bert"),Ntr=o(" \u2014 "),CV=a("a"),jtr=o("TFBertModel"),Dtr=o(" (BERT model)"),Gtr=l(),Y3=a("li"),D_e=a("strong"),Otr=o("blenderbot"),Vtr=o(" \u2014 "),wV=a("a"),Xtr=o("TFBlenderbotModel"),ztr=o(" (Blenderbot model)"),Qtr=l(),K3=a("li"),G_e=a("strong"),Wtr=o("blenderbot-small"),Htr=o(" \u2014 "),AV=a("a"),Utr=o("TFBlenderbotSmallModel"),Jtr=o(" (BlenderbotSmall model)"),Ytr=l(),Z3=a("li"),O_e=a("strong"),Ktr=o("camembert"),Ztr=o(" \u2014 "),yV=a("a"),ear=o("TFCamembertModel"),oar=o(" (CamemBERT model)"),rar=l(),e6=a("li"),V_e=a("strong"),tar=o("clip"),aar=o(" \u2014 "),LV=a("a"),nar=o("TFCLIPModel"),sar=o(" (CLIP model)"),lar=l(),o6=a("li"),X_e=a("strong"),iar=o("convbert"),dar=o(" \u2014 "),xV=a("a"),car=o("TFConvBertModel"),far=o(" (ConvBERT model)"),mar=l(),r6=a("li"),z_e=a("strong"),gar=o("convnext"),har=o(" \u2014 "),kV=a("a"),par=o("TFConvNextModel"),_ar=o(" (ConvNext model)"),uar=l(),t6=a("li"),Q_e=a("strong"),bar=o("ctrl"),Far=o(" \u2014 "),SV=a("a"),Tar=o("TFCTRLModel"),Mar=o(" (CTRL model)"),Ear=l(),a6=a("li"),W_e=a("strong"),Car=o("deberta"),war=o(" \u2014 "),RV=a("a"),Aar=o("TFDebertaModel"),yar=o(" (DeBERTa model)"),Lar=l(),n6=a("li"),H_e=a("strong"),xar=o("deberta-v2"),kar=o(" \u2014 "),BV=a("a"),Sar=o("TFDebertaV2Model"),Rar=o(" (DeBERTa-v2 model)"),Bar=l(),s6=a("li"),U_e=a("strong"),Par=o("distilbert"),$ar=o(" \u2014 "),PV=a("a"),Iar=o("TFDistilBertModel"),qar=o(" (DistilBERT model)"),Nar=l(),l6=a("li"),J_e=a("strong"),jar=o("dpr"),Dar=o(" \u2014 "),$V=a("a"),Gar=o("TFDPRQuestionEncoder"),Oar=o(" (DPR model)"),Var=l(),i6=a("li"),Y_e=a("strong"),Xar=o("electra"),zar=o(" \u2014 "),IV=a("a"),Qar=o("TFElectraModel"),War=o(" (ELECTRA model)"),Har=l(),d6=a("li"),K_e=a("strong"),Uar=o("flaubert"),Jar=o(" \u2014 "),qV=a("a"),Yar=o("TFFlaubertModel"),Kar=o(" (FlauBERT model)"),Zar=l(),Js=a("li"),Z_e=a("strong"),enr=o("funnel"),onr=o(" \u2014 "),NV=a("a"),rnr=o("TFFunnelModel"),tnr=o(" or "),jV=a("a"),anr=o("TFFunnelBaseModel"),nnr=o(" (Funnel Transformer model)"),snr=l(),c6=a("li"),eue=a("strong"),lnr=o("gpt2"),inr=o(" \u2014 "),DV=a("a"),dnr=o("TFGPT2Model"),cnr=o(" (OpenAI GPT-2 model)"),fnr=l(),f6=a("li"),oue=a("strong"),mnr=o("gptj"),gnr=o(" \u2014 "),GV=a("a"),hnr=o("TFGPTJModel"),pnr=o(" (GPT-J model)"),_nr=l(),m6=a("li"),rue=a("strong"),unr=o("hubert"),bnr=o(" \u2014 "),OV=a("a"),vnr=o("TFHubertModel"),Fnr=o(" (Hubert model)"),Tnr=l(),g6=a("li"),tue=a("strong"),Mnr=o("layoutlm"),Enr=o(" \u2014 "),VV=a("a"),Cnr=o("TFLayoutLMModel"),wnr=o(" (LayoutLM model)"),Anr=l(),h6=a("li"),aue=a("strong"),ynr=o("led"),Lnr=o(" \u2014 "),XV=a("a"),xnr=o("TFLEDModel"),knr=o(" (LED model)"),Snr=l(),p6=a("li"),nue=a("strong"),Rnr=o("longformer"),Bnr=o(" \u2014 "),zV=a("a"),Pnr=o("TFLongformerModel"),$nr=o(" (Longformer model)"),Inr=l(),_6=a("li"),sue=a("strong"),qnr=o("lxmert"),Nnr=o(" \u2014 "),QV=a("a"),jnr=o("TFLxmertModel"),Dnr=o(" (LXMERT model)"),Gnr=l(),u6=a("li"),lue=a("strong"),Onr=o("marian"),Vnr=o(" \u2014 "),WV=a("a"),Xnr=o("TFMarianModel"),znr=o(" (Marian model)"),Qnr=l(),b6=a("li"),iue=a("strong"),Wnr=o("mbart"),Hnr=o(" \u2014 "),HV=a("a"),Unr=o("TFMBartModel"),Jnr=o(" (mBART model)"),Ynr=l(),v6=a("li"),due=a("strong"),Knr=o("mobilebert"),Znr=o(" \u2014 "),UV=a("a"),esr=o("TFMobileBertModel"),osr=o(" (MobileBERT model)"),rsr=l(),F6=a("li"),cue=a("strong"),tsr=o("mpnet"),asr=o(" \u2014 "),JV=a("a"),nsr=o("TFMPNetModel"),ssr=o(" (MPNet model)"),lsr=l(),T6=a("li"),fue=a("strong"),isr=o("mt5"),dsr=o(" \u2014 "),YV=a("a"),csr=o("TFMT5Model"),fsr=o(" (mT5 model)"),msr=l(),M6=a("li"),mue=a("strong"),gsr=o("openai-gpt"),hsr=o(" \u2014 "),KV=a("a"),psr=o("TFOpenAIGPTModel"),_sr=o(" (OpenAI GPT model)"),usr=l(),E6=a("li"),gue=a("strong"),bsr=o("pegasus"),vsr=o(" \u2014 "),ZV=a("a"),Fsr=o("TFPegasusModel"),Tsr=o(" (Pegasus model)"),Msr=l(),C6=a("li"),hue=a("strong"),Esr=o("rembert"),Csr=o(" \u2014 "),eX=a("a"),wsr=o("TFRemBertModel"),Asr=o(" (RemBERT model)"),ysr=l(),w6=a("li"),pue=a("strong"),Lsr=o("roberta"),xsr=o(" \u2014 "),oX=a("a"),ksr=o("TFRobertaModel"),Ssr=o(" (RoBERTa model)"),Rsr=l(),A6=a("li"),_ue=a("strong"),Bsr=o("roformer"),Psr=o(" \u2014 "),rX=a("a"),$sr=o("TFRoFormerModel"),Isr=o(" (RoFormer model)"),qsr=l(),y6=a("li"),uue=a("strong"),Nsr=o("speech_to_text"),jsr=o(" \u2014 "),tX=a("a"),Dsr=o("TFSpeech2TextModel"),Gsr=o(" (Speech2Text model)"),Osr=l(),L6=a("li"),bue=a("strong"),Vsr=o("t5"),Xsr=o(" \u2014 "),aX=a("a"),zsr=o("TFT5Model"),Qsr=o(" (T5 model)"),Wsr=l(),x6=a("li"),vue=a("strong"),Hsr=o("tapas"),Usr=o(" \u2014 "),nX=a("a"),Jsr=o("TFTapasModel"),Ysr=o(" (TAPAS model)"),Ksr=l(),k6=a("li"),Fue=a("strong"),Zsr=o("transfo-xl"),elr=o(" \u2014 "),sX=a("a"),olr=o("TFTransfoXLModel"),rlr=o(" (Transformer-XL model)"),tlr=l(),S6=a("li"),Tue=a("strong"),alr=o("vit"),nlr=o(" \u2014 "),lX=a("a"),slr=o("TFViTModel"),llr=o(" (ViT model)"),ilr=l(),R6=a("li"),Mue=a("strong"),dlr=o("vit_mae"),clr=o(" \u2014 "),iX=a("a"),flr=o("TFViTMAEModel"),mlr=o(" (ViTMAE model)"),glr=l(),B6=a("li"),Eue=a("strong"),hlr=o("wav2vec2"),plr=o(" \u2014 "),dX=a("a"),_lr=o("TFWav2Vec2Model"),ulr=o(" (Wav2Vec2 model)"),blr=l(),P6=a("li"),Cue=a("strong"),vlr=o("xglm"),Flr=o(" \u2014 "),cX=a("a"),Tlr=o("TFXGLMModel"),Mlr=o(" (XGLM model)"),Elr=l(),$6=a("li"),wue=a("strong"),Clr=o("xlm"),wlr=o(" \u2014 "),fX=a("a"),Alr=o("TFXLMModel"),ylr=o(" (XLM model)"),Llr=l(),I6=a("li"),Aue=a("strong"),xlr=o("xlm-roberta"),klr=o(" \u2014 "),mX=a("a"),Slr=o("TFXLMRobertaModel"),Rlr=o(" (XLM-RoBERTa model)"),Blr=l(),q6=a("li"),yue=a("strong"),Plr=o("xlnet"),$lr=o(" \u2014 "),gX=a("a"),Ilr=o("TFXLNetModel"),qlr=o(" (XLNet model)"),Nlr=l(),Lue=a("p"),jlr=o("Examples:"),Dlr=l(),f(By.$$.fragment),h$e=l(),Cc=a("h2"),N6=a("a"),xue=a("span"),f(Py.$$.fragment),Glr=l(),kue=a("span"),Olr=o("TFAutoModelForPreTraining"),p$e=l(),Fr=a("div"),f($y.$$.fragment),Vlr=l(),wc=a("p"),Xlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hX=a("a"),zlr=o("from_pretrained()"),Qlr=o(" class method or the "),pX=a("a"),Wlr=o("from_config()"),Hlr=o(` class
method.`),Ulr=l(),Iy=a("p"),Jlr=o("This class cannot be instantiated directly using "),Sue=a("code"),Ylr=o("__init__()"),Klr=o(" (throws an error)."),Zlr=l(),ht=a("div"),f(qy.$$.fragment),eir=l(),Rue=a("p"),oir=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rir=l(),Ac=a("p"),tir=o(`Note:
Loading a model from its configuration file does `),Bue=a("strong"),air=o("not"),nir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=a("a"),sir=o("from_pretrained()"),lir=o(" to load the model weights."),iir=l(),Pue=a("p"),dir=o("Examples:"),cir=l(),f(Ny.$$.fragment),fir=l(),_o=a("div"),f(jy.$$.fragment),mir=l(),$ue=a("p"),gir=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hir=l(),bn=a("p"),pir=o("The model class to instantiate is selected based on the "),Iue=a("code"),_ir=o("model_type"),uir=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),bir=o("pretrained_model_name_or_path"),vir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=a("code"),Fir=o("pretrained_model_name_or_path"),Tir=o(":"),Mir=l(),U=a("ul"),j6=a("li"),jue=a("strong"),Eir=o("albert"),Cir=o(" \u2014 "),uX=a("a"),wir=o("TFAlbertForPreTraining"),Air=o(" (ALBERT model)"),yir=l(),D6=a("li"),Due=a("strong"),Lir=o("bart"),xir=o(" \u2014 "),bX=a("a"),kir=o("TFBartForConditionalGeneration"),Sir=o(" (BART model)"),Rir=l(),G6=a("li"),Gue=a("strong"),Bir=o("bert"),Pir=o(" \u2014 "),vX=a("a"),$ir=o("TFBertForPreTraining"),Iir=o(" (BERT model)"),qir=l(),O6=a("li"),Oue=a("strong"),Nir=o("camembert"),jir=o(" \u2014 "),FX=a("a"),Dir=o("TFCamembertForMaskedLM"),Gir=o(" (CamemBERT model)"),Oir=l(),V6=a("li"),Vue=a("strong"),Vir=o("ctrl"),Xir=o(" \u2014 "),TX=a("a"),zir=o("TFCTRLLMHeadModel"),Qir=o(" (CTRL model)"),Wir=l(),X6=a("li"),Xue=a("strong"),Hir=o("distilbert"),Uir=o(" \u2014 "),MX=a("a"),Jir=o("TFDistilBertForMaskedLM"),Yir=o(" (DistilBERT model)"),Kir=l(),z6=a("li"),zue=a("strong"),Zir=o("electra"),edr=o(" \u2014 "),EX=a("a"),odr=o("TFElectraForPreTraining"),rdr=o(" (ELECTRA model)"),tdr=l(),Q6=a("li"),Que=a("strong"),adr=o("flaubert"),ndr=o(" \u2014 "),CX=a("a"),sdr=o("TFFlaubertWithLMHeadModel"),ldr=o(" (FlauBERT model)"),idr=l(),W6=a("li"),Wue=a("strong"),ddr=o("funnel"),cdr=o(" \u2014 "),wX=a("a"),fdr=o("TFFunnelForPreTraining"),mdr=o(" (Funnel Transformer model)"),gdr=l(),H6=a("li"),Hue=a("strong"),hdr=o("gpt2"),pdr=o(" \u2014 "),AX=a("a"),_dr=o("TFGPT2LMHeadModel"),udr=o(" (OpenAI GPT-2 model)"),bdr=l(),U6=a("li"),Uue=a("strong"),vdr=o("layoutlm"),Fdr=o(" \u2014 "),yX=a("a"),Tdr=o("TFLayoutLMForMaskedLM"),Mdr=o(" (LayoutLM model)"),Edr=l(),J6=a("li"),Jue=a("strong"),Cdr=o("lxmert"),wdr=o(" \u2014 "),LX=a("a"),Adr=o("TFLxmertForPreTraining"),ydr=o(" (LXMERT model)"),Ldr=l(),Y6=a("li"),Yue=a("strong"),xdr=o("mobilebert"),kdr=o(" \u2014 "),xX=a("a"),Sdr=o("TFMobileBertForPreTraining"),Rdr=o(" (MobileBERT model)"),Bdr=l(),K6=a("li"),Kue=a("strong"),Pdr=o("mpnet"),$dr=o(" \u2014 "),kX=a("a"),Idr=o("TFMPNetForMaskedLM"),qdr=o(" (MPNet model)"),Ndr=l(),Z6=a("li"),Zue=a("strong"),jdr=o("openai-gpt"),Ddr=o(" \u2014 "),SX=a("a"),Gdr=o("TFOpenAIGPTLMHeadModel"),Odr=o(" (OpenAI GPT model)"),Vdr=l(),ev=a("li"),e1e=a("strong"),Xdr=o("roberta"),zdr=o(" \u2014 "),RX=a("a"),Qdr=o("TFRobertaForMaskedLM"),Wdr=o(" (RoBERTa model)"),Hdr=l(),ov=a("li"),o1e=a("strong"),Udr=o("t5"),Jdr=o(" \u2014 "),BX=a("a"),Ydr=o("TFT5ForConditionalGeneration"),Kdr=o(" (T5 model)"),Zdr=l(),rv=a("li"),r1e=a("strong"),ecr=o("tapas"),ocr=o(" \u2014 "),PX=a("a"),rcr=o("TFTapasForMaskedLM"),tcr=o(" (TAPAS model)"),acr=l(),tv=a("li"),t1e=a("strong"),ncr=o("transfo-xl"),scr=o(" \u2014 "),$X=a("a"),lcr=o("TFTransfoXLLMHeadModel"),icr=o(" (Transformer-XL model)"),dcr=l(),av=a("li"),a1e=a("strong"),ccr=o("vit_mae"),fcr=o(" \u2014 "),IX=a("a"),mcr=o("TFViTMAEForPreTraining"),gcr=o(" (ViTMAE model)"),hcr=l(),nv=a("li"),n1e=a("strong"),pcr=o("xlm"),_cr=o(" \u2014 "),qX=a("a"),ucr=o("TFXLMWithLMHeadModel"),bcr=o(" (XLM model)"),vcr=l(),sv=a("li"),s1e=a("strong"),Fcr=o("xlm-roberta"),Tcr=o(" \u2014 "),NX=a("a"),Mcr=o("TFXLMRobertaForMaskedLM"),Ecr=o(" (XLM-RoBERTa model)"),Ccr=l(),lv=a("li"),l1e=a("strong"),wcr=o("xlnet"),Acr=o(" \u2014 "),jX=a("a"),ycr=o("TFXLNetLMHeadModel"),Lcr=o(" (XLNet model)"),xcr=l(),i1e=a("p"),kcr=o("Examples:"),Scr=l(),f(Dy.$$.fragment),_$e=l(),yc=a("h2"),iv=a("a"),d1e=a("span"),f(Gy.$$.fragment),Rcr=l(),c1e=a("span"),Bcr=o("TFAutoModelForCausalLM"),u$e=l(),Tr=a("div"),f(Oy.$$.fragment),Pcr=l(),Lc=a("p"),$cr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DX=a("a"),Icr=o("from_pretrained()"),qcr=o(" class method or the "),GX=a("a"),Ncr=o("from_config()"),jcr=o(` class
method.`),Dcr=l(),Vy=a("p"),Gcr=o("This class cannot be instantiated directly using "),f1e=a("code"),Ocr=o("__init__()"),Vcr=o(" (throws an error)."),Xcr=l(),pt=a("div"),f(Xy.$$.fragment),zcr=l(),m1e=a("p"),Qcr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Wcr=l(),xc=a("p"),Hcr=o(`Note:
Loading a model from its configuration file does `),g1e=a("strong"),Ucr=o("not"),Jcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),Ycr=o("from_pretrained()"),Kcr=o(" to load the model weights."),Zcr=l(),h1e=a("p"),efr=o("Examples:"),ofr=l(),f(zy.$$.fragment),rfr=l(),uo=a("div"),f(Qy.$$.fragment),tfr=l(),p1e=a("p"),afr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nfr=l(),vn=a("p"),sfr=o("The model class to instantiate is selected based on the "),_1e=a("code"),lfr=o("model_type"),ifr=o(` property of the config object (either
passed as an argument or loaded from `),u1e=a("code"),dfr=o("pretrained_model_name_or_path"),cfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=a("code"),ffr=o("pretrained_model_name_or_path"),mfr=o(":"),gfr=l(),fe=a("ul"),dv=a("li"),v1e=a("strong"),hfr=o("bert"),pfr=o(" \u2014 "),VX=a("a"),_fr=o("TFBertLMHeadModel"),ufr=o(" (BERT model)"),bfr=l(),cv=a("li"),F1e=a("strong"),vfr=o("camembert"),Ffr=o(" \u2014 "),XX=a("a"),Tfr=o("TFCamembertForCausalLM"),Mfr=o(" (CamemBERT model)"),Efr=l(),fv=a("li"),T1e=a("strong"),Cfr=o("ctrl"),wfr=o(" \u2014 "),zX=a("a"),Afr=o("TFCTRLLMHeadModel"),yfr=o(" (CTRL model)"),Lfr=l(),mv=a("li"),M1e=a("strong"),xfr=o("gpt2"),kfr=o(" \u2014 "),QX=a("a"),Sfr=o("TFGPT2LMHeadModel"),Rfr=o(" (OpenAI GPT-2 model)"),Bfr=l(),gv=a("li"),E1e=a("strong"),Pfr=o("gptj"),$fr=o(" \u2014 "),WX=a("a"),Ifr=o("TFGPTJForCausalLM"),qfr=o(" (GPT-J model)"),Nfr=l(),hv=a("li"),C1e=a("strong"),jfr=o("openai-gpt"),Dfr=o(" \u2014 "),HX=a("a"),Gfr=o("TFOpenAIGPTLMHeadModel"),Ofr=o(" (OpenAI GPT model)"),Vfr=l(),pv=a("li"),w1e=a("strong"),Xfr=o("rembert"),zfr=o(" \u2014 "),UX=a("a"),Qfr=o("TFRemBertForCausalLM"),Wfr=o(" (RemBERT model)"),Hfr=l(),_v=a("li"),A1e=a("strong"),Ufr=o("roberta"),Jfr=o(" \u2014 "),JX=a("a"),Yfr=o("TFRobertaForCausalLM"),Kfr=o(" (RoBERTa model)"),Zfr=l(),uv=a("li"),y1e=a("strong"),emr=o("roformer"),omr=o(" \u2014 "),YX=a("a"),rmr=o("TFRoFormerForCausalLM"),tmr=o(" (RoFormer model)"),amr=l(),bv=a("li"),L1e=a("strong"),nmr=o("transfo-xl"),smr=o(" \u2014 "),KX=a("a"),lmr=o("TFTransfoXLLMHeadModel"),imr=o(" (Transformer-XL model)"),dmr=l(),vv=a("li"),x1e=a("strong"),cmr=o("xglm"),fmr=o(" \u2014 "),ZX=a("a"),mmr=o("TFXGLMForCausalLM"),gmr=o(" (XGLM model)"),hmr=l(),Fv=a("li"),k1e=a("strong"),pmr=o("xlm"),_mr=o(" \u2014 "),ez=a("a"),umr=o("TFXLMWithLMHeadModel"),bmr=o(" (XLM model)"),vmr=l(),Tv=a("li"),S1e=a("strong"),Fmr=o("xlnet"),Tmr=o(" \u2014 "),oz=a("a"),Mmr=o("TFXLNetLMHeadModel"),Emr=o(" (XLNet model)"),Cmr=l(),R1e=a("p"),wmr=o("Examples:"),Amr=l(),f(Wy.$$.fragment),b$e=l(),kc=a("h2"),Mv=a("a"),B1e=a("span"),f(Hy.$$.fragment),ymr=l(),P1e=a("span"),Lmr=o("TFAutoModelForImageClassification"),v$e=l(),Mr=a("div"),f(Uy.$$.fragment),xmr=l(),Sc=a("p"),kmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rz=a("a"),Smr=o("from_pretrained()"),Rmr=o(" class method or the "),tz=a("a"),Bmr=o("from_config()"),Pmr=o(` class
method.`),$mr=l(),Jy=a("p"),Imr=o("This class cannot be instantiated directly using "),$1e=a("code"),qmr=o("__init__()"),Nmr=o(" (throws an error)."),jmr=l(),_t=a("div"),f(Yy.$$.fragment),Dmr=l(),I1e=a("p"),Gmr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Omr=l(),Rc=a("p"),Vmr=o(`Note:
Loading a model from its configuration file does `),q1e=a("strong"),Xmr=o("not"),zmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),az=a("a"),Qmr=o("from_pretrained()"),Wmr=o(" to load the model weights."),Hmr=l(),N1e=a("p"),Umr=o("Examples:"),Jmr=l(),f(Ky.$$.fragment),Ymr=l(),bo=a("div"),f(Zy.$$.fragment),Kmr=l(),j1e=a("p"),Zmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),egr=l(),Fn=a("p"),ogr=o("The model class to instantiate is selected based on the "),D1e=a("code"),rgr=o("model_type"),tgr=o(` property of the config object (either
passed as an argument or loaded from `),G1e=a("code"),agr=o("pretrained_model_name_or_path"),ngr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=a("code"),sgr=o("pretrained_model_name_or_path"),lgr=o(":"),igr=l(),e8=a("ul"),Ev=a("li"),V1e=a("strong"),dgr=o("convnext"),cgr=o(" \u2014 "),nz=a("a"),fgr=o("TFConvNextForImageClassification"),mgr=o(" (ConvNext model)"),ggr=l(),Cv=a("li"),X1e=a("strong"),hgr=o("vit"),pgr=o(" \u2014 "),sz=a("a"),_gr=o("TFViTForImageClassification"),ugr=o(" (ViT model)"),bgr=l(),z1e=a("p"),vgr=o("Examples:"),Fgr=l(),f(o8.$$.fragment),F$e=l(),Bc=a("h2"),wv=a("a"),Q1e=a("span"),f(r8.$$.fragment),Tgr=l(),W1e=a("span"),Mgr=o("TFAutoModelForMaskedLM"),T$e=l(),Er=a("div"),f(t8.$$.fragment),Egr=l(),Pc=a("p"),Cgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lz=a("a"),wgr=o("from_pretrained()"),Agr=o(" class method or the "),iz=a("a"),ygr=o("from_config()"),Lgr=o(` class
method.`),xgr=l(),a8=a("p"),kgr=o("This class cannot be instantiated directly using "),H1e=a("code"),Sgr=o("__init__()"),Rgr=o(" (throws an error)."),Bgr=l(),ut=a("div"),f(n8.$$.fragment),Pgr=l(),U1e=a("p"),$gr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Igr=l(),$c=a("p"),qgr=o(`Note:
Loading a model from its configuration file does `),J1e=a("strong"),Ngr=o("not"),jgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=a("a"),Dgr=o("from_pretrained()"),Ggr=o(" to load the model weights."),Ogr=l(),Y1e=a("p"),Vgr=o("Examples:"),Xgr=l(),f(s8.$$.fragment),zgr=l(),vo=a("div"),f(l8.$$.fragment),Qgr=l(),K1e=a("p"),Wgr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Hgr=l(),Tn=a("p"),Ugr=o("The model class to instantiate is selected based on the "),Z1e=a("code"),Jgr=o("model_type"),Ygr=o(` property of the config object (either
passed as an argument or loaded from `),e4e=a("code"),Kgr=o("pretrained_model_name_or_path"),Zgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=a("code"),ehr=o("pretrained_model_name_or_path"),ohr=o(":"),rhr=l(),K=a("ul"),Av=a("li"),r4e=a("strong"),thr=o("albert"),ahr=o(" \u2014 "),cz=a("a"),nhr=o("TFAlbertForMaskedLM"),shr=o(" (ALBERT model)"),lhr=l(),yv=a("li"),t4e=a("strong"),ihr=o("bert"),dhr=o(" \u2014 "),fz=a("a"),chr=o("TFBertForMaskedLM"),fhr=o(" (BERT model)"),mhr=l(),Lv=a("li"),a4e=a("strong"),ghr=o("camembert"),hhr=o(" \u2014 "),mz=a("a"),phr=o("TFCamembertForMaskedLM"),_hr=o(" (CamemBERT model)"),uhr=l(),xv=a("li"),n4e=a("strong"),bhr=o("convbert"),vhr=o(" \u2014 "),gz=a("a"),Fhr=o("TFConvBertForMaskedLM"),Thr=o(" (ConvBERT model)"),Mhr=l(),kv=a("li"),s4e=a("strong"),Ehr=o("deberta"),Chr=o(" \u2014 "),hz=a("a"),whr=o("TFDebertaForMaskedLM"),Ahr=o(" (DeBERTa model)"),yhr=l(),Sv=a("li"),l4e=a("strong"),Lhr=o("deberta-v2"),xhr=o(" \u2014 "),pz=a("a"),khr=o("TFDebertaV2ForMaskedLM"),Shr=o(" (DeBERTa-v2 model)"),Rhr=l(),Rv=a("li"),i4e=a("strong"),Bhr=o("distilbert"),Phr=o(" \u2014 "),_z=a("a"),$hr=o("TFDistilBertForMaskedLM"),Ihr=o(" (DistilBERT model)"),qhr=l(),Bv=a("li"),d4e=a("strong"),Nhr=o("electra"),jhr=o(" \u2014 "),uz=a("a"),Dhr=o("TFElectraForMaskedLM"),Ghr=o(" (ELECTRA model)"),Ohr=l(),Pv=a("li"),c4e=a("strong"),Vhr=o("flaubert"),Xhr=o(" \u2014 "),bz=a("a"),zhr=o("TFFlaubertWithLMHeadModel"),Qhr=o(" (FlauBERT model)"),Whr=l(),$v=a("li"),f4e=a("strong"),Hhr=o("funnel"),Uhr=o(" \u2014 "),vz=a("a"),Jhr=o("TFFunnelForMaskedLM"),Yhr=o(" (Funnel Transformer model)"),Khr=l(),Iv=a("li"),m4e=a("strong"),Zhr=o("layoutlm"),epr=o(" \u2014 "),Fz=a("a"),opr=o("TFLayoutLMForMaskedLM"),rpr=o(" (LayoutLM model)"),tpr=l(),qv=a("li"),g4e=a("strong"),apr=o("longformer"),npr=o(" \u2014 "),Tz=a("a"),spr=o("TFLongformerForMaskedLM"),lpr=o(" (Longformer model)"),ipr=l(),Nv=a("li"),h4e=a("strong"),dpr=o("mobilebert"),cpr=o(" \u2014 "),Mz=a("a"),fpr=o("TFMobileBertForMaskedLM"),mpr=o(" (MobileBERT model)"),gpr=l(),jv=a("li"),p4e=a("strong"),hpr=o("mpnet"),ppr=o(" \u2014 "),Ez=a("a"),_pr=o("TFMPNetForMaskedLM"),upr=o(" (MPNet model)"),bpr=l(),Dv=a("li"),_4e=a("strong"),vpr=o("rembert"),Fpr=o(" \u2014 "),Cz=a("a"),Tpr=o("TFRemBertForMaskedLM"),Mpr=o(" (RemBERT model)"),Epr=l(),Gv=a("li"),u4e=a("strong"),Cpr=o("roberta"),wpr=o(" \u2014 "),wz=a("a"),Apr=o("TFRobertaForMaskedLM"),ypr=o(" (RoBERTa model)"),Lpr=l(),Ov=a("li"),b4e=a("strong"),xpr=o("roformer"),kpr=o(" \u2014 "),Az=a("a"),Spr=o("TFRoFormerForMaskedLM"),Rpr=o(" (RoFormer model)"),Bpr=l(),Vv=a("li"),v4e=a("strong"),Ppr=o("tapas"),$pr=o(" \u2014 "),yz=a("a"),Ipr=o("TFTapasForMaskedLM"),qpr=o(" (TAPAS model)"),Npr=l(),Xv=a("li"),F4e=a("strong"),jpr=o("xlm"),Dpr=o(" \u2014 "),Lz=a("a"),Gpr=o("TFXLMWithLMHeadModel"),Opr=o(" (XLM model)"),Vpr=l(),zv=a("li"),T4e=a("strong"),Xpr=o("xlm-roberta"),zpr=o(" \u2014 "),xz=a("a"),Qpr=o("TFXLMRobertaForMaskedLM"),Wpr=o(" (XLM-RoBERTa model)"),Hpr=l(),M4e=a("p"),Upr=o("Examples:"),Jpr=l(),f(i8.$$.fragment),M$e=l(),Ic=a("h2"),Qv=a("a"),E4e=a("span"),f(d8.$$.fragment),Ypr=l(),C4e=a("span"),Kpr=o("TFAutoModelForSeq2SeqLM"),E$e=l(),Cr=a("div"),f(c8.$$.fragment),Zpr=l(),qc=a("p"),e_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kz=a("a"),o_r=o("from_pretrained()"),r_r=o(" class method or the "),Sz=a("a"),t_r=o("from_config()"),a_r=o(` class
method.`),n_r=l(),f8=a("p"),s_r=o("This class cannot be instantiated directly using "),w4e=a("code"),l_r=o("__init__()"),i_r=o(" (throws an error)."),d_r=l(),bt=a("div"),f(m8.$$.fragment),c_r=l(),A4e=a("p"),f_r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),m_r=l(),Nc=a("p"),g_r=o(`Note:
Loading a model from its configuration file does `),y4e=a("strong"),h_r=o("not"),p_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=a("a"),__r=o("from_pretrained()"),u_r=o(" to load the model weights."),b_r=l(),L4e=a("p"),v_r=o("Examples:"),F_r=l(),f(g8.$$.fragment),T_r=l(),Fo=a("div"),f(h8.$$.fragment),M_r=l(),x4e=a("p"),E_r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),C_r=l(),Mn=a("p"),w_r=o("The model class to instantiate is selected based on the "),k4e=a("code"),A_r=o("model_type"),y_r=o(` property of the config object (either
passed as an argument or loaded from `),S4e=a("code"),L_r=o("pretrained_model_name_or_path"),x_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R4e=a("code"),k_r=o("pretrained_model_name_or_path"),S_r=o(":"),R_r=l(),Fe=a("ul"),Wv=a("li"),B4e=a("strong"),B_r=o("bart"),P_r=o(" \u2014 "),Bz=a("a"),$_r=o("TFBartForConditionalGeneration"),I_r=o(" (BART model)"),q_r=l(),Hv=a("li"),P4e=a("strong"),N_r=o("blenderbot"),j_r=o(" \u2014 "),Pz=a("a"),D_r=o("TFBlenderbotForConditionalGeneration"),G_r=o(" (Blenderbot model)"),O_r=l(),Uv=a("li"),$4e=a("strong"),V_r=o("blenderbot-small"),X_r=o(" \u2014 "),$z=a("a"),z_r=o("TFBlenderbotSmallForConditionalGeneration"),Q_r=o(" (BlenderbotSmall model)"),W_r=l(),Jv=a("li"),I4e=a("strong"),H_r=o("encoder-decoder"),U_r=o(" \u2014 "),Iz=a("a"),J_r=o("TFEncoderDecoderModel"),Y_r=o(" (Encoder decoder model)"),K_r=l(),Yv=a("li"),q4e=a("strong"),Z_r=o("led"),eur=o(" \u2014 "),qz=a("a"),our=o("TFLEDForConditionalGeneration"),rur=o(" (LED model)"),tur=l(),Kv=a("li"),N4e=a("strong"),aur=o("marian"),nur=o(" \u2014 "),Nz=a("a"),sur=o("TFMarianMTModel"),lur=o(" (Marian model)"),iur=l(),Zv=a("li"),j4e=a("strong"),dur=o("mbart"),cur=o(" \u2014 "),jz=a("a"),fur=o("TFMBartForConditionalGeneration"),mur=o(" (mBART model)"),gur=l(),eF=a("li"),D4e=a("strong"),hur=o("mt5"),pur=o(" \u2014 "),Dz=a("a"),_ur=o("TFMT5ForConditionalGeneration"),uur=o(" (mT5 model)"),bur=l(),oF=a("li"),G4e=a("strong"),vur=o("pegasus"),Fur=o(" \u2014 "),Gz=a("a"),Tur=o("TFPegasusForConditionalGeneration"),Mur=o(" (Pegasus model)"),Eur=l(),rF=a("li"),O4e=a("strong"),Cur=o("t5"),wur=o(" \u2014 "),Oz=a("a"),Aur=o("TFT5ForConditionalGeneration"),yur=o(" (T5 model)"),Lur=l(),V4e=a("p"),xur=o("Examples:"),kur=l(),f(p8.$$.fragment),C$e=l(),jc=a("h2"),tF=a("a"),X4e=a("span"),f(_8.$$.fragment),Sur=l(),z4e=a("span"),Rur=o("TFAutoModelForSequenceClassification"),w$e=l(),wr=a("div"),f(u8.$$.fragment),Bur=l(),Dc=a("p"),Pur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Vz=a("a"),$ur=o("from_pretrained()"),Iur=o(" class method or the "),Xz=a("a"),qur=o("from_config()"),Nur=o(` class
method.`),jur=l(),b8=a("p"),Dur=o("This class cannot be instantiated directly using "),Q4e=a("code"),Gur=o("__init__()"),Our=o(" (throws an error)."),Vur=l(),vt=a("div"),f(v8.$$.fragment),Xur=l(),W4e=a("p"),zur=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Qur=l(),Gc=a("p"),Wur=o(`Note:
Loading a model from its configuration file does `),H4e=a("strong"),Hur=o("not"),Uur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=a("a"),Jur=o("from_pretrained()"),Yur=o(" to load the model weights."),Kur=l(),U4e=a("p"),Zur=o("Examples:"),e1r=l(),f(F8.$$.fragment),o1r=l(),To=a("div"),f(T8.$$.fragment),r1r=l(),J4e=a("p"),t1r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),a1r=l(),En=a("p"),n1r=o("The model class to instantiate is selected based on the "),Y4e=a("code"),s1r=o("model_type"),l1r=o(` property of the config object (either
passed as an argument or loaded from `),K4e=a("code"),i1r=o("pretrained_model_name_or_path"),d1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z4e=a("code"),c1r=o("pretrained_model_name_or_path"),f1r=o(":"),m1r=l(),V=a("ul"),aF=a("li"),ebe=a("strong"),g1r=o("albert"),h1r=o(" \u2014 "),Qz=a("a"),p1r=o("TFAlbertForSequenceClassification"),_1r=o(" (ALBERT model)"),u1r=l(),nF=a("li"),obe=a("strong"),b1r=o("bert"),v1r=o(" \u2014 "),Wz=a("a"),F1r=o("TFBertForSequenceClassification"),T1r=o(" (BERT model)"),M1r=l(),sF=a("li"),rbe=a("strong"),E1r=o("camembert"),C1r=o(" \u2014 "),Hz=a("a"),w1r=o("TFCamembertForSequenceClassification"),A1r=o(" (CamemBERT model)"),y1r=l(),lF=a("li"),tbe=a("strong"),L1r=o("convbert"),x1r=o(" \u2014 "),Uz=a("a"),k1r=o("TFConvBertForSequenceClassification"),S1r=o(" (ConvBERT model)"),R1r=l(),iF=a("li"),abe=a("strong"),B1r=o("ctrl"),P1r=o(" \u2014 "),Jz=a("a"),$1r=o("TFCTRLForSequenceClassification"),I1r=o(" (CTRL model)"),q1r=l(),dF=a("li"),nbe=a("strong"),N1r=o("deberta"),j1r=o(" \u2014 "),Yz=a("a"),D1r=o("TFDebertaForSequenceClassification"),G1r=o(" (DeBERTa model)"),O1r=l(),cF=a("li"),sbe=a("strong"),V1r=o("deberta-v2"),X1r=o(" \u2014 "),Kz=a("a"),z1r=o("TFDebertaV2ForSequenceClassification"),Q1r=o(" (DeBERTa-v2 model)"),W1r=l(),fF=a("li"),lbe=a("strong"),H1r=o("distilbert"),U1r=o(" \u2014 "),Zz=a("a"),J1r=o("TFDistilBertForSequenceClassification"),Y1r=o(" (DistilBERT model)"),K1r=l(),mF=a("li"),ibe=a("strong"),Z1r=o("electra"),e4r=o(" \u2014 "),eQ=a("a"),o4r=o("TFElectraForSequenceClassification"),r4r=o(" (ELECTRA model)"),t4r=l(),gF=a("li"),dbe=a("strong"),a4r=o("flaubert"),n4r=o(" \u2014 "),oQ=a("a"),s4r=o("TFFlaubertForSequenceClassification"),l4r=o(" (FlauBERT model)"),i4r=l(),hF=a("li"),cbe=a("strong"),d4r=o("funnel"),c4r=o(" \u2014 "),rQ=a("a"),f4r=o("TFFunnelForSequenceClassification"),m4r=o(" (Funnel Transformer model)"),g4r=l(),pF=a("li"),fbe=a("strong"),h4r=o("gpt2"),p4r=o(" \u2014 "),tQ=a("a"),_4r=o("TFGPT2ForSequenceClassification"),u4r=o(" (OpenAI GPT-2 model)"),b4r=l(),_F=a("li"),mbe=a("strong"),v4r=o("gptj"),F4r=o(" \u2014 "),aQ=a("a"),T4r=o("TFGPTJForSequenceClassification"),M4r=o(" (GPT-J model)"),E4r=l(),uF=a("li"),gbe=a("strong"),C4r=o("layoutlm"),w4r=o(" \u2014 "),nQ=a("a"),A4r=o("TFLayoutLMForSequenceClassification"),y4r=o(" (LayoutLM model)"),L4r=l(),bF=a("li"),hbe=a("strong"),x4r=o("longformer"),k4r=o(" \u2014 "),sQ=a("a"),S4r=o("TFLongformerForSequenceClassification"),R4r=o(" (Longformer model)"),B4r=l(),vF=a("li"),pbe=a("strong"),P4r=o("mobilebert"),$4r=o(" \u2014 "),lQ=a("a"),I4r=o("TFMobileBertForSequenceClassification"),q4r=o(" (MobileBERT model)"),N4r=l(),FF=a("li"),_be=a("strong"),j4r=o("mpnet"),D4r=o(" \u2014 "),iQ=a("a"),G4r=o("TFMPNetForSequenceClassification"),O4r=o(" (MPNet model)"),V4r=l(),TF=a("li"),ube=a("strong"),X4r=o("openai-gpt"),z4r=o(" \u2014 "),dQ=a("a"),Q4r=o("TFOpenAIGPTForSequenceClassification"),W4r=o(" (OpenAI GPT model)"),H4r=l(),MF=a("li"),bbe=a("strong"),U4r=o("rembert"),J4r=o(" \u2014 "),cQ=a("a"),Y4r=o("TFRemBertForSequenceClassification"),K4r=o(" (RemBERT model)"),Z4r=l(),EF=a("li"),vbe=a("strong"),ebr=o("roberta"),obr=o(" \u2014 "),fQ=a("a"),rbr=o("TFRobertaForSequenceClassification"),tbr=o(" (RoBERTa model)"),abr=l(),CF=a("li"),Fbe=a("strong"),nbr=o("roformer"),sbr=o(" \u2014 "),mQ=a("a"),lbr=o("TFRoFormerForSequenceClassification"),ibr=o(" (RoFormer model)"),dbr=l(),wF=a("li"),Tbe=a("strong"),cbr=o("tapas"),fbr=o(" \u2014 "),gQ=a("a"),mbr=o("TFTapasForSequenceClassification"),gbr=o(" (TAPAS model)"),hbr=l(),AF=a("li"),Mbe=a("strong"),pbr=o("transfo-xl"),_br=o(" \u2014 "),hQ=a("a"),ubr=o("TFTransfoXLForSequenceClassification"),bbr=o(" (Transformer-XL model)"),vbr=l(),yF=a("li"),Ebe=a("strong"),Fbr=o("xlm"),Tbr=o(" \u2014 "),pQ=a("a"),Mbr=o("TFXLMForSequenceClassification"),Ebr=o(" (XLM model)"),Cbr=l(),LF=a("li"),Cbe=a("strong"),wbr=o("xlm-roberta"),Abr=o(" \u2014 "),_Q=a("a"),ybr=o("TFXLMRobertaForSequenceClassification"),Lbr=o(" (XLM-RoBERTa model)"),xbr=l(),xF=a("li"),wbe=a("strong"),kbr=o("xlnet"),Sbr=o(" \u2014 "),uQ=a("a"),Rbr=o("TFXLNetForSequenceClassification"),Bbr=o(" (XLNet model)"),Pbr=l(),Abe=a("p"),$br=o("Examples:"),Ibr=l(),f(M8.$$.fragment),A$e=l(),Oc=a("h2"),kF=a("a"),ybe=a("span"),f(E8.$$.fragment),qbr=l(),Lbe=a("span"),Nbr=o("TFAutoModelForMultipleChoice"),y$e=l(),Ar=a("div"),f(C8.$$.fragment),jbr=l(),Vc=a("p"),Dbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bQ=a("a"),Gbr=o("from_pretrained()"),Obr=o(" class method or the "),vQ=a("a"),Vbr=o("from_config()"),Xbr=o(` class
method.`),zbr=l(),w8=a("p"),Qbr=o("This class cannot be instantiated directly using "),xbe=a("code"),Wbr=o("__init__()"),Hbr=o(" (throws an error)."),Ubr=l(),Ft=a("div"),f(A8.$$.fragment),Jbr=l(),kbe=a("p"),Ybr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Kbr=l(),Xc=a("p"),Zbr=o(`Note:
Loading a model from its configuration file does `),Sbe=a("strong"),e2r=o("not"),o2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),r2r=o("from_pretrained()"),t2r=o(" to load the model weights."),a2r=l(),Rbe=a("p"),n2r=o("Examples:"),s2r=l(),f(y8.$$.fragment),l2r=l(),Mo=a("div"),f(L8.$$.fragment),i2r=l(),Bbe=a("p"),d2r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),c2r=l(),Cn=a("p"),f2r=o("The model class to instantiate is selected based on the "),Pbe=a("code"),m2r=o("model_type"),g2r=o(` property of the config object (either
passed as an argument or loaded from `),$be=a("code"),h2r=o("pretrained_model_name_or_path"),p2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=a("code"),_2r=o("pretrained_model_name_or_path"),u2r=o(":"),b2r=l(),se=a("ul"),SF=a("li"),qbe=a("strong"),v2r=o("albert"),F2r=o(" \u2014 "),TQ=a("a"),T2r=o("TFAlbertForMultipleChoice"),M2r=o(" (ALBERT model)"),E2r=l(),RF=a("li"),Nbe=a("strong"),C2r=o("bert"),w2r=o(" \u2014 "),MQ=a("a"),A2r=o("TFBertForMultipleChoice"),y2r=o(" (BERT model)"),L2r=l(),BF=a("li"),jbe=a("strong"),x2r=o("camembert"),k2r=o(" \u2014 "),EQ=a("a"),S2r=o("TFCamembertForMultipleChoice"),R2r=o(" (CamemBERT model)"),B2r=l(),PF=a("li"),Dbe=a("strong"),P2r=o("convbert"),$2r=o(" \u2014 "),CQ=a("a"),I2r=o("TFConvBertForMultipleChoice"),q2r=o(" (ConvBERT model)"),N2r=l(),$F=a("li"),Gbe=a("strong"),j2r=o("distilbert"),D2r=o(" \u2014 "),wQ=a("a"),G2r=o("TFDistilBertForMultipleChoice"),O2r=o(" (DistilBERT model)"),V2r=l(),IF=a("li"),Obe=a("strong"),X2r=o("electra"),z2r=o(" \u2014 "),AQ=a("a"),Q2r=o("TFElectraForMultipleChoice"),W2r=o(" (ELECTRA model)"),H2r=l(),qF=a("li"),Vbe=a("strong"),U2r=o("flaubert"),J2r=o(" \u2014 "),yQ=a("a"),Y2r=o("TFFlaubertForMultipleChoice"),K2r=o(" (FlauBERT model)"),Z2r=l(),NF=a("li"),Xbe=a("strong"),e5r=o("funnel"),o5r=o(" \u2014 "),LQ=a("a"),r5r=o("TFFunnelForMultipleChoice"),t5r=o(" (Funnel Transformer model)"),a5r=l(),jF=a("li"),zbe=a("strong"),n5r=o("longformer"),s5r=o(" \u2014 "),xQ=a("a"),l5r=o("TFLongformerForMultipleChoice"),i5r=o(" (Longformer model)"),d5r=l(),DF=a("li"),Qbe=a("strong"),c5r=o("mobilebert"),f5r=o(" \u2014 "),kQ=a("a"),m5r=o("TFMobileBertForMultipleChoice"),g5r=o(" (MobileBERT model)"),h5r=l(),GF=a("li"),Wbe=a("strong"),p5r=o("mpnet"),_5r=o(" \u2014 "),SQ=a("a"),u5r=o("TFMPNetForMultipleChoice"),b5r=o(" (MPNet model)"),v5r=l(),OF=a("li"),Hbe=a("strong"),F5r=o("rembert"),T5r=o(" \u2014 "),RQ=a("a"),M5r=o("TFRemBertForMultipleChoice"),E5r=o(" (RemBERT model)"),C5r=l(),VF=a("li"),Ube=a("strong"),w5r=o("roberta"),A5r=o(" \u2014 "),BQ=a("a"),y5r=o("TFRobertaForMultipleChoice"),L5r=o(" (RoBERTa model)"),x5r=l(),XF=a("li"),Jbe=a("strong"),k5r=o("roformer"),S5r=o(" \u2014 "),PQ=a("a"),R5r=o("TFRoFormerForMultipleChoice"),B5r=o(" (RoFormer model)"),P5r=l(),zF=a("li"),Ybe=a("strong"),$5r=o("xlm"),I5r=o(" \u2014 "),$Q=a("a"),q5r=o("TFXLMForMultipleChoice"),N5r=o(" (XLM model)"),j5r=l(),QF=a("li"),Kbe=a("strong"),D5r=o("xlm-roberta"),G5r=o(" \u2014 "),IQ=a("a"),O5r=o("TFXLMRobertaForMultipleChoice"),V5r=o(" (XLM-RoBERTa model)"),X5r=l(),WF=a("li"),Zbe=a("strong"),z5r=o("xlnet"),Q5r=o(" \u2014 "),qQ=a("a"),W5r=o("TFXLNetForMultipleChoice"),H5r=o(" (XLNet model)"),U5r=l(),e2e=a("p"),J5r=o("Examples:"),Y5r=l(),f(x8.$$.fragment),L$e=l(),zc=a("h2"),HF=a("a"),o2e=a("span"),f(k8.$$.fragment),K5r=l(),r2e=a("span"),Z5r=o("TFAutoModelForTableQuestionAnswering"),x$e=l(),yr=a("div"),f(S8.$$.fragment),e3r=l(),Qc=a("p"),o3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),NQ=a("a"),r3r=o("from_pretrained()"),t3r=o(" class method or the "),jQ=a("a"),a3r=o("from_config()"),n3r=o(` class
method.`),s3r=l(),R8=a("p"),l3r=o("This class cannot be instantiated directly using "),t2e=a("code"),i3r=o("__init__()"),d3r=o(" (throws an error)."),c3r=l(),Tt=a("div"),f(B8.$$.fragment),f3r=l(),a2e=a("p"),m3r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),g3r=l(),Wc=a("p"),h3r=o(`Note:
Loading a model from its configuration file does `),n2e=a("strong"),p3r=o("not"),_3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),u3r=o("from_pretrained()"),b3r=o(" to load the model weights."),v3r=l(),s2e=a("p"),F3r=o("Examples:"),T3r=l(),f(P8.$$.fragment),M3r=l(),Eo=a("div"),f($8.$$.fragment),E3r=l(),l2e=a("p"),C3r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),w3r=l(),wn=a("p"),A3r=o("The model class to instantiate is selected based on the "),i2e=a("code"),y3r=o("model_type"),L3r=o(` property of the config object (either
passed as an argument or loaded from `),d2e=a("code"),x3r=o("pretrained_model_name_or_path"),k3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=a("code"),S3r=o("pretrained_model_name_or_path"),R3r=o(":"),B3r=l(),f2e=a("ul"),UF=a("li"),m2e=a("strong"),P3r=o("tapas"),$3r=o(" \u2014 "),GQ=a("a"),I3r=o("TFTapasForQuestionAnswering"),q3r=o(" (TAPAS model)"),N3r=l(),g2e=a("p"),j3r=o("Examples:"),D3r=l(),f(I8.$$.fragment),k$e=l(),Hc=a("h2"),JF=a("a"),h2e=a("span"),f(q8.$$.fragment),G3r=l(),p2e=a("span"),O3r=o("TFAutoModelForTokenClassification"),S$e=l(),Lr=a("div"),f(N8.$$.fragment),V3r=l(),Uc=a("p"),X3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OQ=a("a"),z3r=o("from_pretrained()"),Q3r=o(" class method or the "),VQ=a("a"),W3r=o("from_config()"),H3r=o(` class
method.`),U3r=l(),j8=a("p"),J3r=o("This class cannot be instantiated directly using "),_2e=a("code"),Y3r=o("__init__()"),K3r=o(" (throws an error)."),Z3r=l(),Mt=a("div"),f(D8.$$.fragment),e6r=l(),u2e=a("p"),o6r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),r6r=l(),Jc=a("p"),t6r=o(`Note:
Loading a model from its configuration file does `),b2e=a("strong"),a6r=o("not"),n6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=a("a"),s6r=o("from_pretrained()"),l6r=o(" to load the model weights."),i6r=l(),v2e=a("p"),d6r=o("Examples:"),c6r=l(),f(G8.$$.fragment),f6r=l(),Co=a("div"),f(O8.$$.fragment),m6r=l(),F2e=a("p"),g6r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),h6r=l(),An=a("p"),p6r=o("The model class to instantiate is selected based on the "),T2e=a("code"),_6r=o("model_type"),u6r=o(` property of the config object (either
passed as an argument or loaded from `),M2e=a("code"),b6r=o("pretrained_model_name_or_path"),v6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=a("code"),F6r=o("pretrained_model_name_or_path"),T6r=o(":"),M6r=l(),Z=a("ul"),YF=a("li"),C2e=a("strong"),E6r=o("albert"),C6r=o(" \u2014 "),zQ=a("a"),w6r=o("TFAlbertForTokenClassification"),A6r=o(" (ALBERT model)"),y6r=l(),KF=a("li"),w2e=a("strong"),L6r=o("bert"),x6r=o(" \u2014 "),QQ=a("a"),k6r=o("TFBertForTokenClassification"),S6r=o(" (BERT model)"),R6r=l(),ZF=a("li"),A2e=a("strong"),B6r=o("camembert"),P6r=o(" \u2014 "),WQ=a("a"),$6r=o("TFCamembertForTokenClassification"),I6r=o(" (CamemBERT model)"),q6r=l(),eT=a("li"),y2e=a("strong"),N6r=o("convbert"),j6r=o(" \u2014 "),HQ=a("a"),D6r=o("TFConvBertForTokenClassification"),G6r=o(" (ConvBERT model)"),O6r=l(),oT=a("li"),L2e=a("strong"),V6r=o("deberta"),X6r=o(" \u2014 "),UQ=a("a"),z6r=o("TFDebertaForTokenClassification"),Q6r=o(" (DeBERTa model)"),W6r=l(),rT=a("li"),x2e=a("strong"),H6r=o("deberta-v2"),U6r=o(" \u2014 "),JQ=a("a"),J6r=o("TFDebertaV2ForTokenClassification"),Y6r=o(" (DeBERTa-v2 model)"),K6r=l(),tT=a("li"),k2e=a("strong"),Z6r=o("distilbert"),evr=o(" \u2014 "),YQ=a("a"),ovr=o("TFDistilBertForTokenClassification"),rvr=o(" (DistilBERT model)"),tvr=l(),aT=a("li"),S2e=a("strong"),avr=o("electra"),nvr=o(" \u2014 "),KQ=a("a"),svr=o("TFElectraForTokenClassification"),lvr=o(" (ELECTRA model)"),ivr=l(),nT=a("li"),R2e=a("strong"),dvr=o("flaubert"),cvr=o(" \u2014 "),ZQ=a("a"),fvr=o("TFFlaubertForTokenClassification"),mvr=o(" (FlauBERT model)"),gvr=l(),sT=a("li"),B2e=a("strong"),hvr=o("funnel"),pvr=o(" \u2014 "),eW=a("a"),_vr=o("TFFunnelForTokenClassification"),uvr=o(" (Funnel Transformer model)"),bvr=l(),lT=a("li"),P2e=a("strong"),vvr=o("layoutlm"),Fvr=o(" \u2014 "),oW=a("a"),Tvr=o("TFLayoutLMForTokenClassification"),Mvr=o(" (LayoutLM model)"),Evr=l(),iT=a("li"),$2e=a("strong"),Cvr=o("longformer"),wvr=o(" \u2014 "),rW=a("a"),Avr=o("TFLongformerForTokenClassification"),yvr=o(" (Longformer model)"),Lvr=l(),dT=a("li"),I2e=a("strong"),xvr=o("mobilebert"),kvr=o(" \u2014 "),tW=a("a"),Svr=o("TFMobileBertForTokenClassification"),Rvr=o(" (MobileBERT model)"),Bvr=l(),cT=a("li"),q2e=a("strong"),Pvr=o("mpnet"),$vr=o(" \u2014 "),aW=a("a"),Ivr=o("TFMPNetForTokenClassification"),qvr=o(" (MPNet model)"),Nvr=l(),fT=a("li"),N2e=a("strong"),jvr=o("rembert"),Dvr=o(" \u2014 "),nW=a("a"),Gvr=o("TFRemBertForTokenClassification"),Ovr=o(" (RemBERT model)"),Vvr=l(),mT=a("li"),j2e=a("strong"),Xvr=o("roberta"),zvr=o(" \u2014 "),sW=a("a"),Qvr=o("TFRobertaForTokenClassification"),Wvr=o(" (RoBERTa model)"),Hvr=l(),gT=a("li"),D2e=a("strong"),Uvr=o("roformer"),Jvr=o(" \u2014 "),lW=a("a"),Yvr=o("TFRoFormerForTokenClassification"),Kvr=o(" (RoFormer model)"),Zvr=l(),hT=a("li"),G2e=a("strong"),eFr=o("xlm"),oFr=o(" \u2014 "),iW=a("a"),rFr=o("TFXLMForTokenClassification"),tFr=o(" (XLM model)"),aFr=l(),pT=a("li"),O2e=a("strong"),nFr=o("xlm-roberta"),sFr=o(" \u2014 "),dW=a("a"),lFr=o("TFXLMRobertaForTokenClassification"),iFr=o(" (XLM-RoBERTa model)"),dFr=l(),_T=a("li"),V2e=a("strong"),cFr=o("xlnet"),fFr=o(" \u2014 "),cW=a("a"),mFr=o("TFXLNetForTokenClassification"),gFr=o(" (XLNet model)"),hFr=l(),X2e=a("p"),pFr=o("Examples:"),_Fr=l(),f(V8.$$.fragment),R$e=l(),Yc=a("h2"),uT=a("a"),z2e=a("span"),f(X8.$$.fragment),uFr=l(),Q2e=a("span"),bFr=o("TFAutoModelForQuestionAnswering"),B$e=l(),xr=a("div"),f(z8.$$.fragment),vFr=l(),Kc=a("p"),FFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fW=a("a"),TFr=o("from_pretrained()"),MFr=o(" class method or the "),mW=a("a"),EFr=o("from_config()"),CFr=o(` class
method.`),wFr=l(),Q8=a("p"),AFr=o("This class cannot be instantiated directly using "),W2e=a("code"),yFr=o("__init__()"),LFr=o(" (throws an error)."),xFr=l(),Et=a("div"),f(W8.$$.fragment),kFr=l(),H2e=a("p"),SFr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RFr=l(),Zc=a("p"),BFr=o(`Note:
Loading a model from its configuration file does `),U2e=a("strong"),PFr=o("not"),$Fr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),IFr=o("from_pretrained()"),qFr=o(" to load the model weights."),NFr=l(),J2e=a("p"),jFr=o("Examples:"),DFr=l(),f(H8.$$.fragment),GFr=l(),wo=a("div"),f(U8.$$.fragment),OFr=l(),Y2e=a("p"),VFr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XFr=l(),yn=a("p"),zFr=o("The model class to instantiate is selected based on the "),K2e=a("code"),QFr=o("model_type"),WFr=o(` property of the config object (either
passed as an argument or loaded from `),Z2e=a("code"),HFr=o("pretrained_model_name_or_path"),UFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e5e=a("code"),JFr=o("pretrained_model_name_or_path"),YFr=o(":"),KFr=l(),ee=a("ul"),bT=a("li"),o5e=a("strong"),ZFr=o("albert"),eTr=o(" \u2014 "),hW=a("a"),oTr=o("TFAlbertForQuestionAnswering"),rTr=o(" (ALBERT model)"),tTr=l(),vT=a("li"),r5e=a("strong"),aTr=o("bert"),nTr=o(" \u2014 "),pW=a("a"),sTr=o("TFBertForQuestionAnswering"),lTr=o(" (BERT model)"),iTr=l(),FT=a("li"),t5e=a("strong"),dTr=o("camembert"),cTr=o(" \u2014 "),_W=a("a"),fTr=o("TFCamembertForQuestionAnswering"),mTr=o(" (CamemBERT model)"),gTr=l(),TT=a("li"),a5e=a("strong"),hTr=o("convbert"),pTr=o(" \u2014 "),uW=a("a"),_Tr=o("TFConvBertForQuestionAnswering"),uTr=o(" (ConvBERT model)"),bTr=l(),MT=a("li"),n5e=a("strong"),vTr=o("deberta"),FTr=o(" \u2014 "),bW=a("a"),TTr=o("TFDebertaForQuestionAnswering"),MTr=o(" (DeBERTa model)"),ETr=l(),ET=a("li"),s5e=a("strong"),CTr=o("deberta-v2"),wTr=o(" \u2014 "),vW=a("a"),ATr=o("TFDebertaV2ForQuestionAnswering"),yTr=o(" (DeBERTa-v2 model)"),LTr=l(),CT=a("li"),l5e=a("strong"),xTr=o("distilbert"),kTr=o(" \u2014 "),FW=a("a"),STr=o("TFDistilBertForQuestionAnswering"),RTr=o(" (DistilBERT model)"),BTr=l(),wT=a("li"),i5e=a("strong"),PTr=o("electra"),$Tr=o(" \u2014 "),TW=a("a"),ITr=o("TFElectraForQuestionAnswering"),qTr=o(" (ELECTRA model)"),NTr=l(),AT=a("li"),d5e=a("strong"),jTr=o("flaubert"),DTr=o(" \u2014 "),MW=a("a"),GTr=o("TFFlaubertForQuestionAnsweringSimple"),OTr=o(" (FlauBERT model)"),VTr=l(),yT=a("li"),c5e=a("strong"),XTr=o("funnel"),zTr=o(" \u2014 "),EW=a("a"),QTr=o("TFFunnelForQuestionAnswering"),WTr=o(" (Funnel Transformer model)"),HTr=l(),LT=a("li"),f5e=a("strong"),UTr=o("gptj"),JTr=o(" \u2014 "),CW=a("a"),YTr=o("TFGPTJForQuestionAnswering"),KTr=o(" (GPT-J model)"),ZTr=l(),xT=a("li"),m5e=a("strong"),eMr=o("longformer"),oMr=o(" \u2014 "),wW=a("a"),rMr=o("TFLongformerForQuestionAnswering"),tMr=o(" (Longformer model)"),aMr=l(),kT=a("li"),g5e=a("strong"),nMr=o("mobilebert"),sMr=o(" \u2014 "),AW=a("a"),lMr=o("TFMobileBertForQuestionAnswering"),iMr=o(" (MobileBERT model)"),dMr=l(),ST=a("li"),h5e=a("strong"),cMr=o("mpnet"),fMr=o(" \u2014 "),yW=a("a"),mMr=o("TFMPNetForQuestionAnswering"),gMr=o(" (MPNet model)"),hMr=l(),RT=a("li"),p5e=a("strong"),pMr=o("rembert"),_Mr=o(" \u2014 "),LW=a("a"),uMr=o("TFRemBertForQuestionAnswering"),bMr=o(" (RemBERT model)"),vMr=l(),BT=a("li"),_5e=a("strong"),FMr=o("roberta"),TMr=o(" \u2014 "),xW=a("a"),MMr=o("TFRobertaForQuestionAnswering"),EMr=o(" (RoBERTa model)"),CMr=l(),PT=a("li"),u5e=a("strong"),wMr=o("roformer"),AMr=o(" \u2014 "),kW=a("a"),yMr=o("TFRoFormerForQuestionAnswering"),LMr=o(" (RoFormer model)"),xMr=l(),$T=a("li"),b5e=a("strong"),kMr=o("xlm"),SMr=o(" \u2014 "),SW=a("a"),RMr=o("TFXLMForQuestionAnsweringSimple"),BMr=o(" (XLM model)"),PMr=l(),IT=a("li"),v5e=a("strong"),$Mr=o("xlm-roberta"),IMr=o(" \u2014 "),RW=a("a"),qMr=o("TFXLMRobertaForQuestionAnswering"),NMr=o(" (XLM-RoBERTa model)"),jMr=l(),qT=a("li"),F5e=a("strong"),DMr=o("xlnet"),GMr=o(" \u2014 "),BW=a("a"),OMr=o("TFXLNetForQuestionAnsweringSimple"),VMr=o(" (XLNet model)"),XMr=l(),T5e=a("p"),zMr=o("Examples:"),QMr=l(),f(J8.$$.fragment),P$e=l(),ef=a("h2"),NT=a("a"),M5e=a("span"),f(Y8.$$.fragment),WMr=l(),E5e=a("span"),HMr=o("TFAutoModelForVision2Seq"),$$e=l(),kr=a("div"),f(K8.$$.fragment),UMr=l(),of=a("p"),JMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PW=a("a"),YMr=o("from_pretrained()"),KMr=o(" class method or the "),$W=a("a"),ZMr=o("from_config()"),eEr=o(` class
method.`),oEr=l(),Z8=a("p"),rEr=o("This class cannot be instantiated directly using "),C5e=a("code"),tEr=o("__init__()"),aEr=o(" (throws an error)."),nEr=l(),Ct=a("div"),f(eL.$$.fragment),sEr=l(),w5e=a("p"),lEr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),iEr=l(),rf=a("p"),dEr=o(`Note:
Loading a model from its configuration file does `),A5e=a("strong"),cEr=o("not"),fEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),mEr=o("from_pretrained()"),gEr=o(" to load the model weights."),hEr=l(),y5e=a("p"),pEr=o("Examples:"),_Er=l(),f(oL.$$.fragment),uEr=l(),Ao=a("div"),f(rL.$$.fragment),bEr=l(),L5e=a("p"),vEr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),FEr=l(),Ln=a("p"),TEr=o("The model class to instantiate is selected based on the "),x5e=a("code"),MEr=o("model_type"),EEr=o(` property of the config object (either
passed as an argument or loaded from `),k5e=a("code"),CEr=o("pretrained_model_name_or_path"),wEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S5e=a("code"),AEr=o("pretrained_model_name_or_path"),yEr=o(":"),LEr=l(),R5e=a("ul"),jT=a("li"),B5e=a("strong"),xEr=o("vision-encoder-decoder"),kEr=o(" \u2014 "),qW=a("a"),SEr=o("TFVisionEncoderDecoderModel"),REr=o(" (Vision Encoder decoder model)"),BEr=l(),P5e=a("p"),PEr=o("Examples:"),$Er=l(),f(tL.$$.fragment),I$e=l(),tf=a("h2"),DT=a("a"),$5e=a("span"),f(aL.$$.fragment),IEr=l(),I5e=a("span"),qEr=o("TFAutoModelForSpeechSeq2Seq"),q$e=l(),Sr=a("div"),f(nL.$$.fragment),NEr=l(),af=a("p"),jEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NW=a("a"),DEr=o("from_pretrained()"),GEr=o(" class method or the "),jW=a("a"),OEr=o("from_config()"),VEr=o(` class
method.`),XEr=l(),sL=a("p"),zEr=o("This class cannot be instantiated directly using "),q5e=a("code"),QEr=o("__init__()"),WEr=o(" (throws an error)."),HEr=l(),wt=a("div"),f(lL.$$.fragment),UEr=l(),N5e=a("p"),JEr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),YEr=l(),nf=a("p"),KEr=o(`Note:
Loading a model from its configuration file does `),j5e=a("strong"),ZEr=o("not"),eCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=a("a"),oCr=o("from_pretrained()"),rCr=o(" to load the model weights."),tCr=l(),D5e=a("p"),aCr=o("Examples:"),nCr=l(),f(iL.$$.fragment),sCr=l(),yo=a("div"),f(dL.$$.fragment),lCr=l(),G5e=a("p"),iCr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),dCr=l(),xn=a("p"),cCr=o("The model class to instantiate is selected based on the "),O5e=a("code"),fCr=o("model_type"),mCr=o(` property of the config object (either
passed as an argument or loaded from `),V5e=a("code"),gCr=o("pretrained_model_name_or_path"),hCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X5e=a("code"),pCr=o("pretrained_model_name_or_path"),_Cr=o(":"),uCr=l(),z5e=a("ul"),GT=a("li"),Q5e=a("strong"),bCr=o("speech_to_text"),vCr=o(" \u2014 "),GW=a("a"),FCr=o("TFSpeech2TextForConditionalGeneration"),TCr=o(" (Speech2Text model)"),MCr=l(),W5e=a("p"),ECr=o("Examples:"),CCr=l(),f(cL.$$.fragment),N$e=l(),sf=a("h2"),OT=a("a"),H5e=a("span"),f(fL.$$.fragment),wCr=l(),U5e=a("span"),ACr=o("FlaxAutoModel"),j$e=l(),Rr=a("div"),f(mL.$$.fragment),yCr=l(),lf=a("p"),LCr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OW=a("a"),xCr=o("from_pretrained()"),kCr=o(" class method or the "),VW=a("a"),SCr=o("from_config()"),RCr=o(` class
method.`),BCr=l(),gL=a("p"),PCr=o("This class cannot be instantiated directly using "),J5e=a("code"),$Cr=o("__init__()"),ICr=o(" (throws an error)."),qCr=l(),At=a("div"),f(hL.$$.fragment),NCr=l(),Y5e=a("p"),jCr=o("Instantiates one of the base model classes of the library from a configuration."),DCr=l(),df=a("p"),GCr=o(`Note:
Loading a model from its configuration file does `),K5e=a("strong"),OCr=o("not"),VCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=a("a"),XCr=o("from_pretrained()"),zCr=o(" to load the model weights."),QCr=l(),Z5e=a("p"),WCr=o("Examples:"),HCr=l(),f(pL.$$.fragment),UCr=l(),Lo=a("div"),f(_L.$$.fragment),JCr=l(),e3e=a("p"),YCr=o("Instantiate one of the base model classes of the library from a pretrained model."),KCr=l(),kn=a("p"),ZCr=o("The model class to instantiate is selected based on the "),o3e=a("code"),ewr=o("model_type"),owr=o(` property of the config object (either
passed as an argument or loaded from `),r3e=a("code"),rwr=o("pretrained_model_name_or_path"),twr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t3e=a("code"),awr=o("pretrained_model_name_or_path"),nwr=o(":"),swr=l(),z=a("ul"),VT=a("li"),a3e=a("strong"),lwr=o("albert"),iwr=o(" \u2014 "),zW=a("a"),dwr=o("FlaxAlbertModel"),cwr=o(" (ALBERT model)"),fwr=l(),XT=a("li"),n3e=a("strong"),mwr=o("bart"),gwr=o(" \u2014 "),QW=a("a"),hwr=o("FlaxBartModel"),pwr=o(" (BART model)"),_wr=l(),zT=a("li"),s3e=a("strong"),uwr=o("beit"),bwr=o(" \u2014 "),WW=a("a"),vwr=o("FlaxBeitModel"),Fwr=o(" (BEiT model)"),Twr=l(),QT=a("li"),l3e=a("strong"),Mwr=o("bert"),Ewr=o(" \u2014 "),HW=a("a"),Cwr=o("FlaxBertModel"),wwr=o(" (BERT model)"),Awr=l(),WT=a("li"),i3e=a("strong"),ywr=o("big_bird"),Lwr=o(" \u2014 "),UW=a("a"),xwr=o("FlaxBigBirdModel"),kwr=o(" (BigBird model)"),Swr=l(),HT=a("li"),d3e=a("strong"),Rwr=o("blenderbot"),Bwr=o(" \u2014 "),JW=a("a"),Pwr=o("FlaxBlenderbotModel"),$wr=o(" (Blenderbot model)"),Iwr=l(),UT=a("li"),c3e=a("strong"),qwr=o("blenderbot-small"),Nwr=o(" \u2014 "),YW=a("a"),jwr=o("FlaxBlenderbotSmallModel"),Dwr=o(" (BlenderbotSmall model)"),Gwr=l(),JT=a("li"),f3e=a("strong"),Owr=o("clip"),Vwr=o(" \u2014 "),KW=a("a"),Xwr=o("FlaxCLIPModel"),zwr=o(" (CLIP model)"),Qwr=l(),YT=a("li"),m3e=a("strong"),Wwr=o("distilbert"),Hwr=o(" \u2014 "),ZW=a("a"),Uwr=o("FlaxDistilBertModel"),Jwr=o(" (DistilBERT model)"),Ywr=l(),KT=a("li"),g3e=a("strong"),Kwr=o("electra"),Zwr=o(" \u2014 "),eH=a("a"),eAr=o("FlaxElectraModel"),oAr=o(" (ELECTRA model)"),rAr=l(),ZT=a("li"),h3e=a("strong"),tAr=o("gpt2"),aAr=o(" \u2014 "),oH=a("a"),nAr=o("FlaxGPT2Model"),sAr=o(" (OpenAI GPT-2 model)"),lAr=l(),eM=a("li"),p3e=a("strong"),iAr=o("gpt_neo"),dAr=o(" \u2014 "),rH=a("a"),cAr=o("FlaxGPTNeoModel"),fAr=o(" (GPT Neo model)"),mAr=l(),oM=a("li"),_3e=a("strong"),gAr=o("gptj"),hAr=o(" \u2014 "),tH=a("a"),pAr=o("FlaxGPTJModel"),_Ar=o(" (GPT-J model)"),uAr=l(),rM=a("li"),u3e=a("strong"),bAr=o("marian"),vAr=o(" \u2014 "),aH=a("a"),FAr=o("FlaxMarianModel"),TAr=o(" (Marian model)"),MAr=l(),tM=a("li"),b3e=a("strong"),EAr=o("mbart"),CAr=o(" \u2014 "),nH=a("a"),wAr=o("FlaxMBartModel"),AAr=o(" (mBART model)"),yAr=l(),aM=a("li"),v3e=a("strong"),LAr=o("mt5"),xAr=o(" \u2014 "),sH=a("a"),kAr=o("FlaxMT5Model"),SAr=o(" (mT5 model)"),RAr=l(),nM=a("li"),F3e=a("strong"),BAr=o("pegasus"),PAr=o(" \u2014 "),lH=a("a"),$Ar=o("FlaxPegasusModel"),IAr=o(" (Pegasus model)"),qAr=l(),sM=a("li"),T3e=a("strong"),NAr=o("roberta"),jAr=o(" \u2014 "),iH=a("a"),DAr=o("FlaxRobertaModel"),GAr=o(" (RoBERTa model)"),OAr=l(),lM=a("li"),M3e=a("strong"),VAr=o("roformer"),XAr=o(" \u2014 "),dH=a("a"),zAr=o("FlaxRoFormerModel"),QAr=o(" (RoFormer model)"),WAr=l(),iM=a("li"),E3e=a("strong"),HAr=o("t5"),UAr=o(" \u2014 "),cH=a("a"),JAr=o("FlaxT5Model"),YAr=o(" (T5 model)"),KAr=l(),dM=a("li"),C3e=a("strong"),ZAr=o("vision-text-dual-encoder"),e0r=o(" \u2014 "),fH=a("a"),o0r=o("FlaxVisionTextDualEncoderModel"),r0r=o(" (VisionTextDualEncoder model)"),t0r=l(),cM=a("li"),w3e=a("strong"),a0r=o("vit"),n0r=o(" \u2014 "),mH=a("a"),s0r=o("FlaxViTModel"),l0r=o(" (ViT model)"),i0r=l(),fM=a("li"),A3e=a("strong"),d0r=o("wav2vec2"),c0r=o(" \u2014 "),gH=a("a"),f0r=o("FlaxWav2Vec2Model"),m0r=o(" (Wav2Vec2 model)"),g0r=l(),mM=a("li"),y3e=a("strong"),h0r=o("xglm"),p0r=o(" \u2014 "),hH=a("a"),_0r=o("FlaxXGLMModel"),u0r=o(" (XGLM model)"),b0r=l(),gM=a("li"),L3e=a("strong"),v0r=o("xlm-roberta"),F0r=o(" \u2014 "),pH=a("a"),T0r=o("FlaxXLMRobertaModel"),M0r=o(" (XLM-RoBERTa model)"),E0r=l(),x3e=a("p"),C0r=o("Examples:"),w0r=l(),f(uL.$$.fragment),D$e=l(),cf=a("h2"),hM=a("a"),k3e=a("span"),f(bL.$$.fragment),A0r=l(),S3e=a("span"),y0r=o("FlaxAutoModelForCausalLM"),G$e=l(),Br=a("div"),f(vL.$$.fragment),L0r=l(),ff=a("p"),x0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_H=a("a"),k0r=o("from_pretrained()"),S0r=o(" class method or the "),uH=a("a"),R0r=o("from_config()"),B0r=o(` class
method.`),P0r=l(),FL=a("p"),$0r=o("This class cannot be instantiated directly using "),R3e=a("code"),I0r=o("__init__()"),q0r=o(" (throws an error)."),N0r=l(),yt=a("div"),f(TL.$$.fragment),j0r=l(),B3e=a("p"),D0r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),G0r=l(),mf=a("p"),O0r=o(`Note:
Loading a model from its configuration file does `),P3e=a("strong"),V0r=o("not"),X0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=a("a"),z0r=o("from_pretrained()"),Q0r=o(" to load the model weights."),W0r=l(),$3e=a("p"),H0r=o("Examples:"),U0r=l(),f(ML.$$.fragment),J0r=l(),xo=a("div"),f(EL.$$.fragment),Y0r=l(),I3e=a("p"),K0r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Z0r=l(),Sn=a("p"),eyr=o("The model class to instantiate is selected based on the "),q3e=a("code"),oyr=o("model_type"),ryr=o(` property of the config object (either
passed as an argument or loaded from `),N3e=a("code"),tyr=o("pretrained_model_name_or_path"),ayr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j3e=a("code"),nyr=o("pretrained_model_name_or_path"),syr=o(":"),lyr=l(),ca=a("ul"),pM=a("li"),D3e=a("strong"),iyr=o("bart"),dyr=o(" \u2014 "),vH=a("a"),cyr=o("FlaxBartForCausalLM"),fyr=o(" (BART model)"),myr=l(),_M=a("li"),G3e=a("strong"),gyr=o("gpt2"),hyr=o(" \u2014 "),FH=a("a"),pyr=o("FlaxGPT2LMHeadModel"),_yr=o(" (OpenAI GPT-2 model)"),uyr=l(),uM=a("li"),O3e=a("strong"),byr=o("gpt_neo"),vyr=o(" \u2014 "),TH=a("a"),Fyr=o("FlaxGPTNeoForCausalLM"),Tyr=o(" (GPT Neo model)"),Myr=l(),bM=a("li"),V3e=a("strong"),Eyr=o("gptj"),Cyr=o(" \u2014 "),MH=a("a"),wyr=o("FlaxGPTJForCausalLM"),Ayr=o(" (GPT-J model)"),yyr=l(),vM=a("li"),X3e=a("strong"),Lyr=o("xglm"),xyr=o(" \u2014 "),EH=a("a"),kyr=o("FlaxXGLMForCausalLM"),Syr=o(" (XGLM model)"),Ryr=l(),z3e=a("p"),Byr=o("Examples:"),Pyr=l(),f(CL.$$.fragment),O$e=l(),gf=a("h2"),FM=a("a"),Q3e=a("span"),f(wL.$$.fragment),$yr=l(),W3e=a("span"),Iyr=o("FlaxAutoModelForPreTraining"),V$e=l(),Pr=a("div"),f(AL.$$.fragment),qyr=l(),hf=a("p"),Nyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),CH=a("a"),jyr=o("from_pretrained()"),Dyr=o(" class method or the "),wH=a("a"),Gyr=o("from_config()"),Oyr=o(` class
method.`),Vyr=l(),yL=a("p"),Xyr=o("This class cannot be instantiated directly using "),H3e=a("code"),zyr=o("__init__()"),Qyr=o(" (throws an error)."),Wyr=l(),Lt=a("div"),f(LL.$$.fragment),Hyr=l(),U3e=a("p"),Uyr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Jyr=l(),pf=a("p"),Yyr=o(`Note:
Loading a model from its configuration file does `),J3e=a("strong"),Kyr=o("not"),Zyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=a("a"),e8r=o("from_pretrained()"),o8r=o(" to load the model weights."),r8r=l(),Y3e=a("p"),t8r=o("Examples:"),a8r=l(),f(xL.$$.fragment),n8r=l(),ko=a("div"),f(kL.$$.fragment),s8r=l(),K3e=a("p"),l8r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),i8r=l(),Rn=a("p"),d8r=o("The model class to instantiate is selected based on the "),Z3e=a("code"),c8r=o("model_type"),f8r=o(` property of the config object (either
passed as an argument or loaded from `),e6e=a("code"),m8r=o("pretrained_model_name_or_path"),g8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o6e=a("code"),h8r=o("pretrained_model_name_or_path"),p8r=o(":"),_8r=l(),he=a("ul"),TM=a("li"),r6e=a("strong"),u8r=o("albert"),b8r=o(" \u2014 "),yH=a("a"),v8r=o("FlaxAlbertForPreTraining"),F8r=o(" (ALBERT model)"),T8r=l(),MM=a("li"),t6e=a("strong"),M8r=o("bart"),E8r=o(" \u2014 "),LH=a("a"),C8r=o("FlaxBartForConditionalGeneration"),w8r=o(" (BART model)"),A8r=l(),EM=a("li"),a6e=a("strong"),y8r=o("bert"),L8r=o(" \u2014 "),xH=a("a"),x8r=o("FlaxBertForPreTraining"),k8r=o(" (BERT model)"),S8r=l(),CM=a("li"),n6e=a("strong"),R8r=o("big_bird"),B8r=o(" \u2014 "),kH=a("a"),P8r=o("FlaxBigBirdForPreTraining"),$8r=o(" (BigBird model)"),I8r=l(),wM=a("li"),s6e=a("strong"),q8r=o("electra"),N8r=o(" \u2014 "),SH=a("a"),j8r=o("FlaxElectraForPreTraining"),D8r=o(" (ELECTRA model)"),G8r=l(),AM=a("li"),l6e=a("strong"),O8r=o("mbart"),V8r=o(" \u2014 "),RH=a("a"),X8r=o("FlaxMBartForConditionalGeneration"),z8r=o(" (mBART model)"),Q8r=l(),yM=a("li"),i6e=a("strong"),W8r=o("mt5"),H8r=o(" \u2014 "),BH=a("a"),U8r=o("FlaxMT5ForConditionalGeneration"),J8r=o(" (mT5 model)"),Y8r=l(),LM=a("li"),d6e=a("strong"),K8r=o("roberta"),Z8r=o(" \u2014 "),PH=a("a"),eLr=o("FlaxRobertaForMaskedLM"),oLr=o(" (RoBERTa model)"),rLr=l(),xM=a("li"),c6e=a("strong"),tLr=o("roformer"),aLr=o(" \u2014 "),$H=a("a"),nLr=o("FlaxRoFormerForMaskedLM"),sLr=o(" (RoFormer model)"),lLr=l(),kM=a("li"),f6e=a("strong"),iLr=o("t5"),dLr=o(" \u2014 "),IH=a("a"),cLr=o("FlaxT5ForConditionalGeneration"),fLr=o(" (T5 model)"),mLr=l(),SM=a("li"),m6e=a("strong"),gLr=o("wav2vec2"),hLr=o(" \u2014 "),qH=a("a"),pLr=o("FlaxWav2Vec2ForPreTraining"),_Lr=o(" (Wav2Vec2 model)"),uLr=l(),RM=a("li"),g6e=a("strong"),bLr=o("xlm-roberta"),vLr=o(" \u2014 "),NH=a("a"),FLr=o("FlaxXLMRobertaForMaskedLM"),TLr=o(" (XLM-RoBERTa model)"),MLr=l(),h6e=a("p"),ELr=o("Examples:"),CLr=l(),f(SL.$$.fragment),X$e=l(),_f=a("h2"),BM=a("a"),p6e=a("span"),f(RL.$$.fragment),wLr=l(),_6e=a("span"),ALr=o("FlaxAutoModelForMaskedLM"),z$e=l(),$r=a("div"),f(BL.$$.fragment),yLr=l(),uf=a("p"),LLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jH=a("a"),xLr=o("from_pretrained()"),kLr=o(" class method or the "),DH=a("a"),SLr=o("from_config()"),RLr=o(` class
method.`),BLr=l(),PL=a("p"),PLr=o("This class cannot be instantiated directly using "),u6e=a("code"),$Lr=o("__init__()"),ILr=o(" (throws an error)."),qLr=l(),xt=a("div"),f($L.$$.fragment),NLr=l(),b6e=a("p"),jLr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),DLr=l(),bf=a("p"),GLr=o(`Note:
Loading a model from its configuration file does `),v6e=a("strong"),OLr=o("not"),VLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=a("a"),XLr=o("from_pretrained()"),zLr=o(" to load the model weights."),QLr=l(),F6e=a("p"),WLr=o("Examples:"),HLr=l(),f(IL.$$.fragment),ULr=l(),So=a("div"),f(qL.$$.fragment),JLr=l(),T6e=a("p"),YLr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),KLr=l(),Bn=a("p"),ZLr=o("The model class to instantiate is selected based on the "),M6e=a("code"),e7r=o("model_type"),o7r=o(` property of the config object (either
passed as an argument or loaded from `),E6e=a("code"),r7r=o("pretrained_model_name_or_path"),t7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=a("code"),a7r=o("pretrained_model_name_or_path"),n7r=o(":"),s7r=l(),Te=a("ul"),PM=a("li"),w6e=a("strong"),l7r=o("albert"),i7r=o(" \u2014 "),OH=a("a"),d7r=o("FlaxAlbertForMaskedLM"),c7r=o(" (ALBERT model)"),f7r=l(),$M=a("li"),A6e=a("strong"),m7r=o("bart"),g7r=o(" \u2014 "),VH=a("a"),h7r=o("FlaxBartForConditionalGeneration"),p7r=o(" (BART model)"),_7r=l(),IM=a("li"),y6e=a("strong"),u7r=o("bert"),b7r=o(" \u2014 "),XH=a("a"),v7r=o("FlaxBertForMaskedLM"),F7r=o(" (BERT model)"),T7r=l(),qM=a("li"),L6e=a("strong"),M7r=o("big_bird"),E7r=o(" \u2014 "),zH=a("a"),C7r=o("FlaxBigBirdForMaskedLM"),w7r=o(" (BigBird model)"),A7r=l(),NM=a("li"),x6e=a("strong"),y7r=o("distilbert"),L7r=o(" \u2014 "),QH=a("a"),x7r=o("FlaxDistilBertForMaskedLM"),k7r=o(" (DistilBERT model)"),S7r=l(),jM=a("li"),k6e=a("strong"),R7r=o("electra"),B7r=o(" \u2014 "),WH=a("a"),P7r=o("FlaxElectraForMaskedLM"),$7r=o(" (ELECTRA model)"),I7r=l(),DM=a("li"),S6e=a("strong"),q7r=o("mbart"),N7r=o(" \u2014 "),HH=a("a"),j7r=o("FlaxMBartForConditionalGeneration"),D7r=o(" (mBART model)"),G7r=l(),GM=a("li"),R6e=a("strong"),O7r=o("roberta"),V7r=o(" \u2014 "),UH=a("a"),X7r=o("FlaxRobertaForMaskedLM"),z7r=o(" (RoBERTa model)"),Q7r=l(),OM=a("li"),B6e=a("strong"),W7r=o("roformer"),H7r=o(" \u2014 "),JH=a("a"),U7r=o("FlaxRoFormerForMaskedLM"),J7r=o(" (RoFormer model)"),Y7r=l(),VM=a("li"),P6e=a("strong"),K7r=o("xlm-roberta"),Z7r=o(" \u2014 "),YH=a("a"),e9r=o("FlaxXLMRobertaForMaskedLM"),o9r=o(" (XLM-RoBERTa model)"),r9r=l(),$6e=a("p"),t9r=o("Examples:"),a9r=l(),f(NL.$$.fragment),Q$e=l(),vf=a("h2"),XM=a("a"),I6e=a("span"),f(jL.$$.fragment),n9r=l(),q6e=a("span"),s9r=o("FlaxAutoModelForSeq2SeqLM"),W$e=l(),Ir=a("div"),f(DL.$$.fragment),l9r=l(),Ff=a("p"),i9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),KH=a("a"),d9r=o("from_pretrained()"),c9r=o(" class method or the "),ZH=a("a"),f9r=o("from_config()"),m9r=o(` class
method.`),g9r=l(),GL=a("p"),h9r=o("This class cannot be instantiated directly using "),N6e=a("code"),p9r=o("__init__()"),_9r=o(" (throws an error)."),u9r=l(),kt=a("div"),f(OL.$$.fragment),b9r=l(),j6e=a("p"),v9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),F9r=l(),Tf=a("p"),T9r=o(`Note:
Loading a model from its configuration file does `),D6e=a("strong"),M9r=o("not"),E9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=a("a"),C9r=o("from_pretrained()"),w9r=o(" to load the model weights."),A9r=l(),G6e=a("p"),y9r=o("Examples:"),L9r=l(),f(VL.$$.fragment),x9r=l(),Ro=a("div"),f(XL.$$.fragment),k9r=l(),O6e=a("p"),S9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),R9r=l(),Pn=a("p"),B9r=o("The model class to instantiate is selected based on the "),V6e=a("code"),P9r=o("model_type"),$9r=o(` property of the config object (either
passed as an argument or loaded from `),X6e=a("code"),I9r=o("pretrained_model_name_or_path"),q9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z6e=a("code"),N9r=o("pretrained_model_name_or_path"),j9r=o(":"),D9r=l(),we=a("ul"),zM=a("li"),Q6e=a("strong"),G9r=o("bart"),O9r=o(" \u2014 "),oU=a("a"),V9r=o("FlaxBartForConditionalGeneration"),X9r=o(" (BART model)"),z9r=l(),QM=a("li"),W6e=a("strong"),Q9r=o("blenderbot"),W9r=o(" \u2014 "),rU=a("a"),H9r=o("FlaxBlenderbotForConditionalGeneration"),U9r=o(" (Blenderbot model)"),J9r=l(),WM=a("li"),H6e=a("strong"),Y9r=o("blenderbot-small"),K9r=o(" \u2014 "),tU=a("a"),Z9r=o("FlaxBlenderbotSmallForConditionalGeneration"),exr=o(" (BlenderbotSmall model)"),oxr=l(),HM=a("li"),U6e=a("strong"),rxr=o("encoder-decoder"),txr=o(" \u2014 "),aU=a("a"),axr=o("FlaxEncoderDecoderModel"),nxr=o(" (Encoder decoder model)"),sxr=l(),UM=a("li"),J6e=a("strong"),lxr=o("marian"),ixr=o(" \u2014 "),nU=a("a"),dxr=o("FlaxMarianMTModel"),cxr=o(" (Marian model)"),fxr=l(),JM=a("li"),Y6e=a("strong"),mxr=o("mbart"),gxr=o(" \u2014 "),sU=a("a"),hxr=o("FlaxMBartForConditionalGeneration"),pxr=o(" (mBART model)"),_xr=l(),YM=a("li"),K6e=a("strong"),uxr=o("mt5"),bxr=o(" \u2014 "),lU=a("a"),vxr=o("FlaxMT5ForConditionalGeneration"),Fxr=o(" (mT5 model)"),Txr=l(),KM=a("li"),Z6e=a("strong"),Mxr=o("pegasus"),Exr=o(" \u2014 "),iU=a("a"),Cxr=o("FlaxPegasusForConditionalGeneration"),wxr=o(" (Pegasus model)"),Axr=l(),ZM=a("li"),eve=a("strong"),yxr=o("t5"),Lxr=o(" \u2014 "),dU=a("a"),xxr=o("FlaxT5ForConditionalGeneration"),kxr=o(" (T5 model)"),Sxr=l(),ove=a("p"),Rxr=o("Examples:"),Bxr=l(),f(zL.$$.fragment),H$e=l(),Mf=a("h2"),eE=a("a"),rve=a("span"),f(QL.$$.fragment),Pxr=l(),tve=a("span"),$xr=o("FlaxAutoModelForSequenceClassification"),U$e=l(),qr=a("div"),f(WL.$$.fragment),Ixr=l(),Ef=a("p"),qxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cU=a("a"),Nxr=o("from_pretrained()"),jxr=o(" class method or the "),fU=a("a"),Dxr=o("from_config()"),Gxr=o(` class
method.`),Oxr=l(),HL=a("p"),Vxr=o("This class cannot be instantiated directly using "),ave=a("code"),Xxr=o("__init__()"),zxr=o(" (throws an error)."),Qxr=l(),St=a("div"),f(UL.$$.fragment),Wxr=l(),nve=a("p"),Hxr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Uxr=l(),Cf=a("p"),Jxr=o(`Note:
Loading a model from its configuration file does `),sve=a("strong"),Yxr=o("not"),Kxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=a("a"),Zxr=o("from_pretrained()"),ekr=o(" to load the model weights."),okr=l(),lve=a("p"),rkr=o("Examples:"),tkr=l(),f(JL.$$.fragment),akr=l(),Bo=a("div"),f(YL.$$.fragment),nkr=l(),ive=a("p"),skr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lkr=l(),$n=a("p"),ikr=o("The model class to instantiate is selected based on the "),dve=a("code"),dkr=o("model_type"),ckr=o(` property of the config object (either
passed as an argument or loaded from `),cve=a("code"),fkr=o("pretrained_model_name_or_path"),mkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=a("code"),gkr=o("pretrained_model_name_or_path"),hkr=o(":"),pkr=l(),Me=a("ul"),oE=a("li"),mve=a("strong"),_kr=o("albert"),ukr=o(" \u2014 "),gU=a("a"),bkr=o("FlaxAlbertForSequenceClassification"),vkr=o(" (ALBERT model)"),Fkr=l(),rE=a("li"),gve=a("strong"),Tkr=o("bart"),Mkr=o(" \u2014 "),hU=a("a"),Ekr=o("FlaxBartForSequenceClassification"),Ckr=o(" (BART model)"),wkr=l(),tE=a("li"),hve=a("strong"),Akr=o("bert"),ykr=o(" \u2014 "),pU=a("a"),Lkr=o("FlaxBertForSequenceClassification"),xkr=o(" (BERT model)"),kkr=l(),aE=a("li"),pve=a("strong"),Skr=o("big_bird"),Rkr=o(" \u2014 "),_U=a("a"),Bkr=o("FlaxBigBirdForSequenceClassification"),Pkr=o(" (BigBird model)"),$kr=l(),nE=a("li"),_ve=a("strong"),Ikr=o("distilbert"),qkr=o(" \u2014 "),uU=a("a"),Nkr=o("FlaxDistilBertForSequenceClassification"),jkr=o(" (DistilBERT model)"),Dkr=l(),sE=a("li"),uve=a("strong"),Gkr=o("electra"),Okr=o(" \u2014 "),bU=a("a"),Vkr=o("FlaxElectraForSequenceClassification"),Xkr=o(" (ELECTRA model)"),zkr=l(),lE=a("li"),bve=a("strong"),Qkr=o("mbart"),Wkr=o(" \u2014 "),vU=a("a"),Hkr=o("FlaxMBartForSequenceClassification"),Ukr=o(" (mBART model)"),Jkr=l(),iE=a("li"),vve=a("strong"),Ykr=o("roberta"),Kkr=o(" \u2014 "),FU=a("a"),Zkr=o("FlaxRobertaForSequenceClassification"),eSr=o(" (RoBERTa model)"),oSr=l(),dE=a("li"),Fve=a("strong"),rSr=o("roformer"),tSr=o(" \u2014 "),TU=a("a"),aSr=o("FlaxRoFormerForSequenceClassification"),nSr=o(" (RoFormer model)"),sSr=l(),cE=a("li"),Tve=a("strong"),lSr=o("xlm-roberta"),iSr=o(" \u2014 "),MU=a("a"),dSr=o("FlaxXLMRobertaForSequenceClassification"),cSr=o(" (XLM-RoBERTa model)"),fSr=l(),Mve=a("p"),mSr=o("Examples:"),gSr=l(),f(KL.$$.fragment),J$e=l(),wf=a("h2"),fE=a("a"),Eve=a("span"),f(ZL.$$.fragment),hSr=l(),Cve=a("span"),pSr=o("FlaxAutoModelForQuestionAnswering"),Y$e=l(),Nr=a("div"),f(e7.$$.fragment),_Sr=l(),Af=a("p"),uSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EU=a("a"),bSr=o("from_pretrained()"),vSr=o(" class method or the "),CU=a("a"),FSr=o("from_config()"),TSr=o(` class
method.`),MSr=l(),o7=a("p"),ESr=o("This class cannot be instantiated directly using "),wve=a("code"),CSr=o("__init__()"),wSr=o(" (throws an error)."),ASr=l(),Rt=a("div"),f(r7.$$.fragment),ySr=l(),Ave=a("p"),LSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),xSr=l(),yf=a("p"),kSr=o(`Note:
Loading a model from its configuration file does `),yve=a("strong"),SSr=o("not"),RSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=a("a"),BSr=o("from_pretrained()"),PSr=o(" to load the model weights."),$Sr=l(),Lve=a("p"),ISr=o("Examples:"),qSr=l(),f(t7.$$.fragment),NSr=l(),Po=a("div"),f(a7.$$.fragment),jSr=l(),xve=a("p"),DSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),GSr=l(),In=a("p"),OSr=o("The model class to instantiate is selected based on the "),kve=a("code"),VSr=o("model_type"),XSr=o(` property of the config object (either
passed as an argument or loaded from `),Sve=a("code"),zSr=o("pretrained_model_name_or_path"),QSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=a("code"),WSr=o("pretrained_model_name_or_path"),HSr=o(":"),USr=l(),Ee=a("ul"),mE=a("li"),Bve=a("strong"),JSr=o("albert"),YSr=o(" \u2014 "),AU=a("a"),KSr=o("FlaxAlbertForQuestionAnswering"),ZSr=o(" (ALBERT model)"),eRr=l(),gE=a("li"),Pve=a("strong"),oRr=o("bart"),rRr=o(" \u2014 "),yU=a("a"),tRr=o("FlaxBartForQuestionAnswering"),aRr=o(" (BART model)"),nRr=l(),hE=a("li"),$ve=a("strong"),sRr=o("bert"),lRr=o(" \u2014 "),LU=a("a"),iRr=o("FlaxBertForQuestionAnswering"),dRr=o(" (BERT model)"),cRr=l(),pE=a("li"),Ive=a("strong"),fRr=o("big_bird"),mRr=o(" \u2014 "),xU=a("a"),gRr=o("FlaxBigBirdForQuestionAnswering"),hRr=o(" (BigBird model)"),pRr=l(),_E=a("li"),qve=a("strong"),_Rr=o("distilbert"),uRr=o(" \u2014 "),kU=a("a"),bRr=o("FlaxDistilBertForQuestionAnswering"),vRr=o(" (DistilBERT model)"),FRr=l(),uE=a("li"),Nve=a("strong"),TRr=o("electra"),MRr=o(" \u2014 "),SU=a("a"),ERr=o("FlaxElectraForQuestionAnswering"),CRr=o(" (ELECTRA model)"),wRr=l(),bE=a("li"),jve=a("strong"),ARr=o("mbart"),yRr=o(" \u2014 "),RU=a("a"),LRr=o("FlaxMBartForQuestionAnswering"),xRr=o(" (mBART model)"),kRr=l(),vE=a("li"),Dve=a("strong"),SRr=o("roberta"),RRr=o(" \u2014 "),BU=a("a"),BRr=o("FlaxRobertaForQuestionAnswering"),PRr=o(" (RoBERTa model)"),$Rr=l(),FE=a("li"),Gve=a("strong"),IRr=o("roformer"),qRr=o(" \u2014 "),PU=a("a"),NRr=o("FlaxRoFormerForQuestionAnswering"),jRr=o(" (RoFormer model)"),DRr=l(),TE=a("li"),Ove=a("strong"),GRr=o("xlm-roberta"),ORr=o(" \u2014 "),$U=a("a"),VRr=o("FlaxXLMRobertaForQuestionAnswering"),XRr=o(" (XLM-RoBERTa model)"),zRr=l(),Vve=a("p"),QRr=o("Examples:"),WRr=l(),f(n7.$$.fragment),K$e=l(),Lf=a("h2"),ME=a("a"),Xve=a("span"),f(s7.$$.fragment),HRr=l(),zve=a("span"),URr=o("FlaxAutoModelForTokenClassification"),Z$e=l(),jr=a("div"),f(l7.$$.fragment),JRr=l(),xf=a("p"),YRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),IU=a("a"),KRr=o("from_pretrained()"),ZRr=o(" class method or the "),qU=a("a"),eBr=o("from_config()"),oBr=o(` class
method.`),rBr=l(),i7=a("p"),tBr=o("This class cannot be instantiated directly using "),Qve=a("code"),aBr=o("__init__()"),nBr=o(" (throws an error)."),sBr=l(),Bt=a("div"),f(d7.$$.fragment),lBr=l(),Wve=a("p"),iBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),dBr=l(),kf=a("p"),cBr=o(`Note:
Loading a model from its configuration file does `),Hve=a("strong"),fBr=o("not"),mBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=a("a"),gBr=o("from_pretrained()"),hBr=o(" to load the model weights."),pBr=l(),Uve=a("p"),_Br=o("Examples:"),uBr=l(),f(c7.$$.fragment),bBr=l(),$o=a("div"),f(f7.$$.fragment),vBr=l(),Jve=a("p"),FBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),TBr=l(),qn=a("p"),MBr=o("The model class to instantiate is selected based on the "),Yve=a("code"),EBr=o("model_type"),CBr=o(` property of the config object (either
passed as an argument or loaded from `),Kve=a("code"),wBr=o("pretrained_model_name_or_path"),ABr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=a("code"),yBr=o("pretrained_model_name_or_path"),LBr=o(":"),xBr=l(),Pe=a("ul"),EE=a("li"),eFe=a("strong"),kBr=o("albert"),SBr=o(" \u2014 "),jU=a("a"),RBr=o("FlaxAlbertForTokenClassification"),BBr=o(" (ALBERT model)"),PBr=l(),CE=a("li"),oFe=a("strong"),$Br=o("bert"),IBr=o(" \u2014 "),DU=a("a"),qBr=o("FlaxBertForTokenClassification"),NBr=o(" (BERT model)"),jBr=l(),wE=a("li"),rFe=a("strong"),DBr=o("big_bird"),GBr=o(" \u2014 "),GU=a("a"),OBr=o("FlaxBigBirdForTokenClassification"),VBr=o(" (BigBird model)"),XBr=l(),AE=a("li"),tFe=a("strong"),zBr=o("distilbert"),QBr=o(" \u2014 "),OU=a("a"),WBr=o("FlaxDistilBertForTokenClassification"),HBr=o(" (DistilBERT model)"),UBr=l(),yE=a("li"),aFe=a("strong"),JBr=o("electra"),YBr=o(" \u2014 "),VU=a("a"),KBr=o("FlaxElectraForTokenClassification"),ZBr=o(" (ELECTRA model)"),ePr=l(),LE=a("li"),nFe=a("strong"),oPr=o("roberta"),rPr=o(" \u2014 "),XU=a("a"),tPr=o("FlaxRobertaForTokenClassification"),aPr=o(" (RoBERTa model)"),nPr=l(),xE=a("li"),sFe=a("strong"),sPr=o("roformer"),lPr=o(" \u2014 "),zU=a("a"),iPr=o("FlaxRoFormerForTokenClassification"),dPr=o(" (RoFormer model)"),cPr=l(),kE=a("li"),lFe=a("strong"),fPr=o("xlm-roberta"),mPr=o(" \u2014 "),QU=a("a"),gPr=o("FlaxXLMRobertaForTokenClassification"),hPr=o(" (XLM-RoBERTa model)"),pPr=l(),iFe=a("p"),_Pr=o("Examples:"),uPr=l(),f(m7.$$.fragment),eIe=l(),Sf=a("h2"),SE=a("a"),dFe=a("span"),f(g7.$$.fragment),bPr=l(),cFe=a("span"),vPr=o("FlaxAutoModelForMultipleChoice"),oIe=l(),Dr=a("div"),f(h7.$$.fragment),FPr=l(),Rf=a("p"),TPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WU=a("a"),MPr=o("from_pretrained()"),EPr=o(" class method or the "),HU=a("a"),CPr=o("from_config()"),wPr=o(` class
method.`),APr=l(),p7=a("p"),yPr=o("This class cannot be instantiated directly using "),fFe=a("code"),LPr=o("__init__()"),xPr=o(" (throws an error)."),kPr=l(),Pt=a("div"),f(_7.$$.fragment),SPr=l(),mFe=a("p"),RPr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),BPr=l(),Bf=a("p"),PPr=o(`Note:
Loading a model from its configuration file does `),gFe=a("strong"),$Pr=o("not"),IPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=a("a"),qPr=o("from_pretrained()"),NPr=o(" to load the model weights."),jPr=l(),hFe=a("p"),DPr=o("Examples:"),GPr=l(),f(u7.$$.fragment),OPr=l(),Io=a("div"),f(b7.$$.fragment),VPr=l(),pFe=a("p"),XPr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zPr=l(),Nn=a("p"),QPr=o("The model class to instantiate is selected based on the "),_Fe=a("code"),WPr=o("model_type"),HPr=o(` property of the config object (either
passed as an argument or loaded from `),uFe=a("code"),UPr=o("pretrained_model_name_or_path"),JPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=a("code"),YPr=o("pretrained_model_name_or_path"),KPr=o(":"),ZPr=l(),$e=a("ul"),RE=a("li"),vFe=a("strong"),e$r=o("albert"),o$r=o(" \u2014 "),JU=a("a"),r$r=o("FlaxAlbertForMultipleChoice"),t$r=o(" (ALBERT model)"),a$r=l(),BE=a("li"),FFe=a("strong"),n$r=o("bert"),s$r=o(" \u2014 "),YU=a("a"),l$r=o("FlaxBertForMultipleChoice"),i$r=o(" (BERT model)"),d$r=l(),PE=a("li"),TFe=a("strong"),c$r=o("big_bird"),f$r=o(" \u2014 "),KU=a("a"),m$r=o("FlaxBigBirdForMultipleChoice"),g$r=o(" (BigBird model)"),h$r=l(),$E=a("li"),MFe=a("strong"),p$r=o("distilbert"),_$r=o(" \u2014 "),ZU=a("a"),u$r=o("FlaxDistilBertForMultipleChoice"),b$r=o(" (DistilBERT model)"),v$r=l(),IE=a("li"),EFe=a("strong"),F$r=o("electra"),T$r=o(" \u2014 "),eJ=a("a"),M$r=o("FlaxElectraForMultipleChoice"),E$r=o(" (ELECTRA model)"),C$r=l(),qE=a("li"),CFe=a("strong"),w$r=o("roberta"),A$r=o(" \u2014 "),oJ=a("a"),y$r=o("FlaxRobertaForMultipleChoice"),L$r=o(" (RoBERTa model)"),x$r=l(),NE=a("li"),wFe=a("strong"),k$r=o("roformer"),S$r=o(" \u2014 "),rJ=a("a"),R$r=o("FlaxRoFormerForMultipleChoice"),B$r=o(" (RoFormer model)"),P$r=l(),jE=a("li"),AFe=a("strong"),$$r=o("xlm-roberta"),I$r=o(" \u2014 "),tJ=a("a"),q$r=o("FlaxXLMRobertaForMultipleChoice"),N$r=o(" (XLM-RoBERTa model)"),j$r=l(),yFe=a("p"),D$r=o("Examples:"),G$r=l(),f(v7.$$.fragment),rIe=l(),Pf=a("h2"),DE=a("a"),LFe=a("span"),f(F7.$$.fragment),O$r=l(),xFe=a("span"),V$r=o("FlaxAutoModelForNextSentencePrediction"),tIe=l(),Gr=a("div"),f(T7.$$.fragment),X$r=l(),$f=a("p"),z$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aJ=a("a"),Q$r=o("from_pretrained()"),W$r=o(" class method or the "),nJ=a("a"),H$r=o("from_config()"),U$r=o(` class
method.`),J$r=l(),M7=a("p"),Y$r=o("This class cannot be instantiated directly using "),kFe=a("code"),K$r=o("__init__()"),Z$r=o(" (throws an error)."),eIr=l(),$t=a("div"),f(E7.$$.fragment),oIr=l(),SFe=a("p"),rIr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tIr=l(),If=a("p"),aIr=o(`Note:
Loading a model from its configuration file does `),RFe=a("strong"),nIr=o("not"),sIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("a"),lIr=o("from_pretrained()"),iIr=o(" to load the model weights."),dIr=l(),BFe=a("p"),cIr=o("Examples:"),fIr=l(),f(C7.$$.fragment),mIr=l(),qo=a("div"),f(w7.$$.fragment),gIr=l(),PFe=a("p"),hIr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pIr=l(),jn=a("p"),_Ir=o("The model class to instantiate is selected based on the "),$Fe=a("code"),uIr=o("model_type"),bIr=o(` property of the config object (either
passed as an argument or loaded from `),IFe=a("code"),vIr=o("pretrained_model_name_or_path"),FIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=a("code"),TIr=o("pretrained_model_name_or_path"),MIr=o(":"),EIr=l(),NFe=a("ul"),GE=a("li"),jFe=a("strong"),CIr=o("bert"),wIr=o(" \u2014 "),lJ=a("a"),AIr=o("FlaxBertForNextSentencePrediction"),yIr=o(" (BERT model)"),LIr=l(),DFe=a("p"),xIr=o("Examples:"),kIr=l(),f(A7.$$.fragment),aIe=l(),qf=a("h2"),OE=a("a"),GFe=a("span"),f(y7.$$.fragment),SIr=l(),OFe=a("span"),RIr=o("FlaxAutoModelForImageClassification"),nIe=l(),Or=a("div"),f(L7.$$.fragment),BIr=l(),Nf=a("p"),PIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iJ=a("a"),$Ir=o("from_pretrained()"),IIr=o(" class method or the "),dJ=a("a"),qIr=o("from_config()"),NIr=o(` class
method.`),jIr=l(),x7=a("p"),DIr=o("This class cannot be instantiated directly using "),VFe=a("code"),GIr=o("__init__()"),OIr=o(" (throws an error)."),VIr=l(),It=a("div"),f(k7.$$.fragment),XIr=l(),XFe=a("p"),zIr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),QIr=l(),jf=a("p"),WIr=o(`Note:
Loading a model from its configuration file does `),zFe=a("strong"),HIr=o("not"),UIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=a("a"),JIr=o("from_pretrained()"),YIr=o(" to load the model weights."),KIr=l(),QFe=a("p"),ZIr=o("Examples:"),eqr=l(),f(S7.$$.fragment),oqr=l(),No=a("div"),f(R7.$$.fragment),rqr=l(),WFe=a("p"),tqr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),aqr=l(),Dn=a("p"),nqr=o("The model class to instantiate is selected based on the "),HFe=a("code"),sqr=o("model_type"),lqr=o(` property of the config object (either
passed as an argument or loaded from `),UFe=a("code"),iqr=o("pretrained_model_name_or_path"),dqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=a("code"),cqr=o("pretrained_model_name_or_path"),fqr=o(":"),mqr=l(),B7=a("ul"),VE=a("li"),YFe=a("strong"),gqr=o("beit"),hqr=o(" \u2014 "),fJ=a("a"),pqr=o("FlaxBeitForImageClassification"),_qr=o(" (BEiT model)"),uqr=l(),XE=a("li"),KFe=a("strong"),bqr=o("vit"),vqr=o(" \u2014 "),mJ=a("a"),Fqr=o("FlaxViTForImageClassification"),Tqr=o(" (ViT model)"),Mqr=l(),ZFe=a("p"),Eqr=o("Examples:"),Cqr=l(),f(P7.$$.fragment),sIe=l(),Df=a("h2"),zE=a("a"),eTe=a("span"),f($7.$$.fragment),wqr=l(),oTe=a("span"),Aqr=o("FlaxAutoModelForVision2Seq"),lIe=l(),Vr=a("div"),f(I7.$$.fragment),yqr=l(),Gf=a("p"),Lqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gJ=a("a"),xqr=o("from_pretrained()"),kqr=o(" class method or the "),hJ=a("a"),Sqr=o("from_config()"),Rqr=o(` class
method.`),Bqr=l(),q7=a("p"),Pqr=o("This class cannot be instantiated directly using "),rTe=a("code"),$qr=o("__init__()"),Iqr=o(" (throws an error)."),qqr=l(),qt=a("div"),f(N7.$$.fragment),Nqr=l(),tTe=a("p"),jqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Dqr=l(),Of=a("p"),Gqr=o(`Note:
Loading a model from its configuration file does `),aTe=a("strong"),Oqr=o("not"),Vqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=a("a"),Xqr=o("from_pretrained()"),zqr=o(" to load the model weights."),Qqr=l(),nTe=a("p"),Wqr=o("Examples:"),Hqr=l(),f(j7.$$.fragment),Uqr=l(),jo=a("div"),f(D7.$$.fragment),Jqr=l(),sTe=a("p"),Yqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Kqr=l(),Gn=a("p"),Zqr=o("The model class to instantiate is selected based on the "),lTe=a("code"),eNr=o("model_type"),oNr=o(` property of the config object (either
passed as an argument or loaded from `),iTe=a("code"),rNr=o("pretrained_model_name_or_path"),tNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dTe=a("code"),aNr=o("pretrained_model_name_or_path"),nNr=o(":"),sNr=l(),cTe=a("ul"),QE=a("li"),fTe=a("strong"),lNr=o("vision-encoder-decoder"),iNr=o(" \u2014 "),_J=a("a"),dNr=o("FlaxVisionEncoderDecoderModel"),cNr=o(" (Vision Encoder decoder model)"),fNr=l(),mTe=a("p"),mNr=o("Examples:"),gNr=l(),f(G7.$$.fragment),this.h()},l(c){const u=H8t('[data-svelte="svelte-1phssyn"]',document.head);oe=n(u,"META",{name:!0,content:!0}),u.forEach(t),co=i(c),ge=n(c,"H1",{class:!0});var O7=s(ge);Ae=n(O7,"A",{id:!0,class:!0,href:!0});var gTe=s(Ae);io=n(gTe,"SPAN",{});var hTe=s(io);m(ue.$$.fragment,hTe),hTe.forEach(t),gTe.forEach(t),Ce=i(O7),Xo=n(O7,"SPAN",{});var pNr=s(Xo);zi=r(pNr,"Auto Classes"),pNr.forEach(t),O7.forEach(t),zf=i(c),fa=n(c,"P",{});var dIe=s(fa);Qi=r(dIe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Wi=n(dIe,"CODE",{});var _Nr=s(Wi);WC=r(_Nr,"from_pretrained()"),_Nr.forEach(t),Qf=r(dIe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),dIe.forEach(t),Se=i(c),fo=n(c,"P",{});var WE=s(fo);Hi=r(WE,"Instantiating one of "),On=n(WE,"A",{href:!0});var uNr=s(On);HC=r(uNr,"AutoConfig"),uNr.forEach(t),Vn=r(WE,", "),Xn=n(WE,"A",{href:!0});var bNr=s(Xn);UC=r(bNr,"AutoModel"),bNr.forEach(t),Ui=r(WE,`, and
`),zn=n(WE,"A",{href:!0});var vNr=s(zn);JC=r(vNr,"AutoTokenizer"),vNr.forEach(t),Ji=r(WE," will directly create a class of the relevant architecture. For instance"),WE.forEach(t),Wf=i(c),m(Da.$$.fragment,c),mo=i(c),ve=n(c,"P",{});var cIe=s(ve);W9=r(cIe,"will create a model that is an instance of "),Yi=n(cIe,"A",{href:!0});var FNr=s(Yi);H9=r(FNr,"BertModel"),FNr.forEach(t),U9=r(cIe,"."),cIe.forEach(t),zo=i(c),Ga=n(c,"P",{});var fIe=s(Ga);J9=r(fIe,"There is one class of "),Hf=n(fIe,"CODE",{});var TNr=s(Hf);Y9=r(TNr,"AutoModel"),TNr.forEach(t),FNe=r(fIe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),fIe.forEach(t),lPe=i(c),Ki=n(c,"H2",{class:!0});var mIe=s(Ki);Uf=n(mIe,"A",{id:!0,class:!0,href:!0});var MNr=s(Uf);dK=n(MNr,"SPAN",{});var ENr=s(dK);m(YC.$$.fragment,ENr),ENr.forEach(t),MNr.forEach(t),TNe=i(mIe),cK=n(mIe,"SPAN",{});var CNr=s(cK);MNe=r(CNr,"Extending the Auto Classes"),CNr.forEach(t),mIe.forEach(t),iPe=i(c),Qn=n(c,"P",{});var uJ=s(Qn);ENe=r(uJ,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),fK=n(uJ,"CODE",{});var wNr=s(fK);CNe=r(wNr,"NewModel"),wNr.forEach(t),wNe=r(uJ,", make sure you have a "),mK=n(uJ,"CODE",{});var ANr=s(mK);ANe=r(ANr,"NewModelConfig"),ANr.forEach(t),yNe=r(uJ,` then you can add those to the auto
classes like this:`),uJ.forEach(t),dPe=i(c),m(KC.$$.fragment,c),cPe=i(c),K9=n(c,"P",{});var yNr=s(K9);LNe=r(yNr,"You will then be able to use the auto classes like you would usually do!"),yNr.forEach(t),fPe=i(c),m(Jf.$$.fragment,c),mPe=i(c),Zi=n(c,"H2",{class:!0});var gIe=s(Zi);Yf=n(gIe,"A",{id:!0,class:!0,href:!0});var LNr=s(Yf);gK=n(LNr,"SPAN",{});var xNr=s(gK);m(ZC.$$.fragment,xNr),xNr.forEach(t),LNr.forEach(t),xNe=i(gIe),hK=n(gIe,"SPAN",{});var kNr=s(hK);kNe=r(kNr,"AutoConfig"),kNr.forEach(t),gIe.forEach(t),gPe=i(c),Qo=n(c,"DIV",{class:!0});var Ys=s(Qo);m(ew.$$.fragment,Ys),SNe=i(Ys),ow=n(Ys,"P",{});var hIe=s(ow);RNe=r(hIe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Z9=n(hIe,"A",{href:!0});var SNr=s(Z9);BNe=r(SNr,"from_pretrained()"),SNr.forEach(t),PNe=r(hIe," class method."),hIe.forEach(t),$Ne=i(Ys),rw=n(Ys,"P",{});var pIe=s(rw);INe=r(pIe,"This class cannot be instantiated directly using "),pK=n(pIe,"CODE",{});var RNr=s(pK);qNe=r(RNr,"__init__()"),RNr.forEach(t),NNe=r(pIe," (throws an error)."),pIe.forEach(t),jNe=i(Ys),go=n(Ys,"DIV",{class:!0});var ga=s(go);m(tw.$$.fragment,ga),DNe=i(ga),_K=n(ga,"P",{});var BNr=s(_K);GNe=r(BNr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),BNr.forEach(t),ONe=i(ga),ed=n(ga,"P",{});var bJ=s(ed);VNe=r(bJ,"The configuration class to instantiate is selected based on the "),uK=n(bJ,"CODE",{});var PNr=s(uK);XNe=r(PNr,"model_type"),PNr.forEach(t),zNe=r(bJ,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),bK=n(bJ,"CODE",{});var $Nr=s(bK);QNe=r($Nr,"pretrained_model_name_or_path"),$Nr.forEach(t),WNe=r(bJ,":"),bJ.forEach(t),HNe=i(ga),v=n(ga,"UL",{});var F=s(v);Kf=n(F,"LI",{});var pTe=s(Kf);vK=n(pTe,"STRONG",{});var INr=s(vK);UNe=r(INr,"albert"),INr.forEach(t),JNe=r(pTe," \u2014 "),ex=n(pTe,"A",{href:!0});var qNr=s(ex);YNe=r(qNr,"AlbertConfig"),qNr.forEach(t),KNe=r(pTe," (ALBERT model)"),pTe.forEach(t),ZNe=i(F),Zf=n(F,"LI",{});var _Te=s(Zf);FK=n(_Te,"STRONG",{});var NNr=s(FK);eje=r(NNr,"bart"),NNr.forEach(t),oje=r(_Te," \u2014 "),ox=n(_Te,"A",{href:!0});var jNr=s(ox);rje=r(jNr,"BartConfig"),jNr.forEach(t),tje=r(_Te," (BART model)"),_Te.forEach(t),aje=i(F),em=n(F,"LI",{});var uTe=s(em);TK=n(uTe,"STRONG",{});var DNr=s(TK);nje=r(DNr,"beit"),DNr.forEach(t),sje=r(uTe," \u2014 "),rx=n(uTe,"A",{href:!0});var GNr=s(rx);lje=r(GNr,"BeitConfig"),GNr.forEach(t),ije=r(uTe," (BEiT model)"),uTe.forEach(t),dje=i(F),om=n(F,"LI",{});var bTe=s(om);MK=n(bTe,"STRONG",{});var ONr=s(MK);cje=r(ONr,"bert"),ONr.forEach(t),fje=r(bTe," \u2014 "),tx=n(bTe,"A",{href:!0});var VNr=s(tx);mje=r(VNr,"BertConfig"),VNr.forEach(t),gje=r(bTe," (BERT model)"),bTe.forEach(t),hje=i(F),rm=n(F,"LI",{});var vTe=s(rm);EK=n(vTe,"STRONG",{});var XNr=s(EK);pje=r(XNr,"bert-generation"),XNr.forEach(t),_je=r(vTe," \u2014 "),ax=n(vTe,"A",{href:!0});var zNr=s(ax);uje=r(zNr,"BertGenerationConfig"),zNr.forEach(t),bje=r(vTe," (Bert Generation model)"),vTe.forEach(t),vje=i(F),tm=n(F,"LI",{});var FTe=s(tm);CK=n(FTe,"STRONG",{});var QNr=s(CK);Fje=r(QNr,"big_bird"),QNr.forEach(t),Tje=r(FTe," \u2014 "),nx=n(FTe,"A",{href:!0});var WNr=s(nx);Mje=r(WNr,"BigBirdConfig"),WNr.forEach(t),Eje=r(FTe," (BigBird model)"),FTe.forEach(t),Cje=i(F),am=n(F,"LI",{});var TTe=s(am);wK=n(TTe,"STRONG",{});var HNr=s(wK);wje=r(HNr,"bigbird_pegasus"),HNr.forEach(t),Aje=r(TTe," \u2014 "),sx=n(TTe,"A",{href:!0});var UNr=s(sx);yje=r(UNr,"BigBirdPegasusConfig"),UNr.forEach(t),Lje=r(TTe," (BigBirdPegasus model)"),TTe.forEach(t),xje=i(F),nm=n(F,"LI",{});var MTe=s(nm);AK=n(MTe,"STRONG",{});var JNr=s(AK);kje=r(JNr,"blenderbot"),JNr.forEach(t),Sje=r(MTe," \u2014 "),lx=n(MTe,"A",{href:!0});var YNr=s(lx);Rje=r(YNr,"BlenderbotConfig"),YNr.forEach(t),Bje=r(MTe," (Blenderbot model)"),MTe.forEach(t),Pje=i(F),sm=n(F,"LI",{});var ETe=s(sm);yK=n(ETe,"STRONG",{});var KNr=s(yK);$je=r(KNr,"blenderbot-small"),KNr.forEach(t),Ije=r(ETe," \u2014 "),ix=n(ETe,"A",{href:!0});var ZNr=s(ix);qje=r(ZNr,"BlenderbotSmallConfig"),ZNr.forEach(t),Nje=r(ETe," (BlenderbotSmall model)"),ETe.forEach(t),jje=i(F),lm=n(F,"LI",{});var CTe=s(lm);LK=n(CTe,"STRONG",{});var ejr=s(LK);Dje=r(ejr,"camembert"),ejr.forEach(t),Gje=r(CTe," \u2014 "),dx=n(CTe,"A",{href:!0});var ojr=s(dx);Oje=r(ojr,"CamembertConfig"),ojr.forEach(t),Vje=r(CTe," (CamemBERT model)"),CTe.forEach(t),Xje=i(F),im=n(F,"LI",{});var wTe=s(im);xK=n(wTe,"STRONG",{});var rjr=s(xK);zje=r(rjr,"canine"),rjr.forEach(t),Qje=r(wTe," \u2014 "),cx=n(wTe,"A",{href:!0});var tjr=s(cx);Wje=r(tjr,"CanineConfig"),tjr.forEach(t),Hje=r(wTe," (Canine model)"),wTe.forEach(t),Uje=i(F),dm=n(F,"LI",{});var ATe=s(dm);kK=n(ATe,"STRONG",{});var ajr=s(kK);Jje=r(ajr,"clip"),ajr.forEach(t),Yje=r(ATe," \u2014 "),fx=n(ATe,"A",{href:!0});var njr=s(fx);Kje=r(njr,"CLIPConfig"),njr.forEach(t),Zje=r(ATe," (CLIP model)"),ATe.forEach(t),eDe=i(F),cm=n(F,"LI",{});var yTe=s(cm);SK=n(yTe,"STRONG",{});var sjr=s(SK);oDe=r(sjr,"convbert"),sjr.forEach(t),rDe=r(yTe," \u2014 "),mx=n(yTe,"A",{href:!0});var ljr=s(mx);tDe=r(ljr,"ConvBertConfig"),ljr.forEach(t),aDe=r(yTe," (ConvBERT model)"),yTe.forEach(t),nDe=i(F),fm=n(F,"LI",{});var LTe=s(fm);RK=n(LTe,"STRONG",{});var ijr=s(RK);sDe=r(ijr,"convnext"),ijr.forEach(t),lDe=r(LTe," \u2014 "),gx=n(LTe,"A",{href:!0});var djr=s(gx);iDe=r(djr,"ConvNextConfig"),djr.forEach(t),dDe=r(LTe," (ConvNext model)"),LTe.forEach(t),cDe=i(F),mm=n(F,"LI",{});var xTe=s(mm);BK=n(xTe,"STRONG",{});var cjr=s(BK);fDe=r(cjr,"ctrl"),cjr.forEach(t),mDe=r(xTe," \u2014 "),hx=n(xTe,"A",{href:!0});var fjr=s(hx);gDe=r(fjr,"CTRLConfig"),fjr.forEach(t),hDe=r(xTe," (CTRL model)"),xTe.forEach(t),pDe=i(F),gm=n(F,"LI",{});var kTe=s(gm);PK=n(kTe,"STRONG",{});var mjr=s(PK);_De=r(mjr,"data2vec-audio"),mjr.forEach(t),uDe=r(kTe," \u2014 "),px=n(kTe,"A",{href:!0});var gjr=s(px);bDe=r(gjr,"Data2VecAudioConfig"),gjr.forEach(t),vDe=r(kTe," (Data2VecAudio model)"),kTe.forEach(t),FDe=i(F),hm=n(F,"LI",{});var STe=s(hm);$K=n(STe,"STRONG",{});var hjr=s($K);TDe=r(hjr,"data2vec-text"),hjr.forEach(t),MDe=r(STe," \u2014 "),_x=n(STe,"A",{href:!0});var pjr=s(_x);EDe=r(pjr,"Data2VecTextConfig"),pjr.forEach(t),CDe=r(STe," (Data2VecText model)"),STe.forEach(t),wDe=i(F),pm=n(F,"LI",{});var RTe=s(pm);IK=n(RTe,"STRONG",{});var _jr=s(IK);ADe=r(_jr,"data2vec-vision"),_jr.forEach(t),yDe=r(RTe," \u2014 "),ux=n(RTe,"A",{href:!0});var ujr=s(ux);LDe=r(ujr,"Data2VecVisionConfig"),ujr.forEach(t),xDe=r(RTe," (Data2VecVision model)"),RTe.forEach(t),kDe=i(F),_m=n(F,"LI",{});var BTe=s(_m);qK=n(BTe,"STRONG",{});var bjr=s(qK);SDe=r(bjr,"deberta"),bjr.forEach(t),RDe=r(BTe," \u2014 "),bx=n(BTe,"A",{href:!0});var vjr=s(bx);BDe=r(vjr,"DebertaConfig"),vjr.forEach(t),PDe=r(BTe," (DeBERTa model)"),BTe.forEach(t),$De=i(F),um=n(F,"LI",{});var PTe=s(um);NK=n(PTe,"STRONG",{});var Fjr=s(NK);IDe=r(Fjr,"deberta-v2"),Fjr.forEach(t),qDe=r(PTe," \u2014 "),vx=n(PTe,"A",{href:!0});var Tjr=s(vx);NDe=r(Tjr,"DebertaV2Config"),Tjr.forEach(t),jDe=r(PTe," (DeBERTa-v2 model)"),PTe.forEach(t),DDe=i(F),bm=n(F,"LI",{});var $Te=s(bm);jK=n($Te,"STRONG",{});var Mjr=s(jK);GDe=r(Mjr,"decision_transformer"),Mjr.forEach(t),ODe=r($Te," \u2014 "),Fx=n($Te,"A",{href:!0});var Ejr=s(Fx);VDe=r(Ejr,"DecisionTransformerConfig"),Ejr.forEach(t),XDe=r($Te," (Decision Transformer model)"),$Te.forEach(t),zDe=i(F),vm=n(F,"LI",{});var ITe=s(vm);DK=n(ITe,"STRONG",{});var Cjr=s(DK);QDe=r(Cjr,"deit"),Cjr.forEach(t),WDe=r(ITe," \u2014 "),Tx=n(ITe,"A",{href:!0});var wjr=s(Tx);HDe=r(wjr,"DeiTConfig"),wjr.forEach(t),UDe=r(ITe," (DeiT model)"),ITe.forEach(t),JDe=i(F),Fm=n(F,"LI",{});var qTe=s(Fm);GK=n(qTe,"STRONG",{});var Ajr=s(GK);YDe=r(Ajr,"detr"),Ajr.forEach(t),KDe=r(qTe," \u2014 "),Mx=n(qTe,"A",{href:!0});var yjr=s(Mx);ZDe=r(yjr,"DetrConfig"),yjr.forEach(t),eGe=r(qTe," (DETR model)"),qTe.forEach(t),oGe=i(F),Tm=n(F,"LI",{});var NTe=s(Tm);OK=n(NTe,"STRONG",{});var Ljr=s(OK);rGe=r(Ljr,"distilbert"),Ljr.forEach(t),tGe=r(NTe," \u2014 "),Ex=n(NTe,"A",{href:!0});var xjr=s(Ex);aGe=r(xjr,"DistilBertConfig"),xjr.forEach(t),nGe=r(NTe," (DistilBERT model)"),NTe.forEach(t),sGe=i(F),Mm=n(F,"LI",{});var jTe=s(Mm);VK=n(jTe,"STRONG",{});var kjr=s(VK);lGe=r(kjr,"dpr"),kjr.forEach(t),iGe=r(jTe," \u2014 "),Cx=n(jTe,"A",{href:!0});var Sjr=s(Cx);dGe=r(Sjr,"DPRConfig"),Sjr.forEach(t),cGe=r(jTe," (DPR model)"),jTe.forEach(t),fGe=i(F),Em=n(F,"LI",{});var DTe=s(Em);XK=n(DTe,"STRONG",{});var Rjr=s(XK);mGe=r(Rjr,"dpt"),Rjr.forEach(t),gGe=r(DTe," \u2014 "),wx=n(DTe,"A",{href:!0});var Bjr=s(wx);hGe=r(Bjr,"DPTConfig"),Bjr.forEach(t),pGe=r(DTe," (DPT model)"),DTe.forEach(t),_Ge=i(F),Cm=n(F,"LI",{});var GTe=s(Cm);zK=n(GTe,"STRONG",{});var Pjr=s(zK);uGe=r(Pjr,"electra"),Pjr.forEach(t),bGe=r(GTe," \u2014 "),Ax=n(GTe,"A",{href:!0});var $jr=s(Ax);vGe=r($jr,"ElectraConfig"),$jr.forEach(t),FGe=r(GTe," (ELECTRA model)"),GTe.forEach(t),TGe=i(F),wm=n(F,"LI",{});var OTe=s(wm);QK=n(OTe,"STRONG",{});var Ijr=s(QK);MGe=r(Ijr,"encoder-decoder"),Ijr.forEach(t),EGe=r(OTe," \u2014 "),yx=n(OTe,"A",{href:!0});var qjr=s(yx);CGe=r(qjr,"EncoderDecoderConfig"),qjr.forEach(t),wGe=r(OTe," (Encoder decoder model)"),OTe.forEach(t),AGe=i(F),Am=n(F,"LI",{});var VTe=s(Am);WK=n(VTe,"STRONG",{});var Njr=s(WK);yGe=r(Njr,"flaubert"),Njr.forEach(t),LGe=r(VTe," \u2014 "),Lx=n(VTe,"A",{href:!0});var jjr=s(Lx);xGe=r(jjr,"FlaubertConfig"),jjr.forEach(t),kGe=r(VTe," (FlauBERT model)"),VTe.forEach(t),SGe=i(F),ym=n(F,"LI",{});var XTe=s(ym);HK=n(XTe,"STRONG",{});var Djr=s(HK);RGe=r(Djr,"fnet"),Djr.forEach(t),BGe=r(XTe," \u2014 "),xx=n(XTe,"A",{href:!0});var Gjr=s(xx);PGe=r(Gjr,"FNetConfig"),Gjr.forEach(t),$Ge=r(XTe," (FNet model)"),XTe.forEach(t),IGe=i(F),Lm=n(F,"LI",{});var zTe=s(Lm);UK=n(zTe,"STRONG",{});var Ojr=s(UK);qGe=r(Ojr,"fsmt"),Ojr.forEach(t),NGe=r(zTe," \u2014 "),kx=n(zTe,"A",{href:!0});var Vjr=s(kx);jGe=r(Vjr,"FSMTConfig"),Vjr.forEach(t),DGe=r(zTe," (FairSeq Machine-Translation model)"),zTe.forEach(t),GGe=i(F),xm=n(F,"LI",{});var QTe=s(xm);JK=n(QTe,"STRONG",{});var Xjr=s(JK);OGe=r(Xjr,"funnel"),Xjr.forEach(t),VGe=r(QTe," \u2014 "),Sx=n(QTe,"A",{href:!0});var zjr=s(Sx);XGe=r(zjr,"FunnelConfig"),zjr.forEach(t),zGe=r(QTe," (Funnel Transformer model)"),QTe.forEach(t),QGe=i(F),km=n(F,"LI",{});var WTe=s(km);YK=n(WTe,"STRONG",{});var Qjr=s(YK);WGe=r(Qjr,"glpn"),Qjr.forEach(t),HGe=r(WTe," \u2014 "),Rx=n(WTe,"A",{href:!0});var Wjr=s(Rx);UGe=r(Wjr,"GLPNConfig"),Wjr.forEach(t),JGe=r(WTe," (GLPN model)"),WTe.forEach(t),YGe=i(F),Sm=n(F,"LI",{});var HTe=s(Sm);KK=n(HTe,"STRONG",{});var Hjr=s(KK);KGe=r(Hjr,"gpt2"),Hjr.forEach(t),ZGe=r(HTe," \u2014 "),Bx=n(HTe,"A",{href:!0});var Ujr=s(Bx);eOe=r(Ujr,"GPT2Config"),Ujr.forEach(t),oOe=r(HTe," (OpenAI GPT-2 model)"),HTe.forEach(t),rOe=i(F),Rm=n(F,"LI",{});var UTe=s(Rm);ZK=n(UTe,"STRONG",{});var Jjr=s(ZK);tOe=r(Jjr,"gpt_neo"),Jjr.forEach(t),aOe=r(UTe," \u2014 "),Px=n(UTe,"A",{href:!0});var Yjr=s(Px);nOe=r(Yjr,"GPTNeoConfig"),Yjr.forEach(t),sOe=r(UTe," (GPT Neo model)"),UTe.forEach(t),lOe=i(F),Bm=n(F,"LI",{});var JTe=s(Bm);eZ=n(JTe,"STRONG",{});var Kjr=s(eZ);iOe=r(Kjr,"gptj"),Kjr.forEach(t),dOe=r(JTe," \u2014 "),$x=n(JTe,"A",{href:!0});var Zjr=s($x);cOe=r(Zjr,"GPTJConfig"),Zjr.forEach(t),fOe=r(JTe," (GPT-J model)"),JTe.forEach(t),mOe=i(F),Pm=n(F,"LI",{});var YTe=s(Pm);oZ=n(YTe,"STRONG",{});var eDr=s(oZ);gOe=r(eDr,"hubert"),eDr.forEach(t),hOe=r(YTe," \u2014 "),Ix=n(YTe,"A",{href:!0});var oDr=s(Ix);pOe=r(oDr,"HubertConfig"),oDr.forEach(t),_Oe=r(YTe," (Hubert model)"),YTe.forEach(t),uOe=i(F),$m=n(F,"LI",{});var KTe=s($m);rZ=n(KTe,"STRONG",{});var rDr=s(rZ);bOe=r(rDr,"ibert"),rDr.forEach(t),vOe=r(KTe," \u2014 "),qx=n(KTe,"A",{href:!0});var tDr=s(qx);FOe=r(tDr,"IBertConfig"),tDr.forEach(t),TOe=r(KTe," (I-BERT model)"),KTe.forEach(t),MOe=i(F),Im=n(F,"LI",{});var ZTe=s(Im);tZ=n(ZTe,"STRONG",{});var aDr=s(tZ);EOe=r(aDr,"imagegpt"),aDr.forEach(t),COe=r(ZTe," \u2014 "),Nx=n(ZTe,"A",{href:!0});var nDr=s(Nx);wOe=r(nDr,"ImageGPTConfig"),nDr.forEach(t),AOe=r(ZTe," (ImageGPT model)"),ZTe.forEach(t),yOe=i(F),qm=n(F,"LI",{});var eMe=s(qm);aZ=n(eMe,"STRONG",{});var sDr=s(aZ);LOe=r(sDr,"layoutlm"),sDr.forEach(t),xOe=r(eMe," \u2014 "),jx=n(eMe,"A",{href:!0});var lDr=s(jx);kOe=r(lDr,"LayoutLMConfig"),lDr.forEach(t),SOe=r(eMe," (LayoutLM model)"),eMe.forEach(t),ROe=i(F),Nm=n(F,"LI",{});var oMe=s(Nm);nZ=n(oMe,"STRONG",{});var iDr=s(nZ);BOe=r(iDr,"layoutlmv2"),iDr.forEach(t),POe=r(oMe," \u2014 "),Dx=n(oMe,"A",{href:!0});var dDr=s(Dx);$Oe=r(dDr,"LayoutLMv2Config"),dDr.forEach(t),IOe=r(oMe," (LayoutLMv2 model)"),oMe.forEach(t),qOe=i(F),jm=n(F,"LI",{});var rMe=s(jm);sZ=n(rMe,"STRONG",{});var cDr=s(sZ);NOe=r(cDr,"led"),cDr.forEach(t),jOe=r(rMe," \u2014 "),Gx=n(rMe,"A",{href:!0});var fDr=s(Gx);DOe=r(fDr,"LEDConfig"),fDr.forEach(t),GOe=r(rMe," (LED model)"),rMe.forEach(t),OOe=i(F),Dm=n(F,"LI",{});var tMe=s(Dm);lZ=n(tMe,"STRONG",{});var mDr=s(lZ);VOe=r(mDr,"longformer"),mDr.forEach(t),XOe=r(tMe," \u2014 "),Ox=n(tMe,"A",{href:!0});var gDr=s(Ox);zOe=r(gDr,"LongformerConfig"),gDr.forEach(t),QOe=r(tMe," (Longformer model)"),tMe.forEach(t),WOe=i(F),Gm=n(F,"LI",{});var aMe=s(Gm);iZ=n(aMe,"STRONG",{});var hDr=s(iZ);HOe=r(hDr,"luke"),hDr.forEach(t),UOe=r(aMe," \u2014 "),Vx=n(aMe,"A",{href:!0});var pDr=s(Vx);JOe=r(pDr,"LukeConfig"),pDr.forEach(t),YOe=r(aMe," (LUKE model)"),aMe.forEach(t),KOe=i(F),Om=n(F,"LI",{});var nMe=s(Om);dZ=n(nMe,"STRONG",{});var _Dr=s(dZ);ZOe=r(_Dr,"lxmert"),_Dr.forEach(t),eVe=r(nMe," \u2014 "),Xx=n(nMe,"A",{href:!0});var uDr=s(Xx);oVe=r(uDr,"LxmertConfig"),uDr.forEach(t),rVe=r(nMe," (LXMERT model)"),nMe.forEach(t),tVe=i(F),Vm=n(F,"LI",{});var sMe=s(Vm);cZ=n(sMe,"STRONG",{});var bDr=s(cZ);aVe=r(bDr,"m2m_100"),bDr.forEach(t),nVe=r(sMe," \u2014 "),zx=n(sMe,"A",{href:!0});var vDr=s(zx);sVe=r(vDr,"M2M100Config"),vDr.forEach(t),lVe=r(sMe," (M2M100 model)"),sMe.forEach(t),iVe=i(F),Xm=n(F,"LI",{});var lMe=s(Xm);fZ=n(lMe,"STRONG",{});var FDr=s(fZ);dVe=r(FDr,"marian"),FDr.forEach(t),cVe=r(lMe," \u2014 "),Qx=n(lMe,"A",{href:!0});var TDr=s(Qx);fVe=r(TDr,"MarianConfig"),TDr.forEach(t),mVe=r(lMe," (Marian model)"),lMe.forEach(t),gVe=i(F),zm=n(F,"LI",{});var iMe=s(zm);mZ=n(iMe,"STRONG",{});var MDr=s(mZ);hVe=r(MDr,"maskformer"),MDr.forEach(t),pVe=r(iMe," \u2014 "),Wx=n(iMe,"A",{href:!0});var EDr=s(Wx);_Ve=r(EDr,"MaskFormerConfig"),EDr.forEach(t),uVe=r(iMe," (MaskFormer model)"),iMe.forEach(t),bVe=i(F),Qm=n(F,"LI",{});var dMe=s(Qm);gZ=n(dMe,"STRONG",{});var CDr=s(gZ);vVe=r(CDr,"mbart"),CDr.forEach(t),FVe=r(dMe," \u2014 "),Hx=n(dMe,"A",{href:!0});var wDr=s(Hx);TVe=r(wDr,"MBartConfig"),wDr.forEach(t),MVe=r(dMe," (mBART model)"),dMe.forEach(t),EVe=i(F),Wm=n(F,"LI",{});var cMe=s(Wm);hZ=n(cMe,"STRONG",{});var ADr=s(hZ);CVe=r(ADr,"megatron-bert"),ADr.forEach(t),wVe=r(cMe," \u2014 "),Ux=n(cMe,"A",{href:!0});var yDr=s(Ux);AVe=r(yDr,"MegatronBertConfig"),yDr.forEach(t),yVe=r(cMe," (MegatronBert model)"),cMe.forEach(t),LVe=i(F),Hm=n(F,"LI",{});var fMe=s(Hm);pZ=n(fMe,"STRONG",{});var LDr=s(pZ);xVe=r(LDr,"mobilebert"),LDr.forEach(t),kVe=r(fMe," \u2014 "),Jx=n(fMe,"A",{href:!0});var xDr=s(Jx);SVe=r(xDr,"MobileBertConfig"),xDr.forEach(t),RVe=r(fMe," (MobileBERT model)"),fMe.forEach(t),BVe=i(F),Um=n(F,"LI",{});var mMe=s(Um);_Z=n(mMe,"STRONG",{});var kDr=s(_Z);PVe=r(kDr,"mpnet"),kDr.forEach(t),$Ve=r(mMe," \u2014 "),Yx=n(mMe,"A",{href:!0});var SDr=s(Yx);IVe=r(SDr,"MPNetConfig"),SDr.forEach(t),qVe=r(mMe," (MPNet model)"),mMe.forEach(t),NVe=i(F),Jm=n(F,"LI",{});var gMe=s(Jm);uZ=n(gMe,"STRONG",{});var RDr=s(uZ);jVe=r(RDr,"mt5"),RDr.forEach(t),DVe=r(gMe," \u2014 "),Kx=n(gMe,"A",{href:!0});var BDr=s(Kx);GVe=r(BDr,"MT5Config"),BDr.forEach(t),OVe=r(gMe," (mT5 model)"),gMe.forEach(t),VVe=i(F),Ym=n(F,"LI",{});var hMe=s(Ym);bZ=n(hMe,"STRONG",{});var PDr=s(bZ);XVe=r(PDr,"nystromformer"),PDr.forEach(t),zVe=r(hMe," \u2014 "),Zx=n(hMe,"A",{href:!0});var $Dr=s(Zx);QVe=r($Dr,"NystromformerConfig"),$Dr.forEach(t),WVe=r(hMe," (Nystromformer model)"),hMe.forEach(t),HVe=i(F),Km=n(F,"LI",{});var pMe=s(Km);vZ=n(pMe,"STRONG",{});var IDr=s(vZ);UVe=r(IDr,"openai-gpt"),IDr.forEach(t),JVe=r(pMe," \u2014 "),ek=n(pMe,"A",{href:!0});var qDr=s(ek);YVe=r(qDr,"OpenAIGPTConfig"),qDr.forEach(t),KVe=r(pMe," (OpenAI GPT model)"),pMe.forEach(t),ZVe=i(F),Zm=n(F,"LI",{});var _Me=s(Zm);FZ=n(_Me,"STRONG",{});var NDr=s(FZ);eXe=r(NDr,"pegasus"),NDr.forEach(t),oXe=r(_Me," \u2014 "),ok=n(_Me,"A",{href:!0});var jDr=s(ok);rXe=r(jDr,"PegasusConfig"),jDr.forEach(t),tXe=r(_Me," (Pegasus model)"),_Me.forEach(t),aXe=i(F),eg=n(F,"LI",{});var uMe=s(eg);TZ=n(uMe,"STRONG",{});var DDr=s(TZ);nXe=r(DDr,"perceiver"),DDr.forEach(t),sXe=r(uMe," \u2014 "),rk=n(uMe,"A",{href:!0});var GDr=s(rk);lXe=r(GDr,"PerceiverConfig"),GDr.forEach(t),iXe=r(uMe," (Perceiver model)"),uMe.forEach(t),dXe=i(F),og=n(F,"LI",{});var bMe=s(og);MZ=n(bMe,"STRONG",{});var ODr=s(MZ);cXe=r(ODr,"plbart"),ODr.forEach(t),fXe=r(bMe," \u2014 "),tk=n(bMe,"A",{href:!0});var VDr=s(tk);mXe=r(VDr,"PLBartConfig"),VDr.forEach(t),gXe=r(bMe," (PLBart model)"),bMe.forEach(t),hXe=i(F),rg=n(F,"LI",{});var vMe=s(rg);EZ=n(vMe,"STRONG",{});var XDr=s(EZ);pXe=r(XDr,"poolformer"),XDr.forEach(t),_Xe=r(vMe," \u2014 "),ak=n(vMe,"A",{href:!0});var zDr=s(ak);uXe=r(zDr,"PoolFormerConfig"),zDr.forEach(t),bXe=r(vMe," (PoolFormer model)"),vMe.forEach(t),vXe=i(F),tg=n(F,"LI",{});var FMe=s(tg);CZ=n(FMe,"STRONG",{});var QDr=s(CZ);FXe=r(QDr,"prophetnet"),QDr.forEach(t),TXe=r(FMe," \u2014 "),nk=n(FMe,"A",{href:!0});var WDr=s(nk);MXe=r(WDr,"ProphetNetConfig"),WDr.forEach(t),EXe=r(FMe," (ProphetNet model)"),FMe.forEach(t),CXe=i(F),ag=n(F,"LI",{});var TMe=s(ag);wZ=n(TMe,"STRONG",{});var HDr=s(wZ);wXe=r(HDr,"qdqbert"),HDr.forEach(t),AXe=r(TMe," \u2014 "),sk=n(TMe,"A",{href:!0});var UDr=s(sk);yXe=r(UDr,"QDQBertConfig"),UDr.forEach(t),LXe=r(TMe," (QDQBert model)"),TMe.forEach(t),xXe=i(F),ng=n(F,"LI",{});var MMe=s(ng);AZ=n(MMe,"STRONG",{});var JDr=s(AZ);kXe=r(JDr,"rag"),JDr.forEach(t),SXe=r(MMe," \u2014 "),lk=n(MMe,"A",{href:!0});var YDr=s(lk);RXe=r(YDr,"RagConfig"),YDr.forEach(t),BXe=r(MMe," (RAG model)"),MMe.forEach(t),PXe=i(F),sg=n(F,"LI",{});var EMe=s(sg);yZ=n(EMe,"STRONG",{});var KDr=s(yZ);$Xe=r(KDr,"realm"),KDr.forEach(t),IXe=r(EMe," \u2014 "),ik=n(EMe,"A",{href:!0});var ZDr=s(ik);qXe=r(ZDr,"RealmConfig"),ZDr.forEach(t),NXe=r(EMe," (Realm model)"),EMe.forEach(t),jXe=i(F),lg=n(F,"LI",{});var CMe=s(lg);LZ=n(CMe,"STRONG",{});var eGr=s(LZ);DXe=r(eGr,"reformer"),eGr.forEach(t),GXe=r(CMe," \u2014 "),dk=n(CMe,"A",{href:!0});var oGr=s(dk);OXe=r(oGr,"ReformerConfig"),oGr.forEach(t),VXe=r(CMe," (Reformer model)"),CMe.forEach(t),XXe=i(F),ig=n(F,"LI",{});var wMe=s(ig);xZ=n(wMe,"STRONG",{});var rGr=s(xZ);zXe=r(rGr,"regnet"),rGr.forEach(t),QXe=r(wMe," \u2014 "),ck=n(wMe,"A",{href:!0});var tGr=s(ck);WXe=r(tGr,"RegNetConfig"),tGr.forEach(t),HXe=r(wMe," (RegNet model)"),wMe.forEach(t),UXe=i(F),dg=n(F,"LI",{});var AMe=s(dg);kZ=n(AMe,"STRONG",{});var aGr=s(kZ);JXe=r(aGr,"rembert"),aGr.forEach(t),YXe=r(AMe," \u2014 "),fk=n(AMe,"A",{href:!0});var nGr=s(fk);KXe=r(nGr,"RemBertConfig"),nGr.forEach(t),ZXe=r(AMe," (RemBERT model)"),AMe.forEach(t),eze=i(F),cg=n(F,"LI",{});var yMe=s(cg);SZ=n(yMe,"STRONG",{});var sGr=s(SZ);oze=r(sGr,"resnet"),sGr.forEach(t),rze=r(yMe," \u2014 "),mk=n(yMe,"A",{href:!0});var lGr=s(mk);tze=r(lGr,"ResNetConfig"),lGr.forEach(t),aze=r(yMe," (ResNet model)"),yMe.forEach(t),nze=i(F),fg=n(F,"LI",{});var LMe=s(fg);RZ=n(LMe,"STRONG",{});var iGr=s(RZ);sze=r(iGr,"retribert"),iGr.forEach(t),lze=r(LMe," \u2014 "),gk=n(LMe,"A",{href:!0});var dGr=s(gk);ize=r(dGr,"RetriBertConfig"),dGr.forEach(t),dze=r(LMe," (RetriBERT model)"),LMe.forEach(t),cze=i(F),mg=n(F,"LI",{});var xMe=s(mg);BZ=n(xMe,"STRONG",{});var cGr=s(BZ);fze=r(cGr,"roberta"),cGr.forEach(t),mze=r(xMe," \u2014 "),hk=n(xMe,"A",{href:!0});var fGr=s(hk);gze=r(fGr,"RobertaConfig"),fGr.forEach(t),hze=r(xMe," (RoBERTa model)"),xMe.forEach(t),pze=i(F),gg=n(F,"LI",{});var kMe=s(gg);PZ=n(kMe,"STRONG",{});var mGr=s(PZ);_ze=r(mGr,"roformer"),mGr.forEach(t),uze=r(kMe," \u2014 "),pk=n(kMe,"A",{href:!0});var gGr=s(pk);bze=r(gGr,"RoFormerConfig"),gGr.forEach(t),vze=r(kMe," (RoFormer model)"),kMe.forEach(t),Fze=i(F),hg=n(F,"LI",{});var SMe=s(hg);$Z=n(SMe,"STRONG",{});var hGr=s($Z);Tze=r(hGr,"segformer"),hGr.forEach(t),Mze=r(SMe," \u2014 "),_k=n(SMe,"A",{href:!0});var pGr=s(_k);Eze=r(pGr,"SegformerConfig"),pGr.forEach(t),Cze=r(SMe," (SegFormer model)"),SMe.forEach(t),wze=i(F),pg=n(F,"LI",{});var RMe=s(pg);IZ=n(RMe,"STRONG",{});var _Gr=s(IZ);Aze=r(_Gr,"sew"),_Gr.forEach(t),yze=r(RMe," \u2014 "),uk=n(RMe,"A",{href:!0});var uGr=s(uk);Lze=r(uGr,"SEWConfig"),uGr.forEach(t),xze=r(RMe," (SEW model)"),RMe.forEach(t),kze=i(F),_g=n(F,"LI",{});var BMe=s(_g);qZ=n(BMe,"STRONG",{});var bGr=s(qZ);Sze=r(bGr,"sew-d"),bGr.forEach(t),Rze=r(BMe," \u2014 "),bk=n(BMe,"A",{href:!0});var vGr=s(bk);Bze=r(vGr,"SEWDConfig"),vGr.forEach(t),Pze=r(BMe," (SEW-D model)"),BMe.forEach(t),$ze=i(F),ug=n(F,"LI",{});var PMe=s(ug);NZ=n(PMe,"STRONG",{});var FGr=s(NZ);Ize=r(FGr,"speech-encoder-decoder"),FGr.forEach(t),qze=r(PMe," \u2014 "),vk=n(PMe,"A",{href:!0});var TGr=s(vk);Nze=r(TGr,"SpeechEncoderDecoderConfig"),TGr.forEach(t),jze=r(PMe," (Speech Encoder decoder model)"),PMe.forEach(t),Dze=i(F),bg=n(F,"LI",{});var $Me=s(bg);jZ=n($Me,"STRONG",{});var MGr=s(jZ);Gze=r(MGr,"speech_to_text"),MGr.forEach(t),Oze=r($Me," \u2014 "),Fk=n($Me,"A",{href:!0});var EGr=s(Fk);Vze=r(EGr,"Speech2TextConfig"),EGr.forEach(t),Xze=r($Me," (Speech2Text model)"),$Me.forEach(t),zze=i(F),vg=n(F,"LI",{});var IMe=s(vg);DZ=n(IMe,"STRONG",{});var CGr=s(DZ);Qze=r(CGr,"speech_to_text_2"),CGr.forEach(t),Wze=r(IMe," \u2014 "),Tk=n(IMe,"A",{href:!0});var wGr=s(Tk);Hze=r(wGr,"Speech2Text2Config"),wGr.forEach(t),Uze=r(IMe," (Speech2Text2 model)"),IMe.forEach(t),Jze=i(F),Fg=n(F,"LI",{});var qMe=s(Fg);GZ=n(qMe,"STRONG",{});var AGr=s(GZ);Yze=r(AGr,"splinter"),AGr.forEach(t),Kze=r(qMe," \u2014 "),Mk=n(qMe,"A",{href:!0});var yGr=s(Mk);Zze=r(yGr,"SplinterConfig"),yGr.forEach(t),eQe=r(qMe," (Splinter model)"),qMe.forEach(t),oQe=i(F),Tg=n(F,"LI",{});var NMe=s(Tg);OZ=n(NMe,"STRONG",{});var LGr=s(OZ);rQe=r(LGr,"squeezebert"),LGr.forEach(t),tQe=r(NMe," \u2014 "),Ek=n(NMe,"A",{href:!0});var xGr=s(Ek);aQe=r(xGr,"SqueezeBertConfig"),xGr.forEach(t),nQe=r(NMe," (SqueezeBERT model)"),NMe.forEach(t),sQe=i(F),Mg=n(F,"LI",{});var jMe=s(Mg);VZ=n(jMe,"STRONG",{});var kGr=s(VZ);lQe=r(kGr,"swin"),kGr.forEach(t),iQe=r(jMe," \u2014 "),Ck=n(jMe,"A",{href:!0});var SGr=s(Ck);dQe=r(SGr,"SwinConfig"),SGr.forEach(t),cQe=r(jMe," (Swin model)"),jMe.forEach(t),fQe=i(F),Eg=n(F,"LI",{});var DMe=s(Eg);XZ=n(DMe,"STRONG",{});var RGr=s(XZ);mQe=r(RGr,"t5"),RGr.forEach(t),gQe=r(DMe," \u2014 "),wk=n(DMe,"A",{href:!0});var BGr=s(wk);hQe=r(BGr,"T5Config"),BGr.forEach(t),pQe=r(DMe," (T5 model)"),DMe.forEach(t),_Qe=i(F),Cg=n(F,"LI",{});var GMe=s(Cg);zZ=n(GMe,"STRONG",{});var PGr=s(zZ);uQe=r(PGr,"tapas"),PGr.forEach(t),bQe=r(GMe," \u2014 "),Ak=n(GMe,"A",{href:!0});var $Gr=s(Ak);vQe=r($Gr,"TapasConfig"),$Gr.forEach(t),FQe=r(GMe," (TAPAS model)"),GMe.forEach(t),TQe=i(F),wg=n(F,"LI",{});var OMe=s(wg);QZ=n(OMe,"STRONG",{});var IGr=s(QZ);MQe=r(IGr,"tapex"),IGr.forEach(t),EQe=r(OMe," \u2014 "),yk=n(OMe,"A",{href:!0});var qGr=s(yk);CQe=r(qGr,"BartConfig"),qGr.forEach(t),wQe=r(OMe," (TAPEX model)"),OMe.forEach(t),AQe=i(F),Ag=n(F,"LI",{});var VMe=s(Ag);WZ=n(VMe,"STRONG",{});var NGr=s(WZ);yQe=r(NGr,"transfo-xl"),NGr.forEach(t),LQe=r(VMe," \u2014 "),Lk=n(VMe,"A",{href:!0});var jGr=s(Lk);xQe=r(jGr,"TransfoXLConfig"),jGr.forEach(t),kQe=r(VMe," (Transformer-XL model)"),VMe.forEach(t),SQe=i(F),yg=n(F,"LI",{});var XMe=s(yg);HZ=n(XMe,"STRONG",{});var DGr=s(HZ);RQe=r(DGr,"trocr"),DGr.forEach(t),BQe=r(XMe," \u2014 "),xk=n(XMe,"A",{href:!0});var GGr=s(xk);PQe=r(GGr,"TrOCRConfig"),GGr.forEach(t),$Qe=r(XMe," (TrOCR model)"),XMe.forEach(t),IQe=i(F),Lg=n(F,"LI",{});var zMe=s(Lg);UZ=n(zMe,"STRONG",{});var OGr=s(UZ);qQe=r(OGr,"unispeech"),OGr.forEach(t),NQe=r(zMe," \u2014 "),kk=n(zMe,"A",{href:!0});var VGr=s(kk);jQe=r(VGr,"UniSpeechConfig"),VGr.forEach(t),DQe=r(zMe," (UniSpeech model)"),zMe.forEach(t),GQe=i(F),xg=n(F,"LI",{});var QMe=s(xg);JZ=n(QMe,"STRONG",{});var XGr=s(JZ);OQe=r(XGr,"unispeech-sat"),XGr.forEach(t),VQe=r(QMe," \u2014 "),Sk=n(QMe,"A",{href:!0});var zGr=s(Sk);XQe=r(zGr,"UniSpeechSatConfig"),zGr.forEach(t),zQe=r(QMe," (UniSpeechSat model)"),QMe.forEach(t),QQe=i(F),kg=n(F,"LI",{});var WMe=s(kg);YZ=n(WMe,"STRONG",{});var QGr=s(YZ);WQe=r(QGr,"van"),QGr.forEach(t),HQe=r(WMe," \u2014 "),Rk=n(WMe,"A",{href:!0});var WGr=s(Rk);UQe=r(WGr,"VanConfig"),WGr.forEach(t),JQe=r(WMe," (VAN model)"),WMe.forEach(t),YQe=i(F),Sg=n(F,"LI",{});var HMe=s(Sg);KZ=n(HMe,"STRONG",{});var HGr=s(KZ);KQe=r(HGr,"vilt"),HGr.forEach(t),ZQe=r(HMe," \u2014 "),Bk=n(HMe,"A",{href:!0});var UGr=s(Bk);eWe=r(UGr,"ViltConfig"),UGr.forEach(t),oWe=r(HMe," (ViLT model)"),HMe.forEach(t),rWe=i(F),Rg=n(F,"LI",{});var UMe=s(Rg);ZZ=n(UMe,"STRONG",{});var JGr=s(ZZ);tWe=r(JGr,"vision-encoder-decoder"),JGr.forEach(t),aWe=r(UMe," \u2014 "),Pk=n(UMe,"A",{href:!0});var YGr=s(Pk);nWe=r(YGr,"VisionEncoderDecoderConfig"),YGr.forEach(t),sWe=r(UMe," (Vision Encoder decoder model)"),UMe.forEach(t),lWe=i(F),Bg=n(F,"LI",{});var JMe=s(Bg);eee=n(JMe,"STRONG",{});var KGr=s(eee);iWe=r(KGr,"vision-text-dual-encoder"),KGr.forEach(t),dWe=r(JMe," \u2014 "),$k=n(JMe,"A",{href:!0});var ZGr=s($k);cWe=r(ZGr,"VisionTextDualEncoderConfig"),ZGr.forEach(t),fWe=r(JMe," (VisionTextDualEncoder model)"),JMe.forEach(t),mWe=i(F),Pg=n(F,"LI",{});var YMe=s(Pg);oee=n(YMe,"STRONG",{});var eOr=s(oee);gWe=r(eOr,"visual_bert"),eOr.forEach(t),hWe=r(YMe," \u2014 "),Ik=n(YMe,"A",{href:!0});var oOr=s(Ik);pWe=r(oOr,"VisualBertConfig"),oOr.forEach(t),_We=r(YMe," (VisualBert model)"),YMe.forEach(t),uWe=i(F),$g=n(F,"LI",{});var KMe=s($g);ree=n(KMe,"STRONG",{});var rOr=s(ree);bWe=r(rOr,"vit"),rOr.forEach(t),vWe=r(KMe," \u2014 "),qk=n(KMe,"A",{href:!0});var tOr=s(qk);FWe=r(tOr,"ViTConfig"),tOr.forEach(t),TWe=r(KMe," (ViT model)"),KMe.forEach(t),MWe=i(F),Ig=n(F,"LI",{});var ZMe=s(Ig);tee=n(ZMe,"STRONG",{});var aOr=s(tee);EWe=r(aOr,"vit_mae"),aOr.forEach(t),CWe=r(ZMe," \u2014 "),Nk=n(ZMe,"A",{href:!0});var nOr=s(Nk);wWe=r(nOr,"ViTMAEConfig"),nOr.forEach(t),AWe=r(ZMe," (ViTMAE model)"),ZMe.forEach(t),yWe=i(F),qg=n(F,"LI",{});var eEe=s(qg);aee=n(eEe,"STRONG",{});var sOr=s(aee);LWe=r(sOr,"wav2vec2"),sOr.forEach(t),xWe=r(eEe," \u2014 "),jk=n(eEe,"A",{href:!0});var lOr=s(jk);kWe=r(lOr,"Wav2Vec2Config"),lOr.forEach(t),SWe=r(eEe," (Wav2Vec2 model)"),eEe.forEach(t),RWe=i(F),Ng=n(F,"LI",{});var oEe=s(Ng);nee=n(oEe,"STRONG",{});var iOr=s(nee);BWe=r(iOr,"wavlm"),iOr.forEach(t),PWe=r(oEe," \u2014 "),Dk=n(oEe,"A",{href:!0});var dOr=s(Dk);$We=r(dOr,"WavLMConfig"),dOr.forEach(t),IWe=r(oEe," (WavLM model)"),oEe.forEach(t),qWe=i(F),jg=n(F,"LI",{});var rEe=s(jg);see=n(rEe,"STRONG",{});var cOr=s(see);NWe=r(cOr,"xglm"),cOr.forEach(t),jWe=r(rEe," \u2014 "),Gk=n(rEe,"A",{href:!0});var fOr=s(Gk);DWe=r(fOr,"XGLMConfig"),fOr.forEach(t),GWe=r(rEe," (XGLM model)"),rEe.forEach(t),OWe=i(F),Dg=n(F,"LI",{});var tEe=s(Dg);lee=n(tEe,"STRONG",{});var mOr=s(lee);VWe=r(mOr,"xlm"),mOr.forEach(t),XWe=r(tEe," \u2014 "),Ok=n(tEe,"A",{href:!0});var gOr=s(Ok);zWe=r(gOr,"XLMConfig"),gOr.forEach(t),QWe=r(tEe," (XLM model)"),tEe.forEach(t),WWe=i(F),Gg=n(F,"LI",{});var aEe=s(Gg);iee=n(aEe,"STRONG",{});var hOr=s(iee);HWe=r(hOr,"xlm-prophetnet"),hOr.forEach(t),UWe=r(aEe," \u2014 "),Vk=n(aEe,"A",{href:!0});var pOr=s(Vk);JWe=r(pOr,"XLMProphetNetConfig"),pOr.forEach(t),YWe=r(aEe," (XLMProphetNet model)"),aEe.forEach(t),KWe=i(F),Og=n(F,"LI",{});var nEe=s(Og);dee=n(nEe,"STRONG",{});var _Or=s(dee);ZWe=r(_Or,"xlm-roberta"),_Or.forEach(t),eHe=r(nEe," \u2014 "),Xk=n(nEe,"A",{href:!0});var uOr=s(Xk);oHe=r(uOr,"XLMRobertaConfig"),uOr.forEach(t),rHe=r(nEe," (XLM-RoBERTa model)"),nEe.forEach(t),tHe=i(F),Vg=n(F,"LI",{});var sEe=s(Vg);cee=n(sEe,"STRONG",{});var bOr=s(cee);aHe=r(bOr,"xlm-roberta-xl"),bOr.forEach(t),nHe=r(sEe," \u2014 "),zk=n(sEe,"A",{href:!0});var vOr=s(zk);sHe=r(vOr,"XLMRobertaXLConfig"),vOr.forEach(t),lHe=r(sEe," (XLM-RoBERTa-XL model)"),sEe.forEach(t),iHe=i(F),Xg=n(F,"LI",{});var lEe=s(Xg);fee=n(lEe,"STRONG",{});var FOr=s(fee);dHe=r(FOr,"xlnet"),FOr.forEach(t),cHe=r(lEe," \u2014 "),Qk=n(lEe,"A",{href:!0});var TOr=s(Qk);fHe=r(TOr,"XLNetConfig"),TOr.forEach(t),mHe=r(lEe," (XLNet model)"),lEe.forEach(t),gHe=i(F),zg=n(F,"LI",{});var iEe=s(zg);mee=n(iEe,"STRONG",{});var MOr=s(mee);hHe=r(MOr,"yoso"),MOr.forEach(t),pHe=r(iEe," \u2014 "),Wk=n(iEe,"A",{href:!0});var EOr=s(Wk);_He=r(EOr,"YosoConfig"),EOr.forEach(t),uHe=r(iEe," (YOSO model)"),iEe.forEach(t),F.forEach(t),bHe=i(ga),gee=n(ga,"P",{});var COr=s(gee);vHe=r(COr,"Examples:"),COr.forEach(t),FHe=i(ga),m(aw.$$.fragment,ga),ga.forEach(t),THe=i(Ys),Qg=n(Ys,"DIV",{class:!0});var _Ie=s(Qg);m(nw.$$.fragment,_Ie),MHe=i(_Ie),hee=n(_Ie,"P",{});var wOr=s(hee);EHe=r(wOr,"Register a new configuration for this class."),wOr.forEach(t),_Ie.forEach(t),Ys.forEach(t),hPe=i(c),od=n(c,"H2",{class:!0});var uIe=s(od);Wg=n(uIe,"A",{id:!0,class:!0,href:!0});var AOr=s(Wg);pee=n(AOr,"SPAN",{});var yOr=s(pee);m(sw.$$.fragment,yOr),yOr.forEach(t),AOr.forEach(t),CHe=i(uIe),_ee=n(uIe,"SPAN",{});var LOr=s(_ee);wHe=r(LOr,"AutoTokenizer"),LOr.forEach(t),uIe.forEach(t),pPe=i(c),Wo=n(c,"DIV",{class:!0});var Ks=s(Wo);m(lw.$$.fragment,Ks),AHe=i(Ks),iw=n(Ks,"P",{});var bIe=s(iw);yHe=r(bIe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Hk=n(bIe,"A",{href:!0});var xOr=s(Hk);LHe=r(xOr,"AutoTokenizer.from_pretrained()"),xOr.forEach(t),xHe=r(bIe," class method."),bIe.forEach(t),kHe=i(Ks),dw=n(Ks,"P",{});var vIe=s(dw);SHe=r(vIe,"This class cannot be instantiated directly using "),uee=n(vIe,"CODE",{});var kOr=s(uee);RHe=r(kOr,"__init__()"),kOr.forEach(t),BHe=r(vIe," (throws an error)."),vIe.forEach(t),PHe=i(Ks),ho=n(Ks,"DIV",{class:!0});var ha=s(ho);m(cw.$$.fragment,ha),$He=i(ha),bee=n(ha,"P",{});var SOr=s(bee);IHe=r(SOr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),SOr.forEach(t),qHe=i(ha),Oa=n(ha,"P",{});var HE=s(Oa);NHe=r(HE,"The tokenizer class to instantiate is selected based on the "),vee=n(HE,"CODE",{});var ROr=s(vee);jHe=r(ROr,"model_type"),ROr.forEach(t),DHe=r(HE,` property of the config object (either
passed as an argument or loaded from `),Fee=n(HE,"CODE",{});var BOr=s(Fee);GHe=r(BOr,"pretrained_model_name_or_path"),BOr.forEach(t),OHe=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tee=n(HE,"CODE",{});var POr=s(Tee);VHe=r(POr,"pretrained_model_name_or_path"),POr.forEach(t),XHe=r(HE,":"),HE.forEach(t),zHe=i(ha),E=n(ha,"UL",{});var C=s(E);Wn=n(C,"LI",{});var V7=s(Wn);Mee=n(V7,"STRONG",{});var $Or=s(Mee);QHe=r($Or,"albert"),$Or.forEach(t),WHe=r(V7," \u2014 "),Uk=n(V7,"A",{href:!0});var IOr=s(Uk);HHe=r(IOr,"AlbertTokenizer"),IOr.forEach(t),UHe=r(V7," or "),Jk=n(V7,"A",{href:!0});var qOr=s(Jk);JHe=r(qOr,"AlbertTokenizerFast"),qOr.forEach(t),YHe=r(V7," (ALBERT model)"),V7.forEach(t),KHe=i(C),Hn=n(C,"LI",{});var X7=s(Hn);Eee=n(X7,"STRONG",{});var NOr=s(Eee);ZHe=r(NOr,"bart"),NOr.forEach(t),eUe=r(X7," \u2014 "),Yk=n(X7,"A",{href:!0});var jOr=s(Yk);oUe=r(jOr,"BartTokenizer"),jOr.forEach(t),rUe=r(X7," or "),Kk=n(X7,"A",{href:!0});var DOr=s(Kk);tUe=r(DOr,"BartTokenizerFast"),DOr.forEach(t),aUe=r(X7," (BART model)"),X7.forEach(t),nUe=i(C),Un=n(C,"LI",{});var z7=s(Un);Cee=n(z7,"STRONG",{});var GOr=s(Cee);sUe=r(GOr,"barthez"),GOr.forEach(t),lUe=r(z7," \u2014 "),Zk=n(z7,"A",{href:!0});var OOr=s(Zk);iUe=r(OOr,"BarthezTokenizer"),OOr.forEach(t),dUe=r(z7," or "),eS=n(z7,"A",{href:!0});var VOr=s(eS);cUe=r(VOr,"BarthezTokenizerFast"),VOr.forEach(t),fUe=r(z7," (BARThez model)"),z7.forEach(t),mUe=i(C),Hg=n(C,"LI",{});var dEe=s(Hg);wee=n(dEe,"STRONG",{});var XOr=s(wee);gUe=r(XOr,"bartpho"),XOr.forEach(t),hUe=r(dEe," \u2014 "),oS=n(dEe,"A",{href:!0});var zOr=s(oS);pUe=r(zOr,"BartphoTokenizer"),zOr.forEach(t),_Ue=r(dEe," (BARTpho model)"),dEe.forEach(t),uUe=i(C),Jn=n(C,"LI",{});var Q7=s(Jn);Aee=n(Q7,"STRONG",{});var QOr=s(Aee);bUe=r(QOr,"bert"),QOr.forEach(t),vUe=r(Q7," \u2014 "),rS=n(Q7,"A",{href:!0});var WOr=s(rS);FUe=r(WOr,"BertTokenizer"),WOr.forEach(t),TUe=r(Q7," or "),tS=n(Q7,"A",{href:!0});var HOr=s(tS);MUe=r(HOr,"BertTokenizerFast"),HOr.forEach(t),EUe=r(Q7," (BERT model)"),Q7.forEach(t),CUe=i(C),Ug=n(C,"LI",{});var cEe=s(Ug);yee=n(cEe,"STRONG",{});var UOr=s(yee);wUe=r(UOr,"bert-generation"),UOr.forEach(t),AUe=r(cEe," \u2014 "),aS=n(cEe,"A",{href:!0});var JOr=s(aS);yUe=r(JOr,"BertGenerationTokenizer"),JOr.forEach(t),LUe=r(cEe," (Bert Generation model)"),cEe.forEach(t),xUe=i(C),Jg=n(C,"LI",{});var fEe=s(Jg);Lee=n(fEe,"STRONG",{});var YOr=s(Lee);kUe=r(YOr,"bert-japanese"),YOr.forEach(t),SUe=r(fEe," \u2014 "),nS=n(fEe,"A",{href:!0});var KOr=s(nS);RUe=r(KOr,"BertJapaneseTokenizer"),KOr.forEach(t),BUe=r(fEe," (BertJapanese model)"),fEe.forEach(t),PUe=i(C),Yg=n(C,"LI",{});var mEe=s(Yg);xee=n(mEe,"STRONG",{});var ZOr=s(xee);$Ue=r(ZOr,"bertweet"),ZOr.forEach(t),IUe=r(mEe," \u2014 "),sS=n(mEe,"A",{href:!0});var eVr=s(sS);qUe=r(eVr,"BertweetTokenizer"),eVr.forEach(t),NUe=r(mEe," (Bertweet model)"),mEe.forEach(t),jUe=i(C),Yn=n(C,"LI",{});var W7=s(Yn);kee=n(W7,"STRONG",{});var oVr=s(kee);DUe=r(oVr,"big_bird"),oVr.forEach(t),GUe=r(W7," \u2014 "),lS=n(W7,"A",{href:!0});var rVr=s(lS);OUe=r(rVr,"BigBirdTokenizer"),rVr.forEach(t),VUe=r(W7," or "),iS=n(W7,"A",{href:!0});var tVr=s(iS);XUe=r(tVr,"BigBirdTokenizerFast"),tVr.forEach(t),zUe=r(W7," (BigBird model)"),W7.forEach(t),QUe=i(C),Kn=n(C,"LI",{});var H7=s(Kn);See=n(H7,"STRONG",{});var aVr=s(See);WUe=r(aVr,"bigbird_pegasus"),aVr.forEach(t),HUe=r(H7," \u2014 "),dS=n(H7,"A",{href:!0});var nVr=s(dS);UUe=r(nVr,"PegasusTokenizer"),nVr.forEach(t),JUe=r(H7," or "),cS=n(H7,"A",{href:!0});var sVr=s(cS);YUe=r(sVr,"PegasusTokenizerFast"),sVr.forEach(t),KUe=r(H7," (BigBirdPegasus model)"),H7.forEach(t),ZUe=i(C),Zn=n(C,"LI",{});var U7=s(Zn);Ree=n(U7,"STRONG",{});var lVr=s(Ree);eJe=r(lVr,"blenderbot"),lVr.forEach(t),oJe=r(U7," \u2014 "),fS=n(U7,"A",{href:!0});var iVr=s(fS);rJe=r(iVr,"BlenderbotTokenizer"),iVr.forEach(t),tJe=r(U7," or "),mS=n(U7,"A",{href:!0});var dVr=s(mS);aJe=r(dVr,"BlenderbotTokenizerFast"),dVr.forEach(t),nJe=r(U7," (Blenderbot model)"),U7.forEach(t),sJe=i(C),Kg=n(C,"LI",{});var gEe=s(Kg);Bee=n(gEe,"STRONG",{});var cVr=s(Bee);lJe=r(cVr,"blenderbot-small"),cVr.forEach(t),iJe=r(gEe," \u2014 "),gS=n(gEe,"A",{href:!0});var fVr=s(gS);dJe=r(fVr,"BlenderbotSmallTokenizer"),fVr.forEach(t),cJe=r(gEe," (BlenderbotSmall model)"),gEe.forEach(t),fJe=i(C),Zg=n(C,"LI",{});var hEe=s(Zg);Pee=n(hEe,"STRONG",{});var mVr=s(Pee);mJe=r(mVr,"byt5"),mVr.forEach(t),gJe=r(hEe," \u2014 "),hS=n(hEe,"A",{href:!0});var gVr=s(hS);hJe=r(gVr,"ByT5Tokenizer"),gVr.forEach(t),pJe=r(hEe," (ByT5 model)"),hEe.forEach(t),_Je=i(C),es=n(C,"LI",{});var J7=s(es);$ee=n(J7,"STRONG",{});var hVr=s($ee);uJe=r(hVr,"camembert"),hVr.forEach(t),bJe=r(J7," \u2014 "),pS=n(J7,"A",{href:!0});var pVr=s(pS);vJe=r(pVr,"CamembertTokenizer"),pVr.forEach(t),FJe=r(J7," or "),_S=n(J7,"A",{href:!0});var _Vr=s(_S);TJe=r(_Vr,"CamembertTokenizerFast"),_Vr.forEach(t),MJe=r(J7," (CamemBERT model)"),J7.forEach(t),EJe=i(C),eh=n(C,"LI",{});var pEe=s(eh);Iee=n(pEe,"STRONG",{});var uVr=s(Iee);CJe=r(uVr,"canine"),uVr.forEach(t),wJe=r(pEe," \u2014 "),uS=n(pEe,"A",{href:!0});var bVr=s(uS);AJe=r(bVr,"CanineTokenizer"),bVr.forEach(t),yJe=r(pEe," (Canine model)"),pEe.forEach(t),LJe=i(C),os=n(C,"LI",{});var Y7=s(os);qee=n(Y7,"STRONG",{});var vVr=s(qee);xJe=r(vVr,"clip"),vVr.forEach(t),kJe=r(Y7," \u2014 "),bS=n(Y7,"A",{href:!0});var FVr=s(bS);SJe=r(FVr,"CLIPTokenizer"),FVr.forEach(t),RJe=r(Y7," or "),vS=n(Y7,"A",{href:!0});var TVr=s(vS);BJe=r(TVr,"CLIPTokenizerFast"),TVr.forEach(t),PJe=r(Y7," (CLIP model)"),Y7.forEach(t),$Je=i(C),rs=n(C,"LI",{});var K7=s(rs);Nee=n(K7,"STRONG",{});var MVr=s(Nee);IJe=r(MVr,"convbert"),MVr.forEach(t),qJe=r(K7," \u2014 "),FS=n(K7,"A",{href:!0});var EVr=s(FS);NJe=r(EVr,"ConvBertTokenizer"),EVr.forEach(t),jJe=r(K7," or "),TS=n(K7,"A",{href:!0});var CVr=s(TS);DJe=r(CVr,"ConvBertTokenizerFast"),CVr.forEach(t),GJe=r(K7," (ConvBERT model)"),K7.forEach(t),OJe=i(C),ts=n(C,"LI",{});var Z7=s(ts);jee=n(Z7,"STRONG",{});var wVr=s(jee);VJe=r(wVr,"cpm"),wVr.forEach(t),XJe=r(Z7," \u2014 "),MS=n(Z7,"A",{href:!0});var AVr=s(MS);zJe=r(AVr,"CpmTokenizer"),AVr.forEach(t),QJe=r(Z7," or "),Dee=n(Z7,"CODE",{});var yVr=s(Dee);WJe=r(yVr,"CpmTokenizerFast"),yVr.forEach(t),HJe=r(Z7," (CPM model)"),Z7.forEach(t),UJe=i(C),oh=n(C,"LI",{});var _Ee=s(oh);Gee=n(_Ee,"STRONG",{});var LVr=s(Gee);JJe=r(LVr,"ctrl"),LVr.forEach(t),YJe=r(_Ee," \u2014 "),ES=n(_Ee,"A",{href:!0});var xVr=s(ES);KJe=r(xVr,"CTRLTokenizer"),xVr.forEach(t),ZJe=r(_Ee," (CTRL model)"),_Ee.forEach(t),eYe=i(C),as=n(C,"LI",{});var e9=s(as);Oee=n(e9,"STRONG",{});var kVr=s(Oee);oYe=r(kVr,"data2vec-text"),kVr.forEach(t),rYe=r(e9," \u2014 "),CS=n(e9,"A",{href:!0});var SVr=s(CS);tYe=r(SVr,"RobertaTokenizer"),SVr.forEach(t),aYe=r(e9," or "),wS=n(e9,"A",{href:!0});var RVr=s(wS);nYe=r(RVr,"RobertaTokenizerFast"),RVr.forEach(t),sYe=r(e9," (Data2VecText model)"),e9.forEach(t),lYe=i(C),ns=n(C,"LI",{});var o9=s(ns);Vee=n(o9,"STRONG",{});var BVr=s(Vee);iYe=r(BVr,"deberta"),BVr.forEach(t),dYe=r(o9," \u2014 "),AS=n(o9,"A",{href:!0});var PVr=s(AS);cYe=r(PVr,"DebertaTokenizer"),PVr.forEach(t),fYe=r(o9," or "),yS=n(o9,"A",{href:!0});var $Vr=s(yS);mYe=r($Vr,"DebertaTokenizerFast"),$Vr.forEach(t),gYe=r(o9," (DeBERTa model)"),o9.forEach(t),hYe=i(C),ss=n(C,"LI",{});var r9=s(ss);Xee=n(r9,"STRONG",{});var IVr=s(Xee);pYe=r(IVr,"deberta-v2"),IVr.forEach(t),_Ye=r(r9," \u2014 "),LS=n(r9,"A",{href:!0});var qVr=s(LS);uYe=r(qVr,"DebertaV2Tokenizer"),qVr.forEach(t),bYe=r(r9," or "),xS=n(r9,"A",{href:!0});var NVr=s(xS);vYe=r(NVr,"DebertaV2TokenizerFast"),NVr.forEach(t),FYe=r(r9," (DeBERTa-v2 model)"),r9.forEach(t),TYe=i(C),ls=n(C,"LI",{});var t9=s(ls);zee=n(t9,"STRONG",{});var jVr=s(zee);MYe=r(jVr,"distilbert"),jVr.forEach(t),EYe=r(t9," \u2014 "),kS=n(t9,"A",{href:!0});var DVr=s(kS);CYe=r(DVr,"DistilBertTokenizer"),DVr.forEach(t),wYe=r(t9," or "),SS=n(t9,"A",{href:!0});var GVr=s(SS);AYe=r(GVr,"DistilBertTokenizerFast"),GVr.forEach(t),yYe=r(t9," (DistilBERT model)"),t9.forEach(t),LYe=i(C),is=n(C,"LI",{});var a9=s(is);Qee=n(a9,"STRONG",{});var OVr=s(Qee);xYe=r(OVr,"dpr"),OVr.forEach(t),kYe=r(a9," \u2014 "),RS=n(a9,"A",{href:!0});var VVr=s(RS);SYe=r(VVr,"DPRQuestionEncoderTokenizer"),VVr.forEach(t),RYe=r(a9," or "),BS=n(a9,"A",{href:!0});var XVr=s(BS);BYe=r(XVr,"DPRQuestionEncoderTokenizerFast"),XVr.forEach(t),PYe=r(a9," (DPR model)"),a9.forEach(t),$Ye=i(C),ds=n(C,"LI",{});var n9=s(ds);Wee=n(n9,"STRONG",{});var zVr=s(Wee);IYe=r(zVr,"electra"),zVr.forEach(t),qYe=r(n9," \u2014 "),PS=n(n9,"A",{href:!0});var QVr=s(PS);NYe=r(QVr,"ElectraTokenizer"),QVr.forEach(t),jYe=r(n9," or "),$S=n(n9,"A",{href:!0});var WVr=s($S);DYe=r(WVr,"ElectraTokenizerFast"),WVr.forEach(t),GYe=r(n9," (ELECTRA model)"),n9.forEach(t),OYe=i(C),rh=n(C,"LI",{});var uEe=s(rh);Hee=n(uEe,"STRONG",{});var HVr=s(Hee);VYe=r(HVr,"flaubert"),HVr.forEach(t),XYe=r(uEe," \u2014 "),IS=n(uEe,"A",{href:!0});var UVr=s(IS);zYe=r(UVr,"FlaubertTokenizer"),UVr.forEach(t),QYe=r(uEe," (FlauBERT model)"),uEe.forEach(t),WYe=i(C),cs=n(C,"LI",{});var s9=s(cs);Uee=n(s9,"STRONG",{});var JVr=s(Uee);HYe=r(JVr,"fnet"),JVr.forEach(t),UYe=r(s9," \u2014 "),qS=n(s9,"A",{href:!0});var YVr=s(qS);JYe=r(YVr,"FNetTokenizer"),YVr.forEach(t),YYe=r(s9," or "),NS=n(s9,"A",{href:!0});var KVr=s(NS);KYe=r(KVr,"FNetTokenizerFast"),KVr.forEach(t),ZYe=r(s9," (FNet model)"),s9.forEach(t),eKe=i(C),th=n(C,"LI",{});var bEe=s(th);Jee=n(bEe,"STRONG",{});var ZVr=s(Jee);oKe=r(ZVr,"fsmt"),ZVr.forEach(t),rKe=r(bEe," \u2014 "),jS=n(bEe,"A",{href:!0});var eXr=s(jS);tKe=r(eXr,"FSMTTokenizer"),eXr.forEach(t),aKe=r(bEe," (FairSeq Machine-Translation model)"),bEe.forEach(t),nKe=i(C),fs=n(C,"LI",{});var l9=s(fs);Yee=n(l9,"STRONG",{});var oXr=s(Yee);sKe=r(oXr,"funnel"),oXr.forEach(t),lKe=r(l9," \u2014 "),DS=n(l9,"A",{href:!0});var rXr=s(DS);iKe=r(rXr,"FunnelTokenizer"),rXr.forEach(t),dKe=r(l9," or "),GS=n(l9,"A",{href:!0});var tXr=s(GS);cKe=r(tXr,"FunnelTokenizerFast"),tXr.forEach(t),fKe=r(l9," (Funnel Transformer model)"),l9.forEach(t),mKe=i(C),ms=n(C,"LI",{});var i9=s(ms);Kee=n(i9,"STRONG",{});var aXr=s(Kee);gKe=r(aXr,"gpt2"),aXr.forEach(t),hKe=r(i9," \u2014 "),OS=n(i9,"A",{href:!0});var nXr=s(OS);pKe=r(nXr,"GPT2Tokenizer"),nXr.forEach(t),_Ke=r(i9," or "),VS=n(i9,"A",{href:!0});var sXr=s(VS);uKe=r(sXr,"GPT2TokenizerFast"),sXr.forEach(t),bKe=r(i9," (OpenAI GPT-2 model)"),i9.forEach(t),vKe=i(C),gs=n(C,"LI",{});var d9=s(gs);Zee=n(d9,"STRONG",{});var lXr=s(Zee);FKe=r(lXr,"gpt_neo"),lXr.forEach(t),TKe=r(d9," \u2014 "),XS=n(d9,"A",{href:!0});var iXr=s(XS);MKe=r(iXr,"GPT2Tokenizer"),iXr.forEach(t),EKe=r(d9," or "),zS=n(d9,"A",{href:!0});var dXr=s(zS);CKe=r(dXr,"GPT2TokenizerFast"),dXr.forEach(t),wKe=r(d9," (GPT Neo model)"),d9.forEach(t),AKe=i(C),hs=n(C,"LI",{});var c9=s(hs);eoe=n(c9,"STRONG",{});var cXr=s(eoe);yKe=r(cXr,"gptj"),cXr.forEach(t),LKe=r(c9," \u2014 "),QS=n(c9,"A",{href:!0});var fXr=s(QS);xKe=r(fXr,"GPT2Tokenizer"),fXr.forEach(t),kKe=r(c9," or "),WS=n(c9,"A",{href:!0});var mXr=s(WS);SKe=r(mXr,"GPT2TokenizerFast"),mXr.forEach(t),RKe=r(c9," (GPT-J model)"),c9.forEach(t),BKe=i(C),ps=n(C,"LI",{});var f9=s(ps);ooe=n(f9,"STRONG",{});var gXr=s(ooe);PKe=r(gXr,"herbert"),gXr.forEach(t),$Ke=r(f9," \u2014 "),HS=n(f9,"A",{href:!0});var hXr=s(HS);IKe=r(hXr,"HerbertTokenizer"),hXr.forEach(t),qKe=r(f9," or "),US=n(f9,"A",{href:!0});var pXr=s(US);NKe=r(pXr,"HerbertTokenizerFast"),pXr.forEach(t),jKe=r(f9," (HerBERT model)"),f9.forEach(t),DKe=i(C),ah=n(C,"LI",{});var vEe=s(ah);roe=n(vEe,"STRONG",{});var _Xr=s(roe);GKe=r(_Xr,"hubert"),_Xr.forEach(t),OKe=r(vEe," \u2014 "),JS=n(vEe,"A",{href:!0});var uXr=s(JS);VKe=r(uXr,"Wav2Vec2CTCTokenizer"),uXr.forEach(t),XKe=r(vEe," (Hubert model)"),vEe.forEach(t),zKe=i(C),_s=n(C,"LI",{});var m9=s(_s);toe=n(m9,"STRONG",{});var bXr=s(toe);QKe=r(bXr,"ibert"),bXr.forEach(t),WKe=r(m9," \u2014 "),YS=n(m9,"A",{href:!0});var vXr=s(YS);HKe=r(vXr,"RobertaTokenizer"),vXr.forEach(t),UKe=r(m9," or "),KS=n(m9,"A",{href:!0});var FXr=s(KS);JKe=r(FXr,"RobertaTokenizerFast"),FXr.forEach(t),YKe=r(m9," (I-BERT model)"),m9.forEach(t),KKe=i(C),us=n(C,"LI",{});var g9=s(us);aoe=n(g9,"STRONG",{});var TXr=s(aoe);ZKe=r(TXr,"layoutlm"),TXr.forEach(t),eZe=r(g9," \u2014 "),ZS=n(g9,"A",{href:!0});var MXr=s(ZS);oZe=r(MXr,"LayoutLMTokenizer"),MXr.forEach(t),rZe=r(g9," or "),eR=n(g9,"A",{href:!0});var EXr=s(eR);tZe=r(EXr,"LayoutLMTokenizerFast"),EXr.forEach(t),aZe=r(g9," (LayoutLM model)"),g9.forEach(t),nZe=i(C),bs=n(C,"LI",{});var h9=s(bs);noe=n(h9,"STRONG",{});var CXr=s(noe);sZe=r(CXr,"layoutlmv2"),CXr.forEach(t),lZe=r(h9," \u2014 "),oR=n(h9,"A",{href:!0});var wXr=s(oR);iZe=r(wXr,"LayoutLMv2Tokenizer"),wXr.forEach(t),dZe=r(h9," or "),rR=n(h9,"A",{href:!0});var AXr=s(rR);cZe=r(AXr,"LayoutLMv2TokenizerFast"),AXr.forEach(t),fZe=r(h9," (LayoutLMv2 model)"),h9.forEach(t),mZe=i(C),vs=n(C,"LI",{});var p9=s(vs);soe=n(p9,"STRONG",{});var yXr=s(soe);gZe=r(yXr,"layoutxlm"),yXr.forEach(t),hZe=r(p9," \u2014 "),tR=n(p9,"A",{href:!0});var LXr=s(tR);pZe=r(LXr,"LayoutXLMTokenizer"),LXr.forEach(t),_Ze=r(p9," or "),aR=n(p9,"A",{href:!0});var xXr=s(aR);uZe=r(xXr,"LayoutXLMTokenizerFast"),xXr.forEach(t),bZe=r(p9," (LayoutXLM model)"),p9.forEach(t),vZe=i(C),Fs=n(C,"LI",{});var _9=s(Fs);loe=n(_9,"STRONG",{});var kXr=s(loe);FZe=r(kXr,"led"),kXr.forEach(t),TZe=r(_9," \u2014 "),nR=n(_9,"A",{href:!0});var SXr=s(nR);MZe=r(SXr,"LEDTokenizer"),SXr.forEach(t),EZe=r(_9," or "),sR=n(_9,"A",{href:!0});var RXr=s(sR);CZe=r(RXr,"LEDTokenizerFast"),RXr.forEach(t),wZe=r(_9," (LED model)"),_9.forEach(t),AZe=i(C),Ts=n(C,"LI",{});var u9=s(Ts);ioe=n(u9,"STRONG",{});var BXr=s(ioe);yZe=r(BXr,"longformer"),BXr.forEach(t),LZe=r(u9," \u2014 "),lR=n(u9,"A",{href:!0});var PXr=s(lR);xZe=r(PXr,"LongformerTokenizer"),PXr.forEach(t),kZe=r(u9," or "),iR=n(u9,"A",{href:!0});var $Xr=s(iR);SZe=r($Xr,"LongformerTokenizerFast"),$Xr.forEach(t),RZe=r(u9," (Longformer model)"),u9.forEach(t),BZe=i(C),nh=n(C,"LI",{});var FEe=s(nh);doe=n(FEe,"STRONG",{});var IXr=s(doe);PZe=r(IXr,"luke"),IXr.forEach(t),$Ze=r(FEe," \u2014 "),dR=n(FEe,"A",{href:!0});var qXr=s(dR);IZe=r(qXr,"LukeTokenizer"),qXr.forEach(t),qZe=r(FEe," (LUKE model)"),FEe.forEach(t),NZe=i(C),Ms=n(C,"LI",{});var b9=s(Ms);coe=n(b9,"STRONG",{});var NXr=s(coe);jZe=r(NXr,"lxmert"),NXr.forEach(t),DZe=r(b9," \u2014 "),cR=n(b9,"A",{href:!0});var jXr=s(cR);GZe=r(jXr,"LxmertTokenizer"),jXr.forEach(t),OZe=r(b9," or "),fR=n(b9,"A",{href:!0});var DXr=s(fR);VZe=r(DXr,"LxmertTokenizerFast"),DXr.forEach(t),XZe=r(b9," (LXMERT model)"),b9.forEach(t),zZe=i(C),sh=n(C,"LI",{});var TEe=s(sh);foe=n(TEe,"STRONG",{});var GXr=s(foe);QZe=r(GXr,"m2m_100"),GXr.forEach(t),WZe=r(TEe," \u2014 "),mR=n(TEe,"A",{href:!0});var OXr=s(mR);HZe=r(OXr,"M2M100Tokenizer"),OXr.forEach(t),UZe=r(TEe," (M2M100 model)"),TEe.forEach(t),JZe=i(C),lh=n(C,"LI",{});var MEe=s(lh);moe=n(MEe,"STRONG",{});var VXr=s(moe);YZe=r(VXr,"marian"),VXr.forEach(t),KZe=r(MEe," \u2014 "),gR=n(MEe,"A",{href:!0});var XXr=s(gR);ZZe=r(XXr,"MarianTokenizer"),XXr.forEach(t),eeo=r(MEe," (Marian model)"),MEe.forEach(t),oeo=i(C),Es=n(C,"LI",{});var v9=s(Es);goe=n(v9,"STRONG",{});var zXr=s(goe);reo=r(zXr,"mbart"),zXr.forEach(t),teo=r(v9," \u2014 "),hR=n(v9,"A",{href:!0});var QXr=s(hR);aeo=r(QXr,"MBartTokenizer"),QXr.forEach(t),neo=r(v9," or "),pR=n(v9,"A",{href:!0});var WXr=s(pR);seo=r(WXr,"MBartTokenizerFast"),WXr.forEach(t),leo=r(v9," (mBART model)"),v9.forEach(t),ieo=i(C),Cs=n(C,"LI",{});var F9=s(Cs);hoe=n(F9,"STRONG",{});var HXr=s(hoe);deo=r(HXr,"mbart50"),HXr.forEach(t),ceo=r(F9," \u2014 "),_R=n(F9,"A",{href:!0});var UXr=s(_R);feo=r(UXr,"MBart50Tokenizer"),UXr.forEach(t),meo=r(F9," or "),uR=n(F9,"A",{href:!0});var JXr=s(uR);geo=r(JXr,"MBart50TokenizerFast"),JXr.forEach(t),heo=r(F9," (mBART-50 model)"),F9.forEach(t),peo=i(C),ws=n(C,"LI",{});var T9=s(ws);poe=n(T9,"STRONG",{});var YXr=s(poe);_eo=r(YXr,"megatron-bert"),YXr.forEach(t),ueo=r(T9," \u2014 "),bR=n(T9,"A",{href:!0});var KXr=s(bR);beo=r(KXr,"BertTokenizer"),KXr.forEach(t),veo=r(T9," or "),vR=n(T9,"A",{href:!0});var ZXr=s(vR);Feo=r(ZXr,"BertTokenizerFast"),ZXr.forEach(t),Teo=r(T9," (MegatronBert model)"),T9.forEach(t),Meo=i(C),ih=n(C,"LI",{});var EEe=s(ih);_oe=n(EEe,"STRONG",{});var ezr=s(_oe);Eeo=r(ezr,"mluke"),ezr.forEach(t),Ceo=r(EEe," \u2014 "),FR=n(EEe,"A",{href:!0});var ozr=s(FR);weo=r(ozr,"MLukeTokenizer"),ozr.forEach(t),Aeo=r(EEe," (mLUKE model)"),EEe.forEach(t),yeo=i(C),As=n(C,"LI",{});var M9=s(As);uoe=n(M9,"STRONG",{});var rzr=s(uoe);Leo=r(rzr,"mobilebert"),rzr.forEach(t),xeo=r(M9," \u2014 "),TR=n(M9,"A",{href:!0});var tzr=s(TR);keo=r(tzr,"MobileBertTokenizer"),tzr.forEach(t),Seo=r(M9," or "),MR=n(M9,"A",{href:!0});var azr=s(MR);Reo=r(azr,"MobileBertTokenizerFast"),azr.forEach(t),Beo=r(M9," (MobileBERT model)"),M9.forEach(t),Peo=i(C),ys=n(C,"LI",{});var E9=s(ys);boe=n(E9,"STRONG",{});var nzr=s(boe);$eo=r(nzr,"mpnet"),nzr.forEach(t),Ieo=r(E9," \u2014 "),ER=n(E9,"A",{href:!0});var szr=s(ER);qeo=r(szr,"MPNetTokenizer"),szr.forEach(t),Neo=r(E9," or "),CR=n(E9,"A",{href:!0});var lzr=s(CR);jeo=r(lzr,"MPNetTokenizerFast"),lzr.forEach(t),Deo=r(E9," (MPNet model)"),E9.forEach(t),Geo=i(C),Ls=n(C,"LI",{});var C9=s(Ls);voe=n(C9,"STRONG",{});var izr=s(voe);Oeo=r(izr,"mt5"),izr.forEach(t),Veo=r(C9," \u2014 "),wR=n(C9,"A",{href:!0});var dzr=s(wR);Xeo=r(dzr,"MT5Tokenizer"),dzr.forEach(t),zeo=r(C9," or "),AR=n(C9,"A",{href:!0});var czr=s(AR);Qeo=r(czr,"MT5TokenizerFast"),czr.forEach(t),Weo=r(C9," (mT5 model)"),C9.forEach(t),Heo=i(C),xs=n(C,"LI",{});var w9=s(xs);Foe=n(w9,"STRONG",{});var fzr=s(Foe);Ueo=r(fzr,"nystromformer"),fzr.forEach(t),Jeo=r(w9," \u2014 "),yR=n(w9,"A",{href:!0});var mzr=s(yR);Yeo=r(mzr,"AlbertTokenizer"),mzr.forEach(t),Keo=r(w9," or "),LR=n(w9,"A",{href:!0});var gzr=s(LR);Zeo=r(gzr,"AlbertTokenizerFast"),gzr.forEach(t),eoo=r(w9," (Nystromformer model)"),w9.forEach(t),ooo=i(C),ks=n(C,"LI",{});var A9=s(ks);Toe=n(A9,"STRONG",{});var hzr=s(Toe);roo=r(hzr,"openai-gpt"),hzr.forEach(t),too=r(A9," \u2014 "),xR=n(A9,"A",{href:!0});var pzr=s(xR);aoo=r(pzr,"OpenAIGPTTokenizer"),pzr.forEach(t),noo=r(A9," or "),kR=n(A9,"A",{href:!0});var _zr=s(kR);soo=r(_zr,"OpenAIGPTTokenizerFast"),_zr.forEach(t),loo=r(A9," (OpenAI GPT model)"),A9.forEach(t),ioo=i(C),Ss=n(C,"LI",{});var y9=s(Ss);Moe=n(y9,"STRONG",{});var uzr=s(Moe);doo=r(uzr,"pegasus"),uzr.forEach(t),coo=r(y9," \u2014 "),SR=n(y9,"A",{href:!0});var bzr=s(SR);foo=r(bzr,"PegasusTokenizer"),bzr.forEach(t),moo=r(y9," or "),RR=n(y9,"A",{href:!0});var vzr=s(RR);goo=r(vzr,"PegasusTokenizerFast"),vzr.forEach(t),hoo=r(y9," (Pegasus model)"),y9.forEach(t),poo=i(C),dh=n(C,"LI",{});var CEe=s(dh);Eoe=n(CEe,"STRONG",{});var Fzr=s(Eoe);_oo=r(Fzr,"perceiver"),Fzr.forEach(t),uoo=r(CEe," \u2014 "),BR=n(CEe,"A",{href:!0});var Tzr=s(BR);boo=r(Tzr,"PerceiverTokenizer"),Tzr.forEach(t),voo=r(CEe," (Perceiver model)"),CEe.forEach(t),Foo=i(C),ch=n(C,"LI",{});var wEe=s(ch);Coe=n(wEe,"STRONG",{});var Mzr=s(Coe);Too=r(Mzr,"phobert"),Mzr.forEach(t),Moo=r(wEe," \u2014 "),PR=n(wEe,"A",{href:!0});var Ezr=s(PR);Eoo=r(Ezr,"PhobertTokenizer"),Ezr.forEach(t),Coo=r(wEe," (PhoBERT model)"),wEe.forEach(t),woo=i(C),fh=n(C,"LI",{});var AEe=s(fh);woe=n(AEe,"STRONG",{});var Czr=s(woe);Aoo=r(Czr,"plbart"),Czr.forEach(t),yoo=r(AEe," \u2014 "),$R=n(AEe,"A",{href:!0});var wzr=s($R);Loo=r(wzr,"PLBartTokenizer"),wzr.forEach(t),xoo=r(AEe," (PLBart model)"),AEe.forEach(t),koo=i(C),mh=n(C,"LI",{});var yEe=s(mh);Aoe=n(yEe,"STRONG",{});var Azr=s(Aoe);Soo=r(Azr,"prophetnet"),Azr.forEach(t),Roo=r(yEe," \u2014 "),IR=n(yEe,"A",{href:!0});var yzr=s(IR);Boo=r(yzr,"ProphetNetTokenizer"),yzr.forEach(t),Poo=r(yEe," (ProphetNet model)"),yEe.forEach(t),$oo=i(C),Rs=n(C,"LI",{});var L9=s(Rs);yoe=n(L9,"STRONG",{});var Lzr=s(yoe);Ioo=r(Lzr,"qdqbert"),Lzr.forEach(t),qoo=r(L9," \u2014 "),qR=n(L9,"A",{href:!0});var xzr=s(qR);Noo=r(xzr,"BertTokenizer"),xzr.forEach(t),joo=r(L9," or "),NR=n(L9,"A",{href:!0});var kzr=s(NR);Doo=r(kzr,"BertTokenizerFast"),kzr.forEach(t),Goo=r(L9," (QDQBert model)"),L9.forEach(t),Ooo=i(C),gh=n(C,"LI",{});var LEe=s(gh);Loe=n(LEe,"STRONG",{});var Szr=s(Loe);Voo=r(Szr,"rag"),Szr.forEach(t),Xoo=r(LEe," \u2014 "),jR=n(LEe,"A",{href:!0});var Rzr=s(jR);zoo=r(Rzr,"RagTokenizer"),Rzr.forEach(t),Qoo=r(LEe," (RAG model)"),LEe.forEach(t),Woo=i(C),Bs=n(C,"LI",{});var x9=s(Bs);xoe=n(x9,"STRONG",{});var Bzr=s(xoe);Hoo=r(Bzr,"realm"),Bzr.forEach(t),Uoo=r(x9," \u2014 "),DR=n(x9,"A",{href:!0});var Pzr=s(DR);Joo=r(Pzr,"RealmTokenizer"),Pzr.forEach(t),Yoo=r(x9," or "),GR=n(x9,"A",{href:!0});var $zr=s(GR);Koo=r($zr,"RealmTokenizerFast"),$zr.forEach(t),Zoo=r(x9," (Realm model)"),x9.forEach(t),ero=i(C),Ps=n(C,"LI",{});var k9=s(Ps);koe=n(k9,"STRONG",{});var Izr=s(koe);oro=r(Izr,"reformer"),Izr.forEach(t),rro=r(k9," \u2014 "),OR=n(k9,"A",{href:!0});var qzr=s(OR);tro=r(qzr,"ReformerTokenizer"),qzr.forEach(t),aro=r(k9," or "),VR=n(k9,"A",{href:!0});var Nzr=s(VR);nro=r(Nzr,"ReformerTokenizerFast"),Nzr.forEach(t),sro=r(k9," (Reformer model)"),k9.forEach(t),lro=i(C),$s=n(C,"LI",{});var S9=s($s);Soe=n(S9,"STRONG",{});var jzr=s(Soe);iro=r(jzr,"rembert"),jzr.forEach(t),dro=r(S9," \u2014 "),XR=n(S9,"A",{href:!0});var Dzr=s(XR);cro=r(Dzr,"RemBertTokenizer"),Dzr.forEach(t),fro=r(S9," or "),zR=n(S9,"A",{href:!0});var Gzr=s(zR);mro=r(Gzr,"RemBertTokenizerFast"),Gzr.forEach(t),gro=r(S9," (RemBERT model)"),S9.forEach(t),hro=i(C),Is=n(C,"LI",{});var R9=s(Is);Roe=n(R9,"STRONG",{});var Ozr=s(Roe);pro=r(Ozr,"retribert"),Ozr.forEach(t),_ro=r(R9," \u2014 "),QR=n(R9,"A",{href:!0});var Vzr=s(QR);uro=r(Vzr,"RetriBertTokenizer"),Vzr.forEach(t),bro=r(R9," or "),WR=n(R9,"A",{href:!0});var Xzr=s(WR);vro=r(Xzr,"RetriBertTokenizerFast"),Xzr.forEach(t),Fro=r(R9," (RetriBERT model)"),R9.forEach(t),Tro=i(C),qs=n(C,"LI",{});var B9=s(qs);Boe=n(B9,"STRONG",{});var zzr=s(Boe);Mro=r(zzr,"roberta"),zzr.forEach(t),Ero=r(B9," \u2014 "),HR=n(B9,"A",{href:!0});var Qzr=s(HR);Cro=r(Qzr,"RobertaTokenizer"),Qzr.forEach(t),wro=r(B9," or "),UR=n(B9,"A",{href:!0});var Wzr=s(UR);Aro=r(Wzr,"RobertaTokenizerFast"),Wzr.forEach(t),yro=r(B9," (RoBERTa model)"),B9.forEach(t),Lro=i(C),Ns=n(C,"LI",{});var P9=s(Ns);Poe=n(P9,"STRONG",{});var Hzr=s(Poe);xro=r(Hzr,"roformer"),Hzr.forEach(t),kro=r(P9," \u2014 "),JR=n(P9,"A",{href:!0});var Uzr=s(JR);Sro=r(Uzr,"RoFormerTokenizer"),Uzr.forEach(t),Rro=r(P9," or "),YR=n(P9,"A",{href:!0});var Jzr=s(YR);Bro=r(Jzr,"RoFormerTokenizerFast"),Jzr.forEach(t),Pro=r(P9," (RoFormer model)"),P9.forEach(t),$ro=i(C),hh=n(C,"LI",{});var xEe=s(hh);$oe=n(xEe,"STRONG",{});var Yzr=s($oe);Iro=r(Yzr,"speech_to_text"),Yzr.forEach(t),qro=r(xEe," \u2014 "),KR=n(xEe,"A",{href:!0});var Kzr=s(KR);Nro=r(Kzr,"Speech2TextTokenizer"),Kzr.forEach(t),jro=r(xEe," (Speech2Text model)"),xEe.forEach(t),Dro=i(C),ph=n(C,"LI",{});var kEe=s(ph);Ioe=n(kEe,"STRONG",{});var Zzr=s(Ioe);Gro=r(Zzr,"speech_to_text_2"),Zzr.forEach(t),Oro=r(kEe," \u2014 "),ZR=n(kEe,"A",{href:!0});var eQr=s(ZR);Vro=r(eQr,"Speech2Text2Tokenizer"),eQr.forEach(t),Xro=r(kEe," (Speech2Text2 model)"),kEe.forEach(t),zro=i(C),js=n(C,"LI",{});var $9=s(js);qoe=n($9,"STRONG",{});var oQr=s(qoe);Qro=r(oQr,"splinter"),oQr.forEach(t),Wro=r($9," \u2014 "),eB=n($9,"A",{href:!0});var rQr=s(eB);Hro=r(rQr,"SplinterTokenizer"),rQr.forEach(t),Uro=r($9," or "),oB=n($9,"A",{href:!0});var tQr=s(oB);Jro=r(tQr,"SplinterTokenizerFast"),tQr.forEach(t),Yro=r($9," (Splinter model)"),$9.forEach(t),Kro=i(C),Ds=n(C,"LI",{});var I9=s(Ds);Noe=n(I9,"STRONG",{});var aQr=s(Noe);Zro=r(aQr,"squeezebert"),aQr.forEach(t),eto=r(I9," \u2014 "),rB=n(I9,"A",{href:!0});var nQr=s(rB);oto=r(nQr,"SqueezeBertTokenizer"),nQr.forEach(t),rto=r(I9," or "),tB=n(I9,"A",{href:!0});var sQr=s(tB);tto=r(sQr,"SqueezeBertTokenizerFast"),sQr.forEach(t),ato=r(I9," (SqueezeBERT model)"),I9.forEach(t),nto=i(C),Gs=n(C,"LI",{});var q9=s(Gs);joe=n(q9,"STRONG",{});var lQr=s(joe);sto=r(lQr,"t5"),lQr.forEach(t),lto=r(q9," \u2014 "),aB=n(q9,"A",{href:!0});var iQr=s(aB);ito=r(iQr,"T5Tokenizer"),iQr.forEach(t),dto=r(q9," or "),nB=n(q9,"A",{href:!0});var dQr=s(nB);cto=r(dQr,"T5TokenizerFast"),dQr.forEach(t),fto=r(q9," (T5 model)"),q9.forEach(t),mto=i(C),_h=n(C,"LI",{});var SEe=s(_h);Doe=n(SEe,"STRONG",{});var cQr=s(Doe);gto=r(cQr,"tapas"),cQr.forEach(t),hto=r(SEe," \u2014 "),sB=n(SEe,"A",{href:!0});var fQr=s(sB);pto=r(fQr,"TapasTokenizer"),fQr.forEach(t),_to=r(SEe," (TAPAS model)"),SEe.forEach(t),uto=i(C),uh=n(C,"LI",{});var REe=s(uh);Goe=n(REe,"STRONG",{});var mQr=s(Goe);bto=r(mQr,"tapex"),mQr.forEach(t),vto=r(REe," \u2014 "),lB=n(REe,"A",{href:!0});var gQr=s(lB);Fto=r(gQr,"TapexTokenizer"),gQr.forEach(t),Tto=r(REe," (TAPEX model)"),REe.forEach(t),Mto=i(C),bh=n(C,"LI",{});var BEe=s(bh);Ooe=n(BEe,"STRONG",{});var hQr=s(Ooe);Eto=r(hQr,"transfo-xl"),hQr.forEach(t),Cto=r(BEe," \u2014 "),iB=n(BEe,"A",{href:!0});var pQr=s(iB);wto=r(pQr,"TransfoXLTokenizer"),pQr.forEach(t),Ato=r(BEe," (Transformer-XL model)"),BEe.forEach(t),yto=i(C),Os=n(C,"LI",{});var N9=s(Os);Voe=n(N9,"STRONG",{});var _Qr=s(Voe);Lto=r(_Qr,"visual_bert"),_Qr.forEach(t),xto=r(N9," \u2014 "),dB=n(N9,"A",{href:!0});var uQr=s(dB);kto=r(uQr,"BertTokenizer"),uQr.forEach(t),Sto=r(N9," or "),cB=n(N9,"A",{href:!0});var bQr=s(cB);Rto=r(bQr,"BertTokenizerFast"),bQr.forEach(t),Bto=r(N9," (VisualBert model)"),N9.forEach(t),Pto=i(C),vh=n(C,"LI",{});var PEe=s(vh);Xoe=n(PEe,"STRONG",{});var vQr=s(Xoe);$to=r(vQr,"wav2vec2"),vQr.forEach(t),Ito=r(PEe," \u2014 "),fB=n(PEe,"A",{href:!0});var FQr=s(fB);qto=r(FQr,"Wav2Vec2CTCTokenizer"),FQr.forEach(t),Nto=r(PEe," (Wav2Vec2 model)"),PEe.forEach(t),jto=i(C),Fh=n(C,"LI",{});var $Ee=s(Fh);zoe=n($Ee,"STRONG",{});var TQr=s(zoe);Dto=r(TQr,"wav2vec2_phoneme"),TQr.forEach(t),Gto=r($Ee," \u2014 "),mB=n($Ee,"A",{href:!0});var MQr=s(mB);Oto=r(MQr,"Wav2Vec2PhonemeCTCTokenizer"),MQr.forEach(t),Vto=r($Ee," (Wav2Vec2Phoneme model)"),$Ee.forEach(t),Xto=i(C),Vs=n(C,"LI",{});var j9=s(Vs);Qoe=n(j9,"STRONG",{});var EQr=s(Qoe);zto=r(EQr,"xglm"),EQr.forEach(t),Qto=r(j9," \u2014 "),gB=n(j9,"A",{href:!0});var CQr=s(gB);Wto=r(CQr,"XGLMTokenizer"),CQr.forEach(t),Hto=r(j9," or "),hB=n(j9,"A",{href:!0});var wQr=s(hB);Uto=r(wQr,"XGLMTokenizerFast"),wQr.forEach(t),Jto=r(j9," (XGLM model)"),j9.forEach(t),Yto=i(C),Th=n(C,"LI",{});var IEe=s(Th);Woe=n(IEe,"STRONG",{});var AQr=s(Woe);Kto=r(AQr,"xlm"),AQr.forEach(t),Zto=r(IEe," \u2014 "),pB=n(IEe,"A",{href:!0});var yQr=s(pB);eao=r(yQr,"XLMTokenizer"),yQr.forEach(t),oao=r(IEe," (XLM model)"),IEe.forEach(t),rao=i(C),Mh=n(C,"LI",{});var qEe=s(Mh);Hoe=n(qEe,"STRONG",{});var LQr=s(Hoe);tao=r(LQr,"xlm-prophetnet"),LQr.forEach(t),aao=r(qEe," \u2014 "),_B=n(qEe,"A",{href:!0});var xQr=s(_B);nao=r(xQr,"XLMProphetNetTokenizer"),xQr.forEach(t),sao=r(qEe," (XLMProphetNet model)"),qEe.forEach(t),lao=i(C),Xs=n(C,"LI",{});var D9=s(Xs);Uoe=n(D9,"STRONG",{});var kQr=s(Uoe);iao=r(kQr,"xlm-roberta"),kQr.forEach(t),dao=r(D9," \u2014 "),uB=n(D9,"A",{href:!0});var SQr=s(uB);cao=r(SQr,"XLMRobertaTokenizer"),SQr.forEach(t),fao=r(D9," or "),bB=n(D9,"A",{href:!0});var RQr=s(bB);mao=r(RQr,"XLMRobertaTokenizerFast"),RQr.forEach(t),gao=r(D9," (XLM-RoBERTa model)"),D9.forEach(t),hao=i(C),zs=n(C,"LI",{});var G9=s(zs);Joe=n(G9,"STRONG",{});var BQr=s(Joe);pao=r(BQr,"xlm-roberta-xl"),BQr.forEach(t),_ao=r(G9," \u2014 "),vB=n(G9,"A",{href:!0});var PQr=s(vB);uao=r(PQr,"RobertaTokenizer"),PQr.forEach(t),bao=r(G9," or "),FB=n(G9,"A",{href:!0});var $Qr=s(FB);vao=r($Qr,"RobertaTokenizerFast"),$Qr.forEach(t),Fao=r(G9," (XLM-RoBERTa-XL model)"),G9.forEach(t),Tao=i(C),Qs=n(C,"LI",{});var O9=s(Qs);Yoe=n(O9,"STRONG",{});var IQr=s(Yoe);Mao=r(IQr,"xlnet"),IQr.forEach(t),Eao=r(O9," \u2014 "),TB=n(O9,"A",{href:!0});var qQr=s(TB);Cao=r(qQr,"XLNetTokenizer"),qQr.forEach(t),wao=r(O9," or "),MB=n(O9,"A",{href:!0});var NQr=s(MB);Aao=r(NQr,"XLNetTokenizerFast"),NQr.forEach(t),yao=r(O9," (XLNet model)"),O9.forEach(t),Lao=i(C),Ws=n(C,"LI",{});var V9=s(Ws);Koe=n(V9,"STRONG",{});var jQr=s(Koe);xao=r(jQr,"yoso"),jQr.forEach(t),kao=r(V9," \u2014 "),EB=n(V9,"A",{href:!0});var DQr=s(EB);Sao=r(DQr,"AlbertTokenizer"),DQr.forEach(t),Rao=r(V9," or "),CB=n(V9,"A",{href:!0});var GQr=s(CB);Bao=r(GQr,"AlbertTokenizerFast"),GQr.forEach(t),Pao=r(V9," (YOSO model)"),V9.forEach(t),C.forEach(t),$ao=i(ha),Zoe=n(ha,"P",{});var OQr=s(Zoe);Iao=r(OQr,"Examples:"),OQr.forEach(t),qao=i(ha),m(fw.$$.fragment,ha),ha.forEach(t),Nao=i(Ks),Eh=n(Ks,"DIV",{class:!0});var FIe=s(Eh);m(mw.$$.fragment,FIe),jao=i(FIe),ere=n(FIe,"P",{});var VQr=s(ere);Dao=r(VQr,"Register a new tokenizer in this mapping."),VQr.forEach(t),FIe.forEach(t),Ks.forEach(t),_Pe=i(c),rd=n(c,"H2",{class:!0});var TIe=s(rd);Ch=n(TIe,"A",{id:!0,class:!0,href:!0});var XQr=s(Ch);ore=n(XQr,"SPAN",{});var zQr=s(ore);m(gw.$$.fragment,zQr),zQr.forEach(t),XQr.forEach(t),Gao=i(TIe),rre=n(TIe,"SPAN",{});var QQr=s(rre);Oao=r(QQr,"AutoFeatureExtractor"),QQr.forEach(t),TIe.forEach(t),uPe=i(c),Ho=n(c,"DIV",{class:!0});var Zs=s(Ho);m(hw.$$.fragment,Zs),Vao=i(Zs),pw=n(Zs,"P",{});var MIe=s(pw);Xao=r(MIe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),wB=n(MIe,"A",{href:!0});var WQr=s(wB);zao=r(WQr,"AutoFeatureExtractor.from_pretrained()"),WQr.forEach(t),Qao=r(MIe," class method."),MIe.forEach(t),Wao=i(Zs),_w=n(Zs,"P",{});var EIe=s(_w);Hao=r(EIe,"This class cannot be instantiated directly using "),tre=n(EIe,"CODE",{});var HQr=s(tre);Uao=r(HQr,"__init__()"),HQr.forEach(t),Jao=r(EIe," (throws an error)."),EIe.forEach(t),Yao=i(Zs),Ie=n(Zs,"DIV",{class:!0});var Nt=s(Ie);m(uw.$$.fragment,Nt),Kao=i(Nt),are=n(Nt,"P",{});var UQr=s(are);Zao=r(UQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),UQr.forEach(t),eno=i(Nt),Va=n(Nt,"P",{});var UE=s(Va);ono=r(UE,"The feature extractor class to instantiate is selected based on the "),nre=n(UE,"CODE",{});var JQr=s(nre);rno=r(JQr,"model_type"),JQr.forEach(t),tno=r(UE,` property of the config object
(either passed as an argument or loaded from `),sre=n(UE,"CODE",{});var YQr=s(sre);ano=r(YQr,"pretrained_model_name_or_path"),YQr.forEach(t),nno=r(UE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),lre=n(UE,"CODE",{});var KQr=s(lre);sno=r(KQr,"pretrained_model_name_or_path"),KQr.forEach(t),lno=r(UE,":"),UE.forEach(t),ino=i(Nt),H=n(Nt,"UL",{});var J=s(H);wh=n(J,"LI",{});var NEe=s(wh);ire=n(NEe,"STRONG",{});var ZQr=s(ire);dno=r(ZQr,"beit"),ZQr.forEach(t),cno=r(NEe," \u2014 "),AB=n(NEe,"A",{href:!0});var eWr=s(AB);fno=r(eWr,"BeitFeatureExtractor"),eWr.forEach(t),mno=r(NEe," (BEiT model)"),NEe.forEach(t),gno=i(J),Ah=n(J,"LI",{});var jEe=s(Ah);dre=n(jEe,"STRONG",{});var oWr=s(dre);hno=r(oWr,"clip"),oWr.forEach(t),pno=r(jEe," \u2014 "),yB=n(jEe,"A",{href:!0});var rWr=s(yB);_no=r(rWr,"CLIPFeatureExtractor"),rWr.forEach(t),uno=r(jEe," (CLIP model)"),jEe.forEach(t),bno=i(J),yh=n(J,"LI",{});var DEe=s(yh);cre=n(DEe,"STRONG",{});var tWr=s(cre);vno=r(tWr,"convnext"),tWr.forEach(t),Fno=r(DEe," \u2014 "),LB=n(DEe,"A",{href:!0});var aWr=s(LB);Tno=r(aWr,"ConvNextFeatureExtractor"),aWr.forEach(t),Mno=r(DEe," (ConvNext model)"),DEe.forEach(t),Eno=i(J),Lh=n(J,"LI",{});var GEe=s(Lh);fre=n(GEe,"STRONG",{});var nWr=s(fre);Cno=r(nWr,"data2vec-audio"),nWr.forEach(t),wno=r(GEe," \u2014 "),xB=n(GEe,"A",{href:!0});var sWr=s(xB);Ano=r(sWr,"Wav2Vec2FeatureExtractor"),sWr.forEach(t),yno=r(GEe," (Data2VecAudio model)"),GEe.forEach(t),Lno=i(J),xh=n(J,"LI",{});var OEe=s(xh);mre=n(OEe,"STRONG",{});var lWr=s(mre);xno=r(lWr,"data2vec-vision"),lWr.forEach(t),kno=r(OEe," \u2014 "),kB=n(OEe,"A",{href:!0});var iWr=s(kB);Sno=r(iWr,"BeitFeatureExtractor"),iWr.forEach(t),Rno=r(OEe," (Data2VecVision model)"),OEe.forEach(t),Bno=i(J),kh=n(J,"LI",{});var VEe=s(kh);gre=n(VEe,"STRONG",{});var dWr=s(gre);Pno=r(dWr,"deit"),dWr.forEach(t),$no=r(VEe," \u2014 "),SB=n(VEe,"A",{href:!0});var cWr=s(SB);Ino=r(cWr,"DeiTFeatureExtractor"),cWr.forEach(t),qno=r(VEe," (DeiT model)"),VEe.forEach(t),Nno=i(J),Sh=n(J,"LI",{});var XEe=s(Sh);hre=n(XEe,"STRONG",{});var fWr=s(hre);jno=r(fWr,"detr"),fWr.forEach(t),Dno=r(XEe," \u2014 "),RB=n(XEe,"A",{href:!0});var mWr=s(RB);Gno=r(mWr,"DetrFeatureExtractor"),mWr.forEach(t),Ono=r(XEe," (DETR model)"),XEe.forEach(t),Vno=i(J),Rh=n(J,"LI",{});var zEe=s(Rh);pre=n(zEe,"STRONG",{});var gWr=s(pre);Xno=r(gWr,"dpt"),gWr.forEach(t),zno=r(zEe," \u2014 "),BB=n(zEe,"A",{href:!0});var hWr=s(BB);Qno=r(hWr,"DPTFeatureExtractor"),hWr.forEach(t),Wno=r(zEe," (DPT model)"),zEe.forEach(t),Hno=i(J),Bh=n(J,"LI",{});var QEe=s(Bh);_re=n(QEe,"STRONG",{});var pWr=s(_re);Uno=r(pWr,"glpn"),pWr.forEach(t),Jno=r(QEe," \u2014 "),PB=n(QEe,"A",{href:!0});var _Wr=s(PB);Yno=r(_Wr,"GLPNFeatureExtractor"),_Wr.forEach(t),Kno=r(QEe," (GLPN model)"),QEe.forEach(t),Zno=i(J),Ph=n(J,"LI",{});var WEe=s(Ph);ure=n(WEe,"STRONG",{});var uWr=s(ure);eso=r(uWr,"hubert"),uWr.forEach(t),oso=r(WEe," \u2014 "),$B=n(WEe,"A",{href:!0});var bWr=s($B);rso=r(bWr,"Wav2Vec2FeatureExtractor"),bWr.forEach(t),tso=r(WEe," (Hubert model)"),WEe.forEach(t),aso=i(J),$h=n(J,"LI",{});var HEe=s($h);bre=n(HEe,"STRONG",{});var vWr=s(bre);nso=r(vWr,"layoutlmv2"),vWr.forEach(t),sso=r(HEe," \u2014 "),IB=n(HEe,"A",{href:!0});var FWr=s(IB);lso=r(FWr,"LayoutLMv2FeatureExtractor"),FWr.forEach(t),iso=r(HEe," (LayoutLMv2 model)"),HEe.forEach(t),dso=i(J),Ih=n(J,"LI",{});var UEe=s(Ih);vre=n(UEe,"STRONG",{});var TWr=s(vre);cso=r(TWr,"maskformer"),TWr.forEach(t),fso=r(UEe," \u2014 "),qB=n(UEe,"A",{href:!0});var MWr=s(qB);mso=r(MWr,"MaskFormerFeatureExtractor"),MWr.forEach(t),gso=r(UEe," (MaskFormer model)"),UEe.forEach(t),hso=i(J),qh=n(J,"LI",{});var JEe=s(qh);Fre=n(JEe,"STRONG",{});var EWr=s(Fre);pso=r(EWr,"perceiver"),EWr.forEach(t),_so=r(JEe," \u2014 "),NB=n(JEe,"A",{href:!0});var CWr=s(NB);uso=r(CWr,"PerceiverFeatureExtractor"),CWr.forEach(t),bso=r(JEe," (Perceiver model)"),JEe.forEach(t),vso=i(J),Nh=n(J,"LI",{});var YEe=s(Nh);Tre=n(YEe,"STRONG",{});var wWr=s(Tre);Fso=r(wWr,"poolformer"),wWr.forEach(t),Tso=r(YEe," \u2014 "),jB=n(YEe,"A",{href:!0});var AWr=s(jB);Mso=r(AWr,"PoolFormerFeatureExtractor"),AWr.forEach(t),Eso=r(YEe," (PoolFormer model)"),YEe.forEach(t),Cso=i(J),jh=n(J,"LI",{});var KEe=s(jh);Mre=n(KEe,"STRONG",{});var yWr=s(Mre);wso=r(yWr,"regnet"),yWr.forEach(t),Aso=r(KEe," \u2014 "),DB=n(KEe,"A",{href:!0});var LWr=s(DB);yso=r(LWr,"ConvNextFeatureExtractor"),LWr.forEach(t),Lso=r(KEe," (RegNet model)"),KEe.forEach(t),xso=i(J),Dh=n(J,"LI",{});var ZEe=s(Dh);Ere=n(ZEe,"STRONG",{});var xWr=s(Ere);kso=r(xWr,"resnet"),xWr.forEach(t),Sso=r(ZEe," \u2014 "),GB=n(ZEe,"A",{href:!0});var kWr=s(GB);Rso=r(kWr,"ConvNextFeatureExtractor"),kWr.forEach(t),Bso=r(ZEe," (ResNet model)"),ZEe.forEach(t),Pso=i(J),Gh=n(J,"LI",{});var eCe=s(Gh);Cre=n(eCe,"STRONG",{});var SWr=s(Cre);$so=r(SWr,"segformer"),SWr.forEach(t),Iso=r(eCe," \u2014 "),OB=n(eCe,"A",{href:!0});var RWr=s(OB);qso=r(RWr,"SegformerFeatureExtractor"),RWr.forEach(t),Nso=r(eCe," (SegFormer model)"),eCe.forEach(t),jso=i(J),Oh=n(J,"LI",{});var oCe=s(Oh);wre=n(oCe,"STRONG",{});var BWr=s(wre);Dso=r(BWr,"speech_to_text"),BWr.forEach(t),Gso=r(oCe," \u2014 "),VB=n(oCe,"A",{href:!0});var PWr=s(VB);Oso=r(PWr,"Speech2TextFeatureExtractor"),PWr.forEach(t),Vso=r(oCe," (Speech2Text model)"),oCe.forEach(t),Xso=i(J),Vh=n(J,"LI",{});var rCe=s(Vh);Are=n(rCe,"STRONG",{});var $Wr=s(Are);zso=r($Wr,"swin"),$Wr.forEach(t),Qso=r(rCe," \u2014 "),XB=n(rCe,"A",{href:!0});var IWr=s(XB);Wso=r(IWr,"ViTFeatureExtractor"),IWr.forEach(t),Hso=r(rCe," (Swin model)"),rCe.forEach(t),Uso=i(J),Xh=n(J,"LI",{});var tCe=s(Xh);yre=n(tCe,"STRONG",{});var qWr=s(yre);Jso=r(qWr,"van"),qWr.forEach(t),Yso=r(tCe," \u2014 "),zB=n(tCe,"A",{href:!0});var NWr=s(zB);Kso=r(NWr,"ConvNextFeatureExtractor"),NWr.forEach(t),Zso=r(tCe," (VAN model)"),tCe.forEach(t),elo=i(J),zh=n(J,"LI",{});var aCe=s(zh);Lre=n(aCe,"STRONG",{});var jWr=s(Lre);olo=r(jWr,"vit"),jWr.forEach(t),rlo=r(aCe," \u2014 "),QB=n(aCe,"A",{href:!0});var DWr=s(QB);tlo=r(DWr,"ViTFeatureExtractor"),DWr.forEach(t),alo=r(aCe," (ViT model)"),aCe.forEach(t),nlo=i(J),Qh=n(J,"LI",{});var nCe=s(Qh);xre=n(nCe,"STRONG",{});var GWr=s(xre);slo=r(GWr,"vit_mae"),GWr.forEach(t),llo=r(nCe," \u2014 "),WB=n(nCe,"A",{href:!0});var OWr=s(WB);ilo=r(OWr,"ViTFeatureExtractor"),OWr.forEach(t),dlo=r(nCe," (ViTMAE model)"),nCe.forEach(t),clo=i(J),Wh=n(J,"LI",{});var sCe=s(Wh);kre=n(sCe,"STRONG",{});var VWr=s(kre);flo=r(VWr,"wav2vec2"),VWr.forEach(t),mlo=r(sCe," \u2014 "),HB=n(sCe,"A",{href:!0});var XWr=s(HB);glo=r(XWr,"Wav2Vec2FeatureExtractor"),XWr.forEach(t),hlo=r(sCe," (Wav2Vec2 model)"),sCe.forEach(t),J.forEach(t),plo=i(Nt),m(Hh.$$.fragment,Nt),_lo=i(Nt),Sre=n(Nt,"P",{});var zWr=s(Sre);ulo=r(zWr,"Examples:"),zWr.forEach(t),blo=i(Nt),m(bw.$$.fragment,Nt),Nt.forEach(t),vlo=i(Zs),Uh=n(Zs,"DIV",{class:!0});var CIe=s(Uh);m(vw.$$.fragment,CIe),Flo=i(CIe),Rre=n(CIe,"P",{});var QWr=s(Rre);Tlo=r(QWr,"Register a new feature extractor for this class."),QWr.forEach(t),CIe.forEach(t),Zs.forEach(t),bPe=i(c),td=n(c,"H2",{class:!0});var wIe=s(td);Jh=n(wIe,"A",{id:!0,class:!0,href:!0});var WWr=s(Jh);Bre=n(WWr,"SPAN",{});var HWr=s(Bre);m(Fw.$$.fragment,HWr),HWr.forEach(t),WWr.forEach(t),Mlo=i(wIe),Pre=n(wIe,"SPAN",{});var UWr=s(Pre);Elo=r(UWr,"AutoProcessor"),UWr.forEach(t),wIe.forEach(t),vPe=i(c),Uo=n(c,"DIV",{class:!0});var el=s(Uo);m(Tw.$$.fragment,el),Clo=i(el),Mw=n(el,"P",{});var AIe=s(Mw);wlo=r(AIe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),UB=n(AIe,"A",{href:!0});var JWr=s(UB);Alo=r(JWr,"AutoProcessor.from_pretrained()"),JWr.forEach(t),ylo=r(AIe," class method."),AIe.forEach(t),Llo=i(el),Ew=n(el,"P",{});var yIe=s(Ew);xlo=r(yIe,"This class cannot be instantiated directly using "),$re=n(yIe,"CODE",{});var YWr=s($re);klo=r(YWr,"__init__()"),YWr.forEach(t),Slo=r(yIe," (throws an error)."),yIe.forEach(t),Rlo=i(el),qe=n(el,"DIV",{class:!0});var jt=s(qe);m(Cw.$$.fragment,jt),Blo=i(jt),Ire=n(jt,"P",{});var KWr=s(Ire);Plo=r(KWr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),KWr.forEach(t),$lo=i(jt),ad=n(jt,"P",{});var vJ=s(ad);Ilo=r(vJ,"The processor class to instantiate is selected based on the "),qre=n(vJ,"CODE",{});var ZWr=s(qre);qlo=r(ZWr,"model_type"),ZWr.forEach(t),Nlo=r(vJ,` property of the config object (either
passed as an argument or loaded from `),Nre=n(vJ,"CODE",{});var eHr=s(Nre);jlo=r(eHr,"pretrained_model_name_or_path"),eHr.forEach(t),Dlo=r(vJ," if possible):"),vJ.forEach(t),Glo=i(jt),de=n(jt,"UL",{});var me=s(de);Yh=n(me,"LI",{});var lCe=s(Yh);jre=n(lCe,"STRONG",{});var oHr=s(jre);Olo=r(oHr,"clip"),oHr.forEach(t),Vlo=r(lCe," \u2014 "),JB=n(lCe,"A",{href:!0});var rHr=s(JB);Xlo=r(rHr,"CLIPProcessor"),rHr.forEach(t),zlo=r(lCe," (CLIP model)"),lCe.forEach(t),Qlo=i(me),Kh=n(me,"LI",{});var iCe=s(Kh);Dre=n(iCe,"STRONG",{});var tHr=s(Dre);Wlo=r(tHr,"layoutlmv2"),tHr.forEach(t),Hlo=r(iCe," \u2014 "),YB=n(iCe,"A",{href:!0});var aHr=s(YB);Ulo=r(aHr,"LayoutLMv2Processor"),aHr.forEach(t),Jlo=r(iCe," (LayoutLMv2 model)"),iCe.forEach(t),Ylo=i(me),Zh=n(me,"LI",{});var dCe=s(Zh);Gre=n(dCe,"STRONG",{});var nHr=s(Gre);Klo=r(nHr,"layoutxlm"),nHr.forEach(t),Zlo=r(dCe," \u2014 "),KB=n(dCe,"A",{href:!0});var sHr=s(KB);eio=r(sHr,"LayoutXLMProcessor"),sHr.forEach(t),oio=r(dCe," (LayoutXLM model)"),dCe.forEach(t),rio=i(me),ep=n(me,"LI",{});var cCe=s(ep);Ore=n(cCe,"STRONG",{});var lHr=s(Ore);tio=r(lHr,"sew"),lHr.forEach(t),aio=r(cCe," \u2014 "),ZB=n(cCe,"A",{href:!0});var iHr=s(ZB);nio=r(iHr,"Wav2Vec2Processor"),iHr.forEach(t),sio=r(cCe," (SEW model)"),cCe.forEach(t),lio=i(me),op=n(me,"LI",{});var fCe=s(op);Vre=n(fCe,"STRONG",{});var dHr=s(Vre);iio=r(dHr,"sew-d"),dHr.forEach(t),dio=r(fCe," \u2014 "),eP=n(fCe,"A",{href:!0});var cHr=s(eP);cio=r(cHr,"Wav2Vec2Processor"),cHr.forEach(t),fio=r(fCe," (SEW-D model)"),fCe.forEach(t),mio=i(me),rp=n(me,"LI",{});var mCe=s(rp);Xre=n(mCe,"STRONG",{});var fHr=s(Xre);gio=r(fHr,"speech_to_text"),fHr.forEach(t),hio=r(mCe," \u2014 "),oP=n(mCe,"A",{href:!0});var mHr=s(oP);pio=r(mHr,"Speech2TextProcessor"),mHr.forEach(t),_io=r(mCe," (Speech2Text model)"),mCe.forEach(t),uio=i(me),tp=n(me,"LI",{});var gCe=s(tp);zre=n(gCe,"STRONG",{});var gHr=s(zre);bio=r(gHr,"speech_to_text_2"),gHr.forEach(t),vio=r(gCe," \u2014 "),rP=n(gCe,"A",{href:!0});var hHr=s(rP);Fio=r(hHr,"Speech2Text2Processor"),hHr.forEach(t),Tio=r(gCe," (Speech2Text2 model)"),gCe.forEach(t),Mio=i(me),ap=n(me,"LI",{});var hCe=s(ap);Qre=n(hCe,"STRONG",{});var pHr=s(Qre);Eio=r(pHr,"trocr"),pHr.forEach(t),Cio=r(hCe," \u2014 "),tP=n(hCe,"A",{href:!0});var _Hr=s(tP);wio=r(_Hr,"TrOCRProcessor"),_Hr.forEach(t),Aio=r(hCe," (TrOCR model)"),hCe.forEach(t),yio=i(me),np=n(me,"LI",{});var pCe=s(np);Wre=n(pCe,"STRONG",{});var uHr=s(Wre);Lio=r(uHr,"unispeech"),uHr.forEach(t),xio=r(pCe," \u2014 "),aP=n(pCe,"A",{href:!0});var bHr=s(aP);kio=r(bHr,"Wav2Vec2Processor"),bHr.forEach(t),Sio=r(pCe," (UniSpeech model)"),pCe.forEach(t),Rio=i(me),sp=n(me,"LI",{});var _Ce=s(sp);Hre=n(_Ce,"STRONG",{});var vHr=s(Hre);Bio=r(vHr,"unispeech-sat"),vHr.forEach(t),Pio=r(_Ce," \u2014 "),nP=n(_Ce,"A",{href:!0});var FHr=s(nP);$io=r(FHr,"Wav2Vec2Processor"),FHr.forEach(t),Iio=r(_Ce," (UniSpeechSat model)"),_Ce.forEach(t),qio=i(me),lp=n(me,"LI",{});var uCe=s(lp);Ure=n(uCe,"STRONG",{});var THr=s(Ure);Nio=r(THr,"vilt"),THr.forEach(t),jio=r(uCe," \u2014 "),sP=n(uCe,"A",{href:!0});var MHr=s(sP);Dio=r(MHr,"ViltProcessor"),MHr.forEach(t),Gio=r(uCe," (ViLT model)"),uCe.forEach(t),Oio=i(me),ip=n(me,"LI",{});var bCe=s(ip);Jre=n(bCe,"STRONG",{});var EHr=s(Jre);Vio=r(EHr,"vision-text-dual-encoder"),EHr.forEach(t),Xio=r(bCe," \u2014 "),lP=n(bCe,"A",{href:!0});var CHr=s(lP);zio=r(CHr,"VisionTextDualEncoderProcessor"),CHr.forEach(t),Qio=r(bCe," (VisionTextDualEncoder model)"),bCe.forEach(t),Wio=i(me),dp=n(me,"LI",{});var vCe=s(dp);Yre=n(vCe,"STRONG",{});var wHr=s(Yre);Hio=r(wHr,"wav2vec2"),wHr.forEach(t),Uio=r(vCe," \u2014 "),iP=n(vCe,"A",{href:!0});var AHr=s(iP);Jio=r(AHr,"Wav2Vec2Processor"),AHr.forEach(t),Yio=r(vCe," (Wav2Vec2 model)"),vCe.forEach(t),Kio=i(me),cp=n(me,"LI",{});var FCe=s(cp);Kre=n(FCe,"STRONG",{});var yHr=s(Kre);Zio=r(yHr,"wavlm"),yHr.forEach(t),edo=r(FCe," \u2014 "),dP=n(FCe,"A",{href:!0});var LHr=s(dP);odo=r(LHr,"Wav2Vec2Processor"),LHr.forEach(t),rdo=r(FCe," (WavLM model)"),FCe.forEach(t),me.forEach(t),tdo=i(jt),m(fp.$$.fragment,jt),ado=i(jt),Zre=n(jt,"P",{});var xHr=s(Zre);ndo=r(xHr,"Examples:"),xHr.forEach(t),sdo=i(jt),m(ww.$$.fragment,jt),jt.forEach(t),ldo=i(el),mp=n(el,"DIV",{class:!0});var LIe=s(mp);m(Aw.$$.fragment,LIe),ido=i(LIe),ete=n(LIe,"P",{});var kHr=s(ete);ddo=r(kHr,"Register a new processor for this class."),kHr.forEach(t),LIe.forEach(t),el.forEach(t),FPe=i(c),nd=n(c,"H2",{class:!0});var xIe=s(nd);gp=n(xIe,"A",{id:!0,class:!0,href:!0});var SHr=s(gp);ote=n(SHr,"SPAN",{});var RHr=s(ote);m(yw.$$.fragment,RHr),RHr.forEach(t),SHr.forEach(t),cdo=i(xIe),rte=n(xIe,"SPAN",{});var BHr=s(rte);fdo=r(BHr,"AutoModel"),BHr.forEach(t),xIe.forEach(t),TPe=i(c),Jo=n(c,"DIV",{class:!0});var ol=s(Jo);m(Lw.$$.fragment,ol),mdo=i(ol),sd=n(ol,"P",{});var FJ=s(sd);gdo=r(FJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cP=n(FJ,"A",{href:!0});var PHr=s(cP);hdo=r(PHr,"from_pretrained()"),PHr.forEach(t),pdo=r(FJ," class method or the "),fP=n(FJ,"A",{href:!0});var $Hr=s(fP);_do=r($Hr,"from_config()"),$Hr.forEach(t),udo=r(FJ,` class
method.`),FJ.forEach(t),bdo=i(ol),xw=n(ol,"P",{});var kIe=s(xw);vdo=r(kIe,"This class cannot be instantiated directly using "),tte=n(kIe,"CODE",{});var IHr=s(tte);Fdo=r(IHr,"__init__()"),IHr.forEach(t),Tdo=r(kIe," (throws an error)."),kIe.forEach(t),Mdo=i(ol),Xr=n(ol,"DIV",{class:!0});var rl=s(Xr);m(kw.$$.fragment,rl),Edo=i(rl),ate=n(rl,"P",{});var qHr=s(ate);Cdo=r(qHr,"Instantiates one of the base model classes of the library from a configuration."),qHr.forEach(t),wdo=i(rl),ld=n(rl,"P",{});var TJ=s(ld);Ado=r(TJ,`Note:
Loading a model from its configuration file does `),nte=n(TJ,"STRONG",{});var NHr=s(nte);ydo=r(NHr,"not"),NHr.forEach(t),Ldo=r(TJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mP=n(TJ,"A",{href:!0});var jHr=s(mP);xdo=r(jHr,"from_pretrained()"),jHr.forEach(t),kdo=r(TJ," to load the model weights."),TJ.forEach(t),Sdo=i(rl),ste=n(rl,"P",{});var DHr=s(ste);Rdo=r(DHr,"Examples:"),DHr.forEach(t),Bdo=i(rl),m(Sw.$$.fragment,rl),rl.forEach(t),Pdo=i(ol),Ne=n(ol,"DIV",{class:!0});var Dt=s(Ne);m(Rw.$$.fragment,Dt),$do=i(Dt),lte=n(Dt,"P",{});var GHr=s(lte);Ido=r(GHr,"Instantiate one of the base model classes of the library from a pretrained model."),GHr.forEach(t),qdo=i(Dt),Xa=n(Dt,"P",{});var JE=s(Xa);Ndo=r(JE,"The model class to instantiate is selected based on the "),ite=n(JE,"CODE",{});var OHr=s(ite);jdo=r(OHr,"model_type"),OHr.forEach(t),Ddo=r(JE,` property of the config object (either
passed as an argument or loaded from `),dte=n(JE,"CODE",{});var VHr=s(dte);Gdo=r(VHr,"pretrained_model_name_or_path"),VHr.forEach(t),Odo=r(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cte=n(JE,"CODE",{});var XHr=s(cte);Vdo=r(XHr,"pretrained_model_name_or_path"),XHr.forEach(t),Xdo=r(JE,":"),JE.forEach(t),zdo=i(Dt),T=n(Dt,"UL",{});var M=s(T);hp=n(M,"LI",{});var TCe=s(hp);fte=n(TCe,"STRONG",{});var zHr=s(fte);Qdo=r(zHr,"albert"),zHr.forEach(t),Wdo=r(TCe," \u2014 "),gP=n(TCe,"A",{href:!0});var QHr=s(gP);Hdo=r(QHr,"AlbertModel"),QHr.forEach(t),Udo=r(TCe," (ALBERT model)"),TCe.forEach(t),Jdo=i(M),pp=n(M,"LI",{});var MCe=s(pp);mte=n(MCe,"STRONG",{});var WHr=s(mte);Ydo=r(WHr,"bart"),WHr.forEach(t),Kdo=r(MCe," \u2014 "),hP=n(MCe,"A",{href:!0});var HHr=s(hP);Zdo=r(HHr,"BartModel"),HHr.forEach(t),eco=r(MCe," (BART model)"),MCe.forEach(t),oco=i(M),_p=n(M,"LI",{});var ECe=s(_p);gte=n(ECe,"STRONG",{});var UHr=s(gte);rco=r(UHr,"beit"),UHr.forEach(t),tco=r(ECe," \u2014 "),pP=n(ECe,"A",{href:!0});var JHr=s(pP);aco=r(JHr,"BeitModel"),JHr.forEach(t),nco=r(ECe," (BEiT model)"),ECe.forEach(t),sco=i(M),up=n(M,"LI",{});var CCe=s(up);hte=n(CCe,"STRONG",{});var YHr=s(hte);lco=r(YHr,"bert"),YHr.forEach(t),ico=r(CCe," \u2014 "),_P=n(CCe,"A",{href:!0});var KHr=s(_P);dco=r(KHr,"BertModel"),KHr.forEach(t),cco=r(CCe," (BERT model)"),CCe.forEach(t),fco=i(M),bp=n(M,"LI",{});var wCe=s(bp);pte=n(wCe,"STRONG",{});var ZHr=s(pte);mco=r(ZHr,"bert-generation"),ZHr.forEach(t),gco=r(wCe," \u2014 "),uP=n(wCe,"A",{href:!0});var eUr=s(uP);hco=r(eUr,"BertGenerationEncoder"),eUr.forEach(t),pco=r(wCe," (Bert Generation model)"),wCe.forEach(t),_co=i(M),vp=n(M,"LI",{});var ACe=s(vp);_te=n(ACe,"STRONG",{});var oUr=s(_te);uco=r(oUr,"big_bird"),oUr.forEach(t),bco=r(ACe," \u2014 "),bP=n(ACe,"A",{href:!0});var rUr=s(bP);vco=r(rUr,"BigBirdModel"),rUr.forEach(t),Fco=r(ACe," (BigBird model)"),ACe.forEach(t),Tco=i(M),Fp=n(M,"LI",{});var yCe=s(Fp);ute=n(yCe,"STRONG",{});var tUr=s(ute);Mco=r(tUr,"bigbird_pegasus"),tUr.forEach(t),Eco=r(yCe," \u2014 "),vP=n(yCe,"A",{href:!0});var aUr=s(vP);Cco=r(aUr,"BigBirdPegasusModel"),aUr.forEach(t),wco=r(yCe," (BigBirdPegasus model)"),yCe.forEach(t),Aco=i(M),Tp=n(M,"LI",{});var LCe=s(Tp);bte=n(LCe,"STRONG",{});var nUr=s(bte);yco=r(nUr,"blenderbot"),nUr.forEach(t),Lco=r(LCe," \u2014 "),FP=n(LCe,"A",{href:!0});var sUr=s(FP);xco=r(sUr,"BlenderbotModel"),sUr.forEach(t),kco=r(LCe," (Blenderbot model)"),LCe.forEach(t),Sco=i(M),Mp=n(M,"LI",{});var xCe=s(Mp);vte=n(xCe,"STRONG",{});var lUr=s(vte);Rco=r(lUr,"blenderbot-small"),lUr.forEach(t),Bco=r(xCe," \u2014 "),TP=n(xCe,"A",{href:!0});var iUr=s(TP);Pco=r(iUr,"BlenderbotSmallModel"),iUr.forEach(t),$co=r(xCe," (BlenderbotSmall model)"),xCe.forEach(t),Ico=i(M),Ep=n(M,"LI",{});var kCe=s(Ep);Fte=n(kCe,"STRONG",{});var dUr=s(Fte);qco=r(dUr,"camembert"),dUr.forEach(t),Nco=r(kCe," \u2014 "),MP=n(kCe,"A",{href:!0});var cUr=s(MP);jco=r(cUr,"CamembertModel"),cUr.forEach(t),Dco=r(kCe," (CamemBERT model)"),kCe.forEach(t),Gco=i(M),Cp=n(M,"LI",{});var SCe=s(Cp);Tte=n(SCe,"STRONG",{});var fUr=s(Tte);Oco=r(fUr,"canine"),fUr.forEach(t),Vco=r(SCe," \u2014 "),EP=n(SCe,"A",{href:!0});var mUr=s(EP);Xco=r(mUr,"CanineModel"),mUr.forEach(t),zco=r(SCe," (Canine model)"),SCe.forEach(t),Qco=i(M),wp=n(M,"LI",{});var RCe=s(wp);Mte=n(RCe,"STRONG",{});var gUr=s(Mte);Wco=r(gUr,"clip"),gUr.forEach(t),Hco=r(RCe," \u2014 "),CP=n(RCe,"A",{href:!0});var hUr=s(CP);Uco=r(hUr,"CLIPModel"),hUr.forEach(t),Jco=r(RCe," (CLIP model)"),RCe.forEach(t),Yco=i(M),Ap=n(M,"LI",{});var BCe=s(Ap);Ete=n(BCe,"STRONG",{});var pUr=s(Ete);Kco=r(pUr,"convbert"),pUr.forEach(t),Zco=r(BCe," \u2014 "),wP=n(BCe,"A",{href:!0});var _Ur=s(wP);efo=r(_Ur,"ConvBertModel"),_Ur.forEach(t),ofo=r(BCe," (ConvBERT model)"),BCe.forEach(t),rfo=i(M),yp=n(M,"LI",{});var PCe=s(yp);Cte=n(PCe,"STRONG",{});var uUr=s(Cte);tfo=r(uUr,"convnext"),uUr.forEach(t),afo=r(PCe," \u2014 "),AP=n(PCe,"A",{href:!0});var bUr=s(AP);nfo=r(bUr,"ConvNextModel"),bUr.forEach(t),sfo=r(PCe," (ConvNext model)"),PCe.forEach(t),lfo=i(M),Lp=n(M,"LI",{});var $Ce=s(Lp);wte=n($Ce,"STRONG",{});var vUr=s(wte);ifo=r(vUr,"ctrl"),vUr.forEach(t),dfo=r($Ce," \u2014 "),yP=n($Ce,"A",{href:!0});var FUr=s(yP);cfo=r(FUr,"CTRLModel"),FUr.forEach(t),ffo=r($Ce," (CTRL model)"),$Ce.forEach(t),mfo=i(M),xp=n(M,"LI",{});var ICe=s(xp);Ate=n(ICe,"STRONG",{});var TUr=s(Ate);gfo=r(TUr,"data2vec-audio"),TUr.forEach(t),hfo=r(ICe," \u2014 "),LP=n(ICe,"A",{href:!0});var MUr=s(LP);pfo=r(MUr,"Data2VecAudioModel"),MUr.forEach(t),_fo=r(ICe," (Data2VecAudio model)"),ICe.forEach(t),ufo=i(M),kp=n(M,"LI",{});var qCe=s(kp);yte=n(qCe,"STRONG",{});var EUr=s(yte);bfo=r(EUr,"data2vec-text"),EUr.forEach(t),vfo=r(qCe," \u2014 "),xP=n(qCe,"A",{href:!0});var CUr=s(xP);Ffo=r(CUr,"Data2VecTextModel"),CUr.forEach(t),Tfo=r(qCe," (Data2VecText model)"),qCe.forEach(t),Mfo=i(M),Sp=n(M,"LI",{});var NCe=s(Sp);Lte=n(NCe,"STRONG",{});var wUr=s(Lte);Efo=r(wUr,"data2vec-vision"),wUr.forEach(t),Cfo=r(NCe," \u2014 "),kP=n(NCe,"A",{href:!0});var AUr=s(kP);wfo=r(AUr,"Data2VecVisionModel"),AUr.forEach(t),Afo=r(NCe," (Data2VecVision model)"),NCe.forEach(t),yfo=i(M),Rp=n(M,"LI",{});var jCe=s(Rp);xte=n(jCe,"STRONG",{});var yUr=s(xte);Lfo=r(yUr,"deberta"),yUr.forEach(t),xfo=r(jCe," \u2014 "),SP=n(jCe,"A",{href:!0});var LUr=s(SP);kfo=r(LUr,"DebertaModel"),LUr.forEach(t),Sfo=r(jCe," (DeBERTa model)"),jCe.forEach(t),Rfo=i(M),Bp=n(M,"LI",{});var DCe=s(Bp);kte=n(DCe,"STRONG",{});var xUr=s(kte);Bfo=r(xUr,"deberta-v2"),xUr.forEach(t),Pfo=r(DCe," \u2014 "),RP=n(DCe,"A",{href:!0});var kUr=s(RP);$fo=r(kUr,"DebertaV2Model"),kUr.forEach(t),Ifo=r(DCe," (DeBERTa-v2 model)"),DCe.forEach(t),qfo=i(M),Pp=n(M,"LI",{});var GCe=s(Pp);Ste=n(GCe,"STRONG",{});var SUr=s(Ste);Nfo=r(SUr,"decision_transformer"),SUr.forEach(t),jfo=r(GCe," \u2014 "),BP=n(GCe,"A",{href:!0});var RUr=s(BP);Dfo=r(RUr,"DecisionTransformerModel"),RUr.forEach(t),Gfo=r(GCe," (Decision Transformer model)"),GCe.forEach(t),Ofo=i(M),$p=n(M,"LI",{});var OCe=s($p);Rte=n(OCe,"STRONG",{});var BUr=s(Rte);Vfo=r(BUr,"deit"),BUr.forEach(t),Xfo=r(OCe," \u2014 "),PP=n(OCe,"A",{href:!0});var PUr=s(PP);zfo=r(PUr,"DeiTModel"),PUr.forEach(t),Qfo=r(OCe," (DeiT model)"),OCe.forEach(t),Wfo=i(M),Ip=n(M,"LI",{});var VCe=s(Ip);Bte=n(VCe,"STRONG",{});var $Ur=s(Bte);Hfo=r($Ur,"detr"),$Ur.forEach(t),Ufo=r(VCe," \u2014 "),$P=n(VCe,"A",{href:!0});var IUr=s($P);Jfo=r(IUr,"DetrModel"),IUr.forEach(t),Yfo=r(VCe," (DETR model)"),VCe.forEach(t),Kfo=i(M),qp=n(M,"LI",{});var XCe=s(qp);Pte=n(XCe,"STRONG",{});var qUr=s(Pte);Zfo=r(qUr,"distilbert"),qUr.forEach(t),emo=r(XCe," \u2014 "),IP=n(XCe,"A",{href:!0});var NUr=s(IP);omo=r(NUr,"DistilBertModel"),NUr.forEach(t),rmo=r(XCe," (DistilBERT model)"),XCe.forEach(t),tmo=i(M),Np=n(M,"LI",{});var zCe=s(Np);$te=n(zCe,"STRONG",{});var jUr=s($te);amo=r(jUr,"dpr"),jUr.forEach(t),nmo=r(zCe," \u2014 "),qP=n(zCe,"A",{href:!0});var DUr=s(qP);smo=r(DUr,"DPRQuestionEncoder"),DUr.forEach(t),lmo=r(zCe," (DPR model)"),zCe.forEach(t),imo=i(M),jp=n(M,"LI",{});var QCe=s(jp);Ite=n(QCe,"STRONG",{});var GUr=s(Ite);dmo=r(GUr,"dpt"),GUr.forEach(t),cmo=r(QCe," \u2014 "),NP=n(QCe,"A",{href:!0});var OUr=s(NP);fmo=r(OUr,"DPTModel"),OUr.forEach(t),mmo=r(QCe," (DPT model)"),QCe.forEach(t),gmo=i(M),Dp=n(M,"LI",{});var WCe=s(Dp);qte=n(WCe,"STRONG",{});var VUr=s(qte);hmo=r(VUr,"electra"),VUr.forEach(t),pmo=r(WCe," \u2014 "),jP=n(WCe,"A",{href:!0});var XUr=s(jP);_mo=r(XUr,"ElectraModel"),XUr.forEach(t),umo=r(WCe," (ELECTRA model)"),WCe.forEach(t),bmo=i(M),Gp=n(M,"LI",{});var HCe=s(Gp);Nte=n(HCe,"STRONG",{});var zUr=s(Nte);vmo=r(zUr,"flaubert"),zUr.forEach(t),Fmo=r(HCe," \u2014 "),DP=n(HCe,"A",{href:!0});var QUr=s(DP);Tmo=r(QUr,"FlaubertModel"),QUr.forEach(t),Mmo=r(HCe," (FlauBERT model)"),HCe.forEach(t),Emo=i(M),Op=n(M,"LI",{});var UCe=s(Op);jte=n(UCe,"STRONG",{});var WUr=s(jte);Cmo=r(WUr,"fnet"),WUr.forEach(t),wmo=r(UCe," \u2014 "),GP=n(UCe,"A",{href:!0});var HUr=s(GP);Amo=r(HUr,"FNetModel"),HUr.forEach(t),ymo=r(UCe," (FNet model)"),UCe.forEach(t),Lmo=i(M),Vp=n(M,"LI",{});var JCe=s(Vp);Dte=n(JCe,"STRONG",{});var UUr=s(Dte);xmo=r(UUr,"fsmt"),UUr.forEach(t),kmo=r(JCe," \u2014 "),OP=n(JCe,"A",{href:!0});var JUr=s(OP);Smo=r(JUr,"FSMTModel"),JUr.forEach(t),Rmo=r(JCe," (FairSeq Machine-Translation model)"),JCe.forEach(t),Bmo=i(M),Hs=n(M,"LI",{});var X9=s(Hs);Gte=n(X9,"STRONG",{});var YUr=s(Gte);Pmo=r(YUr,"funnel"),YUr.forEach(t),$mo=r(X9," \u2014 "),VP=n(X9,"A",{href:!0});var KUr=s(VP);Imo=r(KUr,"FunnelModel"),KUr.forEach(t),qmo=r(X9," or "),XP=n(X9,"A",{href:!0});var ZUr=s(XP);Nmo=r(ZUr,"FunnelBaseModel"),ZUr.forEach(t),jmo=r(X9," (Funnel Transformer model)"),X9.forEach(t),Dmo=i(M),Xp=n(M,"LI",{});var YCe=s(Xp);Ote=n(YCe,"STRONG",{});var eJr=s(Ote);Gmo=r(eJr,"glpn"),eJr.forEach(t),Omo=r(YCe," \u2014 "),zP=n(YCe,"A",{href:!0});var oJr=s(zP);Vmo=r(oJr,"GLPNModel"),oJr.forEach(t),Xmo=r(YCe," (GLPN model)"),YCe.forEach(t),zmo=i(M),zp=n(M,"LI",{});var KCe=s(zp);Vte=n(KCe,"STRONG",{});var rJr=s(Vte);Qmo=r(rJr,"gpt2"),rJr.forEach(t),Wmo=r(KCe," \u2014 "),QP=n(KCe,"A",{href:!0});var tJr=s(QP);Hmo=r(tJr,"GPT2Model"),tJr.forEach(t),Umo=r(KCe," (OpenAI GPT-2 model)"),KCe.forEach(t),Jmo=i(M),Qp=n(M,"LI",{});var ZCe=s(Qp);Xte=n(ZCe,"STRONG",{});var aJr=s(Xte);Ymo=r(aJr,"gpt_neo"),aJr.forEach(t),Kmo=r(ZCe," \u2014 "),WP=n(ZCe,"A",{href:!0});var nJr=s(WP);Zmo=r(nJr,"GPTNeoModel"),nJr.forEach(t),ego=r(ZCe," (GPT Neo model)"),ZCe.forEach(t),ogo=i(M),Wp=n(M,"LI",{});var ewe=s(Wp);zte=n(ewe,"STRONG",{});var sJr=s(zte);rgo=r(sJr,"gptj"),sJr.forEach(t),tgo=r(ewe," \u2014 "),HP=n(ewe,"A",{href:!0});var lJr=s(HP);ago=r(lJr,"GPTJModel"),lJr.forEach(t),ngo=r(ewe," (GPT-J model)"),ewe.forEach(t),sgo=i(M),Hp=n(M,"LI",{});var owe=s(Hp);Qte=n(owe,"STRONG",{});var iJr=s(Qte);lgo=r(iJr,"hubert"),iJr.forEach(t),igo=r(owe," \u2014 "),UP=n(owe,"A",{href:!0});var dJr=s(UP);dgo=r(dJr,"HubertModel"),dJr.forEach(t),cgo=r(owe," (Hubert model)"),owe.forEach(t),fgo=i(M),Up=n(M,"LI",{});var rwe=s(Up);Wte=n(rwe,"STRONG",{});var cJr=s(Wte);mgo=r(cJr,"ibert"),cJr.forEach(t),ggo=r(rwe," \u2014 "),JP=n(rwe,"A",{href:!0});var fJr=s(JP);hgo=r(fJr,"IBertModel"),fJr.forEach(t),pgo=r(rwe," (I-BERT model)"),rwe.forEach(t),_go=i(M),Jp=n(M,"LI",{});var twe=s(Jp);Hte=n(twe,"STRONG",{});var mJr=s(Hte);ugo=r(mJr,"imagegpt"),mJr.forEach(t),bgo=r(twe," \u2014 "),YP=n(twe,"A",{href:!0});var gJr=s(YP);vgo=r(gJr,"ImageGPTModel"),gJr.forEach(t),Fgo=r(twe," (ImageGPT model)"),twe.forEach(t),Tgo=i(M),Yp=n(M,"LI",{});var awe=s(Yp);Ute=n(awe,"STRONG",{});var hJr=s(Ute);Mgo=r(hJr,"layoutlm"),hJr.forEach(t),Ego=r(awe," \u2014 "),KP=n(awe,"A",{href:!0});var pJr=s(KP);Cgo=r(pJr,"LayoutLMModel"),pJr.forEach(t),wgo=r(awe," (LayoutLM model)"),awe.forEach(t),Ago=i(M),Kp=n(M,"LI",{});var nwe=s(Kp);Jte=n(nwe,"STRONG",{});var _Jr=s(Jte);ygo=r(_Jr,"layoutlmv2"),_Jr.forEach(t),Lgo=r(nwe," \u2014 "),ZP=n(nwe,"A",{href:!0});var uJr=s(ZP);xgo=r(uJr,"LayoutLMv2Model"),uJr.forEach(t),kgo=r(nwe," (LayoutLMv2 model)"),nwe.forEach(t),Sgo=i(M),Zp=n(M,"LI",{});var swe=s(Zp);Yte=n(swe,"STRONG",{});var bJr=s(Yte);Rgo=r(bJr,"led"),bJr.forEach(t),Bgo=r(swe," \u2014 "),e$=n(swe,"A",{href:!0});var vJr=s(e$);Pgo=r(vJr,"LEDModel"),vJr.forEach(t),$go=r(swe," (LED model)"),swe.forEach(t),Igo=i(M),e_=n(M,"LI",{});var lwe=s(e_);Kte=n(lwe,"STRONG",{});var FJr=s(Kte);qgo=r(FJr,"longformer"),FJr.forEach(t),Ngo=r(lwe," \u2014 "),o$=n(lwe,"A",{href:!0});var TJr=s(o$);jgo=r(TJr,"LongformerModel"),TJr.forEach(t),Dgo=r(lwe," (Longformer model)"),lwe.forEach(t),Ggo=i(M),o_=n(M,"LI",{});var iwe=s(o_);Zte=n(iwe,"STRONG",{});var MJr=s(Zte);Ogo=r(MJr,"luke"),MJr.forEach(t),Vgo=r(iwe," \u2014 "),r$=n(iwe,"A",{href:!0});var EJr=s(r$);Xgo=r(EJr,"LukeModel"),EJr.forEach(t),zgo=r(iwe," (LUKE model)"),iwe.forEach(t),Qgo=i(M),r_=n(M,"LI",{});var dwe=s(r_);eae=n(dwe,"STRONG",{});var CJr=s(eae);Wgo=r(CJr,"lxmert"),CJr.forEach(t),Hgo=r(dwe," \u2014 "),t$=n(dwe,"A",{href:!0});var wJr=s(t$);Ugo=r(wJr,"LxmertModel"),wJr.forEach(t),Jgo=r(dwe," (LXMERT model)"),dwe.forEach(t),Ygo=i(M),t_=n(M,"LI",{});var cwe=s(t_);oae=n(cwe,"STRONG",{});var AJr=s(oae);Kgo=r(AJr,"m2m_100"),AJr.forEach(t),Zgo=r(cwe," \u2014 "),a$=n(cwe,"A",{href:!0});var yJr=s(a$);eho=r(yJr,"M2M100Model"),yJr.forEach(t),oho=r(cwe," (M2M100 model)"),cwe.forEach(t),rho=i(M),a_=n(M,"LI",{});var fwe=s(a_);rae=n(fwe,"STRONG",{});var LJr=s(rae);tho=r(LJr,"marian"),LJr.forEach(t),aho=r(fwe," \u2014 "),n$=n(fwe,"A",{href:!0});var xJr=s(n$);nho=r(xJr,"MarianModel"),xJr.forEach(t),sho=r(fwe," (Marian model)"),fwe.forEach(t),lho=i(M),n_=n(M,"LI",{});var mwe=s(n_);tae=n(mwe,"STRONG",{});var kJr=s(tae);iho=r(kJr,"maskformer"),kJr.forEach(t),dho=r(mwe," \u2014 "),s$=n(mwe,"A",{href:!0});var SJr=s(s$);cho=r(SJr,"MaskFormerModel"),SJr.forEach(t),fho=r(mwe," (MaskFormer model)"),mwe.forEach(t),mho=i(M),s_=n(M,"LI",{});var gwe=s(s_);aae=n(gwe,"STRONG",{});var RJr=s(aae);gho=r(RJr,"mbart"),RJr.forEach(t),hho=r(gwe," \u2014 "),l$=n(gwe,"A",{href:!0});var BJr=s(l$);pho=r(BJr,"MBartModel"),BJr.forEach(t),_ho=r(gwe," (mBART model)"),gwe.forEach(t),uho=i(M),l_=n(M,"LI",{});var hwe=s(l_);nae=n(hwe,"STRONG",{});var PJr=s(nae);bho=r(PJr,"megatron-bert"),PJr.forEach(t),vho=r(hwe," \u2014 "),i$=n(hwe,"A",{href:!0});var $Jr=s(i$);Fho=r($Jr,"MegatronBertModel"),$Jr.forEach(t),Tho=r(hwe," (MegatronBert model)"),hwe.forEach(t),Mho=i(M),i_=n(M,"LI",{});var pwe=s(i_);sae=n(pwe,"STRONG",{});var IJr=s(sae);Eho=r(IJr,"mobilebert"),IJr.forEach(t),Cho=r(pwe," \u2014 "),d$=n(pwe,"A",{href:!0});var qJr=s(d$);who=r(qJr,"MobileBertModel"),qJr.forEach(t),Aho=r(pwe," (MobileBERT model)"),pwe.forEach(t),yho=i(M),d_=n(M,"LI",{});var _we=s(d_);lae=n(_we,"STRONG",{});var NJr=s(lae);Lho=r(NJr,"mpnet"),NJr.forEach(t),xho=r(_we," \u2014 "),c$=n(_we,"A",{href:!0});var jJr=s(c$);kho=r(jJr,"MPNetModel"),jJr.forEach(t),Sho=r(_we," (MPNet model)"),_we.forEach(t),Rho=i(M),c_=n(M,"LI",{});var uwe=s(c_);iae=n(uwe,"STRONG",{});var DJr=s(iae);Bho=r(DJr,"mt5"),DJr.forEach(t),Pho=r(uwe," \u2014 "),f$=n(uwe,"A",{href:!0});var GJr=s(f$);$ho=r(GJr,"MT5Model"),GJr.forEach(t),Iho=r(uwe," (mT5 model)"),uwe.forEach(t),qho=i(M),f_=n(M,"LI",{});var bwe=s(f_);dae=n(bwe,"STRONG",{});var OJr=s(dae);Nho=r(OJr,"nystromformer"),OJr.forEach(t),jho=r(bwe," \u2014 "),m$=n(bwe,"A",{href:!0});var VJr=s(m$);Dho=r(VJr,"NystromformerModel"),VJr.forEach(t),Gho=r(bwe," (Nystromformer model)"),bwe.forEach(t),Oho=i(M),m_=n(M,"LI",{});var vwe=s(m_);cae=n(vwe,"STRONG",{});var XJr=s(cae);Vho=r(XJr,"openai-gpt"),XJr.forEach(t),Xho=r(vwe," \u2014 "),g$=n(vwe,"A",{href:!0});var zJr=s(g$);zho=r(zJr,"OpenAIGPTModel"),zJr.forEach(t),Qho=r(vwe," (OpenAI GPT model)"),vwe.forEach(t),Who=i(M),g_=n(M,"LI",{});var Fwe=s(g_);fae=n(Fwe,"STRONG",{});var QJr=s(fae);Hho=r(QJr,"pegasus"),QJr.forEach(t),Uho=r(Fwe," \u2014 "),h$=n(Fwe,"A",{href:!0});var WJr=s(h$);Jho=r(WJr,"PegasusModel"),WJr.forEach(t),Yho=r(Fwe," (Pegasus model)"),Fwe.forEach(t),Kho=i(M),h_=n(M,"LI",{});var Twe=s(h_);mae=n(Twe,"STRONG",{});var HJr=s(mae);Zho=r(HJr,"perceiver"),HJr.forEach(t),epo=r(Twe," \u2014 "),p$=n(Twe,"A",{href:!0});var UJr=s(p$);opo=r(UJr,"PerceiverModel"),UJr.forEach(t),rpo=r(Twe," (Perceiver model)"),Twe.forEach(t),tpo=i(M),p_=n(M,"LI",{});var Mwe=s(p_);gae=n(Mwe,"STRONG",{});var JJr=s(gae);apo=r(JJr,"plbart"),JJr.forEach(t),npo=r(Mwe," \u2014 "),_$=n(Mwe,"A",{href:!0});var YJr=s(_$);spo=r(YJr,"PLBartModel"),YJr.forEach(t),lpo=r(Mwe," (PLBart model)"),Mwe.forEach(t),ipo=i(M),__=n(M,"LI",{});var Ewe=s(__);hae=n(Ewe,"STRONG",{});var KJr=s(hae);dpo=r(KJr,"poolformer"),KJr.forEach(t),cpo=r(Ewe," \u2014 "),u$=n(Ewe,"A",{href:!0});var ZJr=s(u$);fpo=r(ZJr,"PoolFormerModel"),ZJr.forEach(t),mpo=r(Ewe," (PoolFormer model)"),Ewe.forEach(t),gpo=i(M),u_=n(M,"LI",{});var Cwe=s(u_);pae=n(Cwe,"STRONG",{});var eYr=s(pae);hpo=r(eYr,"prophetnet"),eYr.forEach(t),ppo=r(Cwe," \u2014 "),b$=n(Cwe,"A",{href:!0});var oYr=s(b$);_po=r(oYr,"ProphetNetModel"),oYr.forEach(t),upo=r(Cwe," (ProphetNet model)"),Cwe.forEach(t),bpo=i(M),b_=n(M,"LI",{});var wwe=s(b_);_ae=n(wwe,"STRONG",{});var rYr=s(_ae);vpo=r(rYr,"qdqbert"),rYr.forEach(t),Fpo=r(wwe," \u2014 "),v$=n(wwe,"A",{href:!0});var tYr=s(v$);Tpo=r(tYr,"QDQBertModel"),tYr.forEach(t),Mpo=r(wwe," (QDQBert model)"),wwe.forEach(t),Epo=i(M),v_=n(M,"LI",{});var Awe=s(v_);uae=n(Awe,"STRONG",{});var aYr=s(uae);Cpo=r(aYr,"reformer"),aYr.forEach(t),wpo=r(Awe," \u2014 "),F$=n(Awe,"A",{href:!0});var nYr=s(F$);Apo=r(nYr,"ReformerModel"),nYr.forEach(t),ypo=r(Awe," (Reformer model)"),Awe.forEach(t),Lpo=i(M),F_=n(M,"LI",{});var ywe=s(F_);bae=n(ywe,"STRONG",{});var sYr=s(bae);xpo=r(sYr,"regnet"),sYr.forEach(t),kpo=r(ywe," \u2014 "),T$=n(ywe,"A",{href:!0});var lYr=s(T$);Spo=r(lYr,"RegNetModel"),lYr.forEach(t),Rpo=r(ywe," (RegNet model)"),ywe.forEach(t),Bpo=i(M),T_=n(M,"LI",{});var Lwe=s(T_);vae=n(Lwe,"STRONG",{});var iYr=s(vae);Ppo=r(iYr,"rembert"),iYr.forEach(t),$po=r(Lwe," \u2014 "),M$=n(Lwe,"A",{href:!0});var dYr=s(M$);Ipo=r(dYr,"RemBertModel"),dYr.forEach(t),qpo=r(Lwe," (RemBERT model)"),Lwe.forEach(t),Npo=i(M),M_=n(M,"LI",{});var xwe=s(M_);Fae=n(xwe,"STRONG",{});var cYr=s(Fae);jpo=r(cYr,"resnet"),cYr.forEach(t),Dpo=r(xwe," \u2014 "),E$=n(xwe,"A",{href:!0});var fYr=s(E$);Gpo=r(fYr,"ResNetModel"),fYr.forEach(t),Opo=r(xwe," (ResNet model)"),xwe.forEach(t),Vpo=i(M),E_=n(M,"LI",{});var kwe=s(E_);Tae=n(kwe,"STRONG",{});var mYr=s(Tae);Xpo=r(mYr,"retribert"),mYr.forEach(t),zpo=r(kwe," \u2014 "),C$=n(kwe,"A",{href:!0});var gYr=s(C$);Qpo=r(gYr,"RetriBertModel"),gYr.forEach(t),Wpo=r(kwe," (RetriBERT model)"),kwe.forEach(t),Hpo=i(M),C_=n(M,"LI",{});var Swe=s(C_);Mae=n(Swe,"STRONG",{});var hYr=s(Mae);Upo=r(hYr,"roberta"),hYr.forEach(t),Jpo=r(Swe," \u2014 "),w$=n(Swe,"A",{href:!0});var pYr=s(w$);Ypo=r(pYr,"RobertaModel"),pYr.forEach(t),Kpo=r(Swe," (RoBERTa model)"),Swe.forEach(t),Zpo=i(M),w_=n(M,"LI",{});var Rwe=s(w_);Eae=n(Rwe,"STRONG",{});var _Yr=s(Eae);e_o=r(_Yr,"roformer"),_Yr.forEach(t),o_o=r(Rwe," \u2014 "),A$=n(Rwe,"A",{href:!0});var uYr=s(A$);r_o=r(uYr,"RoFormerModel"),uYr.forEach(t),t_o=r(Rwe," (RoFormer model)"),Rwe.forEach(t),a_o=i(M),A_=n(M,"LI",{});var Bwe=s(A_);Cae=n(Bwe,"STRONG",{});var bYr=s(Cae);n_o=r(bYr,"segformer"),bYr.forEach(t),s_o=r(Bwe," \u2014 "),y$=n(Bwe,"A",{href:!0});var vYr=s(y$);l_o=r(vYr,"SegformerModel"),vYr.forEach(t),i_o=r(Bwe," (SegFormer model)"),Bwe.forEach(t),d_o=i(M),y_=n(M,"LI",{});var Pwe=s(y_);wae=n(Pwe,"STRONG",{});var FYr=s(wae);c_o=r(FYr,"sew"),FYr.forEach(t),f_o=r(Pwe," \u2014 "),L$=n(Pwe,"A",{href:!0});var TYr=s(L$);m_o=r(TYr,"SEWModel"),TYr.forEach(t),g_o=r(Pwe," (SEW model)"),Pwe.forEach(t),h_o=i(M),L_=n(M,"LI",{});var $we=s(L_);Aae=n($we,"STRONG",{});var MYr=s(Aae);p_o=r(MYr,"sew-d"),MYr.forEach(t),__o=r($we," \u2014 "),x$=n($we,"A",{href:!0});var EYr=s(x$);u_o=r(EYr,"SEWDModel"),EYr.forEach(t),b_o=r($we," (SEW-D model)"),$we.forEach(t),v_o=i(M),x_=n(M,"LI",{});var Iwe=s(x_);yae=n(Iwe,"STRONG",{});var CYr=s(yae);F_o=r(CYr,"speech_to_text"),CYr.forEach(t),T_o=r(Iwe," \u2014 "),k$=n(Iwe,"A",{href:!0});var wYr=s(k$);M_o=r(wYr,"Speech2TextModel"),wYr.forEach(t),E_o=r(Iwe," (Speech2Text model)"),Iwe.forEach(t),C_o=i(M),k_=n(M,"LI",{});var qwe=s(k_);Lae=n(qwe,"STRONG",{});var AYr=s(Lae);w_o=r(AYr,"splinter"),AYr.forEach(t),A_o=r(qwe," \u2014 "),S$=n(qwe,"A",{href:!0});var yYr=s(S$);y_o=r(yYr,"SplinterModel"),yYr.forEach(t),L_o=r(qwe," (Splinter model)"),qwe.forEach(t),x_o=i(M),S_=n(M,"LI",{});var Nwe=s(S_);xae=n(Nwe,"STRONG",{});var LYr=s(xae);k_o=r(LYr,"squeezebert"),LYr.forEach(t),S_o=r(Nwe," \u2014 "),R$=n(Nwe,"A",{href:!0});var xYr=s(R$);R_o=r(xYr,"SqueezeBertModel"),xYr.forEach(t),B_o=r(Nwe," (SqueezeBERT model)"),Nwe.forEach(t),P_o=i(M),R_=n(M,"LI",{});var jwe=s(R_);kae=n(jwe,"STRONG",{});var kYr=s(kae);$_o=r(kYr,"swin"),kYr.forEach(t),I_o=r(jwe," \u2014 "),B$=n(jwe,"A",{href:!0});var SYr=s(B$);q_o=r(SYr,"SwinModel"),SYr.forEach(t),N_o=r(jwe," (Swin model)"),jwe.forEach(t),j_o=i(M),B_=n(M,"LI",{});var Dwe=s(B_);Sae=n(Dwe,"STRONG",{});var RYr=s(Sae);D_o=r(RYr,"t5"),RYr.forEach(t),G_o=r(Dwe," \u2014 "),P$=n(Dwe,"A",{href:!0});var BYr=s(P$);O_o=r(BYr,"T5Model"),BYr.forEach(t),V_o=r(Dwe," (T5 model)"),Dwe.forEach(t),X_o=i(M),P_=n(M,"LI",{});var Gwe=s(P_);Rae=n(Gwe,"STRONG",{});var PYr=s(Rae);z_o=r(PYr,"tapas"),PYr.forEach(t),Q_o=r(Gwe," \u2014 "),$$=n(Gwe,"A",{href:!0});var $Yr=s($$);W_o=r($Yr,"TapasModel"),$Yr.forEach(t),H_o=r(Gwe," (TAPAS model)"),Gwe.forEach(t),U_o=i(M),$_=n(M,"LI",{});var Owe=s($_);Bae=n(Owe,"STRONG",{});var IYr=s(Bae);J_o=r(IYr,"transfo-xl"),IYr.forEach(t),Y_o=r(Owe," \u2014 "),I$=n(Owe,"A",{href:!0});var qYr=s(I$);K_o=r(qYr,"TransfoXLModel"),qYr.forEach(t),Z_o=r(Owe," (Transformer-XL model)"),Owe.forEach(t),euo=i(M),I_=n(M,"LI",{});var Vwe=s(I_);Pae=n(Vwe,"STRONG",{});var NYr=s(Pae);ouo=r(NYr,"unispeech"),NYr.forEach(t),ruo=r(Vwe," \u2014 "),q$=n(Vwe,"A",{href:!0});var jYr=s(q$);tuo=r(jYr,"UniSpeechModel"),jYr.forEach(t),auo=r(Vwe," (UniSpeech model)"),Vwe.forEach(t),nuo=i(M),q_=n(M,"LI",{});var Xwe=s(q_);$ae=n(Xwe,"STRONG",{});var DYr=s($ae);suo=r(DYr,"unispeech-sat"),DYr.forEach(t),luo=r(Xwe," \u2014 "),N$=n(Xwe,"A",{href:!0});var GYr=s(N$);iuo=r(GYr,"UniSpeechSatModel"),GYr.forEach(t),duo=r(Xwe," (UniSpeechSat model)"),Xwe.forEach(t),cuo=i(M),N_=n(M,"LI",{});var zwe=s(N_);Iae=n(zwe,"STRONG",{});var OYr=s(Iae);fuo=r(OYr,"van"),OYr.forEach(t),muo=r(zwe," \u2014 "),j$=n(zwe,"A",{href:!0});var VYr=s(j$);guo=r(VYr,"VanModel"),VYr.forEach(t),huo=r(zwe," (VAN model)"),zwe.forEach(t),puo=i(M),j_=n(M,"LI",{});var Qwe=s(j_);qae=n(Qwe,"STRONG",{});var XYr=s(qae);_uo=r(XYr,"vilt"),XYr.forEach(t),uuo=r(Qwe," \u2014 "),D$=n(Qwe,"A",{href:!0});var zYr=s(D$);buo=r(zYr,"ViltModel"),zYr.forEach(t),vuo=r(Qwe," (ViLT model)"),Qwe.forEach(t),Fuo=i(M),D_=n(M,"LI",{});var Wwe=s(D_);Nae=n(Wwe,"STRONG",{});var QYr=s(Nae);Tuo=r(QYr,"vision-text-dual-encoder"),QYr.forEach(t),Muo=r(Wwe," \u2014 "),G$=n(Wwe,"A",{href:!0});var WYr=s(G$);Euo=r(WYr,"VisionTextDualEncoderModel"),WYr.forEach(t),Cuo=r(Wwe," (VisionTextDualEncoder model)"),Wwe.forEach(t),wuo=i(M),G_=n(M,"LI",{});var Hwe=s(G_);jae=n(Hwe,"STRONG",{});var HYr=s(jae);Auo=r(HYr,"visual_bert"),HYr.forEach(t),yuo=r(Hwe," \u2014 "),O$=n(Hwe,"A",{href:!0});var UYr=s(O$);Luo=r(UYr,"VisualBertModel"),UYr.forEach(t),xuo=r(Hwe," (VisualBert model)"),Hwe.forEach(t),kuo=i(M),O_=n(M,"LI",{});var Uwe=s(O_);Dae=n(Uwe,"STRONG",{});var JYr=s(Dae);Suo=r(JYr,"vit"),JYr.forEach(t),Ruo=r(Uwe," \u2014 "),V$=n(Uwe,"A",{href:!0});var YYr=s(V$);Buo=r(YYr,"ViTModel"),YYr.forEach(t),Puo=r(Uwe," (ViT model)"),Uwe.forEach(t),$uo=i(M),V_=n(M,"LI",{});var Jwe=s(V_);Gae=n(Jwe,"STRONG",{});var KYr=s(Gae);Iuo=r(KYr,"vit_mae"),KYr.forEach(t),quo=r(Jwe," \u2014 "),X$=n(Jwe,"A",{href:!0});var ZYr=s(X$);Nuo=r(ZYr,"ViTMAEModel"),ZYr.forEach(t),juo=r(Jwe," (ViTMAE model)"),Jwe.forEach(t),Duo=i(M),X_=n(M,"LI",{});var Ywe=s(X_);Oae=n(Ywe,"STRONG",{});var eKr=s(Oae);Guo=r(eKr,"wav2vec2"),eKr.forEach(t),Ouo=r(Ywe," \u2014 "),z$=n(Ywe,"A",{href:!0});var oKr=s(z$);Vuo=r(oKr,"Wav2Vec2Model"),oKr.forEach(t),Xuo=r(Ywe," (Wav2Vec2 model)"),Ywe.forEach(t),zuo=i(M),z_=n(M,"LI",{});var Kwe=s(z_);Vae=n(Kwe,"STRONG",{});var rKr=s(Vae);Quo=r(rKr,"wavlm"),rKr.forEach(t),Wuo=r(Kwe," \u2014 "),Q$=n(Kwe,"A",{href:!0});var tKr=s(Q$);Huo=r(tKr,"WavLMModel"),tKr.forEach(t),Uuo=r(Kwe," (WavLM model)"),Kwe.forEach(t),Juo=i(M),Q_=n(M,"LI",{});var Zwe=s(Q_);Xae=n(Zwe,"STRONG",{});var aKr=s(Xae);Yuo=r(aKr,"xglm"),aKr.forEach(t),Kuo=r(Zwe," \u2014 "),W$=n(Zwe,"A",{href:!0});var nKr=s(W$);Zuo=r(nKr,"XGLMModel"),nKr.forEach(t),e1o=r(Zwe," (XGLM model)"),Zwe.forEach(t),o1o=i(M),W_=n(M,"LI",{});var eAe=s(W_);zae=n(eAe,"STRONG",{});var sKr=s(zae);r1o=r(sKr,"xlm"),sKr.forEach(t),t1o=r(eAe," \u2014 "),H$=n(eAe,"A",{href:!0});var lKr=s(H$);a1o=r(lKr,"XLMModel"),lKr.forEach(t),n1o=r(eAe," (XLM model)"),eAe.forEach(t),s1o=i(M),H_=n(M,"LI",{});var oAe=s(H_);Qae=n(oAe,"STRONG",{});var iKr=s(Qae);l1o=r(iKr,"xlm-prophetnet"),iKr.forEach(t),i1o=r(oAe," \u2014 "),U$=n(oAe,"A",{href:!0});var dKr=s(U$);d1o=r(dKr,"XLMProphetNetModel"),dKr.forEach(t),c1o=r(oAe," (XLMProphetNet model)"),oAe.forEach(t),f1o=i(M),U_=n(M,"LI",{});var rAe=s(U_);Wae=n(rAe,"STRONG",{});var cKr=s(Wae);m1o=r(cKr,"xlm-roberta"),cKr.forEach(t),g1o=r(rAe," \u2014 "),J$=n(rAe,"A",{href:!0});var fKr=s(J$);h1o=r(fKr,"XLMRobertaModel"),fKr.forEach(t),p1o=r(rAe," (XLM-RoBERTa model)"),rAe.forEach(t),_1o=i(M),J_=n(M,"LI",{});var tAe=s(J_);Hae=n(tAe,"STRONG",{});var mKr=s(Hae);u1o=r(mKr,"xlm-roberta-xl"),mKr.forEach(t),b1o=r(tAe," \u2014 "),Y$=n(tAe,"A",{href:!0});var gKr=s(Y$);v1o=r(gKr,"XLMRobertaXLModel"),gKr.forEach(t),F1o=r(tAe," (XLM-RoBERTa-XL model)"),tAe.forEach(t),T1o=i(M),Y_=n(M,"LI",{});var aAe=s(Y_);Uae=n(aAe,"STRONG",{});var hKr=s(Uae);M1o=r(hKr,"xlnet"),hKr.forEach(t),E1o=r(aAe," \u2014 "),K$=n(aAe,"A",{href:!0});var pKr=s(K$);C1o=r(pKr,"XLNetModel"),pKr.forEach(t),w1o=r(aAe," (XLNet model)"),aAe.forEach(t),A1o=i(M),K_=n(M,"LI",{});var nAe=s(K_);Jae=n(nAe,"STRONG",{});var _Kr=s(Jae);y1o=r(_Kr,"yoso"),_Kr.forEach(t),L1o=r(nAe," \u2014 "),Z$=n(nAe,"A",{href:!0});var uKr=s(Z$);x1o=r(uKr,"YosoModel"),uKr.forEach(t),k1o=r(nAe," (YOSO model)"),nAe.forEach(t),M.forEach(t),S1o=i(Dt),Z_=n(Dt,"P",{});var sAe=s(Z_);R1o=r(sAe,"The model is set in evaluation mode by default using "),Yae=n(sAe,"CODE",{});var bKr=s(Yae);B1o=r(bKr,"model.eval()"),bKr.forEach(t),P1o=r(sAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kae=n(sAe,"CODE",{});var vKr=s(Kae);$1o=r(vKr,"model.train()"),vKr.forEach(t),sAe.forEach(t),I1o=i(Dt),Zae=n(Dt,"P",{});var FKr=s(Zae);q1o=r(FKr,"Examples:"),FKr.forEach(t),N1o=i(Dt),m(Bw.$$.fragment,Dt),Dt.forEach(t),ol.forEach(t),MPe=i(c),id=n(c,"H2",{class:!0});var SIe=s(id);eu=n(SIe,"A",{id:!0,class:!0,href:!0});var TKr=s(eu);ene=n(TKr,"SPAN",{});var MKr=s(ene);m(Pw.$$.fragment,MKr),MKr.forEach(t),TKr.forEach(t),j1o=i(SIe),one=n(SIe,"SPAN",{});var EKr=s(one);D1o=r(EKr,"AutoModelForPreTraining"),EKr.forEach(t),SIe.forEach(t),EPe=i(c),Yo=n(c,"DIV",{class:!0});var tl=s(Yo);m($w.$$.fragment,tl),G1o=i(tl),dd=n(tl,"P",{});var MJ=s(dd);O1o=r(MJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eI=n(MJ,"A",{href:!0});var CKr=s(eI);V1o=r(CKr,"from_pretrained()"),CKr.forEach(t),X1o=r(MJ," class method or the "),oI=n(MJ,"A",{href:!0});var wKr=s(oI);z1o=r(wKr,"from_config()"),wKr.forEach(t),Q1o=r(MJ,` class
method.`),MJ.forEach(t),W1o=i(tl),Iw=n(tl,"P",{});var RIe=s(Iw);H1o=r(RIe,"This class cannot be instantiated directly using "),rne=n(RIe,"CODE",{});var AKr=s(rne);U1o=r(AKr,"__init__()"),AKr.forEach(t),J1o=r(RIe," (throws an error)."),RIe.forEach(t),Y1o=i(tl),zr=n(tl,"DIV",{class:!0});var al=s(zr);m(qw.$$.fragment,al),K1o=i(al),tne=n(al,"P",{});var yKr=s(tne);Z1o=r(yKr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yKr.forEach(t),e4o=i(al),cd=n(al,"P",{});var EJ=s(cd);o4o=r(EJ,`Note:
Loading a model from its configuration file does `),ane=n(EJ,"STRONG",{});var LKr=s(ane);r4o=r(LKr,"not"),LKr.forEach(t),t4o=r(EJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rI=n(EJ,"A",{href:!0});var xKr=s(rI);a4o=r(xKr,"from_pretrained()"),xKr.forEach(t),n4o=r(EJ," to load the model weights."),EJ.forEach(t),s4o=i(al),nne=n(al,"P",{});var kKr=s(nne);l4o=r(kKr,"Examples:"),kKr.forEach(t),i4o=i(al),m(Nw.$$.fragment,al),al.forEach(t),d4o=i(tl),je=n(tl,"DIV",{class:!0});var Gt=s(je);m(jw.$$.fragment,Gt),c4o=i(Gt),sne=n(Gt,"P",{});var SKr=s(sne);f4o=r(SKr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),SKr.forEach(t),m4o=i(Gt),za=n(Gt,"P",{});var YE=s(za);g4o=r(YE,"The model class to instantiate is selected based on the "),lne=n(YE,"CODE",{});var RKr=s(lne);h4o=r(RKr,"model_type"),RKr.forEach(t),p4o=r(YE,` property of the config object (either
passed as an argument or loaded from `),ine=n(YE,"CODE",{});var BKr=s(ine);_4o=r(BKr,"pretrained_model_name_or_path"),BKr.forEach(t),u4o=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dne=n(YE,"CODE",{});var PKr=s(dne);b4o=r(PKr,"pretrained_model_name_or_path"),PKr.forEach(t),v4o=r(YE,":"),YE.forEach(t),F4o=i(Gt),S=n(Gt,"UL",{});var B=s(S);ou=n(B,"LI",{});var lAe=s(ou);cne=n(lAe,"STRONG",{});var $Kr=s(cne);T4o=r($Kr,"albert"),$Kr.forEach(t),M4o=r(lAe," \u2014 "),tI=n(lAe,"A",{href:!0});var IKr=s(tI);E4o=r(IKr,"AlbertForPreTraining"),IKr.forEach(t),C4o=r(lAe," (ALBERT model)"),lAe.forEach(t),w4o=i(B),ru=n(B,"LI",{});var iAe=s(ru);fne=n(iAe,"STRONG",{});var qKr=s(fne);A4o=r(qKr,"bart"),qKr.forEach(t),y4o=r(iAe," \u2014 "),aI=n(iAe,"A",{href:!0});var NKr=s(aI);L4o=r(NKr,"BartForConditionalGeneration"),NKr.forEach(t),x4o=r(iAe," (BART model)"),iAe.forEach(t),k4o=i(B),tu=n(B,"LI",{});var dAe=s(tu);mne=n(dAe,"STRONG",{});var jKr=s(mne);S4o=r(jKr,"bert"),jKr.forEach(t),R4o=r(dAe," \u2014 "),nI=n(dAe,"A",{href:!0});var DKr=s(nI);B4o=r(DKr,"BertForPreTraining"),DKr.forEach(t),P4o=r(dAe," (BERT model)"),dAe.forEach(t),$4o=i(B),au=n(B,"LI",{});var cAe=s(au);gne=n(cAe,"STRONG",{});var GKr=s(gne);I4o=r(GKr,"big_bird"),GKr.forEach(t),q4o=r(cAe," \u2014 "),sI=n(cAe,"A",{href:!0});var OKr=s(sI);N4o=r(OKr,"BigBirdForPreTraining"),OKr.forEach(t),j4o=r(cAe," (BigBird model)"),cAe.forEach(t),D4o=i(B),nu=n(B,"LI",{});var fAe=s(nu);hne=n(fAe,"STRONG",{});var VKr=s(hne);G4o=r(VKr,"camembert"),VKr.forEach(t),O4o=r(fAe," \u2014 "),lI=n(fAe,"A",{href:!0});var XKr=s(lI);V4o=r(XKr,"CamembertForMaskedLM"),XKr.forEach(t),X4o=r(fAe," (CamemBERT model)"),fAe.forEach(t),z4o=i(B),su=n(B,"LI",{});var mAe=s(su);pne=n(mAe,"STRONG",{});var zKr=s(pne);Q4o=r(zKr,"ctrl"),zKr.forEach(t),W4o=r(mAe," \u2014 "),iI=n(mAe,"A",{href:!0});var QKr=s(iI);H4o=r(QKr,"CTRLLMHeadModel"),QKr.forEach(t),U4o=r(mAe," (CTRL model)"),mAe.forEach(t),J4o=i(B),lu=n(B,"LI",{});var gAe=s(lu);_ne=n(gAe,"STRONG",{});var WKr=s(_ne);Y4o=r(WKr,"data2vec-text"),WKr.forEach(t),K4o=r(gAe," \u2014 "),dI=n(gAe,"A",{href:!0});var HKr=s(dI);Z4o=r(HKr,"Data2VecTextForMaskedLM"),HKr.forEach(t),ebo=r(gAe," (Data2VecText model)"),gAe.forEach(t),obo=i(B),iu=n(B,"LI",{});var hAe=s(iu);une=n(hAe,"STRONG",{});var UKr=s(une);rbo=r(UKr,"deberta"),UKr.forEach(t),tbo=r(hAe," \u2014 "),cI=n(hAe,"A",{href:!0});var JKr=s(cI);abo=r(JKr,"DebertaForMaskedLM"),JKr.forEach(t),nbo=r(hAe," (DeBERTa model)"),hAe.forEach(t),sbo=i(B),du=n(B,"LI",{});var pAe=s(du);bne=n(pAe,"STRONG",{});var YKr=s(bne);lbo=r(YKr,"deberta-v2"),YKr.forEach(t),ibo=r(pAe," \u2014 "),fI=n(pAe,"A",{href:!0});var KKr=s(fI);dbo=r(KKr,"DebertaV2ForMaskedLM"),KKr.forEach(t),cbo=r(pAe," (DeBERTa-v2 model)"),pAe.forEach(t),fbo=i(B),cu=n(B,"LI",{});var _Ae=s(cu);vne=n(_Ae,"STRONG",{});var ZKr=s(vne);mbo=r(ZKr,"distilbert"),ZKr.forEach(t),gbo=r(_Ae," \u2014 "),mI=n(_Ae,"A",{href:!0});var eZr=s(mI);hbo=r(eZr,"DistilBertForMaskedLM"),eZr.forEach(t),pbo=r(_Ae," (DistilBERT model)"),_Ae.forEach(t),_bo=i(B),fu=n(B,"LI",{});var uAe=s(fu);Fne=n(uAe,"STRONG",{});var oZr=s(Fne);ubo=r(oZr,"electra"),oZr.forEach(t),bbo=r(uAe," \u2014 "),gI=n(uAe,"A",{href:!0});var rZr=s(gI);vbo=r(rZr,"ElectraForPreTraining"),rZr.forEach(t),Fbo=r(uAe," (ELECTRA model)"),uAe.forEach(t),Tbo=i(B),mu=n(B,"LI",{});var bAe=s(mu);Tne=n(bAe,"STRONG",{});var tZr=s(Tne);Mbo=r(tZr,"flaubert"),tZr.forEach(t),Ebo=r(bAe," \u2014 "),hI=n(bAe,"A",{href:!0});var aZr=s(hI);Cbo=r(aZr,"FlaubertWithLMHeadModel"),aZr.forEach(t),wbo=r(bAe," (FlauBERT model)"),bAe.forEach(t),Abo=i(B),gu=n(B,"LI",{});var vAe=s(gu);Mne=n(vAe,"STRONG",{});var nZr=s(Mne);ybo=r(nZr,"fnet"),nZr.forEach(t),Lbo=r(vAe," \u2014 "),pI=n(vAe,"A",{href:!0});var sZr=s(pI);xbo=r(sZr,"FNetForPreTraining"),sZr.forEach(t),kbo=r(vAe," (FNet model)"),vAe.forEach(t),Sbo=i(B),hu=n(B,"LI",{});var FAe=s(hu);Ene=n(FAe,"STRONG",{});var lZr=s(Ene);Rbo=r(lZr,"fsmt"),lZr.forEach(t),Bbo=r(FAe," \u2014 "),_I=n(FAe,"A",{href:!0});var iZr=s(_I);Pbo=r(iZr,"FSMTForConditionalGeneration"),iZr.forEach(t),$bo=r(FAe," (FairSeq Machine-Translation model)"),FAe.forEach(t),Ibo=i(B),pu=n(B,"LI",{});var TAe=s(pu);Cne=n(TAe,"STRONG",{});var dZr=s(Cne);qbo=r(dZr,"funnel"),dZr.forEach(t),Nbo=r(TAe," \u2014 "),uI=n(TAe,"A",{href:!0});var cZr=s(uI);jbo=r(cZr,"FunnelForPreTraining"),cZr.forEach(t),Dbo=r(TAe," (Funnel Transformer model)"),TAe.forEach(t),Gbo=i(B),_u=n(B,"LI",{});var MAe=s(_u);wne=n(MAe,"STRONG",{});var fZr=s(wne);Obo=r(fZr,"gpt2"),fZr.forEach(t),Vbo=r(MAe," \u2014 "),bI=n(MAe,"A",{href:!0});var mZr=s(bI);Xbo=r(mZr,"GPT2LMHeadModel"),mZr.forEach(t),zbo=r(MAe," (OpenAI GPT-2 model)"),MAe.forEach(t),Qbo=i(B),uu=n(B,"LI",{});var EAe=s(uu);Ane=n(EAe,"STRONG",{});var gZr=s(Ane);Wbo=r(gZr,"ibert"),gZr.forEach(t),Hbo=r(EAe," \u2014 "),vI=n(EAe,"A",{href:!0});var hZr=s(vI);Ubo=r(hZr,"IBertForMaskedLM"),hZr.forEach(t),Jbo=r(EAe," (I-BERT model)"),EAe.forEach(t),Ybo=i(B),bu=n(B,"LI",{});var CAe=s(bu);yne=n(CAe,"STRONG",{});var pZr=s(yne);Kbo=r(pZr,"layoutlm"),pZr.forEach(t),Zbo=r(CAe," \u2014 "),FI=n(CAe,"A",{href:!0});var _Zr=s(FI);e2o=r(_Zr,"LayoutLMForMaskedLM"),_Zr.forEach(t),o2o=r(CAe," (LayoutLM model)"),CAe.forEach(t),r2o=i(B),vu=n(B,"LI",{});var wAe=s(vu);Lne=n(wAe,"STRONG",{});var uZr=s(Lne);t2o=r(uZr,"longformer"),uZr.forEach(t),a2o=r(wAe," \u2014 "),TI=n(wAe,"A",{href:!0});var bZr=s(TI);n2o=r(bZr,"LongformerForMaskedLM"),bZr.forEach(t),s2o=r(wAe," (Longformer model)"),wAe.forEach(t),l2o=i(B),Fu=n(B,"LI",{});var AAe=s(Fu);xne=n(AAe,"STRONG",{});var vZr=s(xne);i2o=r(vZr,"lxmert"),vZr.forEach(t),d2o=r(AAe," \u2014 "),MI=n(AAe,"A",{href:!0});var FZr=s(MI);c2o=r(FZr,"LxmertForPreTraining"),FZr.forEach(t),f2o=r(AAe," (LXMERT model)"),AAe.forEach(t),m2o=i(B),Tu=n(B,"LI",{});var yAe=s(Tu);kne=n(yAe,"STRONG",{});var TZr=s(kne);g2o=r(TZr,"megatron-bert"),TZr.forEach(t),h2o=r(yAe," \u2014 "),EI=n(yAe,"A",{href:!0});var MZr=s(EI);p2o=r(MZr,"MegatronBertForPreTraining"),MZr.forEach(t),_2o=r(yAe," (MegatronBert model)"),yAe.forEach(t),u2o=i(B),Mu=n(B,"LI",{});var LAe=s(Mu);Sne=n(LAe,"STRONG",{});var EZr=s(Sne);b2o=r(EZr,"mobilebert"),EZr.forEach(t),v2o=r(LAe," \u2014 "),CI=n(LAe,"A",{href:!0});var CZr=s(CI);F2o=r(CZr,"MobileBertForPreTraining"),CZr.forEach(t),T2o=r(LAe," (MobileBERT model)"),LAe.forEach(t),M2o=i(B),Eu=n(B,"LI",{});var xAe=s(Eu);Rne=n(xAe,"STRONG",{});var wZr=s(Rne);E2o=r(wZr,"mpnet"),wZr.forEach(t),C2o=r(xAe," \u2014 "),wI=n(xAe,"A",{href:!0});var AZr=s(wI);w2o=r(AZr,"MPNetForMaskedLM"),AZr.forEach(t),A2o=r(xAe," (MPNet model)"),xAe.forEach(t),y2o=i(B),Cu=n(B,"LI",{});var kAe=s(Cu);Bne=n(kAe,"STRONG",{});var yZr=s(Bne);L2o=r(yZr,"openai-gpt"),yZr.forEach(t),x2o=r(kAe," \u2014 "),AI=n(kAe,"A",{href:!0});var LZr=s(AI);k2o=r(LZr,"OpenAIGPTLMHeadModel"),LZr.forEach(t),S2o=r(kAe," (OpenAI GPT model)"),kAe.forEach(t),R2o=i(B),wu=n(B,"LI",{});var SAe=s(wu);Pne=n(SAe,"STRONG",{});var xZr=s(Pne);B2o=r(xZr,"retribert"),xZr.forEach(t),P2o=r(SAe," \u2014 "),yI=n(SAe,"A",{href:!0});var kZr=s(yI);$2o=r(kZr,"RetriBertModel"),kZr.forEach(t),I2o=r(SAe," (RetriBERT model)"),SAe.forEach(t),q2o=i(B),Au=n(B,"LI",{});var RAe=s(Au);$ne=n(RAe,"STRONG",{});var SZr=s($ne);N2o=r(SZr,"roberta"),SZr.forEach(t),j2o=r(RAe," \u2014 "),LI=n(RAe,"A",{href:!0});var RZr=s(LI);D2o=r(RZr,"RobertaForMaskedLM"),RZr.forEach(t),G2o=r(RAe," (RoBERTa model)"),RAe.forEach(t),O2o=i(B),yu=n(B,"LI",{});var BAe=s(yu);Ine=n(BAe,"STRONG",{});var BZr=s(Ine);V2o=r(BZr,"squeezebert"),BZr.forEach(t),X2o=r(BAe," \u2014 "),xI=n(BAe,"A",{href:!0});var PZr=s(xI);z2o=r(PZr,"SqueezeBertForMaskedLM"),PZr.forEach(t),Q2o=r(BAe," (SqueezeBERT model)"),BAe.forEach(t),W2o=i(B),Lu=n(B,"LI",{});var PAe=s(Lu);qne=n(PAe,"STRONG",{});var $Zr=s(qne);H2o=r($Zr,"t5"),$Zr.forEach(t),U2o=r(PAe," \u2014 "),kI=n(PAe,"A",{href:!0});var IZr=s(kI);J2o=r(IZr,"T5ForConditionalGeneration"),IZr.forEach(t),Y2o=r(PAe," (T5 model)"),PAe.forEach(t),K2o=i(B),xu=n(B,"LI",{});var $Ae=s(xu);Nne=n($Ae,"STRONG",{});var qZr=s(Nne);Z2o=r(qZr,"tapas"),qZr.forEach(t),e5o=r($Ae," \u2014 "),SI=n($Ae,"A",{href:!0});var NZr=s(SI);o5o=r(NZr,"TapasForMaskedLM"),NZr.forEach(t),r5o=r($Ae," (TAPAS model)"),$Ae.forEach(t),t5o=i(B),ku=n(B,"LI",{});var IAe=s(ku);jne=n(IAe,"STRONG",{});var jZr=s(jne);a5o=r(jZr,"transfo-xl"),jZr.forEach(t),n5o=r(IAe," \u2014 "),RI=n(IAe,"A",{href:!0});var DZr=s(RI);s5o=r(DZr,"TransfoXLLMHeadModel"),DZr.forEach(t),l5o=r(IAe," (Transformer-XL model)"),IAe.forEach(t),i5o=i(B),Su=n(B,"LI",{});var qAe=s(Su);Dne=n(qAe,"STRONG",{});var GZr=s(Dne);d5o=r(GZr,"unispeech"),GZr.forEach(t),c5o=r(qAe," \u2014 "),BI=n(qAe,"A",{href:!0});var OZr=s(BI);f5o=r(OZr,"UniSpeechForPreTraining"),OZr.forEach(t),m5o=r(qAe," (UniSpeech model)"),qAe.forEach(t),g5o=i(B),Ru=n(B,"LI",{});var NAe=s(Ru);Gne=n(NAe,"STRONG",{});var VZr=s(Gne);h5o=r(VZr,"unispeech-sat"),VZr.forEach(t),p5o=r(NAe," \u2014 "),PI=n(NAe,"A",{href:!0});var XZr=s(PI);_5o=r(XZr,"UniSpeechSatForPreTraining"),XZr.forEach(t),u5o=r(NAe," (UniSpeechSat model)"),NAe.forEach(t),b5o=i(B),Bu=n(B,"LI",{});var jAe=s(Bu);One=n(jAe,"STRONG",{});var zZr=s(One);v5o=r(zZr,"visual_bert"),zZr.forEach(t),F5o=r(jAe," \u2014 "),$I=n(jAe,"A",{href:!0});var QZr=s($I);T5o=r(QZr,"VisualBertForPreTraining"),QZr.forEach(t),M5o=r(jAe," (VisualBert model)"),jAe.forEach(t),E5o=i(B),Pu=n(B,"LI",{});var DAe=s(Pu);Vne=n(DAe,"STRONG",{});var WZr=s(Vne);C5o=r(WZr,"vit_mae"),WZr.forEach(t),w5o=r(DAe," \u2014 "),II=n(DAe,"A",{href:!0});var HZr=s(II);A5o=r(HZr,"ViTMAEForPreTraining"),HZr.forEach(t),y5o=r(DAe," (ViTMAE model)"),DAe.forEach(t),L5o=i(B),$u=n(B,"LI",{});var GAe=s($u);Xne=n(GAe,"STRONG",{});var UZr=s(Xne);x5o=r(UZr,"wav2vec2"),UZr.forEach(t),k5o=r(GAe," \u2014 "),qI=n(GAe,"A",{href:!0});var JZr=s(qI);S5o=r(JZr,"Wav2Vec2ForPreTraining"),JZr.forEach(t),R5o=r(GAe," (Wav2Vec2 model)"),GAe.forEach(t),B5o=i(B),Iu=n(B,"LI",{});var OAe=s(Iu);zne=n(OAe,"STRONG",{});var YZr=s(zne);P5o=r(YZr,"xlm"),YZr.forEach(t),$5o=r(OAe," \u2014 "),NI=n(OAe,"A",{href:!0});var KZr=s(NI);I5o=r(KZr,"XLMWithLMHeadModel"),KZr.forEach(t),q5o=r(OAe," (XLM model)"),OAe.forEach(t),N5o=i(B),qu=n(B,"LI",{});var VAe=s(qu);Qne=n(VAe,"STRONG",{});var ZZr=s(Qne);j5o=r(ZZr,"xlm-roberta"),ZZr.forEach(t),D5o=r(VAe," \u2014 "),jI=n(VAe,"A",{href:!0});var eet=s(jI);G5o=r(eet,"XLMRobertaForMaskedLM"),eet.forEach(t),O5o=r(VAe," (XLM-RoBERTa model)"),VAe.forEach(t),V5o=i(B),Nu=n(B,"LI",{});var XAe=s(Nu);Wne=n(XAe,"STRONG",{});var oet=s(Wne);X5o=r(oet,"xlm-roberta-xl"),oet.forEach(t),z5o=r(XAe," \u2014 "),DI=n(XAe,"A",{href:!0});var ret=s(DI);Q5o=r(ret,"XLMRobertaXLForMaskedLM"),ret.forEach(t),W5o=r(XAe," (XLM-RoBERTa-XL model)"),XAe.forEach(t),H5o=i(B),ju=n(B,"LI",{});var zAe=s(ju);Hne=n(zAe,"STRONG",{});var tet=s(Hne);U5o=r(tet,"xlnet"),tet.forEach(t),J5o=r(zAe," \u2014 "),GI=n(zAe,"A",{href:!0});var aet=s(GI);Y5o=r(aet,"XLNetLMHeadModel"),aet.forEach(t),K5o=r(zAe," (XLNet model)"),zAe.forEach(t),B.forEach(t),Z5o=i(Gt),Du=n(Gt,"P",{});var QAe=s(Du);e3o=r(QAe,"The model is set in evaluation mode by default using "),Une=n(QAe,"CODE",{});var net=s(Une);o3o=r(net,"model.eval()"),net.forEach(t),r3o=r(QAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jne=n(QAe,"CODE",{});var set=s(Jne);t3o=r(set,"model.train()"),set.forEach(t),QAe.forEach(t),a3o=i(Gt),Yne=n(Gt,"P",{});var iet=s(Yne);n3o=r(iet,"Examples:"),iet.forEach(t),s3o=i(Gt),m(Dw.$$.fragment,Gt),Gt.forEach(t),tl.forEach(t),CPe=i(c),fd=n(c,"H2",{class:!0});var BIe=s(fd);Gu=n(BIe,"A",{id:!0,class:!0,href:!0});var det=s(Gu);Kne=n(det,"SPAN",{});var cet=s(Kne);m(Gw.$$.fragment,cet),cet.forEach(t),det.forEach(t),l3o=i(BIe),Zne=n(BIe,"SPAN",{});var fet=s(Zne);i3o=r(fet,"AutoModelForCausalLM"),fet.forEach(t),BIe.forEach(t),wPe=i(c),Ko=n(c,"DIV",{class:!0});var nl=s(Ko);m(Ow.$$.fragment,nl),d3o=i(nl),md=n(nl,"P",{});var CJ=s(md);c3o=r(CJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OI=n(CJ,"A",{href:!0});var met=s(OI);f3o=r(met,"from_pretrained()"),met.forEach(t),m3o=r(CJ," class method or the "),VI=n(CJ,"A",{href:!0});var get=s(VI);g3o=r(get,"from_config()"),get.forEach(t),h3o=r(CJ,` class
method.`),CJ.forEach(t),p3o=i(nl),Vw=n(nl,"P",{});var PIe=s(Vw);_3o=r(PIe,"This class cannot be instantiated directly using "),ese=n(PIe,"CODE",{});var het=s(ese);u3o=r(het,"__init__()"),het.forEach(t),b3o=r(PIe," (throws an error)."),PIe.forEach(t),v3o=i(nl),Qr=n(nl,"DIV",{class:!0});var sl=s(Qr);m(Xw.$$.fragment,sl),F3o=i(sl),ose=n(sl,"P",{});var pet=s(ose);T3o=r(pet,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pet.forEach(t),M3o=i(sl),gd=n(sl,"P",{});var wJ=s(gd);E3o=r(wJ,`Note:
Loading a model from its configuration file does `),rse=n(wJ,"STRONG",{});var _et=s(rse);C3o=r(_et,"not"),_et.forEach(t),w3o=r(wJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XI=n(wJ,"A",{href:!0});var uet=s(XI);A3o=r(uet,"from_pretrained()"),uet.forEach(t),y3o=r(wJ," to load the model weights."),wJ.forEach(t),L3o=i(sl),tse=n(sl,"P",{});var bet=s(tse);x3o=r(bet,"Examples:"),bet.forEach(t),k3o=i(sl),m(zw.$$.fragment,sl),sl.forEach(t),S3o=i(nl),De=n(nl,"DIV",{class:!0});var Ot=s(De);m(Qw.$$.fragment,Ot),R3o=i(Ot),ase=n(Ot,"P",{});var vet=s(ase);B3o=r(vet,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vet.forEach(t),P3o=i(Ot),Qa=n(Ot,"P",{});var KE=s(Qa);$3o=r(KE,"The model class to instantiate is selected based on the "),nse=n(KE,"CODE",{});var Fet=s(nse);I3o=r(Fet,"model_type"),Fet.forEach(t),q3o=r(KE,` property of the config object (either
passed as an argument or loaded from `),sse=n(KE,"CODE",{});var Tet=s(sse);N3o=r(Tet,"pretrained_model_name_or_path"),Tet.forEach(t),j3o=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lse=n(KE,"CODE",{});var Met=s(lse);D3o=r(Met,"pretrained_model_name_or_path"),Met.forEach(t),G3o=r(KE,":"),KE.forEach(t),O3o=i(Ot),$=n(Ot,"UL",{});var q=s($);Ou=n(q,"LI",{});var WAe=s(Ou);ise=n(WAe,"STRONG",{});var Eet=s(ise);V3o=r(Eet,"bart"),Eet.forEach(t),X3o=r(WAe," \u2014 "),zI=n(WAe,"A",{href:!0});var Cet=s(zI);z3o=r(Cet,"BartForCausalLM"),Cet.forEach(t),Q3o=r(WAe," (BART model)"),WAe.forEach(t),W3o=i(q),Vu=n(q,"LI",{});var HAe=s(Vu);dse=n(HAe,"STRONG",{});var wet=s(dse);H3o=r(wet,"bert"),wet.forEach(t),U3o=r(HAe," \u2014 "),QI=n(HAe,"A",{href:!0});var Aet=s(QI);J3o=r(Aet,"BertLMHeadModel"),Aet.forEach(t),Y3o=r(HAe," (BERT model)"),HAe.forEach(t),K3o=i(q),Xu=n(q,"LI",{});var UAe=s(Xu);cse=n(UAe,"STRONG",{});var yet=s(cse);Z3o=r(yet,"bert-generation"),yet.forEach(t),e6o=r(UAe," \u2014 "),WI=n(UAe,"A",{href:!0});var Let=s(WI);o6o=r(Let,"BertGenerationDecoder"),Let.forEach(t),r6o=r(UAe," (Bert Generation model)"),UAe.forEach(t),t6o=i(q),zu=n(q,"LI",{});var JAe=s(zu);fse=n(JAe,"STRONG",{});var xet=s(fse);a6o=r(xet,"big_bird"),xet.forEach(t),n6o=r(JAe," \u2014 "),HI=n(JAe,"A",{href:!0});var ket=s(HI);s6o=r(ket,"BigBirdForCausalLM"),ket.forEach(t),l6o=r(JAe," (BigBird model)"),JAe.forEach(t),i6o=i(q),Qu=n(q,"LI",{});var YAe=s(Qu);mse=n(YAe,"STRONG",{});var Set=s(mse);d6o=r(Set,"bigbird_pegasus"),Set.forEach(t),c6o=r(YAe," \u2014 "),UI=n(YAe,"A",{href:!0});var Ret=s(UI);f6o=r(Ret,"BigBirdPegasusForCausalLM"),Ret.forEach(t),m6o=r(YAe," (BigBirdPegasus model)"),YAe.forEach(t),g6o=i(q),Wu=n(q,"LI",{});var KAe=s(Wu);gse=n(KAe,"STRONG",{});var Bet=s(gse);h6o=r(Bet,"blenderbot"),Bet.forEach(t),p6o=r(KAe," \u2014 "),JI=n(KAe,"A",{href:!0});var Pet=s(JI);_6o=r(Pet,"BlenderbotForCausalLM"),Pet.forEach(t),u6o=r(KAe," (Blenderbot model)"),KAe.forEach(t),b6o=i(q),Hu=n(q,"LI",{});var ZAe=s(Hu);hse=n(ZAe,"STRONG",{});var $et=s(hse);v6o=r($et,"blenderbot-small"),$et.forEach(t),F6o=r(ZAe," \u2014 "),YI=n(ZAe,"A",{href:!0});var Iet=s(YI);T6o=r(Iet,"BlenderbotSmallForCausalLM"),Iet.forEach(t),M6o=r(ZAe," (BlenderbotSmall model)"),ZAe.forEach(t),E6o=i(q),Uu=n(q,"LI",{});var e0e=s(Uu);pse=n(e0e,"STRONG",{});var qet=s(pse);C6o=r(qet,"camembert"),qet.forEach(t),w6o=r(e0e," \u2014 "),KI=n(e0e,"A",{href:!0});var Net=s(KI);A6o=r(Net,"CamembertForCausalLM"),Net.forEach(t),y6o=r(e0e," (CamemBERT model)"),e0e.forEach(t),L6o=i(q),Ju=n(q,"LI",{});var o0e=s(Ju);_se=n(o0e,"STRONG",{});var jet=s(_se);x6o=r(jet,"ctrl"),jet.forEach(t),k6o=r(o0e," \u2014 "),ZI=n(o0e,"A",{href:!0});var Det=s(ZI);S6o=r(Det,"CTRLLMHeadModel"),Det.forEach(t),R6o=r(o0e," (CTRL model)"),o0e.forEach(t),B6o=i(q),Yu=n(q,"LI",{});var r0e=s(Yu);use=n(r0e,"STRONG",{});var Get=s(use);P6o=r(Get,"data2vec-text"),Get.forEach(t),$6o=r(r0e," \u2014 "),eq=n(r0e,"A",{href:!0});var Oet=s(eq);I6o=r(Oet,"Data2VecTextForCausalLM"),Oet.forEach(t),q6o=r(r0e," (Data2VecText model)"),r0e.forEach(t),N6o=i(q),Ku=n(q,"LI",{});var t0e=s(Ku);bse=n(t0e,"STRONG",{});var Vet=s(bse);j6o=r(Vet,"electra"),Vet.forEach(t),D6o=r(t0e," \u2014 "),oq=n(t0e,"A",{href:!0});var Xet=s(oq);G6o=r(Xet,"ElectraForCausalLM"),Xet.forEach(t),O6o=r(t0e," (ELECTRA model)"),t0e.forEach(t),V6o=i(q),Zu=n(q,"LI",{});var a0e=s(Zu);vse=n(a0e,"STRONG",{});var zet=s(vse);X6o=r(zet,"gpt2"),zet.forEach(t),z6o=r(a0e," \u2014 "),rq=n(a0e,"A",{href:!0});var Qet=s(rq);Q6o=r(Qet,"GPT2LMHeadModel"),Qet.forEach(t),W6o=r(a0e," (OpenAI GPT-2 model)"),a0e.forEach(t),H6o=i(q),e1=n(q,"LI",{});var n0e=s(e1);Fse=n(n0e,"STRONG",{});var Wet=s(Fse);U6o=r(Wet,"gpt_neo"),Wet.forEach(t),J6o=r(n0e," \u2014 "),tq=n(n0e,"A",{href:!0});var Het=s(tq);Y6o=r(Het,"GPTNeoForCausalLM"),Het.forEach(t),K6o=r(n0e," (GPT Neo model)"),n0e.forEach(t),Z6o=i(q),o1=n(q,"LI",{});var s0e=s(o1);Tse=n(s0e,"STRONG",{});var Uet=s(Tse);evo=r(Uet,"gptj"),Uet.forEach(t),ovo=r(s0e," \u2014 "),aq=n(s0e,"A",{href:!0});var Jet=s(aq);rvo=r(Jet,"GPTJForCausalLM"),Jet.forEach(t),tvo=r(s0e," (GPT-J model)"),s0e.forEach(t),avo=i(q),r1=n(q,"LI",{});var l0e=s(r1);Mse=n(l0e,"STRONG",{});var Yet=s(Mse);nvo=r(Yet,"marian"),Yet.forEach(t),svo=r(l0e," \u2014 "),nq=n(l0e,"A",{href:!0});var Ket=s(nq);lvo=r(Ket,"MarianForCausalLM"),Ket.forEach(t),ivo=r(l0e," (Marian model)"),l0e.forEach(t),dvo=i(q),t1=n(q,"LI",{});var i0e=s(t1);Ese=n(i0e,"STRONG",{});var Zet=s(Ese);cvo=r(Zet,"mbart"),Zet.forEach(t),fvo=r(i0e," \u2014 "),sq=n(i0e,"A",{href:!0});var eot=s(sq);mvo=r(eot,"MBartForCausalLM"),eot.forEach(t),gvo=r(i0e," (mBART model)"),i0e.forEach(t),hvo=i(q),a1=n(q,"LI",{});var d0e=s(a1);Cse=n(d0e,"STRONG",{});var oot=s(Cse);pvo=r(oot,"megatron-bert"),oot.forEach(t),_vo=r(d0e," \u2014 "),lq=n(d0e,"A",{href:!0});var rot=s(lq);uvo=r(rot,"MegatronBertForCausalLM"),rot.forEach(t),bvo=r(d0e," (MegatronBert model)"),d0e.forEach(t),vvo=i(q),n1=n(q,"LI",{});var c0e=s(n1);wse=n(c0e,"STRONG",{});var tot=s(wse);Fvo=r(tot,"openai-gpt"),tot.forEach(t),Tvo=r(c0e," \u2014 "),iq=n(c0e,"A",{href:!0});var aot=s(iq);Mvo=r(aot,"OpenAIGPTLMHeadModel"),aot.forEach(t),Evo=r(c0e," (OpenAI GPT model)"),c0e.forEach(t),Cvo=i(q),s1=n(q,"LI",{});var f0e=s(s1);Ase=n(f0e,"STRONG",{});var not=s(Ase);wvo=r(not,"pegasus"),not.forEach(t),Avo=r(f0e," \u2014 "),dq=n(f0e,"A",{href:!0});var sot=s(dq);yvo=r(sot,"PegasusForCausalLM"),sot.forEach(t),Lvo=r(f0e," (Pegasus model)"),f0e.forEach(t),xvo=i(q),l1=n(q,"LI",{});var m0e=s(l1);yse=n(m0e,"STRONG",{});var lot=s(yse);kvo=r(lot,"plbart"),lot.forEach(t),Svo=r(m0e," \u2014 "),cq=n(m0e,"A",{href:!0});var iot=s(cq);Rvo=r(iot,"PLBartForCausalLM"),iot.forEach(t),Bvo=r(m0e," (PLBart model)"),m0e.forEach(t),Pvo=i(q),i1=n(q,"LI",{});var g0e=s(i1);Lse=n(g0e,"STRONG",{});var dot=s(Lse);$vo=r(dot,"prophetnet"),dot.forEach(t),Ivo=r(g0e," \u2014 "),fq=n(g0e,"A",{href:!0});var cot=s(fq);qvo=r(cot,"ProphetNetForCausalLM"),cot.forEach(t),Nvo=r(g0e," (ProphetNet model)"),g0e.forEach(t),jvo=i(q),d1=n(q,"LI",{});var h0e=s(d1);xse=n(h0e,"STRONG",{});var fot=s(xse);Dvo=r(fot,"qdqbert"),fot.forEach(t),Gvo=r(h0e," \u2014 "),mq=n(h0e,"A",{href:!0});var mot=s(mq);Ovo=r(mot,"QDQBertLMHeadModel"),mot.forEach(t),Vvo=r(h0e," (QDQBert model)"),h0e.forEach(t),Xvo=i(q),c1=n(q,"LI",{});var p0e=s(c1);kse=n(p0e,"STRONG",{});var got=s(kse);zvo=r(got,"reformer"),got.forEach(t),Qvo=r(p0e," \u2014 "),gq=n(p0e,"A",{href:!0});var hot=s(gq);Wvo=r(hot,"ReformerModelWithLMHead"),hot.forEach(t),Hvo=r(p0e," (Reformer model)"),p0e.forEach(t),Uvo=i(q),f1=n(q,"LI",{});var _0e=s(f1);Sse=n(_0e,"STRONG",{});var pot=s(Sse);Jvo=r(pot,"rembert"),pot.forEach(t),Yvo=r(_0e," \u2014 "),hq=n(_0e,"A",{href:!0});var _ot=s(hq);Kvo=r(_ot,"RemBertForCausalLM"),_ot.forEach(t),Zvo=r(_0e," (RemBERT model)"),_0e.forEach(t),eFo=i(q),m1=n(q,"LI",{});var u0e=s(m1);Rse=n(u0e,"STRONG",{});var uot=s(Rse);oFo=r(uot,"roberta"),uot.forEach(t),rFo=r(u0e," \u2014 "),pq=n(u0e,"A",{href:!0});var bot=s(pq);tFo=r(bot,"RobertaForCausalLM"),bot.forEach(t),aFo=r(u0e," (RoBERTa model)"),u0e.forEach(t),nFo=i(q),g1=n(q,"LI",{});var b0e=s(g1);Bse=n(b0e,"STRONG",{});var vot=s(Bse);sFo=r(vot,"roformer"),vot.forEach(t),lFo=r(b0e," \u2014 "),_q=n(b0e,"A",{href:!0});var Fot=s(_q);iFo=r(Fot,"RoFormerForCausalLM"),Fot.forEach(t),dFo=r(b0e," (RoFormer model)"),b0e.forEach(t),cFo=i(q),h1=n(q,"LI",{});var v0e=s(h1);Pse=n(v0e,"STRONG",{});var Tot=s(Pse);fFo=r(Tot,"speech_to_text_2"),Tot.forEach(t),mFo=r(v0e," \u2014 "),uq=n(v0e,"A",{href:!0});var Mot=s(uq);gFo=r(Mot,"Speech2Text2ForCausalLM"),Mot.forEach(t),hFo=r(v0e," (Speech2Text2 model)"),v0e.forEach(t),pFo=i(q),p1=n(q,"LI",{});var F0e=s(p1);$se=n(F0e,"STRONG",{});var Eot=s($se);_Fo=r(Eot,"transfo-xl"),Eot.forEach(t),uFo=r(F0e," \u2014 "),bq=n(F0e,"A",{href:!0});var Cot=s(bq);bFo=r(Cot,"TransfoXLLMHeadModel"),Cot.forEach(t),vFo=r(F0e," (Transformer-XL model)"),F0e.forEach(t),FFo=i(q),_1=n(q,"LI",{});var T0e=s(_1);Ise=n(T0e,"STRONG",{});var wot=s(Ise);TFo=r(wot,"trocr"),wot.forEach(t),MFo=r(T0e," \u2014 "),vq=n(T0e,"A",{href:!0});var Aot=s(vq);EFo=r(Aot,"TrOCRForCausalLM"),Aot.forEach(t),CFo=r(T0e," (TrOCR model)"),T0e.forEach(t),wFo=i(q),u1=n(q,"LI",{});var M0e=s(u1);qse=n(M0e,"STRONG",{});var yot=s(qse);AFo=r(yot,"xglm"),yot.forEach(t),yFo=r(M0e," \u2014 "),Fq=n(M0e,"A",{href:!0});var Lot=s(Fq);LFo=r(Lot,"XGLMForCausalLM"),Lot.forEach(t),xFo=r(M0e," (XGLM model)"),M0e.forEach(t),kFo=i(q),b1=n(q,"LI",{});var E0e=s(b1);Nse=n(E0e,"STRONG",{});var xot=s(Nse);SFo=r(xot,"xlm"),xot.forEach(t),RFo=r(E0e," \u2014 "),Tq=n(E0e,"A",{href:!0});var kot=s(Tq);BFo=r(kot,"XLMWithLMHeadModel"),kot.forEach(t),PFo=r(E0e," (XLM model)"),E0e.forEach(t),$Fo=i(q),v1=n(q,"LI",{});var C0e=s(v1);jse=n(C0e,"STRONG",{});var Sot=s(jse);IFo=r(Sot,"xlm-prophetnet"),Sot.forEach(t),qFo=r(C0e," \u2014 "),Mq=n(C0e,"A",{href:!0});var Rot=s(Mq);NFo=r(Rot,"XLMProphetNetForCausalLM"),Rot.forEach(t),jFo=r(C0e," (XLMProphetNet model)"),C0e.forEach(t),DFo=i(q),F1=n(q,"LI",{});var w0e=s(F1);Dse=n(w0e,"STRONG",{});var Bot=s(Dse);GFo=r(Bot,"xlm-roberta"),Bot.forEach(t),OFo=r(w0e," \u2014 "),Eq=n(w0e,"A",{href:!0});var Pot=s(Eq);VFo=r(Pot,"XLMRobertaForCausalLM"),Pot.forEach(t),XFo=r(w0e," (XLM-RoBERTa model)"),w0e.forEach(t),zFo=i(q),T1=n(q,"LI",{});var A0e=s(T1);Gse=n(A0e,"STRONG",{});var $ot=s(Gse);QFo=r($ot,"xlm-roberta-xl"),$ot.forEach(t),WFo=r(A0e," \u2014 "),Cq=n(A0e,"A",{href:!0});var Iot=s(Cq);HFo=r(Iot,"XLMRobertaXLForCausalLM"),Iot.forEach(t),UFo=r(A0e," (XLM-RoBERTa-XL model)"),A0e.forEach(t),JFo=i(q),M1=n(q,"LI",{});var y0e=s(M1);Ose=n(y0e,"STRONG",{});var qot=s(Ose);YFo=r(qot,"xlnet"),qot.forEach(t),KFo=r(y0e," \u2014 "),wq=n(y0e,"A",{href:!0});var Not=s(wq);ZFo=r(Not,"XLNetLMHeadModel"),Not.forEach(t),eTo=r(y0e," (XLNet model)"),y0e.forEach(t),q.forEach(t),oTo=i(Ot),E1=n(Ot,"P",{});var L0e=s(E1);rTo=r(L0e,"The model is set in evaluation mode by default using "),Vse=n(L0e,"CODE",{});var jot=s(Vse);tTo=r(jot,"model.eval()"),jot.forEach(t),aTo=r(L0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xse=n(L0e,"CODE",{});var Dot=s(Xse);nTo=r(Dot,"model.train()"),Dot.forEach(t),L0e.forEach(t),sTo=i(Ot),zse=n(Ot,"P",{});var Got=s(zse);lTo=r(Got,"Examples:"),Got.forEach(t),iTo=i(Ot),m(Ww.$$.fragment,Ot),Ot.forEach(t),nl.forEach(t),APe=i(c),hd=n(c,"H2",{class:!0});var $Ie=s(hd);C1=n($Ie,"A",{id:!0,class:!0,href:!0});var Oot=s(C1);Qse=n(Oot,"SPAN",{});var Vot=s(Qse);m(Hw.$$.fragment,Vot),Vot.forEach(t),Oot.forEach(t),dTo=i($Ie),Wse=n($Ie,"SPAN",{});var Xot=s(Wse);cTo=r(Xot,"AutoModelForMaskedLM"),Xot.forEach(t),$Ie.forEach(t),yPe=i(c),Zo=n(c,"DIV",{class:!0});var ll=s(Zo);m(Uw.$$.fragment,ll),fTo=i(ll),pd=n(ll,"P",{});var AJ=s(pd);mTo=r(AJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Aq=n(AJ,"A",{href:!0});var zot=s(Aq);gTo=r(zot,"from_pretrained()"),zot.forEach(t),hTo=r(AJ," class method or the "),yq=n(AJ,"A",{href:!0});var Qot=s(yq);pTo=r(Qot,"from_config()"),Qot.forEach(t),_To=r(AJ,` class
method.`),AJ.forEach(t),uTo=i(ll),Jw=n(ll,"P",{});var IIe=s(Jw);bTo=r(IIe,"This class cannot be instantiated directly using "),Hse=n(IIe,"CODE",{});var Wot=s(Hse);vTo=r(Wot,"__init__()"),Wot.forEach(t),FTo=r(IIe," (throws an error)."),IIe.forEach(t),TTo=i(ll),Wr=n(ll,"DIV",{class:!0});var il=s(Wr);m(Yw.$$.fragment,il),MTo=i(il),Use=n(il,"P",{});var Hot=s(Use);ETo=r(Hot,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Hot.forEach(t),CTo=i(il),_d=n(il,"P",{});var yJ=s(_d);wTo=r(yJ,`Note:
Loading a model from its configuration file does `),Jse=n(yJ,"STRONG",{});var Uot=s(Jse);ATo=r(Uot,"not"),Uot.forEach(t),yTo=r(yJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lq=n(yJ,"A",{href:!0});var Jot=s(Lq);LTo=r(Jot,"from_pretrained()"),Jot.forEach(t),xTo=r(yJ," to load the model weights."),yJ.forEach(t),kTo=i(il),Yse=n(il,"P",{});var Yot=s(Yse);STo=r(Yot,"Examples:"),Yot.forEach(t),RTo=i(il),m(Kw.$$.fragment,il),il.forEach(t),BTo=i(ll),Ge=n(ll,"DIV",{class:!0});var Vt=s(Ge);m(Zw.$$.fragment,Vt),PTo=i(Vt),Kse=n(Vt,"P",{});var Kot=s(Kse);$To=r(Kot,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Kot.forEach(t),ITo=i(Vt),Wa=n(Vt,"P",{});var ZE=s(Wa);qTo=r(ZE,"The model class to instantiate is selected based on the "),Zse=n(ZE,"CODE",{});var Zot=s(Zse);NTo=r(Zot,"model_type"),Zot.forEach(t),jTo=r(ZE,` property of the config object (either
passed as an argument or loaded from `),ele=n(ZE,"CODE",{});var ert=s(ele);DTo=r(ert,"pretrained_model_name_or_path"),ert.forEach(t),GTo=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ole=n(ZE,"CODE",{});var ort=s(ole);OTo=r(ort,"pretrained_model_name_or_path"),ort.forEach(t),VTo=r(ZE,":"),ZE.forEach(t),XTo=i(Vt),I=n(Vt,"UL",{});var N=s(I);w1=n(N,"LI",{});var x0e=s(w1);rle=n(x0e,"STRONG",{});var rrt=s(rle);zTo=r(rrt,"albert"),rrt.forEach(t),QTo=r(x0e," \u2014 "),xq=n(x0e,"A",{href:!0});var trt=s(xq);WTo=r(trt,"AlbertForMaskedLM"),trt.forEach(t),HTo=r(x0e," (ALBERT model)"),x0e.forEach(t),UTo=i(N),A1=n(N,"LI",{});var k0e=s(A1);tle=n(k0e,"STRONG",{});var art=s(tle);JTo=r(art,"bart"),art.forEach(t),YTo=r(k0e," \u2014 "),kq=n(k0e,"A",{href:!0});var nrt=s(kq);KTo=r(nrt,"BartForConditionalGeneration"),nrt.forEach(t),ZTo=r(k0e," (BART model)"),k0e.forEach(t),eMo=i(N),y1=n(N,"LI",{});var S0e=s(y1);ale=n(S0e,"STRONG",{});var srt=s(ale);oMo=r(srt,"bert"),srt.forEach(t),rMo=r(S0e," \u2014 "),Sq=n(S0e,"A",{href:!0});var lrt=s(Sq);tMo=r(lrt,"BertForMaskedLM"),lrt.forEach(t),aMo=r(S0e," (BERT model)"),S0e.forEach(t),nMo=i(N),L1=n(N,"LI",{});var R0e=s(L1);nle=n(R0e,"STRONG",{});var irt=s(nle);sMo=r(irt,"big_bird"),irt.forEach(t),lMo=r(R0e," \u2014 "),Rq=n(R0e,"A",{href:!0});var drt=s(Rq);iMo=r(drt,"BigBirdForMaskedLM"),drt.forEach(t),dMo=r(R0e," (BigBird model)"),R0e.forEach(t),cMo=i(N),x1=n(N,"LI",{});var B0e=s(x1);sle=n(B0e,"STRONG",{});var crt=s(sle);fMo=r(crt,"camembert"),crt.forEach(t),mMo=r(B0e," \u2014 "),Bq=n(B0e,"A",{href:!0});var frt=s(Bq);gMo=r(frt,"CamembertForMaskedLM"),frt.forEach(t),hMo=r(B0e," (CamemBERT model)"),B0e.forEach(t),pMo=i(N),k1=n(N,"LI",{});var P0e=s(k1);lle=n(P0e,"STRONG",{});var mrt=s(lle);_Mo=r(mrt,"convbert"),mrt.forEach(t),uMo=r(P0e," \u2014 "),Pq=n(P0e,"A",{href:!0});var grt=s(Pq);bMo=r(grt,"ConvBertForMaskedLM"),grt.forEach(t),vMo=r(P0e," (ConvBERT model)"),P0e.forEach(t),FMo=i(N),S1=n(N,"LI",{});var $0e=s(S1);ile=n($0e,"STRONG",{});var hrt=s(ile);TMo=r(hrt,"data2vec-text"),hrt.forEach(t),MMo=r($0e," \u2014 "),$q=n($0e,"A",{href:!0});var prt=s($q);EMo=r(prt,"Data2VecTextForMaskedLM"),prt.forEach(t),CMo=r($0e," (Data2VecText model)"),$0e.forEach(t),wMo=i(N),R1=n(N,"LI",{});var I0e=s(R1);dle=n(I0e,"STRONG",{});var _rt=s(dle);AMo=r(_rt,"deberta"),_rt.forEach(t),yMo=r(I0e," \u2014 "),Iq=n(I0e,"A",{href:!0});var urt=s(Iq);LMo=r(urt,"DebertaForMaskedLM"),urt.forEach(t),xMo=r(I0e," (DeBERTa model)"),I0e.forEach(t),kMo=i(N),B1=n(N,"LI",{});var q0e=s(B1);cle=n(q0e,"STRONG",{});var brt=s(cle);SMo=r(brt,"deberta-v2"),brt.forEach(t),RMo=r(q0e," \u2014 "),qq=n(q0e,"A",{href:!0});var vrt=s(qq);BMo=r(vrt,"DebertaV2ForMaskedLM"),vrt.forEach(t),PMo=r(q0e," (DeBERTa-v2 model)"),q0e.forEach(t),$Mo=i(N),P1=n(N,"LI",{});var N0e=s(P1);fle=n(N0e,"STRONG",{});var Frt=s(fle);IMo=r(Frt,"distilbert"),Frt.forEach(t),qMo=r(N0e," \u2014 "),Nq=n(N0e,"A",{href:!0});var Trt=s(Nq);NMo=r(Trt,"DistilBertForMaskedLM"),Trt.forEach(t),jMo=r(N0e," (DistilBERT model)"),N0e.forEach(t),DMo=i(N),$1=n(N,"LI",{});var j0e=s($1);mle=n(j0e,"STRONG",{});var Mrt=s(mle);GMo=r(Mrt,"electra"),Mrt.forEach(t),OMo=r(j0e," \u2014 "),jq=n(j0e,"A",{href:!0});var Ert=s(jq);VMo=r(Ert,"ElectraForMaskedLM"),Ert.forEach(t),XMo=r(j0e," (ELECTRA model)"),j0e.forEach(t),zMo=i(N),I1=n(N,"LI",{});var D0e=s(I1);gle=n(D0e,"STRONG",{});var Crt=s(gle);QMo=r(Crt,"flaubert"),Crt.forEach(t),WMo=r(D0e," \u2014 "),Dq=n(D0e,"A",{href:!0});var wrt=s(Dq);HMo=r(wrt,"FlaubertWithLMHeadModel"),wrt.forEach(t),UMo=r(D0e," (FlauBERT model)"),D0e.forEach(t),JMo=i(N),q1=n(N,"LI",{});var G0e=s(q1);hle=n(G0e,"STRONG",{});var Art=s(hle);YMo=r(Art,"fnet"),Art.forEach(t),KMo=r(G0e," \u2014 "),Gq=n(G0e,"A",{href:!0});var yrt=s(Gq);ZMo=r(yrt,"FNetForMaskedLM"),yrt.forEach(t),eEo=r(G0e," (FNet model)"),G0e.forEach(t),oEo=i(N),N1=n(N,"LI",{});var O0e=s(N1);ple=n(O0e,"STRONG",{});var Lrt=s(ple);rEo=r(Lrt,"funnel"),Lrt.forEach(t),tEo=r(O0e," \u2014 "),Oq=n(O0e,"A",{href:!0});var xrt=s(Oq);aEo=r(xrt,"FunnelForMaskedLM"),xrt.forEach(t),nEo=r(O0e," (Funnel Transformer model)"),O0e.forEach(t),sEo=i(N),j1=n(N,"LI",{});var V0e=s(j1);_le=n(V0e,"STRONG",{});var krt=s(_le);lEo=r(krt,"ibert"),krt.forEach(t),iEo=r(V0e," \u2014 "),Vq=n(V0e,"A",{href:!0});var Srt=s(Vq);dEo=r(Srt,"IBertForMaskedLM"),Srt.forEach(t),cEo=r(V0e," (I-BERT model)"),V0e.forEach(t),fEo=i(N),D1=n(N,"LI",{});var X0e=s(D1);ule=n(X0e,"STRONG",{});var Rrt=s(ule);mEo=r(Rrt,"layoutlm"),Rrt.forEach(t),gEo=r(X0e," \u2014 "),Xq=n(X0e,"A",{href:!0});var Brt=s(Xq);hEo=r(Brt,"LayoutLMForMaskedLM"),Brt.forEach(t),pEo=r(X0e," (LayoutLM model)"),X0e.forEach(t),_Eo=i(N),G1=n(N,"LI",{});var z0e=s(G1);ble=n(z0e,"STRONG",{});var Prt=s(ble);uEo=r(Prt,"longformer"),Prt.forEach(t),bEo=r(z0e," \u2014 "),zq=n(z0e,"A",{href:!0});var $rt=s(zq);vEo=r($rt,"LongformerForMaskedLM"),$rt.forEach(t),FEo=r(z0e," (Longformer model)"),z0e.forEach(t),TEo=i(N),O1=n(N,"LI",{});var Q0e=s(O1);vle=n(Q0e,"STRONG",{});var Irt=s(vle);MEo=r(Irt,"mbart"),Irt.forEach(t),EEo=r(Q0e," \u2014 "),Qq=n(Q0e,"A",{href:!0});var qrt=s(Qq);CEo=r(qrt,"MBartForConditionalGeneration"),qrt.forEach(t),wEo=r(Q0e," (mBART model)"),Q0e.forEach(t),AEo=i(N),V1=n(N,"LI",{});var W0e=s(V1);Fle=n(W0e,"STRONG",{});var Nrt=s(Fle);yEo=r(Nrt,"megatron-bert"),Nrt.forEach(t),LEo=r(W0e," \u2014 "),Wq=n(W0e,"A",{href:!0});var jrt=s(Wq);xEo=r(jrt,"MegatronBertForMaskedLM"),jrt.forEach(t),kEo=r(W0e," (MegatronBert model)"),W0e.forEach(t),SEo=i(N),X1=n(N,"LI",{});var H0e=s(X1);Tle=n(H0e,"STRONG",{});var Drt=s(Tle);REo=r(Drt,"mobilebert"),Drt.forEach(t),BEo=r(H0e," \u2014 "),Hq=n(H0e,"A",{href:!0});var Grt=s(Hq);PEo=r(Grt,"MobileBertForMaskedLM"),Grt.forEach(t),$Eo=r(H0e," (MobileBERT model)"),H0e.forEach(t),IEo=i(N),z1=n(N,"LI",{});var U0e=s(z1);Mle=n(U0e,"STRONG",{});var Ort=s(Mle);qEo=r(Ort,"mpnet"),Ort.forEach(t),NEo=r(U0e," \u2014 "),Uq=n(U0e,"A",{href:!0});var Vrt=s(Uq);jEo=r(Vrt,"MPNetForMaskedLM"),Vrt.forEach(t),DEo=r(U0e," (MPNet model)"),U0e.forEach(t),GEo=i(N),Q1=n(N,"LI",{});var J0e=s(Q1);Ele=n(J0e,"STRONG",{});var Xrt=s(Ele);OEo=r(Xrt,"nystromformer"),Xrt.forEach(t),VEo=r(J0e," \u2014 "),Jq=n(J0e,"A",{href:!0});var zrt=s(Jq);XEo=r(zrt,"NystromformerForMaskedLM"),zrt.forEach(t),zEo=r(J0e," (Nystromformer model)"),J0e.forEach(t),QEo=i(N),W1=n(N,"LI",{});var Y0e=s(W1);Cle=n(Y0e,"STRONG",{});var Qrt=s(Cle);WEo=r(Qrt,"perceiver"),Qrt.forEach(t),HEo=r(Y0e," \u2014 "),Yq=n(Y0e,"A",{href:!0});var Wrt=s(Yq);UEo=r(Wrt,"PerceiverForMaskedLM"),Wrt.forEach(t),JEo=r(Y0e," (Perceiver model)"),Y0e.forEach(t),YEo=i(N),H1=n(N,"LI",{});var K0e=s(H1);wle=n(K0e,"STRONG",{});var Hrt=s(wle);KEo=r(Hrt,"qdqbert"),Hrt.forEach(t),ZEo=r(K0e," \u2014 "),Kq=n(K0e,"A",{href:!0});var Urt=s(Kq);eCo=r(Urt,"QDQBertForMaskedLM"),Urt.forEach(t),oCo=r(K0e," (QDQBert model)"),K0e.forEach(t),rCo=i(N),U1=n(N,"LI",{});var Z0e=s(U1);Ale=n(Z0e,"STRONG",{});var Jrt=s(Ale);tCo=r(Jrt,"reformer"),Jrt.forEach(t),aCo=r(Z0e," \u2014 "),Zq=n(Z0e,"A",{href:!0});var Yrt=s(Zq);nCo=r(Yrt,"ReformerForMaskedLM"),Yrt.forEach(t),sCo=r(Z0e," (Reformer model)"),Z0e.forEach(t),lCo=i(N),J1=n(N,"LI",{});var eye=s(J1);yle=n(eye,"STRONG",{});var Krt=s(yle);iCo=r(Krt,"rembert"),Krt.forEach(t),dCo=r(eye," \u2014 "),eN=n(eye,"A",{href:!0});var Zrt=s(eN);cCo=r(Zrt,"RemBertForMaskedLM"),Zrt.forEach(t),fCo=r(eye," (RemBERT model)"),eye.forEach(t),mCo=i(N),Y1=n(N,"LI",{});var oye=s(Y1);Lle=n(oye,"STRONG",{});var ett=s(Lle);gCo=r(ett,"roberta"),ett.forEach(t),hCo=r(oye," \u2014 "),oN=n(oye,"A",{href:!0});var ott=s(oN);pCo=r(ott,"RobertaForMaskedLM"),ott.forEach(t),_Co=r(oye," (RoBERTa model)"),oye.forEach(t),uCo=i(N),K1=n(N,"LI",{});var rye=s(K1);xle=n(rye,"STRONG",{});var rtt=s(xle);bCo=r(rtt,"roformer"),rtt.forEach(t),vCo=r(rye," \u2014 "),rN=n(rye,"A",{href:!0});var ttt=s(rN);FCo=r(ttt,"RoFormerForMaskedLM"),ttt.forEach(t),TCo=r(rye," (RoFormer model)"),rye.forEach(t),MCo=i(N),Z1=n(N,"LI",{});var tye=s(Z1);kle=n(tye,"STRONG",{});var att=s(kle);ECo=r(att,"squeezebert"),att.forEach(t),CCo=r(tye," \u2014 "),tN=n(tye,"A",{href:!0});var ntt=s(tN);wCo=r(ntt,"SqueezeBertForMaskedLM"),ntt.forEach(t),ACo=r(tye," (SqueezeBERT model)"),tye.forEach(t),yCo=i(N),e4=n(N,"LI",{});var aye=s(e4);Sle=n(aye,"STRONG",{});var stt=s(Sle);LCo=r(stt,"tapas"),stt.forEach(t),xCo=r(aye," \u2014 "),aN=n(aye,"A",{href:!0});var ltt=s(aN);kCo=r(ltt,"TapasForMaskedLM"),ltt.forEach(t),SCo=r(aye," (TAPAS model)"),aye.forEach(t),RCo=i(N),o4=n(N,"LI",{});var nye=s(o4);Rle=n(nye,"STRONG",{});var itt=s(Rle);BCo=r(itt,"wav2vec2"),itt.forEach(t),PCo=r(nye," \u2014 "),Ble=n(nye,"CODE",{});var dtt=s(Ble);$Co=r(dtt,"Wav2Vec2ForMaskedLM"),dtt.forEach(t),ICo=r(nye," (Wav2Vec2 model)"),nye.forEach(t),qCo=i(N),r4=n(N,"LI",{});var sye=s(r4);Ple=n(sye,"STRONG",{});var ctt=s(Ple);NCo=r(ctt,"xlm"),ctt.forEach(t),jCo=r(sye," \u2014 "),nN=n(sye,"A",{href:!0});var ftt=s(nN);DCo=r(ftt,"XLMWithLMHeadModel"),ftt.forEach(t),GCo=r(sye," (XLM model)"),sye.forEach(t),OCo=i(N),t4=n(N,"LI",{});var lye=s(t4);$le=n(lye,"STRONG",{});var mtt=s($le);VCo=r(mtt,"xlm-roberta"),mtt.forEach(t),XCo=r(lye," \u2014 "),sN=n(lye,"A",{href:!0});var gtt=s(sN);zCo=r(gtt,"XLMRobertaForMaskedLM"),gtt.forEach(t),QCo=r(lye," (XLM-RoBERTa model)"),lye.forEach(t),WCo=i(N),a4=n(N,"LI",{});var iye=s(a4);Ile=n(iye,"STRONG",{});var htt=s(Ile);HCo=r(htt,"xlm-roberta-xl"),htt.forEach(t),UCo=r(iye," \u2014 "),lN=n(iye,"A",{href:!0});var ptt=s(lN);JCo=r(ptt,"XLMRobertaXLForMaskedLM"),ptt.forEach(t),YCo=r(iye," (XLM-RoBERTa-XL model)"),iye.forEach(t),KCo=i(N),n4=n(N,"LI",{});var dye=s(n4);qle=n(dye,"STRONG",{});var _tt=s(qle);ZCo=r(_tt,"yoso"),_tt.forEach(t),ewo=r(dye," \u2014 "),iN=n(dye,"A",{href:!0});var utt=s(iN);owo=r(utt,"YosoForMaskedLM"),utt.forEach(t),rwo=r(dye," (YOSO model)"),dye.forEach(t),N.forEach(t),two=i(Vt),s4=n(Vt,"P",{});var cye=s(s4);awo=r(cye,"The model is set in evaluation mode by default using "),Nle=n(cye,"CODE",{});var btt=s(Nle);nwo=r(btt,"model.eval()"),btt.forEach(t),swo=r(cye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jle=n(cye,"CODE",{});var vtt=s(jle);lwo=r(vtt,"model.train()"),vtt.forEach(t),cye.forEach(t),iwo=i(Vt),Dle=n(Vt,"P",{});var Ftt=s(Dle);dwo=r(Ftt,"Examples:"),Ftt.forEach(t),cwo=i(Vt),m(eA.$$.fragment,Vt),Vt.forEach(t),ll.forEach(t),LPe=i(c),ud=n(c,"H2",{class:!0});var qIe=s(ud);l4=n(qIe,"A",{id:!0,class:!0,href:!0});var Ttt=s(l4);Gle=n(Ttt,"SPAN",{});var Mtt=s(Gle);m(oA.$$.fragment,Mtt),Mtt.forEach(t),Ttt.forEach(t),fwo=i(qIe),Ole=n(qIe,"SPAN",{});var Ett=s(Ole);mwo=r(Ett,"AutoModelForSeq2SeqLM"),Ett.forEach(t),qIe.forEach(t),xPe=i(c),er=n(c,"DIV",{class:!0});var dl=s(er);m(rA.$$.fragment,dl),gwo=i(dl),bd=n(dl,"P",{});var LJ=s(bd);hwo=r(LJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dN=n(LJ,"A",{href:!0});var Ctt=s(dN);pwo=r(Ctt,"from_pretrained()"),Ctt.forEach(t),_wo=r(LJ," class method or the "),cN=n(LJ,"A",{href:!0});var wtt=s(cN);uwo=r(wtt,"from_config()"),wtt.forEach(t),bwo=r(LJ,` class
method.`),LJ.forEach(t),vwo=i(dl),tA=n(dl,"P",{});var NIe=s(tA);Fwo=r(NIe,"This class cannot be instantiated directly using "),Vle=n(NIe,"CODE",{});var Att=s(Vle);Two=r(Att,"__init__()"),Att.forEach(t),Mwo=r(NIe," (throws an error)."),NIe.forEach(t),Ewo=i(dl),Hr=n(dl,"DIV",{class:!0});var cl=s(Hr);m(aA.$$.fragment,cl),Cwo=i(cl),Xle=n(cl,"P",{});var ytt=s(Xle);wwo=r(ytt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ytt.forEach(t),Awo=i(cl),vd=n(cl,"P",{});var xJ=s(vd);ywo=r(xJ,`Note:
Loading a model from its configuration file does `),zle=n(xJ,"STRONG",{});var Ltt=s(zle);Lwo=r(Ltt,"not"),Ltt.forEach(t),xwo=r(xJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fN=n(xJ,"A",{href:!0});var xtt=s(fN);kwo=r(xtt,"from_pretrained()"),xtt.forEach(t),Swo=r(xJ," to load the model weights."),xJ.forEach(t),Rwo=i(cl),Qle=n(cl,"P",{});var ktt=s(Qle);Bwo=r(ktt,"Examples:"),ktt.forEach(t),Pwo=i(cl),m(nA.$$.fragment,cl),cl.forEach(t),$wo=i(dl),Oe=n(dl,"DIV",{class:!0});var Xt=s(Oe);m(sA.$$.fragment,Xt),Iwo=i(Xt),Wle=n(Xt,"P",{});var Stt=s(Wle);qwo=r(Stt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Stt.forEach(t),Nwo=i(Xt),Ha=n(Xt,"P",{});var eC=s(Ha);jwo=r(eC,"The model class to instantiate is selected based on the "),Hle=n(eC,"CODE",{});var Rtt=s(Hle);Dwo=r(Rtt,"model_type"),Rtt.forEach(t),Gwo=r(eC,` property of the config object (either
passed as an argument or loaded from `),Ule=n(eC,"CODE",{});var Btt=s(Ule);Owo=r(Btt,"pretrained_model_name_or_path"),Btt.forEach(t),Vwo=r(eC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jle=n(eC,"CODE",{});var Ptt=s(Jle);Xwo=r(Ptt,"pretrained_model_name_or_path"),Ptt.forEach(t),zwo=r(eC,":"),eC.forEach(t),Qwo=i(Xt),ne=n(Xt,"UL",{});var le=s(ne);i4=n(le,"LI",{});var fye=s(i4);Yle=n(fye,"STRONG",{});var $tt=s(Yle);Wwo=r($tt,"bart"),$tt.forEach(t),Hwo=r(fye," \u2014 "),mN=n(fye,"A",{href:!0});var Itt=s(mN);Uwo=r(Itt,"BartForConditionalGeneration"),Itt.forEach(t),Jwo=r(fye," (BART model)"),fye.forEach(t),Ywo=i(le),d4=n(le,"LI",{});var mye=s(d4);Kle=n(mye,"STRONG",{});var qtt=s(Kle);Kwo=r(qtt,"bigbird_pegasus"),qtt.forEach(t),Zwo=r(mye," \u2014 "),gN=n(mye,"A",{href:!0});var Ntt=s(gN);eAo=r(Ntt,"BigBirdPegasusForConditionalGeneration"),Ntt.forEach(t),oAo=r(mye," (BigBirdPegasus model)"),mye.forEach(t),rAo=i(le),c4=n(le,"LI",{});var gye=s(c4);Zle=n(gye,"STRONG",{});var jtt=s(Zle);tAo=r(jtt,"blenderbot"),jtt.forEach(t),aAo=r(gye," \u2014 "),hN=n(gye,"A",{href:!0});var Dtt=s(hN);nAo=r(Dtt,"BlenderbotForConditionalGeneration"),Dtt.forEach(t),sAo=r(gye," (Blenderbot model)"),gye.forEach(t),lAo=i(le),f4=n(le,"LI",{});var hye=s(f4);eie=n(hye,"STRONG",{});var Gtt=s(eie);iAo=r(Gtt,"blenderbot-small"),Gtt.forEach(t),dAo=r(hye," \u2014 "),pN=n(hye,"A",{href:!0});var Ott=s(pN);cAo=r(Ott,"BlenderbotSmallForConditionalGeneration"),Ott.forEach(t),fAo=r(hye," (BlenderbotSmall model)"),hye.forEach(t),mAo=i(le),m4=n(le,"LI",{});var pye=s(m4);oie=n(pye,"STRONG",{});var Vtt=s(oie);gAo=r(Vtt,"encoder-decoder"),Vtt.forEach(t),hAo=r(pye," \u2014 "),_N=n(pye,"A",{href:!0});var Xtt=s(_N);pAo=r(Xtt,"EncoderDecoderModel"),Xtt.forEach(t),_Ao=r(pye," (Encoder decoder model)"),pye.forEach(t),uAo=i(le),g4=n(le,"LI",{});var _ye=s(g4);rie=n(_ye,"STRONG",{});var ztt=s(rie);bAo=r(ztt,"fsmt"),ztt.forEach(t),vAo=r(_ye," \u2014 "),uN=n(_ye,"A",{href:!0});var Qtt=s(uN);FAo=r(Qtt,"FSMTForConditionalGeneration"),Qtt.forEach(t),TAo=r(_ye," (FairSeq Machine-Translation model)"),_ye.forEach(t),MAo=i(le),h4=n(le,"LI",{});var uye=s(h4);tie=n(uye,"STRONG",{});var Wtt=s(tie);EAo=r(Wtt,"led"),Wtt.forEach(t),CAo=r(uye," \u2014 "),bN=n(uye,"A",{href:!0});var Htt=s(bN);wAo=r(Htt,"LEDForConditionalGeneration"),Htt.forEach(t),AAo=r(uye," (LED model)"),uye.forEach(t),yAo=i(le),p4=n(le,"LI",{});var bye=s(p4);aie=n(bye,"STRONG",{});var Utt=s(aie);LAo=r(Utt,"m2m_100"),Utt.forEach(t),xAo=r(bye," \u2014 "),vN=n(bye,"A",{href:!0});var Jtt=s(vN);kAo=r(Jtt,"M2M100ForConditionalGeneration"),Jtt.forEach(t),SAo=r(bye," (M2M100 model)"),bye.forEach(t),RAo=i(le),_4=n(le,"LI",{});var vye=s(_4);nie=n(vye,"STRONG",{});var Ytt=s(nie);BAo=r(Ytt,"marian"),Ytt.forEach(t),PAo=r(vye," \u2014 "),FN=n(vye,"A",{href:!0});var Ktt=s(FN);$Ao=r(Ktt,"MarianMTModel"),Ktt.forEach(t),IAo=r(vye," (Marian model)"),vye.forEach(t),qAo=i(le),u4=n(le,"LI",{});var Fye=s(u4);sie=n(Fye,"STRONG",{});var Ztt=s(sie);NAo=r(Ztt,"mbart"),Ztt.forEach(t),jAo=r(Fye," \u2014 "),TN=n(Fye,"A",{href:!0});var eat=s(TN);DAo=r(eat,"MBartForConditionalGeneration"),eat.forEach(t),GAo=r(Fye," (mBART model)"),Fye.forEach(t),OAo=i(le),b4=n(le,"LI",{});var Tye=s(b4);lie=n(Tye,"STRONG",{});var oat=s(lie);VAo=r(oat,"mt5"),oat.forEach(t),XAo=r(Tye," \u2014 "),MN=n(Tye,"A",{href:!0});var rat=s(MN);zAo=r(rat,"MT5ForConditionalGeneration"),rat.forEach(t),QAo=r(Tye," (mT5 model)"),Tye.forEach(t),WAo=i(le),v4=n(le,"LI",{});var Mye=s(v4);iie=n(Mye,"STRONG",{});var tat=s(iie);HAo=r(tat,"pegasus"),tat.forEach(t),UAo=r(Mye," \u2014 "),EN=n(Mye,"A",{href:!0});var aat=s(EN);JAo=r(aat,"PegasusForConditionalGeneration"),aat.forEach(t),YAo=r(Mye," (Pegasus model)"),Mye.forEach(t),KAo=i(le),F4=n(le,"LI",{});var Eye=s(F4);die=n(Eye,"STRONG",{});var nat=s(die);ZAo=r(nat,"plbart"),nat.forEach(t),e0o=r(Eye," \u2014 "),CN=n(Eye,"A",{href:!0});var sat=s(CN);o0o=r(sat,"PLBartForConditionalGeneration"),sat.forEach(t),r0o=r(Eye," (PLBart model)"),Eye.forEach(t),t0o=i(le),T4=n(le,"LI",{});var Cye=s(T4);cie=n(Cye,"STRONG",{});var lat=s(cie);a0o=r(lat,"prophetnet"),lat.forEach(t),n0o=r(Cye," \u2014 "),wN=n(Cye,"A",{href:!0});var iat=s(wN);s0o=r(iat,"ProphetNetForConditionalGeneration"),iat.forEach(t),l0o=r(Cye," (ProphetNet model)"),Cye.forEach(t),i0o=i(le),M4=n(le,"LI",{});var wye=s(M4);fie=n(wye,"STRONG",{});var dat=s(fie);d0o=r(dat,"t5"),dat.forEach(t),c0o=r(wye," \u2014 "),AN=n(wye,"A",{href:!0});var cat=s(AN);f0o=r(cat,"T5ForConditionalGeneration"),cat.forEach(t),m0o=r(wye," (T5 model)"),wye.forEach(t),g0o=i(le),E4=n(le,"LI",{});var Aye=s(E4);mie=n(Aye,"STRONG",{});var fat=s(mie);h0o=r(fat,"tapex"),fat.forEach(t),p0o=r(Aye," \u2014 "),yN=n(Aye,"A",{href:!0});var mat=s(yN);_0o=r(mat,"BartForConditionalGeneration"),mat.forEach(t),u0o=r(Aye," (TAPEX model)"),Aye.forEach(t),b0o=i(le),C4=n(le,"LI",{});var yye=s(C4);gie=n(yye,"STRONG",{});var gat=s(gie);v0o=r(gat,"xlm-prophetnet"),gat.forEach(t),F0o=r(yye," \u2014 "),LN=n(yye,"A",{href:!0});var hat=s(LN);T0o=r(hat,"XLMProphetNetForConditionalGeneration"),hat.forEach(t),M0o=r(yye," (XLMProphetNet model)"),yye.forEach(t),le.forEach(t),E0o=i(Xt),w4=n(Xt,"P",{});var Lye=s(w4);C0o=r(Lye,"The model is set in evaluation mode by default using "),hie=n(Lye,"CODE",{});var pat=s(hie);w0o=r(pat,"model.eval()"),pat.forEach(t),A0o=r(Lye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pie=n(Lye,"CODE",{});var _at=s(pie);y0o=r(_at,"model.train()"),_at.forEach(t),Lye.forEach(t),L0o=i(Xt),_ie=n(Xt,"P",{});var uat=s(_ie);x0o=r(uat,"Examples:"),uat.forEach(t),k0o=i(Xt),m(lA.$$.fragment,Xt),Xt.forEach(t),dl.forEach(t),kPe=i(c),Fd=n(c,"H2",{class:!0});var jIe=s(Fd);A4=n(jIe,"A",{id:!0,class:!0,href:!0});var bat=s(A4);uie=n(bat,"SPAN",{});var vat=s(uie);m(iA.$$.fragment,vat),vat.forEach(t),bat.forEach(t),S0o=i(jIe),bie=n(jIe,"SPAN",{});var Fat=s(bie);R0o=r(Fat,"AutoModelForSequenceClassification"),Fat.forEach(t),jIe.forEach(t),SPe=i(c),or=n(c,"DIV",{class:!0});var fl=s(or);m(dA.$$.fragment,fl),B0o=i(fl),Td=n(fl,"P",{});var kJ=s(Td);P0o=r(kJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xN=n(kJ,"A",{href:!0});var Tat=s(xN);$0o=r(Tat,"from_pretrained()"),Tat.forEach(t),I0o=r(kJ," class method or the "),kN=n(kJ,"A",{href:!0});var Mat=s(kN);q0o=r(Mat,"from_config()"),Mat.forEach(t),N0o=r(kJ,` class
method.`),kJ.forEach(t),j0o=i(fl),cA=n(fl,"P",{});var DIe=s(cA);D0o=r(DIe,"This class cannot be instantiated directly using "),vie=n(DIe,"CODE",{});var Eat=s(vie);G0o=r(Eat,"__init__()"),Eat.forEach(t),O0o=r(DIe," (throws an error)."),DIe.forEach(t),V0o=i(fl),Ur=n(fl,"DIV",{class:!0});var ml=s(Ur);m(fA.$$.fragment,ml),X0o=i(ml),Fie=n(ml,"P",{});var Cat=s(Fie);z0o=r(Cat,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Cat.forEach(t),Q0o=i(ml),Md=n(ml,"P",{});var SJ=s(Md);W0o=r(SJ,`Note:
Loading a model from its configuration file does `),Tie=n(SJ,"STRONG",{});var wat=s(Tie);H0o=r(wat,"not"),wat.forEach(t),U0o=r(SJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SN=n(SJ,"A",{href:!0});var Aat=s(SN);J0o=r(Aat,"from_pretrained()"),Aat.forEach(t),Y0o=r(SJ," to load the model weights."),SJ.forEach(t),K0o=i(ml),Mie=n(ml,"P",{});var yat=s(Mie);Z0o=r(yat,"Examples:"),yat.forEach(t),eyo=i(ml),m(mA.$$.fragment,ml),ml.forEach(t),oyo=i(fl),Ve=n(fl,"DIV",{class:!0});var zt=s(Ve);m(gA.$$.fragment,zt),ryo=i(zt),Eie=n(zt,"P",{});var Lat=s(Eie);tyo=r(Lat,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Lat.forEach(t),ayo=i(zt),Ua=n(zt,"P",{});var oC=s(Ua);nyo=r(oC,"The model class to instantiate is selected based on the "),Cie=n(oC,"CODE",{});var xat=s(Cie);syo=r(xat,"model_type"),xat.forEach(t),lyo=r(oC,` property of the config object (either
passed as an argument or loaded from `),wie=n(oC,"CODE",{});var kat=s(wie);iyo=r(kat,"pretrained_model_name_or_path"),kat.forEach(t),dyo=r(oC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aie=n(oC,"CODE",{});var Sat=s(Aie);cyo=r(Sat,"pretrained_model_name_or_path"),Sat.forEach(t),fyo=r(oC,":"),oC.forEach(t),myo=i(zt),y=n(zt,"UL",{});var L=s(y);y4=n(L,"LI",{});var xye=s(y4);yie=n(xye,"STRONG",{});var Rat=s(yie);gyo=r(Rat,"albert"),Rat.forEach(t),hyo=r(xye," \u2014 "),RN=n(xye,"A",{href:!0});var Bat=s(RN);pyo=r(Bat,"AlbertForSequenceClassification"),Bat.forEach(t),_yo=r(xye," (ALBERT model)"),xye.forEach(t),uyo=i(L),L4=n(L,"LI",{});var kye=s(L4);Lie=n(kye,"STRONG",{});var Pat=s(Lie);byo=r(Pat,"bart"),Pat.forEach(t),vyo=r(kye," \u2014 "),BN=n(kye,"A",{href:!0});var $at=s(BN);Fyo=r($at,"BartForSequenceClassification"),$at.forEach(t),Tyo=r(kye," (BART model)"),kye.forEach(t),Myo=i(L),x4=n(L,"LI",{});var Sye=s(x4);xie=n(Sye,"STRONG",{});var Iat=s(xie);Eyo=r(Iat,"bert"),Iat.forEach(t),Cyo=r(Sye," \u2014 "),PN=n(Sye,"A",{href:!0});var qat=s(PN);wyo=r(qat,"BertForSequenceClassification"),qat.forEach(t),Ayo=r(Sye," (BERT model)"),Sye.forEach(t),yyo=i(L),k4=n(L,"LI",{});var Rye=s(k4);kie=n(Rye,"STRONG",{});var Nat=s(kie);Lyo=r(Nat,"big_bird"),Nat.forEach(t),xyo=r(Rye," \u2014 "),$N=n(Rye,"A",{href:!0});var jat=s($N);kyo=r(jat,"BigBirdForSequenceClassification"),jat.forEach(t),Syo=r(Rye," (BigBird model)"),Rye.forEach(t),Ryo=i(L),S4=n(L,"LI",{});var Bye=s(S4);Sie=n(Bye,"STRONG",{});var Dat=s(Sie);Byo=r(Dat,"bigbird_pegasus"),Dat.forEach(t),Pyo=r(Bye," \u2014 "),IN=n(Bye,"A",{href:!0});var Gat=s(IN);$yo=r(Gat,"BigBirdPegasusForSequenceClassification"),Gat.forEach(t),Iyo=r(Bye," (BigBirdPegasus model)"),Bye.forEach(t),qyo=i(L),R4=n(L,"LI",{});var Pye=s(R4);Rie=n(Pye,"STRONG",{});var Oat=s(Rie);Nyo=r(Oat,"camembert"),Oat.forEach(t),jyo=r(Pye," \u2014 "),qN=n(Pye,"A",{href:!0});var Vat=s(qN);Dyo=r(Vat,"CamembertForSequenceClassification"),Vat.forEach(t),Gyo=r(Pye," (CamemBERT model)"),Pye.forEach(t),Oyo=i(L),B4=n(L,"LI",{});var $ye=s(B4);Bie=n($ye,"STRONG",{});var Xat=s(Bie);Vyo=r(Xat,"canine"),Xat.forEach(t),Xyo=r($ye," \u2014 "),NN=n($ye,"A",{href:!0});var zat=s(NN);zyo=r(zat,"CanineForSequenceClassification"),zat.forEach(t),Qyo=r($ye," (Canine model)"),$ye.forEach(t),Wyo=i(L),P4=n(L,"LI",{});var Iye=s(P4);Pie=n(Iye,"STRONG",{});var Qat=s(Pie);Hyo=r(Qat,"convbert"),Qat.forEach(t),Uyo=r(Iye," \u2014 "),jN=n(Iye,"A",{href:!0});var Wat=s(jN);Jyo=r(Wat,"ConvBertForSequenceClassification"),Wat.forEach(t),Yyo=r(Iye," (ConvBERT model)"),Iye.forEach(t),Kyo=i(L),$4=n(L,"LI",{});var qye=s($4);$ie=n(qye,"STRONG",{});var Hat=s($ie);Zyo=r(Hat,"ctrl"),Hat.forEach(t),e8o=r(qye," \u2014 "),DN=n(qye,"A",{href:!0});var Uat=s(DN);o8o=r(Uat,"CTRLForSequenceClassification"),Uat.forEach(t),r8o=r(qye," (CTRL model)"),qye.forEach(t),t8o=i(L),I4=n(L,"LI",{});var Nye=s(I4);Iie=n(Nye,"STRONG",{});var Jat=s(Iie);a8o=r(Jat,"data2vec-text"),Jat.forEach(t),n8o=r(Nye," \u2014 "),GN=n(Nye,"A",{href:!0});var Yat=s(GN);s8o=r(Yat,"Data2VecTextForSequenceClassification"),Yat.forEach(t),l8o=r(Nye," (Data2VecText model)"),Nye.forEach(t),i8o=i(L),q4=n(L,"LI",{});var jye=s(q4);qie=n(jye,"STRONG",{});var Kat=s(qie);d8o=r(Kat,"deberta"),Kat.forEach(t),c8o=r(jye," \u2014 "),ON=n(jye,"A",{href:!0});var Zat=s(ON);f8o=r(Zat,"DebertaForSequenceClassification"),Zat.forEach(t),m8o=r(jye," (DeBERTa model)"),jye.forEach(t),g8o=i(L),N4=n(L,"LI",{});var Dye=s(N4);Nie=n(Dye,"STRONG",{});var ent=s(Nie);h8o=r(ent,"deberta-v2"),ent.forEach(t),p8o=r(Dye," \u2014 "),VN=n(Dye,"A",{href:!0});var ont=s(VN);_8o=r(ont,"DebertaV2ForSequenceClassification"),ont.forEach(t),u8o=r(Dye," (DeBERTa-v2 model)"),Dye.forEach(t),b8o=i(L),j4=n(L,"LI",{});var Gye=s(j4);jie=n(Gye,"STRONG",{});var rnt=s(jie);v8o=r(rnt,"distilbert"),rnt.forEach(t),F8o=r(Gye," \u2014 "),XN=n(Gye,"A",{href:!0});var tnt=s(XN);T8o=r(tnt,"DistilBertForSequenceClassification"),tnt.forEach(t),M8o=r(Gye," (DistilBERT model)"),Gye.forEach(t),E8o=i(L),D4=n(L,"LI",{});var Oye=s(D4);Die=n(Oye,"STRONG",{});var ant=s(Die);C8o=r(ant,"electra"),ant.forEach(t),w8o=r(Oye," \u2014 "),zN=n(Oye,"A",{href:!0});var nnt=s(zN);A8o=r(nnt,"ElectraForSequenceClassification"),nnt.forEach(t),y8o=r(Oye," (ELECTRA model)"),Oye.forEach(t),L8o=i(L),G4=n(L,"LI",{});var Vye=s(G4);Gie=n(Vye,"STRONG",{});var snt=s(Gie);x8o=r(snt,"flaubert"),snt.forEach(t),k8o=r(Vye," \u2014 "),QN=n(Vye,"A",{href:!0});var lnt=s(QN);S8o=r(lnt,"FlaubertForSequenceClassification"),lnt.forEach(t),R8o=r(Vye," (FlauBERT model)"),Vye.forEach(t),B8o=i(L),O4=n(L,"LI",{});var Xye=s(O4);Oie=n(Xye,"STRONG",{});var int=s(Oie);P8o=r(int,"fnet"),int.forEach(t),$8o=r(Xye," \u2014 "),WN=n(Xye,"A",{href:!0});var dnt=s(WN);I8o=r(dnt,"FNetForSequenceClassification"),dnt.forEach(t),q8o=r(Xye," (FNet model)"),Xye.forEach(t),N8o=i(L),V4=n(L,"LI",{});var zye=s(V4);Vie=n(zye,"STRONG",{});var cnt=s(Vie);j8o=r(cnt,"funnel"),cnt.forEach(t),D8o=r(zye," \u2014 "),HN=n(zye,"A",{href:!0});var fnt=s(HN);G8o=r(fnt,"FunnelForSequenceClassification"),fnt.forEach(t),O8o=r(zye," (Funnel Transformer model)"),zye.forEach(t),V8o=i(L),X4=n(L,"LI",{});var Qye=s(X4);Xie=n(Qye,"STRONG",{});var mnt=s(Xie);X8o=r(mnt,"gpt2"),mnt.forEach(t),z8o=r(Qye," \u2014 "),UN=n(Qye,"A",{href:!0});var gnt=s(UN);Q8o=r(gnt,"GPT2ForSequenceClassification"),gnt.forEach(t),W8o=r(Qye," (OpenAI GPT-2 model)"),Qye.forEach(t),H8o=i(L),z4=n(L,"LI",{});var Wye=s(z4);zie=n(Wye,"STRONG",{});var hnt=s(zie);U8o=r(hnt,"gpt_neo"),hnt.forEach(t),J8o=r(Wye," \u2014 "),JN=n(Wye,"A",{href:!0});var pnt=s(JN);Y8o=r(pnt,"GPTNeoForSequenceClassification"),pnt.forEach(t),K8o=r(Wye," (GPT Neo model)"),Wye.forEach(t),Z8o=i(L),Q4=n(L,"LI",{});var Hye=s(Q4);Qie=n(Hye,"STRONG",{});var _nt=s(Qie);eLo=r(_nt,"gptj"),_nt.forEach(t),oLo=r(Hye," \u2014 "),YN=n(Hye,"A",{href:!0});var unt=s(YN);rLo=r(unt,"GPTJForSequenceClassification"),unt.forEach(t),tLo=r(Hye," (GPT-J model)"),Hye.forEach(t),aLo=i(L),W4=n(L,"LI",{});var Uye=s(W4);Wie=n(Uye,"STRONG",{});var bnt=s(Wie);nLo=r(bnt,"ibert"),bnt.forEach(t),sLo=r(Uye," \u2014 "),KN=n(Uye,"A",{href:!0});var vnt=s(KN);lLo=r(vnt,"IBertForSequenceClassification"),vnt.forEach(t),iLo=r(Uye," (I-BERT model)"),Uye.forEach(t),dLo=i(L),H4=n(L,"LI",{});var Jye=s(H4);Hie=n(Jye,"STRONG",{});var Fnt=s(Hie);cLo=r(Fnt,"layoutlm"),Fnt.forEach(t),fLo=r(Jye," \u2014 "),ZN=n(Jye,"A",{href:!0});var Tnt=s(ZN);mLo=r(Tnt,"LayoutLMForSequenceClassification"),Tnt.forEach(t),gLo=r(Jye," (LayoutLM model)"),Jye.forEach(t),hLo=i(L),U4=n(L,"LI",{});var Yye=s(U4);Uie=n(Yye,"STRONG",{});var Mnt=s(Uie);pLo=r(Mnt,"layoutlmv2"),Mnt.forEach(t),_Lo=r(Yye," \u2014 "),ej=n(Yye,"A",{href:!0});var Ent=s(ej);uLo=r(Ent,"LayoutLMv2ForSequenceClassification"),Ent.forEach(t),bLo=r(Yye," (LayoutLMv2 model)"),Yye.forEach(t),vLo=i(L),J4=n(L,"LI",{});var Kye=s(J4);Jie=n(Kye,"STRONG",{});var Cnt=s(Jie);FLo=r(Cnt,"led"),Cnt.forEach(t),TLo=r(Kye," \u2014 "),oj=n(Kye,"A",{href:!0});var wnt=s(oj);MLo=r(wnt,"LEDForSequenceClassification"),wnt.forEach(t),ELo=r(Kye," (LED model)"),Kye.forEach(t),CLo=i(L),Y4=n(L,"LI",{});var Zye=s(Y4);Yie=n(Zye,"STRONG",{});var Ant=s(Yie);wLo=r(Ant,"longformer"),Ant.forEach(t),ALo=r(Zye," \u2014 "),rj=n(Zye,"A",{href:!0});var ynt=s(rj);yLo=r(ynt,"LongformerForSequenceClassification"),ynt.forEach(t),LLo=r(Zye," (Longformer model)"),Zye.forEach(t),xLo=i(L),K4=n(L,"LI",{});var e8e=s(K4);Kie=n(e8e,"STRONG",{});var Lnt=s(Kie);kLo=r(Lnt,"mbart"),Lnt.forEach(t),SLo=r(e8e," \u2014 "),tj=n(e8e,"A",{href:!0});var xnt=s(tj);RLo=r(xnt,"MBartForSequenceClassification"),xnt.forEach(t),BLo=r(e8e," (mBART model)"),e8e.forEach(t),PLo=i(L),Z4=n(L,"LI",{});var o8e=s(Z4);Zie=n(o8e,"STRONG",{});var knt=s(Zie);$Lo=r(knt,"megatron-bert"),knt.forEach(t),ILo=r(o8e," \u2014 "),aj=n(o8e,"A",{href:!0});var Snt=s(aj);qLo=r(Snt,"MegatronBertForSequenceClassification"),Snt.forEach(t),NLo=r(o8e," (MegatronBert model)"),o8e.forEach(t),jLo=i(L),eb=n(L,"LI",{});var r8e=s(eb);ede=n(r8e,"STRONG",{});var Rnt=s(ede);DLo=r(Rnt,"mobilebert"),Rnt.forEach(t),GLo=r(r8e," \u2014 "),nj=n(r8e,"A",{href:!0});var Bnt=s(nj);OLo=r(Bnt,"MobileBertForSequenceClassification"),Bnt.forEach(t),VLo=r(r8e," (MobileBERT model)"),r8e.forEach(t),XLo=i(L),ob=n(L,"LI",{});var t8e=s(ob);ode=n(t8e,"STRONG",{});var Pnt=s(ode);zLo=r(Pnt,"mpnet"),Pnt.forEach(t),QLo=r(t8e," \u2014 "),sj=n(t8e,"A",{href:!0});var $nt=s(sj);WLo=r($nt,"MPNetForSequenceClassification"),$nt.forEach(t),HLo=r(t8e," (MPNet model)"),t8e.forEach(t),ULo=i(L),rb=n(L,"LI",{});var a8e=s(rb);rde=n(a8e,"STRONG",{});var Int=s(rde);JLo=r(Int,"nystromformer"),Int.forEach(t),YLo=r(a8e," \u2014 "),lj=n(a8e,"A",{href:!0});var qnt=s(lj);KLo=r(qnt,"NystromformerForSequenceClassification"),qnt.forEach(t),ZLo=r(a8e," (Nystromformer model)"),a8e.forEach(t),e7o=i(L),tb=n(L,"LI",{});var n8e=s(tb);tde=n(n8e,"STRONG",{});var Nnt=s(tde);o7o=r(Nnt,"openai-gpt"),Nnt.forEach(t),r7o=r(n8e," \u2014 "),ij=n(n8e,"A",{href:!0});var jnt=s(ij);t7o=r(jnt,"OpenAIGPTForSequenceClassification"),jnt.forEach(t),a7o=r(n8e," (OpenAI GPT model)"),n8e.forEach(t),n7o=i(L),ab=n(L,"LI",{});var s8e=s(ab);ade=n(s8e,"STRONG",{});var Dnt=s(ade);s7o=r(Dnt,"perceiver"),Dnt.forEach(t),l7o=r(s8e," \u2014 "),dj=n(s8e,"A",{href:!0});var Gnt=s(dj);i7o=r(Gnt,"PerceiverForSequenceClassification"),Gnt.forEach(t),d7o=r(s8e," (Perceiver model)"),s8e.forEach(t),c7o=i(L),nb=n(L,"LI",{});var l8e=s(nb);nde=n(l8e,"STRONG",{});var Ont=s(nde);f7o=r(Ont,"plbart"),Ont.forEach(t),m7o=r(l8e," \u2014 "),cj=n(l8e,"A",{href:!0});var Vnt=s(cj);g7o=r(Vnt,"PLBartForSequenceClassification"),Vnt.forEach(t),h7o=r(l8e," (PLBart model)"),l8e.forEach(t),p7o=i(L),sb=n(L,"LI",{});var i8e=s(sb);sde=n(i8e,"STRONG",{});var Xnt=s(sde);_7o=r(Xnt,"qdqbert"),Xnt.forEach(t),u7o=r(i8e," \u2014 "),fj=n(i8e,"A",{href:!0});var znt=s(fj);b7o=r(znt,"QDQBertForSequenceClassification"),znt.forEach(t),v7o=r(i8e," (QDQBert model)"),i8e.forEach(t),F7o=i(L),lb=n(L,"LI",{});var d8e=s(lb);lde=n(d8e,"STRONG",{});var Qnt=s(lde);T7o=r(Qnt,"reformer"),Qnt.forEach(t),M7o=r(d8e," \u2014 "),mj=n(d8e,"A",{href:!0});var Wnt=s(mj);E7o=r(Wnt,"ReformerForSequenceClassification"),Wnt.forEach(t),C7o=r(d8e," (Reformer model)"),d8e.forEach(t),w7o=i(L),ib=n(L,"LI",{});var c8e=s(ib);ide=n(c8e,"STRONG",{});var Hnt=s(ide);A7o=r(Hnt,"rembert"),Hnt.forEach(t),y7o=r(c8e," \u2014 "),gj=n(c8e,"A",{href:!0});var Unt=s(gj);L7o=r(Unt,"RemBertForSequenceClassification"),Unt.forEach(t),x7o=r(c8e," (RemBERT model)"),c8e.forEach(t),k7o=i(L),db=n(L,"LI",{});var f8e=s(db);dde=n(f8e,"STRONG",{});var Jnt=s(dde);S7o=r(Jnt,"roberta"),Jnt.forEach(t),R7o=r(f8e," \u2014 "),hj=n(f8e,"A",{href:!0});var Ynt=s(hj);B7o=r(Ynt,"RobertaForSequenceClassification"),Ynt.forEach(t),P7o=r(f8e," (RoBERTa model)"),f8e.forEach(t),$7o=i(L),cb=n(L,"LI",{});var m8e=s(cb);cde=n(m8e,"STRONG",{});var Knt=s(cde);I7o=r(Knt,"roformer"),Knt.forEach(t),q7o=r(m8e," \u2014 "),pj=n(m8e,"A",{href:!0});var Znt=s(pj);N7o=r(Znt,"RoFormerForSequenceClassification"),Znt.forEach(t),j7o=r(m8e," (RoFormer model)"),m8e.forEach(t),D7o=i(L),fb=n(L,"LI",{});var g8e=s(fb);fde=n(g8e,"STRONG",{});var est=s(fde);G7o=r(est,"squeezebert"),est.forEach(t),O7o=r(g8e," \u2014 "),_j=n(g8e,"A",{href:!0});var ost=s(_j);V7o=r(ost,"SqueezeBertForSequenceClassification"),ost.forEach(t),X7o=r(g8e," (SqueezeBERT model)"),g8e.forEach(t),z7o=i(L),mb=n(L,"LI",{});var h8e=s(mb);mde=n(h8e,"STRONG",{});var rst=s(mde);Q7o=r(rst,"tapas"),rst.forEach(t),W7o=r(h8e," \u2014 "),uj=n(h8e,"A",{href:!0});var tst=s(uj);H7o=r(tst,"TapasForSequenceClassification"),tst.forEach(t),U7o=r(h8e," (TAPAS model)"),h8e.forEach(t),J7o=i(L),gb=n(L,"LI",{});var p8e=s(gb);gde=n(p8e,"STRONG",{});var ast=s(gde);Y7o=r(ast,"tapex"),ast.forEach(t),K7o=r(p8e," \u2014 "),bj=n(p8e,"A",{href:!0});var nst=s(bj);Z7o=r(nst,"BartForSequenceClassification"),nst.forEach(t),e9o=r(p8e," (TAPEX model)"),p8e.forEach(t),o9o=i(L),hb=n(L,"LI",{});var _8e=s(hb);hde=n(_8e,"STRONG",{});var sst=s(hde);r9o=r(sst,"transfo-xl"),sst.forEach(t),t9o=r(_8e," \u2014 "),vj=n(_8e,"A",{href:!0});var lst=s(vj);a9o=r(lst,"TransfoXLForSequenceClassification"),lst.forEach(t),n9o=r(_8e," (Transformer-XL model)"),_8e.forEach(t),s9o=i(L),pb=n(L,"LI",{});var u8e=s(pb);pde=n(u8e,"STRONG",{});var ist=s(pde);l9o=r(ist,"xlm"),ist.forEach(t),i9o=r(u8e," \u2014 "),Fj=n(u8e,"A",{href:!0});var dst=s(Fj);d9o=r(dst,"XLMForSequenceClassification"),dst.forEach(t),c9o=r(u8e," (XLM model)"),u8e.forEach(t),f9o=i(L),_b=n(L,"LI",{});var b8e=s(_b);_de=n(b8e,"STRONG",{});var cst=s(_de);m9o=r(cst,"xlm-roberta"),cst.forEach(t),g9o=r(b8e," \u2014 "),Tj=n(b8e,"A",{href:!0});var fst=s(Tj);h9o=r(fst,"XLMRobertaForSequenceClassification"),fst.forEach(t),p9o=r(b8e," (XLM-RoBERTa model)"),b8e.forEach(t),_9o=i(L),ub=n(L,"LI",{});var v8e=s(ub);ude=n(v8e,"STRONG",{});var mst=s(ude);u9o=r(mst,"xlm-roberta-xl"),mst.forEach(t),b9o=r(v8e," \u2014 "),Mj=n(v8e,"A",{href:!0});var gst=s(Mj);v9o=r(gst,"XLMRobertaXLForSequenceClassification"),gst.forEach(t),F9o=r(v8e," (XLM-RoBERTa-XL model)"),v8e.forEach(t),T9o=i(L),bb=n(L,"LI",{});var F8e=s(bb);bde=n(F8e,"STRONG",{});var hst=s(bde);M9o=r(hst,"xlnet"),hst.forEach(t),E9o=r(F8e," \u2014 "),Ej=n(F8e,"A",{href:!0});var pst=s(Ej);C9o=r(pst,"XLNetForSequenceClassification"),pst.forEach(t),w9o=r(F8e," (XLNet model)"),F8e.forEach(t),A9o=i(L),vb=n(L,"LI",{});var T8e=s(vb);vde=n(T8e,"STRONG",{});var _st=s(vde);y9o=r(_st,"yoso"),_st.forEach(t),L9o=r(T8e," \u2014 "),Cj=n(T8e,"A",{href:!0});var ust=s(Cj);x9o=r(ust,"YosoForSequenceClassification"),ust.forEach(t),k9o=r(T8e," (YOSO model)"),T8e.forEach(t),L.forEach(t),S9o=i(zt),Fb=n(zt,"P",{});var M8e=s(Fb);R9o=r(M8e,"The model is set in evaluation mode by default using "),Fde=n(M8e,"CODE",{});var bst=s(Fde);B9o=r(bst,"model.eval()"),bst.forEach(t),P9o=r(M8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tde=n(M8e,"CODE",{});var vst=s(Tde);$9o=r(vst,"model.train()"),vst.forEach(t),M8e.forEach(t),I9o=i(zt),Mde=n(zt,"P",{});var Fst=s(Mde);q9o=r(Fst,"Examples:"),Fst.forEach(t),N9o=i(zt),m(hA.$$.fragment,zt),zt.forEach(t),fl.forEach(t),RPe=i(c),Ed=n(c,"H2",{class:!0});var GIe=s(Ed);Tb=n(GIe,"A",{id:!0,class:!0,href:!0});var Tst=s(Tb);Ede=n(Tst,"SPAN",{});var Mst=s(Ede);m(pA.$$.fragment,Mst),Mst.forEach(t),Tst.forEach(t),j9o=i(GIe),Cde=n(GIe,"SPAN",{});var Est=s(Cde);D9o=r(Est,"AutoModelForMultipleChoice"),Est.forEach(t),GIe.forEach(t),BPe=i(c),rr=n(c,"DIV",{class:!0});var gl=s(rr);m(_A.$$.fragment,gl),G9o=i(gl),Cd=n(gl,"P",{});var RJ=s(Cd);O9o=r(RJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wj=n(RJ,"A",{href:!0});var Cst=s(wj);V9o=r(Cst,"from_pretrained()"),Cst.forEach(t),X9o=r(RJ," class method or the "),Aj=n(RJ,"A",{href:!0});var wst=s(Aj);z9o=r(wst,"from_config()"),wst.forEach(t),Q9o=r(RJ,` class
method.`),RJ.forEach(t),W9o=i(gl),uA=n(gl,"P",{});var OIe=s(uA);H9o=r(OIe,"This class cannot be instantiated directly using "),wde=n(OIe,"CODE",{});var Ast=s(wde);U9o=r(Ast,"__init__()"),Ast.forEach(t),J9o=r(OIe," (throws an error)."),OIe.forEach(t),Y9o=i(gl),Jr=n(gl,"DIV",{class:!0});var hl=s(Jr);m(bA.$$.fragment,hl),K9o=i(hl),Ade=n(hl,"P",{});var yst=s(Ade);Z9o=r(yst,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),yst.forEach(t),exo=i(hl),wd=n(hl,"P",{});var BJ=s(wd);oxo=r(BJ,`Note:
Loading a model from its configuration file does `),yde=n(BJ,"STRONG",{});var Lst=s(yde);rxo=r(Lst,"not"),Lst.forEach(t),txo=r(BJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yj=n(BJ,"A",{href:!0});var xst=s(yj);axo=r(xst,"from_pretrained()"),xst.forEach(t),nxo=r(BJ," to load the model weights."),BJ.forEach(t),sxo=i(hl),Lde=n(hl,"P",{});var kst=s(Lde);lxo=r(kst,"Examples:"),kst.forEach(t),ixo=i(hl),m(vA.$$.fragment,hl),hl.forEach(t),dxo=i(gl),Xe=n(gl,"DIV",{class:!0});var Qt=s(Xe);m(FA.$$.fragment,Qt),cxo=i(Qt),xde=n(Qt,"P",{});var Sst=s(xde);fxo=r(Sst,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Sst.forEach(t),mxo=i(Qt),Ja=n(Qt,"P",{});var rC=s(Ja);gxo=r(rC,"The model class to instantiate is selected based on the "),kde=n(rC,"CODE",{});var Rst=s(kde);hxo=r(Rst,"model_type"),Rst.forEach(t),pxo=r(rC,` property of the config object (either
passed as an argument or loaded from `),Sde=n(rC,"CODE",{});var Bst=s(Sde);_xo=r(Bst,"pretrained_model_name_or_path"),Bst.forEach(t),uxo=r(rC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rde=n(rC,"CODE",{});var Pst=s(Rde);bxo=r(Pst,"pretrained_model_name_or_path"),Pst.forEach(t),vxo=r(rC,":"),rC.forEach(t),Fxo=i(Qt),G=n(Qt,"UL",{});var O=s(G);Mb=n(O,"LI",{});var E8e=s(Mb);Bde=n(E8e,"STRONG",{});var $st=s(Bde);Txo=r($st,"albert"),$st.forEach(t),Mxo=r(E8e," \u2014 "),Lj=n(E8e,"A",{href:!0});var Ist=s(Lj);Exo=r(Ist,"AlbertForMultipleChoice"),Ist.forEach(t),Cxo=r(E8e," (ALBERT model)"),E8e.forEach(t),wxo=i(O),Eb=n(O,"LI",{});var C8e=s(Eb);Pde=n(C8e,"STRONG",{});var qst=s(Pde);Axo=r(qst,"bert"),qst.forEach(t),yxo=r(C8e," \u2014 "),xj=n(C8e,"A",{href:!0});var Nst=s(xj);Lxo=r(Nst,"BertForMultipleChoice"),Nst.forEach(t),xxo=r(C8e," (BERT model)"),C8e.forEach(t),kxo=i(O),Cb=n(O,"LI",{});var w8e=s(Cb);$de=n(w8e,"STRONG",{});var jst=s($de);Sxo=r(jst,"big_bird"),jst.forEach(t),Rxo=r(w8e," \u2014 "),kj=n(w8e,"A",{href:!0});var Dst=s(kj);Bxo=r(Dst,"BigBirdForMultipleChoice"),Dst.forEach(t),Pxo=r(w8e," (BigBird model)"),w8e.forEach(t),$xo=i(O),wb=n(O,"LI",{});var A8e=s(wb);Ide=n(A8e,"STRONG",{});var Gst=s(Ide);Ixo=r(Gst,"camembert"),Gst.forEach(t),qxo=r(A8e," \u2014 "),Sj=n(A8e,"A",{href:!0});var Ost=s(Sj);Nxo=r(Ost,"CamembertForMultipleChoice"),Ost.forEach(t),jxo=r(A8e," (CamemBERT model)"),A8e.forEach(t),Dxo=i(O),Ab=n(O,"LI",{});var y8e=s(Ab);qde=n(y8e,"STRONG",{});var Vst=s(qde);Gxo=r(Vst,"canine"),Vst.forEach(t),Oxo=r(y8e," \u2014 "),Rj=n(y8e,"A",{href:!0});var Xst=s(Rj);Vxo=r(Xst,"CanineForMultipleChoice"),Xst.forEach(t),Xxo=r(y8e," (Canine model)"),y8e.forEach(t),zxo=i(O),yb=n(O,"LI",{});var L8e=s(yb);Nde=n(L8e,"STRONG",{});var zst=s(Nde);Qxo=r(zst,"convbert"),zst.forEach(t),Wxo=r(L8e," \u2014 "),Bj=n(L8e,"A",{href:!0});var Qst=s(Bj);Hxo=r(Qst,"ConvBertForMultipleChoice"),Qst.forEach(t),Uxo=r(L8e," (ConvBERT model)"),L8e.forEach(t),Jxo=i(O),Lb=n(O,"LI",{});var x8e=s(Lb);jde=n(x8e,"STRONG",{});var Wst=s(jde);Yxo=r(Wst,"data2vec-text"),Wst.forEach(t),Kxo=r(x8e," \u2014 "),Pj=n(x8e,"A",{href:!0});var Hst=s(Pj);Zxo=r(Hst,"Data2VecTextForMultipleChoice"),Hst.forEach(t),eko=r(x8e," (Data2VecText model)"),x8e.forEach(t),oko=i(O),xb=n(O,"LI",{});var k8e=s(xb);Dde=n(k8e,"STRONG",{});var Ust=s(Dde);rko=r(Ust,"distilbert"),Ust.forEach(t),tko=r(k8e," \u2014 "),$j=n(k8e,"A",{href:!0});var Jst=s($j);ako=r(Jst,"DistilBertForMultipleChoice"),Jst.forEach(t),nko=r(k8e," (DistilBERT model)"),k8e.forEach(t),sko=i(O),kb=n(O,"LI",{});var S8e=s(kb);Gde=n(S8e,"STRONG",{});var Yst=s(Gde);lko=r(Yst,"electra"),Yst.forEach(t),iko=r(S8e," \u2014 "),Ij=n(S8e,"A",{href:!0});var Kst=s(Ij);dko=r(Kst,"ElectraForMultipleChoice"),Kst.forEach(t),cko=r(S8e," (ELECTRA model)"),S8e.forEach(t),fko=i(O),Sb=n(O,"LI",{});var R8e=s(Sb);Ode=n(R8e,"STRONG",{});var Zst=s(Ode);mko=r(Zst,"flaubert"),Zst.forEach(t),gko=r(R8e," \u2014 "),qj=n(R8e,"A",{href:!0});var elt=s(qj);hko=r(elt,"FlaubertForMultipleChoice"),elt.forEach(t),pko=r(R8e," (FlauBERT model)"),R8e.forEach(t),_ko=i(O),Rb=n(O,"LI",{});var B8e=s(Rb);Vde=n(B8e,"STRONG",{});var olt=s(Vde);uko=r(olt,"fnet"),olt.forEach(t),bko=r(B8e," \u2014 "),Nj=n(B8e,"A",{href:!0});var rlt=s(Nj);vko=r(rlt,"FNetForMultipleChoice"),rlt.forEach(t),Fko=r(B8e," (FNet model)"),B8e.forEach(t),Tko=i(O),Bb=n(O,"LI",{});var P8e=s(Bb);Xde=n(P8e,"STRONG",{});var tlt=s(Xde);Mko=r(tlt,"funnel"),tlt.forEach(t),Eko=r(P8e," \u2014 "),jj=n(P8e,"A",{href:!0});var alt=s(jj);Cko=r(alt,"FunnelForMultipleChoice"),alt.forEach(t),wko=r(P8e," (Funnel Transformer model)"),P8e.forEach(t),Ako=i(O),Pb=n(O,"LI",{});var $8e=s(Pb);zde=n($8e,"STRONG",{});var nlt=s(zde);yko=r(nlt,"ibert"),nlt.forEach(t),Lko=r($8e," \u2014 "),Dj=n($8e,"A",{href:!0});var slt=s(Dj);xko=r(slt,"IBertForMultipleChoice"),slt.forEach(t),kko=r($8e," (I-BERT model)"),$8e.forEach(t),Sko=i(O),$b=n(O,"LI",{});var I8e=s($b);Qde=n(I8e,"STRONG",{});var llt=s(Qde);Rko=r(llt,"longformer"),llt.forEach(t),Bko=r(I8e," \u2014 "),Gj=n(I8e,"A",{href:!0});var ilt=s(Gj);Pko=r(ilt,"LongformerForMultipleChoice"),ilt.forEach(t),$ko=r(I8e," (Longformer model)"),I8e.forEach(t),Iko=i(O),Ib=n(O,"LI",{});var q8e=s(Ib);Wde=n(q8e,"STRONG",{});var dlt=s(Wde);qko=r(dlt,"megatron-bert"),dlt.forEach(t),Nko=r(q8e," \u2014 "),Oj=n(q8e,"A",{href:!0});var clt=s(Oj);jko=r(clt,"MegatronBertForMultipleChoice"),clt.forEach(t),Dko=r(q8e," (MegatronBert model)"),q8e.forEach(t),Gko=i(O),qb=n(O,"LI",{});var N8e=s(qb);Hde=n(N8e,"STRONG",{});var flt=s(Hde);Oko=r(flt,"mobilebert"),flt.forEach(t),Vko=r(N8e," \u2014 "),Vj=n(N8e,"A",{href:!0});var mlt=s(Vj);Xko=r(mlt,"MobileBertForMultipleChoice"),mlt.forEach(t),zko=r(N8e," (MobileBERT model)"),N8e.forEach(t),Qko=i(O),Nb=n(O,"LI",{});var j8e=s(Nb);Ude=n(j8e,"STRONG",{});var glt=s(Ude);Wko=r(glt,"mpnet"),glt.forEach(t),Hko=r(j8e," \u2014 "),Xj=n(j8e,"A",{href:!0});var hlt=s(Xj);Uko=r(hlt,"MPNetForMultipleChoice"),hlt.forEach(t),Jko=r(j8e," (MPNet model)"),j8e.forEach(t),Yko=i(O),jb=n(O,"LI",{});var D8e=s(jb);Jde=n(D8e,"STRONG",{});var plt=s(Jde);Kko=r(plt,"nystromformer"),plt.forEach(t),Zko=r(D8e," \u2014 "),zj=n(D8e,"A",{href:!0});var _lt=s(zj);eSo=r(_lt,"NystromformerForMultipleChoice"),_lt.forEach(t),oSo=r(D8e," (Nystromformer model)"),D8e.forEach(t),rSo=i(O),Db=n(O,"LI",{});var G8e=s(Db);Yde=n(G8e,"STRONG",{});var ult=s(Yde);tSo=r(ult,"qdqbert"),ult.forEach(t),aSo=r(G8e," \u2014 "),Qj=n(G8e,"A",{href:!0});var blt=s(Qj);nSo=r(blt,"QDQBertForMultipleChoice"),blt.forEach(t),sSo=r(G8e," (QDQBert model)"),G8e.forEach(t),lSo=i(O),Gb=n(O,"LI",{});var O8e=s(Gb);Kde=n(O8e,"STRONG",{});var vlt=s(Kde);iSo=r(vlt,"rembert"),vlt.forEach(t),dSo=r(O8e," \u2014 "),Wj=n(O8e,"A",{href:!0});var Flt=s(Wj);cSo=r(Flt,"RemBertForMultipleChoice"),Flt.forEach(t),fSo=r(O8e," (RemBERT model)"),O8e.forEach(t),mSo=i(O),Ob=n(O,"LI",{});var V8e=s(Ob);Zde=n(V8e,"STRONG",{});var Tlt=s(Zde);gSo=r(Tlt,"roberta"),Tlt.forEach(t),hSo=r(V8e," \u2014 "),Hj=n(V8e,"A",{href:!0});var Mlt=s(Hj);pSo=r(Mlt,"RobertaForMultipleChoice"),Mlt.forEach(t),_So=r(V8e," (RoBERTa model)"),V8e.forEach(t),uSo=i(O),Vb=n(O,"LI",{});var X8e=s(Vb);ece=n(X8e,"STRONG",{});var Elt=s(ece);bSo=r(Elt,"roformer"),Elt.forEach(t),vSo=r(X8e," \u2014 "),Uj=n(X8e,"A",{href:!0});var Clt=s(Uj);FSo=r(Clt,"RoFormerForMultipleChoice"),Clt.forEach(t),TSo=r(X8e," (RoFormer model)"),X8e.forEach(t),MSo=i(O),Xb=n(O,"LI",{});var z8e=s(Xb);oce=n(z8e,"STRONG",{});var wlt=s(oce);ESo=r(wlt,"squeezebert"),wlt.forEach(t),CSo=r(z8e," \u2014 "),Jj=n(z8e,"A",{href:!0});var Alt=s(Jj);wSo=r(Alt,"SqueezeBertForMultipleChoice"),Alt.forEach(t),ASo=r(z8e," (SqueezeBERT model)"),z8e.forEach(t),ySo=i(O),zb=n(O,"LI",{});var Q8e=s(zb);rce=n(Q8e,"STRONG",{});var ylt=s(rce);LSo=r(ylt,"xlm"),ylt.forEach(t),xSo=r(Q8e," \u2014 "),Yj=n(Q8e,"A",{href:!0});var Llt=s(Yj);kSo=r(Llt,"XLMForMultipleChoice"),Llt.forEach(t),SSo=r(Q8e," (XLM model)"),Q8e.forEach(t),RSo=i(O),Qb=n(O,"LI",{});var W8e=s(Qb);tce=n(W8e,"STRONG",{});var xlt=s(tce);BSo=r(xlt,"xlm-roberta"),xlt.forEach(t),PSo=r(W8e," \u2014 "),Kj=n(W8e,"A",{href:!0});var klt=s(Kj);$So=r(klt,"XLMRobertaForMultipleChoice"),klt.forEach(t),ISo=r(W8e," (XLM-RoBERTa model)"),W8e.forEach(t),qSo=i(O),Wb=n(O,"LI",{});var H8e=s(Wb);ace=n(H8e,"STRONG",{});var Slt=s(ace);NSo=r(Slt,"xlm-roberta-xl"),Slt.forEach(t),jSo=r(H8e," \u2014 "),Zj=n(H8e,"A",{href:!0});var Rlt=s(Zj);DSo=r(Rlt,"XLMRobertaXLForMultipleChoice"),Rlt.forEach(t),GSo=r(H8e," (XLM-RoBERTa-XL model)"),H8e.forEach(t),OSo=i(O),Hb=n(O,"LI",{});var U8e=s(Hb);nce=n(U8e,"STRONG",{});var Blt=s(nce);VSo=r(Blt,"xlnet"),Blt.forEach(t),XSo=r(U8e," \u2014 "),eD=n(U8e,"A",{href:!0});var Plt=s(eD);zSo=r(Plt,"XLNetForMultipleChoice"),Plt.forEach(t),QSo=r(U8e," (XLNet model)"),U8e.forEach(t),WSo=i(O),Ub=n(O,"LI",{});var J8e=s(Ub);sce=n(J8e,"STRONG",{});var $lt=s(sce);HSo=r($lt,"yoso"),$lt.forEach(t),USo=r(J8e," \u2014 "),oD=n(J8e,"A",{href:!0});var Ilt=s(oD);JSo=r(Ilt,"YosoForMultipleChoice"),Ilt.forEach(t),YSo=r(J8e," (YOSO model)"),J8e.forEach(t),O.forEach(t),KSo=i(Qt),Jb=n(Qt,"P",{});var Y8e=s(Jb);ZSo=r(Y8e,"The model is set in evaluation mode by default using "),lce=n(Y8e,"CODE",{});var qlt=s(lce);eRo=r(qlt,"model.eval()"),qlt.forEach(t),oRo=r(Y8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ice=n(Y8e,"CODE",{});var Nlt=s(ice);rRo=r(Nlt,"model.train()"),Nlt.forEach(t),Y8e.forEach(t),tRo=i(Qt),dce=n(Qt,"P",{});var jlt=s(dce);aRo=r(jlt,"Examples:"),jlt.forEach(t),nRo=i(Qt),m(TA.$$.fragment,Qt),Qt.forEach(t),gl.forEach(t),PPe=i(c),Ad=n(c,"H2",{class:!0});var VIe=s(Ad);Yb=n(VIe,"A",{id:!0,class:!0,href:!0});var Dlt=s(Yb);cce=n(Dlt,"SPAN",{});var Glt=s(cce);m(MA.$$.fragment,Glt),Glt.forEach(t),Dlt.forEach(t),sRo=i(VIe),fce=n(VIe,"SPAN",{});var Olt=s(fce);lRo=r(Olt,"AutoModelForNextSentencePrediction"),Olt.forEach(t),VIe.forEach(t),$Pe=i(c),tr=n(c,"DIV",{class:!0});var pl=s(tr);m(EA.$$.fragment,pl),iRo=i(pl),yd=n(pl,"P",{});var PJ=s(yd);dRo=r(PJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rD=n(PJ,"A",{href:!0});var Vlt=s(rD);cRo=r(Vlt,"from_pretrained()"),Vlt.forEach(t),fRo=r(PJ," class method or the "),tD=n(PJ,"A",{href:!0});var Xlt=s(tD);mRo=r(Xlt,"from_config()"),Xlt.forEach(t),gRo=r(PJ,` class
method.`),PJ.forEach(t),hRo=i(pl),CA=n(pl,"P",{});var XIe=s(CA);pRo=r(XIe,"This class cannot be instantiated directly using "),mce=n(XIe,"CODE",{});var zlt=s(mce);_Ro=r(zlt,"__init__()"),zlt.forEach(t),uRo=r(XIe," (throws an error)."),XIe.forEach(t),bRo=i(pl),Yr=n(pl,"DIV",{class:!0});var _l=s(Yr);m(wA.$$.fragment,_l),vRo=i(_l),gce=n(_l,"P",{});var Qlt=s(gce);FRo=r(Qlt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Qlt.forEach(t),TRo=i(_l),Ld=n(_l,"P",{});var $J=s(Ld);MRo=r($J,`Note:
Loading a model from its configuration file does `),hce=n($J,"STRONG",{});var Wlt=s(hce);ERo=r(Wlt,"not"),Wlt.forEach(t),CRo=r($J,` load the model weights. It only affects the
model\u2019s configuration. Use `),aD=n($J,"A",{href:!0});var Hlt=s(aD);wRo=r(Hlt,"from_pretrained()"),Hlt.forEach(t),ARo=r($J," to load the model weights."),$J.forEach(t),yRo=i(_l),pce=n(_l,"P",{});var Ult=s(pce);LRo=r(Ult,"Examples:"),Ult.forEach(t),xRo=i(_l),m(AA.$$.fragment,_l),_l.forEach(t),kRo=i(pl),ze=n(pl,"DIV",{class:!0});var Wt=s(ze);m(yA.$$.fragment,Wt),SRo=i(Wt),_ce=n(Wt,"P",{});var Jlt=s(_ce);RRo=r(Jlt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Jlt.forEach(t),BRo=i(Wt),Ya=n(Wt,"P",{});var tC=s(Ya);PRo=r(tC,"The model class to instantiate is selected based on the "),uce=n(tC,"CODE",{});var Ylt=s(uce);$Ro=r(Ylt,"model_type"),Ylt.forEach(t),IRo=r(tC,` property of the config object (either
passed as an argument or loaded from `),bce=n(tC,"CODE",{});var Klt=s(bce);qRo=r(Klt,"pretrained_model_name_or_path"),Klt.forEach(t),NRo=r(tC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vce=n(tC,"CODE",{});var Zlt=s(vce);jRo=r(Zlt,"pretrained_model_name_or_path"),Zlt.forEach(t),DRo=r(tC,":"),tC.forEach(t),GRo=i(Wt),da=n(Wt,"UL",{});var ul=s(da);Kb=n(ul,"LI",{});var K8e=s(Kb);Fce=n(K8e,"STRONG",{});var eit=s(Fce);ORo=r(eit,"bert"),eit.forEach(t),VRo=r(K8e," \u2014 "),nD=n(K8e,"A",{href:!0});var oit=s(nD);XRo=r(oit,"BertForNextSentencePrediction"),oit.forEach(t),zRo=r(K8e," (BERT model)"),K8e.forEach(t),QRo=i(ul),Zb=n(ul,"LI",{});var Z8e=s(Zb);Tce=n(Z8e,"STRONG",{});var rit=s(Tce);WRo=r(rit,"fnet"),rit.forEach(t),HRo=r(Z8e," \u2014 "),sD=n(Z8e,"A",{href:!0});var tit=s(sD);URo=r(tit,"FNetForNextSentencePrediction"),tit.forEach(t),JRo=r(Z8e," (FNet model)"),Z8e.forEach(t),YRo=i(ul),e2=n(ul,"LI",{});var eLe=s(e2);Mce=n(eLe,"STRONG",{});var ait=s(Mce);KRo=r(ait,"megatron-bert"),ait.forEach(t),ZRo=r(eLe," \u2014 "),lD=n(eLe,"A",{href:!0});var nit=s(lD);eBo=r(nit,"MegatronBertForNextSentencePrediction"),nit.forEach(t),oBo=r(eLe," (MegatronBert model)"),eLe.forEach(t),rBo=i(ul),o2=n(ul,"LI",{});var oLe=s(o2);Ece=n(oLe,"STRONG",{});var sit=s(Ece);tBo=r(sit,"mobilebert"),sit.forEach(t),aBo=r(oLe," \u2014 "),iD=n(oLe,"A",{href:!0});var lit=s(iD);nBo=r(lit,"MobileBertForNextSentencePrediction"),lit.forEach(t),sBo=r(oLe," (MobileBERT model)"),oLe.forEach(t),lBo=i(ul),r2=n(ul,"LI",{});var rLe=s(r2);Cce=n(rLe,"STRONG",{});var iit=s(Cce);iBo=r(iit,"qdqbert"),iit.forEach(t),dBo=r(rLe," \u2014 "),dD=n(rLe,"A",{href:!0});var dit=s(dD);cBo=r(dit,"QDQBertForNextSentencePrediction"),dit.forEach(t),fBo=r(rLe," (QDQBert model)"),rLe.forEach(t),ul.forEach(t),mBo=i(Wt),t2=n(Wt,"P",{});var tLe=s(t2);gBo=r(tLe,"The model is set in evaluation mode by default using "),wce=n(tLe,"CODE",{});var cit=s(wce);hBo=r(cit,"model.eval()"),cit.forEach(t),pBo=r(tLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ace=n(tLe,"CODE",{});var fit=s(Ace);_Bo=r(fit,"model.train()"),fit.forEach(t),tLe.forEach(t),uBo=i(Wt),yce=n(Wt,"P",{});var mit=s(yce);bBo=r(mit,"Examples:"),mit.forEach(t),vBo=i(Wt),m(LA.$$.fragment,Wt),Wt.forEach(t),pl.forEach(t),IPe=i(c),xd=n(c,"H2",{class:!0});var zIe=s(xd);a2=n(zIe,"A",{id:!0,class:!0,href:!0});var git=s(a2);Lce=n(git,"SPAN",{});var hit=s(Lce);m(xA.$$.fragment,hit),hit.forEach(t),git.forEach(t),FBo=i(zIe),xce=n(zIe,"SPAN",{});var pit=s(xce);TBo=r(pit,"AutoModelForTokenClassification"),pit.forEach(t),zIe.forEach(t),qPe=i(c),ar=n(c,"DIV",{class:!0});var bl=s(ar);m(kA.$$.fragment,bl),MBo=i(bl),kd=n(bl,"P",{});var IJ=s(kd);EBo=r(IJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cD=n(IJ,"A",{href:!0});var _it=s(cD);CBo=r(_it,"from_pretrained()"),_it.forEach(t),wBo=r(IJ," class method or the "),fD=n(IJ,"A",{href:!0});var uit=s(fD);ABo=r(uit,"from_config()"),uit.forEach(t),yBo=r(IJ,` class
method.`),IJ.forEach(t),LBo=i(bl),SA=n(bl,"P",{});var QIe=s(SA);xBo=r(QIe,"This class cannot be instantiated directly using "),kce=n(QIe,"CODE",{});var bit=s(kce);kBo=r(bit,"__init__()"),bit.forEach(t),SBo=r(QIe," (throws an error)."),QIe.forEach(t),RBo=i(bl),Kr=n(bl,"DIV",{class:!0});var vl=s(Kr);m(RA.$$.fragment,vl),BBo=i(vl),Sce=n(vl,"P",{});var vit=s(Sce);PBo=r(vit,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),vit.forEach(t),$Bo=i(vl),Sd=n(vl,"P",{});var qJ=s(Sd);IBo=r(qJ,`Note:
Loading a model from its configuration file does `),Rce=n(qJ,"STRONG",{});var Fit=s(Rce);qBo=r(Fit,"not"),Fit.forEach(t),NBo=r(qJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mD=n(qJ,"A",{href:!0});var Tit=s(mD);jBo=r(Tit,"from_pretrained()"),Tit.forEach(t),DBo=r(qJ," to load the model weights."),qJ.forEach(t),GBo=i(vl),Bce=n(vl,"P",{});var Mit=s(Bce);OBo=r(Mit,"Examples:"),Mit.forEach(t),VBo=i(vl),m(BA.$$.fragment,vl),vl.forEach(t),XBo=i(bl),Qe=n(bl,"DIV",{class:!0});var Ht=s(Qe);m(PA.$$.fragment,Ht),zBo=i(Ht),Pce=n(Ht,"P",{});var Eit=s(Pce);QBo=r(Eit,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Eit.forEach(t),WBo=i(Ht),Ka=n(Ht,"P",{});var aC=s(Ka);HBo=r(aC,"The model class to instantiate is selected based on the "),$ce=n(aC,"CODE",{});var Cit=s($ce);UBo=r(Cit,"model_type"),Cit.forEach(t),JBo=r(aC,` property of the config object (either
passed as an argument or loaded from `),Ice=n(aC,"CODE",{});var wit=s(Ice);YBo=r(wit,"pretrained_model_name_or_path"),wit.forEach(t),KBo=r(aC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qce=n(aC,"CODE",{});var Ait=s(qce);ZBo=r(Ait,"pretrained_model_name_or_path"),Ait.forEach(t),ePo=r(aC,":"),aC.forEach(t),oPo=i(Ht),j=n(Ht,"UL",{});var D=s(j);n2=n(D,"LI",{});var aLe=s(n2);Nce=n(aLe,"STRONG",{});var yit=s(Nce);rPo=r(yit,"albert"),yit.forEach(t),tPo=r(aLe," \u2014 "),gD=n(aLe,"A",{href:!0});var Lit=s(gD);aPo=r(Lit,"AlbertForTokenClassification"),Lit.forEach(t),nPo=r(aLe," (ALBERT model)"),aLe.forEach(t),sPo=i(D),s2=n(D,"LI",{});var nLe=s(s2);jce=n(nLe,"STRONG",{});var xit=s(jce);lPo=r(xit,"bert"),xit.forEach(t),iPo=r(nLe," \u2014 "),hD=n(nLe,"A",{href:!0});var kit=s(hD);dPo=r(kit,"BertForTokenClassification"),kit.forEach(t),cPo=r(nLe," (BERT model)"),nLe.forEach(t),fPo=i(D),l2=n(D,"LI",{});var sLe=s(l2);Dce=n(sLe,"STRONG",{});var Sit=s(Dce);mPo=r(Sit,"big_bird"),Sit.forEach(t),gPo=r(sLe," \u2014 "),pD=n(sLe,"A",{href:!0});var Rit=s(pD);hPo=r(Rit,"BigBirdForTokenClassification"),Rit.forEach(t),pPo=r(sLe," (BigBird model)"),sLe.forEach(t),_Po=i(D),i2=n(D,"LI",{});var lLe=s(i2);Gce=n(lLe,"STRONG",{});var Bit=s(Gce);uPo=r(Bit,"camembert"),Bit.forEach(t),bPo=r(lLe," \u2014 "),_D=n(lLe,"A",{href:!0});var Pit=s(_D);vPo=r(Pit,"CamembertForTokenClassification"),Pit.forEach(t),FPo=r(lLe," (CamemBERT model)"),lLe.forEach(t),TPo=i(D),d2=n(D,"LI",{});var iLe=s(d2);Oce=n(iLe,"STRONG",{});var $it=s(Oce);MPo=r($it,"canine"),$it.forEach(t),EPo=r(iLe," \u2014 "),uD=n(iLe,"A",{href:!0});var Iit=s(uD);CPo=r(Iit,"CanineForTokenClassification"),Iit.forEach(t),wPo=r(iLe," (Canine model)"),iLe.forEach(t),APo=i(D),c2=n(D,"LI",{});var dLe=s(c2);Vce=n(dLe,"STRONG",{});var qit=s(Vce);yPo=r(qit,"convbert"),qit.forEach(t),LPo=r(dLe," \u2014 "),bD=n(dLe,"A",{href:!0});var Nit=s(bD);xPo=r(Nit,"ConvBertForTokenClassification"),Nit.forEach(t),kPo=r(dLe," (ConvBERT model)"),dLe.forEach(t),SPo=i(D),f2=n(D,"LI",{});var cLe=s(f2);Xce=n(cLe,"STRONG",{});var jit=s(Xce);RPo=r(jit,"data2vec-text"),jit.forEach(t),BPo=r(cLe," \u2014 "),vD=n(cLe,"A",{href:!0});var Dit=s(vD);PPo=r(Dit,"Data2VecTextForTokenClassification"),Dit.forEach(t),$Po=r(cLe," (Data2VecText model)"),cLe.forEach(t),IPo=i(D),m2=n(D,"LI",{});var fLe=s(m2);zce=n(fLe,"STRONG",{});var Git=s(zce);qPo=r(Git,"deberta"),Git.forEach(t),NPo=r(fLe," \u2014 "),FD=n(fLe,"A",{href:!0});var Oit=s(FD);jPo=r(Oit,"DebertaForTokenClassification"),Oit.forEach(t),DPo=r(fLe," (DeBERTa model)"),fLe.forEach(t),GPo=i(D),g2=n(D,"LI",{});var mLe=s(g2);Qce=n(mLe,"STRONG",{});var Vit=s(Qce);OPo=r(Vit,"deberta-v2"),Vit.forEach(t),VPo=r(mLe," \u2014 "),TD=n(mLe,"A",{href:!0});var Xit=s(TD);XPo=r(Xit,"DebertaV2ForTokenClassification"),Xit.forEach(t),zPo=r(mLe," (DeBERTa-v2 model)"),mLe.forEach(t),QPo=i(D),h2=n(D,"LI",{});var gLe=s(h2);Wce=n(gLe,"STRONG",{});var zit=s(Wce);WPo=r(zit,"distilbert"),zit.forEach(t),HPo=r(gLe," \u2014 "),MD=n(gLe,"A",{href:!0});var Qit=s(MD);UPo=r(Qit,"DistilBertForTokenClassification"),Qit.forEach(t),JPo=r(gLe," (DistilBERT model)"),gLe.forEach(t),YPo=i(D),p2=n(D,"LI",{});var hLe=s(p2);Hce=n(hLe,"STRONG",{});var Wit=s(Hce);KPo=r(Wit,"electra"),Wit.forEach(t),ZPo=r(hLe," \u2014 "),ED=n(hLe,"A",{href:!0});var Hit=s(ED);e$o=r(Hit,"ElectraForTokenClassification"),Hit.forEach(t),o$o=r(hLe," (ELECTRA model)"),hLe.forEach(t),r$o=i(D),_2=n(D,"LI",{});var pLe=s(_2);Uce=n(pLe,"STRONG",{});var Uit=s(Uce);t$o=r(Uit,"flaubert"),Uit.forEach(t),a$o=r(pLe," \u2014 "),CD=n(pLe,"A",{href:!0});var Jit=s(CD);n$o=r(Jit,"FlaubertForTokenClassification"),Jit.forEach(t),s$o=r(pLe," (FlauBERT model)"),pLe.forEach(t),l$o=i(D),u2=n(D,"LI",{});var _Le=s(u2);Jce=n(_Le,"STRONG",{});var Yit=s(Jce);i$o=r(Yit,"fnet"),Yit.forEach(t),d$o=r(_Le," \u2014 "),wD=n(_Le,"A",{href:!0});var Kit=s(wD);c$o=r(Kit,"FNetForTokenClassification"),Kit.forEach(t),f$o=r(_Le," (FNet model)"),_Le.forEach(t),m$o=i(D),b2=n(D,"LI",{});var uLe=s(b2);Yce=n(uLe,"STRONG",{});var Zit=s(Yce);g$o=r(Zit,"funnel"),Zit.forEach(t),h$o=r(uLe," \u2014 "),AD=n(uLe,"A",{href:!0});var edt=s(AD);p$o=r(edt,"FunnelForTokenClassification"),edt.forEach(t),_$o=r(uLe," (Funnel Transformer model)"),uLe.forEach(t),u$o=i(D),v2=n(D,"LI",{});var bLe=s(v2);Kce=n(bLe,"STRONG",{});var odt=s(Kce);b$o=r(odt,"gpt2"),odt.forEach(t),v$o=r(bLe," \u2014 "),yD=n(bLe,"A",{href:!0});var rdt=s(yD);F$o=r(rdt,"GPT2ForTokenClassification"),rdt.forEach(t),T$o=r(bLe," (OpenAI GPT-2 model)"),bLe.forEach(t),M$o=i(D),F2=n(D,"LI",{});var vLe=s(F2);Zce=n(vLe,"STRONG",{});var tdt=s(Zce);E$o=r(tdt,"ibert"),tdt.forEach(t),C$o=r(vLe," \u2014 "),LD=n(vLe,"A",{href:!0});var adt=s(LD);w$o=r(adt,"IBertForTokenClassification"),adt.forEach(t),A$o=r(vLe," (I-BERT model)"),vLe.forEach(t),y$o=i(D),T2=n(D,"LI",{});var FLe=s(T2);efe=n(FLe,"STRONG",{});var ndt=s(efe);L$o=r(ndt,"layoutlm"),ndt.forEach(t),x$o=r(FLe," \u2014 "),xD=n(FLe,"A",{href:!0});var sdt=s(xD);k$o=r(sdt,"LayoutLMForTokenClassification"),sdt.forEach(t),S$o=r(FLe," (LayoutLM model)"),FLe.forEach(t),R$o=i(D),M2=n(D,"LI",{});var TLe=s(M2);ofe=n(TLe,"STRONG",{});var ldt=s(ofe);B$o=r(ldt,"layoutlmv2"),ldt.forEach(t),P$o=r(TLe," \u2014 "),kD=n(TLe,"A",{href:!0});var idt=s(kD);$$o=r(idt,"LayoutLMv2ForTokenClassification"),idt.forEach(t),I$o=r(TLe," (LayoutLMv2 model)"),TLe.forEach(t),q$o=i(D),E2=n(D,"LI",{});var MLe=s(E2);rfe=n(MLe,"STRONG",{});var ddt=s(rfe);N$o=r(ddt,"longformer"),ddt.forEach(t),j$o=r(MLe," \u2014 "),SD=n(MLe,"A",{href:!0});var cdt=s(SD);D$o=r(cdt,"LongformerForTokenClassification"),cdt.forEach(t),G$o=r(MLe," (Longformer model)"),MLe.forEach(t),O$o=i(D),C2=n(D,"LI",{});var ELe=s(C2);tfe=n(ELe,"STRONG",{});var fdt=s(tfe);V$o=r(fdt,"megatron-bert"),fdt.forEach(t),X$o=r(ELe," \u2014 "),RD=n(ELe,"A",{href:!0});var mdt=s(RD);z$o=r(mdt,"MegatronBertForTokenClassification"),mdt.forEach(t),Q$o=r(ELe," (MegatronBert model)"),ELe.forEach(t),W$o=i(D),w2=n(D,"LI",{});var CLe=s(w2);afe=n(CLe,"STRONG",{});var gdt=s(afe);H$o=r(gdt,"mobilebert"),gdt.forEach(t),U$o=r(CLe," \u2014 "),BD=n(CLe,"A",{href:!0});var hdt=s(BD);J$o=r(hdt,"MobileBertForTokenClassification"),hdt.forEach(t),Y$o=r(CLe," (MobileBERT model)"),CLe.forEach(t),K$o=i(D),A2=n(D,"LI",{});var wLe=s(A2);nfe=n(wLe,"STRONG",{});var pdt=s(nfe);Z$o=r(pdt,"mpnet"),pdt.forEach(t),eIo=r(wLe," \u2014 "),PD=n(wLe,"A",{href:!0});var _dt=s(PD);oIo=r(_dt,"MPNetForTokenClassification"),_dt.forEach(t),rIo=r(wLe," (MPNet model)"),wLe.forEach(t),tIo=i(D),y2=n(D,"LI",{});var ALe=s(y2);sfe=n(ALe,"STRONG",{});var udt=s(sfe);aIo=r(udt,"nystromformer"),udt.forEach(t),nIo=r(ALe," \u2014 "),$D=n(ALe,"A",{href:!0});var bdt=s($D);sIo=r(bdt,"NystromformerForTokenClassification"),bdt.forEach(t),lIo=r(ALe," (Nystromformer model)"),ALe.forEach(t),iIo=i(D),L2=n(D,"LI",{});var yLe=s(L2);lfe=n(yLe,"STRONG",{});var vdt=s(lfe);dIo=r(vdt,"qdqbert"),vdt.forEach(t),cIo=r(yLe," \u2014 "),ID=n(yLe,"A",{href:!0});var Fdt=s(ID);fIo=r(Fdt,"QDQBertForTokenClassification"),Fdt.forEach(t),mIo=r(yLe," (QDQBert model)"),yLe.forEach(t),gIo=i(D),x2=n(D,"LI",{});var LLe=s(x2);ife=n(LLe,"STRONG",{});var Tdt=s(ife);hIo=r(Tdt,"rembert"),Tdt.forEach(t),pIo=r(LLe," \u2014 "),qD=n(LLe,"A",{href:!0});var Mdt=s(qD);_Io=r(Mdt,"RemBertForTokenClassification"),Mdt.forEach(t),uIo=r(LLe," (RemBERT model)"),LLe.forEach(t),bIo=i(D),k2=n(D,"LI",{});var xLe=s(k2);dfe=n(xLe,"STRONG",{});var Edt=s(dfe);vIo=r(Edt,"roberta"),Edt.forEach(t),FIo=r(xLe," \u2014 "),ND=n(xLe,"A",{href:!0});var Cdt=s(ND);TIo=r(Cdt,"RobertaForTokenClassification"),Cdt.forEach(t),MIo=r(xLe," (RoBERTa model)"),xLe.forEach(t),EIo=i(D),S2=n(D,"LI",{});var kLe=s(S2);cfe=n(kLe,"STRONG",{});var wdt=s(cfe);CIo=r(wdt,"roformer"),wdt.forEach(t),wIo=r(kLe," \u2014 "),jD=n(kLe,"A",{href:!0});var Adt=s(jD);AIo=r(Adt,"RoFormerForTokenClassification"),Adt.forEach(t),yIo=r(kLe," (RoFormer model)"),kLe.forEach(t),LIo=i(D),R2=n(D,"LI",{});var SLe=s(R2);ffe=n(SLe,"STRONG",{});var ydt=s(ffe);xIo=r(ydt,"squeezebert"),ydt.forEach(t),kIo=r(SLe," \u2014 "),DD=n(SLe,"A",{href:!0});var Ldt=s(DD);SIo=r(Ldt,"SqueezeBertForTokenClassification"),Ldt.forEach(t),RIo=r(SLe," (SqueezeBERT model)"),SLe.forEach(t),BIo=i(D),B2=n(D,"LI",{});var RLe=s(B2);mfe=n(RLe,"STRONG",{});var xdt=s(mfe);PIo=r(xdt,"xlm"),xdt.forEach(t),$Io=r(RLe," \u2014 "),GD=n(RLe,"A",{href:!0});var kdt=s(GD);IIo=r(kdt,"XLMForTokenClassification"),kdt.forEach(t),qIo=r(RLe," (XLM model)"),RLe.forEach(t),NIo=i(D),P2=n(D,"LI",{});var BLe=s(P2);gfe=n(BLe,"STRONG",{});var Sdt=s(gfe);jIo=r(Sdt,"xlm-roberta"),Sdt.forEach(t),DIo=r(BLe," \u2014 "),OD=n(BLe,"A",{href:!0});var Rdt=s(OD);GIo=r(Rdt,"XLMRobertaForTokenClassification"),Rdt.forEach(t),OIo=r(BLe," (XLM-RoBERTa model)"),BLe.forEach(t),VIo=i(D),$2=n(D,"LI",{});var PLe=s($2);hfe=n(PLe,"STRONG",{});var Bdt=s(hfe);XIo=r(Bdt,"xlm-roberta-xl"),Bdt.forEach(t),zIo=r(PLe," \u2014 "),VD=n(PLe,"A",{href:!0});var Pdt=s(VD);QIo=r(Pdt,"XLMRobertaXLForTokenClassification"),Pdt.forEach(t),WIo=r(PLe," (XLM-RoBERTa-XL model)"),PLe.forEach(t),HIo=i(D),I2=n(D,"LI",{});var $Le=s(I2);pfe=n($Le,"STRONG",{});var $dt=s(pfe);UIo=r($dt,"xlnet"),$dt.forEach(t),JIo=r($Le," \u2014 "),XD=n($Le,"A",{href:!0});var Idt=s(XD);YIo=r(Idt,"XLNetForTokenClassification"),Idt.forEach(t),KIo=r($Le," (XLNet model)"),$Le.forEach(t),ZIo=i(D),q2=n(D,"LI",{});var ILe=s(q2);_fe=n(ILe,"STRONG",{});var qdt=s(_fe);eqo=r(qdt,"yoso"),qdt.forEach(t),oqo=r(ILe," \u2014 "),zD=n(ILe,"A",{href:!0});var Ndt=s(zD);rqo=r(Ndt,"YosoForTokenClassification"),Ndt.forEach(t),tqo=r(ILe," (YOSO model)"),ILe.forEach(t),D.forEach(t),aqo=i(Ht),N2=n(Ht,"P",{});var qLe=s(N2);nqo=r(qLe,"The model is set in evaluation mode by default using "),ufe=n(qLe,"CODE",{});var jdt=s(ufe);sqo=r(jdt,"model.eval()"),jdt.forEach(t),lqo=r(qLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bfe=n(qLe,"CODE",{});var Ddt=s(bfe);iqo=r(Ddt,"model.train()"),Ddt.forEach(t),qLe.forEach(t),dqo=i(Ht),vfe=n(Ht,"P",{});var Gdt=s(vfe);cqo=r(Gdt,"Examples:"),Gdt.forEach(t),fqo=i(Ht),m($A.$$.fragment,Ht),Ht.forEach(t),bl.forEach(t),NPe=i(c),Rd=n(c,"H2",{class:!0});var WIe=s(Rd);j2=n(WIe,"A",{id:!0,class:!0,href:!0});var Odt=s(j2);Ffe=n(Odt,"SPAN",{});var Vdt=s(Ffe);m(IA.$$.fragment,Vdt),Vdt.forEach(t),Odt.forEach(t),mqo=i(WIe),Tfe=n(WIe,"SPAN",{});var Xdt=s(Tfe);gqo=r(Xdt,"AutoModelForQuestionAnswering"),Xdt.forEach(t),WIe.forEach(t),jPe=i(c),nr=n(c,"DIV",{class:!0});var Fl=s(nr);m(qA.$$.fragment,Fl),hqo=i(Fl),Bd=n(Fl,"P",{});var NJ=s(Bd);pqo=r(NJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),QD=n(NJ,"A",{href:!0});var zdt=s(QD);_qo=r(zdt,"from_pretrained()"),zdt.forEach(t),uqo=r(NJ," class method or the "),WD=n(NJ,"A",{href:!0});var Qdt=s(WD);bqo=r(Qdt,"from_config()"),Qdt.forEach(t),vqo=r(NJ,` class
method.`),NJ.forEach(t),Fqo=i(Fl),NA=n(Fl,"P",{});var HIe=s(NA);Tqo=r(HIe,"This class cannot be instantiated directly using "),Mfe=n(HIe,"CODE",{});var Wdt=s(Mfe);Mqo=r(Wdt,"__init__()"),Wdt.forEach(t),Eqo=r(HIe," (throws an error)."),HIe.forEach(t),Cqo=i(Fl),Zr=n(Fl,"DIV",{class:!0});var Tl=s(Zr);m(jA.$$.fragment,Tl),wqo=i(Tl),Efe=n(Tl,"P",{});var Hdt=s(Efe);Aqo=r(Hdt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Hdt.forEach(t),yqo=i(Tl),Pd=n(Tl,"P",{});var jJ=s(Pd);Lqo=r(jJ,`Note:
Loading a model from its configuration file does `),Cfe=n(jJ,"STRONG",{});var Udt=s(Cfe);xqo=r(Udt,"not"),Udt.forEach(t),kqo=r(jJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HD=n(jJ,"A",{href:!0});var Jdt=s(HD);Sqo=r(Jdt,"from_pretrained()"),Jdt.forEach(t),Rqo=r(jJ," to load the model weights."),jJ.forEach(t),Bqo=i(Tl),wfe=n(Tl,"P",{});var Ydt=s(wfe);Pqo=r(Ydt,"Examples:"),Ydt.forEach(t),$qo=i(Tl),m(DA.$$.fragment,Tl),Tl.forEach(t),Iqo=i(Fl),We=n(Fl,"DIV",{class:!0});var Ut=s(We);m(GA.$$.fragment,Ut),qqo=i(Ut),Afe=n(Ut,"P",{});var Kdt=s(Afe);Nqo=r(Kdt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Kdt.forEach(t),jqo=i(Ut),Za=n(Ut,"P",{});var nC=s(Za);Dqo=r(nC,"The model class to instantiate is selected based on the "),yfe=n(nC,"CODE",{});var Zdt=s(yfe);Gqo=r(Zdt,"model_type"),Zdt.forEach(t),Oqo=r(nC,` property of the config object (either
passed as an argument or loaded from `),Lfe=n(nC,"CODE",{});var ect=s(Lfe);Vqo=r(ect,"pretrained_model_name_or_path"),ect.forEach(t),Xqo=r(nC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xfe=n(nC,"CODE",{});var oct=s(xfe);zqo=r(oct,"pretrained_model_name_or_path"),oct.forEach(t),Qqo=r(nC,":"),nC.forEach(t),Wqo=i(Ut),R=n(Ut,"UL",{});var P=s(R);D2=n(P,"LI",{});var NLe=s(D2);kfe=n(NLe,"STRONG",{});var rct=s(kfe);Hqo=r(rct,"albert"),rct.forEach(t),Uqo=r(NLe," \u2014 "),UD=n(NLe,"A",{href:!0});var tct=s(UD);Jqo=r(tct,"AlbertForQuestionAnswering"),tct.forEach(t),Yqo=r(NLe," (ALBERT model)"),NLe.forEach(t),Kqo=i(P),G2=n(P,"LI",{});var jLe=s(G2);Sfe=n(jLe,"STRONG",{});var act=s(Sfe);Zqo=r(act,"bart"),act.forEach(t),eNo=r(jLe," \u2014 "),JD=n(jLe,"A",{href:!0});var nct=s(JD);oNo=r(nct,"BartForQuestionAnswering"),nct.forEach(t),rNo=r(jLe," (BART model)"),jLe.forEach(t),tNo=i(P),O2=n(P,"LI",{});var DLe=s(O2);Rfe=n(DLe,"STRONG",{});var sct=s(Rfe);aNo=r(sct,"bert"),sct.forEach(t),nNo=r(DLe," \u2014 "),YD=n(DLe,"A",{href:!0});var lct=s(YD);sNo=r(lct,"BertForQuestionAnswering"),lct.forEach(t),lNo=r(DLe," (BERT model)"),DLe.forEach(t),iNo=i(P),V2=n(P,"LI",{});var GLe=s(V2);Bfe=n(GLe,"STRONG",{});var ict=s(Bfe);dNo=r(ict,"big_bird"),ict.forEach(t),cNo=r(GLe," \u2014 "),KD=n(GLe,"A",{href:!0});var dct=s(KD);fNo=r(dct,"BigBirdForQuestionAnswering"),dct.forEach(t),mNo=r(GLe," (BigBird model)"),GLe.forEach(t),gNo=i(P),X2=n(P,"LI",{});var OLe=s(X2);Pfe=n(OLe,"STRONG",{});var cct=s(Pfe);hNo=r(cct,"bigbird_pegasus"),cct.forEach(t),pNo=r(OLe," \u2014 "),ZD=n(OLe,"A",{href:!0});var fct=s(ZD);_No=r(fct,"BigBirdPegasusForQuestionAnswering"),fct.forEach(t),uNo=r(OLe," (BigBirdPegasus model)"),OLe.forEach(t),bNo=i(P),z2=n(P,"LI",{});var VLe=s(z2);$fe=n(VLe,"STRONG",{});var mct=s($fe);vNo=r(mct,"camembert"),mct.forEach(t),FNo=r(VLe," \u2014 "),eG=n(VLe,"A",{href:!0});var gct=s(eG);TNo=r(gct,"CamembertForQuestionAnswering"),gct.forEach(t),MNo=r(VLe," (CamemBERT model)"),VLe.forEach(t),ENo=i(P),Q2=n(P,"LI",{});var XLe=s(Q2);Ife=n(XLe,"STRONG",{});var hct=s(Ife);CNo=r(hct,"canine"),hct.forEach(t),wNo=r(XLe," \u2014 "),oG=n(XLe,"A",{href:!0});var pct=s(oG);ANo=r(pct,"CanineForQuestionAnswering"),pct.forEach(t),yNo=r(XLe," (Canine model)"),XLe.forEach(t),LNo=i(P),W2=n(P,"LI",{});var zLe=s(W2);qfe=n(zLe,"STRONG",{});var _ct=s(qfe);xNo=r(_ct,"convbert"),_ct.forEach(t),kNo=r(zLe," \u2014 "),rG=n(zLe,"A",{href:!0});var uct=s(rG);SNo=r(uct,"ConvBertForQuestionAnswering"),uct.forEach(t),RNo=r(zLe," (ConvBERT model)"),zLe.forEach(t),BNo=i(P),H2=n(P,"LI",{});var QLe=s(H2);Nfe=n(QLe,"STRONG",{});var bct=s(Nfe);PNo=r(bct,"data2vec-text"),bct.forEach(t),$No=r(QLe," \u2014 "),tG=n(QLe,"A",{href:!0});var vct=s(tG);INo=r(vct,"Data2VecTextForQuestionAnswering"),vct.forEach(t),qNo=r(QLe," (Data2VecText model)"),QLe.forEach(t),NNo=i(P),U2=n(P,"LI",{});var WLe=s(U2);jfe=n(WLe,"STRONG",{});var Fct=s(jfe);jNo=r(Fct,"deberta"),Fct.forEach(t),DNo=r(WLe," \u2014 "),aG=n(WLe,"A",{href:!0});var Tct=s(aG);GNo=r(Tct,"DebertaForQuestionAnswering"),Tct.forEach(t),ONo=r(WLe," (DeBERTa model)"),WLe.forEach(t),VNo=i(P),J2=n(P,"LI",{});var HLe=s(J2);Dfe=n(HLe,"STRONG",{});var Mct=s(Dfe);XNo=r(Mct,"deberta-v2"),Mct.forEach(t),zNo=r(HLe," \u2014 "),nG=n(HLe,"A",{href:!0});var Ect=s(nG);QNo=r(Ect,"DebertaV2ForQuestionAnswering"),Ect.forEach(t),WNo=r(HLe," (DeBERTa-v2 model)"),HLe.forEach(t),HNo=i(P),Y2=n(P,"LI",{});var ULe=s(Y2);Gfe=n(ULe,"STRONG",{});var Cct=s(Gfe);UNo=r(Cct,"distilbert"),Cct.forEach(t),JNo=r(ULe," \u2014 "),sG=n(ULe,"A",{href:!0});var wct=s(sG);YNo=r(wct,"DistilBertForQuestionAnswering"),wct.forEach(t),KNo=r(ULe," (DistilBERT model)"),ULe.forEach(t),ZNo=i(P),K2=n(P,"LI",{});var JLe=s(K2);Ofe=n(JLe,"STRONG",{});var Act=s(Ofe);ejo=r(Act,"electra"),Act.forEach(t),ojo=r(JLe," \u2014 "),lG=n(JLe,"A",{href:!0});var yct=s(lG);rjo=r(yct,"ElectraForQuestionAnswering"),yct.forEach(t),tjo=r(JLe," (ELECTRA model)"),JLe.forEach(t),ajo=i(P),Z2=n(P,"LI",{});var YLe=s(Z2);Vfe=n(YLe,"STRONG",{});var Lct=s(Vfe);njo=r(Lct,"flaubert"),Lct.forEach(t),sjo=r(YLe," \u2014 "),iG=n(YLe,"A",{href:!0});var xct=s(iG);ljo=r(xct,"FlaubertForQuestionAnsweringSimple"),xct.forEach(t),ijo=r(YLe," (FlauBERT model)"),YLe.forEach(t),djo=i(P),e5=n(P,"LI",{});var KLe=s(e5);Xfe=n(KLe,"STRONG",{});var kct=s(Xfe);cjo=r(kct,"fnet"),kct.forEach(t),fjo=r(KLe," \u2014 "),dG=n(KLe,"A",{href:!0});var Sct=s(dG);mjo=r(Sct,"FNetForQuestionAnswering"),Sct.forEach(t),gjo=r(KLe," (FNet model)"),KLe.forEach(t),hjo=i(P),o5=n(P,"LI",{});var ZLe=s(o5);zfe=n(ZLe,"STRONG",{});var Rct=s(zfe);pjo=r(Rct,"funnel"),Rct.forEach(t),_jo=r(ZLe," \u2014 "),cG=n(ZLe,"A",{href:!0});var Bct=s(cG);ujo=r(Bct,"FunnelForQuestionAnswering"),Bct.forEach(t),bjo=r(ZLe," (Funnel Transformer model)"),ZLe.forEach(t),vjo=i(P),r5=n(P,"LI",{});var e7e=s(r5);Qfe=n(e7e,"STRONG",{});var Pct=s(Qfe);Fjo=r(Pct,"gptj"),Pct.forEach(t),Tjo=r(e7e," \u2014 "),fG=n(e7e,"A",{href:!0});var $ct=s(fG);Mjo=r($ct,"GPTJForQuestionAnswering"),$ct.forEach(t),Ejo=r(e7e," (GPT-J model)"),e7e.forEach(t),Cjo=i(P),t5=n(P,"LI",{});var o7e=s(t5);Wfe=n(o7e,"STRONG",{});var Ict=s(Wfe);wjo=r(Ict,"ibert"),Ict.forEach(t),Ajo=r(o7e," \u2014 "),mG=n(o7e,"A",{href:!0});var qct=s(mG);yjo=r(qct,"IBertForQuestionAnswering"),qct.forEach(t),Ljo=r(o7e," (I-BERT model)"),o7e.forEach(t),xjo=i(P),a5=n(P,"LI",{});var r7e=s(a5);Hfe=n(r7e,"STRONG",{});var Nct=s(Hfe);kjo=r(Nct,"layoutlmv2"),Nct.forEach(t),Sjo=r(r7e," \u2014 "),gG=n(r7e,"A",{href:!0});var jct=s(gG);Rjo=r(jct,"LayoutLMv2ForQuestionAnswering"),jct.forEach(t),Bjo=r(r7e," (LayoutLMv2 model)"),r7e.forEach(t),Pjo=i(P),n5=n(P,"LI",{});var t7e=s(n5);Ufe=n(t7e,"STRONG",{});var Dct=s(Ufe);$jo=r(Dct,"led"),Dct.forEach(t),Ijo=r(t7e," \u2014 "),hG=n(t7e,"A",{href:!0});var Gct=s(hG);qjo=r(Gct,"LEDForQuestionAnswering"),Gct.forEach(t),Njo=r(t7e," (LED model)"),t7e.forEach(t),jjo=i(P),s5=n(P,"LI",{});var a7e=s(s5);Jfe=n(a7e,"STRONG",{});var Oct=s(Jfe);Djo=r(Oct,"longformer"),Oct.forEach(t),Gjo=r(a7e," \u2014 "),pG=n(a7e,"A",{href:!0});var Vct=s(pG);Ojo=r(Vct,"LongformerForQuestionAnswering"),Vct.forEach(t),Vjo=r(a7e," (Longformer model)"),a7e.forEach(t),Xjo=i(P),l5=n(P,"LI",{});var n7e=s(l5);Yfe=n(n7e,"STRONG",{});var Xct=s(Yfe);zjo=r(Xct,"lxmert"),Xct.forEach(t),Qjo=r(n7e," \u2014 "),_G=n(n7e,"A",{href:!0});var zct=s(_G);Wjo=r(zct,"LxmertForQuestionAnswering"),zct.forEach(t),Hjo=r(n7e," (LXMERT model)"),n7e.forEach(t),Ujo=i(P),i5=n(P,"LI",{});var s7e=s(i5);Kfe=n(s7e,"STRONG",{});var Qct=s(Kfe);Jjo=r(Qct,"mbart"),Qct.forEach(t),Yjo=r(s7e," \u2014 "),uG=n(s7e,"A",{href:!0});var Wct=s(uG);Kjo=r(Wct,"MBartForQuestionAnswering"),Wct.forEach(t),Zjo=r(s7e," (mBART model)"),s7e.forEach(t),eDo=i(P),d5=n(P,"LI",{});var l7e=s(d5);Zfe=n(l7e,"STRONG",{});var Hct=s(Zfe);oDo=r(Hct,"megatron-bert"),Hct.forEach(t),rDo=r(l7e," \u2014 "),bG=n(l7e,"A",{href:!0});var Uct=s(bG);tDo=r(Uct,"MegatronBertForQuestionAnswering"),Uct.forEach(t),aDo=r(l7e," (MegatronBert model)"),l7e.forEach(t),nDo=i(P),c5=n(P,"LI",{});var i7e=s(c5);eme=n(i7e,"STRONG",{});var Jct=s(eme);sDo=r(Jct,"mobilebert"),Jct.forEach(t),lDo=r(i7e," \u2014 "),vG=n(i7e,"A",{href:!0});var Yct=s(vG);iDo=r(Yct,"MobileBertForQuestionAnswering"),Yct.forEach(t),dDo=r(i7e," (MobileBERT model)"),i7e.forEach(t),cDo=i(P),f5=n(P,"LI",{});var d7e=s(f5);ome=n(d7e,"STRONG",{});var Kct=s(ome);fDo=r(Kct,"mpnet"),Kct.forEach(t),mDo=r(d7e," \u2014 "),FG=n(d7e,"A",{href:!0});var Zct=s(FG);gDo=r(Zct,"MPNetForQuestionAnswering"),Zct.forEach(t),hDo=r(d7e," (MPNet model)"),d7e.forEach(t),pDo=i(P),m5=n(P,"LI",{});var c7e=s(m5);rme=n(c7e,"STRONG",{});var eft=s(rme);_Do=r(eft,"nystromformer"),eft.forEach(t),uDo=r(c7e," \u2014 "),TG=n(c7e,"A",{href:!0});var oft=s(TG);bDo=r(oft,"NystromformerForQuestionAnswering"),oft.forEach(t),vDo=r(c7e," (Nystromformer model)"),c7e.forEach(t),FDo=i(P),g5=n(P,"LI",{});var f7e=s(g5);tme=n(f7e,"STRONG",{});var rft=s(tme);TDo=r(rft,"qdqbert"),rft.forEach(t),MDo=r(f7e," \u2014 "),MG=n(f7e,"A",{href:!0});var tft=s(MG);EDo=r(tft,"QDQBertForQuestionAnswering"),tft.forEach(t),CDo=r(f7e," (QDQBert model)"),f7e.forEach(t),wDo=i(P),h5=n(P,"LI",{});var m7e=s(h5);ame=n(m7e,"STRONG",{});var aft=s(ame);ADo=r(aft,"reformer"),aft.forEach(t),yDo=r(m7e," \u2014 "),EG=n(m7e,"A",{href:!0});var nft=s(EG);LDo=r(nft,"ReformerForQuestionAnswering"),nft.forEach(t),xDo=r(m7e," (Reformer model)"),m7e.forEach(t),kDo=i(P),p5=n(P,"LI",{});var g7e=s(p5);nme=n(g7e,"STRONG",{});var sft=s(nme);SDo=r(sft,"rembert"),sft.forEach(t),RDo=r(g7e," \u2014 "),CG=n(g7e,"A",{href:!0});var lft=s(CG);BDo=r(lft,"RemBertForQuestionAnswering"),lft.forEach(t),PDo=r(g7e," (RemBERT model)"),g7e.forEach(t),$Do=i(P),_5=n(P,"LI",{});var h7e=s(_5);sme=n(h7e,"STRONG",{});var ift=s(sme);IDo=r(ift,"roberta"),ift.forEach(t),qDo=r(h7e," \u2014 "),wG=n(h7e,"A",{href:!0});var dft=s(wG);NDo=r(dft,"RobertaForQuestionAnswering"),dft.forEach(t),jDo=r(h7e," (RoBERTa model)"),h7e.forEach(t),DDo=i(P),u5=n(P,"LI",{});var p7e=s(u5);lme=n(p7e,"STRONG",{});var cft=s(lme);GDo=r(cft,"roformer"),cft.forEach(t),ODo=r(p7e," \u2014 "),AG=n(p7e,"A",{href:!0});var fft=s(AG);VDo=r(fft,"RoFormerForQuestionAnswering"),fft.forEach(t),XDo=r(p7e," (RoFormer model)"),p7e.forEach(t),zDo=i(P),b5=n(P,"LI",{});var _7e=s(b5);ime=n(_7e,"STRONG",{});var mft=s(ime);QDo=r(mft,"splinter"),mft.forEach(t),WDo=r(_7e," \u2014 "),yG=n(_7e,"A",{href:!0});var gft=s(yG);HDo=r(gft,"SplinterForQuestionAnswering"),gft.forEach(t),UDo=r(_7e," (Splinter model)"),_7e.forEach(t),JDo=i(P),v5=n(P,"LI",{});var u7e=s(v5);dme=n(u7e,"STRONG",{});var hft=s(dme);YDo=r(hft,"squeezebert"),hft.forEach(t),KDo=r(u7e," \u2014 "),LG=n(u7e,"A",{href:!0});var pft=s(LG);ZDo=r(pft,"SqueezeBertForQuestionAnswering"),pft.forEach(t),eGo=r(u7e," (SqueezeBERT model)"),u7e.forEach(t),oGo=i(P),F5=n(P,"LI",{});var b7e=s(F5);cme=n(b7e,"STRONG",{});var _ft=s(cme);rGo=r(_ft,"xlm"),_ft.forEach(t),tGo=r(b7e," \u2014 "),xG=n(b7e,"A",{href:!0});var uft=s(xG);aGo=r(uft,"XLMForQuestionAnsweringSimple"),uft.forEach(t),nGo=r(b7e," (XLM model)"),b7e.forEach(t),sGo=i(P),T5=n(P,"LI",{});var v7e=s(T5);fme=n(v7e,"STRONG",{});var bft=s(fme);lGo=r(bft,"xlm-roberta"),bft.forEach(t),iGo=r(v7e," \u2014 "),kG=n(v7e,"A",{href:!0});var vft=s(kG);dGo=r(vft,"XLMRobertaForQuestionAnswering"),vft.forEach(t),cGo=r(v7e," (XLM-RoBERTa model)"),v7e.forEach(t),fGo=i(P),M5=n(P,"LI",{});var F7e=s(M5);mme=n(F7e,"STRONG",{});var Fft=s(mme);mGo=r(Fft,"xlm-roberta-xl"),Fft.forEach(t),gGo=r(F7e," \u2014 "),SG=n(F7e,"A",{href:!0});var Tft=s(SG);hGo=r(Tft,"XLMRobertaXLForQuestionAnswering"),Tft.forEach(t),pGo=r(F7e," (XLM-RoBERTa-XL model)"),F7e.forEach(t),_Go=i(P),E5=n(P,"LI",{});var T7e=s(E5);gme=n(T7e,"STRONG",{});var Mft=s(gme);uGo=r(Mft,"xlnet"),Mft.forEach(t),bGo=r(T7e," \u2014 "),RG=n(T7e,"A",{href:!0});var Eft=s(RG);vGo=r(Eft,"XLNetForQuestionAnsweringSimple"),Eft.forEach(t),FGo=r(T7e," (XLNet model)"),T7e.forEach(t),TGo=i(P),C5=n(P,"LI",{});var M7e=s(C5);hme=n(M7e,"STRONG",{});var Cft=s(hme);MGo=r(Cft,"yoso"),Cft.forEach(t),EGo=r(M7e," \u2014 "),BG=n(M7e,"A",{href:!0});var wft=s(BG);CGo=r(wft,"YosoForQuestionAnswering"),wft.forEach(t),wGo=r(M7e," (YOSO model)"),M7e.forEach(t),P.forEach(t),AGo=i(Ut),w5=n(Ut,"P",{});var E7e=s(w5);yGo=r(E7e,"The model is set in evaluation mode by default using "),pme=n(E7e,"CODE",{});var Aft=s(pme);LGo=r(Aft,"model.eval()"),Aft.forEach(t),xGo=r(E7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=n(E7e,"CODE",{});var yft=s(_me);kGo=r(yft,"model.train()"),yft.forEach(t),E7e.forEach(t),SGo=i(Ut),ume=n(Ut,"P",{});var Lft=s(ume);RGo=r(Lft,"Examples:"),Lft.forEach(t),BGo=i(Ut),m(OA.$$.fragment,Ut),Ut.forEach(t),Fl.forEach(t),DPe=i(c),$d=n(c,"H2",{class:!0});var UIe=s($d);A5=n(UIe,"A",{id:!0,class:!0,href:!0});var xft=s(A5);bme=n(xft,"SPAN",{});var kft=s(bme);m(VA.$$.fragment,kft),kft.forEach(t),xft.forEach(t),PGo=i(UIe),vme=n(UIe,"SPAN",{});var Sft=s(vme);$Go=r(Sft,"AutoModelForTableQuestionAnswering"),Sft.forEach(t),UIe.forEach(t),GPe=i(c),sr=n(c,"DIV",{class:!0});var Ml=s(sr);m(XA.$$.fragment,Ml),IGo=i(Ml),Id=n(Ml,"P",{});var DJ=s(Id);qGo=r(DJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),PG=n(DJ,"A",{href:!0});var Rft=s(PG);NGo=r(Rft,"from_pretrained()"),Rft.forEach(t),jGo=r(DJ," class method or the "),$G=n(DJ,"A",{href:!0});var Bft=s($G);DGo=r(Bft,"from_config()"),Bft.forEach(t),GGo=r(DJ,` class
method.`),DJ.forEach(t),OGo=i(Ml),zA=n(Ml,"P",{});var JIe=s(zA);VGo=r(JIe,"This class cannot be instantiated directly using "),Fme=n(JIe,"CODE",{});var Pft=s(Fme);XGo=r(Pft,"__init__()"),Pft.forEach(t),zGo=r(JIe," (throws an error)."),JIe.forEach(t),QGo=i(Ml),et=n(Ml,"DIV",{class:!0});var El=s(et);m(QA.$$.fragment,El),WGo=i(El),Tme=n(El,"P",{});var $ft=s(Tme);HGo=r($ft,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$ft.forEach(t),UGo=i(El),qd=n(El,"P",{});var GJ=s(qd);JGo=r(GJ,`Note:
Loading a model from its configuration file does `),Mme=n(GJ,"STRONG",{});var Ift=s(Mme);YGo=r(Ift,"not"),Ift.forEach(t),KGo=r(GJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=n(GJ,"A",{href:!0});var qft=s(IG);ZGo=r(qft,"from_pretrained()"),qft.forEach(t),eOo=r(GJ," to load the model weights."),GJ.forEach(t),oOo=i(El),Eme=n(El,"P",{});var Nft=s(Eme);rOo=r(Nft,"Examples:"),Nft.forEach(t),tOo=i(El),m(WA.$$.fragment,El),El.forEach(t),aOo=i(Ml),He=n(Ml,"DIV",{class:!0});var Jt=s(He);m(HA.$$.fragment,Jt),nOo=i(Jt),Cme=n(Jt,"P",{});var jft=s(Cme);sOo=r(jft,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jft.forEach(t),lOo=i(Jt),en=n(Jt,"P",{});var sC=s(en);iOo=r(sC,"The model class to instantiate is selected based on the "),wme=n(sC,"CODE",{});var Dft=s(wme);dOo=r(Dft,"model_type"),Dft.forEach(t),cOo=r(sC,` property of the config object (either
passed as an argument or loaded from `),Ame=n(sC,"CODE",{});var Gft=s(Ame);fOo=r(Gft,"pretrained_model_name_or_path"),Gft.forEach(t),mOo=r(sC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=n(sC,"CODE",{});var Oft=s(yme);gOo=r(Oft,"pretrained_model_name_or_path"),Oft.forEach(t),hOo=r(sC,":"),sC.forEach(t),pOo=i(Jt),Lme=n(Jt,"UL",{});var Vft=s(Lme);y5=n(Vft,"LI",{});var C7e=s(y5);xme=n(C7e,"STRONG",{});var Xft=s(xme);_Oo=r(Xft,"tapas"),Xft.forEach(t),uOo=r(C7e," \u2014 "),qG=n(C7e,"A",{href:!0});var zft=s(qG);bOo=r(zft,"TapasForQuestionAnswering"),zft.forEach(t),vOo=r(C7e," (TAPAS model)"),C7e.forEach(t),Vft.forEach(t),FOo=i(Jt),L5=n(Jt,"P",{});var w7e=s(L5);TOo=r(w7e,"The model is set in evaluation mode by default using "),kme=n(w7e,"CODE",{});var Qft=s(kme);MOo=r(Qft,"model.eval()"),Qft.forEach(t),EOo=r(w7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sme=n(w7e,"CODE",{});var Wft=s(Sme);COo=r(Wft,"model.train()"),Wft.forEach(t),w7e.forEach(t),wOo=i(Jt),Rme=n(Jt,"P",{});var Hft=s(Rme);AOo=r(Hft,"Examples:"),Hft.forEach(t),yOo=i(Jt),m(UA.$$.fragment,Jt),Jt.forEach(t),Ml.forEach(t),OPe=i(c),Nd=n(c,"H2",{class:!0});var YIe=s(Nd);x5=n(YIe,"A",{id:!0,class:!0,href:!0});var Uft=s(x5);Bme=n(Uft,"SPAN",{});var Jft=s(Bme);m(JA.$$.fragment,Jft),Jft.forEach(t),Uft.forEach(t),LOo=i(YIe),Pme=n(YIe,"SPAN",{});var Yft=s(Pme);xOo=r(Yft,"AutoModelForImageClassification"),Yft.forEach(t),YIe.forEach(t),VPe=i(c),lr=n(c,"DIV",{class:!0});var Cl=s(lr);m(YA.$$.fragment,Cl),kOo=i(Cl),jd=n(Cl,"P",{});var OJ=s(jd);SOo=r(OJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NG=n(OJ,"A",{href:!0});var Kft=s(NG);ROo=r(Kft,"from_pretrained()"),Kft.forEach(t),BOo=r(OJ," class method or the "),jG=n(OJ,"A",{href:!0});var Zft=s(jG);POo=r(Zft,"from_config()"),Zft.forEach(t),$Oo=r(OJ,` class
method.`),OJ.forEach(t),IOo=i(Cl),KA=n(Cl,"P",{});var KIe=s(KA);qOo=r(KIe,"This class cannot be instantiated directly using "),$me=n(KIe,"CODE",{});var emt=s($me);NOo=r(emt,"__init__()"),emt.forEach(t),jOo=r(KIe," (throws an error)."),KIe.forEach(t),DOo=i(Cl),ot=n(Cl,"DIV",{class:!0});var wl=s(ot);m(ZA.$$.fragment,wl),GOo=i(wl),Ime=n(wl,"P",{});var omt=s(Ime);OOo=r(omt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),omt.forEach(t),VOo=i(wl),Dd=n(wl,"P",{});var VJ=s(Dd);XOo=r(VJ,`Note:
Loading a model from its configuration file does `),qme=n(VJ,"STRONG",{});var rmt=s(qme);zOo=r(rmt,"not"),rmt.forEach(t),QOo=r(VJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=n(VJ,"A",{href:!0});var tmt=s(DG);WOo=r(tmt,"from_pretrained()"),tmt.forEach(t),HOo=r(VJ," to load the model weights."),VJ.forEach(t),UOo=i(wl),Nme=n(wl,"P",{});var amt=s(Nme);JOo=r(amt,"Examples:"),amt.forEach(t),YOo=i(wl),m(e0.$$.fragment,wl),wl.forEach(t),KOo=i(Cl),Ue=n(Cl,"DIV",{class:!0});var Yt=s(Ue);m(o0.$$.fragment,Yt),ZOo=i(Yt),jme=n(Yt,"P",{});var nmt=s(jme);eVo=r(nmt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nmt.forEach(t),oVo=i(Yt),on=n(Yt,"P",{});var lC=s(on);rVo=r(lC,"The model class to instantiate is selected based on the "),Dme=n(lC,"CODE",{});var smt=s(Dme);tVo=r(smt,"model_type"),smt.forEach(t),aVo=r(lC,` property of the config object (either
passed as an argument or loaded from `),Gme=n(lC,"CODE",{});var lmt=s(Gme);nVo=r(lmt,"pretrained_model_name_or_path"),lmt.forEach(t),sVo=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ome=n(lC,"CODE",{});var imt=s(Ome);lVo=r(imt,"pretrained_model_name_or_path"),imt.forEach(t),iVo=r(lC,":"),lC.forEach(t),dVo=i(Yt),ce=n(Yt,"UL",{});var pe=s(ce);k5=n(pe,"LI",{});var A7e=s(k5);Vme=n(A7e,"STRONG",{});var dmt=s(Vme);cVo=r(dmt,"beit"),dmt.forEach(t),fVo=r(A7e," \u2014 "),GG=n(A7e,"A",{href:!0});var cmt=s(GG);mVo=r(cmt,"BeitForImageClassification"),cmt.forEach(t),gVo=r(A7e," (BEiT model)"),A7e.forEach(t),hVo=i(pe),S5=n(pe,"LI",{});var y7e=s(S5);Xme=n(y7e,"STRONG",{});var fmt=s(Xme);pVo=r(fmt,"convnext"),fmt.forEach(t),_Vo=r(y7e," \u2014 "),OG=n(y7e,"A",{href:!0});var mmt=s(OG);uVo=r(mmt,"ConvNextForImageClassification"),mmt.forEach(t),bVo=r(y7e," (ConvNext model)"),y7e.forEach(t),vVo=i(pe),R5=n(pe,"LI",{});var L7e=s(R5);zme=n(L7e,"STRONG",{});var gmt=s(zme);FVo=r(gmt,"data2vec-vision"),gmt.forEach(t),TVo=r(L7e," \u2014 "),VG=n(L7e,"A",{href:!0});var hmt=s(VG);MVo=r(hmt,"Data2VecVisionForImageClassification"),hmt.forEach(t),EVo=r(L7e," (Data2VecVision model)"),L7e.forEach(t),CVo=i(pe),Us=n(pe,"LI",{});var z9=s(Us);Qme=n(z9,"STRONG",{});var pmt=s(Qme);wVo=r(pmt,"deit"),pmt.forEach(t),AVo=r(z9," \u2014 "),XG=n(z9,"A",{href:!0});var _mt=s(XG);yVo=r(_mt,"DeiTForImageClassification"),_mt.forEach(t),LVo=r(z9," or "),zG=n(z9,"A",{href:!0});var umt=s(zG);xVo=r(umt,"DeiTForImageClassificationWithTeacher"),umt.forEach(t),kVo=r(z9," (DeiT model)"),z9.forEach(t),SVo=i(pe),B5=n(pe,"LI",{});var x7e=s(B5);Wme=n(x7e,"STRONG",{});var bmt=s(Wme);RVo=r(bmt,"imagegpt"),bmt.forEach(t),BVo=r(x7e," \u2014 "),QG=n(x7e,"A",{href:!0});var vmt=s(QG);PVo=r(vmt,"ImageGPTForImageClassification"),vmt.forEach(t),$Vo=r(x7e," (ImageGPT model)"),x7e.forEach(t),IVo=i(pe),ma=n(pe,"LI",{});var Vf=s(ma);Hme=n(Vf,"STRONG",{});var Fmt=s(Hme);qVo=r(Fmt,"perceiver"),Fmt.forEach(t),NVo=r(Vf," \u2014 "),WG=n(Vf,"A",{href:!0});var Tmt=s(WG);jVo=r(Tmt,"PerceiverForImageClassificationLearned"),Tmt.forEach(t),DVo=r(Vf," or "),HG=n(Vf,"A",{href:!0});var Mmt=s(HG);GVo=r(Mmt,"PerceiverForImageClassificationFourier"),Mmt.forEach(t),OVo=r(Vf," or "),UG=n(Vf,"A",{href:!0});var Emt=s(UG);VVo=r(Emt,"PerceiverForImageClassificationConvProcessing"),Emt.forEach(t),XVo=r(Vf," (Perceiver model)"),Vf.forEach(t),zVo=i(pe),P5=n(pe,"LI",{});var k7e=s(P5);Ume=n(k7e,"STRONG",{});var Cmt=s(Ume);QVo=r(Cmt,"poolformer"),Cmt.forEach(t),WVo=r(k7e," \u2014 "),JG=n(k7e,"A",{href:!0});var wmt=s(JG);HVo=r(wmt,"PoolFormerForImageClassification"),wmt.forEach(t),UVo=r(k7e," (PoolFormer model)"),k7e.forEach(t),JVo=i(pe),$5=n(pe,"LI",{});var S7e=s($5);Jme=n(S7e,"STRONG",{});var Amt=s(Jme);YVo=r(Amt,"regnet"),Amt.forEach(t),KVo=r(S7e," \u2014 "),YG=n(S7e,"A",{href:!0});var ymt=s(YG);ZVo=r(ymt,"RegNetForImageClassification"),ymt.forEach(t),eXo=r(S7e," (RegNet model)"),S7e.forEach(t),oXo=i(pe),I5=n(pe,"LI",{});var R7e=s(I5);Yme=n(R7e,"STRONG",{});var Lmt=s(Yme);rXo=r(Lmt,"resnet"),Lmt.forEach(t),tXo=r(R7e," \u2014 "),KG=n(R7e,"A",{href:!0});var xmt=s(KG);aXo=r(xmt,"ResNetForImageClassification"),xmt.forEach(t),nXo=r(R7e," (ResNet model)"),R7e.forEach(t),sXo=i(pe),q5=n(pe,"LI",{});var B7e=s(q5);Kme=n(B7e,"STRONG",{});var kmt=s(Kme);lXo=r(kmt,"segformer"),kmt.forEach(t),iXo=r(B7e," \u2014 "),ZG=n(B7e,"A",{href:!0});var Smt=s(ZG);dXo=r(Smt,"SegformerForImageClassification"),Smt.forEach(t),cXo=r(B7e," (SegFormer model)"),B7e.forEach(t),fXo=i(pe),N5=n(pe,"LI",{});var P7e=s(N5);Zme=n(P7e,"STRONG",{});var Rmt=s(Zme);mXo=r(Rmt,"swin"),Rmt.forEach(t),gXo=r(P7e," \u2014 "),eO=n(P7e,"A",{href:!0});var Bmt=s(eO);hXo=r(Bmt,"SwinForImageClassification"),Bmt.forEach(t),pXo=r(P7e," (Swin model)"),P7e.forEach(t),_Xo=i(pe),j5=n(pe,"LI",{});var $7e=s(j5);ege=n($7e,"STRONG",{});var Pmt=s(ege);uXo=r(Pmt,"van"),Pmt.forEach(t),bXo=r($7e," \u2014 "),oO=n($7e,"A",{href:!0});var $mt=s(oO);vXo=r($mt,"VanForImageClassification"),$mt.forEach(t),FXo=r($7e," (VAN model)"),$7e.forEach(t),TXo=i(pe),D5=n(pe,"LI",{});var I7e=s(D5);oge=n(I7e,"STRONG",{});var Imt=s(oge);MXo=r(Imt,"vit"),Imt.forEach(t),EXo=r(I7e," \u2014 "),rO=n(I7e,"A",{href:!0});var qmt=s(rO);CXo=r(qmt,"ViTForImageClassification"),qmt.forEach(t),wXo=r(I7e," (ViT model)"),I7e.forEach(t),pe.forEach(t),AXo=i(Yt),G5=n(Yt,"P",{});var q7e=s(G5);yXo=r(q7e,"The model is set in evaluation mode by default using "),rge=n(q7e,"CODE",{});var Nmt=s(rge);LXo=r(Nmt,"model.eval()"),Nmt.forEach(t),xXo=r(q7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tge=n(q7e,"CODE",{});var jmt=s(tge);kXo=r(jmt,"model.train()"),jmt.forEach(t),q7e.forEach(t),SXo=i(Yt),age=n(Yt,"P",{});var Dmt=s(age);RXo=r(Dmt,"Examples:"),Dmt.forEach(t),BXo=i(Yt),m(r0.$$.fragment,Yt),Yt.forEach(t),Cl.forEach(t),XPe=i(c),Gd=n(c,"H2",{class:!0});var ZIe=s(Gd);O5=n(ZIe,"A",{id:!0,class:!0,href:!0});var Gmt=s(O5);nge=n(Gmt,"SPAN",{});var Omt=s(nge);m(t0.$$.fragment,Omt),Omt.forEach(t),Gmt.forEach(t),PXo=i(ZIe),sge=n(ZIe,"SPAN",{});var Vmt=s(sge);$Xo=r(Vmt,"AutoModelForVision2Seq"),Vmt.forEach(t),ZIe.forEach(t),zPe=i(c),ir=n(c,"DIV",{class:!0});var Al=s(ir);m(a0.$$.fragment,Al),IXo=i(Al),Od=n(Al,"P",{});var XJ=s(Od);qXo=r(XJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tO=n(XJ,"A",{href:!0});var Xmt=s(tO);NXo=r(Xmt,"from_pretrained()"),Xmt.forEach(t),jXo=r(XJ," class method or the "),aO=n(XJ,"A",{href:!0});var zmt=s(aO);DXo=r(zmt,"from_config()"),zmt.forEach(t),GXo=r(XJ,` class
method.`),XJ.forEach(t),OXo=i(Al),n0=n(Al,"P",{});var eqe=s(n0);VXo=r(eqe,"This class cannot be instantiated directly using "),lge=n(eqe,"CODE",{});var Qmt=s(lge);XXo=r(Qmt,"__init__()"),Qmt.forEach(t),zXo=r(eqe," (throws an error)."),eqe.forEach(t),QXo=i(Al),rt=n(Al,"DIV",{class:!0});var yl=s(rt);m(s0.$$.fragment,yl),WXo=i(yl),ige=n(yl,"P",{});var Wmt=s(ige);HXo=r(Wmt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Wmt.forEach(t),UXo=i(yl),Vd=n(yl,"P",{});var zJ=s(Vd);JXo=r(zJ,`Note:
Loading a model from its configuration file does `),dge=n(zJ,"STRONG",{});var Hmt=s(dge);YXo=r(Hmt,"not"),Hmt.forEach(t),KXo=r(zJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nO=n(zJ,"A",{href:!0});var Umt=s(nO);ZXo=r(Umt,"from_pretrained()"),Umt.forEach(t),ezo=r(zJ," to load the model weights."),zJ.forEach(t),ozo=i(yl),cge=n(yl,"P",{});var Jmt=s(cge);rzo=r(Jmt,"Examples:"),Jmt.forEach(t),tzo=i(yl),m(l0.$$.fragment,yl),yl.forEach(t),azo=i(Al),Je=n(Al,"DIV",{class:!0});var Kt=s(Je);m(i0.$$.fragment,Kt),nzo=i(Kt),fge=n(Kt,"P",{});var Ymt=s(fge);szo=r(Ymt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ymt.forEach(t),lzo=i(Kt),rn=n(Kt,"P",{});var iC=s(rn);izo=r(iC,"The model class to instantiate is selected based on the "),mge=n(iC,"CODE",{});var Kmt=s(mge);dzo=r(Kmt,"model_type"),Kmt.forEach(t),czo=r(iC,` property of the config object (either
passed as an argument or loaded from `),gge=n(iC,"CODE",{});var Zmt=s(gge);fzo=r(Zmt,"pretrained_model_name_or_path"),Zmt.forEach(t),mzo=r(iC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=n(iC,"CODE",{});var egt=s(hge);gzo=r(egt,"pretrained_model_name_or_path"),egt.forEach(t),hzo=r(iC,":"),iC.forEach(t),pzo=i(Kt),pge=n(Kt,"UL",{});var ogt=s(pge);V5=n(ogt,"LI",{});var N7e=s(V5);_ge=n(N7e,"STRONG",{});var rgt=s(_ge);_zo=r(rgt,"vision-encoder-decoder"),rgt.forEach(t),uzo=r(N7e," \u2014 "),sO=n(N7e,"A",{href:!0});var tgt=s(sO);bzo=r(tgt,"VisionEncoderDecoderModel"),tgt.forEach(t),vzo=r(N7e," (Vision Encoder decoder model)"),N7e.forEach(t),ogt.forEach(t),Fzo=i(Kt),X5=n(Kt,"P",{});var j7e=s(X5);Tzo=r(j7e,"The model is set in evaluation mode by default using "),uge=n(j7e,"CODE",{});var agt=s(uge);Mzo=r(agt,"model.eval()"),agt.forEach(t),Ezo=r(j7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=n(j7e,"CODE",{});var ngt=s(bge);Czo=r(ngt,"model.train()"),ngt.forEach(t),j7e.forEach(t),wzo=i(Kt),vge=n(Kt,"P",{});var sgt=s(vge);Azo=r(sgt,"Examples:"),sgt.forEach(t),yzo=i(Kt),m(d0.$$.fragment,Kt),Kt.forEach(t),Al.forEach(t),QPe=i(c),Xd=n(c,"H2",{class:!0});var oqe=s(Xd);z5=n(oqe,"A",{id:!0,class:!0,href:!0});var lgt=s(z5);Fge=n(lgt,"SPAN",{});var igt=s(Fge);m(c0.$$.fragment,igt),igt.forEach(t),lgt.forEach(t),Lzo=i(oqe),Tge=n(oqe,"SPAN",{});var dgt=s(Tge);xzo=r(dgt,"AutoModelForAudioClassification"),dgt.forEach(t),oqe.forEach(t),WPe=i(c),dr=n(c,"DIV",{class:!0});var Ll=s(dr);m(f0.$$.fragment,Ll),kzo=i(Ll),zd=n(Ll,"P",{});var QJ=s(zd);Szo=r(QJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),lO=n(QJ,"A",{href:!0});var cgt=s(lO);Rzo=r(cgt,"from_pretrained()"),cgt.forEach(t),Bzo=r(QJ," class method or the "),iO=n(QJ,"A",{href:!0});var fgt=s(iO);Pzo=r(fgt,"from_config()"),fgt.forEach(t),$zo=r(QJ,` class
method.`),QJ.forEach(t),Izo=i(Ll),m0=n(Ll,"P",{});var rqe=s(m0);qzo=r(rqe,"This class cannot be instantiated directly using "),Mge=n(rqe,"CODE",{});var mgt=s(Mge);Nzo=r(mgt,"__init__()"),mgt.forEach(t),jzo=r(rqe," (throws an error)."),rqe.forEach(t),Dzo=i(Ll),tt=n(Ll,"DIV",{class:!0});var xl=s(tt);m(g0.$$.fragment,xl),Gzo=i(xl),Ege=n(xl,"P",{});var ggt=s(Ege);Ozo=r(ggt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ggt.forEach(t),Vzo=i(xl),Qd=n(xl,"P",{});var WJ=s(Qd);Xzo=r(WJ,`Note:
Loading a model from its configuration file does `),Cge=n(WJ,"STRONG",{});var hgt=s(Cge);zzo=r(hgt,"not"),hgt.forEach(t),Qzo=r(WJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dO=n(WJ,"A",{href:!0});var pgt=s(dO);Wzo=r(pgt,"from_pretrained()"),pgt.forEach(t),Hzo=r(WJ," to load the model weights."),WJ.forEach(t),Uzo=i(xl),wge=n(xl,"P",{});var _gt=s(wge);Jzo=r(_gt,"Examples:"),_gt.forEach(t),Yzo=i(xl),m(h0.$$.fragment,xl),xl.forEach(t),Kzo=i(Ll),Ye=n(Ll,"DIV",{class:!0});var Zt=s(Ye);m(p0.$$.fragment,Zt),Zzo=i(Zt),Age=n(Zt,"P",{});var ugt=s(Age);eQo=r(ugt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ugt.forEach(t),oQo=i(Zt),tn=n(Zt,"P",{});var dC=s(tn);rQo=r(dC,"The model class to instantiate is selected based on the "),yge=n(dC,"CODE",{});var bgt=s(yge);tQo=r(bgt,"model_type"),bgt.forEach(t),aQo=r(dC,` property of the config object (either
passed as an argument or loaded from `),Lge=n(dC,"CODE",{});var vgt=s(Lge);nQo=r(vgt,"pretrained_model_name_or_path"),vgt.forEach(t),sQo=r(dC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xge=n(dC,"CODE",{});var Fgt=s(xge);lQo=r(Fgt,"pretrained_model_name_or_path"),Fgt.forEach(t),iQo=r(dC,":"),dC.forEach(t),dQo=i(Zt),Re=n(Zt,"UL",{});var Do=s(Re);Q5=n(Do,"LI",{});var D7e=s(Q5);kge=n(D7e,"STRONG",{});var Tgt=s(kge);cQo=r(Tgt,"data2vec-audio"),Tgt.forEach(t),fQo=r(D7e," \u2014 "),cO=n(D7e,"A",{href:!0});var Mgt=s(cO);mQo=r(Mgt,"Data2VecAudioForSequenceClassification"),Mgt.forEach(t),gQo=r(D7e," (Data2VecAudio model)"),D7e.forEach(t),hQo=i(Do),W5=n(Do,"LI",{});var G7e=s(W5);Sge=n(G7e,"STRONG",{});var Egt=s(Sge);pQo=r(Egt,"hubert"),Egt.forEach(t),_Qo=r(G7e," \u2014 "),fO=n(G7e,"A",{href:!0});var Cgt=s(fO);uQo=r(Cgt,"HubertForSequenceClassification"),Cgt.forEach(t),bQo=r(G7e," (Hubert model)"),G7e.forEach(t),vQo=i(Do),H5=n(Do,"LI",{});var O7e=s(H5);Rge=n(O7e,"STRONG",{});var wgt=s(Rge);FQo=r(wgt,"sew"),wgt.forEach(t),TQo=r(O7e," \u2014 "),mO=n(O7e,"A",{href:!0});var Agt=s(mO);MQo=r(Agt,"SEWForSequenceClassification"),Agt.forEach(t),EQo=r(O7e," (SEW model)"),O7e.forEach(t),CQo=i(Do),U5=n(Do,"LI",{});var V7e=s(U5);Bge=n(V7e,"STRONG",{});var ygt=s(Bge);wQo=r(ygt,"sew-d"),ygt.forEach(t),AQo=r(V7e," \u2014 "),gO=n(V7e,"A",{href:!0});var Lgt=s(gO);yQo=r(Lgt,"SEWDForSequenceClassification"),Lgt.forEach(t),LQo=r(V7e," (SEW-D model)"),V7e.forEach(t),xQo=i(Do),J5=n(Do,"LI",{});var X7e=s(J5);Pge=n(X7e,"STRONG",{});var xgt=s(Pge);kQo=r(xgt,"unispeech"),xgt.forEach(t),SQo=r(X7e," \u2014 "),hO=n(X7e,"A",{href:!0});var kgt=s(hO);RQo=r(kgt,"UniSpeechForSequenceClassification"),kgt.forEach(t),BQo=r(X7e," (UniSpeech model)"),X7e.forEach(t),PQo=i(Do),Y5=n(Do,"LI",{});var z7e=s(Y5);$ge=n(z7e,"STRONG",{});var Sgt=s($ge);$Qo=r(Sgt,"unispeech-sat"),Sgt.forEach(t),IQo=r(z7e," \u2014 "),pO=n(z7e,"A",{href:!0});var Rgt=s(pO);qQo=r(Rgt,"UniSpeechSatForSequenceClassification"),Rgt.forEach(t),NQo=r(z7e," (UniSpeechSat model)"),z7e.forEach(t),jQo=i(Do),K5=n(Do,"LI",{});var Q7e=s(K5);Ige=n(Q7e,"STRONG",{});var Bgt=s(Ige);DQo=r(Bgt,"wav2vec2"),Bgt.forEach(t),GQo=r(Q7e," \u2014 "),_O=n(Q7e,"A",{href:!0});var Pgt=s(_O);OQo=r(Pgt,"Wav2Vec2ForSequenceClassification"),Pgt.forEach(t),VQo=r(Q7e," (Wav2Vec2 model)"),Q7e.forEach(t),XQo=i(Do),Z5=n(Do,"LI",{});var W7e=s(Z5);qge=n(W7e,"STRONG",{});var $gt=s(qge);zQo=r($gt,"wavlm"),$gt.forEach(t),QQo=r(W7e," \u2014 "),uO=n(W7e,"A",{href:!0});var Igt=s(uO);WQo=r(Igt,"WavLMForSequenceClassification"),Igt.forEach(t),HQo=r(W7e," (WavLM model)"),W7e.forEach(t),Do.forEach(t),UQo=i(Zt),e3=n(Zt,"P",{});var H7e=s(e3);JQo=r(H7e,"The model is set in evaluation mode by default using "),Nge=n(H7e,"CODE",{});var qgt=s(Nge);YQo=r(qgt,"model.eval()"),qgt.forEach(t),KQo=r(H7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jge=n(H7e,"CODE",{});var Ngt=s(jge);ZQo=r(Ngt,"model.train()"),Ngt.forEach(t),H7e.forEach(t),eWo=i(Zt),Dge=n(Zt,"P",{});var jgt=s(Dge);oWo=r(jgt,"Examples:"),jgt.forEach(t),rWo=i(Zt),m(_0.$$.fragment,Zt),Zt.forEach(t),Ll.forEach(t),HPe=i(c),Wd=n(c,"H2",{class:!0});var tqe=s(Wd);o3=n(tqe,"A",{id:!0,class:!0,href:!0});var Dgt=s(o3);Gge=n(Dgt,"SPAN",{});var Ggt=s(Gge);m(u0.$$.fragment,Ggt),Ggt.forEach(t),Dgt.forEach(t),tWo=i(tqe),Oge=n(tqe,"SPAN",{});var Ogt=s(Oge);aWo=r(Ogt,"AutoModelForAudioFrameClassification"),Ogt.forEach(t),tqe.forEach(t),UPe=i(c),cr=n(c,"DIV",{class:!0});var kl=s(cr);m(b0.$$.fragment,kl),nWo=i(kl),Hd=n(kl,"P",{});var HJ=s(Hd);sWo=r(HJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bO=n(HJ,"A",{href:!0});var Vgt=s(bO);lWo=r(Vgt,"from_pretrained()"),Vgt.forEach(t),iWo=r(HJ," class method or the "),vO=n(HJ,"A",{href:!0});var Xgt=s(vO);dWo=r(Xgt,"from_config()"),Xgt.forEach(t),cWo=r(HJ,` class
method.`),HJ.forEach(t),fWo=i(kl),v0=n(kl,"P",{});var aqe=s(v0);mWo=r(aqe,"This class cannot be instantiated directly using "),Vge=n(aqe,"CODE",{});var zgt=s(Vge);gWo=r(zgt,"__init__()"),zgt.forEach(t),hWo=r(aqe," (throws an error)."),aqe.forEach(t),pWo=i(kl),at=n(kl,"DIV",{class:!0});var Sl=s(at);m(F0.$$.fragment,Sl),_Wo=i(Sl),Xge=n(Sl,"P",{});var Qgt=s(Xge);uWo=r(Qgt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Qgt.forEach(t),bWo=i(Sl),Ud=n(Sl,"P",{});var UJ=s(Ud);vWo=r(UJ,`Note:
Loading a model from its configuration file does `),zge=n(UJ,"STRONG",{});var Wgt=s(zge);FWo=r(Wgt,"not"),Wgt.forEach(t),TWo=r(UJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=n(UJ,"A",{href:!0});var Hgt=s(FO);MWo=r(Hgt,"from_pretrained()"),Hgt.forEach(t),EWo=r(UJ," to load the model weights."),UJ.forEach(t),CWo=i(Sl),Qge=n(Sl,"P",{});var Ugt=s(Qge);wWo=r(Ugt,"Examples:"),Ugt.forEach(t),AWo=i(Sl),m(T0.$$.fragment,Sl),Sl.forEach(t),yWo=i(kl),Ke=n(kl,"DIV",{class:!0});var ea=s(Ke);m(M0.$$.fragment,ea),LWo=i(ea),Wge=n(ea,"P",{});var Jgt=s(Wge);xWo=r(Jgt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Jgt.forEach(t),kWo=i(ea),an=n(ea,"P",{});var cC=s(an);SWo=r(cC,"The model class to instantiate is selected based on the "),Hge=n(cC,"CODE",{});var Ygt=s(Hge);RWo=r(Ygt,"model_type"),Ygt.forEach(t),BWo=r(cC,` property of the config object (either
passed as an argument or loaded from `),Uge=n(cC,"CODE",{});var Kgt=s(Uge);PWo=r(Kgt,"pretrained_model_name_or_path"),Kgt.forEach(t),$Wo=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jge=n(cC,"CODE",{});var Zgt=s(Jge);IWo=r(Zgt,"pretrained_model_name_or_path"),Zgt.forEach(t),qWo=r(cC,":"),cC.forEach(t),NWo=i(ea),nn=n(ea,"UL",{});var fC=s(nn);r3=n(fC,"LI",{});var U7e=s(r3);Yge=n(U7e,"STRONG",{});var eht=s(Yge);jWo=r(eht,"data2vec-audio"),eht.forEach(t),DWo=r(U7e," \u2014 "),TO=n(U7e,"A",{href:!0});var oht=s(TO);GWo=r(oht,"Data2VecAudioForAudioFrameClassification"),oht.forEach(t),OWo=r(U7e," (Data2VecAudio model)"),U7e.forEach(t),VWo=i(fC),t3=n(fC,"LI",{});var J7e=s(t3);Kge=n(J7e,"STRONG",{});var rht=s(Kge);XWo=r(rht,"unispeech-sat"),rht.forEach(t),zWo=r(J7e," \u2014 "),MO=n(J7e,"A",{href:!0});var tht=s(MO);QWo=r(tht,"UniSpeechSatForAudioFrameClassification"),tht.forEach(t),WWo=r(J7e," (UniSpeechSat model)"),J7e.forEach(t),HWo=i(fC),a3=n(fC,"LI",{});var Y7e=s(a3);Zge=n(Y7e,"STRONG",{});var aht=s(Zge);UWo=r(aht,"wav2vec2"),aht.forEach(t),JWo=r(Y7e," \u2014 "),EO=n(Y7e,"A",{href:!0});var nht=s(EO);YWo=r(nht,"Wav2Vec2ForAudioFrameClassification"),nht.forEach(t),KWo=r(Y7e," (Wav2Vec2 model)"),Y7e.forEach(t),ZWo=i(fC),n3=n(fC,"LI",{});var K7e=s(n3);ehe=n(K7e,"STRONG",{});var sht=s(ehe);eHo=r(sht,"wavlm"),sht.forEach(t),oHo=r(K7e," \u2014 "),CO=n(K7e,"A",{href:!0});var lht=s(CO);rHo=r(lht,"WavLMForAudioFrameClassification"),lht.forEach(t),tHo=r(K7e," (WavLM model)"),K7e.forEach(t),fC.forEach(t),aHo=i(ea),s3=n(ea,"P",{});var Z7e=s(s3);nHo=r(Z7e,"The model is set in evaluation mode by default using "),ohe=n(Z7e,"CODE",{});var iht=s(ohe);sHo=r(iht,"model.eval()"),iht.forEach(t),lHo=r(Z7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rhe=n(Z7e,"CODE",{});var dht=s(rhe);iHo=r(dht,"model.train()"),dht.forEach(t),Z7e.forEach(t),dHo=i(ea),the=n(ea,"P",{});var cht=s(the);cHo=r(cht,"Examples:"),cht.forEach(t),fHo=i(ea),m(E0.$$.fragment,ea),ea.forEach(t),kl.forEach(t),JPe=i(c),Jd=n(c,"H2",{class:!0});var nqe=s(Jd);l3=n(nqe,"A",{id:!0,class:!0,href:!0});var fht=s(l3);ahe=n(fht,"SPAN",{});var mht=s(ahe);m(C0.$$.fragment,mht),mht.forEach(t),fht.forEach(t),mHo=i(nqe),nhe=n(nqe,"SPAN",{});var ght=s(nhe);gHo=r(ght,"AutoModelForCTC"),ght.forEach(t),nqe.forEach(t),YPe=i(c),fr=n(c,"DIV",{class:!0});var Rl=s(fr);m(w0.$$.fragment,Rl),hHo=i(Rl),Yd=n(Rl,"P",{});var JJ=s(Yd);pHo=r(JJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),wO=n(JJ,"A",{href:!0});var hht=s(wO);_Ho=r(hht,"from_pretrained()"),hht.forEach(t),uHo=r(JJ," class method or the "),AO=n(JJ,"A",{href:!0});var pht=s(AO);bHo=r(pht,"from_config()"),pht.forEach(t),vHo=r(JJ,` class
method.`),JJ.forEach(t),FHo=i(Rl),A0=n(Rl,"P",{});var sqe=s(A0);THo=r(sqe,"This class cannot be instantiated directly using "),she=n(sqe,"CODE",{});var _ht=s(she);MHo=r(_ht,"__init__()"),_ht.forEach(t),EHo=r(sqe," (throws an error)."),sqe.forEach(t),CHo=i(Rl),nt=n(Rl,"DIV",{class:!0});var Bl=s(nt);m(y0.$$.fragment,Bl),wHo=i(Bl),lhe=n(Bl,"P",{});var uht=s(lhe);AHo=r(uht,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),uht.forEach(t),yHo=i(Bl),Kd=n(Bl,"P",{});var YJ=s(Kd);LHo=r(YJ,`Note:
Loading a model from its configuration file does `),ihe=n(YJ,"STRONG",{});var bht=s(ihe);xHo=r(bht,"not"),bht.forEach(t),kHo=r(YJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=n(YJ,"A",{href:!0});var vht=s(yO);SHo=r(vht,"from_pretrained()"),vht.forEach(t),RHo=r(YJ," to load the model weights."),YJ.forEach(t),BHo=i(Bl),dhe=n(Bl,"P",{});var Fht=s(dhe);PHo=r(Fht,"Examples:"),Fht.forEach(t),$Ho=i(Bl),m(L0.$$.fragment,Bl),Bl.forEach(t),IHo=i(Rl),Ze=n(Rl,"DIV",{class:!0});var oa=s(Ze);m(x0.$$.fragment,oa),qHo=i(oa),che=n(oa,"P",{});var Tht=s(che);NHo=r(Tht,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Tht.forEach(t),jHo=i(oa),sn=n(oa,"P",{});var mC=s(sn);DHo=r(mC,"The model class to instantiate is selected based on the "),fhe=n(mC,"CODE",{});var Mht=s(fhe);GHo=r(Mht,"model_type"),Mht.forEach(t),OHo=r(mC,` property of the config object (either
passed as an argument or loaded from `),mhe=n(mC,"CODE",{});var Eht=s(mhe);VHo=r(Eht,"pretrained_model_name_or_path"),Eht.forEach(t),XHo=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ghe=n(mC,"CODE",{});var Cht=s(ghe);zHo=r(Cht,"pretrained_model_name_or_path"),Cht.forEach(t),QHo=r(mC,":"),mC.forEach(t),WHo=i(oa),Be=n(oa,"UL",{});var Go=s(Be);i3=n(Go,"LI",{});var e9e=s(i3);hhe=n(e9e,"STRONG",{});var wht=s(hhe);HHo=r(wht,"data2vec-audio"),wht.forEach(t),UHo=r(e9e," \u2014 "),LO=n(e9e,"A",{href:!0});var Aht=s(LO);JHo=r(Aht,"Data2VecAudioForCTC"),Aht.forEach(t),YHo=r(e9e," (Data2VecAudio model)"),e9e.forEach(t),KHo=i(Go),d3=n(Go,"LI",{});var o9e=s(d3);phe=n(o9e,"STRONG",{});var yht=s(phe);ZHo=r(yht,"hubert"),yht.forEach(t),eUo=r(o9e," \u2014 "),xO=n(o9e,"A",{href:!0});var Lht=s(xO);oUo=r(Lht,"HubertForCTC"),Lht.forEach(t),rUo=r(o9e," (Hubert model)"),o9e.forEach(t),tUo=i(Go),c3=n(Go,"LI",{});var r9e=s(c3);_he=n(r9e,"STRONG",{});var xht=s(_he);aUo=r(xht,"sew"),xht.forEach(t),nUo=r(r9e," \u2014 "),kO=n(r9e,"A",{href:!0});var kht=s(kO);sUo=r(kht,"SEWForCTC"),kht.forEach(t),lUo=r(r9e," (SEW model)"),r9e.forEach(t),iUo=i(Go),f3=n(Go,"LI",{});var t9e=s(f3);uhe=n(t9e,"STRONG",{});var Sht=s(uhe);dUo=r(Sht,"sew-d"),Sht.forEach(t),cUo=r(t9e," \u2014 "),SO=n(t9e,"A",{href:!0});var Rht=s(SO);fUo=r(Rht,"SEWDForCTC"),Rht.forEach(t),mUo=r(t9e," (SEW-D model)"),t9e.forEach(t),gUo=i(Go),m3=n(Go,"LI",{});var a9e=s(m3);bhe=n(a9e,"STRONG",{});var Bht=s(bhe);hUo=r(Bht,"unispeech"),Bht.forEach(t),pUo=r(a9e," \u2014 "),RO=n(a9e,"A",{href:!0});var Pht=s(RO);_Uo=r(Pht,"UniSpeechForCTC"),Pht.forEach(t),uUo=r(a9e," (UniSpeech model)"),a9e.forEach(t),bUo=i(Go),g3=n(Go,"LI",{});var n9e=s(g3);vhe=n(n9e,"STRONG",{});var $ht=s(vhe);vUo=r($ht,"unispeech-sat"),$ht.forEach(t),FUo=r(n9e," \u2014 "),BO=n(n9e,"A",{href:!0});var Iht=s(BO);TUo=r(Iht,"UniSpeechSatForCTC"),Iht.forEach(t),MUo=r(n9e," (UniSpeechSat model)"),n9e.forEach(t),EUo=i(Go),h3=n(Go,"LI",{});var s9e=s(h3);Fhe=n(s9e,"STRONG",{});var qht=s(Fhe);CUo=r(qht,"wav2vec2"),qht.forEach(t),wUo=r(s9e," \u2014 "),PO=n(s9e,"A",{href:!0});var Nht=s(PO);AUo=r(Nht,"Wav2Vec2ForCTC"),Nht.forEach(t),yUo=r(s9e," (Wav2Vec2 model)"),s9e.forEach(t),LUo=i(Go),p3=n(Go,"LI",{});var l9e=s(p3);The=n(l9e,"STRONG",{});var jht=s(The);xUo=r(jht,"wavlm"),jht.forEach(t),kUo=r(l9e," \u2014 "),$O=n(l9e,"A",{href:!0});var Dht=s($O);SUo=r(Dht,"WavLMForCTC"),Dht.forEach(t),RUo=r(l9e," (WavLM model)"),l9e.forEach(t),Go.forEach(t),BUo=i(oa),_3=n(oa,"P",{});var i9e=s(_3);PUo=r(i9e,"The model is set in evaluation mode by default using "),Mhe=n(i9e,"CODE",{});var Ght=s(Mhe);$Uo=r(Ght,"model.eval()"),Ght.forEach(t),IUo=r(i9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ehe=n(i9e,"CODE",{});var Oht=s(Ehe);qUo=r(Oht,"model.train()"),Oht.forEach(t),i9e.forEach(t),NUo=i(oa),Che=n(oa,"P",{});var Vht=s(Che);jUo=r(Vht,"Examples:"),Vht.forEach(t),DUo=i(oa),m(k0.$$.fragment,oa),oa.forEach(t),Rl.forEach(t),KPe=i(c),Zd=n(c,"H2",{class:!0});var lqe=s(Zd);u3=n(lqe,"A",{id:!0,class:!0,href:!0});var Xht=s(u3);whe=n(Xht,"SPAN",{});var zht=s(whe);m(S0.$$.fragment,zht),zht.forEach(t),Xht.forEach(t),GUo=i(lqe),Ahe=n(lqe,"SPAN",{});var Qht=s(Ahe);OUo=r(Qht,"AutoModelForSpeechSeq2Seq"),Qht.forEach(t),lqe.forEach(t),ZPe=i(c),mr=n(c,"DIV",{class:!0});var Pl=s(mr);m(R0.$$.fragment,Pl),VUo=i(Pl),ec=n(Pl,"P",{});var KJ=s(ec);XUo=r(KJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IO=n(KJ,"A",{href:!0});var Wht=s(IO);zUo=r(Wht,"from_pretrained()"),Wht.forEach(t),QUo=r(KJ," class method or the "),qO=n(KJ,"A",{href:!0});var Hht=s(qO);WUo=r(Hht,"from_config()"),Hht.forEach(t),HUo=r(KJ,` class
method.`),KJ.forEach(t),UUo=i(Pl),B0=n(Pl,"P",{});var iqe=s(B0);JUo=r(iqe,"This class cannot be instantiated directly using "),yhe=n(iqe,"CODE",{});var Uht=s(yhe);YUo=r(Uht,"__init__()"),Uht.forEach(t),KUo=r(iqe," (throws an error)."),iqe.forEach(t),ZUo=i(Pl),st=n(Pl,"DIV",{class:!0});var $l=s(st);m(P0.$$.fragment,$l),eJo=i($l),Lhe=n($l,"P",{});var Jht=s(Lhe);oJo=r(Jht,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Jht.forEach(t),rJo=i($l),oc=n($l,"P",{});var ZJ=s(oc);tJo=r(ZJ,`Note:
Loading a model from its configuration file does `),xhe=n(ZJ,"STRONG",{});var Yht=s(xhe);aJo=r(Yht,"not"),Yht.forEach(t),nJo=r(ZJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=n(ZJ,"A",{href:!0});var Kht=s(NO);sJo=r(Kht,"from_pretrained()"),Kht.forEach(t),lJo=r(ZJ," to load the model weights."),ZJ.forEach(t),iJo=i($l),khe=n($l,"P",{});var Zht=s(khe);dJo=r(Zht,"Examples:"),Zht.forEach(t),cJo=i($l),m($0.$$.fragment,$l),$l.forEach(t),fJo=i(Pl),eo=n(Pl,"DIV",{class:!0});var ra=s(eo);m(I0.$$.fragment,ra),mJo=i(ra),She=n(ra,"P",{});var ept=s(She);gJo=r(ept,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ept.forEach(t),hJo=i(ra),ln=n(ra,"P",{});var gC=s(ln);pJo=r(gC,"The model class to instantiate is selected based on the "),Rhe=n(gC,"CODE",{});var opt=s(Rhe);_Jo=r(opt,"model_type"),opt.forEach(t),uJo=r(gC,` property of the config object (either
passed as an argument or loaded from `),Bhe=n(gC,"CODE",{});var rpt=s(Bhe);bJo=r(rpt,"pretrained_model_name_or_path"),rpt.forEach(t),vJo=r(gC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Phe=n(gC,"CODE",{});var tpt=s(Phe);FJo=r(tpt,"pretrained_model_name_or_path"),tpt.forEach(t),TJo=r(gC,":"),gC.forEach(t),MJo=i(ra),q0=n(ra,"UL",{});var dqe=s(q0);b3=n(dqe,"LI",{});var d9e=s(b3);$he=n(d9e,"STRONG",{});var apt=s($he);EJo=r(apt,"speech-encoder-decoder"),apt.forEach(t),CJo=r(d9e," \u2014 "),jO=n(d9e,"A",{href:!0});var npt=s(jO);wJo=r(npt,"SpeechEncoderDecoderModel"),npt.forEach(t),AJo=r(d9e," (Speech Encoder decoder model)"),d9e.forEach(t),yJo=i(dqe),v3=n(dqe,"LI",{});var c9e=s(v3);Ihe=n(c9e,"STRONG",{});var spt=s(Ihe);LJo=r(spt,"speech_to_text"),spt.forEach(t),xJo=r(c9e," \u2014 "),DO=n(c9e,"A",{href:!0});var lpt=s(DO);kJo=r(lpt,"Speech2TextForConditionalGeneration"),lpt.forEach(t),SJo=r(c9e," (Speech2Text model)"),c9e.forEach(t),dqe.forEach(t),RJo=i(ra),F3=n(ra,"P",{});var f9e=s(F3);BJo=r(f9e,"The model is set in evaluation mode by default using "),qhe=n(f9e,"CODE",{});var ipt=s(qhe);PJo=r(ipt,"model.eval()"),ipt.forEach(t),$Jo=r(f9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=n(f9e,"CODE",{});var dpt=s(Nhe);IJo=r(dpt,"model.train()"),dpt.forEach(t),f9e.forEach(t),qJo=i(ra),jhe=n(ra,"P",{});var cpt=s(jhe);NJo=r(cpt,"Examples:"),cpt.forEach(t),jJo=i(ra),m(N0.$$.fragment,ra),ra.forEach(t),Pl.forEach(t),e$e=i(c),rc=n(c,"H2",{class:!0});var cqe=s(rc);T3=n(cqe,"A",{id:!0,class:!0,href:!0});var fpt=s(T3);Dhe=n(fpt,"SPAN",{});var mpt=s(Dhe);m(j0.$$.fragment,mpt),mpt.forEach(t),fpt.forEach(t),DJo=i(cqe),Ghe=n(cqe,"SPAN",{});var gpt=s(Ghe);GJo=r(gpt,"AutoModelForAudioXVector"),gpt.forEach(t),cqe.forEach(t),o$e=i(c),gr=n(c,"DIV",{class:!0});var Il=s(gr);m(D0.$$.fragment,Il),OJo=i(Il),tc=n(Il,"P",{});var eY=s(tc);VJo=r(eY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),GO=n(eY,"A",{href:!0});var hpt=s(GO);XJo=r(hpt,"from_pretrained()"),hpt.forEach(t),zJo=r(eY," class method or the "),OO=n(eY,"A",{href:!0});var ppt=s(OO);QJo=r(ppt,"from_config()"),ppt.forEach(t),WJo=r(eY,` class
method.`),eY.forEach(t),HJo=i(Il),G0=n(Il,"P",{});var fqe=s(G0);UJo=r(fqe,"This class cannot be instantiated directly using "),Ohe=n(fqe,"CODE",{});var _pt=s(Ohe);JJo=r(_pt,"__init__()"),_pt.forEach(t),YJo=r(fqe," (throws an error)."),fqe.forEach(t),KJo=i(Il),lt=n(Il,"DIV",{class:!0});var ql=s(lt);m(O0.$$.fragment,ql),ZJo=i(ql),Vhe=n(ql,"P",{});var upt=s(Vhe);eYo=r(upt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),upt.forEach(t),oYo=i(ql),ac=n(ql,"P",{});var oY=s(ac);rYo=r(oY,`Note:
Loading a model from its configuration file does `),Xhe=n(oY,"STRONG",{});var bpt=s(Xhe);tYo=r(bpt,"not"),bpt.forEach(t),aYo=r(oY,` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=n(oY,"A",{href:!0});var vpt=s(VO);nYo=r(vpt,"from_pretrained()"),vpt.forEach(t),sYo=r(oY," to load the model weights."),oY.forEach(t),lYo=i(ql),zhe=n(ql,"P",{});var Fpt=s(zhe);iYo=r(Fpt,"Examples:"),Fpt.forEach(t),dYo=i(ql),m(V0.$$.fragment,ql),ql.forEach(t),cYo=i(Il),oo=n(Il,"DIV",{class:!0});var ta=s(oo);m(X0.$$.fragment,ta),fYo=i(ta),Qhe=n(ta,"P",{});var Tpt=s(Qhe);mYo=r(Tpt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Tpt.forEach(t),gYo=i(ta),dn=n(ta,"P",{});var hC=s(dn);hYo=r(hC,"The model class to instantiate is selected based on the "),Whe=n(hC,"CODE",{});var Mpt=s(Whe);pYo=r(Mpt,"model_type"),Mpt.forEach(t),_Yo=r(hC,` property of the config object (either
passed as an argument or loaded from `),Hhe=n(hC,"CODE",{});var Ept=s(Hhe);uYo=r(Ept,"pretrained_model_name_or_path"),Ept.forEach(t),bYo=r(hC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=n(hC,"CODE",{});var Cpt=s(Uhe);vYo=r(Cpt,"pretrained_model_name_or_path"),Cpt.forEach(t),FYo=r(hC,":"),hC.forEach(t),TYo=i(ta),cn=n(ta,"UL",{});var pC=s(cn);M3=n(pC,"LI",{});var m9e=s(M3);Jhe=n(m9e,"STRONG",{});var wpt=s(Jhe);MYo=r(wpt,"data2vec-audio"),wpt.forEach(t),EYo=r(m9e," \u2014 "),XO=n(m9e,"A",{href:!0});var Apt=s(XO);CYo=r(Apt,"Data2VecAudioForXVector"),Apt.forEach(t),wYo=r(m9e," (Data2VecAudio model)"),m9e.forEach(t),AYo=i(pC),E3=n(pC,"LI",{});var g9e=s(E3);Yhe=n(g9e,"STRONG",{});var ypt=s(Yhe);yYo=r(ypt,"unispeech-sat"),ypt.forEach(t),LYo=r(g9e," \u2014 "),zO=n(g9e,"A",{href:!0});var Lpt=s(zO);xYo=r(Lpt,"UniSpeechSatForXVector"),Lpt.forEach(t),kYo=r(g9e," (UniSpeechSat model)"),g9e.forEach(t),SYo=i(pC),C3=n(pC,"LI",{});var h9e=s(C3);Khe=n(h9e,"STRONG",{});var xpt=s(Khe);RYo=r(xpt,"wav2vec2"),xpt.forEach(t),BYo=r(h9e," \u2014 "),QO=n(h9e,"A",{href:!0});var kpt=s(QO);PYo=r(kpt,"Wav2Vec2ForXVector"),kpt.forEach(t),$Yo=r(h9e," (Wav2Vec2 model)"),h9e.forEach(t),IYo=i(pC),w3=n(pC,"LI",{});var p9e=s(w3);Zhe=n(p9e,"STRONG",{});var Spt=s(Zhe);qYo=r(Spt,"wavlm"),Spt.forEach(t),NYo=r(p9e," \u2014 "),WO=n(p9e,"A",{href:!0});var Rpt=s(WO);jYo=r(Rpt,"WavLMForXVector"),Rpt.forEach(t),DYo=r(p9e," (WavLM model)"),p9e.forEach(t),pC.forEach(t),GYo=i(ta),A3=n(ta,"P",{});var _9e=s(A3);OYo=r(_9e,"The model is set in evaluation mode by default using "),epe=n(_9e,"CODE",{});var Bpt=s(epe);VYo=r(Bpt,"model.eval()"),Bpt.forEach(t),XYo=r(_9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=n(_9e,"CODE",{});var Ppt=s(ope);zYo=r(Ppt,"model.train()"),Ppt.forEach(t),_9e.forEach(t),QYo=i(ta),rpe=n(ta,"P",{});var $pt=s(rpe);WYo=r($pt,"Examples:"),$pt.forEach(t),HYo=i(ta),m(z0.$$.fragment,ta),ta.forEach(t),Il.forEach(t),r$e=i(c),nc=n(c,"H2",{class:!0});var mqe=s(nc);y3=n(mqe,"A",{id:!0,class:!0,href:!0});var Ipt=s(y3);tpe=n(Ipt,"SPAN",{});var qpt=s(tpe);m(Q0.$$.fragment,qpt),qpt.forEach(t),Ipt.forEach(t),UYo=i(mqe),ape=n(mqe,"SPAN",{});var Npt=s(ape);JYo=r(Npt,"AutoModelForMaskedImageModeling"),Npt.forEach(t),mqe.forEach(t),t$e=i(c),hr=n(c,"DIV",{class:!0});var Nl=s(hr);m(W0.$$.fragment,Nl),YYo=i(Nl),sc=n(Nl,"P",{});var rY=s(sc);KYo=r(rY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),HO=n(rY,"A",{href:!0});var jpt=s(HO);ZYo=r(jpt,"from_pretrained()"),jpt.forEach(t),eKo=r(rY," class method or the "),UO=n(rY,"A",{href:!0});var Dpt=s(UO);oKo=r(Dpt,"from_config()"),Dpt.forEach(t),rKo=r(rY,` class
method.`),rY.forEach(t),tKo=i(Nl),H0=n(Nl,"P",{});var gqe=s(H0);aKo=r(gqe,"This class cannot be instantiated directly using "),npe=n(gqe,"CODE",{});var Gpt=s(npe);nKo=r(Gpt,"__init__()"),Gpt.forEach(t),sKo=r(gqe," (throws an error)."),gqe.forEach(t),lKo=i(Nl),it=n(Nl,"DIV",{class:!0});var jl=s(it);m(U0.$$.fragment,jl),iKo=i(jl),spe=n(jl,"P",{});var Opt=s(spe);dKo=r(Opt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Opt.forEach(t),cKo=i(jl),lc=n(jl,"P",{});var tY=s(lc);fKo=r(tY,`Note:
Loading a model from its configuration file does `),lpe=n(tY,"STRONG",{});var Vpt=s(lpe);mKo=r(Vpt,"not"),Vpt.forEach(t),gKo=r(tY,` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=n(tY,"A",{href:!0});var Xpt=s(JO);hKo=r(Xpt,"from_pretrained()"),Xpt.forEach(t),pKo=r(tY," to load the model weights."),tY.forEach(t),_Ko=i(jl),ipe=n(jl,"P",{});var zpt=s(ipe);uKo=r(zpt,"Examples:"),zpt.forEach(t),bKo=i(jl),m(J0.$$.fragment,jl),jl.forEach(t),vKo=i(Nl),ro=n(Nl,"DIV",{class:!0});var aa=s(ro);m(Y0.$$.fragment,aa),FKo=i(aa),dpe=n(aa,"P",{});var Qpt=s(dpe);TKo=r(Qpt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Qpt.forEach(t),MKo=i(aa),fn=n(aa,"P",{});var _C=s(fn);EKo=r(_C,"The model class to instantiate is selected based on the "),cpe=n(_C,"CODE",{});var Wpt=s(cpe);CKo=r(Wpt,"model_type"),Wpt.forEach(t),wKo=r(_C,` property of the config object (either
passed as an argument or loaded from `),fpe=n(_C,"CODE",{});var Hpt=s(fpe);AKo=r(Hpt,"pretrained_model_name_or_path"),Hpt.forEach(t),yKo=r(_C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=n(_C,"CODE",{});var Upt=s(mpe);LKo=r(Upt,"pretrained_model_name_or_path"),Upt.forEach(t),xKo=r(_C,":"),_C.forEach(t),kKo=i(aa),ic=n(aa,"UL",{});var aY=s(ic);L3=n(aY,"LI",{});var u9e=s(L3);gpe=n(u9e,"STRONG",{});var Jpt=s(gpe);SKo=r(Jpt,"deit"),Jpt.forEach(t),RKo=r(u9e," \u2014 "),YO=n(u9e,"A",{href:!0});var Ypt=s(YO);BKo=r(Ypt,"DeiTForMaskedImageModeling"),Ypt.forEach(t),PKo=r(u9e," (DeiT model)"),u9e.forEach(t),$Ko=i(aY),x3=n(aY,"LI",{});var b9e=s(x3);hpe=n(b9e,"STRONG",{});var Kpt=s(hpe);IKo=r(Kpt,"swin"),Kpt.forEach(t),qKo=r(b9e," \u2014 "),KO=n(b9e,"A",{href:!0});var Zpt=s(KO);NKo=r(Zpt,"SwinForMaskedImageModeling"),Zpt.forEach(t),jKo=r(b9e," (Swin model)"),b9e.forEach(t),DKo=i(aY),k3=n(aY,"LI",{});var v9e=s(k3);ppe=n(v9e,"STRONG",{});var e_t=s(ppe);GKo=r(e_t,"vit"),e_t.forEach(t),OKo=r(v9e," \u2014 "),ZO=n(v9e,"A",{href:!0});var o_t=s(ZO);VKo=r(o_t,"ViTForMaskedImageModeling"),o_t.forEach(t),XKo=r(v9e," (ViT model)"),v9e.forEach(t),aY.forEach(t),zKo=i(aa),S3=n(aa,"P",{});var F9e=s(S3);QKo=r(F9e,"The model is set in evaluation mode by default using "),_pe=n(F9e,"CODE",{});var r_t=s(_pe);WKo=r(r_t,"model.eval()"),r_t.forEach(t),HKo=r(F9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),upe=n(F9e,"CODE",{});var t_t=s(upe);UKo=r(t_t,"model.train()"),t_t.forEach(t),F9e.forEach(t),JKo=i(aa),bpe=n(aa,"P",{});var a_t=s(bpe);YKo=r(a_t,"Examples:"),a_t.forEach(t),KKo=i(aa),m(K0.$$.fragment,aa),aa.forEach(t),Nl.forEach(t),a$e=i(c),dc=n(c,"H2",{class:!0});var hqe=s(dc);R3=n(hqe,"A",{id:!0,class:!0,href:!0});var n_t=s(R3);vpe=n(n_t,"SPAN",{});var s_t=s(vpe);m(Z0.$$.fragment,s_t),s_t.forEach(t),n_t.forEach(t),ZKo=i(hqe),Fpe=n(hqe,"SPAN",{});var l_t=s(Fpe);eZo=r(l_t,"AutoModelForObjectDetection"),l_t.forEach(t),hqe.forEach(t),n$e=i(c),pr=n(c,"DIV",{class:!0});var Dl=s(pr);m(ey.$$.fragment,Dl),oZo=i(Dl),cc=n(Dl,"P",{});var nY=s(cc);rZo=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),eV=n(nY,"A",{href:!0});var i_t=s(eV);tZo=r(i_t,"from_pretrained()"),i_t.forEach(t),aZo=r(nY," class method or the "),oV=n(nY,"A",{href:!0});var d_t=s(oV);nZo=r(d_t,"from_config()"),d_t.forEach(t),sZo=r(nY,` class
method.`),nY.forEach(t),lZo=i(Dl),oy=n(Dl,"P",{});var pqe=s(oy);iZo=r(pqe,"This class cannot be instantiated directly using "),Tpe=n(pqe,"CODE",{});var c_t=s(Tpe);dZo=r(c_t,"__init__()"),c_t.forEach(t),cZo=r(pqe," (throws an error)."),pqe.forEach(t),fZo=i(Dl),dt=n(Dl,"DIV",{class:!0});var Gl=s(dt);m(ry.$$.fragment,Gl),mZo=i(Gl),Mpe=n(Gl,"P",{});var f_t=s(Mpe);gZo=r(f_t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),f_t.forEach(t),hZo=i(Gl),fc=n(Gl,"P",{});var sY=s(fc);pZo=r(sY,`Note:
Loading a model from its configuration file does `),Epe=n(sY,"STRONG",{});var m_t=s(Epe);_Zo=r(m_t,"not"),m_t.forEach(t),uZo=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),rV=n(sY,"A",{href:!0});var g_t=s(rV);bZo=r(g_t,"from_pretrained()"),g_t.forEach(t),vZo=r(sY," to load the model weights."),sY.forEach(t),FZo=i(Gl),Cpe=n(Gl,"P",{});var h_t=s(Cpe);TZo=r(h_t,"Examples:"),h_t.forEach(t),MZo=i(Gl),m(ty.$$.fragment,Gl),Gl.forEach(t),EZo=i(Dl),to=n(Dl,"DIV",{class:!0});var na=s(to);m(ay.$$.fragment,na),CZo=i(na),wpe=n(na,"P",{});var p_t=s(wpe);wZo=r(p_t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),p_t.forEach(t),AZo=i(na),mn=n(na,"P",{});var uC=s(mn);yZo=r(uC,"The model class to instantiate is selected based on the "),Ape=n(uC,"CODE",{});var __t=s(Ape);LZo=r(__t,"model_type"),__t.forEach(t),xZo=r(uC,` property of the config object (either
passed as an argument or loaded from `),ype=n(uC,"CODE",{});var u_t=s(ype);kZo=r(u_t,"pretrained_model_name_or_path"),u_t.forEach(t),SZo=r(uC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=n(uC,"CODE",{});var b_t=s(Lpe);RZo=r(b_t,"pretrained_model_name_or_path"),b_t.forEach(t),BZo=r(uC,":"),uC.forEach(t),PZo=i(na),xpe=n(na,"UL",{});var v_t=s(xpe);B3=n(v_t,"LI",{});var T9e=s(B3);kpe=n(T9e,"STRONG",{});var F_t=s(kpe);$Zo=r(F_t,"detr"),F_t.forEach(t),IZo=r(T9e," \u2014 "),tV=n(T9e,"A",{href:!0});var T_t=s(tV);qZo=r(T_t,"DetrForObjectDetection"),T_t.forEach(t),NZo=r(T9e," (DETR model)"),T9e.forEach(t),v_t.forEach(t),jZo=i(na),P3=n(na,"P",{});var M9e=s(P3);DZo=r(M9e,"The model is set in evaluation mode by default using "),Spe=n(M9e,"CODE",{});var M_t=s(Spe);GZo=r(M_t,"model.eval()"),M_t.forEach(t),OZo=r(M9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=n(M9e,"CODE",{});var E_t=s(Rpe);VZo=r(E_t,"model.train()"),E_t.forEach(t),M9e.forEach(t),XZo=i(na),Bpe=n(na,"P",{});var C_t=s(Bpe);zZo=r(C_t,"Examples:"),C_t.forEach(t),QZo=i(na),m(ny.$$.fragment,na),na.forEach(t),Dl.forEach(t),s$e=i(c),mc=n(c,"H2",{class:!0});var _qe=s(mc);$3=n(_qe,"A",{id:!0,class:!0,href:!0});var w_t=s($3);Ppe=n(w_t,"SPAN",{});var A_t=s(Ppe);m(sy.$$.fragment,A_t),A_t.forEach(t),w_t.forEach(t),WZo=i(_qe),$pe=n(_qe,"SPAN",{});var y_t=s($pe);HZo=r(y_t,"AutoModelForImageSegmentation"),y_t.forEach(t),_qe.forEach(t),l$e=i(c),_r=n(c,"DIV",{class:!0});var Ol=s(_r);m(ly.$$.fragment,Ol),UZo=i(Ol),gc=n(Ol,"P",{});var lY=s(gc);JZo=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),aV=n(lY,"A",{href:!0});var L_t=s(aV);YZo=r(L_t,"from_pretrained()"),L_t.forEach(t),KZo=r(lY," class method or the "),nV=n(lY,"A",{href:!0});var x_t=s(nV);ZZo=r(x_t,"from_config()"),x_t.forEach(t),eer=r(lY,` class
method.`),lY.forEach(t),oer=i(Ol),iy=n(Ol,"P",{});var uqe=s(iy);rer=r(uqe,"This class cannot be instantiated directly using "),Ipe=n(uqe,"CODE",{});var k_t=s(Ipe);ter=r(k_t,"__init__()"),k_t.forEach(t),aer=r(uqe," (throws an error)."),uqe.forEach(t),ner=i(Ol),ct=n(Ol,"DIV",{class:!0});var Vl=s(ct);m(dy.$$.fragment,Vl),ser=i(Vl),qpe=n(Vl,"P",{});var S_t=s(qpe);ler=r(S_t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),S_t.forEach(t),ier=i(Vl),hc=n(Vl,"P",{});var iY=s(hc);der=r(iY,`Note:
Loading a model from its configuration file does `),Npe=n(iY,"STRONG",{});var R_t=s(Npe);cer=r(R_t,"not"),R_t.forEach(t),fer=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=n(iY,"A",{href:!0});var B_t=s(sV);mer=r(B_t,"from_pretrained()"),B_t.forEach(t),ger=r(iY," to load the model weights."),iY.forEach(t),her=i(Vl),jpe=n(Vl,"P",{});var P_t=s(jpe);per=r(P_t,"Examples:"),P_t.forEach(t),_er=i(Vl),m(cy.$$.fragment,Vl),Vl.forEach(t),uer=i(Ol),ao=n(Ol,"DIV",{class:!0});var sa=s(ao);m(fy.$$.fragment,sa),ber=i(sa),Dpe=n(sa,"P",{});var $_t=s(Dpe);ver=r($_t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),$_t.forEach(t),Fer=i(sa),gn=n(sa,"P",{});var bC=s(gn);Ter=r(bC,"The model class to instantiate is selected based on the "),Gpe=n(bC,"CODE",{});var I_t=s(Gpe);Mer=r(I_t,"model_type"),I_t.forEach(t),Eer=r(bC,` property of the config object (either
passed as an argument or loaded from `),Ope=n(bC,"CODE",{});var q_t=s(Ope);Cer=r(q_t,"pretrained_model_name_or_path"),q_t.forEach(t),wer=r(bC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=n(bC,"CODE",{});var N_t=s(Vpe);Aer=r(N_t,"pretrained_model_name_or_path"),N_t.forEach(t),yer=r(bC,":"),bC.forEach(t),Ler=i(sa),Xpe=n(sa,"UL",{});var j_t=s(Xpe);I3=n(j_t,"LI",{});var E9e=s(I3);zpe=n(E9e,"STRONG",{});var D_t=s(zpe);xer=r(D_t,"detr"),D_t.forEach(t),ker=r(E9e," \u2014 "),lV=n(E9e,"A",{href:!0});var G_t=s(lV);Ser=r(G_t,"DetrForSegmentation"),G_t.forEach(t),Rer=r(E9e," (DETR model)"),E9e.forEach(t),j_t.forEach(t),Ber=i(sa),q3=n(sa,"P",{});var C9e=s(q3);Per=r(C9e,"The model is set in evaluation mode by default using "),Qpe=n(C9e,"CODE",{});var O_t=s(Qpe);$er=r(O_t,"model.eval()"),O_t.forEach(t),Ier=r(C9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=n(C9e,"CODE",{});var V_t=s(Wpe);qer=r(V_t,"model.train()"),V_t.forEach(t),C9e.forEach(t),Ner=i(sa),Hpe=n(sa,"P",{});var X_t=s(Hpe);jer=r(X_t,"Examples:"),X_t.forEach(t),Der=i(sa),m(my.$$.fragment,sa),sa.forEach(t),Ol.forEach(t),i$e=i(c),pc=n(c,"H2",{class:!0});var bqe=s(pc);N3=n(bqe,"A",{id:!0,class:!0,href:!0});var z_t=s(N3);Upe=n(z_t,"SPAN",{});var Q_t=s(Upe);m(gy.$$.fragment,Q_t),Q_t.forEach(t),z_t.forEach(t),Ger=i(bqe),Jpe=n(bqe,"SPAN",{});var W_t=s(Jpe);Oer=r(W_t,"AutoModelForSemanticSegmentation"),W_t.forEach(t),bqe.forEach(t),d$e=i(c),ur=n(c,"DIV",{class:!0});var Xl=s(ur);m(hy.$$.fragment,Xl),Ver=i(Xl),_c=n(Xl,"P",{});var dY=s(_c);Xer=r(dY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iV=n(dY,"A",{href:!0});var H_t=s(iV);zer=r(H_t,"from_pretrained()"),H_t.forEach(t),Qer=r(dY," class method or the "),dV=n(dY,"A",{href:!0});var U_t=s(dV);Wer=r(U_t,"from_config()"),U_t.forEach(t),Her=r(dY,` class
method.`),dY.forEach(t),Uer=i(Xl),py=n(Xl,"P",{});var vqe=s(py);Jer=r(vqe,"This class cannot be instantiated directly using "),Ype=n(vqe,"CODE",{});var J_t=s(Ype);Yer=r(J_t,"__init__()"),J_t.forEach(t),Ker=r(vqe," (throws an error)."),vqe.forEach(t),Zer=i(Xl),ft=n(Xl,"DIV",{class:!0});var zl=s(ft);m(_y.$$.fragment,zl),eor=i(zl),Kpe=n(zl,"P",{});var Y_t=s(Kpe);oor=r(Y_t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Y_t.forEach(t),ror=i(zl),uc=n(zl,"P",{});var cY=s(uc);tor=r(cY,`Note:
Loading a model from its configuration file does `),Zpe=n(cY,"STRONG",{});var K_t=s(Zpe);aor=r(K_t,"not"),K_t.forEach(t),nor=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=n(cY,"A",{href:!0});var Z_t=s(cV);sor=r(Z_t,"from_pretrained()"),Z_t.forEach(t),lor=r(cY," to load the model weights."),cY.forEach(t),ior=i(zl),e_e=n(zl,"P",{});var eut=s(e_e);dor=r(eut,"Examples:"),eut.forEach(t),cor=i(zl),m(uy.$$.fragment,zl),zl.forEach(t),mor=i(Xl),no=n(Xl,"DIV",{class:!0});var la=s(no);m(by.$$.fragment,la),gor=i(la),o_e=n(la,"P",{});var out=s(o_e);hor=r(out,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),out.forEach(t),por=i(la),hn=n(la,"P",{});var vC=s(hn);_or=r(vC,"The model class to instantiate is selected based on the "),r_e=n(vC,"CODE",{});var rut=s(r_e);uor=r(rut,"model_type"),rut.forEach(t),bor=r(vC,` property of the config object (either
passed as an argument or loaded from `),t_e=n(vC,"CODE",{});var tut=s(t_e);vor=r(tut,"pretrained_model_name_or_path"),tut.forEach(t),For=r(vC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=n(vC,"CODE",{});var aut=s(a_e);Tor=r(aut,"pretrained_model_name_or_path"),aut.forEach(t),Mor=r(vC,":"),vC.forEach(t),Eor=i(la),pn=n(la,"UL",{});var FC=s(pn);j3=n(FC,"LI",{});var w9e=s(j3);n_e=n(w9e,"STRONG",{});var nut=s(n_e);Cor=r(nut,"beit"),nut.forEach(t),wor=r(w9e," \u2014 "),fV=n(w9e,"A",{href:!0});var sut=s(fV);Aor=r(sut,"BeitForSemanticSegmentation"),sut.forEach(t),yor=r(w9e," (BEiT model)"),w9e.forEach(t),Lor=i(FC),D3=n(FC,"LI",{});var A9e=s(D3);s_e=n(A9e,"STRONG",{});var lut=s(s_e);xor=r(lut,"data2vec-vision"),lut.forEach(t),kor=r(A9e," \u2014 "),mV=n(A9e,"A",{href:!0});var iut=s(mV);Sor=r(iut,"Data2VecVisionForSemanticSegmentation"),iut.forEach(t),Ror=r(A9e," (Data2VecVision model)"),A9e.forEach(t),Bor=i(FC),G3=n(FC,"LI",{});var y9e=s(G3);l_e=n(y9e,"STRONG",{});var dut=s(l_e);Por=r(dut,"dpt"),dut.forEach(t),$or=r(y9e," \u2014 "),gV=n(y9e,"A",{href:!0});var cut=s(gV);Ior=r(cut,"DPTForSemanticSegmentation"),cut.forEach(t),qor=r(y9e," (DPT model)"),y9e.forEach(t),Nor=i(FC),O3=n(FC,"LI",{});var L9e=s(O3);i_e=n(L9e,"STRONG",{});var fut=s(i_e);jor=r(fut,"segformer"),fut.forEach(t),Dor=r(L9e," \u2014 "),hV=n(L9e,"A",{href:!0});var mut=s(hV);Gor=r(mut,"SegformerForSemanticSegmentation"),mut.forEach(t),Oor=r(L9e," (SegFormer model)"),L9e.forEach(t),FC.forEach(t),Vor=i(la),V3=n(la,"P",{});var x9e=s(V3);Xor=r(x9e,"The model is set in evaluation mode by default using "),d_e=n(x9e,"CODE",{});var gut=s(d_e);zor=r(gut,"model.eval()"),gut.forEach(t),Qor=r(x9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c_e=n(x9e,"CODE",{});var hut=s(c_e);Wor=r(hut,"model.train()"),hut.forEach(t),x9e.forEach(t),Hor=i(la),f_e=n(la,"P",{});var put=s(f_e);Uor=r(put,"Examples:"),put.forEach(t),Jor=i(la),m(vy.$$.fragment,la),la.forEach(t),Xl.forEach(t),c$e=i(c),bc=n(c,"H2",{class:!0});var Fqe=s(bc);X3=n(Fqe,"A",{id:!0,class:!0,href:!0});var _ut=s(X3);m_e=n(_ut,"SPAN",{});var uut=s(m_e);m(Fy.$$.fragment,uut),uut.forEach(t),_ut.forEach(t),Yor=i(Fqe),g_e=n(Fqe,"SPAN",{});var but=s(g_e);Kor=r(but,"AutoModelForInstanceSegmentation"),but.forEach(t),Fqe.forEach(t),f$e=i(c),br=n(c,"DIV",{class:!0});var Ql=s(br);m(Ty.$$.fragment,Ql),Zor=i(Ql),vc=n(Ql,"P",{});var fY=s(vc);err=r(fY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pV=n(fY,"A",{href:!0});var vut=s(pV);orr=r(vut,"from_pretrained()"),vut.forEach(t),rrr=r(fY," class method or the "),_V=n(fY,"A",{href:!0});var Fut=s(_V);trr=r(Fut,"from_config()"),Fut.forEach(t),arr=r(fY,` class
method.`),fY.forEach(t),nrr=i(Ql),My=n(Ql,"P",{});var Tqe=s(My);srr=r(Tqe,"This class cannot be instantiated directly using "),h_e=n(Tqe,"CODE",{});var Tut=s(h_e);lrr=r(Tut,"__init__()"),Tut.forEach(t),irr=r(Tqe," (throws an error)."),Tqe.forEach(t),drr=i(Ql),mt=n(Ql,"DIV",{class:!0});var Wl=s(mt);m(Ey.$$.fragment,Wl),crr=i(Wl),p_e=n(Wl,"P",{});var Mut=s(p_e);frr=r(Mut,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Mut.forEach(t),mrr=i(Wl),Fc=n(Wl,"P",{});var mY=s(Fc);grr=r(mY,`Note:
Loading a model from its configuration file does `),__e=n(mY,"STRONG",{});var Eut=s(__e);hrr=r(Eut,"not"),Eut.forEach(t),prr=r(mY,` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=n(mY,"A",{href:!0});var Cut=s(uV);_rr=r(Cut,"from_pretrained()"),Cut.forEach(t),urr=r(mY," to load the model weights."),mY.forEach(t),brr=i(Wl),u_e=n(Wl,"P",{});var wut=s(u_e);vrr=r(wut,"Examples:"),wut.forEach(t),Frr=i(Wl),m(Cy.$$.fragment,Wl),Wl.forEach(t),Trr=i(Ql),so=n(Ql,"DIV",{class:!0});var ia=s(so);m(wy.$$.fragment,ia),Mrr=i(ia),b_e=n(ia,"P",{});var Aut=s(b_e);Err=r(Aut,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Aut.forEach(t),Crr=i(ia),_n=n(ia,"P",{});var TC=s(_n);wrr=r(TC,"The model class to instantiate is selected based on the "),v_e=n(TC,"CODE",{});var yut=s(v_e);Arr=r(yut,"model_type"),yut.forEach(t),yrr=r(TC,` property of the config object (either
passed as an argument or loaded from `),F_e=n(TC,"CODE",{});var Lut=s(F_e);Lrr=r(Lut,"pretrained_model_name_or_path"),Lut.forEach(t),xrr=r(TC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=n(TC,"CODE",{});var xut=s(T_e);krr=r(xut,"pretrained_model_name_or_path"),xut.forEach(t),Srr=r(TC,":"),TC.forEach(t),Rrr=i(ia),M_e=n(ia,"UL",{});var kut=s(M_e);z3=n(kut,"LI",{});var k9e=s(z3);E_e=n(k9e,"STRONG",{});var Sut=s(E_e);Brr=r(Sut,"maskformer"),Sut.forEach(t),Prr=r(k9e," \u2014 "),bV=n(k9e,"A",{href:!0});var Rut=s(bV);$rr=r(Rut,"MaskFormerForInstanceSegmentation"),Rut.forEach(t),Irr=r(k9e," (MaskFormer model)"),k9e.forEach(t),kut.forEach(t),qrr=i(ia),Q3=n(ia,"P",{});var S9e=s(Q3);Nrr=r(S9e,"The model is set in evaluation mode by default using "),C_e=n(S9e,"CODE",{});var But=s(C_e);jrr=r(But,"model.eval()"),But.forEach(t),Drr=r(S9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=n(S9e,"CODE",{});var Put=s(w_e);Grr=r(Put,"model.train()"),Put.forEach(t),S9e.forEach(t),Orr=i(ia),A_e=n(ia,"P",{});var $ut=s(A_e);Vrr=r($ut,"Examples:"),$ut.forEach(t),Xrr=i(ia),m(Ay.$$.fragment,ia),ia.forEach(t),Ql.forEach(t),m$e=i(c),Tc=n(c,"H2",{class:!0});var Mqe=s(Tc);W3=n(Mqe,"A",{id:!0,class:!0,href:!0});var Iut=s(W3);y_e=n(Iut,"SPAN",{});var qut=s(y_e);m(yy.$$.fragment,qut),qut.forEach(t),Iut.forEach(t),zrr=i(Mqe),L_e=n(Mqe,"SPAN",{});var Nut=s(L_e);Qrr=r(Nut,"TFAutoModel"),Nut.forEach(t),Mqe.forEach(t),g$e=i(c),vr=n(c,"DIV",{class:!0});var Hl=s(vr);m(Ly.$$.fragment,Hl),Wrr=i(Hl),Mc=n(Hl,"P",{});var gY=s(Mc);Hrr=r(gY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vV=n(gY,"A",{href:!0});var jut=s(vV);Urr=r(jut,"from_pretrained()"),jut.forEach(t),Jrr=r(gY," class method or the "),FV=n(gY,"A",{href:!0});var Dut=s(FV);Yrr=r(Dut,"from_config()"),Dut.forEach(t),Krr=r(gY,` class
method.`),gY.forEach(t),Zrr=i(Hl),xy=n(Hl,"P",{});var Eqe=s(xy);etr=r(Eqe,"This class cannot be instantiated directly using "),x_e=n(Eqe,"CODE",{});var Gut=s(x_e);otr=r(Gut,"__init__()"),Gut.forEach(t),rtr=r(Eqe," (throws an error)."),Eqe.forEach(t),ttr=i(Hl),gt=n(Hl,"DIV",{class:!0});var Ul=s(gt);m(ky.$$.fragment,Ul),atr=i(Ul),k_e=n(Ul,"P",{});var Out=s(k_e);ntr=r(Out,"Instantiates one of the base model classes of the library from a configuration."),Out.forEach(t),str=i(Ul),Ec=n(Ul,"P",{});var hY=s(Ec);ltr=r(hY,`Note:
Loading a model from its configuration file does `),S_e=n(hY,"STRONG",{});var Vut=s(S_e);itr=r(Vut,"not"),Vut.forEach(t),dtr=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=n(hY,"A",{href:!0});var Xut=s(TV);ctr=r(Xut,"from_pretrained()"),Xut.forEach(t),ftr=r(hY," to load the model weights."),hY.forEach(t),mtr=i(Ul),R_e=n(Ul,"P",{});var zut=s(R_e);gtr=r(zut,"Examples:"),zut.forEach(t),htr=i(Ul),m(Sy.$$.fragment,Ul),Ul.forEach(t),ptr=i(Hl),po=n(Hl,"DIV",{class:!0});var pa=s(po);m(Ry.$$.fragment,pa),_tr=i(pa),B_e=n(pa,"P",{});var Qut=s(B_e);utr=r(Qut,"Instantiate one of the base model classes of the library from a pretrained model."),Qut.forEach(t),btr=i(pa),un=n(pa,"P",{});var MC=s(un);vtr=r(MC,"The model class to instantiate is selected based on the "),P_e=n(MC,"CODE",{});var Wut=s(P_e);Ftr=r(Wut,"model_type"),Wut.forEach(t),Ttr=r(MC,` property of the config object (either
passed as an argument or loaded from `),$_e=n(MC,"CODE",{});var Hut=s($_e);Mtr=r(Hut,"pretrained_model_name_or_path"),Hut.forEach(t),Etr=r(MC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=n(MC,"CODE",{});var Uut=s(I_e);Ctr=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),wtr=r(MC,":"),MC.forEach(t),Atr=i(pa),x=n(pa,"UL",{});var k=s(x);H3=n(k,"LI",{});var R9e=s(H3);q_e=n(R9e,"STRONG",{});var Jut=s(q_e);ytr=r(Jut,"albert"),Jut.forEach(t),Ltr=r(R9e," \u2014 "),MV=n(R9e,"A",{href:!0});var Yut=s(MV);xtr=r(Yut,"TFAlbertModel"),Yut.forEach(t),ktr=r(R9e," (ALBERT model)"),R9e.forEach(t),Str=i(k),U3=n(k,"LI",{});var B9e=s(U3);N_e=n(B9e,"STRONG",{});var Kut=s(N_e);Rtr=r(Kut,"bart"),Kut.forEach(t),Btr=r(B9e," \u2014 "),EV=n(B9e,"A",{href:!0});var Zut=s(EV);Ptr=r(Zut,"TFBartModel"),Zut.forEach(t),$tr=r(B9e," (BART model)"),B9e.forEach(t),Itr=i(k),J3=n(k,"LI",{});var P9e=s(J3);j_e=n(P9e,"STRONG",{});var e1t=s(j_e);qtr=r(e1t,"bert"),e1t.forEach(t),Ntr=r(P9e," \u2014 "),CV=n(P9e,"A",{href:!0});var o1t=s(CV);jtr=r(o1t,"TFBertModel"),o1t.forEach(t),Dtr=r(P9e," (BERT model)"),P9e.forEach(t),Gtr=i(k),Y3=n(k,"LI",{});var $9e=s(Y3);D_e=n($9e,"STRONG",{});var r1t=s(D_e);Otr=r(r1t,"blenderbot"),r1t.forEach(t),Vtr=r($9e," \u2014 "),wV=n($9e,"A",{href:!0});var t1t=s(wV);Xtr=r(t1t,"TFBlenderbotModel"),t1t.forEach(t),ztr=r($9e," (Blenderbot model)"),$9e.forEach(t),Qtr=i(k),K3=n(k,"LI",{});var I9e=s(K3);G_e=n(I9e,"STRONG",{});var a1t=s(G_e);Wtr=r(a1t,"blenderbot-small"),a1t.forEach(t),Htr=r(I9e," \u2014 "),AV=n(I9e,"A",{href:!0});var n1t=s(AV);Utr=r(n1t,"TFBlenderbotSmallModel"),n1t.forEach(t),Jtr=r(I9e," (BlenderbotSmall model)"),I9e.forEach(t),Ytr=i(k),Z3=n(k,"LI",{});var q9e=s(Z3);O_e=n(q9e,"STRONG",{});var s1t=s(O_e);Ktr=r(s1t,"camembert"),s1t.forEach(t),Ztr=r(q9e," \u2014 "),yV=n(q9e,"A",{href:!0});var l1t=s(yV);ear=r(l1t,"TFCamembertModel"),l1t.forEach(t),oar=r(q9e," (CamemBERT model)"),q9e.forEach(t),rar=i(k),e6=n(k,"LI",{});var N9e=s(e6);V_e=n(N9e,"STRONG",{});var i1t=s(V_e);tar=r(i1t,"clip"),i1t.forEach(t),aar=r(N9e," \u2014 "),LV=n(N9e,"A",{href:!0});var d1t=s(LV);nar=r(d1t,"TFCLIPModel"),d1t.forEach(t),sar=r(N9e," (CLIP model)"),N9e.forEach(t),lar=i(k),o6=n(k,"LI",{});var j9e=s(o6);X_e=n(j9e,"STRONG",{});var c1t=s(X_e);iar=r(c1t,"convbert"),c1t.forEach(t),dar=r(j9e," \u2014 "),xV=n(j9e,"A",{href:!0});var f1t=s(xV);car=r(f1t,"TFConvBertModel"),f1t.forEach(t),far=r(j9e," (ConvBERT model)"),j9e.forEach(t),mar=i(k),r6=n(k,"LI",{});var D9e=s(r6);z_e=n(D9e,"STRONG",{});var m1t=s(z_e);gar=r(m1t,"convnext"),m1t.forEach(t),har=r(D9e," \u2014 "),kV=n(D9e,"A",{href:!0});var g1t=s(kV);par=r(g1t,"TFConvNextModel"),g1t.forEach(t),_ar=r(D9e," (ConvNext model)"),D9e.forEach(t),uar=i(k),t6=n(k,"LI",{});var G9e=s(t6);Q_e=n(G9e,"STRONG",{});var h1t=s(Q_e);bar=r(h1t,"ctrl"),h1t.forEach(t),Far=r(G9e," \u2014 "),SV=n(G9e,"A",{href:!0});var p1t=s(SV);Tar=r(p1t,"TFCTRLModel"),p1t.forEach(t),Mar=r(G9e," (CTRL model)"),G9e.forEach(t),Ear=i(k),a6=n(k,"LI",{});var O9e=s(a6);W_e=n(O9e,"STRONG",{});var _1t=s(W_e);Car=r(_1t,"deberta"),_1t.forEach(t),war=r(O9e," \u2014 "),RV=n(O9e,"A",{href:!0});var u1t=s(RV);Aar=r(u1t,"TFDebertaModel"),u1t.forEach(t),yar=r(O9e," (DeBERTa model)"),O9e.forEach(t),Lar=i(k),n6=n(k,"LI",{});var V9e=s(n6);H_e=n(V9e,"STRONG",{});var b1t=s(H_e);xar=r(b1t,"deberta-v2"),b1t.forEach(t),kar=r(V9e," \u2014 "),BV=n(V9e,"A",{href:!0});var v1t=s(BV);Sar=r(v1t,"TFDebertaV2Model"),v1t.forEach(t),Rar=r(V9e," (DeBERTa-v2 model)"),V9e.forEach(t),Bar=i(k),s6=n(k,"LI",{});var X9e=s(s6);U_e=n(X9e,"STRONG",{});var F1t=s(U_e);Par=r(F1t,"distilbert"),F1t.forEach(t),$ar=r(X9e," \u2014 "),PV=n(X9e,"A",{href:!0});var T1t=s(PV);Iar=r(T1t,"TFDistilBertModel"),T1t.forEach(t),qar=r(X9e," (DistilBERT model)"),X9e.forEach(t),Nar=i(k),l6=n(k,"LI",{});var z9e=s(l6);J_e=n(z9e,"STRONG",{});var M1t=s(J_e);jar=r(M1t,"dpr"),M1t.forEach(t),Dar=r(z9e," \u2014 "),$V=n(z9e,"A",{href:!0});var E1t=s($V);Gar=r(E1t,"TFDPRQuestionEncoder"),E1t.forEach(t),Oar=r(z9e," (DPR model)"),z9e.forEach(t),Var=i(k),i6=n(k,"LI",{});var Q9e=s(i6);Y_e=n(Q9e,"STRONG",{});var C1t=s(Y_e);Xar=r(C1t,"electra"),C1t.forEach(t),zar=r(Q9e," \u2014 "),IV=n(Q9e,"A",{href:!0});var w1t=s(IV);Qar=r(w1t,"TFElectraModel"),w1t.forEach(t),War=r(Q9e," (ELECTRA model)"),Q9e.forEach(t),Har=i(k),d6=n(k,"LI",{});var W9e=s(d6);K_e=n(W9e,"STRONG",{});var A1t=s(K_e);Uar=r(A1t,"flaubert"),A1t.forEach(t),Jar=r(W9e," \u2014 "),qV=n(W9e,"A",{href:!0});var y1t=s(qV);Yar=r(y1t,"TFFlaubertModel"),y1t.forEach(t),Kar=r(W9e," (FlauBERT model)"),W9e.forEach(t),Zar=i(k),Js=n(k,"LI",{});var Q9=s(Js);Z_e=n(Q9,"STRONG",{});var L1t=s(Z_e);enr=r(L1t,"funnel"),L1t.forEach(t),onr=r(Q9," \u2014 "),NV=n(Q9,"A",{href:!0});var x1t=s(NV);rnr=r(x1t,"TFFunnelModel"),x1t.forEach(t),tnr=r(Q9," or "),jV=n(Q9,"A",{href:!0});var k1t=s(jV);anr=r(k1t,"TFFunnelBaseModel"),k1t.forEach(t),nnr=r(Q9," (Funnel Transformer model)"),Q9.forEach(t),snr=i(k),c6=n(k,"LI",{});var H9e=s(c6);eue=n(H9e,"STRONG",{});var S1t=s(eue);lnr=r(S1t,"gpt2"),S1t.forEach(t),inr=r(H9e," \u2014 "),DV=n(H9e,"A",{href:!0});var R1t=s(DV);dnr=r(R1t,"TFGPT2Model"),R1t.forEach(t),cnr=r(H9e," (OpenAI GPT-2 model)"),H9e.forEach(t),fnr=i(k),f6=n(k,"LI",{});var U9e=s(f6);oue=n(U9e,"STRONG",{});var B1t=s(oue);mnr=r(B1t,"gptj"),B1t.forEach(t),gnr=r(U9e," \u2014 "),GV=n(U9e,"A",{href:!0});var P1t=s(GV);hnr=r(P1t,"TFGPTJModel"),P1t.forEach(t),pnr=r(U9e," (GPT-J model)"),U9e.forEach(t),_nr=i(k),m6=n(k,"LI",{});var J9e=s(m6);rue=n(J9e,"STRONG",{});var $1t=s(rue);unr=r($1t,"hubert"),$1t.forEach(t),bnr=r(J9e," \u2014 "),OV=n(J9e,"A",{href:!0});var I1t=s(OV);vnr=r(I1t,"TFHubertModel"),I1t.forEach(t),Fnr=r(J9e," (Hubert model)"),J9e.forEach(t),Tnr=i(k),g6=n(k,"LI",{});var Y9e=s(g6);tue=n(Y9e,"STRONG",{});var q1t=s(tue);Mnr=r(q1t,"layoutlm"),q1t.forEach(t),Enr=r(Y9e," \u2014 "),VV=n(Y9e,"A",{href:!0});var N1t=s(VV);Cnr=r(N1t,"TFLayoutLMModel"),N1t.forEach(t),wnr=r(Y9e," (LayoutLM model)"),Y9e.forEach(t),Anr=i(k),h6=n(k,"LI",{});var K9e=s(h6);aue=n(K9e,"STRONG",{});var j1t=s(aue);ynr=r(j1t,"led"),j1t.forEach(t),Lnr=r(K9e," \u2014 "),XV=n(K9e,"A",{href:!0});var D1t=s(XV);xnr=r(D1t,"TFLEDModel"),D1t.forEach(t),knr=r(K9e," (LED model)"),K9e.forEach(t),Snr=i(k),p6=n(k,"LI",{});var Z9e=s(p6);nue=n(Z9e,"STRONG",{});var G1t=s(nue);Rnr=r(G1t,"longformer"),G1t.forEach(t),Bnr=r(Z9e," \u2014 "),zV=n(Z9e,"A",{href:!0});var O1t=s(zV);Pnr=r(O1t,"TFLongformerModel"),O1t.forEach(t),$nr=r(Z9e," (Longformer model)"),Z9e.forEach(t),Inr=i(k),_6=n(k,"LI",{});var exe=s(_6);sue=n(exe,"STRONG",{});var V1t=s(sue);qnr=r(V1t,"lxmert"),V1t.forEach(t),Nnr=r(exe," \u2014 "),QV=n(exe,"A",{href:!0});var X1t=s(QV);jnr=r(X1t,"TFLxmertModel"),X1t.forEach(t),Dnr=r(exe," (LXMERT model)"),exe.forEach(t),Gnr=i(k),u6=n(k,"LI",{});var oxe=s(u6);lue=n(oxe,"STRONG",{});var z1t=s(lue);Onr=r(z1t,"marian"),z1t.forEach(t),Vnr=r(oxe," \u2014 "),WV=n(oxe,"A",{href:!0});var Q1t=s(WV);Xnr=r(Q1t,"TFMarianModel"),Q1t.forEach(t),znr=r(oxe," (Marian model)"),oxe.forEach(t),Qnr=i(k),b6=n(k,"LI",{});var rxe=s(b6);iue=n(rxe,"STRONG",{});var W1t=s(iue);Wnr=r(W1t,"mbart"),W1t.forEach(t),Hnr=r(rxe," \u2014 "),HV=n(rxe,"A",{href:!0});var H1t=s(HV);Unr=r(H1t,"TFMBartModel"),H1t.forEach(t),Jnr=r(rxe," (mBART model)"),rxe.forEach(t),Ynr=i(k),v6=n(k,"LI",{});var txe=s(v6);due=n(txe,"STRONG",{});var U1t=s(due);Knr=r(U1t,"mobilebert"),U1t.forEach(t),Znr=r(txe," \u2014 "),UV=n(txe,"A",{href:!0});var J1t=s(UV);esr=r(J1t,"TFMobileBertModel"),J1t.forEach(t),osr=r(txe," (MobileBERT model)"),txe.forEach(t),rsr=i(k),F6=n(k,"LI",{});var axe=s(F6);cue=n(axe,"STRONG",{});var Y1t=s(cue);tsr=r(Y1t,"mpnet"),Y1t.forEach(t),asr=r(axe," \u2014 "),JV=n(axe,"A",{href:!0});var K1t=s(JV);nsr=r(K1t,"TFMPNetModel"),K1t.forEach(t),ssr=r(axe," (MPNet model)"),axe.forEach(t),lsr=i(k),T6=n(k,"LI",{});var nxe=s(T6);fue=n(nxe,"STRONG",{});var Z1t=s(fue);isr=r(Z1t,"mt5"),Z1t.forEach(t),dsr=r(nxe," \u2014 "),YV=n(nxe,"A",{href:!0});var e4t=s(YV);csr=r(e4t,"TFMT5Model"),e4t.forEach(t),fsr=r(nxe," (mT5 model)"),nxe.forEach(t),msr=i(k),M6=n(k,"LI",{});var sxe=s(M6);mue=n(sxe,"STRONG",{});var o4t=s(mue);gsr=r(o4t,"openai-gpt"),o4t.forEach(t),hsr=r(sxe," \u2014 "),KV=n(sxe,"A",{href:!0});var r4t=s(KV);psr=r(r4t,"TFOpenAIGPTModel"),r4t.forEach(t),_sr=r(sxe," (OpenAI GPT model)"),sxe.forEach(t),usr=i(k),E6=n(k,"LI",{});var lxe=s(E6);gue=n(lxe,"STRONG",{});var t4t=s(gue);bsr=r(t4t,"pegasus"),t4t.forEach(t),vsr=r(lxe," \u2014 "),ZV=n(lxe,"A",{href:!0});var a4t=s(ZV);Fsr=r(a4t,"TFPegasusModel"),a4t.forEach(t),Tsr=r(lxe," (Pegasus model)"),lxe.forEach(t),Msr=i(k),C6=n(k,"LI",{});var ixe=s(C6);hue=n(ixe,"STRONG",{});var n4t=s(hue);Esr=r(n4t,"rembert"),n4t.forEach(t),Csr=r(ixe," \u2014 "),eX=n(ixe,"A",{href:!0});var s4t=s(eX);wsr=r(s4t,"TFRemBertModel"),s4t.forEach(t),Asr=r(ixe," (RemBERT model)"),ixe.forEach(t),ysr=i(k),w6=n(k,"LI",{});var dxe=s(w6);pue=n(dxe,"STRONG",{});var l4t=s(pue);Lsr=r(l4t,"roberta"),l4t.forEach(t),xsr=r(dxe," \u2014 "),oX=n(dxe,"A",{href:!0});var i4t=s(oX);ksr=r(i4t,"TFRobertaModel"),i4t.forEach(t),Ssr=r(dxe," (RoBERTa model)"),dxe.forEach(t),Rsr=i(k),A6=n(k,"LI",{});var cxe=s(A6);_ue=n(cxe,"STRONG",{});var d4t=s(_ue);Bsr=r(d4t,"roformer"),d4t.forEach(t),Psr=r(cxe," \u2014 "),rX=n(cxe,"A",{href:!0});var c4t=s(rX);$sr=r(c4t,"TFRoFormerModel"),c4t.forEach(t),Isr=r(cxe," (RoFormer model)"),cxe.forEach(t),qsr=i(k),y6=n(k,"LI",{});var fxe=s(y6);uue=n(fxe,"STRONG",{});var f4t=s(uue);Nsr=r(f4t,"speech_to_text"),f4t.forEach(t),jsr=r(fxe," \u2014 "),tX=n(fxe,"A",{href:!0});var m4t=s(tX);Dsr=r(m4t,"TFSpeech2TextModel"),m4t.forEach(t),Gsr=r(fxe," (Speech2Text model)"),fxe.forEach(t),Osr=i(k),L6=n(k,"LI",{});var mxe=s(L6);bue=n(mxe,"STRONG",{});var g4t=s(bue);Vsr=r(g4t,"t5"),g4t.forEach(t),Xsr=r(mxe," \u2014 "),aX=n(mxe,"A",{href:!0});var h4t=s(aX);zsr=r(h4t,"TFT5Model"),h4t.forEach(t),Qsr=r(mxe," (T5 model)"),mxe.forEach(t),Wsr=i(k),x6=n(k,"LI",{});var gxe=s(x6);vue=n(gxe,"STRONG",{});var p4t=s(vue);Hsr=r(p4t,"tapas"),p4t.forEach(t),Usr=r(gxe," \u2014 "),nX=n(gxe,"A",{href:!0});var _4t=s(nX);Jsr=r(_4t,"TFTapasModel"),_4t.forEach(t),Ysr=r(gxe," (TAPAS model)"),gxe.forEach(t),Ksr=i(k),k6=n(k,"LI",{});var hxe=s(k6);Fue=n(hxe,"STRONG",{});var u4t=s(Fue);Zsr=r(u4t,"transfo-xl"),u4t.forEach(t),elr=r(hxe," \u2014 "),sX=n(hxe,"A",{href:!0});var b4t=s(sX);olr=r(b4t,"TFTransfoXLModel"),b4t.forEach(t),rlr=r(hxe," (Transformer-XL model)"),hxe.forEach(t),tlr=i(k),S6=n(k,"LI",{});var pxe=s(S6);Tue=n(pxe,"STRONG",{});var v4t=s(Tue);alr=r(v4t,"vit"),v4t.forEach(t),nlr=r(pxe," \u2014 "),lX=n(pxe,"A",{href:!0});var F4t=s(lX);slr=r(F4t,"TFViTModel"),F4t.forEach(t),llr=r(pxe," (ViT model)"),pxe.forEach(t),ilr=i(k),R6=n(k,"LI",{});var _xe=s(R6);Mue=n(_xe,"STRONG",{});var T4t=s(Mue);dlr=r(T4t,"vit_mae"),T4t.forEach(t),clr=r(_xe," \u2014 "),iX=n(_xe,"A",{href:!0});var M4t=s(iX);flr=r(M4t,"TFViTMAEModel"),M4t.forEach(t),mlr=r(_xe," (ViTMAE model)"),_xe.forEach(t),glr=i(k),B6=n(k,"LI",{});var uxe=s(B6);Eue=n(uxe,"STRONG",{});var E4t=s(Eue);hlr=r(E4t,"wav2vec2"),E4t.forEach(t),plr=r(uxe," \u2014 "),dX=n(uxe,"A",{href:!0});var C4t=s(dX);_lr=r(C4t,"TFWav2Vec2Model"),C4t.forEach(t),ulr=r(uxe," (Wav2Vec2 model)"),uxe.forEach(t),blr=i(k),P6=n(k,"LI",{});var bxe=s(P6);Cue=n(bxe,"STRONG",{});var w4t=s(Cue);vlr=r(w4t,"xglm"),w4t.forEach(t),Flr=r(bxe," \u2014 "),cX=n(bxe,"A",{href:!0});var A4t=s(cX);Tlr=r(A4t,"TFXGLMModel"),A4t.forEach(t),Mlr=r(bxe," (XGLM model)"),bxe.forEach(t),Elr=i(k),$6=n(k,"LI",{});var vxe=s($6);wue=n(vxe,"STRONG",{});var y4t=s(wue);Clr=r(y4t,"xlm"),y4t.forEach(t),wlr=r(vxe," \u2014 "),fX=n(vxe,"A",{href:!0});var L4t=s(fX);Alr=r(L4t,"TFXLMModel"),L4t.forEach(t),ylr=r(vxe," (XLM model)"),vxe.forEach(t),Llr=i(k),I6=n(k,"LI",{});var Fxe=s(I6);Aue=n(Fxe,"STRONG",{});var x4t=s(Aue);xlr=r(x4t,"xlm-roberta"),x4t.forEach(t),klr=r(Fxe," \u2014 "),mX=n(Fxe,"A",{href:!0});var k4t=s(mX);Slr=r(k4t,"TFXLMRobertaModel"),k4t.forEach(t),Rlr=r(Fxe," (XLM-RoBERTa model)"),Fxe.forEach(t),Blr=i(k),q6=n(k,"LI",{});var Txe=s(q6);yue=n(Txe,"STRONG",{});var S4t=s(yue);Plr=r(S4t,"xlnet"),S4t.forEach(t),$lr=r(Txe," \u2014 "),gX=n(Txe,"A",{href:!0});var R4t=s(gX);Ilr=r(R4t,"TFXLNetModel"),R4t.forEach(t),qlr=r(Txe," (XLNet model)"),Txe.forEach(t),k.forEach(t),Nlr=i(pa),Lue=n(pa,"P",{});var B4t=s(Lue);jlr=r(B4t,"Examples:"),B4t.forEach(t),Dlr=i(pa),m(By.$$.fragment,pa),pa.forEach(t),Hl.forEach(t),h$e=i(c),Cc=n(c,"H2",{class:!0});var Cqe=s(Cc);N6=n(Cqe,"A",{id:!0,class:!0,href:!0});var P4t=s(N6);xue=n(P4t,"SPAN",{});var $4t=s(xue);m(Py.$$.fragment,$4t),$4t.forEach(t),P4t.forEach(t),Glr=i(Cqe),kue=n(Cqe,"SPAN",{});var I4t=s(kue);Olr=r(I4t,"TFAutoModelForPreTraining"),I4t.forEach(t),Cqe.forEach(t),p$e=i(c),Fr=n(c,"DIV",{class:!0});var Jl=s(Fr);m($y.$$.fragment,Jl),Vlr=i(Jl),wc=n(Jl,"P",{});var pY=s(wc);Xlr=r(pY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hX=n(pY,"A",{href:!0});var q4t=s(hX);zlr=r(q4t,"from_pretrained()"),q4t.forEach(t),Qlr=r(pY," class method or the "),pX=n(pY,"A",{href:!0});var N4t=s(pX);Wlr=r(N4t,"from_config()"),N4t.forEach(t),Hlr=r(pY,` class
method.`),pY.forEach(t),Ulr=i(Jl),Iy=n(Jl,"P",{});var wqe=s(Iy);Jlr=r(wqe,"This class cannot be instantiated directly using "),Sue=n(wqe,"CODE",{});var j4t=s(Sue);Ylr=r(j4t,"__init__()"),j4t.forEach(t),Klr=r(wqe," (throws an error)."),wqe.forEach(t),Zlr=i(Jl),ht=n(Jl,"DIV",{class:!0});var Yl=s(ht);m(qy.$$.fragment,Yl),eir=i(Yl),Rue=n(Yl,"P",{});var D4t=s(Rue);oir=r(D4t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),D4t.forEach(t),rir=i(Yl),Ac=n(Yl,"P",{});var _Y=s(Ac);tir=r(_Y,`Note:
Loading a model from its configuration file does `),Bue=n(_Y,"STRONG",{});var G4t=s(Bue);air=r(G4t,"not"),G4t.forEach(t),nir=r(_Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=n(_Y,"A",{href:!0});var O4t=s(_X);sir=r(O4t,"from_pretrained()"),O4t.forEach(t),lir=r(_Y," to load the model weights."),_Y.forEach(t),iir=i(Yl),Pue=n(Yl,"P",{});var V4t=s(Pue);dir=r(V4t,"Examples:"),V4t.forEach(t),cir=i(Yl),m(Ny.$$.fragment,Yl),Yl.forEach(t),fir=i(Jl),_o=n(Jl,"DIV",{class:!0});var _a=s(_o);m(jy.$$.fragment,_a),mir=i(_a),$ue=n(_a,"P",{});var X4t=s($ue);gir=r(X4t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),X4t.forEach(t),hir=i(_a),bn=n(_a,"P",{});var EC=s(bn);pir=r(EC,"The model class to instantiate is selected based on the "),Iue=n(EC,"CODE",{});var z4t=s(Iue);_ir=r(z4t,"model_type"),z4t.forEach(t),uir=r(EC,` property of the config object (either
passed as an argument or loaded from `),que=n(EC,"CODE",{});var Q4t=s(que);bir=r(Q4t,"pretrained_model_name_or_path"),Q4t.forEach(t),vir=r(EC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=n(EC,"CODE",{});var W4t=s(Nue);Fir=r(W4t,"pretrained_model_name_or_path"),W4t.forEach(t),Tir=r(EC,":"),EC.forEach(t),Mir=i(_a),U=n(_a,"UL",{});var Y=s(U);j6=n(Y,"LI",{});var Mxe=s(j6);jue=n(Mxe,"STRONG",{});var H4t=s(jue);Eir=r(H4t,"albert"),H4t.forEach(t),Cir=r(Mxe," \u2014 "),uX=n(Mxe,"A",{href:!0});var U4t=s(uX);wir=r(U4t,"TFAlbertForPreTraining"),U4t.forEach(t),Air=r(Mxe," (ALBERT model)"),Mxe.forEach(t),yir=i(Y),D6=n(Y,"LI",{});var Exe=s(D6);Due=n(Exe,"STRONG",{});var J4t=s(Due);Lir=r(J4t,"bart"),J4t.forEach(t),xir=r(Exe," \u2014 "),bX=n(Exe,"A",{href:!0});var Y4t=s(bX);kir=r(Y4t,"TFBartForConditionalGeneration"),Y4t.forEach(t),Sir=r(Exe," (BART model)"),Exe.forEach(t),Rir=i(Y),G6=n(Y,"LI",{});var Cxe=s(G6);Gue=n(Cxe,"STRONG",{});var K4t=s(Gue);Bir=r(K4t,"bert"),K4t.forEach(t),Pir=r(Cxe," \u2014 "),vX=n(Cxe,"A",{href:!0});var Z4t=s(vX);$ir=r(Z4t,"TFBertForPreTraining"),Z4t.forEach(t),Iir=r(Cxe," (BERT model)"),Cxe.forEach(t),qir=i(Y),O6=n(Y,"LI",{});var wxe=s(O6);Oue=n(wxe,"STRONG",{});var ebt=s(Oue);Nir=r(ebt,"camembert"),ebt.forEach(t),jir=r(wxe," \u2014 "),FX=n(wxe,"A",{href:!0});var obt=s(FX);Dir=r(obt,"TFCamembertForMaskedLM"),obt.forEach(t),Gir=r(wxe," (CamemBERT model)"),wxe.forEach(t),Oir=i(Y),V6=n(Y,"LI",{});var Axe=s(V6);Vue=n(Axe,"STRONG",{});var rbt=s(Vue);Vir=r(rbt,"ctrl"),rbt.forEach(t),Xir=r(Axe," \u2014 "),TX=n(Axe,"A",{href:!0});var tbt=s(TX);zir=r(tbt,"TFCTRLLMHeadModel"),tbt.forEach(t),Qir=r(Axe," (CTRL model)"),Axe.forEach(t),Wir=i(Y),X6=n(Y,"LI",{});var yxe=s(X6);Xue=n(yxe,"STRONG",{});var abt=s(Xue);Hir=r(abt,"distilbert"),abt.forEach(t),Uir=r(yxe," \u2014 "),MX=n(yxe,"A",{href:!0});var nbt=s(MX);Jir=r(nbt,"TFDistilBertForMaskedLM"),nbt.forEach(t),Yir=r(yxe," (DistilBERT model)"),yxe.forEach(t),Kir=i(Y),z6=n(Y,"LI",{});var Lxe=s(z6);zue=n(Lxe,"STRONG",{});var sbt=s(zue);Zir=r(sbt,"electra"),sbt.forEach(t),edr=r(Lxe," \u2014 "),EX=n(Lxe,"A",{href:!0});var lbt=s(EX);odr=r(lbt,"TFElectraForPreTraining"),lbt.forEach(t),rdr=r(Lxe," (ELECTRA model)"),Lxe.forEach(t),tdr=i(Y),Q6=n(Y,"LI",{});var xxe=s(Q6);Que=n(xxe,"STRONG",{});var ibt=s(Que);adr=r(ibt,"flaubert"),ibt.forEach(t),ndr=r(xxe," \u2014 "),CX=n(xxe,"A",{href:!0});var dbt=s(CX);sdr=r(dbt,"TFFlaubertWithLMHeadModel"),dbt.forEach(t),ldr=r(xxe," (FlauBERT model)"),xxe.forEach(t),idr=i(Y),W6=n(Y,"LI",{});var kxe=s(W6);Wue=n(kxe,"STRONG",{});var cbt=s(Wue);ddr=r(cbt,"funnel"),cbt.forEach(t),cdr=r(kxe," \u2014 "),wX=n(kxe,"A",{href:!0});var fbt=s(wX);fdr=r(fbt,"TFFunnelForPreTraining"),fbt.forEach(t),mdr=r(kxe," (Funnel Transformer model)"),kxe.forEach(t),gdr=i(Y),H6=n(Y,"LI",{});var Sxe=s(H6);Hue=n(Sxe,"STRONG",{});var mbt=s(Hue);hdr=r(mbt,"gpt2"),mbt.forEach(t),pdr=r(Sxe," \u2014 "),AX=n(Sxe,"A",{href:!0});var gbt=s(AX);_dr=r(gbt,"TFGPT2LMHeadModel"),gbt.forEach(t),udr=r(Sxe," (OpenAI GPT-2 model)"),Sxe.forEach(t),bdr=i(Y),U6=n(Y,"LI",{});var Rxe=s(U6);Uue=n(Rxe,"STRONG",{});var hbt=s(Uue);vdr=r(hbt,"layoutlm"),hbt.forEach(t),Fdr=r(Rxe," \u2014 "),yX=n(Rxe,"A",{href:!0});var pbt=s(yX);Tdr=r(pbt,"TFLayoutLMForMaskedLM"),pbt.forEach(t),Mdr=r(Rxe," (LayoutLM model)"),Rxe.forEach(t),Edr=i(Y),J6=n(Y,"LI",{});var Bxe=s(J6);Jue=n(Bxe,"STRONG",{});var _bt=s(Jue);Cdr=r(_bt,"lxmert"),_bt.forEach(t),wdr=r(Bxe," \u2014 "),LX=n(Bxe,"A",{href:!0});var ubt=s(LX);Adr=r(ubt,"TFLxmertForPreTraining"),ubt.forEach(t),ydr=r(Bxe," (LXMERT model)"),Bxe.forEach(t),Ldr=i(Y),Y6=n(Y,"LI",{});var Pxe=s(Y6);Yue=n(Pxe,"STRONG",{});var bbt=s(Yue);xdr=r(bbt,"mobilebert"),bbt.forEach(t),kdr=r(Pxe," \u2014 "),xX=n(Pxe,"A",{href:!0});var vbt=s(xX);Sdr=r(vbt,"TFMobileBertForPreTraining"),vbt.forEach(t),Rdr=r(Pxe," (MobileBERT model)"),Pxe.forEach(t),Bdr=i(Y),K6=n(Y,"LI",{});var $xe=s(K6);Kue=n($xe,"STRONG",{});var Fbt=s(Kue);Pdr=r(Fbt,"mpnet"),Fbt.forEach(t),$dr=r($xe," \u2014 "),kX=n($xe,"A",{href:!0});var Tbt=s(kX);Idr=r(Tbt,"TFMPNetForMaskedLM"),Tbt.forEach(t),qdr=r($xe," (MPNet model)"),$xe.forEach(t),Ndr=i(Y),Z6=n(Y,"LI",{});var Ixe=s(Z6);Zue=n(Ixe,"STRONG",{});var Mbt=s(Zue);jdr=r(Mbt,"openai-gpt"),Mbt.forEach(t),Ddr=r(Ixe," \u2014 "),SX=n(Ixe,"A",{href:!0});var Ebt=s(SX);Gdr=r(Ebt,"TFOpenAIGPTLMHeadModel"),Ebt.forEach(t),Odr=r(Ixe," (OpenAI GPT model)"),Ixe.forEach(t),Vdr=i(Y),ev=n(Y,"LI",{});var qxe=s(ev);e1e=n(qxe,"STRONG",{});var Cbt=s(e1e);Xdr=r(Cbt,"roberta"),Cbt.forEach(t),zdr=r(qxe," \u2014 "),RX=n(qxe,"A",{href:!0});var wbt=s(RX);Qdr=r(wbt,"TFRobertaForMaskedLM"),wbt.forEach(t),Wdr=r(qxe," (RoBERTa model)"),qxe.forEach(t),Hdr=i(Y),ov=n(Y,"LI",{});var Nxe=s(ov);o1e=n(Nxe,"STRONG",{});var Abt=s(o1e);Udr=r(Abt,"t5"),Abt.forEach(t),Jdr=r(Nxe," \u2014 "),BX=n(Nxe,"A",{href:!0});var ybt=s(BX);Ydr=r(ybt,"TFT5ForConditionalGeneration"),ybt.forEach(t),Kdr=r(Nxe," (T5 model)"),Nxe.forEach(t),Zdr=i(Y),rv=n(Y,"LI",{});var jxe=s(rv);r1e=n(jxe,"STRONG",{});var Lbt=s(r1e);ecr=r(Lbt,"tapas"),Lbt.forEach(t),ocr=r(jxe," \u2014 "),PX=n(jxe,"A",{href:!0});var xbt=s(PX);rcr=r(xbt,"TFTapasForMaskedLM"),xbt.forEach(t),tcr=r(jxe," (TAPAS model)"),jxe.forEach(t),acr=i(Y),tv=n(Y,"LI",{});var Dxe=s(tv);t1e=n(Dxe,"STRONG",{});var kbt=s(t1e);ncr=r(kbt,"transfo-xl"),kbt.forEach(t),scr=r(Dxe," \u2014 "),$X=n(Dxe,"A",{href:!0});var Sbt=s($X);lcr=r(Sbt,"TFTransfoXLLMHeadModel"),Sbt.forEach(t),icr=r(Dxe," (Transformer-XL model)"),Dxe.forEach(t),dcr=i(Y),av=n(Y,"LI",{});var Gxe=s(av);a1e=n(Gxe,"STRONG",{});var Rbt=s(a1e);ccr=r(Rbt,"vit_mae"),Rbt.forEach(t),fcr=r(Gxe," \u2014 "),IX=n(Gxe,"A",{href:!0});var Bbt=s(IX);mcr=r(Bbt,"TFViTMAEForPreTraining"),Bbt.forEach(t),gcr=r(Gxe," (ViTMAE model)"),Gxe.forEach(t),hcr=i(Y),nv=n(Y,"LI",{});var Oxe=s(nv);n1e=n(Oxe,"STRONG",{});var Pbt=s(n1e);pcr=r(Pbt,"xlm"),Pbt.forEach(t),_cr=r(Oxe," \u2014 "),qX=n(Oxe,"A",{href:!0});var $bt=s(qX);ucr=r($bt,"TFXLMWithLMHeadModel"),$bt.forEach(t),bcr=r(Oxe," (XLM model)"),Oxe.forEach(t),vcr=i(Y),sv=n(Y,"LI",{});var Vxe=s(sv);s1e=n(Vxe,"STRONG",{});var Ibt=s(s1e);Fcr=r(Ibt,"xlm-roberta"),Ibt.forEach(t),Tcr=r(Vxe," \u2014 "),NX=n(Vxe,"A",{href:!0});var qbt=s(NX);Mcr=r(qbt,"TFXLMRobertaForMaskedLM"),qbt.forEach(t),Ecr=r(Vxe," (XLM-RoBERTa model)"),Vxe.forEach(t),Ccr=i(Y),lv=n(Y,"LI",{});var Xxe=s(lv);l1e=n(Xxe,"STRONG",{});var Nbt=s(l1e);wcr=r(Nbt,"xlnet"),Nbt.forEach(t),Acr=r(Xxe," \u2014 "),jX=n(Xxe,"A",{href:!0});var jbt=s(jX);ycr=r(jbt,"TFXLNetLMHeadModel"),jbt.forEach(t),Lcr=r(Xxe," (XLNet model)"),Xxe.forEach(t),Y.forEach(t),xcr=i(_a),i1e=n(_a,"P",{});var Dbt=s(i1e);kcr=r(Dbt,"Examples:"),Dbt.forEach(t),Scr=i(_a),m(Dy.$$.fragment,_a),_a.forEach(t),Jl.forEach(t),_$e=i(c),yc=n(c,"H2",{class:!0});var Aqe=s(yc);iv=n(Aqe,"A",{id:!0,class:!0,href:!0});var Gbt=s(iv);d1e=n(Gbt,"SPAN",{});var Obt=s(d1e);m(Gy.$$.fragment,Obt),Obt.forEach(t),Gbt.forEach(t),Rcr=i(Aqe),c1e=n(Aqe,"SPAN",{});var Vbt=s(c1e);Bcr=r(Vbt,"TFAutoModelForCausalLM"),Vbt.forEach(t),Aqe.forEach(t),u$e=i(c),Tr=n(c,"DIV",{class:!0});var Kl=s(Tr);m(Oy.$$.fragment,Kl),Pcr=i(Kl),Lc=n(Kl,"P",{});var uY=s(Lc);$cr=r(uY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DX=n(uY,"A",{href:!0});var Xbt=s(DX);Icr=r(Xbt,"from_pretrained()"),Xbt.forEach(t),qcr=r(uY," class method or the "),GX=n(uY,"A",{href:!0});var zbt=s(GX);Ncr=r(zbt,"from_config()"),zbt.forEach(t),jcr=r(uY,` class
method.`),uY.forEach(t),Dcr=i(Kl),Vy=n(Kl,"P",{});var yqe=s(Vy);Gcr=r(yqe,"This class cannot be instantiated directly using "),f1e=n(yqe,"CODE",{});var Qbt=s(f1e);Ocr=r(Qbt,"__init__()"),Qbt.forEach(t),Vcr=r(yqe," (throws an error)."),yqe.forEach(t),Xcr=i(Kl),pt=n(Kl,"DIV",{class:!0});var Zl=s(pt);m(Xy.$$.fragment,Zl),zcr=i(Zl),m1e=n(Zl,"P",{});var Wbt=s(m1e);Qcr=r(Wbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Wbt.forEach(t),Wcr=i(Zl),xc=n(Zl,"P",{});var bY=s(xc);Hcr=r(bY,`Note:
Loading a model from its configuration file does `),g1e=n(bY,"STRONG",{});var Hbt=s(g1e);Ucr=r(Hbt,"not"),Hbt.forEach(t),Jcr=r(bY,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(bY,"A",{href:!0});var Ubt=s(OX);Ycr=r(Ubt,"from_pretrained()"),Ubt.forEach(t),Kcr=r(bY," to load the model weights."),bY.forEach(t),Zcr=i(Zl),h1e=n(Zl,"P",{});var Jbt=s(h1e);efr=r(Jbt,"Examples:"),Jbt.forEach(t),ofr=i(Zl),m(zy.$$.fragment,Zl),Zl.forEach(t),rfr=i(Kl),uo=n(Kl,"DIV",{class:!0});var ua=s(uo);m(Qy.$$.fragment,ua),tfr=i(ua),p1e=n(ua,"P",{});var Ybt=s(p1e);afr=r(Ybt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ybt.forEach(t),nfr=i(ua),vn=n(ua,"P",{});var CC=s(vn);sfr=r(CC,"The model class to instantiate is selected based on the "),_1e=n(CC,"CODE",{});var Kbt=s(_1e);lfr=r(Kbt,"model_type"),Kbt.forEach(t),ifr=r(CC,` property of the config object (either
passed as an argument or loaded from `),u1e=n(CC,"CODE",{});var Zbt=s(u1e);dfr=r(Zbt,"pretrained_model_name_or_path"),Zbt.forEach(t),cfr=r(CC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=n(CC,"CODE",{});var e2t=s(b1e);ffr=r(e2t,"pretrained_model_name_or_path"),e2t.forEach(t),mfr=r(CC,":"),CC.forEach(t),gfr=i(ua),fe=n(ua,"UL",{});var _e=s(fe);dv=n(_e,"LI",{});var zxe=s(dv);v1e=n(zxe,"STRONG",{});var o2t=s(v1e);hfr=r(o2t,"bert"),o2t.forEach(t),pfr=r(zxe," \u2014 "),VX=n(zxe,"A",{href:!0});var r2t=s(VX);_fr=r(r2t,"TFBertLMHeadModel"),r2t.forEach(t),ufr=r(zxe," (BERT model)"),zxe.forEach(t),bfr=i(_e),cv=n(_e,"LI",{});var Qxe=s(cv);F1e=n(Qxe,"STRONG",{});var t2t=s(F1e);vfr=r(t2t,"camembert"),t2t.forEach(t),Ffr=r(Qxe," \u2014 "),XX=n(Qxe,"A",{href:!0});var a2t=s(XX);Tfr=r(a2t,"TFCamembertForCausalLM"),a2t.forEach(t),Mfr=r(Qxe," (CamemBERT model)"),Qxe.forEach(t),Efr=i(_e),fv=n(_e,"LI",{});var Wxe=s(fv);T1e=n(Wxe,"STRONG",{});var n2t=s(T1e);Cfr=r(n2t,"ctrl"),n2t.forEach(t),wfr=r(Wxe," \u2014 "),zX=n(Wxe,"A",{href:!0});var s2t=s(zX);Afr=r(s2t,"TFCTRLLMHeadModel"),s2t.forEach(t),yfr=r(Wxe," (CTRL model)"),Wxe.forEach(t),Lfr=i(_e),mv=n(_e,"LI",{});var Hxe=s(mv);M1e=n(Hxe,"STRONG",{});var l2t=s(M1e);xfr=r(l2t,"gpt2"),l2t.forEach(t),kfr=r(Hxe," \u2014 "),QX=n(Hxe,"A",{href:!0});var i2t=s(QX);Sfr=r(i2t,"TFGPT2LMHeadModel"),i2t.forEach(t),Rfr=r(Hxe," (OpenAI GPT-2 model)"),Hxe.forEach(t),Bfr=i(_e),gv=n(_e,"LI",{});var Uxe=s(gv);E1e=n(Uxe,"STRONG",{});var d2t=s(E1e);Pfr=r(d2t,"gptj"),d2t.forEach(t),$fr=r(Uxe," \u2014 "),WX=n(Uxe,"A",{href:!0});var c2t=s(WX);Ifr=r(c2t,"TFGPTJForCausalLM"),c2t.forEach(t),qfr=r(Uxe," (GPT-J model)"),Uxe.forEach(t),Nfr=i(_e),hv=n(_e,"LI",{});var Jxe=s(hv);C1e=n(Jxe,"STRONG",{});var f2t=s(C1e);jfr=r(f2t,"openai-gpt"),f2t.forEach(t),Dfr=r(Jxe," \u2014 "),HX=n(Jxe,"A",{href:!0});var m2t=s(HX);Gfr=r(m2t,"TFOpenAIGPTLMHeadModel"),m2t.forEach(t),Ofr=r(Jxe," (OpenAI GPT model)"),Jxe.forEach(t),Vfr=i(_e),pv=n(_e,"LI",{});var Yxe=s(pv);w1e=n(Yxe,"STRONG",{});var g2t=s(w1e);Xfr=r(g2t,"rembert"),g2t.forEach(t),zfr=r(Yxe," \u2014 "),UX=n(Yxe,"A",{href:!0});var h2t=s(UX);Qfr=r(h2t,"TFRemBertForCausalLM"),h2t.forEach(t),Wfr=r(Yxe," (RemBERT model)"),Yxe.forEach(t),Hfr=i(_e),_v=n(_e,"LI",{});var Kxe=s(_v);A1e=n(Kxe,"STRONG",{});var p2t=s(A1e);Ufr=r(p2t,"roberta"),p2t.forEach(t),Jfr=r(Kxe," \u2014 "),JX=n(Kxe,"A",{href:!0});var _2t=s(JX);Yfr=r(_2t,"TFRobertaForCausalLM"),_2t.forEach(t),Kfr=r(Kxe," (RoBERTa model)"),Kxe.forEach(t),Zfr=i(_e),uv=n(_e,"LI",{});var Zxe=s(uv);y1e=n(Zxe,"STRONG",{});var u2t=s(y1e);emr=r(u2t,"roformer"),u2t.forEach(t),omr=r(Zxe," \u2014 "),YX=n(Zxe,"A",{href:!0});var b2t=s(YX);rmr=r(b2t,"TFRoFormerForCausalLM"),b2t.forEach(t),tmr=r(Zxe," (RoFormer model)"),Zxe.forEach(t),amr=i(_e),bv=n(_e,"LI",{});var eke=s(bv);L1e=n(eke,"STRONG",{});var v2t=s(L1e);nmr=r(v2t,"transfo-xl"),v2t.forEach(t),smr=r(eke," \u2014 "),KX=n(eke,"A",{href:!0});var F2t=s(KX);lmr=r(F2t,"TFTransfoXLLMHeadModel"),F2t.forEach(t),imr=r(eke," (Transformer-XL model)"),eke.forEach(t),dmr=i(_e),vv=n(_e,"LI",{});var oke=s(vv);x1e=n(oke,"STRONG",{});var T2t=s(x1e);cmr=r(T2t,"xglm"),T2t.forEach(t),fmr=r(oke," \u2014 "),ZX=n(oke,"A",{href:!0});var M2t=s(ZX);mmr=r(M2t,"TFXGLMForCausalLM"),M2t.forEach(t),gmr=r(oke," (XGLM model)"),oke.forEach(t),hmr=i(_e),Fv=n(_e,"LI",{});var rke=s(Fv);k1e=n(rke,"STRONG",{});var E2t=s(k1e);pmr=r(E2t,"xlm"),E2t.forEach(t),_mr=r(rke," \u2014 "),ez=n(rke,"A",{href:!0});var C2t=s(ez);umr=r(C2t,"TFXLMWithLMHeadModel"),C2t.forEach(t),bmr=r(rke," (XLM model)"),rke.forEach(t),vmr=i(_e),Tv=n(_e,"LI",{});var tke=s(Tv);S1e=n(tke,"STRONG",{});var w2t=s(S1e);Fmr=r(w2t,"xlnet"),w2t.forEach(t),Tmr=r(tke," \u2014 "),oz=n(tke,"A",{href:!0});var A2t=s(oz);Mmr=r(A2t,"TFXLNetLMHeadModel"),A2t.forEach(t),Emr=r(tke," (XLNet model)"),tke.forEach(t),_e.forEach(t),Cmr=i(ua),R1e=n(ua,"P",{});var y2t=s(R1e);wmr=r(y2t,"Examples:"),y2t.forEach(t),Amr=i(ua),m(Wy.$$.fragment,ua),ua.forEach(t),Kl.forEach(t),b$e=i(c),kc=n(c,"H2",{class:!0});var Lqe=s(kc);Mv=n(Lqe,"A",{id:!0,class:!0,href:!0});var L2t=s(Mv);B1e=n(L2t,"SPAN",{});var x2t=s(B1e);m(Hy.$$.fragment,x2t),x2t.forEach(t),L2t.forEach(t),ymr=i(Lqe),P1e=n(Lqe,"SPAN",{});var k2t=s(P1e);Lmr=r(k2t,"TFAutoModelForImageClassification"),k2t.forEach(t),Lqe.forEach(t),v$e=i(c),Mr=n(c,"DIV",{class:!0});var ei=s(Mr);m(Uy.$$.fragment,ei),xmr=i(ei),Sc=n(ei,"P",{});var vY=s(Sc);kmr=r(vY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rz=n(vY,"A",{href:!0});var S2t=s(rz);Smr=r(S2t,"from_pretrained()"),S2t.forEach(t),Rmr=r(vY," class method or the "),tz=n(vY,"A",{href:!0});var R2t=s(tz);Bmr=r(R2t,"from_config()"),R2t.forEach(t),Pmr=r(vY,` class
method.`),vY.forEach(t),$mr=i(ei),Jy=n(ei,"P",{});var xqe=s(Jy);Imr=r(xqe,"This class cannot be instantiated directly using "),$1e=n(xqe,"CODE",{});var B2t=s($1e);qmr=r(B2t,"__init__()"),B2t.forEach(t),Nmr=r(xqe," (throws an error)."),xqe.forEach(t),jmr=i(ei),_t=n(ei,"DIV",{class:!0});var oi=s(_t);m(Yy.$$.fragment,oi),Dmr=i(oi),I1e=n(oi,"P",{});var P2t=s(I1e);Gmr=r(P2t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),P2t.forEach(t),Omr=i(oi),Rc=n(oi,"P",{});var FY=s(Rc);Vmr=r(FY,`Note:
Loading a model from its configuration file does `),q1e=n(FY,"STRONG",{});var $2t=s(q1e);Xmr=r($2t,"not"),$2t.forEach(t),zmr=r(FY,` load the model weights. It only affects the
model\u2019s configuration. Use `),az=n(FY,"A",{href:!0});var I2t=s(az);Qmr=r(I2t,"from_pretrained()"),I2t.forEach(t),Wmr=r(FY," to load the model weights."),FY.forEach(t),Hmr=i(oi),N1e=n(oi,"P",{});var q2t=s(N1e);Umr=r(q2t,"Examples:"),q2t.forEach(t),Jmr=i(oi),m(Ky.$$.fragment,oi),oi.forEach(t),Ymr=i(ei),bo=n(ei,"DIV",{class:!0});var ba=s(bo);m(Zy.$$.fragment,ba),Kmr=i(ba),j1e=n(ba,"P",{});var N2t=s(j1e);Zmr=r(N2t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),N2t.forEach(t),egr=i(ba),Fn=n(ba,"P",{});var wC=s(Fn);ogr=r(wC,"The model class to instantiate is selected based on the "),D1e=n(wC,"CODE",{});var j2t=s(D1e);rgr=r(j2t,"model_type"),j2t.forEach(t),tgr=r(wC,` property of the config object (either
passed as an argument or loaded from `),G1e=n(wC,"CODE",{});var D2t=s(G1e);agr=r(D2t,"pretrained_model_name_or_path"),D2t.forEach(t),ngr=r(wC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=n(wC,"CODE",{});var G2t=s(O1e);sgr=r(G2t,"pretrained_model_name_or_path"),G2t.forEach(t),lgr=r(wC,":"),wC.forEach(t),igr=i(ba),e8=n(ba,"UL",{});var kqe=s(e8);Ev=n(kqe,"LI",{});var ake=s(Ev);V1e=n(ake,"STRONG",{});var O2t=s(V1e);dgr=r(O2t,"convnext"),O2t.forEach(t),cgr=r(ake," \u2014 "),nz=n(ake,"A",{href:!0});var V2t=s(nz);fgr=r(V2t,"TFConvNextForImageClassification"),V2t.forEach(t),mgr=r(ake," (ConvNext model)"),ake.forEach(t),ggr=i(kqe),Cv=n(kqe,"LI",{});var nke=s(Cv);X1e=n(nke,"STRONG",{});var X2t=s(X1e);hgr=r(X2t,"vit"),X2t.forEach(t),pgr=r(nke," \u2014 "),sz=n(nke,"A",{href:!0});var z2t=s(sz);_gr=r(z2t,"TFViTForImageClassification"),z2t.forEach(t),ugr=r(nke," (ViT model)"),nke.forEach(t),kqe.forEach(t),bgr=i(ba),z1e=n(ba,"P",{});var Q2t=s(z1e);vgr=r(Q2t,"Examples:"),Q2t.forEach(t),Fgr=i(ba),m(o8.$$.fragment,ba),ba.forEach(t),ei.forEach(t),F$e=i(c),Bc=n(c,"H2",{class:!0});var Sqe=s(Bc);wv=n(Sqe,"A",{id:!0,class:!0,href:!0});var W2t=s(wv);Q1e=n(W2t,"SPAN",{});var H2t=s(Q1e);m(r8.$$.fragment,H2t),H2t.forEach(t),W2t.forEach(t),Tgr=i(Sqe),W1e=n(Sqe,"SPAN",{});var U2t=s(W1e);Mgr=r(U2t,"TFAutoModelForMaskedLM"),U2t.forEach(t),Sqe.forEach(t),T$e=i(c),Er=n(c,"DIV",{class:!0});var ri=s(Er);m(t8.$$.fragment,ri),Egr=i(ri),Pc=n(ri,"P",{});var TY=s(Pc);Cgr=r(TY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lz=n(TY,"A",{href:!0});var J2t=s(lz);wgr=r(J2t,"from_pretrained()"),J2t.forEach(t),Agr=r(TY," class method or the "),iz=n(TY,"A",{href:!0});var Y2t=s(iz);ygr=r(Y2t,"from_config()"),Y2t.forEach(t),Lgr=r(TY,` class
method.`),TY.forEach(t),xgr=i(ri),a8=n(ri,"P",{});var Rqe=s(a8);kgr=r(Rqe,"This class cannot be instantiated directly using "),H1e=n(Rqe,"CODE",{});var K2t=s(H1e);Sgr=r(K2t,"__init__()"),K2t.forEach(t),Rgr=r(Rqe," (throws an error)."),Rqe.forEach(t),Bgr=i(ri),ut=n(ri,"DIV",{class:!0});var ti=s(ut);m(n8.$$.fragment,ti),Pgr=i(ti),U1e=n(ti,"P",{});var Z2t=s(U1e);$gr=r(Z2t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Z2t.forEach(t),Igr=i(ti),$c=n(ti,"P",{});var MY=s($c);qgr=r(MY,`Note:
Loading a model from its configuration file does `),J1e=n(MY,"STRONG",{});var e5t=s(J1e);Ngr=r(e5t,"not"),e5t.forEach(t),jgr=r(MY,` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=n(MY,"A",{href:!0});var o5t=s(dz);Dgr=r(o5t,"from_pretrained()"),o5t.forEach(t),Ggr=r(MY," to load the model weights."),MY.forEach(t),Ogr=i(ti),Y1e=n(ti,"P",{});var r5t=s(Y1e);Vgr=r(r5t,"Examples:"),r5t.forEach(t),Xgr=i(ti),m(s8.$$.fragment,ti),ti.forEach(t),zgr=i(ri),vo=n(ri,"DIV",{class:!0});var va=s(vo);m(l8.$$.fragment,va),Qgr=i(va),K1e=n(va,"P",{});var t5t=s(K1e);Wgr=r(t5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),t5t.forEach(t),Hgr=i(va),Tn=n(va,"P",{});var AC=s(Tn);Ugr=r(AC,"The model class to instantiate is selected based on the "),Z1e=n(AC,"CODE",{});var a5t=s(Z1e);Jgr=r(a5t,"model_type"),a5t.forEach(t),Ygr=r(AC,` property of the config object (either
passed as an argument or loaded from `),e4e=n(AC,"CODE",{});var n5t=s(e4e);Kgr=r(n5t,"pretrained_model_name_or_path"),n5t.forEach(t),Zgr=r(AC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=n(AC,"CODE",{});var s5t=s(o4e);ehr=r(s5t,"pretrained_model_name_or_path"),s5t.forEach(t),ohr=r(AC,":"),AC.forEach(t),rhr=i(va),K=n(va,"UL",{});var re=s(K);Av=n(re,"LI",{});var ske=s(Av);r4e=n(ske,"STRONG",{});var l5t=s(r4e);thr=r(l5t,"albert"),l5t.forEach(t),ahr=r(ske," \u2014 "),cz=n(ske,"A",{href:!0});var i5t=s(cz);nhr=r(i5t,"TFAlbertForMaskedLM"),i5t.forEach(t),shr=r(ske," (ALBERT model)"),ske.forEach(t),lhr=i(re),yv=n(re,"LI",{});var lke=s(yv);t4e=n(lke,"STRONG",{});var d5t=s(t4e);ihr=r(d5t,"bert"),d5t.forEach(t),dhr=r(lke," \u2014 "),fz=n(lke,"A",{href:!0});var c5t=s(fz);chr=r(c5t,"TFBertForMaskedLM"),c5t.forEach(t),fhr=r(lke," (BERT model)"),lke.forEach(t),mhr=i(re),Lv=n(re,"LI",{});var ike=s(Lv);a4e=n(ike,"STRONG",{});var f5t=s(a4e);ghr=r(f5t,"camembert"),f5t.forEach(t),hhr=r(ike," \u2014 "),mz=n(ike,"A",{href:!0});var m5t=s(mz);phr=r(m5t,"TFCamembertForMaskedLM"),m5t.forEach(t),_hr=r(ike," (CamemBERT model)"),ike.forEach(t),uhr=i(re),xv=n(re,"LI",{});var dke=s(xv);n4e=n(dke,"STRONG",{});var g5t=s(n4e);bhr=r(g5t,"convbert"),g5t.forEach(t),vhr=r(dke," \u2014 "),gz=n(dke,"A",{href:!0});var h5t=s(gz);Fhr=r(h5t,"TFConvBertForMaskedLM"),h5t.forEach(t),Thr=r(dke," (ConvBERT model)"),dke.forEach(t),Mhr=i(re),kv=n(re,"LI",{});var cke=s(kv);s4e=n(cke,"STRONG",{});var p5t=s(s4e);Ehr=r(p5t,"deberta"),p5t.forEach(t),Chr=r(cke," \u2014 "),hz=n(cke,"A",{href:!0});var _5t=s(hz);whr=r(_5t,"TFDebertaForMaskedLM"),_5t.forEach(t),Ahr=r(cke," (DeBERTa model)"),cke.forEach(t),yhr=i(re),Sv=n(re,"LI",{});var fke=s(Sv);l4e=n(fke,"STRONG",{});var u5t=s(l4e);Lhr=r(u5t,"deberta-v2"),u5t.forEach(t),xhr=r(fke," \u2014 "),pz=n(fke,"A",{href:!0});var b5t=s(pz);khr=r(b5t,"TFDebertaV2ForMaskedLM"),b5t.forEach(t),Shr=r(fke," (DeBERTa-v2 model)"),fke.forEach(t),Rhr=i(re),Rv=n(re,"LI",{});var mke=s(Rv);i4e=n(mke,"STRONG",{});var v5t=s(i4e);Bhr=r(v5t,"distilbert"),v5t.forEach(t),Phr=r(mke," \u2014 "),_z=n(mke,"A",{href:!0});var F5t=s(_z);$hr=r(F5t,"TFDistilBertForMaskedLM"),F5t.forEach(t),Ihr=r(mke," (DistilBERT model)"),mke.forEach(t),qhr=i(re),Bv=n(re,"LI",{});var gke=s(Bv);d4e=n(gke,"STRONG",{});var T5t=s(d4e);Nhr=r(T5t,"electra"),T5t.forEach(t),jhr=r(gke," \u2014 "),uz=n(gke,"A",{href:!0});var M5t=s(uz);Dhr=r(M5t,"TFElectraForMaskedLM"),M5t.forEach(t),Ghr=r(gke," (ELECTRA model)"),gke.forEach(t),Ohr=i(re),Pv=n(re,"LI",{});var hke=s(Pv);c4e=n(hke,"STRONG",{});var E5t=s(c4e);Vhr=r(E5t,"flaubert"),E5t.forEach(t),Xhr=r(hke," \u2014 "),bz=n(hke,"A",{href:!0});var C5t=s(bz);zhr=r(C5t,"TFFlaubertWithLMHeadModel"),C5t.forEach(t),Qhr=r(hke," (FlauBERT model)"),hke.forEach(t),Whr=i(re),$v=n(re,"LI",{});var pke=s($v);f4e=n(pke,"STRONG",{});var w5t=s(f4e);Hhr=r(w5t,"funnel"),w5t.forEach(t),Uhr=r(pke," \u2014 "),vz=n(pke,"A",{href:!0});var A5t=s(vz);Jhr=r(A5t,"TFFunnelForMaskedLM"),A5t.forEach(t),Yhr=r(pke," (Funnel Transformer model)"),pke.forEach(t),Khr=i(re),Iv=n(re,"LI",{});var _ke=s(Iv);m4e=n(_ke,"STRONG",{});var y5t=s(m4e);Zhr=r(y5t,"layoutlm"),y5t.forEach(t),epr=r(_ke," \u2014 "),Fz=n(_ke,"A",{href:!0});var L5t=s(Fz);opr=r(L5t,"TFLayoutLMForMaskedLM"),L5t.forEach(t),rpr=r(_ke," (LayoutLM model)"),_ke.forEach(t),tpr=i(re),qv=n(re,"LI",{});var uke=s(qv);g4e=n(uke,"STRONG",{});var x5t=s(g4e);apr=r(x5t,"longformer"),x5t.forEach(t),npr=r(uke," \u2014 "),Tz=n(uke,"A",{href:!0});var k5t=s(Tz);spr=r(k5t,"TFLongformerForMaskedLM"),k5t.forEach(t),lpr=r(uke," (Longformer model)"),uke.forEach(t),ipr=i(re),Nv=n(re,"LI",{});var bke=s(Nv);h4e=n(bke,"STRONG",{});var S5t=s(h4e);dpr=r(S5t,"mobilebert"),S5t.forEach(t),cpr=r(bke," \u2014 "),Mz=n(bke,"A",{href:!0});var R5t=s(Mz);fpr=r(R5t,"TFMobileBertForMaskedLM"),R5t.forEach(t),mpr=r(bke," (MobileBERT model)"),bke.forEach(t),gpr=i(re),jv=n(re,"LI",{});var vke=s(jv);p4e=n(vke,"STRONG",{});var B5t=s(p4e);hpr=r(B5t,"mpnet"),B5t.forEach(t),ppr=r(vke," \u2014 "),Ez=n(vke,"A",{href:!0});var P5t=s(Ez);_pr=r(P5t,"TFMPNetForMaskedLM"),P5t.forEach(t),upr=r(vke," (MPNet model)"),vke.forEach(t),bpr=i(re),Dv=n(re,"LI",{});var Fke=s(Dv);_4e=n(Fke,"STRONG",{});var $5t=s(_4e);vpr=r($5t,"rembert"),$5t.forEach(t),Fpr=r(Fke," \u2014 "),Cz=n(Fke,"A",{href:!0});var I5t=s(Cz);Tpr=r(I5t,"TFRemBertForMaskedLM"),I5t.forEach(t),Mpr=r(Fke," (RemBERT model)"),Fke.forEach(t),Epr=i(re),Gv=n(re,"LI",{});var Tke=s(Gv);u4e=n(Tke,"STRONG",{});var q5t=s(u4e);Cpr=r(q5t,"roberta"),q5t.forEach(t),wpr=r(Tke," \u2014 "),wz=n(Tke,"A",{href:!0});var N5t=s(wz);Apr=r(N5t,"TFRobertaForMaskedLM"),N5t.forEach(t),ypr=r(Tke," (RoBERTa model)"),Tke.forEach(t),Lpr=i(re),Ov=n(re,"LI",{});var Mke=s(Ov);b4e=n(Mke,"STRONG",{});var j5t=s(b4e);xpr=r(j5t,"roformer"),j5t.forEach(t),kpr=r(Mke," \u2014 "),Az=n(Mke,"A",{href:!0});var D5t=s(Az);Spr=r(D5t,"TFRoFormerForMaskedLM"),D5t.forEach(t),Rpr=r(Mke," (RoFormer model)"),Mke.forEach(t),Bpr=i(re),Vv=n(re,"LI",{});var Eke=s(Vv);v4e=n(Eke,"STRONG",{});var G5t=s(v4e);Ppr=r(G5t,"tapas"),G5t.forEach(t),$pr=r(Eke," \u2014 "),yz=n(Eke,"A",{href:!0});var O5t=s(yz);Ipr=r(O5t,"TFTapasForMaskedLM"),O5t.forEach(t),qpr=r(Eke," (TAPAS model)"),Eke.forEach(t),Npr=i(re),Xv=n(re,"LI",{});var Cke=s(Xv);F4e=n(Cke,"STRONG",{});var V5t=s(F4e);jpr=r(V5t,"xlm"),V5t.forEach(t),Dpr=r(Cke," \u2014 "),Lz=n(Cke,"A",{href:!0});var X5t=s(Lz);Gpr=r(X5t,"TFXLMWithLMHeadModel"),X5t.forEach(t),Opr=r(Cke," (XLM model)"),Cke.forEach(t),Vpr=i(re),zv=n(re,"LI",{});var wke=s(zv);T4e=n(wke,"STRONG",{});var z5t=s(T4e);Xpr=r(z5t,"xlm-roberta"),z5t.forEach(t),zpr=r(wke," \u2014 "),xz=n(wke,"A",{href:!0});var Q5t=s(xz);Qpr=r(Q5t,"TFXLMRobertaForMaskedLM"),Q5t.forEach(t),Wpr=r(wke," (XLM-RoBERTa model)"),wke.forEach(t),re.forEach(t),Hpr=i(va),M4e=n(va,"P",{});var W5t=s(M4e);Upr=r(W5t,"Examples:"),W5t.forEach(t),Jpr=i(va),m(i8.$$.fragment,va),va.forEach(t),ri.forEach(t),M$e=i(c),Ic=n(c,"H2",{class:!0});var Bqe=s(Ic);Qv=n(Bqe,"A",{id:!0,class:!0,href:!0});var H5t=s(Qv);E4e=n(H5t,"SPAN",{});var U5t=s(E4e);m(d8.$$.fragment,U5t),U5t.forEach(t),H5t.forEach(t),Ypr=i(Bqe),C4e=n(Bqe,"SPAN",{});var J5t=s(C4e);Kpr=r(J5t,"TFAutoModelForSeq2SeqLM"),J5t.forEach(t),Bqe.forEach(t),E$e=i(c),Cr=n(c,"DIV",{class:!0});var ai=s(Cr);m(c8.$$.fragment,ai),Zpr=i(ai),qc=n(ai,"P",{});var EY=s(qc);e_r=r(EY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kz=n(EY,"A",{href:!0});var Y5t=s(kz);o_r=r(Y5t,"from_pretrained()"),Y5t.forEach(t),r_r=r(EY," class method or the "),Sz=n(EY,"A",{href:!0});var K5t=s(Sz);t_r=r(K5t,"from_config()"),K5t.forEach(t),a_r=r(EY,` class
method.`),EY.forEach(t),n_r=i(ai),f8=n(ai,"P",{});var Pqe=s(f8);s_r=r(Pqe,"This class cannot be instantiated directly using "),w4e=n(Pqe,"CODE",{});var Z5t=s(w4e);l_r=r(Z5t,"__init__()"),Z5t.forEach(t),i_r=r(Pqe," (throws an error)."),Pqe.forEach(t),d_r=i(ai),bt=n(ai,"DIV",{class:!0});var ni=s(bt);m(m8.$$.fragment,ni),c_r=i(ni),A4e=n(ni,"P",{});var e3t=s(A4e);f_r=r(e3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),e3t.forEach(t),m_r=i(ni),Nc=n(ni,"P",{});var CY=s(Nc);g_r=r(CY,`Note:
Loading a model from its configuration file does `),y4e=n(CY,"STRONG",{});var o3t=s(y4e);h_r=r(o3t,"not"),o3t.forEach(t),p_r=r(CY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=n(CY,"A",{href:!0});var r3t=s(Rz);__r=r(r3t,"from_pretrained()"),r3t.forEach(t),u_r=r(CY," to load the model weights."),CY.forEach(t),b_r=i(ni),L4e=n(ni,"P",{});var t3t=s(L4e);v_r=r(t3t,"Examples:"),t3t.forEach(t),F_r=i(ni),m(g8.$$.fragment,ni),ni.forEach(t),T_r=i(ai),Fo=n(ai,"DIV",{class:!0});var Fa=s(Fo);m(h8.$$.fragment,Fa),M_r=i(Fa),x4e=n(Fa,"P",{});var a3t=s(x4e);E_r=r(a3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),a3t.forEach(t),C_r=i(Fa),Mn=n(Fa,"P",{});var yC=s(Mn);w_r=r(yC,"The model class to instantiate is selected based on the "),k4e=n(yC,"CODE",{});var n3t=s(k4e);A_r=r(n3t,"model_type"),n3t.forEach(t),y_r=r(yC,` property of the config object (either
passed as an argument or loaded from `),S4e=n(yC,"CODE",{});var s3t=s(S4e);L_r=r(s3t,"pretrained_model_name_or_path"),s3t.forEach(t),x_r=r(yC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R4e=n(yC,"CODE",{});var l3t=s(R4e);k_r=r(l3t,"pretrained_model_name_or_path"),l3t.forEach(t),S_r=r(yC,":"),yC.forEach(t),R_r=i(Fa),Fe=n(Fa,"UL",{});var ye=s(Fe);Wv=n(ye,"LI",{});var Ake=s(Wv);B4e=n(Ake,"STRONG",{});var i3t=s(B4e);B_r=r(i3t,"bart"),i3t.forEach(t),P_r=r(Ake," \u2014 "),Bz=n(Ake,"A",{href:!0});var d3t=s(Bz);$_r=r(d3t,"TFBartForConditionalGeneration"),d3t.forEach(t),I_r=r(Ake," (BART model)"),Ake.forEach(t),q_r=i(ye),Hv=n(ye,"LI",{});var yke=s(Hv);P4e=n(yke,"STRONG",{});var c3t=s(P4e);N_r=r(c3t,"blenderbot"),c3t.forEach(t),j_r=r(yke," \u2014 "),Pz=n(yke,"A",{href:!0});var f3t=s(Pz);D_r=r(f3t,"TFBlenderbotForConditionalGeneration"),f3t.forEach(t),G_r=r(yke," (Blenderbot model)"),yke.forEach(t),O_r=i(ye),Uv=n(ye,"LI",{});var Lke=s(Uv);$4e=n(Lke,"STRONG",{});var m3t=s($4e);V_r=r(m3t,"blenderbot-small"),m3t.forEach(t),X_r=r(Lke," \u2014 "),$z=n(Lke,"A",{href:!0});var g3t=s($z);z_r=r(g3t,"TFBlenderbotSmallForConditionalGeneration"),g3t.forEach(t),Q_r=r(Lke," (BlenderbotSmall model)"),Lke.forEach(t),W_r=i(ye),Jv=n(ye,"LI",{});var xke=s(Jv);I4e=n(xke,"STRONG",{});var h3t=s(I4e);H_r=r(h3t,"encoder-decoder"),h3t.forEach(t),U_r=r(xke," \u2014 "),Iz=n(xke,"A",{href:!0});var p3t=s(Iz);J_r=r(p3t,"TFEncoderDecoderModel"),p3t.forEach(t),Y_r=r(xke," (Encoder decoder model)"),xke.forEach(t),K_r=i(ye),Yv=n(ye,"LI",{});var kke=s(Yv);q4e=n(kke,"STRONG",{});var _3t=s(q4e);Z_r=r(_3t,"led"),_3t.forEach(t),eur=r(kke," \u2014 "),qz=n(kke,"A",{href:!0});var u3t=s(qz);our=r(u3t,"TFLEDForConditionalGeneration"),u3t.forEach(t),rur=r(kke," (LED model)"),kke.forEach(t),tur=i(ye),Kv=n(ye,"LI",{});var Ske=s(Kv);N4e=n(Ske,"STRONG",{});var b3t=s(N4e);aur=r(b3t,"marian"),b3t.forEach(t),nur=r(Ske," \u2014 "),Nz=n(Ske,"A",{href:!0});var v3t=s(Nz);sur=r(v3t,"TFMarianMTModel"),v3t.forEach(t),lur=r(Ske," (Marian model)"),Ske.forEach(t),iur=i(ye),Zv=n(ye,"LI",{});var Rke=s(Zv);j4e=n(Rke,"STRONG",{});var F3t=s(j4e);dur=r(F3t,"mbart"),F3t.forEach(t),cur=r(Rke," \u2014 "),jz=n(Rke,"A",{href:!0});var T3t=s(jz);fur=r(T3t,"TFMBartForConditionalGeneration"),T3t.forEach(t),mur=r(Rke," (mBART model)"),Rke.forEach(t),gur=i(ye),eF=n(ye,"LI",{});var Bke=s(eF);D4e=n(Bke,"STRONG",{});var M3t=s(D4e);hur=r(M3t,"mt5"),M3t.forEach(t),pur=r(Bke," \u2014 "),Dz=n(Bke,"A",{href:!0});var E3t=s(Dz);_ur=r(E3t,"TFMT5ForConditionalGeneration"),E3t.forEach(t),uur=r(Bke," (mT5 model)"),Bke.forEach(t),bur=i(ye),oF=n(ye,"LI",{});var Pke=s(oF);G4e=n(Pke,"STRONG",{});var C3t=s(G4e);vur=r(C3t,"pegasus"),C3t.forEach(t),Fur=r(Pke," \u2014 "),Gz=n(Pke,"A",{href:!0});var w3t=s(Gz);Tur=r(w3t,"TFPegasusForConditionalGeneration"),w3t.forEach(t),Mur=r(Pke," (Pegasus model)"),Pke.forEach(t),Eur=i(ye),rF=n(ye,"LI",{});var $ke=s(rF);O4e=n($ke,"STRONG",{});var A3t=s(O4e);Cur=r(A3t,"t5"),A3t.forEach(t),wur=r($ke," \u2014 "),Oz=n($ke,"A",{href:!0});var y3t=s(Oz);Aur=r(y3t,"TFT5ForConditionalGeneration"),y3t.forEach(t),yur=r($ke," (T5 model)"),$ke.forEach(t),ye.forEach(t),Lur=i(Fa),V4e=n(Fa,"P",{});var L3t=s(V4e);xur=r(L3t,"Examples:"),L3t.forEach(t),kur=i(Fa),m(p8.$$.fragment,Fa),Fa.forEach(t),ai.forEach(t),C$e=i(c),jc=n(c,"H2",{class:!0});var $qe=s(jc);tF=n($qe,"A",{id:!0,class:!0,href:!0});var x3t=s(tF);X4e=n(x3t,"SPAN",{});var k3t=s(X4e);m(_8.$$.fragment,k3t),k3t.forEach(t),x3t.forEach(t),Sur=i($qe),z4e=n($qe,"SPAN",{});var S3t=s(z4e);Rur=r(S3t,"TFAutoModelForSequenceClassification"),S3t.forEach(t),$qe.forEach(t),w$e=i(c),wr=n(c,"DIV",{class:!0});var si=s(wr);m(u8.$$.fragment,si),Bur=i(si),Dc=n(si,"P",{});var wY=s(Dc);Pur=r(wY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Vz=n(wY,"A",{href:!0});var R3t=s(Vz);$ur=r(R3t,"from_pretrained()"),R3t.forEach(t),Iur=r(wY," class method or the "),Xz=n(wY,"A",{href:!0});var B3t=s(Xz);qur=r(B3t,"from_config()"),B3t.forEach(t),Nur=r(wY,` class
method.`),wY.forEach(t),jur=i(si),b8=n(si,"P",{});var Iqe=s(b8);Dur=r(Iqe,"This class cannot be instantiated directly using "),Q4e=n(Iqe,"CODE",{});var P3t=s(Q4e);Gur=r(P3t,"__init__()"),P3t.forEach(t),Our=r(Iqe," (throws an error)."),Iqe.forEach(t),Vur=i(si),vt=n(si,"DIV",{class:!0});var li=s(vt);m(v8.$$.fragment,li),Xur=i(li),W4e=n(li,"P",{});var $3t=s(W4e);zur=r($3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$3t.forEach(t),Qur=i(li),Gc=n(li,"P",{});var AY=s(Gc);Wur=r(AY,`Note:
Loading a model from its configuration file does `),H4e=n(AY,"STRONG",{});var I3t=s(H4e);Hur=r(I3t,"not"),I3t.forEach(t),Uur=r(AY,` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=n(AY,"A",{href:!0});var q3t=s(zz);Jur=r(q3t,"from_pretrained()"),q3t.forEach(t),Yur=r(AY," to load the model weights."),AY.forEach(t),Kur=i(li),U4e=n(li,"P",{});var N3t=s(U4e);Zur=r(N3t,"Examples:"),N3t.forEach(t),e1r=i(li),m(F8.$$.fragment,li),li.forEach(t),o1r=i(si),To=n(si,"DIV",{class:!0});var Ta=s(To);m(T8.$$.fragment,Ta),r1r=i(Ta),J4e=n(Ta,"P",{});var j3t=s(J4e);t1r=r(j3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),j3t.forEach(t),a1r=i(Ta),En=n(Ta,"P",{});var LC=s(En);n1r=r(LC,"The model class to instantiate is selected based on the "),Y4e=n(LC,"CODE",{});var D3t=s(Y4e);s1r=r(D3t,"model_type"),D3t.forEach(t),l1r=r(LC,` property of the config object (either
passed as an argument or loaded from `),K4e=n(LC,"CODE",{});var G3t=s(K4e);i1r=r(G3t,"pretrained_model_name_or_path"),G3t.forEach(t),d1r=r(LC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z4e=n(LC,"CODE",{});var O3t=s(Z4e);c1r=r(O3t,"pretrained_model_name_or_path"),O3t.forEach(t),f1r=r(LC,":"),LC.forEach(t),m1r=i(Ta),V=n(Ta,"UL",{});var Q=s(V);aF=n(Q,"LI",{});var Ike=s(aF);ebe=n(Ike,"STRONG",{});var V3t=s(ebe);g1r=r(V3t,"albert"),V3t.forEach(t),h1r=r(Ike," \u2014 "),Qz=n(Ike,"A",{href:!0});var X3t=s(Qz);p1r=r(X3t,"TFAlbertForSequenceClassification"),X3t.forEach(t),_1r=r(Ike," (ALBERT model)"),Ike.forEach(t),u1r=i(Q),nF=n(Q,"LI",{});var qke=s(nF);obe=n(qke,"STRONG",{});var z3t=s(obe);b1r=r(z3t,"bert"),z3t.forEach(t),v1r=r(qke," \u2014 "),Wz=n(qke,"A",{href:!0});var Q3t=s(Wz);F1r=r(Q3t,"TFBertForSequenceClassification"),Q3t.forEach(t),T1r=r(qke," (BERT model)"),qke.forEach(t),M1r=i(Q),sF=n(Q,"LI",{});var Nke=s(sF);rbe=n(Nke,"STRONG",{});var W3t=s(rbe);E1r=r(W3t,"camembert"),W3t.forEach(t),C1r=r(Nke," \u2014 "),Hz=n(Nke,"A",{href:!0});var H3t=s(Hz);w1r=r(H3t,"TFCamembertForSequenceClassification"),H3t.forEach(t),A1r=r(Nke," (CamemBERT model)"),Nke.forEach(t),y1r=i(Q),lF=n(Q,"LI",{});var jke=s(lF);tbe=n(jke,"STRONG",{});var U3t=s(tbe);L1r=r(U3t,"convbert"),U3t.forEach(t),x1r=r(jke," \u2014 "),Uz=n(jke,"A",{href:!0});var J3t=s(Uz);k1r=r(J3t,"TFConvBertForSequenceClassification"),J3t.forEach(t),S1r=r(jke," (ConvBERT model)"),jke.forEach(t),R1r=i(Q),iF=n(Q,"LI",{});var Dke=s(iF);abe=n(Dke,"STRONG",{});var Y3t=s(abe);B1r=r(Y3t,"ctrl"),Y3t.forEach(t),P1r=r(Dke," \u2014 "),Jz=n(Dke,"A",{href:!0});var K3t=s(Jz);$1r=r(K3t,"TFCTRLForSequenceClassification"),K3t.forEach(t),I1r=r(Dke," (CTRL model)"),Dke.forEach(t),q1r=i(Q),dF=n(Q,"LI",{});var Gke=s(dF);nbe=n(Gke,"STRONG",{});var Z3t=s(nbe);N1r=r(Z3t,"deberta"),Z3t.forEach(t),j1r=r(Gke," \u2014 "),Yz=n(Gke,"A",{href:!0});var e6t=s(Yz);D1r=r(e6t,"TFDebertaForSequenceClassification"),e6t.forEach(t),G1r=r(Gke," (DeBERTa model)"),Gke.forEach(t),O1r=i(Q),cF=n(Q,"LI",{});var Oke=s(cF);sbe=n(Oke,"STRONG",{});var o6t=s(sbe);V1r=r(o6t,"deberta-v2"),o6t.forEach(t),X1r=r(Oke," \u2014 "),Kz=n(Oke,"A",{href:!0});var r6t=s(Kz);z1r=r(r6t,"TFDebertaV2ForSequenceClassification"),r6t.forEach(t),Q1r=r(Oke," (DeBERTa-v2 model)"),Oke.forEach(t),W1r=i(Q),fF=n(Q,"LI",{});var Vke=s(fF);lbe=n(Vke,"STRONG",{});var t6t=s(lbe);H1r=r(t6t,"distilbert"),t6t.forEach(t),U1r=r(Vke," \u2014 "),Zz=n(Vke,"A",{href:!0});var a6t=s(Zz);J1r=r(a6t,"TFDistilBertForSequenceClassification"),a6t.forEach(t),Y1r=r(Vke," (DistilBERT model)"),Vke.forEach(t),K1r=i(Q),mF=n(Q,"LI",{});var Xke=s(mF);ibe=n(Xke,"STRONG",{});var n6t=s(ibe);Z1r=r(n6t,"electra"),n6t.forEach(t),e4r=r(Xke," \u2014 "),eQ=n(Xke,"A",{href:!0});var s6t=s(eQ);o4r=r(s6t,"TFElectraForSequenceClassification"),s6t.forEach(t),r4r=r(Xke," (ELECTRA model)"),Xke.forEach(t),t4r=i(Q),gF=n(Q,"LI",{});var zke=s(gF);dbe=n(zke,"STRONG",{});var l6t=s(dbe);a4r=r(l6t,"flaubert"),l6t.forEach(t),n4r=r(zke," \u2014 "),oQ=n(zke,"A",{href:!0});var i6t=s(oQ);s4r=r(i6t,"TFFlaubertForSequenceClassification"),i6t.forEach(t),l4r=r(zke," (FlauBERT model)"),zke.forEach(t),i4r=i(Q),hF=n(Q,"LI",{});var Qke=s(hF);cbe=n(Qke,"STRONG",{});var d6t=s(cbe);d4r=r(d6t,"funnel"),d6t.forEach(t),c4r=r(Qke," \u2014 "),rQ=n(Qke,"A",{href:!0});var c6t=s(rQ);f4r=r(c6t,"TFFunnelForSequenceClassification"),c6t.forEach(t),m4r=r(Qke," (Funnel Transformer model)"),Qke.forEach(t),g4r=i(Q),pF=n(Q,"LI",{});var Wke=s(pF);fbe=n(Wke,"STRONG",{});var f6t=s(fbe);h4r=r(f6t,"gpt2"),f6t.forEach(t),p4r=r(Wke," \u2014 "),tQ=n(Wke,"A",{href:!0});var m6t=s(tQ);_4r=r(m6t,"TFGPT2ForSequenceClassification"),m6t.forEach(t),u4r=r(Wke," (OpenAI GPT-2 model)"),Wke.forEach(t),b4r=i(Q),_F=n(Q,"LI",{});var Hke=s(_F);mbe=n(Hke,"STRONG",{});var g6t=s(mbe);v4r=r(g6t,"gptj"),g6t.forEach(t),F4r=r(Hke," \u2014 "),aQ=n(Hke,"A",{href:!0});var h6t=s(aQ);T4r=r(h6t,"TFGPTJForSequenceClassification"),h6t.forEach(t),M4r=r(Hke," (GPT-J model)"),Hke.forEach(t),E4r=i(Q),uF=n(Q,"LI",{});var Uke=s(uF);gbe=n(Uke,"STRONG",{});var p6t=s(gbe);C4r=r(p6t,"layoutlm"),p6t.forEach(t),w4r=r(Uke," \u2014 "),nQ=n(Uke,"A",{href:!0});var _6t=s(nQ);A4r=r(_6t,"TFLayoutLMForSequenceClassification"),_6t.forEach(t),y4r=r(Uke," (LayoutLM model)"),Uke.forEach(t),L4r=i(Q),bF=n(Q,"LI",{});var Jke=s(bF);hbe=n(Jke,"STRONG",{});var u6t=s(hbe);x4r=r(u6t,"longformer"),u6t.forEach(t),k4r=r(Jke," \u2014 "),sQ=n(Jke,"A",{href:!0});var b6t=s(sQ);S4r=r(b6t,"TFLongformerForSequenceClassification"),b6t.forEach(t),R4r=r(Jke," (Longformer model)"),Jke.forEach(t),B4r=i(Q),vF=n(Q,"LI",{});var Yke=s(vF);pbe=n(Yke,"STRONG",{});var v6t=s(pbe);P4r=r(v6t,"mobilebert"),v6t.forEach(t),$4r=r(Yke," \u2014 "),lQ=n(Yke,"A",{href:!0});var F6t=s(lQ);I4r=r(F6t,"TFMobileBertForSequenceClassification"),F6t.forEach(t),q4r=r(Yke," (MobileBERT model)"),Yke.forEach(t),N4r=i(Q),FF=n(Q,"LI",{});var Kke=s(FF);_be=n(Kke,"STRONG",{});var T6t=s(_be);j4r=r(T6t,"mpnet"),T6t.forEach(t),D4r=r(Kke," \u2014 "),iQ=n(Kke,"A",{href:!0});var M6t=s(iQ);G4r=r(M6t,"TFMPNetForSequenceClassification"),M6t.forEach(t),O4r=r(Kke," (MPNet model)"),Kke.forEach(t),V4r=i(Q),TF=n(Q,"LI",{});var Zke=s(TF);ube=n(Zke,"STRONG",{});var E6t=s(ube);X4r=r(E6t,"openai-gpt"),E6t.forEach(t),z4r=r(Zke," \u2014 "),dQ=n(Zke,"A",{href:!0});var C6t=s(dQ);Q4r=r(C6t,"TFOpenAIGPTForSequenceClassification"),C6t.forEach(t),W4r=r(Zke," (OpenAI GPT model)"),Zke.forEach(t),H4r=i(Q),MF=n(Q,"LI",{});var eSe=s(MF);bbe=n(eSe,"STRONG",{});var w6t=s(bbe);U4r=r(w6t,"rembert"),w6t.forEach(t),J4r=r(eSe," \u2014 "),cQ=n(eSe,"A",{href:!0});var A6t=s(cQ);Y4r=r(A6t,"TFRemBertForSequenceClassification"),A6t.forEach(t),K4r=r(eSe," (RemBERT model)"),eSe.forEach(t),Z4r=i(Q),EF=n(Q,"LI",{});var oSe=s(EF);vbe=n(oSe,"STRONG",{});var y6t=s(vbe);ebr=r(y6t,"roberta"),y6t.forEach(t),obr=r(oSe," \u2014 "),fQ=n(oSe,"A",{href:!0});var L6t=s(fQ);rbr=r(L6t,"TFRobertaForSequenceClassification"),L6t.forEach(t),tbr=r(oSe," (RoBERTa model)"),oSe.forEach(t),abr=i(Q),CF=n(Q,"LI",{});var rSe=s(CF);Fbe=n(rSe,"STRONG",{});var x6t=s(Fbe);nbr=r(x6t,"roformer"),x6t.forEach(t),sbr=r(rSe," \u2014 "),mQ=n(rSe,"A",{href:!0});var k6t=s(mQ);lbr=r(k6t,"TFRoFormerForSequenceClassification"),k6t.forEach(t),ibr=r(rSe," (RoFormer model)"),rSe.forEach(t),dbr=i(Q),wF=n(Q,"LI",{});var tSe=s(wF);Tbe=n(tSe,"STRONG",{});var S6t=s(Tbe);cbr=r(S6t,"tapas"),S6t.forEach(t),fbr=r(tSe," \u2014 "),gQ=n(tSe,"A",{href:!0});var R6t=s(gQ);mbr=r(R6t,"TFTapasForSequenceClassification"),R6t.forEach(t),gbr=r(tSe," (TAPAS model)"),tSe.forEach(t),hbr=i(Q),AF=n(Q,"LI",{});var aSe=s(AF);Mbe=n(aSe,"STRONG",{});var B6t=s(Mbe);pbr=r(B6t,"transfo-xl"),B6t.forEach(t),_br=r(aSe," \u2014 "),hQ=n(aSe,"A",{href:!0});var P6t=s(hQ);ubr=r(P6t,"TFTransfoXLForSequenceClassification"),P6t.forEach(t),bbr=r(aSe," (Transformer-XL model)"),aSe.forEach(t),vbr=i(Q),yF=n(Q,"LI",{});var nSe=s(yF);Ebe=n(nSe,"STRONG",{});var $6t=s(Ebe);Fbr=r($6t,"xlm"),$6t.forEach(t),Tbr=r(nSe," \u2014 "),pQ=n(nSe,"A",{href:!0});var I6t=s(pQ);Mbr=r(I6t,"TFXLMForSequenceClassification"),I6t.forEach(t),Ebr=r(nSe," (XLM model)"),nSe.forEach(t),Cbr=i(Q),LF=n(Q,"LI",{});var sSe=s(LF);Cbe=n(sSe,"STRONG",{});var q6t=s(Cbe);wbr=r(q6t,"xlm-roberta"),q6t.forEach(t),Abr=r(sSe," \u2014 "),_Q=n(sSe,"A",{href:!0});var N6t=s(_Q);ybr=r(N6t,"TFXLMRobertaForSequenceClassification"),N6t.forEach(t),Lbr=r(sSe," (XLM-RoBERTa model)"),sSe.forEach(t),xbr=i(Q),xF=n(Q,"LI",{});var lSe=s(xF);wbe=n(lSe,"STRONG",{});var j6t=s(wbe);kbr=r(j6t,"xlnet"),j6t.forEach(t),Sbr=r(lSe," \u2014 "),uQ=n(lSe,"A",{href:!0});var D6t=s(uQ);Rbr=r(D6t,"TFXLNetForSequenceClassification"),D6t.forEach(t),Bbr=r(lSe," (XLNet model)"),lSe.forEach(t),Q.forEach(t),Pbr=i(Ta),Abe=n(Ta,"P",{});var G6t=s(Abe);$br=r(G6t,"Examples:"),G6t.forEach(t),Ibr=i(Ta),m(M8.$$.fragment,Ta),Ta.forEach(t),si.forEach(t),A$e=i(c),Oc=n(c,"H2",{class:!0});var qqe=s(Oc);kF=n(qqe,"A",{id:!0,class:!0,href:!0});var O6t=s(kF);ybe=n(O6t,"SPAN",{});var V6t=s(ybe);m(E8.$$.fragment,V6t),V6t.forEach(t),O6t.forEach(t),qbr=i(qqe),Lbe=n(qqe,"SPAN",{});var X6t=s(Lbe);Nbr=r(X6t,"TFAutoModelForMultipleChoice"),X6t.forEach(t),qqe.forEach(t),y$e=i(c),Ar=n(c,"DIV",{class:!0});var ii=s(Ar);m(C8.$$.fragment,ii),jbr=i(ii),Vc=n(ii,"P",{});var yY=s(Vc);Dbr=r(yY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bQ=n(yY,"A",{href:!0});var z6t=s(bQ);Gbr=r(z6t,"from_pretrained()"),z6t.forEach(t),Obr=r(yY," class method or the "),vQ=n(yY,"A",{href:!0});var Q6t=s(vQ);Vbr=r(Q6t,"from_config()"),Q6t.forEach(t),Xbr=r(yY,` class
method.`),yY.forEach(t),zbr=i(ii),w8=n(ii,"P",{});var Nqe=s(w8);Qbr=r(Nqe,"This class cannot be instantiated directly using "),xbe=n(Nqe,"CODE",{});var W6t=s(xbe);Wbr=r(W6t,"__init__()"),W6t.forEach(t),Hbr=r(Nqe," (throws an error)."),Nqe.forEach(t),Ubr=i(ii),Ft=n(ii,"DIV",{class:!0});var di=s(Ft);m(A8.$$.fragment,di),Jbr=i(di),kbe=n(di,"P",{});var H6t=s(kbe);Ybr=r(H6t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),H6t.forEach(t),Kbr=i(di),Xc=n(di,"P",{});var LY=s(Xc);Zbr=r(LY,`Note:
Loading a model from its configuration file does `),Sbe=n(LY,"STRONG",{});var U6t=s(Sbe);e2r=r(U6t,"not"),U6t.forEach(t),o2r=r(LY,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(LY,"A",{href:!0});var J6t=s(FQ);r2r=r(J6t,"from_pretrained()"),J6t.forEach(t),t2r=r(LY," to load the model weights."),LY.forEach(t),a2r=i(di),Rbe=n(di,"P",{});var Y6t=s(Rbe);n2r=r(Y6t,"Examples:"),Y6t.forEach(t),s2r=i(di),m(y8.$$.fragment,di),di.forEach(t),l2r=i(ii),Mo=n(ii,"DIV",{class:!0});var Ma=s(Mo);m(L8.$$.fragment,Ma),i2r=i(Ma),Bbe=n(Ma,"P",{});var K6t=s(Bbe);d2r=r(K6t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),K6t.forEach(t),c2r=i(Ma),Cn=n(Ma,"P",{});var xC=s(Cn);f2r=r(xC,"The model class to instantiate is selected based on the "),Pbe=n(xC,"CODE",{});var Z6t=s(Pbe);m2r=r(Z6t,"model_type"),Z6t.forEach(t),g2r=r(xC,` property of the config object (either
passed as an argument or loaded from `),$be=n(xC,"CODE",{});var evt=s($be);h2r=r(evt,"pretrained_model_name_or_path"),evt.forEach(t),p2r=r(xC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=n(xC,"CODE",{});var ovt=s(Ibe);_2r=r(ovt,"pretrained_model_name_or_path"),ovt.forEach(t),u2r=r(xC,":"),xC.forEach(t),b2r=i(Ma),se=n(Ma,"UL",{});var ie=s(se);SF=n(ie,"LI",{});var iSe=s(SF);qbe=n(iSe,"STRONG",{});var rvt=s(qbe);v2r=r(rvt,"albert"),rvt.forEach(t),F2r=r(iSe," \u2014 "),TQ=n(iSe,"A",{href:!0});var tvt=s(TQ);T2r=r(tvt,"TFAlbertForMultipleChoice"),tvt.forEach(t),M2r=r(iSe," (ALBERT model)"),iSe.forEach(t),E2r=i(ie),RF=n(ie,"LI",{});var dSe=s(RF);Nbe=n(dSe,"STRONG",{});var avt=s(Nbe);C2r=r(avt,"bert"),avt.forEach(t),w2r=r(dSe," \u2014 "),MQ=n(dSe,"A",{href:!0});var nvt=s(MQ);A2r=r(nvt,"TFBertForMultipleChoice"),nvt.forEach(t),y2r=r(dSe," (BERT model)"),dSe.forEach(t),L2r=i(ie),BF=n(ie,"LI",{});var cSe=s(BF);jbe=n(cSe,"STRONG",{});var svt=s(jbe);x2r=r(svt,"camembert"),svt.forEach(t),k2r=r(cSe," \u2014 "),EQ=n(cSe,"A",{href:!0});var lvt=s(EQ);S2r=r(lvt,"TFCamembertForMultipleChoice"),lvt.forEach(t),R2r=r(cSe," (CamemBERT model)"),cSe.forEach(t),B2r=i(ie),PF=n(ie,"LI",{});var fSe=s(PF);Dbe=n(fSe,"STRONG",{});var ivt=s(Dbe);P2r=r(ivt,"convbert"),ivt.forEach(t),$2r=r(fSe," \u2014 "),CQ=n(fSe,"A",{href:!0});var dvt=s(CQ);I2r=r(dvt,"TFConvBertForMultipleChoice"),dvt.forEach(t),q2r=r(fSe," (ConvBERT model)"),fSe.forEach(t),N2r=i(ie),$F=n(ie,"LI",{});var mSe=s($F);Gbe=n(mSe,"STRONG",{});var cvt=s(Gbe);j2r=r(cvt,"distilbert"),cvt.forEach(t),D2r=r(mSe," \u2014 "),wQ=n(mSe,"A",{href:!0});var fvt=s(wQ);G2r=r(fvt,"TFDistilBertForMultipleChoice"),fvt.forEach(t),O2r=r(mSe," (DistilBERT model)"),mSe.forEach(t),V2r=i(ie),IF=n(ie,"LI",{});var gSe=s(IF);Obe=n(gSe,"STRONG",{});var mvt=s(Obe);X2r=r(mvt,"electra"),mvt.forEach(t),z2r=r(gSe," \u2014 "),AQ=n(gSe,"A",{href:!0});var gvt=s(AQ);Q2r=r(gvt,"TFElectraForMultipleChoice"),gvt.forEach(t),W2r=r(gSe," (ELECTRA model)"),gSe.forEach(t),H2r=i(ie),qF=n(ie,"LI",{});var hSe=s(qF);Vbe=n(hSe,"STRONG",{});var hvt=s(Vbe);U2r=r(hvt,"flaubert"),hvt.forEach(t),J2r=r(hSe," \u2014 "),yQ=n(hSe,"A",{href:!0});var pvt=s(yQ);Y2r=r(pvt,"TFFlaubertForMultipleChoice"),pvt.forEach(t),K2r=r(hSe," (FlauBERT model)"),hSe.forEach(t),Z2r=i(ie),NF=n(ie,"LI",{});var pSe=s(NF);Xbe=n(pSe,"STRONG",{});var _vt=s(Xbe);e5r=r(_vt,"funnel"),_vt.forEach(t),o5r=r(pSe," \u2014 "),LQ=n(pSe,"A",{href:!0});var uvt=s(LQ);r5r=r(uvt,"TFFunnelForMultipleChoice"),uvt.forEach(t),t5r=r(pSe," (Funnel Transformer model)"),pSe.forEach(t),a5r=i(ie),jF=n(ie,"LI",{});var _Se=s(jF);zbe=n(_Se,"STRONG",{});var bvt=s(zbe);n5r=r(bvt,"longformer"),bvt.forEach(t),s5r=r(_Se," \u2014 "),xQ=n(_Se,"A",{href:!0});var vvt=s(xQ);l5r=r(vvt,"TFLongformerForMultipleChoice"),vvt.forEach(t),i5r=r(_Se," (Longformer model)"),_Se.forEach(t),d5r=i(ie),DF=n(ie,"LI",{});var uSe=s(DF);Qbe=n(uSe,"STRONG",{});var Fvt=s(Qbe);c5r=r(Fvt,"mobilebert"),Fvt.forEach(t),f5r=r(uSe," \u2014 "),kQ=n(uSe,"A",{href:!0});var Tvt=s(kQ);m5r=r(Tvt,"TFMobileBertForMultipleChoice"),Tvt.forEach(t),g5r=r(uSe," (MobileBERT model)"),uSe.forEach(t),h5r=i(ie),GF=n(ie,"LI",{});var bSe=s(GF);Wbe=n(bSe,"STRONG",{});var Mvt=s(Wbe);p5r=r(Mvt,"mpnet"),Mvt.forEach(t),_5r=r(bSe," \u2014 "),SQ=n(bSe,"A",{href:!0});var Evt=s(SQ);u5r=r(Evt,"TFMPNetForMultipleChoice"),Evt.forEach(t),b5r=r(bSe," (MPNet model)"),bSe.forEach(t),v5r=i(ie),OF=n(ie,"LI",{});var vSe=s(OF);Hbe=n(vSe,"STRONG",{});var Cvt=s(Hbe);F5r=r(Cvt,"rembert"),Cvt.forEach(t),T5r=r(vSe," \u2014 "),RQ=n(vSe,"A",{href:!0});var wvt=s(RQ);M5r=r(wvt,"TFRemBertForMultipleChoice"),wvt.forEach(t),E5r=r(vSe," (RemBERT model)"),vSe.forEach(t),C5r=i(ie),VF=n(ie,"LI",{});var FSe=s(VF);Ube=n(FSe,"STRONG",{});var Avt=s(Ube);w5r=r(Avt,"roberta"),Avt.forEach(t),A5r=r(FSe," \u2014 "),BQ=n(FSe,"A",{href:!0});var yvt=s(BQ);y5r=r(yvt,"TFRobertaForMultipleChoice"),yvt.forEach(t),L5r=r(FSe," (RoBERTa model)"),FSe.forEach(t),x5r=i(ie),XF=n(ie,"LI",{});var TSe=s(XF);Jbe=n(TSe,"STRONG",{});var Lvt=s(Jbe);k5r=r(Lvt,"roformer"),Lvt.forEach(t),S5r=r(TSe," \u2014 "),PQ=n(TSe,"A",{href:!0});var xvt=s(PQ);R5r=r(xvt,"TFRoFormerForMultipleChoice"),xvt.forEach(t),B5r=r(TSe," (RoFormer model)"),TSe.forEach(t),P5r=i(ie),zF=n(ie,"LI",{});var MSe=s(zF);Ybe=n(MSe,"STRONG",{});var kvt=s(Ybe);$5r=r(kvt,"xlm"),kvt.forEach(t),I5r=r(MSe," \u2014 "),$Q=n(MSe,"A",{href:!0});var Svt=s($Q);q5r=r(Svt,"TFXLMForMultipleChoice"),Svt.forEach(t),N5r=r(MSe," (XLM model)"),MSe.forEach(t),j5r=i(ie),QF=n(ie,"LI",{});var ESe=s(QF);Kbe=n(ESe,"STRONG",{});var Rvt=s(Kbe);D5r=r(Rvt,"xlm-roberta"),Rvt.forEach(t),G5r=r(ESe," \u2014 "),IQ=n(ESe,"A",{href:!0});var Bvt=s(IQ);O5r=r(Bvt,"TFXLMRobertaForMultipleChoice"),Bvt.forEach(t),V5r=r(ESe," (XLM-RoBERTa model)"),ESe.forEach(t),X5r=i(ie),WF=n(ie,"LI",{});var CSe=s(WF);Zbe=n(CSe,"STRONG",{});var Pvt=s(Zbe);z5r=r(Pvt,"xlnet"),Pvt.forEach(t),Q5r=r(CSe," \u2014 "),qQ=n(CSe,"A",{href:!0});var $vt=s(qQ);W5r=r($vt,"TFXLNetForMultipleChoice"),$vt.forEach(t),H5r=r(CSe," (XLNet model)"),CSe.forEach(t),ie.forEach(t),U5r=i(Ma),e2e=n(Ma,"P",{});var Ivt=s(e2e);J5r=r(Ivt,"Examples:"),Ivt.forEach(t),Y5r=i(Ma),m(x8.$$.fragment,Ma),Ma.forEach(t),ii.forEach(t),L$e=i(c),zc=n(c,"H2",{class:!0});var jqe=s(zc);HF=n(jqe,"A",{id:!0,class:!0,href:!0});var qvt=s(HF);o2e=n(qvt,"SPAN",{});var Nvt=s(o2e);m(k8.$$.fragment,Nvt),Nvt.forEach(t),qvt.forEach(t),K5r=i(jqe),r2e=n(jqe,"SPAN",{});var jvt=s(r2e);Z5r=r(jvt,"TFAutoModelForTableQuestionAnswering"),jvt.forEach(t),jqe.forEach(t),x$e=i(c),yr=n(c,"DIV",{class:!0});var ci=s(yr);m(S8.$$.fragment,ci),e3r=i(ci),Qc=n(ci,"P",{});var xY=s(Qc);o3r=r(xY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),NQ=n(xY,"A",{href:!0});var Dvt=s(NQ);r3r=r(Dvt,"from_pretrained()"),Dvt.forEach(t),t3r=r(xY," class method or the "),jQ=n(xY,"A",{href:!0});var Gvt=s(jQ);a3r=r(Gvt,"from_config()"),Gvt.forEach(t),n3r=r(xY,` class
method.`),xY.forEach(t),s3r=i(ci),R8=n(ci,"P",{});var Dqe=s(R8);l3r=r(Dqe,"This class cannot be instantiated directly using "),t2e=n(Dqe,"CODE",{});var Ovt=s(t2e);i3r=r(Ovt,"__init__()"),Ovt.forEach(t),d3r=r(Dqe," (throws an error)."),Dqe.forEach(t),c3r=i(ci),Tt=n(ci,"DIV",{class:!0});var fi=s(Tt);m(B8.$$.fragment,fi),f3r=i(fi),a2e=n(fi,"P",{});var Vvt=s(a2e);m3r=r(Vvt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Vvt.forEach(t),g3r=i(fi),Wc=n(fi,"P",{});var kY=s(Wc);h3r=r(kY,`Note:
Loading a model from its configuration file does `),n2e=n(kY,"STRONG",{});var Xvt=s(n2e);p3r=r(Xvt,"not"),Xvt.forEach(t),_3r=r(kY,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(kY,"A",{href:!0});var zvt=s(DQ);u3r=r(zvt,"from_pretrained()"),zvt.forEach(t),b3r=r(kY," to load the model weights."),kY.forEach(t),v3r=i(fi),s2e=n(fi,"P",{});var Qvt=s(s2e);F3r=r(Qvt,"Examples:"),Qvt.forEach(t),T3r=i(fi),m(P8.$$.fragment,fi),fi.forEach(t),M3r=i(ci),Eo=n(ci,"DIV",{class:!0});var Ea=s(Eo);m($8.$$.fragment,Ea),E3r=i(Ea),l2e=n(Ea,"P",{});var Wvt=s(l2e);C3r=r(Wvt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Wvt.forEach(t),w3r=i(Ea),wn=n(Ea,"P",{});var kC=s(wn);A3r=r(kC,"The model class to instantiate is selected based on the "),i2e=n(kC,"CODE",{});var Hvt=s(i2e);y3r=r(Hvt,"model_type"),Hvt.forEach(t),L3r=r(kC,` property of the config object (either
passed as an argument or loaded from `),d2e=n(kC,"CODE",{});var Uvt=s(d2e);x3r=r(Uvt,"pretrained_model_name_or_path"),Uvt.forEach(t),k3r=r(kC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=n(kC,"CODE",{});var Jvt=s(c2e);S3r=r(Jvt,"pretrained_model_name_or_path"),Jvt.forEach(t),R3r=r(kC,":"),kC.forEach(t),B3r=i(Ea),f2e=n(Ea,"UL",{});var Yvt=s(f2e);UF=n(Yvt,"LI",{});var wSe=s(UF);m2e=n(wSe,"STRONG",{});var Kvt=s(m2e);P3r=r(Kvt,"tapas"),Kvt.forEach(t),$3r=r(wSe," \u2014 "),GQ=n(wSe,"A",{href:!0});var Zvt=s(GQ);I3r=r(Zvt,"TFTapasForQuestionAnswering"),Zvt.forEach(t),q3r=r(wSe," (TAPAS model)"),wSe.forEach(t),Yvt.forEach(t),N3r=i(Ea),g2e=n(Ea,"P",{});var eFt=s(g2e);j3r=r(eFt,"Examples:"),eFt.forEach(t),D3r=i(Ea),m(I8.$$.fragment,Ea),Ea.forEach(t),ci.forEach(t),k$e=i(c),Hc=n(c,"H2",{class:!0});var Gqe=s(Hc);JF=n(Gqe,"A",{id:!0,class:!0,href:!0});var oFt=s(JF);h2e=n(oFt,"SPAN",{});var rFt=s(h2e);m(q8.$$.fragment,rFt),rFt.forEach(t),oFt.forEach(t),G3r=i(Gqe),p2e=n(Gqe,"SPAN",{});var tFt=s(p2e);O3r=r(tFt,"TFAutoModelForTokenClassification"),tFt.forEach(t),Gqe.forEach(t),S$e=i(c),Lr=n(c,"DIV",{class:!0});var mi=s(Lr);m(N8.$$.fragment,mi),V3r=i(mi),Uc=n(mi,"P",{});var SY=s(Uc);X3r=r(SY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OQ=n(SY,"A",{href:!0});var aFt=s(OQ);z3r=r(aFt,"from_pretrained()"),aFt.forEach(t),Q3r=r(SY," class method or the "),VQ=n(SY,"A",{href:!0});var nFt=s(VQ);W3r=r(nFt,"from_config()"),nFt.forEach(t),H3r=r(SY,` class
method.`),SY.forEach(t),U3r=i(mi),j8=n(mi,"P",{});var Oqe=s(j8);J3r=r(Oqe,"This class cannot be instantiated directly using "),_2e=n(Oqe,"CODE",{});var sFt=s(_2e);Y3r=r(sFt,"__init__()"),sFt.forEach(t),K3r=r(Oqe," (throws an error)."),Oqe.forEach(t),Z3r=i(mi),Mt=n(mi,"DIV",{class:!0});var gi=s(Mt);m(D8.$$.fragment,gi),e6r=i(gi),u2e=n(gi,"P",{});var lFt=s(u2e);o6r=r(lFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),lFt.forEach(t),r6r=i(gi),Jc=n(gi,"P",{});var RY=s(Jc);t6r=r(RY,`Note:
Loading a model from its configuration file does `),b2e=n(RY,"STRONG",{});var iFt=s(b2e);a6r=r(iFt,"not"),iFt.forEach(t),n6r=r(RY,` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=n(RY,"A",{href:!0});var dFt=s(XQ);s6r=r(dFt,"from_pretrained()"),dFt.forEach(t),l6r=r(RY," to load the model weights."),RY.forEach(t),i6r=i(gi),v2e=n(gi,"P",{});var cFt=s(v2e);d6r=r(cFt,"Examples:"),cFt.forEach(t),c6r=i(gi),m(G8.$$.fragment,gi),gi.forEach(t),f6r=i(mi),Co=n(mi,"DIV",{class:!0});var Ca=s(Co);m(O8.$$.fragment,Ca),m6r=i(Ca),F2e=n(Ca,"P",{});var fFt=s(F2e);g6r=r(fFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fFt.forEach(t),h6r=i(Ca),An=n(Ca,"P",{});var SC=s(An);p6r=r(SC,"The model class to instantiate is selected based on the "),T2e=n(SC,"CODE",{});var mFt=s(T2e);_6r=r(mFt,"model_type"),mFt.forEach(t),u6r=r(SC,` property of the config object (either
passed as an argument or loaded from `),M2e=n(SC,"CODE",{});var gFt=s(M2e);b6r=r(gFt,"pretrained_model_name_or_path"),gFt.forEach(t),v6r=r(SC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=n(SC,"CODE",{});var hFt=s(E2e);F6r=r(hFt,"pretrained_model_name_or_path"),hFt.forEach(t),T6r=r(SC,":"),SC.forEach(t),M6r=i(Ca),Z=n(Ca,"UL",{});var te=s(Z);YF=n(te,"LI",{});var ASe=s(YF);C2e=n(ASe,"STRONG",{});var pFt=s(C2e);E6r=r(pFt,"albert"),pFt.forEach(t),C6r=r(ASe," \u2014 "),zQ=n(ASe,"A",{href:!0});var _Ft=s(zQ);w6r=r(_Ft,"TFAlbertForTokenClassification"),_Ft.forEach(t),A6r=r(ASe," (ALBERT model)"),ASe.forEach(t),y6r=i(te),KF=n(te,"LI",{});var ySe=s(KF);w2e=n(ySe,"STRONG",{});var uFt=s(w2e);L6r=r(uFt,"bert"),uFt.forEach(t),x6r=r(ySe," \u2014 "),QQ=n(ySe,"A",{href:!0});var bFt=s(QQ);k6r=r(bFt,"TFBertForTokenClassification"),bFt.forEach(t),S6r=r(ySe," (BERT model)"),ySe.forEach(t),R6r=i(te),ZF=n(te,"LI",{});var LSe=s(ZF);A2e=n(LSe,"STRONG",{});var vFt=s(A2e);B6r=r(vFt,"camembert"),vFt.forEach(t),P6r=r(LSe," \u2014 "),WQ=n(LSe,"A",{href:!0});var FFt=s(WQ);$6r=r(FFt,"TFCamembertForTokenClassification"),FFt.forEach(t),I6r=r(LSe," (CamemBERT model)"),LSe.forEach(t),q6r=i(te),eT=n(te,"LI",{});var xSe=s(eT);y2e=n(xSe,"STRONG",{});var TFt=s(y2e);N6r=r(TFt,"convbert"),TFt.forEach(t),j6r=r(xSe," \u2014 "),HQ=n(xSe,"A",{href:!0});var MFt=s(HQ);D6r=r(MFt,"TFConvBertForTokenClassification"),MFt.forEach(t),G6r=r(xSe," (ConvBERT model)"),xSe.forEach(t),O6r=i(te),oT=n(te,"LI",{});var kSe=s(oT);L2e=n(kSe,"STRONG",{});var EFt=s(L2e);V6r=r(EFt,"deberta"),EFt.forEach(t),X6r=r(kSe," \u2014 "),UQ=n(kSe,"A",{href:!0});var CFt=s(UQ);z6r=r(CFt,"TFDebertaForTokenClassification"),CFt.forEach(t),Q6r=r(kSe," (DeBERTa model)"),kSe.forEach(t),W6r=i(te),rT=n(te,"LI",{});var SSe=s(rT);x2e=n(SSe,"STRONG",{});var wFt=s(x2e);H6r=r(wFt,"deberta-v2"),wFt.forEach(t),U6r=r(SSe," \u2014 "),JQ=n(SSe,"A",{href:!0});var AFt=s(JQ);J6r=r(AFt,"TFDebertaV2ForTokenClassification"),AFt.forEach(t),Y6r=r(SSe," (DeBERTa-v2 model)"),SSe.forEach(t),K6r=i(te),tT=n(te,"LI",{});var RSe=s(tT);k2e=n(RSe,"STRONG",{});var yFt=s(k2e);Z6r=r(yFt,"distilbert"),yFt.forEach(t),evr=r(RSe," \u2014 "),YQ=n(RSe,"A",{href:!0});var LFt=s(YQ);ovr=r(LFt,"TFDistilBertForTokenClassification"),LFt.forEach(t),rvr=r(RSe," (DistilBERT model)"),RSe.forEach(t),tvr=i(te),aT=n(te,"LI",{});var BSe=s(aT);S2e=n(BSe,"STRONG",{});var xFt=s(S2e);avr=r(xFt,"electra"),xFt.forEach(t),nvr=r(BSe," \u2014 "),KQ=n(BSe,"A",{href:!0});var kFt=s(KQ);svr=r(kFt,"TFElectraForTokenClassification"),kFt.forEach(t),lvr=r(BSe," (ELECTRA model)"),BSe.forEach(t),ivr=i(te),nT=n(te,"LI",{});var PSe=s(nT);R2e=n(PSe,"STRONG",{});var SFt=s(R2e);dvr=r(SFt,"flaubert"),SFt.forEach(t),cvr=r(PSe," \u2014 "),ZQ=n(PSe,"A",{href:!0});var RFt=s(ZQ);fvr=r(RFt,"TFFlaubertForTokenClassification"),RFt.forEach(t),mvr=r(PSe," (FlauBERT model)"),PSe.forEach(t),gvr=i(te),sT=n(te,"LI",{});var $Se=s(sT);B2e=n($Se,"STRONG",{});var BFt=s(B2e);hvr=r(BFt,"funnel"),BFt.forEach(t),pvr=r($Se," \u2014 "),eW=n($Se,"A",{href:!0});var PFt=s(eW);_vr=r(PFt,"TFFunnelForTokenClassification"),PFt.forEach(t),uvr=r($Se," (Funnel Transformer model)"),$Se.forEach(t),bvr=i(te),lT=n(te,"LI",{});var ISe=s(lT);P2e=n(ISe,"STRONG",{});var $Ft=s(P2e);vvr=r($Ft,"layoutlm"),$Ft.forEach(t),Fvr=r(ISe," \u2014 "),oW=n(ISe,"A",{href:!0});var IFt=s(oW);Tvr=r(IFt,"TFLayoutLMForTokenClassification"),IFt.forEach(t),Mvr=r(ISe," (LayoutLM model)"),ISe.forEach(t),Evr=i(te),iT=n(te,"LI",{});var qSe=s(iT);$2e=n(qSe,"STRONG",{});var qFt=s($2e);Cvr=r(qFt,"longformer"),qFt.forEach(t),wvr=r(qSe," \u2014 "),rW=n(qSe,"A",{href:!0});var NFt=s(rW);Avr=r(NFt,"TFLongformerForTokenClassification"),NFt.forEach(t),yvr=r(qSe," (Longformer model)"),qSe.forEach(t),Lvr=i(te),dT=n(te,"LI",{});var NSe=s(dT);I2e=n(NSe,"STRONG",{});var jFt=s(I2e);xvr=r(jFt,"mobilebert"),jFt.forEach(t),kvr=r(NSe," \u2014 "),tW=n(NSe,"A",{href:!0});var DFt=s(tW);Svr=r(DFt,"TFMobileBertForTokenClassification"),DFt.forEach(t),Rvr=r(NSe," (MobileBERT model)"),NSe.forEach(t),Bvr=i(te),cT=n(te,"LI",{});var jSe=s(cT);q2e=n(jSe,"STRONG",{});var GFt=s(q2e);Pvr=r(GFt,"mpnet"),GFt.forEach(t),$vr=r(jSe," \u2014 "),aW=n(jSe,"A",{href:!0});var OFt=s(aW);Ivr=r(OFt,"TFMPNetForTokenClassification"),OFt.forEach(t),qvr=r(jSe," (MPNet model)"),jSe.forEach(t),Nvr=i(te),fT=n(te,"LI",{});var DSe=s(fT);N2e=n(DSe,"STRONG",{});var VFt=s(N2e);jvr=r(VFt,"rembert"),VFt.forEach(t),Dvr=r(DSe," \u2014 "),nW=n(DSe,"A",{href:!0});var XFt=s(nW);Gvr=r(XFt,"TFRemBertForTokenClassification"),XFt.forEach(t),Ovr=r(DSe," (RemBERT model)"),DSe.forEach(t),Vvr=i(te),mT=n(te,"LI",{});var GSe=s(mT);j2e=n(GSe,"STRONG",{});var zFt=s(j2e);Xvr=r(zFt,"roberta"),zFt.forEach(t),zvr=r(GSe," \u2014 "),sW=n(GSe,"A",{href:!0});var QFt=s(sW);Qvr=r(QFt,"TFRobertaForTokenClassification"),QFt.forEach(t),Wvr=r(GSe," (RoBERTa model)"),GSe.forEach(t),Hvr=i(te),gT=n(te,"LI",{});var OSe=s(gT);D2e=n(OSe,"STRONG",{});var WFt=s(D2e);Uvr=r(WFt,"roformer"),WFt.forEach(t),Jvr=r(OSe," \u2014 "),lW=n(OSe,"A",{href:!0});var HFt=s(lW);Yvr=r(HFt,"TFRoFormerForTokenClassification"),HFt.forEach(t),Kvr=r(OSe," (RoFormer model)"),OSe.forEach(t),Zvr=i(te),hT=n(te,"LI",{});var VSe=s(hT);G2e=n(VSe,"STRONG",{});var UFt=s(G2e);eFr=r(UFt,"xlm"),UFt.forEach(t),oFr=r(VSe," \u2014 "),iW=n(VSe,"A",{href:!0});var JFt=s(iW);rFr=r(JFt,"TFXLMForTokenClassification"),JFt.forEach(t),tFr=r(VSe," (XLM model)"),VSe.forEach(t),aFr=i(te),pT=n(te,"LI",{});var XSe=s(pT);O2e=n(XSe,"STRONG",{});var YFt=s(O2e);nFr=r(YFt,"xlm-roberta"),YFt.forEach(t),sFr=r(XSe," \u2014 "),dW=n(XSe,"A",{href:!0});var KFt=s(dW);lFr=r(KFt,"TFXLMRobertaForTokenClassification"),KFt.forEach(t),iFr=r(XSe," (XLM-RoBERTa model)"),XSe.forEach(t),dFr=i(te),_T=n(te,"LI",{});var zSe=s(_T);V2e=n(zSe,"STRONG",{});var ZFt=s(V2e);cFr=r(ZFt,"xlnet"),ZFt.forEach(t),fFr=r(zSe," \u2014 "),cW=n(zSe,"A",{href:!0});var eTt=s(cW);mFr=r(eTt,"TFXLNetForTokenClassification"),eTt.forEach(t),gFr=r(zSe," (XLNet model)"),zSe.forEach(t),te.forEach(t),hFr=i(Ca),X2e=n(Ca,"P",{});var oTt=s(X2e);pFr=r(oTt,"Examples:"),oTt.forEach(t),_Fr=i(Ca),m(V8.$$.fragment,Ca),Ca.forEach(t),mi.forEach(t),R$e=i(c),Yc=n(c,"H2",{class:!0});var Vqe=s(Yc);uT=n(Vqe,"A",{id:!0,class:!0,href:!0});var rTt=s(uT);z2e=n(rTt,"SPAN",{});var tTt=s(z2e);m(X8.$$.fragment,tTt),tTt.forEach(t),rTt.forEach(t),uFr=i(Vqe),Q2e=n(Vqe,"SPAN",{});var aTt=s(Q2e);bFr=r(aTt,"TFAutoModelForQuestionAnswering"),aTt.forEach(t),Vqe.forEach(t),B$e=i(c),xr=n(c,"DIV",{class:!0});var hi=s(xr);m(z8.$$.fragment,hi),vFr=i(hi),Kc=n(hi,"P",{});var BY=s(Kc);FFr=r(BY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fW=n(BY,"A",{href:!0});var nTt=s(fW);TFr=r(nTt,"from_pretrained()"),nTt.forEach(t),MFr=r(BY," class method or the "),mW=n(BY,"A",{href:!0});var sTt=s(mW);EFr=r(sTt,"from_config()"),sTt.forEach(t),CFr=r(BY,` class
method.`),BY.forEach(t),wFr=i(hi),Q8=n(hi,"P",{});var Xqe=s(Q8);AFr=r(Xqe,"This class cannot be instantiated directly using "),W2e=n(Xqe,"CODE",{});var lTt=s(W2e);yFr=r(lTt,"__init__()"),lTt.forEach(t),LFr=r(Xqe," (throws an error)."),Xqe.forEach(t),xFr=i(hi),Et=n(hi,"DIV",{class:!0});var pi=s(Et);m(W8.$$.fragment,pi),kFr=i(pi),H2e=n(pi,"P",{});var iTt=s(H2e);SFr=r(iTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),iTt.forEach(t),RFr=i(pi),Zc=n(pi,"P",{});var PY=s(Zc);BFr=r(PY,`Note:
Loading a model from its configuration file does `),U2e=n(PY,"STRONG",{});var dTt=s(U2e);PFr=r(dTt,"not"),dTt.forEach(t),$Fr=r(PY,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(PY,"A",{href:!0});var cTt=s(gW);IFr=r(cTt,"from_pretrained()"),cTt.forEach(t),qFr=r(PY," to load the model weights."),PY.forEach(t),NFr=i(pi),J2e=n(pi,"P",{});var fTt=s(J2e);jFr=r(fTt,"Examples:"),fTt.forEach(t),DFr=i(pi),m(H8.$$.fragment,pi),pi.forEach(t),GFr=i(hi),wo=n(hi,"DIV",{class:!0});var wa=s(wo);m(U8.$$.fragment,wa),OFr=i(wa),Y2e=n(wa,"P",{});var mTt=s(Y2e);VFr=r(mTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mTt.forEach(t),XFr=i(wa),yn=n(wa,"P",{});var RC=s(yn);zFr=r(RC,"The model class to instantiate is selected based on the "),K2e=n(RC,"CODE",{});var gTt=s(K2e);QFr=r(gTt,"model_type"),gTt.forEach(t),WFr=r(RC,` property of the config object (either
passed as an argument or loaded from `),Z2e=n(RC,"CODE",{});var hTt=s(Z2e);HFr=r(hTt,"pretrained_model_name_or_path"),hTt.forEach(t),UFr=r(RC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e5e=n(RC,"CODE",{});var pTt=s(e5e);JFr=r(pTt,"pretrained_model_name_or_path"),pTt.forEach(t),YFr=r(RC,":"),RC.forEach(t),KFr=i(wa),ee=n(wa,"UL",{});var ae=s(ee);bT=n(ae,"LI",{});var QSe=s(bT);o5e=n(QSe,"STRONG",{});var _Tt=s(o5e);ZFr=r(_Tt,"albert"),_Tt.forEach(t),eTr=r(QSe," \u2014 "),hW=n(QSe,"A",{href:!0});var uTt=s(hW);oTr=r(uTt,"TFAlbertForQuestionAnswering"),uTt.forEach(t),rTr=r(QSe," (ALBERT model)"),QSe.forEach(t),tTr=i(ae),vT=n(ae,"LI",{});var WSe=s(vT);r5e=n(WSe,"STRONG",{});var bTt=s(r5e);aTr=r(bTt,"bert"),bTt.forEach(t),nTr=r(WSe," \u2014 "),pW=n(WSe,"A",{href:!0});var vTt=s(pW);sTr=r(vTt,"TFBertForQuestionAnswering"),vTt.forEach(t),lTr=r(WSe," (BERT model)"),WSe.forEach(t),iTr=i(ae),FT=n(ae,"LI",{});var HSe=s(FT);t5e=n(HSe,"STRONG",{});var FTt=s(t5e);dTr=r(FTt,"camembert"),FTt.forEach(t),cTr=r(HSe," \u2014 "),_W=n(HSe,"A",{href:!0});var TTt=s(_W);fTr=r(TTt,"TFCamembertForQuestionAnswering"),TTt.forEach(t),mTr=r(HSe," (CamemBERT model)"),HSe.forEach(t),gTr=i(ae),TT=n(ae,"LI",{});var USe=s(TT);a5e=n(USe,"STRONG",{});var MTt=s(a5e);hTr=r(MTt,"convbert"),MTt.forEach(t),pTr=r(USe," \u2014 "),uW=n(USe,"A",{href:!0});var ETt=s(uW);_Tr=r(ETt,"TFConvBertForQuestionAnswering"),ETt.forEach(t),uTr=r(USe," (ConvBERT model)"),USe.forEach(t),bTr=i(ae),MT=n(ae,"LI",{});var JSe=s(MT);n5e=n(JSe,"STRONG",{});var CTt=s(n5e);vTr=r(CTt,"deberta"),CTt.forEach(t),FTr=r(JSe," \u2014 "),bW=n(JSe,"A",{href:!0});var wTt=s(bW);TTr=r(wTt,"TFDebertaForQuestionAnswering"),wTt.forEach(t),MTr=r(JSe," (DeBERTa model)"),JSe.forEach(t),ETr=i(ae),ET=n(ae,"LI",{});var YSe=s(ET);s5e=n(YSe,"STRONG",{});var ATt=s(s5e);CTr=r(ATt,"deberta-v2"),ATt.forEach(t),wTr=r(YSe," \u2014 "),vW=n(YSe,"A",{href:!0});var yTt=s(vW);ATr=r(yTt,"TFDebertaV2ForQuestionAnswering"),yTt.forEach(t),yTr=r(YSe," (DeBERTa-v2 model)"),YSe.forEach(t),LTr=i(ae),CT=n(ae,"LI",{});var KSe=s(CT);l5e=n(KSe,"STRONG",{});var LTt=s(l5e);xTr=r(LTt,"distilbert"),LTt.forEach(t),kTr=r(KSe," \u2014 "),FW=n(KSe,"A",{href:!0});var xTt=s(FW);STr=r(xTt,"TFDistilBertForQuestionAnswering"),xTt.forEach(t),RTr=r(KSe," (DistilBERT model)"),KSe.forEach(t),BTr=i(ae),wT=n(ae,"LI",{});var ZSe=s(wT);i5e=n(ZSe,"STRONG",{});var kTt=s(i5e);PTr=r(kTt,"electra"),kTt.forEach(t),$Tr=r(ZSe," \u2014 "),TW=n(ZSe,"A",{href:!0});var STt=s(TW);ITr=r(STt,"TFElectraForQuestionAnswering"),STt.forEach(t),qTr=r(ZSe," (ELECTRA model)"),ZSe.forEach(t),NTr=i(ae),AT=n(ae,"LI",{});var eRe=s(AT);d5e=n(eRe,"STRONG",{});var RTt=s(d5e);jTr=r(RTt,"flaubert"),RTt.forEach(t),DTr=r(eRe," \u2014 "),MW=n(eRe,"A",{href:!0});var BTt=s(MW);GTr=r(BTt,"TFFlaubertForQuestionAnsweringSimple"),BTt.forEach(t),OTr=r(eRe," (FlauBERT model)"),eRe.forEach(t),VTr=i(ae),yT=n(ae,"LI",{});var oRe=s(yT);c5e=n(oRe,"STRONG",{});var PTt=s(c5e);XTr=r(PTt,"funnel"),PTt.forEach(t),zTr=r(oRe," \u2014 "),EW=n(oRe,"A",{href:!0});var $Tt=s(EW);QTr=r($Tt,"TFFunnelForQuestionAnswering"),$Tt.forEach(t),WTr=r(oRe," (Funnel Transformer model)"),oRe.forEach(t),HTr=i(ae),LT=n(ae,"LI",{});var rRe=s(LT);f5e=n(rRe,"STRONG",{});var ITt=s(f5e);UTr=r(ITt,"gptj"),ITt.forEach(t),JTr=r(rRe," \u2014 "),CW=n(rRe,"A",{href:!0});var qTt=s(CW);YTr=r(qTt,"TFGPTJForQuestionAnswering"),qTt.forEach(t),KTr=r(rRe," (GPT-J model)"),rRe.forEach(t),ZTr=i(ae),xT=n(ae,"LI",{});var tRe=s(xT);m5e=n(tRe,"STRONG",{});var NTt=s(m5e);eMr=r(NTt,"longformer"),NTt.forEach(t),oMr=r(tRe," \u2014 "),wW=n(tRe,"A",{href:!0});var jTt=s(wW);rMr=r(jTt,"TFLongformerForQuestionAnswering"),jTt.forEach(t),tMr=r(tRe," (Longformer model)"),tRe.forEach(t),aMr=i(ae),kT=n(ae,"LI",{});var aRe=s(kT);g5e=n(aRe,"STRONG",{});var DTt=s(g5e);nMr=r(DTt,"mobilebert"),DTt.forEach(t),sMr=r(aRe," \u2014 "),AW=n(aRe,"A",{href:!0});var GTt=s(AW);lMr=r(GTt,"TFMobileBertForQuestionAnswering"),GTt.forEach(t),iMr=r(aRe," (MobileBERT model)"),aRe.forEach(t),dMr=i(ae),ST=n(ae,"LI",{});var nRe=s(ST);h5e=n(nRe,"STRONG",{});var OTt=s(h5e);cMr=r(OTt,"mpnet"),OTt.forEach(t),fMr=r(nRe," \u2014 "),yW=n(nRe,"A",{href:!0});var VTt=s(yW);mMr=r(VTt,"TFMPNetForQuestionAnswering"),VTt.forEach(t),gMr=r(nRe," (MPNet model)"),nRe.forEach(t),hMr=i(ae),RT=n(ae,"LI",{});var sRe=s(RT);p5e=n(sRe,"STRONG",{});var XTt=s(p5e);pMr=r(XTt,"rembert"),XTt.forEach(t),_Mr=r(sRe," \u2014 "),LW=n(sRe,"A",{href:!0});var zTt=s(LW);uMr=r(zTt,"TFRemBertForQuestionAnswering"),zTt.forEach(t),bMr=r(sRe," (RemBERT model)"),sRe.forEach(t),vMr=i(ae),BT=n(ae,"LI",{});var lRe=s(BT);_5e=n(lRe,"STRONG",{});var QTt=s(_5e);FMr=r(QTt,"roberta"),QTt.forEach(t),TMr=r(lRe," \u2014 "),xW=n(lRe,"A",{href:!0});var WTt=s(xW);MMr=r(WTt,"TFRobertaForQuestionAnswering"),WTt.forEach(t),EMr=r(lRe," (RoBERTa model)"),lRe.forEach(t),CMr=i(ae),PT=n(ae,"LI",{});var iRe=s(PT);u5e=n(iRe,"STRONG",{});var HTt=s(u5e);wMr=r(HTt,"roformer"),HTt.forEach(t),AMr=r(iRe," \u2014 "),kW=n(iRe,"A",{href:!0});var UTt=s(kW);yMr=r(UTt,"TFRoFormerForQuestionAnswering"),UTt.forEach(t),LMr=r(iRe," (RoFormer model)"),iRe.forEach(t),xMr=i(ae),$T=n(ae,"LI",{});var dRe=s($T);b5e=n(dRe,"STRONG",{});var JTt=s(b5e);kMr=r(JTt,"xlm"),JTt.forEach(t),SMr=r(dRe," \u2014 "),SW=n(dRe,"A",{href:!0});var YTt=s(SW);RMr=r(YTt,"TFXLMForQuestionAnsweringSimple"),YTt.forEach(t),BMr=r(dRe," (XLM model)"),dRe.forEach(t),PMr=i(ae),IT=n(ae,"LI",{});var cRe=s(IT);v5e=n(cRe,"STRONG",{});var KTt=s(v5e);$Mr=r(KTt,"xlm-roberta"),KTt.forEach(t),IMr=r(cRe," \u2014 "),RW=n(cRe,"A",{href:!0});var ZTt=s(RW);qMr=r(ZTt,"TFXLMRobertaForQuestionAnswering"),ZTt.forEach(t),NMr=r(cRe," (XLM-RoBERTa model)"),cRe.forEach(t),jMr=i(ae),qT=n(ae,"LI",{});var fRe=s(qT);F5e=n(fRe,"STRONG",{});var eMt=s(F5e);DMr=r(eMt,"xlnet"),eMt.forEach(t),GMr=r(fRe," \u2014 "),BW=n(fRe,"A",{href:!0});var oMt=s(BW);OMr=r(oMt,"TFXLNetForQuestionAnsweringSimple"),oMt.forEach(t),VMr=r(fRe," (XLNet model)"),fRe.forEach(t),ae.forEach(t),XMr=i(wa),T5e=n(wa,"P",{});var rMt=s(T5e);zMr=r(rMt,"Examples:"),rMt.forEach(t),QMr=i(wa),m(J8.$$.fragment,wa),wa.forEach(t),hi.forEach(t),P$e=i(c),ef=n(c,"H2",{class:!0});var zqe=s(ef);NT=n(zqe,"A",{id:!0,class:!0,href:!0});var tMt=s(NT);M5e=n(tMt,"SPAN",{});var aMt=s(M5e);m(Y8.$$.fragment,aMt),aMt.forEach(t),tMt.forEach(t),WMr=i(zqe),E5e=n(zqe,"SPAN",{});var nMt=s(E5e);HMr=r(nMt,"TFAutoModelForVision2Seq"),nMt.forEach(t),zqe.forEach(t),$$e=i(c),kr=n(c,"DIV",{class:!0});var _i=s(kr);m(K8.$$.fragment,_i),UMr=i(_i),of=n(_i,"P",{});var $Y=s(of);JMr=r($Y,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PW=n($Y,"A",{href:!0});var sMt=s(PW);YMr=r(sMt,"from_pretrained()"),sMt.forEach(t),KMr=r($Y," class method or the "),$W=n($Y,"A",{href:!0});var lMt=s($W);ZMr=r(lMt,"from_config()"),lMt.forEach(t),eEr=r($Y,` class
method.`),$Y.forEach(t),oEr=i(_i),Z8=n(_i,"P",{});var Qqe=s(Z8);rEr=r(Qqe,"This class cannot be instantiated directly using "),C5e=n(Qqe,"CODE",{});var iMt=s(C5e);tEr=r(iMt,"__init__()"),iMt.forEach(t),aEr=r(Qqe," (throws an error)."),Qqe.forEach(t),nEr=i(_i),Ct=n(_i,"DIV",{class:!0});var ui=s(Ct);m(eL.$$.fragment,ui),sEr=i(ui),w5e=n(ui,"P",{});var dMt=s(w5e);lEr=r(dMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dMt.forEach(t),iEr=i(ui),rf=n(ui,"P",{});var IY=s(rf);dEr=r(IY,`Note:
Loading a model from its configuration file does `),A5e=n(IY,"STRONG",{});var cMt=s(A5e);cEr=r(cMt,"not"),cMt.forEach(t),fEr=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n(IY,"A",{href:!0});var fMt=s(IW);mEr=r(fMt,"from_pretrained()"),fMt.forEach(t),gEr=r(IY," to load the model weights."),IY.forEach(t),hEr=i(ui),y5e=n(ui,"P",{});var mMt=s(y5e);pEr=r(mMt,"Examples:"),mMt.forEach(t),_Er=i(ui),m(oL.$$.fragment,ui),ui.forEach(t),uEr=i(_i),Ao=n(_i,"DIV",{class:!0});var Aa=s(Ao);m(rL.$$.fragment,Aa),bEr=i(Aa),L5e=n(Aa,"P",{});var gMt=s(L5e);vEr=r(gMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gMt.forEach(t),FEr=i(Aa),Ln=n(Aa,"P",{});var BC=s(Ln);TEr=r(BC,"The model class to instantiate is selected based on the "),x5e=n(BC,"CODE",{});var hMt=s(x5e);MEr=r(hMt,"model_type"),hMt.forEach(t),EEr=r(BC,` property of the config object (either
passed as an argument or loaded from `),k5e=n(BC,"CODE",{});var pMt=s(k5e);CEr=r(pMt,"pretrained_model_name_or_path"),pMt.forEach(t),wEr=r(BC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S5e=n(BC,"CODE",{});var _Mt=s(S5e);AEr=r(_Mt,"pretrained_model_name_or_path"),_Mt.forEach(t),yEr=r(BC,":"),BC.forEach(t),LEr=i(Aa),R5e=n(Aa,"UL",{});var uMt=s(R5e);jT=n(uMt,"LI",{});var mRe=s(jT);B5e=n(mRe,"STRONG",{});var bMt=s(B5e);xEr=r(bMt,"vision-encoder-decoder"),bMt.forEach(t),kEr=r(mRe," \u2014 "),qW=n(mRe,"A",{href:!0});var vMt=s(qW);SEr=r(vMt,"TFVisionEncoderDecoderModel"),vMt.forEach(t),REr=r(mRe," (Vision Encoder decoder model)"),mRe.forEach(t),uMt.forEach(t),BEr=i(Aa),P5e=n(Aa,"P",{});var FMt=s(P5e);PEr=r(FMt,"Examples:"),FMt.forEach(t),$Er=i(Aa),m(tL.$$.fragment,Aa),Aa.forEach(t),_i.forEach(t),I$e=i(c),tf=n(c,"H2",{class:!0});var Wqe=s(tf);DT=n(Wqe,"A",{id:!0,class:!0,href:!0});var TMt=s(DT);$5e=n(TMt,"SPAN",{});var MMt=s($5e);m(aL.$$.fragment,MMt),MMt.forEach(t),TMt.forEach(t),IEr=i(Wqe),I5e=n(Wqe,"SPAN",{});var EMt=s(I5e);qEr=r(EMt,"TFAutoModelForSpeechSeq2Seq"),EMt.forEach(t),Wqe.forEach(t),q$e=i(c),Sr=n(c,"DIV",{class:!0});var bi=s(Sr);m(nL.$$.fragment,bi),NEr=i(bi),af=n(bi,"P",{});var qY=s(af);jEr=r(qY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NW=n(qY,"A",{href:!0});var CMt=s(NW);DEr=r(CMt,"from_pretrained()"),CMt.forEach(t),GEr=r(qY," class method or the "),jW=n(qY,"A",{href:!0});var wMt=s(jW);OEr=r(wMt,"from_config()"),wMt.forEach(t),VEr=r(qY,` class
method.`),qY.forEach(t),XEr=i(bi),sL=n(bi,"P",{});var Hqe=s(sL);zEr=r(Hqe,"This class cannot be instantiated directly using "),q5e=n(Hqe,"CODE",{});var AMt=s(q5e);QEr=r(AMt,"__init__()"),AMt.forEach(t),WEr=r(Hqe," (throws an error)."),Hqe.forEach(t),HEr=i(bi),wt=n(bi,"DIV",{class:!0});var vi=s(wt);m(lL.$$.fragment,vi),UEr=i(vi),N5e=n(vi,"P",{});var yMt=s(N5e);JEr=r(yMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),yMt.forEach(t),YEr=i(vi),nf=n(vi,"P",{});var NY=s(nf);KEr=r(NY,`Note:
Loading a model from its configuration file does `),j5e=n(NY,"STRONG",{});var LMt=s(j5e);ZEr=r(LMt,"not"),LMt.forEach(t),eCr=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=n(NY,"A",{href:!0});var xMt=s(DW);oCr=r(xMt,"from_pretrained()"),xMt.forEach(t),rCr=r(NY," to load the model weights."),NY.forEach(t),tCr=i(vi),D5e=n(vi,"P",{});var kMt=s(D5e);aCr=r(kMt,"Examples:"),kMt.forEach(t),nCr=i(vi),m(iL.$$.fragment,vi),vi.forEach(t),sCr=i(bi),yo=n(bi,"DIV",{class:!0});var ya=s(yo);m(dL.$$.fragment,ya),lCr=i(ya),G5e=n(ya,"P",{});var SMt=s(G5e);iCr=r(SMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),SMt.forEach(t),dCr=i(ya),xn=n(ya,"P",{});var PC=s(xn);cCr=r(PC,"The model class to instantiate is selected based on the "),O5e=n(PC,"CODE",{});var RMt=s(O5e);fCr=r(RMt,"model_type"),RMt.forEach(t),mCr=r(PC,` property of the config object (either
passed as an argument or loaded from `),V5e=n(PC,"CODE",{});var BMt=s(V5e);gCr=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),hCr=r(PC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X5e=n(PC,"CODE",{});var PMt=s(X5e);pCr=r(PMt,"pretrained_model_name_or_path"),PMt.forEach(t),_Cr=r(PC,":"),PC.forEach(t),uCr=i(ya),z5e=n(ya,"UL",{});var $Mt=s(z5e);GT=n($Mt,"LI",{});var gRe=s(GT);Q5e=n(gRe,"STRONG",{});var IMt=s(Q5e);bCr=r(IMt,"speech_to_text"),IMt.forEach(t),vCr=r(gRe," \u2014 "),GW=n(gRe,"A",{href:!0});var qMt=s(GW);FCr=r(qMt,"TFSpeech2TextForConditionalGeneration"),qMt.forEach(t),TCr=r(gRe," (Speech2Text model)"),gRe.forEach(t),$Mt.forEach(t),MCr=i(ya),W5e=n(ya,"P",{});var NMt=s(W5e);ECr=r(NMt,"Examples:"),NMt.forEach(t),CCr=i(ya),m(cL.$$.fragment,ya),ya.forEach(t),bi.forEach(t),N$e=i(c),sf=n(c,"H2",{class:!0});var Uqe=s(sf);OT=n(Uqe,"A",{id:!0,class:!0,href:!0});var jMt=s(OT);H5e=n(jMt,"SPAN",{});var DMt=s(H5e);m(fL.$$.fragment,DMt),DMt.forEach(t),jMt.forEach(t),wCr=i(Uqe),U5e=n(Uqe,"SPAN",{});var GMt=s(U5e);ACr=r(GMt,"FlaxAutoModel"),GMt.forEach(t),Uqe.forEach(t),j$e=i(c),Rr=n(c,"DIV",{class:!0});var Fi=s(Rr);m(mL.$$.fragment,Fi),yCr=i(Fi),lf=n(Fi,"P",{});var jY=s(lf);LCr=r(jY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OW=n(jY,"A",{href:!0});var OMt=s(OW);xCr=r(OMt,"from_pretrained()"),OMt.forEach(t),kCr=r(jY," class method or the "),VW=n(jY,"A",{href:!0});var VMt=s(VW);SCr=r(VMt,"from_config()"),VMt.forEach(t),RCr=r(jY,` class
method.`),jY.forEach(t),BCr=i(Fi),gL=n(Fi,"P",{});var Jqe=s(gL);PCr=r(Jqe,"This class cannot be instantiated directly using "),J5e=n(Jqe,"CODE",{});var XMt=s(J5e);$Cr=r(XMt,"__init__()"),XMt.forEach(t),ICr=r(Jqe," (throws an error)."),Jqe.forEach(t),qCr=i(Fi),At=n(Fi,"DIV",{class:!0});var Ti=s(At);m(hL.$$.fragment,Ti),NCr=i(Ti),Y5e=n(Ti,"P",{});var zMt=s(Y5e);jCr=r(zMt,"Instantiates one of the base model classes of the library from a configuration."),zMt.forEach(t),DCr=i(Ti),df=n(Ti,"P",{});var DY=s(df);GCr=r(DY,`Note:
Loading a model from its configuration file does `),K5e=n(DY,"STRONG",{});var QMt=s(K5e);OCr=r(QMt,"not"),QMt.forEach(t),VCr=r(DY,` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=n(DY,"A",{href:!0});var WMt=s(XW);XCr=r(WMt,"from_pretrained()"),WMt.forEach(t),zCr=r(DY," to load the model weights."),DY.forEach(t),QCr=i(Ti),Z5e=n(Ti,"P",{});var HMt=s(Z5e);WCr=r(HMt,"Examples:"),HMt.forEach(t),HCr=i(Ti),m(pL.$$.fragment,Ti),Ti.forEach(t),UCr=i(Fi),Lo=n(Fi,"DIV",{class:!0});var La=s(Lo);m(_L.$$.fragment,La),JCr=i(La),e3e=n(La,"P",{});var UMt=s(e3e);YCr=r(UMt,"Instantiate one of the base model classes of the library from a pretrained model."),UMt.forEach(t),KCr=i(La),kn=n(La,"P",{});var $C=s(kn);ZCr=r($C,"The model class to instantiate is selected based on the "),o3e=n($C,"CODE",{});var JMt=s(o3e);ewr=r(JMt,"model_type"),JMt.forEach(t),owr=r($C,` property of the config object (either
passed as an argument or loaded from `),r3e=n($C,"CODE",{});var YMt=s(r3e);rwr=r(YMt,"pretrained_model_name_or_path"),YMt.forEach(t),twr=r($C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t3e=n($C,"CODE",{});var KMt=s(t3e);awr=r(KMt,"pretrained_model_name_or_path"),KMt.forEach(t),nwr=r($C,":"),$C.forEach(t),swr=i(La),z=n(La,"UL",{});var W=s(z);VT=n(W,"LI",{});var hRe=s(VT);a3e=n(hRe,"STRONG",{});var ZMt=s(a3e);lwr=r(ZMt,"albert"),ZMt.forEach(t),iwr=r(hRe," \u2014 "),zW=n(hRe,"A",{href:!0});var eEt=s(zW);dwr=r(eEt,"FlaxAlbertModel"),eEt.forEach(t),cwr=r(hRe," (ALBERT model)"),hRe.forEach(t),fwr=i(W),XT=n(W,"LI",{});var pRe=s(XT);n3e=n(pRe,"STRONG",{});var oEt=s(n3e);mwr=r(oEt,"bart"),oEt.forEach(t),gwr=r(pRe," \u2014 "),QW=n(pRe,"A",{href:!0});var rEt=s(QW);hwr=r(rEt,"FlaxBartModel"),rEt.forEach(t),pwr=r(pRe," (BART model)"),pRe.forEach(t),_wr=i(W),zT=n(W,"LI",{});var _Re=s(zT);s3e=n(_Re,"STRONG",{});var tEt=s(s3e);uwr=r(tEt,"beit"),tEt.forEach(t),bwr=r(_Re," \u2014 "),WW=n(_Re,"A",{href:!0});var aEt=s(WW);vwr=r(aEt,"FlaxBeitModel"),aEt.forEach(t),Fwr=r(_Re," (BEiT model)"),_Re.forEach(t),Twr=i(W),QT=n(W,"LI",{});var uRe=s(QT);l3e=n(uRe,"STRONG",{});var nEt=s(l3e);Mwr=r(nEt,"bert"),nEt.forEach(t),Ewr=r(uRe," \u2014 "),HW=n(uRe,"A",{href:!0});var sEt=s(HW);Cwr=r(sEt,"FlaxBertModel"),sEt.forEach(t),wwr=r(uRe," (BERT model)"),uRe.forEach(t),Awr=i(W),WT=n(W,"LI",{});var bRe=s(WT);i3e=n(bRe,"STRONG",{});var lEt=s(i3e);ywr=r(lEt,"big_bird"),lEt.forEach(t),Lwr=r(bRe," \u2014 "),UW=n(bRe,"A",{href:!0});var iEt=s(UW);xwr=r(iEt,"FlaxBigBirdModel"),iEt.forEach(t),kwr=r(bRe," (BigBird model)"),bRe.forEach(t),Swr=i(W),HT=n(W,"LI",{});var vRe=s(HT);d3e=n(vRe,"STRONG",{});var dEt=s(d3e);Rwr=r(dEt,"blenderbot"),dEt.forEach(t),Bwr=r(vRe," \u2014 "),JW=n(vRe,"A",{href:!0});var cEt=s(JW);Pwr=r(cEt,"FlaxBlenderbotModel"),cEt.forEach(t),$wr=r(vRe," (Blenderbot model)"),vRe.forEach(t),Iwr=i(W),UT=n(W,"LI",{});var FRe=s(UT);c3e=n(FRe,"STRONG",{});var fEt=s(c3e);qwr=r(fEt,"blenderbot-small"),fEt.forEach(t),Nwr=r(FRe," \u2014 "),YW=n(FRe,"A",{href:!0});var mEt=s(YW);jwr=r(mEt,"FlaxBlenderbotSmallModel"),mEt.forEach(t),Dwr=r(FRe," (BlenderbotSmall model)"),FRe.forEach(t),Gwr=i(W),JT=n(W,"LI",{});var TRe=s(JT);f3e=n(TRe,"STRONG",{});var gEt=s(f3e);Owr=r(gEt,"clip"),gEt.forEach(t),Vwr=r(TRe," \u2014 "),KW=n(TRe,"A",{href:!0});var hEt=s(KW);Xwr=r(hEt,"FlaxCLIPModel"),hEt.forEach(t),zwr=r(TRe," (CLIP model)"),TRe.forEach(t),Qwr=i(W),YT=n(W,"LI",{});var MRe=s(YT);m3e=n(MRe,"STRONG",{});var pEt=s(m3e);Wwr=r(pEt,"distilbert"),pEt.forEach(t),Hwr=r(MRe," \u2014 "),ZW=n(MRe,"A",{href:!0});var _Et=s(ZW);Uwr=r(_Et,"FlaxDistilBertModel"),_Et.forEach(t),Jwr=r(MRe," (DistilBERT model)"),MRe.forEach(t),Ywr=i(W),KT=n(W,"LI",{});var ERe=s(KT);g3e=n(ERe,"STRONG",{});var uEt=s(g3e);Kwr=r(uEt,"electra"),uEt.forEach(t),Zwr=r(ERe," \u2014 "),eH=n(ERe,"A",{href:!0});var bEt=s(eH);eAr=r(bEt,"FlaxElectraModel"),bEt.forEach(t),oAr=r(ERe," (ELECTRA model)"),ERe.forEach(t),rAr=i(W),ZT=n(W,"LI",{});var CRe=s(ZT);h3e=n(CRe,"STRONG",{});var vEt=s(h3e);tAr=r(vEt,"gpt2"),vEt.forEach(t),aAr=r(CRe," \u2014 "),oH=n(CRe,"A",{href:!0});var FEt=s(oH);nAr=r(FEt,"FlaxGPT2Model"),FEt.forEach(t),sAr=r(CRe," (OpenAI GPT-2 model)"),CRe.forEach(t),lAr=i(W),eM=n(W,"LI",{});var wRe=s(eM);p3e=n(wRe,"STRONG",{});var TEt=s(p3e);iAr=r(TEt,"gpt_neo"),TEt.forEach(t),dAr=r(wRe," \u2014 "),rH=n(wRe,"A",{href:!0});var MEt=s(rH);cAr=r(MEt,"FlaxGPTNeoModel"),MEt.forEach(t),fAr=r(wRe," (GPT Neo model)"),wRe.forEach(t),mAr=i(W),oM=n(W,"LI",{});var ARe=s(oM);_3e=n(ARe,"STRONG",{});var EEt=s(_3e);gAr=r(EEt,"gptj"),EEt.forEach(t),hAr=r(ARe," \u2014 "),tH=n(ARe,"A",{href:!0});var CEt=s(tH);pAr=r(CEt,"FlaxGPTJModel"),CEt.forEach(t),_Ar=r(ARe," (GPT-J model)"),ARe.forEach(t),uAr=i(W),rM=n(W,"LI",{});var yRe=s(rM);u3e=n(yRe,"STRONG",{});var wEt=s(u3e);bAr=r(wEt,"marian"),wEt.forEach(t),vAr=r(yRe," \u2014 "),aH=n(yRe,"A",{href:!0});var AEt=s(aH);FAr=r(AEt,"FlaxMarianModel"),AEt.forEach(t),TAr=r(yRe," (Marian model)"),yRe.forEach(t),MAr=i(W),tM=n(W,"LI",{});var LRe=s(tM);b3e=n(LRe,"STRONG",{});var yEt=s(b3e);EAr=r(yEt,"mbart"),yEt.forEach(t),CAr=r(LRe," \u2014 "),nH=n(LRe,"A",{href:!0});var LEt=s(nH);wAr=r(LEt,"FlaxMBartModel"),LEt.forEach(t),AAr=r(LRe," (mBART model)"),LRe.forEach(t),yAr=i(W),aM=n(W,"LI",{});var xRe=s(aM);v3e=n(xRe,"STRONG",{});var xEt=s(v3e);LAr=r(xEt,"mt5"),xEt.forEach(t),xAr=r(xRe," \u2014 "),sH=n(xRe,"A",{href:!0});var kEt=s(sH);kAr=r(kEt,"FlaxMT5Model"),kEt.forEach(t),SAr=r(xRe," (mT5 model)"),xRe.forEach(t),RAr=i(W),nM=n(W,"LI",{});var kRe=s(nM);F3e=n(kRe,"STRONG",{});var SEt=s(F3e);BAr=r(SEt,"pegasus"),SEt.forEach(t),PAr=r(kRe," \u2014 "),lH=n(kRe,"A",{href:!0});var REt=s(lH);$Ar=r(REt,"FlaxPegasusModel"),REt.forEach(t),IAr=r(kRe," (Pegasus model)"),kRe.forEach(t),qAr=i(W),sM=n(W,"LI",{});var SRe=s(sM);T3e=n(SRe,"STRONG",{});var BEt=s(T3e);NAr=r(BEt,"roberta"),BEt.forEach(t),jAr=r(SRe," \u2014 "),iH=n(SRe,"A",{href:!0});var PEt=s(iH);DAr=r(PEt,"FlaxRobertaModel"),PEt.forEach(t),GAr=r(SRe," (RoBERTa model)"),SRe.forEach(t),OAr=i(W),lM=n(W,"LI",{});var RRe=s(lM);M3e=n(RRe,"STRONG",{});var $Et=s(M3e);VAr=r($Et,"roformer"),$Et.forEach(t),XAr=r(RRe," \u2014 "),dH=n(RRe,"A",{href:!0});var IEt=s(dH);zAr=r(IEt,"FlaxRoFormerModel"),IEt.forEach(t),QAr=r(RRe," (RoFormer model)"),RRe.forEach(t),WAr=i(W),iM=n(W,"LI",{});var BRe=s(iM);E3e=n(BRe,"STRONG",{});var qEt=s(E3e);HAr=r(qEt,"t5"),qEt.forEach(t),UAr=r(BRe," \u2014 "),cH=n(BRe,"A",{href:!0});var NEt=s(cH);JAr=r(NEt,"FlaxT5Model"),NEt.forEach(t),YAr=r(BRe," (T5 model)"),BRe.forEach(t),KAr=i(W),dM=n(W,"LI",{});var PRe=s(dM);C3e=n(PRe,"STRONG",{});var jEt=s(C3e);ZAr=r(jEt,"vision-text-dual-encoder"),jEt.forEach(t),e0r=r(PRe," \u2014 "),fH=n(PRe,"A",{href:!0});var DEt=s(fH);o0r=r(DEt,"FlaxVisionTextDualEncoderModel"),DEt.forEach(t),r0r=r(PRe," (VisionTextDualEncoder model)"),PRe.forEach(t),t0r=i(W),cM=n(W,"LI",{});var $Re=s(cM);w3e=n($Re,"STRONG",{});var GEt=s(w3e);a0r=r(GEt,"vit"),GEt.forEach(t),n0r=r($Re," \u2014 "),mH=n($Re,"A",{href:!0});var OEt=s(mH);s0r=r(OEt,"FlaxViTModel"),OEt.forEach(t),l0r=r($Re," (ViT model)"),$Re.forEach(t),i0r=i(W),fM=n(W,"LI",{});var IRe=s(fM);A3e=n(IRe,"STRONG",{});var VEt=s(A3e);d0r=r(VEt,"wav2vec2"),VEt.forEach(t),c0r=r(IRe," \u2014 "),gH=n(IRe,"A",{href:!0});var XEt=s(gH);f0r=r(XEt,"FlaxWav2Vec2Model"),XEt.forEach(t),m0r=r(IRe," (Wav2Vec2 model)"),IRe.forEach(t),g0r=i(W),mM=n(W,"LI",{});var qRe=s(mM);y3e=n(qRe,"STRONG",{});var zEt=s(y3e);h0r=r(zEt,"xglm"),zEt.forEach(t),p0r=r(qRe," \u2014 "),hH=n(qRe,"A",{href:!0});var QEt=s(hH);_0r=r(QEt,"FlaxXGLMModel"),QEt.forEach(t),u0r=r(qRe," (XGLM model)"),qRe.forEach(t),b0r=i(W),gM=n(W,"LI",{});var NRe=s(gM);L3e=n(NRe,"STRONG",{});var WEt=s(L3e);v0r=r(WEt,"xlm-roberta"),WEt.forEach(t),F0r=r(NRe," \u2014 "),pH=n(NRe,"A",{href:!0});var HEt=s(pH);T0r=r(HEt,"FlaxXLMRobertaModel"),HEt.forEach(t),M0r=r(NRe," (XLM-RoBERTa model)"),NRe.forEach(t),W.forEach(t),E0r=i(La),x3e=n(La,"P",{});var UEt=s(x3e);C0r=r(UEt,"Examples:"),UEt.forEach(t),w0r=i(La),m(uL.$$.fragment,La),La.forEach(t),Fi.forEach(t),D$e=i(c),cf=n(c,"H2",{class:!0});var Yqe=s(cf);hM=n(Yqe,"A",{id:!0,class:!0,href:!0});var JEt=s(hM);k3e=n(JEt,"SPAN",{});var YEt=s(k3e);m(bL.$$.fragment,YEt),YEt.forEach(t),JEt.forEach(t),A0r=i(Yqe),S3e=n(Yqe,"SPAN",{});var KEt=s(S3e);y0r=r(KEt,"FlaxAutoModelForCausalLM"),KEt.forEach(t),Yqe.forEach(t),G$e=i(c),Br=n(c,"DIV",{class:!0});var Mi=s(Br);m(vL.$$.fragment,Mi),L0r=i(Mi),ff=n(Mi,"P",{});var GY=s(ff);x0r=r(GY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_H=n(GY,"A",{href:!0});var ZEt=s(_H);k0r=r(ZEt,"from_pretrained()"),ZEt.forEach(t),S0r=r(GY," class method or the "),uH=n(GY,"A",{href:!0});var eCt=s(uH);R0r=r(eCt,"from_config()"),eCt.forEach(t),B0r=r(GY,` class
method.`),GY.forEach(t),P0r=i(Mi),FL=n(Mi,"P",{});var Kqe=s(FL);$0r=r(Kqe,"This class cannot be instantiated directly using "),R3e=n(Kqe,"CODE",{});var oCt=s(R3e);I0r=r(oCt,"__init__()"),oCt.forEach(t),q0r=r(Kqe," (throws an error)."),Kqe.forEach(t),N0r=i(Mi),yt=n(Mi,"DIV",{class:!0});var Ei=s(yt);m(TL.$$.fragment,Ei),j0r=i(Ei),B3e=n(Ei,"P",{});var rCt=s(B3e);D0r=r(rCt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rCt.forEach(t),G0r=i(Ei),mf=n(Ei,"P",{});var OY=s(mf);O0r=r(OY,`Note:
Loading a model from its configuration file does `),P3e=n(OY,"STRONG",{});var tCt=s(P3e);V0r=r(tCt,"not"),tCt.forEach(t),X0r=r(OY,` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=n(OY,"A",{href:!0});var aCt=s(bH);z0r=r(aCt,"from_pretrained()"),aCt.forEach(t),Q0r=r(OY," to load the model weights."),OY.forEach(t),W0r=i(Ei),$3e=n(Ei,"P",{});var nCt=s($3e);H0r=r(nCt,"Examples:"),nCt.forEach(t),U0r=i(Ei),m(ML.$$.fragment,Ei),Ei.forEach(t),J0r=i(Mi),xo=n(Mi,"DIV",{class:!0});var xa=s(xo);m(EL.$$.fragment,xa),Y0r=i(xa),I3e=n(xa,"P",{});var sCt=s(I3e);K0r=r(sCt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),sCt.forEach(t),Z0r=i(xa),Sn=n(xa,"P",{});var IC=s(Sn);eyr=r(IC,"The model class to instantiate is selected based on the "),q3e=n(IC,"CODE",{});var lCt=s(q3e);oyr=r(lCt,"model_type"),lCt.forEach(t),ryr=r(IC,` property of the config object (either
passed as an argument or loaded from `),N3e=n(IC,"CODE",{});var iCt=s(N3e);tyr=r(iCt,"pretrained_model_name_or_path"),iCt.forEach(t),ayr=r(IC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j3e=n(IC,"CODE",{});var dCt=s(j3e);nyr=r(dCt,"pretrained_model_name_or_path"),dCt.forEach(t),syr=r(IC,":"),IC.forEach(t),lyr=i(xa),ca=n(xa,"UL",{});var Ci=s(ca);pM=n(Ci,"LI",{});var jRe=s(pM);D3e=n(jRe,"STRONG",{});var cCt=s(D3e);iyr=r(cCt,"bart"),cCt.forEach(t),dyr=r(jRe," \u2014 "),vH=n(jRe,"A",{href:!0});var fCt=s(vH);cyr=r(fCt,"FlaxBartForCausalLM"),fCt.forEach(t),fyr=r(jRe," (BART model)"),jRe.forEach(t),myr=i(Ci),_M=n(Ci,"LI",{});var DRe=s(_M);G3e=n(DRe,"STRONG",{});var mCt=s(G3e);gyr=r(mCt,"gpt2"),mCt.forEach(t),hyr=r(DRe," \u2014 "),FH=n(DRe,"A",{href:!0});var gCt=s(FH);pyr=r(gCt,"FlaxGPT2LMHeadModel"),gCt.forEach(t),_yr=r(DRe," (OpenAI GPT-2 model)"),DRe.forEach(t),uyr=i(Ci),uM=n(Ci,"LI",{});var GRe=s(uM);O3e=n(GRe,"STRONG",{});var hCt=s(O3e);byr=r(hCt,"gpt_neo"),hCt.forEach(t),vyr=r(GRe," \u2014 "),TH=n(GRe,"A",{href:!0});var pCt=s(TH);Fyr=r(pCt,"FlaxGPTNeoForCausalLM"),pCt.forEach(t),Tyr=r(GRe," (GPT Neo model)"),GRe.forEach(t),Myr=i(Ci),bM=n(Ci,"LI",{});var ORe=s(bM);V3e=n(ORe,"STRONG",{});var _Ct=s(V3e);Eyr=r(_Ct,"gptj"),_Ct.forEach(t),Cyr=r(ORe," \u2014 "),MH=n(ORe,"A",{href:!0});var uCt=s(MH);wyr=r(uCt,"FlaxGPTJForCausalLM"),uCt.forEach(t),Ayr=r(ORe," (GPT-J model)"),ORe.forEach(t),yyr=i(Ci),vM=n(Ci,"LI",{});var VRe=s(vM);X3e=n(VRe,"STRONG",{});var bCt=s(X3e);Lyr=r(bCt,"xglm"),bCt.forEach(t),xyr=r(VRe," \u2014 "),EH=n(VRe,"A",{href:!0});var vCt=s(EH);kyr=r(vCt,"FlaxXGLMForCausalLM"),vCt.forEach(t),Syr=r(VRe," (XGLM model)"),VRe.forEach(t),Ci.forEach(t),Ryr=i(xa),z3e=n(xa,"P",{});var FCt=s(z3e);Byr=r(FCt,"Examples:"),FCt.forEach(t),Pyr=i(xa),m(CL.$$.fragment,xa),xa.forEach(t),Mi.forEach(t),O$e=i(c),gf=n(c,"H2",{class:!0});var Zqe=s(gf);FM=n(Zqe,"A",{id:!0,class:!0,href:!0});var TCt=s(FM);Q3e=n(TCt,"SPAN",{});var MCt=s(Q3e);m(wL.$$.fragment,MCt),MCt.forEach(t),TCt.forEach(t),$yr=i(Zqe),W3e=n(Zqe,"SPAN",{});var ECt=s(W3e);Iyr=r(ECt,"FlaxAutoModelForPreTraining"),ECt.forEach(t),Zqe.forEach(t),V$e=i(c),Pr=n(c,"DIV",{class:!0});var wi=s(Pr);m(AL.$$.fragment,wi),qyr=i(wi),hf=n(wi,"P",{});var VY=s(hf);Nyr=r(VY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),CH=n(VY,"A",{href:!0});var CCt=s(CH);jyr=r(CCt,"from_pretrained()"),CCt.forEach(t),Dyr=r(VY," class method or the "),wH=n(VY,"A",{href:!0});var wCt=s(wH);Gyr=r(wCt,"from_config()"),wCt.forEach(t),Oyr=r(VY,` class
method.`),VY.forEach(t),Vyr=i(wi),yL=n(wi,"P",{});var eNe=s(yL);Xyr=r(eNe,"This class cannot be instantiated directly using "),H3e=n(eNe,"CODE",{});var ACt=s(H3e);zyr=r(ACt,"__init__()"),ACt.forEach(t),Qyr=r(eNe," (throws an error)."),eNe.forEach(t),Wyr=i(wi),Lt=n(wi,"DIV",{class:!0});var Ai=s(Lt);m(LL.$$.fragment,Ai),Hyr=i(Ai),U3e=n(Ai,"P",{});var yCt=s(U3e);Uyr=r(yCt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yCt.forEach(t),Jyr=i(Ai),pf=n(Ai,"P",{});var XY=s(pf);Yyr=r(XY,`Note:
Loading a model from its configuration file does `),J3e=n(XY,"STRONG",{});var LCt=s(J3e);Kyr=r(LCt,"not"),LCt.forEach(t),Zyr=r(XY,` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=n(XY,"A",{href:!0});var xCt=s(AH);e8r=r(xCt,"from_pretrained()"),xCt.forEach(t),o8r=r(XY," to load the model weights."),XY.forEach(t),r8r=i(Ai),Y3e=n(Ai,"P",{});var kCt=s(Y3e);t8r=r(kCt,"Examples:"),kCt.forEach(t),a8r=i(Ai),m(xL.$$.fragment,Ai),Ai.forEach(t),n8r=i(wi),ko=n(wi,"DIV",{class:!0});var ka=s(ko);m(kL.$$.fragment,ka),s8r=i(ka),K3e=n(ka,"P",{});var SCt=s(K3e);l8r=r(SCt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),SCt.forEach(t),i8r=i(ka),Rn=n(ka,"P",{});var qC=s(Rn);d8r=r(qC,"The model class to instantiate is selected based on the "),Z3e=n(qC,"CODE",{});var RCt=s(Z3e);c8r=r(RCt,"model_type"),RCt.forEach(t),f8r=r(qC,` property of the config object (either
passed as an argument or loaded from `),e6e=n(qC,"CODE",{});var BCt=s(e6e);m8r=r(BCt,"pretrained_model_name_or_path"),BCt.forEach(t),g8r=r(qC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o6e=n(qC,"CODE",{});var PCt=s(o6e);h8r=r(PCt,"pretrained_model_name_or_path"),PCt.forEach(t),p8r=r(qC,":"),qC.forEach(t),_8r=i(ka),he=n(ka,"UL",{});var be=s(he);TM=n(be,"LI",{});var XRe=s(TM);r6e=n(XRe,"STRONG",{});var $Ct=s(r6e);u8r=r($Ct,"albert"),$Ct.forEach(t),b8r=r(XRe," \u2014 "),yH=n(XRe,"A",{href:!0});var ICt=s(yH);v8r=r(ICt,"FlaxAlbertForPreTraining"),ICt.forEach(t),F8r=r(XRe," (ALBERT model)"),XRe.forEach(t),T8r=i(be),MM=n(be,"LI",{});var zRe=s(MM);t6e=n(zRe,"STRONG",{});var qCt=s(t6e);M8r=r(qCt,"bart"),qCt.forEach(t),E8r=r(zRe," \u2014 "),LH=n(zRe,"A",{href:!0});var NCt=s(LH);C8r=r(NCt,"FlaxBartForConditionalGeneration"),NCt.forEach(t),w8r=r(zRe," (BART model)"),zRe.forEach(t),A8r=i(be),EM=n(be,"LI",{});var QRe=s(EM);a6e=n(QRe,"STRONG",{});var jCt=s(a6e);y8r=r(jCt,"bert"),jCt.forEach(t),L8r=r(QRe," \u2014 "),xH=n(QRe,"A",{href:!0});var DCt=s(xH);x8r=r(DCt,"FlaxBertForPreTraining"),DCt.forEach(t),k8r=r(QRe," (BERT model)"),QRe.forEach(t),S8r=i(be),CM=n(be,"LI",{});var WRe=s(CM);n6e=n(WRe,"STRONG",{});var GCt=s(n6e);R8r=r(GCt,"big_bird"),GCt.forEach(t),B8r=r(WRe," \u2014 "),kH=n(WRe,"A",{href:!0});var OCt=s(kH);P8r=r(OCt,"FlaxBigBirdForPreTraining"),OCt.forEach(t),$8r=r(WRe," (BigBird model)"),WRe.forEach(t),I8r=i(be),wM=n(be,"LI",{});var HRe=s(wM);s6e=n(HRe,"STRONG",{});var VCt=s(s6e);q8r=r(VCt,"electra"),VCt.forEach(t),N8r=r(HRe," \u2014 "),SH=n(HRe,"A",{href:!0});var XCt=s(SH);j8r=r(XCt,"FlaxElectraForPreTraining"),XCt.forEach(t),D8r=r(HRe," (ELECTRA model)"),HRe.forEach(t),G8r=i(be),AM=n(be,"LI",{});var URe=s(AM);l6e=n(URe,"STRONG",{});var zCt=s(l6e);O8r=r(zCt,"mbart"),zCt.forEach(t),V8r=r(URe," \u2014 "),RH=n(URe,"A",{href:!0});var QCt=s(RH);X8r=r(QCt,"FlaxMBartForConditionalGeneration"),QCt.forEach(t),z8r=r(URe," (mBART model)"),URe.forEach(t),Q8r=i(be),yM=n(be,"LI",{});var JRe=s(yM);i6e=n(JRe,"STRONG",{});var WCt=s(i6e);W8r=r(WCt,"mt5"),WCt.forEach(t),H8r=r(JRe," \u2014 "),BH=n(JRe,"A",{href:!0});var HCt=s(BH);U8r=r(HCt,"FlaxMT5ForConditionalGeneration"),HCt.forEach(t),J8r=r(JRe," (mT5 model)"),JRe.forEach(t),Y8r=i(be),LM=n(be,"LI",{});var YRe=s(LM);d6e=n(YRe,"STRONG",{});var UCt=s(d6e);K8r=r(UCt,"roberta"),UCt.forEach(t),Z8r=r(YRe," \u2014 "),PH=n(YRe,"A",{href:!0});var JCt=s(PH);eLr=r(JCt,"FlaxRobertaForMaskedLM"),JCt.forEach(t),oLr=r(YRe," (RoBERTa model)"),YRe.forEach(t),rLr=i(be),xM=n(be,"LI",{});var KRe=s(xM);c6e=n(KRe,"STRONG",{});var YCt=s(c6e);tLr=r(YCt,"roformer"),YCt.forEach(t),aLr=r(KRe," \u2014 "),$H=n(KRe,"A",{href:!0});var KCt=s($H);nLr=r(KCt,"FlaxRoFormerForMaskedLM"),KCt.forEach(t),sLr=r(KRe," (RoFormer model)"),KRe.forEach(t),lLr=i(be),kM=n(be,"LI",{});var ZRe=s(kM);f6e=n(ZRe,"STRONG",{});var ZCt=s(f6e);iLr=r(ZCt,"t5"),ZCt.forEach(t),dLr=r(ZRe," \u2014 "),IH=n(ZRe,"A",{href:!0});var ewt=s(IH);cLr=r(ewt,"FlaxT5ForConditionalGeneration"),ewt.forEach(t),fLr=r(ZRe," (T5 model)"),ZRe.forEach(t),mLr=i(be),SM=n(be,"LI",{});var eBe=s(SM);m6e=n(eBe,"STRONG",{});var owt=s(m6e);gLr=r(owt,"wav2vec2"),owt.forEach(t),hLr=r(eBe," \u2014 "),qH=n(eBe,"A",{href:!0});var rwt=s(qH);pLr=r(rwt,"FlaxWav2Vec2ForPreTraining"),rwt.forEach(t),_Lr=r(eBe," (Wav2Vec2 model)"),eBe.forEach(t),uLr=i(be),RM=n(be,"LI",{});var oBe=s(RM);g6e=n(oBe,"STRONG",{});var twt=s(g6e);bLr=r(twt,"xlm-roberta"),twt.forEach(t),vLr=r(oBe," \u2014 "),NH=n(oBe,"A",{href:!0});var awt=s(NH);FLr=r(awt,"FlaxXLMRobertaForMaskedLM"),awt.forEach(t),TLr=r(oBe," (XLM-RoBERTa model)"),oBe.forEach(t),be.forEach(t),MLr=i(ka),h6e=n(ka,"P",{});var nwt=s(h6e);ELr=r(nwt,"Examples:"),nwt.forEach(t),CLr=i(ka),m(SL.$$.fragment,ka),ka.forEach(t),wi.forEach(t),X$e=i(c),_f=n(c,"H2",{class:!0});var oNe=s(_f);BM=n(oNe,"A",{id:!0,class:!0,href:!0});var swt=s(BM);p6e=n(swt,"SPAN",{});var lwt=s(p6e);m(RL.$$.fragment,lwt),lwt.forEach(t),swt.forEach(t),wLr=i(oNe),_6e=n(oNe,"SPAN",{});var iwt=s(_6e);ALr=r(iwt,"FlaxAutoModelForMaskedLM"),iwt.forEach(t),oNe.forEach(t),z$e=i(c),$r=n(c,"DIV",{class:!0});var yi=s($r);m(BL.$$.fragment,yi),yLr=i(yi),uf=n(yi,"P",{});var zY=s(uf);LLr=r(zY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jH=n(zY,"A",{href:!0});var dwt=s(jH);xLr=r(dwt,"from_pretrained()"),dwt.forEach(t),kLr=r(zY," class method or the "),DH=n(zY,"A",{href:!0});var cwt=s(DH);SLr=r(cwt,"from_config()"),cwt.forEach(t),RLr=r(zY,` class
method.`),zY.forEach(t),BLr=i(yi),PL=n(yi,"P",{});var rNe=s(PL);PLr=r(rNe,"This class cannot be instantiated directly using "),u6e=n(rNe,"CODE",{});var fwt=s(u6e);$Lr=r(fwt,"__init__()"),fwt.forEach(t),ILr=r(rNe," (throws an error)."),rNe.forEach(t),qLr=i(yi),xt=n(yi,"DIV",{class:!0});var Li=s(xt);m($L.$$.fragment,Li),NLr=i(Li),b6e=n(Li,"P",{});var mwt=s(b6e);jLr=r(mwt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mwt.forEach(t),DLr=i(Li),bf=n(Li,"P",{});var QY=s(bf);GLr=r(QY,`Note:
Loading a model from its configuration file does `),v6e=n(QY,"STRONG",{});var gwt=s(v6e);OLr=r(gwt,"not"),gwt.forEach(t),VLr=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=n(QY,"A",{href:!0});var hwt=s(GH);XLr=r(hwt,"from_pretrained()"),hwt.forEach(t),zLr=r(QY," to load the model weights."),QY.forEach(t),QLr=i(Li),F6e=n(Li,"P",{});var pwt=s(F6e);WLr=r(pwt,"Examples:"),pwt.forEach(t),HLr=i(Li),m(IL.$$.fragment,Li),Li.forEach(t),ULr=i(yi),So=n(yi,"DIV",{class:!0});var Sa=s(So);m(qL.$$.fragment,Sa),JLr=i(Sa),T6e=n(Sa,"P",{});var _wt=s(T6e);YLr=r(_wt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_wt.forEach(t),KLr=i(Sa),Bn=n(Sa,"P",{});var NC=s(Bn);ZLr=r(NC,"The model class to instantiate is selected based on the "),M6e=n(NC,"CODE",{});var uwt=s(M6e);e7r=r(uwt,"model_type"),uwt.forEach(t),o7r=r(NC,` property of the config object (either
passed as an argument or loaded from `),E6e=n(NC,"CODE",{});var bwt=s(E6e);r7r=r(bwt,"pretrained_model_name_or_path"),bwt.forEach(t),t7r=r(NC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=n(NC,"CODE",{});var vwt=s(C6e);a7r=r(vwt,"pretrained_model_name_or_path"),vwt.forEach(t),n7r=r(NC,":"),NC.forEach(t),s7r=i(Sa),Te=n(Sa,"UL",{});var Le=s(Te);PM=n(Le,"LI",{});var rBe=s(PM);w6e=n(rBe,"STRONG",{});var Fwt=s(w6e);l7r=r(Fwt,"albert"),Fwt.forEach(t),i7r=r(rBe," \u2014 "),OH=n(rBe,"A",{href:!0});var Twt=s(OH);d7r=r(Twt,"FlaxAlbertForMaskedLM"),Twt.forEach(t),c7r=r(rBe," (ALBERT model)"),rBe.forEach(t),f7r=i(Le),$M=n(Le,"LI",{});var tBe=s($M);A6e=n(tBe,"STRONG",{});var Mwt=s(A6e);m7r=r(Mwt,"bart"),Mwt.forEach(t),g7r=r(tBe," \u2014 "),VH=n(tBe,"A",{href:!0});var Ewt=s(VH);h7r=r(Ewt,"FlaxBartForConditionalGeneration"),Ewt.forEach(t),p7r=r(tBe," (BART model)"),tBe.forEach(t),_7r=i(Le),IM=n(Le,"LI",{});var aBe=s(IM);y6e=n(aBe,"STRONG",{});var Cwt=s(y6e);u7r=r(Cwt,"bert"),Cwt.forEach(t),b7r=r(aBe," \u2014 "),XH=n(aBe,"A",{href:!0});var wwt=s(XH);v7r=r(wwt,"FlaxBertForMaskedLM"),wwt.forEach(t),F7r=r(aBe," (BERT model)"),aBe.forEach(t),T7r=i(Le),qM=n(Le,"LI",{});var nBe=s(qM);L6e=n(nBe,"STRONG",{});var Awt=s(L6e);M7r=r(Awt,"big_bird"),Awt.forEach(t),E7r=r(nBe," \u2014 "),zH=n(nBe,"A",{href:!0});var ywt=s(zH);C7r=r(ywt,"FlaxBigBirdForMaskedLM"),ywt.forEach(t),w7r=r(nBe," (BigBird model)"),nBe.forEach(t),A7r=i(Le),NM=n(Le,"LI",{});var sBe=s(NM);x6e=n(sBe,"STRONG",{});var Lwt=s(x6e);y7r=r(Lwt,"distilbert"),Lwt.forEach(t),L7r=r(sBe," \u2014 "),QH=n(sBe,"A",{href:!0});var xwt=s(QH);x7r=r(xwt,"FlaxDistilBertForMaskedLM"),xwt.forEach(t),k7r=r(sBe," (DistilBERT model)"),sBe.forEach(t),S7r=i(Le),jM=n(Le,"LI",{});var lBe=s(jM);k6e=n(lBe,"STRONG",{});var kwt=s(k6e);R7r=r(kwt,"electra"),kwt.forEach(t),B7r=r(lBe," \u2014 "),WH=n(lBe,"A",{href:!0});var Swt=s(WH);P7r=r(Swt,"FlaxElectraForMaskedLM"),Swt.forEach(t),$7r=r(lBe," (ELECTRA model)"),lBe.forEach(t),I7r=i(Le),DM=n(Le,"LI",{});var iBe=s(DM);S6e=n(iBe,"STRONG",{});var Rwt=s(S6e);q7r=r(Rwt,"mbart"),Rwt.forEach(t),N7r=r(iBe," \u2014 "),HH=n(iBe,"A",{href:!0});var Bwt=s(HH);j7r=r(Bwt,"FlaxMBartForConditionalGeneration"),Bwt.forEach(t),D7r=r(iBe," (mBART model)"),iBe.forEach(t),G7r=i(Le),GM=n(Le,"LI",{});var dBe=s(GM);R6e=n(dBe,"STRONG",{});var Pwt=s(R6e);O7r=r(Pwt,"roberta"),Pwt.forEach(t),V7r=r(dBe," \u2014 "),UH=n(dBe,"A",{href:!0});var $wt=s(UH);X7r=r($wt,"FlaxRobertaForMaskedLM"),$wt.forEach(t),z7r=r(dBe," (RoBERTa model)"),dBe.forEach(t),Q7r=i(Le),OM=n(Le,"LI",{});var cBe=s(OM);B6e=n(cBe,"STRONG",{});var Iwt=s(B6e);W7r=r(Iwt,"roformer"),Iwt.forEach(t),H7r=r(cBe," \u2014 "),JH=n(cBe,"A",{href:!0});var qwt=s(JH);U7r=r(qwt,"FlaxRoFormerForMaskedLM"),qwt.forEach(t),J7r=r(cBe," (RoFormer model)"),cBe.forEach(t),Y7r=i(Le),VM=n(Le,"LI",{});var fBe=s(VM);P6e=n(fBe,"STRONG",{});var Nwt=s(P6e);K7r=r(Nwt,"xlm-roberta"),Nwt.forEach(t),Z7r=r(fBe," \u2014 "),YH=n(fBe,"A",{href:!0});var jwt=s(YH);e9r=r(jwt,"FlaxXLMRobertaForMaskedLM"),jwt.forEach(t),o9r=r(fBe," (XLM-RoBERTa model)"),fBe.forEach(t),Le.forEach(t),r9r=i(Sa),$6e=n(Sa,"P",{});var Dwt=s($6e);t9r=r(Dwt,"Examples:"),Dwt.forEach(t),a9r=i(Sa),m(NL.$$.fragment,Sa),Sa.forEach(t),yi.forEach(t),Q$e=i(c),vf=n(c,"H2",{class:!0});var tNe=s(vf);XM=n(tNe,"A",{id:!0,class:!0,href:!0});var Gwt=s(XM);I6e=n(Gwt,"SPAN",{});var Owt=s(I6e);m(jL.$$.fragment,Owt),Owt.forEach(t),Gwt.forEach(t),n9r=i(tNe),q6e=n(tNe,"SPAN",{});var Vwt=s(q6e);s9r=r(Vwt,"FlaxAutoModelForSeq2SeqLM"),Vwt.forEach(t),tNe.forEach(t),W$e=i(c),Ir=n(c,"DIV",{class:!0});var xi=s(Ir);m(DL.$$.fragment,xi),l9r=i(xi),Ff=n(xi,"P",{});var WY=s(Ff);i9r=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),KH=n(WY,"A",{href:!0});var Xwt=s(KH);d9r=r(Xwt,"from_pretrained()"),Xwt.forEach(t),c9r=r(WY," class method or the "),ZH=n(WY,"A",{href:!0});var zwt=s(ZH);f9r=r(zwt,"from_config()"),zwt.forEach(t),m9r=r(WY,` class
method.`),WY.forEach(t),g9r=i(xi),GL=n(xi,"P",{});var aNe=s(GL);h9r=r(aNe,"This class cannot be instantiated directly using "),N6e=n(aNe,"CODE",{});var Qwt=s(N6e);p9r=r(Qwt,"__init__()"),Qwt.forEach(t),_9r=r(aNe," (throws an error)."),aNe.forEach(t),u9r=i(xi),kt=n(xi,"DIV",{class:!0});var ki=s(kt);m(OL.$$.fragment,ki),b9r=i(ki),j6e=n(ki,"P",{});var Wwt=s(j6e);v9r=r(Wwt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Wwt.forEach(t),F9r=i(ki),Tf=n(ki,"P",{});var HY=s(Tf);T9r=r(HY,`Note:
Loading a model from its configuration file does `),D6e=n(HY,"STRONG",{});var Hwt=s(D6e);M9r=r(Hwt,"not"),Hwt.forEach(t),E9r=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=n(HY,"A",{href:!0});var Uwt=s(eU);C9r=r(Uwt,"from_pretrained()"),Uwt.forEach(t),w9r=r(HY," to load the model weights."),HY.forEach(t),A9r=i(ki),G6e=n(ki,"P",{});var Jwt=s(G6e);y9r=r(Jwt,"Examples:"),Jwt.forEach(t),L9r=i(ki),m(VL.$$.fragment,ki),ki.forEach(t),x9r=i(xi),Ro=n(xi,"DIV",{class:!0});var Ra=s(Ro);m(XL.$$.fragment,Ra),k9r=i(Ra),O6e=n(Ra,"P",{});var Ywt=s(O6e);S9r=r(Ywt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ywt.forEach(t),R9r=i(Ra),Pn=n(Ra,"P",{});var jC=s(Pn);B9r=r(jC,"The model class to instantiate is selected based on the "),V6e=n(jC,"CODE",{});var Kwt=s(V6e);P9r=r(Kwt,"model_type"),Kwt.forEach(t),$9r=r(jC,` property of the config object (either
passed as an argument or loaded from `),X6e=n(jC,"CODE",{});var Zwt=s(X6e);I9r=r(Zwt,"pretrained_model_name_or_path"),Zwt.forEach(t),q9r=r(jC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z6e=n(jC,"CODE",{});var eAt=s(z6e);N9r=r(eAt,"pretrained_model_name_or_path"),eAt.forEach(t),j9r=r(jC,":"),jC.forEach(t),D9r=i(Ra),we=n(Ra,"UL",{});var lo=s(we);zM=n(lo,"LI",{});var mBe=s(zM);Q6e=n(mBe,"STRONG",{});var oAt=s(Q6e);G9r=r(oAt,"bart"),oAt.forEach(t),O9r=r(mBe," \u2014 "),oU=n(mBe,"A",{href:!0});var rAt=s(oU);V9r=r(rAt,"FlaxBartForConditionalGeneration"),rAt.forEach(t),X9r=r(mBe," (BART model)"),mBe.forEach(t),z9r=i(lo),QM=n(lo,"LI",{});var gBe=s(QM);W6e=n(gBe,"STRONG",{});var tAt=s(W6e);Q9r=r(tAt,"blenderbot"),tAt.forEach(t),W9r=r(gBe," \u2014 "),rU=n(gBe,"A",{href:!0});var aAt=s(rU);H9r=r(aAt,"FlaxBlenderbotForConditionalGeneration"),aAt.forEach(t),U9r=r(gBe," (Blenderbot model)"),gBe.forEach(t),J9r=i(lo),WM=n(lo,"LI",{});var hBe=s(WM);H6e=n(hBe,"STRONG",{});var nAt=s(H6e);Y9r=r(nAt,"blenderbot-small"),nAt.forEach(t),K9r=r(hBe," \u2014 "),tU=n(hBe,"A",{href:!0});var sAt=s(tU);Z9r=r(sAt,"FlaxBlenderbotSmallForConditionalGeneration"),sAt.forEach(t),exr=r(hBe," (BlenderbotSmall model)"),hBe.forEach(t),oxr=i(lo),HM=n(lo,"LI",{});var pBe=s(HM);U6e=n(pBe,"STRONG",{});var lAt=s(U6e);rxr=r(lAt,"encoder-decoder"),lAt.forEach(t),txr=r(pBe," \u2014 "),aU=n(pBe,"A",{href:!0});var iAt=s(aU);axr=r(iAt,"FlaxEncoderDecoderModel"),iAt.forEach(t),nxr=r(pBe," (Encoder decoder model)"),pBe.forEach(t),sxr=i(lo),UM=n(lo,"LI",{});var _Be=s(UM);J6e=n(_Be,"STRONG",{});var dAt=s(J6e);lxr=r(dAt,"marian"),dAt.forEach(t),ixr=r(_Be," \u2014 "),nU=n(_Be,"A",{href:!0});var cAt=s(nU);dxr=r(cAt,"FlaxMarianMTModel"),cAt.forEach(t),cxr=r(_Be," (Marian model)"),_Be.forEach(t),fxr=i(lo),JM=n(lo,"LI",{});var uBe=s(JM);Y6e=n(uBe,"STRONG",{});var fAt=s(Y6e);mxr=r(fAt,"mbart"),fAt.forEach(t),gxr=r(uBe," \u2014 "),sU=n(uBe,"A",{href:!0});var mAt=s(sU);hxr=r(mAt,"FlaxMBartForConditionalGeneration"),mAt.forEach(t),pxr=r(uBe," (mBART model)"),uBe.forEach(t),_xr=i(lo),YM=n(lo,"LI",{});var bBe=s(YM);K6e=n(bBe,"STRONG",{});var gAt=s(K6e);uxr=r(gAt,"mt5"),gAt.forEach(t),bxr=r(bBe," \u2014 "),lU=n(bBe,"A",{href:!0});var hAt=s(lU);vxr=r(hAt,"FlaxMT5ForConditionalGeneration"),hAt.forEach(t),Fxr=r(bBe," (mT5 model)"),bBe.forEach(t),Txr=i(lo),KM=n(lo,"LI",{});var vBe=s(KM);Z6e=n(vBe,"STRONG",{});var pAt=s(Z6e);Mxr=r(pAt,"pegasus"),pAt.forEach(t),Exr=r(vBe," \u2014 "),iU=n(vBe,"A",{href:!0});var _At=s(iU);Cxr=r(_At,"FlaxPegasusForConditionalGeneration"),_At.forEach(t),wxr=r(vBe," (Pegasus model)"),vBe.forEach(t),Axr=i(lo),ZM=n(lo,"LI",{});var FBe=s(ZM);eve=n(FBe,"STRONG",{});var uAt=s(eve);yxr=r(uAt,"t5"),uAt.forEach(t),Lxr=r(FBe," \u2014 "),dU=n(FBe,"A",{href:!0});var bAt=s(dU);xxr=r(bAt,"FlaxT5ForConditionalGeneration"),bAt.forEach(t),kxr=r(FBe," (T5 model)"),FBe.forEach(t),lo.forEach(t),Sxr=i(Ra),ove=n(Ra,"P",{});var vAt=s(ove);Rxr=r(vAt,"Examples:"),vAt.forEach(t),Bxr=i(Ra),m(zL.$$.fragment,Ra),Ra.forEach(t),xi.forEach(t),H$e=i(c),Mf=n(c,"H2",{class:!0});var nNe=s(Mf);eE=n(nNe,"A",{id:!0,class:!0,href:!0});var FAt=s(eE);rve=n(FAt,"SPAN",{});var TAt=s(rve);m(QL.$$.fragment,TAt),TAt.forEach(t),FAt.forEach(t),Pxr=i(nNe),tve=n(nNe,"SPAN",{});var MAt=s(tve);$xr=r(MAt,"FlaxAutoModelForSequenceClassification"),MAt.forEach(t),nNe.forEach(t),U$e=i(c),qr=n(c,"DIV",{class:!0});var Si=s(qr);m(WL.$$.fragment,Si),Ixr=i(Si),Ef=n(Si,"P",{});var UY=s(Ef);qxr=r(UY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cU=n(UY,"A",{href:!0});var EAt=s(cU);Nxr=r(EAt,"from_pretrained()"),EAt.forEach(t),jxr=r(UY," class method or the "),fU=n(UY,"A",{href:!0});var CAt=s(fU);Dxr=r(CAt,"from_config()"),CAt.forEach(t),Gxr=r(UY,` class
method.`),UY.forEach(t),Oxr=i(Si),HL=n(Si,"P",{});var sNe=s(HL);Vxr=r(sNe,"This class cannot be instantiated directly using "),ave=n(sNe,"CODE",{});var wAt=s(ave);Xxr=r(wAt,"__init__()"),wAt.forEach(t),zxr=r(sNe," (throws an error)."),sNe.forEach(t),Qxr=i(Si),St=n(Si,"DIV",{class:!0});var Ri=s(St);m(UL.$$.fragment,Ri),Wxr=i(Ri),nve=n(Ri,"P",{});var AAt=s(nve);Hxr=r(AAt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),AAt.forEach(t),Uxr=i(Ri),Cf=n(Ri,"P",{});var JY=s(Cf);Jxr=r(JY,`Note:
Loading a model from its configuration file does `),sve=n(JY,"STRONG",{});var yAt=s(sve);Yxr=r(yAt,"not"),yAt.forEach(t),Kxr=r(JY,` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=n(JY,"A",{href:!0});var LAt=s(mU);Zxr=r(LAt,"from_pretrained()"),LAt.forEach(t),ekr=r(JY," to load the model weights."),JY.forEach(t),okr=i(Ri),lve=n(Ri,"P",{});var xAt=s(lve);rkr=r(xAt,"Examples:"),xAt.forEach(t),tkr=i(Ri),m(JL.$$.fragment,Ri),Ri.forEach(t),akr=i(Si),Bo=n(Si,"DIV",{class:!0});var Ba=s(Bo);m(YL.$$.fragment,Ba),nkr=i(Ba),ive=n(Ba,"P",{});var kAt=s(ive);skr=r(kAt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),kAt.forEach(t),lkr=i(Ba),$n=n(Ba,"P",{});var DC=s($n);ikr=r(DC,"The model class to instantiate is selected based on the "),dve=n(DC,"CODE",{});var SAt=s(dve);dkr=r(SAt,"model_type"),SAt.forEach(t),ckr=r(DC,` property of the config object (either
passed as an argument or loaded from `),cve=n(DC,"CODE",{});var RAt=s(cve);fkr=r(RAt,"pretrained_model_name_or_path"),RAt.forEach(t),mkr=r(DC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=n(DC,"CODE",{});var BAt=s(fve);gkr=r(BAt,"pretrained_model_name_or_path"),BAt.forEach(t),hkr=r(DC,":"),DC.forEach(t),pkr=i(Ba),Me=n(Ba,"UL",{});var xe=s(Me);oE=n(xe,"LI",{});var TBe=s(oE);mve=n(TBe,"STRONG",{});var PAt=s(mve);_kr=r(PAt,"albert"),PAt.forEach(t),ukr=r(TBe," \u2014 "),gU=n(TBe,"A",{href:!0});var $At=s(gU);bkr=r($At,"FlaxAlbertForSequenceClassification"),$At.forEach(t),vkr=r(TBe," (ALBERT model)"),TBe.forEach(t),Fkr=i(xe),rE=n(xe,"LI",{});var MBe=s(rE);gve=n(MBe,"STRONG",{});var IAt=s(gve);Tkr=r(IAt,"bart"),IAt.forEach(t),Mkr=r(MBe," \u2014 "),hU=n(MBe,"A",{href:!0});var qAt=s(hU);Ekr=r(qAt,"FlaxBartForSequenceClassification"),qAt.forEach(t),Ckr=r(MBe," (BART model)"),MBe.forEach(t),wkr=i(xe),tE=n(xe,"LI",{});var EBe=s(tE);hve=n(EBe,"STRONG",{});var NAt=s(hve);Akr=r(NAt,"bert"),NAt.forEach(t),ykr=r(EBe," \u2014 "),pU=n(EBe,"A",{href:!0});var jAt=s(pU);Lkr=r(jAt,"FlaxBertForSequenceClassification"),jAt.forEach(t),xkr=r(EBe," (BERT model)"),EBe.forEach(t),kkr=i(xe),aE=n(xe,"LI",{});var CBe=s(aE);pve=n(CBe,"STRONG",{});var DAt=s(pve);Skr=r(DAt,"big_bird"),DAt.forEach(t),Rkr=r(CBe," \u2014 "),_U=n(CBe,"A",{href:!0});var GAt=s(_U);Bkr=r(GAt,"FlaxBigBirdForSequenceClassification"),GAt.forEach(t),Pkr=r(CBe," (BigBird model)"),CBe.forEach(t),$kr=i(xe),nE=n(xe,"LI",{});var wBe=s(nE);_ve=n(wBe,"STRONG",{});var OAt=s(_ve);Ikr=r(OAt,"distilbert"),OAt.forEach(t),qkr=r(wBe," \u2014 "),uU=n(wBe,"A",{href:!0});var VAt=s(uU);Nkr=r(VAt,"FlaxDistilBertForSequenceClassification"),VAt.forEach(t),jkr=r(wBe," (DistilBERT model)"),wBe.forEach(t),Dkr=i(xe),sE=n(xe,"LI",{});var ABe=s(sE);uve=n(ABe,"STRONG",{});var XAt=s(uve);Gkr=r(XAt,"electra"),XAt.forEach(t),Okr=r(ABe," \u2014 "),bU=n(ABe,"A",{href:!0});var zAt=s(bU);Vkr=r(zAt,"FlaxElectraForSequenceClassification"),zAt.forEach(t),Xkr=r(ABe," (ELECTRA model)"),ABe.forEach(t),zkr=i(xe),lE=n(xe,"LI",{});var yBe=s(lE);bve=n(yBe,"STRONG",{});var QAt=s(bve);Qkr=r(QAt,"mbart"),QAt.forEach(t),Wkr=r(yBe," \u2014 "),vU=n(yBe,"A",{href:!0});var WAt=s(vU);Hkr=r(WAt,"FlaxMBartForSequenceClassification"),WAt.forEach(t),Ukr=r(yBe," (mBART model)"),yBe.forEach(t),Jkr=i(xe),iE=n(xe,"LI",{});var LBe=s(iE);vve=n(LBe,"STRONG",{});var HAt=s(vve);Ykr=r(HAt,"roberta"),HAt.forEach(t),Kkr=r(LBe," \u2014 "),FU=n(LBe,"A",{href:!0});var UAt=s(FU);Zkr=r(UAt,"FlaxRobertaForSequenceClassification"),UAt.forEach(t),eSr=r(LBe," (RoBERTa model)"),LBe.forEach(t),oSr=i(xe),dE=n(xe,"LI",{});var xBe=s(dE);Fve=n(xBe,"STRONG",{});var JAt=s(Fve);rSr=r(JAt,"roformer"),JAt.forEach(t),tSr=r(xBe," \u2014 "),TU=n(xBe,"A",{href:!0});var YAt=s(TU);aSr=r(YAt,"FlaxRoFormerForSequenceClassification"),YAt.forEach(t),nSr=r(xBe," (RoFormer model)"),xBe.forEach(t),sSr=i(xe),cE=n(xe,"LI",{});var kBe=s(cE);Tve=n(kBe,"STRONG",{});var KAt=s(Tve);lSr=r(KAt,"xlm-roberta"),KAt.forEach(t),iSr=r(kBe," \u2014 "),MU=n(kBe,"A",{href:!0});var ZAt=s(MU);dSr=r(ZAt,"FlaxXLMRobertaForSequenceClassification"),ZAt.forEach(t),cSr=r(kBe," (XLM-RoBERTa model)"),kBe.forEach(t),xe.forEach(t),fSr=i(Ba),Mve=n(Ba,"P",{});var e0t=s(Mve);mSr=r(e0t,"Examples:"),e0t.forEach(t),gSr=i(Ba),m(KL.$$.fragment,Ba),Ba.forEach(t),Si.forEach(t),J$e=i(c),wf=n(c,"H2",{class:!0});var lNe=s(wf);fE=n(lNe,"A",{id:!0,class:!0,href:!0});var o0t=s(fE);Eve=n(o0t,"SPAN",{});var r0t=s(Eve);m(ZL.$$.fragment,r0t),r0t.forEach(t),o0t.forEach(t),hSr=i(lNe),Cve=n(lNe,"SPAN",{});var t0t=s(Cve);pSr=r(t0t,"FlaxAutoModelForQuestionAnswering"),t0t.forEach(t),lNe.forEach(t),Y$e=i(c),Nr=n(c,"DIV",{class:!0});var Bi=s(Nr);m(e7.$$.fragment,Bi),_Sr=i(Bi),Af=n(Bi,"P",{});var YY=s(Af);uSr=r(YY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EU=n(YY,"A",{href:!0});var a0t=s(EU);bSr=r(a0t,"from_pretrained()"),a0t.forEach(t),vSr=r(YY," class method or the "),CU=n(YY,"A",{href:!0});var n0t=s(CU);FSr=r(n0t,"from_config()"),n0t.forEach(t),TSr=r(YY,` class
method.`),YY.forEach(t),MSr=i(Bi),o7=n(Bi,"P",{});var iNe=s(o7);ESr=r(iNe,"This class cannot be instantiated directly using "),wve=n(iNe,"CODE",{});var s0t=s(wve);CSr=r(s0t,"__init__()"),s0t.forEach(t),wSr=r(iNe," (throws an error)."),iNe.forEach(t),ASr=i(Bi),Rt=n(Bi,"DIV",{class:!0});var Pi=s(Rt);m(r7.$$.fragment,Pi),ySr=i(Pi),Ave=n(Pi,"P",{});var l0t=s(Ave);LSr=r(l0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),l0t.forEach(t),xSr=i(Pi),yf=n(Pi,"P",{});var KY=s(yf);kSr=r(KY,`Note:
Loading a model from its configuration file does `),yve=n(KY,"STRONG",{});var i0t=s(yve);SSr=r(i0t,"not"),i0t.forEach(t),RSr=r(KY,` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=n(KY,"A",{href:!0});var d0t=s(wU);BSr=r(d0t,"from_pretrained()"),d0t.forEach(t),PSr=r(KY," to load the model weights."),KY.forEach(t),$Sr=i(Pi),Lve=n(Pi,"P",{});var c0t=s(Lve);ISr=r(c0t,"Examples:"),c0t.forEach(t),qSr=i(Pi),m(t7.$$.fragment,Pi),Pi.forEach(t),NSr=i(Bi),Po=n(Bi,"DIV",{class:!0});var Pa=s(Po);m(a7.$$.fragment,Pa),jSr=i(Pa),xve=n(Pa,"P",{});var f0t=s(xve);DSr=r(f0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),f0t.forEach(t),GSr=i(Pa),In=n(Pa,"P",{});var GC=s(In);OSr=r(GC,"The model class to instantiate is selected based on the "),kve=n(GC,"CODE",{});var m0t=s(kve);VSr=r(m0t,"model_type"),m0t.forEach(t),XSr=r(GC,` property of the config object (either
passed as an argument or loaded from `),Sve=n(GC,"CODE",{});var g0t=s(Sve);zSr=r(g0t,"pretrained_model_name_or_path"),g0t.forEach(t),QSr=r(GC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=n(GC,"CODE",{});var h0t=s(Rve);WSr=r(h0t,"pretrained_model_name_or_path"),h0t.forEach(t),HSr=r(GC,":"),GC.forEach(t),USr=i(Pa),Ee=n(Pa,"UL",{});var ke=s(Ee);mE=n(ke,"LI",{});var SBe=s(mE);Bve=n(SBe,"STRONG",{});var p0t=s(Bve);JSr=r(p0t,"albert"),p0t.forEach(t),YSr=r(SBe," \u2014 "),AU=n(SBe,"A",{href:!0});var _0t=s(AU);KSr=r(_0t,"FlaxAlbertForQuestionAnswering"),_0t.forEach(t),ZSr=r(SBe," (ALBERT model)"),SBe.forEach(t),eRr=i(ke),gE=n(ke,"LI",{});var RBe=s(gE);Pve=n(RBe,"STRONG",{});var u0t=s(Pve);oRr=r(u0t,"bart"),u0t.forEach(t),rRr=r(RBe," \u2014 "),yU=n(RBe,"A",{href:!0});var b0t=s(yU);tRr=r(b0t,"FlaxBartForQuestionAnswering"),b0t.forEach(t),aRr=r(RBe," (BART model)"),RBe.forEach(t),nRr=i(ke),hE=n(ke,"LI",{});var BBe=s(hE);$ve=n(BBe,"STRONG",{});var v0t=s($ve);sRr=r(v0t,"bert"),v0t.forEach(t),lRr=r(BBe," \u2014 "),LU=n(BBe,"A",{href:!0});var F0t=s(LU);iRr=r(F0t,"FlaxBertForQuestionAnswering"),F0t.forEach(t),dRr=r(BBe," (BERT model)"),BBe.forEach(t),cRr=i(ke),pE=n(ke,"LI",{});var PBe=s(pE);Ive=n(PBe,"STRONG",{});var T0t=s(Ive);fRr=r(T0t,"big_bird"),T0t.forEach(t),mRr=r(PBe," \u2014 "),xU=n(PBe,"A",{href:!0});var M0t=s(xU);gRr=r(M0t,"FlaxBigBirdForQuestionAnswering"),M0t.forEach(t),hRr=r(PBe," (BigBird model)"),PBe.forEach(t),pRr=i(ke),_E=n(ke,"LI",{});var $Be=s(_E);qve=n($Be,"STRONG",{});var E0t=s(qve);_Rr=r(E0t,"distilbert"),E0t.forEach(t),uRr=r($Be," \u2014 "),kU=n($Be,"A",{href:!0});var C0t=s(kU);bRr=r(C0t,"FlaxDistilBertForQuestionAnswering"),C0t.forEach(t),vRr=r($Be," (DistilBERT model)"),$Be.forEach(t),FRr=i(ke),uE=n(ke,"LI",{});var IBe=s(uE);Nve=n(IBe,"STRONG",{});var w0t=s(Nve);TRr=r(w0t,"electra"),w0t.forEach(t),MRr=r(IBe," \u2014 "),SU=n(IBe,"A",{href:!0});var A0t=s(SU);ERr=r(A0t,"FlaxElectraForQuestionAnswering"),A0t.forEach(t),CRr=r(IBe," (ELECTRA model)"),IBe.forEach(t),wRr=i(ke),bE=n(ke,"LI",{});var qBe=s(bE);jve=n(qBe,"STRONG",{});var y0t=s(jve);ARr=r(y0t,"mbart"),y0t.forEach(t),yRr=r(qBe," \u2014 "),RU=n(qBe,"A",{href:!0});var L0t=s(RU);LRr=r(L0t,"FlaxMBartForQuestionAnswering"),L0t.forEach(t),xRr=r(qBe," (mBART model)"),qBe.forEach(t),kRr=i(ke),vE=n(ke,"LI",{});var NBe=s(vE);Dve=n(NBe,"STRONG",{});var x0t=s(Dve);SRr=r(x0t,"roberta"),x0t.forEach(t),RRr=r(NBe," \u2014 "),BU=n(NBe,"A",{href:!0});var k0t=s(BU);BRr=r(k0t,"FlaxRobertaForQuestionAnswering"),k0t.forEach(t),PRr=r(NBe," (RoBERTa model)"),NBe.forEach(t),$Rr=i(ke),FE=n(ke,"LI",{});var jBe=s(FE);Gve=n(jBe,"STRONG",{});var S0t=s(Gve);IRr=r(S0t,"roformer"),S0t.forEach(t),qRr=r(jBe," \u2014 "),PU=n(jBe,"A",{href:!0});var R0t=s(PU);NRr=r(R0t,"FlaxRoFormerForQuestionAnswering"),R0t.forEach(t),jRr=r(jBe," (RoFormer model)"),jBe.forEach(t),DRr=i(ke),TE=n(ke,"LI",{});var DBe=s(TE);Ove=n(DBe,"STRONG",{});var B0t=s(Ove);GRr=r(B0t,"xlm-roberta"),B0t.forEach(t),ORr=r(DBe," \u2014 "),$U=n(DBe,"A",{href:!0});var P0t=s($U);VRr=r(P0t,"FlaxXLMRobertaForQuestionAnswering"),P0t.forEach(t),XRr=r(DBe," (XLM-RoBERTa model)"),DBe.forEach(t),ke.forEach(t),zRr=i(Pa),Vve=n(Pa,"P",{});var $0t=s(Vve);QRr=r($0t,"Examples:"),$0t.forEach(t),WRr=i(Pa),m(n7.$$.fragment,Pa),Pa.forEach(t),Bi.forEach(t),K$e=i(c),Lf=n(c,"H2",{class:!0});var dNe=s(Lf);ME=n(dNe,"A",{id:!0,class:!0,href:!0});var I0t=s(ME);Xve=n(I0t,"SPAN",{});var q0t=s(Xve);m(s7.$$.fragment,q0t),q0t.forEach(t),I0t.forEach(t),HRr=i(dNe),zve=n(dNe,"SPAN",{});var N0t=s(zve);URr=r(N0t,"FlaxAutoModelForTokenClassification"),N0t.forEach(t),dNe.forEach(t),Z$e=i(c),jr=n(c,"DIV",{class:!0});var $i=s(jr);m(l7.$$.fragment,$i),JRr=i($i),xf=n($i,"P",{});var ZY=s(xf);YRr=r(ZY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),IU=n(ZY,"A",{href:!0});var j0t=s(IU);KRr=r(j0t,"from_pretrained()"),j0t.forEach(t),ZRr=r(ZY," class method or the "),qU=n(ZY,"A",{href:!0});var D0t=s(qU);eBr=r(D0t,"from_config()"),D0t.forEach(t),oBr=r(ZY,` class
method.`),ZY.forEach(t),rBr=i($i),i7=n($i,"P",{});var cNe=s(i7);tBr=r(cNe,"This class cannot be instantiated directly using "),Qve=n(cNe,"CODE",{});var G0t=s(Qve);aBr=r(G0t,"__init__()"),G0t.forEach(t),nBr=r(cNe," (throws an error)."),cNe.forEach(t),sBr=i($i),Bt=n($i,"DIV",{class:!0});var Ii=s(Bt);m(d7.$$.fragment,Ii),lBr=i(Ii),Wve=n(Ii,"P",{});var O0t=s(Wve);iBr=r(O0t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),O0t.forEach(t),dBr=i(Ii),kf=n(Ii,"P",{});var eK=s(kf);cBr=r(eK,`Note:
Loading a model from its configuration file does `),Hve=n(eK,"STRONG",{});var V0t=s(Hve);fBr=r(V0t,"not"),V0t.forEach(t),mBr=r(eK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=n(eK,"A",{href:!0});var X0t=s(NU);gBr=r(X0t,"from_pretrained()"),X0t.forEach(t),hBr=r(eK," to load the model weights."),eK.forEach(t),pBr=i(Ii),Uve=n(Ii,"P",{});var z0t=s(Uve);_Br=r(z0t,"Examples:"),z0t.forEach(t),uBr=i(Ii),m(c7.$$.fragment,Ii),Ii.forEach(t),bBr=i($i),$o=n($i,"DIV",{class:!0});var $a=s($o);m(f7.$$.fragment,$a),vBr=i($a),Jve=n($a,"P",{});var Q0t=s(Jve);FBr=r(Q0t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Q0t.forEach(t),TBr=i($a),qn=n($a,"P",{});var OC=s(qn);MBr=r(OC,"The model class to instantiate is selected based on the "),Yve=n(OC,"CODE",{});var W0t=s(Yve);EBr=r(W0t,"model_type"),W0t.forEach(t),CBr=r(OC,` property of the config object (either
passed as an argument or loaded from `),Kve=n(OC,"CODE",{});var H0t=s(Kve);wBr=r(H0t,"pretrained_model_name_or_path"),H0t.forEach(t),ABr=r(OC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=n(OC,"CODE",{});var U0t=s(Zve);yBr=r(U0t,"pretrained_model_name_or_path"),U0t.forEach(t),LBr=r(OC,":"),OC.forEach(t),xBr=i($a),Pe=n($a,"UL",{});var Oo=s(Pe);EE=n(Oo,"LI",{});var GBe=s(EE);eFe=n(GBe,"STRONG",{});var J0t=s(eFe);kBr=r(J0t,"albert"),J0t.forEach(t),SBr=r(GBe," \u2014 "),jU=n(GBe,"A",{href:!0});var Y0t=s(jU);RBr=r(Y0t,"FlaxAlbertForTokenClassification"),Y0t.forEach(t),BBr=r(GBe," (ALBERT model)"),GBe.forEach(t),PBr=i(Oo),CE=n(Oo,"LI",{});var OBe=s(CE);oFe=n(OBe,"STRONG",{});var K0t=s(oFe);$Br=r(K0t,"bert"),K0t.forEach(t),IBr=r(OBe," \u2014 "),DU=n(OBe,"A",{href:!0});var Z0t=s(DU);qBr=r(Z0t,"FlaxBertForTokenClassification"),Z0t.forEach(t),NBr=r(OBe," (BERT model)"),OBe.forEach(t),jBr=i(Oo),wE=n(Oo,"LI",{});var VBe=s(wE);rFe=n(VBe,"STRONG",{});var eyt=s(rFe);DBr=r(eyt,"big_bird"),eyt.forEach(t),GBr=r(VBe," \u2014 "),GU=n(VBe,"A",{href:!0});var oyt=s(GU);OBr=r(oyt,"FlaxBigBirdForTokenClassification"),oyt.forEach(t),VBr=r(VBe," (BigBird model)"),VBe.forEach(t),XBr=i(Oo),AE=n(Oo,"LI",{});var XBe=s(AE);tFe=n(XBe,"STRONG",{});var ryt=s(tFe);zBr=r(ryt,"distilbert"),ryt.forEach(t),QBr=r(XBe," \u2014 "),OU=n(XBe,"A",{href:!0});var tyt=s(OU);WBr=r(tyt,"FlaxDistilBertForTokenClassification"),tyt.forEach(t),HBr=r(XBe," (DistilBERT model)"),XBe.forEach(t),UBr=i(Oo),yE=n(Oo,"LI",{});var zBe=s(yE);aFe=n(zBe,"STRONG",{});var ayt=s(aFe);JBr=r(ayt,"electra"),ayt.forEach(t),YBr=r(zBe," \u2014 "),VU=n(zBe,"A",{href:!0});var nyt=s(VU);KBr=r(nyt,"FlaxElectraForTokenClassification"),nyt.forEach(t),ZBr=r(zBe," (ELECTRA model)"),zBe.forEach(t),ePr=i(Oo),LE=n(Oo,"LI",{});var QBe=s(LE);nFe=n(QBe,"STRONG",{});var syt=s(nFe);oPr=r(syt,"roberta"),syt.forEach(t),rPr=r(QBe," \u2014 "),XU=n(QBe,"A",{href:!0});var lyt=s(XU);tPr=r(lyt,"FlaxRobertaForTokenClassification"),lyt.forEach(t),aPr=r(QBe," (RoBERTa model)"),QBe.forEach(t),nPr=i(Oo),xE=n(Oo,"LI",{});var WBe=s(xE);sFe=n(WBe,"STRONG",{});var iyt=s(sFe);sPr=r(iyt,"roformer"),iyt.forEach(t),lPr=r(WBe," \u2014 "),zU=n(WBe,"A",{href:!0});var dyt=s(zU);iPr=r(dyt,"FlaxRoFormerForTokenClassification"),dyt.forEach(t),dPr=r(WBe," (RoFormer model)"),WBe.forEach(t),cPr=i(Oo),kE=n(Oo,"LI",{});var HBe=s(kE);lFe=n(HBe,"STRONG",{});var cyt=s(lFe);fPr=r(cyt,"xlm-roberta"),cyt.forEach(t),mPr=r(HBe," \u2014 "),QU=n(HBe,"A",{href:!0});var fyt=s(QU);gPr=r(fyt,"FlaxXLMRobertaForTokenClassification"),fyt.forEach(t),hPr=r(HBe," (XLM-RoBERTa model)"),HBe.forEach(t),Oo.forEach(t),pPr=i($a),iFe=n($a,"P",{});var myt=s(iFe);_Pr=r(myt,"Examples:"),myt.forEach(t),uPr=i($a),m(m7.$$.fragment,$a),$a.forEach(t),$i.forEach(t),eIe=i(c),Sf=n(c,"H2",{class:!0});var fNe=s(Sf);SE=n(fNe,"A",{id:!0,class:!0,href:!0});var gyt=s(SE);dFe=n(gyt,"SPAN",{});var hyt=s(dFe);m(g7.$$.fragment,hyt),hyt.forEach(t),gyt.forEach(t),bPr=i(fNe),cFe=n(fNe,"SPAN",{});var pyt=s(cFe);vPr=r(pyt,"FlaxAutoModelForMultipleChoice"),pyt.forEach(t),fNe.forEach(t),oIe=i(c),Dr=n(c,"DIV",{class:!0});var qi=s(Dr);m(h7.$$.fragment,qi),FPr=i(qi),Rf=n(qi,"P",{});var oK=s(Rf);TPr=r(oK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WU=n(oK,"A",{href:!0});var _yt=s(WU);MPr=r(_yt,"from_pretrained()"),_yt.forEach(t),EPr=r(oK," class method or the "),HU=n(oK,"A",{href:!0});var uyt=s(HU);CPr=r(uyt,"from_config()"),uyt.forEach(t),wPr=r(oK,` class
method.`),oK.forEach(t),APr=i(qi),p7=n(qi,"P",{});var mNe=s(p7);yPr=r(mNe,"This class cannot be instantiated directly using "),fFe=n(mNe,"CODE",{});var byt=s(fFe);LPr=r(byt,"__init__()"),byt.forEach(t),xPr=r(mNe," (throws an error)."),mNe.forEach(t),kPr=i(qi),Pt=n(qi,"DIV",{class:!0});var Ni=s(Pt);m(_7.$$.fragment,Ni),SPr=i(Ni),mFe=n(Ni,"P",{});var vyt=s(mFe);RPr=r(vyt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vyt.forEach(t),BPr=i(Ni),Bf=n(Ni,"P",{});var rK=s(Bf);PPr=r(rK,`Note:
Loading a model from its configuration file does `),gFe=n(rK,"STRONG",{});var Fyt=s(gFe);$Pr=r(Fyt,"not"),Fyt.forEach(t),IPr=r(rK,` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=n(rK,"A",{href:!0});var Tyt=s(UU);qPr=r(Tyt,"from_pretrained()"),Tyt.forEach(t),NPr=r(rK," to load the model weights."),rK.forEach(t),jPr=i(Ni),hFe=n(Ni,"P",{});var Myt=s(hFe);DPr=r(Myt,"Examples:"),Myt.forEach(t),GPr=i(Ni),m(u7.$$.fragment,Ni),Ni.forEach(t),OPr=i(qi),Io=n(qi,"DIV",{class:!0});var Ia=s(Io);m(b7.$$.fragment,Ia),VPr=i(Ia),pFe=n(Ia,"P",{});var Eyt=s(pFe);XPr=r(Eyt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Eyt.forEach(t),zPr=i(Ia),Nn=n(Ia,"P",{});var VC=s(Nn);QPr=r(VC,"The model class to instantiate is selected based on the "),_Fe=n(VC,"CODE",{});var Cyt=s(_Fe);WPr=r(Cyt,"model_type"),Cyt.forEach(t),HPr=r(VC,` property of the config object (either
passed as an argument or loaded from `),uFe=n(VC,"CODE",{});var wyt=s(uFe);UPr=r(wyt,"pretrained_model_name_or_path"),wyt.forEach(t),JPr=r(VC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=n(VC,"CODE",{});var Ayt=s(bFe);YPr=r(Ayt,"pretrained_model_name_or_path"),Ayt.forEach(t),KPr=r(VC,":"),VC.forEach(t),ZPr=i(Ia),$e=n(Ia,"UL",{});var Vo=s($e);RE=n(Vo,"LI",{});var UBe=s(RE);vFe=n(UBe,"STRONG",{});var yyt=s(vFe);e$r=r(yyt,"albert"),yyt.forEach(t),o$r=r(UBe," \u2014 "),JU=n(UBe,"A",{href:!0});var Lyt=s(JU);r$r=r(Lyt,"FlaxAlbertForMultipleChoice"),Lyt.forEach(t),t$r=r(UBe," (ALBERT model)"),UBe.forEach(t),a$r=i(Vo),BE=n(Vo,"LI",{});var JBe=s(BE);FFe=n(JBe,"STRONG",{});var xyt=s(FFe);n$r=r(xyt,"bert"),xyt.forEach(t),s$r=r(JBe," \u2014 "),YU=n(JBe,"A",{href:!0});var kyt=s(YU);l$r=r(kyt,"FlaxBertForMultipleChoice"),kyt.forEach(t),i$r=r(JBe," (BERT model)"),JBe.forEach(t),d$r=i(Vo),PE=n(Vo,"LI",{});var YBe=s(PE);TFe=n(YBe,"STRONG",{});var Syt=s(TFe);c$r=r(Syt,"big_bird"),Syt.forEach(t),f$r=r(YBe," \u2014 "),KU=n(YBe,"A",{href:!0});var Ryt=s(KU);m$r=r(Ryt,"FlaxBigBirdForMultipleChoice"),Ryt.forEach(t),g$r=r(YBe," (BigBird model)"),YBe.forEach(t),h$r=i(Vo),$E=n(Vo,"LI",{});var KBe=s($E);MFe=n(KBe,"STRONG",{});var Byt=s(MFe);p$r=r(Byt,"distilbert"),Byt.forEach(t),_$r=r(KBe," \u2014 "),ZU=n(KBe,"A",{href:!0});var Pyt=s(ZU);u$r=r(Pyt,"FlaxDistilBertForMultipleChoice"),Pyt.forEach(t),b$r=r(KBe," (DistilBERT model)"),KBe.forEach(t),v$r=i(Vo),IE=n(Vo,"LI",{});var ZBe=s(IE);EFe=n(ZBe,"STRONG",{});var $yt=s(EFe);F$r=r($yt,"electra"),$yt.forEach(t),T$r=r(ZBe," \u2014 "),eJ=n(ZBe,"A",{href:!0});var Iyt=s(eJ);M$r=r(Iyt,"FlaxElectraForMultipleChoice"),Iyt.forEach(t),E$r=r(ZBe," (ELECTRA model)"),ZBe.forEach(t),C$r=i(Vo),qE=n(Vo,"LI",{});var ePe=s(qE);CFe=n(ePe,"STRONG",{});var qyt=s(CFe);w$r=r(qyt,"roberta"),qyt.forEach(t),A$r=r(ePe," \u2014 "),oJ=n(ePe,"A",{href:!0});var Nyt=s(oJ);y$r=r(Nyt,"FlaxRobertaForMultipleChoice"),Nyt.forEach(t),L$r=r(ePe," (RoBERTa model)"),ePe.forEach(t),x$r=i(Vo),NE=n(Vo,"LI",{});var oPe=s(NE);wFe=n(oPe,"STRONG",{});var jyt=s(wFe);k$r=r(jyt,"roformer"),jyt.forEach(t),S$r=r(oPe," \u2014 "),rJ=n(oPe,"A",{href:!0});var Dyt=s(rJ);R$r=r(Dyt,"FlaxRoFormerForMultipleChoice"),Dyt.forEach(t),B$r=r(oPe," (RoFormer model)"),oPe.forEach(t),P$r=i(Vo),jE=n(Vo,"LI",{});var rPe=s(jE);AFe=n(rPe,"STRONG",{});var Gyt=s(AFe);$$r=r(Gyt,"xlm-roberta"),Gyt.forEach(t),I$r=r(rPe," \u2014 "),tJ=n(rPe,"A",{href:!0});var Oyt=s(tJ);q$r=r(Oyt,"FlaxXLMRobertaForMultipleChoice"),Oyt.forEach(t),N$r=r(rPe," (XLM-RoBERTa model)"),rPe.forEach(t),Vo.forEach(t),j$r=i(Ia),yFe=n(Ia,"P",{});var Vyt=s(yFe);D$r=r(Vyt,"Examples:"),Vyt.forEach(t),G$r=i(Ia),m(v7.$$.fragment,Ia),Ia.forEach(t),qi.forEach(t),rIe=i(c),Pf=n(c,"H2",{class:!0});var gNe=s(Pf);DE=n(gNe,"A",{id:!0,class:!0,href:!0});var Xyt=s(DE);LFe=n(Xyt,"SPAN",{});var zyt=s(LFe);m(F7.$$.fragment,zyt),zyt.forEach(t),Xyt.forEach(t),O$r=i(gNe),xFe=n(gNe,"SPAN",{});var Qyt=s(xFe);V$r=r(Qyt,"FlaxAutoModelForNextSentencePrediction"),Qyt.forEach(t),gNe.forEach(t),tIe=i(c),Gr=n(c,"DIV",{class:!0});var ji=s(Gr);m(T7.$$.fragment,ji),X$r=i(ji),$f=n(ji,"P",{});var tK=s($f);z$r=r(tK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aJ=n(tK,"A",{href:!0});var Wyt=s(aJ);Q$r=r(Wyt,"from_pretrained()"),Wyt.forEach(t),W$r=r(tK," class method or the "),nJ=n(tK,"A",{href:!0});var Hyt=s(nJ);H$r=r(Hyt,"from_config()"),Hyt.forEach(t),U$r=r(tK,` class
method.`),tK.forEach(t),J$r=i(ji),M7=n(ji,"P",{});var hNe=s(M7);Y$r=r(hNe,"This class cannot be instantiated directly using "),kFe=n(hNe,"CODE",{});var Uyt=s(kFe);K$r=r(Uyt,"__init__()"),Uyt.forEach(t),Z$r=r(hNe," (throws an error)."),hNe.forEach(t),eIr=i(ji),$t=n(ji,"DIV",{class:!0});var Di=s($t);m(E7.$$.fragment,Di),oIr=i(Di),SFe=n(Di,"P",{});var Jyt=s(SFe);rIr=r(Jyt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Jyt.forEach(t),tIr=i(Di),If=n(Di,"P",{});var aK=s(If);aIr=r(aK,`Note:
Loading a model from its configuration file does `),RFe=n(aK,"STRONG",{});var Yyt=s(RFe);nIr=r(Yyt,"not"),Yyt.forEach(t),sIr=r(aK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=n(aK,"A",{href:!0});var Kyt=s(sJ);lIr=r(Kyt,"from_pretrained()"),Kyt.forEach(t),iIr=r(aK," to load the model weights."),aK.forEach(t),dIr=i(Di),BFe=n(Di,"P",{});var Zyt=s(BFe);cIr=r(Zyt,"Examples:"),Zyt.forEach(t),fIr=i(Di),m(C7.$$.fragment,Di),Di.forEach(t),mIr=i(ji),qo=n(ji,"DIV",{class:!0});var qa=s(qo);m(w7.$$.fragment,qa),gIr=i(qa),PFe=n(qa,"P",{});var e8t=s(PFe);hIr=r(e8t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),e8t.forEach(t),pIr=i(qa),jn=n(qa,"P",{});var XC=s(jn);_Ir=r(XC,"The model class to instantiate is selected based on the "),$Fe=n(XC,"CODE",{});var o8t=s($Fe);uIr=r(o8t,"model_type"),o8t.forEach(t),bIr=r(XC,` property of the config object (either
passed as an argument or loaded from `),IFe=n(XC,"CODE",{});var r8t=s(IFe);vIr=r(r8t,"pretrained_model_name_or_path"),r8t.forEach(t),FIr=r(XC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=n(XC,"CODE",{});var t8t=s(qFe);TIr=r(t8t,"pretrained_model_name_or_path"),t8t.forEach(t),MIr=r(XC,":"),XC.forEach(t),EIr=i(qa),NFe=n(qa,"UL",{});var a8t=s(NFe);GE=n(a8t,"LI",{});var tPe=s(GE);jFe=n(tPe,"STRONG",{});var n8t=s(jFe);CIr=r(n8t,"bert"),n8t.forEach(t),wIr=r(tPe," \u2014 "),lJ=n(tPe,"A",{href:!0});var s8t=s(lJ);AIr=r(s8t,"FlaxBertForNextSentencePrediction"),s8t.forEach(t),yIr=r(tPe," (BERT model)"),tPe.forEach(t),a8t.forEach(t),LIr=i(qa),DFe=n(qa,"P",{});var l8t=s(DFe);xIr=r(l8t,"Examples:"),l8t.forEach(t),kIr=i(qa),m(A7.$$.fragment,qa),qa.forEach(t),ji.forEach(t),aIe=i(c),qf=n(c,"H2",{class:!0});var pNe=s(qf);OE=n(pNe,"A",{id:!0,class:!0,href:!0});var i8t=s(OE);GFe=n(i8t,"SPAN",{});var d8t=s(GFe);m(y7.$$.fragment,d8t),d8t.forEach(t),i8t.forEach(t),SIr=i(pNe),OFe=n(pNe,"SPAN",{});var c8t=s(OFe);RIr=r(c8t,"FlaxAutoModelForImageClassification"),c8t.forEach(t),pNe.forEach(t),nIe=i(c),Or=n(c,"DIV",{class:!0});var Gi=s(Or);m(L7.$$.fragment,Gi),BIr=i(Gi),Nf=n(Gi,"P",{});var nK=s(Nf);PIr=r(nK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iJ=n(nK,"A",{href:!0});var f8t=s(iJ);$Ir=r(f8t,"from_pretrained()"),f8t.forEach(t),IIr=r(nK," class method or the "),dJ=n(nK,"A",{href:!0});var m8t=s(dJ);qIr=r(m8t,"from_config()"),m8t.forEach(t),NIr=r(nK,` class
method.`),nK.forEach(t),jIr=i(Gi),x7=n(Gi,"P",{});var _Ne=s(x7);DIr=r(_Ne,"This class cannot be instantiated directly using "),VFe=n(_Ne,"CODE",{});var g8t=s(VFe);GIr=r(g8t,"__init__()"),g8t.forEach(t),OIr=r(_Ne," (throws an error)."),_Ne.forEach(t),VIr=i(Gi),It=n(Gi,"DIV",{class:!0});var Oi=s(It);m(k7.$$.fragment,Oi),XIr=i(Oi),XFe=n(Oi,"P",{});var h8t=s(XFe);zIr=r(h8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),h8t.forEach(t),QIr=i(Oi),jf=n(Oi,"P",{});var sK=s(jf);WIr=r(sK,`Note:
Loading a model from its configuration file does `),zFe=n(sK,"STRONG",{});var p8t=s(zFe);HIr=r(p8t,"not"),p8t.forEach(t),UIr=r(sK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=n(sK,"A",{href:!0});var _8t=s(cJ);JIr=r(_8t,"from_pretrained()"),_8t.forEach(t),YIr=r(sK," to load the model weights."),sK.forEach(t),KIr=i(Oi),QFe=n(Oi,"P",{});var u8t=s(QFe);ZIr=r(u8t,"Examples:"),u8t.forEach(t),eqr=i(Oi),m(S7.$$.fragment,Oi),Oi.forEach(t),oqr=i(Gi),No=n(Gi,"DIV",{class:!0});var Na=s(No);m(R7.$$.fragment,Na),rqr=i(Na),WFe=n(Na,"P",{});var b8t=s(WFe);tqr=r(b8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),b8t.forEach(t),aqr=i(Na),Dn=n(Na,"P",{});var zC=s(Dn);nqr=r(zC,"The model class to instantiate is selected based on the "),HFe=n(zC,"CODE",{});var v8t=s(HFe);sqr=r(v8t,"model_type"),v8t.forEach(t),lqr=r(zC,` property of the config object (either
passed as an argument or loaded from `),UFe=n(zC,"CODE",{});var F8t=s(UFe);iqr=r(F8t,"pretrained_model_name_or_path"),F8t.forEach(t),dqr=r(zC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=n(zC,"CODE",{});var T8t=s(JFe);cqr=r(T8t,"pretrained_model_name_or_path"),T8t.forEach(t),fqr=r(zC,":"),zC.forEach(t),mqr=i(Na),B7=n(Na,"UL",{});var uNe=s(B7);VE=n(uNe,"LI",{});var aPe=s(VE);YFe=n(aPe,"STRONG",{});var M8t=s(YFe);gqr=r(M8t,"beit"),M8t.forEach(t),hqr=r(aPe," \u2014 "),fJ=n(aPe,"A",{href:!0});var E8t=s(fJ);pqr=r(E8t,"FlaxBeitForImageClassification"),E8t.forEach(t),_qr=r(aPe," (BEiT model)"),aPe.forEach(t),uqr=i(uNe),XE=n(uNe,"LI",{});var nPe=s(XE);KFe=n(nPe,"STRONG",{});var C8t=s(KFe);bqr=r(C8t,"vit"),C8t.forEach(t),vqr=r(nPe," \u2014 "),mJ=n(nPe,"A",{href:!0});var w8t=s(mJ);Fqr=r(w8t,"FlaxViTForImageClassification"),w8t.forEach(t),Tqr=r(nPe," (ViT model)"),nPe.forEach(t),uNe.forEach(t),Mqr=i(Na),ZFe=n(Na,"P",{});var A8t=s(ZFe);Eqr=r(A8t,"Examples:"),A8t.forEach(t),Cqr=i(Na),m(P7.$$.fragment,Na),Na.forEach(t),Gi.forEach(t),sIe=i(c),Df=n(c,"H2",{class:!0});var bNe=s(Df);zE=n(bNe,"A",{id:!0,class:!0,href:!0});var y8t=s(zE);eTe=n(y8t,"SPAN",{});var L8t=s(eTe);m($7.$$.fragment,L8t),L8t.forEach(t),y8t.forEach(t),wqr=i(bNe),oTe=n(bNe,"SPAN",{});var x8t=s(oTe);Aqr=r(x8t,"FlaxAutoModelForVision2Seq"),x8t.forEach(t),bNe.forEach(t),lIe=i(c),Vr=n(c,"DIV",{class:!0});var Vi=s(Vr);m(I7.$$.fragment,Vi),yqr=i(Vi),Gf=n(Vi,"P",{});var lK=s(Gf);Lqr=r(lK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gJ=n(lK,"A",{href:!0});var k8t=s(gJ);xqr=r(k8t,"from_pretrained()"),k8t.forEach(t),kqr=r(lK," class method or the "),hJ=n(lK,"A",{href:!0});var S8t=s(hJ);Sqr=r(S8t,"from_config()"),S8t.forEach(t),Rqr=r(lK,` class
method.`),lK.forEach(t),Bqr=i(Vi),q7=n(Vi,"P",{});var vNe=s(q7);Pqr=r(vNe,"This class cannot be instantiated directly using "),rTe=n(vNe,"CODE",{});var R8t=s(rTe);$qr=r(R8t,"__init__()"),R8t.forEach(t),Iqr=r(vNe," (throws an error)."),vNe.forEach(t),qqr=i(Vi),qt=n(Vi,"DIV",{class:!0});var Xi=s(qt);m(N7.$$.fragment,Xi),Nqr=i(Xi),tTe=n(Xi,"P",{});var B8t=s(tTe);jqr=r(B8t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),B8t.forEach(t),Dqr=i(Xi),Of=n(Xi,"P",{});var iK=s(Of);Gqr=r(iK,`Note:
Loading a model from its configuration file does `),aTe=n(iK,"STRONG",{});var P8t=s(aTe);Oqr=r(P8t,"not"),P8t.forEach(t),Vqr=r(iK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=n(iK,"A",{href:!0});var $8t=s(pJ);Xqr=r($8t,"from_pretrained()"),$8t.forEach(t),zqr=r(iK," to load the model weights."),iK.forEach(t),Qqr=i(Xi),nTe=n(Xi,"P",{});var I8t=s(nTe);Wqr=r(I8t,"Examples:"),I8t.forEach(t),Hqr=i(Xi),m(j7.$$.fragment,Xi),Xi.forEach(t),Uqr=i(Vi),jo=n(Vi,"DIV",{class:!0});var ja=s(jo);m(D7.$$.fragment,ja),Jqr=i(ja),sTe=n(ja,"P",{});var q8t=s(sTe);Yqr=r(q8t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),q8t.forEach(t),Kqr=i(ja),Gn=n(ja,"P",{});var QC=s(Gn);Zqr=r(QC,"The model class to instantiate is selected based on the "),lTe=n(QC,"CODE",{});var N8t=s(lTe);eNr=r(N8t,"model_type"),N8t.forEach(t),oNr=r(QC,` property of the config object (either
passed as an argument or loaded from `),iTe=n(QC,"CODE",{});var j8t=s(iTe);rNr=r(j8t,"pretrained_model_name_or_path"),j8t.forEach(t),tNr=r(QC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dTe=n(QC,"CODE",{});var D8t=s(dTe);aNr=r(D8t,"pretrained_model_name_or_path"),D8t.forEach(t),nNr=r(QC,":"),QC.forEach(t),sNr=i(ja),cTe=n(ja,"UL",{});var G8t=s(cTe);QE=n(G8t,"LI",{});var sPe=s(QE);fTe=n(sPe,"STRONG",{});var O8t=s(fTe);lNr=r(O8t,"vision-encoder-decoder"),O8t.forEach(t),iNr=r(sPe," \u2014 "),_J=n(sPe,"A",{href:!0});var V8t=s(_J);dNr=r(V8t,"FlaxVisionEncoderDecoderModel"),V8t.forEach(t),cNr=r(sPe," (Vision Encoder decoder model)"),sPe.forEach(t),G8t.forEach(t),fNr=i(ja),mTe=n(ja,"P",{});var X8t=s(mTe);mNr=r(X8t,"Examples:"),X8t.forEach(t),gNr=i(ja),m(G7.$$.fragment,ja),ja.forEach(t),Vi.forEach(t),this.h()},h(){d(oe,"name","hf:doc:metadata"),d(oe,"content",JSON.stringify(eLt)),d(Ae,"id","auto-classes"),d(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ae,"href","#auto-classes"),d(ge,"class","relative group"),d(On,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoModel"),d(zn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoTokenizer"),d(Yi,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel"),d(Uf,"id","extending-the-auto-classes"),d(Uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Uf,"href","#extending-the-auto-classes"),d(Ki,"class","relative group"),d(Yf,"id","transformers.AutoConfig"),d(Yf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yf,"href","#transformers.AutoConfig"),d(Zi,"class","relative group"),d(Z9,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(ex,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig"),d(ox,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig"),d(rx,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig"),d(tx,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig"),d(ax,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(nx,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig"),d(sx,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(lx,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(ix,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(dx,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig"),d(cx,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig"),d(fx,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig"),d(mx,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig"),d(gx,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig"),d(hx,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig"),d(px,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(_x,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(ux,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(bx,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig"),d(vx,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(Fx,"href","/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(Tx,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig"),d(Mx,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig"),d(Ex,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig"),d(Cx,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig"),d(wx,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig"),d(Ax,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig"),d(yx,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(Lx,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig"),d(xx,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig"),d(kx,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig"),d(Sx,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig"),d(Rx,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNConfig"),d(Bx,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config"),d(Px,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d($x,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig"),d(Ix,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig"),d(qx,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig"),d(Nx,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(jx,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(Dx,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(Gx,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig"),d(Ox,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig"),d(Vx,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig"),d(Xx,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig"),d(zx,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config"),d(Qx,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig"),d(Wx,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(Hx,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig"),d(Ux,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(Jx,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(Yx,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig"),d(Kx,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config"),d(Zx,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(ek,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(ok,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig"),d(rk,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig"),d(tk,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig"),d(ak,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(nk,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(sk,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(lk,"href","/docs/transformers/pr_16543/en/model_doc/rag#transformers.RagConfig"),d(ik,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmConfig"),d(dk,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig"),d(ck,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig"),d(fk,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig"),d(mk,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig"),d(gk,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig"),d(hk,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig"),d(pk,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig"),d(_k,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig"),d(uk,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig"),d(bk,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig"),d(vk,"href","/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Fk,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Tk,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Mk,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig"),d(Ek,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(Ck,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig"),d(wk,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config"),d(Ak,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig"),d(yk,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig"),d(Lk,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(xk,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRConfig"),d(kk,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(Sk,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(Rk,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig"),d(Bk,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig"),d(Pk,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d($k,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(Ik,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(qk,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig"),d(Nk,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(jk,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(Dk,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig"),d(Gk,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig"),d(Ok,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig"),d(Vk,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(Xk,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(zk,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(Qk,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig"),d(Wk,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wg,"id","transformers.AutoTokenizer"),d(Wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Wg,"href","#transformers.AutoTokenizer"),d(od,"class","relative group"),d(Hk,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(Uk,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),d(Jk,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(Yk,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartTokenizer"),d(Kk,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartTokenizerFast"),d(Zk,"href","/docs/transformers/pr_16543/en/model_doc/barthez#transformers.BarthezTokenizer"),d(eS,"href","/docs/transformers/pr_16543/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(oS,"href","/docs/transformers/pr_16543/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(rS,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),d(tS,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),d(aS,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(nS,"href","/docs/transformers/pr_16543/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(sS,"href","/docs/transformers/pr_16543/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(lS,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(iS,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(dS,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(cS,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(fS,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(mS,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(gS,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(hS,"href","/docs/transformers/pr_16543/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(pS,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertTokenizer"),d(_S,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(uS,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineTokenizer"),d(bS,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizer"),d(vS,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(FS,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(TS,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(MS,"href","/docs/transformers/pr_16543/en/model_doc/cpm#transformers.CpmTokenizer"),d(ES,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(CS,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),d(wS,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(AS,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaTokenizer"),d(yS,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(LS,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(xS,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(kS,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(SS,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(RS,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(BS,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(PS,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraTokenizer"),d($S,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(IS,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(qS,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetTokenizer"),d(NS,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(jS,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(DS,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelTokenizer"),d(GS,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(OS,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(VS,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(XS,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(zS,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(QS,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(WS,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(HS,"href","/docs/transformers/pr_16543/en/model_doc/herbert#transformers.HerbertTokenizer"),d(US,"href","/docs/transformers/pr_16543/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(JS,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(YS,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),d(KS,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(ZS,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(eR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(oR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(rR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(tR,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(aR,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(nR,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDTokenizer"),d(sR,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDTokenizerFast"),d(lR,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerTokenizer"),d(iR,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(dR,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeTokenizer"),d(cR,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(fR,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(mR,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(gR,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianTokenizer"),d(hR,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartTokenizer"),d(pR,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(_R,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(uR,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(bR,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),d(vR,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),d(FR,"href","/docs/transformers/pr_16543/en/model_doc/mluke#transformers.MLukeTokenizer"),d(TR,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(MR,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(ER,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(CR,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(wR,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5Tokenizer"),d(AR,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5TokenizerFast"),d(yR,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),d(LR,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(xR,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(kR,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(SR,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(RR,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(BR,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(PR,"href","/docs/transformers/pr_16543/en/model_doc/phobert#transformers.PhobertTokenizer"),d($R,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartTokenizer"),d(IR,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(qR,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),d(NR,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),d(jR,"href","/docs/transformers/pr_16543/en/model_doc/rag#transformers.RagTokenizer"),d(DR,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmTokenizer"),d(GR,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmTokenizerFast"),d(OR,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerTokenizer"),d(VR,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(XR,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertTokenizer"),d(zR,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(QR,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(WR,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(HR,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),d(UR,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(JR,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(YR,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(KR,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(ZR,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(eB,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterTokenizer"),d(oB,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(rB,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(tB,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(aB,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5Tokenizer"),d(nB,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5TokenizerFast"),d(sB,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasTokenizer"),d(lB,"href","/docs/transformers/pr_16543/en/model_doc/tapex#transformers.TapexTokenizer"),d(iB,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(dB,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),d(cB,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),d(fB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(mB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(gB,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMTokenizer"),d(hB,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(pB,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMTokenizer"),d(_B,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(uB,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(bB,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(vB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),d(FB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(TB,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(MB,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(EB,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),d(CB,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ch,"id","transformers.AutoFeatureExtractor"),d(Ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ch,"href","#transformers.AutoFeatureExtractor"),d(rd,"class","relative group"),d(wB,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(AB,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(yB,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(LB,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(xB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(kB,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(SB,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(RB,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(BB,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTFeatureExtractor"),d(PB,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),d($B,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(IB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(qB,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(NB,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(jB,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(DB,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(GB,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(OB,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(VB,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(XB,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(zB,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(QB,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(WB,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(HB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jh,"id","transformers.AutoProcessor"),d(Jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Jh,"href","#transformers.AutoProcessor"),d(td,"class","relative group"),d(UB,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(JB,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPProcessor"),d(YB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(KB,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(ZB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(eP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(oP,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(rP,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(tP,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRProcessor"),d(aP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(nP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(sP,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltProcessor"),d(lP,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(iP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(dP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gp,"id","transformers.AutoModel"),d(gp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gp,"href","#transformers.AutoModel"),d(nd,"class","relative group"),d(cP,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fP,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mP,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gP,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertModel"),d(hP,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartModel"),d(pP,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitModel"),d(_P,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel"),d(uP,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(bP,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdModel"),d(vP,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(FP,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(TP,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(MP,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertModel"),d(EP,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineModel"),d(CP,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPModel"),d(wP,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertModel"),d(AP,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextModel"),d(yP,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLModel"),d(LP,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(xP,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(kP,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(SP,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaModel"),d(RP,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(BP,"href","/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(PP,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTModel"),d($P,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrModel"),d(IP,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertModel"),d(qP,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(NP,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTModel"),d(jP,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraModel"),d(DP,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertModel"),d(GP,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetModel"),d(OP,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTModel"),d(VP,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelModel"),d(XP,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelBaseModel"),d(zP,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNModel"),d(QP,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Model"),d(WP,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(HP,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJModel"),d(UP,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertModel"),d(JP,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertModel"),d(YP,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(KP,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(ZP,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(e$,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDModel"),d(o$,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerModel"),d(r$,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeModel"),d(t$,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertModel"),d(a$,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model"),d(n$,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianModel"),d(s$,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerModel"),d(l$,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartModel"),d(i$,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(d$,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertModel"),d(c$,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetModel"),d(f$,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Model"),d(m$,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerModel"),d(g$,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(h$,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusModel"),d(p$,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverModel"),d(_$,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartModel"),d(u$,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerModel"),d(b$,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(v$,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertModel"),d(F$,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModel"),d(T$,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetModel"),d(M$,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertModel"),d(E$,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetModel"),d(C$,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel"),d(w$,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaModel"),d(A$,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerModel"),d(y$,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerModel"),d(L$,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWModel"),d(x$,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDModel"),d(k$,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(S$,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterModel"),d(R$,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(B$,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinModel"),d(P$,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Model"),d($$,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasModel"),d(I$,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(q$,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechModel"),d(N$,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(j$,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanModel"),d(D$,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltModel"),d(G$,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(O$,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertModel"),d(V$,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTModel"),d(X$,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(z$,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(Q$,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMModel"),d(W$,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMModel"),d(H$,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMModel"),d(U$,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(J$,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(Y$,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(K$,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetModel"),d(Z$,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoModel"),d(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eu,"id","transformers.AutoModelForPreTraining"),d(eu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eu,"href","#transformers.AutoModelForPreTraining"),d(id,"class","relative group"),d(eI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tI,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForPreTraining"),d(aI,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(nI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForPreTraining"),d(sI,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(lI,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(iI,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(dI,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(cI,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(fI,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(mI,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(gI,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForPreTraining"),d(hI,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(pI,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForPreTraining"),d(_I,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(uI,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(bI,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(vI,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(FI,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(TI,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(MI,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(EI,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(CI,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(wI,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(AI,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(yI,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel"),d(LI,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(xI,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(kI,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(SI,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(RI,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(BI,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(PI,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d($I,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(II,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(qI,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(NI,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(jI,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(DI,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(GI,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gu,"id","transformers.AutoModelForCausalLM"),d(Gu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gu,"href","#transformers.AutoModelForCausalLM"),d(fd,"class","relative group"),d(OI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zI,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForCausalLM"),d(QI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertLMHeadModel"),d(WI,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(HI,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(UI,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(JI,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(YI,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(KI,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(ZI,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(eq,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(oq,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForCausalLM"),d(rq,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(tq,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(aq,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(nq,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianForCausalLM"),d(sq,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForCausalLM"),d(lq,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(iq,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(dq,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(cq,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(fq,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(mq,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(gq,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(hq,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(pq,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(_q,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(uq,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(bq,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(vq,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(Fq,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(Tq,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(Mq,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(Eq,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(Cq,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(wq,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C1,"id","transformers.AutoModelForMaskedLM"),d(C1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C1,"href","#transformers.AutoModelForMaskedLM"),d(hd,"class","relative group"),d(Aq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Lq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xq,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(kq,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Sq,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMaskedLM"),d(Rq,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(Bq,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(Pq,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d($q,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(Iq,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(qq,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(Nq,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(jq,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(Dq,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(Gq,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(Oq,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(Vq,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(Xq,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(zq,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(Qq,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(Wq,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(Hq,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(Uq,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(Jq,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(Yq,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(Kq,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(Zq,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(eN,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(oN,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(rN,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(tN,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(aN,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(nN,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(sN,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(lN,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(iN,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l4,"id","transformers.AutoModelForSeq2SeqLM"),d(l4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l4,"href","#transformers.AutoModelForSeq2SeqLM"),d(ud,"class","relative group"),d(dN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mN,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(gN,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(hN,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(pN,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(_N,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(uN,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(bN,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(vN,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(FN,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianMTModel"),d(TN,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(MN,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(EN,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(CN,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(wN,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(AN,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(yN,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(LN,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A4,"id","transformers.AutoModelForSequenceClassification"),d(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A4,"href","#transformers.AutoModelForSequenceClassification"),d(Fd,"class","relative group"),d(xN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RN,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(BN,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification"),d(PN,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForSequenceClassification"),d($N,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(IN,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(qN,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(NN,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(jN,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(DN,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(GN,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(ON,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(VN,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(XN,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(zN,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(QN,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(WN,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(HN,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(UN,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(JN,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(YN,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(KN,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(ZN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(ej,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(oj,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForSequenceClassification"),d(rj,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(tj,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(aj,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(nj,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(sj,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(lj,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(ij,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(dj,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(cj,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(fj,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(mj,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(gj,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(hj,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(pj,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(_j,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(uj,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(bj,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification"),d(vj,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(Fj,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(Tj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(Mj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(Ej,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(Cj,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tb,"id","transformers.AutoModelForMultipleChoice"),d(Tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Tb,"href","#transformers.AutoModelForMultipleChoice"),d(Ed,"class","relative group"),d(wj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Aj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lj,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(xj,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMultipleChoice"),d(kj,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(Sj,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(Rj,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(Bj,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(Pj,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d($j,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(Ij,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(qj,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(Nj,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(jj,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(Dj,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(Gj,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(Oj,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(Vj,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(Xj,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(zj,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(Qj,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(Wj,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(Hj,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(Uj,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(Jj,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(Yj,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(Kj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(Zj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(eD,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(oD,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yb,"id","transformers.AutoModelForNextSentencePrediction"),d(Yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yb,"href","#transformers.AutoModelForNextSentencePrediction"),d(Ad,"class","relative group"),d(rD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nD,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(sD,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(lD,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(iD,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(dD,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(a2,"id","transformers.AutoModelForTokenClassification"),d(a2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a2,"href","#transformers.AutoModelForTokenClassification"),d(xd,"class","relative group"),d(cD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gD,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(hD,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForTokenClassification"),d(pD,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(_D,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(uD,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForTokenClassification"),d(bD,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(vD,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(FD,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(TD,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(MD,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(ED,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(CD,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(wD,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(AD,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(yD,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(LD,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(xD,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(kD,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(SD,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(RD,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(BD,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(PD,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d($D,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(ID,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(qD,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(ND,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(jD,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(DD,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(GD,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(OD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(VD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(XD,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(zD,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j2,"id","transformers.AutoModelForQuestionAnswering"),d(j2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j2,"href","#transformers.AutoModelForQuestionAnswering"),d(Rd,"class","relative group"),d(QD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UD,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(JD,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(YD,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(KD,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(ZD,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(eG,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(oG,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(rG,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(tG,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(aG,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(nG,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(sG,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(lG,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(iG,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(dG,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(cG,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(fG,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(mG,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(gG,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(hG,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(pG,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(_G,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(uG,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(bG,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(vG,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(FG,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(TG,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(MG,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(EG,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(CG,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(wG,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(AG,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(yG,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(LG,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(xG,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(kG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(SG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(RG,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(BG,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A5,"id","transformers.AutoModelForTableQuestionAnswering"),d(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A5,"href","#transformers.AutoModelForTableQuestionAnswering"),d($d,"class","relative group"),d(PG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($G,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qG,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(x5,"id","transformers.AutoModelForImageClassification"),d(x5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x5,"href","#transformers.AutoModelForImageClassification"),d(Nd,"class","relative group"),d(NG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GG,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForImageClassification"),d(OG,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(VG,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(XG,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassification"),d(zG,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(QG,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(WG,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(HG,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(UG,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(JG,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(YG,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(KG,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(ZG,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(eO,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForImageClassification"),d(oO,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanForImageClassification"),d(rO,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForImageClassification"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O5,"id","transformers.AutoModelForVision2Seq"),d(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O5,"href","#transformers.AutoModelForVision2Seq"),d(Gd,"class","relative group"),d(tO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sO,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(z5,"id","transformers.AutoModelForAudioClassification"),d(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z5,"href","#transformers.AutoModelForAudioClassification"),d(Xd,"class","relative group"),d(lO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cO,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(fO,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(mO,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(gO,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(hO,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(pO,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(_O,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(uO,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(o3,"id","transformers.AutoModelForAudioFrameClassification"),d(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o3,"href","#transformers.AutoModelForAudioFrameClassification"),d(Wd,"class","relative group"),d(bO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TO,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(MO,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(EO,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(CO,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l3,"id","transformers.AutoModelForCTC"),d(l3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l3,"href","#transformers.AutoModelForCTC"),d(Jd,"class","relative group"),d(wO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LO,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(xO,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForCTC"),d(kO,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForCTC"),d(SO,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForCTC"),d(RO,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(BO,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(PO,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d($O,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(u3,"id","transformers.AutoModelForSpeechSeq2Seq"),d(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u3,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Zd,"class","relative group"),d(IO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jO,"href","/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(DO,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(T3,"id","transformers.AutoModelForAudioXVector"),d(T3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T3,"href","#transformers.AutoModelForAudioXVector"),d(rc,"class","relative group"),d(GO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XO,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(zO,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(QO,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(WO,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForXVector"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y3,"id","transformers.AutoModelForMaskedImageModeling"),d(y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y3,"href","#transformers.AutoModelForMaskedImageModeling"),d(nc,"class","relative group"),d(HO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YO,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(KO,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(ZO,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R3,"id","transformers.AutoModelForObjectDetection"),d(R3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R3,"href","#transformers.AutoModelForObjectDetection"),d(dc,"class","relative group"),d(eV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tV,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForObjectDetection"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($3,"id","transformers.AutoModelForImageSegmentation"),d($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($3,"href","#transformers.AutoModelForImageSegmentation"),d(mc,"class","relative group"),d(aV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lV,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForSegmentation"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N3,"id","transformers.AutoModelForSemanticSegmentation"),d(N3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N3,"href","#transformers.AutoModelForSemanticSegmentation"),d(pc,"class","relative group"),d(iV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fV,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(mV,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(gV,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(hV,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(X3,"id","transformers.AutoModelForInstanceSegmentation"),d(X3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X3,"href","#transformers.AutoModelForInstanceSegmentation"),d(bc,"class","relative group"),d(pV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_V,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bV,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W3,"id","transformers.TFAutoModel"),d(W3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W3,"href","#transformers.TFAutoModel"),d(Tc,"class","relative group"),d(vV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MV,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertModel"),d(EV,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartModel"),d(CV,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertModel"),d(wV,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(AV,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(yV,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertModel"),d(LV,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.TFCLIPModel"),d(xV,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertModel"),d(kV,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextModel"),d(SV,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLModel"),d(RV,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaModel"),d(BV,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(PV,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertModel"),d($V,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(IV,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraModel"),d(qV,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(NV,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelModel"),d(jV,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(DV,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2Model"),d(GV,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJModel"),d(OV,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.TFHubertModel"),d(VV,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(XV,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDModel"),d(zV,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerModel"),d(QV,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertModel"),d(WV,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianModel"),d(HV,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartModel"),d(UV,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(JV,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetModel"),d(YV,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5Model"),d(KV,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(ZV,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusModel"),d(eX,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertModel"),d(oX,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaModel"),d(rX,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerModel"),d(tX,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(aX,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5Model"),d(nX,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasModel"),d(sX,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(lX,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTModel"),d(iX,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(dX,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(cX,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMModel"),d(fX,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMModel"),d(mX,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(gX,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetModel"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N6,"id","transformers.TFAutoModelForPreTraining"),d(N6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N6,"href","#transformers.TFAutoModelForPreTraining"),d(Cc,"class","relative group"),d(hX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_X,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uX,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(bX,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(vX,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForPreTraining"),d(FX,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(TX,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(MX,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(EX,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(CX,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(wX,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(AX,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(yX,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(LX,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(xX,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(kX,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(SX,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(RX,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(BX,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(PX,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d($X,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(IX,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(qX,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(NX,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(jX,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iv,"id","transformers.TFAutoModelForCausalLM"),d(iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iv,"href","#transformers.TFAutoModelForCausalLM"),d(yc,"class","relative group"),d(DX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VX,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(XX,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(zX,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(QX,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(WX,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(HX,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(UX,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(JX,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(YX,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(KX,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(ZX,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),d(ez,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(oz,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mv,"id","transformers.TFAutoModelForImageClassification"),d(Mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Mv,"href","#transformers.TFAutoModelForImageClassification"),d(kc,"class","relative group"),d(rz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(az,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nz,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(sz,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTForImageClassification"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wv,"id","transformers.TFAutoModelForMaskedLM"),d(wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wv,"href","#transformers.TFAutoModelForMaskedLM"),d(Bc,"class","relative group"),d(lz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cz,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(fz,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(mz,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(gz,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(hz,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(pz,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(_z,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(uz,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(bz,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(vz,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(Fz,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(Tz,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(Mz,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(Ez,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(Cz,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(wz,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(Az,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(yz,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(Lz,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(xz,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qv,"id","transformers.TFAutoModelForSeq2SeqLM"),d(Qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qv,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Ic,"class","relative group"),d(kz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Sz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Rz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bz,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(Pz,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d($z,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(Iz,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(qz,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(Nz,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianMTModel"),d(jz,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(Dz,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(Gz,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(Oz,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tF,"id","transformers.TFAutoModelForSequenceClassification"),d(tF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tF,"href","#transformers.TFAutoModelForSequenceClassification"),d(jc,"class","relative group"),d(Vz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qz,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(Wz,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(Hz,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(Uz,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(Jz,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(Yz,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(Kz,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(Zz,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(eQ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(oQ,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(rQ,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(tQ,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(aQ,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(nQ,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(sQ,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(lQ,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(iQ,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(dQ,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(cQ,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(fQ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(mQ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(gQ,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(hQ,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(pQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(_Q,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(uQ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kF,"id","transformers.TFAutoModelForMultipleChoice"),d(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kF,"href","#transformers.TFAutoModelForMultipleChoice"),d(Oc,"class","relative group"),d(bQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TQ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(MQ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(EQ,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(CQ,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(wQ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(AQ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(yQ,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(LQ,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(xQ,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(kQ,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(SQ,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(RQ,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(BQ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(PQ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d($Q,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(IQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(qQ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HF,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(HF,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(zc,"class","relative group"),d(NQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GQ,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(JF,"id","transformers.TFAutoModelForTokenClassification"),d(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(JF,"href","#transformers.TFAutoModelForTokenClassification"),d(Hc,"class","relative group"),d(OQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zQ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(QQ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(WQ,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(HQ,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(UQ,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(JQ,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(YQ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(KQ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(ZQ,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(eW,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(oW,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(rW,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(tW,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(aW,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(nW,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(sW,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(lW,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(iW,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(dW,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(cW,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uT,"id","transformers.TFAutoModelForQuestionAnswering"),d(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uT,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Yc,"class","relative group"),d(fW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hW,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(pW,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(_W,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(uW,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(bW,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(vW,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(FW,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(TW,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(MW,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(EW,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(CW,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(wW,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(AW,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(yW,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(LW,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(xW,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(kW,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(SW,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(RW,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(BW,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NT,"id","transformers.TFAutoModelForVision2Seq"),d(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(NT,"href","#transformers.TFAutoModelForVision2Seq"),d(ef,"class","relative group"),d(PW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($W,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qW,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DT,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(DT,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(tf,"class","relative group"),d(NW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GW,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(OT,"id","transformers.FlaxAutoModel"),d(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(OT,"href","#transformers.FlaxAutoModel"),d(sf,"class","relative group"),d(OW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zW,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertModel"),d(QW,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartModel"),d(WW,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitModel"),d(HW,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertModel"),d(UW,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(JW,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(YW,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(KW,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.FlaxCLIPModel"),d(ZW,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(eH,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraModel"),d(oH,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(rH,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(tH,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(aH,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianModel"),d(nH,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartModel"),d(sH,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5Model"),d(lH,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(iH,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(dH,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(cH,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5Model"),d(fH,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(mH,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTModel"),d(gH,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(hH,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(pH,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hM,"id","transformers.FlaxAutoModelForCausalLM"),d(hM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hM,"href","#transformers.FlaxAutoModelForCausalLM"),d(cf,"class","relative group"),d(_H,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vH,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(FH,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(TH,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(MH,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(EH,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FM,"id","transformers.FlaxAutoModelForPreTraining"),d(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FM,"href","#transformers.FlaxAutoModelForPreTraining"),d(gf,"class","relative group"),d(CH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(AH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yH,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(LH,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(xH,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(kH,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(SH,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(RH,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(BH,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(PH,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d($H,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(IH,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(qH,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(NH,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BM,"id","transformers.FlaxAutoModelForMaskedLM"),d(BM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BM,"href","#transformers.FlaxAutoModelForMaskedLM"),d(_f,"class","relative group"),d(jH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(OH,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(VH,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(XH,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(zH,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(QH,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(WH,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(HH,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(UH,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(JH,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(YH,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XM,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XM,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(vf,"class","relative group"),d(KH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oU,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(rU,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(tU,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(aU,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(nU,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(sU,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(lU,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(iU,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(dU,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eE,"id","transformers.FlaxAutoModelForSequenceClassification"),d(eE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eE,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(Mf,"class","relative group"),d(cU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gU,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(hU,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(pU,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(_U,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(uU,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(bU,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(vU,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(FU,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(TU,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(MU,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fE,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fE,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(wf,"class","relative group"),d(EU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AU,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(yU,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(LU,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(xU,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(kU,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(SU,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(RU,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(BU,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(PU,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d($U,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ME,"id","transformers.FlaxAutoModelForTokenClassification"),d(ME,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ME,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Lf,"class","relative group"),d(IU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jU,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(DU,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(GU,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(OU,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(VU,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(XU,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(zU,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(QU,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SE,"id","transformers.FlaxAutoModelForMultipleChoice"),d(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SE,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Sf,"class","relative group"),d(WU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(JU,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(YU,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(KU,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(ZU,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(eJ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(oJ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(rJ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(tJ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(DE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(DE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Pf,"class","relative group"),d(aJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lJ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(OE,"id","transformers.FlaxAutoModelForImageClassification"),d(OE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(OE,"href","#transformers.FlaxAutoModelForImageClassification"),d(qf,"class","relative group"),d(iJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fJ,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(mJ,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zE,"id","transformers.FlaxAutoModelForVision2Seq"),d(zE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zE,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Df,"class","relative group"),d(gJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_J,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,u){e(document.head,oe),b(c,co,u),b(c,ge,u),e(ge,Ae),e(Ae,io),g(ue,io,null),e(ge,Ce),e(ge,Xo),e(Xo,zi),b(c,zf,u),b(c,fa,u),e(fa,Qi),e(fa,Wi),e(Wi,WC),e(fa,Qf),b(c,Se,u),b(c,fo,u),e(fo,Hi),e(fo,On),e(On,HC),e(fo,Vn),e(fo,Xn),e(Xn,UC),e(fo,Ui),e(fo,zn),e(zn,JC),e(fo,Ji),b(c,Wf,u),g(Da,c,u),b(c,mo,u),b(c,ve,u),e(ve,W9),e(ve,Yi),e(Yi,H9),e(ve,U9),b(c,zo,u),b(c,Ga,u),e(Ga,J9),e(Ga,Hf),e(Hf,Y9),e(Ga,FNe),b(c,lPe,u),b(c,Ki,u),e(Ki,Uf),e(Uf,dK),g(YC,dK,null),e(Ki,TNe),e(Ki,cK),e(cK,MNe),b(c,iPe,u),b(c,Qn,u),e(Qn,ENe),e(Qn,fK),e(fK,CNe),e(Qn,wNe),e(Qn,mK),e(mK,ANe),e(Qn,yNe),b(c,dPe,u),g(KC,c,u),b(c,cPe,u),b(c,K9,u),e(K9,LNe),b(c,fPe,u),g(Jf,c,u),b(c,mPe,u),b(c,Zi,u),e(Zi,Yf),e(Yf,gK),g(ZC,gK,null),e(Zi,xNe),e(Zi,hK),e(hK,kNe),b(c,gPe,u),b(c,Qo,u),g(ew,Qo,null),e(Qo,SNe),e(Qo,ow),e(ow,RNe),e(ow,Z9),e(Z9,BNe),e(ow,PNe),e(Qo,$Ne),e(Qo,rw),e(rw,INe),e(rw,pK),e(pK,qNe),e(rw,NNe),e(Qo,jNe),e(Qo,go),g(tw,go,null),e(go,DNe),e(go,_K),e(_K,GNe),e(go,ONe),e(go,ed),e(ed,VNe),e(ed,uK),e(uK,XNe),e(ed,zNe),e(ed,bK),e(bK,QNe),e(ed,WNe),e(go,HNe),e(go,v),e(v,Kf),e(Kf,vK),e(vK,UNe),e(Kf,JNe),e(Kf,ex),e(ex,YNe),e(Kf,KNe),e(v,ZNe),e(v,Zf),e(Zf,FK),e(FK,eje),e(Zf,oje),e(Zf,ox),e(ox,rje),e(Zf,tje),e(v,aje),e(v,em),e(em,TK),e(TK,nje),e(em,sje),e(em,rx),e(rx,lje),e(em,ije),e(v,dje),e(v,om),e(om,MK),e(MK,cje),e(om,fje),e(om,tx),e(tx,mje),e(om,gje),e(v,hje),e(v,rm),e(rm,EK),e(EK,pje),e(rm,_je),e(rm,ax),e(ax,uje),e(rm,bje),e(v,vje),e(v,tm),e(tm,CK),e(CK,Fje),e(tm,Tje),e(tm,nx),e(nx,Mje),e(tm,Eje),e(v,Cje),e(v,am),e(am,wK),e(wK,wje),e(am,Aje),e(am,sx),e(sx,yje),e(am,Lje),e(v,xje),e(v,nm),e(nm,AK),e(AK,kje),e(nm,Sje),e(nm,lx),e(lx,Rje),e(nm,Bje),e(v,Pje),e(v,sm),e(sm,yK),e(yK,$je),e(sm,Ije),e(sm,ix),e(ix,qje),e(sm,Nje),e(v,jje),e(v,lm),e(lm,LK),e(LK,Dje),e(lm,Gje),e(lm,dx),e(dx,Oje),e(lm,Vje),e(v,Xje),e(v,im),e(im,xK),e(xK,zje),e(im,Qje),e(im,cx),e(cx,Wje),e(im,Hje),e(v,Uje),e(v,dm),e(dm,kK),e(kK,Jje),e(dm,Yje),e(dm,fx),e(fx,Kje),e(dm,Zje),e(v,eDe),e(v,cm),e(cm,SK),e(SK,oDe),e(cm,rDe),e(cm,mx),e(mx,tDe),e(cm,aDe),e(v,nDe),e(v,fm),e(fm,RK),e(RK,sDe),e(fm,lDe),e(fm,gx),e(gx,iDe),e(fm,dDe),e(v,cDe),e(v,mm),e(mm,BK),e(BK,fDe),e(mm,mDe),e(mm,hx),e(hx,gDe),e(mm,hDe),e(v,pDe),e(v,gm),e(gm,PK),e(PK,_De),e(gm,uDe),e(gm,px),e(px,bDe),e(gm,vDe),e(v,FDe),e(v,hm),e(hm,$K),e($K,TDe),e(hm,MDe),e(hm,_x),e(_x,EDe),e(hm,CDe),e(v,wDe),e(v,pm),e(pm,IK),e(IK,ADe),e(pm,yDe),e(pm,ux),e(ux,LDe),e(pm,xDe),e(v,kDe),e(v,_m),e(_m,qK),e(qK,SDe),e(_m,RDe),e(_m,bx),e(bx,BDe),e(_m,PDe),e(v,$De),e(v,um),e(um,NK),e(NK,IDe),e(um,qDe),e(um,vx),e(vx,NDe),e(um,jDe),e(v,DDe),e(v,bm),e(bm,jK),e(jK,GDe),e(bm,ODe),e(bm,Fx),e(Fx,VDe),e(bm,XDe),e(v,zDe),e(v,vm),e(vm,DK),e(DK,QDe),e(vm,WDe),e(vm,Tx),e(Tx,HDe),e(vm,UDe),e(v,JDe),e(v,Fm),e(Fm,GK),e(GK,YDe),e(Fm,KDe),e(Fm,Mx),e(Mx,ZDe),e(Fm,eGe),e(v,oGe),e(v,Tm),e(Tm,OK),e(OK,rGe),e(Tm,tGe),e(Tm,Ex),e(Ex,aGe),e(Tm,nGe),e(v,sGe),e(v,Mm),e(Mm,VK),e(VK,lGe),e(Mm,iGe),e(Mm,Cx),e(Cx,dGe),e(Mm,cGe),e(v,fGe),e(v,Em),e(Em,XK),e(XK,mGe),e(Em,gGe),e(Em,wx),e(wx,hGe),e(Em,pGe),e(v,_Ge),e(v,Cm),e(Cm,zK),e(zK,uGe),e(Cm,bGe),e(Cm,Ax),e(Ax,vGe),e(Cm,FGe),e(v,TGe),e(v,wm),e(wm,QK),e(QK,MGe),e(wm,EGe),e(wm,yx),e(yx,CGe),e(wm,wGe),e(v,AGe),e(v,Am),e(Am,WK),e(WK,yGe),e(Am,LGe),e(Am,Lx),e(Lx,xGe),e(Am,kGe),e(v,SGe),e(v,ym),e(ym,HK),e(HK,RGe),e(ym,BGe),e(ym,xx),e(xx,PGe),e(ym,$Ge),e(v,IGe),e(v,Lm),e(Lm,UK),e(UK,qGe),e(Lm,NGe),e(Lm,kx),e(kx,jGe),e(Lm,DGe),e(v,GGe),e(v,xm),e(xm,JK),e(JK,OGe),e(xm,VGe),e(xm,Sx),e(Sx,XGe),e(xm,zGe),e(v,QGe),e(v,km),e(km,YK),e(YK,WGe),e(km,HGe),e(km,Rx),e(Rx,UGe),e(km,JGe),e(v,YGe),e(v,Sm),e(Sm,KK),e(KK,KGe),e(Sm,ZGe),e(Sm,Bx),e(Bx,eOe),e(Sm,oOe),e(v,rOe),e(v,Rm),e(Rm,ZK),e(ZK,tOe),e(Rm,aOe),e(Rm,Px),e(Px,nOe),e(Rm,sOe),e(v,lOe),e(v,Bm),e(Bm,eZ),e(eZ,iOe),e(Bm,dOe),e(Bm,$x),e($x,cOe),e(Bm,fOe),e(v,mOe),e(v,Pm),e(Pm,oZ),e(oZ,gOe),e(Pm,hOe),e(Pm,Ix),e(Ix,pOe),e(Pm,_Oe),e(v,uOe),e(v,$m),e($m,rZ),e(rZ,bOe),e($m,vOe),e($m,qx),e(qx,FOe),e($m,TOe),e(v,MOe),e(v,Im),e(Im,tZ),e(tZ,EOe),e(Im,COe),e(Im,Nx),e(Nx,wOe),e(Im,AOe),e(v,yOe),e(v,qm),e(qm,aZ),e(aZ,LOe),e(qm,xOe),e(qm,jx),e(jx,kOe),e(qm,SOe),e(v,ROe),e(v,Nm),e(Nm,nZ),e(nZ,BOe),e(Nm,POe),e(Nm,Dx),e(Dx,$Oe),e(Nm,IOe),e(v,qOe),e(v,jm),e(jm,sZ),e(sZ,NOe),e(jm,jOe),e(jm,Gx),e(Gx,DOe),e(jm,GOe),e(v,OOe),e(v,Dm),e(Dm,lZ),e(lZ,VOe),e(Dm,XOe),e(Dm,Ox),e(Ox,zOe),e(Dm,QOe),e(v,WOe),e(v,Gm),e(Gm,iZ),e(iZ,HOe),e(Gm,UOe),e(Gm,Vx),e(Vx,JOe),e(Gm,YOe),e(v,KOe),e(v,Om),e(Om,dZ),e(dZ,ZOe),e(Om,eVe),e(Om,Xx),e(Xx,oVe),e(Om,rVe),e(v,tVe),e(v,Vm),e(Vm,cZ),e(cZ,aVe),e(Vm,nVe),e(Vm,zx),e(zx,sVe),e(Vm,lVe),e(v,iVe),e(v,Xm),e(Xm,fZ),e(fZ,dVe),e(Xm,cVe),e(Xm,Qx),e(Qx,fVe),e(Xm,mVe),e(v,gVe),e(v,zm),e(zm,mZ),e(mZ,hVe),e(zm,pVe),e(zm,Wx),e(Wx,_Ve),e(zm,uVe),e(v,bVe),e(v,Qm),e(Qm,gZ),e(gZ,vVe),e(Qm,FVe),e(Qm,Hx),e(Hx,TVe),e(Qm,MVe),e(v,EVe),e(v,Wm),e(Wm,hZ),e(hZ,CVe),e(Wm,wVe),e(Wm,Ux),e(Ux,AVe),e(Wm,yVe),e(v,LVe),e(v,Hm),e(Hm,pZ),e(pZ,xVe),e(Hm,kVe),e(Hm,Jx),e(Jx,SVe),e(Hm,RVe),e(v,BVe),e(v,Um),e(Um,_Z),e(_Z,PVe),e(Um,$Ve),e(Um,Yx),e(Yx,IVe),e(Um,qVe),e(v,NVe),e(v,Jm),e(Jm,uZ),e(uZ,jVe),e(Jm,DVe),e(Jm,Kx),e(Kx,GVe),e(Jm,OVe),e(v,VVe),e(v,Ym),e(Ym,bZ),e(bZ,XVe),e(Ym,zVe),e(Ym,Zx),e(Zx,QVe),e(Ym,WVe),e(v,HVe),e(v,Km),e(Km,vZ),e(vZ,UVe),e(Km,JVe),e(Km,ek),e(ek,YVe),e(Km,KVe),e(v,ZVe),e(v,Zm),e(Zm,FZ),e(FZ,eXe),e(Zm,oXe),e(Zm,ok),e(ok,rXe),e(Zm,tXe),e(v,aXe),e(v,eg),e(eg,TZ),e(TZ,nXe),e(eg,sXe),e(eg,rk),e(rk,lXe),e(eg,iXe),e(v,dXe),e(v,og),e(og,MZ),e(MZ,cXe),e(og,fXe),e(og,tk),e(tk,mXe),e(og,gXe),e(v,hXe),e(v,rg),e(rg,EZ),e(EZ,pXe),e(rg,_Xe),e(rg,ak),e(ak,uXe),e(rg,bXe),e(v,vXe),e(v,tg),e(tg,CZ),e(CZ,FXe),e(tg,TXe),e(tg,nk),e(nk,MXe),e(tg,EXe),e(v,CXe),e(v,ag),e(ag,wZ),e(wZ,wXe),e(ag,AXe),e(ag,sk),e(sk,yXe),e(ag,LXe),e(v,xXe),e(v,ng),e(ng,AZ),e(AZ,kXe),e(ng,SXe),e(ng,lk),e(lk,RXe),e(ng,BXe),e(v,PXe),e(v,sg),e(sg,yZ),e(yZ,$Xe),e(sg,IXe),e(sg,ik),e(ik,qXe),e(sg,NXe),e(v,jXe),e(v,lg),e(lg,LZ),e(LZ,DXe),e(lg,GXe),e(lg,dk),e(dk,OXe),e(lg,VXe),e(v,XXe),e(v,ig),e(ig,xZ),e(xZ,zXe),e(ig,QXe),e(ig,ck),e(ck,WXe),e(ig,HXe),e(v,UXe),e(v,dg),e(dg,kZ),e(kZ,JXe),e(dg,YXe),e(dg,fk),e(fk,KXe),e(dg,ZXe),e(v,eze),e(v,cg),e(cg,SZ),e(SZ,oze),e(cg,rze),e(cg,mk),e(mk,tze),e(cg,aze),e(v,nze),e(v,fg),e(fg,RZ),e(RZ,sze),e(fg,lze),e(fg,gk),e(gk,ize),e(fg,dze),e(v,cze),e(v,mg),e(mg,BZ),e(BZ,fze),e(mg,mze),e(mg,hk),e(hk,gze),e(mg,hze),e(v,pze),e(v,gg),e(gg,PZ),e(PZ,_ze),e(gg,uze),e(gg,pk),e(pk,bze),e(gg,vze),e(v,Fze),e(v,hg),e(hg,$Z),e($Z,Tze),e(hg,Mze),e(hg,_k),e(_k,Eze),e(hg,Cze),e(v,wze),e(v,pg),e(pg,IZ),e(IZ,Aze),e(pg,yze),e(pg,uk),e(uk,Lze),e(pg,xze),e(v,kze),e(v,_g),e(_g,qZ),e(qZ,Sze),e(_g,Rze),e(_g,bk),e(bk,Bze),e(_g,Pze),e(v,$ze),e(v,ug),e(ug,NZ),e(NZ,Ize),e(ug,qze),e(ug,vk),e(vk,Nze),e(ug,jze),e(v,Dze),e(v,bg),e(bg,jZ),e(jZ,Gze),e(bg,Oze),e(bg,Fk),e(Fk,Vze),e(bg,Xze),e(v,zze),e(v,vg),e(vg,DZ),e(DZ,Qze),e(vg,Wze),e(vg,Tk),e(Tk,Hze),e(vg,Uze),e(v,Jze),e(v,Fg),e(Fg,GZ),e(GZ,Yze),e(Fg,Kze),e(Fg,Mk),e(Mk,Zze),e(Fg,eQe),e(v,oQe),e(v,Tg),e(Tg,OZ),e(OZ,rQe),e(Tg,tQe),e(Tg,Ek),e(Ek,aQe),e(Tg,nQe),e(v,sQe),e(v,Mg),e(Mg,VZ),e(VZ,lQe),e(Mg,iQe),e(Mg,Ck),e(Ck,dQe),e(Mg,cQe),e(v,fQe),e(v,Eg),e(Eg,XZ),e(XZ,mQe),e(Eg,gQe),e(Eg,wk),e(wk,hQe),e(Eg,pQe),e(v,_Qe),e(v,Cg),e(Cg,zZ),e(zZ,uQe),e(Cg,bQe),e(Cg,Ak),e(Ak,vQe),e(Cg,FQe),e(v,TQe),e(v,wg),e(wg,QZ),e(QZ,MQe),e(wg,EQe),e(wg,yk),e(yk,CQe),e(wg,wQe),e(v,AQe),e(v,Ag),e(Ag,WZ),e(WZ,yQe),e(Ag,LQe),e(Ag,Lk),e(Lk,xQe),e(Ag,kQe),e(v,SQe),e(v,yg),e(yg,HZ),e(HZ,RQe),e(yg,BQe),e(yg,xk),e(xk,PQe),e(yg,$Qe),e(v,IQe),e(v,Lg),e(Lg,UZ),e(UZ,qQe),e(Lg,NQe),e(Lg,kk),e(kk,jQe),e(Lg,DQe),e(v,GQe),e(v,xg),e(xg,JZ),e(JZ,OQe),e(xg,VQe),e(xg,Sk),e(Sk,XQe),e(xg,zQe),e(v,QQe),e(v,kg),e(kg,YZ),e(YZ,WQe),e(kg,HQe),e(kg,Rk),e(Rk,UQe),e(kg,JQe),e(v,YQe),e(v,Sg),e(Sg,KZ),e(KZ,KQe),e(Sg,ZQe),e(Sg,Bk),e(Bk,eWe),e(Sg,oWe),e(v,rWe),e(v,Rg),e(Rg,ZZ),e(ZZ,tWe),e(Rg,aWe),e(Rg,Pk),e(Pk,nWe),e(Rg,sWe),e(v,lWe),e(v,Bg),e(Bg,eee),e(eee,iWe),e(Bg,dWe),e(Bg,$k),e($k,cWe),e(Bg,fWe),e(v,mWe),e(v,Pg),e(Pg,oee),e(oee,gWe),e(Pg,hWe),e(Pg,Ik),e(Ik,pWe),e(Pg,_We),e(v,uWe),e(v,$g),e($g,ree),e(ree,bWe),e($g,vWe),e($g,qk),e(qk,FWe),e($g,TWe),e(v,MWe),e(v,Ig),e(Ig,tee),e(tee,EWe),e(Ig,CWe),e(Ig,Nk),e(Nk,wWe),e(Ig,AWe),e(v,yWe),e(v,qg),e(qg,aee),e(aee,LWe),e(qg,xWe),e(qg,jk),e(jk,kWe),e(qg,SWe),e(v,RWe),e(v,Ng),e(Ng,nee),e(nee,BWe),e(Ng,PWe),e(Ng,Dk),e(Dk,$We),e(Ng,IWe),e(v,qWe),e(v,jg),e(jg,see),e(see,NWe),e(jg,jWe),e(jg,Gk),e(Gk,DWe),e(jg,GWe),e(v,OWe),e(v,Dg),e(Dg,lee),e(lee,VWe),e(Dg,XWe),e(Dg,Ok),e(Ok,zWe),e(Dg,QWe),e(v,WWe),e(v,Gg),e(Gg,iee),e(iee,HWe),e(Gg,UWe),e(Gg,Vk),e(Vk,JWe),e(Gg,YWe),e(v,KWe),e(v,Og),e(Og,dee),e(dee,ZWe),e(Og,eHe),e(Og,Xk),e(Xk,oHe),e(Og,rHe),e(v,tHe),e(v,Vg),e(Vg,cee),e(cee,aHe),e(Vg,nHe),e(Vg,zk),e(zk,sHe),e(Vg,lHe),e(v,iHe),e(v,Xg),e(Xg,fee),e(fee,dHe),e(Xg,cHe),e(Xg,Qk),e(Qk,fHe),e(Xg,mHe),e(v,gHe),e(v,zg),e(zg,mee),e(mee,hHe),e(zg,pHe),e(zg,Wk),e(Wk,_He),e(zg,uHe),e(go,bHe),e(go,gee),e(gee,vHe),e(go,FHe),g(aw,go,null),e(Qo,THe),e(Qo,Qg),g(nw,Qg,null),e(Qg,MHe),e(Qg,hee),e(hee,EHe),b(c,hPe,u),b(c,od,u),e(od,Wg),e(Wg,pee),g(sw,pee,null),e(od,CHe),e(od,_ee),e(_ee,wHe),b(c,pPe,u),b(c,Wo,u),g(lw,Wo,null),e(Wo,AHe),e(Wo,iw),e(iw,yHe),e(iw,Hk),e(Hk,LHe),e(iw,xHe),e(Wo,kHe),e(Wo,dw),e(dw,SHe),e(dw,uee),e(uee,RHe),e(dw,BHe),e(Wo,PHe),e(Wo,ho),g(cw,ho,null),e(ho,$He),e(ho,bee),e(bee,IHe),e(ho,qHe),e(ho,Oa),e(Oa,NHe),e(Oa,vee),e(vee,jHe),e(Oa,DHe),e(Oa,Fee),e(Fee,GHe),e(Oa,OHe),e(Oa,Tee),e(Tee,VHe),e(Oa,XHe),e(ho,zHe),e(ho,E),e(E,Wn),e(Wn,Mee),e(Mee,QHe),e(Wn,WHe),e(Wn,Uk),e(Uk,HHe),e(Wn,UHe),e(Wn,Jk),e(Jk,JHe),e(Wn,YHe),e(E,KHe),e(E,Hn),e(Hn,Eee),e(Eee,ZHe),e(Hn,eUe),e(Hn,Yk),e(Yk,oUe),e(Hn,rUe),e(Hn,Kk),e(Kk,tUe),e(Hn,aUe),e(E,nUe),e(E,Un),e(Un,Cee),e(Cee,sUe),e(Un,lUe),e(Un,Zk),e(Zk,iUe),e(Un,dUe),e(Un,eS),e(eS,cUe),e(Un,fUe),e(E,mUe),e(E,Hg),e(Hg,wee),e(wee,gUe),e(Hg,hUe),e(Hg,oS),e(oS,pUe),e(Hg,_Ue),e(E,uUe),e(E,Jn),e(Jn,Aee),e(Aee,bUe),e(Jn,vUe),e(Jn,rS),e(rS,FUe),e(Jn,TUe),e(Jn,tS),e(tS,MUe),e(Jn,EUe),e(E,CUe),e(E,Ug),e(Ug,yee),e(yee,wUe),e(Ug,AUe),e(Ug,aS),e(aS,yUe),e(Ug,LUe),e(E,xUe),e(E,Jg),e(Jg,Lee),e(Lee,kUe),e(Jg,SUe),e(Jg,nS),e(nS,RUe),e(Jg,BUe),e(E,PUe),e(E,Yg),e(Yg,xee),e(xee,$Ue),e(Yg,IUe),e(Yg,sS),e(sS,qUe),e(Yg,NUe),e(E,jUe),e(E,Yn),e(Yn,kee),e(kee,DUe),e(Yn,GUe),e(Yn,lS),e(lS,OUe),e(Yn,VUe),e(Yn,iS),e(iS,XUe),e(Yn,zUe),e(E,QUe),e(E,Kn),e(Kn,See),e(See,WUe),e(Kn,HUe),e(Kn,dS),e(dS,UUe),e(Kn,JUe),e(Kn,cS),e(cS,YUe),e(Kn,KUe),e(E,ZUe),e(E,Zn),e(Zn,Ree),e(Ree,eJe),e(Zn,oJe),e(Zn,fS),e(fS,rJe),e(Zn,tJe),e(Zn,mS),e(mS,aJe),e(Zn,nJe),e(E,sJe),e(E,Kg),e(Kg,Bee),e(Bee,lJe),e(Kg,iJe),e(Kg,gS),e(gS,dJe),e(Kg,cJe),e(E,fJe),e(E,Zg),e(Zg,Pee),e(Pee,mJe),e(Zg,gJe),e(Zg,hS),e(hS,hJe),e(Zg,pJe),e(E,_Je),e(E,es),e(es,$ee),e($ee,uJe),e(es,bJe),e(es,pS),e(pS,vJe),e(es,FJe),e(es,_S),e(_S,TJe),e(es,MJe),e(E,EJe),e(E,eh),e(eh,Iee),e(Iee,CJe),e(eh,wJe),e(eh,uS),e(uS,AJe),e(eh,yJe),e(E,LJe),e(E,os),e(os,qee),e(qee,xJe),e(os,kJe),e(os,bS),e(bS,SJe),e(os,RJe),e(os,vS),e(vS,BJe),e(os,PJe),e(E,$Je),e(E,rs),e(rs,Nee),e(Nee,IJe),e(rs,qJe),e(rs,FS),e(FS,NJe),e(rs,jJe),e(rs,TS),e(TS,DJe),e(rs,GJe),e(E,OJe),e(E,ts),e(ts,jee),e(jee,VJe),e(ts,XJe),e(ts,MS),e(MS,zJe),e(ts,QJe),e(ts,Dee),e(Dee,WJe),e(ts,HJe),e(E,UJe),e(E,oh),e(oh,Gee),e(Gee,JJe),e(oh,YJe),e(oh,ES),e(ES,KJe),e(oh,ZJe),e(E,eYe),e(E,as),e(as,Oee),e(Oee,oYe),e(as,rYe),e(as,CS),e(CS,tYe),e(as,aYe),e(as,wS),e(wS,nYe),e(as,sYe),e(E,lYe),e(E,ns),e(ns,Vee),e(Vee,iYe),e(ns,dYe),e(ns,AS),e(AS,cYe),e(ns,fYe),e(ns,yS),e(yS,mYe),e(ns,gYe),e(E,hYe),e(E,ss),e(ss,Xee),e(Xee,pYe),e(ss,_Ye),e(ss,LS),e(LS,uYe),e(ss,bYe),e(ss,xS),e(xS,vYe),e(ss,FYe),e(E,TYe),e(E,ls),e(ls,zee),e(zee,MYe),e(ls,EYe),e(ls,kS),e(kS,CYe),e(ls,wYe),e(ls,SS),e(SS,AYe),e(ls,yYe),e(E,LYe),e(E,is),e(is,Qee),e(Qee,xYe),e(is,kYe),e(is,RS),e(RS,SYe),e(is,RYe),e(is,BS),e(BS,BYe),e(is,PYe),e(E,$Ye),e(E,ds),e(ds,Wee),e(Wee,IYe),e(ds,qYe),e(ds,PS),e(PS,NYe),e(ds,jYe),e(ds,$S),e($S,DYe),e(ds,GYe),e(E,OYe),e(E,rh),e(rh,Hee),e(Hee,VYe),e(rh,XYe),e(rh,IS),e(IS,zYe),e(rh,QYe),e(E,WYe),e(E,cs),e(cs,Uee),e(Uee,HYe),e(cs,UYe),e(cs,qS),e(qS,JYe),e(cs,YYe),e(cs,NS),e(NS,KYe),e(cs,ZYe),e(E,eKe),e(E,th),e(th,Jee),e(Jee,oKe),e(th,rKe),e(th,jS),e(jS,tKe),e(th,aKe),e(E,nKe),e(E,fs),e(fs,Yee),e(Yee,sKe),e(fs,lKe),e(fs,DS),e(DS,iKe),e(fs,dKe),e(fs,GS),e(GS,cKe),e(fs,fKe),e(E,mKe),e(E,ms),e(ms,Kee),e(Kee,gKe),e(ms,hKe),e(ms,OS),e(OS,pKe),e(ms,_Ke),e(ms,VS),e(VS,uKe),e(ms,bKe),e(E,vKe),e(E,gs),e(gs,Zee),e(Zee,FKe),e(gs,TKe),e(gs,XS),e(XS,MKe),e(gs,EKe),e(gs,zS),e(zS,CKe),e(gs,wKe),e(E,AKe),e(E,hs),e(hs,eoe),e(eoe,yKe),e(hs,LKe),e(hs,QS),e(QS,xKe),e(hs,kKe),e(hs,WS),e(WS,SKe),e(hs,RKe),e(E,BKe),e(E,ps),e(ps,ooe),e(ooe,PKe),e(ps,$Ke),e(ps,HS),e(HS,IKe),e(ps,qKe),e(ps,US),e(US,NKe),e(ps,jKe),e(E,DKe),e(E,ah),e(ah,roe),e(roe,GKe),e(ah,OKe),e(ah,JS),e(JS,VKe),e(ah,XKe),e(E,zKe),e(E,_s),e(_s,toe),e(toe,QKe),e(_s,WKe),e(_s,YS),e(YS,HKe),e(_s,UKe),e(_s,KS),e(KS,JKe),e(_s,YKe),e(E,KKe),e(E,us),e(us,aoe),e(aoe,ZKe),e(us,eZe),e(us,ZS),e(ZS,oZe),e(us,rZe),e(us,eR),e(eR,tZe),e(us,aZe),e(E,nZe),e(E,bs),e(bs,noe),e(noe,sZe),e(bs,lZe),e(bs,oR),e(oR,iZe),e(bs,dZe),e(bs,rR),e(rR,cZe),e(bs,fZe),e(E,mZe),e(E,vs),e(vs,soe),e(soe,gZe),e(vs,hZe),e(vs,tR),e(tR,pZe),e(vs,_Ze),e(vs,aR),e(aR,uZe),e(vs,bZe),e(E,vZe),e(E,Fs),e(Fs,loe),e(loe,FZe),e(Fs,TZe),e(Fs,nR),e(nR,MZe),e(Fs,EZe),e(Fs,sR),e(sR,CZe),e(Fs,wZe),e(E,AZe),e(E,Ts),e(Ts,ioe),e(ioe,yZe),e(Ts,LZe),e(Ts,lR),e(lR,xZe),e(Ts,kZe),e(Ts,iR),e(iR,SZe),e(Ts,RZe),e(E,BZe),e(E,nh),e(nh,doe),e(doe,PZe),e(nh,$Ze),e(nh,dR),e(dR,IZe),e(nh,qZe),e(E,NZe),e(E,Ms),e(Ms,coe),e(coe,jZe),e(Ms,DZe),e(Ms,cR),e(cR,GZe),e(Ms,OZe),e(Ms,fR),e(fR,VZe),e(Ms,XZe),e(E,zZe),e(E,sh),e(sh,foe),e(foe,QZe),e(sh,WZe),e(sh,mR),e(mR,HZe),e(sh,UZe),e(E,JZe),e(E,lh),e(lh,moe),e(moe,YZe),e(lh,KZe),e(lh,gR),e(gR,ZZe),e(lh,eeo),e(E,oeo),e(E,Es),e(Es,goe),e(goe,reo),e(Es,teo),e(Es,hR),e(hR,aeo),e(Es,neo),e(Es,pR),e(pR,seo),e(Es,leo),e(E,ieo),e(E,Cs),e(Cs,hoe),e(hoe,deo),e(Cs,ceo),e(Cs,_R),e(_R,feo),e(Cs,meo),e(Cs,uR),e(uR,geo),e(Cs,heo),e(E,peo),e(E,ws),e(ws,poe),e(poe,_eo),e(ws,ueo),e(ws,bR),e(bR,beo),e(ws,veo),e(ws,vR),e(vR,Feo),e(ws,Teo),e(E,Meo),e(E,ih),e(ih,_oe),e(_oe,Eeo),e(ih,Ceo),e(ih,FR),e(FR,weo),e(ih,Aeo),e(E,yeo),e(E,As),e(As,uoe),e(uoe,Leo),e(As,xeo),e(As,TR),e(TR,keo),e(As,Seo),e(As,MR),e(MR,Reo),e(As,Beo),e(E,Peo),e(E,ys),e(ys,boe),e(boe,$eo),e(ys,Ieo),e(ys,ER),e(ER,qeo),e(ys,Neo),e(ys,CR),e(CR,jeo),e(ys,Deo),e(E,Geo),e(E,Ls),e(Ls,voe),e(voe,Oeo),e(Ls,Veo),e(Ls,wR),e(wR,Xeo),e(Ls,zeo),e(Ls,AR),e(AR,Qeo),e(Ls,Weo),e(E,Heo),e(E,xs),e(xs,Foe),e(Foe,Ueo),e(xs,Jeo),e(xs,yR),e(yR,Yeo),e(xs,Keo),e(xs,LR),e(LR,Zeo),e(xs,eoo),e(E,ooo),e(E,ks),e(ks,Toe),e(Toe,roo),e(ks,too),e(ks,xR),e(xR,aoo),e(ks,noo),e(ks,kR),e(kR,soo),e(ks,loo),e(E,ioo),e(E,Ss),e(Ss,Moe),e(Moe,doo),e(Ss,coo),e(Ss,SR),e(SR,foo),e(Ss,moo),e(Ss,RR),e(RR,goo),e(Ss,hoo),e(E,poo),e(E,dh),e(dh,Eoe),e(Eoe,_oo),e(dh,uoo),e(dh,BR),e(BR,boo),e(dh,voo),e(E,Foo),e(E,ch),e(ch,Coe),e(Coe,Too),e(ch,Moo),e(ch,PR),e(PR,Eoo),e(ch,Coo),e(E,woo),e(E,fh),e(fh,woe),e(woe,Aoo),e(fh,yoo),e(fh,$R),e($R,Loo),e(fh,xoo),e(E,koo),e(E,mh),e(mh,Aoe),e(Aoe,Soo),e(mh,Roo),e(mh,IR),e(IR,Boo),e(mh,Poo),e(E,$oo),e(E,Rs),e(Rs,yoe),e(yoe,Ioo),e(Rs,qoo),e(Rs,qR),e(qR,Noo),e(Rs,joo),e(Rs,NR),e(NR,Doo),e(Rs,Goo),e(E,Ooo),e(E,gh),e(gh,Loe),e(Loe,Voo),e(gh,Xoo),e(gh,jR),e(jR,zoo),e(gh,Qoo),e(E,Woo),e(E,Bs),e(Bs,xoe),e(xoe,Hoo),e(Bs,Uoo),e(Bs,DR),e(DR,Joo),e(Bs,Yoo),e(Bs,GR),e(GR,Koo),e(Bs,Zoo),e(E,ero),e(E,Ps),e(Ps,koe),e(koe,oro),e(Ps,rro),e(Ps,OR),e(OR,tro),e(Ps,aro),e(Ps,VR),e(VR,nro),e(Ps,sro),e(E,lro),e(E,$s),e($s,Soe),e(Soe,iro),e($s,dro),e($s,XR),e(XR,cro),e($s,fro),e($s,zR),e(zR,mro),e($s,gro),e(E,hro),e(E,Is),e(Is,Roe),e(Roe,pro),e(Is,_ro),e(Is,QR),e(QR,uro),e(Is,bro),e(Is,WR),e(WR,vro),e(Is,Fro),e(E,Tro),e(E,qs),e(qs,Boe),e(Boe,Mro),e(qs,Ero),e(qs,HR),e(HR,Cro),e(qs,wro),e(qs,UR),e(UR,Aro),e(qs,yro),e(E,Lro),e(E,Ns),e(Ns,Poe),e(Poe,xro),e(Ns,kro),e(Ns,JR),e(JR,Sro),e(Ns,Rro),e(Ns,YR),e(YR,Bro),e(Ns,Pro),e(E,$ro),e(E,hh),e(hh,$oe),e($oe,Iro),e(hh,qro),e(hh,KR),e(KR,Nro),e(hh,jro),e(E,Dro),e(E,ph),e(ph,Ioe),e(Ioe,Gro),e(ph,Oro),e(ph,ZR),e(ZR,Vro),e(ph,Xro),e(E,zro),e(E,js),e(js,qoe),e(qoe,Qro),e(js,Wro),e(js,eB),e(eB,Hro),e(js,Uro),e(js,oB),e(oB,Jro),e(js,Yro),e(E,Kro),e(E,Ds),e(Ds,Noe),e(Noe,Zro),e(Ds,eto),e(Ds,rB),e(rB,oto),e(Ds,rto),e(Ds,tB),e(tB,tto),e(Ds,ato),e(E,nto),e(E,Gs),e(Gs,joe),e(joe,sto),e(Gs,lto),e(Gs,aB),e(aB,ito),e(Gs,dto),e(Gs,nB),e(nB,cto),e(Gs,fto),e(E,mto),e(E,_h),e(_h,Doe),e(Doe,gto),e(_h,hto),e(_h,sB),e(sB,pto),e(_h,_to),e(E,uto),e(E,uh),e(uh,Goe),e(Goe,bto),e(uh,vto),e(uh,lB),e(lB,Fto),e(uh,Tto),e(E,Mto),e(E,bh),e(bh,Ooe),e(Ooe,Eto),e(bh,Cto),e(bh,iB),e(iB,wto),e(bh,Ato),e(E,yto),e(E,Os),e(Os,Voe),e(Voe,Lto),e(Os,xto),e(Os,dB),e(dB,kto),e(Os,Sto),e(Os,cB),e(cB,Rto),e(Os,Bto),e(E,Pto),e(E,vh),e(vh,Xoe),e(Xoe,$to),e(vh,Ito),e(vh,fB),e(fB,qto),e(vh,Nto),e(E,jto),e(E,Fh),e(Fh,zoe),e(zoe,Dto),e(Fh,Gto),e(Fh,mB),e(mB,Oto),e(Fh,Vto),e(E,Xto),e(E,Vs),e(Vs,Qoe),e(Qoe,zto),e(Vs,Qto),e(Vs,gB),e(gB,Wto),e(Vs,Hto),e(Vs,hB),e(hB,Uto),e(Vs,Jto),e(E,Yto),e(E,Th),e(Th,Woe),e(Woe,Kto),e(Th,Zto),e(Th,pB),e(pB,eao),e(Th,oao),e(E,rao),e(E,Mh),e(Mh,Hoe),e(Hoe,tao),e(Mh,aao),e(Mh,_B),e(_B,nao),e(Mh,sao),e(E,lao),e(E,Xs),e(Xs,Uoe),e(Uoe,iao),e(Xs,dao),e(Xs,uB),e(uB,cao),e(Xs,fao),e(Xs,bB),e(bB,mao),e(Xs,gao),e(E,hao),e(E,zs),e(zs,Joe),e(Joe,pao),e(zs,_ao),e(zs,vB),e(vB,uao),e(zs,bao),e(zs,FB),e(FB,vao),e(zs,Fao),e(E,Tao),e(E,Qs),e(Qs,Yoe),e(Yoe,Mao),e(Qs,Eao),e(Qs,TB),e(TB,Cao),e(Qs,wao),e(Qs,MB),e(MB,Aao),e(Qs,yao),e(E,Lao),e(E,Ws),e(Ws,Koe),e(Koe,xao),e(Ws,kao),e(Ws,EB),e(EB,Sao),e(Ws,Rao),e(Ws,CB),e(CB,Bao),e(Ws,Pao),e(ho,$ao),e(ho,Zoe),e(Zoe,Iao),e(ho,qao),g(fw,ho,null),e(Wo,Nao),e(Wo,Eh),g(mw,Eh,null),e(Eh,jao),e(Eh,ere),e(ere,Dao),b(c,_Pe,u),b(c,rd,u),e(rd,Ch),e(Ch,ore),g(gw,ore,null),e(rd,Gao),e(rd,rre),e(rre,Oao),b(c,uPe,u),b(c,Ho,u),g(hw,Ho,null),e(Ho,Vao),e(Ho,pw),e(pw,Xao),e(pw,wB),e(wB,zao),e(pw,Qao),e(Ho,Wao),e(Ho,_w),e(_w,Hao),e(_w,tre),e(tre,Uao),e(_w,Jao),e(Ho,Yao),e(Ho,Ie),g(uw,Ie,null),e(Ie,Kao),e(Ie,are),e(are,Zao),e(Ie,eno),e(Ie,Va),e(Va,ono),e(Va,nre),e(nre,rno),e(Va,tno),e(Va,sre),e(sre,ano),e(Va,nno),e(Va,lre),e(lre,sno),e(Va,lno),e(Ie,ino),e(Ie,H),e(H,wh),e(wh,ire),e(ire,dno),e(wh,cno),e(wh,AB),e(AB,fno),e(wh,mno),e(H,gno),e(H,Ah),e(Ah,dre),e(dre,hno),e(Ah,pno),e(Ah,yB),e(yB,_no),e(Ah,uno),e(H,bno),e(H,yh),e(yh,cre),e(cre,vno),e(yh,Fno),e(yh,LB),e(LB,Tno),e(yh,Mno),e(H,Eno),e(H,Lh),e(Lh,fre),e(fre,Cno),e(Lh,wno),e(Lh,xB),e(xB,Ano),e(Lh,yno),e(H,Lno),e(H,xh),e(xh,mre),e(mre,xno),e(xh,kno),e(xh,kB),e(kB,Sno),e(xh,Rno),e(H,Bno),e(H,kh),e(kh,gre),e(gre,Pno),e(kh,$no),e(kh,SB),e(SB,Ino),e(kh,qno),e(H,Nno),e(H,Sh),e(Sh,hre),e(hre,jno),e(Sh,Dno),e(Sh,RB),e(RB,Gno),e(Sh,Ono),e(H,Vno),e(H,Rh),e(Rh,pre),e(pre,Xno),e(Rh,zno),e(Rh,BB),e(BB,Qno),e(Rh,Wno),e(H,Hno),e(H,Bh),e(Bh,_re),e(_re,Uno),e(Bh,Jno),e(Bh,PB),e(PB,Yno),e(Bh,Kno),e(H,Zno),e(H,Ph),e(Ph,ure),e(ure,eso),e(Ph,oso),e(Ph,$B),e($B,rso),e(Ph,tso),e(H,aso),e(H,$h),e($h,bre),e(bre,nso),e($h,sso),e($h,IB),e(IB,lso),e($h,iso),e(H,dso),e(H,Ih),e(Ih,vre),e(vre,cso),e(Ih,fso),e(Ih,qB),e(qB,mso),e(Ih,gso),e(H,hso),e(H,qh),e(qh,Fre),e(Fre,pso),e(qh,_so),e(qh,NB),e(NB,uso),e(qh,bso),e(H,vso),e(H,Nh),e(Nh,Tre),e(Tre,Fso),e(Nh,Tso),e(Nh,jB),e(jB,Mso),e(Nh,Eso),e(H,Cso),e(H,jh),e(jh,Mre),e(Mre,wso),e(jh,Aso),e(jh,DB),e(DB,yso),e(jh,Lso),e(H,xso),e(H,Dh),e(Dh,Ere),e(Ere,kso),e(Dh,Sso),e(Dh,GB),e(GB,Rso),e(Dh,Bso),e(H,Pso),e(H,Gh),e(Gh,Cre),e(Cre,$so),e(Gh,Iso),e(Gh,OB),e(OB,qso),e(Gh,Nso),e(H,jso),e(H,Oh),e(Oh,wre),e(wre,Dso),e(Oh,Gso),e(Oh,VB),e(VB,Oso),e(Oh,Vso),e(H,Xso),e(H,Vh),e(Vh,Are),e(Are,zso),e(Vh,Qso),e(Vh,XB),e(XB,Wso),e(Vh,Hso),e(H,Uso),e(H,Xh),e(Xh,yre),e(yre,Jso),e(Xh,Yso),e(Xh,zB),e(zB,Kso),e(Xh,Zso),e(H,elo),e(H,zh),e(zh,Lre),e(Lre,olo),e(zh,rlo),e(zh,QB),e(QB,tlo),e(zh,alo),e(H,nlo),e(H,Qh),e(Qh,xre),e(xre,slo),e(Qh,llo),e(Qh,WB),e(WB,ilo),e(Qh,dlo),e(H,clo),e(H,Wh),e(Wh,kre),e(kre,flo),e(Wh,mlo),e(Wh,HB),e(HB,glo),e(Wh,hlo),e(Ie,plo),g(Hh,Ie,null),e(Ie,_lo),e(Ie,Sre),e(Sre,ulo),e(Ie,blo),g(bw,Ie,null),e(Ho,vlo),e(Ho,Uh),g(vw,Uh,null),e(Uh,Flo),e(Uh,Rre),e(Rre,Tlo),b(c,bPe,u),b(c,td,u),e(td,Jh),e(Jh,Bre),g(Fw,Bre,null),e(td,Mlo),e(td,Pre),e(Pre,Elo),b(c,vPe,u),b(c,Uo,u),g(Tw,Uo,null),e(Uo,Clo),e(Uo,Mw),e(Mw,wlo),e(Mw,UB),e(UB,Alo),e(Mw,ylo),e(Uo,Llo),e(Uo,Ew),e(Ew,xlo),e(Ew,$re),e($re,klo),e(Ew,Slo),e(Uo,Rlo),e(Uo,qe),g(Cw,qe,null),e(qe,Blo),e(qe,Ire),e(Ire,Plo),e(qe,$lo),e(qe,ad),e(ad,Ilo),e(ad,qre),e(qre,qlo),e(ad,Nlo),e(ad,Nre),e(Nre,jlo),e(ad,Dlo),e(qe,Glo),e(qe,de),e(de,Yh),e(Yh,jre),e(jre,Olo),e(Yh,Vlo),e(Yh,JB),e(JB,Xlo),e(Yh,zlo),e(de,Qlo),e(de,Kh),e(Kh,Dre),e(Dre,Wlo),e(Kh,Hlo),e(Kh,YB),e(YB,Ulo),e(Kh,Jlo),e(de,Ylo),e(de,Zh),e(Zh,Gre),e(Gre,Klo),e(Zh,Zlo),e(Zh,KB),e(KB,eio),e(Zh,oio),e(de,rio),e(de,ep),e(ep,Ore),e(Ore,tio),e(ep,aio),e(ep,ZB),e(ZB,nio),e(ep,sio),e(de,lio),e(de,op),e(op,Vre),e(Vre,iio),e(op,dio),e(op,eP),e(eP,cio),e(op,fio),e(de,mio),e(de,rp),e(rp,Xre),e(Xre,gio),e(rp,hio),e(rp,oP),e(oP,pio),e(rp,_io),e(de,uio),e(de,tp),e(tp,zre),e(zre,bio),e(tp,vio),e(tp,rP),e(rP,Fio),e(tp,Tio),e(de,Mio),e(de,ap),e(ap,Qre),e(Qre,Eio),e(ap,Cio),e(ap,tP),e(tP,wio),e(ap,Aio),e(de,yio),e(de,np),e(np,Wre),e(Wre,Lio),e(np,xio),e(np,aP),e(aP,kio),e(np,Sio),e(de,Rio),e(de,sp),e(sp,Hre),e(Hre,Bio),e(sp,Pio),e(sp,nP),e(nP,$io),e(sp,Iio),e(de,qio),e(de,lp),e(lp,Ure),e(Ure,Nio),e(lp,jio),e(lp,sP),e(sP,Dio),e(lp,Gio),e(de,Oio),e(de,ip),e(ip,Jre),e(Jre,Vio),e(ip,Xio),e(ip,lP),e(lP,zio),e(ip,Qio),e(de,Wio),e(de,dp),e(dp,Yre),e(Yre,Hio),e(dp,Uio),e(dp,iP),e(iP,Jio),e(dp,Yio),e(de,Kio),e(de,cp),e(cp,Kre),e(Kre,Zio),e(cp,edo),e(cp,dP),e(dP,odo),e(cp,rdo),e(qe,tdo),g(fp,qe,null),e(qe,ado),e(qe,Zre),e(Zre,ndo),e(qe,sdo),g(ww,qe,null),e(Uo,ldo),e(Uo,mp),g(Aw,mp,null),e(mp,ido),e(mp,ete),e(ete,ddo),b(c,FPe,u),b(c,nd,u),e(nd,gp),e(gp,ote),g(yw,ote,null),e(nd,cdo),e(nd,rte),e(rte,fdo),b(c,TPe,u),b(c,Jo,u),g(Lw,Jo,null),e(Jo,mdo),e(Jo,sd),e(sd,gdo),e(sd,cP),e(cP,hdo),e(sd,pdo),e(sd,fP),e(fP,_do),e(sd,udo),e(Jo,bdo),e(Jo,xw),e(xw,vdo),e(xw,tte),e(tte,Fdo),e(xw,Tdo),e(Jo,Mdo),e(Jo,Xr),g(kw,Xr,null),e(Xr,Edo),e(Xr,ate),e(ate,Cdo),e(Xr,wdo),e(Xr,ld),e(ld,Ado),e(ld,nte),e(nte,ydo),e(ld,Ldo),e(ld,mP),e(mP,xdo),e(ld,kdo),e(Xr,Sdo),e(Xr,ste),e(ste,Rdo),e(Xr,Bdo),g(Sw,Xr,null),e(Jo,Pdo),e(Jo,Ne),g(Rw,Ne,null),e(Ne,$do),e(Ne,lte),e(lte,Ido),e(Ne,qdo),e(Ne,Xa),e(Xa,Ndo),e(Xa,ite),e(ite,jdo),e(Xa,Ddo),e(Xa,dte),e(dte,Gdo),e(Xa,Odo),e(Xa,cte),e(cte,Vdo),e(Xa,Xdo),e(Ne,zdo),e(Ne,T),e(T,hp),e(hp,fte),e(fte,Qdo),e(hp,Wdo),e(hp,gP),e(gP,Hdo),e(hp,Udo),e(T,Jdo),e(T,pp),e(pp,mte),e(mte,Ydo),e(pp,Kdo),e(pp,hP),e(hP,Zdo),e(pp,eco),e(T,oco),e(T,_p),e(_p,gte),e(gte,rco),e(_p,tco),e(_p,pP),e(pP,aco),e(_p,nco),e(T,sco),e(T,up),e(up,hte),e(hte,lco),e(up,ico),e(up,_P),e(_P,dco),e(up,cco),e(T,fco),e(T,bp),e(bp,pte),e(pte,mco),e(bp,gco),e(bp,uP),e(uP,hco),e(bp,pco),e(T,_co),e(T,vp),e(vp,_te),e(_te,uco),e(vp,bco),e(vp,bP),e(bP,vco),e(vp,Fco),e(T,Tco),e(T,Fp),e(Fp,ute),e(ute,Mco),e(Fp,Eco),e(Fp,vP),e(vP,Cco),e(Fp,wco),e(T,Aco),e(T,Tp),e(Tp,bte),e(bte,yco),e(Tp,Lco),e(Tp,FP),e(FP,xco),e(Tp,kco),e(T,Sco),e(T,Mp),e(Mp,vte),e(vte,Rco),e(Mp,Bco),e(Mp,TP),e(TP,Pco),e(Mp,$co),e(T,Ico),e(T,Ep),e(Ep,Fte),e(Fte,qco),e(Ep,Nco),e(Ep,MP),e(MP,jco),e(Ep,Dco),e(T,Gco),e(T,Cp),e(Cp,Tte),e(Tte,Oco),e(Cp,Vco),e(Cp,EP),e(EP,Xco),e(Cp,zco),e(T,Qco),e(T,wp),e(wp,Mte),e(Mte,Wco),e(wp,Hco),e(wp,CP),e(CP,Uco),e(wp,Jco),e(T,Yco),e(T,Ap),e(Ap,Ete),e(Ete,Kco),e(Ap,Zco),e(Ap,wP),e(wP,efo),e(Ap,ofo),e(T,rfo),e(T,yp),e(yp,Cte),e(Cte,tfo),e(yp,afo),e(yp,AP),e(AP,nfo),e(yp,sfo),e(T,lfo),e(T,Lp),e(Lp,wte),e(wte,ifo),e(Lp,dfo),e(Lp,yP),e(yP,cfo),e(Lp,ffo),e(T,mfo),e(T,xp),e(xp,Ate),e(Ate,gfo),e(xp,hfo),e(xp,LP),e(LP,pfo),e(xp,_fo),e(T,ufo),e(T,kp),e(kp,yte),e(yte,bfo),e(kp,vfo),e(kp,xP),e(xP,Ffo),e(kp,Tfo),e(T,Mfo),e(T,Sp),e(Sp,Lte),e(Lte,Efo),e(Sp,Cfo),e(Sp,kP),e(kP,wfo),e(Sp,Afo),e(T,yfo),e(T,Rp),e(Rp,xte),e(xte,Lfo),e(Rp,xfo),e(Rp,SP),e(SP,kfo),e(Rp,Sfo),e(T,Rfo),e(T,Bp),e(Bp,kte),e(kte,Bfo),e(Bp,Pfo),e(Bp,RP),e(RP,$fo),e(Bp,Ifo),e(T,qfo),e(T,Pp),e(Pp,Ste),e(Ste,Nfo),e(Pp,jfo),e(Pp,BP),e(BP,Dfo),e(Pp,Gfo),e(T,Ofo),e(T,$p),e($p,Rte),e(Rte,Vfo),e($p,Xfo),e($p,PP),e(PP,zfo),e($p,Qfo),e(T,Wfo),e(T,Ip),e(Ip,Bte),e(Bte,Hfo),e(Ip,Ufo),e(Ip,$P),e($P,Jfo),e(Ip,Yfo),e(T,Kfo),e(T,qp),e(qp,Pte),e(Pte,Zfo),e(qp,emo),e(qp,IP),e(IP,omo),e(qp,rmo),e(T,tmo),e(T,Np),e(Np,$te),e($te,amo),e(Np,nmo),e(Np,qP),e(qP,smo),e(Np,lmo),e(T,imo),e(T,jp),e(jp,Ite),e(Ite,dmo),e(jp,cmo),e(jp,NP),e(NP,fmo),e(jp,mmo),e(T,gmo),e(T,Dp),e(Dp,qte),e(qte,hmo),e(Dp,pmo),e(Dp,jP),e(jP,_mo),e(Dp,umo),e(T,bmo),e(T,Gp),e(Gp,Nte),e(Nte,vmo),e(Gp,Fmo),e(Gp,DP),e(DP,Tmo),e(Gp,Mmo),e(T,Emo),e(T,Op),e(Op,jte),e(jte,Cmo),e(Op,wmo),e(Op,GP),e(GP,Amo),e(Op,ymo),e(T,Lmo),e(T,Vp),e(Vp,Dte),e(Dte,xmo),e(Vp,kmo),e(Vp,OP),e(OP,Smo),e(Vp,Rmo),e(T,Bmo),e(T,Hs),e(Hs,Gte),e(Gte,Pmo),e(Hs,$mo),e(Hs,VP),e(VP,Imo),e(Hs,qmo),e(Hs,XP),e(XP,Nmo),e(Hs,jmo),e(T,Dmo),e(T,Xp),e(Xp,Ote),e(Ote,Gmo),e(Xp,Omo),e(Xp,zP),e(zP,Vmo),e(Xp,Xmo),e(T,zmo),e(T,zp),e(zp,Vte),e(Vte,Qmo),e(zp,Wmo),e(zp,QP),e(QP,Hmo),e(zp,Umo),e(T,Jmo),e(T,Qp),e(Qp,Xte),e(Xte,Ymo),e(Qp,Kmo),e(Qp,WP),e(WP,Zmo),e(Qp,ego),e(T,ogo),e(T,Wp),e(Wp,zte),e(zte,rgo),e(Wp,tgo),e(Wp,HP),e(HP,ago),e(Wp,ngo),e(T,sgo),e(T,Hp),e(Hp,Qte),e(Qte,lgo),e(Hp,igo),e(Hp,UP),e(UP,dgo),e(Hp,cgo),e(T,fgo),e(T,Up),e(Up,Wte),e(Wte,mgo),e(Up,ggo),e(Up,JP),e(JP,hgo),e(Up,pgo),e(T,_go),e(T,Jp),e(Jp,Hte),e(Hte,ugo),e(Jp,bgo),e(Jp,YP),e(YP,vgo),e(Jp,Fgo),e(T,Tgo),e(T,Yp),e(Yp,Ute),e(Ute,Mgo),e(Yp,Ego),e(Yp,KP),e(KP,Cgo),e(Yp,wgo),e(T,Ago),e(T,Kp),e(Kp,Jte),e(Jte,ygo),e(Kp,Lgo),e(Kp,ZP),e(ZP,xgo),e(Kp,kgo),e(T,Sgo),e(T,Zp),e(Zp,Yte),e(Yte,Rgo),e(Zp,Bgo),e(Zp,e$),e(e$,Pgo),e(Zp,$go),e(T,Igo),e(T,e_),e(e_,Kte),e(Kte,qgo),e(e_,Ngo),e(e_,o$),e(o$,jgo),e(e_,Dgo),e(T,Ggo),e(T,o_),e(o_,Zte),e(Zte,Ogo),e(o_,Vgo),e(o_,r$),e(r$,Xgo),e(o_,zgo),e(T,Qgo),e(T,r_),e(r_,eae),e(eae,Wgo),e(r_,Hgo),e(r_,t$),e(t$,Ugo),e(r_,Jgo),e(T,Ygo),e(T,t_),e(t_,oae),e(oae,Kgo),e(t_,Zgo),e(t_,a$),e(a$,eho),e(t_,oho),e(T,rho),e(T,a_),e(a_,rae),e(rae,tho),e(a_,aho),e(a_,n$),e(n$,nho),e(a_,sho),e(T,lho),e(T,n_),e(n_,tae),e(tae,iho),e(n_,dho),e(n_,s$),e(s$,cho),e(n_,fho),e(T,mho),e(T,s_),e(s_,aae),e(aae,gho),e(s_,hho),e(s_,l$),e(l$,pho),e(s_,_ho),e(T,uho),e(T,l_),e(l_,nae),e(nae,bho),e(l_,vho),e(l_,i$),e(i$,Fho),e(l_,Tho),e(T,Mho),e(T,i_),e(i_,sae),e(sae,Eho),e(i_,Cho),e(i_,d$),e(d$,who),e(i_,Aho),e(T,yho),e(T,d_),e(d_,lae),e(lae,Lho),e(d_,xho),e(d_,c$),e(c$,kho),e(d_,Sho),e(T,Rho),e(T,c_),e(c_,iae),e(iae,Bho),e(c_,Pho),e(c_,f$),e(f$,$ho),e(c_,Iho),e(T,qho),e(T,f_),e(f_,dae),e(dae,Nho),e(f_,jho),e(f_,m$),e(m$,Dho),e(f_,Gho),e(T,Oho),e(T,m_),e(m_,cae),e(cae,Vho),e(m_,Xho),e(m_,g$),e(g$,zho),e(m_,Qho),e(T,Who),e(T,g_),e(g_,fae),e(fae,Hho),e(g_,Uho),e(g_,h$),e(h$,Jho),e(g_,Yho),e(T,Kho),e(T,h_),e(h_,mae),e(mae,Zho),e(h_,epo),e(h_,p$),e(p$,opo),e(h_,rpo),e(T,tpo),e(T,p_),e(p_,gae),e(gae,apo),e(p_,npo),e(p_,_$),e(_$,spo),e(p_,lpo),e(T,ipo),e(T,__),e(__,hae),e(hae,dpo),e(__,cpo),e(__,u$),e(u$,fpo),e(__,mpo),e(T,gpo),e(T,u_),e(u_,pae),e(pae,hpo),e(u_,ppo),e(u_,b$),e(b$,_po),e(u_,upo),e(T,bpo),e(T,b_),e(b_,_ae),e(_ae,vpo),e(b_,Fpo),e(b_,v$),e(v$,Tpo),e(b_,Mpo),e(T,Epo),e(T,v_),e(v_,uae),e(uae,Cpo),e(v_,wpo),e(v_,F$),e(F$,Apo),e(v_,ypo),e(T,Lpo),e(T,F_),e(F_,bae),e(bae,xpo),e(F_,kpo),e(F_,T$),e(T$,Spo),e(F_,Rpo),e(T,Bpo),e(T,T_),e(T_,vae),e(vae,Ppo),e(T_,$po),e(T_,M$),e(M$,Ipo),e(T_,qpo),e(T,Npo),e(T,M_),e(M_,Fae),e(Fae,jpo),e(M_,Dpo),e(M_,E$),e(E$,Gpo),e(M_,Opo),e(T,Vpo),e(T,E_),e(E_,Tae),e(Tae,Xpo),e(E_,zpo),e(E_,C$),e(C$,Qpo),e(E_,Wpo),e(T,Hpo),e(T,C_),e(C_,Mae),e(Mae,Upo),e(C_,Jpo),e(C_,w$),e(w$,Ypo),e(C_,Kpo),e(T,Zpo),e(T,w_),e(w_,Eae),e(Eae,e_o),e(w_,o_o),e(w_,A$),e(A$,r_o),e(w_,t_o),e(T,a_o),e(T,A_),e(A_,Cae),e(Cae,n_o),e(A_,s_o),e(A_,y$),e(y$,l_o),e(A_,i_o),e(T,d_o),e(T,y_),e(y_,wae),e(wae,c_o),e(y_,f_o),e(y_,L$),e(L$,m_o),e(y_,g_o),e(T,h_o),e(T,L_),e(L_,Aae),e(Aae,p_o),e(L_,__o),e(L_,x$),e(x$,u_o),e(L_,b_o),e(T,v_o),e(T,x_),e(x_,yae),e(yae,F_o),e(x_,T_o),e(x_,k$),e(k$,M_o),e(x_,E_o),e(T,C_o),e(T,k_),e(k_,Lae),e(Lae,w_o),e(k_,A_o),e(k_,S$),e(S$,y_o),e(k_,L_o),e(T,x_o),e(T,S_),e(S_,xae),e(xae,k_o),e(S_,S_o),e(S_,R$),e(R$,R_o),e(S_,B_o),e(T,P_o),e(T,R_),e(R_,kae),e(kae,$_o),e(R_,I_o),e(R_,B$),e(B$,q_o),e(R_,N_o),e(T,j_o),e(T,B_),e(B_,Sae),e(Sae,D_o),e(B_,G_o),e(B_,P$),e(P$,O_o),e(B_,V_o),e(T,X_o),e(T,P_),e(P_,Rae),e(Rae,z_o),e(P_,Q_o),e(P_,$$),e($$,W_o),e(P_,H_o),e(T,U_o),e(T,$_),e($_,Bae),e(Bae,J_o),e($_,Y_o),e($_,I$),e(I$,K_o),e($_,Z_o),e(T,euo),e(T,I_),e(I_,Pae),e(Pae,ouo),e(I_,ruo),e(I_,q$),e(q$,tuo),e(I_,auo),e(T,nuo),e(T,q_),e(q_,$ae),e($ae,suo),e(q_,luo),e(q_,N$),e(N$,iuo),e(q_,duo),e(T,cuo),e(T,N_),e(N_,Iae),e(Iae,fuo),e(N_,muo),e(N_,j$),e(j$,guo),e(N_,huo),e(T,puo),e(T,j_),e(j_,qae),e(qae,_uo),e(j_,uuo),e(j_,D$),e(D$,buo),e(j_,vuo),e(T,Fuo),e(T,D_),e(D_,Nae),e(Nae,Tuo),e(D_,Muo),e(D_,G$),e(G$,Euo),e(D_,Cuo),e(T,wuo),e(T,G_),e(G_,jae),e(jae,Auo),e(G_,yuo),e(G_,O$),e(O$,Luo),e(G_,xuo),e(T,kuo),e(T,O_),e(O_,Dae),e(Dae,Suo),e(O_,Ruo),e(O_,V$),e(V$,Buo),e(O_,Puo),e(T,$uo),e(T,V_),e(V_,Gae),e(Gae,Iuo),e(V_,quo),e(V_,X$),e(X$,Nuo),e(V_,juo),e(T,Duo),e(T,X_),e(X_,Oae),e(Oae,Guo),e(X_,Ouo),e(X_,z$),e(z$,Vuo),e(X_,Xuo),e(T,zuo),e(T,z_),e(z_,Vae),e(Vae,Quo),e(z_,Wuo),e(z_,Q$),e(Q$,Huo),e(z_,Uuo),e(T,Juo),e(T,Q_),e(Q_,Xae),e(Xae,Yuo),e(Q_,Kuo),e(Q_,W$),e(W$,Zuo),e(Q_,e1o),e(T,o1o),e(T,W_),e(W_,zae),e(zae,r1o),e(W_,t1o),e(W_,H$),e(H$,a1o),e(W_,n1o),e(T,s1o),e(T,H_),e(H_,Qae),e(Qae,l1o),e(H_,i1o),e(H_,U$),e(U$,d1o),e(H_,c1o),e(T,f1o),e(T,U_),e(U_,Wae),e(Wae,m1o),e(U_,g1o),e(U_,J$),e(J$,h1o),e(U_,p1o),e(T,_1o),e(T,J_),e(J_,Hae),e(Hae,u1o),e(J_,b1o),e(J_,Y$),e(Y$,v1o),e(J_,F1o),e(T,T1o),e(T,Y_),e(Y_,Uae),e(Uae,M1o),e(Y_,E1o),e(Y_,K$),e(K$,C1o),e(Y_,w1o),e(T,A1o),e(T,K_),e(K_,Jae),e(Jae,y1o),e(K_,L1o),e(K_,Z$),e(Z$,x1o),e(K_,k1o),e(Ne,S1o),e(Ne,Z_),e(Z_,R1o),e(Z_,Yae),e(Yae,B1o),e(Z_,P1o),e(Z_,Kae),e(Kae,$1o),e(Ne,I1o),e(Ne,Zae),e(Zae,q1o),e(Ne,N1o),g(Bw,Ne,null),b(c,MPe,u),b(c,id,u),e(id,eu),e(eu,ene),g(Pw,ene,null),e(id,j1o),e(id,one),e(one,D1o),b(c,EPe,u),b(c,Yo,u),g($w,Yo,null),e(Yo,G1o),e(Yo,dd),e(dd,O1o),e(dd,eI),e(eI,V1o),e(dd,X1o),e(dd,oI),e(oI,z1o),e(dd,Q1o),e(Yo,W1o),e(Yo,Iw),e(Iw,H1o),e(Iw,rne),e(rne,U1o),e(Iw,J1o),e(Yo,Y1o),e(Yo,zr),g(qw,zr,null),e(zr,K1o),e(zr,tne),e(tne,Z1o),e(zr,e4o),e(zr,cd),e(cd,o4o),e(cd,ane),e(ane,r4o),e(cd,t4o),e(cd,rI),e(rI,a4o),e(cd,n4o),e(zr,s4o),e(zr,nne),e(nne,l4o),e(zr,i4o),g(Nw,zr,null),e(Yo,d4o),e(Yo,je),g(jw,je,null),e(je,c4o),e(je,sne),e(sne,f4o),e(je,m4o),e(je,za),e(za,g4o),e(za,lne),e(lne,h4o),e(za,p4o),e(za,ine),e(ine,_4o),e(za,u4o),e(za,dne),e(dne,b4o),e(za,v4o),e(je,F4o),e(je,S),e(S,ou),e(ou,cne),e(cne,T4o),e(ou,M4o),e(ou,tI),e(tI,E4o),e(ou,C4o),e(S,w4o),e(S,ru),e(ru,fne),e(fne,A4o),e(ru,y4o),e(ru,aI),e(aI,L4o),e(ru,x4o),e(S,k4o),e(S,tu),e(tu,mne),e(mne,S4o),e(tu,R4o),e(tu,nI),e(nI,B4o),e(tu,P4o),e(S,$4o),e(S,au),e(au,gne),e(gne,I4o),e(au,q4o),e(au,sI),e(sI,N4o),e(au,j4o),e(S,D4o),e(S,nu),e(nu,hne),e(hne,G4o),e(nu,O4o),e(nu,lI),e(lI,V4o),e(nu,X4o),e(S,z4o),e(S,su),e(su,pne),e(pne,Q4o),e(su,W4o),e(su,iI),e(iI,H4o),e(su,U4o),e(S,J4o),e(S,lu),e(lu,_ne),e(_ne,Y4o),e(lu,K4o),e(lu,dI),e(dI,Z4o),e(lu,ebo),e(S,obo),e(S,iu),e(iu,une),e(une,rbo),e(iu,tbo),e(iu,cI),e(cI,abo),e(iu,nbo),e(S,sbo),e(S,du),e(du,bne),e(bne,lbo),e(du,ibo),e(du,fI),e(fI,dbo),e(du,cbo),e(S,fbo),e(S,cu),e(cu,vne),e(vne,mbo),e(cu,gbo),e(cu,mI),e(mI,hbo),e(cu,pbo),e(S,_bo),e(S,fu),e(fu,Fne),e(Fne,ubo),e(fu,bbo),e(fu,gI),e(gI,vbo),e(fu,Fbo),e(S,Tbo),e(S,mu),e(mu,Tne),e(Tne,Mbo),e(mu,Ebo),e(mu,hI),e(hI,Cbo),e(mu,wbo),e(S,Abo),e(S,gu),e(gu,Mne),e(Mne,ybo),e(gu,Lbo),e(gu,pI),e(pI,xbo),e(gu,kbo),e(S,Sbo),e(S,hu),e(hu,Ene),e(Ene,Rbo),e(hu,Bbo),e(hu,_I),e(_I,Pbo),e(hu,$bo),e(S,Ibo),e(S,pu),e(pu,Cne),e(Cne,qbo),e(pu,Nbo),e(pu,uI),e(uI,jbo),e(pu,Dbo),e(S,Gbo),e(S,_u),e(_u,wne),e(wne,Obo),e(_u,Vbo),e(_u,bI),e(bI,Xbo),e(_u,zbo),e(S,Qbo),e(S,uu),e(uu,Ane),e(Ane,Wbo),e(uu,Hbo),e(uu,vI),e(vI,Ubo),e(uu,Jbo),e(S,Ybo),e(S,bu),e(bu,yne),e(yne,Kbo),e(bu,Zbo),e(bu,FI),e(FI,e2o),e(bu,o2o),e(S,r2o),e(S,vu),e(vu,Lne),e(Lne,t2o),e(vu,a2o),e(vu,TI),e(TI,n2o),e(vu,s2o),e(S,l2o),e(S,Fu),e(Fu,xne),e(xne,i2o),e(Fu,d2o),e(Fu,MI),e(MI,c2o),e(Fu,f2o),e(S,m2o),e(S,Tu),e(Tu,kne),e(kne,g2o),e(Tu,h2o),e(Tu,EI),e(EI,p2o),e(Tu,_2o),e(S,u2o),e(S,Mu),e(Mu,Sne),e(Sne,b2o),e(Mu,v2o),e(Mu,CI),e(CI,F2o),e(Mu,T2o),e(S,M2o),e(S,Eu),e(Eu,Rne),e(Rne,E2o),e(Eu,C2o),e(Eu,wI),e(wI,w2o),e(Eu,A2o),e(S,y2o),e(S,Cu),e(Cu,Bne),e(Bne,L2o),e(Cu,x2o),e(Cu,AI),e(AI,k2o),e(Cu,S2o),e(S,R2o),e(S,wu),e(wu,Pne),e(Pne,B2o),e(wu,P2o),e(wu,yI),e(yI,$2o),e(wu,I2o),e(S,q2o),e(S,Au),e(Au,$ne),e($ne,N2o),e(Au,j2o),e(Au,LI),e(LI,D2o),e(Au,G2o),e(S,O2o),e(S,yu),e(yu,Ine),e(Ine,V2o),e(yu,X2o),e(yu,xI),e(xI,z2o),e(yu,Q2o),e(S,W2o),e(S,Lu),e(Lu,qne),e(qne,H2o),e(Lu,U2o),e(Lu,kI),e(kI,J2o),e(Lu,Y2o),e(S,K2o),e(S,xu),e(xu,Nne),e(Nne,Z2o),e(xu,e5o),e(xu,SI),e(SI,o5o),e(xu,r5o),e(S,t5o),e(S,ku),e(ku,jne),e(jne,a5o),e(ku,n5o),e(ku,RI),e(RI,s5o),e(ku,l5o),e(S,i5o),e(S,Su),e(Su,Dne),e(Dne,d5o),e(Su,c5o),e(Su,BI),e(BI,f5o),e(Su,m5o),e(S,g5o),e(S,Ru),e(Ru,Gne),e(Gne,h5o),e(Ru,p5o),e(Ru,PI),e(PI,_5o),e(Ru,u5o),e(S,b5o),e(S,Bu),e(Bu,One),e(One,v5o),e(Bu,F5o),e(Bu,$I),e($I,T5o),e(Bu,M5o),e(S,E5o),e(S,Pu),e(Pu,Vne),e(Vne,C5o),e(Pu,w5o),e(Pu,II),e(II,A5o),e(Pu,y5o),e(S,L5o),e(S,$u),e($u,Xne),e(Xne,x5o),e($u,k5o),e($u,qI),e(qI,S5o),e($u,R5o),e(S,B5o),e(S,Iu),e(Iu,zne),e(zne,P5o),e(Iu,$5o),e(Iu,NI),e(NI,I5o),e(Iu,q5o),e(S,N5o),e(S,qu),e(qu,Qne),e(Qne,j5o),e(qu,D5o),e(qu,jI),e(jI,G5o),e(qu,O5o),e(S,V5o),e(S,Nu),e(Nu,Wne),e(Wne,X5o),e(Nu,z5o),e(Nu,DI),e(DI,Q5o),e(Nu,W5o),e(S,H5o),e(S,ju),e(ju,Hne),e(Hne,U5o),e(ju,J5o),e(ju,GI),e(GI,Y5o),e(ju,K5o),e(je,Z5o),e(je,Du),e(Du,e3o),e(Du,Une),e(Une,o3o),e(Du,r3o),e(Du,Jne),e(Jne,t3o),e(je,a3o),e(je,Yne),e(Yne,n3o),e(je,s3o),g(Dw,je,null),b(c,CPe,u),b(c,fd,u),e(fd,Gu),e(Gu,Kne),g(Gw,Kne,null),e(fd,l3o),e(fd,Zne),e(Zne,i3o),b(c,wPe,u),b(c,Ko,u),g(Ow,Ko,null),e(Ko,d3o),e(Ko,md),e(md,c3o),e(md,OI),e(OI,f3o),e(md,m3o),e(md,VI),e(VI,g3o),e(md,h3o),e(Ko,p3o),e(Ko,Vw),e(Vw,_3o),e(Vw,ese),e(ese,u3o),e(Vw,b3o),e(Ko,v3o),e(Ko,Qr),g(Xw,Qr,null),e(Qr,F3o),e(Qr,ose),e(ose,T3o),e(Qr,M3o),e(Qr,gd),e(gd,E3o),e(gd,rse),e(rse,C3o),e(gd,w3o),e(gd,XI),e(XI,A3o),e(gd,y3o),e(Qr,L3o),e(Qr,tse),e(tse,x3o),e(Qr,k3o),g(zw,Qr,null),e(Ko,S3o),e(Ko,De),g(Qw,De,null),e(De,R3o),e(De,ase),e(ase,B3o),e(De,P3o),e(De,Qa),e(Qa,$3o),e(Qa,nse),e(nse,I3o),e(Qa,q3o),e(Qa,sse),e(sse,N3o),e(Qa,j3o),e(Qa,lse),e(lse,D3o),e(Qa,G3o),e(De,O3o),e(De,$),e($,Ou),e(Ou,ise),e(ise,V3o),e(Ou,X3o),e(Ou,zI),e(zI,z3o),e(Ou,Q3o),e($,W3o),e($,Vu),e(Vu,dse),e(dse,H3o),e(Vu,U3o),e(Vu,QI),e(QI,J3o),e(Vu,Y3o),e($,K3o),e($,Xu),e(Xu,cse),e(cse,Z3o),e(Xu,e6o),e(Xu,WI),e(WI,o6o),e(Xu,r6o),e($,t6o),e($,zu),e(zu,fse),e(fse,a6o),e(zu,n6o),e(zu,HI),e(HI,s6o),e(zu,l6o),e($,i6o),e($,Qu),e(Qu,mse),e(mse,d6o),e(Qu,c6o),e(Qu,UI),e(UI,f6o),e(Qu,m6o),e($,g6o),e($,Wu),e(Wu,gse),e(gse,h6o),e(Wu,p6o),e(Wu,JI),e(JI,_6o),e(Wu,u6o),e($,b6o),e($,Hu),e(Hu,hse),e(hse,v6o),e(Hu,F6o),e(Hu,YI),e(YI,T6o),e(Hu,M6o),e($,E6o),e($,Uu),e(Uu,pse),e(pse,C6o),e(Uu,w6o),e(Uu,KI),e(KI,A6o),e(Uu,y6o),e($,L6o),e($,Ju),e(Ju,_se),e(_se,x6o),e(Ju,k6o),e(Ju,ZI),e(ZI,S6o),e(Ju,R6o),e($,B6o),e($,Yu),e(Yu,use),e(use,P6o),e(Yu,$6o),e(Yu,eq),e(eq,I6o),e(Yu,q6o),e($,N6o),e($,Ku),e(Ku,bse),e(bse,j6o),e(Ku,D6o),e(Ku,oq),e(oq,G6o),e(Ku,O6o),e($,V6o),e($,Zu),e(Zu,vse),e(vse,X6o),e(Zu,z6o),e(Zu,rq),e(rq,Q6o),e(Zu,W6o),e($,H6o),e($,e1),e(e1,Fse),e(Fse,U6o),e(e1,J6o),e(e1,tq),e(tq,Y6o),e(e1,K6o),e($,Z6o),e($,o1),e(o1,Tse),e(Tse,evo),e(o1,ovo),e(o1,aq),e(aq,rvo),e(o1,tvo),e($,avo),e($,r1),e(r1,Mse),e(Mse,nvo),e(r1,svo),e(r1,nq),e(nq,lvo),e(r1,ivo),e($,dvo),e($,t1),e(t1,Ese),e(Ese,cvo),e(t1,fvo),e(t1,sq),e(sq,mvo),e(t1,gvo),e($,hvo),e($,a1),e(a1,Cse),e(Cse,pvo),e(a1,_vo),e(a1,lq),e(lq,uvo),e(a1,bvo),e($,vvo),e($,n1),e(n1,wse),e(wse,Fvo),e(n1,Tvo),e(n1,iq),e(iq,Mvo),e(n1,Evo),e($,Cvo),e($,s1),e(s1,Ase),e(Ase,wvo),e(s1,Avo),e(s1,dq),e(dq,yvo),e(s1,Lvo),e($,xvo),e($,l1),e(l1,yse),e(yse,kvo),e(l1,Svo),e(l1,cq),e(cq,Rvo),e(l1,Bvo),e($,Pvo),e($,i1),e(i1,Lse),e(Lse,$vo),e(i1,Ivo),e(i1,fq),e(fq,qvo),e(i1,Nvo),e($,jvo),e($,d1),e(d1,xse),e(xse,Dvo),e(d1,Gvo),e(d1,mq),e(mq,Ovo),e(d1,Vvo),e($,Xvo),e($,c1),e(c1,kse),e(kse,zvo),e(c1,Qvo),e(c1,gq),e(gq,Wvo),e(c1,Hvo),e($,Uvo),e($,f1),e(f1,Sse),e(Sse,Jvo),e(f1,Yvo),e(f1,hq),e(hq,Kvo),e(f1,Zvo),e($,eFo),e($,m1),e(m1,Rse),e(Rse,oFo),e(m1,rFo),e(m1,pq),e(pq,tFo),e(m1,aFo),e($,nFo),e($,g1),e(g1,Bse),e(Bse,sFo),e(g1,lFo),e(g1,_q),e(_q,iFo),e(g1,dFo),e($,cFo),e($,h1),e(h1,Pse),e(Pse,fFo),e(h1,mFo),e(h1,uq),e(uq,gFo),e(h1,hFo),e($,pFo),e($,p1),e(p1,$se),e($se,_Fo),e(p1,uFo),e(p1,bq),e(bq,bFo),e(p1,vFo),e($,FFo),e($,_1),e(_1,Ise),e(Ise,TFo),e(_1,MFo),e(_1,vq),e(vq,EFo),e(_1,CFo),e($,wFo),e($,u1),e(u1,qse),e(qse,AFo),e(u1,yFo),e(u1,Fq),e(Fq,LFo),e(u1,xFo),e($,kFo),e($,b1),e(b1,Nse),e(Nse,SFo),e(b1,RFo),e(b1,Tq),e(Tq,BFo),e(b1,PFo),e($,$Fo),e($,v1),e(v1,jse),e(jse,IFo),e(v1,qFo),e(v1,Mq),e(Mq,NFo),e(v1,jFo),e($,DFo),e($,F1),e(F1,Dse),e(Dse,GFo),e(F1,OFo),e(F1,Eq),e(Eq,VFo),e(F1,XFo),e($,zFo),e($,T1),e(T1,Gse),e(Gse,QFo),e(T1,WFo),e(T1,Cq),e(Cq,HFo),e(T1,UFo),e($,JFo),e($,M1),e(M1,Ose),e(Ose,YFo),e(M1,KFo),e(M1,wq),e(wq,ZFo),e(M1,eTo),e(De,oTo),e(De,E1),e(E1,rTo),e(E1,Vse),e(Vse,tTo),e(E1,aTo),e(E1,Xse),e(Xse,nTo),e(De,sTo),e(De,zse),e(zse,lTo),e(De,iTo),g(Ww,De,null),b(c,APe,u),b(c,hd,u),e(hd,C1),e(C1,Qse),g(Hw,Qse,null),e(hd,dTo),e(hd,Wse),e(Wse,cTo),b(c,yPe,u),b(c,Zo,u),g(Uw,Zo,null),e(Zo,fTo),e(Zo,pd),e(pd,mTo),e(pd,Aq),e(Aq,gTo),e(pd,hTo),e(pd,yq),e(yq,pTo),e(pd,_To),e(Zo,uTo),e(Zo,Jw),e(Jw,bTo),e(Jw,Hse),e(Hse,vTo),e(Jw,FTo),e(Zo,TTo),e(Zo,Wr),g(Yw,Wr,null),e(Wr,MTo),e(Wr,Use),e(Use,ETo),e(Wr,CTo),e(Wr,_d),e(_d,wTo),e(_d,Jse),e(Jse,ATo),e(_d,yTo),e(_d,Lq),e(Lq,LTo),e(_d,xTo),e(Wr,kTo),e(Wr,Yse),e(Yse,STo),e(Wr,RTo),g(Kw,Wr,null),e(Zo,BTo),e(Zo,Ge),g(Zw,Ge,null),e(Ge,PTo),e(Ge,Kse),e(Kse,$To),e(Ge,ITo),e(Ge,Wa),e(Wa,qTo),e(Wa,Zse),e(Zse,NTo),e(Wa,jTo),e(Wa,ele),e(ele,DTo),e(Wa,GTo),e(Wa,ole),e(ole,OTo),e(Wa,VTo),e(Ge,XTo),e(Ge,I),e(I,w1),e(w1,rle),e(rle,zTo),e(w1,QTo),e(w1,xq),e(xq,WTo),e(w1,HTo),e(I,UTo),e(I,A1),e(A1,tle),e(tle,JTo),e(A1,YTo),e(A1,kq),e(kq,KTo),e(A1,ZTo),e(I,eMo),e(I,y1),e(y1,ale),e(ale,oMo),e(y1,rMo),e(y1,Sq),e(Sq,tMo),e(y1,aMo),e(I,nMo),e(I,L1),e(L1,nle),e(nle,sMo),e(L1,lMo),e(L1,Rq),e(Rq,iMo),e(L1,dMo),e(I,cMo),e(I,x1),e(x1,sle),e(sle,fMo),e(x1,mMo),e(x1,Bq),e(Bq,gMo),e(x1,hMo),e(I,pMo),e(I,k1),e(k1,lle),e(lle,_Mo),e(k1,uMo),e(k1,Pq),e(Pq,bMo),e(k1,vMo),e(I,FMo),e(I,S1),e(S1,ile),e(ile,TMo),e(S1,MMo),e(S1,$q),e($q,EMo),e(S1,CMo),e(I,wMo),e(I,R1),e(R1,dle),e(dle,AMo),e(R1,yMo),e(R1,Iq),e(Iq,LMo),e(R1,xMo),e(I,kMo),e(I,B1),e(B1,cle),e(cle,SMo),e(B1,RMo),e(B1,qq),e(qq,BMo),e(B1,PMo),e(I,$Mo),e(I,P1),e(P1,fle),e(fle,IMo),e(P1,qMo),e(P1,Nq),e(Nq,NMo),e(P1,jMo),e(I,DMo),e(I,$1),e($1,mle),e(mle,GMo),e($1,OMo),e($1,jq),e(jq,VMo),e($1,XMo),e(I,zMo),e(I,I1),e(I1,gle),e(gle,QMo),e(I1,WMo),e(I1,Dq),e(Dq,HMo),e(I1,UMo),e(I,JMo),e(I,q1),e(q1,hle),e(hle,YMo),e(q1,KMo),e(q1,Gq),e(Gq,ZMo),e(q1,eEo),e(I,oEo),e(I,N1),e(N1,ple),e(ple,rEo),e(N1,tEo),e(N1,Oq),e(Oq,aEo),e(N1,nEo),e(I,sEo),e(I,j1),e(j1,_le),e(_le,lEo),e(j1,iEo),e(j1,Vq),e(Vq,dEo),e(j1,cEo),e(I,fEo),e(I,D1),e(D1,ule),e(ule,mEo),e(D1,gEo),e(D1,Xq),e(Xq,hEo),e(D1,pEo),e(I,_Eo),e(I,G1),e(G1,ble),e(ble,uEo),e(G1,bEo),e(G1,zq),e(zq,vEo),e(G1,FEo),e(I,TEo),e(I,O1),e(O1,vle),e(vle,MEo),e(O1,EEo),e(O1,Qq),e(Qq,CEo),e(O1,wEo),e(I,AEo),e(I,V1),e(V1,Fle),e(Fle,yEo),e(V1,LEo),e(V1,Wq),e(Wq,xEo),e(V1,kEo),e(I,SEo),e(I,X1),e(X1,Tle),e(Tle,REo),e(X1,BEo),e(X1,Hq),e(Hq,PEo),e(X1,$Eo),e(I,IEo),e(I,z1),e(z1,Mle),e(Mle,qEo),e(z1,NEo),e(z1,Uq),e(Uq,jEo),e(z1,DEo),e(I,GEo),e(I,Q1),e(Q1,Ele),e(Ele,OEo),e(Q1,VEo),e(Q1,Jq),e(Jq,XEo),e(Q1,zEo),e(I,QEo),e(I,W1),e(W1,Cle),e(Cle,WEo),e(W1,HEo),e(W1,Yq),e(Yq,UEo),e(W1,JEo),e(I,YEo),e(I,H1),e(H1,wle),e(wle,KEo),e(H1,ZEo),e(H1,Kq),e(Kq,eCo),e(H1,oCo),e(I,rCo),e(I,U1),e(U1,Ale),e(Ale,tCo),e(U1,aCo),e(U1,Zq),e(Zq,nCo),e(U1,sCo),e(I,lCo),e(I,J1),e(J1,yle),e(yle,iCo),e(J1,dCo),e(J1,eN),e(eN,cCo),e(J1,fCo),e(I,mCo),e(I,Y1),e(Y1,Lle),e(Lle,gCo),e(Y1,hCo),e(Y1,oN),e(oN,pCo),e(Y1,_Co),e(I,uCo),e(I,K1),e(K1,xle),e(xle,bCo),e(K1,vCo),e(K1,rN),e(rN,FCo),e(K1,TCo),e(I,MCo),e(I,Z1),e(Z1,kle),e(kle,ECo),e(Z1,CCo),e(Z1,tN),e(tN,wCo),e(Z1,ACo),e(I,yCo),e(I,e4),e(e4,Sle),e(Sle,LCo),e(e4,xCo),e(e4,aN),e(aN,kCo),e(e4,SCo),e(I,RCo),e(I,o4),e(o4,Rle),e(Rle,BCo),e(o4,PCo),e(o4,Ble),e(Ble,$Co),e(o4,ICo),e(I,qCo),e(I,r4),e(r4,Ple),e(Ple,NCo),e(r4,jCo),e(r4,nN),e(nN,DCo),e(r4,GCo),e(I,OCo),e(I,t4),e(t4,$le),e($le,VCo),e(t4,XCo),e(t4,sN),e(sN,zCo),e(t4,QCo),e(I,WCo),e(I,a4),e(a4,Ile),e(Ile,HCo),e(a4,UCo),e(a4,lN),e(lN,JCo),e(a4,YCo),e(I,KCo),e(I,n4),e(n4,qle),e(qle,ZCo),e(n4,ewo),e(n4,iN),e(iN,owo),e(n4,rwo),e(Ge,two),e(Ge,s4),e(s4,awo),e(s4,Nle),e(Nle,nwo),e(s4,swo),e(s4,jle),e(jle,lwo),e(Ge,iwo),e(Ge,Dle),e(Dle,dwo),e(Ge,cwo),g(eA,Ge,null),b(c,LPe,u),b(c,ud,u),e(ud,l4),e(l4,Gle),g(oA,Gle,null),e(ud,fwo),e(ud,Ole),e(Ole,mwo),b(c,xPe,u),b(c,er,u),g(rA,er,null),e(er,gwo),e(er,bd),e(bd,hwo),e(bd,dN),e(dN,pwo),e(bd,_wo),e(bd,cN),e(cN,uwo),e(bd,bwo),e(er,vwo),e(er,tA),e(tA,Fwo),e(tA,Vle),e(Vle,Two),e(tA,Mwo),e(er,Ewo),e(er,Hr),g(aA,Hr,null),e(Hr,Cwo),e(Hr,Xle),e(Xle,wwo),e(Hr,Awo),e(Hr,vd),e(vd,ywo),e(vd,zle),e(zle,Lwo),e(vd,xwo),e(vd,fN),e(fN,kwo),e(vd,Swo),e(Hr,Rwo),e(Hr,Qle),e(Qle,Bwo),e(Hr,Pwo),g(nA,Hr,null),e(er,$wo),e(er,Oe),g(sA,Oe,null),e(Oe,Iwo),e(Oe,Wle),e(Wle,qwo),e(Oe,Nwo),e(Oe,Ha),e(Ha,jwo),e(Ha,Hle),e(Hle,Dwo),e(Ha,Gwo),e(Ha,Ule),e(Ule,Owo),e(Ha,Vwo),e(Ha,Jle),e(Jle,Xwo),e(Ha,zwo),e(Oe,Qwo),e(Oe,ne),e(ne,i4),e(i4,Yle),e(Yle,Wwo),e(i4,Hwo),e(i4,mN),e(mN,Uwo),e(i4,Jwo),e(ne,Ywo),e(ne,d4),e(d4,Kle),e(Kle,Kwo),e(d4,Zwo),e(d4,gN),e(gN,eAo),e(d4,oAo),e(ne,rAo),e(ne,c4),e(c4,Zle),e(Zle,tAo),e(c4,aAo),e(c4,hN),e(hN,nAo),e(c4,sAo),e(ne,lAo),e(ne,f4),e(f4,eie),e(eie,iAo),e(f4,dAo),e(f4,pN),e(pN,cAo),e(f4,fAo),e(ne,mAo),e(ne,m4),e(m4,oie),e(oie,gAo),e(m4,hAo),e(m4,_N),e(_N,pAo),e(m4,_Ao),e(ne,uAo),e(ne,g4),e(g4,rie),e(rie,bAo),e(g4,vAo),e(g4,uN),e(uN,FAo),e(g4,TAo),e(ne,MAo),e(ne,h4),e(h4,tie),e(tie,EAo),e(h4,CAo),e(h4,bN),e(bN,wAo),e(h4,AAo),e(ne,yAo),e(ne,p4),e(p4,aie),e(aie,LAo),e(p4,xAo),e(p4,vN),e(vN,kAo),e(p4,SAo),e(ne,RAo),e(ne,_4),e(_4,nie),e(nie,BAo),e(_4,PAo),e(_4,FN),e(FN,$Ao),e(_4,IAo),e(ne,qAo),e(ne,u4),e(u4,sie),e(sie,NAo),e(u4,jAo),e(u4,TN),e(TN,DAo),e(u4,GAo),e(ne,OAo),e(ne,b4),e(b4,lie),e(lie,VAo),e(b4,XAo),e(b4,MN),e(MN,zAo),e(b4,QAo),e(ne,WAo),e(ne,v4),e(v4,iie),e(iie,HAo),e(v4,UAo),e(v4,EN),e(EN,JAo),e(v4,YAo),e(ne,KAo),e(ne,F4),e(F4,die),e(die,ZAo),e(F4,e0o),e(F4,CN),e(CN,o0o),e(F4,r0o),e(ne,t0o),e(ne,T4),e(T4,cie),e(cie,a0o),e(T4,n0o),e(T4,wN),e(wN,s0o),e(T4,l0o),e(ne,i0o),e(ne,M4),e(M4,fie),e(fie,d0o),e(M4,c0o),e(M4,AN),e(AN,f0o),e(M4,m0o),e(ne,g0o),e(ne,E4),e(E4,mie),e(mie,h0o),e(E4,p0o),e(E4,yN),e(yN,_0o),e(E4,u0o),e(ne,b0o),e(ne,C4),e(C4,gie),e(gie,v0o),e(C4,F0o),e(C4,LN),e(LN,T0o),e(C4,M0o),e(Oe,E0o),e(Oe,w4),e(w4,C0o),e(w4,hie),e(hie,w0o),e(w4,A0o),e(w4,pie),e(pie,y0o),e(Oe,L0o),e(Oe,_ie),e(_ie,x0o),e(Oe,k0o),g(lA,Oe,null),b(c,kPe,u),b(c,Fd,u),e(Fd,A4),e(A4,uie),g(iA,uie,null),e(Fd,S0o),e(Fd,bie),e(bie,R0o),b(c,SPe,u),b(c,or,u),g(dA,or,null),e(or,B0o),e(or,Td),e(Td,P0o),e(Td,xN),e(xN,$0o),e(Td,I0o),e(Td,kN),e(kN,q0o),e(Td,N0o),e(or,j0o),e(or,cA),e(cA,D0o),e(cA,vie),e(vie,G0o),e(cA,O0o),e(or,V0o),e(or,Ur),g(fA,Ur,null),e(Ur,X0o),e(Ur,Fie),e(Fie,z0o),e(Ur,Q0o),e(Ur,Md),e(Md,W0o),e(Md,Tie),e(Tie,H0o),e(Md,U0o),e(Md,SN),e(SN,J0o),e(Md,Y0o),e(Ur,K0o),e(Ur,Mie),e(Mie,Z0o),e(Ur,eyo),g(mA,Ur,null),e(or,oyo),e(or,Ve),g(gA,Ve,null),e(Ve,ryo),e(Ve,Eie),e(Eie,tyo),e(Ve,ayo),e(Ve,Ua),e(Ua,nyo),e(Ua,Cie),e(Cie,syo),e(Ua,lyo),e(Ua,wie),e(wie,iyo),e(Ua,dyo),e(Ua,Aie),e(Aie,cyo),e(Ua,fyo),e(Ve,myo),e(Ve,y),e(y,y4),e(y4,yie),e(yie,gyo),e(y4,hyo),e(y4,RN),e(RN,pyo),e(y4,_yo),e(y,uyo),e(y,L4),e(L4,Lie),e(Lie,byo),e(L4,vyo),e(L4,BN),e(BN,Fyo),e(L4,Tyo),e(y,Myo),e(y,x4),e(x4,xie),e(xie,Eyo),e(x4,Cyo),e(x4,PN),e(PN,wyo),e(x4,Ayo),e(y,yyo),e(y,k4),e(k4,kie),e(kie,Lyo),e(k4,xyo),e(k4,$N),e($N,kyo),e(k4,Syo),e(y,Ryo),e(y,S4),e(S4,Sie),e(Sie,Byo),e(S4,Pyo),e(S4,IN),e(IN,$yo),e(S4,Iyo),e(y,qyo),e(y,R4),e(R4,Rie),e(Rie,Nyo),e(R4,jyo),e(R4,qN),e(qN,Dyo),e(R4,Gyo),e(y,Oyo),e(y,B4),e(B4,Bie),e(Bie,Vyo),e(B4,Xyo),e(B4,NN),e(NN,zyo),e(B4,Qyo),e(y,Wyo),e(y,P4),e(P4,Pie),e(Pie,Hyo),e(P4,Uyo),e(P4,jN),e(jN,Jyo),e(P4,Yyo),e(y,Kyo),e(y,$4),e($4,$ie),e($ie,Zyo),e($4,e8o),e($4,DN),e(DN,o8o),e($4,r8o),e(y,t8o),e(y,I4),e(I4,Iie),e(Iie,a8o),e(I4,n8o),e(I4,GN),e(GN,s8o),e(I4,l8o),e(y,i8o),e(y,q4),e(q4,qie),e(qie,d8o),e(q4,c8o),e(q4,ON),e(ON,f8o),e(q4,m8o),e(y,g8o),e(y,N4),e(N4,Nie),e(Nie,h8o),e(N4,p8o),e(N4,VN),e(VN,_8o),e(N4,u8o),e(y,b8o),e(y,j4),e(j4,jie),e(jie,v8o),e(j4,F8o),e(j4,XN),e(XN,T8o),e(j4,M8o),e(y,E8o),e(y,D4),e(D4,Die),e(Die,C8o),e(D4,w8o),e(D4,zN),e(zN,A8o),e(D4,y8o),e(y,L8o),e(y,G4),e(G4,Gie),e(Gie,x8o),e(G4,k8o),e(G4,QN),e(QN,S8o),e(G4,R8o),e(y,B8o),e(y,O4),e(O4,Oie),e(Oie,P8o),e(O4,$8o),e(O4,WN),e(WN,I8o),e(O4,q8o),e(y,N8o),e(y,V4),e(V4,Vie),e(Vie,j8o),e(V4,D8o),e(V4,HN),e(HN,G8o),e(V4,O8o),e(y,V8o),e(y,X4),e(X4,Xie),e(Xie,X8o),e(X4,z8o),e(X4,UN),e(UN,Q8o),e(X4,W8o),e(y,H8o),e(y,z4),e(z4,zie),e(zie,U8o),e(z4,J8o),e(z4,JN),e(JN,Y8o),e(z4,K8o),e(y,Z8o),e(y,Q4),e(Q4,Qie),e(Qie,eLo),e(Q4,oLo),e(Q4,YN),e(YN,rLo),e(Q4,tLo),e(y,aLo),e(y,W4),e(W4,Wie),e(Wie,nLo),e(W4,sLo),e(W4,KN),e(KN,lLo),e(W4,iLo),e(y,dLo),e(y,H4),e(H4,Hie),e(Hie,cLo),e(H4,fLo),e(H4,ZN),e(ZN,mLo),e(H4,gLo),e(y,hLo),e(y,U4),e(U4,Uie),e(Uie,pLo),e(U4,_Lo),e(U4,ej),e(ej,uLo),e(U4,bLo),e(y,vLo),e(y,J4),e(J4,Jie),e(Jie,FLo),e(J4,TLo),e(J4,oj),e(oj,MLo),e(J4,ELo),e(y,CLo),e(y,Y4),e(Y4,Yie),e(Yie,wLo),e(Y4,ALo),e(Y4,rj),e(rj,yLo),e(Y4,LLo),e(y,xLo),e(y,K4),e(K4,Kie),e(Kie,kLo),e(K4,SLo),e(K4,tj),e(tj,RLo),e(K4,BLo),e(y,PLo),e(y,Z4),e(Z4,Zie),e(Zie,$Lo),e(Z4,ILo),e(Z4,aj),e(aj,qLo),e(Z4,NLo),e(y,jLo),e(y,eb),e(eb,ede),e(ede,DLo),e(eb,GLo),e(eb,nj),e(nj,OLo),e(eb,VLo),e(y,XLo),e(y,ob),e(ob,ode),e(ode,zLo),e(ob,QLo),e(ob,sj),e(sj,WLo),e(ob,HLo),e(y,ULo),e(y,rb),e(rb,rde),e(rde,JLo),e(rb,YLo),e(rb,lj),e(lj,KLo),e(rb,ZLo),e(y,e7o),e(y,tb),e(tb,tde),e(tde,o7o),e(tb,r7o),e(tb,ij),e(ij,t7o),e(tb,a7o),e(y,n7o),e(y,ab),e(ab,ade),e(ade,s7o),e(ab,l7o),e(ab,dj),e(dj,i7o),e(ab,d7o),e(y,c7o),e(y,nb),e(nb,nde),e(nde,f7o),e(nb,m7o),e(nb,cj),e(cj,g7o),e(nb,h7o),e(y,p7o),e(y,sb),e(sb,sde),e(sde,_7o),e(sb,u7o),e(sb,fj),e(fj,b7o),e(sb,v7o),e(y,F7o),e(y,lb),e(lb,lde),e(lde,T7o),e(lb,M7o),e(lb,mj),e(mj,E7o),e(lb,C7o),e(y,w7o),e(y,ib),e(ib,ide),e(ide,A7o),e(ib,y7o),e(ib,gj),e(gj,L7o),e(ib,x7o),e(y,k7o),e(y,db),e(db,dde),e(dde,S7o),e(db,R7o),e(db,hj),e(hj,B7o),e(db,P7o),e(y,$7o),e(y,cb),e(cb,cde),e(cde,I7o),e(cb,q7o),e(cb,pj),e(pj,N7o),e(cb,j7o),e(y,D7o),e(y,fb),e(fb,fde),e(fde,G7o),e(fb,O7o),e(fb,_j),e(_j,V7o),e(fb,X7o),e(y,z7o),e(y,mb),e(mb,mde),e(mde,Q7o),e(mb,W7o),e(mb,uj),e(uj,H7o),e(mb,U7o),e(y,J7o),e(y,gb),e(gb,gde),e(gde,Y7o),e(gb,K7o),e(gb,bj),e(bj,Z7o),e(gb,e9o),e(y,o9o),e(y,hb),e(hb,hde),e(hde,r9o),e(hb,t9o),e(hb,vj),e(vj,a9o),e(hb,n9o),e(y,s9o),e(y,pb),e(pb,pde),e(pde,l9o),e(pb,i9o),e(pb,Fj),e(Fj,d9o),e(pb,c9o),e(y,f9o),e(y,_b),e(_b,_de),e(_de,m9o),e(_b,g9o),e(_b,Tj),e(Tj,h9o),e(_b,p9o),e(y,_9o),e(y,ub),e(ub,ude),e(ude,u9o),e(ub,b9o),e(ub,Mj),e(Mj,v9o),e(ub,F9o),e(y,T9o),e(y,bb),e(bb,bde),e(bde,M9o),e(bb,E9o),e(bb,Ej),e(Ej,C9o),e(bb,w9o),e(y,A9o),e(y,vb),e(vb,vde),e(vde,y9o),e(vb,L9o),e(vb,Cj),e(Cj,x9o),e(vb,k9o),e(Ve,S9o),e(Ve,Fb),e(Fb,R9o),e(Fb,Fde),e(Fde,B9o),e(Fb,P9o),e(Fb,Tde),e(Tde,$9o),e(Ve,I9o),e(Ve,Mde),e(Mde,q9o),e(Ve,N9o),g(hA,Ve,null),b(c,RPe,u),b(c,Ed,u),e(Ed,Tb),e(Tb,Ede),g(pA,Ede,null),e(Ed,j9o),e(Ed,Cde),e(Cde,D9o),b(c,BPe,u),b(c,rr,u),g(_A,rr,null),e(rr,G9o),e(rr,Cd),e(Cd,O9o),e(Cd,wj),e(wj,V9o),e(Cd,X9o),e(Cd,Aj),e(Aj,z9o),e(Cd,Q9o),e(rr,W9o),e(rr,uA),e(uA,H9o),e(uA,wde),e(wde,U9o),e(uA,J9o),e(rr,Y9o),e(rr,Jr),g(bA,Jr,null),e(Jr,K9o),e(Jr,Ade),e(Ade,Z9o),e(Jr,exo),e(Jr,wd),e(wd,oxo),e(wd,yde),e(yde,rxo),e(wd,txo),e(wd,yj),e(yj,axo),e(wd,nxo),e(Jr,sxo),e(Jr,Lde),e(Lde,lxo),e(Jr,ixo),g(vA,Jr,null),e(rr,dxo),e(rr,Xe),g(FA,Xe,null),e(Xe,cxo),e(Xe,xde),e(xde,fxo),e(Xe,mxo),e(Xe,Ja),e(Ja,gxo),e(Ja,kde),e(kde,hxo),e(Ja,pxo),e(Ja,Sde),e(Sde,_xo),e(Ja,uxo),e(Ja,Rde),e(Rde,bxo),e(Ja,vxo),e(Xe,Fxo),e(Xe,G),e(G,Mb),e(Mb,Bde),e(Bde,Txo),e(Mb,Mxo),e(Mb,Lj),e(Lj,Exo),e(Mb,Cxo),e(G,wxo),e(G,Eb),e(Eb,Pde),e(Pde,Axo),e(Eb,yxo),e(Eb,xj),e(xj,Lxo),e(Eb,xxo),e(G,kxo),e(G,Cb),e(Cb,$de),e($de,Sxo),e(Cb,Rxo),e(Cb,kj),e(kj,Bxo),e(Cb,Pxo),e(G,$xo),e(G,wb),e(wb,Ide),e(Ide,Ixo),e(wb,qxo),e(wb,Sj),e(Sj,Nxo),e(wb,jxo),e(G,Dxo),e(G,Ab),e(Ab,qde),e(qde,Gxo),e(Ab,Oxo),e(Ab,Rj),e(Rj,Vxo),e(Ab,Xxo),e(G,zxo),e(G,yb),e(yb,Nde),e(Nde,Qxo),e(yb,Wxo),e(yb,Bj),e(Bj,Hxo),e(yb,Uxo),e(G,Jxo),e(G,Lb),e(Lb,jde),e(jde,Yxo),e(Lb,Kxo),e(Lb,Pj),e(Pj,Zxo),e(Lb,eko),e(G,oko),e(G,xb),e(xb,Dde),e(Dde,rko),e(xb,tko),e(xb,$j),e($j,ako),e(xb,nko),e(G,sko),e(G,kb),e(kb,Gde),e(Gde,lko),e(kb,iko),e(kb,Ij),e(Ij,dko),e(kb,cko),e(G,fko),e(G,Sb),e(Sb,Ode),e(Ode,mko),e(Sb,gko),e(Sb,qj),e(qj,hko),e(Sb,pko),e(G,_ko),e(G,Rb),e(Rb,Vde),e(Vde,uko),e(Rb,bko),e(Rb,Nj),e(Nj,vko),e(Rb,Fko),e(G,Tko),e(G,Bb),e(Bb,Xde),e(Xde,Mko),e(Bb,Eko),e(Bb,jj),e(jj,Cko),e(Bb,wko),e(G,Ako),e(G,Pb),e(Pb,zde),e(zde,yko),e(Pb,Lko),e(Pb,Dj),e(Dj,xko),e(Pb,kko),e(G,Sko),e(G,$b),e($b,Qde),e(Qde,Rko),e($b,Bko),e($b,Gj),e(Gj,Pko),e($b,$ko),e(G,Iko),e(G,Ib),e(Ib,Wde),e(Wde,qko),e(Ib,Nko),e(Ib,Oj),e(Oj,jko),e(Ib,Dko),e(G,Gko),e(G,qb),e(qb,Hde),e(Hde,Oko),e(qb,Vko),e(qb,Vj),e(Vj,Xko),e(qb,zko),e(G,Qko),e(G,Nb),e(Nb,Ude),e(Ude,Wko),e(Nb,Hko),e(Nb,Xj),e(Xj,Uko),e(Nb,Jko),e(G,Yko),e(G,jb),e(jb,Jde),e(Jde,Kko),e(jb,Zko),e(jb,zj),e(zj,eSo),e(jb,oSo),e(G,rSo),e(G,Db),e(Db,Yde),e(Yde,tSo),e(Db,aSo),e(Db,Qj),e(Qj,nSo),e(Db,sSo),e(G,lSo),e(G,Gb),e(Gb,Kde),e(Kde,iSo),e(Gb,dSo),e(Gb,Wj),e(Wj,cSo),e(Gb,fSo),e(G,mSo),e(G,Ob),e(Ob,Zde),e(Zde,gSo),e(Ob,hSo),e(Ob,Hj),e(Hj,pSo),e(Ob,_So),e(G,uSo),e(G,Vb),e(Vb,ece),e(ece,bSo),e(Vb,vSo),e(Vb,Uj),e(Uj,FSo),e(Vb,TSo),e(G,MSo),e(G,Xb),e(Xb,oce),e(oce,ESo),e(Xb,CSo),e(Xb,Jj),e(Jj,wSo),e(Xb,ASo),e(G,ySo),e(G,zb),e(zb,rce),e(rce,LSo),e(zb,xSo),e(zb,Yj),e(Yj,kSo),e(zb,SSo),e(G,RSo),e(G,Qb),e(Qb,tce),e(tce,BSo),e(Qb,PSo),e(Qb,Kj),e(Kj,$So),e(Qb,ISo),e(G,qSo),e(G,Wb),e(Wb,ace),e(ace,NSo),e(Wb,jSo),e(Wb,Zj),e(Zj,DSo),e(Wb,GSo),e(G,OSo),e(G,Hb),e(Hb,nce),e(nce,VSo),e(Hb,XSo),e(Hb,eD),e(eD,zSo),e(Hb,QSo),e(G,WSo),e(G,Ub),e(Ub,sce),e(sce,HSo),e(Ub,USo),e(Ub,oD),e(oD,JSo),e(Ub,YSo),e(Xe,KSo),e(Xe,Jb),e(Jb,ZSo),e(Jb,lce),e(lce,eRo),e(Jb,oRo),e(Jb,ice),e(ice,rRo),e(Xe,tRo),e(Xe,dce),e(dce,aRo),e(Xe,nRo),g(TA,Xe,null),b(c,PPe,u),b(c,Ad,u),e(Ad,Yb),e(Yb,cce),g(MA,cce,null),e(Ad,sRo),e(Ad,fce),e(fce,lRo),b(c,$Pe,u),b(c,tr,u),g(EA,tr,null),e(tr,iRo),e(tr,yd),e(yd,dRo),e(yd,rD),e(rD,cRo),e(yd,fRo),e(yd,tD),e(tD,mRo),e(yd,gRo),e(tr,hRo),e(tr,CA),e(CA,pRo),e(CA,mce),e(mce,_Ro),e(CA,uRo),e(tr,bRo),e(tr,Yr),g(wA,Yr,null),e(Yr,vRo),e(Yr,gce),e(gce,FRo),e(Yr,TRo),e(Yr,Ld),e(Ld,MRo),e(Ld,hce),e(hce,ERo),e(Ld,CRo),e(Ld,aD),e(aD,wRo),e(Ld,ARo),e(Yr,yRo),e(Yr,pce),e(pce,LRo),e(Yr,xRo),g(AA,Yr,null),e(tr,kRo),e(tr,ze),g(yA,ze,null),e(ze,SRo),e(ze,_ce),e(_ce,RRo),e(ze,BRo),e(ze,Ya),e(Ya,PRo),e(Ya,uce),e(uce,$Ro),e(Ya,IRo),e(Ya,bce),e(bce,qRo),e(Ya,NRo),e(Ya,vce),e(vce,jRo),e(Ya,DRo),e(ze,GRo),e(ze,da),e(da,Kb),e(Kb,Fce),e(Fce,ORo),e(Kb,VRo),e(Kb,nD),e(nD,XRo),e(Kb,zRo),e(da,QRo),e(da,Zb),e(Zb,Tce),e(Tce,WRo),e(Zb,HRo),e(Zb,sD),e(sD,URo),e(Zb,JRo),e(da,YRo),e(da,e2),e(e2,Mce),e(Mce,KRo),e(e2,ZRo),e(e2,lD),e(lD,eBo),e(e2,oBo),e(da,rBo),e(da,o2),e(o2,Ece),e(Ece,tBo),e(o2,aBo),e(o2,iD),e(iD,nBo),e(o2,sBo),e(da,lBo),e(da,r2),e(r2,Cce),e(Cce,iBo),e(r2,dBo),e(r2,dD),e(dD,cBo),e(r2,fBo),e(ze,mBo),e(ze,t2),e(t2,gBo),e(t2,wce),e(wce,hBo),e(t2,pBo),e(t2,Ace),e(Ace,_Bo),e(ze,uBo),e(ze,yce),e(yce,bBo),e(ze,vBo),g(LA,ze,null),b(c,IPe,u),b(c,xd,u),e(xd,a2),e(a2,Lce),g(xA,Lce,null),e(xd,FBo),e(xd,xce),e(xce,TBo),b(c,qPe,u),b(c,ar,u),g(kA,ar,null),e(ar,MBo),e(ar,kd),e(kd,EBo),e(kd,cD),e(cD,CBo),e(kd,wBo),e(kd,fD),e(fD,ABo),e(kd,yBo),e(ar,LBo),e(ar,SA),e(SA,xBo),e(SA,kce),e(kce,kBo),e(SA,SBo),e(ar,RBo),e(ar,Kr),g(RA,Kr,null),e(Kr,BBo),e(Kr,Sce),e(Sce,PBo),e(Kr,$Bo),e(Kr,Sd),e(Sd,IBo),e(Sd,Rce),e(Rce,qBo),e(Sd,NBo),e(Sd,mD),e(mD,jBo),e(Sd,DBo),e(Kr,GBo),e(Kr,Bce),e(Bce,OBo),e(Kr,VBo),g(BA,Kr,null),e(ar,XBo),e(ar,Qe),g(PA,Qe,null),e(Qe,zBo),e(Qe,Pce),e(Pce,QBo),e(Qe,WBo),e(Qe,Ka),e(Ka,HBo),e(Ka,$ce),e($ce,UBo),e(Ka,JBo),e(Ka,Ice),e(Ice,YBo),e(Ka,KBo),e(Ka,qce),e(qce,ZBo),e(Ka,ePo),e(Qe,oPo),e(Qe,j),e(j,n2),e(n2,Nce),e(Nce,rPo),e(n2,tPo),e(n2,gD),e(gD,aPo),e(n2,nPo),e(j,sPo),e(j,s2),e(s2,jce),e(jce,lPo),e(s2,iPo),e(s2,hD),e(hD,dPo),e(s2,cPo),e(j,fPo),e(j,l2),e(l2,Dce),e(Dce,mPo),e(l2,gPo),e(l2,pD),e(pD,hPo),e(l2,pPo),e(j,_Po),e(j,i2),e(i2,Gce),e(Gce,uPo),e(i2,bPo),e(i2,_D),e(_D,vPo),e(i2,FPo),e(j,TPo),e(j,d2),e(d2,Oce),e(Oce,MPo),e(d2,EPo),e(d2,uD),e(uD,CPo),e(d2,wPo),e(j,APo),e(j,c2),e(c2,Vce),e(Vce,yPo),e(c2,LPo),e(c2,bD),e(bD,xPo),e(c2,kPo),e(j,SPo),e(j,f2),e(f2,Xce),e(Xce,RPo),e(f2,BPo),e(f2,vD),e(vD,PPo),e(f2,$Po),e(j,IPo),e(j,m2),e(m2,zce),e(zce,qPo),e(m2,NPo),e(m2,FD),e(FD,jPo),e(m2,DPo),e(j,GPo),e(j,g2),e(g2,Qce),e(Qce,OPo),e(g2,VPo),e(g2,TD),e(TD,XPo),e(g2,zPo),e(j,QPo),e(j,h2),e(h2,Wce),e(Wce,WPo),e(h2,HPo),e(h2,MD),e(MD,UPo),e(h2,JPo),e(j,YPo),e(j,p2),e(p2,Hce),e(Hce,KPo),e(p2,ZPo),e(p2,ED),e(ED,e$o),e(p2,o$o),e(j,r$o),e(j,_2),e(_2,Uce),e(Uce,t$o),e(_2,a$o),e(_2,CD),e(CD,n$o),e(_2,s$o),e(j,l$o),e(j,u2),e(u2,Jce),e(Jce,i$o),e(u2,d$o),e(u2,wD),e(wD,c$o),e(u2,f$o),e(j,m$o),e(j,b2),e(b2,Yce),e(Yce,g$o),e(b2,h$o),e(b2,AD),e(AD,p$o),e(b2,_$o),e(j,u$o),e(j,v2),e(v2,Kce),e(Kce,b$o),e(v2,v$o),e(v2,yD),e(yD,F$o),e(v2,T$o),e(j,M$o),e(j,F2),e(F2,Zce),e(Zce,E$o),e(F2,C$o),e(F2,LD),e(LD,w$o),e(F2,A$o),e(j,y$o),e(j,T2),e(T2,efe),e(efe,L$o),e(T2,x$o),e(T2,xD),e(xD,k$o),e(T2,S$o),e(j,R$o),e(j,M2),e(M2,ofe),e(ofe,B$o),e(M2,P$o),e(M2,kD),e(kD,$$o),e(M2,I$o),e(j,q$o),e(j,E2),e(E2,rfe),e(rfe,N$o),e(E2,j$o),e(E2,SD),e(SD,D$o),e(E2,G$o),e(j,O$o),e(j,C2),e(C2,tfe),e(tfe,V$o),e(C2,X$o),e(C2,RD),e(RD,z$o),e(C2,Q$o),e(j,W$o),e(j,w2),e(w2,afe),e(afe,H$o),e(w2,U$o),e(w2,BD),e(BD,J$o),e(w2,Y$o),e(j,K$o),e(j,A2),e(A2,nfe),e(nfe,Z$o),e(A2,eIo),e(A2,PD),e(PD,oIo),e(A2,rIo),e(j,tIo),e(j,y2),e(y2,sfe),e(sfe,aIo),e(y2,nIo),e(y2,$D),e($D,sIo),e(y2,lIo),e(j,iIo),e(j,L2),e(L2,lfe),e(lfe,dIo),e(L2,cIo),e(L2,ID),e(ID,fIo),e(L2,mIo),e(j,gIo),e(j,x2),e(x2,ife),e(ife,hIo),e(x2,pIo),e(x2,qD),e(qD,_Io),e(x2,uIo),e(j,bIo),e(j,k2),e(k2,dfe),e(dfe,vIo),e(k2,FIo),e(k2,ND),e(ND,TIo),e(k2,MIo),e(j,EIo),e(j,S2),e(S2,cfe),e(cfe,CIo),e(S2,wIo),e(S2,jD),e(jD,AIo),e(S2,yIo),e(j,LIo),e(j,R2),e(R2,ffe),e(ffe,xIo),e(R2,kIo),e(R2,DD),e(DD,SIo),e(R2,RIo),e(j,BIo),e(j,B2),e(B2,mfe),e(mfe,PIo),e(B2,$Io),e(B2,GD),e(GD,IIo),e(B2,qIo),e(j,NIo),e(j,P2),e(P2,gfe),e(gfe,jIo),e(P2,DIo),e(P2,OD),e(OD,GIo),e(P2,OIo),e(j,VIo),e(j,$2),e($2,hfe),e(hfe,XIo),e($2,zIo),e($2,VD),e(VD,QIo),e($2,WIo),e(j,HIo),e(j,I2),e(I2,pfe),e(pfe,UIo),e(I2,JIo),e(I2,XD),e(XD,YIo),e(I2,KIo),e(j,ZIo),e(j,q2),e(q2,_fe),e(_fe,eqo),e(q2,oqo),e(q2,zD),e(zD,rqo),e(q2,tqo),e(Qe,aqo),e(Qe,N2),e(N2,nqo),e(N2,ufe),e(ufe,sqo),e(N2,lqo),e(N2,bfe),e(bfe,iqo),e(Qe,dqo),e(Qe,vfe),e(vfe,cqo),e(Qe,fqo),g($A,Qe,null),b(c,NPe,u),b(c,Rd,u),e(Rd,j2),e(j2,Ffe),g(IA,Ffe,null),e(Rd,mqo),e(Rd,Tfe),e(Tfe,gqo),b(c,jPe,u),b(c,nr,u),g(qA,nr,null),e(nr,hqo),e(nr,Bd),e(Bd,pqo),e(Bd,QD),e(QD,_qo),e(Bd,uqo),e(Bd,WD),e(WD,bqo),e(Bd,vqo),e(nr,Fqo),e(nr,NA),e(NA,Tqo),e(NA,Mfe),e(Mfe,Mqo),e(NA,Eqo),e(nr,Cqo),e(nr,Zr),g(jA,Zr,null),e(Zr,wqo),e(Zr,Efe),e(Efe,Aqo),e(Zr,yqo),e(Zr,Pd),e(Pd,Lqo),e(Pd,Cfe),e(Cfe,xqo),e(Pd,kqo),e(Pd,HD),e(HD,Sqo),e(Pd,Rqo),e(Zr,Bqo),e(Zr,wfe),e(wfe,Pqo),e(Zr,$qo),g(DA,Zr,null),e(nr,Iqo),e(nr,We),g(GA,We,null),e(We,qqo),e(We,Afe),e(Afe,Nqo),e(We,jqo),e(We,Za),e(Za,Dqo),e(Za,yfe),e(yfe,Gqo),e(Za,Oqo),e(Za,Lfe),e(Lfe,Vqo),e(Za,Xqo),e(Za,xfe),e(xfe,zqo),e(Za,Qqo),e(We,Wqo),e(We,R),e(R,D2),e(D2,kfe),e(kfe,Hqo),e(D2,Uqo),e(D2,UD),e(UD,Jqo),e(D2,Yqo),e(R,Kqo),e(R,G2),e(G2,Sfe),e(Sfe,Zqo),e(G2,eNo),e(G2,JD),e(JD,oNo),e(G2,rNo),e(R,tNo),e(R,O2),e(O2,Rfe),e(Rfe,aNo),e(O2,nNo),e(O2,YD),e(YD,sNo),e(O2,lNo),e(R,iNo),e(R,V2),e(V2,Bfe),e(Bfe,dNo),e(V2,cNo),e(V2,KD),e(KD,fNo),e(V2,mNo),e(R,gNo),e(R,X2),e(X2,Pfe),e(Pfe,hNo),e(X2,pNo),e(X2,ZD),e(ZD,_No),e(X2,uNo),e(R,bNo),e(R,z2),e(z2,$fe),e($fe,vNo),e(z2,FNo),e(z2,eG),e(eG,TNo),e(z2,MNo),e(R,ENo),e(R,Q2),e(Q2,Ife),e(Ife,CNo),e(Q2,wNo),e(Q2,oG),e(oG,ANo),e(Q2,yNo),e(R,LNo),e(R,W2),e(W2,qfe),e(qfe,xNo),e(W2,kNo),e(W2,rG),e(rG,SNo),e(W2,RNo),e(R,BNo),e(R,H2),e(H2,Nfe),e(Nfe,PNo),e(H2,$No),e(H2,tG),e(tG,INo),e(H2,qNo),e(R,NNo),e(R,U2),e(U2,jfe),e(jfe,jNo),e(U2,DNo),e(U2,aG),e(aG,GNo),e(U2,ONo),e(R,VNo),e(R,J2),e(J2,Dfe),e(Dfe,XNo),e(J2,zNo),e(J2,nG),e(nG,QNo),e(J2,WNo),e(R,HNo),e(R,Y2),e(Y2,Gfe),e(Gfe,UNo),e(Y2,JNo),e(Y2,sG),e(sG,YNo),e(Y2,KNo),e(R,ZNo),e(R,K2),e(K2,Ofe),e(Ofe,ejo),e(K2,ojo),e(K2,lG),e(lG,rjo),e(K2,tjo),e(R,ajo),e(R,Z2),e(Z2,Vfe),e(Vfe,njo),e(Z2,sjo),e(Z2,iG),e(iG,ljo),e(Z2,ijo),e(R,djo),e(R,e5),e(e5,Xfe),e(Xfe,cjo),e(e5,fjo),e(e5,dG),e(dG,mjo),e(e5,gjo),e(R,hjo),e(R,o5),e(o5,zfe),e(zfe,pjo),e(o5,_jo),e(o5,cG),e(cG,ujo),e(o5,bjo),e(R,vjo),e(R,r5),e(r5,Qfe),e(Qfe,Fjo),e(r5,Tjo),e(r5,fG),e(fG,Mjo),e(r5,Ejo),e(R,Cjo),e(R,t5),e(t5,Wfe),e(Wfe,wjo),e(t5,Ajo),e(t5,mG),e(mG,yjo),e(t5,Ljo),e(R,xjo),e(R,a5),e(a5,Hfe),e(Hfe,kjo),e(a5,Sjo),e(a5,gG),e(gG,Rjo),e(a5,Bjo),e(R,Pjo),e(R,n5),e(n5,Ufe),e(Ufe,$jo),e(n5,Ijo),e(n5,hG),e(hG,qjo),e(n5,Njo),e(R,jjo),e(R,s5),e(s5,Jfe),e(Jfe,Djo),e(s5,Gjo),e(s5,pG),e(pG,Ojo),e(s5,Vjo),e(R,Xjo),e(R,l5),e(l5,Yfe),e(Yfe,zjo),e(l5,Qjo),e(l5,_G),e(_G,Wjo),e(l5,Hjo),e(R,Ujo),e(R,i5),e(i5,Kfe),e(Kfe,Jjo),e(i5,Yjo),e(i5,uG),e(uG,Kjo),e(i5,Zjo),e(R,eDo),e(R,d5),e(d5,Zfe),e(Zfe,oDo),e(d5,rDo),e(d5,bG),e(bG,tDo),e(d5,aDo),e(R,nDo),e(R,c5),e(c5,eme),e(eme,sDo),e(c5,lDo),e(c5,vG),e(vG,iDo),e(c5,dDo),e(R,cDo),e(R,f5),e(f5,ome),e(ome,fDo),e(f5,mDo),e(f5,FG),e(FG,gDo),e(f5,hDo),e(R,pDo),e(R,m5),e(m5,rme),e(rme,_Do),e(m5,uDo),e(m5,TG),e(TG,bDo),e(m5,vDo),e(R,FDo),e(R,g5),e(g5,tme),e(tme,TDo),e(g5,MDo),e(g5,MG),e(MG,EDo),e(g5,CDo),e(R,wDo),e(R,h5),e(h5,ame),e(ame,ADo),e(h5,yDo),e(h5,EG),e(EG,LDo),e(h5,xDo),e(R,kDo),e(R,p5),e(p5,nme),e(nme,SDo),e(p5,RDo),e(p5,CG),e(CG,BDo),e(p5,PDo),e(R,$Do),e(R,_5),e(_5,sme),e(sme,IDo),e(_5,qDo),e(_5,wG),e(wG,NDo),e(_5,jDo),e(R,DDo),e(R,u5),e(u5,lme),e(lme,GDo),e(u5,ODo),e(u5,AG),e(AG,VDo),e(u5,XDo),e(R,zDo),e(R,b5),e(b5,ime),e(ime,QDo),e(b5,WDo),e(b5,yG),e(yG,HDo),e(b5,UDo),e(R,JDo),e(R,v5),e(v5,dme),e(dme,YDo),e(v5,KDo),e(v5,LG),e(LG,ZDo),e(v5,eGo),e(R,oGo),e(R,F5),e(F5,cme),e(cme,rGo),e(F5,tGo),e(F5,xG),e(xG,aGo),e(F5,nGo),e(R,sGo),e(R,T5),e(T5,fme),e(fme,lGo),e(T5,iGo),e(T5,kG),e(kG,dGo),e(T5,cGo),e(R,fGo),e(R,M5),e(M5,mme),e(mme,mGo),e(M5,gGo),e(M5,SG),e(SG,hGo),e(M5,pGo),e(R,_Go),e(R,E5),e(E5,gme),e(gme,uGo),e(E5,bGo),e(E5,RG),e(RG,vGo),e(E5,FGo),e(R,TGo),e(R,C5),e(C5,hme),e(hme,MGo),e(C5,EGo),e(C5,BG),e(BG,CGo),e(C5,wGo),e(We,AGo),e(We,w5),e(w5,yGo),e(w5,pme),e(pme,LGo),e(w5,xGo),e(w5,_me),e(_me,kGo),e(We,SGo),e(We,ume),e(ume,RGo),e(We,BGo),g(OA,We,null),b(c,DPe,u),b(c,$d,u),e($d,A5),e(A5,bme),g(VA,bme,null),e($d,PGo),e($d,vme),e(vme,$Go),b(c,GPe,u),b(c,sr,u),g(XA,sr,null),e(sr,IGo),e(sr,Id),e(Id,qGo),e(Id,PG),e(PG,NGo),e(Id,jGo),e(Id,$G),e($G,DGo),e(Id,GGo),e(sr,OGo),e(sr,zA),e(zA,VGo),e(zA,Fme),e(Fme,XGo),e(zA,zGo),e(sr,QGo),e(sr,et),g(QA,et,null),e(et,WGo),e(et,Tme),e(Tme,HGo),e(et,UGo),e(et,qd),e(qd,JGo),e(qd,Mme),e(Mme,YGo),e(qd,KGo),e(qd,IG),e(IG,ZGo),e(qd,eOo),e(et,oOo),e(et,Eme),e(Eme,rOo),e(et,tOo),g(WA,et,null),e(sr,aOo),e(sr,He),g(HA,He,null),e(He,nOo),e(He,Cme),e(Cme,sOo),e(He,lOo),e(He,en),e(en,iOo),e(en,wme),e(wme,dOo),e(en,cOo),e(en,Ame),e(Ame,fOo),e(en,mOo),e(en,yme),e(yme,gOo),e(en,hOo),e(He,pOo),e(He,Lme),e(Lme,y5),e(y5,xme),e(xme,_Oo),e(y5,uOo),e(y5,qG),e(qG,bOo),e(y5,vOo),e(He,FOo),e(He,L5),e(L5,TOo),e(L5,kme),e(kme,MOo),e(L5,EOo),e(L5,Sme),e(Sme,COo),e(He,wOo),e(He,Rme),e(Rme,AOo),e(He,yOo),g(UA,He,null),b(c,OPe,u),b(c,Nd,u),e(Nd,x5),e(x5,Bme),g(JA,Bme,null),e(Nd,LOo),e(Nd,Pme),e(Pme,xOo),b(c,VPe,u),b(c,lr,u),g(YA,lr,null),e(lr,kOo),e(lr,jd),e(jd,SOo),e(jd,NG),e(NG,ROo),e(jd,BOo),e(jd,jG),e(jG,POo),e(jd,$Oo),e(lr,IOo),e(lr,KA),e(KA,qOo),e(KA,$me),e($me,NOo),e(KA,jOo),e(lr,DOo),e(lr,ot),g(ZA,ot,null),e(ot,GOo),e(ot,Ime),e(Ime,OOo),e(ot,VOo),e(ot,Dd),e(Dd,XOo),e(Dd,qme),e(qme,zOo),e(Dd,QOo),e(Dd,DG),e(DG,WOo),e(Dd,HOo),e(ot,UOo),e(ot,Nme),e(Nme,JOo),e(ot,YOo),g(e0,ot,null),e(lr,KOo),e(lr,Ue),g(o0,Ue,null),e(Ue,ZOo),e(Ue,jme),e(jme,eVo),e(Ue,oVo),e(Ue,on),e(on,rVo),e(on,Dme),e(Dme,tVo),e(on,aVo),e(on,Gme),e(Gme,nVo),e(on,sVo),e(on,Ome),e(Ome,lVo),e(on,iVo),e(Ue,dVo),e(Ue,ce),e(ce,k5),e(k5,Vme),e(Vme,cVo),e(k5,fVo),e(k5,GG),e(GG,mVo),e(k5,gVo),e(ce,hVo),e(ce,S5),e(S5,Xme),e(Xme,pVo),e(S5,_Vo),e(S5,OG),e(OG,uVo),e(S5,bVo),e(ce,vVo),e(ce,R5),e(R5,zme),e(zme,FVo),e(R5,TVo),e(R5,VG),e(VG,MVo),e(R5,EVo),e(ce,CVo),e(ce,Us),e(Us,Qme),e(Qme,wVo),e(Us,AVo),e(Us,XG),e(XG,yVo),e(Us,LVo),e(Us,zG),e(zG,xVo),e(Us,kVo),e(ce,SVo),e(ce,B5),e(B5,Wme),e(Wme,RVo),e(B5,BVo),e(B5,QG),e(QG,PVo),e(B5,$Vo),e(ce,IVo),e(ce,ma),e(ma,Hme),e(Hme,qVo),e(ma,NVo),e(ma,WG),e(WG,jVo),e(ma,DVo),e(ma,HG),e(HG,GVo),e(ma,OVo),e(ma,UG),e(UG,VVo),e(ma,XVo),e(ce,zVo),e(ce,P5),e(P5,Ume),e(Ume,QVo),e(P5,WVo),e(P5,JG),e(JG,HVo),e(P5,UVo),e(ce,JVo),e(ce,$5),e($5,Jme),e(Jme,YVo),e($5,KVo),e($5,YG),e(YG,ZVo),e($5,eXo),e(ce,oXo),e(ce,I5),e(I5,Yme),e(Yme,rXo),e(I5,tXo),e(I5,KG),e(KG,aXo),e(I5,nXo),e(ce,sXo),e(ce,q5),e(q5,Kme),e(Kme,lXo),e(q5,iXo),e(q5,ZG),e(ZG,dXo),e(q5,cXo),e(ce,fXo),e(ce,N5),e(N5,Zme),e(Zme,mXo),e(N5,gXo),e(N5,eO),e(eO,hXo),e(N5,pXo),e(ce,_Xo),e(ce,j5),e(j5,ege),e(ege,uXo),e(j5,bXo),e(j5,oO),e(oO,vXo),e(j5,FXo),e(ce,TXo),e(ce,D5),e(D5,oge),e(oge,MXo),e(D5,EXo),e(D5,rO),e(rO,CXo),e(D5,wXo),e(Ue,AXo),e(Ue,G5),e(G5,yXo),e(G5,rge),e(rge,LXo),e(G5,xXo),e(G5,tge),e(tge,kXo),e(Ue,SXo),e(Ue,age),e(age,RXo),e(Ue,BXo),g(r0,Ue,null),b(c,XPe,u),b(c,Gd,u),e(Gd,O5),e(O5,nge),g(t0,nge,null),e(Gd,PXo),e(Gd,sge),e(sge,$Xo),b(c,zPe,u),b(c,ir,u),g(a0,ir,null),e(ir,IXo),e(ir,Od),e(Od,qXo),e(Od,tO),e(tO,NXo),e(Od,jXo),e(Od,aO),e(aO,DXo),e(Od,GXo),e(ir,OXo),e(ir,n0),e(n0,VXo),e(n0,lge),e(lge,XXo),e(n0,zXo),e(ir,QXo),e(ir,rt),g(s0,rt,null),e(rt,WXo),e(rt,ige),e(ige,HXo),e(rt,UXo),e(rt,Vd),e(Vd,JXo),e(Vd,dge),e(dge,YXo),e(Vd,KXo),e(Vd,nO),e(nO,ZXo),e(Vd,ezo),e(rt,ozo),e(rt,cge),e(cge,rzo),e(rt,tzo),g(l0,rt,null),e(ir,azo),e(ir,Je),g(i0,Je,null),e(Je,nzo),e(Je,fge),e(fge,szo),e(Je,lzo),e(Je,rn),e(rn,izo),e(rn,mge),e(mge,dzo),e(rn,czo),e(rn,gge),e(gge,fzo),e(rn,mzo),e(rn,hge),e(hge,gzo),e(rn,hzo),e(Je,pzo),e(Je,pge),e(pge,V5),e(V5,_ge),e(_ge,_zo),e(V5,uzo),e(V5,sO),e(sO,bzo),e(V5,vzo),e(Je,Fzo),e(Je,X5),e(X5,Tzo),e(X5,uge),e(uge,Mzo),e(X5,Ezo),e(X5,bge),e(bge,Czo),e(Je,wzo),e(Je,vge),e(vge,Azo),e(Je,yzo),g(d0,Je,null),b(c,QPe,u),b(c,Xd,u),e(Xd,z5),e(z5,Fge),g(c0,Fge,null),e(Xd,Lzo),e(Xd,Tge),e(Tge,xzo),b(c,WPe,u),b(c,dr,u),g(f0,dr,null),e(dr,kzo),e(dr,zd),e(zd,Szo),e(zd,lO),e(lO,Rzo),e(zd,Bzo),e(zd,iO),e(iO,Pzo),e(zd,$zo),e(dr,Izo),e(dr,m0),e(m0,qzo),e(m0,Mge),e(Mge,Nzo),e(m0,jzo),e(dr,Dzo),e(dr,tt),g(g0,tt,null),e(tt,Gzo),e(tt,Ege),e(Ege,Ozo),e(tt,Vzo),e(tt,Qd),e(Qd,Xzo),e(Qd,Cge),e(Cge,zzo),e(Qd,Qzo),e(Qd,dO),e(dO,Wzo),e(Qd,Hzo),e(tt,Uzo),e(tt,wge),e(wge,Jzo),e(tt,Yzo),g(h0,tt,null),e(dr,Kzo),e(dr,Ye),g(p0,Ye,null),e(Ye,Zzo),e(Ye,Age),e(Age,eQo),e(Ye,oQo),e(Ye,tn),e(tn,rQo),e(tn,yge),e(yge,tQo),e(tn,aQo),e(tn,Lge),e(Lge,nQo),e(tn,sQo),e(tn,xge),e(xge,lQo),e(tn,iQo),e(Ye,dQo),e(Ye,Re),e(Re,Q5),e(Q5,kge),e(kge,cQo),e(Q5,fQo),e(Q5,cO),e(cO,mQo),e(Q5,gQo),e(Re,hQo),e(Re,W5),e(W5,Sge),e(Sge,pQo),e(W5,_Qo),e(W5,fO),e(fO,uQo),e(W5,bQo),e(Re,vQo),e(Re,H5),e(H5,Rge),e(Rge,FQo),e(H5,TQo),e(H5,mO),e(mO,MQo),e(H5,EQo),e(Re,CQo),e(Re,U5),e(U5,Bge),e(Bge,wQo),e(U5,AQo),e(U5,gO),e(gO,yQo),e(U5,LQo),e(Re,xQo),e(Re,J5),e(J5,Pge),e(Pge,kQo),e(J5,SQo),e(J5,hO),e(hO,RQo),e(J5,BQo),e(Re,PQo),e(Re,Y5),e(Y5,$ge),e($ge,$Qo),e(Y5,IQo),e(Y5,pO),e(pO,qQo),e(Y5,NQo),e(Re,jQo),e(Re,K5),e(K5,Ige),e(Ige,DQo),e(K5,GQo),e(K5,_O),e(_O,OQo),e(K5,VQo),e(Re,XQo),e(Re,Z5),e(Z5,qge),e(qge,zQo),e(Z5,QQo),e(Z5,uO),e(uO,WQo),e(Z5,HQo),e(Ye,UQo),e(Ye,e3),e(e3,JQo),e(e3,Nge),e(Nge,YQo),e(e3,KQo),e(e3,jge),e(jge,ZQo),e(Ye,eWo),e(Ye,Dge),e(Dge,oWo),e(Ye,rWo),g(_0,Ye,null),b(c,HPe,u),b(c,Wd,u),e(Wd,o3),e(o3,Gge),g(u0,Gge,null),e(Wd,tWo),e(Wd,Oge),e(Oge,aWo),b(c,UPe,u),b(c,cr,u),g(b0,cr,null),e(cr,nWo),e(cr,Hd),e(Hd,sWo),e(Hd,bO),e(bO,lWo),e(Hd,iWo),e(Hd,vO),e(vO,dWo),e(Hd,cWo),e(cr,fWo),e(cr,v0),e(v0,mWo),e(v0,Vge),e(Vge,gWo),e(v0,hWo),e(cr,pWo),e(cr,at),g(F0,at,null),e(at,_Wo),e(at,Xge),e(Xge,uWo),e(at,bWo),e(at,Ud),e(Ud,vWo),e(Ud,zge),e(zge,FWo),e(Ud,TWo),e(Ud,FO),e(FO,MWo),e(Ud,EWo),e(at,CWo),e(at,Qge),e(Qge,wWo),e(at,AWo),g(T0,at,null),e(cr,yWo),e(cr,Ke),g(M0,Ke,null),e(Ke,LWo),e(Ke,Wge),e(Wge,xWo),e(Ke,kWo),e(Ke,an),e(an,SWo),e(an,Hge),e(Hge,RWo),e(an,BWo),e(an,Uge),e(Uge,PWo),e(an,$Wo),e(an,Jge),e(Jge,IWo),e(an,qWo),e(Ke,NWo),e(Ke,nn),e(nn,r3),e(r3,Yge),e(Yge,jWo),e(r3,DWo),e(r3,TO),e(TO,GWo),e(r3,OWo),e(nn,VWo),e(nn,t3),e(t3,Kge),e(Kge,XWo),e(t3,zWo),e(t3,MO),e(MO,QWo),e(t3,WWo),e(nn,HWo),e(nn,a3),e(a3,Zge),e(Zge,UWo),e(a3,JWo),e(a3,EO),e(EO,YWo),e(a3,KWo),e(nn,ZWo),e(nn,n3),e(n3,ehe),e(ehe,eHo),e(n3,oHo),e(n3,CO),e(CO,rHo),e(n3,tHo),e(Ke,aHo),e(Ke,s3),e(s3,nHo),e(s3,ohe),e(ohe,sHo),e(s3,lHo),e(s3,rhe),e(rhe,iHo),e(Ke,dHo),e(Ke,the),e(the,cHo),e(Ke,fHo),g(E0,Ke,null),b(c,JPe,u),b(c,Jd,u),e(Jd,l3),e(l3,ahe),g(C0,ahe,null),e(Jd,mHo),e(Jd,nhe),e(nhe,gHo),b(c,YPe,u),b(c,fr,u),g(w0,fr,null),e(fr,hHo),e(fr,Yd),e(Yd,pHo),e(Yd,wO),e(wO,_Ho),e(Yd,uHo),e(Yd,AO),e(AO,bHo),e(Yd,vHo),e(fr,FHo),e(fr,A0),e(A0,THo),e(A0,she),e(she,MHo),e(A0,EHo),e(fr,CHo),e(fr,nt),g(y0,nt,null),e(nt,wHo),e(nt,lhe),e(lhe,AHo),e(nt,yHo),e(nt,Kd),e(Kd,LHo),e(Kd,ihe),e(ihe,xHo),e(Kd,kHo),e(Kd,yO),e(yO,SHo),e(Kd,RHo),e(nt,BHo),e(nt,dhe),e(dhe,PHo),e(nt,$Ho),g(L0,nt,null),e(fr,IHo),e(fr,Ze),g(x0,Ze,null),e(Ze,qHo),e(Ze,che),e(che,NHo),e(Ze,jHo),e(Ze,sn),e(sn,DHo),e(sn,fhe),e(fhe,GHo),e(sn,OHo),e(sn,mhe),e(mhe,VHo),e(sn,XHo),e(sn,ghe),e(ghe,zHo),e(sn,QHo),e(Ze,WHo),e(Ze,Be),e(Be,i3),e(i3,hhe),e(hhe,HHo),e(i3,UHo),e(i3,LO),e(LO,JHo),e(i3,YHo),e(Be,KHo),e(Be,d3),e(d3,phe),e(phe,ZHo),e(d3,eUo),e(d3,xO),e(xO,oUo),e(d3,rUo),e(Be,tUo),e(Be,c3),e(c3,_he),e(_he,aUo),e(c3,nUo),e(c3,kO),e(kO,sUo),e(c3,lUo),e(Be,iUo),e(Be,f3),e(f3,uhe),e(uhe,dUo),e(f3,cUo),e(f3,SO),e(SO,fUo),e(f3,mUo),e(Be,gUo),e(Be,m3),e(m3,bhe),e(bhe,hUo),e(m3,pUo),e(m3,RO),e(RO,_Uo),e(m3,uUo),e(Be,bUo),e(Be,g3),e(g3,vhe),e(vhe,vUo),e(g3,FUo),e(g3,BO),e(BO,TUo),e(g3,MUo),e(Be,EUo),e(Be,h3),e(h3,Fhe),e(Fhe,CUo),e(h3,wUo),e(h3,PO),e(PO,AUo),e(h3,yUo),e(Be,LUo),e(Be,p3),e(p3,The),e(The,xUo),e(p3,kUo),e(p3,$O),e($O,SUo),e(p3,RUo),e(Ze,BUo),e(Ze,_3),e(_3,PUo),e(_3,Mhe),e(Mhe,$Uo),e(_3,IUo),e(_3,Ehe),e(Ehe,qUo),e(Ze,NUo),e(Ze,Che),e(Che,jUo),e(Ze,DUo),g(k0,Ze,null),b(c,KPe,u),b(c,Zd,u),e(Zd,u3),e(u3,whe),g(S0,whe,null),e(Zd,GUo),e(Zd,Ahe),e(Ahe,OUo),b(c,ZPe,u),b(c,mr,u),g(R0,mr,null),e(mr,VUo),e(mr,ec),e(ec,XUo),e(ec,IO),e(IO,zUo),e(ec,QUo),e(ec,qO),e(qO,WUo),e(ec,HUo),e(mr,UUo),e(mr,B0),e(B0,JUo),e(B0,yhe),e(yhe,YUo),e(B0,KUo),e(mr,ZUo),e(mr,st),g(P0,st,null),e(st,eJo),e(st,Lhe),e(Lhe,oJo),e(st,rJo),e(st,oc),e(oc,tJo),e(oc,xhe),e(xhe,aJo),e(oc,nJo),e(oc,NO),e(NO,sJo),e(oc,lJo),e(st,iJo),e(st,khe),e(khe,dJo),e(st,cJo),g($0,st,null),e(mr,fJo),e(mr,eo),g(I0,eo,null),e(eo,mJo),e(eo,She),e(She,gJo),e(eo,hJo),e(eo,ln),e(ln,pJo),e(ln,Rhe),e(Rhe,_Jo),e(ln,uJo),e(ln,Bhe),e(Bhe,bJo),e(ln,vJo),e(ln,Phe),e(Phe,FJo),e(ln,TJo),e(eo,MJo),e(eo,q0),e(q0,b3),e(b3,$he),e($he,EJo),e(b3,CJo),e(b3,jO),e(jO,wJo),e(b3,AJo),e(q0,yJo),e(q0,v3),e(v3,Ihe),e(Ihe,LJo),e(v3,xJo),e(v3,DO),e(DO,kJo),e(v3,SJo),e(eo,RJo),e(eo,F3),e(F3,BJo),e(F3,qhe),e(qhe,PJo),e(F3,$Jo),e(F3,Nhe),e(Nhe,IJo),e(eo,qJo),e(eo,jhe),e(jhe,NJo),e(eo,jJo),g(N0,eo,null),b(c,e$e,u),b(c,rc,u),e(rc,T3),e(T3,Dhe),g(j0,Dhe,null),e(rc,DJo),e(rc,Ghe),e(Ghe,GJo),b(c,o$e,u),b(c,gr,u),g(D0,gr,null),e(gr,OJo),e(gr,tc),e(tc,VJo),e(tc,GO),e(GO,XJo),e(tc,zJo),e(tc,OO),e(OO,QJo),e(tc,WJo),e(gr,HJo),e(gr,G0),e(G0,UJo),e(G0,Ohe),e(Ohe,JJo),e(G0,YJo),e(gr,KJo),e(gr,lt),g(O0,lt,null),e(lt,ZJo),e(lt,Vhe),e(Vhe,eYo),e(lt,oYo),e(lt,ac),e(ac,rYo),e(ac,Xhe),e(Xhe,tYo),e(ac,aYo),e(ac,VO),e(VO,nYo),e(ac,sYo),e(lt,lYo),e(lt,zhe),e(zhe,iYo),e(lt,dYo),g(V0,lt,null),e(gr,cYo),e(gr,oo),g(X0,oo,null),e(oo,fYo),e(oo,Qhe),e(Qhe,mYo),e(oo,gYo),e(oo,dn),e(dn,hYo),e(dn,Whe),e(Whe,pYo),e(dn,_Yo),e(dn,Hhe),e(Hhe,uYo),e(dn,bYo),e(dn,Uhe),e(Uhe,vYo),e(dn,FYo),e(oo,TYo),e(oo,cn),e(cn,M3),e(M3,Jhe),e(Jhe,MYo),e(M3,EYo),e(M3,XO),e(XO,CYo),e(M3,wYo),e(cn,AYo),e(cn,E3),e(E3,Yhe),e(Yhe,yYo),e(E3,LYo),e(E3,zO),e(zO,xYo),e(E3,kYo),e(cn,SYo),e(cn,C3),e(C3,Khe),e(Khe,RYo),e(C3,BYo),e(C3,QO),e(QO,PYo),e(C3,$Yo),e(cn,IYo),e(cn,w3),e(w3,Zhe),e(Zhe,qYo),e(w3,NYo),e(w3,WO),e(WO,jYo),e(w3,DYo),e(oo,GYo),e(oo,A3),e(A3,OYo),e(A3,epe),e(epe,VYo),e(A3,XYo),e(A3,ope),e(ope,zYo),e(oo,QYo),e(oo,rpe),e(rpe,WYo),e(oo,HYo),g(z0,oo,null),b(c,r$e,u),b(c,nc,u),e(nc,y3),e(y3,tpe),g(Q0,tpe,null),e(nc,UYo),e(nc,ape),e(ape,JYo),b(c,t$e,u),b(c,hr,u),g(W0,hr,null),e(hr,YYo),e(hr,sc),e(sc,KYo),e(sc,HO),e(HO,ZYo),e(sc,eKo),e(sc,UO),e(UO,oKo),e(sc,rKo),e(hr,tKo),e(hr,H0),e(H0,aKo),e(H0,npe),e(npe,nKo),e(H0,sKo),e(hr,lKo),e(hr,it),g(U0,it,null),e(it,iKo),e(it,spe),e(spe,dKo),e(it,cKo),e(it,lc),e(lc,fKo),e(lc,lpe),e(lpe,mKo),e(lc,gKo),e(lc,JO),e(JO,hKo),e(lc,pKo),e(it,_Ko),e(it,ipe),e(ipe,uKo),e(it,bKo),g(J0,it,null),e(hr,vKo),e(hr,ro),g(Y0,ro,null),e(ro,FKo),e(ro,dpe),e(dpe,TKo),e(ro,MKo),e(ro,fn),e(fn,EKo),e(fn,cpe),e(cpe,CKo),e(fn,wKo),e(fn,fpe),e(fpe,AKo),e(fn,yKo),e(fn,mpe),e(mpe,LKo),e(fn,xKo),e(ro,kKo),e(ro,ic),e(ic,L3),e(L3,gpe),e(gpe,SKo),e(L3,RKo),e(L3,YO),e(YO,BKo),e(L3,PKo),e(ic,$Ko),e(ic,x3),e(x3,hpe),e(hpe,IKo),e(x3,qKo),e(x3,KO),e(KO,NKo),e(x3,jKo),e(ic,DKo),e(ic,k3),e(k3,ppe),e(ppe,GKo),e(k3,OKo),e(k3,ZO),e(ZO,VKo),e(k3,XKo),e(ro,zKo),e(ro,S3),e(S3,QKo),e(S3,_pe),e(_pe,WKo),e(S3,HKo),e(S3,upe),e(upe,UKo),e(ro,JKo),e(ro,bpe),e(bpe,YKo),e(ro,KKo),g(K0,ro,null),b(c,a$e,u),b(c,dc,u),e(dc,R3),e(R3,vpe),g(Z0,vpe,null),e(dc,ZKo),e(dc,Fpe),e(Fpe,eZo),b(c,n$e,u),b(c,pr,u),g(ey,pr,null),e(pr,oZo),e(pr,cc),e(cc,rZo),e(cc,eV),e(eV,tZo),e(cc,aZo),e(cc,oV),e(oV,nZo),e(cc,sZo),e(pr,lZo),e(pr,oy),e(oy,iZo),e(oy,Tpe),e(Tpe,dZo),e(oy,cZo),e(pr,fZo),e(pr,dt),g(ry,dt,null),e(dt,mZo),e(dt,Mpe),e(Mpe,gZo),e(dt,hZo),e(dt,fc),e(fc,pZo),e(fc,Epe),e(Epe,_Zo),e(fc,uZo),e(fc,rV),e(rV,bZo),e(fc,vZo),e(dt,FZo),e(dt,Cpe),e(Cpe,TZo),e(dt,MZo),g(ty,dt,null),e(pr,EZo),e(pr,to),g(ay,to,null),e(to,CZo),e(to,wpe),e(wpe,wZo),e(to,AZo),e(to,mn),e(mn,yZo),e(mn,Ape),e(Ape,LZo),e(mn,xZo),e(mn,ype),e(ype,kZo),e(mn,SZo),e(mn,Lpe),e(Lpe,RZo),e(mn,BZo),e(to,PZo),e(to,xpe),e(xpe,B3),e(B3,kpe),e(kpe,$Zo),e(B3,IZo),e(B3,tV),e(tV,qZo),e(B3,NZo),e(to,jZo),e(to,P3),e(P3,DZo),e(P3,Spe),e(Spe,GZo),e(P3,OZo),e(P3,Rpe),e(Rpe,VZo),e(to,XZo),e(to,Bpe),e(Bpe,zZo),e(to,QZo),g(ny,to,null),b(c,s$e,u),b(c,mc,u),e(mc,$3),e($3,Ppe),g(sy,Ppe,null),e(mc,WZo),e(mc,$pe),e($pe,HZo),b(c,l$e,u),b(c,_r,u),g(ly,_r,null),e(_r,UZo),e(_r,gc),e(gc,JZo),e(gc,aV),e(aV,YZo),e(gc,KZo),e(gc,nV),e(nV,ZZo),e(gc,eer),e(_r,oer),e(_r,iy),e(iy,rer),e(iy,Ipe),e(Ipe,ter),e(iy,aer),e(_r,ner),e(_r,ct),g(dy,ct,null),e(ct,ser),e(ct,qpe),e(qpe,ler),e(ct,ier),e(ct,hc),e(hc,der),e(hc,Npe),e(Npe,cer),e(hc,fer),e(hc,sV),e(sV,mer),e(hc,ger),e(ct,her),e(ct,jpe),e(jpe,per),e(ct,_er),g(cy,ct,null),e(_r,uer),e(_r,ao),g(fy,ao,null),e(ao,ber),e(ao,Dpe),e(Dpe,ver),e(ao,Fer),e(ao,gn),e(gn,Ter),e(gn,Gpe),e(Gpe,Mer),e(gn,Eer),e(gn,Ope),e(Ope,Cer),e(gn,wer),e(gn,Vpe),e(Vpe,Aer),e(gn,yer),e(ao,Ler),e(ao,Xpe),e(Xpe,I3),e(I3,zpe),e(zpe,xer),e(I3,ker),e(I3,lV),e(lV,Ser),e(I3,Rer),e(ao,Ber),e(ao,q3),e(q3,Per),e(q3,Qpe),e(Qpe,$er),e(q3,Ier),e(q3,Wpe),e(Wpe,qer),e(ao,Ner),e(ao,Hpe),e(Hpe,jer),e(ao,Der),g(my,ao,null),b(c,i$e,u),b(c,pc,u),e(pc,N3),e(N3,Upe),g(gy,Upe,null),e(pc,Ger),e(pc,Jpe),e(Jpe,Oer),b(c,d$e,u),b(c,ur,u),g(hy,ur,null),e(ur,Ver),e(ur,_c),e(_c,Xer),e(_c,iV),e(iV,zer),e(_c,Qer),e(_c,dV),e(dV,Wer),e(_c,Her),e(ur,Uer),e(ur,py),e(py,Jer),e(py,Ype),e(Ype,Yer),e(py,Ker),e(ur,Zer),e(ur,ft),g(_y,ft,null),e(ft,eor),e(ft,Kpe),e(Kpe,oor),e(ft,ror),e(ft,uc),e(uc,tor),e(uc,Zpe),e(Zpe,aor),e(uc,nor),e(uc,cV),e(cV,sor),e(uc,lor),e(ft,ior),e(ft,e_e),e(e_e,dor),e(ft,cor),g(uy,ft,null),e(ur,mor),e(ur,no),g(by,no,null),e(no,gor),e(no,o_e),e(o_e,hor),e(no,por),e(no,hn),e(hn,_or),e(hn,r_e),e(r_e,uor),e(hn,bor),e(hn,t_e),e(t_e,vor),e(hn,For),e(hn,a_e),e(a_e,Tor),e(hn,Mor),e(no,Eor),e(no,pn),e(pn,j3),e(j3,n_e),e(n_e,Cor),e(j3,wor),e(j3,fV),e(fV,Aor),e(j3,yor),e(pn,Lor),e(pn,D3),e(D3,s_e),e(s_e,xor),e(D3,kor),e(D3,mV),e(mV,Sor),e(D3,Ror),e(pn,Bor),e(pn,G3),e(G3,l_e),e(l_e,Por),e(G3,$or),e(G3,gV),e(gV,Ior),e(G3,qor),e(pn,Nor),e(pn,O3),e(O3,i_e),e(i_e,jor),e(O3,Dor),e(O3,hV),e(hV,Gor),e(O3,Oor),e(no,Vor),e(no,V3),e(V3,Xor),e(V3,d_e),e(d_e,zor),e(V3,Qor),e(V3,c_e),e(c_e,Wor),e(no,Hor),e(no,f_e),e(f_e,Uor),e(no,Jor),g(vy,no,null),b(c,c$e,u),b(c,bc,u),e(bc,X3),e(X3,m_e),g(Fy,m_e,null),e(bc,Yor),e(bc,g_e),e(g_e,Kor),b(c,f$e,u),b(c,br,u),g(Ty,br,null),e(br,Zor),e(br,vc),e(vc,err),e(vc,pV),e(pV,orr),e(vc,rrr),e(vc,_V),e(_V,trr),e(vc,arr),e(br,nrr),e(br,My),e(My,srr),e(My,h_e),e(h_e,lrr),e(My,irr),e(br,drr),e(br,mt),g(Ey,mt,null),e(mt,crr),e(mt,p_e),e(p_e,frr),e(mt,mrr),e(mt,Fc),e(Fc,grr),e(Fc,__e),e(__e,hrr),e(Fc,prr),e(Fc,uV),e(uV,_rr),e(Fc,urr),e(mt,brr),e(mt,u_e),e(u_e,vrr),e(mt,Frr),g(Cy,mt,null),e(br,Trr),e(br,so),g(wy,so,null),e(so,Mrr),e(so,b_e),e(b_e,Err),e(so,Crr),e(so,_n),e(_n,wrr),e(_n,v_e),e(v_e,Arr),e(_n,yrr),e(_n,F_e),e(F_e,Lrr),e(_n,xrr),e(_n,T_e),e(T_e,krr),e(_n,Srr),e(so,Rrr),e(so,M_e),e(M_e,z3),e(z3,E_e),e(E_e,Brr),e(z3,Prr),e(z3,bV),e(bV,$rr),e(z3,Irr),e(so,qrr),e(so,Q3),e(Q3,Nrr),e(Q3,C_e),e(C_e,jrr),e(Q3,Drr),e(Q3,w_e),e(w_e,Grr),e(so,Orr),e(so,A_e),e(A_e,Vrr),e(so,Xrr),g(Ay,so,null),b(c,m$e,u),b(c,Tc,u),e(Tc,W3),e(W3,y_e),g(yy,y_e,null),e(Tc,zrr),e(Tc,L_e),e(L_e,Qrr),b(c,g$e,u),b(c,vr,u),g(Ly,vr,null),e(vr,Wrr),e(vr,Mc),e(Mc,Hrr),e(Mc,vV),e(vV,Urr),e(Mc,Jrr),e(Mc,FV),e(FV,Yrr),e(Mc,Krr),e(vr,Zrr),e(vr,xy),e(xy,etr),e(xy,x_e),e(x_e,otr),e(xy,rtr),e(vr,ttr),e(vr,gt),g(ky,gt,null),e(gt,atr),e(gt,k_e),e(k_e,ntr),e(gt,str),e(gt,Ec),e(Ec,ltr),e(Ec,S_e),e(S_e,itr),e(Ec,dtr),e(Ec,TV),e(TV,ctr),e(Ec,ftr),e(gt,mtr),e(gt,R_e),e(R_e,gtr),e(gt,htr),g(Sy,gt,null),e(vr,ptr),e(vr,po),g(Ry,po,null),e(po,_tr),e(po,B_e),e(B_e,utr),e(po,btr),e(po,un),e(un,vtr),e(un,P_e),e(P_e,Ftr),e(un,Ttr),e(un,$_e),e($_e,Mtr),e(un,Etr),e(un,I_e),e(I_e,Ctr),e(un,wtr),e(po,Atr),e(po,x),e(x,H3),e(H3,q_e),e(q_e,ytr),e(H3,Ltr),e(H3,MV),e(MV,xtr),e(H3,ktr),e(x,Str),e(x,U3),e(U3,N_e),e(N_e,Rtr),e(U3,Btr),e(U3,EV),e(EV,Ptr),e(U3,$tr),e(x,Itr),e(x,J3),e(J3,j_e),e(j_e,qtr),e(J3,Ntr),e(J3,CV),e(CV,jtr),e(J3,Dtr),e(x,Gtr),e(x,Y3),e(Y3,D_e),e(D_e,Otr),e(Y3,Vtr),e(Y3,wV),e(wV,Xtr),e(Y3,ztr),e(x,Qtr),e(x,K3),e(K3,G_e),e(G_e,Wtr),e(K3,Htr),e(K3,AV),e(AV,Utr),e(K3,Jtr),e(x,Ytr),e(x,Z3),e(Z3,O_e),e(O_e,Ktr),e(Z3,Ztr),e(Z3,yV),e(yV,ear),e(Z3,oar),e(x,rar),e(x,e6),e(e6,V_e),e(V_e,tar),e(e6,aar),e(e6,LV),e(LV,nar),e(e6,sar),e(x,lar),e(x,o6),e(o6,X_e),e(X_e,iar),e(o6,dar),e(o6,xV),e(xV,car),e(o6,far),e(x,mar),e(x,r6),e(r6,z_e),e(z_e,gar),e(r6,har),e(r6,kV),e(kV,par),e(r6,_ar),e(x,uar),e(x,t6),e(t6,Q_e),e(Q_e,bar),e(t6,Far),e(t6,SV),e(SV,Tar),e(t6,Mar),e(x,Ear),e(x,a6),e(a6,W_e),e(W_e,Car),e(a6,war),e(a6,RV),e(RV,Aar),e(a6,yar),e(x,Lar),e(x,n6),e(n6,H_e),e(H_e,xar),e(n6,kar),e(n6,BV),e(BV,Sar),e(n6,Rar),e(x,Bar),e(x,s6),e(s6,U_e),e(U_e,Par),e(s6,$ar),e(s6,PV),e(PV,Iar),e(s6,qar),e(x,Nar),e(x,l6),e(l6,J_e),e(J_e,jar),e(l6,Dar),e(l6,$V),e($V,Gar),e(l6,Oar),e(x,Var),e(x,i6),e(i6,Y_e),e(Y_e,Xar),e(i6,zar),e(i6,IV),e(IV,Qar),e(i6,War),e(x,Har),e(x,d6),e(d6,K_e),e(K_e,Uar),e(d6,Jar),e(d6,qV),e(qV,Yar),e(d6,Kar),e(x,Zar),e(x,Js),e(Js,Z_e),e(Z_e,enr),e(Js,onr),e(Js,NV),e(NV,rnr),e(Js,tnr),e(Js,jV),e(jV,anr),e(Js,nnr),e(x,snr),e(x,c6),e(c6,eue),e(eue,lnr),e(c6,inr),e(c6,DV),e(DV,dnr),e(c6,cnr),e(x,fnr),e(x,f6),e(f6,oue),e(oue,mnr),e(f6,gnr),e(f6,GV),e(GV,hnr),e(f6,pnr),e(x,_nr),e(x,m6),e(m6,rue),e(rue,unr),e(m6,bnr),e(m6,OV),e(OV,vnr),e(m6,Fnr),e(x,Tnr),e(x,g6),e(g6,tue),e(tue,Mnr),e(g6,Enr),e(g6,VV),e(VV,Cnr),e(g6,wnr),e(x,Anr),e(x,h6),e(h6,aue),e(aue,ynr),e(h6,Lnr),e(h6,XV),e(XV,xnr),e(h6,knr),e(x,Snr),e(x,p6),e(p6,nue),e(nue,Rnr),e(p6,Bnr),e(p6,zV),e(zV,Pnr),e(p6,$nr),e(x,Inr),e(x,_6),e(_6,sue),e(sue,qnr),e(_6,Nnr),e(_6,QV),e(QV,jnr),e(_6,Dnr),e(x,Gnr),e(x,u6),e(u6,lue),e(lue,Onr),e(u6,Vnr),e(u6,WV),e(WV,Xnr),e(u6,znr),e(x,Qnr),e(x,b6),e(b6,iue),e(iue,Wnr),e(b6,Hnr),e(b6,HV),e(HV,Unr),e(b6,Jnr),e(x,Ynr),e(x,v6),e(v6,due),e(due,Knr),e(v6,Znr),e(v6,UV),e(UV,esr),e(v6,osr),e(x,rsr),e(x,F6),e(F6,cue),e(cue,tsr),e(F6,asr),e(F6,JV),e(JV,nsr),e(F6,ssr),e(x,lsr),e(x,T6),e(T6,fue),e(fue,isr),e(T6,dsr),e(T6,YV),e(YV,csr),e(T6,fsr),e(x,msr),e(x,M6),e(M6,mue),e(mue,gsr),e(M6,hsr),e(M6,KV),e(KV,psr),e(M6,_sr),e(x,usr),e(x,E6),e(E6,gue),e(gue,bsr),e(E6,vsr),e(E6,ZV),e(ZV,Fsr),e(E6,Tsr),e(x,Msr),e(x,C6),e(C6,hue),e(hue,Esr),e(C6,Csr),e(C6,eX),e(eX,wsr),e(C6,Asr),e(x,ysr),e(x,w6),e(w6,pue),e(pue,Lsr),e(w6,xsr),e(w6,oX),e(oX,ksr),e(w6,Ssr),e(x,Rsr),e(x,A6),e(A6,_ue),e(_ue,Bsr),e(A6,Psr),e(A6,rX),e(rX,$sr),e(A6,Isr),e(x,qsr),e(x,y6),e(y6,uue),e(uue,Nsr),e(y6,jsr),e(y6,tX),e(tX,Dsr),e(y6,Gsr),e(x,Osr),e(x,L6),e(L6,bue),e(bue,Vsr),e(L6,Xsr),e(L6,aX),e(aX,zsr),e(L6,Qsr),e(x,Wsr),e(x,x6),e(x6,vue),e(vue,Hsr),e(x6,Usr),e(x6,nX),e(nX,Jsr),e(x6,Ysr),e(x,Ksr),e(x,k6),e(k6,Fue),e(Fue,Zsr),e(k6,elr),e(k6,sX),e(sX,olr),e(k6,rlr),e(x,tlr),e(x,S6),e(S6,Tue),e(Tue,alr),e(S6,nlr),e(S6,lX),e(lX,slr),e(S6,llr),e(x,ilr),e(x,R6),e(R6,Mue),e(Mue,dlr),e(R6,clr),e(R6,iX),e(iX,flr),e(R6,mlr),e(x,glr),e(x,B6),e(B6,Eue),e(Eue,hlr),e(B6,plr),e(B6,dX),e(dX,_lr),e(B6,ulr),e(x,blr),e(x,P6),e(P6,Cue),e(Cue,vlr),e(P6,Flr),e(P6,cX),e(cX,Tlr),e(P6,Mlr),e(x,Elr),e(x,$6),e($6,wue),e(wue,Clr),e($6,wlr),e($6,fX),e(fX,Alr),e($6,ylr),e(x,Llr),e(x,I6),e(I6,Aue),e(Aue,xlr),e(I6,klr),e(I6,mX),e(mX,Slr),e(I6,Rlr),e(x,Blr),e(x,q6),e(q6,yue),e(yue,Plr),e(q6,$lr),e(q6,gX),e(gX,Ilr),e(q6,qlr),e(po,Nlr),e(po,Lue),e(Lue,jlr),e(po,Dlr),g(By,po,null),b(c,h$e,u),b(c,Cc,u),e(Cc,N6),e(N6,xue),g(Py,xue,null),e(Cc,Glr),e(Cc,kue),e(kue,Olr),b(c,p$e,u),b(c,Fr,u),g($y,Fr,null),e(Fr,Vlr),e(Fr,wc),e(wc,Xlr),e(wc,hX),e(hX,zlr),e(wc,Qlr),e(wc,pX),e(pX,Wlr),e(wc,Hlr),e(Fr,Ulr),e(Fr,Iy),e(Iy,Jlr),e(Iy,Sue),e(Sue,Ylr),e(Iy,Klr),e(Fr,Zlr),e(Fr,ht),g(qy,ht,null),e(ht,eir),e(ht,Rue),e(Rue,oir),e(ht,rir),e(ht,Ac),e(Ac,tir),e(Ac,Bue),e(Bue,air),e(Ac,nir),e(Ac,_X),e(_X,sir),e(Ac,lir),e(ht,iir),e(ht,Pue),e(Pue,dir),e(ht,cir),g(Ny,ht,null),e(Fr,fir),e(Fr,_o),g(jy,_o,null),e(_o,mir),e(_o,$ue),e($ue,gir),e(_o,hir),e(_o,bn),e(bn,pir),e(bn,Iue),e(Iue,_ir),e(bn,uir),e(bn,que),e(que,bir),e(bn,vir),e(bn,Nue),e(Nue,Fir),e(bn,Tir),e(_o,Mir),e(_o,U),e(U,j6),e(j6,jue),e(jue,Eir),e(j6,Cir),e(j6,uX),e(uX,wir),e(j6,Air),e(U,yir),e(U,D6),e(D6,Due),e(Due,Lir),e(D6,xir),e(D6,bX),e(bX,kir),e(D6,Sir),e(U,Rir),e(U,G6),e(G6,Gue),e(Gue,Bir),e(G6,Pir),e(G6,vX),e(vX,$ir),e(G6,Iir),e(U,qir),e(U,O6),e(O6,Oue),e(Oue,Nir),e(O6,jir),e(O6,FX),e(FX,Dir),e(O6,Gir),e(U,Oir),e(U,V6),e(V6,Vue),e(Vue,Vir),e(V6,Xir),e(V6,TX),e(TX,zir),e(V6,Qir),e(U,Wir),e(U,X6),e(X6,Xue),e(Xue,Hir),e(X6,Uir),e(X6,MX),e(MX,Jir),e(X6,Yir),e(U,Kir),e(U,z6),e(z6,zue),e(zue,Zir),e(z6,edr),e(z6,EX),e(EX,odr),e(z6,rdr),e(U,tdr),e(U,Q6),e(Q6,Que),e(Que,adr),e(Q6,ndr),e(Q6,CX),e(CX,sdr),e(Q6,ldr),e(U,idr),e(U,W6),e(W6,Wue),e(Wue,ddr),e(W6,cdr),e(W6,wX),e(wX,fdr),e(W6,mdr),e(U,gdr),e(U,H6),e(H6,Hue),e(Hue,hdr),e(H6,pdr),e(H6,AX),e(AX,_dr),e(H6,udr),e(U,bdr),e(U,U6),e(U6,Uue),e(Uue,vdr),e(U6,Fdr),e(U6,yX),e(yX,Tdr),e(U6,Mdr),e(U,Edr),e(U,J6),e(J6,Jue),e(Jue,Cdr),e(J6,wdr),e(J6,LX),e(LX,Adr),e(J6,ydr),e(U,Ldr),e(U,Y6),e(Y6,Yue),e(Yue,xdr),e(Y6,kdr),e(Y6,xX),e(xX,Sdr),e(Y6,Rdr),e(U,Bdr),e(U,K6),e(K6,Kue),e(Kue,Pdr),e(K6,$dr),e(K6,kX),e(kX,Idr),e(K6,qdr),e(U,Ndr),e(U,Z6),e(Z6,Zue),e(Zue,jdr),e(Z6,Ddr),e(Z6,SX),e(SX,Gdr),e(Z6,Odr),e(U,Vdr),e(U,ev),e(ev,e1e),e(e1e,Xdr),e(ev,zdr),e(ev,RX),e(RX,Qdr),e(ev,Wdr),e(U,Hdr),e(U,ov),e(ov,o1e),e(o1e,Udr),e(ov,Jdr),e(ov,BX),e(BX,Ydr),e(ov,Kdr),e(U,Zdr),e(U,rv),e(rv,r1e),e(r1e,ecr),e(rv,ocr),e(rv,PX),e(PX,rcr),e(rv,tcr),e(U,acr),e(U,tv),e(tv,t1e),e(t1e,ncr),e(tv,scr),e(tv,$X),e($X,lcr),e(tv,icr),e(U,dcr),e(U,av),e(av,a1e),e(a1e,ccr),e(av,fcr),e(av,IX),e(IX,mcr),e(av,gcr),e(U,hcr),e(U,nv),e(nv,n1e),e(n1e,pcr),e(nv,_cr),e(nv,qX),e(qX,ucr),e(nv,bcr),e(U,vcr),e(U,sv),e(sv,s1e),e(s1e,Fcr),e(sv,Tcr),e(sv,NX),e(NX,Mcr),e(sv,Ecr),e(U,Ccr),e(U,lv),e(lv,l1e),e(l1e,wcr),e(lv,Acr),e(lv,jX),e(jX,ycr),e(lv,Lcr),e(_o,xcr),e(_o,i1e),e(i1e,kcr),e(_o,Scr),g(Dy,_o,null),b(c,_$e,u),b(c,yc,u),e(yc,iv),e(iv,d1e),g(Gy,d1e,null),e(yc,Rcr),e(yc,c1e),e(c1e,Bcr),b(c,u$e,u),b(c,Tr,u),g(Oy,Tr,null),e(Tr,Pcr),e(Tr,Lc),e(Lc,$cr),e(Lc,DX),e(DX,Icr),e(Lc,qcr),e(Lc,GX),e(GX,Ncr),e(Lc,jcr),e(Tr,Dcr),e(Tr,Vy),e(Vy,Gcr),e(Vy,f1e),e(f1e,Ocr),e(Vy,Vcr),e(Tr,Xcr),e(Tr,pt),g(Xy,pt,null),e(pt,zcr),e(pt,m1e),e(m1e,Qcr),e(pt,Wcr),e(pt,xc),e(xc,Hcr),e(xc,g1e),e(g1e,Ucr),e(xc,Jcr),e(xc,OX),e(OX,Ycr),e(xc,Kcr),e(pt,Zcr),e(pt,h1e),e(h1e,efr),e(pt,ofr),g(zy,pt,null),e(Tr,rfr),e(Tr,uo),g(Qy,uo,null),e(uo,tfr),e(uo,p1e),e(p1e,afr),e(uo,nfr),e(uo,vn),e(vn,sfr),e(vn,_1e),e(_1e,lfr),e(vn,ifr),e(vn,u1e),e(u1e,dfr),e(vn,cfr),e(vn,b1e),e(b1e,ffr),e(vn,mfr),e(uo,gfr),e(uo,fe),e(fe,dv),e(dv,v1e),e(v1e,hfr),e(dv,pfr),e(dv,VX),e(VX,_fr),e(dv,ufr),e(fe,bfr),e(fe,cv),e(cv,F1e),e(F1e,vfr),e(cv,Ffr),e(cv,XX),e(XX,Tfr),e(cv,Mfr),e(fe,Efr),e(fe,fv),e(fv,T1e),e(T1e,Cfr),e(fv,wfr),e(fv,zX),e(zX,Afr),e(fv,yfr),e(fe,Lfr),e(fe,mv),e(mv,M1e),e(M1e,xfr),e(mv,kfr),e(mv,QX),e(QX,Sfr),e(mv,Rfr),e(fe,Bfr),e(fe,gv),e(gv,E1e),e(E1e,Pfr),e(gv,$fr),e(gv,WX),e(WX,Ifr),e(gv,qfr),e(fe,Nfr),e(fe,hv),e(hv,C1e),e(C1e,jfr),e(hv,Dfr),e(hv,HX),e(HX,Gfr),e(hv,Ofr),e(fe,Vfr),e(fe,pv),e(pv,w1e),e(w1e,Xfr),e(pv,zfr),e(pv,UX),e(UX,Qfr),e(pv,Wfr),e(fe,Hfr),e(fe,_v),e(_v,A1e),e(A1e,Ufr),e(_v,Jfr),e(_v,JX),e(JX,Yfr),e(_v,Kfr),e(fe,Zfr),e(fe,uv),e(uv,y1e),e(y1e,emr),e(uv,omr),e(uv,YX),e(YX,rmr),e(uv,tmr),e(fe,amr),e(fe,bv),e(bv,L1e),e(L1e,nmr),e(bv,smr),e(bv,KX),e(KX,lmr),e(bv,imr),e(fe,dmr),e(fe,vv),e(vv,x1e),e(x1e,cmr),e(vv,fmr),e(vv,ZX),e(ZX,mmr),e(vv,gmr),e(fe,hmr),e(fe,Fv),e(Fv,k1e),e(k1e,pmr),e(Fv,_mr),e(Fv,ez),e(ez,umr),e(Fv,bmr),e(fe,vmr),e(fe,Tv),e(Tv,S1e),e(S1e,Fmr),e(Tv,Tmr),e(Tv,oz),e(oz,Mmr),e(Tv,Emr),e(uo,Cmr),e(uo,R1e),e(R1e,wmr),e(uo,Amr),g(Wy,uo,null),b(c,b$e,u),b(c,kc,u),e(kc,Mv),e(Mv,B1e),g(Hy,B1e,null),e(kc,ymr),e(kc,P1e),e(P1e,Lmr),b(c,v$e,u),b(c,Mr,u),g(Uy,Mr,null),e(Mr,xmr),e(Mr,Sc),e(Sc,kmr),e(Sc,rz),e(rz,Smr),e(Sc,Rmr),e(Sc,tz),e(tz,Bmr),e(Sc,Pmr),e(Mr,$mr),e(Mr,Jy),e(Jy,Imr),e(Jy,$1e),e($1e,qmr),e(Jy,Nmr),e(Mr,jmr),e(Mr,_t),g(Yy,_t,null),e(_t,Dmr),e(_t,I1e),e(I1e,Gmr),e(_t,Omr),e(_t,Rc),e(Rc,Vmr),e(Rc,q1e),e(q1e,Xmr),e(Rc,zmr),e(Rc,az),e(az,Qmr),e(Rc,Wmr),e(_t,Hmr),e(_t,N1e),e(N1e,Umr),e(_t,Jmr),g(Ky,_t,null),e(Mr,Ymr),e(Mr,bo),g(Zy,bo,null),e(bo,Kmr),e(bo,j1e),e(j1e,Zmr),e(bo,egr),e(bo,Fn),e(Fn,ogr),e(Fn,D1e),e(D1e,rgr),e(Fn,tgr),e(Fn,G1e),e(G1e,agr),e(Fn,ngr),e(Fn,O1e),e(O1e,sgr),e(Fn,lgr),e(bo,igr),e(bo,e8),e(e8,Ev),e(Ev,V1e),e(V1e,dgr),e(Ev,cgr),e(Ev,nz),e(nz,fgr),e(Ev,mgr),e(e8,ggr),e(e8,Cv),e(Cv,X1e),e(X1e,hgr),e(Cv,pgr),e(Cv,sz),e(sz,_gr),e(Cv,ugr),e(bo,bgr),e(bo,z1e),e(z1e,vgr),e(bo,Fgr),g(o8,bo,null),b(c,F$e,u),b(c,Bc,u),e(Bc,wv),e(wv,Q1e),g(r8,Q1e,null),e(Bc,Tgr),e(Bc,W1e),e(W1e,Mgr),b(c,T$e,u),b(c,Er,u),g(t8,Er,null),e(Er,Egr),e(Er,Pc),e(Pc,Cgr),e(Pc,lz),e(lz,wgr),e(Pc,Agr),e(Pc,iz),e(iz,ygr),e(Pc,Lgr),e(Er,xgr),e(Er,a8),e(a8,kgr),e(a8,H1e),e(H1e,Sgr),e(a8,Rgr),e(Er,Bgr),e(Er,ut),g(n8,ut,null),e(ut,Pgr),e(ut,U1e),e(U1e,$gr),e(ut,Igr),e(ut,$c),e($c,qgr),e($c,J1e),e(J1e,Ngr),e($c,jgr),e($c,dz),e(dz,Dgr),e($c,Ggr),e(ut,Ogr),e(ut,Y1e),e(Y1e,Vgr),e(ut,Xgr),g(s8,ut,null),e(Er,zgr),e(Er,vo),g(l8,vo,null),e(vo,Qgr),e(vo,K1e),e(K1e,Wgr),e(vo,Hgr),e(vo,Tn),e(Tn,Ugr),e(Tn,Z1e),e(Z1e,Jgr),e(Tn,Ygr),e(Tn,e4e),e(e4e,Kgr),e(Tn,Zgr),e(Tn,o4e),e(o4e,ehr),e(Tn,ohr),e(vo,rhr),e(vo,K),e(K,Av),e(Av,r4e),e(r4e,thr),e(Av,ahr),e(Av,cz),e(cz,nhr),e(Av,shr),e(K,lhr),e(K,yv),e(yv,t4e),e(t4e,ihr),e(yv,dhr),e(yv,fz),e(fz,chr),e(yv,fhr),e(K,mhr),e(K,Lv),e(Lv,a4e),e(a4e,ghr),e(Lv,hhr),e(Lv,mz),e(mz,phr),e(Lv,_hr),e(K,uhr),e(K,xv),e(xv,n4e),e(n4e,bhr),e(xv,vhr),e(xv,gz),e(gz,Fhr),e(xv,Thr),e(K,Mhr),e(K,kv),e(kv,s4e),e(s4e,Ehr),e(kv,Chr),e(kv,hz),e(hz,whr),e(kv,Ahr),e(K,yhr),e(K,Sv),e(Sv,l4e),e(l4e,Lhr),e(Sv,xhr),e(Sv,pz),e(pz,khr),e(Sv,Shr),e(K,Rhr),e(K,Rv),e(Rv,i4e),e(i4e,Bhr),e(Rv,Phr),e(Rv,_z),e(_z,$hr),e(Rv,Ihr),e(K,qhr),e(K,Bv),e(Bv,d4e),e(d4e,Nhr),e(Bv,jhr),e(Bv,uz),e(uz,Dhr),e(Bv,Ghr),e(K,Ohr),e(K,Pv),e(Pv,c4e),e(c4e,Vhr),e(Pv,Xhr),e(Pv,bz),e(bz,zhr),e(Pv,Qhr),e(K,Whr),e(K,$v),e($v,f4e),e(f4e,Hhr),e($v,Uhr),e($v,vz),e(vz,Jhr),e($v,Yhr),e(K,Khr),e(K,Iv),e(Iv,m4e),e(m4e,Zhr),e(Iv,epr),e(Iv,Fz),e(Fz,opr),e(Iv,rpr),e(K,tpr),e(K,qv),e(qv,g4e),e(g4e,apr),e(qv,npr),e(qv,Tz),e(Tz,spr),e(qv,lpr),e(K,ipr),e(K,Nv),e(Nv,h4e),e(h4e,dpr),e(Nv,cpr),e(Nv,Mz),e(Mz,fpr),e(Nv,mpr),e(K,gpr),e(K,jv),e(jv,p4e),e(p4e,hpr),e(jv,ppr),e(jv,Ez),e(Ez,_pr),e(jv,upr),e(K,bpr),e(K,Dv),e(Dv,_4e),e(_4e,vpr),e(Dv,Fpr),e(Dv,Cz),e(Cz,Tpr),e(Dv,Mpr),e(K,Epr),e(K,Gv),e(Gv,u4e),e(u4e,Cpr),e(Gv,wpr),e(Gv,wz),e(wz,Apr),e(Gv,ypr),e(K,Lpr),e(K,Ov),e(Ov,b4e),e(b4e,xpr),e(Ov,kpr),e(Ov,Az),e(Az,Spr),e(Ov,Rpr),e(K,Bpr),e(K,Vv),e(Vv,v4e),e(v4e,Ppr),e(Vv,$pr),e(Vv,yz),e(yz,Ipr),e(Vv,qpr),e(K,Npr),e(K,Xv),e(Xv,F4e),e(F4e,jpr),e(Xv,Dpr),e(Xv,Lz),e(Lz,Gpr),e(Xv,Opr),e(K,Vpr),e(K,zv),e(zv,T4e),e(T4e,Xpr),e(zv,zpr),e(zv,xz),e(xz,Qpr),e(zv,Wpr),e(vo,Hpr),e(vo,M4e),e(M4e,Upr),e(vo,Jpr),g(i8,vo,null),b(c,M$e,u),b(c,Ic,u),e(Ic,Qv),e(Qv,E4e),g(d8,E4e,null),e(Ic,Ypr),e(Ic,C4e),e(C4e,Kpr),b(c,E$e,u),b(c,Cr,u),g(c8,Cr,null),e(Cr,Zpr),e(Cr,qc),e(qc,e_r),e(qc,kz),e(kz,o_r),e(qc,r_r),e(qc,Sz),e(Sz,t_r),e(qc,a_r),e(Cr,n_r),e(Cr,f8),e(f8,s_r),e(f8,w4e),e(w4e,l_r),e(f8,i_r),e(Cr,d_r),e(Cr,bt),g(m8,bt,null),e(bt,c_r),e(bt,A4e),e(A4e,f_r),e(bt,m_r),e(bt,Nc),e(Nc,g_r),e(Nc,y4e),e(y4e,h_r),e(Nc,p_r),e(Nc,Rz),e(Rz,__r),e(Nc,u_r),e(bt,b_r),e(bt,L4e),e(L4e,v_r),e(bt,F_r),g(g8,bt,null),e(Cr,T_r),e(Cr,Fo),g(h8,Fo,null),e(Fo,M_r),e(Fo,x4e),e(x4e,E_r),e(Fo,C_r),e(Fo,Mn),e(Mn,w_r),e(Mn,k4e),e(k4e,A_r),e(Mn,y_r),e(Mn,S4e),e(S4e,L_r),e(Mn,x_r),e(Mn,R4e),e(R4e,k_r),e(Mn,S_r),e(Fo,R_r),e(Fo,Fe),e(Fe,Wv),e(Wv,B4e),e(B4e,B_r),e(Wv,P_r),e(Wv,Bz),e(Bz,$_r),e(Wv,I_r),e(Fe,q_r),e(Fe,Hv),e(Hv,P4e),e(P4e,N_r),e(Hv,j_r),e(Hv,Pz),e(Pz,D_r),e(Hv,G_r),e(Fe,O_r),e(Fe,Uv),e(Uv,$4e),e($4e,V_r),e(Uv,X_r),e(Uv,$z),e($z,z_r),e(Uv,Q_r),e(Fe,W_r),e(Fe,Jv),e(Jv,I4e),e(I4e,H_r),e(Jv,U_r),e(Jv,Iz),e(Iz,J_r),e(Jv,Y_r),e(Fe,K_r),e(Fe,Yv),e(Yv,q4e),e(q4e,Z_r),e(Yv,eur),e(Yv,qz),e(qz,our),e(Yv,rur),e(Fe,tur),e(Fe,Kv),e(Kv,N4e),e(N4e,aur),e(Kv,nur),e(Kv,Nz),e(Nz,sur),e(Kv,lur),e(Fe,iur),e(Fe,Zv),e(Zv,j4e),e(j4e,dur),e(Zv,cur),e(Zv,jz),e(jz,fur),e(Zv,mur),e(Fe,gur),e(Fe,eF),e(eF,D4e),e(D4e,hur),e(eF,pur),e(eF,Dz),e(Dz,_ur),e(eF,uur),e(Fe,bur),e(Fe,oF),e(oF,G4e),e(G4e,vur),e(oF,Fur),e(oF,Gz),e(Gz,Tur),e(oF,Mur),e(Fe,Eur),e(Fe,rF),e(rF,O4e),e(O4e,Cur),e(rF,wur),e(rF,Oz),e(Oz,Aur),e(rF,yur),e(Fo,Lur),e(Fo,V4e),e(V4e,xur),e(Fo,kur),g(p8,Fo,null),b(c,C$e,u),b(c,jc,u),e(jc,tF),e(tF,X4e),g(_8,X4e,null),e(jc,Sur),e(jc,z4e),e(z4e,Rur),b(c,w$e,u),b(c,wr,u),g(u8,wr,null),e(wr,Bur),e(wr,Dc),e(Dc,Pur),e(Dc,Vz),e(Vz,$ur),e(Dc,Iur),e(Dc,Xz),e(Xz,qur),e(Dc,Nur),e(wr,jur),e(wr,b8),e(b8,Dur),e(b8,Q4e),e(Q4e,Gur),e(b8,Our),e(wr,Vur),e(wr,vt),g(v8,vt,null),e(vt,Xur),e(vt,W4e),e(W4e,zur),e(vt,Qur),e(vt,Gc),e(Gc,Wur),e(Gc,H4e),e(H4e,Hur),e(Gc,Uur),e(Gc,zz),e(zz,Jur),e(Gc,Yur),e(vt,Kur),e(vt,U4e),e(U4e,Zur),e(vt,e1r),g(F8,vt,null),e(wr,o1r),e(wr,To),g(T8,To,null),e(To,r1r),e(To,J4e),e(J4e,t1r),e(To,a1r),e(To,En),e(En,n1r),e(En,Y4e),e(Y4e,s1r),e(En,l1r),e(En,K4e),e(K4e,i1r),e(En,d1r),e(En,Z4e),e(Z4e,c1r),e(En,f1r),e(To,m1r),e(To,V),e(V,aF),e(aF,ebe),e(ebe,g1r),e(aF,h1r),e(aF,Qz),e(Qz,p1r),e(aF,_1r),e(V,u1r),e(V,nF),e(nF,obe),e(obe,b1r),e(nF,v1r),e(nF,Wz),e(Wz,F1r),e(nF,T1r),e(V,M1r),e(V,sF),e(sF,rbe),e(rbe,E1r),e(sF,C1r),e(sF,Hz),e(Hz,w1r),e(sF,A1r),e(V,y1r),e(V,lF),e(lF,tbe),e(tbe,L1r),e(lF,x1r),e(lF,Uz),e(Uz,k1r),e(lF,S1r),e(V,R1r),e(V,iF),e(iF,abe),e(abe,B1r),e(iF,P1r),e(iF,Jz),e(Jz,$1r),e(iF,I1r),e(V,q1r),e(V,dF),e(dF,nbe),e(nbe,N1r),e(dF,j1r),e(dF,Yz),e(Yz,D1r),e(dF,G1r),e(V,O1r),e(V,cF),e(cF,sbe),e(sbe,V1r),e(cF,X1r),e(cF,Kz),e(Kz,z1r),e(cF,Q1r),e(V,W1r),e(V,fF),e(fF,lbe),e(lbe,H1r),e(fF,U1r),e(fF,Zz),e(Zz,J1r),e(fF,Y1r),e(V,K1r),e(V,mF),e(mF,ibe),e(ibe,Z1r),e(mF,e4r),e(mF,eQ),e(eQ,o4r),e(mF,r4r),e(V,t4r),e(V,gF),e(gF,dbe),e(dbe,a4r),e(gF,n4r),e(gF,oQ),e(oQ,s4r),e(gF,l4r),e(V,i4r),e(V,hF),e(hF,cbe),e(cbe,d4r),e(hF,c4r),e(hF,rQ),e(rQ,f4r),e(hF,m4r),e(V,g4r),e(V,pF),e(pF,fbe),e(fbe,h4r),e(pF,p4r),e(pF,tQ),e(tQ,_4r),e(pF,u4r),e(V,b4r),e(V,_F),e(_F,mbe),e(mbe,v4r),e(_F,F4r),e(_F,aQ),e(aQ,T4r),e(_F,M4r),e(V,E4r),e(V,uF),e(uF,gbe),e(gbe,C4r),e(uF,w4r),e(uF,nQ),e(nQ,A4r),e(uF,y4r),e(V,L4r),e(V,bF),e(bF,hbe),e(hbe,x4r),e(bF,k4r),e(bF,sQ),e(sQ,S4r),e(bF,R4r),e(V,B4r),e(V,vF),e(vF,pbe),e(pbe,P4r),e(vF,$4r),e(vF,lQ),e(lQ,I4r),e(vF,q4r),e(V,N4r),e(V,FF),e(FF,_be),e(_be,j4r),e(FF,D4r),e(FF,iQ),e(iQ,G4r),e(FF,O4r),e(V,V4r),e(V,TF),e(TF,ube),e(ube,X4r),e(TF,z4r),e(TF,dQ),e(dQ,Q4r),e(TF,W4r),e(V,H4r),e(V,MF),e(MF,bbe),e(bbe,U4r),e(MF,J4r),e(MF,cQ),e(cQ,Y4r),e(MF,K4r),e(V,Z4r),e(V,EF),e(EF,vbe),e(vbe,ebr),e(EF,obr),e(EF,fQ),e(fQ,rbr),e(EF,tbr),e(V,abr),e(V,CF),e(CF,Fbe),e(Fbe,nbr),e(CF,sbr),e(CF,mQ),e(mQ,lbr),e(CF,ibr),e(V,dbr),e(V,wF),e(wF,Tbe),e(Tbe,cbr),e(wF,fbr),e(wF,gQ),e(gQ,mbr),e(wF,gbr),e(V,hbr),e(V,AF),e(AF,Mbe),e(Mbe,pbr),e(AF,_br),e(AF,hQ),e(hQ,ubr),e(AF,bbr),e(V,vbr),e(V,yF),e(yF,Ebe),e(Ebe,Fbr),e(yF,Tbr),e(yF,pQ),e(pQ,Mbr),e(yF,Ebr),e(V,Cbr),e(V,LF),e(LF,Cbe),e(Cbe,wbr),e(LF,Abr),e(LF,_Q),e(_Q,ybr),e(LF,Lbr),e(V,xbr),e(V,xF),e(xF,wbe),e(wbe,kbr),e(xF,Sbr),e(xF,uQ),e(uQ,Rbr),e(xF,Bbr),e(To,Pbr),e(To,Abe),e(Abe,$br),e(To,Ibr),g(M8,To,null),b(c,A$e,u),b(c,Oc,u),e(Oc,kF),e(kF,ybe),g(E8,ybe,null),e(Oc,qbr),e(Oc,Lbe),e(Lbe,Nbr),b(c,y$e,u),b(c,Ar,u),g(C8,Ar,null),e(Ar,jbr),e(Ar,Vc),e(Vc,Dbr),e(Vc,bQ),e(bQ,Gbr),e(Vc,Obr),e(Vc,vQ),e(vQ,Vbr),e(Vc,Xbr),e(Ar,zbr),e(Ar,w8),e(w8,Qbr),e(w8,xbe),e(xbe,Wbr),e(w8,Hbr),e(Ar,Ubr),e(Ar,Ft),g(A8,Ft,null),e(Ft,Jbr),e(Ft,kbe),e(kbe,Ybr),e(Ft,Kbr),e(Ft,Xc),e(Xc,Zbr),e(Xc,Sbe),e(Sbe,e2r),e(Xc,o2r),e(Xc,FQ),e(FQ,r2r),e(Xc,t2r),e(Ft,a2r),e(Ft,Rbe),e(Rbe,n2r),e(Ft,s2r),g(y8,Ft,null),e(Ar,l2r),e(Ar,Mo),g(L8,Mo,null),e(Mo,i2r),e(Mo,Bbe),e(Bbe,d2r),e(Mo,c2r),e(Mo,Cn),e(Cn,f2r),e(Cn,Pbe),e(Pbe,m2r),e(Cn,g2r),e(Cn,$be),e($be,h2r),e(Cn,p2r),e(Cn,Ibe),e(Ibe,_2r),e(Cn,u2r),e(Mo,b2r),e(Mo,se),e(se,SF),e(SF,qbe),e(qbe,v2r),e(SF,F2r),e(SF,TQ),e(TQ,T2r),e(SF,M2r),e(se,E2r),e(se,RF),e(RF,Nbe),e(Nbe,C2r),e(RF,w2r),e(RF,MQ),e(MQ,A2r),e(RF,y2r),e(se,L2r),e(se,BF),e(BF,jbe),e(jbe,x2r),e(BF,k2r),e(BF,EQ),e(EQ,S2r),e(BF,R2r),e(se,B2r),e(se,PF),e(PF,Dbe),e(Dbe,P2r),e(PF,$2r),e(PF,CQ),e(CQ,I2r),e(PF,q2r),e(se,N2r),e(se,$F),e($F,Gbe),e(Gbe,j2r),e($F,D2r),e($F,wQ),e(wQ,G2r),e($F,O2r),e(se,V2r),e(se,IF),e(IF,Obe),e(Obe,X2r),e(IF,z2r),e(IF,AQ),e(AQ,Q2r),e(IF,W2r),e(se,H2r),e(se,qF),e(qF,Vbe),e(Vbe,U2r),e(qF,J2r),e(qF,yQ),e(yQ,Y2r),e(qF,K2r),e(se,Z2r),e(se,NF),e(NF,Xbe),e(Xbe,e5r),e(NF,o5r),e(NF,LQ),e(LQ,r5r),e(NF,t5r),e(se,a5r),e(se,jF),e(jF,zbe),e(zbe,n5r),e(jF,s5r),e(jF,xQ),e(xQ,l5r),e(jF,i5r),e(se,d5r),e(se,DF),e(DF,Qbe),e(Qbe,c5r),e(DF,f5r),e(DF,kQ),e(kQ,m5r),e(DF,g5r),e(se,h5r),e(se,GF),e(GF,Wbe),e(Wbe,p5r),e(GF,_5r),e(GF,SQ),e(SQ,u5r),e(GF,b5r),e(se,v5r),e(se,OF),e(OF,Hbe),e(Hbe,F5r),e(OF,T5r),e(OF,RQ),e(RQ,M5r),e(OF,E5r),e(se,C5r),e(se,VF),e(VF,Ube),e(Ube,w5r),e(VF,A5r),e(VF,BQ),e(BQ,y5r),e(VF,L5r),e(se,x5r),e(se,XF),e(XF,Jbe),e(Jbe,k5r),e(XF,S5r),e(XF,PQ),e(PQ,R5r),e(XF,B5r),e(se,P5r),e(se,zF),e(zF,Ybe),e(Ybe,$5r),e(zF,I5r),e(zF,$Q),e($Q,q5r),e(zF,N5r),e(se,j5r),e(se,QF),e(QF,Kbe),e(Kbe,D5r),e(QF,G5r),e(QF,IQ),e(IQ,O5r),e(QF,V5r),e(se,X5r),e(se,WF),e(WF,Zbe),e(Zbe,z5r),e(WF,Q5r),e(WF,qQ),e(qQ,W5r),e(WF,H5r),e(Mo,U5r),e(Mo,e2e),e(e2e,J5r),e(Mo,Y5r),g(x8,Mo,null),b(c,L$e,u),b(c,zc,u),e(zc,HF),e(HF,o2e),g(k8,o2e,null),e(zc,K5r),e(zc,r2e),e(r2e,Z5r),b(c,x$e,u),b(c,yr,u),g(S8,yr,null),e(yr,e3r),e(yr,Qc),e(Qc,o3r),e(Qc,NQ),e(NQ,r3r),e(Qc,t3r),e(Qc,jQ),e(jQ,a3r),e(Qc,n3r),e(yr,s3r),e(yr,R8),e(R8,l3r),e(R8,t2e),e(t2e,i3r),e(R8,d3r),e(yr,c3r),e(yr,Tt),g(B8,Tt,null),e(Tt,f3r),e(Tt,a2e),e(a2e,m3r),e(Tt,g3r),e(Tt,Wc),e(Wc,h3r),e(Wc,n2e),e(n2e,p3r),e(Wc,_3r),e(Wc,DQ),e(DQ,u3r),e(Wc,b3r),e(Tt,v3r),e(Tt,s2e),e(s2e,F3r),e(Tt,T3r),g(P8,Tt,null),e(yr,M3r),e(yr,Eo),g($8,Eo,null),e(Eo,E3r),e(Eo,l2e),e(l2e,C3r),e(Eo,w3r),e(Eo,wn),e(wn,A3r),e(wn,i2e),e(i2e,y3r),e(wn,L3r),e(wn,d2e),e(d2e,x3r),e(wn,k3r),e(wn,c2e),e(c2e,S3r),e(wn,R3r),e(Eo,B3r),e(Eo,f2e),e(f2e,UF),e(UF,m2e),e(m2e,P3r),e(UF,$3r),e(UF,GQ),e(GQ,I3r),e(UF,q3r),e(Eo,N3r),e(Eo,g2e),e(g2e,j3r),e(Eo,D3r),g(I8,Eo,null),b(c,k$e,u),b(c,Hc,u),e(Hc,JF),e(JF,h2e),g(q8,h2e,null),e(Hc,G3r),e(Hc,p2e),e(p2e,O3r),b(c,S$e,u),b(c,Lr,u),g(N8,Lr,null),e(Lr,V3r),e(Lr,Uc),e(Uc,X3r),e(Uc,OQ),e(OQ,z3r),e(Uc,Q3r),e(Uc,VQ),e(VQ,W3r),e(Uc,H3r),e(Lr,U3r),e(Lr,j8),e(j8,J3r),e(j8,_2e),e(_2e,Y3r),e(j8,K3r),e(Lr,Z3r),e(Lr,Mt),g(D8,Mt,null),e(Mt,e6r),e(Mt,u2e),e(u2e,o6r),e(Mt,r6r),e(Mt,Jc),e(Jc,t6r),e(Jc,b2e),e(b2e,a6r),e(Jc,n6r),e(Jc,XQ),e(XQ,s6r),e(Jc,l6r),e(Mt,i6r),e(Mt,v2e),e(v2e,d6r),e(Mt,c6r),g(G8,Mt,null),e(Lr,f6r),e(Lr,Co),g(O8,Co,null),e(Co,m6r),e(Co,F2e),e(F2e,g6r),e(Co,h6r),e(Co,An),e(An,p6r),e(An,T2e),e(T2e,_6r),e(An,u6r),e(An,M2e),e(M2e,b6r),e(An,v6r),e(An,E2e),e(E2e,F6r),e(An,T6r),e(Co,M6r),e(Co,Z),e(Z,YF),e(YF,C2e),e(C2e,E6r),e(YF,C6r),e(YF,zQ),e(zQ,w6r),e(YF,A6r),e(Z,y6r),e(Z,KF),e(KF,w2e),e(w2e,L6r),e(KF,x6r),e(KF,QQ),e(QQ,k6r),e(KF,S6r),e(Z,R6r),e(Z,ZF),e(ZF,A2e),e(A2e,B6r),e(ZF,P6r),e(ZF,WQ),e(WQ,$6r),e(ZF,I6r),e(Z,q6r),e(Z,eT),e(eT,y2e),e(y2e,N6r),e(eT,j6r),e(eT,HQ),e(HQ,D6r),e(eT,G6r),e(Z,O6r),e(Z,oT),e(oT,L2e),e(L2e,V6r),e(oT,X6r),e(oT,UQ),e(UQ,z6r),e(oT,Q6r),e(Z,W6r),e(Z,rT),e(rT,x2e),e(x2e,H6r),e(rT,U6r),e(rT,JQ),e(JQ,J6r),e(rT,Y6r),e(Z,K6r),e(Z,tT),e(tT,k2e),e(k2e,Z6r),e(tT,evr),e(tT,YQ),e(YQ,ovr),e(tT,rvr),e(Z,tvr),e(Z,aT),e(aT,S2e),e(S2e,avr),e(aT,nvr),e(aT,KQ),e(KQ,svr),e(aT,lvr),e(Z,ivr),e(Z,nT),e(nT,R2e),e(R2e,dvr),e(nT,cvr),e(nT,ZQ),e(ZQ,fvr),e(nT,mvr),e(Z,gvr),e(Z,sT),e(sT,B2e),e(B2e,hvr),e(sT,pvr),e(sT,eW),e(eW,_vr),e(sT,uvr),e(Z,bvr),e(Z,lT),e(lT,P2e),e(P2e,vvr),e(lT,Fvr),e(lT,oW),e(oW,Tvr),e(lT,Mvr),e(Z,Evr),e(Z,iT),e(iT,$2e),e($2e,Cvr),e(iT,wvr),e(iT,rW),e(rW,Avr),e(iT,yvr),e(Z,Lvr),e(Z,dT),e(dT,I2e),e(I2e,xvr),e(dT,kvr),e(dT,tW),e(tW,Svr),e(dT,Rvr),e(Z,Bvr),e(Z,cT),e(cT,q2e),e(q2e,Pvr),e(cT,$vr),e(cT,aW),e(aW,Ivr),e(cT,qvr),e(Z,Nvr),e(Z,fT),e(fT,N2e),e(N2e,jvr),e(fT,Dvr),e(fT,nW),e(nW,Gvr),e(fT,Ovr),e(Z,Vvr),e(Z,mT),e(mT,j2e),e(j2e,Xvr),e(mT,zvr),e(mT,sW),e(sW,Qvr),e(mT,Wvr),e(Z,Hvr),e(Z,gT),e(gT,D2e),e(D2e,Uvr),e(gT,Jvr),e(gT,lW),e(lW,Yvr),e(gT,Kvr),e(Z,Zvr),e(Z,hT),e(hT,G2e),e(G2e,eFr),e(hT,oFr),e(hT,iW),e(iW,rFr),e(hT,tFr),e(Z,aFr),e(Z,pT),e(pT,O2e),e(O2e,nFr),e(pT,sFr),e(pT,dW),e(dW,lFr),e(pT,iFr),e(Z,dFr),e(Z,_T),e(_T,V2e),e(V2e,cFr),e(_T,fFr),e(_T,cW),e(cW,mFr),e(_T,gFr),e(Co,hFr),e(Co,X2e),e(X2e,pFr),e(Co,_Fr),g(V8,Co,null),b(c,R$e,u),b(c,Yc,u),e(Yc,uT),e(uT,z2e),g(X8,z2e,null),e(Yc,uFr),e(Yc,Q2e),e(Q2e,bFr),b(c,B$e,u),b(c,xr,u),g(z8,xr,null),e(xr,vFr),e(xr,Kc),e(Kc,FFr),e(Kc,fW),e(fW,TFr),e(Kc,MFr),e(Kc,mW),e(mW,EFr),e(Kc,CFr),e(xr,wFr),e(xr,Q8),e(Q8,AFr),e(Q8,W2e),e(W2e,yFr),e(Q8,LFr),e(xr,xFr),e(xr,Et),g(W8,Et,null),e(Et,kFr),e(Et,H2e),e(H2e,SFr),e(Et,RFr),e(Et,Zc),e(Zc,BFr),e(Zc,U2e),e(U2e,PFr),e(Zc,$Fr),e(Zc,gW),e(gW,IFr),e(Zc,qFr),e(Et,NFr),e(Et,J2e),e(J2e,jFr),e(Et,DFr),g(H8,Et,null),e(xr,GFr),e(xr,wo),g(U8,wo,null),e(wo,OFr),e(wo,Y2e),e(Y2e,VFr),e(wo,XFr),e(wo,yn),e(yn,zFr),e(yn,K2e),e(K2e,QFr),e(yn,WFr),e(yn,Z2e),e(Z2e,HFr),e(yn,UFr),e(yn,e5e),e(e5e,JFr),e(yn,YFr),e(wo,KFr),e(wo,ee),e(ee,bT),e(bT,o5e),e(o5e,ZFr),e(bT,eTr),e(bT,hW),e(hW,oTr),e(bT,rTr),e(ee,tTr),e(ee,vT),e(vT,r5e),e(r5e,aTr),e(vT,nTr),e(vT,pW),e(pW,sTr),e(vT,lTr),e(ee,iTr),e(ee,FT),e(FT,t5e),e(t5e,dTr),e(FT,cTr),e(FT,_W),e(_W,fTr),e(FT,mTr),e(ee,gTr),e(ee,TT),e(TT,a5e),e(a5e,hTr),e(TT,pTr),e(TT,uW),e(uW,_Tr),e(TT,uTr),e(ee,bTr),e(ee,MT),e(MT,n5e),e(n5e,vTr),e(MT,FTr),e(MT,bW),e(bW,TTr),e(MT,MTr),e(ee,ETr),e(ee,ET),e(ET,s5e),e(s5e,CTr),e(ET,wTr),e(ET,vW),e(vW,ATr),e(ET,yTr),e(ee,LTr),e(ee,CT),e(CT,l5e),e(l5e,xTr),e(CT,kTr),e(CT,FW),e(FW,STr),e(CT,RTr),e(ee,BTr),e(ee,wT),e(wT,i5e),e(i5e,PTr),e(wT,$Tr),e(wT,TW),e(TW,ITr),e(wT,qTr),e(ee,NTr),e(ee,AT),e(AT,d5e),e(d5e,jTr),e(AT,DTr),e(AT,MW),e(MW,GTr),e(AT,OTr),e(ee,VTr),e(ee,yT),e(yT,c5e),e(c5e,XTr),e(yT,zTr),e(yT,EW),e(EW,QTr),e(yT,WTr),e(ee,HTr),e(ee,LT),e(LT,f5e),e(f5e,UTr),e(LT,JTr),e(LT,CW),e(CW,YTr),e(LT,KTr),e(ee,ZTr),e(ee,xT),e(xT,m5e),e(m5e,eMr),e(xT,oMr),e(xT,wW),e(wW,rMr),e(xT,tMr),e(ee,aMr),e(ee,kT),e(kT,g5e),e(g5e,nMr),e(kT,sMr),e(kT,AW),e(AW,lMr),e(kT,iMr),e(ee,dMr),e(ee,ST),e(ST,h5e),e(h5e,cMr),e(ST,fMr),e(ST,yW),e(yW,mMr),e(ST,gMr),e(ee,hMr),e(ee,RT),e(RT,p5e),e(p5e,pMr),e(RT,_Mr),e(RT,LW),e(LW,uMr),e(RT,bMr),e(ee,vMr),e(ee,BT),e(BT,_5e),e(_5e,FMr),e(BT,TMr),e(BT,xW),e(xW,MMr),e(BT,EMr),e(ee,CMr),e(ee,PT),e(PT,u5e),e(u5e,wMr),e(PT,AMr),e(PT,kW),e(kW,yMr),e(PT,LMr),e(ee,xMr),e(ee,$T),e($T,b5e),e(b5e,kMr),e($T,SMr),e($T,SW),e(SW,RMr),e($T,BMr),e(ee,PMr),e(ee,IT),e(IT,v5e),e(v5e,$Mr),e(IT,IMr),e(IT,RW),e(RW,qMr),e(IT,NMr),e(ee,jMr),e(ee,qT),e(qT,F5e),e(F5e,DMr),e(qT,GMr),e(qT,BW),e(BW,OMr),e(qT,VMr),e(wo,XMr),e(wo,T5e),e(T5e,zMr),e(wo,QMr),g(J8,wo,null),b(c,P$e,u),b(c,ef,u),e(ef,NT),e(NT,M5e),g(Y8,M5e,null),e(ef,WMr),e(ef,E5e),e(E5e,HMr),b(c,$$e,u),b(c,kr,u),g(K8,kr,null),e(kr,UMr),e(kr,of),e(of,JMr),e(of,PW),e(PW,YMr),e(of,KMr),e(of,$W),e($W,ZMr),e(of,eEr),e(kr,oEr),e(kr,Z8),e(Z8,rEr),e(Z8,C5e),e(C5e,tEr),e(Z8,aEr),e(kr,nEr),e(kr,Ct),g(eL,Ct,null),e(Ct,sEr),e(Ct,w5e),e(w5e,lEr),e(Ct,iEr),e(Ct,rf),e(rf,dEr),e(rf,A5e),e(A5e,cEr),e(rf,fEr),e(rf,IW),e(IW,mEr),e(rf,gEr),e(Ct,hEr),e(Ct,y5e),e(y5e,pEr),e(Ct,_Er),g(oL,Ct,null),e(kr,uEr),e(kr,Ao),g(rL,Ao,null),e(Ao,bEr),e(Ao,L5e),e(L5e,vEr),e(Ao,FEr),e(Ao,Ln),e(Ln,TEr),e(Ln,x5e),e(x5e,MEr),e(Ln,EEr),e(Ln,k5e),e(k5e,CEr),e(Ln,wEr),e(Ln,S5e),e(S5e,AEr),e(Ln,yEr),e(Ao,LEr),e(Ao,R5e),e(R5e,jT),e(jT,B5e),e(B5e,xEr),e(jT,kEr),e(jT,qW),e(qW,SEr),e(jT,REr),e(Ao,BEr),e(Ao,P5e),e(P5e,PEr),e(Ao,$Er),g(tL,Ao,null),b(c,I$e,u),b(c,tf,u),e(tf,DT),e(DT,$5e),g(aL,$5e,null),e(tf,IEr),e(tf,I5e),e(I5e,qEr),b(c,q$e,u),b(c,Sr,u),g(nL,Sr,null),e(Sr,NEr),e(Sr,af),e(af,jEr),e(af,NW),e(NW,DEr),e(af,GEr),e(af,jW),e(jW,OEr),e(af,VEr),e(Sr,XEr),e(Sr,sL),e(sL,zEr),e(sL,q5e),e(q5e,QEr),e(sL,WEr),e(Sr,HEr),e(Sr,wt),g(lL,wt,null),e(wt,UEr),e(wt,N5e),e(N5e,JEr),e(wt,YEr),e(wt,nf),e(nf,KEr),e(nf,j5e),e(j5e,ZEr),e(nf,eCr),e(nf,DW),e(DW,oCr),e(nf,rCr),e(wt,tCr),e(wt,D5e),e(D5e,aCr),e(wt,nCr),g(iL,wt,null),e(Sr,sCr),e(Sr,yo),g(dL,yo,null),e(yo,lCr),e(yo,G5e),e(G5e,iCr),e(yo,dCr),e(yo,xn),e(xn,cCr),e(xn,O5e),e(O5e,fCr),e(xn,mCr),e(xn,V5e),e(V5e,gCr),e(xn,hCr),e(xn,X5e),e(X5e,pCr),e(xn,_Cr),e(yo,uCr),e(yo,z5e),e(z5e,GT),e(GT,Q5e),e(Q5e,bCr),e(GT,vCr),e(GT,GW),e(GW,FCr),e(GT,TCr),e(yo,MCr),e(yo,W5e),e(W5e,ECr),e(yo,CCr),g(cL,yo,null),b(c,N$e,u),b(c,sf,u),e(sf,OT),e(OT,H5e),g(fL,H5e,null),e(sf,wCr),e(sf,U5e),e(U5e,ACr),b(c,j$e,u),b(c,Rr,u),g(mL,Rr,null),e(Rr,yCr),e(Rr,lf),e(lf,LCr),e(lf,OW),e(OW,xCr),e(lf,kCr),e(lf,VW),e(VW,SCr),e(lf,RCr),e(Rr,BCr),e(Rr,gL),e(gL,PCr),e(gL,J5e),e(J5e,$Cr),e(gL,ICr),e(Rr,qCr),e(Rr,At),g(hL,At,null),e(At,NCr),e(At,Y5e),e(Y5e,jCr),e(At,DCr),e(At,df),e(df,GCr),e(df,K5e),e(K5e,OCr),e(df,VCr),e(df,XW),e(XW,XCr),e(df,zCr),e(At,QCr),e(At,Z5e),e(Z5e,WCr),e(At,HCr),g(pL,At,null),e(Rr,UCr),e(Rr,Lo),g(_L,Lo,null),e(Lo,JCr),e(Lo,e3e),e(e3e,YCr),e(Lo,KCr),e(Lo,kn),e(kn,ZCr),e(kn,o3e),e(o3e,ewr),e(kn,owr),e(kn,r3e),e(r3e,rwr),e(kn,twr),e(kn,t3e),e(t3e,awr),e(kn,nwr),e(Lo,swr),e(Lo,z),e(z,VT),e(VT,a3e),e(a3e,lwr),e(VT,iwr),e(VT,zW),e(zW,dwr),e(VT,cwr),e(z,fwr),e(z,XT),e(XT,n3e),e(n3e,mwr),e(XT,gwr),e(XT,QW),e(QW,hwr),e(XT,pwr),e(z,_wr),e(z,zT),e(zT,s3e),e(s3e,uwr),e(zT,bwr),e(zT,WW),e(WW,vwr),e(zT,Fwr),e(z,Twr),e(z,QT),e(QT,l3e),e(l3e,Mwr),e(QT,Ewr),e(QT,HW),e(HW,Cwr),e(QT,wwr),e(z,Awr),e(z,WT),e(WT,i3e),e(i3e,ywr),e(WT,Lwr),e(WT,UW),e(UW,xwr),e(WT,kwr),e(z,Swr),e(z,HT),e(HT,d3e),e(d3e,Rwr),e(HT,Bwr),e(HT,JW),e(JW,Pwr),e(HT,$wr),e(z,Iwr),e(z,UT),e(UT,c3e),e(c3e,qwr),e(UT,Nwr),e(UT,YW),e(YW,jwr),e(UT,Dwr),e(z,Gwr),e(z,JT),e(JT,f3e),e(f3e,Owr),e(JT,Vwr),e(JT,KW),e(KW,Xwr),e(JT,zwr),e(z,Qwr),e(z,YT),e(YT,m3e),e(m3e,Wwr),e(YT,Hwr),e(YT,ZW),e(ZW,Uwr),e(YT,Jwr),e(z,Ywr),e(z,KT),e(KT,g3e),e(g3e,Kwr),e(KT,Zwr),e(KT,eH),e(eH,eAr),e(KT,oAr),e(z,rAr),e(z,ZT),e(ZT,h3e),e(h3e,tAr),e(ZT,aAr),e(ZT,oH),e(oH,nAr),e(ZT,sAr),e(z,lAr),e(z,eM),e(eM,p3e),e(p3e,iAr),e(eM,dAr),e(eM,rH),e(rH,cAr),e(eM,fAr),e(z,mAr),e(z,oM),e(oM,_3e),e(_3e,gAr),e(oM,hAr),e(oM,tH),e(tH,pAr),e(oM,_Ar),e(z,uAr),e(z,rM),e(rM,u3e),e(u3e,bAr),e(rM,vAr),e(rM,aH),e(aH,FAr),e(rM,TAr),e(z,MAr),e(z,tM),e(tM,b3e),e(b3e,EAr),e(tM,CAr),e(tM,nH),e(nH,wAr),e(tM,AAr),e(z,yAr),e(z,aM),e(aM,v3e),e(v3e,LAr),e(aM,xAr),e(aM,sH),e(sH,kAr),e(aM,SAr),e(z,RAr),e(z,nM),e(nM,F3e),e(F3e,BAr),e(nM,PAr),e(nM,lH),e(lH,$Ar),e(nM,IAr),e(z,qAr),e(z,sM),e(sM,T3e),e(T3e,NAr),e(sM,jAr),e(sM,iH),e(iH,DAr),e(sM,GAr),e(z,OAr),e(z,lM),e(lM,M3e),e(M3e,VAr),e(lM,XAr),e(lM,dH),e(dH,zAr),e(lM,QAr),e(z,WAr),e(z,iM),e(iM,E3e),e(E3e,HAr),e(iM,UAr),e(iM,cH),e(cH,JAr),e(iM,YAr),e(z,KAr),e(z,dM),e(dM,C3e),e(C3e,ZAr),e(dM,e0r),e(dM,fH),e(fH,o0r),e(dM,r0r),e(z,t0r),e(z,cM),e(cM,w3e),e(w3e,a0r),e(cM,n0r),e(cM,mH),e(mH,s0r),e(cM,l0r),e(z,i0r),e(z,fM),e(fM,A3e),e(A3e,d0r),e(fM,c0r),e(fM,gH),e(gH,f0r),e(fM,m0r),e(z,g0r),e(z,mM),e(mM,y3e),e(y3e,h0r),e(mM,p0r),e(mM,hH),e(hH,_0r),e(mM,u0r),e(z,b0r),e(z,gM),e(gM,L3e),e(L3e,v0r),e(gM,F0r),e(gM,pH),e(pH,T0r),e(gM,M0r),e(Lo,E0r),e(Lo,x3e),e(x3e,C0r),e(Lo,w0r),g(uL,Lo,null),b(c,D$e,u),b(c,cf,u),e(cf,hM),e(hM,k3e),g(bL,k3e,null),e(cf,A0r),e(cf,S3e),e(S3e,y0r),b(c,G$e,u),b(c,Br,u),g(vL,Br,null),e(Br,L0r),e(Br,ff),e(ff,x0r),e(ff,_H),e(_H,k0r),e(ff,S0r),e(ff,uH),e(uH,R0r),e(ff,B0r),e(Br,P0r),e(Br,FL),e(FL,$0r),e(FL,R3e),e(R3e,I0r),e(FL,q0r),e(Br,N0r),e(Br,yt),g(TL,yt,null),e(yt,j0r),e(yt,B3e),e(B3e,D0r),e(yt,G0r),e(yt,mf),e(mf,O0r),e(mf,P3e),e(P3e,V0r),e(mf,X0r),e(mf,bH),e(bH,z0r),e(mf,Q0r),e(yt,W0r),e(yt,$3e),e($3e,H0r),e(yt,U0r),g(ML,yt,null),e(Br,J0r),e(Br,xo),g(EL,xo,null),e(xo,Y0r),e(xo,I3e),e(I3e,K0r),e(xo,Z0r),e(xo,Sn),e(Sn,eyr),e(Sn,q3e),e(q3e,oyr),e(Sn,ryr),e(Sn,N3e),e(N3e,tyr),e(Sn,ayr),e(Sn,j3e),e(j3e,nyr),e(Sn,syr),e(xo,lyr),e(xo,ca),e(ca,pM),e(pM,D3e),e(D3e,iyr),e(pM,dyr),e(pM,vH),e(vH,cyr),e(pM,fyr),e(ca,myr),e(ca,_M),e(_M,G3e),e(G3e,gyr),e(_M,hyr),e(_M,FH),e(FH,pyr),e(_M,_yr),e(ca,uyr),e(ca,uM),e(uM,O3e),e(O3e,byr),e(uM,vyr),e(uM,TH),e(TH,Fyr),e(uM,Tyr),e(ca,Myr),e(ca,bM),e(bM,V3e),e(V3e,Eyr),e(bM,Cyr),e(bM,MH),e(MH,wyr),e(bM,Ayr),e(ca,yyr),e(ca,vM),e(vM,X3e),e(X3e,Lyr),e(vM,xyr),e(vM,EH),e(EH,kyr),e(vM,Syr),e(xo,Ryr),e(xo,z3e),e(z3e,Byr),e(xo,Pyr),g(CL,xo,null),b(c,O$e,u),b(c,gf,u),e(gf,FM),e(FM,Q3e),g(wL,Q3e,null),e(gf,$yr),e(gf,W3e),e(W3e,Iyr),b(c,V$e,u),b(c,Pr,u),g(AL,Pr,null),e(Pr,qyr),e(Pr,hf),e(hf,Nyr),e(hf,CH),e(CH,jyr),e(hf,Dyr),e(hf,wH),e(wH,Gyr),e(hf,Oyr),e(Pr,Vyr),e(Pr,yL),e(yL,Xyr),e(yL,H3e),e(H3e,zyr),e(yL,Qyr),e(Pr,Wyr),e(Pr,Lt),g(LL,Lt,null),e(Lt,Hyr),e(Lt,U3e),e(U3e,Uyr),e(Lt,Jyr),e(Lt,pf),e(pf,Yyr),e(pf,J3e),e(J3e,Kyr),e(pf,Zyr),e(pf,AH),e(AH,e8r),e(pf,o8r),e(Lt,r8r),e(Lt,Y3e),e(Y3e,t8r),e(Lt,a8r),g(xL,Lt,null),e(Pr,n8r),e(Pr,ko),g(kL,ko,null),e(ko,s8r),e(ko,K3e),e(K3e,l8r),e(ko,i8r),e(ko,Rn),e(Rn,d8r),e(Rn,Z3e),e(Z3e,c8r),e(Rn,f8r),e(Rn,e6e),e(e6e,m8r),e(Rn,g8r),e(Rn,o6e),e(o6e,h8r),e(Rn,p8r),e(ko,_8r),e(ko,he),e(he,TM),e(TM,r6e),e(r6e,u8r),e(TM,b8r),e(TM,yH),e(yH,v8r),e(TM,F8r),e(he,T8r),e(he,MM),e(MM,t6e),e(t6e,M8r),e(MM,E8r),e(MM,LH),e(LH,C8r),e(MM,w8r),e(he,A8r),e(he,EM),e(EM,a6e),e(a6e,y8r),e(EM,L8r),e(EM,xH),e(xH,x8r),e(EM,k8r),e(he,S8r),e(he,CM),e(CM,n6e),e(n6e,R8r),e(CM,B8r),e(CM,kH),e(kH,P8r),e(CM,$8r),e(he,I8r),e(he,wM),e(wM,s6e),e(s6e,q8r),e(wM,N8r),e(wM,SH),e(SH,j8r),e(wM,D8r),e(he,G8r),e(he,AM),e(AM,l6e),e(l6e,O8r),e(AM,V8r),e(AM,RH),e(RH,X8r),e(AM,z8r),e(he,Q8r),e(he,yM),e(yM,i6e),e(i6e,W8r),e(yM,H8r),e(yM,BH),e(BH,U8r),e(yM,J8r),e(he,Y8r),e(he,LM),e(LM,d6e),e(d6e,K8r),e(LM,Z8r),e(LM,PH),e(PH,eLr),e(LM,oLr),e(he,rLr),e(he,xM),e(xM,c6e),e(c6e,tLr),e(xM,aLr),e(xM,$H),e($H,nLr),e(xM,sLr),e(he,lLr),e(he,kM),e(kM,f6e),e(f6e,iLr),e(kM,dLr),e(kM,IH),e(IH,cLr),e(kM,fLr),e(he,mLr),e(he,SM),e(SM,m6e),e(m6e,gLr),e(SM,hLr),e(SM,qH),e(qH,pLr),e(SM,_Lr),e(he,uLr),e(he,RM),e(RM,g6e),e(g6e,bLr),e(RM,vLr),e(RM,NH),e(NH,FLr),e(RM,TLr),e(ko,MLr),e(ko,h6e),e(h6e,ELr),e(ko,CLr),g(SL,ko,null),b(c,X$e,u),b(c,_f,u),e(_f,BM),e(BM,p6e),g(RL,p6e,null),e(_f,wLr),e(_f,_6e),e(_6e,ALr),b(c,z$e,u),b(c,$r,u),g(BL,$r,null),e($r,yLr),e($r,uf),e(uf,LLr),e(uf,jH),e(jH,xLr),e(uf,kLr),e(uf,DH),e(DH,SLr),e(uf,RLr),e($r,BLr),e($r,PL),e(PL,PLr),e(PL,u6e),e(u6e,$Lr),e(PL,ILr),e($r,qLr),e($r,xt),g($L,xt,null),e(xt,NLr),e(xt,b6e),e(b6e,jLr),e(xt,DLr),e(xt,bf),e(bf,GLr),e(bf,v6e),e(v6e,OLr),e(bf,VLr),e(bf,GH),e(GH,XLr),e(bf,zLr),e(xt,QLr),e(xt,F6e),e(F6e,WLr),e(xt,HLr),g(IL,xt,null),e($r,ULr),e($r,So),g(qL,So,null),e(So,JLr),e(So,T6e),e(T6e,YLr),e(So,KLr),e(So,Bn),e(Bn,ZLr),e(Bn,M6e),e(M6e,e7r),e(Bn,o7r),e(Bn,E6e),e(E6e,r7r),e(Bn,t7r),e(Bn,C6e),e(C6e,a7r),e(Bn,n7r),e(So,s7r),e(So,Te),e(Te,PM),e(PM,w6e),e(w6e,l7r),e(PM,i7r),e(PM,OH),e(OH,d7r),e(PM,c7r),e(Te,f7r),e(Te,$M),e($M,A6e),e(A6e,m7r),e($M,g7r),e($M,VH),e(VH,h7r),e($M,p7r),e(Te,_7r),e(Te,IM),e(IM,y6e),e(y6e,u7r),e(IM,b7r),e(IM,XH),e(XH,v7r),e(IM,F7r),e(Te,T7r),e(Te,qM),e(qM,L6e),e(L6e,M7r),e(qM,E7r),e(qM,zH),e(zH,C7r),e(qM,w7r),e(Te,A7r),e(Te,NM),e(NM,x6e),e(x6e,y7r),e(NM,L7r),e(NM,QH),e(QH,x7r),e(NM,k7r),e(Te,S7r),e(Te,jM),e(jM,k6e),e(k6e,R7r),e(jM,B7r),e(jM,WH),e(WH,P7r),e(jM,$7r),e(Te,I7r),e(Te,DM),e(DM,S6e),e(S6e,q7r),e(DM,N7r),e(DM,HH),e(HH,j7r),e(DM,D7r),e(Te,G7r),e(Te,GM),e(GM,R6e),e(R6e,O7r),e(GM,V7r),e(GM,UH),e(UH,X7r),e(GM,z7r),e(Te,Q7r),e(Te,OM),e(OM,B6e),e(B6e,W7r),e(OM,H7r),e(OM,JH),e(JH,U7r),e(OM,J7r),e(Te,Y7r),e(Te,VM),e(VM,P6e),e(P6e,K7r),e(VM,Z7r),e(VM,YH),e(YH,e9r),e(VM,o9r),e(So,r9r),e(So,$6e),e($6e,t9r),e(So,a9r),g(NL,So,null),b(c,Q$e,u),b(c,vf,u),e(vf,XM),e(XM,I6e),g(jL,I6e,null),e(vf,n9r),e(vf,q6e),e(q6e,s9r),b(c,W$e,u),b(c,Ir,u),g(DL,Ir,null),e(Ir,l9r),e(Ir,Ff),e(Ff,i9r),e(Ff,KH),e(KH,d9r),e(Ff,c9r),e(Ff,ZH),e(ZH,f9r),e(Ff,m9r),e(Ir,g9r),e(Ir,GL),e(GL,h9r),e(GL,N6e),e(N6e,p9r),e(GL,_9r),e(Ir,u9r),e(Ir,kt),g(OL,kt,null),e(kt,b9r),e(kt,j6e),e(j6e,v9r),e(kt,F9r),e(kt,Tf),e(Tf,T9r),e(Tf,D6e),e(D6e,M9r),e(Tf,E9r),e(Tf,eU),e(eU,C9r),e(Tf,w9r),e(kt,A9r),e(kt,G6e),e(G6e,y9r),e(kt,L9r),g(VL,kt,null),e(Ir,x9r),e(Ir,Ro),g(XL,Ro,null),e(Ro,k9r),e(Ro,O6e),e(O6e,S9r),e(Ro,R9r),e(Ro,Pn),e(Pn,B9r),e(Pn,V6e),e(V6e,P9r),e(Pn,$9r),e(Pn,X6e),e(X6e,I9r),e(Pn,q9r),e(Pn,z6e),e(z6e,N9r),e(Pn,j9r),e(Ro,D9r),e(Ro,we),e(we,zM),e(zM,Q6e),e(Q6e,G9r),e(zM,O9r),e(zM,oU),e(oU,V9r),e(zM,X9r),e(we,z9r),e(we,QM),e(QM,W6e),e(W6e,Q9r),e(QM,W9r),e(QM,rU),e(rU,H9r),e(QM,U9r),e(we,J9r),e(we,WM),e(WM,H6e),e(H6e,Y9r),e(WM,K9r),e(WM,tU),e(tU,Z9r),e(WM,exr),e(we,oxr),e(we,HM),e(HM,U6e),e(U6e,rxr),e(HM,txr),e(HM,aU),e(aU,axr),e(HM,nxr),e(we,sxr),e(we,UM),e(UM,J6e),e(J6e,lxr),e(UM,ixr),e(UM,nU),e(nU,dxr),e(UM,cxr),e(we,fxr),e(we,JM),e(JM,Y6e),e(Y6e,mxr),e(JM,gxr),e(JM,sU),e(sU,hxr),e(JM,pxr),e(we,_xr),e(we,YM),e(YM,K6e),e(K6e,uxr),e(YM,bxr),e(YM,lU),e(lU,vxr),e(YM,Fxr),e(we,Txr),e(we,KM),e(KM,Z6e),e(Z6e,Mxr),e(KM,Exr),e(KM,iU),e(iU,Cxr),e(KM,wxr),e(we,Axr),e(we,ZM),e(ZM,eve),e(eve,yxr),e(ZM,Lxr),e(ZM,dU),e(dU,xxr),e(ZM,kxr),e(Ro,Sxr),e(Ro,ove),e(ove,Rxr),e(Ro,Bxr),g(zL,Ro,null),b(c,H$e,u),b(c,Mf,u),e(Mf,eE),e(eE,rve),g(QL,rve,null),e(Mf,Pxr),e(Mf,tve),e(tve,$xr),b(c,U$e,u),b(c,qr,u),g(WL,qr,null),e(qr,Ixr),e(qr,Ef),e(Ef,qxr),e(Ef,cU),e(cU,Nxr),e(Ef,jxr),e(Ef,fU),e(fU,Dxr),e(Ef,Gxr),e(qr,Oxr),e(qr,HL),e(HL,Vxr),e(HL,ave),e(ave,Xxr),e(HL,zxr),e(qr,Qxr),e(qr,St),g(UL,St,null),e(St,Wxr),e(St,nve),e(nve,Hxr),e(St,Uxr),e(St,Cf),e(Cf,Jxr),e(Cf,sve),e(sve,Yxr),e(Cf,Kxr),e(Cf,mU),e(mU,Zxr),e(Cf,ekr),e(St,okr),e(St,lve),e(lve,rkr),e(St,tkr),g(JL,St,null),e(qr,akr),e(qr,Bo),g(YL,Bo,null),e(Bo,nkr),e(Bo,ive),e(ive,skr),e(Bo,lkr),e(Bo,$n),e($n,ikr),e($n,dve),e(dve,dkr),e($n,ckr),e($n,cve),e(cve,fkr),e($n,mkr),e($n,fve),e(fve,gkr),e($n,hkr),e(Bo,pkr),e(Bo,Me),e(Me,oE),e(oE,mve),e(mve,_kr),e(oE,ukr),e(oE,gU),e(gU,bkr),e(oE,vkr),e(Me,Fkr),e(Me,rE),e(rE,gve),e(gve,Tkr),e(rE,Mkr),e(rE,hU),e(hU,Ekr),e(rE,Ckr),e(Me,wkr),e(Me,tE),e(tE,hve),e(hve,Akr),e(tE,ykr),e(tE,pU),e(pU,Lkr),e(tE,xkr),e(Me,kkr),e(Me,aE),e(aE,pve),e(pve,Skr),e(aE,Rkr),e(aE,_U),e(_U,Bkr),e(aE,Pkr),e(Me,$kr),e(Me,nE),e(nE,_ve),e(_ve,Ikr),e(nE,qkr),e(nE,uU),e(uU,Nkr),e(nE,jkr),e(Me,Dkr),e(Me,sE),e(sE,uve),e(uve,Gkr),e(sE,Okr),e(sE,bU),e(bU,Vkr),e(sE,Xkr),e(Me,zkr),e(Me,lE),e(lE,bve),e(bve,Qkr),e(lE,Wkr),e(lE,vU),e(vU,Hkr),e(lE,Ukr),e(Me,Jkr),e(Me,iE),e(iE,vve),e(vve,Ykr),e(iE,Kkr),e(iE,FU),e(FU,Zkr),e(iE,eSr),e(Me,oSr),e(Me,dE),e(dE,Fve),e(Fve,rSr),e(dE,tSr),e(dE,TU),e(TU,aSr),e(dE,nSr),e(Me,sSr),e(Me,cE),e(cE,Tve),e(Tve,lSr),e(cE,iSr),e(cE,MU),e(MU,dSr),e(cE,cSr),e(Bo,fSr),e(Bo,Mve),e(Mve,mSr),e(Bo,gSr),g(KL,Bo,null),b(c,J$e,u),b(c,wf,u),e(wf,fE),e(fE,Eve),g(ZL,Eve,null),e(wf,hSr),e(wf,Cve),e(Cve,pSr),b(c,Y$e,u),b(c,Nr,u),g(e7,Nr,null),e(Nr,_Sr),e(Nr,Af),e(Af,uSr),e(Af,EU),e(EU,bSr),e(Af,vSr),e(Af,CU),e(CU,FSr),e(Af,TSr),e(Nr,MSr),e(Nr,o7),e(o7,ESr),e(o7,wve),e(wve,CSr),e(o7,wSr),e(Nr,ASr),e(Nr,Rt),g(r7,Rt,null),e(Rt,ySr),e(Rt,Ave),e(Ave,LSr),e(Rt,xSr),e(Rt,yf),e(yf,kSr),e(yf,yve),e(yve,SSr),e(yf,RSr),e(yf,wU),e(wU,BSr),e(yf,PSr),e(Rt,$Sr),e(Rt,Lve),e(Lve,ISr),e(Rt,qSr),g(t7,Rt,null),e(Nr,NSr),e(Nr,Po),g(a7,Po,null),e(Po,jSr),e(Po,xve),e(xve,DSr),e(Po,GSr),e(Po,In),e(In,OSr),e(In,kve),e(kve,VSr),e(In,XSr),e(In,Sve),e(Sve,zSr),e(In,QSr),e(In,Rve),e(Rve,WSr),e(In,HSr),e(Po,USr),e(Po,Ee),e(Ee,mE),e(mE,Bve),e(Bve,JSr),e(mE,YSr),e(mE,AU),e(AU,KSr),e(mE,ZSr),e(Ee,eRr),e(Ee,gE),e(gE,Pve),e(Pve,oRr),e(gE,rRr),e(gE,yU),e(yU,tRr),e(gE,aRr),e(Ee,nRr),e(Ee,hE),e(hE,$ve),e($ve,sRr),e(hE,lRr),e(hE,LU),e(LU,iRr),e(hE,dRr),e(Ee,cRr),e(Ee,pE),e(pE,Ive),e(Ive,fRr),e(pE,mRr),e(pE,xU),e(xU,gRr),e(pE,hRr),e(Ee,pRr),e(Ee,_E),e(_E,qve),e(qve,_Rr),e(_E,uRr),e(_E,kU),e(kU,bRr),e(_E,vRr),e(Ee,FRr),e(Ee,uE),e(uE,Nve),e(Nve,TRr),e(uE,MRr),e(uE,SU),e(SU,ERr),e(uE,CRr),e(Ee,wRr),e(Ee,bE),e(bE,jve),e(jve,ARr),e(bE,yRr),e(bE,RU),e(RU,LRr),e(bE,xRr),e(Ee,kRr),e(Ee,vE),e(vE,Dve),e(Dve,SRr),e(vE,RRr),e(vE,BU),e(BU,BRr),e(vE,PRr),e(Ee,$Rr),e(Ee,FE),e(FE,Gve),e(Gve,IRr),e(FE,qRr),e(FE,PU),e(PU,NRr),e(FE,jRr),e(Ee,DRr),e(Ee,TE),e(TE,Ove),e(Ove,GRr),e(TE,ORr),e(TE,$U),e($U,VRr),e(TE,XRr),e(Po,zRr),e(Po,Vve),e(Vve,QRr),e(Po,WRr),g(n7,Po,null),b(c,K$e,u),b(c,Lf,u),e(Lf,ME),e(ME,Xve),g(s7,Xve,null),e(Lf,HRr),e(Lf,zve),e(zve,URr),b(c,Z$e,u),b(c,jr,u),g(l7,jr,null),e(jr,JRr),e(jr,xf),e(xf,YRr),e(xf,IU),e(IU,KRr),e(xf,ZRr),e(xf,qU),e(qU,eBr),e(xf,oBr),e(jr,rBr),e(jr,i7),e(i7,tBr),e(i7,Qve),e(Qve,aBr),e(i7,nBr),e(jr,sBr),e(jr,Bt),g(d7,Bt,null),e(Bt,lBr),e(Bt,Wve),e(Wve,iBr),e(Bt,dBr),e(Bt,kf),e(kf,cBr),e(kf,Hve),e(Hve,fBr),e(kf,mBr),e(kf,NU),e(NU,gBr),e(kf,hBr),e(Bt,pBr),e(Bt,Uve),e(Uve,_Br),e(Bt,uBr),g(c7,Bt,null),e(jr,bBr),e(jr,$o),g(f7,$o,null),e($o,vBr),e($o,Jve),e(Jve,FBr),e($o,TBr),e($o,qn),e(qn,MBr),e(qn,Yve),e(Yve,EBr),e(qn,CBr),e(qn,Kve),e(Kve,wBr),e(qn,ABr),e(qn,Zve),e(Zve,yBr),e(qn,LBr),e($o,xBr),e($o,Pe),e(Pe,EE),e(EE,eFe),e(eFe,kBr),e(EE,SBr),e(EE,jU),e(jU,RBr),e(EE,BBr),e(Pe,PBr),e(Pe,CE),e(CE,oFe),e(oFe,$Br),e(CE,IBr),e(CE,DU),e(DU,qBr),e(CE,NBr),e(Pe,jBr),e(Pe,wE),e(wE,rFe),e(rFe,DBr),e(wE,GBr),e(wE,GU),e(GU,OBr),e(wE,VBr),e(Pe,XBr),e(Pe,AE),e(AE,tFe),e(tFe,zBr),e(AE,QBr),e(AE,OU),e(OU,WBr),e(AE,HBr),e(Pe,UBr),e(Pe,yE),e(yE,aFe),e(aFe,JBr),e(yE,YBr),e(yE,VU),e(VU,KBr),e(yE,ZBr),e(Pe,ePr),e(Pe,LE),e(LE,nFe),e(nFe,oPr),e(LE,rPr),e(LE,XU),e(XU,tPr),e(LE,aPr),e(Pe,nPr),e(Pe,xE),e(xE,sFe),e(sFe,sPr),e(xE,lPr),e(xE,zU),e(zU,iPr),e(xE,dPr),e(Pe,cPr),e(Pe,kE),e(kE,lFe),e(lFe,fPr),e(kE,mPr),e(kE,QU),e(QU,gPr),e(kE,hPr),e($o,pPr),e($o,iFe),e(iFe,_Pr),e($o,uPr),g(m7,$o,null),b(c,eIe,u),b(c,Sf,u),e(Sf,SE),e(SE,dFe),g(g7,dFe,null),e(Sf,bPr),e(Sf,cFe),e(cFe,vPr),b(c,oIe,u),b(c,Dr,u),g(h7,Dr,null),e(Dr,FPr),e(Dr,Rf),e(Rf,TPr),e(Rf,WU),e(WU,MPr),e(Rf,EPr),e(Rf,HU),e(HU,CPr),e(Rf,wPr),e(Dr,APr),e(Dr,p7),e(p7,yPr),e(p7,fFe),e(fFe,LPr),e(p7,xPr),e(Dr,kPr),e(Dr,Pt),g(_7,Pt,null),e(Pt,SPr),e(Pt,mFe),e(mFe,RPr),e(Pt,BPr),e(Pt,Bf),e(Bf,PPr),e(Bf,gFe),e(gFe,$Pr),e(Bf,IPr),e(Bf,UU),e(UU,qPr),e(Bf,NPr),e(Pt,jPr),e(Pt,hFe),e(hFe,DPr),e(Pt,GPr),g(u7,Pt,null),e(Dr,OPr),e(Dr,Io),g(b7,Io,null),e(Io,VPr),e(Io,pFe),e(pFe,XPr),e(Io,zPr),e(Io,Nn),e(Nn,QPr),e(Nn,_Fe),e(_Fe,WPr),e(Nn,HPr),e(Nn,uFe),e(uFe,UPr),e(Nn,JPr),e(Nn,bFe),e(bFe,YPr),e(Nn,KPr),e(Io,ZPr),e(Io,$e),e($e,RE),e(RE,vFe),e(vFe,e$r),e(RE,o$r),e(RE,JU),e(JU,r$r),e(RE,t$r),e($e,a$r),e($e,BE),e(BE,FFe),e(FFe,n$r),e(BE,s$r),e(BE,YU),e(YU,l$r),e(BE,i$r),e($e,d$r),e($e,PE),e(PE,TFe),e(TFe,c$r),e(PE,f$r),e(PE,KU),e(KU,m$r),e(PE,g$r),e($e,h$r),e($e,$E),e($E,MFe),e(MFe,p$r),e($E,_$r),e($E,ZU),e(ZU,u$r),e($E,b$r),e($e,v$r),e($e,IE),e(IE,EFe),e(EFe,F$r),e(IE,T$r),e(IE,eJ),e(eJ,M$r),e(IE,E$r),e($e,C$r),e($e,qE),e(qE,CFe),e(CFe,w$r),e(qE,A$r),e(qE,oJ),e(oJ,y$r),e(qE,L$r),e($e,x$r),e($e,NE),e(NE,wFe),e(wFe,k$r),e(NE,S$r),e(NE,rJ),e(rJ,R$r),e(NE,B$r),e($e,P$r),e($e,jE),e(jE,AFe),e(AFe,$$r),e(jE,I$r),e(jE,tJ),e(tJ,q$r),e(jE,N$r),e(Io,j$r),e(Io,yFe),e(yFe,D$r),e(Io,G$r),g(v7,Io,null),b(c,rIe,u),b(c,Pf,u),e(Pf,DE),e(DE,LFe),g(F7,LFe,null),e(Pf,O$r),e(Pf,xFe),e(xFe,V$r),b(c,tIe,u),b(c,Gr,u),g(T7,Gr,null),e(Gr,X$r),e(Gr,$f),e($f,z$r),e($f,aJ),e(aJ,Q$r),e($f,W$r),e($f,nJ),e(nJ,H$r),e($f,U$r),e(Gr,J$r),e(Gr,M7),e(M7,Y$r),e(M7,kFe),e(kFe,K$r),e(M7,Z$r),e(Gr,eIr),e(Gr,$t),g(E7,$t,null),e($t,oIr),e($t,SFe),e(SFe,rIr),e($t,tIr),e($t,If),e(If,aIr),e(If,RFe),e(RFe,nIr),e(If,sIr),e(If,sJ),e(sJ,lIr),e(If,iIr),e($t,dIr),e($t,BFe),e(BFe,cIr),e($t,fIr),g(C7,$t,null),e(Gr,mIr),e(Gr,qo),g(w7,qo,null),e(qo,gIr),e(qo,PFe),e(PFe,hIr),e(qo,pIr),e(qo,jn),e(jn,_Ir),e(jn,$Fe),e($Fe,uIr),e(jn,bIr),e(jn,IFe),e(IFe,vIr),e(jn,FIr),e(jn,qFe),e(qFe,TIr),e(jn,MIr),e(qo,EIr),e(qo,NFe),e(NFe,GE),e(GE,jFe),e(jFe,CIr),e(GE,wIr),e(GE,lJ),e(lJ,AIr),e(GE,yIr),e(qo,LIr),e(qo,DFe),e(DFe,xIr),e(qo,kIr),g(A7,qo,null),b(c,aIe,u),b(c,qf,u),e(qf,OE),e(OE,GFe),g(y7,GFe,null),e(qf,SIr),e(qf,OFe),e(OFe,RIr),b(c,nIe,u),b(c,Or,u),g(L7,Or,null),e(Or,BIr),e(Or,Nf),e(Nf,PIr),e(Nf,iJ),e(iJ,$Ir),e(Nf,IIr),e(Nf,dJ),e(dJ,qIr),e(Nf,NIr),e(Or,jIr),e(Or,x7),e(x7,DIr),e(x7,VFe),e(VFe,GIr),e(x7,OIr),e(Or,VIr),e(Or,It),g(k7,It,null),e(It,XIr),e(It,XFe),e(XFe,zIr),e(It,QIr),e(It,jf),e(jf,WIr),e(jf,zFe),e(zFe,HIr),e(jf,UIr),e(jf,cJ),e(cJ,JIr),e(jf,YIr),e(It,KIr),e(It,QFe),e(QFe,ZIr),e(It,eqr),g(S7,It,null),e(Or,oqr),e(Or,No),g(R7,No,null),e(No,rqr),e(No,WFe),e(WFe,tqr),e(No,aqr),e(No,Dn),e(Dn,nqr),e(Dn,HFe),e(HFe,sqr),e(Dn,lqr),e(Dn,UFe),e(UFe,iqr),e(Dn,dqr),e(Dn,JFe),e(JFe,cqr),e(Dn,fqr),e(No,mqr),e(No,B7),e(B7,VE),e(VE,YFe),e(YFe,gqr),e(VE,hqr),e(VE,fJ),e(fJ,pqr),e(VE,_qr),e(B7,uqr),e(B7,XE),e(XE,KFe),e(KFe,bqr),e(XE,vqr),e(XE,mJ),e(mJ,Fqr),e(XE,Tqr),e(No,Mqr),e(No,ZFe),e(ZFe,Eqr),e(No,Cqr),g(P7,No,null),b(c,sIe,u),b(c,Df,u),e(Df,zE),e(zE,eTe),g($7,eTe,null),e(Df,wqr),e(Df,oTe),e(oTe,Aqr),b(c,lIe,u),b(c,Vr,u),g(I7,Vr,null),e(Vr,yqr),e(Vr,Gf),e(Gf,Lqr),e(Gf,gJ),e(gJ,xqr),e(Gf,kqr),e(Gf,hJ),e(hJ,Sqr),e(Gf,Rqr),e(Vr,Bqr),e(Vr,q7),e(q7,Pqr),e(q7,rTe),e(rTe,$qr),e(q7,Iqr),e(Vr,qqr),e(Vr,qt),g(N7,qt,null),e(qt,Nqr),e(qt,tTe),e(tTe,jqr),e(qt,Dqr),e(qt,Of),e(Of,Gqr),e(Of,aTe),e(aTe,Oqr),e(Of,Vqr),e(Of,pJ),e(pJ,Xqr),e(Of,zqr),e(qt,Qqr),e(qt,nTe),e(nTe,Wqr),e(qt,Hqr),g(j7,qt,null),e(Vr,Uqr),e(Vr,jo),g(D7,jo,null),e(jo,Jqr),e(jo,sTe),e(sTe,Yqr),e(jo,Kqr),e(jo,Gn),e(Gn,Zqr),e(Gn,lTe),e(lTe,eNr),e(Gn,oNr),e(Gn,iTe),e(iTe,rNr),e(Gn,tNr),e(Gn,dTe),e(dTe,aNr),e(Gn,nNr),e(jo,sNr),e(jo,cTe),e(cTe,QE),e(QE,fTe),e(fTe,lNr),e(QE,iNr),e(QE,_J),e(_J,dNr),e(QE,cNr),e(jo,fNr),e(jo,mTe),e(mTe,mNr),e(jo,gNr),g(G7,jo,null),iIe=!0},p(c,[u]){const O7={};u&2&&(O7.$$scope={dirty:u,ctx:c}),Jf.$set(O7);const gTe={};u&2&&(gTe.$$scope={dirty:u,ctx:c}),Hh.$set(gTe);const hTe={};u&2&&(hTe.$$scope={dirty:u,ctx:c}),fp.$set(hTe)},i(c){iIe||(h(ue.$$.fragment,c),h(Da.$$.fragment,c),h(YC.$$.fragment,c),h(KC.$$.fragment,c),h(Jf.$$.fragment,c),h(ZC.$$.fragment,c),h(ew.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(uw.$$.fragment,c),h(Hh.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Fw.$$.fragment,c),h(Tw.$$.fragment,c),h(Cw.$$.fragment,c),h(fp.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(FA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(F0.$$.fragment,c),h(T0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Fy.$$.fragment,c),h(Ty.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(n8.$$.fragment,c),h(s8.$$.fragment,c),h(l8.$$.fragment,c),h(i8.$$.fragment,c),h(d8.$$.fragment,c),h(c8.$$.fragment,c),h(m8.$$.fragment,c),h(g8.$$.fragment,c),h(h8.$$.fragment,c),h(p8.$$.fragment,c),h(_8.$$.fragment,c),h(u8.$$.fragment,c),h(v8.$$.fragment,c),h(F8.$$.fragment,c),h(T8.$$.fragment,c),h(M8.$$.fragment,c),h(E8.$$.fragment,c),h(C8.$$.fragment,c),h(A8.$$.fragment,c),h(y8.$$.fragment,c),h(L8.$$.fragment,c),h(x8.$$.fragment,c),h(k8.$$.fragment,c),h(S8.$$.fragment,c),h(B8.$$.fragment,c),h(P8.$$.fragment,c),h($8.$$.fragment,c),h(I8.$$.fragment,c),h(q8.$$.fragment,c),h(N8.$$.fragment,c),h(D8.$$.fragment,c),h(G8.$$.fragment,c),h(O8.$$.fragment,c),h(V8.$$.fragment,c),h(X8.$$.fragment,c),h(z8.$$.fragment,c),h(W8.$$.fragment,c),h(H8.$$.fragment,c),h(U8.$$.fragment,c),h(J8.$$.fragment,c),h(Y8.$$.fragment,c),h(K8.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(SL.$$.fragment,c),h(RL.$$.fragment,c),h(BL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(qL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(DL.$$.fragment,c),h(OL.$$.fragment,c),h(VL.$$.fragment,c),h(XL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(WL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(e7.$$.fragment,c),h(r7.$$.fragment,c),h(t7.$$.fragment,c),h(a7.$$.fragment,c),h(n7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),h(d7.$$.fragment,c),h(c7.$$.fragment,c),h(f7.$$.fragment,c),h(m7.$$.fragment,c),h(g7.$$.fragment,c),h(h7.$$.fragment,c),h(_7.$$.fragment,c),h(u7.$$.fragment,c),h(b7.$$.fragment,c),h(v7.$$.fragment,c),h(F7.$$.fragment,c),h(T7.$$.fragment,c),h(E7.$$.fragment,c),h(C7.$$.fragment,c),h(w7.$$.fragment,c),h(A7.$$.fragment,c),h(y7.$$.fragment,c),h(L7.$$.fragment,c),h(k7.$$.fragment,c),h(S7.$$.fragment,c),h(R7.$$.fragment,c),h(P7.$$.fragment,c),h($7.$$.fragment,c),h(I7.$$.fragment,c),h(N7.$$.fragment,c),h(j7.$$.fragment,c),h(D7.$$.fragment,c),h(G7.$$.fragment,c),iIe=!0)},o(c){p(ue.$$.fragment,c),p(Da.$$.fragment,c),p(YC.$$.fragment,c),p(KC.$$.fragment,c),p(Jf.$$.fragment,c),p(ZC.$$.fragment,c),p(ew.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(uw.$$.fragment,c),p(Hh.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Fw.$$.fragment,c),p(Tw.$$.fragment,c),p(Cw.$$.fragment,c),p(fp.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(qw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(FA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(F0.$$.fragment,c),p(T0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(C0.$$.fragment,c),p(w0.$$.fragment,c),p(y0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(X0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Fy.$$.fragment,c),p(Ty.$$.fragment,c),p(Ey.$$.fragment,c),p(Cy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(Ry.$$.fragment,c),p(By.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(qy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(o8.$$.fragment,c),p(r8.$$.fragment,c),p(t8.$$.fragment,c),p(n8.$$.fragment,c),p(s8.$$.fragment,c),p(l8.$$.fragment,c),p(i8.$$.fragment,c),p(d8.$$.fragment,c),p(c8.$$.fragment,c),p(m8.$$.fragment,c),p(g8.$$.fragment,c),p(h8.$$.fragment,c),p(p8.$$.fragment,c),p(_8.$$.fragment,c),p(u8.$$.fragment,c),p(v8.$$.fragment,c),p(F8.$$.fragment,c),p(T8.$$.fragment,c),p(M8.$$.fragment,c),p(E8.$$.fragment,c),p(C8.$$.fragment,c),p(A8.$$.fragment,c),p(y8.$$.fragment,c),p(L8.$$.fragment,c),p(x8.$$.fragment,c),p(k8.$$.fragment,c),p(S8.$$.fragment,c),p(B8.$$.fragment,c),p(P8.$$.fragment,c),p($8.$$.fragment,c),p(I8.$$.fragment,c),p(q8.$$.fragment,c),p(N8.$$.fragment,c),p(D8.$$.fragment,c),p(G8.$$.fragment,c),p(O8.$$.fragment,c),p(V8.$$.fragment,c),p(X8.$$.fragment,c),p(z8.$$.fragment,c),p(W8.$$.fragment,c),p(H8.$$.fragment,c),p(U8.$$.fragment,c),p(J8.$$.fragment,c),p(Y8.$$.fragment,c),p(K8.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(LL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(SL.$$.fragment,c),p(RL.$$.fragment,c),p(BL.$$.fragment,c),p($L.$$.fragment,c),p(IL.$$.fragment,c),p(qL.$$.fragment,c),p(NL.$$.fragment,c),p(jL.$$.fragment,c),p(DL.$$.fragment,c),p(OL.$$.fragment,c),p(VL.$$.fragment,c),p(XL.$$.fragment,c),p(zL.$$.fragment,c),p(QL.$$.fragment,c),p(WL.$$.fragment,c),p(UL.$$.fragment,c),p(JL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(e7.$$.fragment,c),p(r7.$$.fragment,c),p(t7.$$.fragment,c),p(a7.$$.fragment,c),p(n7.$$.fragment,c),p(s7.$$.fragment,c),p(l7.$$.fragment,c),p(d7.$$.fragment,c),p(c7.$$.fragment,c),p(f7.$$.fragment,c),p(m7.$$.fragment,c),p(g7.$$.fragment,c),p(h7.$$.fragment,c),p(_7.$$.fragment,c),p(u7.$$.fragment,c),p(b7.$$.fragment,c),p(v7.$$.fragment,c),p(F7.$$.fragment,c),p(T7.$$.fragment,c),p(E7.$$.fragment,c),p(C7.$$.fragment,c),p(w7.$$.fragment,c),p(A7.$$.fragment,c),p(y7.$$.fragment,c),p(L7.$$.fragment,c),p(k7.$$.fragment,c),p(S7.$$.fragment,c),p(R7.$$.fragment,c),p(P7.$$.fragment,c),p($7.$$.fragment,c),p(I7.$$.fragment,c),p(N7.$$.fragment,c),p(j7.$$.fragment,c),p(D7.$$.fragment,c),p(G7.$$.fragment,c),iIe=!1},d(c){t(oe),c&&t(co),c&&t(ge),_(ue),c&&t(zf),c&&t(fa),c&&t(Se),c&&t(fo),c&&t(Wf),_(Da,c),c&&t(mo),c&&t(ve),c&&t(zo),c&&t(Ga),c&&t(lPe),c&&t(Ki),_(YC),c&&t(iPe),c&&t(Qn),c&&t(dPe),_(KC,c),c&&t(cPe),c&&t(K9),c&&t(fPe),_(Jf,c),c&&t(mPe),c&&t(Zi),_(ZC),c&&t(gPe),c&&t(Qo),_(ew),_(tw),_(aw),_(nw),c&&t(hPe),c&&t(od),_(sw),c&&t(pPe),c&&t(Wo),_(lw),_(cw),_(fw),_(mw),c&&t(_Pe),c&&t(rd),_(gw),c&&t(uPe),c&&t(Ho),_(hw),_(uw),_(Hh),_(bw),_(vw),c&&t(bPe),c&&t(td),_(Fw),c&&t(vPe),c&&t(Uo),_(Tw),_(Cw),_(fp),_(ww),_(Aw),c&&t(FPe),c&&t(nd),_(yw),c&&t(TPe),c&&t(Jo),_(Lw),_(kw),_(Sw),_(Rw),_(Bw),c&&t(MPe),c&&t(id),_(Pw),c&&t(EPe),c&&t(Yo),_($w),_(qw),_(Nw),_(jw),_(Dw),c&&t(CPe),c&&t(fd),_(Gw),c&&t(wPe),c&&t(Ko),_(Ow),_(Xw),_(zw),_(Qw),_(Ww),c&&t(APe),c&&t(hd),_(Hw),c&&t(yPe),c&&t(Zo),_(Uw),_(Yw),_(Kw),_(Zw),_(eA),c&&t(LPe),c&&t(ud),_(oA),c&&t(xPe),c&&t(er),_(rA),_(aA),_(nA),_(sA),_(lA),c&&t(kPe),c&&t(Fd),_(iA),c&&t(SPe),c&&t(or),_(dA),_(fA),_(mA),_(gA),_(hA),c&&t(RPe),c&&t(Ed),_(pA),c&&t(BPe),c&&t(rr),_(_A),_(bA),_(vA),_(FA),_(TA),c&&t(PPe),c&&t(Ad),_(MA),c&&t($Pe),c&&t(tr),_(EA),_(wA),_(AA),_(yA),_(LA),c&&t(IPe),c&&t(xd),_(xA),c&&t(qPe),c&&t(ar),_(kA),_(RA),_(BA),_(PA),_($A),c&&t(NPe),c&&t(Rd),_(IA),c&&t(jPe),c&&t(nr),_(qA),_(jA),_(DA),_(GA),_(OA),c&&t(DPe),c&&t($d),_(VA),c&&t(GPe),c&&t(sr),_(XA),_(QA),_(WA),_(HA),_(UA),c&&t(OPe),c&&t(Nd),_(JA),c&&t(VPe),c&&t(lr),_(YA),_(ZA),_(e0),_(o0),_(r0),c&&t(XPe),c&&t(Gd),_(t0),c&&t(zPe),c&&t(ir),_(a0),_(s0),_(l0),_(i0),_(d0),c&&t(QPe),c&&t(Xd),_(c0),c&&t(WPe),c&&t(dr),_(f0),_(g0),_(h0),_(p0),_(_0),c&&t(HPe),c&&t(Wd),_(u0),c&&t(UPe),c&&t(cr),_(b0),_(F0),_(T0),_(M0),_(E0),c&&t(JPe),c&&t(Jd),_(C0),c&&t(YPe),c&&t(fr),_(w0),_(y0),_(L0),_(x0),_(k0),c&&t(KPe),c&&t(Zd),_(S0),c&&t(ZPe),c&&t(mr),_(R0),_(P0),_($0),_(I0),_(N0),c&&t(e$e),c&&t(rc),_(j0),c&&t(o$e),c&&t(gr),_(D0),_(O0),_(V0),_(X0),_(z0),c&&t(r$e),c&&t(nc),_(Q0),c&&t(t$e),c&&t(hr),_(W0),_(U0),_(J0),_(Y0),_(K0),c&&t(a$e),c&&t(dc),_(Z0),c&&t(n$e),c&&t(pr),_(ey),_(ry),_(ty),_(ay),_(ny),c&&t(s$e),c&&t(mc),_(sy),c&&t(l$e),c&&t(_r),_(ly),_(dy),_(cy),_(fy),_(my),c&&t(i$e),c&&t(pc),_(gy),c&&t(d$e),c&&t(ur),_(hy),_(_y),_(uy),_(by),_(vy),c&&t(c$e),c&&t(bc),_(Fy),c&&t(f$e),c&&t(br),_(Ty),_(Ey),_(Cy),_(wy),_(Ay),c&&t(m$e),c&&t(Tc),_(yy),c&&t(g$e),c&&t(vr),_(Ly),_(ky),_(Sy),_(Ry),_(By),c&&t(h$e),c&&t(Cc),_(Py),c&&t(p$e),c&&t(Fr),_($y),_(qy),_(Ny),_(jy),_(Dy),c&&t(_$e),c&&t(yc),_(Gy),c&&t(u$e),c&&t(Tr),_(Oy),_(Xy),_(zy),_(Qy),_(Wy),c&&t(b$e),c&&t(kc),_(Hy),c&&t(v$e),c&&t(Mr),_(Uy),_(Yy),_(Ky),_(Zy),_(o8),c&&t(F$e),c&&t(Bc),_(r8),c&&t(T$e),c&&t(Er),_(t8),_(n8),_(s8),_(l8),_(i8),c&&t(M$e),c&&t(Ic),_(d8),c&&t(E$e),c&&t(Cr),_(c8),_(m8),_(g8),_(h8),_(p8),c&&t(C$e),c&&t(jc),_(_8),c&&t(w$e),c&&t(wr),_(u8),_(v8),_(F8),_(T8),_(M8),c&&t(A$e),c&&t(Oc),_(E8),c&&t(y$e),c&&t(Ar),_(C8),_(A8),_(y8),_(L8),_(x8),c&&t(L$e),c&&t(zc),_(k8),c&&t(x$e),c&&t(yr),_(S8),_(B8),_(P8),_($8),_(I8),c&&t(k$e),c&&t(Hc),_(q8),c&&t(S$e),c&&t(Lr),_(N8),_(D8),_(G8),_(O8),_(V8),c&&t(R$e),c&&t(Yc),_(X8),c&&t(B$e),c&&t(xr),_(z8),_(W8),_(H8),_(U8),_(J8),c&&t(P$e),c&&t(ef),_(Y8),c&&t($$e),c&&t(kr),_(K8),_(eL),_(oL),_(rL),_(tL),c&&t(I$e),c&&t(tf),_(aL),c&&t(q$e),c&&t(Sr),_(nL),_(lL),_(iL),_(dL),_(cL),c&&t(N$e),c&&t(sf),_(fL),c&&t(j$e),c&&t(Rr),_(mL),_(hL),_(pL),_(_L),_(uL),c&&t(D$e),c&&t(cf),_(bL),c&&t(G$e),c&&t(Br),_(vL),_(TL),_(ML),_(EL),_(CL),c&&t(O$e),c&&t(gf),_(wL),c&&t(V$e),c&&t(Pr),_(AL),_(LL),_(xL),_(kL),_(SL),c&&t(X$e),c&&t(_f),_(RL),c&&t(z$e),c&&t($r),_(BL),_($L),_(IL),_(qL),_(NL),c&&t(Q$e),c&&t(vf),_(jL),c&&t(W$e),c&&t(Ir),_(DL),_(OL),_(VL),_(XL),_(zL),c&&t(H$e),c&&t(Mf),_(QL),c&&t(U$e),c&&t(qr),_(WL),_(UL),_(JL),_(YL),_(KL),c&&t(J$e),c&&t(wf),_(ZL),c&&t(Y$e),c&&t(Nr),_(e7),_(r7),_(t7),_(a7),_(n7),c&&t(K$e),c&&t(Lf),_(s7),c&&t(Z$e),c&&t(jr),_(l7),_(d7),_(c7),_(f7),_(m7),c&&t(eIe),c&&t(Sf),_(g7),c&&t(oIe),c&&t(Dr),_(h7),_(_7),_(u7),_(b7),_(v7),c&&t(rIe),c&&t(Pf),_(F7),c&&t(tIe),c&&t(Gr),_(T7),_(E7),_(C7),_(w7),_(A7),c&&t(aIe),c&&t(qf),_(y7),c&&t(nIe),c&&t(Or),_(L7),_(k7),_(S7),_(R7),_(P7),c&&t(sIe),c&&t(Df),_($7),c&&t(lIe),c&&t(Vr),_(I7),_(N7),_(j7),_(D7),_(G7)}}}const eLt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function oLt(Xf){return U8t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class lLt extends z8t{constructor(oe){super();Q8t(this,oe,oLt,Z8t,W8t,{})}}export{lLt as default,eLt as metadata};
