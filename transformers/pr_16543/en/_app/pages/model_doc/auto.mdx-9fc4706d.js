import{S as KCt,i as ZCt,s as ewt,e as a,k as l,w as f,t as o,M as owt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as rwt}from"../../chunks/vendor-6b77c823.js";import{T as uPr}from"../../chunks/Tip-39098574.js";import{D as C}from"../../chunks/Docstring-af1d0ae0.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function twt(If){let Z,io,ce,Ce,lo,he,Me,Xo,Ii,qf,fa,qi,Ni,wC,Nf,xe,co,ji,Gn,AC,On,Vn,yC,Di,Xn,LC,Gi,jf,Da;return{c(){Z=a("p"),io=o("If your "),ce=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),he=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),Ii=a("code"),qf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),qi=a("code"),Ni=o('"new-model"'),wC=o(")."),Nf=l(),xe=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),AC=o(" is a subclass of "),On=a("a"),Vn=o("PreTrainedModel"),yC=o(`, make sure its
`),Di=a("code"),Xn=o("config_class"),LC=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jf=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var ue=s(Z);io=r(ue,"If your "),ce=n(ue,"CODE",{});var u9=s(ce);Ce=r(u9,"NewModelConfig"),u9.forEach(t),lo=r(ue," is a subclass of "),he=n(ue,"CODE",{});var Oi=s(he);Me=r(Oi,"PretrainedConfig"),Oi.forEach(t),Xo=r(ue,`, make sure its
`),Ii=n(ue,"CODE",{});var b9=s(Ii);qf=r(b9,"model_type"),b9.forEach(t),fa=r(ue," attribute is set to the same key you use when registering the config (here "),qi=n(ue,"CODE",{});var F9=s(qi);Ni=r(F9,'"new-model"'),F9.forEach(t),wC=r(ue,")."),ue.forEach(t),Nf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),AC=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var v9=s(On);Vn=r(v9,"PreTrainedModel"),v9.forEach(t),yC=r(zo,`, make sure its
`),Di=n(zo,"CODE",{});var Df=s(Di);Xn=r(Df,"config_class"),Df.forEach(t),LC=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var T9=s(Gi);jf=r(T9,"NewModelConfig"),T9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel")},m(fo,ue){b(fo,Z,ue),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo),e(Z,he),e(he,Me),e(Z,Xo),e(Z,Ii),e(Ii,qf),e(Z,fa),e(Z,qi),e(qi,Ni),e(Z,wC),b(fo,Nf,ue),b(fo,xe,ue),e(xe,co),e(xe,ji),e(ji,Gn),e(xe,AC),e(xe,On),e(On,Vn),e(xe,yC),e(xe,Di),e(Di,Xn),e(xe,LC),e(xe,Gi),e(Gi,jf),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(Nf),fo&&t(xe)}}}function awt(If){let Z,io,ce,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){Z=n(he,"P",{});var Me=s(Z);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,Z,Me),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo)},d(he){he&&t(Z)}}}function nwt(If){let Z,io,ce,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){Z=n(he,"P",{});var Me=s(Z);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,Z,Me),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo)},d(he){he&&t(Z)}}}function swt(If){let Z,io,ce,Ce,lo,he,Me,Xo,Ii,qf,fa,qi,Ni,wC,Nf,xe,co,ji,Gn,AC,On,Vn,yC,Di,Xn,LC,Gi,jf,Da,fo,ue,u9,Oi,b9,F9,zo,Ga,v9,Df,T9,IIe,ERe,Vi,Gf,nY,xC,qIe,sY,NIe,CRe,zn,jIe,lY,DIe,GIe,iY,OIe,VIe,wRe,kC,ARe,M9,XIe,yRe,Of,LRe,Xi,Vf,dY,SC,zIe,cY,QIe,xRe,Qo,RC,WIe,BC,HIe,E9,UIe,JIe,YIe,PC,KIe,fY,ZIe,eqe,oqe,mo,$C,rqe,mY,tqe,aqe,zi,nqe,gY,sqe,lqe,hY,iqe,dqe,cqe,F,Xf,pY,fqe,mqe,C9,gqe,hqe,pqe,zf,_Y,_qe,uqe,w9,bqe,Fqe,vqe,Qf,uY,Tqe,Mqe,A9,Eqe,Cqe,wqe,Wf,bY,Aqe,yqe,y9,Lqe,xqe,kqe,Hf,FY,Sqe,Rqe,L9,Bqe,Pqe,$qe,Uf,vY,Iqe,qqe,x9,Nqe,jqe,Dqe,Jf,TY,Gqe,Oqe,k9,Vqe,Xqe,zqe,Yf,MY,Qqe,Wqe,S9,Hqe,Uqe,Jqe,Kf,EY,Yqe,Kqe,R9,Zqe,eNe,oNe,Zf,CY,rNe,tNe,B9,aNe,nNe,sNe,em,wY,lNe,iNe,P9,dNe,cNe,fNe,om,AY,mNe,gNe,$9,hNe,pNe,_Ne,rm,yY,uNe,bNe,I9,FNe,vNe,TNe,tm,LY,MNe,ENe,q9,CNe,wNe,ANe,am,xY,yNe,LNe,N9,xNe,kNe,SNe,nm,kY,RNe,BNe,j9,PNe,$Ne,INe,sm,SY,qNe,NNe,D9,jNe,DNe,GNe,lm,RY,ONe,VNe,G9,XNe,zNe,QNe,im,BY,WNe,HNe,O9,UNe,JNe,YNe,dm,PY,KNe,ZNe,V9,eje,oje,rje,cm,$Y,tje,aje,X9,nje,sje,lje,fm,IY,ije,dje,z9,cje,fje,mje,mm,qY,gje,hje,Q9,pje,_je,uje,gm,NY,bje,Fje,W9,vje,Tje,Mje,hm,jY,Eje,Cje,H9,wje,Aje,yje,pm,DY,Lje,xje,U9,kje,Sje,Rje,_m,GY,Bje,Pje,J9,$je,Ije,qje,um,OY,Nje,jje,Y9,Dje,Gje,Oje,bm,VY,Vje,Xje,K9,zje,Qje,Wje,Fm,XY,Hje,Uje,Z9,Jje,Yje,Kje,vm,zY,Zje,eDe,ex,oDe,rDe,tDe,Tm,QY,aDe,nDe,ox,sDe,lDe,iDe,Mm,WY,dDe,cDe,rx,fDe,mDe,gDe,Em,HY,hDe,pDe,tx,_De,uDe,bDe,Cm,UY,FDe,vDe,ax,TDe,MDe,EDe,wm,JY,CDe,wDe,nx,ADe,yDe,LDe,Am,YY,xDe,kDe,sx,SDe,RDe,BDe,ym,KY,PDe,$De,lx,IDe,qDe,NDe,Lm,ZY,jDe,DDe,ix,GDe,ODe,VDe,xm,eK,XDe,zDe,dx,QDe,WDe,HDe,km,oK,UDe,JDe,cx,YDe,KDe,ZDe,Sm,rK,eGe,oGe,fx,rGe,tGe,aGe,Rm,tK,nGe,sGe,mx,lGe,iGe,dGe,Bm,aK,cGe,fGe,gx,mGe,gGe,hGe,Pm,nK,pGe,_Ge,hx,uGe,bGe,FGe,$m,sK,vGe,TGe,px,MGe,EGe,CGe,Im,lK,wGe,AGe,_x,yGe,LGe,xGe,qm,iK,kGe,SGe,ux,RGe,BGe,PGe,Nm,dK,$Ge,IGe,bx,qGe,NGe,jGe,jm,cK,DGe,GGe,Fx,OGe,VGe,XGe,Dm,fK,zGe,QGe,vx,WGe,HGe,UGe,Gm,mK,JGe,YGe,Tx,KGe,ZGe,eOe,Om,gK,oOe,rOe,Mx,tOe,aOe,nOe,Vm,hK,sOe,lOe,Ex,iOe,dOe,cOe,Xm,pK,fOe,mOe,Cx,gOe,hOe,pOe,zm,_K,_Oe,uOe,wx,bOe,FOe,vOe,Qm,uK,TOe,MOe,Ax,EOe,COe,wOe,Wm,bK,AOe,yOe,yx,LOe,xOe,kOe,Hm,FK,SOe,ROe,Lx,BOe,POe,$Oe,Um,vK,IOe,qOe,xx,NOe,jOe,DOe,Jm,TK,GOe,OOe,kx,VOe,XOe,zOe,Ym,MK,QOe,WOe,Sx,HOe,UOe,JOe,Km,EK,YOe,KOe,Rx,ZOe,eVe,oVe,Zm,CK,rVe,tVe,Bx,aVe,nVe,sVe,eg,wK,lVe,iVe,Px,dVe,cVe,fVe,og,AK,mVe,gVe,$x,hVe,pVe,_Ve,rg,yK,uVe,bVe,Ix,FVe,vVe,TVe,tg,LK,MVe,EVe,qx,CVe,wVe,AVe,ag,xK,yVe,LVe,Nx,xVe,kVe,SVe,ng,kK,RVe,BVe,jx,PVe,$Ve,IVe,sg,SK,qVe,NVe,Dx,jVe,DVe,GVe,lg,RK,OVe,VVe,Gx,XVe,zVe,QVe,ig,BK,WVe,HVe,Ox,UVe,JVe,YVe,dg,PK,KVe,ZVe,Vx,eXe,oXe,rXe,cg,$K,tXe,aXe,Xx,nXe,sXe,lXe,fg,IK,iXe,dXe,zx,cXe,fXe,mXe,mg,qK,gXe,hXe,Qx,pXe,_Xe,uXe,gg,NK,bXe,FXe,Wx,vXe,TXe,MXe,hg,jK,EXe,CXe,Hx,wXe,AXe,yXe,pg,DK,LXe,xXe,Ux,kXe,SXe,RXe,_g,GK,BXe,PXe,Jx,$Xe,IXe,qXe,ug,OK,NXe,jXe,Yx,DXe,GXe,OXe,bg,VK,VXe,XXe,Kx,zXe,QXe,WXe,Fg,XK,HXe,UXe,Zx,JXe,YXe,KXe,vg,zK,ZXe,eze,ek,oze,rze,tze,Tg,QK,aze,nze,ok,sze,lze,ize,Mg,WK,dze,cze,rk,fze,mze,gze,Eg,HK,hze,pze,tk,_ze,uze,bze,Cg,UK,Fze,vze,ak,Tze,Mze,Eze,wg,JK,Cze,wze,nk,Aze,yze,Lze,Ag,YK,xze,kze,sk,Sze,Rze,Bze,yg,KK,Pze,$ze,lk,Ize,qze,Nze,Lg,ZK,jze,Dze,ik,Gze,Oze,Vze,xg,eZ,Xze,zze,dk,Qze,Wze,Hze,kg,oZ,Uze,Jze,ck,Yze,Kze,Zze,Sg,rZ,eQe,oQe,fk,rQe,tQe,aQe,Rg,tZ,nQe,sQe,mk,lQe,iQe,dQe,Bg,aZ,cQe,fQe,gk,mQe,gQe,hQe,Pg,nZ,pQe,_Qe,hk,uQe,bQe,FQe,$g,sZ,vQe,TQe,pk,MQe,EQe,CQe,Ig,lZ,wQe,AQe,_k,yQe,LQe,xQe,iZ,kQe,SQe,IC,RQe,qg,qC,BQe,dZ,PQe,kRe,Qi,Ng,cZ,NC,$Qe,fZ,IQe,SRe,Wo,jC,qQe,DC,NQe,uk,jQe,DQe,GQe,GC,OQe,mZ,VQe,XQe,zQe,go,OC,QQe,gZ,WQe,HQe,Oa,UQe,hZ,JQe,YQe,pZ,KQe,ZQe,_Z,eWe,oWe,rWe,E,Qn,uZ,tWe,aWe,bk,nWe,sWe,Fk,lWe,iWe,dWe,Wn,bZ,cWe,fWe,vk,mWe,gWe,Tk,hWe,pWe,_We,Hn,FZ,uWe,bWe,Mk,FWe,vWe,Ek,TWe,MWe,EWe,jg,vZ,CWe,wWe,Ck,AWe,yWe,LWe,Un,TZ,xWe,kWe,wk,SWe,RWe,Ak,BWe,PWe,$We,Dg,MZ,IWe,qWe,yk,NWe,jWe,DWe,Gg,EZ,GWe,OWe,Lk,VWe,XWe,zWe,Og,CZ,QWe,WWe,xk,HWe,UWe,JWe,Jn,wZ,YWe,KWe,kk,ZWe,eHe,Sk,oHe,rHe,tHe,Yn,AZ,aHe,nHe,Rk,sHe,lHe,Bk,iHe,dHe,cHe,Kn,yZ,fHe,mHe,Pk,gHe,hHe,$k,pHe,_He,uHe,Vg,LZ,bHe,FHe,Ik,vHe,THe,MHe,Xg,xZ,EHe,CHe,qk,wHe,AHe,yHe,Zn,kZ,LHe,xHe,Nk,kHe,SHe,jk,RHe,BHe,PHe,zg,SZ,$He,IHe,Dk,qHe,NHe,jHe,es,RZ,DHe,GHe,Gk,OHe,VHe,Ok,XHe,zHe,QHe,os,BZ,WHe,HHe,Vk,UHe,JHe,Xk,YHe,KHe,ZHe,rs,PZ,eUe,oUe,zk,rUe,tUe,$Z,aUe,nUe,sUe,Qg,IZ,lUe,iUe,Qk,dUe,cUe,fUe,ts,qZ,mUe,gUe,Wk,hUe,pUe,Hk,_Ue,uUe,bUe,Wg,NZ,FUe,vUe,Uk,TUe,MUe,EUe,as,jZ,CUe,wUe,Jk,AUe,yUe,Yk,LUe,xUe,kUe,ns,DZ,SUe,RUe,Kk,BUe,PUe,Zk,$Ue,IUe,qUe,ss,GZ,NUe,jUe,eS,DUe,GUe,oS,OUe,VUe,XUe,Hg,OZ,zUe,QUe,rS,WUe,HUe,UUe,ls,VZ,JUe,YUe,tS,KUe,ZUe,aS,eJe,oJe,rJe,Ug,XZ,tJe,aJe,nS,nJe,sJe,lJe,is,zZ,iJe,dJe,sS,cJe,fJe,lS,mJe,gJe,hJe,ds,QZ,pJe,_Je,iS,uJe,bJe,dS,FJe,vJe,TJe,cs,WZ,MJe,EJe,cS,CJe,wJe,fS,AJe,yJe,LJe,fs,HZ,xJe,kJe,mS,SJe,RJe,gS,BJe,PJe,$Je,Jg,UZ,IJe,qJe,hS,NJe,jJe,DJe,ms,JZ,GJe,OJe,pS,VJe,XJe,_S,zJe,QJe,WJe,gs,YZ,HJe,UJe,uS,JJe,YJe,bS,KJe,ZJe,eYe,hs,KZ,oYe,rYe,FS,tYe,aYe,vS,nYe,sYe,lYe,ps,ZZ,iYe,dYe,TS,cYe,fYe,MS,mYe,gYe,hYe,_s,eee,pYe,_Ye,ES,uYe,bYe,CS,FYe,vYe,TYe,us,oee,MYe,EYe,wS,CYe,wYe,AS,AYe,yYe,LYe,Yg,ree,xYe,kYe,yS,SYe,RYe,BYe,bs,tee,PYe,$Ye,LS,IYe,qYe,xS,NYe,jYe,DYe,Kg,aee,GYe,OYe,kS,VYe,XYe,zYe,Zg,nee,QYe,WYe,SS,HYe,UYe,JYe,Fs,see,YYe,KYe,RS,ZYe,eKe,BS,oKe,rKe,tKe,vs,lee,aKe,nKe,PS,sKe,lKe,$S,iKe,dKe,cKe,eh,iee,fKe,mKe,IS,gKe,hKe,pKe,Ts,dee,_Ke,uKe,qS,bKe,FKe,NS,vKe,TKe,MKe,Ms,cee,EKe,CKe,jS,wKe,AKe,DS,yKe,LKe,xKe,Es,fee,kKe,SKe,GS,RKe,BKe,OS,PKe,$Ke,IKe,Cs,mee,qKe,NKe,VS,jKe,DKe,XS,GKe,OKe,VKe,ws,gee,XKe,zKe,zS,QKe,WKe,QS,HKe,UKe,JKe,oh,hee,YKe,KKe,WS,ZKe,eZe,oZe,rh,pee,rZe,tZe,HS,aZe,nZe,sZe,th,_ee,lZe,iZe,US,dZe,cZe,fZe,ah,uee,mZe,gZe,JS,hZe,pZe,_Ze,As,bee,uZe,bZe,YS,FZe,vZe,KS,TZe,MZe,EZe,nh,Fee,CZe,wZe,ZS,AZe,yZe,LZe,ys,vee,xZe,kZe,eR,SZe,RZe,oR,BZe,PZe,$Ze,Ls,Tee,IZe,qZe,rR,NZe,jZe,tR,DZe,GZe,OZe,xs,Mee,VZe,XZe,aR,zZe,QZe,nR,WZe,HZe,UZe,ks,Eee,JZe,YZe,sR,KZe,ZZe,lR,eeo,oeo,reo,Ss,Cee,teo,aeo,iR,neo,seo,dR,leo,ieo,deo,Rs,wee,ceo,feo,cR,meo,geo,fR,heo,peo,_eo,sh,Aee,ueo,beo,mR,Feo,veo,Teo,lh,yee,Meo,Eeo,gR,Ceo,weo,Aeo,Bs,Lee,yeo,Leo,hR,xeo,keo,pR,Seo,Reo,Beo,Ps,xee,Peo,$eo,_R,Ieo,qeo,uR,Neo,jeo,Deo,$s,kee,Geo,Oeo,bR,Veo,Xeo,FR,zeo,Qeo,Weo,ih,See,Heo,Ueo,vR,Jeo,Yeo,Keo,dh,Ree,Zeo,eoo,TR,ooo,roo,too,ch,Bee,aoo,noo,MR,soo,loo,ioo,fh,Pee,doo,coo,ER,foo,moo,goo,mh,$ee,hoo,poo,CR,_oo,uoo,boo,Is,Iee,Foo,voo,wR,Too,Moo,AR,Eoo,Coo,woo,gh,qee,Aoo,yoo,yR,Loo,xoo,koo,hh,Nee,Soo,Roo,LR,Boo,Poo,$oo,qs,jee,Ioo,qoo,xR,Noo,joo,kR,Doo,Goo,Ooo,Ns,Dee,Voo,Xoo,SR,zoo,Qoo,RR,Woo,Hoo,Uoo,Gee,Joo,Yoo,VC,Koo,ph,XC,Zoo,Oee,ero,RRe,Wi,_h,Vee,zC,oro,Xee,rro,BRe,Ho,QC,tro,WC,aro,BR,nro,sro,lro,HC,iro,zee,dro,cro,fro,$e,UC,mro,Qee,gro,hro,Va,pro,Wee,_ro,uro,Hee,bro,Fro,Uee,vro,Tro,Mro,ee,uh,Jee,Ero,Cro,PR,wro,Aro,yro,bh,Yee,Lro,xro,$R,kro,Sro,Rro,Fh,Kee,Bro,Pro,IR,$ro,Iro,qro,vh,Zee,Nro,jro,qR,Dro,Gro,Oro,Th,eoe,Vro,Xro,NR,zro,Qro,Wro,Mh,ooe,Hro,Uro,jR,Jro,Yro,Kro,Eh,roe,Zro,eto,DR,oto,rto,tto,Ch,toe,ato,nto,GR,sto,lto,ito,wh,aoe,dto,cto,OR,fto,mto,gto,Ah,noe,hto,pto,VR,_to,uto,bto,yh,soe,Fto,vto,XR,Tto,Mto,Eto,Lh,loe,Cto,wto,zR,Ato,yto,Lto,xh,ioe,xto,kto,QR,Sto,Rto,Bto,kh,doe,Pto,$to,WR,Ito,qto,Nto,Sh,coe,jto,Dto,HR,Gto,Oto,Vto,Rh,foe,Xto,zto,UR,Qto,Wto,Hto,Bh,moe,Uto,Jto,JR,Yto,Kto,Zto,Ph,goe,eao,oao,YR,rao,tao,aao,$h,hoe,nao,sao,KR,lao,iao,dao,Ih,cao,poe,fao,mao,JC,gao,qh,YC,hao,_oe,pao,PRe,Hi,Nh,uoe,KC,_ao,boe,uao,$Re,Uo,ZC,bao,ew,Fao,ZR,vao,Tao,Mao,ow,Eao,Foe,Cao,wao,Aao,Ie,rw,yao,voe,Lao,xao,Ui,kao,Toe,Sao,Rao,Moe,Bao,Pao,$ao,ke,jh,Eoe,Iao,qao,eB,Nao,jao,Dao,Dh,Coe,Gao,Oao,oB,Vao,Xao,zao,Gh,woe,Qao,Wao,rB,Hao,Uao,Jao,Oh,Aoe,Yao,Kao,tB,Zao,eno,ono,Vh,yoe,rno,tno,aB,ano,nno,sno,Xh,Loe,lno,ino,nB,dno,cno,fno,zh,xoe,mno,gno,sB,hno,pno,_no,Qh,koe,uno,bno,lB,Fno,vno,Tno,Wh,Mno,Soe,Eno,Cno,tw,wno,Hh,aw,Ano,Roe,yno,IRe,Ji,Uh,Boe,nw,Lno,Poe,xno,qRe,Jo,sw,kno,Yi,Sno,iB,Rno,Bno,dB,Pno,$no,Ino,lw,qno,$oe,Nno,jno,Dno,Xr,iw,Gno,Ioe,Ono,Vno,Ki,Xno,qoe,zno,Qno,cB,Wno,Hno,Uno,Noe,Jno,Yno,dw,Kno,qe,cw,Zno,joe,eso,oso,Xa,rso,Doe,tso,aso,Goe,nso,sso,Ooe,lso,iso,dso,T,Jh,Voe,cso,fso,fB,mso,gso,hso,Yh,Xoe,pso,_so,mB,uso,bso,Fso,Kh,zoe,vso,Tso,gB,Mso,Eso,Cso,Zh,Qoe,wso,Aso,hB,yso,Lso,xso,ep,Woe,kso,Sso,pB,Rso,Bso,Pso,op,Hoe,$so,Iso,_B,qso,Nso,jso,rp,Uoe,Dso,Gso,uB,Oso,Vso,Xso,tp,Joe,zso,Qso,bB,Wso,Hso,Uso,ap,Yoe,Jso,Yso,FB,Kso,Zso,elo,np,Koe,olo,rlo,vB,tlo,alo,nlo,sp,Zoe,slo,llo,TB,ilo,dlo,clo,lp,ere,flo,mlo,MB,glo,hlo,plo,ip,ore,_lo,ulo,EB,blo,Flo,vlo,dp,rre,Tlo,Mlo,CB,Elo,Clo,wlo,cp,tre,Alo,ylo,wB,Llo,xlo,klo,fp,are,Slo,Rlo,AB,Blo,Plo,$lo,mp,nre,Ilo,qlo,yB,Nlo,jlo,Dlo,gp,sre,Glo,Olo,LB,Vlo,Xlo,zlo,hp,lre,Qlo,Wlo,xB,Hlo,Ulo,Jlo,pp,ire,Ylo,Klo,kB,Zlo,eio,oio,_p,dre,rio,tio,SB,aio,nio,sio,up,cre,lio,iio,RB,dio,cio,fio,bp,fre,mio,gio,BB,hio,pio,_io,Fp,mre,uio,bio,PB,Fio,vio,Tio,vp,gre,Mio,Eio,$B,Cio,wio,Aio,Tp,hre,yio,Lio,IB,xio,kio,Sio,Mp,pre,Rio,Bio,qB,Pio,$io,Iio,Ep,_re,qio,Nio,NB,jio,Dio,Gio,Cp,ure,Oio,Vio,jB,Xio,zio,Qio,js,bre,Wio,Hio,DB,Uio,Jio,GB,Yio,Kio,Zio,wp,Fre,edo,odo,OB,rdo,tdo,ado,Ap,vre,ndo,sdo,VB,ldo,ido,ddo,yp,Tre,cdo,fdo,XB,mdo,gdo,hdo,Lp,Mre,pdo,_do,zB,udo,bdo,Fdo,xp,Ere,vdo,Tdo,QB,Mdo,Edo,Cdo,kp,Cre,wdo,Ado,WB,ydo,Ldo,xdo,Sp,wre,kdo,Sdo,HB,Rdo,Bdo,Pdo,Rp,Are,$do,Ido,UB,qdo,Ndo,jdo,Bp,yre,Ddo,Gdo,JB,Odo,Vdo,Xdo,Pp,Lre,zdo,Qdo,YB,Wdo,Hdo,Udo,$p,xre,Jdo,Ydo,KB,Kdo,Zdo,eco,Ip,kre,oco,rco,ZB,tco,aco,nco,qp,Sre,sco,lco,eP,ico,dco,cco,Np,Rre,fco,mco,oP,gco,hco,pco,jp,Bre,_co,uco,rP,bco,Fco,vco,Dp,Pre,Tco,Mco,tP,Eco,Cco,wco,Gp,$re,Aco,yco,aP,Lco,xco,kco,Op,Ire,Sco,Rco,nP,Bco,Pco,$co,Vp,qre,Ico,qco,sP,Nco,jco,Dco,Xp,Nre,Gco,Oco,lP,Vco,Xco,zco,zp,jre,Qco,Wco,iP,Hco,Uco,Jco,Qp,Dre,Yco,Kco,dP,Zco,efo,ofo,Wp,Gre,rfo,tfo,cP,afo,nfo,sfo,Hp,Ore,lfo,ifo,fP,dfo,cfo,ffo,Up,Vre,mfo,gfo,mP,hfo,pfo,_fo,Jp,Xre,ufo,bfo,gP,Ffo,vfo,Tfo,Yp,zre,Mfo,Efo,hP,Cfo,wfo,Afo,Kp,Qre,yfo,Lfo,pP,xfo,kfo,Sfo,Zp,Wre,Rfo,Bfo,_P,Pfo,$fo,Ifo,e_,Hre,qfo,Nfo,uP,jfo,Dfo,Gfo,o_,Ure,Ofo,Vfo,bP,Xfo,zfo,Qfo,r_,Jre,Wfo,Hfo,FP,Ufo,Jfo,Yfo,t_,Yre,Kfo,Zfo,vP,emo,omo,rmo,a_,Kre,tmo,amo,TP,nmo,smo,lmo,n_,Zre,imo,dmo,MP,cmo,fmo,mmo,s_,ete,gmo,hmo,EP,pmo,_mo,umo,l_,ote,bmo,Fmo,CP,vmo,Tmo,Mmo,i_,rte,Emo,Cmo,wP,wmo,Amo,ymo,d_,tte,Lmo,xmo,AP,kmo,Smo,Rmo,c_,ate,Bmo,Pmo,yP,$mo,Imo,qmo,f_,nte,Nmo,jmo,LP,Dmo,Gmo,Omo,m_,ste,Vmo,Xmo,xP,zmo,Qmo,Wmo,g_,lte,Hmo,Umo,kP,Jmo,Ymo,Kmo,h_,ite,Zmo,ego,SP,ogo,rgo,tgo,p_,dte,ago,ngo,RP,sgo,lgo,igo,__,cte,dgo,cgo,BP,fgo,mgo,ggo,u_,fte,hgo,pgo,PP,_go,ugo,bgo,b_,mte,Fgo,vgo,$P,Tgo,Mgo,Ego,F_,gte,Cgo,wgo,IP,Ago,ygo,Lgo,v_,hte,xgo,kgo,qP,Sgo,Rgo,Bgo,T_,pte,Pgo,$go,NP,Igo,qgo,Ngo,M_,_te,jgo,Dgo,jP,Ggo,Ogo,Vgo,E_,ute,Xgo,zgo,DP,Qgo,Wgo,Hgo,C_,bte,Ugo,Jgo,GP,Ygo,Kgo,Zgo,w_,Fte,eho,oho,OP,rho,tho,aho,A_,vte,nho,sho,VP,lho,iho,dho,y_,Tte,cho,fho,XP,mho,gho,hho,L_,Mte,pho,_ho,zP,uho,bho,Fho,x_,Ete,vho,Tho,QP,Mho,Eho,Cho,k_,Cte,who,Aho,WP,yho,Lho,xho,S_,wte,kho,Sho,HP,Rho,Bho,Pho,R_,Ate,$ho,Iho,UP,qho,Nho,jho,B_,yte,Dho,Gho,JP,Oho,Vho,Xho,P_,zho,Lte,Qho,Who,xte,Hho,Uho,kte,Jho,Yho,fw,NRe,Zi,$_,Ste,mw,Kho,Rte,Zho,jRe,Yo,gw,epo,ed,opo,YP,rpo,tpo,KP,apo,npo,spo,hw,lpo,Bte,ipo,dpo,cpo,zr,pw,fpo,Pte,mpo,gpo,od,hpo,$te,ppo,_po,ZP,upo,bpo,Fpo,Ite,vpo,Tpo,_w,Mpo,Ne,uw,Epo,qte,Cpo,wpo,za,Apo,Nte,ypo,Lpo,jte,xpo,kpo,Dte,Spo,Rpo,Bpo,S,I_,Gte,Ppo,$po,e$,Ipo,qpo,Npo,q_,Ote,jpo,Dpo,o$,Gpo,Opo,Vpo,N_,Vte,Xpo,zpo,r$,Qpo,Wpo,Hpo,j_,Xte,Upo,Jpo,t$,Ypo,Kpo,Zpo,D_,zte,e_o,o_o,a$,r_o,t_o,a_o,G_,Qte,n_o,s_o,n$,l_o,i_o,d_o,O_,Wte,c_o,f_o,s$,m_o,g_o,h_o,V_,Hte,p_o,__o,l$,u_o,b_o,F_o,X_,Ute,v_o,T_o,i$,M_o,E_o,C_o,z_,Jte,w_o,A_o,d$,y_o,L_o,x_o,Q_,Yte,k_o,S_o,c$,R_o,B_o,P_o,W_,Kte,$_o,I_o,f$,q_o,N_o,j_o,H_,Zte,D_o,G_o,m$,O_o,V_o,X_o,U_,eae,z_o,Q_o,g$,W_o,H_o,U_o,J_,oae,J_o,Y_o,h$,K_o,Z_o,euo,Y_,rae,ouo,ruo,p$,tuo,auo,nuo,K_,tae,suo,luo,_$,iuo,duo,cuo,Z_,aae,fuo,muo,u$,guo,huo,puo,eu,nae,_uo,uuo,b$,buo,Fuo,vuo,ou,sae,Tuo,Muo,F$,Euo,Cuo,wuo,ru,lae,Auo,yuo,v$,Luo,xuo,kuo,tu,iae,Suo,Ruo,T$,Buo,Puo,$uo,au,dae,Iuo,quo,M$,Nuo,juo,Duo,nu,cae,Guo,Ouo,E$,Vuo,Xuo,zuo,su,fae,Quo,Wuo,C$,Huo,Uuo,Juo,lu,mae,Yuo,Kuo,w$,Zuo,e1o,o1o,iu,gae,r1o,t1o,A$,a1o,n1o,s1o,du,hae,l1o,i1o,y$,d1o,c1o,f1o,cu,pae,m1o,g1o,L$,h1o,p1o,_1o,fu,_ae,u1o,b1o,x$,F1o,v1o,T1o,mu,uae,M1o,E1o,k$,C1o,w1o,A1o,gu,bae,y1o,L1o,S$,x1o,k1o,S1o,hu,Fae,R1o,B1o,R$,P1o,$1o,I1o,pu,vae,q1o,N1o,B$,j1o,D1o,G1o,_u,Tae,O1o,V1o,P$,X1o,z1o,Q1o,uu,Mae,W1o,H1o,$$,U1o,J1o,Y1o,bu,Eae,K1o,Z1o,I$,e4o,o4o,r4o,Fu,Cae,t4o,a4o,q$,n4o,s4o,l4o,vu,wae,i4o,d4o,N$,c4o,f4o,m4o,Tu,g4o,Aae,h4o,p4o,yae,_4o,u4o,Lae,b4o,F4o,bw,DRe,rd,Mu,xae,Fw,v4o,kae,T4o,GRe,Ko,vw,M4o,td,E4o,j$,C4o,w4o,D$,A4o,y4o,L4o,Tw,x4o,Sae,k4o,S4o,R4o,Qr,Mw,B4o,Rae,P4o,$4o,ad,I4o,Bae,q4o,N4o,G$,j4o,D4o,G4o,Pae,O4o,V4o,Ew,X4o,je,Cw,z4o,$ae,Q4o,W4o,Qa,H4o,Iae,U4o,J4o,qae,Y4o,K4o,Nae,Z4o,ebo,obo,$,Eu,jae,rbo,tbo,O$,abo,nbo,sbo,Cu,Dae,lbo,ibo,V$,dbo,cbo,fbo,wu,Gae,mbo,gbo,X$,hbo,pbo,_bo,Au,Oae,ubo,bbo,z$,Fbo,vbo,Tbo,yu,Vae,Mbo,Ebo,Q$,Cbo,wbo,Abo,Lu,Xae,ybo,Lbo,W$,xbo,kbo,Sbo,xu,zae,Rbo,Bbo,H$,Pbo,$bo,Ibo,ku,Qae,qbo,Nbo,U$,jbo,Dbo,Gbo,Su,Wae,Obo,Vbo,J$,Xbo,zbo,Qbo,Ru,Hae,Wbo,Hbo,Y$,Ubo,Jbo,Ybo,Bu,Uae,Kbo,Zbo,K$,e5o,o5o,r5o,Pu,Jae,t5o,a5o,Z$,n5o,s5o,l5o,$u,Yae,i5o,d5o,eI,c5o,f5o,m5o,Iu,Kae,g5o,h5o,oI,p5o,_5o,u5o,qu,Zae,b5o,F5o,rI,v5o,T5o,M5o,Nu,ene,E5o,C5o,tI,w5o,A5o,y5o,ju,one,L5o,x5o,aI,k5o,S5o,R5o,Du,rne,B5o,P5o,nI,$5o,I5o,q5o,Gu,tne,N5o,j5o,sI,D5o,G5o,O5o,Ou,ane,V5o,X5o,lI,z5o,Q5o,W5o,Vu,nne,H5o,U5o,iI,J5o,Y5o,K5o,Xu,sne,Z5o,e3o,dI,o3o,r3o,t3o,zu,lne,a3o,n3o,cI,s3o,l3o,i3o,Qu,ine,d3o,c3o,fI,f3o,m3o,g3o,Wu,dne,h3o,p3o,mI,_3o,u3o,b3o,Hu,cne,F3o,v3o,gI,T3o,M3o,E3o,Uu,fne,C3o,w3o,hI,A3o,y3o,L3o,Ju,mne,x3o,k3o,pI,S3o,R3o,B3o,Yu,gne,P3o,$3o,_I,I3o,q3o,N3o,Ku,hne,j3o,D3o,uI,G3o,O3o,V3o,Zu,pne,X3o,z3o,bI,Q3o,W3o,H3o,e1,_ne,U3o,J3o,FI,Y3o,K3o,Z3o,o1,une,e2o,o2o,vI,r2o,t2o,a2o,r1,bne,n2o,s2o,TI,l2o,i2o,d2o,t1,Fne,c2o,f2o,MI,m2o,g2o,h2o,a1,p2o,vne,_2o,u2o,Tne,b2o,F2o,Mne,v2o,T2o,ww,ORe,nd,n1,Ene,Aw,M2o,Cne,E2o,VRe,Zo,yw,C2o,sd,w2o,EI,A2o,y2o,CI,L2o,x2o,k2o,Lw,S2o,wne,R2o,B2o,P2o,Wr,xw,$2o,Ane,I2o,q2o,ld,N2o,yne,j2o,D2o,wI,G2o,O2o,V2o,Lne,X2o,z2o,kw,Q2o,De,Sw,W2o,xne,H2o,U2o,Wa,J2o,kne,Y2o,K2o,Sne,Z2o,eFo,Rne,oFo,rFo,tFo,I,s1,Bne,aFo,nFo,AI,sFo,lFo,iFo,l1,Pne,dFo,cFo,yI,fFo,mFo,gFo,i1,$ne,hFo,pFo,LI,_Fo,uFo,bFo,d1,Ine,FFo,vFo,xI,TFo,MFo,EFo,c1,qne,CFo,wFo,kI,AFo,yFo,LFo,f1,Nne,xFo,kFo,SI,SFo,RFo,BFo,m1,jne,PFo,$Fo,RI,IFo,qFo,NFo,g1,Dne,jFo,DFo,BI,GFo,OFo,VFo,h1,Gne,XFo,zFo,PI,QFo,WFo,HFo,p1,One,UFo,JFo,$I,YFo,KFo,ZFo,_1,Vne,evo,ovo,II,rvo,tvo,avo,u1,Xne,nvo,svo,qI,lvo,ivo,dvo,b1,zne,cvo,fvo,NI,mvo,gvo,hvo,F1,Qne,pvo,_vo,jI,uvo,bvo,Fvo,v1,Wne,vvo,Tvo,DI,Mvo,Evo,Cvo,T1,Hne,wvo,Avo,GI,yvo,Lvo,xvo,M1,Une,kvo,Svo,OI,Rvo,Bvo,Pvo,E1,Jne,$vo,Ivo,VI,qvo,Nvo,jvo,C1,Yne,Dvo,Gvo,XI,Ovo,Vvo,Xvo,w1,Kne,zvo,Qvo,zI,Wvo,Hvo,Uvo,A1,Zne,Jvo,Yvo,QI,Kvo,Zvo,e6o,y1,ese,o6o,r6o,WI,t6o,a6o,n6o,L1,ose,s6o,l6o,HI,i6o,d6o,c6o,x1,rse,f6o,m6o,UI,g6o,h6o,p6o,k1,tse,_6o,u6o,JI,b6o,F6o,v6o,S1,ase,T6o,M6o,YI,E6o,C6o,w6o,R1,nse,A6o,y6o,KI,L6o,x6o,k6o,B1,sse,S6o,R6o,ZI,B6o,P6o,$6o,P1,lse,I6o,q6o,eq,N6o,j6o,D6o,$1,ise,G6o,O6o,oq,V6o,X6o,z6o,I1,dse,Q6o,W6o,cse,H6o,U6o,J6o,q1,fse,Y6o,K6o,rq,Z6o,eTo,oTo,N1,mse,rTo,tTo,tq,aTo,nTo,sTo,j1,gse,lTo,iTo,aq,dTo,cTo,fTo,D1,hse,mTo,gTo,nq,hTo,pTo,_To,G1,uTo,pse,bTo,FTo,_se,vTo,TTo,use,MTo,ETo,Rw,XRe,id,O1,bse,Bw,CTo,Fse,wTo,zRe,er,Pw,ATo,dd,yTo,sq,LTo,xTo,lq,kTo,STo,RTo,$w,BTo,vse,PTo,$To,ITo,Hr,Iw,qTo,Tse,NTo,jTo,cd,DTo,Mse,GTo,OTo,iq,VTo,XTo,zTo,Ese,QTo,WTo,qw,HTo,Ge,Nw,UTo,Cse,JTo,YTo,Ha,KTo,wse,ZTo,eMo,Ase,oMo,rMo,yse,tMo,aMo,nMo,ne,V1,Lse,sMo,lMo,dq,iMo,dMo,cMo,X1,xse,fMo,mMo,cq,gMo,hMo,pMo,z1,kse,_Mo,uMo,fq,bMo,FMo,vMo,Q1,Sse,TMo,MMo,mq,EMo,CMo,wMo,W1,Rse,AMo,yMo,gq,LMo,xMo,kMo,H1,Bse,SMo,RMo,hq,BMo,PMo,$Mo,U1,Pse,IMo,qMo,pq,NMo,jMo,DMo,J1,$se,GMo,OMo,_q,VMo,XMo,zMo,Y1,Ise,QMo,WMo,uq,HMo,UMo,JMo,K1,qse,YMo,KMo,bq,ZMo,eEo,oEo,Z1,Nse,rEo,tEo,Fq,aEo,nEo,sEo,e4,jse,lEo,iEo,vq,dEo,cEo,fEo,o4,Dse,mEo,gEo,Tq,hEo,pEo,_Eo,r4,Gse,uEo,bEo,Mq,FEo,vEo,TEo,t4,Ose,MEo,EEo,Eq,CEo,wEo,AEo,a4,Vse,yEo,LEo,Cq,xEo,kEo,SEo,n4,Xse,REo,BEo,wq,PEo,$Eo,IEo,s4,qEo,zse,NEo,jEo,Qse,DEo,GEo,Wse,OEo,VEo,jw,QRe,fd,l4,Hse,Dw,XEo,Use,zEo,WRe,or,Gw,QEo,md,WEo,Aq,HEo,UEo,yq,JEo,YEo,KEo,Ow,ZEo,Jse,eCo,oCo,rCo,Ur,Vw,tCo,Yse,aCo,nCo,gd,sCo,Kse,lCo,iCo,Lq,dCo,cCo,fCo,Zse,mCo,gCo,Xw,hCo,Oe,zw,pCo,ele,_Co,uCo,Ua,bCo,ole,FCo,vCo,rle,TCo,MCo,tle,ECo,CCo,wCo,y,i4,ale,ACo,yCo,xq,LCo,xCo,kCo,d4,nle,SCo,RCo,kq,BCo,PCo,$Co,c4,sle,ICo,qCo,Sq,NCo,jCo,DCo,f4,lle,GCo,OCo,Rq,VCo,XCo,zCo,m4,ile,QCo,WCo,Bq,HCo,UCo,JCo,g4,dle,YCo,KCo,Pq,ZCo,ewo,owo,h4,cle,rwo,two,$q,awo,nwo,swo,p4,fle,lwo,iwo,Iq,dwo,cwo,fwo,_4,mle,mwo,gwo,qq,hwo,pwo,_wo,u4,gle,uwo,bwo,Nq,Fwo,vwo,Two,b4,hle,Mwo,Ewo,jq,Cwo,wwo,Awo,F4,ple,ywo,Lwo,Dq,xwo,kwo,Swo,v4,_le,Rwo,Bwo,Gq,Pwo,$wo,Iwo,T4,ule,qwo,Nwo,Oq,jwo,Dwo,Gwo,M4,ble,Owo,Vwo,Vq,Xwo,zwo,Qwo,E4,Fle,Wwo,Hwo,Xq,Uwo,Jwo,Ywo,C4,vle,Kwo,Zwo,zq,eAo,oAo,rAo,w4,Tle,tAo,aAo,Qq,nAo,sAo,lAo,A4,Mle,iAo,dAo,Wq,cAo,fAo,mAo,y4,Ele,gAo,hAo,Hq,pAo,_Ao,uAo,L4,Cle,bAo,FAo,Uq,vAo,TAo,MAo,x4,wle,EAo,CAo,Jq,wAo,AAo,yAo,k4,Ale,LAo,xAo,Yq,kAo,SAo,RAo,S4,yle,BAo,PAo,Kq,$Ao,IAo,qAo,R4,Lle,NAo,jAo,Zq,DAo,GAo,OAo,B4,xle,VAo,XAo,eN,zAo,QAo,WAo,P4,kle,HAo,UAo,oN,JAo,YAo,KAo,$4,Sle,ZAo,e0o,rN,o0o,r0o,t0o,I4,Rle,a0o,n0o,tN,s0o,l0o,i0o,q4,Ble,d0o,c0o,aN,f0o,m0o,g0o,N4,Ple,h0o,p0o,nN,_0o,u0o,b0o,j4,$le,F0o,v0o,sN,T0o,M0o,E0o,D4,Ile,C0o,w0o,lN,A0o,y0o,L0o,G4,qle,x0o,k0o,iN,S0o,R0o,B0o,O4,Nle,P0o,$0o,dN,I0o,q0o,N0o,V4,jle,j0o,D0o,cN,G0o,O0o,V0o,X4,Dle,X0o,z0o,fN,Q0o,W0o,H0o,z4,Gle,U0o,J0o,mN,Y0o,K0o,Z0o,Q4,Ole,eyo,oyo,gN,ryo,tyo,ayo,W4,Vle,nyo,syo,hN,lyo,iyo,dyo,H4,Xle,cyo,fyo,pN,myo,gyo,hyo,U4,zle,pyo,_yo,_N,uyo,byo,Fyo,J4,Qle,vyo,Tyo,uN,Myo,Eyo,Cyo,Y4,Wle,wyo,Ayo,bN,yyo,Lyo,xyo,K4,Hle,kyo,Syo,FN,Ryo,Byo,Pyo,Z4,Ule,$yo,Iyo,vN,qyo,Nyo,jyo,eb,Jle,Dyo,Gyo,TN,Oyo,Vyo,Xyo,ob,zyo,Yle,Qyo,Wyo,Kle,Hyo,Uyo,Zle,Jyo,Yyo,Qw,HRe,hd,rb,eie,Ww,Kyo,oie,Zyo,URe,rr,Hw,eLo,pd,oLo,MN,rLo,tLo,EN,aLo,nLo,sLo,Uw,lLo,rie,iLo,dLo,cLo,Jr,Jw,fLo,tie,mLo,gLo,_d,hLo,aie,pLo,_Lo,CN,uLo,bLo,FLo,nie,vLo,TLo,Yw,MLo,Ve,Kw,ELo,sie,CLo,wLo,Ja,ALo,lie,yLo,LLo,iie,xLo,kLo,die,SLo,RLo,BLo,G,tb,cie,PLo,$Lo,wN,ILo,qLo,NLo,ab,fie,jLo,DLo,AN,GLo,OLo,VLo,nb,mie,XLo,zLo,yN,QLo,WLo,HLo,sb,gie,ULo,JLo,LN,YLo,KLo,ZLo,lb,hie,e8o,o8o,xN,r8o,t8o,a8o,ib,pie,n8o,s8o,kN,l8o,i8o,d8o,db,_ie,c8o,f8o,SN,m8o,g8o,h8o,cb,uie,p8o,_8o,RN,u8o,b8o,F8o,fb,bie,v8o,T8o,BN,M8o,E8o,C8o,mb,Fie,w8o,A8o,PN,y8o,L8o,x8o,gb,vie,k8o,S8o,$N,R8o,B8o,P8o,hb,Tie,$8o,I8o,IN,q8o,N8o,j8o,pb,Mie,D8o,G8o,qN,O8o,V8o,X8o,_b,Eie,z8o,Q8o,NN,W8o,H8o,U8o,ub,Cie,J8o,Y8o,jN,K8o,Z8o,e7o,bb,wie,o7o,r7o,DN,t7o,a7o,n7o,Fb,Aie,s7o,l7o,GN,i7o,d7o,c7o,vb,yie,f7o,m7o,ON,g7o,h7o,p7o,Tb,Lie,_7o,u7o,VN,b7o,F7o,v7o,Mb,xie,T7o,M7o,XN,E7o,C7o,w7o,Eb,kie,A7o,y7o,zN,L7o,x7o,k7o,Cb,Sie,S7o,R7o,QN,B7o,P7o,$7o,wb,Rie,I7o,q7o,WN,N7o,j7o,D7o,Ab,Bie,G7o,O7o,HN,V7o,X7o,z7o,yb,Pie,Q7o,W7o,UN,H7o,U7o,J7o,Lb,$ie,Y7o,K7o,JN,Z7o,e9o,o9o,xb,Iie,r9o,t9o,YN,a9o,n9o,s9o,kb,qie,l9o,i9o,KN,d9o,c9o,f9o,Sb,m9o,Nie,g9o,h9o,jie,p9o,_9o,Die,u9o,b9o,Zw,JRe,ud,Rb,Gie,eA,F9o,Oie,v9o,YRe,tr,oA,T9o,bd,M9o,ZN,E9o,C9o,ej,w9o,A9o,y9o,rA,L9o,Vie,x9o,k9o,S9o,Yr,tA,R9o,Xie,B9o,P9o,Fd,$9o,zie,I9o,q9o,oj,N9o,j9o,D9o,Qie,G9o,O9o,aA,V9o,Xe,nA,X9o,Wie,z9o,Q9o,Ya,W9o,Hie,H9o,U9o,Uie,J9o,Y9o,Jie,K9o,Z9o,exo,da,Bb,Yie,oxo,rxo,rj,txo,axo,nxo,Pb,Kie,sxo,lxo,tj,ixo,dxo,cxo,$b,Zie,fxo,mxo,aj,gxo,hxo,pxo,Ib,ede,_xo,uxo,nj,bxo,Fxo,vxo,qb,ode,Txo,Mxo,sj,Exo,Cxo,wxo,Nb,Axo,rde,yxo,Lxo,tde,xxo,kxo,ade,Sxo,Rxo,sA,KRe,vd,jb,nde,lA,Bxo,sde,Pxo,ZRe,ar,iA,$xo,Td,Ixo,lj,qxo,Nxo,ij,jxo,Dxo,Gxo,dA,Oxo,lde,Vxo,Xxo,zxo,Kr,cA,Qxo,ide,Wxo,Hxo,Md,Uxo,dde,Jxo,Yxo,dj,Kxo,Zxo,eko,cde,oko,rko,fA,tko,ze,mA,ako,fde,nko,sko,Ka,lko,mde,iko,dko,gde,cko,fko,hde,mko,gko,hko,j,Db,pde,pko,_ko,cj,uko,bko,Fko,Gb,_de,vko,Tko,fj,Mko,Eko,Cko,Ob,ude,wko,Ako,mj,yko,Lko,xko,Vb,bde,kko,Sko,gj,Rko,Bko,Pko,Xb,Fde,$ko,Iko,hj,qko,Nko,jko,zb,vde,Dko,Gko,pj,Oko,Vko,Xko,Qb,Tde,zko,Qko,_j,Wko,Hko,Uko,Wb,Mde,Jko,Yko,uj,Kko,Zko,eSo,Hb,Ede,oSo,rSo,bj,tSo,aSo,nSo,Ub,Cde,sSo,lSo,Fj,iSo,dSo,cSo,Jb,wde,fSo,mSo,vj,gSo,hSo,pSo,Yb,Ade,_So,uSo,Tj,bSo,FSo,vSo,Kb,yde,TSo,MSo,Mj,ESo,CSo,wSo,Zb,Lde,ASo,ySo,Ej,LSo,xSo,kSo,e5,xde,SSo,RSo,Cj,BSo,PSo,$So,o5,kde,ISo,qSo,wj,NSo,jSo,DSo,r5,Sde,GSo,OSo,Aj,VSo,XSo,zSo,t5,Rde,QSo,WSo,yj,HSo,USo,JSo,a5,Bde,YSo,KSo,Lj,ZSo,eRo,oRo,n5,Pde,rRo,tRo,xj,aRo,nRo,sRo,s5,$de,lRo,iRo,kj,dRo,cRo,fRo,l5,Ide,mRo,gRo,Sj,hRo,pRo,_Ro,i5,qde,uRo,bRo,Rj,FRo,vRo,TRo,d5,Nde,MRo,ERo,Bj,CRo,wRo,ARo,c5,jde,yRo,LRo,Pj,xRo,kRo,SRo,f5,Dde,RRo,BRo,$j,PRo,$Ro,IRo,m5,Gde,qRo,NRo,Ij,jRo,DRo,GRo,g5,Ode,ORo,VRo,qj,XRo,zRo,QRo,h5,Vde,WRo,HRo,Nj,URo,JRo,YRo,p5,Xde,KRo,ZRo,jj,eBo,oBo,rBo,_5,zde,tBo,aBo,Dj,nBo,sBo,lBo,u5,Qde,iBo,dBo,Gj,cBo,fBo,mBo,b5,Wde,gBo,hBo,Oj,pBo,_Bo,uBo,F5,bBo,Hde,FBo,vBo,Ude,TBo,MBo,Jde,EBo,CBo,gA,eBe,Ed,v5,Yde,hA,wBo,Kde,ABo,oBe,nr,pA,yBo,Cd,LBo,Vj,xBo,kBo,Xj,SBo,RBo,BBo,_A,PBo,Zde,$Bo,IBo,qBo,Zr,uA,NBo,ece,jBo,DBo,wd,GBo,oce,OBo,VBo,zj,XBo,zBo,QBo,rce,WBo,HBo,bA,UBo,Qe,FA,JBo,tce,YBo,KBo,Za,ZBo,ace,ePo,oPo,nce,rPo,tPo,sce,aPo,nPo,sPo,R,T5,lce,lPo,iPo,Qj,dPo,cPo,fPo,M5,ice,mPo,gPo,Wj,hPo,pPo,_Po,E5,dce,uPo,bPo,Hj,FPo,vPo,TPo,C5,cce,MPo,EPo,Uj,CPo,wPo,APo,w5,fce,yPo,LPo,Jj,xPo,kPo,SPo,A5,mce,RPo,BPo,Yj,PPo,$Po,IPo,y5,gce,qPo,NPo,Kj,jPo,DPo,GPo,L5,hce,OPo,VPo,Zj,XPo,zPo,QPo,x5,pce,WPo,HPo,eD,UPo,JPo,YPo,k5,_ce,KPo,ZPo,oD,e$o,o$o,r$o,S5,uce,t$o,a$o,rD,n$o,s$o,l$o,R5,bce,i$o,d$o,tD,c$o,f$o,m$o,B5,Fce,g$o,h$o,aD,p$o,_$o,u$o,P5,vce,b$o,F$o,nD,v$o,T$o,M$o,$5,Tce,E$o,C$o,sD,w$o,A$o,y$o,I5,Mce,L$o,x$o,lD,k$o,S$o,R$o,q5,Ece,B$o,P$o,iD,$$o,I$o,q$o,N5,Cce,N$o,j$o,dD,D$o,G$o,O$o,j5,wce,V$o,X$o,cD,z$o,Q$o,W$o,D5,Ace,H$o,U$o,fD,J$o,Y$o,K$o,G5,yce,Z$o,eIo,mD,oIo,rIo,tIo,O5,Lce,aIo,nIo,gD,sIo,lIo,iIo,V5,xce,dIo,cIo,hD,fIo,mIo,gIo,X5,kce,hIo,pIo,pD,_Io,uIo,bIo,z5,Sce,FIo,vIo,_D,TIo,MIo,EIo,Q5,Rce,CIo,wIo,uD,AIo,yIo,LIo,W5,Bce,xIo,kIo,bD,SIo,RIo,BIo,H5,Pce,PIo,$Io,FD,IIo,qIo,NIo,U5,$ce,jIo,DIo,vD,GIo,OIo,VIo,J5,Ice,XIo,zIo,TD,QIo,WIo,HIo,Y5,qce,UIo,JIo,MD,YIo,KIo,ZIo,K5,Nce,eqo,oqo,ED,rqo,tqo,aqo,Z5,jce,nqo,sqo,CD,lqo,iqo,dqo,e3,Dce,cqo,fqo,wD,mqo,gqo,hqo,o3,Gce,pqo,_qo,AD,uqo,bqo,Fqo,r3,Oce,vqo,Tqo,yD,Mqo,Eqo,Cqo,t3,Vce,wqo,Aqo,LD,yqo,Lqo,xqo,a3,Xce,kqo,Sqo,xD,Rqo,Bqo,Pqo,n3,zce,$qo,Iqo,kD,qqo,Nqo,jqo,s3,Dqo,Qce,Gqo,Oqo,Wce,Vqo,Xqo,Hce,zqo,Qqo,vA,rBe,Ad,l3,Uce,TA,Wqo,Jce,Hqo,tBe,sr,MA,Uqo,yd,Jqo,SD,Yqo,Kqo,RD,Zqo,eNo,oNo,EA,rNo,Yce,tNo,aNo,nNo,et,CA,sNo,Kce,lNo,iNo,Ld,dNo,Zce,cNo,fNo,BD,mNo,gNo,hNo,efe,pNo,_No,wA,uNo,We,AA,bNo,ofe,FNo,vNo,en,TNo,rfe,MNo,ENo,tfe,CNo,wNo,afe,ANo,yNo,LNo,nfe,i3,sfe,xNo,kNo,PD,SNo,RNo,BNo,d3,PNo,lfe,$No,INo,ife,qNo,NNo,dfe,jNo,DNo,yA,aBe,xd,c3,cfe,LA,GNo,ffe,ONo,nBe,lr,xA,VNo,kd,XNo,$D,zNo,QNo,ID,WNo,HNo,UNo,kA,JNo,mfe,YNo,KNo,ZNo,ot,SA,ejo,gfe,ojo,rjo,Sd,tjo,hfe,ajo,njo,qD,sjo,ljo,ijo,pfe,djo,cjo,RA,fjo,He,BA,mjo,_fe,gjo,hjo,on,pjo,ufe,_jo,ujo,bfe,bjo,Fjo,Ffe,vjo,Tjo,Mjo,fe,f3,vfe,Ejo,Cjo,ND,wjo,Ajo,yjo,m3,Tfe,Ljo,xjo,jD,kjo,Sjo,Rjo,Ds,Mfe,Bjo,Pjo,DD,$jo,Ijo,GD,qjo,Njo,jjo,g3,Efe,Djo,Gjo,OD,Ojo,Vjo,Xjo,ma,Cfe,zjo,Qjo,VD,Wjo,Hjo,XD,Ujo,Jjo,zD,Yjo,Kjo,Zjo,h3,wfe,eDo,oDo,QD,rDo,tDo,aDo,p3,Afe,nDo,sDo,WD,lDo,iDo,dDo,_3,yfe,cDo,fDo,HD,mDo,gDo,hDo,u3,Lfe,pDo,_Do,UD,uDo,bDo,FDo,b3,xfe,vDo,TDo,JD,MDo,EDo,CDo,F3,kfe,wDo,ADo,YD,yDo,LDo,xDo,v3,Sfe,kDo,SDo,KD,RDo,BDo,PDo,T3,$Do,Rfe,IDo,qDo,Bfe,NDo,jDo,Pfe,DDo,GDo,PA,sBe,Rd,M3,$fe,$A,ODo,Ife,VDo,lBe,ir,IA,XDo,Bd,zDo,ZD,QDo,WDo,eG,HDo,UDo,JDo,qA,YDo,qfe,KDo,ZDo,eGo,rt,NA,oGo,Nfe,rGo,tGo,Pd,aGo,jfe,nGo,sGo,oG,lGo,iGo,dGo,Dfe,cGo,fGo,jA,mGo,Ue,DA,gGo,Gfe,hGo,pGo,rn,_Go,Ofe,uGo,bGo,Vfe,FGo,vGo,Xfe,TGo,MGo,EGo,zfe,E3,Qfe,CGo,wGo,rG,AGo,yGo,LGo,C3,xGo,Wfe,kGo,SGo,Hfe,RGo,BGo,Ufe,PGo,$Go,GA,iBe,$d,w3,Jfe,OA,IGo,Yfe,qGo,dBe,dr,VA,NGo,Id,jGo,tG,DGo,GGo,aG,OGo,VGo,XGo,XA,zGo,Kfe,QGo,WGo,HGo,tt,zA,UGo,Zfe,JGo,YGo,qd,KGo,eme,ZGo,eOo,nG,oOo,rOo,tOo,ome,aOo,nOo,QA,sOo,Je,WA,lOo,rme,iOo,dOo,tn,cOo,tme,fOo,mOo,ame,gOo,hOo,nme,pOo,_Oo,uOo,Se,A3,sme,bOo,FOo,sG,vOo,TOo,MOo,y3,lme,EOo,COo,lG,wOo,AOo,yOo,L3,ime,LOo,xOo,iG,kOo,SOo,ROo,x3,dme,BOo,POo,dG,$Oo,IOo,qOo,k3,cme,NOo,jOo,cG,DOo,GOo,OOo,S3,fme,VOo,XOo,fG,zOo,QOo,WOo,R3,mme,HOo,UOo,mG,JOo,YOo,KOo,B3,gme,ZOo,eVo,gG,oVo,rVo,tVo,P3,aVo,hme,nVo,sVo,pme,lVo,iVo,_me,dVo,cVo,HA,cBe,Nd,$3,ume,UA,fVo,bme,mVo,fBe,cr,JA,gVo,jd,hVo,hG,pVo,_Vo,pG,uVo,bVo,FVo,YA,vVo,Fme,TVo,MVo,EVo,at,KA,CVo,vme,wVo,AVo,Dd,yVo,Tme,LVo,xVo,_G,kVo,SVo,RVo,Mme,BVo,PVo,ZA,$Vo,Ye,e0,IVo,Eme,qVo,NVo,an,jVo,Cme,DVo,GVo,wme,OVo,VVo,Ame,XVo,zVo,QVo,nn,I3,yme,WVo,HVo,uG,UVo,JVo,YVo,q3,Lme,KVo,ZVo,bG,eXo,oXo,rXo,N3,xme,tXo,aXo,FG,nXo,sXo,lXo,j3,kme,iXo,dXo,vG,cXo,fXo,mXo,D3,gXo,Sme,hXo,pXo,Rme,_Xo,uXo,Bme,bXo,FXo,o0,mBe,Gd,G3,Pme,r0,vXo,$me,TXo,gBe,fr,t0,MXo,Od,EXo,TG,CXo,wXo,MG,AXo,yXo,LXo,a0,xXo,Ime,kXo,SXo,RXo,nt,n0,BXo,qme,PXo,$Xo,Vd,IXo,Nme,qXo,NXo,EG,jXo,DXo,GXo,jme,OXo,VXo,s0,XXo,Ke,l0,zXo,Dme,QXo,WXo,sn,HXo,Gme,UXo,JXo,Ome,YXo,KXo,Vme,ZXo,ezo,ozo,Re,O3,Xme,rzo,tzo,CG,azo,nzo,szo,V3,zme,lzo,izo,wG,dzo,czo,fzo,X3,Qme,mzo,gzo,AG,hzo,pzo,_zo,z3,Wme,uzo,bzo,yG,Fzo,vzo,Tzo,Q3,Hme,Mzo,Ezo,LG,Czo,wzo,Azo,W3,Ume,yzo,Lzo,xG,xzo,kzo,Szo,H3,Jme,Rzo,Bzo,kG,Pzo,$zo,Izo,U3,Yme,qzo,Nzo,SG,jzo,Dzo,Gzo,J3,Ozo,Kme,Vzo,Xzo,Zme,zzo,Qzo,ege,Wzo,Hzo,i0,hBe,Xd,Y3,oge,d0,Uzo,rge,Jzo,pBe,mr,c0,Yzo,zd,Kzo,RG,Zzo,eQo,BG,oQo,rQo,tQo,f0,aQo,tge,nQo,sQo,lQo,st,m0,iQo,age,dQo,cQo,Qd,fQo,nge,mQo,gQo,PG,hQo,pQo,_Qo,sge,uQo,bQo,g0,FQo,Ze,h0,vQo,lge,TQo,MQo,ln,EQo,ige,CQo,wQo,dge,AQo,yQo,cge,LQo,xQo,kQo,p0,K3,fge,SQo,RQo,$G,BQo,PQo,$Qo,Z3,mge,IQo,qQo,IG,NQo,jQo,DQo,e2,GQo,gge,OQo,VQo,hge,XQo,zQo,pge,QQo,WQo,_0,_Be,Wd,o2,_ge,u0,HQo,uge,UQo,uBe,gr,b0,JQo,Hd,YQo,qG,KQo,ZQo,NG,eWo,oWo,rWo,F0,tWo,bge,aWo,nWo,sWo,lt,v0,lWo,Fge,iWo,dWo,Ud,cWo,vge,fWo,mWo,jG,gWo,hWo,pWo,Tge,_Wo,uWo,T0,bWo,eo,M0,FWo,Mge,vWo,TWo,dn,MWo,Ege,EWo,CWo,Cge,wWo,AWo,wge,yWo,LWo,xWo,cn,r2,Age,kWo,SWo,DG,RWo,BWo,PWo,t2,yge,$Wo,IWo,GG,qWo,NWo,jWo,a2,Lge,DWo,GWo,OG,OWo,VWo,XWo,n2,xge,zWo,QWo,VG,WWo,HWo,UWo,s2,JWo,kge,YWo,KWo,Sge,ZWo,eHo,Rge,oHo,rHo,E0,bBe,Jd,l2,Bge,C0,tHo,Pge,aHo,FBe,hr,w0,nHo,Yd,sHo,XG,lHo,iHo,zG,dHo,cHo,fHo,A0,mHo,$ge,gHo,hHo,pHo,it,y0,_Ho,Ige,uHo,bHo,Kd,FHo,qge,vHo,THo,QG,MHo,EHo,CHo,Nge,wHo,AHo,L0,yHo,oo,x0,LHo,jge,xHo,kHo,fn,SHo,Dge,RHo,BHo,Gge,PHo,$Ho,Oge,IHo,qHo,NHo,Zd,i2,Vge,jHo,DHo,WG,GHo,OHo,VHo,d2,Xge,XHo,zHo,HG,QHo,WHo,HHo,c2,zge,UHo,JHo,UG,YHo,KHo,ZHo,f2,eUo,Qge,oUo,rUo,Wge,tUo,aUo,Hge,nUo,sUo,k0,vBe,ec,m2,Uge,S0,lUo,Jge,iUo,TBe,pr,R0,dUo,oc,cUo,JG,fUo,mUo,YG,gUo,hUo,pUo,B0,_Uo,Yge,uUo,bUo,FUo,dt,P0,vUo,Kge,TUo,MUo,rc,EUo,Zge,CUo,wUo,KG,AUo,yUo,LUo,ehe,xUo,kUo,$0,SUo,ro,I0,RUo,ohe,BUo,PUo,mn,$Uo,rhe,IUo,qUo,the,NUo,jUo,ahe,DUo,GUo,OUo,nhe,g2,she,VUo,XUo,ZG,zUo,QUo,WUo,h2,HUo,lhe,UUo,JUo,ihe,YUo,KUo,dhe,ZUo,eJo,q0,MBe,tc,p2,che,N0,oJo,fhe,rJo,EBe,_r,j0,tJo,ac,aJo,eO,nJo,sJo,oO,lJo,iJo,dJo,D0,cJo,mhe,fJo,mJo,gJo,ct,G0,hJo,ghe,pJo,_Jo,nc,uJo,hhe,bJo,FJo,rO,vJo,TJo,MJo,phe,EJo,CJo,O0,wJo,to,V0,AJo,_he,yJo,LJo,gn,xJo,uhe,kJo,SJo,bhe,RJo,BJo,Fhe,PJo,$Jo,IJo,vhe,_2,The,qJo,NJo,tO,jJo,DJo,GJo,u2,OJo,Mhe,VJo,XJo,Ehe,zJo,QJo,Che,WJo,HJo,X0,CBe,sc,b2,whe,z0,UJo,Ahe,JJo,wBe,ur,Q0,YJo,lc,KJo,aO,ZJo,eYo,nO,oYo,rYo,tYo,W0,aYo,yhe,nYo,sYo,lYo,ft,H0,iYo,Lhe,dYo,cYo,ic,fYo,xhe,mYo,gYo,sO,hYo,pYo,_Yo,khe,uYo,bYo,U0,FYo,ao,J0,vYo,She,TYo,MYo,hn,EYo,Rhe,CYo,wYo,Bhe,AYo,yYo,Phe,LYo,xYo,kYo,dc,F2,$he,SYo,RYo,lO,BYo,PYo,$Yo,v2,Ihe,IYo,qYo,iO,NYo,jYo,DYo,T2,qhe,GYo,OYo,dO,VYo,XYo,zYo,M2,QYo,Nhe,WYo,HYo,jhe,UYo,JYo,Dhe,YYo,KYo,Y0,ABe,cc,E2,Ghe,K0,ZYo,Ohe,eKo,yBe,br,Z0,oKo,fc,rKo,cO,tKo,aKo,fO,nKo,sKo,lKo,ey,iKo,Vhe,dKo,cKo,fKo,mt,oy,mKo,Xhe,gKo,hKo,mc,pKo,zhe,_Ko,uKo,mO,bKo,FKo,vKo,Qhe,TKo,MKo,ry,EKo,no,ty,CKo,Whe,wKo,AKo,pn,yKo,Hhe,LKo,xKo,Uhe,kKo,SKo,Jhe,RKo,BKo,PKo,Yhe,C2,Khe,$Ko,IKo,gO,qKo,NKo,jKo,w2,DKo,Zhe,GKo,OKo,epe,VKo,XKo,ope,zKo,QKo,ay,LBe,gc,A2,rpe,ny,WKo,tpe,HKo,xBe,Fr,sy,UKo,hc,JKo,hO,YKo,KKo,pO,ZKo,eZo,oZo,ly,rZo,ape,tZo,aZo,nZo,gt,iy,sZo,npe,lZo,iZo,pc,dZo,spe,cZo,fZo,_O,mZo,gZo,hZo,lpe,pZo,_Zo,dy,uZo,ho,cy,bZo,ipe,FZo,vZo,_n,TZo,dpe,MZo,EZo,cpe,CZo,wZo,fpe,AZo,yZo,LZo,x,y2,mpe,xZo,kZo,uO,SZo,RZo,BZo,L2,gpe,PZo,$Zo,bO,IZo,qZo,NZo,x2,hpe,jZo,DZo,FO,GZo,OZo,VZo,k2,ppe,XZo,zZo,vO,QZo,WZo,HZo,S2,_pe,UZo,JZo,TO,YZo,KZo,ZZo,R2,upe,eer,oer,MO,rer,ter,aer,B2,bpe,ner,ser,EO,ler,ier,der,P2,Fpe,cer,fer,CO,mer,ger,her,$2,vpe,per,_er,wO,uer,ber,Fer,I2,Tpe,ver,Ter,AO,Mer,Eer,Cer,q2,Mpe,wer,Aer,yO,yer,Ler,xer,N2,Epe,ker,Ser,LO,Rer,Ber,Per,j2,Cpe,$er,Ier,xO,qer,Ner,jer,D2,wpe,Der,Ger,kO,Oer,Ver,Xer,G2,Ape,zer,Qer,SO,Wer,Her,Uer,O2,ype,Jer,Yer,RO,Ker,Zer,eor,Gs,Lpe,oor,ror,BO,tor,aor,PO,nor,sor,lor,V2,xpe,ior,dor,$O,cor,mor,gor,X2,kpe,hor,por,IO,_or,uor,bor,z2,Spe,For,vor,qO,Tor,Mor,Eor,Q2,Rpe,Cor,wor,NO,Aor,yor,Lor,W2,Bpe,xor,kor,jO,Sor,Ror,Bor,H2,Ppe,Por,$or,DO,Ior,qor,Nor,U2,$pe,jor,Dor,GO,Gor,Oor,Vor,J2,Ipe,Xor,zor,OO,Qor,Wor,Hor,Y2,qpe,Uor,Jor,VO,Yor,Kor,Zor,K2,Npe,err,orr,XO,rrr,trr,arr,Z2,jpe,nrr,srr,zO,lrr,irr,drr,eF,Dpe,crr,frr,QO,mrr,grr,hrr,oF,Gpe,prr,_rr,WO,urr,brr,Frr,rF,Ope,vrr,Trr,HO,Mrr,Err,Crr,tF,Vpe,wrr,Arr,UO,yrr,Lrr,xrr,aF,Xpe,krr,Srr,JO,Rrr,Brr,Prr,nF,zpe,$rr,Irr,YO,qrr,Nrr,jrr,sF,Qpe,Drr,Grr,KO,Orr,Vrr,Xrr,lF,Wpe,zrr,Qrr,ZO,Wrr,Hrr,Urr,iF,Hpe,Jrr,Yrr,eV,Krr,Zrr,etr,dF,Upe,otr,rtr,oV,ttr,atr,ntr,cF,Jpe,str,ltr,rV,itr,dtr,ctr,fF,Ype,ftr,mtr,tV,gtr,htr,ptr,mF,Kpe,_tr,utr,aV,btr,Ftr,vtr,gF,Zpe,Ttr,Mtr,nV,Etr,Ctr,wtr,hF,e_e,Atr,ytr,sV,Ltr,xtr,ktr,pF,o_e,Str,Rtr,lV,Btr,Ptr,$tr,_F,r_e,Itr,qtr,iV,Ntr,jtr,Dtr,t_e,Gtr,Otr,fy,kBe,_c,uF,a_e,my,Vtr,n_e,Xtr,SBe,vr,gy,ztr,uc,Qtr,dV,Wtr,Htr,cV,Utr,Jtr,Ytr,hy,Ktr,s_e,Ztr,ear,oar,ht,py,rar,l_e,tar,aar,bc,nar,i_e,sar,lar,fV,iar,dar,car,d_e,far,mar,_y,gar,po,uy,har,c_e,par,_ar,un,uar,f_e,bar,Far,m_e,Tar,Mar,g_e,Ear,Car,war,H,bF,h_e,Aar,yar,mV,Lar,xar,kar,FF,p_e,Sar,Rar,gV,Bar,Par,$ar,vF,__e,Iar,qar,hV,Nar,jar,Dar,TF,u_e,Gar,Oar,pV,Var,Xar,zar,MF,b_e,Qar,War,_V,Har,Uar,Jar,EF,F_e,Yar,Kar,uV,Zar,enr,onr,CF,v_e,rnr,tnr,bV,anr,nnr,snr,wF,T_e,lnr,inr,FV,dnr,cnr,fnr,AF,M_e,mnr,gnr,vV,hnr,pnr,_nr,yF,E_e,unr,bnr,TV,Fnr,vnr,Tnr,LF,C_e,Mnr,Enr,MV,Cnr,wnr,Anr,xF,w_e,ynr,Lnr,EV,xnr,knr,Snr,kF,A_e,Rnr,Bnr,CV,Pnr,$nr,Inr,SF,y_e,qnr,Nnr,wV,jnr,Dnr,Gnr,RF,L_e,Onr,Vnr,AV,Xnr,znr,Qnr,BF,x_e,Wnr,Hnr,yV,Unr,Jnr,Ynr,PF,k_e,Knr,Znr,LV,esr,osr,rsr,$F,S_e,tsr,asr,xV,nsr,ssr,lsr,IF,R_e,isr,dsr,kV,csr,fsr,msr,qF,B_e,gsr,hsr,SV,psr,_sr,usr,NF,P_e,bsr,Fsr,RV,vsr,Tsr,Msr,jF,$_e,Esr,Csr,BV,wsr,Asr,ysr,DF,I_e,Lsr,xsr,PV,ksr,Ssr,Rsr,q_e,Bsr,Psr,by,RBe,Fc,GF,N_e,Fy,$sr,j_e,Isr,BBe,Tr,vy,qsr,vc,Nsr,$V,jsr,Dsr,IV,Gsr,Osr,Vsr,Ty,Xsr,D_e,zsr,Qsr,Wsr,pt,My,Hsr,G_e,Usr,Jsr,Tc,Ysr,O_e,Ksr,Zsr,qV,elr,olr,rlr,V_e,tlr,alr,Ey,nlr,_o,Cy,slr,X_e,llr,ilr,bn,dlr,z_e,clr,flr,Q_e,mlr,glr,W_e,hlr,plr,_lr,de,OF,H_e,ulr,blr,NV,Flr,vlr,Tlr,VF,U_e,Mlr,Elr,jV,Clr,wlr,Alr,XF,J_e,ylr,Llr,DV,xlr,klr,Slr,zF,Y_e,Rlr,Blr,GV,Plr,$lr,Ilr,QF,K_e,qlr,Nlr,OV,jlr,Dlr,Glr,WF,Z_e,Olr,Vlr,VV,Xlr,zlr,Qlr,HF,eue,Wlr,Hlr,XV,Ulr,Jlr,Ylr,UF,oue,Klr,Zlr,zV,eir,oir,rir,JF,rue,tir,air,QV,nir,sir,lir,YF,tue,iir,dir,WV,cir,fir,mir,KF,aue,gir,hir,HV,pir,_ir,uir,ZF,nue,bir,Fir,UV,vir,Tir,Mir,ev,sue,Eir,Cir,JV,wir,Air,yir,lue,Lir,xir,wy,PBe,Mc,ov,iue,Ay,kir,due,Sir,$Be,Mr,yy,Rir,Ec,Bir,YV,Pir,$ir,KV,Iir,qir,Nir,Ly,jir,cue,Dir,Gir,Oir,_t,xy,Vir,fue,Xir,zir,Cc,Qir,mue,Wir,Hir,ZV,Uir,Jir,Yir,gue,Kir,Zir,ky,edr,uo,Sy,odr,hue,rdr,tdr,Fn,adr,pue,ndr,sdr,_ue,ldr,idr,uue,ddr,cdr,fdr,Ry,rv,bue,mdr,gdr,eX,hdr,pdr,_dr,tv,Fue,udr,bdr,oX,Fdr,vdr,Tdr,vue,Mdr,Edr,By,IBe,wc,av,Tue,Py,Cdr,Mue,wdr,qBe,Er,$y,Adr,Ac,ydr,rX,Ldr,xdr,tX,kdr,Sdr,Rdr,Iy,Bdr,Eue,Pdr,$dr,Idr,ut,qy,qdr,Cue,Ndr,jdr,yc,Ddr,wue,Gdr,Odr,aX,Vdr,Xdr,zdr,Aue,Qdr,Wdr,Ny,Hdr,bo,jy,Udr,yue,Jdr,Ydr,vn,Kdr,Lue,Zdr,ecr,xue,ocr,rcr,kue,tcr,acr,ncr,J,nv,Sue,scr,lcr,nX,icr,dcr,ccr,sv,Rue,fcr,mcr,sX,gcr,hcr,pcr,lv,Bue,_cr,ucr,lX,bcr,Fcr,vcr,iv,Pue,Tcr,Mcr,iX,Ecr,Ccr,wcr,dv,$ue,Acr,ycr,dX,Lcr,xcr,kcr,cv,Iue,Scr,Rcr,cX,Bcr,Pcr,$cr,fv,que,Icr,qcr,fX,Ncr,jcr,Dcr,mv,Nue,Gcr,Ocr,mX,Vcr,Xcr,zcr,gv,jue,Qcr,Wcr,gX,Hcr,Ucr,Jcr,hv,Due,Ycr,Kcr,hX,Zcr,efr,ofr,pv,Gue,rfr,tfr,pX,afr,nfr,sfr,_v,Oue,lfr,ifr,_X,dfr,cfr,ffr,uv,Vue,mfr,gfr,uX,hfr,pfr,_fr,bv,Xue,ufr,bfr,bX,Ffr,vfr,Tfr,Fv,zue,Mfr,Efr,FX,Cfr,wfr,Afr,vv,Que,yfr,Lfr,vX,xfr,kfr,Sfr,Tv,Wue,Rfr,Bfr,TX,Pfr,$fr,Ifr,Mv,Hue,qfr,Nfr,MX,jfr,Dfr,Gfr,Ev,Uue,Ofr,Vfr,EX,Xfr,zfr,Qfr,Cv,Jue,Wfr,Hfr,CX,Ufr,Jfr,Yfr,Yue,Kfr,Zfr,Dy,NBe,Lc,wv,Kue,Gy,emr,Zue,omr,jBe,Cr,Oy,rmr,xc,tmr,wX,amr,nmr,AX,smr,lmr,imr,Vy,dmr,e1e,cmr,fmr,mmr,bt,Xy,gmr,o1e,hmr,pmr,kc,_mr,r1e,umr,bmr,yX,Fmr,vmr,Tmr,t1e,Mmr,Emr,zy,Cmr,Fo,Qy,wmr,a1e,Amr,ymr,Tn,Lmr,n1e,xmr,kmr,s1e,Smr,Rmr,l1e,Bmr,Pmr,$mr,be,Av,i1e,Imr,qmr,LX,Nmr,jmr,Dmr,yv,d1e,Gmr,Omr,xX,Vmr,Xmr,zmr,Lv,c1e,Qmr,Wmr,kX,Hmr,Umr,Jmr,xv,f1e,Ymr,Kmr,SX,Zmr,egr,ogr,kv,m1e,rgr,tgr,RX,agr,ngr,sgr,Sv,g1e,lgr,igr,BX,dgr,cgr,fgr,Rv,h1e,mgr,ggr,PX,hgr,pgr,_gr,Bv,p1e,ugr,bgr,$X,Fgr,vgr,Tgr,Pv,_1e,Mgr,Egr,IX,Cgr,wgr,Agr,$v,u1e,ygr,Lgr,qX,xgr,kgr,Sgr,b1e,Rgr,Bgr,Wy,DBe,Sc,Iv,F1e,Hy,Pgr,v1e,$gr,GBe,wr,Uy,Igr,Rc,qgr,NX,Ngr,jgr,jX,Dgr,Ggr,Ogr,Jy,Vgr,T1e,Xgr,zgr,Qgr,Ft,Yy,Wgr,M1e,Hgr,Ugr,Bc,Jgr,E1e,Ygr,Kgr,DX,Zgr,ehr,ohr,C1e,rhr,thr,Ky,ahr,vo,Zy,nhr,w1e,shr,lhr,Mn,ihr,A1e,dhr,chr,y1e,fhr,mhr,L1e,ghr,hhr,phr,V,qv,x1e,_hr,uhr,GX,bhr,Fhr,vhr,Nv,k1e,Thr,Mhr,OX,Ehr,Chr,whr,jv,S1e,Ahr,yhr,VX,Lhr,xhr,khr,Dv,R1e,Shr,Rhr,XX,Bhr,Phr,$hr,Gv,B1e,Ihr,qhr,zX,Nhr,jhr,Dhr,Ov,P1e,Ghr,Ohr,QX,Vhr,Xhr,zhr,Vv,$1e,Qhr,Whr,WX,Hhr,Uhr,Jhr,Xv,I1e,Yhr,Khr,HX,Zhr,epr,opr,zv,q1e,rpr,tpr,UX,apr,npr,spr,Qv,N1e,lpr,ipr,JX,dpr,cpr,fpr,Wv,j1e,mpr,gpr,YX,hpr,ppr,_pr,Hv,D1e,upr,bpr,KX,Fpr,vpr,Tpr,Uv,G1e,Mpr,Epr,ZX,Cpr,wpr,Apr,Jv,O1e,ypr,Lpr,ez,xpr,kpr,Spr,Yv,V1e,Rpr,Bpr,oz,Ppr,$pr,Ipr,Kv,X1e,qpr,Npr,rz,jpr,Dpr,Gpr,Zv,z1e,Opr,Vpr,tz,Xpr,zpr,Qpr,e6,Q1e,Wpr,Hpr,az,Upr,Jpr,Ypr,o6,W1e,Kpr,Zpr,nz,e_r,o_r,r_r,r6,H1e,t_r,a_r,sz,n_r,s_r,l_r,t6,U1e,i_r,d_r,lz,c_r,f_r,m_r,a6,J1e,g_r,h_r,iz,p_r,__r,u_r,n6,Y1e,b_r,F_r,dz,v_r,T_r,M_r,s6,K1e,E_r,C_r,cz,w_r,A_r,y_r,l6,Z1e,L_r,x_r,fz,k_r,S_r,R_r,i6,e4e,B_r,P_r,mz,$_r,I_r,q_r,o4e,N_r,j_r,eL,OBe,Pc,d6,r4e,oL,D_r,t4e,G_r,VBe,Ar,rL,O_r,$c,V_r,gz,X_r,z_r,hz,Q_r,W_r,H_r,tL,U_r,a4e,J_r,Y_r,K_r,vt,aL,Z_r,n4e,eur,our,Ic,rur,s4e,tur,aur,pz,nur,sur,lur,l4e,iur,dur,nL,cur,To,sL,fur,i4e,mur,gur,En,hur,d4e,pur,_ur,c4e,uur,bur,f4e,Fur,vur,Tur,se,c6,m4e,Mur,Eur,_z,Cur,wur,Aur,f6,g4e,yur,Lur,uz,xur,kur,Sur,m6,h4e,Rur,Bur,bz,Pur,$ur,Iur,g6,p4e,qur,Nur,Fz,jur,Dur,Gur,h6,_4e,Our,Vur,vz,Xur,zur,Qur,p6,u4e,Wur,Hur,Tz,Uur,Jur,Yur,_6,b4e,Kur,Zur,Mz,e1r,o1r,r1r,u6,F4e,t1r,a1r,Ez,n1r,s1r,l1r,b6,v4e,i1r,d1r,Cz,c1r,f1r,m1r,F6,T4e,g1r,h1r,wz,p1r,_1r,u1r,v6,M4e,b1r,F1r,Az,v1r,T1r,M1r,T6,E4e,E1r,C1r,yz,w1r,A1r,y1r,M6,C4e,L1r,x1r,Lz,k1r,S1r,R1r,E6,w4e,B1r,P1r,xz,$1r,I1r,q1r,C6,A4e,N1r,j1r,kz,D1r,G1r,O1r,w6,y4e,V1r,X1r,Sz,z1r,Q1r,W1r,A6,L4e,H1r,U1r,Rz,J1r,Y1r,K1r,x4e,Z1r,e4r,lL,XBe,qc,y6,k4e,iL,o4r,S4e,r4r,zBe,yr,dL,t4r,Nc,a4r,Bz,n4r,s4r,Pz,l4r,i4r,d4r,cL,c4r,R4e,f4r,m4r,g4r,Tt,fL,h4r,B4e,p4r,_4r,jc,u4r,P4e,b4r,F4r,$z,v4r,T4r,M4r,$4e,E4r,C4r,mL,w4r,Mo,gL,A4r,I4e,y4r,L4r,Cn,x4r,q4e,k4r,S4r,N4e,R4r,B4r,j4e,P4r,$4r,I4r,D4e,L6,G4e,q4r,N4r,Iz,j4r,D4r,G4r,O4e,O4r,V4r,hL,QBe,Dc,x6,V4e,pL,X4r,X4e,z4r,WBe,Lr,_L,Q4r,Gc,W4r,qz,H4r,U4r,Nz,J4r,Y4r,K4r,uL,Z4r,z4e,ebr,obr,rbr,Mt,bL,tbr,Q4e,abr,nbr,Oc,sbr,W4e,lbr,ibr,jz,dbr,cbr,fbr,H4e,mbr,gbr,FL,hbr,Eo,vL,pbr,U4e,_br,ubr,wn,bbr,J4e,Fbr,vbr,Y4e,Tbr,Mbr,K4e,Ebr,Cbr,wbr,Y,k6,Z4e,Abr,ybr,Dz,Lbr,xbr,kbr,S6,ebe,Sbr,Rbr,Gz,Bbr,Pbr,$br,R6,obe,Ibr,qbr,Oz,Nbr,jbr,Dbr,B6,rbe,Gbr,Obr,Vz,Vbr,Xbr,zbr,P6,tbe,Qbr,Wbr,Xz,Hbr,Ubr,Jbr,$6,abe,Ybr,Kbr,zz,Zbr,e5r,o5r,I6,nbe,r5r,t5r,Qz,a5r,n5r,s5r,q6,sbe,l5r,i5r,Wz,d5r,c5r,f5r,N6,lbe,m5r,g5r,Hz,h5r,p5r,_5r,j6,ibe,u5r,b5r,Uz,F5r,v5r,T5r,D6,dbe,M5r,E5r,Jz,C5r,w5r,A5r,G6,cbe,y5r,L5r,Yz,x5r,k5r,S5r,O6,fbe,R5r,B5r,Kz,P5r,$5r,I5r,V6,mbe,q5r,N5r,Zz,j5r,D5r,G5r,X6,gbe,O5r,V5r,eQ,X5r,z5r,Q5r,z6,hbe,W5r,H5r,oQ,U5r,J5r,Y5r,Q6,pbe,K5r,Z5r,rQ,e3r,o3r,r3r,W6,_be,t3r,a3r,tQ,n3r,s3r,l3r,H6,ube,i3r,d3r,aQ,c3r,f3r,m3r,U6,bbe,g3r,h3r,nQ,p3r,_3r,u3r,Fbe,b3r,F3r,TL,HBe,Vc,J6,vbe,ML,v3r,Tbe,T3r,UBe,xr,EL,M3r,Xc,E3r,sQ,C3r,w3r,lQ,A3r,y3r,L3r,CL,x3r,Mbe,k3r,S3r,R3r,Et,wL,B3r,Ebe,P3r,$3r,zc,I3r,Cbe,q3r,N3r,iQ,j3r,D3r,G3r,wbe,O3r,V3r,AL,X3r,Co,yL,z3r,Abe,Q3r,W3r,An,H3r,ybe,U3r,J3r,Lbe,Y3r,K3r,xbe,Z3r,e2r,o2r,K,Y6,kbe,r2r,t2r,dQ,a2r,n2r,s2r,K6,Sbe,l2r,i2r,cQ,d2r,c2r,f2r,Z6,Rbe,m2r,g2r,fQ,h2r,p2r,_2r,eT,Bbe,u2r,b2r,mQ,F2r,v2r,T2r,oT,Pbe,M2r,E2r,gQ,C2r,w2r,A2r,rT,$be,y2r,L2r,hQ,x2r,k2r,S2r,tT,Ibe,R2r,B2r,pQ,P2r,$2r,I2r,aT,qbe,q2r,N2r,_Q,j2r,D2r,G2r,nT,Nbe,O2r,V2r,uQ,X2r,z2r,Q2r,sT,jbe,W2r,H2r,bQ,U2r,J2r,Y2r,lT,Dbe,K2r,Z2r,FQ,eFr,oFr,rFr,iT,Gbe,tFr,aFr,vQ,nFr,sFr,lFr,dT,Obe,iFr,dFr,TQ,cFr,fFr,mFr,cT,Vbe,gFr,hFr,MQ,pFr,_Fr,uFr,fT,Xbe,bFr,FFr,EQ,vFr,TFr,MFr,mT,zbe,EFr,CFr,CQ,wFr,AFr,yFr,gT,Qbe,LFr,xFr,wQ,kFr,SFr,RFr,hT,Wbe,BFr,PFr,AQ,$Fr,IFr,qFr,pT,Hbe,NFr,jFr,yQ,DFr,GFr,OFr,_T,Ube,VFr,XFr,LQ,zFr,QFr,WFr,Jbe,HFr,UFr,LL,JBe,Qc,uT,Ybe,xL,JFr,Kbe,YFr,YBe,kr,kL,KFr,Wc,ZFr,xQ,evr,ovr,kQ,rvr,tvr,avr,SL,nvr,Zbe,svr,lvr,ivr,Ct,RL,dvr,e5e,cvr,fvr,Hc,mvr,o5e,gvr,hvr,SQ,pvr,_vr,uvr,r5e,bvr,Fvr,BL,vvr,wo,PL,Tvr,t5e,Mvr,Evr,yn,Cvr,a5e,wvr,Avr,n5e,yvr,Lvr,s5e,xvr,kvr,Svr,l5e,bT,i5e,Rvr,Bvr,RQ,Pvr,$vr,Ivr,d5e,qvr,Nvr,$L,KBe,Uc,FT,c5e,IL,jvr,f5e,Dvr,ZBe,Sr,qL,Gvr,Jc,Ovr,BQ,Vvr,Xvr,PQ,zvr,Qvr,Wvr,NL,Hvr,m5e,Uvr,Jvr,Yvr,wt,jL,Kvr,g5e,Zvr,e6r,Yc,o6r,h5e,r6r,t6r,$Q,a6r,n6r,s6r,p5e,l6r,i6r,DL,d6r,Ao,GL,c6r,_5e,f6r,m6r,Ln,g6r,u5e,h6r,p6r,b5e,_6r,u6r,F5e,b6r,F6r,v6r,v5e,vT,T5e,T6r,M6r,IQ,E6r,C6r,w6r,M5e,A6r,y6r,OL,ePe,Kc,TT,E5e,VL,L6r,C5e,x6r,oPe,Rr,XL,k6r,Zc,S6r,qQ,R6r,B6r,NQ,P6r,$6r,I6r,zL,q6r,w5e,N6r,j6r,D6r,At,QL,G6r,A5e,O6r,V6r,ef,X6r,y5e,z6r,Q6r,jQ,W6r,H6r,U6r,L5e,J6r,Y6r,WL,K6r,yo,HL,Z6r,x5e,eTr,oTr,xn,rTr,k5e,tTr,aTr,S5e,nTr,sTr,R5e,lTr,iTr,dTr,z,MT,B5e,cTr,fTr,DQ,mTr,gTr,hTr,ET,P5e,pTr,_Tr,GQ,uTr,bTr,FTr,CT,$5e,vTr,TTr,OQ,MTr,ETr,CTr,wT,I5e,wTr,ATr,VQ,yTr,LTr,xTr,AT,q5e,kTr,STr,XQ,RTr,BTr,PTr,yT,N5e,$Tr,ITr,zQ,qTr,NTr,jTr,LT,j5e,DTr,GTr,QQ,OTr,VTr,XTr,xT,D5e,zTr,QTr,WQ,WTr,HTr,UTr,kT,G5e,JTr,YTr,HQ,KTr,ZTr,eMr,ST,O5e,oMr,rMr,UQ,tMr,aMr,nMr,RT,V5e,sMr,lMr,JQ,iMr,dMr,cMr,BT,X5e,fMr,mMr,YQ,gMr,hMr,pMr,PT,z5e,_Mr,uMr,KQ,bMr,FMr,vMr,$T,Q5e,TMr,MMr,ZQ,EMr,CMr,wMr,IT,W5e,AMr,yMr,eW,LMr,xMr,kMr,qT,H5e,SMr,RMr,oW,BMr,PMr,$Mr,NT,U5e,IMr,qMr,rW,NMr,jMr,DMr,jT,J5e,GMr,OMr,tW,VMr,XMr,zMr,DT,Y5e,QMr,WMr,aW,HMr,UMr,JMr,GT,K5e,YMr,KMr,nW,ZMr,eEr,oEr,OT,Z5e,rEr,tEr,sW,aEr,nEr,sEr,VT,e3e,lEr,iEr,lW,dEr,cEr,fEr,XT,o3e,mEr,gEr,iW,hEr,pEr,_Er,zT,r3e,uEr,bEr,dW,FEr,vEr,TEr,QT,t3e,MEr,EEr,cW,CEr,wEr,AEr,a3e,yEr,LEr,UL,rPe,of,WT,n3e,JL,xEr,s3e,kEr,tPe,Br,YL,SEr,rf,REr,fW,BEr,PEr,mW,$Er,IEr,qEr,KL,NEr,l3e,jEr,DEr,GEr,yt,ZL,OEr,i3e,VEr,XEr,tf,zEr,d3e,QEr,WEr,gW,HEr,UEr,JEr,c3e,YEr,KEr,e8,ZEr,Lo,o8,eCr,f3e,oCr,rCr,kn,tCr,m3e,aCr,nCr,g3e,sCr,lCr,h3e,iCr,dCr,cCr,ca,HT,p3e,fCr,mCr,hW,gCr,hCr,pCr,UT,_3e,_Cr,uCr,pW,bCr,FCr,vCr,JT,u3e,TCr,MCr,_W,ECr,CCr,wCr,YT,b3e,ACr,yCr,uW,LCr,xCr,kCr,KT,F3e,SCr,RCr,bW,BCr,PCr,$Cr,v3e,ICr,qCr,r8,aPe,af,ZT,T3e,t8,NCr,M3e,jCr,nPe,Pr,a8,DCr,nf,GCr,FW,OCr,VCr,vW,XCr,zCr,QCr,n8,WCr,E3e,HCr,UCr,JCr,Lt,s8,YCr,C3e,KCr,ZCr,sf,ewr,w3e,owr,rwr,TW,twr,awr,nwr,A3e,swr,lwr,l8,iwr,xo,i8,dwr,y3e,cwr,fwr,Sn,mwr,L3e,gwr,hwr,x3e,pwr,_wr,k3e,uwr,bwr,Fwr,me,eM,S3e,vwr,Twr,MW,Mwr,Ewr,Cwr,oM,R3e,wwr,Awr,EW,ywr,Lwr,xwr,rM,B3e,kwr,Swr,CW,Rwr,Bwr,Pwr,tM,P3e,$wr,Iwr,wW,qwr,Nwr,jwr,aM,$3e,Dwr,Gwr,AW,Owr,Vwr,Xwr,nM,I3e,zwr,Qwr,yW,Wwr,Hwr,Uwr,sM,q3e,Jwr,Ywr,LW,Kwr,Zwr,eAr,lM,N3e,oAr,rAr,xW,tAr,aAr,nAr,iM,j3e,sAr,lAr,kW,iAr,dAr,cAr,dM,D3e,fAr,mAr,SW,gAr,hAr,pAr,cM,G3e,_Ar,uAr,RW,bAr,FAr,vAr,fM,O3e,TAr,MAr,BW,EAr,CAr,wAr,V3e,AAr,yAr,d8,sPe,lf,mM,X3e,c8,LAr,z3e,xAr,lPe,$r,f8,kAr,df,SAr,PW,RAr,BAr,$W,PAr,$Ar,IAr,m8,qAr,Q3e,NAr,jAr,DAr,xt,g8,GAr,W3e,OAr,VAr,cf,XAr,H3e,zAr,QAr,IW,WAr,HAr,UAr,U3e,JAr,YAr,h8,KAr,ko,p8,ZAr,J3e,e0r,o0r,Rn,r0r,Y3e,t0r,a0r,K3e,n0r,s0r,Z3e,l0r,i0r,d0r,Fe,gM,e2e,c0r,f0r,qW,m0r,g0r,h0r,hM,o2e,p0r,_0r,NW,u0r,b0r,F0r,pM,r2e,v0r,T0r,jW,M0r,E0r,C0r,_M,t2e,w0r,A0r,DW,y0r,L0r,x0r,uM,a2e,k0r,S0r,GW,R0r,B0r,P0r,bM,n2e,$0r,I0r,OW,q0r,N0r,j0r,FM,s2e,D0r,G0r,VW,O0r,V0r,X0r,vM,l2e,z0r,Q0r,XW,W0r,H0r,U0r,TM,i2e,J0r,Y0r,zW,K0r,Z0r,eyr,MM,d2e,oyr,ryr,QW,tyr,ayr,nyr,c2e,syr,lyr,_8,iPe,ff,EM,f2e,u8,iyr,m2e,dyr,dPe,Ir,b8,cyr,mf,fyr,WW,myr,gyr,HW,hyr,pyr,_yr,F8,uyr,g2e,byr,Fyr,vyr,kt,v8,Tyr,h2e,Myr,Eyr,gf,Cyr,p2e,wyr,Ayr,UW,yyr,Lyr,xyr,_2e,kyr,Syr,T8,Ryr,So,M8,Byr,u2e,Pyr,$yr,Bn,Iyr,b2e,qyr,Nyr,F2e,jyr,Dyr,v2e,Gyr,Oyr,Vyr,Ee,CM,T2e,Xyr,zyr,JW,Qyr,Wyr,Hyr,wM,M2e,Uyr,Jyr,YW,Yyr,Kyr,Zyr,AM,E2e,eLr,oLr,KW,rLr,tLr,aLr,yM,C2e,nLr,sLr,ZW,lLr,iLr,dLr,LM,w2e,cLr,fLr,eH,mLr,gLr,hLr,xM,A2e,pLr,_Lr,oH,uLr,bLr,FLr,kM,y2e,vLr,TLr,rH,MLr,ELr,CLr,SM,L2e,wLr,ALr,tH,yLr,LLr,xLr,RM,x2e,kLr,SLr,aH,RLr,BLr,PLr,k2e,$Lr,ILr,E8,cPe,hf,BM,S2e,C8,qLr,R2e,NLr,fPe,qr,w8,jLr,pf,DLr,nH,GLr,OLr,sH,VLr,XLr,zLr,A8,QLr,B2e,WLr,HLr,ULr,St,y8,JLr,P2e,YLr,KLr,_f,ZLr,$2e,e8r,o8r,lH,r8r,t8r,a8r,I2e,n8r,s8r,L8,l8r,Ro,x8,i8r,q2e,d8r,c8r,Pn,f8r,N2e,m8r,g8r,j2e,h8r,p8r,D2e,_8r,u8r,b8r,ve,PM,G2e,F8r,v8r,iH,T8r,M8r,E8r,$M,O2e,C8r,w8r,dH,A8r,y8r,L8r,IM,V2e,x8r,k8r,cH,S8r,R8r,B8r,qM,X2e,P8r,$8r,fH,I8r,q8r,N8r,NM,z2e,j8r,D8r,mH,G8r,O8r,V8r,jM,Q2e,X8r,z8r,gH,Q8r,W8r,H8r,DM,W2e,U8r,J8r,hH,Y8r,K8r,Z8r,GM,H2e,e7r,o7r,pH,r7r,t7r,a7r,OM,U2e,n7r,s7r,_H,l7r,i7r,d7r,VM,J2e,c7r,f7r,uH,m7r,g7r,h7r,Y2e,p7r,_7r,k8,mPe,uf,XM,K2e,S8,u7r,Z2e,b7r,gPe,Nr,R8,F7r,bf,v7r,bH,T7r,M7r,FH,E7r,C7r,w7r,B8,A7r,eFe,y7r,L7r,x7r,Rt,P8,k7r,oFe,S7r,R7r,Ff,B7r,rFe,P7r,$7r,vH,I7r,q7r,N7r,tFe,j7r,D7r,$8,G7r,Bo,I8,O7r,aFe,V7r,X7r,$n,z7r,nFe,Q7r,W7r,sFe,H7r,U7r,lFe,J7r,Y7r,K7r,Te,zM,iFe,Z7r,e9r,TH,o9r,r9r,t9r,QM,dFe,a9r,n9r,MH,s9r,l9r,i9r,WM,cFe,d9r,c9r,EH,f9r,m9r,g9r,HM,fFe,h9r,p9r,CH,_9r,u9r,b9r,UM,mFe,F9r,v9r,wH,T9r,M9r,E9r,JM,gFe,C9r,w9r,AH,A9r,y9r,L9r,YM,hFe,x9r,k9r,yH,S9r,R9r,B9r,KM,pFe,P9r,$9r,LH,I9r,q9r,N9r,ZM,_Fe,j9r,D9r,xH,G9r,O9r,V9r,eE,uFe,X9r,z9r,kH,Q9r,W9r,H9r,bFe,U9r,J9r,q8,hPe,vf,oE,FFe,N8,Y9r,vFe,K9r,pPe,jr,j8,Z9r,Tf,exr,SH,oxr,rxr,RH,txr,axr,nxr,D8,sxr,TFe,lxr,ixr,dxr,Bt,G8,cxr,MFe,fxr,mxr,Mf,gxr,EFe,hxr,pxr,BH,_xr,uxr,bxr,CFe,Fxr,vxr,O8,Txr,Po,V8,Mxr,wFe,Exr,Cxr,In,wxr,AFe,Axr,yxr,yFe,Lxr,xxr,LFe,kxr,Sxr,Rxr,Be,rE,xFe,Bxr,Pxr,PH,$xr,Ixr,qxr,tE,kFe,Nxr,jxr,$H,Dxr,Gxr,Oxr,aE,SFe,Vxr,Xxr,IH,zxr,Qxr,Wxr,nE,RFe,Hxr,Uxr,qH,Jxr,Yxr,Kxr,sE,BFe,Zxr,ekr,NH,okr,rkr,tkr,lE,PFe,akr,nkr,jH,skr,lkr,ikr,iE,$Fe,dkr,ckr,DH,fkr,mkr,gkr,dE,IFe,hkr,pkr,GH,_kr,ukr,bkr,qFe,Fkr,vkr,X8,_Pe,Ef,cE,NFe,z8,Tkr,jFe,Mkr,uPe,Dr,Q8,Ekr,Cf,Ckr,OH,wkr,Akr,VH,ykr,Lkr,xkr,W8,kkr,DFe,Skr,Rkr,Bkr,Pt,H8,Pkr,GFe,$kr,Ikr,wf,qkr,OFe,Nkr,jkr,XH,Dkr,Gkr,Okr,VFe,Vkr,Xkr,U8,zkr,$o,J8,Qkr,XFe,Wkr,Hkr,qn,Ukr,zFe,Jkr,Ykr,QFe,Kkr,Zkr,WFe,eSr,oSr,rSr,Pe,fE,HFe,tSr,aSr,zH,nSr,sSr,lSr,mE,UFe,iSr,dSr,QH,cSr,fSr,mSr,gE,JFe,gSr,hSr,WH,pSr,_Sr,uSr,hE,YFe,bSr,FSr,HH,vSr,TSr,MSr,pE,KFe,ESr,CSr,UH,wSr,ASr,ySr,_E,ZFe,LSr,xSr,JH,kSr,SSr,RSr,uE,eve,BSr,PSr,YH,$Sr,ISr,qSr,bE,ove,NSr,jSr,KH,DSr,GSr,OSr,rve,VSr,XSr,Y8,bPe,Af,FE,tve,K8,zSr,ave,QSr,FPe,Gr,Z8,WSr,yf,HSr,ZH,USr,JSr,eU,YSr,KSr,ZSr,e7,eRr,nve,oRr,rRr,tRr,$t,o7,aRr,sve,nRr,sRr,Lf,lRr,lve,iRr,dRr,oU,cRr,fRr,mRr,ive,gRr,hRr,r7,pRr,Io,t7,_Rr,dve,uRr,bRr,Nn,FRr,cve,vRr,TRr,fve,MRr,ERr,mve,CRr,wRr,ARr,gve,vE,hve,yRr,LRr,rU,xRr,kRr,SRr,pve,RRr,BRr,a7,vPe,xf,TE,_ve,n7,PRr,uve,$Rr,TPe,Or,s7,IRr,kf,qRr,tU,NRr,jRr,aU,DRr,GRr,ORr,l7,VRr,bve,XRr,zRr,QRr,It,i7,WRr,Fve,HRr,URr,Sf,JRr,vve,YRr,KRr,nU,ZRr,eBr,oBr,Tve,rBr,tBr,d7,aBr,qo,c7,nBr,Mve,sBr,lBr,jn,iBr,Eve,dBr,cBr,Cve,fBr,mBr,wve,gBr,hBr,pBr,f7,ME,Ave,_Br,uBr,sU,bBr,FBr,vBr,EE,yve,TBr,MBr,lU,EBr,CBr,wBr,Lve,ABr,yBr,m7,MPe,Rf,CE,xve,g7,LBr,kve,xBr,EPe,Vr,h7,kBr,Bf,SBr,iU,RBr,BBr,dU,PBr,$Br,IBr,p7,qBr,Sve,NBr,jBr,DBr,qt,_7,GBr,Rve,OBr,VBr,Pf,XBr,Bve,zBr,QBr,cU,WBr,HBr,UBr,Pve,JBr,YBr,u7,KBr,No,b7,ZBr,$ve,ePr,oPr,Dn,rPr,Ive,tPr,aPr,qve,nPr,sPr,Nve,lPr,iPr,dPr,jve,wE,Dve,cPr,fPr,fU,mPr,gPr,hPr,Gve,pPr,_Pr,F7,CPe;return he=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),xC=new X({}),kC=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new uPr({props:{warning:!0,$$slots:{default:[twt]},$$scope:{ctx:If}}}),SC=new X({}),RC=new C({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/configuration_auto.py#L552"}}),$C=new C({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/configuration_auto.py#L575",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),IC=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),qC=new C({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/configuration_auto.py#L697",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),NC=new X({}),jC=new C({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/tokenization_auto.py#L352"}}),OC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16543/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),VC=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),XC=new C({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),zC=new X({}),QC=new C({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),UC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/feature_extraction_auto.py#L186",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16543/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Ih=new uPr({props:{$$slots:{default:[awt]},$$scope:{ctx:If}}}),JC=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),YC=new C({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/feature_extraction_auto.py#L313",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),KC=new X({}),ZC=new C({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/processing_auto.py#L70"}}),rw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Wh=new uPr({props:{$$slots:{default:[nwt]},$$scope:{ctx:If}}}),tw=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),aw=new C({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),nw=new X({}),sw=new C({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L711"}}),iw=new C({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),dw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),cw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mw=new X({}),gw=new C({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L718"}}),pw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),_w=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),uw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bw=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Fw=new X({}),vw=new C({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L733"}}),Mw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Ew=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),Cw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ww=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Aw=new X({}),yw=new C({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L740"}}),xw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),kw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),Sw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Rw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Bw=new X({}),Pw=new C({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L747"}}),Iw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),qw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),Nw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dw=new X({}),Gw=new C({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L756"}}),Vw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Xw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),zw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ww=new X({}),Hw=new C({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L790"}}),Jw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Yw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),Kw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Zw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eA=new X({}),oA=new C({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L797"}}),tA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),aA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),nA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lA=new X({}),iA=new C({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L783"}}),cA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),fA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),mA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hA=new X({}),pA=new C({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L765"}}),uA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),bA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),FA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TA=new X({}),MA=new C({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L772"}}),CA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),wA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),AA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LA=new X({}),xA=new C({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L806"}}),SA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),RA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),BA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),PA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$A=new X({}),IA=new C({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L845"}}),NA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),jA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),DA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),GA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OA=new X({}),VA=new C({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L852"}}),zA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),QA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),WA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),HA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UA=new X({}),JA=new C({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L875"}}),KA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),ZA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),e0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),o0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r0=new X({}),t0=new C({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L859"}}),n0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),s0=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),l0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),i0=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d0=new X({}),c0=new C({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L866"}}),m0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),g0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),h0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u0=new X({}),b0=new C({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L884"}}),v0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),T0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),M0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),E0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C0=new X({}),w0=new C({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L891"}}),y0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),L0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),x0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),k0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S0=new X({}),R0=new C({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L838"}}),P0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),$0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),I0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),N0=new X({}),j0=new C({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L813"}}),G0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),O0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),V0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z0=new X({}),Q0=new C({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L820"}}),H0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),U0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),J0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Y0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K0=new X({}),Z0=new C({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_auto.py#L829"}}),oy=new C({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),ry=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),ty=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ay=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ny=new X({}),sy=new C({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),iy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),dy=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),cy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fy=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),my=new X({}),gy=new C({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),py=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),_y=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),uy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),by=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Fy=new X({}),vy=new C({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),My=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Ey=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),Cy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ay=new X({}),yy=new C({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),xy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),ky=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),Sy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),By=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Py=new X({}),$y=new C({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L426"}}),qy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),Ny=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),jy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Dy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gy=new X({}),Oy=new C({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),Xy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),zy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),Qy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Wy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hy=new X({}),Uy=new C({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),Yy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Ky=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),Zy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oL=new X({}),rL=new C({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),aL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),nL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),sL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iL=new X({}),dL=new C({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L458"}}),fL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),mL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),gL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pL=new X({}),_L=new C({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),bL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),FL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),vL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),TL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ML=new X({}),EL=new C({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),wL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),AL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),yL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xL=new X({}),kL=new C({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L419"}}),RL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),BL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),PL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$L=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IL=new X({}),qL=new C({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),jL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),DL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),GL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),OL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VL=new X({}),XL=new C({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),QL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),WL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),HL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JL=new X({}),YL=new C({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),ZL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),e8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),o8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t8=new X({}),a8=new C({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),s8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),l8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),i8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c8=new X({}),f8=new C({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),g8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),h8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),p8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u8=new X({}),b8=new C({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),v8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),T8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),M8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),E8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C8=new X({}),w8=new C({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),y8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),L8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),x8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),k8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S8=new X({}),R8=new C({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),P8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),$8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),I8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),N8=new X({}),j8=new C({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),G8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),O8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),V8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z8=new X({}),Q8=new C({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),H8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),U8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),J8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Y8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K8=new X({}),Z8=new C({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),o7=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),r7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),t7=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),a7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n7=new X({}),s7=new C({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),i7=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),d7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),c7=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g7=new X({}),h7=new C({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),_7=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),u7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),b7=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16543/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),F7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),ce=a("h1"),Ce=a("a"),lo=a("span"),f(he.$$.fragment),Me=l(),Xo=a("span"),Ii=o("Auto Classes"),qf=l(),fa=a("p"),qi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),wC=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),AC=o("AutoConfig"),On=o(", "),Vn=a("a"),yC=o("AutoModel"),Di=o(`, and
`),Xn=a("a"),LC=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(Da.$$.fragment),fo=l(),ue=a("p"),u9=o("will create a model that is an instance of "),Oi=a("a"),b9=o("BertModel"),F9=o("."),zo=l(),Ga=a("p"),v9=o("There is one class of "),Df=a("code"),T9=o("AutoModel"),IIe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),ERe=l(),Vi=a("h2"),Gf=a("a"),nY=a("span"),f(xC.$$.fragment),qIe=l(),sY=a("span"),NIe=o("Extending the Auto Classes"),CRe=l(),zn=a("p"),jIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),lY=a("code"),DIe=o("NewModel"),GIe=o(", make sure you have a "),iY=a("code"),OIe=o("NewModelConfig"),VIe=o(` then you can add those to the auto
classes like this:`),wRe=l(),f(kC.$$.fragment),ARe=l(),M9=a("p"),XIe=o("You will then be able to use the auto classes like you would usually do!"),yRe=l(),f(Of.$$.fragment),LRe=l(),Xi=a("h2"),Vf=a("a"),dY=a("span"),f(SC.$$.fragment),zIe=l(),cY=a("span"),QIe=o("AutoConfig"),xRe=l(),Qo=a("div"),f(RC.$$.fragment),WIe=l(),BC=a("p"),HIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),E9=a("a"),UIe=o("from_pretrained()"),JIe=o(" class method."),YIe=l(),PC=a("p"),KIe=o("This class cannot be instantiated directly using "),fY=a("code"),ZIe=o("__init__()"),eqe=o(" (throws an error)."),oqe=l(),mo=a("div"),f($C.$$.fragment),rqe=l(),mY=a("p"),tqe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),aqe=l(),zi=a("p"),nqe=o("The configuration class to instantiate is selected based on the "),gY=a("code"),sqe=o("model_type"),lqe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),hY=a("code"),iqe=o("pretrained_model_name_or_path"),dqe=o(":"),cqe=l(),F=a("ul"),Xf=a("li"),pY=a("strong"),fqe=o("albert"),mqe=o(" \u2014 "),C9=a("a"),gqe=o("AlbertConfig"),hqe=o(" (ALBERT model)"),pqe=l(),zf=a("li"),_Y=a("strong"),_qe=o("bart"),uqe=o(" \u2014 "),w9=a("a"),bqe=o("BartConfig"),Fqe=o(" (BART model)"),vqe=l(),Qf=a("li"),uY=a("strong"),Tqe=o("beit"),Mqe=o(" \u2014 "),A9=a("a"),Eqe=o("BeitConfig"),Cqe=o(" (BEiT model)"),wqe=l(),Wf=a("li"),bY=a("strong"),Aqe=o("bert"),yqe=o(" \u2014 "),y9=a("a"),Lqe=o("BertConfig"),xqe=o(" (BERT model)"),kqe=l(),Hf=a("li"),FY=a("strong"),Sqe=o("bert-generation"),Rqe=o(" \u2014 "),L9=a("a"),Bqe=o("BertGenerationConfig"),Pqe=o(" (Bert Generation model)"),$qe=l(),Uf=a("li"),vY=a("strong"),Iqe=o("big_bird"),qqe=o(" \u2014 "),x9=a("a"),Nqe=o("BigBirdConfig"),jqe=o(" (BigBird model)"),Dqe=l(),Jf=a("li"),TY=a("strong"),Gqe=o("bigbird_pegasus"),Oqe=o(" \u2014 "),k9=a("a"),Vqe=o("BigBirdPegasusConfig"),Xqe=o(" (BigBirdPegasus model)"),zqe=l(),Yf=a("li"),MY=a("strong"),Qqe=o("blenderbot"),Wqe=o(" \u2014 "),S9=a("a"),Hqe=o("BlenderbotConfig"),Uqe=o(" (Blenderbot model)"),Jqe=l(),Kf=a("li"),EY=a("strong"),Yqe=o("blenderbot-small"),Kqe=o(" \u2014 "),R9=a("a"),Zqe=o("BlenderbotSmallConfig"),eNe=o(" (BlenderbotSmall model)"),oNe=l(),Zf=a("li"),CY=a("strong"),rNe=o("camembert"),tNe=o(" \u2014 "),B9=a("a"),aNe=o("CamembertConfig"),nNe=o(" (CamemBERT model)"),sNe=l(),em=a("li"),wY=a("strong"),lNe=o("canine"),iNe=o(" \u2014 "),P9=a("a"),dNe=o("CanineConfig"),cNe=o(" (Canine model)"),fNe=l(),om=a("li"),AY=a("strong"),mNe=o("clip"),gNe=o(" \u2014 "),$9=a("a"),hNe=o("CLIPConfig"),pNe=o(" (CLIP model)"),_Ne=l(),rm=a("li"),yY=a("strong"),uNe=o("convbert"),bNe=o(" \u2014 "),I9=a("a"),FNe=o("ConvBertConfig"),vNe=o(" (ConvBERT model)"),TNe=l(),tm=a("li"),LY=a("strong"),MNe=o("convnext"),ENe=o(" \u2014 "),q9=a("a"),CNe=o("ConvNextConfig"),wNe=o(" (ConvNext model)"),ANe=l(),am=a("li"),xY=a("strong"),yNe=o("ctrl"),LNe=o(" \u2014 "),N9=a("a"),xNe=o("CTRLConfig"),kNe=o(" (CTRL model)"),SNe=l(),nm=a("li"),kY=a("strong"),RNe=o("data2vec-audio"),BNe=o(" \u2014 "),j9=a("a"),PNe=o("Data2VecAudioConfig"),$Ne=o(" (Data2VecAudio model)"),INe=l(),sm=a("li"),SY=a("strong"),qNe=o("data2vec-text"),NNe=o(" \u2014 "),D9=a("a"),jNe=o("Data2VecTextConfig"),DNe=o(" (Data2VecText model)"),GNe=l(),lm=a("li"),RY=a("strong"),ONe=o("deberta"),VNe=o(" \u2014 "),G9=a("a"),XNe=o("DebertaConfig"),zNe=o(" (DeBERTa model)"),QNe=l(),im=a("li"),BY=a("strong"),WNe=o("deberta-v2"),HNe=o(" \u2014 "),O9=a("a"),UNe=o("DebertaV2Config"),JNe=o(" (DeBERTa-v2 model)"),YNe=l(),dm=a("li"),PY=a("strong"),KNe=o("decision_transformer"),ZNe=o(" \u2014 "),V9=a("a"),eje=o("DecisionTransformerConfig"),oje=o(" (Decision Transformer model)"),rje=l(),cm=a("li"),$Y=a("strong"),tje=o("deit"),aje=o(" \u2014 "),X9=a("a"),nje=o("DeiTConfig"),sje=o(" (DeiT model)"),lje=l(),fm=a("li"),IY=a("strong"),ije=o("detr"),dje=o(" \u2014 "),z9=a("a"),cje=o("DetrConfig"),fje=o(" (DETR model)"),mje=l(),mm=a("li"),qY=a("strong"),gje=o("distilbert"),hje=o(" \u2014 "),Q9=a("a"),pje=o("DistilBertConfig"),_je=o(" (DistilBERT model)"),uje=l(),gm=a("li"),NY=a("strong"),bje=o("dpr"),Fje=o(" \u2014 "),W9=a("a"),vje=o("DPRConfig"),Tje=o(" (DPR model)"),Mje=l(),hm=a("li"),jY=a("strong"),Eje=o("dpt"),Cje=o(" \u2014 "),H9=a("a"),wje=o("DPTConfig"),Aje=o(" (DPT model)"),yje=l(),pm=a("li"),DY=a("strong"),Lje=o("electra"),xje=o(" \u2014 "),U9=a("a"),kje=o("ElectraConfig"),Sje=o(" (ELECTRA model)"),Rje=l(),_m=a("li"),GY=a("strong"),Bje=o("encoder-decoder"),Pje=o(" \u2014 "),J9=a("a"),$je=o("EncoderDecoderConfig"),Ije=o(" (Encoder decoder model)"),qje=l(),um=a("li"),OY=a("strong"),Nje=o("flaubert"),jje=o(" \u2014 "),Y9=a("a"),Dje=o("FlaubertConfig"),Gje=o(" (FlauBERT model)"),Oje=l(),bm=a("li"),VY=a("strong"),Vje=o("fnet"),Xje=o(" \u2014 "),K9=a("a"),zje=o("FNetConfig"),Qje=o(" (FNet model)"),Wje=l(),Fm=a("li"),XY=a("strong"),Hje=o("fsmt"),Uje=o(" \u2014 "),Z9=a("a"),Jje=o("FSMTConfig"),Yje=o(" (FairSeq Machine-Translation model)"),Kje=l(),vm=a("li"),zY=a("strong"),Zje=o("funnel"),eDe=o(" \u2014 "),ex=a("a"),oDe=o("FunnelConfig"),rDe=o(" (Funnel Transformer model)"),tDe=l(),Tm=a("li"),QY=a("strong"),aDe=o("glpn"),nDe=o(" \u2014 "),ox=a("a"),sDe=o("GLPNConfig"),lDe=o(" (GLPN model)"),iDe=l(),Mm=a("li"),WY=a("strong"),dDe=o("gpt2"),cDe=o(" \u2014 "),rx=a("a"),fDe=o("GPT2Config"),mDe=o(" (OpenAI GPT-2 model)"),gDe=l(),Em=a("li"),HY=a("strong"),hDe=o("gpt_neo"),pDe=o(" \u2014 "),tx=a("a"),_De=o("GPTNeoConfig"),uDe=o(" (GPT Neo model)"),bDe=l(),Cm=a("li"),UY=a("strong"),FDe=o("gptj"),vDe=o(" \u2014 "),ax=a("a"),TDe=o("GPTJConfig"),MDe=o(" (GPT-J model)"),EDe=l(),wm=a("li"),JY=a("strong"),CDe=o("hubert"),wDe=o(" \u2014 "),nx=a("a"),ADe=o("HubertConfig"),yDe=o(" (Hubert model)"),LDe=l(),Am=a("li"),YY=a("strong"),xDe=o("ibert"),kDe=o(" \u2014 "),sx=a("a"),SDe=o("IBertConfig"),RDe=o(" (I-BERT model)"),BDe=l(),ym=a("li"),KY=a("strong"),PDe=o("imagegpt"),$De=o(" \u2014 "),lx=a("a"),IDe=o("ImageGPTConfig"),qDe=o(" (ImageGPT model)"),NDe=l(),Lm=a("li"),ZY=a("strong"),jDe=o("layoutlm"),DDe=o(" \u2014 "),ix=a("a"),GDe=o("LayoutLMConfig"),ODe=o(" (LayoutLM model)"),VDe=l(),xm=a("li"),eK=a("strong"),XDe=o("layoutlmv2"),zDe=o(" \u2014 "),dx=a("a"),QDe=o("LayoutLMv2Config"),WDe=o(" (LayoutLMv2 model)"),HDe=l(),km=a("li"),oK=a("strong"),UDe=o("led"),JDe=o(" \u2014 "),cx=a("a"),YDe=o("LEDConfig"),KDe=o(" (LED model)"),ZDe=l(),Sm=a("li"),rK=a("strong"),eGe=o("longformer"),oGe=o(" \u2014 "),fx=a("a"),rGe=o("LongformerConfig"),tGe=o(" (Longformer model)"),aGe=l(),Rm=a("li"),tK=a("strong"),nGe=o("luke"),sGe=o(" \u2014 "),mx=a("a"),lGe=o("LukeConfig"),iGe=o(" (LUKE model)"),dGe=l(),Bm=a("li"),aK=a("strong"),cGe=o("lxmert"),fGe=o(" \u2014 "),gx=a("a"),mGe=o("LxmertConfig"),gGe=o(" (LXMERT model)"),hGe=l(),Pm=a("li"),nK=a("strong"),pGe=o("m2m_100"),_Ge=o(" \u2014 "),hx=a("a"),uGe=o("M2M100Config"),bGe=o(" (M2M100 model)"),FGe=l(),$m=a("li"),sK=a("strong"),vGe=o("marian"),TGe=o(" \u2014 "),px=a("a"),MGe=o("MarianConfig"),EGe=o(" (Marian model)"),CGe=l(),Im=a("li"),lK=a("strong"),wGe=o("maskformer"),AGe=o(" \u2014 "),_x=a("a"),yGe=o("MaskFormerConfig"),LGe=o(" (MaskFormer model)"),xGe=l(),qm=a("li"),iK=a("strong"),kGe=o("mbart"),SGe=o(" \u2014 "),ux=a("a"),RGe=o("MBartConfig"),BGe=o(" (mBART model)"),PGe=l(),Nm=a("li"),dK=a("strong"),$Ge=o("megatron-bert"),IGe=o(" \u2014 "),bx=a("a"),qGe=o("MegatronBertConfig"),NGe=o(" (MegatronBert model)"),jGe=l(),jm=a("li"),cK=a("strong"),DGe=o("mobilebert"),GGe=o(" \u2014 "),Fx=a("a"),OGe=o("MobileBertConfig"),VGe=o(" (MobileBERT model)"),XGe=l(),Dm=a("li"),fK=a("strong"),zGe=o("mpnet"),QGe=o(" \u2014 "),vx=a("a"),WGe=o("MPNetConfig"),HGe=o(" (MPNet model)"),UGe=l(),Gm=a("li"),mK=a("strong"),JGe=o("mt5"),YGe=o(" \u2014 "),Tx=a("a"),KGe=o("MT5Config"),ZGe=o(" (mT5 model)"),eOe=l(),Om=a("li"),gK=a("strong"),oOe=o("nystromformer"),rOe=o(" \u2014 "),Mx=a("a"),tOe=o("NystromformerConfig"),aOe=o(" (Nystromformer model)"),nOe=l(),Vm=a("li"),hK=a("strong"),sOe=o("openai-gpt"),lOe=o(" \u2014 "),Ex=a("a"),iOe=o("OpenAIGPTConfig"),dOe=o(" (OpenAI GPT model)"),cOe=l(),Xm=a("li"),pK=a("strong"),fOe=o("pegasus"),mOe=o(" \u2014 "),Cx=a("a"),gOe=o("PegasusConfig"),hOe=o(" (Pegasus model)"),pOe=l(),zm=a("li"),_K=a("strong"),_Oe=o("perceiver"),uOe=o(" \u2014 "),wx=a("a"),bOe=o("PerceiverConfig"),FOe=o(" (Perceiver model)"),vOe=l(),Qm=a("li"),uK=a("strong"),TOe=o("plbart"),MOe=o(" \u2014 "),Ax=a("a"),EOe=o("PLBartConfig"),COe=o(" (PLBart model)"),wOe=l(),Wm=a("li"),bK=a("strong"),AOe=o("poolformer"),yOe=o(" \u2014 "),yx=a("a"),LOe=o("PoolFormerConfig"),xOe=o(" (PoolFormer model)"),kOe=l(),Hm=a("li"),FK=a("strong"),SOe=o("prophetnet"),ROe=o(" \u2014 "),Lx=a("a"),BOe=o("ProphetNetConfig"),POe=o(" (ProphetNet model)"),$Oe=l(),Um=a("li"),vK=a("strong"),IOe=o("qdqbert"),qOe=o(" \u2014 "),xx=a("a"),NOe=o("QDQBertConfig"),jOe=o(" (QDQBert model)"),DOe=l(),Jm=a("li"),TK=a("strong"),GOe=o("rag"),OOe=o(" \u2014 "),kx=a("a"),VOe=o("RagConfig"),XOe=o(" (RAG model)"),zOe=l(),Ym=a("li"),MK=a("strong"),QOe=o("realm"),WOe=o(" \u2014 "),Sx=a("a"),HOe=o("RealmConfig"),UOe=o(" (Realm model)"),JOe=l(),Km=a("li"),EK=a("strong"),YOe=o("reformer"),KOe=o(" \u2014 "),Rx=a("a"),ZOe=o("ReformerConfig"),eVe=o(" (Reformer model)"),oVe=l(),Zm=a("li"),CK=a("strong"),rVe=o("regnet"),tVe=o(" \u2014 "),Bx=a("a"),aVe=o("RegNetConfig"),nVe=o(" (RegNet model)"),sVe=l(),eg=a("li"),wK=a("strong"),lVe=o("rembert"),iVe=o(" \u2014 "),Px=a("a"),dVe=o("RemBertConfig"),cVe=o(" (RemBERT model)"),fVe=l(),og=a("li"),AK=a("strong"),mVe=o("resnet"),gVe=o(" \u2014 "),$x=a("a"),hVe=o("ResNetConfig"),pVe=o(" (ResNet model)"),_Ve=l(),rg=a("li"),yK=a("strong"),uVe=o("retribert"),bVe=o(" \u2014 "),Ix=a("a"),FVe=o("RetriBertConfig"),vVe=o(" (RetriBERT model)"),TVe=l(),tg=a("li"),LK=a("strong"),MVe=o("roberta"),EVe=o(" \u2014 "),qx=a("a"),CVe=o("RobertaConfig"),wVe=o(" (RoBERTa model)"),AVe=l(),ag=a("li"),xK=a("strong"),yVe=o("roformer"),LVe=o(" \u2014 "),Nx=a("a"),xVe=o("RoFormerConfig"),kVe=o(" (RoFormer model)"),SVe=l(),ng=a("li"),kK=a("strong"),RVe=o("segformer"),BVe=o(" \u2014 "),jx=a("a"),PVe=o("SegformerConfig"),$Ve=o(" (SegFormer model)"),IVe=l(),sg=a("li"),SK=a("strong"),qVe=o("sew"),NVe=o(" \u2014 "),Dx=a("a"),jVe=o("SEWConfig"),DVe=o(" (SEW model)"),GVe=l(),lg=a("li"),RK=a("strong"),OVe=o("sew-d"),VVe=o(" \u2014 "),Gx=a("a"),XVe=o("SEWDConfig"),zVe=o(" (SEW-D model)"),QVe=l(),ig=a("li"),BK=a("strong"),WVe=o("speech-encoder-decoder"),HVe=o(" \u2014 "),Ox=a("a"),UVe=o("SpeechEncoderDecoderConfig"),JVe=o(" (Speech Encoder decoder model)"),YVe=l(),dg=a("li"),PK=a("strong"),KVe=o("speech_to_text"),ZVe=o(" \u2014 "),Vx=a("a"),eXe=o("Speech2TextConfig"),oXe=o(" (Speech2Text model)"),rXe=l(),cg=a("li"),$K=a("strong"),tXe=o("speech_to_text_2"),aXe=o(" \u2014 "),Xx=a("a"),nXe=o("Speech2Text2Config"),sXe=o(" (Speech2Text2 model)"),lXe=l(),fg=a("li"),IK=a("strong"),iXe=o("splinter"),dXe=o(" \u2014 "),zx=a("a"),cXe=o("SplinterConfig"),fXe=o(" (Splinter model)"),mXe=l(),mg=a("li"),qK=a("strong"),gXe=o("squeezebert"),hXe=o(" \u2014 "),Qx=a("a"),pXe=o("SqueezeBertConfig"),_Xe=o(" (SqueezeBERT model)"),uXe=l(),gg=a("li"),NK=a("strong"),bXe=o("swin"),FXe=o(" \u2014 "),Wx=a("a"),vXe=o("SwinConfig"),TXe=o(" (Swin model)"),MXe=l(),hg=a("li"),jK=a("strong"),EXe=o("t5"),CXe=o(" \u2014 "),Hx=a("a"),wXe=o("T5Config"),AXe=o(" (T5 model)"),yXe=l(),pg=a("li"),DK=a("strong"),LXe=o("tapas"),xXe=o(" \u2014 "),Ux=a("a"),kXe=o("TapasConfig"),SXe=o(" (TAPAS model)"),RXe=l(),_g=a("li"),GK=a("strong"),BXe=o("tapex"),PXe=o(" \u2014 "),Jx=a("a"),$Xe=o("BartConfig"),IXe=o(" (TAPEX model)"),qXe=l(),ug=a("li"),OK=a("strong"),NXe=o("transfo-xl"),jXe=o(" \u2014 "),Yx=a("a"),DXe=o("TransfoXLConfig"),GXe=o(" (Transformer-XL model)"),OXe=l(),bg=a("li"),VK=a("strong"),VXe=o("trocr"),XXe=o(" \u2014 "),Kx=a("a"),zXe=o("TrOCRConfig"),QXe=o(" (TrOCR model)"),WXe=l(),Fg=a("li"),XK=a("strong"),HXe=o("unispeech"),UXe=o(" \u2014 "),Zx=a("a"),JXe=o("UniSpeechConfig"),YXe=o(" (UniSpeech model)"),KXe=l(),vg=a("li"),zK=a("strong"),ZXe=o("unispeech-sat"),eze=o(" \u2014 "),ek=a("a"),oze=o("UniSpeechSatConfig"),rze=o(" (UniSpeechSat model)"),tze=l(),Tg=a("li"),QK=a("strong"),aze=o("van"),nze=o(" \u2014 "),ok=a("a"),sze=o("VanConfig"),lze=o(" (VAN model)"),ize=l(),Mg=a("li"),WK=a("strong"),dze=o("vilt"),cze=o(" \u2014 "),rk=a("a"),fze=o("ViltConfig"),mze=o(" (ViLT model)"),gze=l(),Eg=a("li"),HK=a("strong"),hze=o("vision-encoder-decoder"),pze=o(" \u2014 "),tk=a("a"),_ze=o("VisionEncoderDecoderConfig"),uze=o(" (Vision Encoder decoder model)"),bze=l(),Cg=a("li"),UK=a("strong"),Fze=o("vision-text-dual-encoder"),vze=o(" \u2014 "),ak=a("a"),Tze=o("VisionTextDualEncoderConfig"),Mze=o(" (VisionTextDualEncoder model)"),Eze=l(),wg=a("li"),JK=a("strong"),Cze=o("visual_bert"),wze=o(" \u2014 "),nk=a("a"),Aze=o("VisualBertConfig"),yze=o(" (VisualBert model)"),Lze=l(),Ag=a("li"),YK=a("strong"),xze=o("vit"),kze=o(" \u2014 "),sk=a("a"),Sze=o("ViTConfig"),Rze=o(" (ViT model)"),Bze=l(),yg=a("li"),KK=a("strong"),Pze=o("vit_mae"),$ze=o(" \u2014 "),lk=a("a"),Ize=o("ViTMAEConfig"),qze=o(" (ViTMAE model)"),Nze=l(),Lg=a("li"),ZK=a("strong"),jze=o("wav2vec2"),Dze=o(" \u2014 "),ik=a("a"),Gze=o("Wav2Vec2Config"),Oze=o(" (Wav2Vec2 model)"),Vze=l(),xg=a("li"),eZ=a("strong"),Xze=o("wavlm"),zze=o(" \u2014 "),dk=a("a"),Qze=o("WavLMConfig"),Wze=o(" (WavLM model)"),Hze=l(),kg=a("li"),oZ=a("strong"),Uze=o("xglm"),Jze=o(" \u2014 "),ck=a("a"),Yze=o("XGLMConfig"),Kze=o(" (XGLM model)"),Zze=l(),Sg=a("li"),rZ=a("strong"),eQe=o("xlm"),oQe=o(" \u2014 "),fk=a("a"),rQe=o("XLMConfig"),tQe=o(" (XLM model)"),aQe=l(),Rg=a("li"),tZ=a("strong"),nQe=o("xlm-prophetnet"),sQe=o(" \u2014 "),mk=a("a"),lQe=o("XLMProphetNetConfig"),iQe=o(" (XLMProphetNet model)"),dQe=l(),Bg=a("li"),aZ=a("strong"),cQe=o("xlm-roberta"),fQe=o(" \u2014 "),gk=a("a"),mQe=o("XLMRobertaConfig"),gQe=o(" (XLM-RoBERTa model)"),hQe=l(),Pg=a("li"),nZ=a("strong"),pQe=o("xlm-roberta-xl"),_Qe=o(" \u2014 "),hk=a("a"),uQe=o("XLMRobertaXLConfig"),bQe=o(" (XLM-RoBERTa-XL model)"),FQe=l(),$g=a("li"),sZ=a("strong"),vQe=o("xlnet"),TQe=o(" \u2014 "),pk=a("a"),MQe=o("XLNetConfig"),EQe=o(" (XLNet model)"),CQe=l(),Ig=a("li"),lZ=a("strong"),wQe=o("yoso"),AQe=o(" \u2014 "),_k=a("a"),yQe=o("YosoConfig"),LQe=o(" (YOSO model)"),xQe=l(),iZ=a("p"),kQe=o("Examples:"),SQe=l(),f(IC.$$.fragment),RQe=l(),qg=a("div"),f(qC.$$.fragment),BQe=l(),dZ=a("p"),PQe=o("Register a new configuration for this class."),kRe=l(),Qi=a("h2"),Ng=a("a"),cZ=a("span"),f(NC.$$.fragment),$Qe=l(),fZ=a("span"),IQe=o("AutoTokenizer"),SRe=l(),Wo=a("div"),f(jC.$$.fragment),qQe=l(),DC=a("p"),NQe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),uk=a("a"),jQe=o("AutoTokenizer.from_pretrained()"),DQe=o(" class method."),GQe=l(),GC=a("p"),OQe=o("This class cannot be instantiated directly using "),mZ=a("code"),VQe=o("__init__()"),XQe=o(" (throws an error)."),zQe=l(),go=a("div"),f(OC.$$.fragment),QQe=l(),gZ=a("p"),WQe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),HQe=l(),Oa=a("p"),UQe=o("The tokenizer class to instantiate is selected based on the "),hZ=a("code"),JQe=o("model_type"),YQe=o(` property of the config object (either
passed as an argument or loaded from `),pZ=a("code"),KQe=o("pretrained_model_name_or_path"),ZQe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Z=a("code"),eWe=o("pretrained_model_name_or_path"),oWe=o(":"),rWe=l(),E=a("ul"),Qn=a("li"),uZ=a("strong"),tWe=o("albert"),aWe=o(" \u2014 "),bk=a("a"),nWe=o("AlbertTokenizer"),sWe=o(" or "),Fk=a("a"),lWe=o("AlbertTokenizerFast"),iWe=o(" (ALBERT model)"),dWe=l(),Wn=a("li"),bZ=a("strong"),cWe=o("bart"),fWe=o(" \u2014 "),vk=a("a"),mWe=o("BartTokenizer"),gWe=o(" or "),Tk=a("a"),hWe=o("BartTokenizerFast"),pWe=o(" (BART model)"),_We=l(),Hn=a("li"),FZ=a("strong"),uWe=o("barthez"),bWe=o(" \u2014 "),Mk=a("a"),FWe=o("BarthezTokenizer"),vWe=o(" or "),Ek=a("a"),TWe=o("BarthezTokenizerFast"),MWe=o(" (BARThez model)"),EWe=l(),jg=a("li"),vZ=a("strong"),CWe=o("bartpho"),wWe=o(" \u2014 "),Ck=a("a"),AWe=o("BartphoTokenizer"),yWe=o(" (BARTpho model)"),LWe=l(),Un=a("li"),TZ=a("strong"),xWe=o("bert"),kWe=o(" \u2014 "),wk=a("a"),SWe=o("BertTokenizer"),RWe=o(" or "),Ak=a("a"),BWe=o("BertTokenizerFast"),PWe=o(" (BERT model)"),$We=l(),Dg=a("li"),MZ=a("strong"),IWe=o("bert-generation"),qWe=o(" \u2014 "),yk=a("a"),NWe=o("BertGenerationTokenizer"),jWe=o(" (Bert Generation model)"),DWe=l(),Gg=a("li"),EZ=a("strong"),GWe=o("bert-japanese"),OWe=o(" \u2014 "),Lk=a("a"),VWe=o("BertJapaneseTokenizer"),XWe=o(" (BertJapanese model)"),zWe=l(),Og=a("li"),CZ=a("strong"),QWe=o("bertweet"),WWe=o(" \u2014 "),xk=a("a"),HWe=o("BertweetTokenizer"),UWe=o(" (Bertweet model)"),JWe=l(),Jn=a("li"),wZ=a("strong"),YWe=o("big_bird"),KWe=o(" \u2014 "),kk=a("a"),ZWe=o("BigBirdTokenizer"),eHe=o(" or "),Sk=a("a"),oHe=o("BigBirdTokenizerFast"),rHe=o(" (BigBird model)"),tHe=l(),Yn=a("li"),AZ=a("strong"),aHe=o("bigbird_pegasus"),nHe=o(" \u2014 "),Rk=a("a"),sHe=o("PegasusTokenizer"),lHe=o(" or "),Bk=a("a"),iHe=o("PegasusTokenizerFast"),dHe=o(" (BigBirdPegasus model)"),cHe=l(),Kn=a("li"),yZ=a("strong"),fHe=o("blenderbot"),mHe=o(" \u2014 "),Pk=a("a"),gHe=o("BlenderbotTokenizer"),hHe=o(" or "),$k=a("a"),pHe=o("BlenderbotTokenizerFast"),_He=o(" (Blenderbot model)"),uHe=l(),Vg=a("li"),LZ=a("strong"),bHe=o("blenderbot-small"),FHe=o(" \u2014 "),Ik=a("a"),vHe=o("BlenderbotSmallTokenizer"),THe=o(" (BlenderbotSmall model)"),MHe=l(),Xg=a("li"),xZ=a("strong"),EHe=o("byt5"),CHe=o(" \u2014 "),qk=a("a"),wHe=o("ByT5Tokenizer"),AHe=o(" (ByT5 model)"),yHe=l(),Zn=a("li"),kZ=a("strong"),LHe=o("camembert"),xHe=o(" \u2014 "),Nk=a("a"),kHe=o("CamembertTokenizer"),SHe=o(" or "),jk=a("a"),RHe=o("CamembertTokenizerFast"),BHe=o(" (CamemBERT model)"),PHe=l(),zg=a("li"),SZ=a("strong"),$He=o("canine"),IHe=o(" \u2014 "),Dk=a("a"),qHe=o("CanineTokenizer"),NHe=o(" (Canine model)"),jHe=l(),es=a("li"),RZ=a("strong"),DHe=o("clip"),GHe=o(" \u2014 "),Gk=a("a"),OHe=o("CLIPTokenizer"),VHe=o(" or "),Ok=a("a"),XHe=o("CLIPTokenizerFast"),zHe=o(" (CLIP model)"),QHe=l(),os=a("li"),BZ=a("strong"),WHe=o("convbert"),HHe=o(" \u2014 "),Vk=a("a"),UHe=o("ConvBertTokenizer"),JHe=o(" or "),Xk=a("a"),YHe=o("ConvBertTokenizerFast"),KHe=o(" (ConvBERT model)"),ZHe=l(),rs=a("li"),PZ=a("strong"),eUe=o("cpm"),oUe=o(" \u2014 "),zk=a("a"),rUe=o("CpmTokenizer"),tUe=o(" or "),$Z=a("code"),aUe=o("CpmTokenizerFast"),nUe=o(" (CPM model)"),sUe=l(),Qg=a("li"),IZ=a("strong"),lUe=o("ctrl"),iUe=o(" \u2014 "),Qk=a("a"),dUe=o("CTRLTokenizer"),cUe=o(" (CTRL model)"),fUe=l(),ts=a("li"),qZ=a("strong"),mUe=o("deberta"),gUe=o(" \u2014 "),Wk=a("a"),hUe=o("DebertaTokenizer"),pUe=o(" or "),Hk=a("a"),_Ue=o("DebertaTokenizerFast"),uUe=o(" (DeBERTa model)"),bUe=l(),Wg=a("li"),NZ=a("strong"),FUe=o("deberta-v2"),vUe=o(" \u2014 "),Uk=a("a"),TUe=o("DebertaV2Tokenizer"),MUe=o(" (DeBERTa-v2 model)"),EUe=l(),as=a("li"),jZ=a("strong"),CUe=o("distilbert"),wUe=o(" \u2014 "),Jk=a("a"),AUe=o("DistilBertTokenizer"),yUe=o(" or "),Yk=a("a"),LUe=o("DistilBertTokenizerFast"),xUe=o(" (DistilBERT model)"),kUe=l(),ns=a("li"),DZ=a("strong"),SUe=o("dpr"),RUe=o(" \u2014 "),Kk=a("a"),BUe=o("DPRQuestionEncoderTokenizer"),PUe=o(" or "),Zk=a("a"),$Ue=o("DPRQuestionEncoderTokenizerFast"),IUe=o(" (DPR model)"),qUe=l(),ss=a("li"),GZ=a("strong"),NUe=o("electra"),jUe=o(" \u2014 "),eS=a("a"),DUe=o("ElectraTokenizer"),GUe=o(" or "),oS=a("a"),OUe=o("ElectraTokenizerFast"),VUe=o(" (ELECTRA model)"),XUe=l(),Hg=a("li"),OZ=a("strong"),zUe=o("flaubert"),QUe=o(" \u2014 "),rS=a("a"),WUe=o("FlaubertTokenizer"),HUe=o(" (FlauBERT model)"),UUe=l(),ls=a("li"),VZ=a("strong"),JUe=o("fnet"),YUe=o(" \u2014 "),tS=a("a"),KUe=o("FNetTokenizer"),ZUe=o(" or "),aS=a("a"),eJe=o("FNetTokenizerFast"),oJe=o(" (FNet model)"),rJe=l(),Ug=a("li"),XZ=a("strong"),tJe=o("fsmt"),aJe=o(" \u2014 "),nS=a("a"),nJe=o("FSMTTokenizer"),sJe=o(" (FairSeq Machine-Translation model)"),lJe=l(),is=a("li"),zZ=a("strong"),iJe=o("funnel"),dJe=o(" \u2014 "),sS=a("a"),cJe=o("FunnelTokenizer"),fJe=o(" or "),lS=a("a"),mJe=o("FunnelTokenizerFast"),gJe=o(" (Funnel Transformer model)"),hJe=l(),ds=a("li"),QZ=a("strong"),pJe=o("gpt2"),_Je=o(" \u2014 "),iS=a("a"),uJe=o("GPT2Tokenizer"),bJe=o(" or "),dS=a("a"),FJe=o("GPT2TokenizerFast"),vJe=o(" (OpenAI GPT-2 model)"),TJe=l(),cs=a("li"),WZ=a("strong"),MJe=o("gpt_neo"),EJe=o(" \u2014 "),cS=a("a"),CJe=o("GPT2Tokenizer"),wJe=o(" or "),fS=a("a"),AJe=o("GPT2TokenizerFast"),yJe=o(" (GPT Neo model)"),LJe=l(),fs=a("li"),HZ=a("strong"),xJe=o("herbert"),kJe=o(" \u2014 "),mS=a("a"),SJe=o("HerbertTokenizer"),RJe=o(" or "),gS=a("a"),BJe=o("HerbertTokenizerFast"),PJe=o(" (HerBERT model)"),$Je=l(),Jg=a("li"),UZ=a("strong"),IJe=o("hubert"),qJe=o(" \u2014 "),hS=a("a"),NJe=o("Wav2Vec2CTCTokenizer"),jJe=o(" (Hubert model)"),DJe=l(),ms=a("li"),JZ=a("strong"),GJe=o("ibert"),OJe=o(" \u2014 "),pS=a("a"),VJe=o("RobertaTokenizer"),XJe=o(" or "),_S=a("a"),zJe=o("RobertaTokenizerFast"),QJe=o(" (I-BERT model)"),WJe=l(),gs=a("li"),YZ=a("strong"),HJe=o("layoutlm"),UJe=o(" \u2014 "),uS=a("a"),JJe=o("LayoutLMTokenizer"),YJe=o(" or "),bS=a("a"),KJe=o("LayoutLMTokenizerFast"),ZJe=o(" (LayoutLM model)"),eYe=l(),hs=a("li"),KZ=a("strong"),oYe=o("layoutlmv2"),rYe=o(" \u2014 "),FS=a("a"),tYe=o("LayoutLMv2Tokenizer"),aYe=o(" or "),vS=a("a"),nYe=o("LayoutLMv2TokenizerFast"),sYe=o(" (LayoutLMv2 model)"),lYe=l(),ps=a("li"),ZZ=a("strong"),iYe=o("layoutxlm"),dYe=o(" \u2014 "),TS=a("a"),cYe=o("LayoutXLMTokenizer"),fYe=o(" or "),MS=a("a"),mYe=o("LayoutXLMTokenizerFast"),gYe=o(" (LayoutXLM model)"),hYe=l(),_s=a("li"),eee=a("strong"),pYe=o("led"),_Ye=o(" \u2014 "),ES=a("a"),uYe=o("LEDTokenizer"),bYe=o(" or "),CS=a("a"),FYe=o("LEDTokenizerFast"),vYe=o(" (LED model)"),TYe=l(),us=a("li"),oee=a("strong"),MYe=o("longformer"),EYe=o(" \u2014 "),wS=a("a"),CYe=o("LongformerTokenizer"),wYe=o(" or "),AS=a("a"),AYe=o("LongformerTokenizerFast"),yYe=o(" (Longformer model)"),LYe=l(),Yg=a("li"),ree=a("strong"),xYe=o("luke"),kYe=o(" \u2014 "),yS=a("a"),SYe=o("LukeTokenizer"),RYe=o(" (LUKE model)"),BYe=l(),bs=a("li"),tee=a("strong"),PYe=o("lxmert"),$Ye=o(" \u2014 "),LS=a("a"),IYe=o("LxmertTokenizer"),qYe=o(" or "),xS=a("a"),NYe=o("LxmertTokenizerFast"),jYe=o(" (LXMERT model)"),DYe=l(),Kg=a("li"),aee=a("strong"),GYe=o("m2m_100"),OYe=o(" \u2014 "),kS=a("a"),VYe=o("M2M100Tokenizer"),XYe=o(" (M2M100 model)"),zYe=l(),Zg=a("li"),nee=a("strong"),QYe=o("marian"),WYe=o(" \u2014 "),SS=a("a"),HYe=o("MarianTokenizer"),UYe=o(" (Marian model)"),JYe=l(),Fs=a("li"),see=a("strong"),YYe=o("mbart"),KYe=o(" \u2014 "),RS=a("a"),ZYe=o("MBartTokenizer"),eKe=o(" or "),BS=a("a"),oKe=o("MBartTokenizerFast"),rKe=o(" (mBART model)"),tKe=l(),vs=a("li"),lee=a("strong"),aKe=o("mbart50"),nKe=o(" \u2014 "),PS=a("a"),sKe=o("MBart50Tokenizer"),lKe=o(" or "),$S=a("a"),iKe=o("MBart50TokenizerFast"),dKe=o(" (mBART-50 model)"),cKe=l(),eh=a("li"),iee=a("strong"),fKe=o("mluke"),mKe=o(" \u2014 "),IS=a("a"),gKe=o("MLukeTokenizer"),hKe=o(" (mLUKE model)"),pKe=l(),Ts=a("li"),dee=a("strong"),_Ke=o("mobilebert"),uKe=o(" \u2014 "),qS=a("a"),bKe=o("MobileBertTokenizer"),FKe=o(" or "),NS=a("a"),vKe=o("MobileBertTokenizerFast"),TKe=o(" (MobileBERT model)"),MKe=l(),Ms=a("li"),cee=a("strong"),EKe=o("mpnet"),CKe=o(" \u2014 "),jS=a("a"),wKe=o("MPNetTokenizer"),AKe=o(" or "),DS=a("a"),yKe=o("MPNetTokenizerFast"),LKe=o(" (MPNet model)"),xKe=l(),Es=a("li"),fee=a("strong"),kKe=o("mt5"),SKe=o(" \u2014 "),GS=a("a"),RKe=o("MT5Tokenizer"),BKe=o(" or "),OS=a("a"),PKe=o("MT5TokenizerFast"),$Ke=o(" (mT5 model)"),IKe=l(),Cs=a("li"),mee=a("strong"),qKe=o("openai-gpt"),NKe=o(" \u2014 "),VS=a("a"),jKe=o("OpenAIGPTTokenizer"),DKe=o(" or "),XS=a("a"),GKe=o("OpenAIGPTTokenizerFast"),OKe=o(" (OpenAI GPT model)"),VKe=l(),ws=a("li"),gee=a("strong"),XKe=o("pegasus"),zKe=o(" \u2014 "),zS=a("a"),QKe=o("PegasusTokenizer"),WKe=o(" or "),QS=a("a"),HKe=o("PegasusTokenizerFast"),UKe=o(" (Pegasus model)"),JKe=l(),oh=a("li"),hee=a("strong"),YKe=o("perceiver"),KKe=o(" \u2014 "),WS=a("a"),ZKe=o("PerceiverTokenizer"),eZe=o(" (Perceiver model)"),oZe=l(),rh=a("li"),pee=a("strong"),rZe=o("phobert"),tZe=o(" \u2014 "),HS=a("a"),aZe=o("PhobertTokenizer"),nZe=o(" (PhoBERT model)"),sZe=l(),th=a("li"),_ee=a("strong"),lZe=o("plbart"),iZe=o(" \u2014 "),US=a("a"),dZe=o("PLBartTokenizer"),cZe=o(" (PLBart model)"),fZe=l(),ah=a("li"),uee=a("strong"),mZe=o("prophetnet"),gZe=o(" \u2014 "),JS=a("a"),hZe=o("ProphetNetTokenizer"),pZe=o(" (ProphetNet model)"),_Ze=l(),As=a("li"),bee=a("strong"),uZe=o("qdqbert"),bZe=o(" \u2014 "),YS=a("a"),FZe=o("BertTokenizer"),vZe=o(" or "),KS=a("a"),TZe=o("BertTokenizerFast"),MZe=o(" (QDQBert model)"),EZe=l(),nh=a("li"),Fee=a("strong"),CZe=o("rag"),wZe=o(" \u2014 "),ZS=a("a"),AZe=o("RagTokenizer"),yZe=o(" (RAG model)"),LZe=l(),ys=a("li"),vee=a("strong"),xZe=o("realm"),kZe=o(" \u2014 "),eR=a("a"),SZe=o("RealmTokenizer"),RZe=o(" or "),oR=a("a"),BZe=o("RealmTokenizerFast"),PZe=o(" (Realm model)"),$Ze=l(),Ls=a("li"),Tee=a("strong"),IZe=o("reformer"),qZe=o(" \u2014 "),rR=a("a"),NZe=o("ReformerTokenizer"),jZe=o(" or "),tR=a("a"),DZe=o("ReformerTokenizerFast"),GZe=o(" (Reformer model)"),OZe=l(),xs=a("li"),Mee=a("strong"),VZe=o("rembert"),XZe=o(" \u2014 "),aR=a("a"),zZe=o("RemBertTokenizer"),QZe=o(" or "),nR=a("a"),WZe=o("RemBertTokenizerFast"),HZe=o(" (RemBERT model)"),UZe=l(),ks=a("li"),Eee=a("strong"),JZe=o("retribert"),YZe=o(" \u2014 "),sR=a("a"),KZe=o("RetriBertTokenizer"),ZZe=o(" or "),lR=a("a"),eeo=o("RetriBertTokenizerFast"),oeo=o(" (RetriBERT model)"),reo=l(),Ss=a("li"),Cee=a("strong"),teo=o("roberta"),aeo=o(" \u2014 "),iR=a("a"),neo=o("RobertaTokenizer"),seo=o(" or "),dR=a("a"),leo=o("RobertaTokenizerFast"),ieo=o(" (RoBERTa model)"),deo=l(),Rs=a("li"),wee=a("strong"),ceo=o("roformer"),feo=o(" \u2014 "),cR=a("a"),meo=o("RoFormerTokenizer"),geo=o(" or "),fR=a("a"),heo=o("RoFormerTokenizerFast"),peo=o(" (RoFormer model)"),_eo=l(),sh=a("li"),Aee=a("strong"),ueo=o("speech_to_text"),beo=o(" \u2014 "),mR=a("a"),Feo=o("Speech2TextTokenizer"),veo=o(" (Speech2Text model)"),Teo=l(),lh=a("li"),yee=a("strong"),Meo=o("speech_to_text_2"),Eeo=o(" \u2014 "),gR=a("a"),Ceo=o("Speech2Text2Tokenizer"),weo=o(" (Speech2Text2 model)"),Aeo=l(),Bs=a("li"),Lee=a("strong"),yeo=o("splinter"),Leo=o(" \u2014 "),hR=a("a"),xeo=o("SplinterTokenizer"),keo=o(" or "),pR=a("a"),Seo=o("SplinterTokenizerFast"),Reo=o(" (Splinter model)"),Beo=l(),Ps=a("li"),xee=a("strong"),Peo=o("squeezebert"),$eo=o(" \u2014 "),_R=a("a"),Ieo=o("SqueezeBertTokenizer"),qeo=o(" or "),uR=a("a"),Neo=o("SqueezeBertTokenizerFast"),jeo=o(" (SqueezeBERT model)"),Deo=l(),$s=a("li"),kee=a("strong"),Geo=o("t5"),Oeo=o(" \u2014 "),bR=a("a"),Veo=o("T5Tokenizer"),Xeo=o(" or "),FR=a("a"),zeo=o("T5TokenizerFast"),Qeo=o(" (T5 model)"),Weo=l(),ih=a("li"),See=a("strong"),Heo=o("tapas"),Ueo=o(" \u2014 "),vR=a("a"),Jeo=o("TapasTokenizer"),Yeo=o(" (TAPAS model)"),Keo=l(),dh=a("li"),Ree=a("strong"),Zeo=o("tapex"),eoo=o(" \u2014 "),TR=a("a"),ooo=o("TapexTokenizer"),roo=o(" (TAPEX model)"),too=l(),ch=a("li"),Bee=a("strong"),aoo=o("transfo-xl"),noo=o(" \u2014 "),MR=a("a"),soo=o("TransfoXLTokenizer"),loo=o(" (Transformer-XL model)"),ioo=l(),fh=a("li"),Pee=a("strong"),doo=o("wav2vec2"),coo=o(" \u2014 "),ER=a("a"),foo=o("Wav2Vec2CTCTokenizer"),moo=o(" (Wav2Vec2 model)"),goo=l(),mh=a("li"),$ee=a("strong"),hoo=o("wav2vec2_phoneme"),poo=o(" \u2014 "),CR=a("a"),_oo=o("Wav2Vec2PhonemeCTCTokenizer"),uoo=o(" (Wav2Vec2Phoneme model)"),boo=l(),Is=a("li"),Iee=a("strong"),Foo=o("xglm"),voo=o(" \u2014 "),wR=a("a"),Too=o("XGLMTokenizer"),Moo=o(" or "),AR=a("a"),Eoo=o("XGLMTokenizerFast"),Coo=o(" (XGLM model)"),woo=l(),gh=a("li"),qee=a("strong"),Aoo=o("xlm"),yoo=o(" \u2014 "),yR=a("a"),Loo=o("XLMTokenizer"),xoo=o(" (XLM model)"),koo=l(),hh=a("li"),Nee=a("strong"),Soo=o("xlm-prophetnet"),Roo=o(" \u2014 "),LR=a("a"),Boo=o("XLMProphetNetTokenizer"),Poo=o(" (XLMProphetNet model)"),$oo=l(),qs=a("li"),jee=a("strong"),Ioo=o("xlm-roberta"),qoo=o(" \u2014 "),xR=a("a"),Noo=o("XLMRobertaTokenizer"),joo=o(" or "),kR=a("a"),Doo=o("XLMRobertaTokenizerFast"),Goo=o(" (XLM-RoBERTa model)"),Ooo=l(),Ns=a("li"),Dee=a("strong"),Voo=o("xlnet"),Xoo=o(" \u2014 "),SR=a("a"),zoo=o("XLNetTokenizer"),Qoo=o(" or "),RR=a("a"),Woo=o("XLNetTokenizerFast"),Hoo=o(" (XLNet model)"),Uoo=l(),Gee=a("p"),Joo=o("Examples:"),Yoo=l(),f(VC.$$.fragment),Koo=l(),ph=a("div"),f(XC.$$.fragment),Zoo=l(),Oee=a("p"),ero=o("Register a new tokenizer in this mapping."),RRe=l(),Wi=a("h2"),_h=a("a"),Vee=a("span"),f(zC.$$.fragment),oro=l(),Xee=a("span"),rro=o("AutoFeatureExtractor"),BRe=l(),Ho=a("div"),f(QC.$$.fragment),tro=l(),WC=a("p"),aro=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),BR=a("a"),nro=o("AutoFeatureExtractor.from_pretrained()"),sro=o(" class method."),lro=l(),HC=a("p"),iro=o("This class cannot be instantiated directly using "),zee=a("code"),dro=o("__init__()"),cro=o(" (throws an error)."),fro=l(),$e=a("div"),f(UC.$$.fragment),mro=l(),Qee=a("p"),gro=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),hro=l(),Va=a("p"),pro=o("The feature extractor class to instantiate is selected based on the "),Wee=a("code"),_ro=o("model_type"),uro=o(` property of the config object
(either passed as an argument or loaded from `),Hee=a("code"),bro=o("pretrained_model_name_or_path"),Fro=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Uee=a("code"),vro=o("pretrained_model_name_or_path"),Tro=o(":"),Mro=l(),ee=a("ul"),uh=a("li"),Jee=a("strong"),Ero=o("beit"),Cro=o(" \u2014 "),PR=a("a"),wro=o("BeitFeatureExtractor"),Aro=o(" (BEiT model)"),yro=l(),bh=a("li"),Yee=a("strong"),Lro=o("clip"),xro=o(" \u2014 "),$R=a("a"),kro=o("CLIPFeatureExtractor"),Sro=o(" (CLIP model)"),Rro=l(),Fh=a("li"),Kee=a("strong"),Bro=o("convnext"),Pro=o(" \u2014 "),IR=a("a"),$ro=o("ConvNextFeatureExtractor"),Iro=o(" (ConvNext model)"),qro=l(),vh=a("li"),Zee=a("strong"),Nro=o("deit"),jro=o(" \u2014 "),qR=a("a"),Dro=o("DeiTFeatureExtractor"),Gro=o(" (DeiT model)"),Oro=l(),Th=a("li"),eoe=a("strong"),Vro=o("detr"),Xro=o(" \u2014 "),NR=a("a"),zro=o("DetrFeatureExtractor"),Qro=o(" (DETR model)"),Wro=l(),Mh=a("li"),ooe=a("strong"),Hro=o("hubert"),Uro=o(" \u2014 "),jR=a("a"),Jro=o("Wav2Vec2FeatureExtractor"),Yro=o(" (Hubert model)"),Kro=l(),Eh=a("li"),roe=a("strong"),Zro=o("layoutlmv2"),eto=o(" \u2014 "),DR=a("a"),oto=o("LayoutLMv2FeatureExtractor"),rto=o(" (LayoutLMv2 model)"),tto=l(),Ch=a("li"),toe=a("strong"),ato=o("maskformer"),nto=o(" \u2014 "),GR=a("a"),sto=o("MaskFormerFeatureExtractor"),lto=o(" (MaskFormer model)"),ito=l(),wh=a("li"),aoe=a("strong"),dto=o("perceiver"),cto=o(" \u2014 "),OR=a("a"),fto=o("PerceiverFeatureExtractor"),mto=o(" (Perceiver model)"),gto=l(),Ah=a("li"),noe=a("strong"),hto=o("poolformer"),pto=o(" \u2014 "),VR=a("a"),_to=o("PoolFormerFeatureExtractor"),uto=o(" (PoolFormer model)"),bto=l(),yh=a("li"),soe=a("strong"),Fto=o("regnet"),vto=o(" \u2014 "),XR=a("a"),Tto=o("ConvNextFeatureExtractor"),Mto=o(" (RegNet model)"),Eto=l(),Lh=a("li"),loe=a("strong"),Cto=o("resnet"),wto=o(" \u2014 "),zR=a("a"),Ato=o("ConvNextFeatureExtractor"),yto=o(" (ResNet model)"),Lto=l(),xh=a("li"),ioe=a("strong"),xto=o("segformer"),kto=o(" \u2014 "),QR=a("a"),Sto=o("SegformerFeatureExtractor"),Rto=o(" (SegFormer model)"),Bto=l(),kh=a("li"),doe=a("strong"),Pto=o("speech_to_text"),$to=o(" \u2014 "),WR=a("a"),Ito=o("Speech2TextFeatureExtractor"),qto=o(" (Speech2Text model)"),Nto=l(),Sh=a("li"),coe=a("strong"),jto=o("swin"),Dto=o(" \u2014 "),HR=a("a"),Gto=o("ViTFeatureExtractor"),Oto=o(" (Swin model)"),Vto=l(),Rh=a("li"),foe=a("strong"),Xto=o("van"),zto=o(" \u2014 "),UR=a("a"),Qto=o("ConvNextFeatureExtractor"),Wto=o(" (VAN model)"),Hto=l(),Bh=a("li"),moe=a("strong"),Uto=o("vit"),Jto=o(" \u2014 "),JR=a("a"),Yto=o("ViTFeatureExtractor"),Kto=o(" (ViT model)"),Zto=l(),Ph=a("li"),goe=a("strong"),eao=o("vit_mae"),oao=o(" \u2014 "),YR=a("a"),rao=o("ViTFeatureExtractor"),tao=o(" (ViTMAE model)"),aao=l(),$h=a("li"),hoe=a("strong"),nao=o("wav2vec2"),sao=o(" \u2014 "),KR=a("a"),lao=o("Wav2Vec2FeatureExtractor"),iao=o(" (Wav2Vec2 model)"),dao=l(),f(Ih.$$.fragment),cao=l(),poe=a("p"),fao=o("Examples:"),mao=l(),f(JC.$$.fragment),gao=l(),qh=a("div"),f(YC.$$.fragment),hao=l(),_oe=a("p"),pao=o("Register a new feature extractor for this class."),PRe=l(),Hi=a("h2"),Nh=a("a"),uoe=a("span"),f(KC.$$.fragment),_ao=l(),boe=a("span"),uao=o("AutoProcessor"),$Re=l(),Uo=a("div"),f(ZC.$$.fragment),bao=l(),ew=a("p"),Fao=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),ZR=a("a"),vao=o("AutoProcessor.from_pretrained()"),Tao=o(" class method."),Mao=l(),ow=a("p"),Eao=o("This class cannot be instantiated directly using "),Foe=a("code"),Cao=o("__init__()"),wao=o(" (throws an error)."),Aao=l(),Ie=a("div"),f(rw.$$.fragment),yao=l(),voe=a("p"),Lao=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),xao=l(),Ui=a("p"),kao=o("The processor class to instantiate is selected based on the "),Toe=a("code"),Sao=o("model_type"),Rao=o(` property of the config object (either
passed as an argument or loaded from `),Moe=a("code"),Bao=o("pretrained_model_name_or_path"),Pao=o(" if possible):"),$ao=l(),ke=a("ul"),jh=a("li"),Eoe=a("strong"),Iao=o("clip"),qao=o(" \u2014 "),eB=a("a"),Nao=o("CLIPProcessor"),jao=o(" (CLIP model)"),Dao=l(),Dh=a("li"),Coe=a("strong"),Gao=o("layoutlmv2"),Oao=o(" \u2014 "),oB=a("a"),Vao=o("LayoutLMv2Processor"),Xao=o(" (LayoutLMv2 model)"),zao=l(),Gh=a("li"),woe=a("strong"),Qao=o("layoutxlm"),Wao=o(" \u2014 "),rB=a("a"),Hao=o("LayoutXLMProcessor"),Uao=o(" (LayoutXLM model)"),Jao=l(),Oh=a("li"),Aoe=a("strong"),Yao=o("speech_to_text"),Kao=o(" \u2014 "),tB=a("a"),Zao=o("Speech2TextProcessor"),eno=o(" (Speech2Text model)"),ono=l(),Vh=a("li"),yoe=a("strong"),rno=o("speech_to_text_2"),tno=o(" \u2014 "),aB=a("a"),ano=o("Speech2Text2Processor"),nno=o(" (Speech2Text2 model)"),sno=l(),Xh=a("li"),Loe=a("strong"),lno=o("trocr"),ino=o(" \u2014 "),nB=a("a"),dno=o("TrOCRProcessor"),cno=o(" (TrOCR model)"),fno=l(),zh=a("li"),xoe=a("strong"),mno=o("vision-text-dual-encoder"),gno=o(" \u2014 "),sB=a("a"),hno=o("VisionTextDualEncoderProcessor"),pno=o(" (VisionTextDualEncoder model)"),_no=l(),Qh=a("li"),koe=a("strong"),uno=o("wav2vec2"),bno=o(" \u2014 "),lB=a("a"),Fno=o("Wav2Vec2Processor"),vno=o(" (Wav2Vec2 model)"),Tno=l(),f(Wh.$$.fragment),Mno=l(),Soe=a("p"),Eno=o("Examples:"),Cno=l(),f(tw.$$.fragment),wno=l(),Hh=a("div"),f(aw.$$.fragment),Ano=l(),Roe=a("p"),yno=o("Register a new processor for this class."),IRe=l(),Ji=a("h2"),Uh=a("a"),Boe=a("span"),f(nw.$$.fragment),Lno=l(),Poe=a("span"),xno=o("AutoModel"),qRe=l(),Jo=a("div"),f(sw.$$.fragment),kno=l(),Yi=a("p"),Sno=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iB=a("a"),Rno=o("from_pretrained()"),Bno=o(" class method or the "),dB=a("a"),Pno=o("from_config()"),$no=o(` class
method.`),Ino=l(),lw=a("p"),qno=o("This class cannot be instantiated directly using "),$oe=a("code"),Nno=o("__init__()"),jno=o(" (throws an error)."),Dno=l(),Xr=a("div"),f(iw.$$.fragment),Gno=l(),Ioe=a("p"),Ono=o("Instantiates one of the base model classes of the library from a configuration."),Vno=l(),Ki=a("p"),Xno=o(`Note:
Loading a model from its configuration file does `),qoe=a("strong"),zno=o("not"),Qno=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cB=a("a"),Wno=o("from_pretrained()"),Hno=o(" to load the model weights."),Uno=l(),Noe=a("p"),Jno=o("Examples:"),Yno=l(),f(dw.$$.fragment),Kno=l(),qe=a("div"),f(cw.$$.fragment),Zno=l(),joe=a("p"),eso=o("Instantiate one of the base model classes of the library from a pretrained model."),oso=l(),Xa=a("p"),rso=o("The model class to instantiate is selected based on the "),Doe=a("code"),tso=o("model_type"),aso=o(` property of the config object (either
passed as an argument or loaded from `),Goe=a("code"),nso=o("pretrained_model_name_or_path"),sso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ooe=a("code"),lso=o("pretrained_model_name_or_path"),iso=o(":"),dso=l(),T=a("ul"),Jh=a("li"),Voe=a("strong"),cso=o("albert"),fso=o(" \u2014 "),fB=a("a"),mso=o("AlbertModel"),gso=o(" (ALBERT model)"),hso=l(),Yh=a("li"),Xoe=a("strong"),pso=o("bart"),_so=o(" \u2014 "),mB=a("a"),uso=o("BartModel"),bso=o(" (BART model)"),Fso=l(),Kh=a("li"),zoe=a("strong"),vso=o("beit"),Tso=o(" \u2014 "),gB=a("a"),Mso=o("BeitModel"),Eso=o(" (BEiT model)"),Cso=l(),Zh=a("li"),Qoe=a("strong"),wso=o("bert"),Aso=o(" \u2014 "),hB=a("a"),yso=o("BertModel"),Lso=o(" (BERT model)"),xso=l(),ep=a("li"),Woe=a("strong"),kso=o("bert-generation"),Sso=o(" \u2014 "),pB=a("a"),Rso=o("BertGenerationEncoder"),Bso=o(" (Bert Generation model)"),Pso=l(),op=a("li"),Hoe=a("strong"),$so=o("big_bird"),Iso=o(" \u2014 "),_B=a("a"),qso=o("BigBirdModel"),Nso=o(" (BigBird model)"),jso=l(),rp=a("li"),Uoe=a("strong"),Dso=o("bigbird_pegasus"),Gso=o(" \u2014 "),uB=a("a"),Oso=o("BigBirdPegasusModel"),Vso=o(" (BigBirdPegasus model)"),Xso=l(),tp=a("li"),Joe=a("strong"),zso=o("blenderbot"),Qso=o(" \u2014 "),bB=a("a"),Wso=o("BlenderbotModel"),Hso=o(" (Blenderbot model)"),Uso=l(),ap=a("li"),Yoe=a("strong"),Jso=o("blenderbot-small"),Yso=o(" \u2014 "),FB=a("a"),Kso=o("BlenderbotSmallModel"),Zso=o(" (BlenderbotSmall model)"),elo=l(),np=a("li"),Koe=a("strong"),olo=o("camembert"),rlo=o(" \u2014 "),vB=a("a"),tlo=o("CamembertModel"),alo=o(" (CamemBERT model)"),nlo=l(),sp=a("li"),Zoe=a("strong"),slo=o("canine"),llo=o(" \u2014 "),TB=a("a"),ilo=o("CanineModel"),dlo=o(" (Canine model)"),clo=l(),lp=a("li"),ere=a("strong"),flo=o("clip"),mlo=o(" \u2014 "),MB=a("a"),glo=o("CLIPModel"),hlo=o(" (CLIP model)"),plo=l(),ip=a("li"),ore=a("strong"),_lo=o("convbert"),ulo=o(" \u2014 "),EB=a("a"),blo=o("ConvBertModel"),Flo=o(" (ConvBERT model)"),vlo=l(),dp=a("li"),rre=a("strong"),Tlo=o("convnext"),Mlo=o(" \u2014 "),CB=a("a"),Elo=o("ConvNextModel"),Clo=o(" (ConvNext model)"),wlo=l(),cp=a("li"),tre=a("strong"),Alo=o("ctrl"),ylo=o(" \u2014 "),wB=a("a"),Llo=o("CTRLModel"),xlo=o(" (CTRL model)"),klo=l(),fp=a("li"),are=a("strong"),Slo=o("data2vec-audio"),Rlo=o(" \u2014 "),AB=a("a"),Blo=o("Data2VecAudioModel"),Plo=o(" (Data2VecAudio model)"),$lo=l(),mp=a("li"),nre=a("strong"),Ilo=o("data2vec-text"),qlo=o(" \u2014 "),yB=a("a"),Nlo=o("Data2VecTextModel"),jlo=o(" (Data2VecText model)"),Dlo=l(),gp=a("li"),sre=a("strong"),Glo=o("deberta"),Olo=o(" \u2014 "),LB=a("a"),Vlo=o("DebertaModel"),Xlo=o(" (DeBERTa model)"),zlo=l(),hp=a("li"),lre=a("strong"),Qlo=o("deberta-v2"),Wlo=o(" \u2014 "),xB=a("a"),Hlo=o("DebertaV2Model"),Ulo=o(" (DeBERTa-v2 model)"),Jlo=l(),pp=a("li"),ire=a("strong"),Ylo=o("decision_transformer"),Klo=o(" \u2014 "),kB=a("a"),Zlo=o("DecisionTransformerModel"),eio=o(" (Decision Transformer model)"),oio=l(),_p=a("li"),dre=a("strong"),rio=o("deit"),tio=o(" \u2014 "),SB=a("a"),aio=o("DeiTModel"),nio=o(" (DeiT model)"),sio=l(),up=a("li"),cre=a("strong"),lio=o("detr"),iio=o(" \u2014 "),RB=a("a"),dio=o("DetrModel"),cio=o(" (DETR model)"),fio=l(),bp=a("li"),fre=a("strong"),mio=o("distilbert"),gio=o(" \u2014 "),BB=a("a"),hio=o("DistilBertModel"),pio=o(" (DistilBERT model)"),_io=l(),Fp=a("li"),mre=a("strong"),uio=o("dpr"),bio=o(" \u2014 "),PB=a("a"),Fio=o("DPRQuestionEncoder"),vio=o(" (DPR model)"),Tio=l(),vp=a("li"),gre=a("strong"),Mio=o("dpt"),Eio=o(" \u2014 "),$B=a("a"),Cio=o("DPTModel"),wio=o(" (DPT model)"),Aio=l(),Tp=a("li"),hre=a("strong"),yio=o("electra"),Lio=o(" \u2014 "),IB=a("a"),xio=o("ElectraModel"),kio=o(" (ELECTRA model)"),Sio=l(),Mp=a("li"),pre=a("strong"),Rio=o("flaubert"),Bio=o(" \u2014 "),qB=a("a"),Pio=o("FlaubertModel"),$io=o(" (FlauBERT model)"),Iio=l(),Ep=a("li"),_re=a("strong"),qio=o("fnet"),Nio=o(" \u2014 "),NB=a("a"),jio=o("FNetModel"),Dio=o(" (FNet model)"),Gio=l(),Cp=a("li"),ure=a("strong"),Oio=o("fsmt"),Vio=o(" \u2014 "),jB=a("a"),Xio=o("FSMTModel"),zio=o(" (FairSeq Machine-Translation model)"),Qio=l(),js=a("li"),bre=a("strong"),Wio=o("funnel"),Hio=o(" \u2014 "),DB=a("a"),Uio=o("FunnelModel"),Jio=o(" or "),GB=a("a"),Yio=o("FunnelBaseModel"),Kio=o(" (Funnel Transformer model)"),Zio=l(),wp=a("li"),Fre=a("strong"),edo=o("glpn"),odo=o(" \u2014 "),OB=a("a"),rdo=o("GLPNModel"),tdo=o(" (GLPN model)"),ado=l(),Ap=a("li"),vre=a("strong"),ndo=o("gpt2"),sdo=o(" \u2014 "),VB=a("a"),ldo=o("GPT2Model"),ido=o(" (OpenAI GPT-2 model)"),ddo=l(),yp=a("li"),Tre=a("strong"),cdo=o("gpt_neo"),fdo=o(" \u2014 "),XB=a("a"),mdo=o("GPTNeoModel"),gdo=o(" (GPT Neo model)"),hdo=l(),Lp=a("li"),Mre=a("strong"),pdo=o("gptj"),_do=o(" \u2014 "),zB=a("a"),udo=o("GPTJModel"),bdo=o(" (GPT-J model)"),Fdo=l(),xp=a("li"),Ere=a("strong"),vdo=o("hubert"),Tdo=o(" \u2014 "),QB=a("a"),Mdo=o("HubertModel"),Edo=o(" (Hubert model)"),Cdo=l(),kp=a("li"),Cre=a("strong"),wdo=o("ibert"),Ado=o(" \u2014 "),WB=a("a"),ydo=o("IBertModel"),Ldo=o(" (I-BERT model)"),xdo=l(),Sp=a("li"),wre=a("strong"),kdo=o("imagegpt"),Sdo=o(" \u2014 "),HB=a("a"),Rdo=o("ImageGPTModel"),Bdo=o(" (ImageGPT model)"),Pdo=l(),Rp=a("li"),Are=a("strong"),$do=o("layoutlm"),Ido=o(" \u2014 "),UB=a("a"),qdo=o("LayoutLMModel"),Ndo=o(" (LayoutLM model)"),jdo=l(),Bp=a("li"),yre=a("strong"),Ddo=o("layoutlmv2"),Gdo=o(" \u2014 "),JB=a("a"),Odo=o("LayoutLMv2Model"),Vdo=o(" (LayoutLMv2 model)"),Xdo=l(),Pp=a("li"),Lre=a("strong"),zdo=o("led"),Qdo=o(" \u2014 "),YB=a("a"),Wdo=o("LEDModel"),Hdo=o(" (LED model)"),Udo=l(),$p=a("li"),xre=a("strong"),Jdo=o("longformer"),Ydo=o(" \u2014 "),KB=a("a"),Kdo=o("LongformerModel"),Zdo=o(" (Longformer model)"),eco=l(),Ip=a("li"),kre=a("strong"),oco=o("luke"),rco=o(" \u2014 "),ZB=a("a"),tco=o("LukeModel"),aco=o(" (LUKE model)"),nco=l(),qp=a("li"),Sre=a("strong"),sco=o("lxmert"),lco=o(" \u2014 "),eP=a("a"),ico=o("LxmertModel"),dco=o(" (LXMERT model)"),cco=l(),Np=a("li"),Rre=a("strong"),fco=o("m2m_100"),mco=o(" \u2014 "),oP=a("a"),gco=o("M2M100Model"),hco=o(" (M2M100 model)"),pco=l(),jp=a("li"),Bre=a("strong"),_co=o("marian"),uco=o(" \u2014 "),rP=a("a"),bco=o("MarianModel"),Fco=o(" (Marian model)"),vco=l(),Dp=a("li"),Pre=a("strong"),Tco=o("maskformer"),Mco=o(" \u2014 "),tP=a("a"),Eco=o("MaskFormerModel"),Cco=o(" (MaskFormer model)"),wco=l(),Gp=a("li"),$re=a("strong"),Aco=o("mbart"),yco=o(" \u2014 "),aP=a("a"),Lco=o("MBartModel"),xco=o(" (mBART model)"),kco=l(),Op=a("li"),Ire=a("strong"),Sco=o("megatron-bert"),Rco=o(" \u2014 "),nP=a("a"),Bco=o("MegatronBertModel"),Pco=o(" (MegatronBert model)"),$co=l(),Vp=a("li"),qre=a("strong"),Ico=o("mobilebert"),qco=o(" \u2014 "),sP=a("a"),Nco=o("MobileBertModel"),jco=o(" (MobileBERT model)"),Dco=l(),Xp=a("li"),Nre=a("strong"),Gco=o("mpnet"),Oco=o(" \u2014 "),lP=a("a"),Vco=o("MPNetModel"),Xco=o(" (MPNet model)"),zco=l(),zp=a("li"),jre=a("strong"),Qco=o("mt5"),Wco=o(" \u2014 "),iP=a("a"),Hco=o("MT5Model"),Uco=o(" (mT5 model)"),Jco=l(),Qp=a("li"),Dre=a("strong"),Yco=o("nystromformer"),Kco=o(" \u2014 "),dP=a("a"),Zco=o("NystromformerModel"),efo=o(" (Nystromformer model)"),ofo=l(),Wp=a("li"),Gre=a("strong"),rfo=o("openai-gpt"),tfo=o(" \u2014 "),cP=a("a"),afo=o("OpenAIGPTModel"),nfo=o(" (OpenAI GPT model)"),sfo=l(),Hp=a("li"),Ore=a("strong"),lfo=o("pegasus"),ifo=o(" \u2014 "),fP=a("a"),dfo=o("PegasusModel"),cfo=o(" (Pegasus model)"),ffo=l(),Up=a("li"),Vre=a("strong"),mfo=o("perceiver"),gfo=o(" \u2014 "),mP=a("a"),hfo=o("PerceiverModel"),pfo=o(" (Perceiver model)"),_fo=l(),Jp=a("li"),Xre=a("strong"),ufo=o("plbart"),bfo=o(" \u2014 "),gP=a("a"),Ffo=o("PLBartModel"),vfo=o(" (PLBart model)"),Tfo=l(),Yp=a("li"),zre=a("strong"),Mfo=o("poolformer"),Efo=o(" \u2014 "),hP=a("a"),Cfo=o("PoolFormerModel"),wfo=o(" (PoolFormer model)"),Afo=l(),Kp=a("li"),Qre=a("strong"),yfo=o("prophetnet"),Lfo=o(" \u2014 "),pP=a("a"),xfo=o("ProphetNetModel"),kfo=o(" (ProphetNet model)"),Sfo=l(),Zp=a("li"),Wre=a("strong"),Rfo=o("qdqbert"),Bfo=o(" \u2014 "),_P=a("a"),Pfo=o("QDQBertModel"),$fo=o(" (QDQBert model)"),Ifo=l(),e_=a("li"),Hre=a("strong"),qfo=o("reformer"),Nfo=o(" \u2014 "),uP=a("a"),jfo=o("ReformerModel"),Dfo=o(" (Reformer model)"),Gfo=l(),o_=a("li"),Ure=a("strong"),Ofo=o("regnet"),Vfo=o(" \u2014 "),bP=a("a"),Xfo=o("RegNetModel"),zfo=o(" (RegNet model)"),Qfo=l(),r_=a("li"),Jre=a("strong"),Wfo=o("rembert"),Hfo=o(" \u2014 "),FP=a("a"),Ufo=o("RemBertModel"),Jfo=o(" (RemBERT model)"),Yfo=l(),t_=a("li"),Yre=a("strong"),Kfo=o("resnet"),Zfo=o(" \u2014 "),vP=a("a"),emo=o("ResNetModel"),omo=o(" (ResNet model)"),rmo=l(),a_=a("li"),Kre=a("strong"),tmo=o("retribert"),amo=o(" \u2014 "),TP=a("a"),nmo=o("RetriBertModel"),smo=o(" (RetriBERT model)"),lmo=l(),n_=a("li"),Zre=a("strong"),imo=o("roberta"),dmo=o(" \u2014 "),MP=a("a"),cmo=o("RobertaModel"),fmo=o(" (RoBERTa model)"),mmo=l(),s_=a("li"),ete=a("strong"),gmo=o("roformer"),hmo=o(" \u2014 "),EP=a("a"),pmo=o("RoFormerModel"),_mo=o(" (RoFormer model)"),umo=l(),l_=a("li"),ote=a("strong"),bmo=o("segformer"),Fmo=o(" \u2014 "),CP=a("a"),vmo=o("SegformerModel"),Tmo=o(" (SegFormer model)"),Mmo=l(),i_=a("li"),rte=a("strong"),Emo=o("sew"),Cmo=o(" \u2014 "),wP=a("a"),wmo=o("SEWModel"),Amo=o(" (SEW model)"),ymo=l(),d_=a("li"),tte=a("strong"),Lmo=o("sew-d"),xmo=o(" \u2014 "),AP=a("a"),kmo=o("SEWDModel"),Smo=o(" (SEW-D model)"),Rmo=l(),c_=a("li"),ate=a("strong"),Bmo=o("speech_to_text"),Pmo=o(" \u2014 "),yP=a("a"),$mo=o("Speech2TextModel"),Imo=o(" (Speech2Text model)"),qmo=l(),f_=a("li"),nte=a("strong"),Nmo=o("splinter"),jmo=o(" \u2014 "),LP=a("a"),Dmo=o("SplinterModel"),Gmo=o(" (Splinter model)"),Omo=l(),m_=a("li"),ste=a("strong"),Vmo=o("squeezebert"),Xmo=o(" \u2014 "),xP=a("a"),zmo=o("SqueezeBertModel"),Qmo=o(" (SqueezeBERT model)"),Wmo=l(),g_=a("li"),lte=a("strong"),Hmo=o("swin"),Umo=o(" \u2014 "),kP=a("a"),Jmo=o("SwinModel"),Ymo=o(" (Swin model)"),Kmo=l(),h_=a("li"),ite=a("strong"),Zmo=o("t5"),ego=o(" \u2014 "),SP=a("a"),ogo=o("T5Model"),rgo=o(" (T5 model)"),tgo=l(),p_=a("li"),dte=a("strong"),ago=o("tapas"),ngo=o(" \u2014 "),RP=a("a"),sgo=o("TapasModel"),lgo=o(" (TAPAS model)"),igo=l(),__=a("li"),cte=a("strong"),dgo=o("transfo-xl"),cgo=o(" \u2014 "),BP=a("a"),fgo=o("TransfoXLModel"),mgo=o(" (Transformer-XL model)"),ggo=l(),u_=a("li"),fte=a("strong"),hgo=o("unispeech"),pgo=o(" \u2014 "),PP=a("a"),_go=o("UniSpeechModel"),ugo=o(" (UniSpeech model)"),bgo=l(),b_=a("li"),mte=a("strong"),Fgo=o("unispeech-sat"),vgo=o(" \u2014 "),$P=a("a"),Tgo=o("UniSpeechSatModel"),Mgo=o(" (UniSpeechSat model)"),Ego=l(),F_=a("li"),gte=a("strong"),Cgo=o("van"),wgo=o(" \u2014 "),IP=a("a"),Ago=o("VanModel"),ygo=o(" (VAN model)"),Lgo=l(),v_=a("li"),hte=a("strong"),xgo=o("vilt"),kgo=o(" \u2014 "),qP=a("a"),Sgo=o("ViltModel"),Rgo=o(" (ViLT model)"),Bgo=l(),T_=a("li"),pte=a("strong"),Pgo=o("vision-text-dual-encoder"),$go=o(" \u2014 "),NP=a("a"),Igo=o("VisionTextDualEncoderModel"),qgo=o(" (VisionTextDualEncoder model)"),Ngo=l(),M_=a("li"),_te=a("strong"),jgo=o("visual_bert"),Dgo=o(" \u2014 "),jP=a("a"),Ggo=o("VisualBertModel"),Ogo=o(" (VisualBert model)"),Vgo=l(),E_=a("li"),ute=a("strong"),Xgo=o("vit"),zgo=o(" \u2014 "),DP=a("a"),Qgo=o("ViTModel"),Wgo=o(" (ViT model)"),Hgo=l(),C_=a("li"),bte=a("strong"),Ugo=o("vit_mae"),Jgo=o(" \u2014 "),GP=a("a"),Ygo=o("ViTMAEModel"),Kgo=o(" (ViTMAE model)"),Zgo=l(),w_=a("li"),Fte=a("strong"),eho=o("wav2vec2"),oho=o(" \u2014 "),OP=a("a"),rho=o("Wav2Vec2Model"),tho=o(" (Wav2Vec2 model)"),aho=l(),A_=a("li"),vte=a("strong"),nho=o("wavlm"),sho=o(" \u2014 "),VP=a("a"),lho=o("WavLMModel"),iho=o(" (WavLM model)"),dho=l(),y_=a("li"),Tte=a("strong"),cho=o("xglm"),fho=o(" \u2014 "),XP=a("a"),mho=o("XGLMModel"),gho=o(" (XGLM model)"),hho=l(),L_=a("li"),Mte=a("strong"),pho=o("xlm"),_ho=o(" \u2014 "),zP=a("a"),uho=o("XLMModel"),bho=o(" (XLM model)"),Fho=l(),x_=a("li"),Ete=a("strong"),vho=o("xlm-prophetnet"),Tho=o(" \u2014 "),QP=a("a"),Mho=o("XLMProphetNetModel"),Eho=o(" (XLMProphetNet model)"),Cho=l(),k_=a("li"),Cte=a("strong"),who=o("xlm-roberta"),Aho=o(" \u2014 "),WP=a("a"),yho=o("XLMRobertaModel"),Lho=o(" (XLM-RoBERTa model)"),xho=l(),S_=a("li"),wte=a("strong"),kho=o("xlm-roberta-xl"),Sho=o(" \u2014 "),HP=a("a"),Rho=o("XLMRobertaXLModel"),Bho=o(" (XLM-RoBERTa-XL model)"),Pho=l(),R_=a("li"),Ate=a("strong"),$ho=o("xlnet"),Iho=o(" \u2014 "),UP=a("a"),qho=o("XLNetModel"),Nho=o(" (XLNet model)"),jho=l(),B_=a("li"),yte=a("strong"),Dho=o("yoso"),Gho=o(" \u2014 "),JP=a("a"),Oho=o("YosoModel"),Vho=o(" (YOSO model)"),Xho=l(),P_=a("p"),zho=o("The model is set in evaluation mode by default using "),Lte=a("code"),Qho=o("model.eval()"),Who=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xte=a("code"),Hho=o("model.train()"),Uho=l(),kte=a("p"),Jho=o("Examples:"),Yho=l(),f(fw.$$.fragment),NRe=l(),Zi=a("h2"),$_=a("a"),Ste=a("span"),f(mw.$$.fragment),Kho=l(),Rte=a("span"),Zho=o("AutoModelForPreTraining"),jRe=l(),Yo=a("div"),f(gw.$$.fragment),epo=l(),ed=a("p"),opo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YP=a("a"),rpo=o("from_pretrained()"),tpo=o(" class method or the "),KP=a("a"),apo=o("from_config()"),npo=o(` class
method.`),spo=l(),hw=a("p"),lpo=o("This class cannot be instantiated directly using "),Bte=a("code"),ipo=o("__init__()"),dpo=o(" (throws an error)."),cpo=l(),zr=a("div"),f(pw.$$.fragment),fpo=l(),Pte=a("p"),mpo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),gpo=l(),od=a("p"),hpo=o(`Note:
Loading a model from its configuration file does `),$te=a("strong"),ppo=o("not"),_po=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZP=a("a"),upo=o("from_pretrained()"),bpo=o(" to load the model weights."),Fpo=l(),Ite=a("p"),vpo=o("Examples:"),Tpo=l(),f(_w.$$.fragment),Mpo=l(),Ne=a("div"),f(uw.$$.fragment),Epo=l(),qte=a("p"),Cpo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wpo=l(),za=a("p"),Apo=o("The model class to instantiate is selected based on the "),Nte=a("code"),ypo=o("model_type"),Lpo=o(` property of the config object (either
passed as an argument or loaded from `),jte=a("code"),xpo=o("pretrained_model_name_or_path"),kpo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dte=a("code"),Spo=o("pretrained_model_name_or_path"),Rpo=o(":"),Bpo=l(),S=a("ul"),I_=a("li"),Gte=a("strong"),Ppo=o("albert"),$po=o(" \u2014 "),e$=a("a"),Ipo=o("AlbertForPreTraining"),qpo=o(" (ALBERT model)"),Npo=l(),q_=a("li"),Ote=a("strong"),jpo=o("bart"),Dpo=o(" \u2014 "),o$=a("a"),Gpo=o("BartForConditionalGeneration"),Opo=o(" (BART model)"),Vpo=l(),N_=a("li"),Vte=a("strong"),Xpo=o("bert"),zpo=o(" \u2014 "),r$=a("a"),Qpo=o("BertForPreTraining"),Wpo=o(" (BERT model)"),Hpo=l(),j_=a("li"),Xte=a("strong"),Upo=o("big_bird"),Jpo=o(" \u2014 "),t$=a("a"),Ypo=o("BigBirdForPreTraining"),Kpo=o(" (BigBird model)"),Zpo=l(),D_=a("li"),zte=a("strong"),e_o=o("camembert"),o_o=o(" \u2014 "),a$=a("a"),r_o=o("CamembertForMaskedLM"),t_o=o(" (CamemBERT model)"),a_o=l(),G_=a("li"),Qte=a("strong"),n_o=o("ctrl"),s_o=o(" \u2014 "),n$=a("a"),l_o=o("CTRLLMHeadModel"),i_o=o(" (CTRL model)"),d_o=l(),O_=a("li"),Wte=a("strong"),c_o=o("data2vec-text"),f_o=o(" \u2014 "),s$=a("a"),m_o=o("Data2VecTextForMaskedLM"),g_o=o(" (Data2VecText model)"),h_o=l(),V_=a("li"),Hte=a("strong"),p_o=o("deberta"),__o=o(" \u2014 "),l$=a("a"),u_o=o("DebertaForMaskedLM"),b_o=o(" (DeBERTa model)"),F_o=l(),X_=a("li"),Ute=a("strong"),v_o=o("deberta-v2"),T_o=o(" \u2014 "),i$=a("a"),M_o=o("DebertaV2ForMaskedLM"),E_o=o(" (DeBERTa-v2 model)"),C_o=l(),z_=a("li"),Jte=a("strong"),w_o=o("distilbert"),A_o=o(" \u2014 "),d$=a("a"),y_o=o("DistilBertForMaskedLM"),L_o=o(" (DistilBERT model)"),x_o=l(),Q_=a("li"),Yte=a("strong"),k_o=o("electra"),S_o=o(" \u2014 "),c$=a("a"),R_o=o("ElectraForPreTraining"),B_o=o(" (ELECTRA model)"),P_o=l(),W_=a("li"),Kte=a("strong"),$_o=o("flaubert"),I_o=o(" \u2014 "),f$=a("a"),q_o=o("FlaubertWithLMHeadModel"),N_o=o(" (FlauBERT model)"),j_o=l(),H_=a("li"),Zte=a("strong"),D_o=o("fnet"),G_o=o(" \u2014 "),m$=a("a"),O_o=o("FNetForPreTraining"),V_o=o(" (FNet model)"),X_o=l(),U_=a("li"),eae=a("strong"),z_o=o("fsmt"),Q_o=o(" \u2014 "),g$=a("a"),W_o=o("FSMTForConditionalGeneration"),H_o=o(" (FairSeq Machine-Translation model)"),U_o=l(),J_=a("li"),oae=a("strong"),J_o=o("funnel"),Y_o=o(" \u2014 "),h$=a("a"),K_o=o("FunnelForPreTraining"),Z_o=o(" (Funnel Transformer model)"),euo=l(),Y_=a("li"),rae=a("strong"),ouo=o("gpt2"),ruo=o(" \u2014 "),p$=a("a"),tuo=o("GPT2LMHeadModel"),auo=o(" (OpenAI GPT-2 model)"),nuo=l(),K_=a("li"),tae=a("strong"),suo=o("ibert"),luo=o(" \u2014 "),_$=a("a"),iuo=o("IBertForMaskedLM"),duo=o(" (I-BERT model)"),cuo=l(),Z_=a("li"),aae=a("strong"),fuo=o("layoutlm"),muo=o(" \u2014 "),u$=a("a"),guo=o("LayoutLMForMaskedLM"),huo=o(" (LayoutLM model)"),puo=l(),eu=a("li"),nae=a("strong"),_uo=o("longformer"),uuo=o(" \u2014 "),b$=a("a"),buo=o("LongformerForMaskedLM"),Fuo=o(" (Longformer model)"),vuo=l(),ou=a("li"),sae=a("strong"),Tuo=o("lxmert"),Muo=o(" \u2014 "),F$=a("a"),Euo=o("LxmertForPreTraining"),Cuo=o(" (LXMERT model)"),wuo=l(),ru=a("li"),lae=a("strong"),Auo=o("megatron-bert"),yuo=o(" \u2014 "),v$=a("a"),Luo=o("MegatronBertForPreTraining"),xuo=o(" (MegatronBert model)"),kuo=l(),tu=a("li"),iae=a("strong"),Suo=o("mobilebert"),Ruo=o(" \u2014 "),T$=a("a"),Buo=o("MobileBertForPreTraining"),Puo=o(" (MobileBERT model)"),$uo=l(),au=a("li"),dae=a("strong"),Iuo=o("mpnet"),quo=o(" \u2014 "),M$=a("a"),Nuo=o("MPNetForMaskedLM"),juo=o(" (MPNet model)"),Duo=l(),nu=a("li"),cae=a("strong"),Guo=o("openai-gpt"),Ouo=o(" \u2014 "),E$=a("a"),Vuo=o("OpenAIGPTLMHeadModel"),Xuo=o(" (OpenAI GPT model)"),zuo=l(),su=a("li"),fae=a("strong"),Quo=o("retribert"),Wuo=o(" \u2014 "),C$=a("a"),Huo=o("RetriBertModel"),Uuo=o(" (RetriBERT model)"),Juo=l(),lu=a("li"),mae=a("strong"),Yuo=o("roberta"),Kuo=o(" \u2014 "),w$=a("a"),Zuo=o("RobertaForMaskedLM"),e1o=o(" (RoBERTa model)"),o1o=l(),iu=a("li"),gae=a("strong"),r1o=o("squeezebert"),t1o=o(" \u2014 "),A$=a("a"),a1o=o("SqueezeBertForMaskedLM"),n1o=o(" (SqueezeBERT model)"),s1o=l(),du=a("li"),hae=a("strong"),l1o=o("t5"),i1o=o(" \u2014 "),y$=a("a"),d1o=o("T5ForConditionalGeneration"),c1o=o(" (T5 model)"),f1o=l(),cu=a("li"),pae=a("strong"),m1o=o("tapas"),g1o=o(" \u2014 "),L$=a("a"),h1o=o("TapasForMaskedLM"),p1o=o(" (TAPAS model)"),_1o=l(),fu=a("li"),_ae=a("strong"),u1o=o("transfo-xl"),b1o=o(" \u2014 "),x$=a("a"),F1o=o("TransfoXLLMHeadModel"),v1o=o(" (Transformer-XL model)"),T1o=l(),mu=a("li"),uae=a("strong"),M1o=o("unispeech"),E1o=o(" \u2014 "),k$=a("a"),C1o=o("UniSpeechForPreTraining"),w1o=o(" (UniSpeech model)"),A1o=l(),gu=a("li"),bae=a("strong"),y1o=o("unispeech-sat"),L1o=o(" \u2014 "),S$=a("a"),x1o=o("UniSpeechSatForPreTraining"),k1o=o(" (UniSpeechSat model)"),S1o=l(),hu=a("li"),Fae=a("strong"),R1o=o("visual_bert"),B1o=o(" \u2014 "),R$=a("a"),P1o=o("VisualBertForPreTraining"),$1o=o(" (VisualBert model)"),I1o=l(),pu=a("li"),vae=a("strong"),q1o=o("vit_mae"),N1o=o(" \u2014 "),B$=a("a"),j1o=o("ViTMAEForPreTraining"),D1o=o(" (ViTMAE model)"),G1o=l(),_u=a("li"),Tae=a("strong"),O1o=o("wav2vec2"),V1o=o(" \u2014 "),P$=a("a"),X1o=o("Wav2Vec2ForPreTraining"),z1o=o(" (Wav2Vec2 model)"),Q1o=l(),uu=a("li"),Mae=a("strong"),W1o=o("xlm"),H1o=o(" \u2014 "),$$=a("a"),U1o=o("XLMWithLMHeadModel"),J1o=o(" (XLM model)"),Y1o=l(),bu=a("li"),Eae=a("strong"),K1o=o("xlm-roberta"),Z1o=o(" \u2014 "),I$=a("a"),e4o=o("XLMRobertaForMaskedLM"),o4o=o(" (XLM-RoBERTa model)"),r4o=l(),Fu=a("li"),Cae=a("strong"),t4o=o("xlm-roberta-xl"),a4o=o(" \u2014 "),q$=a("a"),n4o=o("XLMRobertaXLForMaskedLM"),s4o=o(" (XLM-RoBERTa-XL model)"),l4o=l(),vu=a("li"),wae=a("strong"),i4o=o("xlnet"),d4o=o(" \u2014 "),N$=a("a"),c4o=o("XLNetLMHeadModel"),f4o=o(" (XLNet model)"),m4o=l(),Tu=a("p"),g4o=o("The model is set in evaluation mode by default using "),Aae=a("code"),h4o=o("model.eval()"),p4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yae=a("code"),_4o=o("model.train()"),u4o=l(),Lae=a("p"),b4o=o("Examples:"),F4o=l(),f(bw.$$.fragment),DRe=l(),rd=a("h2"),Mu=a("a"),xae=a("span"),f(Fw.$$.fragment),v4o=l(),kae=a("span"),T4o=o("AutoModelForCausalLM"),GRe=l(),Ko=a("div"),f(vw.$$.fragment),M4o=l(),td=a("p"),E4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),j$=a("a"),C4o=o("from_pretrained()"),w4o=o(" class method or the "),D$=a("a"),A4o=o("from_config()"),y4o=o(` class
method.`),L4o=l(),Tw=a("p"),x4o=o("This class cannot be instantiated directly using "),Sae=a("code"),k4o=o("__init__()"),S4o=o(" (throws an error)."),R4o=l(),Qr=a("div"),f(Mw.$$.fragment),B4o=l(),Rae=a("p"),P4o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$4o=l(),ad=a("p"),I4o=o(`Note:
Loading a model from its configuration file does `),Bae=a("strong"),q4o=o("not"),N4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),G$=a("a"),j4o=o("from_pretrained()"),D4o=o(" to load the model weights."),G4o=l(),Pae=a("p"),O4o=o("Examples:"),V4o=l(),f(Ew.$$.fragment),X4o=l(),je=a("div"),f(Cw.$$.fragment),z4o=l(),$ae=a("p"),Q4o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),W4o=l(),Qa=a("p"),H4o=o("The model class to instantiate is selected based on the "),Iae=a("code"),U4o=o("model_type"),J4o=o(` property of the config object (either
passed as an argument or loaded from `),qae=a("code"),Y4o=o("pretrained_model_name_or_path"),K4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nae=a("code"),Z4o=o("pretrained_model_name_or_path"),ebo=o(":"),obo=l(),$=a("ul"),Eu=a("li"),jae=a("strong"),rbo=o("bart"),tbo=o(" \u2014 "),O$=a("a"),abo=o("BartForCausalLM"),nbo=o(" (BART model)"),sbo=l(),Cu=a("li"),Dae=a("strong"),lbo=o("bert"),ibo=o(" \u2014 "),V$=a("a"),dbo=o("BertLMHeadModel"),cbo=o(" (BERT model)"),fbo=l(),wu=a("li"),Gae=a("strong"),mbo=o("bert-generation"),gbo=o(" \u2014 "),X$=a("a"),hbo=o("BertGenerationDecoder"),pbo=o(" (Bert Generation model)"),_bo=l(),Au=a("li"),Oae=a("strong"),ubo=o("big_bird"),bbo=o(" \u2014 "),z$=a("a"),Fbo=o("BigBirdForCausalLM"),vbo=o(" (BigBird model)"),Tbo=l(),yu=a("li"),Vae=a("strong"),Mbo=o("bigbird_pegasus"),Ebo=o(" \u2014 "),Q$=a("a"),Cbo=o("BigBirdPegasusForCausalLM"),wbo=o(" (BigBirdPegasus model)"),Abo=l(),Lu=a("li"),Xae=a("strong"),ybo=o("blenderbot"),Lbo=o(" \u2014 "),W$=a("a"),xbo=o("BlenderbotForCausalLM"),kbo=o(" (Blenderbot model)"),Sbo=l(),xu=a("li"),zae=a("strong"),Rbo=o("blenderbot-small"),Bbo=o(" \u2014 "),H$=a("a"),Pbo=o("BlenderbotSmallForCausalLM"),$bo=o(" (BlenderbotSmall model)"),Ibo=l(),ku=a("li"),Qae=a("strong"),qbo=o("camembert"),Nbo=o(" \u2014 "),U$=a("a"),jbo=o("CamembertForCausalLM"),Dbo=o(" (CamemBERT model)"),Gbo=l(),Su=a("li"),Wae=a("strong"),Obo=o("ctrl"),Vbo=o(" \u2014 "),J$=a("a"),Xbo=o("CTRLLMHeadModel"),zbo=o(" (CTRL model)"),Qbo=l(),Ru=a("li"),Hae=a("strong"),Wbo=o("data2vec-text"),Hbo=o(" \u2014 "),Y$=a("a"),Ubo=o("Data2VecTextForCausalLM"),Jbo=o(" (Data2VecText model)"),Ybo=l(),Bu=a("li"),Uae=a("strong"),Kbo=o("electra"),Zbo=o(" \u2014 "),K$=a("a"),e5o=o("ElectraForCausalLM"),o5o=o(" (ELECTRA model)"),r5o=l(),Pu=a("li"),Jae=a("strong"),t5o=o("gpt2"),a5o=o(" \u2014 "),Z$=a("a"),n5o=o("GPT2LMHeadModel"),s5o=o(" (OpenAI GPT-2 model)"),l5o=l(),$u=a("li"),Yae=a("strong"),i5o=o("gpt_neo"),d5o=o(" \u2014 "),eI=a("a"),c5o=o("GPTNeoForCausalLM"),f5o=o(" (GPT Neo model)"),m5o=l(),Iu=a("li"),Kae=a("strong"),g5o=o("gptj"),h5o=o(" \u2014 "),oI=a("a"),p5o=o("GPTJForCausalLM"),_5o=o(" (GPT-J model)"),u5o=l(),qu=a("li"),Zae=a("strong"),b5o=o("marian"),F5o=o(" \u2014 "),rI=a("a"),v5o=o("MarianForCausalLM"),T5o=o(" (Marian model)"),M5o=l(),Nu=a("li"),ene=a("strong"),E5o=o("mbart"),C5o=o(" \u2014 "),tI=a("a"),w5o=o("MBartForCausalLM"),A5o=o(" (mBART model)"),y5o=l(),ju=a("li"),one=a("strong"),L5o=o("megatron-bert"),x5o=o(" \u2014 "),aI=a("a"),k5o=o("MegatronBertForCausalLM"),S5o=o(" (MegatronBert model)"),R5o=l(),Du=a("li"),rne=a("strong"),B5o=o("openai-gpt"),P5o=o(" \u2014 "),nI=a("a"),$5o=o("OpenAIGPTLMHeadModel"),I5o=o(" (OpenAI GPT model)"),q5o=l(),Gu=a("li"),tne=a("strong"),N5o=o("pegasus"),j5o=o(" \u2014 "),sI=a("a"),D5o=o("PegasusForCausalLM"),G5o=o(" (Pegasus model)"),O5o=l(),Ou=a("li"),ane=a("strong"),V5o=o("plbart"),X5o=o(" \u2014 "),lI=a("a"),z5o=o("PLBartForCausalLM"),Q5o=o(" (PLBart model)"),W5o=l(),Vu=a("li"),nne=a("strong"),H5o=o("prophetnet"),U5o=o(" \u2014 "),iI=a("a"),J5o=o("ProphetNetForCausalLM"),Y5o=o(" (ProphetNet model)"),K5o=l(),Xu=a("li"),sne=a("strong"),Z5o=o("qdqbert"),e3o=o(" \u2014 "),dI=a("a"),o3o=o("QDQBertLMHeadModel"),r3o=o(" (QDQBert model)"),t3o=l(),zu=a("li"),lne=a("strong"),a3o=o("reformer"),n3o=o(" \u2014 "),cI=a("a"),s3o=o("ReformerModelWithLMHead"),l3o=o(" (Reformer model)"),i3o=l(),Qu=a("li"),ine=a("strong"),d3o=o("rembert"),c3o=o(" \u2014 "),fI=a("a"),f3o=o("RemBertForCausalLM"),m3o=o(" (RemBERT model)"),g3o=l(),Wu=a("li"),dne=a("strong"),h3o=o("roberta"),p3o=o(" \u2014 "),mI=a("a"),_3o=o("RobertaForCausalLM"),u3o=o(" (RoBERTa model)"),b3o=l(),Hu=a("li"),cne=a("strong"),F3o=o("roformer"),v3o=o(" \u2014 "),gI=a("a"),T3o=o("RoFormerForCausalLM"),M3o=o(" (RoFormer model)"),E3o=l(),Uu=a("li"),fne=a("strong"),C3o=o("speech_to_text_2"),w3o=o(" \u2014 "),hI=a("a"),A3o=o("Speech2Text2ForCausalLM"),y3o=o(" (Speech2Text2 model)"),L3o=l(),Ju=a("li"),mne=a("strong"),x3o=o("transfo-xl"),k3o=o(" \u2014 "),pI=a("a"),S3o=o("TransfoXLLMHeadModel"),R3o=o(" (Transformer-XL model)"),B3o=l(),Yu=a("li"),gne=a("strong"),P3o=o("trocr"),$3o=o(" \u2014 "),_I=a("a"),I3o=o("TrOCRForCausalLM"),q3o=o(" (TrOCR model)"),N3o=l(),Ku=a("li"),hne=a("strong"),j3o=o("xglm"),D3o=o(" \u2014 "),uI=a("a"),G3o=o("XGLMForCausalLM"),O3o=o(" (XGLM model)"),V3o=l(),Zu=a("li"),pne=a("strong"),X3o=o("xlm"),z3o=o(" \u2014 "),bI=a("a"),Q3o=o("XLMWithLMHeadModel"),W3o=o(" (XLM model)"),H3o=l(),e1=a("li"),_ne=a("strong"),U3o=o("xlm-prophetnet"),J3o=o(" \u2014 "),FI=a("a"),Y3o=o("XLMProphetNetForCausalLM"),K3o=o(" (XLMProphetNet model)"),Z3o=l(),o1=a("li"),une=a("strong"),e2o=o("xlm-roberta"),o2o=o(" \u2014 "),vI=a("a"),r2o=o("XLMRobertaForCausalLM"),t2o=o(" (XLM-RoBERTa model)"),a2o=l(),r1=a("li"),bne=a("strong"),n2o=o("xlm-roberta-xl"),s2o=o(" \u2014 "),TI=a("a"),l2o=o("XLMRobertaXLForCausalLM"),i2o=o(" (XLM-RoBERTa-XL model)"),d2o=l(),t1=a("li"),Fne=a("strong"),c2o=o("xlnet"),f2o=o(" \u2014 "),MI=a("a"),m2o=o("XLNetLMHeadModel"),g2o=o(" (XLNet model)"),h2o=l(),a1=a("p"),p2o=o("The model is set in evaluation mode by default using "),vne=a("code"),_2o=o("model.eval()"),u2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tne=a("code"),b2o=o("model.train()"),F2o=l(),Mne=a("p"),v2o=o("Examples:"),T2o=l(),f(ww.$$.fragment),ORe=l(),nd=a("h2"),n1=a("a"),Ene=a("span"),f(Aw.$$.fragment),M2o=l(),Cne=a("span"),E2o=o("AutoModelForMaskedLM"),VRe=l(),Zo=a("div"),f(yw.$$.fragment),C2o=l(),sd=a("p"),w2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EI=a("a"),A2o=o("from_pretrained()"),y2o=o(" class method or the "),CI=a("a"),L2o=o("from_config()"),x2o=o(` class
method.`),k2o=l(),Lw=a("p"),S2o=o("This class cannot be instantiated directly using "),wne=a("code"),R2o=o("__init__()"),B2o=o(" (throws an error)."),P2o=l(),Wr=a("div"),f(xw.$$.fragment),$2o=l(),Ane=a("p"),I2o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),q2o=l(),ld=a("p"),N2o=o(`Note:
Loading a model from its configuration file does `),yne=a("strong"),j2o=o("not"),D2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wI=a("a"),G2o=o("from_pretrained()"),O2o=o(" to load the model weights."),V2o=l(),Lne=a("p"),X2o=o("Examples:"),z2o=l(),f(kw.$$.fragment),Q2o=l(),De=a("div"),f(Sw.$$.fragment),W2o=l(),xne=a("p"),H2o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),U2o=l(),Wa=a("p"),J2o=o("The model class to instantiate is selected based on the "),kne=a("code"),Y2o=o("model_type"),K2o=o(` property of the config object (either
passed as an argument or loaded from `),Sne=a("code"),Z2o=o("pretrained_model_name_or_path"),eFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rne=a("code"),oFo=o("pretrained_model_name_or_path"),rFo=o(":"),tFo=l(),I=a("ul"),s1=a("li"),Bne=a("strong"),aFo=o("albert"),nFo=o(" \u2014 "),AI=a("a"),sFo=o("AlbertForMaskedLM"),lFo=o(" (ALBERT model)"),iFo=l(),l1=a("li"),Pne=a("strong"),dFo=o("bart"),cFo=o(" \u2014 "),yI=a("a"),fFo=o("BartForConditionalGeneration"),mFo=o(" (BART model)"),gFo=l(),i1=a("li"),$ne=a("strong"),hFo=o("bert"),pFo=o(" \u2014 "),LI=a("a"),_Fo=o("BertForMaskedLM"),uFo=o(" (BERT model)"),bFo=l(),d1=a("li"),Ine=a("strong"),FFo=o("big_bird"),vFo=o(" \u2014 "),xI=a("a"),TFo=o("BigBirdForMaskedLM"),MFo=o(" (BigBird model)"),EFo=l(),c1=a("li"),qne=a("strong"),CFo=o("camembert"),wFo=o(" \u2014 "),kI=a("a"),AFo=o("CamembertForMaskedLM"),yFo=o(" (CamemBERT model)"),LFo=l(),f1=a("li"),Nne=a("strong"),xFo=o("convbert"),kFo=o(" \u2014 "),SI=a("a"),SFo=o("ConvBertForMaskedLM"),RFo=o(" (ConvBERT model)"),BFo=l(),m1=a("li"),jne=a("strong"),PFo=o("data2vec-text"),$Fo=o(" \u2014 "),RI=a("a"),IFo=o("Data2VecTextForMaskedLM"),qFo=o(" (Data2VecText model)"),NFo=l(),g1=a("li"),Dne=a("strong"),jFo=o("deberta"),DFo=o(" \u2014 "),BI=a("a"),GFo=o("DebertaForMaskedLM"),OFo=o(" (DeBERTa model)"),VFo=l(),h1=a("li"),Gne=a("strong"),XFo=o("deberta-v2"),zFo=o(" \u2014 "),PI=a("a"),QFo=o("DebertaV2ForMaskedLM"),WFo=o(" (DeBERTa-v2 model)"),HFo=l(),p1=a("li"),One=a("strong"),UFo=o("distilbert"),JFo=o(" \u2014 "),$I=a("a"),YFo=o("DistilBertForMaskedLM"),KFo=o(" (DistilBERT model)"),ZFo=l(),_1=a("li"),Vne=a("strong"),evo=o("electra"),ovo=o(" \u2014 "),II=a("a"),rvo=o("ElectraForMaskedLM"),tvo=o(" (ELECTRA model)"),avo=l(),u1=a("li"),Xne=a("strong"),nvo=o("flaubert"),svo=o(" \u2014 "),qI=a("a"),lvo=o("FlaubertWithLMHeadModel"),ivo=o(" (FlauBERT model)"),dvo=l(),b1=a("li"),zne=a("strong"),cvo=o("fnet"),fvo=o(" \u2014 "),NI=a("a"),mvo=o("FNetForMaskedLM"),gvo=o(" (FNet model)"),hvo=l(),F1=a("li"),Qne=a("strong"),pvo=o("funnel"),_vo=o(" \u2014 "),jI=a("a"),uvo=o("FunnelForMaskedLM"),bvo=o(" (Funnel Transformer model)"),Fvo=l(),v1=a("li"),Wne=a("strong"),vvo=o("ibert"),Tvo=o(" \u2014 "),DI=a("a"),Mvo=o("IBertForMaskedLM"),Evo=o(" (I-BERT model)"),Cvo=l(),T1=a("li"),Hne=a("strong"),wvo=o("layoutlm"),Avo=o(" \u2014 "),GI=a("a"),yvo=o("LayoutLMForMaskedLM"),Lvo=o(" (LayoutLM model)"),xvo=l(),M1=a("li"),Une=a("strong"),kvo=o("longformer"),Svo=o(" \u2014 "),OI=a("a"),Rvo=o("LongformerForMaskedLM"),Bvo=o(" (Longformer model)"),Pvo=l(),E1=a("li"),Jne=a("strong"),$vo=o("mbart"),Ivo=o(" \u2014 "),VI=a("a"),qvo=o("MBartForConditionalGeneration"),Nvo=o(" (mBART model)"),jvo=l(),C1=a("li"),Yne=a("strong"),Dvo=o("megatron-bert"),Gvo=o(" \u2014 "),XI=a("a"),Ovo=o("MegatronBertForMaskedLM"),Vvo=o(" (MegatronBert model)"),Xvo=l(),w1=a("li"),Kne=a("strong"),zvo=o("mobilebert"),Qvo=o(" \u2014 "),zI=a("a"),Wvo=o("MobileBertForMaskedLM"),Hvo=o(" (MobileBERT model)"),Uvo=l(),A1=a("li"),Zne=a("strong"),Jvo=o("mpnet"),Yvo=o(" \u2014 "),QI=a("a"),Kvo=o("MPNetForMaskedLM"),Zvo=o(" (MPNet model)"),e6o=l(),y1=a("li"),ese=a("strong"),o6o=o("nystromformer"),r6o=o(" \u2014 "),WI=a("a"),t6o=o("NystromformerForMaskedLM"),a6o=o(" (Nystromformer model)"),n6o=l(),L1=a("li"),ose=a("strong"),s6o=o("perceiver"),l6o=o(" \u2014 "),HI=a("a"),i6o=o("PerceiverForMaskedLM"),d6o=o(" (Perceiver model)"),c6o=l(),x1=a("li"),rse=a("strong"),f6o=o("qdqbert"),m6o=o(" \u2014 "),UI=a("a"),g6o=o("QDQBertForMaskedLM"),h6o=o(" (QDQBert model)"),p6o=l(),k1=a("li"),tse=a("strong"),_6o=o("reformer"),u6o=o(" \u2014 "),JI=a("a"),b6o=o("ReformerForMaskedLM"),F6o=o(" (Reformer model)"),v6o=l(),S1=a("li"),ase=a("strong"),T6o=o("rembert"),M6o=o(" \u2014 "),YI=a("a"),E6o=o("RemBertForMaskedLM"),C6o=o(" (RemBERT model)"),w6o=l(),R1=a("li"),nse=a("strong"),A6o=o("roberta"),y6o=o(" \u2014 "),KI=a("a"),L6o=o("RobertaForMaskedLM"),x6o=o(" (RoBERTa model)"),k6o=l(),B1=a("li"),sse=a("strong"),S6o=o("roformer"),R6o=o(" \u2014 "),ZI=a("a"),B6o=o("RoFormerForMaskedLM"),P6o=o(" (RoFormer model)"),$6o=l(),P1=a("li"),lse=a("strong"),I6o=o("squeezebert"),q6o=o(" \u2014 "),eq=a("a"),N6o=o("SqueezeBertForMaskedLM"),j6o=o(" (SqueezeBERT model)"),D6o=l(),$1=a("li"),ise=a("strong"),G6o=o("tapas"),O6o=o(" \u2014 "),oq=a("a"),V6o=o("TapasForMaskedLM"),X6o=o(" (TAPAS model)"),z6o=l(),I1=a("li"),dse=a("strong"),Q6o=o("wav2vec2"),W6o=o(" \u2014 "),cse=a("code"),H6o=o("Wav2Vec2ForMaskedLM"),U6o=o(" (Wav2Vec2 model)"),J6o=l(),q1=a("li"),fse=a("strong"),Y6o=o("xlm"),K6o=o(" \u2014 "),rq=a("a"),Z6o=o("XLMWithLMHeadModel"),eTo=o(" (XLM model)"),oTo=l(),N1=a("li"),mse=a("strong"),rTo=o("xlm-roberta"),tTo=o(" \u2014 "),tq=a("a"),aTo=o("XLMRobertaForMaskedLM"),nTo=o(" (XLM-RoBERTa model)"),sTo=l(),j1=a("li"),gse=a("strong"),lTo=o("xlm-roberta-xl"),iTo=o(" \u2014 "),aq=a("a"),dTo=o("XLMRobertaXLForMaskedLM"),cTo=o(" (XLM-RoBERTa-XL model)"),fTo=l(),D1=a("li"),hse=a("strong"),mTo=o("yoso"),gTo=o(" \u2014 "),nq=a("a"),hTo=o("YosoForMaskedLM"),pTo=o(" (YOSO model)"),_To=l(),G1=a("p"),uTo=o("The model is set in evaluation mode by default using "),pse=a("code"),bTo=o("model.eval()"),FTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_se=a("code"),vTo=o("model.train()"),TTo=l(),use=a("p"),MTo=o("Examples:"),ETo=l(),f(Rw.$$.fragment),XRe=l(),id=a("h2"),O1=a("a"),bse=a("span"),f(Bw.$$.fragment),CTo=l(),Fse=a("span"),wTo=o("AutoModelForSeq2SeqLM"),zRe=l(),er=a("div"),f(Pw.$$.fragment),ATo=l(),dd=a("p"),yTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sq=a("a"),LTo=o("from_pretrained()"),xTo=o(" class method or the "),lq=a("a"),kTo=o("from_config()"),STo=o(` class
method.`),RTo=l(),$w=a("p"),BTo=o("This class cannot be instantiated directly using "),vse=a("code"),PTo=o("__init__()"),$To=o(" (throws an error)."),ITo=l(),Hr=a("div"),f(Iw.$$.fragment),qTo=l(),Tse=a("p"),NTo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),jTo=l(),cd=a("p"),DTo=o(`Note:
Loading a model from its configuration file does `),Mse=a("strong"),GTo=o("not"),OTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iq=a("a"),VTo=o("from_pretrained()"),XTo=o(" to load the model weights."),zTo=l(),Ese=a("p"),QTo=o("Examples:"),WTo=l(),f(qw.$$.fragment),HTo=l(),Ge=a("div"),f(Nw.$$.fragment),UTo=l(),Cse=a("p"),JTo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),YTo=l(),Ha=a("p"),KTo=o("The model class to instantiate is selected based on the "),wse=a("code"),ZTo=o("model_type"),eMo=o(` property of the config object (either
passed as an argument or loaded from `),Ase=a("code"),oMo=o("pretrained_model_name_or_path"),rMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yse=a("code"),tMo=o("pretrained_model_name_or_path"),aMo=o(":"),nMo=l(),ne=a("ul"),V1=a("li"),Lse=a("strong"),sMo=o("bart"),lMo=o(" \u2014 "),dq=a("a"),iMo=o("BartForConditionalGeneration"),dMo=o(" (BART model)"),cMo=l(),X1=a("li"),xse=a("strong"),fMo=o("bigbird_pegasus"),mMo=o(" \u2014 "),cq=a("a"),gMo=o("BigBirdPegasusForConditionalGeneration"),hMo=o(" (BigBirdPegasus model)"),pMo=l(),z1=a("li"),kse=a("strong"),_Mo=o("blenderbot"),uMo=o(" \u2014 "),fq=a("a"),bMo=o("BlenderbotForConditionalGeneration"),FMo=o(" (Blenderbot model)"),vMo=l(),Q1=a("li"),Sse=a("strong"),TMo=o("blenderbot-small"),MMo=o(" \u2014 "),mq=a("a"),EMo=o("BlenderbotSmallForConditionalGeneration"),CMo=o(" (BlenderbotSmall model)"),wMo=l(),W1=a("li"),Rse=a("strong"),AMo=o("encoder-decoder"),yMo=o(" \u2014 "),gq=a("a"),LMo=o("EncoderDecoderModel"),xMo=o(" (Encoder decoder model)"),kMo=l(),H1=a("li"),Bse=a("strong"),SMo=o("fsmt"),RMo=o(" \u2014 "),hq=a("a"),BMo=o("FSMTForConditionalGeneration"),PMo=o(" (FairSeq Machine-Translation model)"),$Mo=l(),U1=a("li"),Pse=a("strong"),IMo=o("led"),qMo=o(" \u2014 "),pq=a("a"),NMo=o("LEDForConditionalGeneration"),jMo=o(" (LED model)"),DMo=l(),J1=a("li"),$se=a("strong"),GMo=o("m2m_100"),OMo=o(" \u2014 "),_q=a("a"),VMo=o("M2M100ForConditionalGeneration"),XMo=o(" (M2M100 model)"),zMo=l(),Y1=a("li"),Ise=a("strong"),QMo=o("marian"),WMo=o(" \u2014 "),uq=a("a"),HMo=o("MarianMTModel"),UMo=o(" (Marian model)"),JMo=l(),K1=a("li"),qse=a("strong"),YMo=o("mbart"),KMo=o(" \u2014 "),bq=a("a"),ZMo=o("MBartForConditionalGeneration"),eEo=o(" (mBART model)"),oEo=l(),Z1=a("li"),Nse=a("strong"),rEo=o("mt5"),tEo=o(" \u2014 "),Fq=a("a"),aEo=o("MT5ForConditionalGeneration"),nEo=o(" (mT5 model)"),sEo=l(),e4=a("li"),jse=a("strong"),lEo=o("pegasus"),iEo=o(" \u2014 "),vq=a("a"),dEo=o("PegasusForConditionalGeneration"),cEo=o(" (Pegasus model)"),fEo=l(),o4=a("li"),Dse=a("strong"),mEo=o("plbart"),gEo=o(" \u2014 "),Tq=a("a"),hEo=o("PLBartForConditionalGeneration"),pEo=o(" (PLBart model)"),_Eo=l(),r4=a("li"),Gse=a("strong"),uEo=o("prophetnet"),bEo=o(" \u2014 "),Mq=a("a"),FEo=o("ProphetNetForConditionalGeneration"),vEo=o(" (ProphetNet model)"),TEo=l(),t4=a("li"),Ose=a("strong"),MEo=o("t5"),EEo=o(" \u2014 "),Eq=a("a"),CEo=o("T5ForConditionalGeneration"),wEo=o(" (T5 model)"),AEo=l(),a4=a("li"),Vse=a("strong"),yEo=o("tapex"),LEo=o(" \u2014 "),Cq=a("a"),xEo=o("BartForConditionalGeneration"),kEo=o(" (TAPEX model)"),SEo=l(),n4=a("li"),Xse=a("strong"),REo=o("xlm-prophetnet"),BEo=o(" \u2014 "),wq=a("a"),PEo=o("XLMProphetNetForConditionalGeneration"),$Eo=o(" (XLMProphetNet model)"),IEo=l(),s4=a("p"),qEo=o("The model is set in evaluation mode by default using "),zse=a("code"),NEo=o("model.eval()"),jEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qse=a("code"),DEo=o("model.train()"),GEo=l(),Wse=a("p"),OEo=o("Examples:"),VEo=l(),f(jw.$$.fragment),QRe=l(),fd=a("h2"),l4=a("a"),Hse=a("span"),f(Dw.$$.fragment),XEo=l(),Use=a("span"),zEo=o("AutoModelForSequenceClassification"),WRe=l(),or=a("div"),f(Gw.$$.fragment),QEo=l(),md=a("p"),WEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Aq=a("a"),HEo=o("from_pretrained()"),UEo=o(" class method or the "),yq=a("a"),JEo=o("from_config()"),YEo=o(` class
method.`),KEo=l(),Ow=a("p"),ZEo=o("This class cannot be instantiated directly using "),Jse=a("code"),eCo=o("__init__()"),oCo=o(" (throws an error)."),rCo=l(),Ur=a("div"),f(Vw.$$.fragment),tCo=l(),Yse=a("p"),aCo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nCo=l(),gd=a("p"),sCo=o(`Note:
Loading a model from its configuration file does `),Kse=a("strong"),lCo=o("not"),iCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lq=a("a"),dCo=o("from_pretrained()"),cCo=o(" to load the model weights."),fCo=l(),Zse=a("p"),mCo=o("Examples:"),gCo=l(),f(Xw.$$.fragment),hCo=l(),Oe=a("div"),f(zw.$$.fragment),pCo=l(),ele=a("p"),_Co=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uCo=l(),Ua=a("p"),bCo=o("The model class to instantiate is selected based on the "),ole=a("code"),FCo=o("model_type"),vCo=o(` property of the config object (either
passed as an argument or loaded from `),rle=a("code"),TCo=o("pretrained_model_name_or_path"),MCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tle=a("code"),ECo=o("pretrained_model_name_or_path"),CCo=o(":"),wCo=l(),y=a("ul"),i4=a("li"),ale=a("strong"),ACo=o("albert"),yCo=o(" \u2014 "),xq=a("a"),LCo=o("AlbertForSequenceClassification"),xCo=o(" (ALBERT model)"),kCo=l(),d4=a("li"),nle=a("strong"),SCo=o("bart"),RCo=o(" \u2014 "),kq=a("a"),BCo=o("BartForSequenceClassification"),PCo=o(" (BART model)"),$Co=l(),c4=a("li"),sle=a("strong"),ICo=o("bert"),qCo=o(" \u2014 "),Sq=a("a"),NCo=o("BertForSequenceClassification"),jCo=o(" (BERT model)"),DCo=l(),f4=a("li"),lle=a("strong"),GCo=o("big_bird"),OCo=o(" \u2014 "),Rq=a("a"),VCo=o("BigBirdForSequenceClassification"),XCo=o(" (BigBird model)"),zCo=l(),m4=a("li"),ile=a("strong"),QCo=o("bigbird_pegasus"),WCo=o(" \u2014 "),Bq=a("a"),HCo=o("BigBirdPegasusForSequenceClassification"),UCo=o(" (BigBirdPegasus model)"),JCo=l(),g4=a("li"),dle=a("strong"),YCo=o("camembert"),KCo=o(" \u2014 "),Pq=a("a"),ZCo=o("CamembertForSequenceClassification"),ewo=o(" (CamemBERT model)"),owo=l(),h4=a("li"),cle=a("strong"),rwo=o("canine"),two=o(" \u2014 "),$q=a("a"),awo=o("CanineForSequenceClassification"),nwo=o(" (Canine model)"),swo=l(),p4=a("li"),fle=a("strong"),lwo=o("convbert"),iwo=o(" \u2014 "),Iq=a("a"),dwo=o("ConvBertForSequenceClassification"),cwo=o(" (ConvBERT model)"),fwo=l(),_4=a("li"),mle=a("strong"),mwo=o("ctrl"),gwo=o(" \u2014 "),qq=a("a"),hwo=o("CTRLForSequenceClassification"),pwo=o(" (CTRL model)"),_wo=l(),u4=a("li"),gle=a("strong"),uwo=o("data2vec-text"),bwo=o(" \u2014 "),Nq=a("a"),Fwo=o("Data2VecTextForSequenceClassification"),vwo=o(" (Data2VecText model)"),Two=l(),b4=a("li"),hle=a("strong"),Mwo=o("deberta"),Ewo=o(" \u2014 "),jq=a("a"),Cwo=o("DebertaForSequenceClassification"),wwo=o(" (DeBERTa model)"),Awo=l(),F4=a("li"),ple=a("strong"),ywo=o("deberta-v2"),Lwo=o(" \u2014 "),Dq=a("a"),xwo=o("DebertaV2ForSequenceClassification"),kwo=o(" (DeBERTa-v2 model)"),Swo=l(),v4=a("li"),_le=a("strong"),Rwo=o("distilbert"),Bwo=o(" \u2014 "),Gq=a("a"),Pwo=o("DistilBertForSequenceClassification"),$wo=o(" (DistilBERT model)"),Iwo=l(),T4=a("li"),ule=a("strong"),qwo=o("electra"),Nwo=o(" \u2014 "),Oq=a("a"),jwo=o("ElectraForSequenceClassification"),Dwo=o(" (ELECTRA model)"),Gwo=l(),M4=a("li"),ble=a("strong"),Owo=o("flaubert"),Vwo=o(" \u2014 "),Vq=a("a"),Xwo=o("FlaubertForSequenceClassification"),zwo=o(" (FlauBERT model)"),Qwo=l(),E4=a("li"),Fle=a("strong"),Wwo=o("fnet"),Hwo=o(" \u2014 "),Xq=a("a"),Uwo=o("FNetForSequenceClassification"),Jwo=o(" (FNet model)"),Ywo=l(),C4=a("li"),vle=a("strong"),Kwo=o("funnel"),Zwo=o(" \u2014 "),zq=a("a"),eAo=o("FunnelForSequenceClassification"),oAo=o(" (Funnel Transformer model)"),rAo=l(),w4=a("li"),Tle=a("strong"),tAo=o("gpt2"),aAo=o(" \u2014 "),Qq=a("a"),nAo=o("GPT2ForSequenceClassification"),sAo=o(" (OpenAI GPT-2 model)"),lAo=l(),A4=a("li"),Mle=a("strong"),iAo=o("gpt_neo"),dAo=o(" \u2014 "),Wq=a("a"),cAo=o("GPTNeoForSequenceClassification"),fAo=o(" (GPT Neo model)"),mAo=l(),y4=a("li"),Ele=a("strong"),gAo=o("gptj"),hAo=o(" \u2014 "),Hq=a("a"),pAo=o("GPTJForSequenceClassification"),_Ao=o(" (GPT-J model)"),uAo=l(),L4=a("li"),Cle=a("strong"),bAo=o("ibert"),FAo=o(" \u2014 "),Uq=a("a"),vAo=o("IBertForSequenceClassification"),TAo=o(" (I-BERT model)"),MAo=l(),x4=a("li"),wle=a("strong"),EAo=o("layoutlm"),CAo=o(" \u2014 "),Jq=a("a"),wAo=o("LayoutLMForSequenceClassification"),AAo=o(" (LayoutLM model)"),yAo=l(),k4=a("li"),Ale=a("strong"),LAo=o("layoutlmv2"),xAo=o(" \u2014 "),Yq=a("a"),kAo=o("LayoutLMv2ForSequenceClassification"),SAo=o(" (LayoutLMv2 model)"),RAo=l(),S4=a("li"),yle=a("strong"),BAo=o("led"),PAo=o(" \u2014 "),Kq=a("a"),$Ao=o("LEDForSequenceClassification"),IAo=o(" (LED model)"),qAo=l(),R4=a("li"),Lle=a("strong"),NAo=o("longformer"),jAo=o(" \u2014 "),Zq=a("a"),DAo=o("LongformerForSequenceClassification"),GAo=o(" (Longformer model)"),OAo=l(),B4=a("li"),xle=a("strong"),VAo=o("mbart"),XAo=o(" \u2014 "),eN=a("a"),zAo=o("MBartForSequenceClassification"),QAo=o(" (mBART model)"),WAo=l(),P4=a("li"),kle=a("strong"),HAo=o("megatron-bert"),UAo=o(" \u2014 "),oN=a("a"),JAo=o("MegatronBertForSequenceClassification"),YAo=o(" (MegatronBert model)"),KAo=l(),$4=a("li"),Sle=a("strong"),ZAo=o("mobilebert"),e0o=o(" \u2014 "),rN=a("a"),o0o=o("MobileBertForSequenceClassification"),r0o=o(" (MobileBERT model)"),t0o=l(),I4=a("li"),Rle=a("strong"),a0o=o("mpnet"),n0o=o(" \u2014 "),tN=a("a"),s0o=o("MPNetForSequenceClassification"),l0o=o(" (MPNet model)"),i0o=l(),q4=a("li"),Ble=a("strong"),d0o=o("nystromformer"),c0o=o(" \u2014 "),aN=a("a"),f0o=o("NystromformerForSequenceClassification"),m0o=o(" (Nystromformer model)"),g0o=l(),N4=a("li"),Ple=a("strong"),h0o=o("openai-gpt"),p0o=o(" \u2014 "),nN=a("a"),_0o=o("OpenAIGPTForSequenceClassification"),u0o=o(" (OpenAI GPT model)"),b0o=l(),j4=a("li"),$le=a("strong"),F0o=o("perceiver"),v0o=o(" \u2014 "),sN=a("a"),T0o=o("PerceiverForSequenceClassification"),M0o=o(" (Perceiver model)"),E0o=l(),D4=a("li"),Ile=a("strong"),C0o=o("plbart"),w0o=o(" \u2014 "),lN=a("a"),A0o=o("PLBartForSequenceClassification"),y0o=o(" (PLBart model)"),L0o=l(),G4=a("li"),qle=a("strong"),x0o=o("qdqbert"),k0o=o(" \u2014 "),iN=a("a"),S0o=o("QDQBertForSequenceClassification"),R0o=o(" (QDQBert model)"),B0o=l(),O4=a("li"),Nle=a("strong"),P0o=o("reformer"),$0o=o(" \u2014 "),dN=a("a"),I0o=o("ReformerForSequenceClassification"),q0o=o(" (Reformer model)"),N0o=l(),V4=a("li"),jle=a("strong"),j0o=o("rembert"),D0o=o(" \u2014 "),cN=a("a"),G0o=o("RemBertForSequenceClassification"),O0o=o(" (RemBERT model)"),V0o=l(),X4=a("li"),Dle=a("strong"),X0o=o("roberta"),z0o=o(" \u2014 "),fN=a("a"),Q0o=o("RobertaForSequenceClassification"),W0o=o(" (RoBERTa model)"),H0o=l(),z4=a("li"),Gle=a("strong"),U0o=o("roformer"),J0o=o(" \u2014 "),mN=a("a"),Y0o=o("RoFormerForSequenceClassification"),K0o=o(" (RoFormer model)"),Z0o=l(),Q4=a("li"),Ole=a("strong"),eyo=o("squeezebert"),oyo=o(" \u2014 "),gN=a("a"),ryo=o("SqueezeBertForSequenceClassification"),tyo=o(" (SqueezeBERT model)"),ayo=l(),W4=a("li"),Vle=a("strong"),nyo=o("tapas"),syo=o(" \u2014 "),hN=a("a"),lyo=o("TapasForSequenceClassification"),iyo=o(" (TAPAS model)"),dyo=l(),H4=a("li"),Xle=a("strong"),cyo=o("tapex"),fyo=o(" \u2014 "),pN=a("a"),myo=o("BartForSequenceClassification"),gyo=o(" (TAPEX model)"),hyo=l(),U4=a("li"),zle=a("strong"),pyo=o("transfo-xl"),_yo=o(" \u2014 "),_N=a("a"),uyo=o("TransfoXLForSequenceClassification"),byo=o(" (Transformer-XL model)"),Fyo=l(),J4=a("li"),Qle=a("strong"),vyo=o("xlm"),Tyo=o(" \u2014 "),uN=a("a"),Myo=o("XLMForSequenceClassification"),Eyo=o(" (XLM model)"),Cyo=l(),Y4=a("li"),Wle=a("strong"),wyo=o("xlm-roberta"),Ayo=o(" \u2014 "),bN=a("a"),yyo=o("XLMRobertaForSequenceClassification"),Lyo=o(" (XLM-RoBERTa model)"),xyo=l(),K4=a("li"),Hle=a("strong"),kyo=o("xlm-roberta-xl"),Syo=o(" \u2014 "),FN=a("a"),Ryo=o("XLMRobertaXLForSequenceClassification"),Byo=o(" (XLM-RoBERTa-XL model)"),Pyo=l(),Z4=a("li"),Ule=a("strong"),$yo=o("xlnet"),Iyo=o(" \u2014 "),vN=a("a"),qyo=o("XLNetForSequenceClassification"),Nyo=o(" (XLNet model)"),jyo=l(),eb=a("li"),Jle=a("strong"),Dyo=o("yoso"),Gyo=o(" \u2014 "),TN=a("a"),Oyo=o("YosoForSequenceClassification"),Vyo=o(" (YOSO model)"),Xyo=l(),ob=a("p"),zyo=o("The model is set in evaluation mode by default using "),Yle=a("code"),Qyo=o("model.eval()"),Wyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kle=a("code"),Hyo=o("model.train()"),Uyo=l(),Zle=a("p"),Jyo=o("Examples:"),Yyo=l(),f(Qw.$$.fragment),HRe=l(),hd=a("h2"),rb=a("a"),eie=a("span"),f(Ww.$$.fragment),Kyo=l(),oie=a("span"),Zyo=o("AutoModelForMultipleChoice"),URe=l(),rr=a("div"),f(Hw.$$.fragment),eLo=l(),pd=a("p"),oLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MN=a("a"),rLo=o("from_pretrained()"),tLo=o(" class method or the "),EN=a("a"),aLo=o("from_config()"),nLo=o(` class
method.`),sLo=l(),Uw=a("p"),lLo=o("This class cannot be instantiated directly using "),rie=a("code"),iLo=o("__init__()"),dLo=o(" (throws an error)."),cLo=l(),Jr=a("div"),f(Jw.$$.fragment),fLo=l(),tie=a("p"),mLo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gLo=l(),_d=a("p"),hLo=o(`Note:
Loading a model from its configuration file does `),aie=a("strong"),pLo=o("not"),_Lo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CN=a("a"),uLo=o("from_pretrained()"),bLo=o(" to load the model weights."),FLo=l(),nie=a("p"),vLo=o("Examples:"),TLo=l(),f(Yw.$$.fragment),MLo=l(),Ve=a("div"),f(Kw.$$.fragment),ELo=l(),sie=a("p"),CLo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wLo=l(),Ja=a("p"),ALo=o("The model class to instantiate is selected based on the "),lie=a("code"),yLo=o("model_type"),LLo=o(` property of the config object (either
passed as an argument or loaded from `),iie=a("code"),xLo=o("pretrained_model_name_or_path"),kLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),die=a("code"),SLo=o("pretrained_model_name_or_path"),RLo=o(":"),BLo=l(),G=a("ul"),tb=a("li"),cie=a("strong"),PLo=o("albert"),$Lo=o(" \u2014 "),wN=a("a"),ILo=o("AlbertForMultipleChoice"),qLo=o(" (ALBERT model)"),NLo=l(),ab=a("li"),fie=a("strong"),jLo=o("bert"),DLo=o(" \u2014 "),AN=a("a"),GLo=o("BertForMultipleChoice"),OLo=o(" (BERT model)"),VLo=l(),nb=a("li"),mie=a("strong"),XLo=o("big_bird"),zLo=o(" \u2014 "),yN=a("a"),QLo=o("BigBirdForMultipleChoice"),WLo=o(" (BigBird model)"),HLo=l(),sb=a("li"),gie=a("strong"),ULo=o("camembert"),JLo=o(" \u2014 "),LN=a("a"),YLo=o("CamembertForMultipleChoice"),KLo=o(" (CamemBERT model)"),ZLo=l(),lb=a("li"),hie=a("strong"),e8o=o("canine"),o8o=o(" \u2014 "),xN=a("a"),r8o=o("CanineForMultipleChoice"),t8o=o(" (Canine model)"),a8o=l(),ib=a("li"),pie=a("strong"),n8o=o("convbert"),s8o=o(" \u2014 "),kN=a("a"),l8o=o("ConvBertForMultipleChoice"),i8o=o(" (ConvBERT model)"),d8o=l(),db=a("li"),_ie=a("strong"),c8o=o("data2vec-text"),f8o=o(" \u2014 "),SN=a("a"),m8o=o("Data2VecTextForMultipleChoice"),g8o=o(" (Data2VecText model)"),h8o=l(),cb=a("li"),uie=a("strong"),p8o=o("distilbert"),_8o=o(" \u2014 "),RN=a("a"),u8o=o("DistilBertForMultipleChoice"),b8o=o(" (DistilBERT model)"),F8o=l(),fb=a("li"),bie=a("strong"),v8o=o("electra"),T8o=o(" \u2014 "),BN=a("a"),M8o=o("ElectraForMultipleChoice"),E8o=o(" (ELECTRA model)"),C8o=l(),mb=a("li"),Fie=a("strong"),w8o=o("flaubert"),A8o=o(" \u2014 "),PN=a("a"),y8o=o("FlaubertForMultipleChoice"),L8o=o(" (FlauBERT model)"),x8o=l(),gb=a("li"),vie=a("strong"),k8o=o("fnet"),S8o=o(" \u2014 "),$N=a("a"),R8o=o("FNetForMultipleChoice"),B8o=o(" (FNet model)"),P8o=l(),hb=a("li"),Tie=a("strong"),$8o=o("funnel"),I8o=o(" \u2014 "),IN=a("a"),q8o=o("FunnelForMultipleChoice"),N8o=o(" (Funnel Transformer model)"),j8o=l(),pb=a("li"),Mie=a("strong"),D8o=o("ibert"),G8o=o(" \u2014 "),qN=a("a"),O8o=o("IBertForMultipleChoice"),V8o=o(" (I-BERT model)"),X8o=l(),_b=a("li"),Eie=a("strong"),z8o=o("longformer"),Q8o=o(" \u2014 "),NN=a("a"),W8o=o("LongformerForMultipleChoice"),H8o=o(" (Longformer model)"),U8o=l(),ub=a("li"),Cie=a("strong"),J8o=o("megatron-bert"),Y8o=o(" \u2014 "),jN=a("a"),K8o=o("MegatronBertForMultipleChoice"),Z8o=o(" (MegatronBert model)"),e7o=l(),bb=a("li"),wie=a("strong"),o7o=o("mobilebert"),r7o=o(" \u2014 "),DN=a("a"),t7o=o("MobileBertForMultipleChoice"),a7o=o(" (MobileBERT model)"),n7o=l(),Fb=a("li"),Aie=a("strong"),s7o=o("mpnet"),l7o=o(" \u2014 "),GN=a("a"),i7o=o("MPNetForMultipleChoice"),d7o=o(" (MPNet model)"),c7o=l(),vb=a("li"),yie=a("strong"),f7o=o("nystromformer"),m7o=o(" \u2014 "),ON=a("a"),g7o=o("NystromformerForMultipleChoice"),h7o=o(" (Nystromformer model)"),p7o=l(),Tb=a("li"),Lie=a("strong"),_7o=o("qdqbert"),u7o=o(" \u2014 "),VN=a("a"),b7o=o("QDQBertForMultipleChoice"),F7o=o(" (QDQBert model)"),v7o=l(),Mb=a("li"),xie=a("strong"),T7o=o("rembert"),M7o=o(" \u2014 "),XN=a("a"),E7o=o("RemBertForMultipleChoice"),C7o=o(" (RemBERT model)"),w7o=l(),Eb=a("li"),kie=a("strong"),A7o=o("roberta"),y7o=o(" \u2014 "),zN=a("a"),L7o=o("RobertaForMultipleChoice"),x7o=o(" (RoBERTa model)"),k7o=l(),Cb=a("li"),Sie=a("strong"),S7o=o("roformer"),R7o=o(" \u2014 "),QN=a("a"),B7o=o("RoFormerForMultipleChoice"),P7o=o(" (RoFormer model)"),$7o=l(),wb=a("li"),Rie=a("strong"),I7o=o("squeezebert"),q7o=o(" \u2014 "),WN=a("a"),N7o=o("SqueezeBertForMultipleChoice"),j7o=o(" (SqueezeBERT model)"),D7o=l(),Ab=a("li"),Bie=a("strong"),G7o=o("xlm"),O7o=o(" \u2014 "),HN=a("a"),V7o=o("XLMForMultipleChoice"),X7o=o(" (XLM model)"),z7o=l(),yb=a("li"),Pie=a("strong"),Q7o=o("xlm-roberta"),W7o=o(" \u2014 "),UN=a("a"),H7o=o("XLMRobertaForMultipleChoice"),U7o=o(" (XLM-RoBERTa model)"),J7o=l(),Lb=a("li"),$ie=a("strong"),Y7o=o("xlm-roberta-xl"),K7o=o(" \u2014 "),JN=a("a"),Z7o=o("XLMRobertaXLForMultipleChoice"),e9o=o(" (XLM-RoBERTa-XL model)"),o9o=l(),xb=a("li"),Iie=a("strong"),r9o=o("xlnet"),t9o=o(" \u2014 "),YN=a("a"),a9o=o("XLNetForMultipleChoice"),n9o=o(" (XLNet model)"),s9o=l(),kb=a("li"),qie=a("strong"),l9o=o("yoso"),i9o=o(" \u2014 "),KN=a("a"),d9o=o("YosoForMultipleChoice"),c9o=o(" (YOSO model)"),f9o=l(),Sb=a("p"),m9o=o("The model is set in evaluation mode by default using "),Nie=a("code"),g9o=o("model.eval()"),h9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=a("code"),p9o=o("model.train()"),_9o=l(),Die=a("p"),u9o=o("Examples:"),b9o=l(),f(Zw.$$.fragment),JRe=l(),ud=a("h2"),Rb=a("a"),Gie=a("span"),f(eA.$$.fragment),F9o=l(),Oie=a("span"),v9o=o("AutoModelForNextSentencePrediction"),YRe=l(),tr=a("div"),f(oA.$$.fragment),T9o=l(),bd=a("p"),M9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ZN=a("a"),E9o=o("from_pretrained()"),C9o=o(" class method or the "),ej=a("a"),w9o=o("from_config()"),A9o=o(` class
method.`),y9o=l(),rA=a("p"),L9o=o("This class cannot be instantiated directly using "),Vie=a("code"),x9o=o("__init__()"),k9o=o(" (throws an error)."),S9o=l(),Yr=a("div"),f(tA.$$.fragment),R9o=l(),Xie=a("p"),B9o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),P9o=l(),Fd=a("p"),$9o=o(`Note:
Loading a model from its configuration file does `),zie=a("strong"),I9o=o("not"),q9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oj=a("a"),N9o=o("from_pretrained()"),j9o=o(" to load the model weights."),D9o=l(),Qie=a("p"),G9o=o("Examples:"),O9o=l(),f(aA.$$.fragment),V9o=l(),Xe=a("div"),f(nA.$$.fragment),X9o=l(),Wie=a("p"),z9o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Q9o=l(),Ya=a("p"),W9o=o("The model class to instantiate is selected based on the "),Hie=a("code"),H9o=o("model_type"),U9o=o(` property of the config object (either
passed as an argument or loaded from `),Uie=a("code"),J9o=o("pretrained_model_name_or_path"),Y9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=a("code"),K9o=o("pretrained_model_name_or_path"),Z9o=o(":"),exo=l(),da=a("ul"),Bb=a("li"),Yie=a("strong"),oxo=o("bert"),rxo=o(" \u2014 "),rj=a("a"),txo=o("BertForNextSentencePrediction"),axo=o(" (BERT model)"),nxo=l(),Pb=a("li"),Kie=a("strong"),sxo=o("fnet"),lxo=o(" \u2014 "),tj=a("a"),ixo=o("FNetForNextSentencePrediction"),dxo=o(" (FNet model)"),cxo=l(),$b=a("li"),Zie=a("strong"),fxo=o("megatron-bert"),mxo=o(" \u2014 "),aj=a("a"),gxo=o("MegatronBertForNextSentencePrediction"),hxo=o(" (MegatronBert model)"),pxo=l(),Ib=a("li"),ede=a("strong"),_xo=o("mobilebert"),uxo=o(" \u2014 "),nj=a("a"),bxo=o("MobileBertForNextSentencePrediction"),Fxo=o(" (MobileBERT model)"),vxo=l(),qb=a("li"),ode=a("strong"),Txo=o("qdqbert"),Mxo=o(" \u2014 "),sj=a("a"),Exo=o("QDQBertForNextSentencePrediction"),Cxo=o(" (QDQBert model)"),wxo=l(),Nb=a("p"),Axo=o("The model is set in evaluation mode by default using "),rde=a("code"),yxo=o("model.eval()"),Lxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tde=a("code"),xxo=o("model.train()"),kxo=l(),ade=a("p"),Sxo=o("Examples:"),Rxo=l(),f(sA.$$.fragment),KRe=l(),vd=a("h2"),jb=a("a"),nde=a("span"),f(lA.$$.fragment),Bxo=l(),sde=a("span"),Pxo=o("AutoModelForTokenClassification"),ZRe=l(),ar=a("div"),f(iA.$$.fragment),$xo=l(),Td=a("p"),Ixo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lj=a("a"),qxo=o("from_pretrained()"),Nxo=o(" class method or the "),ij=a("a"),jxo=o("from_config()"),Dxo=o(` class
method.`),Gxo=l(),dA=a("p"),Oxo=o("This class cannot be instantiated directly using "),lde=a("code"),Vxo=o("__init__()"),Xxo=o(" (throws an error)."),zxo=l(),Kr=a("div"),f(cA.$$.fragment),Qxo=l(),ide=a("p"),Wxo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Hxo=l(),Md=a("p"),Uxo=o(`Note:
Loading a model from its configuration file does `),dde=a("strong"),Jxo=o("not"),Yxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dj=a("a"),Kxo=o("from_pretrained()"),Zxo=o(" to load the model weights."),eko=l(),cde=a("p"),oko=o("Examples:"),rko=l(),f(fA.$$.fragment),tko=l(),ze=a("div"),f(mA.$$.fragment),ako=l(),fde=a("p"),nko=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sko=l(),Ka=a("p"),lko=o("The model class to instantiate is selected based on the "),mde=a("code"),iko=o("model_type"),dko=o(` property of the config object (either
passed as an argument or loaded from `),gde=a("code"),cko=o("pretrained_model_name_or_path"),fko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hde=a("code"),mko=o("pretrained_model_name_or_path"),gko=o(":"),hko=l(),j=a("ul"),Db=a("li"),pde=a("strong"),pko=o("albert"),_ko=o(" \u2014 "),cj=a("a"),uko=o("AlbertForTokenClassification"),bko=o(" (ALBERT model)"),Fko=l(),Gb=a("li"),_de=a("strong"),vko=o("bert"),Tko=o(" \u2014 "),fj=a("a"),Mko=o("BertForTokenClassification"),Eko=o(" (BERT model)"),Cko=l(),Ob=a("li"),ude=a("strong"),wko=o("big_bird"),Ako=o(" \u2014 "),mj=a("a"),yko=o("BigBirdForTokenClassification"),Lko=o(" (BigBird model)"),xko=l(),Vb=a("li"),bde=a("strong"),kko=o("camembert"),Sko=o(" \u2014 "),gj=a("a"),Rko=o("CamembertForTokenClassification"),Bko=o(" (CamemBERT model)"),Pko=l(),Xb=a("li"),Fde=a("strong"),$ko=o("canine"),Iko=o(" \u2014 "),hj=a("a"),qko=o("CanineForTokenClassification"),Nko=o(" (Canine model)"),jko=l(),zb=a("li"),vde=a("strong"),Dko=o("convbert"),Gko=o(" \u2014 "),pj=a("a"),Oko=o("ConvBertForTokenClassification"),Vko=o(" (ConvBERT model)"),Xko=l(),Qb=a("li"),Tde=a("strong"),zko=o("data2vec-text"),Qko=o(" \u2014 "),_j=a("a"),Wko=o("Data2VecTextForTokenClassification"),Hko=o(" (Data2VecText model)"),Uko=l(),Wb=a("li"),Mde=a("strong"),Jko=o("deberta"),Yko=o(" \u2014 "),uj=a("a"),Kko=o("DebertaForTokenClassification"),Zko=o(" (DeBERTa model)"),eSo=l(),Hb=a("li"),Ede=a("strong"),oSo=o("deberta-v2"),rSo=o(" \u2014 "),bj=a("a"),tSo=o("DebertaV2ForTokenClassification"),aSo=o(" (DeBERTa-v2 model)"),nSo=l(),Ub=a("li"),Cde=a("strong"),sSo=o("distilbert"),lSo=o(" \u2014 "),Fj=a("a"),iSo=o("DistilBertForTokenClassification"),dSo=o(" (DistilBERT model)"),cSo=l(),Jb=a("li"),wde=a("strong"),fSo=o("electra"),mSo=o(" \u2014 "),vj=a("a"),gSo=o("ElectraForTokenClassification"),hSo=o(" (ELECTRA model)"),pSo=l(),Yb=a("li"),Ade=a("strong"),_So=o("flaubert"),uSo=o(" \u2014 "),Tj=a("a"),bSo=o("FlaubertForTokenClassification"),FSo=o(" (FlauBERT model)"),vSo=l(),Kb=a("li"),yde=a("strong"),TSo=o("fnet"),MSo=o(" \u2014 "),Mj=a("a"),ESo=o("FNetForTokenClassification"),CSo=o(" (FNet model)"),wSo=l(),Zb=a("li"),Lde=a("strong"),ASo=o("funnel"),ySo=o(" \u2014 "),Ej=a("a"),LSo=o("FunnelForTokenClassification"),xSo=o(" (Funnel Transformer model)"),kSo=l(),e5=a("li"),xde=a("strong"),SSo=o("gpt2"),RSo=o(" \u2014 "),Cj=a("a"),BSo=o("GPT2ForTokenClassification"),PSo=o(" (OpenAI GPT-2 model)"),$So=l(),o5=a("li"),kde=a("strong"),ISo=o("ibert"),qSo=o(" \u2014 "),wj=a("a"),NSo=o("IBertForTokenClassification"),jSo=o(" (I-BERT model)"),DSo=l(),r5=a("li"),Sde=a("strong"),GSo=o("layoutlm"),OSo=o(" \u2014 "),Aj=a("a"),VSo=o("LayoutLMForTokenClassification"),XSo=o(" (LayoutLM model)"),zSo=l(),t5=a("li"),Rde=a("strong"),QSo=o("layoutlmv2"),WSo=o(" \u2014 "),yj=a("a"),HSo=o("LayoutLMv2ForTokenClassification"),USo=o(" (LayoutLMv2 model)"),JSo=l(),a5=a("li"),Bde=a("strong"),YSo=o("longformer"),KSo=o(" \u2014 "),Lj=a("a"),ZSo=o("LongformerForTokenClassification"),eRo=o(" (Longformer model)"),oRo=l(),n5=a("li"),Pde=a("strong"),rRo=o("megatron-bert"),tRo=o(" \u2014 "),xj=a("a"),aRo=o("MegatronBertForTokenClassification"),nRo=o(" (MegatronBert model)"),sRo=l(),s5=a("li"),$de=a("strong"),lRo=o("mobilebert"),iRo=o(" \u2014 "),kj=a("a"),dRo=o("MobileBertForTokenClassification"),cRo=o(" (MobileBERT model)"),fRo=l(),l5=a("li"),Ide=a("strong"),mRo=o("mpnet"),gRo=o(" \u2014 "),Sj=a("a"),hRo=o("MPNetForTokenClassification"),pRo=o(" (MPNet model)"),_Ro=l(),i5=a("li"),qde=a("strong"),uRo=o("nystromformer"),bRo=o(" \u2014 "),Rj=a("a"),FRo=o("NystromformerForTokenClassification"),vRo=o(" (Nystromformer model)"),TRo=l(),d5=a("li"),Nde=a("strong"),MRo=o("qdqbert"),ERo=o(" \u2014 "),Bj=a("a"),CRo=o("QDQBertForTokenClassification"),wRo=o(" (QDQBert model)"),ARo=l(),c5=a("li"),jde=a("strong"),yRo=o("rembert"),LRo=o(" \u2014 "),Pj=a("a"),xRo=o("RemBertForTokenClassification"),kRo=o(" (RemBERT model)"),SRo=l(),f5=a("li"),Dde=a("strong"),RRo=o("roberta"),BRo=o(" \u2014 "),$j=a("a"),PRo=o("RobertaForTokenClassification"),$Ro=o(" (RoBERTa model)"),IRo=l(),m5=a("li"),Gde=a("strong"),qRo=o("roformer"),NRo=o(" \u2014 "),Ij=a("a"),jRo=o("RoFormerForTokenClassification"),DRo=o(" (RoFormer model)"),GRo=l(),g5=a("li"),Ode=a("strong"),ORo=o("squeezebert"),VRo=o(" \u2014 "),qj=a("a"),XRo=o("SqueezeBertForTokenClassification"),zRo=o(" (SqueezeBERT model)"),QRo=l(),h5=a("li"),Vde=a("strong"),WRo=o("xlm"),HRo=o(" \u2014 "),Nj=a("a"),URo=o("XLMForTokenClassification"),JRo=o(" (XLM model)"),YRo=l(),p5=a("li"),Xde=a("strong"),KRo=o("xlm-roberta"),ZRo=o(" \u2014 "),jj=a("a"),eBo=o("XLMRobertaForTokenClassification"),oBo=o(" (XLM-RoBERTa model)"),rBo=l(),_5=a("li"),zde=a("strong"),tBo=o("xlm-roberta-xl"),aBo=o(" \u2014 "),Dj=a("a"),nBo=o("XLMRobertaXLForTokenClassification"),sBo=o(" (XLM-RoBERTa-XL model)"),lBo=l(),u5=a("li"),Qde=a("strong"),iBo=o("xlnet"),dBo=o(" \u2014 "),Gj=a("a"),cBo=o("XLNetForTokenClassification"),fBo=o(" (XLNet model)"),mBo=l(),b5=a("li"),Wde=a("strong"),gBo=o("yoso"),hBo=o(" \u2014 "),Oj=a("a"),pBo=o("YosoForTokenClassification"),_Bo=o(" (YOSO model)"),uBo=l(),F5=a("p"),bBo=o("The model is set in evaluation mode by default using "),Hde=a("code"),FBo=o("model.eval()"),vBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ude=a("code"),TBo=o("model.train()"),MBo=l(),Jde=a("p"),EBo=o("Examples:"),CBo=l(),f(gA.$$.fragment),eBe=l(),Ed=a("h2"),v5=a("a"),Yde=a("span"),f(hA.$$.fragment),wBo=l(),Kde=a("span"),ABo=o("AutoModelForQuestionAnswering"),oBe=l(),nr=a("div"),f(pA.$$.fragment),yBo=l(),Cd=a("p"),LBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Vj=a("a"),xBo=o("from_pretrained()"),kBo=o(" class method or the "),Xj=a("a"),SBo=o("from_config()"),RBo=o(` class
method.`),BBo=l(),_A=a("p"),PBo=o("This class cannot be instantiated directly using "),Zde=a("code"),$Bo=o("__init__()"),IBo=o(" (throws an error)."),qBo=l(),Zr=a("div"),f(uA.$$.fragment),NBo=l(),ece=a("p"),jBo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),DBo=l(),wd=a("p"),GBo=o(`Note:
Loading a model from its configuration file does `),oce=a("strong"),OBo=o("not"),VBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zj=a("a"),XBo=o("from_pretrained()"),zBo=o(" to load the model weights."),QBo=l(),rce=a("p"),WBo=o("Examples:"),HBo=l(),f(bA.$$.fragment),UBo=l(),Qe=a("div"),f(FA.$$.fragment),JBo=l(),tce=a("p"),YBo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),KBo=l(),Za=a("p"),ZBo=o("The model class to instantiate is selected based on the "),ace=a("code"),ePo=o("model_type"),oPo=o(` property of the config object (either
passed as an argument or loaded from `),nce=a("code"),rPo=o("pretrained_model_name_or_path"),tPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=a("code"),aPo=o("pretrained_model_name_or_path"),nPo=o(":"),sPo=l(),R=a("ul"),T5=a("li"),lce=a("strong"),lPo=o("albert"),iPo=o(" \u2014 "),Qj=a("a"),dPo=o("AlbertForQuestionAnswering"),cPo=o(" (ALBERT model)"),fPo=l(),M5=a("li"),ice=a("strong"),mPo=o("bart"),gPo=o(" \u2014 "),Wj=a("a"),hPo=o("BartForQuestionAnswering"),pPo=o(" (BART model)"),_Po=l(),E5=a("li"),dce=a("strong"),uPo=o("bert"),bPo=o(" \u2014 "),Hj=a("a"),FPo=o("BertForQuestionAnswering"),vPo=o(" (BERT model)"),TPo=l(),C5=a("li"),cce=a("strong"),MPo=o("big_bird"),EPo=o(" \u2014 "),Uj=a("a"),CPo=o("BigBirdForQuestionAnswering"),wPo=o(" (BigBird model)"),APo=l(),w5=a("li"),fce=a("strong"),yPo=o("bigbird_pegasus"),LPo=o(" \u2014 "),Jj=a("a"),xPo=o("BigBirdPegasusForQuestionAnswering"),kPo=o(" (BigBirdPegasus model)"),SPo=l(),A5=a("li"),mce=a("strong"),RPo=o("camembert"),BPo=o(" \u2014 "),Yj=a("a"),PPo=o("CamembertForQuestionAnswering"),$Po=o(" (CamemBERT model)"),IPo=l(),y5=a("li"),gce=a("strong"),qPo=o("canine"),NPo=o(" \u2014 "),Kj=a("a"),jPo=o("CanineForQuestionAnswering"),DPo=o(" (Canine model)"),GPo=l(),L5=a("li"),hce=a("strong"),OPo=o("convbert"),VPo=o(" \u2014 "),Zj=a("a"),XPo=o("ConvBertForQuestionAnswering"),zPo=o(" (ConvBERT model)"),QPo=l(),x5=a("li"),pce=a("strong"),WPo=o("data2vec-text"),HPo=o(" \u2014 "),eD=a("a"),UPo=o("Data2VecTextForQuestionAnswering"),JPo=o(" (Data2VecText model)"),YPo=l(),k5=a("li"),_ce=a("strong"),KPo=o("deberta"),ZPo=o(" \u2014 "),oD=a("a"),e$o=o("DebertaForQuestionAnswering"),o$o=o(" (DeBERTa model)"),r$o=l(),S5=a("li"),uce=a("strong"),t$o=o("deberta-v2"),a$o=o(" \u2014 "),rD=a("a"),n$o=o("DebertaV2ForQuestionAnswering"),s$o=o(" (DeBERTa-v2 model)"),l$o=l(),R5=a("li"),bce=a("strong"),i$o=o("distilbert"),d$o=o(" \u2014 "),tD=a("a"),c$o=o("DistilBertForQuestionAnswering"),f$o=o(" (DistilBERT model)"),m$o=l(),B5=a("li"),Fce=a("strong"),g$o=o("electra"),h$o=o(" \u2014 "),aD=a("a"),p$o=o("ElectraForQuestionAnswering"),_$o=o(" (ELECTRA model)"),u$o=l(),P5=a("li"),vce=a("strong"),b$o=o("flaubert"),F$o=o(" \u2014 "),nD=a("a"),v$o=o("FlaubertForQuestionAnsweringSimple"),T$o=o(" (FlauBERT model)"),M$o=l(),$5=a("li"),Tce=a("strong"),E$o=o("fnet"),C$o=o(" \u2014 "),sD=a("a"),w$o=o("FNetForQuestionAnswering"),A$o=o(" (FNet model)"),y$o=l(),I5=a("li"),Mce=a("strong"),L$o=o("funnel"),x$o=o(" \u2014 "),lD=a("a"),k$o=o("FunnelForQuestionAnswering"),S$o=o(" (Funnel Transformer model)"),R$o=l(),q5=a("li"),Ece=a("strong"),B$o=o("gptj"),P$o=o(" \u2014 "),iD=a("a"),$$o=o("GPTJForQuestionAnswering"),I$o=o(" (GPT-J model)"),q$o=l(),N5=a("li"),Cce=a("strong"),N$o=o("ibert"),j$o=o(" \u2014 "),dD=a("a"),D$o=o("IBertForQuestionAnswering"),G$o=o(" (I-BERT model)"),O$o=l(),j5=a("li"),wce=a("strong"),V$o=o("layoutlmv2"),X$o=o(" \u2014 "),cD=a("a"),z$o=o("LayoutLMv2ForQuestionAnswering"),Q$o=o(" (LayoutLMv2 model)"),W$o=l(),D5=a("li"),Ace=a("strong"),H$o=o("led"),U$o=o(" \u2014 "),fD=a("a"),J$o=o("LEDForQuestionAnswering"),Y$o=o(" (LED model)"),K$o=l(),G5=a("li"),yce=a("strong"),Z$o=o("longformer"),eIo=o(" \u2014 "),mD=a("a"),oIo=o("LongformerForQuestionAnswering"),rIo=o(" (Longformer model)"),tIo=l(),O5=a("li"),Lce=a("strong"),aIo=o("lxmert"),nIo=o(" \u2014 "),gD=a("a"),sIo=o("LxmertForQuestionAnswering"),lIo=o(" (LXMERT model)"),iIo=l(),V5=a("li"),xce=a("strong"),dIo=o("mbart"),cIo=o(" \u2014 "),hD=a("a"),fIo=o("MBartForQuestionAnswering"),mIo=o(" (mBART model)"),gIo=l(),X5=a("li"),kce=a("strong"),hIo=o("megatron-bert"),pIo=o(" \u2014 "),pD=a("a"),_Io=o("MegatronBertForQuestionAnswering"),uIo=o(" (MegatronBert model)"),bIo=l(),z5=a("li"),Sce=a("strong"),FIo=o("mobilebert"),vIo=o(" \u2014 "),_D=a("a"),TIo=o("MobileBertForQuestionAnswering"),MIo=o(" (MobileBERT model)"),EIo=l(),Q5=a("li"),Rce=a("strong"),CIo=o("mpnet"),wIo=o(" \u2014 "),uD=a("a"),AIo=o("MPNetForQuestionAnswering"),yIo=o(" (MPNet model)"),LIo=l(),W5=a("li"),Bce=a("strong"),xIo=o("nystromformer"),kIo=o(" \u2014 "),bD=a("a"),SIo=o("NystromformerForQuestionAnswering"),RIo=o(" (Nystromformer model)"),BIo=l(),H5=a("li"),Pce=a("strong"),PIo=o("qdqbert"),$Io=o(" \u2014 "),FD=a("a"),IIo=o("QDQBertForQuestionAnswering"),qIo=o(" (QDQBert model)"),NIo=l(),U5=a("li"),$ce=a("strong"),jIo=o("reformer"),DIo=o(" \u2014 "),vD=a("a"),GIo=o("ReformerForQuestionAnswering"),OIo=o(" (Reformer model)"),VIo=l(),J5=a("li"),Ice=a("strong"),XIo=o("rembert"),zIo=o(" \u2014 "),TD=a("a"),QIo=o("RemBertForQuestionAnswering"),WIo=o(" (RemBERT model)"),HIo=l(),Y5=a("li"),qce=a("strong"),UIo=o("roberta"),JIo=o(" \u2014 "),MD=a("a"),YIo=o("RobertaForQuestionAnswering"),KIo=o(" (RoBERTa model)"),ZIo=l(),K5=a("li"),Nce=a("strong"),eqo=o("roformer"),oqo=o(" \u2014 "),ED=a("a"),rqo=o("RoFormerForQuestionAnswering"),tqo=o(" (RoFormer model)"),aqo=l(),Z5=a("li"),jce=a("strong"),nqo=o("splinter"),sqo=o(" \u2014 "),CD=a("a"),lqo=o("SplinterForQuestionAnswering"),iqo=o(" (Splinter model)"),dqo=l(),e3=a("li"),Dce=a("strong"),cqo=o("squeezebert"),fqo=o(" \u2014 "),wD=a("a"),mqo=o("SqueezeBertForQuestionAnswering"),gqo=o(" (SqueezeBERT model)"),hqo=l(),o3=a("li"),Gce=a("strong"),pqo=o("xlm"),_qo=o(" \u2014 "),AD=a("a"),uqo=o("XLMForQuestionAnsweringSimple"),bqo=o(" (XLM model)"),Fqo=l(),r3=a("li"),Oce=a("strong"),vqo=o("xlm-roberta"),Tqo=o(" \u2014 "),yD=a("a"),Mqo=o("XLMRobertaForQuestionAnswering"),Eqo=o(" (XLM-RoBERTa model)"),Cqo=l(),t3=a("li"),Vce=a("strong"),wqo=o("xlm-roberta-xl"),Aqo=o(" \u2014 "),LD=a("a"),yqo=o("XLMRobertaXLForQuestionAnswering"),Lqo=o(" (XLM-RoBERTa-XL model)"),xqo=l(),a3=a("li"),Xce=a("strong"),kqo=o("xlnet"),Sqo=o(" \u2014 "),xD=a("a"),Rqo=o("XLNetForQuestionAnsweringSimple"),Bqo=o(" (XLNet model)"),Pqo=l(),n3=a("li"),zce=a("strong"),$qo=o("yoso"),Iqo=o(" \u2014 "),kD=a("a"),qqo=o("YosoForQuestionAnswering"),Nqo=o(" (YOSO model)"),jqo=l(),s3=a("p"),Dqo=o("The model is set in evaluation mode by default using "),Qce=a("code"),Gqo=o("model.eval()"),Oqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wce=a("code"),Vqo=o("model.train()"),Xqo=l(),Hce=a("p"),zqo=o("Examples:"),Qqo=l(),f(vA.$$.fragment),rBe=l(),Ad=a("h2"),l3=a("a"),Uce=a("span"),f(TA.$$.fragment),Wqo=l(),Jce=a("span"),Hqo=o("AutoModelForTableQuestionAnswering"),tBe=l(),sr=a("div"),f(MA.$$.fragment),Uqo=l(),yd=a("p"),Jqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),SD=a("a"),Yqo=o("from_pretrained()"),Kqo=o(" class method or the "),RD=a("a"),Zqo=o("from_config()"),eNo=o(` class
method.`),oNo=l(),EA=a("p"),rNo=o("This class cannot be instantiated directly using "),Yce=a("code"),tNo=o("__init__()"),aNo=o(" (throws an error)."),nNo=l(),et=a("div"),f(CA.$$.fragment),sNo=l(),Kce=a("p"),lNo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iNo=l(),Ld=a("p"),dNo=o(`Note:
Loading a model from its configuration file does `),Zce=a("strong"),cNo=o("not"),fNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BD=a("a"),mNo=o("from_pretrained()"),gNo=o(" to load the model weights."),hNo=l(),efe=a("p"),pNo=o("Examples:"),_No=l(),f(wA.$$.fragment),uNo=l(),We=a("div"),f(AA.$$.fragment),bNo=l(),ofe=a("p"),FNo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),vNo=l(),en=a("p"),TNo=o("The model class to instantiate is selected based on the "),rfe=a("code"),MNo=o("model_type"),ENo=o(` property of the config object (either
passed as an argument or loaded from `),tfe=a("code"),CNo=o("pretrained_model_name_or_path"),wNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),afe=a("code"),ANo=o("pretrained_model_name_or_path"),yNo=o(":"),LNo=l(),nfe=a("ul"),i3=a("li"),sfe=a("strong"),xNo=o("tapas"),kNo=o(" \u2014 "),PD=a("a"),SNo=o("TapasForQuestionAnswering"),RNo=o(" (TAPAS model)"),BNo=l(),d3=a("p"),PNo=o("The model is set in evaluation mode by default using "),lfe=a("code"),$No=o("model.eval()"),INo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=a("code"),qNo=o("model.train()"),NNo=l(),dfe=a("p"),jNo=o("Examples:"),DNo=l(),f(yA.$$.fragment),aBe=l(),xd=a("h2"),c3=a("a"),cfe=a("span"),f(LA.$$.fragment),GNo=l(),ffe=a("span"),ONo=o("AutoModelForImageClassification"),nBe=l(),lr=a("div"),f(xA.$$.fragment),VNo=l(),kd=a("p"),XNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$D=a("a"),zNo=o("from_pretrained()"),QNo=o(" class method or the "),ID=a("a"),WNo=o("from_config()"),HNo=o(` class
method.`),UNo=l(),kA=a("p"),JNo=o("This class cannot be instantiated directly using "),mfe=a("code"),YNo=o("__init__()"),KNo=o(" (throws an error)."),ZNo=l(),ot=a("div"),f(SA.$$.fragment),ejo=l(),gfe=a("p"),ojo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rjo=l(),Sd=a("p"),tjo=o(`Note:
Loading a model from its configuration file does `),hfe=a("strong"),ajo=o("not"),njo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=a("a"),sjo=o("from_pretrained()"),ljo=o(" to load the model weights."),ijo=l(),pfe=a("p"),djo=o("Examples:"),cjo=l(),f(RA.$$.fragment),fjo=l(),He=a("div"),f(BA.$$.fragment),mjo=l(),_fe=a("p"),gjo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hjo=l(),on=a("p"),pjo=o("The model class to instantiate is selected based on the "),ufe=a("code"),_jo=o("model_type"),ujo=o(` property of the config object (either
passed as an argument or loaded from `),bfe=a("code"),bjo=o("pretrained_model_name_or_path"),Fjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ffe=a("code"),vjo=o("pretrained_model_name_or_path"),Tjo=o(":"),Mjo=l(),fe=a("ul"),f3=a("li"),vfe=a("strong"),Ejo=o("beit"),Cjo=o(" \u2014 "),ND=a("a"),wjo=o("BeitForImageClassification"),Ajo=o(" (BEiT model)"),yjo=l(),m3=a("li"),Tfe=a("strong"),Ljo=o("convnext"),xjo=o(" \u2014 "),jD=a("a"),kjo=o("ConvNextForImageClassification"),Sjo=o(" (ConvNext model)"),Rjo=l(),Ds=a("li"),Mfe=a("strong"),Bjo=o("deit"),Pjo=o(" \u2014 "),DD=a("a"),$jo=o("DeiTForImageClassification"),Ijo=o(" or "),GD=a("a"),qjo=o("DeiTForImageClassificationWithTeacher"),Njo=o(" (DeiT model)"),jjo=l(),g3=a("li"),Efe=a("strong"),Djo=o("imagegpt"),Gjo=o(" \u2014 "),OD=a("a"),Ojo=o("ImageGPTForImageClassification"),Vjo=o(" (ImageGPT model)"),Xjo=l(),ma=a("li"),Cfe=a("strong"),zjo=o("perceiver"),Qjo=o(" \u2014 "),VD=a("a"),Wjo=o("PerceiverForImageClassificationLearned"),Hjo=o(" or "),XD=a("a"),Ujo=o("PerceiverForImageClassificationFourier"),Jjo=o(" or "),zD=a("a"),Yjo=o("PerceiverForImageClassificationConvProcessing"),Kjo=o(" (Perceiver model)"),Zjo=l(),h3=a("li"),wfe=a("strong"),eDo=o("poolformer"),oDo=o(" \u2014 "),QD=a("a"),rDo=o("PoolFormerForImageClassification"),tDo=o(" (PoolFormer model)"),aDo=l(),p3=a("li"),Afe=a("strong"),nDo=o("regnet"),sDo=o(" \u2014 "),WD=a("a"),lDo=o("RegNetForImageClassification"),iDo=o(" (RegNet model)"),dDo=l(),_3=a("li"),yfe=a("strong"),cDo=o("resnet"),fDo=o(" \u2014 "),HD=a("a"),mDo=o("ResNetForImageClassification"),gDo=o(" (ResNet model)"),hDo=l(),u3=a("li"),Lfe=a("strong"),pDo=o("segformer"),_Do=o(" \u2014 "),UD=a("a"),uDo=o("SegformerForImageClassification"),bDo=o(" (SegFormer model)"),FDo=l(),b3=a("li"),xfe=a("strong"),vDo=o("swin"),TDo=o(" \u2014 "),JD=a("a"),MDo=o("SwinForImageClassification"),EDo=o(" (Swin model)"),CDo=l(),F3=a("li"),kfe=a("strong"),wDo=o("van"),ADo=o(" \u2014 "),YD=a("a"),yDo=o("VanForImageClassification"),LDo=o(" (VAN model)"),xDo=l(),v3=a("li"),Sfe=a("strong"),kDo=o("vit"),SDo=o(" \u2014 "),KD=a("a"),RDo=o("ViTForImageClassification"),BDo=o(" (ViT model)"),PDo=l(),T3=a("p"),$Do=o("The model is set in evaluation mode by default using "),Rfe=a("code"),IDo=o("model.eval()"),qDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bfe=a("code"),NDo=o("model.train()"),jDo=l(),Pfe=a("p"),DDo=o("Examples:"),GDo=l(),f(PA.$$.fragment),sBe=l(),Rd=a("h2"),M3=a("a"),$fe=a("span"),f($A.$$.fragment),ODo=l(),Ife=a("span"),VDo=o("AutoModelForVision2Seq"),lBe=l(),ir=a("div"),f(IA.$$.fragment),XDo=l(),Bd=a("p"),zDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ZD=a("a"),QDo=o("from_pretrained()"),WDo=o(" class method or the "),eG=a("a"),HDo=o("from_config()"),UDo=o(` class
method.`),JDo=l(),qA=a("p"),YDo=o("This class cannot be instantiated directly using "),qfe=a("code"),KDo=o("__init__()"),ZDo=o(" (throws an error)."),eGo=l(),rt=a("div"),f(NA.$$.fragment),oGo=l(),Nfe=a("p"),rGo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tGo=l(),Pd=a("p"),aGo=o(`Note:
Loading a model from its configuration file does `),jfe=a("strong"),nGo=o("not"),sGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oG=a("a"),lGo=o("from_pretrained()"),iGo=o(" to load the model weights."),dGo=l(),Dfe=a("p"),cGo=o("Examples:"),fGo=l(),f(jA.$$.fragment),mGo=l(),Ue=a("div"),f(DA.$$.fragment),gGo=l(),Gfe=a("p"),hGo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),pGo=l(),rn=a("p"),_Go=o("The model class to instantiate is selected based on the "),Ofe=a("code"),uGo=o("model_type"),bGo=o(` property of the config object (either
passed as an argument or loaded from `),Vfe=a("code"),FGo=o("pretrained_model_name_or_path"),vGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xfe=a("code"),TGo=o("pretrained_model_name_or_path"),MGo=o(":"),EGo=l(),zfe=a("ul"),E3=a("li"),Qfe=a("strong"),CGo=o("vision-encoder-decoder"),wGo=o(" \u2014 "),rG=a("a"),AGo=o("VisionEncoderDecoderModel"),yGo=o(" (Vision Encoder decoder model)"),LGo=l(),C3=a("p"),xGo=o("The model is set in evaluation mode by default using "),Wfe=a("code"),kGo=o("model.eval()"),SGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hfe=a("code"),RGo=o("model.train()"),BGo=l(),Ufe=a("p"),PGo=o("Examples:"),$Go=l(),f(GA.$$.fragment),iBe=l(),$d=a("h2"),w3=a("a"),Jfe=a("span"),f(OA.$$.fragment),IGo=l(),Yfe=a("span"),qGo=o("AutoModelForAudioClassification"),dBe=l(),dr=a("div"),f(VA.$$.fragment),NGo=l(),Id=a("p"),jGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),tG=a("a"),DGo=o("from_pretrained()"),GGo=o(" class method or the "),aG=a("a"),OGo=o("from_config()"),VGo=o(` class
method.`),XGo=l(),XA=a("p"),zGo=o("This class cannot be instantiated directly using "),Kfe=a("code"),QGo=o("__init__()"),WGo=o(" (throws an error)."),HGo=l(),tt=a("div"),f(zA.$$.fragment),UGo=l(),Zfe=a("p"),JGo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),YGo=l(),qd=a("p"),KGo=o(`Note:
Loading a model from its configuration file does `),eme=a("strong"),ZGo=o("not"),eOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=a("a"),oOo=o("from_pretrained()"),rOo=o(" to load the model weights."),tOo=l(),ome=a("p"),aOo=o("Examples:"),nOo=l(),f(QA.$$.fragment),sOo=l(),Je=a("div"),f(WA.$$.fragment),lOo=l(),rme=a("p"),iOo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),dOo=l(),tn=a("p"),cOo=o("The model class to instantiate is selected based on the "),tme=a("code"),fOo=o("model_type"),mOo=o(` property of the config object (either
passed as an argument or loaded from `),ame=a("code"),gOo=o("pretrained_model_name_or_path"),hOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nme=a("code"),pOo=o("pretrained_model_name_or_path"),_Oo=o(":"),uOo=l(),Se=a("ul"),A3=a("li"),sme=a("strong"),bOo=o("data2vec-audio"),FOo=o(" \u2014 "),sG=a("a"),vOo=o("Data2VecAudioForSequenceClassification"),TOo=o(" (Data2VecAudio model)"),MOo=l(),y3=a("li"),lme=a("strong"),EOo=o("hubert"),COo=o(" \u2014 "),lG=a("a"),wOo=o("HubertForSequenceClassification"),AOo=o(" (Hubert model)"),yOo=l(),L3=a("li"),ime=a("strong"),LOo=o("sew"),xOo=o(" \u2014 "),iG=a("a"),kOo=o("SEWForSequenceClassification"),SOo=o(" (SEW model)"),ROo=l(),x3=a("li"),dme=a("strong"),BOo=o("sew-d"),POo=o(" \u2014 "),dG=a("a"),$Oo=o("SEWDForSequenceClassification"),IOo=o(" (SEW-D model)"),qOo=l(),k3=a("li"),cme=a("strong"),NOo=o("unispeech"),jOo=o(" \u2014 "),cG=a("a"),DOo=o("UniSpeechForSequenceClassification"),GOo=o(" (UniSpeech model)"),OOo=l(),S3=a("li"),fme=a("strong"),VOo=o("unispeech-sat"),XOo=o(" \u2014 "),fG=a("a"),zOo=o("UniSpeechSatForSequenceClassification"),QOo=o(" (UniSpeechSat model)"),WOo=l(),R3=a("li"),mme=a("strong"),HOo=o("wav2vec2"),UOo=o(" \u2014 "),mG=a("a"),JOo=o("Wav2Vec2ForSequenceClassification"),YOo=o(" (Wav2Vec2 model)"),KOo=l(),B3=a("li"),gme=a("strong"),ZOo=o("wavlm"),eVo=o(" \u2014 "),gG=a("a"),oVo=o("WavLMForSequenceClassification"),rVo=o(" (WavLM model)"),tVo=l(),P3=a("p"),aVo=o("The model is set in evaluation mode by default using "),hme=a("code"),nVo=o("model.eval()"),sVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pme=a("code"),lVo=o("model.train()"),iVo=l(),_me=a("p"),dVo=o("Examples:"),cVo=l(),f(HA.$$.fragment),cBe=l(),Nd=a("h2"),$3=a("a"),ume=a("span"),f(UA.$$.fragment),fVo=l(),bme=a("span"),mVo=o("AutoModelForAudioFrameClassification"),fBe=l(),cr=a("div"),f(JA.$$.fragment),gVo=l(),jd=a("p"),hVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),hG=a("a"),pVo=o("from_pretrained()"),_Vo=o(" class method or the "),pG=a("a"),uVo=o("from_config()"),bVo=o(` class
method.`),FVo=l(),YA=a("p"),vVo=o("This class cannot be instantiated directly using "),Fme=a("code"),TVo=o("__init__()"),MVo=o(" (throws an error)."),EVo=l(),at=a("div"),f(KA.$$.fragment),CVo=l(),vme=a("p"),wVo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),AVo=l(),Dd=a("p"),yVo=o(`Note:
Loading a model from its configuration file does `),Tme=a("strong"),LVo=o("not"),xVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_G=a("a"),kVo=o("from_pretrained()"),SVo=o(" to load the model weights."),RVo=l(),Mme=a("p"),BVo=o("Examples:"),PVo=l(),f(ZA.$$.fragment),$Vo=l(),Ye=a("div"),f(e0.$$.fragment),IVo=l(),Eme=a("p"),qVo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),NVo=l(),an=a("p"),jVo=o("The model class to instantiate is selected based on the "),Cme=a("code"),DVo=o("model_type"),GVo=o(` property of the config object (either
passed as an argument or loaded from `),wme=a("code"),OVo=o("pretrained_model_name_or_path"),VVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=a("code"),XVo=o("pretrained_model_name_or_path"),zVo=o(":"),QVo=l(),nn=a("ul"),I3=a("li"),yme=a("strong"),WVo=o("data2vec-audio"),HVo=o(" \u2014 "),uG=a("a"),UVo=o("Data2VecAudioForAudioFrameClassification"),JVo=o(" (Data2VecAudio model)"),YVo=l(),q3=a("li"),Lme=a("strong"),KVo=o("unispeech-sat"),ZVo=o(" \u2014 "),bG=a("a"),eXo=o("UniSpeechSatForAudioFrameClassification"),oXo=o(" (UniSpeechSat model)"),rXo=l(),N3=a("li"),xme=a("strong"),tXo=o("wav2vec2"),aXo=o(" \u2014 "),FG=a("a"),nXo=o("Wav2Vec2ForAudioFrameClassification"),sXo=o(" (Wav2Vec2 model)"),lXo=l(),j3=a("li"),kme=a("strong"),iXo=o("wavlm"),dXo=o(" \u2014 "),vG=a("a"),cXo=o("WavLMForAudioFrameClassification"),fXo=o(" (WavLM model)"),mXo=l(),D3=a("p"),gXo=o("The model is set in evaluation mode by default using "),Sme=a("code"),hXo=o("model.eval()"),pXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rme=a("code"),_Xo=o("model.train()"),uXo=l(),Bme=a("p"),bXo=o("Examples:"),FXo=l(),f(o0.$$.fragment),mBe=l(),Gd=a("h2"),G3=a("a"),Pme=a("span"),f(r0.$$.fragment),vXo=l(),$me=a("span"),TXo=o("AutoModelForCTC"),gBe=l(),fr=a("div"),f(t0.$$.fragment),MXo=l(),Od=a("p"),EXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),TG=a("a"),CXo=o("from_pretrained()"),wXo=o(" class method or the "),MG=a("a"),AXo=o("from_config()"),yXo=o(` class
method.`),LXo=l(),a0=a("p"),xXo=o("This class cannot be instantiated directly using "),Ime=a("code"),kXo=o("__init__()"),SXo=o(" (throws an error)."),RXo=l(),nt=a("div"),f(n0.$$.fragment),BXo=l(),qme=a("p"),PXo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),$Xo=l(),Vd=a("p"),IXo=o(`Note:
Loading a model from its configuration file does `),Nme=a("strong"),qXo=o("not"),NXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EG=a("a"),jXo=o("from_pretrained()"),DXo=o(" to load the model weights."),GXo=l(),jme=a("p"),OXo=o("Examples:"),VXo=l(),f(s0.$$.fragment),XXo=l(),Ke=a("div"),f(l0.$$.fragment),zXo=l(),Dme=a("p"),QXo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),WXo=l(),sn=a("p"),HXo=o("The model class to instantiate is selected based on the "),Gme=a("code"),UXo=o("model_type"),JXo=o(` property of the config object (either
passed as an argument or loaded from `),Ome=a("code"),YXo=o("pretrained_model_name_or_path"),KXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vme=a("code"),ZXo=o("pretrained_model_name_or_path"),ezo=o(":"),ozo=l(),Re=a("ul"),O3=a("li"),Xme=a("strong"),rzo=o("data2vec-audio"),tzo=o(" \u2014 "),CG=a("a"),azo=o("Data2VecAudioForCTC"),nzo=o(" (Data2VecAudio model)"),szo=l(),V3=a("li"),zme=a("strong"),lzo=o("hubert"),izo=o(" \u2014 "),wG=a("a"),dzo=o("HubertForCTC"),czo=o(" (Hubert model)"),fzo=l(),X3=a("li"),Qme=a("strong"),mzo=o("sew"),gzo=o(" \u2014 "),AG=a("a"),hzo=o("SEWForCTC"),pzo=o(" (SEW model)"),_zo=l(),z3=a("li"),Wme=a("strong"),uzo=o("sew-d"),bzo=o(" \u2014 "),yG=a("a"),Fzo=o("SEWDForCTC"),vzo=o(" (SEW-D model)"),Tzo=l(),Q3=a("li"),Hme=a("strong"),Mzo=o("unispeech"),Ezo=o(" \u2014 "),LG=a("a"),Czo=o("UniSpeechForCTC"),wzo=o(" (UniSpeech model)"),Azo=l(),W3=a("li"),Ume=a("strong"),yzo=o("unispeech-sat"),Lzo=o(" \u2014 "),xG=a("a"),xzo=o("UniSpeechSatForCTC"),kzo=o(" (UniSpeechSat model)"),Szo=l(),H3=a("li"),Jme=a("strong"),Rzo=o("wav2vec2"),Bzo=o(" \u2014 "),kG=a("a"),Pzo=o("Wav2Vec2ForCTC"),$zo=o(" (Wav2Vec2 model)"),Izo=l(),U3=a("li"),Yme=a("strong"),qzo=o("wavlm"),Nzo=o(" \u2014 "),SG=a("a"),jzo=o("WavLMForCTC"),Dzo=o(" (WavLM model)"),Gzo=l(),J3=a("p"),Ozo=o("The model is set in evaluation mode by default using "),Kme=a("code"),Vzo=o("model.eval()"),Xzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zme=a("code"),zzo=o("model.train()"),Qzo=l(),ege=a("p"),Wzo=o("Examples:"),Hzo=l(),f(i0.$$.fragment),hBe=l(),Xd=a("h2"),Y3=a("a"),oge=a("span"),f(d0.$$.fragment),Uzo=l(),rge=a("span"),Jzo=o("AutoModelForSpeechSeq2Seq"),pBe=l(),mr=a("div"),f(c0.$$.fragment),Yzo=l(),zd=a("p"),Kzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),RG=a("a"),Zzo=o("from_pretrained()"),eQo=o(" class method or the "),BG=a("a"),oQo=o("from_config()"),rQo=o(` class
method.`),tQo=l(),f0=a("p"),aQo=o("This class cannot be instantiated directly using "),tge=a("code"),nQo=o("__init__()"),sQo=o(" (throws an error)."),lQo=l(),st=a("div"),f(m0.$$.fragment),iQo=l(),age=a("p"),dQo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),cQo=l(),Qd=a("p"),fQo=o(`Note:
Loading a model from its configuration file does `),nge=a("strong"),mQo=o("not"),gQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=a("a"),hQo=o("from_pretrained()"),pQo=o(" to load the model weights."),_Qo=l(),sge=a("p"),uQo=o("Examples:"),bQo=l(),f(g0.$$.fragment),FQo=l(),Ze=a("div"),f(h0.$$.fragment),vQo=l(),lge=a("p"),TQo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),MQo=l(),ln=a("p"),EQo=o("The model class to instantiate is selected based on the "),ige=a("code"),CQo=o("model_type"),wQo=o(` property of the config object (either
passed as an argument or loaded from `),dge=a("code"),AQo=o("pretrained_model_name_or_path"),yQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=a("code"),LQo=o("pretrained_model_name_or_path"),xQo=o(":"),kQo=l(),p0=a("ul"),K3=a("li"),fge=a("strong"),SQo=o("speech-encoder-decoder"),RQo=o(" \u2014 "),$G=a("a"),BQo=o("SpeechEncoderDecoderModel"),PQo=o(" (Speech Encoder decoder model)"),$Qo=l(),Z3=a("li"),mge=a("strong"),IQo=o("speech_to_text"),qQo=o(" \u2014 "),IG=a("a"),NQo=o("Speech2TextForConditionalGeneration"),jQo=o(" (Speech2Text model)"),DQo=l(),e2=a("p"),GQo=o("The model is set in evaluation mode by default using "),gge=a("code"),OQo=o("model.eval()"),VQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=a("code"),XQo=o("model.train()"),zQo=l(),pge=a("p"),QQo=o("Examples:"),WQo=l(),f(_0.$$.fragment),_Be=l(),Wd=a("h2"),o2=a("a"),_ge=a("span"),f(u0.$$.fragment),HQo=l(),uge=a("span"),UQo=o("AutoModelForAudioXVector"),uBe=l(),gr=a("div"),f(b0.$$.fragment),JQo=l(),Hd=a("p"),YQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),qG=a("a"),KQo=o("from_pretrained()"),ZQo=o(" class method or the "),NG=a("a"),eWo=o("from_config()"),oWo=o(` class
method.`),rWo=l(),F0=a("p"),tWo=o("This class cannot be instantiated directly using "),bge=a("code"),aWo=o("__init__()"),nWo=o(" (throws an error)."),sWo=l(),lt=a("div"),f(v0.$$.fragment),lWo=l(),Fge=a("p"),iWo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),dWo=l(),Ud=a("p"),cWo=o(`Note:
Loading a model from its configuration file does `),vge=a("strong"),fWo=o("not"),mWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jG=a("a"),gWo=o("from_pretrained()"),hWo=o(" to load the model weights."),pWo=l(),Tge=a("p"),_Wo=o("Examples:"),uWo=l(),f(T0.$$.fragment),bWo=l(),eo=a("div"),f(M0.$$.fragment),FWo=l(),Mge=a("p"),vWo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),TWo=l(),dn=a("p"),MWo=o("The model class to instantiate is selected based on the "),Ege=a("code"),EWo=o("model_type"),CWo=o(` property of the config object (either
passed as an argument or loaded from `),Cge=a("code"),wWo=o("pretrained_model_name_or_path"),AWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wge=a("code"),yWo=o("pretrained_model_name_or_path"),LWo=o(":"),xWo=l(),cn=a("ul"),r2=a("li"),Age=a("strong"),kWo=o("data2vec-audio"),SWo=o(" \u2014 "),DG=a("a"),RWo=o("Data2VecAudioForXVector"),BWo=o(" (Data2VecAudio model)"),PWo=l(),t2=a("li"),yge=a("strong"),$Wo=o("unispeech-sat"),IWo=o(" \u2014 "),GG=a("a"),qWo=o("UniSpeechSatForXVector"),NWo=o(" (UniSpeechSat model)"),jWo=l(),a2=a("li"),Lge=a("strong"),DWo=o("wav2vec2"),GWo=o(" \u2014 "),OG=a("a"),OWo=o("Wav2Vec2ForXVector"),VWo=o(" (Wav2Vec2 model)"),XWo=l(),n2=a("li"),xge=a("strong"),zWo=o("wavlm"),QWo=o(" \u2014 "),VG=a("a"),WWo=o("WavLMForXVector"),HWo=o(" (WavLM model)"),UWo=l(),s2=a("p"),JWo=o("The model is set in evaluation mode by default using "),kge=a("code"),YWo=o("model.eval()"),KWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sge=a("code"),ZWo=o("model.train()"),eHo=l(),Rge=a("p"),oHo=o("Examples:"),rHo=l(),f(E0.$$.fragment),bBe=l(),Jd=a("h2"),l2=a("a"),Bge=a("span"),f(C0.$$.fragment),tHo=l(),Pge=a("span"),aHo=o("AutoModelForMaskedImageModeling"),FBe=l(),hr=a("div"),f(w0.$$.fragment),nHo=l(),Yd=a("p"),sHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),XG=a("a"),lHo=o("from_pretrained()"),iHo=o(" class method or the "),zG=a("a"),dHo=o("from_config()"),cHo=o(` class
method.`),fHo=l(),A0=a("p"),mHo=o("This class cannot be instantiated directly using "),$ge=a("code"),gHo=o("__init__()"),hHo=o(" (throws an error)."),pHo=l(),it=a("div"),f(y0.$$.fragment),_Ho=l(),Ige=a("p"),uHo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),bHo=l(),Kd=a("p"),FHo=o(`Note:
Loading a model from its configuration file does `),qge=a("strong"),vHo=o("not"),THo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=a("a"),MHo=o("from_pretrained()"),EHo=o(" to load the model weights."),CHo=l(),Nge=a("p"),wHo=o("Examples:"),AHo=l(),f(L0.$$.fragment),yHo=l(),oo=a("div"),f(x0.$$.fragment),LHo=l(),jge=a("p"),xHo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),kHo=l(),fn=a("p"),SHo=o("The model class to instantiate is selected based on the "),Dge=a("code"),RHo=o("model_type"),BHo=o(` property of the config object (either
passed as an argument or loaded from `),Gge=a("code"),PHo=o("pretrained_model_name_or_path"),$Ho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=a("code"),IHo=o("pretrained_model_name_or_path"),qHo=o(":"),NHo=l(),Zd=a("ul"),i2=a("li"),Vge=a("strong"),jHo=o("deit"),DHo=o(" \u2014 "),WG=a("a"),GHo=o("DeiTForMaskedImageModeling"),OHo=o(" (DeiT model)"),VHo=l(),d2=a("li"),Xge=a("strong"),XHo=o("swin"),zHo=o(" \u2014 "),HG=a("a"),QHo=o("SwinForMaskedImageModeling"),WHo=o(" (Swin model)"),HHo=l(),c2=a("li"),zge=a("strong"),UHo=o("vit"),JHo=o(" \u2014 "),UG=a("a"),YHo=o("ViTForMaskedImageModeling"),KHo=o(" (ViT model)"),ZHo=l(),f2=a("p"),eUo=o("The model is set in evaluation mode by default using "),Qge=a("code"),oUo=o("model.eval()"),rUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wge=a("code"),tUo=o("model.train()"),aUo=l(),Hge=a("p"),nUo=o("Examples:"),sUo=l(),f(k0.$$.fragment),vBe=l(),ec=a("h2"),m2=a("a"),Uge=a("span"),f(S0.$$.fragment),lUo=l(),Jge=a("span"),iUo=o("AutoModelForObjectDetection"),TBe=l(),pr=a("div"),f(R0.$$.fragment),dUo=l(),oc=a("p"),cUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),JG=a("a"),fUo=o("from_pretrained()"),mUo=o(" class method or the "),YG=a("a"),gUo=o("from_config()"),hUo=o(` class
method.`),pUo=l(),B0=a("p"),_Uo=o("This class cannot be instantiated directly using "),Yge=a("code"),uUo=o("__init__()"),bUo=o(" (throws an error)."),FUo=l(),dt=a("div"),f(P0.$$.fragment),vUo=l(),Kge=a("p"),TUo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),MUo=l(),rc=a("p"),EUo=o(`Note:
Loading a model from its configuration file does `),Zge=a("strong"),CUo=o("not"),wUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=a("a"),AUo=o("from_pretrained()"),yUo=o(" to load the model weights."),LUo=l(),ehe=a("p"),xUo=o("Examples:"),kUo=l(),f($0.$$.fragment),SUo=l(),ro=a("div"),f(I0.$$.fragment),RUo=l(),ohe=a("p"),BUo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),PUo=l(),mn=a("p"),$Uo=o("The model class to instantiate is selected based on the "),rhe=a("code"),IUo=o("model_type"),qUo=o(` property of the config object (either
passed as an argument or loaded from `),the=a("code"),NUo=o("pretrained_model_name_or_path"),jUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ahe=a("code"),DUo=o("pretrained_model_name_or_path"),GUo=o(":"),OUo=l(),nhe=a("ul"),g2=a("li"),she=a("strong"),VUo=o("detr"),XUo=o(" \u2014 "),ZG=a("a"),zUo=o("DetrForObjectDetection"),QUo=o(" (DETR model)"),WUo=l(),h2=a("p"),HUo=o("The model is set in evaluation mode by default using "),lhe=a("code"),UUo=o("model.eval()"),JUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ihe=a("code"),YUo=o("model.train()"),KUo=l(),dhe=a("p"),ZUo=o("Examples:"),eJo=l(),f(q0.$$.fragment),MBe=l(),tc=a("h2"),p2=a("a"),che=a("span"),f(N0.$$.fragment),oJo=l(),fhe=a("span"),rJo=o("AutoModelForImageSegmentation"),EBe=l(),_r=a("div"),f(j0.$$.fragment),tJo=l(),ac=a("p"),aJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),eO=a("a"),nJo=o("from_pretrained()"),sJo=o(" class method or the "),oO=a("a"),lJo=o("from_config()"),iJo=o(` class
method.`),dJo=l(),D0=a("p"),cJo=o("This class cannot be instantiated directly using "),mhe=a("code"),fJo=o("__init__()"),mJo=o(" (throws an error)."),gJo=l(),ct=a("div"),f(G0.$$.fragment),hJo=l(),ghe=a("p"),pJo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),_Jo=l(),nc=a("p"),uJo=o(`Note:
Loading a model from its configuration file does `),hhe=a("strong"),bJo=o("not"),FJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rO=a("a"),vJo=o("from_pretrained()"),TJo=o(" to load the model weights."),MJo=l(),phe=a("p"),EJo=o("Examples:"),CJo=l(),f(O0.$$.fragment),wJo=l(),to=a("div"),f(V0.$$.fragment),AJo=l(),_he=a("p"),yJo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),LJo=l(),gn=a("p"),xJo=o("The model class to instantiate is selected based on the "),uhe=a("code"),kJo=o("model_type"),SJo=o(` property of the config object (either
passed as an argument or loaded from `),bhe=a("code"),RJo=o("pretrained_model_name_or_path"),BJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=a("code"),PJo=o("pretrained_model_name_or_path"),$Jo=o(":"),IJo=l(),vhe=a("ul"),_2=a("li"),The=a("strong"),qJo=o("detr"),NJo=o(" \u2014 "),tO=a("a"),jJo=o("DetrForSegmentation"),DJo=o(" (DETR model)"),GJo=l(),u2=a("p"),OJo=o("The model is set in evaluation mode by default using "),Mhe=a("code"),VJo=o("model.eval()"),XJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ehe=a("code"),zJo=o("model.train()"),QJo=l(),Che=a("p"),WJo=o("Examples:"),HJo=l(),f(X0.$$.fragment),CBe=l(),sc=a("h2"),b2=a("a"),whe=a("span"),f(z0.$$.fragment),UJo=l(),Ahe=a("span"),JJo=o("AutoModelForSemanticSegmentation"),wBe=l(),ur=a("div"),f(Q0.$$.fragment),YJo=l(),lc=a("p"),KJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),aO=a("a"),ZJo=o("from_pretrained()"),eYo=o(" class method or the "),nO=a("a"),oYo=o("from_config()"),rYo=o(` class
method.`),tYo=l(),W0=a("p"),aYo=o("This class cannot be instantiated directly using "),yhe=a("code"),nYo=o("__init__()"),sYo=o(" (throws an error)."),lYo=l(),ft=a("div"),f(H0.$$.fragment),iYo=l(),Lhe=a("p"),dYo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),cYo=l(),ic=a("p"),fYo=o(`Note:
Loading a model from its configuration file does `),xhe=a("strong"),mYo=o("not"),gYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=a("a"),hYo=o("from_pretrained()"),pYo=o(" to load the model weights."),_Yo=l(),khe=a("p"),uYo=o("Examples:"),bYo=l(),f(U0.$$.fragment),FYo=l(),ao=a("div"),f(J0.$$.fragment),vYo=l(),She=a("p"),TYo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),MYo=l(),hn=a("p"),EYo=o("The model class to instantiate is selected based on the "),Rhe=a("code"),CYo=o("model_type"),wYo=o(` property of the config object (either
passed as an argument or loaded from `),Bhe=a("code"),AYo=o("pretrained_model_name_or_path"),yYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Phe=a("code"),LYo=o("pretrained_model_name_or_path"),xYo=o(":"),kYo=l(),dc=a("ul"),F2=a("li"),$he=a("strong"),SYo=o("beit"),RYo=o(" \u2014 "),lO=a("a"),BYo=o("BeitForSemanticSegmentation"),PYo=o(" (BEiT model)"),$Yo=l(),v2=a("li"),Ihe=a("strong"),IYo=o("dpt"),qYo=o(" \u2014 "),iO=a("a"),NYo=o("DPTForSemanticSegmentation"),jYo=o(" (DPT model)"),DYo=l(),T2=a("li"),qhe=a("strong"),GYo=o("segformer"),OYo=o(" \u2014 "),dO=a("a"),VYo=o("SegformerForSemanticSegmentation"),XYo=o(" (SegFormer model)"),zYo=l(),M2=a("p"),QYo=o("The model is set in evaluation mode by default using "),Nhe=a("code"),WYo=o("model.eval()"),HYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jhe=a("code"),UYo=o("model.train()"),JYo=l(),Dhe=a("p"),YYo=o("Examples:"),KYo=l(),f(Y0.$$.fragment),ABe=l(),cc=a("h2"),E2=a("a"),Ghe=a("span"),f(K0.$$.fragment),ZYo=l(),Ohe=a("span"),eKo=o("AutoModelForInstanceSegmentation"),yBe=l(),br=a("div"),f(Z0.$$.fragment),oKo=l(),fc=a("p"),rKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),cO=a("a"),tKo=o("from_pretrained()"),aKo=o(" class method or the "),fO=a("a"),nKo=o("from_config()"),sKo=o(` class
method.`),lKo=l(),ey=a("p"),iKo=o("This class cannot be instantiated directly using "),Vhe=a("code"),dKo=o("__init__()"),cKo=o(" (throws an error)."),fKo=l(),mt=a("div"),f(oy.$$.fragment),mKo=l(),Xhe=a("p"),gKo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),hKo=l(),mc=a("p"),pKo=o(`Note:
Loading a model from its configuration file does `),zhe=a("strong"),_Ko=o("not"),uKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=a("a"),bKo=o("from_pretrained()"),FKo=o(" to load the model weights."),vKo=l(),Qhe=a("p"),TKo=o("Examples:"),MKo=l(),f(ry.$$.fragment),EKo=l(),no=a("div"),f(ty.$$.fragment),CKo=l(),Whe=a("p"),wKo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),AKo=l(),pn=a("p"),yKo=o("The model class to instantiate is selected based on the "),Hhe=a("code"),LKo=o("model_type"),xKo=o(` property of the config object (either
passed as an argument or loaded from `),Uhe=a("code"),kKo=o("pretrained_model_name_or_path"),SKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=a("code"),RKo=o("pretrained_model_name_or_path"),BKo=o(":"),PKo=l(),Yhe=a("ul"),C2=a("li"),Khe=a("strong"),$Ko=o("maskformer"),IKo=o(" \u2014 "),gO=a("a"),qKo=o("MaskFormerForInstanceSegmentation"),NKo=o(" (MaskFormer model)"),jKo=l(),w2=a("p"),DKo=o("The model is set in evaluation mode by default using "),Zhe=a("code"),GKo=o("model.eval()"),OKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=a("code"),VKo=o("model.train()"),XKo=l(),ope=a("p"),zKo=o("Examples:"),QKo=l(),f(ay.$$.fragment),LBe=l(),gc=a("h2"),A2=a("a"),rpe=a("span"),f(ny.$$.fragment),WKo=l(),tpe=a("span"),HKo=o("TFAutoModel"),xBe=l(),Fr=a("div"),f(sy.$$.fragment),UKo=l(),hc=a("p"),JKo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hO=a("a"),YKo=o("from_pretrained()"),KKo=o(" class method or the "),pO=a("a"),ZKo=o("from_config()"),eZo=o(` class
method.`),oZo=l(),ly=a("p"),rZo=o("This class cannot be instantiated directly using "),ape=a("code"),tZo=o("__init__()"),aZo=o(" (throws an error)."),nZo=l(),gt=a("div"),f(iy.$$.fragment),sZo=l(),npe=a("p"),lZo=o("Instantiates one of the base model classes of the library from a configuration."),iZo=l(),pc=a("p"),dZo=o(`Note:
Loading a model from its configuration file does `),spe=a("strong"),cZo=o("not"),fZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_O=a("a"),mZo=o("from_pretrained()"),gZo=o(" to load the model weights."),hZo=l(),lpe=a("p"),pZo=o("Examples:"),_Zo=l(),f(dy.$$.fragment),uZo=l(),ho=a("div"),f(cy.$$.fragment),bZo=l(),ipe=a("p"),FZo=o("Instantiate one of the base model classes of the library from a pretrained model."),vZo=l(),_n=a("p"),TZo=o("The model class to instantiate is selected based on the "),dpe=a("code"),MZo=o("model_type"),EZo=o(` property of the config object (either
passed as an argument or loaded from `),cpe=a("code"),CZo=o("pretrained_model_name_or_path"),wZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=a("code"),AZo=o("pretrained_model_name_or_path"),yZo=o(":"),LZo=l(),x=a("ul"),y2=a("li"),mpe=a("strong"),xZo=o("albert"),kZo=o(" \u2014 "),uO=a("a"),SZo=o("TFAlbertModel"),RZo=o(" (ALBERT model)"),BZo=l(),L2=a("li"),gpe=a("strong"),PZo=o("bart"),$Zo=o(" \u2014 "),bO=a("a"),IZo=o("TFBartModel"),qZo=o(" (BART model)"),NZo=l(),x2=a("li"),hpe=a("strong"),jZo=o("bert"),DZo=o(" \u2014 "),FO=a("a"),GZo=o("TFBertModel"),OZo=o(" (BERT model)"),VZo=l(),k2=a("li"),ppe=a("strong"),XZo=o("blenderbot"),zZo=o(" \u2014 "),vO=a("a"),QZo=o("TFBlenderbotModel"),WZo=o(" (Blenderbot model)"),HZo=l(),S2=a("li"),_pe=a("strong"),UZo=o("blenderbot-small"),JZo=o(" \u2014 "),TO=a("a"),YZo=o("TFBlenderbotSmallModel"),KZo=o(" (BlenderbotSmall model)"),ZZo=l(),R2=a("li"),upe=a("strong"),eer=o("camembert"),oer=o(" \u2014 "),MO=a("a"),rer=o("TFCamembertModel"),ter=o(" (CamemBERT model)"),aer=l(),B2=a("li"),bpe=a("strong"),ner=o("clip"),ser=o(" \u2014 "),EO=a("a"),ler=o("TFCLIPModel"),ier=o(" (CLIP model)"),der=l(),P2=a("li"),Fpe=a("strong"),cer=o("convbert"),fer=o(" \u2014 "),CO=a("a"),mer=o("TFConvBertModel"),ger=o(" (ConvBERT model)"),her=l(),$2=a("li"),vpe=a("strong"),per=o("convnext"),_er=o(" \u2014 "),wO=a("a"),uer=o("TFConvNextModel"),ber=o(" (ConvNext model)"),Fer=l(),I2=a("li"),Tpe=a("strong"),ver=o("ctrl"),Ter=o(" \u2014 "),AO=a("a"),Mer=o("TFCTRLModel"),Eer=o(" (CTRL model)"),Cer=l(),q2=a("li"),Mpe=a("strong"),wer=o("deberta"),Aer=o(" \u2014 "),yO=a("a"),yer=o("TFDebertaModel"),Ler=o(" (DeBERTa model)"),xer=l(),N2=a("li"),Epe=a("strong"),ker=o("deberta-v2"),Ser=o(" \u2014 "),LO=a("a"),Rer=o("TFDebertaV2Model"),Ber=o(" (DeBERTa-v2 model)"),Per=l(),j2=a("li"),Cpe=a("strong"),$er=o("distilbert"),Ier=o(" \u2014 "),xO=a("a"),qer=o("TFDistilBertModel"),Ner=o(" (DistilBERT model)"),jer=l(),D2=a("li"),wpe=a("strong"),Der=o("dpr"),Ger=o(" \u2014 "),kO=a("a"),Oer=o("TFDPRQuestionEncoder"),Ver=o(" (DPR model)"),Xer=l(),G2=a("li"),Ape=a("strong"),zer=o("electra"),Qer=o(" \u2014 "),SO=a("a"),Wer=o("TFElectraModel"),Her=o(" (ELECTRA model)"),Uer=l(),O2=a("li"),ype=a("strong"),Jer=o("flaubert"),Yer=o(" \u2014 "),RO=a("a"),Ker=o("TFFlaubertModel"),Zer=o(" (FlauBERT model)"),eor=l(),Gs=a("li"),Lpe=a("strong"),oor=o("funnel"),ror=o(" \u2014 "),BO=a("a"),tor=o("TFFunnelModel"),aor=o(" or "),PO=a("a"),nor=o("TFFunnelBaseModel"),sor=o(" (Funnel Transformer model)"),lor=l(),V2=a("li"),xpe=a("strong"),ior=o("gpt2"),dor=o(" \u2014 "),$O=a("a"),cor=o("TFGPT2Model"),mor=o(" (OpenAI GPT-2 model)"),gor=l(),X2=a("li"),kpe=a("strong"),hor=o("gptj"),por=o(" \u2014 "),IO=a("a"),_or=o("TFGPTJModel"),uor=o(" (GPT-J model)"),bor=l(),z2=a("li"),Spe=a("strong"),For=o("hubert"),vor=o(" \u2014 "),qO=a("a"),Tor=o("TFHubertModel"),Mor=o(" (Hubert model)"),Eor=l(),Q2=a("li"),Rpe=a("strong"),Cor=o("layoutlm"),wor=o(" \u2014 "),NO=a("a"),Aor=o("TFLayoutLMModel"),yor=o(" (LayoutLM model)"),Lor=l(),W2=a("li"),Bpe=a("strong"),xor=o("led"),kor=o(" \u2014 "),jO=a("a"),Sor=o("TFLEDModel"),Ror=o(" (LED model)"),Bor=l(),H2=a("li"),Ppe=a("strong"),Por=o("longformer"),$or=o(" \u2014 "),DO=a("a"),Ior=o("TFLongformerModel"),qor=o(" (Longformer model)"),Nor=l(),U2=a("li"),$pe=a("strong"),jor=o("lxmert"),Dor=o(" \u2014 "),GO=a("a"),Gor=o("TFLxmertModel"),Oor=o(" (LXMERT model)"),Vor=l(),J2=a("li"),Ipe=a("strong"),Xor=o("marian"),zor=o(" \u2014 "),OO=a("a"),Qor=o("TFMarianModel"),Wor=o(" (Marian model)"),Hor=l(),Y2=a("li"),qpe=a("strong"),Uor=o("mbart"),Jor=o(" \u2014 "),VO=a("a"),Yor=o("TFMBartModel"),Kor=o(" (mBART model)"),Zor=l(),K2=a("li"),Npe=a("strong"),err=o("mobilebert"),orr=o(" \u2014 "),XO=a("a"),rrr=o("TFMobileBertModel"),trr=o(" (MobileBERT model)"),arr=l(),Z2=a("li"),jpe=a("strong"),nrr=o("mpnet"),srr=o(" \u2014 "),zO=a("a"),lrr=o("TFMPNetModel"),irr=o(" (MPNet model)"),drr=l(),eF=a("li"),Dpe=a("strong"),crr=o("mt5"),frr=o(" \u2014 "),QO=a("a"),mrr=o("TFMT5Model"),grr=o(" (mT5 model)"),hrr=l(),oF=a("li"),Gpe=a("strong"),prr=o("openai-gpt"),_rr=o(" \u2014 "),WO=a("a"),urr=o("TFOpenAIGPTModel"),brr=o(" (OpenAI GPT model)"),Frr=l(),rF=a("li"),Ope=a("strong"),vrr=o("pegasus"),Trr=o(" \u2014 "),HO=a("a"),Mrr=o("TFPegasusModel"),Err=o(" (Pegasus model)"),Crr=l(),tF=a("li"),Vpe=a("strong"),wrr=o("rembert"),Arr=o(" \u2014 "),UO=a("a"),yrr=o("TFRemBertModel"),Lrr=o(" (RemBERT model)"),xrr=l(),aF=a("li"),Xpe=a("strong"),krr=o("roberta"),Srr=o(" \u2014 "),JO=a("a"),Rrr=o("TFRobertaModel"),Brr=o(" (RoBERTa model)"),Prr=l(),nF=a("li"),zpe=a("strong"),$rr=o("roformer"),Irr=o(" \u2014 "),YO=a("a"),qrr=o("TFRoFormerModel"),Nrr=o(" (RoFormer model)"),jrr=l(),sF=a("li"),Qpe=a("strong"),Drr=o("speech_to_text"),Grr=o(" \u2014 "),KO=a("a"),Orr=o("TFSpeech2TextModel"),Vrr=o(" (Speech2Text model)"),Xrr=l(),lF=a("li"),Wpe=a("strong"),zrr=o("t5"),Qrr=o(" \u2014 "),ZO=a("a"),Wrr=o("TFT5Model"),Hrr=o(" (T5 model)"),Urr=l(),iF=a("li"),Hpe=a("strong"),Jrr=o("tapas"),Yrr=o(" \u2014 "),eV=a("a"),Krr=o("TFTapasModel"),Zrr=o(" (TAPAS model)"),etr=l(),dF=a("li"),Upe=a("strong"),otr=o("transfo-xl"),rtr=o(" \u2014 "),oV=a("a"),ttr=o("TFTransfoXLModel"),atr=o(" (Transformer-XL model)"),ntr=l(),cF=a("li"),Jpe=a("strong"),str=o("vit"),ltr=o(" \u2014 "),rV=a("a"),itr=o("TFViTModel"),dtr=o(" (ViT model)"),ctr=l(),fF=a("li"),Ype=a("strong"),ftr=o("vit_mae"),mtr=o(" \u2014 "),tV=a("a"),gtr=o("TFViTMAEModel"),htr=o(" (ViTMAE model)"),ptr=l(),mF=a("li"),Kpe=a("strong"),_tr=o("wav2vec2"),utr=o(" \u2014 "),aV=a("a"),btr=o("TFWav2Vec2Model"),Ftr=o(" (Wav2Vec2 model)"),vtr=l(),gF=a("li"),Zpe=a("strong"),Ttr=o("xglm"),Mtr=o(" \u2014 "),nV=a("a"),Etr=o("TFXGLMModel"),Ctr=o(" (XGLM model)"),wtr=l(),hF=a("li"),e_e=a("strong"),Atr=o("xlm"),ytr=o(" \u2014 "),sV=a("a"),Ltr=o("TFXLMModel"),xtr=o(" (XLM model)"),ktr=l(),pF=a("li"),o_e=a("strong"),Str=o("xlm-roberta"),Rtr=o(" \u2014 "),lV=a("a"),Btr=o("TFXLMRobertaModel"),Ptr=o(" (XLM-RoBERTa model)"),$tr=l(),_F=a("li"),r_e=a("strong"),Itr=o("xlnet"),qtr=o(" \u2014 "),iV=a("a"),Ntr=o("TFXLNetModel"),jtr=o(" (XLNet model)"),Dtr=l(),t_e=a("p"),Gtr=o("Examples:"),Otr=l(),f(fy.$$.fragment),kBe=l(),_c=a("h2"),uF=a("a"),a_e=a("span"),f(my.$$.fragment),Vtr=l(),n_e=a("span"),Xtr=o("TFAutoModelForPreTraining"),SBe=l(),vr=a("div"),f(gy.$$.fragment),ztr=l(),uc=a("p"),Qtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dV=a("a"),Wtr=o("from_pretrained()"),Htr=o(" class method or the "),cV=a("a"),Utr=o("from_config()"),Jtr=o(` class
method.`),Ytr=l(),hy=a("p"),Ktr=o("This class cannot be instantiated directly using "),s_e=a("code"),Ztr=o("__init__()"),ear=o(" (throws an error)."),oar=l(),ht=a("div"),f(py.$$.fragment),rar=l(),l_e=a("p"),tar=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),aar=l(),bc=a("p"),nar=o(`Note:
Loading a model from its configuration file does `),i_e=a("strong"),sar=o("not"),lar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fV=a("a"),iar=o("from_pretrained()"),dar=o(" to load the model weights."),car=l(),d_e=a("p"),far=o("Examples:"),mar=l(),f(_y.$$.fragment),gar=l(),po=a("div"),f(uy.$$.fragment),har=l(),c_e=a("p"),par=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_ar=l(),un=a("p"),uar=o("The model class to instantiate is selected based on the "),f_e=a("code"),bar=o("model_type"),Far=o(` property of the config object (either
passed as an argument or loaded from `),m_e=a("code"),Tar=o("pretrained_model_name_or_path"),Mar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=a("code"),Ear=o("pretrained_model_name_or_path"),Car=o(":"),war=l(),H=a("ul"),bF=a("li"),h_e=a("strong"),Aar=o("albert"),yar=o(" \u2014 "),mV=a("a"),Lar=o("TFAlbertForPreTraining"),xar=o(" (ALBERT model)"),kar=l(),FF=a("li"),p_e=a("strong"),Sar=o("bart"),Rar=o(" \u2014 "),gV=a("a"),Bar=o("TFBartForConditionalGeneration"),Par=o(" (BART model)"),$ar=l(),vF=a("li"),__e=a("strong"),Iar=o("bert"),qar=o(" \u2014 "),hV=a("a"),Nar=o("TFBertForPreTraining"),jar=o(" (BERT model)"),Dar=l(),TF=a("li"),u_e=a("strong"),Gar=o("camembert"),Oar=o(" \u2014 "),pV=a("a"),Var=o("TFCamembertForMaskedLM"),Xar=o(" (CamemBERT model)"),zar=l(),MF=a("li"),b_e=a("strong"),Qar=o("ctrl"),War=o(" \u2014 "),_V=a("a"),Har=o("TFCTRLLMHeadModel"),Uar=o(" (CTRL model)"),Jar=l(),EF=a("li"),F_e=a("strong"),Yar=o("distilbert"),Kar=o(" \u2014 "),uV=a("a"),Zar=o("TFDistilBertForMaskedLM"),enr=o(" (DistilBERT model)"),onr=l(),CF=a("li"),v_e=a("strong"),rnr=o("electra"),tnr=o(" \u2014 "),bV=a("a"),anr=o("TFElectraForPreTraining"),nnr=o(" (ELECTRA model)"),snr=l(),wF=a("li"),T_e=a("strong"),lnr=o("flaubert"),inr=o(" \u2014 "),FV=a("a"),dnr=o("TFFlaubertWithLMHeadModel"),cnr=o(" (FlauBERT model)"),fnr=l(),AF=a("li"),M_e=a("strong"),mnr=o("funnel"),gnr=o(" \u2014 "),vV=a("a"),hnr=o("TFFunnelForPreTraining"),pnr=o(" (Funnel Transformer model)"),_nr=l(),yF=a("li"),E_e=a("strong"),unr=o("gpt2"),bnr=o(" \u2014 "),TV=a("a"),Fnr=o("TFGPT2LMHeadModel"),vnr=o(" (OpenAI GPT-2 model)"),Tnr=l(),LF=a("li"),C_e=a("strong"),Mnr=o("layoutlm"),Enr=o(" \u2014 "),MV=a("a"),Cnr=o("TFLayoutLMForMaskedLM"),wnr=o(" (LayoutLM model)"),Anr=l(),xF=a("li"),w_e=a("strong"),ynr=o("lxmert"),Lnr=o(" \u2014 "),EV=a("a"),xnr=o("TFLxmertForPreTraining"),knr=o(" (LXMERT model)"),Snr=l(),kF=a("li"),A_e=a("strong"),Rnr=o("mobilebert"),Bnr=o(" \u2014 "),CV=a("a"),Pnr=o("TFMobileBertForPreTraining"),$nr=o(" (MobileBERT model)"),Inr=l(),SF=a("li"),y_e=a("strong"),qnr=o("mpnet"),Nnr=o(" \u2014 "),wV=a("a"),jnr=o("TFMPNetForMaskedLM"),Dnr=o(" (MPNet model)"),Gnr=l(),RF=a("li"),L_e=a("strong"),Onr=o("openai-gpt"),Vnr=o(" \u2014 "),AV=a("a"),Xnr=o("TFOpenAIGPTLMHeadModel"),znr=o(" (OpenAI GPT model)"),Qnr=l(),BF=a("li"),x_e=a("strong"),Wnr=o("roberta"),Hnr=o(" \u2014 "),yV=a("a"),Unr=o("TFRobertaForMaskedLM"),Jnr=o(" (RoBERTa model)"),Ynr=l(),PF=a("li"),k_e=a("strong"),Knr=o("t5"),Znr=o(" \u2014 "),LV=a("a"),esr=o("TFT5ForConditionalGeneration"),osr=o(" (T5 model)"),rsr=l(),$F=a("li"),S_e=a("strong"),tsr=o("tapas"),asr=o(" \u2014 "),xV=a("a"),nsr=o("TFTapasForMaskedLM"),ssr=o(" (TAPAS model)"),lsr=l(),IF=a("li"),R_e=a("strong"),isr=o("transfo-xl"),dsr=o(" \u2014 "),kV=a("a"),csr=o("TFTransfoXLLMHeadModel"),fsr=o(" (Transformer-XL model)"),msr=l(),qF=a("li"),B_e=a("strong"),gsr=o("vit_mae"),hsr=o(" \u2014 "),SV=a("a"),psr=o("TFViTMAEForPreTraining"),_sr=o(" (ViTMAE model)"),usr=l(),NF=a("li"),P_e=a("strong"),bsr=o("xlm"),Fsr=o(" \u2014 "),RV=a("a"),vsr=o("TFXLMWithLMHeadModel"),Tsr=o(" (XLM model)"),Msr=l(),jF=a("li"),$_e=a("strong"),Esr=o("xlm-roberta"),Csr=o(" \u2014 "),BV=a("a"),wsr=o("TFXLMRobertaForMaskedLM"),Asr=o(" (XLM-RoBERTa model)"),ysr=l(),DF=a("li"),I_e=a("strong"),Lsr=o("xlnet"),xsr=o(" \u2014 "),PV=a("a"),ksr=o("TFXLNetLMHeadModel"),Ssr=o(" (XLNet model)"),Rsr=l(),q_e=a("p"),Bsr=o("Examples:"),Psr=l(),f(by.$$.fragment),RBe=l(),Fc=a("h2"),GF=a("a"),N_e=a("span"),f(Fy.$$.fragment),$sr=l(),j_e=a("span"),Isr=o("TFAutoModelForCausalLM"),BBe=l(),Tr=a("div"),f(vy.$$.fragment),qsr=l(),vc=a("p"),Nsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$V=a("a"),jsr=o("from_pretrained()"),Dsr=o(" class method or the "),IV=a("a"),Gsr=o("from_config()"),Osr=o(` class
method.`),Vsr=l(),Ty=a("p"),Xsr=o("This class cannot be instantiated directly using "),D_e=a("code"),zsr=o("__init__()"),Qsr=o(" (throws an error)."),Wsr=l(),pt=a("div"),f(My.$$.fragment),Hsr=l(),G_e=a("p"),Usr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Jsr=l(),Tc=a("p"),Ysr=o(`Note:
Loading a model from its configuration file does `),O_e=a("strong"),Ksr=o("not"),Zsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=a("a"),elr=o("from_pretrained()"),olr=o(" to load the model weights."),rlr=l(),V_e=a("p"),tlr=o("Examples:"),alr=l(),f(Ey.$$.fragment),nlr=l(),_o=a("div"),f(Cy.$$.fragment),slr=l(),X_e=a("p"),llr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ilr=l(),bn=a("p"),dlr=o("The model class to instantiate is selected based on the "),z_e=a("code"),clr=o("model_type"),flr=o(` property of the config object (either
passed as an argument or loaded from `),Q_e=a("code"),mlr=o("pretrained_model_name_or_path"),glr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=a("code"),hlr=o("pretrained_model_name_or_path"),plr=o(":"),_lr=l(),de=a("ul"),OF=a("li"),H_e=a("strong"),ulr=o("bert"),blr=o(" \u2014 "),NV=a("a"),Flr=o("TFBertLMHeadModel"),vlr=o(" (BERT model)"),Tlr=l(),VF=a("li"),U_e=a("strong"),Mlr=o("camembert"),Elr=o(" \u2014 "),jV=a("a"),Clr=o("TFCamembertForCausalLM"),wlr=o(" (CamemBERT model)"),Alr=l(),XF=a("li"),J_e=a("strong"),ylr=o("ctrl"),Llr=o(" \u2014 "),DV=a("a"),xlr=o("TFCTRLLMHeadModel"),klr=o(" (CTRL model)"),Slr=l(),zF=a("li"),Y_e=a("strong"),Rlr=o("gpt2"),Blr=o(" \u2014 "),GV=a("a"),Plr=o("TFGPT2LMHeadModel"),$lr=o(" (OpenAI GPT-2 model)"),Ilr=l(),QF=a("li"),K_e=a("strong"),qlr=o("gptj"),Nlr=o(" \u2014 "),OV=a("a"),jlr=o("TFGPTJForCausalLM"),Dlr=o(" (GPT-J model)"),Glr=l(),WF=a("li"),Z_e=a("strong"),Olr=o("openai-gpt"),Vlr=o(" \u2014 "),VV=a("a"),Xlr=o("TFOpenAIGPTLMHeadModel"),zlr=o(" (OpenAI GPT model)"),Qlr=l(),HF=a("li"),eue=a("strong"),Wlr=o("rembert"),Hlr=o(" \u2014 "),XV=a("a"),Ulr=o("TFRemBertForCausalLM"),Jlr=o(" (RemBERT model)"),Ylr=l(),UF=a("li"),oue=a("strong"),Klr=o("roberta"),Zlr=o(" \u2014 "),zV=a("a"),eir=o("TFRobertaForCausalLM"),oir=o(" (RoBERTa model)"),rir=l(),JF=a("li"),rue=a("strong"),tir=o("roformer"),air=o(" \u2014 "),QV=a("a"),nir=o("TFRoFormerForCausalLM"),sir=o(" (RoFormer model)"),lir=l(),YF=a("li"),tue=a("strong"),iir=o("transfo-xl"),dir=o(" \u2014 "),WV=a("a"),cir=o("TFTransfoXLLMHeadModel"),fir=o(" (Transformer-XL model)"),mir=l(),KF=a("li"),aue=a("strong"),gir=o("xglm"),hir=o(" \u2014 "),HV=a("a"),pir=o("TFXGLMForCausalLM"),_ir=o(" (XGLM model)"),uir=l(),ZF=a("li"),nue=a("strong"),bir=o("xlm"),Fir=o(" \u2014 "),UV=a("a"),vir=o("TFXLMWithLMHeadModel"),Tir=o(" (XLM model)"),Mir=l(),ev=a("li"),sue=a("strong"),Eir=o("xlnet"),Cir=o(" \u2014 "),JV=a("a"),wir=o("TFXLNetLMHeadModel"),Air=o(" (XLNet model)"),yir=l(),lue=a("p"),Lir=o("Examples:"),xir=l(),f(wy.$$.fragment),PBe=l(),Mc=a("h2"),ov=a("a"),iue=a("span"),f(Ay.$$.fragment),kir=l(),due=a("span"),Sir=o("TFAutoModelForImageClassification"),$Be=l(),Mr=a("div"),f(yy.$$.fragment),Rir=l(),Ec=a("p"),Bir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YV=a("a"),Pir=o("from_pretrained()"),$ir=o(" class method or the "),KV=a("a"),Iir=o("from_config()"),qir=o(` class
method.`),Nir=l(),Ly=a("p"),jir=o("This class cannot be instantiated directly using "),cue=a("code"),Dir=o("__init__()"),Gir=o(" (throws an error)."),Oir=l(),_t=a("div"),f(xy.$$.fragment),Vir=l(),fue=a("p"),Xir=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zir=l(),Cc=a("p"),Qir=o(`Note:
Loading a model from its configuration file does `),mue=a("strong"),Wir=o("not"),Hir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=a("a"),Uir=o("from_pretrained()"),Jir=o(" to load the model weights."),Yir=l(),gue=a("p"),Kir=o("Examples:"),Zir=l(),f(ky.$$.fragment),edr=l(),uo=a("div"),f(Sy.$$.fragment),odr=l(),hue=a("p"),rdr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tdr=l(),Fn=a("p"),adr=o("The model class to instantiate is selected based on the "),pue=a("code"),ndr=o("model_type"),sdr=o(` property of the config object (either
passed as an argument or loaded from `),_ue=a("code"),ldr=o("pretrained_model_name_or_path"),idr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),ddr=o("pretrained_model_name_or_path"),cdr=o(":"),fdr=l(),Ry=a("ul"),rv=a("li"),bue=a("strong"),mdr=o("convnext"),gdr=o(" \u2014 "),eX=a("a"),hdr=o("TFConvNextForImageClassification"),pdr=o(" (ConvNext model)"),_dr=l(),tv=a("li"),Fue=a("strong"),udr=o("vit"),bdr=o(" \u2014 "),oX=a("a"),Fdr=o("TFViTForImageClassification"),vdr=o(" (ViT model)"),Tdr=l(),vue=a("p"),Mdr=o("Examples:"),Edr=l(),f(By.$$.fragment),IBe=l(),wc=a("h2"),av=a("a"),Tue=a("span"),f(Py.$$.fragment),Cdr=l(),Mue=a("span"),wdr=o("TFAutoModelForMaskedLM"),qBe=l(),Er=a("div"),f($y.$$.fragment),Adr=l(),Ac=a("p"),ydr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rX=a("a"),Ldr=o("from_pretrained()"),xdr=o(" class method or the "),tX=a("a"),kdr=o("from_config()"),Sdr=o(` class
method.`),Rdr=l(),Iy=a("p"),Bdr=o("This class cannot be instantiated directly using "),Eue=a("code"),Pdr=o("__init__()"),$dr=o(" (throws an error)."),Idr=l(),ut=a("div"),f(qy.$$.fragment),qdr=l(),Cue=a("p"),Ndr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jdr=l(),yc=a("p"),Ddr=o(`Note:
Loading a model from its configuration file does `),wue=a("strong"),Gdr=o("not"),Odr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),Vdr=o("from_pretrained()"),Xdr=o(" to load the model weights."),zdr=l(),Aue=a("p"),Qdr=o("Examples:"),Wdr=l(),f(Ny.$$.fragment),Hdr=l(),bo=a("div"),f(jy.$$.fragment),Udr=l(),yue=a("p"),Jdr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ydr=l(),vn=a("p"),Kdr=o("The model class to instantiate is selected based on the "),Lue=a("code"),Zdr=o("model_type"),ecr=o(` property of the config object (either
passed as an argument or loaded from `),xue=a("code"),ocr=o("pretrained_model_name_or_path"),rcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=a("code"),tcr=o("pretrained_model_name_or_path"),acr=o(":"),ncr=l(),J=a("ul"),nv=a("li"),Sue=a("strong"),scr=o("albert"),lcr=o(" \u2014 "),nX=a("a"),icr=o("TFAlbertForMaskedLM"),dcr=o(" (ALBERT model)"),ccr=l(),sv=a("li"),Rue=a("strong"),fcr=o("bert"),mcr=o(" \u2014 "),sX=a("a"),gcr=o("TFBertForMaskedLM"),hcr=o(" (BERT model)"),pcr=l(),lv=a("li"),Bue=a("strong"),_cr=o("camembert"),ucr=o(" \u2014 "),lX=a("a"),bcr=o("TFCamembertForMaskedLM"),Fcr=o(" (CamemBERT model)"),vcr=l(),iv=a("li"),Pue=a("strong"),Tcr=o("convbert"),Mcr=o(" \u2014 "),iX=a("a"),Ecr=o("TFConvBertForMaskedLM"),Ccr=o(" (ConvBERT model)"),wcr=l(),dv=a("li"),$ue=a("strong"),Acr=o("deberta"),ycr=o(" \u2014 "),dX=a("a"),Lcr=o("TFDebertaForMaskedLM"),xcr=o(" (DeBERTa model)"),kcr=l(),cv=a("li"),Iue=a("strong"),Scr=o("deberta-v2"),Rcr=o(" \u2014 "),cX=a("a"),Bcr=o("TFDebertaV2ForMaskedLM"),Pcr=o(" (DeBERTa-v2 model)"),$cr=l(),fv=a("li"),que=a("strong"),Icr=o("distilbert"),qcr=o(" \u2014 "),fX=a("a"),Ncr=o("TFDistilBertForMaskedLM"),jcr=o(" (DistilBERT model)"),Dcr=l(),mv=a("li"),Nue=a("strong"),Gcr=o("electra"),Ocr=o(" \u2014 "),mX=a("a"),Vcr=o("TFElectraForMaskedLM"),Xcr=o(" (ELECTRA model)"),zcr=l(),gv=a("li"),jue=a("strong"),Qcr=o("flaubert"),Wcr=o(" \u2014 "),gX=a("a"),Hcr=o("TFFlaubertWithLMHeadModel"),Ucr=o(" (FlauBERT model)"),Jcr=l(),hv=a("li"),Due=a("strong"),Ycr=o("funnel"),Kcr=o(" \u2014 "),hX=a("a"),Zcr=o("TFFunnelForMaskedLM"),efr=o(" (Funnel Transformer model)"),ofr=l(),pv=a("li"),Gue=a("strong"),rfr=o("layoutlm"),tfr=o(" \u2014 "),pX=a("a"),afr=o("TFLayoutLMForMaskedLM"),nfr=o(" (LayoutLM model)"),sfr=l(),_v=a("li"),Oue=a("strong"),lfr=o("longformer"),ifr=o(" \u2014 "),_X=a("a"),dfr=o("TFLongformerForMaskedLM"),cfr=o(" (Longformer model)"),ffr=l(),uv=a("li"),Vue=a("strong"),mfr=o("mobilebert"),gfr=o(" \u2014 "),uX=a("a"),hfr=o("TFMobileBertForMaskedLM"),pfr=o(" (MobileBERT model)"),_fr=l(),bv=a("li"),Xue=a("strong"),ufr=o("mpnet"),bfr=o(" \u2014 "),bX=a("a"),Ffr=o("TFMPNetForMaskedLM"),vfr=o(" (MPNet model)"),Tfr=l(),Fv=a("li"),zue=a("strong"),Mfr=o("rembert"),Efr=o(" \u2014 "),FX=a("a"),Cfr=o("TFRemBertForMaskedLM"),wfr=o(" (RemBERT model)"),Afr=l(),vv=a("li"),Que=a("strong"),yfr=o("roberta"),Lfr=o(" \u2014 "),vX=a("a"),xfr=o("TFRobertaForMaskedLM"),kfr=o(" (RoBERTa model)"),Sfr=l(),Tv=a("li"),Wue=a("strong"),Rfr=o("roformer"),Bfr=o(" \u2014 "),TX=a("a"),Pfr=o("TFRoFormerForMaskedLM"),$fr=o(" (RoFormer model)"),Ifr=l(),Mv=a("li"),Hue=a("strong"),qfr=o("tapas"),Nfr=o(" \u2014 "),MX=a("a"),jfr=o("TFTapasForMaskedLM"),Dfr=o(" (TAPAS model)"),Gfr=l(),Ev=a("li"),Uue=a("strong"),Ofr=o("xlm"),Vfr=o(" \u2014 "),EX=a("a"),Xfr=o("TFXLMWithLMHeadModel"),zfr=o(" (XLM model)"),Qfr=l(),Cv=a("li"),Jue=a("strong"),Wfr=o("xlm-roberta"),Hfr=o(" \u2014 "),CX=a("a"),Ufr=o("TFXLMRobertaForMaskedLM"),Jfr=o(" (XLM-RoBERTa model)"),Yfr=l(),Yue=a("p"),Kfr=o("Examples:"),Zfr=l(),f(Dy.$$.fragment),NBe=l(),Lc=a("h2"),wv=a("a"),Kue=a("span"),f(Gy.$$.fragment),emr=l(),Zue=a("span"),omr=o("TFAutoModelForSeq2SeqLM"),jBe=l(),Cr=a("div"),f(Oy.$$.fragment),rmr=l(),xc=a("p"),tmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wX=a("a"),amr=o("from_pretrained()"),nmr=o(" class method or the "),AX=a("a"),smr=o("from_config()"),lmr=o(` class
method.`),imr=l(),Vy=a("p"),dmr=o("This class cannot be instantiated directly using "),e1e=a("code"),cmr=o("__init__()"),fmr=o(" (throws an error)."),mmr=l(),bt=a("div"),f(Xy.$$.fragment),gmr=l(),o1e=a("p"),hmr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),pmr=l(),kc=a("p"),_mr=o(`Note:
Loading a model from its configuration file does `),r1e=a("strong"),umr=o("not"),bmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yX=a("a"),Fmr=o("from_pretrained()"),vmr=o(" to load the model weights."),Tmr=l(),t1e=a("p"),Mmr=o("Examples:"),Emr=l(),f(zy.$$.fragment),Cmr=l(),Fo=a("div"),f(Qy.$$.fragment),wmr=l(),a1e=a("p"),Amr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ymr=l(),Tn=a("p"),Lmr=o("The model class to instantiate is selected based on the "),n1e=a("code"),xmr=o("model_type"),kmr=o(` property of the config object (either
passed as an argument or loaded from `),s1e=a("code"),Smr=o("pretrained_model_name_or_path"),Rmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=a("code"),Bmr=o("pretrained_model_name_or_path"),Pmr=o(":"),$mr=l(),be=a("ul"),Av=a("li"),i1e=a("strong"),Imr=o("bart"),qmr=o(" \u2014 "),LX=a("a"),Nmr=o("TFBartForConditionalGeneration"),jmr=o(" (BART model)"),Dmr=l(),yv=a("li"),d1e=a("strong"),Gmr=o("blenderbot"),Omr=o(" \u2014 "),xX=a("a"),Vmr=o("TFBlenderbotForConditionalGeneration"),Xmr=o(" (Blenderbot model)"),zmr=l(),Lv=a("li"),c1e=a("strong"),Qmr=o("blenderbot-small"),Wmr=o(" \u2014 "),kX=a("a"),Hmr=o("TFBlenderbotSmallForConditionalGeneration"),Umr=o(" (BlenderbotSmall model)"),Jmr=l(),xv=a("li"),f1e=a("strong"),Ymr=o("encoder-decoder"),Kmr=o(" \u2014 "),SX=a("a"),Zmr=o("TFEncoderDecoderModel"),egr=o(" (Encoder decoder model)"),ogr=l(),kv=a("li"),m1e=a("strong"),rgr=o("led"),tgr=o(" \u2014 "),RX=a("a"),agr=o("TFLEDForConditionalGeneration"),ngr=o(" (LED model)"),sgr=l(),Sv=a("li"),g1e=a("strong"),lgr=o("marian"),igr=o(" \u2014 "),BX=a("a"),dgr=o("TFMarianMTModel"),cgr=o(" (Marian model)"),fgr=l(),Rv=a("li"),h1e=a("strong"),mgr=o("mbart"),ggr=o(" \u2014 "),PX=a("a"),hgr=o("TFMBartForConditionalGeneration"),pgr=o(" (mBART model)"),_gr=l(),Bv=a("li"),p1e=a("strong"),ugr=o("mt5"),bgr=o(" \u2014 "),$X=a("a"),Fgr=o("TFMT5ForConditionalGeneration"),vgr=o(" (mT5 model)"),Tgr=l(),Pv=a("li"),_1e=a("strong"),Mgr=o("pegasus"),Egr=o(" \u2014 "),IX=a("a"),Cgr=o("TFPegasusForConditionalGeneration"),wgr=o(" (Pegasus model)"),Agr=l(),$v=a("li"),u1e=a("strong"),ygr=o("t5"),Lgr=o(" \u2014 "),qX=a("a"),xgr=o("TFT5ForConditionalGeneration"),kgr=o(" (T5 model)"),Sgr=l(),b1e=a("p"),Rgr=o("Examples:"),Bgr=l(),f(Wy.$$.fragment),DBe=l(),Sc=a("h2"),Iv=a("a"),F1e=a("span"),f(Hy.$$.fragment),Pgr=l(),v1e=a("span"),$gr=o("TFAutoModelForSequenceClassification"),GBe=l(),wr=a("div"),f(Uy.$$.fragment),Igr=l(),Rc=a("p"),qgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NX=a("a"),Ngr=o("from_pretrained()"),jgr=o(" class method or the "),jX=a("a"),Dgr=o("from_config()"),Ggr=o(` class
method.`),Ogr=l(),Jy=a("p"),Vgr=o("This class cannot be instantiated directly using "),T1e=a("code"),Xgr=o("__init__()"),zgr=o(" (throws an error)."),Qgr=l(),Ft=a("div"),f(Yy.$$.fragment),Wgr=l(),M1e=a("p"),Hgr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ugr=l(),Bc=a("p"),Jgr=o(`Note:
Loading a model from its configuration file does `),E1e=a("strong"),Ygr=o("not"),Kgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),Zgr=o("from_pretrained()"),ehr=o(" to load the model weights."),ohr=l(),C1e=a("p"),rhr=o("Examples:"),thr=l(),f(Ky.$$.fragment),ahr=l(),vo=a("div"),f(Zy.$$.fragment),nhr=l(),w1e=a("p"),shr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lhr=l(),Mn=a("p"),ihr=o("The model class to instantiate is selected based on the "),A1e=a("code"),dhr=o("model_type"),chr=o(` property of the config object (either
passed as an argument or loaded from `),y1e=a("code"),fhr=o("pretrained_model_name_or_path"),mhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=a("code"),ghr=o("pretrained_model_name_or_path"),hhr=o(":"),phr=l(),V=a("ul"),qv=a("li"),x1e=a("strong"),_hr=o("albert"),uhr=o(" \u2014 "),GX=a("a"),bhr=o("TFAlbertForSequenceClassification"),Fhr=o(" (ALBERT model)"),vhr=l(),Nv=a("li"),k1e=a("strong"),Thr=o("bert"),Mhr=o(" \u2014 "),OX=a("a"),Ehr=o("TFBertForSequenceClassification"),Chr=o(" (BERT model)"),whr=l(),jv=a("li"),S1e=a("strong"),Ahr=o("camembert"),yhr=o(" \u2014 "),VX=a("a"),Lhr=o("TFCamembertForSequenceClassification"),xhr=o(" (CamemBERT model)"),khr=l(),Dv=a("li"),R1e=a("strong"),Shr=o("convbert"),Rhr=o(" \u2014 "),XX=a("a"),Bhr=o("TFConvBertForSequenceClassification"),Phr=o(" (ConvBERT model)"),$hr=l(),Gv=a("li"),B1e=a("strong"),Ihr=o("ctrl"),qhr=o(" \u2014 "),zX=a("a"),Nhr=o("TFCTRLForSequenceClassification"),jhr=o(" (CTRL model)"),Dhr=l(),Ov=a("li"),P1e=a("strong"),Ghr=o("deberta"),Ohr=o(" \u2014 "),QX=a("a"),Vhr=o("TFDebertaForSequenceClassification"),Xhr=o(" (DeBERTa model)"),zhr=l(),Vv=a("li"),$1e=a("strong"),Qhr=o("deberta-v2"),Whr=o(" \u2014 "),WX=a("a"),Hhr=o("TFDebertaV2ForSequenceClassification"),Uhr=o(" (DeBERTa-v2 model)"),Jhr=l(),Xv=a("li"),I1e=a("strong"),Yhr=o("distilbert"),Khr=o(" \u2014 "),HX=a("a"),Zhr=o("TFDistilBertForSequenceClassification"),epr=o(" (DistilBERT model)"),opr=l(),zv=a("li"),q1e=a("strong"),rpr=o("electra"),tpr=o(" \u2014 "),UX=a("a"),apr=o("TFElectraForSequenceClassification"),npr=o(" (ELECTRA model)"),spr=l(),Qv=a("li"),N1e=a("strong"),lpr=o("flaubert"),ipr=o(" \u2014 "),JX=a("a"),dpr=o("TFFlaubertForSequenceClassification"),cpr=o(" (FlauBERT model)"),fpr=l(),Wv=a("li"),j1e=a("strong"),mpr=o("funnel"),gpr=o(" \u2014 "),YX=a("a"),hpr=o("TFFunnelForSequenceClassification"),ppr=o(" (Funnel Transformer model)"),_pr=l(),Hv=a("li"),D1e=a("strong"),upr=o("gpt2"),bpr=o(" \u2014 "),KX=a("a"),Fpr=o("TFGPT2ForSequenceClassification"),vpr=o(" (OpenAI GPT-2 model)"),Tpr=l(),Uv=a("li"),G1e=a("strong"),Mpr=o("gptj"),Epr=o(" \u2014 "),ZX=a("a"),Cpr=o("TFGPTJForSequenceClassification"),wpr=o(" (GPT-J model)"),Apr=l(),Jv=a("li"),O1e=a("strong"),ypr=o("layoutlm"),Lpr=o(" \u2014 "),ez=a("a"),xpr=o("TFLayoutLMForSequenceClassification"),kpr=o(" (LayoutLM model)"),Spr=l(),Yv=a("li"),V1e=a("strong"),Rpr=o("longformer"),Bpr=o(" \u2014 "),oz=a("a"),Ppr=o("TFLongformerForSequenceClassification"),$pr=o(" (Longformer model)"),Ipr=l(),Kv=a("li"),X1e=a("strong"),qpr=o("mobilebert"),Npr=o(" \u2014 "),rz=a("a"),jpr=o("TFMobileBertForSequenceClassification"),Dpr=o(" (MobileBERT model)"),Gpr=l(),Zv=a("li"),z1e=a("strong"),Opr=o("mpnet"),Vpr=o(" \u2014 "),tz=a("a"),Xpr=o("TFMPNetForSequenceClassification"),zpr=o(" (MPNet model)"),Qpr=l(),e6=a("li"),Q1e=a("strong"),Wpr=o("openai-gpt"),Hpr=o(" \u2014 "),az=a("a"),Upr=o("TFOpenAIGPTForSequenceClassification"),Jpr=o(" (OpenAI GPT model)"),Ypr=l(),o6=a("li"),W1e=a("strong"),Kpr=o("rembert"),Zpr=o(" \u2014 "),nz=a("a"),e_r=o("TFRemBertForSequenceClassification"),o_r=o(" (RemBERT model)"),r_r=l(),r6=a("li"),H1e=a("strong"),t_r=o("roberta"),a_r=o(" \u2014 "),sz=a("a"),n_r=o("TFRobertaForSequenceClassification"),s_r=o(" (RoBERTa model)"),l_r=l(),t6=a("li"),U1e=a("strong"),i_r=o("roformer"),d_r=o(" \u2014 "),lz=a("a"),c_r=o("TFRoFormerForSequenceClassification"),f_r=o(" (RoFormer model)"),m_r=l(),a6=a("li"),J1e=a("strong"),g_r=o("tapas"),h_r=o(" \u2014 "),iz=a("a"),p_r=o("TFTapasForSequenceClassification"),__r=o(" (TAPAS model)"),u_r=l(),n6=a("li"),Y1e=a("strong"),b_r=o("transfo-xl"),F_r=o(" \u2014 "),dz=a("a"),v_r=o("TFTransfoXLForSequenceClassification"),T_r=o(" (Transformer-XL model)"),M_r=l(),s6=a("li"),K1e=a("strong"),E_r=o("xlm"),C_r=o(" \u2014 "),cz=a("a"),w_r=o("TFXLMForSequenceClassification"),A_r=o(" (XLM model)"),y_r=l(),l6=a("li"),Z1e=a("strong"),L_r=o("xlm-roberta"),x_r=o(" \u2014 "),fz=a("a"),k_r=o("TFXLMRobertaForSequenceClassification"),S_r=o(" (XLM-RoBERTa model)"),R_r=l(),i6=a("li"),e4e=a("strong"),B_r=o("xlnet"),P_r=o(" \u2014 "),mz=a("a"),$_r=o("TFXLNetForSequenceClassification"),I_r=o(" (XLNet model)"),q_r=l(),o4e=a("p"),N_r=o("Examples:"),j_r=l(),f(eL.$$.fragment),OBe=l(),Pc=a("h2"),d6=a("a"),r4e=a("span"),f(oL.$$.fragment),D_r=l(),t4e=a("span"),G_r=o("TFAutoModelForMultipleChoice"),VBe=l(),Ar=a("div"),f(rL.$$.fragment),O_r=l(),$c=a("p"),V_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gz=a("a"),X_r=o("from_pretrained()"),z_r=o(" class method or the "),hz=a("a"),Q_r=o("from_config()"),W_r=o(` class
method.`),H_r=l(),tL=a("p"),U_r=o("This class cannot be instantiated directly using "),a4e=a("code"),J_r=o("__init__()"),Y_r=o(" (throws an error)."),K_r=l(),vt=a("div"),f(aL.$$.fragment),Z_r=l(),n4e=a("p"),eur=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),our=l(),Ic=a("p"),rur=o(`Note:
Loading a model from its configuration file does `),s4e=a("strong"),tur=o("not"),aur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=a("a"),nur=o("from_pretrained()"),sur=o(" to load the model weights."),lur=l(),l4e=a("p"),iur=o("Examples:"),dur=l(),f(nL.$$.fragment),cur=l(),To=a("div"),f(sL.$$.fragment),fur=l(),i4e=a("p"),mur=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gur=l(),En=a("p"),hur=o("The model class to instantiate is selected based on the "),d4e=a("code"),pur=o("model_type"),_ur=o(` property of the config object (either
passed as an argument or loaded from `),c4e=a("code"),uur=o("pretrained_model_name_or_path"),bur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=a("code"),Fur=o("pretrained_model_name_or_path"),vur=o(":"),Tur=l(),se=a("ul"),c6=a("li"),m4e=a("strong"),Mur=o("albert"),Eur=o(" \u2014 "),_z=a("a"),Cur=o("TFAlbertForMultipleChoice"),wur=o(" (ALBERT model)"),Aur=l(),f6=a("li"),g4e=a("strong"),yur=o("bert"),Lur=o(" \u2014 "),uz=a("a"),xur=o("TFBertForMultipleChoice"),kur=o(" (BERT model)"),Sur=l(),m6=a("li"),h4e=a("strong"),Rur=o("camembert"),Bur=o(" \u2014 "),bz=a("a"),Pur=o("TFCamembertForMultipleChoice"),$ur=o(" (CamemBERT model)"),Iur=l(),g6=a("li"),p4e=a("strong"),qur=o("convbert"),Nur=o(" \u2014 "),Fz=a("a"),jur=o("TFConvBertForMultipleChoice"),Dur=o(" (ConvBERT model)"),Gur=l(),h6=a("li"),_4e=a("strong"),Our=o("distilbert"),Vur=o(" \u2014 "),vz=a("a"),Xur=o("TFDistilBertForMultipleChoice"),zur=o(" (DistilBERT model)"),Qur=l(),p6=a("li"),u4e=a("strong"),Wur=o("electra"),Hur=o(" \u2014 "),Tz=a("a"),Uur=o("TFElectraForMultipleChoice"),Jur=o(" (ELECTRA model)"),Yur=l(),_6=a("li"),b4e=a("strong"),Kur=o("flaubert"),Zur=o(" \u2014 "),Mz=a("a"),e1r=o("TFFlaubertForMultipleChoice"),o1r=o(" (FlauBERT model)"),r1r=l(),u6=a("li"),F4e=a("strong"),t1r=o("funnel"),a1r=o(" \u2014 "),Ez=a("a"),n1r=o("TFFunnelForMultipleChoice"),s1r=o(" (Funnel Transformer model)"),l1r=l(),b6=a("li"),v4e=a("strong"),i1r=o("longformer"),d1r=o(" \u2014 "),Cz=a("a"),c1r=o("TFLongformerForMultipleChoice"),f1r=o(" (Longformer model)"),m1r=l(),F6=a("li"),T4e=a("strong"),g1r=o("mobilebert"),h1r=o(" \u2014 "),wz=a("a"),p1r=o("TFMobileBertForMultipleChoice"),_1r=o(" (MobileBERT model)"),u1r=l(),v6=a("li"),M4e=a("strong"),b1r=o("mpnet"),F1r=o(" \u2014 "),Az=a("a"),v1r=o("TFMPNetForMultipleChoice"),T1r=o(" (MPNet model)"),M1r=l(),T6=a("li"),E4e=a("strong"),E1r=o("rembert"),C1r=o(" \u2014 "),yz=a("a"),w1r=o("TFRemBertForMultipleChoice"),A1r=o(" (RemBERT model)"),y1r=l(),M6=a("li"),C4e=a("strong"),L1r=o("roberta"),x1r=o(" \u2014 "),Lz=a("a"),k1r=o("TFRobertaForMultipleChoice"),S1r=o(" (RoBERTa model)"),R1r=l(),E6=a("li"),w4e=a("strong"),B1r=o("roformer"),P1r=o(" \u2014 "),xz=a("a"),$1r=o("TFRoFormerForMultipleChoice"),I1r=o(" (RoFormer model)"),q1r=l(),C6=a("li"),A4e=a("strong"),N1r=o("xlm"),j1r=o(" \u2014 "),kz=a("a"),D1r=o("TFXLMForMultipleChoice"),G1r=o(" (XLM model)"),O1r=l(),w6=a("li"),y4e=a("strong"),V1r=o("xlm-roberta"),X1r=o(" \u2014 "),Sz=a("a"),z1r=o("TFXLMRobertaForMultipleChoice"),Q1r=o(" (XLM-RoBERTa model)"),W1r=l(),A6=a("li"),L4e=a("strong"),H1r=o("xlnet"),U1r=o(" \u2014 "),Rz=a("a"),J1r=o("TFXLNetForMultipleChoice"),Y1r=o(" (XLNet model)"),K1r=l(),x4e=a("p"),Z1r=o("Examples:"),e4r=l(),f(lL.$$.fragment),XBe=l(),qc=a("h2"),y6=a("a"),k4e=a("span"),f(iL.$$.fragment),o4r=l(),S4e=a("span"),r4r=o("TFAutoModelForTableQuestionAnswering"),zBe=l(),yr=a("div"),f(dL.$$.fragment),t4r=l(),Nc=a("p"),a4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Bz=a("a"),n4r=o("from_pretrained()"),s4r=o(" class method or the "),Pz=a("a"),l4r=o("from_config()"),i4r=o(` class
method.`),d4r=l(),cL=a("p"),c4r=o("This class cannot be instantiated directly using "),R4e=a("code"),f4r=o("__init__()"),m4r=o(" (throws an error)."),g4r=l(),Tt=a("div"),f(fL.$$.fragment),h4r=l(),B4e=a("p"),p4r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_4r=l(),jc=a("p"),u4r=o(`Note:
Loading a model from its configuration file does `),P4e=a("strong"),b4r=o("not"),F4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=a("a"),v4r=o("from_pretrained()"),T4r=o(" to load the model weights."),M4r=l(),$4e=a("p"),E4r=o("Examples:"),C4r=l(),f(mL.$$.fragment),w4r=l(),Mo=a("div"),f(gL.$$.fragment),A4r=l(),I4e=a("p"),y4r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),L4r=l(),Cn=a("p"),x4r=o("The model class to instantiate is selected based on the "),q4e=a("code"),k4r=o("model_type"),S4r=o(` property of the config object (either
passed as an argument or loaded from `),N4e=a("code"),R4r=o("pretrained_model_name_or_path"),B4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j4e=a("code"),P4r=o("pretrained_model_name_or_path"),$4r=o(":"),I4r=l(),D4e=a("ul"),L6=a("li"),G4e=a("strong"),q4r=o("tapas"),N4r=o(" \u2014 "),Iz=a("a"),j4r=o("TFTapasForQuestionAnswering"),D4r=o(" (TAPAS model)"),G4r=l(),O4e=a("p"),O4r=o("Examples:"),V4r=l(),f(hL.$$.fragment),QBe=l(),Dc=a("h2"),x6=a("a"),V4e=a("span"),f(pL.$$.fragment),X4r=l(),X4e=a("span"),z4r=o("TFAutoModelForTokenClassification"),WBe=l(),Lr=a("div"),f(_L.$$.fragment),Q4r=l(),Gc=a("p"),W4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),qz=a("a"),H4r=o("from_pretrained()"),U4r=o(" class method or the "),Nz=a("a"),J4r=o("from_config()"),Y4r=o(` class
method.`),K4r=l(),uL=a("p"),Z4r=o("This class cannot be instantiated directly using "),z4e=a("code"),ebr=o("__init__()"),obr=o(" (throws an error)."),rbr=l(),Mt=a("div"),f(bL.$$.fragment),tbr=l(),Q4e=a("p"),abr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nbr=l(),Oc=a("p"),sbr=o(`Note:
Loading a model from its configuration file does `),W4e=a("strong"),lbr=o("not"),ibr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=a("a"),dbr=o("from_pretrained()"),cbr=o(" to load the model weights."),fbr=l(),H4e=a("p"),mbr=o("Examples:"),gbr=l(),f(FL.$$.fragment),hbr=l(),Eo=a("div"),f(vL.$$.fragment),pbr=l(),U4e=a("p"),_br=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ubr=l(),wn=a("p"),bbr=o("The model class to instantiate is selected based on the "),J4e=a("code"),Fbr=o("model_type"),vbr=o(` property of the config object (either
passed as an argument or loaded from `),Y4e=a("code"),Tbr=o("pretrained_model_name_or_path"),Mbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K4e=a("code"),Ebr=o("pretrained_model_name_or_path"),Cbr=o(":"),wbr=l(),Y=a("ul"),k6=a("li"),Z4e=a("strong"),Abr=o("albert"),ybr=o(" \u2014 "),Dz=a("a"),Lbr=o("TFAlbertForTokenClassification"),xbr=o(" (ALBERT model)"),kbr=l(),S6=a("li"),ebe=a("strong"),Sbr=o("bert"),Rbr=o(" \u2014 "),Gz=a("a"),Bbr=o("TFBertForTokenClassification"),Pbr=o(" (BERT model)"),$br=l(),R6=a("li"),obe=a("strong"),Ibr=o("camembert"),qbr=o(" \u2014 "),Oz=a("a"),Nbr=o("TFCamembertForTokenClassification"),jbr=o(" (CamemBERT model)"),Dbr=l(),B6=a("li"),rbe=a("strong"),Gbr=o("convbert"),Obr=o(" \u2014 "),Vz=a("a"),Vbr=o("TFConvBertForTokenClassification"),Xbr=o(" (ConvBERT model)"),zbr=l(),P6=a("li"),tbe=a("strong"),Qbr=o("deberta"),Wbr=o(" \u2014 "),Xz=a("a"),Hbr=o("TFDebertaForTokenClassification"),Ubr=o(" (DeBERTa model)"),Jbr=l(),$6=a("li"),abe=a("strong"),Ybr=o("deberta-v2"),Kbr=o(" \u2014 "),zz=a("a"),Zbr=o("TFDebertaV2ForTokenClassification"),e5r=o(" (DeBERTa-v2 model)"),o5r=l(),I6=a("li"),nbe=a("strong"),r5r=o("distilbert"),t5r=o(" \u2014 "),Qz=a("a"),a5r=o("TFDistilBertForTokenClassification"),n5r=o(" (DistilBERT model)"),s5r=l(),q6=a("li"),sbe=a("strong"),l5r=o("electra"),i5r=o(" \u2014 "),Wz=a("a"),d5r=o("TFElectraForTokenClassification"),c5r=o(" (ELECTRA model)"),f5r=l(),N6=a("li"),lbe=a("strong"),m5r=o("flaubert"),g5r=o(" \u2014 "),Hz=a("a"),h5r=o("TFFlaubertForTokenClassification"),p5r=o(" (FlauBERT model)"),_5r=l(),j6=a("li"),ibe=a("strong"),u5r=o("funnel"),b5r=o(" \u2014 "),Uz=a("a"),F5r=o("TFFunnelForTokenClassification"),v5r=o(" (Funnel Transformer model)"),T5r=l(),D6=a("li"),dbe=a("strong"),M5r=o("layoutlm"),E5r=o(" \u2014 "),Jz=a("a"),C5r=o("TFLayoutLMForTokenClassification"),w5r=o(" (LayoutLM model)"),A5r=l(),G6=a("li"),cbe=a("strong"),y5r=o("longformer"),L5r=o(" \u2014 "),Yz=a("a"),x5r=o("TFLongformerForTokenClassification"),k5r=o(" (Longformer model)"),S5r=l(),O6=a("li"),fbe=a("strong"),R5r=o("mobilebert"),B5r=o(" \u2014 "),Kz=a("a"),P5r=o("TFMobileBertForTokenClassification"),$5r=o(" (MobileBERT model)"),I5r=l(),V6=a("li"),mbe=a("strong"),q5r=o("mpnet"),N5r=o(" \u2014 "),Zz=a("a"),j5r=o("TFMPNetForTokenClassification"),D5r=o(" (MPNet model)"),G5r=l(),X6=a("li"),gbe=a("strong"),O5r=o("rembert"),V5r=o(" \u2014 "),eQ=a("a"),X5r=o("TFRemBertForTokenClassification"),z5r=o(" (RemBERT model)"),Q5r=l(),z6=a("li"),hbe=a("strong"),W5r=o("roberta"),H5r=o(" \u2014 "),oQ=a("a"),U5r=o("TFRobertaForTokenClassification"),J5r=o(" (RoBERTa model)"),Y5r=l(),Q6=a("li"),pbe=a("strong"),K5r=o("roformer"),Z5r=o(" \u2014 "),rQ=a("a"),e3r=o("TFRoFormerForTokenClassification"),o3r=o(" (RoFormer model)"),r3r=l(),W6=a("li"),_be=a("strong"),t3r=o("xlm"),a3r=o(" \u2014 "),tQ=a("a"),n3r=o("TFXLMForTokenClassification"),s3r=o(" (XLM model)"),l3r=l(),H6=a("li"),ube=a("strong"),i3r=o("xlm-roberta"),d3r=o(" \u2014 "),aQ=a("a"),c3r=o("TFXLMRobertaForTokenClassification"),f3r=o(" (XLM-RoBERTa model)"),m3r=l(),U6=a("li"),bbe=a("strong"),g3r=o("xlnet"),h3r=o(" \u2014 "),nQ=a("a"),p3r=o("TFXLNetForTokenClassification"),_3r=o(" (XLNet model)"),u3r=l(),Fbe=a("p"),b3r=o("Examples:"),F3r=l(),f(TL.$$.fragment),HBe=l(),Vc=a("h2"),J6=a("a"),vbe=a("span"),f(ML.$$.fragment),v3r=l(),Tbe=a("span"),T3r=o("TFAutoModelForQuestionAnswering"),UBe=l(),xr=a("div"),f(EL.$$.fragment),M3r=l(),Xc=a("p"),E3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sQ=a("a"),C3r=o("from_pretrained()"),w3r=o(" class method or the "),lQ=a("a"),A3r=o("from_config()"),y3r=o(` class
method.`),L3r=l(),CL=a("p"),x3r=o("This class cannot be instantiated directly using "),Mbe=a("code"),k3r=o("__init__()"),S3r=o(" (throws an error)."),R3r=l(),Et=a("div"),f(wL.$$.fragment),B3r=l(),Ebe=a("p"),P3r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$3r=l(),zc=a("p"),I3r=o(`Note:
Loading a model from its configuration file does `),Cbe=a("strong"),q3r=o("not"),N3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=a("a"),j3r=o("from_pretrained()"),D3r=o(" to load the model weights."),G3r=l(),wbe=a("p"),O3r=o("Examples:"),V3r=l(),f(AL.$$.fragment),X3r=l(),Co=a("div"),f(yL.$$.fragment),z3r=l(),Abe=a("p"),Q3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),W3r=l(),An=a("p"),H3r=o("The model class to instantiate is selected based on the "),ybe=a("code"),U3r=o("model_type"),J3r=o(` property of the config object (either
passed as an argument or loaded from `),Lbe=a("code"),Y3r=o("pretrained_model_name_or_path"),K3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),Z3r=o("pretrained_model_name_or_path"),e2r=o(":"),o2r=l(),K=a("ul"),Y6=a("li"),kbe=a("strong"),r2r=o("albert"),t2r=o(" \u2014 "),dQ=a("a"),a2r=o("TFAlbertForQuestionAnswering"),n2r=o(" (ALBERT model)"),s2r=l(),K6=a("li"),Sbe=a("strong"),l2r=o("bert"),i2r=o(" \u2014 "),cQ=a("a"),d2r=o("TFBertForQuestionAnswering"),c2r=o(" (BERT model)"),f2r=l(),Z6=a("li"),Rbe=a("strong"),m2r=o("camembert"),g2r=o(" \u2014 "),fQ=a("a"),h2r=o("TFCamembertForQuestionAnswering"),p2r=o(" (CamemBERT model)"),_2r=l(),eT=a("li"),Bbe=a("strong"),u2r=o("convbert"),b2r=o(" \u2014 "),mQ=a("a"),F2r=o("TFConvBertForQuestionAnswering"),v2r=o(" (ConvBERT model)"),T2r=l(),oT=a("li"),Pbe=a("strong"),M2r=o("deberta"),E2r=o(" \u2014 "),gQ=a("a"),C2r=o("TFDebertaForQuestionAnswering"),w2r=o(" (DeBERTa model)"),A2r=l(),rT=a("li"),$be=a("strong"),y2r=o("deberta-v2"),L2r=o(" \u2014 "),hQ=a("a"),x2r=o("TFDebertaV2ForQuestionAnswering"),k2r=o(" (DeBERTa-v2 model)"),S2r=l(),tT=a("li"),Ibe=a("strong"),R2r=o("distilbert"),B2r=o(" \u2014 "),pQ=a("a"),P2r=o("TFDistilBertForQuestionAnswering"),$2r=o(" (DistilBERT model)"),I2r=l(),aT=a("li"),qbe=a("strong"),q2r=o("electra"),N2r=o(" \u2014 "),_Q=a("a"),j2r=o("TFElectraForQuestionAnswering"),D2r=o(" (ELECTRA model)"),G2r=l(),nT=a("li"),Nbe=a("strong"),O2r=o("flaubert"),V2r=o(" \u2014 "),uQ=a("a"),X2r=o("TFFlaubertForQuestionAnsweringSimple"),z2r=o(" (FlauBERT model)"),Q2r=l(),sT=a("li"),jbe=a("strong"),W2r=o("funnel"),H2r=o(" \u2014 "),bQ=a("a"),U2r=o("TFFunnelForQuestionAnswering"),J2r=o(" (Funnel Transformer model)"),Y2r=l(),lT=a("li"),Dbe=a("strong"),K2r=o("gptj"),Z2r=o(" \u2014 "),FQ=a("a"),eFr=o("TFGPTJForQuestionAnswering"),oFr=o(" (GPT-J model)"),rFr=l(),iT=a("li"),Gbe=a("strong"),tFr=o("longformer"),aFr=o(" \u2014 "),vQ=a("a"),nFr=o("TFLongformerForQuestionAnswering"),sFr=o(" (Longformer model)"),lFr=l(),dT=a("li"),Obe=a("strong"),iFr=o("mobilebert"),dFr=o(" \u2014 "),TQ=a("a"),cFr=o("TFMobileBertForQuestionAnswering"),fFr=o(" (MobileBERT model)"),mFr=l(),cT=a("li"),Vbe=a("strong"),gFr=o("mpnet"),hFr=o(" \u2014 "),MQ=a("a"),pFr=o("TFMPNetForQuestionAnswering"),_Fr=o(" (MPNet model)"),uFr=l(),fT=a("li"),Xbe=a("strong"),bFr=o("rembert"),FFr=o(" \u2014 "),EQ=a("a"),vFr=o("TFRemBertForQuestionAnswering"),TFr=o(" (RemBERT model)"),MFr=l(),mT=a("li"),zbe=a("strong"),EFr=o("roberta"),CFr=o(" \u2014 "),CQ=a("a"),wFr=o("TFRobertaForQuestionAnswering"),AFr=o(" (RoBERTa model)"),yFr=l(),gT=a("li"),Qbe=a("strong"),LFr=o("roformer"),xFr=o(" \u2014 "),wQ=a("a"),kFr=o("TFRoFormerForQuestionAnswering"),SFr=o(" (RoFormer model)"),RFr=l(),hT=a("li"),Wbe=a("strong"),BFr=o("xlm"),PFr=o(" \u2014 "),AQ=a("a"),$Fr=o("TFXLMForQuestionAnsweringSimple"),IFr=o(" (XLM model)"),qFr=l(),pT=a("li"),Hbe=a("strong"),NFr=o("xlm-roberta"),jFr=o(" \u2014 "),yQ=a("a"),DFr=o("TFXLMRobertaForQuestionAnswering"),GFr=o(" (XLM-RoBERTa model)"),OFr=l(),_T=a("li"),Ube=a("strong"),VFr=o("xlnet"),XFr=o(" \u2014 "),LQ=a("a"),zFr=o("TFXLNetForQuestionAnsweringSimple"),QFr=o(" (XLNet model)"),WFr=l(),Jbe=a("p"),HFr=o("Examples:"),UFr=l(),f(LL.$$.fragment),JBe=l(),Qc=a("h2"),uT=a("a"),Ybe=a("span"),f(xL.$$.fragment),JFr=l(),Kbe=a("span"),YFr=o("TFAutoModelForVision2Seq"),YBe=l(),kr=a("div"),f(kL.$$.fragment),KFr=l(),Wc=a("p"),ZFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xQ=a("a"),evr=o("from_pretrained()"),ovr=o(" class method or the "),kQ=a("a"),rvr=o("from_config()"),tvr=o(` class
method.`),avr=l(),SL=a("p"),nvr=o("This class cannot be instantiated directly using "),Zbe=a("code"),svr=o("__init__()"),lvr=o(" (throws an error)."),ivr=l(),Ct=a("div"),f(RL.$$.fragment),dvr=l(),e5e=a("p"),cvr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fvr=l(),Hc=a("p"),mvr=o(`Note:
Loading a model from its configuration file does `),o5e=a("strong"),gvr=o("not"),hvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),pvr=o("from_pretrained()"),_vr=o(" to load the model weights."),uvr=l(),r5e=a("p"),bvr=o("Examples:"),Fvr=l(),f(BL.$$.fragment),vvr=l(),wo=a("div"),f(PL.$$.fragment),Tvr=l(),t5e=a("p"),Mvr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Evr=l(),yn=a("p"),Cvr=o("The model class to instantiate is selected based on the "),a5e=a("code"),wvr=o("model_type"),Avr=o(` property of the config object (either
passed as an argument or loaded from `),n5e=a("code"),yvr=o("pretrained_model_name_or_path"),Lvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=a("code"),xvr=o("pretrained_model_name_or_path"),kvr=o(":"),Svr=l(),l5e=a("ul"),bT=a("li"),i5e=a("strong"),Rvr=o("vision-encoder-decoder"),Bvr=o(" \u2014 "),RQ=a("a"),Pvr=o("TFVisionEncoderDecoderModel"),$vr=o(" (Vision Encoder decoder model)"),Ivr=l(),d5e=a("p"),qvr=o("Examples:"),Nvr=l(),f($L.$$.fragment),KBe=l(),Uc=a("h2"),FT=a("a"),c5e=a("span"),f(IL.$$.fragment),jvr=l(),f5e=a("span"),Dvr=o("TFAutoModelForSpeechSeq2Seq"),ZBe=l(),Sr=a("div"),f(qL.$$.fragment),Gvr=l(),Jc=a("p"),Ovr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BQ=a("a"),Vvr=o("from_pretrained()"),Xvr=o(" class method or the "),PQ=a("a"),zvr=o("from_config()"),Qvr=o(` class
method.`),Wvr=l(),NL=a("p"),Hvr=o("This class cannot be instantiated directly using "),m5e=a("code"),Uvr=o("__init__()"),Jvr=o(" (throws an error)."),Yvr=l(),wt=a("div"),f(jL.$$.fragment),Kvr=l(),g5e=a("p"),Zvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),e6r=l(),Yc=a("p"),o6r=o(`Note:
Loading a model from its configuration file does `),h5e=a("strong"),r6r=o("not"),t6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),a6r=o("from_pretrained()"),n6r=o(" to load the model weights."),s6r=l(),p5e=a("p"),l6r=o("Examples:"),i6r=l(),f(DL.$$.fragment),d6r=l(),Ao=a("div"),f(GL.$$.fragment),c6r=l(),_5e=a("p"),f6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),m6r=l(),Ln=a("p"),g6r=o("The model class to instantiate is selected based on the "),u5e=a("code"),h6r=o("model_type"),p6r=o(` property of the config object (either
passed as an argument or loaded from `),b5e=a("code"),_6r=o("pretrained_model_name_or_path"),u6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=a("code"),b6r=o("pretrained_model_name_or_path"),F6r=o(":"),v6r=l(),v5e=a("ul"),vT=a("li"),T5e=a("strong"),T6r=o("speech_to_text"),M6r=o(" \u2014 "),IQ=a("a"),E6r=o("TFSpeech2TextForConditionalGeneration"),C6r=o(" (Speech2Text model)"),w6r=l(),M5e=a("p"),A6r=o("Examples:"),y6r=l(),f(OL.$$.fragment),ePe=l(),Kc=a("h2"),TT=a("a"),E5e=a("span"),f(VL.$$.fragment),L6r=l(),C5e=a("span"),x6r=o("FlaxAutoModel"),oPe=l(),Rr=a("div"),f(XL.$$.fragment),k6r=l(),Zc=a("p"),S6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qQ=a("a"),R6r=o("from_pretrained()"),B6r=o(" class method or the "),NQ=a("a"),P6r=o("from_config()"),$6r=o(` class
method.`),I6r=l(),zL=a("p"),q6r=o("This class cannot be instantiated directly using "),w5e=a("code"),N6r=o("__init__()"),j6r=o(" (throws an error)."),D6r=l(),At=a("div"),f(QL.$$.fragment),G6r=l(),A5e=a("p"),O6r=o("Instantiates one of the base model classes of the library from a configuration."),V6r=l(),ef=a("p"),X6r=o(`Note:
Loading a model from its configuration file does `),y5e=a("strong"),z6r=o("not"),Q6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=a("a"),W6r=o("from_pretrained()"),H6r=o(" to load the model weights."),U6r=l(),L5e=a("p"),J6r=o("Examples:"),Y6r=l(),f(WL.$$.fragment),K6r=l(),yo=a("div"),f(HL.$$.fragment),Z6r=l(),x5e=a("p"),eTr=o("Instantiate one of the base model classes of the library from a pretrained model."),oTr=l(),xn=a("p"),rTr=o("The model class to instantiate is selected based on the "),k5e=a("code"),tTr=o("model_type"),aTr=o(` property of the config object (either
passed as an argument or loaded from `),S5e=a("code"),nTr=o("pretrained_model_name_or_path"),sTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=a("code"),lTr=o("pretrained_model_name_or_path"),iTr=o(":"),dTr=l(),z=a("ul"),MT=a("li"),B5e=a("strong"),cTr=o("albert"),fTr=o(" \u2014 "),DQ=a("a"),mTr=o("FlaxAlbertModel"),gTr=o(" (ALBERT model)"),hTr=l(),ET=a("li"),P5e=a("strong"),pTr=o("bart"),_Tr=o(" \u2014 "),GQ=a("a"),uTr=o("FlaxBartModel"),bTr=o(" (BART model)"),FTr=l(),CT=a("li"),$5e=a("strong"),vTr=o("beit"),TTr=o(" \u2014 "),OQ=a("a"),MTr=o("FlaxBeitModel"),ETr=o(" (BEiT model)"),CTr=l(),wT=a("li"),I5e=a("strong"),wTr=o("bert"),ATr=o(" \u2014 "),VQ=a("a"),yTr=o("FlaxBertModel"),LTr=o(" (BERT model)"),xTr=l(),AT=a("li"),q5e=a("strong"),kTr=o("big_bird"),STr=o(" \u2014 "),XQ=a("a"),RTr=o("FlaxBigBirdModel"),BTr=o(" (BigBird model)"),PTr=l(),yT=a("li"),N5e=a("strong"),$Tr=o("blenderbot"),ITr=o(" \u2014 "),zQ=a("a"),qTr=o("FlaxBlenderbotModel"),NTr=o(" (Blenderbot model)"),jTr=l(),LT=a("li"),j5e=a("strong"),DTr=o("blenderbot-small"),GTr=o(" \u2014 "),QQ=a("a"),OTr=o("FlaxBlenderbotSmallModel"),VTr=o(" (BlenderbotSmall model)"),XTr=l(),xT=a("li"),D5e=a("strong"),zTr=o("clip"),QTr=o(" \u2014 "),WQ=a("a"),WTr=o("FlaxCLIPModel"),HTr=o(" (CLIP model)"),UTr=l(),kT=a("li"),G5e=a("strong"),JTr=o("distilbert"),YTr=o(" \u2014 "),HQ=a("a"),KTr=o("FlaxDistilBertModel"),ZTr=o(" (DistilBERT model)"),eMr=l(),ST=a("li"),O5e=a("strong"),oMr=o("electra"),rMr=o(" \u2014 "),UQ=a("a"),tMr=o("FlaxElectraModel"),aMr=o(" (ELECTRA model)"),nMr=l(),RT=a("li"),V5e=a("strong"),sMr=o("gpt2"),lMr=o(" \u2014 "),JQ=a("a"),iMr=o("FlaxGPT2Model"),dMr=o(" (OpenAI GPT-2 model)"),cMr=l(),BT=a("li"),X5e=a("strong"),fMr=o("gpt_neo"),mMr=o(" \u2014 "),YQ=a("a"),gMr=o("FlaxGPTNeoModel"),hMr=o(" (GPT Neo model)"),pMr=l(),PT=a("li"),z5e=a("strong"),_Mr=o("gptj"),uMr=o(" \u2014 "),KQ=a("a"),bMr=o("FlaxGPTJModel"),FMr=o(" (GPT-J model)"),vMr=l(),$T=a("li"),Q5e=a("strong"),TMr=o("marian"),MMr=o(" \u2014 "),ZQ=a("a"),EMr=o("FlaxMarianModel"),CMr=o(" (Marian model)"),wMr=l(),IT=a("li"),W5e=a("strong"),AMr=o("mbart"),yMr=o(" \u2014 "),eW=a("a"),LMr=o("FlaxMBartModel"),xMr=o(" (mBART model)"),kMr=l(),qT=a("li"),H5e=a("strong"),SMr=o("mt5"),RMr=o(" \u2014 "),oW=a("a"),BMr=o("FlaxMT5Model"),PMr=o(" (mT5 model)"),$Mr=l(),NT=a("li"),U5e=a("strong"),IMr=o("pegasus"),qMr=o(" \u2014 "),rW=a("a"),NMr=o("FlaxPegasusModel"),jMr=o(" (Pegasus model)"),DMr=l(),jT=a("li"),J5e=a("strong"),GMr=o("roberta"),OMr=o(" \u2014 "),tW=a("a"),VMr=o("FlaxRobertaModel"),XMr=o(" (RoBERTa model)"),zMr=l(),DT=a("li"),Y5e=a("strong"),QMr=o("roformer"),WMr=o(" \u2014 "),aW=a("a"),HMr=o("FlaxRoFormerModel"),UMr=o(" (RoFormer model)"),JMr=l(),GT=a("li"),K5e=a("strong"),YMr=o("t5"),KMr=o(" \u2014 "),nW=a("a"),ZMr=o("FlaxT5Model"),eEr=o(" (T5 model)"),oEr=l(),OT=a("li"),Z5e=a("strong"),rEr=o("vision-text-dual-encoder"),tEr=o(" \u2014 "),sW=a("a"),aEr=o("FlaxVisionTextDualEncoderModel"),nEr=o(" (VisionTextDualEncoder model)"),sEr=l(),VT=a("li"),e3e=a("strong"),lEr=o("vit"),iEr=o(" \u2014 "),lW=a("a"),dEr=o("FlaxViTModel"),cEr=o(" (ViT model)"),fEr=l(),XT=a("li"),o3e=a("strong"),mEr=o("wav2vec2"),gEr=o(" \u2014 "),iW=a("a"),hEr=o("FlaxWav2Vec2Model"),pEr=o(" (Wav2Vec2 model)"),_Er=l(),zT=a("li"),r3e=a("strong"),uEr=o("xglm"),bEr=o(" \u2014 "),dW=a("a"),FEr=o("FlaxXGLMModel"),vEr=o(" (XGLM model)"),TEr=l(),QT=a("li"),t3e=a("strong"),MEr=o("xlm-roberta"),EEr=o(" \u2014 "),cW=a("a"),CEr=o("FlaxXLMRobertaModel"),wEr=o(" (XLM-RoBERTa model)"),AEr=l(),a3e=a("p"),yEr=o("Examples:"),LEr=l(),f(UL.$$.fragment),rPe=l(),of=a("h2"),WT=a("a"),n3e=a("span"),f(JL.$$.fragment),xEr=l(),s3e=a("span"),kEr=o("FlaxAutoModelForCausalLM"),tPe=l(),Br=a("div"),f(YL.$$.fragment),SEr=l(),rf=a("p"),REr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fW=a("a"),BEr=o("from_pretrained()"),PEr=o(" class method or the "),mW=a("a"),$Er=o("from_config()"),IEr=o(` class
method.`),qEr=l(),KL=a("p"),NEr=o("This class cannot be instantiated directly using "),l3e=a("code"),jEr=o("__init__()"),DEr=o(" (throws an error)."),GEr=l(),yt=a("div"),f(ZL.$$.fragment),OEr=l(),i3e=a("p"),VEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),XEr=l(),tf=a("p"),zEr=o(`Note:
Loading a model from its configuration file does `),d3e=a("strong"),QEr=o("not"),WEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),HEr=o("from_pretrained()"),UEr=o(" to load the model weights."),JEr=l(),c3e=a("p"),YEr=o("Examples:"),KEr=l(),f(e8.$$.fragment),ZEr=l(),Lo=a("div"),f(o8.$$.fragment),eCr=l(),f3e=a("p"),oCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rCr=l(),kn=a("p"),tCr=o("The model class to instantiate is selected based on the "),m3e=a("code"),aCr=o("model_type"),nCr=o(` property of the config object (either
passed as an argument or loaded from `),g3e=a("code"),sCr=o("pretrained_model_name_or_path"),lCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h3e=a("code"),iCr=o("pretrained_model_name_or_path"),dCr=o(":"),cCr=l(),ca=a("ul"),HT=a("li"),p3e=a("strong"),fCr=o("bart"),mCr=o(" \u2014 "),hW=a("a"),gCr=o("FlaxBartForCausalLM"),hCr=o(" (BART model)"),pCr=l(),UT=a("li"),_3e=a("strong"),_Cr=o("gpt2"),uCr=o(" \u2014 "),pW=a("a"),bCr=o("FlaxGPT2LMHeadModel"),FCr=o(" (OpenAI GPT-2 model)"),vCr=l(),JT=a("li"),u3e=a("strong"),TCr=o("gpt_neo"),MCr=o(" \u2014 "),_W=a("a"),ECr=o("FlaxGPTNeoForCausalLM"),CCr=o(" (GPT Neo model)"),wCr=l(),YT=a("li"),b3e=a("strong"),ACr=o("gptj"),yCr=o(" \u2014 "),uW=a("a"),LCr=o("FlaxGPTJForCausalLM"),xCr=o(" (GPT-J model)"),kCr=l(),KT=a("li"),F3e=a("strong"),SCr=o("xglm"),RCr=o(" \u2014 "),bW=a("a"),BCr=o("FlaxXGLMForCausalLM"),PCr=o(" (XGLM model)"),$Cr=l(),v3e=a("p"),ICr=o("Examples:"),qCr=l(),f(r8.$$.fragment),aPe=l(),af=a("h2"),ZT=a("a"),T3e=a("span"),f(t8.$$.fragment),NCr=l(),M3e=a("span"),jCr=o("FlaxAutoModelForPreTraining"),nPe=l(),Pr=a("div"),f(a8.$$.fragment),DCr=l(),nf=a("p"),GCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FW=a("a"),OCr=o("from_pretrained()"),VCr=o(" class method or the "),vW=a("a"),XCr=o("from_config()"),zCr=o(` class
method.`),QCr=l(),n8=a("p"),WCr=o("This class cannot be instantiated directly using "),E3e=a("code"),HCr=o("__init__()"),UCr=o(" (throws an error)."),JCr=l(),Lt=a("div"),f(s8.$$.fragment),YCr=l(),C3e=a("p"),KCr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ZCr=l(),sf=a("p"),ewr=o(`Note:
Loading a model from its configuration file does `),w3e=a("strong"),owr=o("not"),rwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),twr=o("from_pretrained()"),awr=o(" to load the model weights."),nwr=l(),A3e=a("p"),swr=o("Examples:"),lwr=l(),f(l8.$$.fragment),iwr=l(),xo=a("div"),f(i8.$$.fragment),dwr=l(),y3e=a("p"),cwr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fwr=l(),Sn=a("p"),mwr=o("The model class to instantiate is selected based on the "),L3e=a("code"),gwr=o("model_type"),hwr=o(` property of the config object (either
passed as an argument or loaded from `),x3e=a("code"),pwr=o("pretrained_model_name_or_path"),_wr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k3e=a("code"),uwr=o("pretrained_model_name_or_path"),bwr=o(":"),Fwr=l(),me=a("ul"),eM=a("li"),S3e=a("strong"),vwr=o("albert"),Twr=o(" \u2014 "),MW=a("a"),Mwr=o("FlaxAlbertForPreTraining"),Ewr=o(" (ALBERT model)"),Cwr=l(),oM=a("li"),R3e=a("strong"),wwr=o("bart"),Awr=o(" \u2014 "),EW=a("a"),ywr=o("FlaxBartForConditionalGeneration"),Lwr=o(" (BART model)"),xwr=l(),rM=a("li"),B3e=a("strong"),kwr=o("bert"),Swr=o(" \u2014 "),CW=a("a"),Rwr=o("FlaxBertForPreTraining"),Bwr=o(" (BERT model)"),Pwr=l(),tM=a("li"),P3e=a("strong"),$wr=o("big_bird"),Iwr=o(" \u2014 "),wW=a("a"),qwr=o("FlaxBigBirdForPreTraining"),Nwr=o(" (BigBird model)"),jwr=l(),aM=a("li"),$3e=a("strong"),Dwr=o("electra"),Gwr=o(" \u2014 "),AW=a("a"),Owr=o("FlaxElectraForPreTraining"),Vwr=o(" (ELECTRA model)"),Xwr=l(),nM=a("li"),I3e=a("strong"),zwr=o("mbart"),Qwr=o(" \u2014 "),yW=a("a"),Wwr=o("FlaxMBartForConditionalGeneration"),Hwr=o(" (mBART model)"),Uwr=l(),sM=a("li"),q3e=a("strong"),Jwr=o("mt5"),Ywr=o(" \u2014 "),LW=a("a"),Kwr=o("FlaxMT5ForConditionalGeneration"),Zwr=o(" (mT5 model)"),eAr=l(),lM=a("li"),N3e=a("strong"),oAr=o("roberta"),rAr=o(" \u2014 "),xW=a("a"),tAr=o("FlaxRobertaForMaskedLM"),aAr=o(" (RoBERTa model)"),nAr=l(),iM=a("li"),j3e=a("strong"),sAr=o("roformer"),lAr=o(" \u2014 "),kW=a("a"),iAr=o("FlaxRoFormerForMaskedLM"),dAr=o(" (RoFormer model)"),cAr=l(),dM=a("li"),D3e=a("strong"),fAr=o("t5"),mAr=o(" \u2014 "),SW=a("a"),gAr=o("FlaxT5ForConditionalGeneration"),hAr=o(" (T5 model)"),pAr=l(),cM=a("li"),G3e=a("strong"),_Ar=o("wav2vec2"),uAr=o(" \u2014 "),RW=a("a"),bAr=o("FlaxWav2Vec2ForPreTraining"),FAr=o(" (Wav2Vec2 model)"),vAr=l(),fM=a("li"),O3e=a("strong"),TAr=o("xlm-roberta"),MAr=o(" \u2014 "),BW=a("a"),EAr=o("FlaxXLMRobertaForMaskedLM"),CAr=o(" (XLM-RoBERTa model)"),wAr=l(),V3e=a("p"),AAr=o("Examples:"),yAr=l(),f(d8.$$.fragment),sPe=l(),lf=a("h2"),mM=a("a"),X3e=a("span"),f(c8.$$.fragment),LAr=l(),z3e=a("span"),xAr=o("FlaxAutoModelForMaskedLM"),lPe=l(),$r=a("div"),f(f8.$$.fragment),kAr=l(),df=a("p"),SAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PW=a("a"),RAr=o("from_pretrained()"),BAr=o(" class method or the "),$W=a("a"),PAr=o("from_config()"),$Ar=o(` class
method.`),IAr=l(),m8=a("p"),qAr=o("This class cannot be instantiated directly using "),Q3e=a("code"),NAr=o("__init__()"),jAr=o(" (throws an error)."),DAr=l(),xt=a("div"),f(g8.$$.fragment),GAr=l(),W3e=a("p"),OAr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),VAr=l(),cf=a("p"),XAr=o(`Note:
Loading a model from its configuration file does `),H3e=a("strong"),zAr=o("not"),QAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),WAr=o("from_pretrained()"),HAr=o(" to load the model weights."),UAr=l(),U3e=a("p"),JAr=o("Examples:"),YAr=l(),f(h8.$$.fragment),KAr=l(),ko=a("div"),f(p8.$$.fragment),ZAr=l(),J3e=a("p"),e0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),o0r=l(),Rn=a("p"),r0r=o("The model class to instantiate is selected based on the "),Y3e=a("code"),t0r=o("model_type"),a0r=o(` property of the config object (either
passed as an argument or loaded from `),K3e=a("code"),n0r=o("pretrained_model_name_or_path"),s0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z3e=a("code"),l0r=o("pretrained_model_name_or_path"),i0r=o(":"),d0r=l(),Fe=a("ul"),gM=a("li"),e2e=a("strong"),c0r=o("albert"),f0r=o(" \u2014 "),qW=a("a"),m0r=o("FlaxAlbertForMaskedLM"),g0r=o(" (ALBERT model)"),h0r=l(),hM=a("li"),o2e=a("strong"),p0r=o("bart"),_0r=o(" \u2014 "),NW=a("a"),u0r=o("FlaxBartForConditionalGeneration"),b0r=o(" (BART model)"),F0r=l(),pM=a("li"),r2e=a("strong"),v0r=o("bert"),T0r=o(" \u2014 "),jW=a("a"),M0r=o("FlaxBertForMaskedLM"),E0r=o(" (BERT model)"),C0r=l(),_M=a("li"),t2e=a("strong"),w0r=o("big_bird"),A0r=o(" \u2014 "),DW=a("a"),y0r=o("FlaxBigBirdForMaskedLM"),L0r=o(" (BigBird model)"),x0r=l(),uM=a("li"),a2e=a("strong"),k0r=o("distilbert"),S0r=o(" \u2014 "),GW=a("a"),R0r=o("FlaxDistilBertForMaskedLM"),B0r=o(" (DistilBERT model)"),P0r=l(),bM=a("li"),n2e=a("strong"),$0r=o("electra"),I0r=o(" \u2014 "),OW=a("a"),q0r=o("FlaxElectraForMaskedLM"),N0r=o(" (ELECTRA model)"),j0r=l(),FM=a("li"),s2e=a("strong"),D0r=o("mbart"),G0r=o(" \u2014 "),VW=a("a"),O0r=o("FlaxMBartForConditionalGeneration"),V0r=o(" (mBART model)"),X0r=l(),vM=a("li"),l2e=a("strong"),z0r=o("roberta"),Q0r=o(" \u2014 "),XW=a("a"),W0r=o("FlaxRobertaForMaskedLM"),H0r=o(" (RoBERTa model)"),U0r=l(),TM=a("li"),i2e=a("strong"),J0r=o("roformer"),Y0r=o(" \u2014 "),zW=a("a"),K0r=o("FlaxRoFormerForMaskedLM"),Z0r=o(" (RoFormer model)"),eyr=l(),MM=a("li"),d2e=a("strong"),oyr=o("xlm-roberta"),ryr=o(" \u2014 "),QW=a("a"),tyr=o("FlaxXLMRobertaForMaskedLM"),ayr=o(" (XLM-RoBERTa model)"),nyr=l(),c2e=a("p"),syr=o("Examples:"),lyr=l(),f(_8.$$.fragment),iPe=l(),ff=a("h2"),EM=a("a"),f2e=a("span"),f(u8.$$.fragment),iyr=l(),m2e=a("span"),dyr=o("FlaxAutoModelForSeq2SeqLM"),dPe=l(),Ir=a("div"),f(b8.$$.fragment),cyr=l(),mf=a("p"),fyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WW=a("a"),myr=o("from_pretrained()"),gyr=o(" class method or the "),HW=a("a"),hyr=o("from_config()"),pyr=o(` class
method.`),_yr=l(),F8=a("p"),uyr=o("This class cannot be instantiated directly using "),g2e=a("code"),byr=o("__init__()"),Fyr=o(" (throws an error)."),vyr=l(),kt=a("div"),f(v8.$$.fragment),Tyr=l(),h2e=a("p"),Myr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Eyr=l(),gf=a("p"),Cyr=o(`Note:
Loading a model from its configuration file does `),p2e=a("strong"),wyr=o("not"),Ayr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),yyr=o("from_pretrained()"),Lyr=o(" to load the model weights."),xyr=l(),_2e=a("p"),kyr=o("Examples:"),Syr=l(),f(T8.$$.fragment),Ryr=l(),So=a("div"),f(M8.$$.fragment),Byr=l(),u2e=a("p"),Pyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$yr=l(),Bn=a("p"),Iyr=o("The model class to instantiate is selected based on the "),b2e=a("code"),qyr=o("model_type"),Nyr=o(` property of the config object (either
passed as an argument or loaded from `),F2e=a("code"),jyr=o("pretrained_model_name_or_path"),Dyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v2e=a("code"),Gyr=o("pretrained_model_name_or_path"),Oyr=o(":"),Vyr=l(),Ee=a("ul"),CM=a("li"),T2e=a("strong"),Xyr=o("bart"),zyr=o(" \u2014 "),JW=a("a"),Qyr=o("FlaxBartForConditionalGeneration"),Wyr=o(" (BART model)"),Hyr=l(),wM=a("li"),M2e=a("strong"),Uyr=o("blenderbot"),Jyr=o(" \u2014 "),YW=a("a"),Yyr=o("FlaxBlenderbotForConditionalGeneration"),Kyr=o(" (Blenderbot model)"),Zyr=l(),AM=a("li"),E2e=a("strong"),eLr=o("blenderbot-small"),oLr=o(" \u2014 "),KW=a("a"),rLr=o("FlaxBlenderbotSmallForConditionalGeneration"),tLr=o(" (BlenderbotSmall model)"),aLr=l(),yM=a("li"),C2e=a("strong"),nLr=o("encoder-decoder"),sLr=o(" \u2014 "),ZW=a("a"),lLr=o("FlaxEncoderDecoderModel"),iLr=o(" (Encoder decoder model)"),dLr=l(),LM=a("li"),w2e=a("strong"),cLr=o("marian"),fLr=o(" \u2014 "),eH=a("a"),mLr=o("FlaxMarianMTModel"),gLr=o(" (Marian model)"),hLr=l(),xM=a("li"),A2e=a("strong"),pLr=o("mbart"),_Lr=o(" \u2014 "),oH=a("a"),uLr=o("FlaxMBartForConditionalGeneration"),bLr=o(" (mBART model)"),FLr=l(),kM=a("li"),y2e=a("strong"),vLr=o("mt5"),TLr=o(" \u2014 "),rH=a("a"),MLr=o("FlaxMT5ForConditionalGeneration"),ELr=o(" (mT5 model)"),CLr=l(),SM=a("li"),L2e=a("strong"),wLr=o("pegasus"),ALr=o(" \u2014 "),tH=a("a"),yLr=o("FlaxPegasusForConditionalGeneration"),LLr=o(" (Pegasus model)"),xLr=l(),RM=a("li"),x2e=a("strong"),kLr=o("t5"),SLr=o(" \u2014 "),aH=a("a"),RLr=o("FlaxT5ForConditionalGeneration"),BLr=o(" (T5 model)"),PLr=l(),k2e=a("p"),$Lr=o("Examples:"),ILr=l(),f(E8.$$.fragment),cPe=l(),hf=a("h2"),BM=a("a"),S2e=a("span"),f(C8.$$.fragment),qLr=l(),R2e=a("span"),NLr=o("FlaxAutoModelForSequenceClassification"),fPe=l(),qr=a("div"),f(w8.$$.fragment),jLr=l(),pf=a("p"),DLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nH=a("a"),GLr=o("from_pretrained()"),OLr=o(" class method or the "),sH=a("a"),VLr=o("from_config()"),XLr=o(` class
method.`),zLr=l(),A8=a("p"),QLr=o("This class cannot be instantiated directly using "),B2e=a("code"),WLr=o("__init__()"),HLr=o(" (throws an error)."),ULr=l(),St=a("div"),f(y8.$$.fragment),JLr=l(),P2e=a("p"),YLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KLr=l(),_f=a("p"),ZLr=o(`Note:
Loading a model from its configuration file does `),$2e=a("strong"),e8r=o("not"),o8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),r8r=o("from_pretrained()"),t8r=o(" to load the model weights."),a8r=l(),I2e=a("p"),n8r=o("Examples:"),s8r=l(),f(L8.$$.fragment),l8r=l(),Ro=a("div"),f(x8.$$.fragment),i8r=l(),q2e=a("p"),d8r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),c8r=l(),Pn=a("p"),f8r=o("The model class to instantiate is selected based on the "),N2e=a("code"),m8r=o("model_type"),g8r=o(` property of the config object (either
passed as an argument or loaded from `),j2e=a("code"),h8r=o("pretrained_model_name_or_path"),p8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D2e=a("code"),_8r=o("pretrained_model_name_or_path"),u8r=o(":"),b8r=l(),ve=a("ul"),PM=a("li"),G2e=a("strong"),F8r=o("albert"),v8r=o(" \u2014 "),iH=a("a"),T8r=o("FlaxAlbertForSequenceClassification"),M8r=o(" (ALBERT model)"),E8r=l(),$M=a("li"),O2e=a("strong"),C8r=o("bart"),w8r=o(" \u2014 "),dH=a("a"),A8r=o("FlaxBartForSequenceClassification"),y8r=o(" (BART model)"),L8r=l(),IM=a("li"),V2e=a("strong"),x8r=o("bert"),k8r=o(" \u2014 "),cH=a("a"),S8r=o("FlaxBertForSequenceClassification"),R8r=o(" (BERT model)"),B8r=l(),qM=a("li"),X2e=a("strong"),P8r=o("big_bird"),$8r=o(" \u2014 "),fH=a("a"),I8r=o("FlaxBigBirdForSequenceClassification"),q8r=o(" (BigBird model)"),N8r=l(),NM=a("li"),z2e=a("strong"),j8r=o("distilbert"),D8r=o(" \u2014 "),mH=a("a"),G8r=o("FlaxDistilBertForSequenceClassification"),O8r=o(" (DistilBERT model)"),V8r=l(),jM=a("li"),Q2e=a("strong"),X8r=o("electra"),z8r=o(" \u2014 "),gH=a("a"),Q8r=o("FlaxElectraForSequenceClassification"),W8r=o(" (ELECTRA model)"),H8r=l(),DM=a("li"),W2e=a("strong"),U8r=o("mbart"),J8r=o(" \u2014 "),hH=a("a"),Y8r=o("FlaxMBartForSequenceClassification"),K8r=o(" (mBART model)"),Z8r=l(),GM=a("li"),H2e=a("strong"),e7r=o("roberta"),o7r=o(" \u2014 "),pH=a("a"),r7r=o("FlaxRobertaForSequenceClassification"),t7r=o(" (RoBERTa model)"),a7r=l(),OM=a("li"),U2e=a("strong"),n7r=o("roformer"),s7r=o(" \u2014 "),_H=a("a"),l7r=o("FlaxRoFormerForSequenceClassification"),i7r=o(" (RoFormer model)"),d7r=l(),VM=a("li"),J2e=a("strong"),c7r=o("xlm-roberta"),f7r=o(" \u2014 "),uH=a("a"),m7r=o("FlaxXLMRobertaForSequenceClassification"),g7r=o(" (XLM-RoBERTa model)"),h7r=l(),Y2e=a("p"),p7r=o("Examples:"),_7r=l(),f(k8.$$.fragment),mPe=l(),uf=a("h2"),XM=a("a"),K2e=a("span"),f(S8.$$.fragment),u7r=l(),Z2e=a("span"),b7r=o("FlaxAutoModelForQuestionAnswering"),gPe=l(),Nr=a("div"),f(R8.$$.fragment),F7r=l(),bf=a("p"),v7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bH=a("a"),T7r=o("from_pretrained()"),M7r=o(" class method or the "),FH=a("a"),E7r=o("from_config()"),C7r=o(` class
method.`),w7r=l(),B8=a("p"),A7r=o("This class cannot be instantiated directly using "),eFe=a("code"),y7r=o("__init__()"),L7r=o(" (throws an error)."),x7r=l(),Rt=a("div"),f(P8.$$.fragment),k7r=l(),oFe=a("p"),S7r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),R7r=l(),Ff=a("p"),B7r=o(`Note:
Loading a model from its configuration file does `),rFe=a("strong"),P7r=o("not"),$7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),I7r=o("from_pretrained()"),q7r=o(" to load the model weights."),N7r=l(),tFe=a("p"),j7r=o("Examples:"),D7r=l(),f($8.$$.fragment),G7r=l(),Bo=a("div"),f(I8.$$.fragment),O7r=l(),aFe=a("p"),V7r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),X7r=l(),$n=a("p"),z7r=o("The model class to instantiate is selected based on the "),nFe=a("code"),Q7r=o("model_type"),W7r=o(` property of the config object (either
passed as an argument or loaded from `),sFe=a("code"),H7r=o("pretrained_model_name_or_path"),U7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=a("code"),J7r=o("pretrained_model_name_or_path"),Y7r=o(":"),K7r=l(),Te=a("ul"),zM=a("li"),iFe=a("strong"),Z7r=o("albert"),e9r=o(" \u2014 "),TH=a("a"),o9r=o("FlaxAlbertForQuestionAnswering"),r9r=o(" (ALBERT model)"),t9r=l(),QM=a("li"),dFe=a("strong"),a9r=o("bart"),n9r=o(" \u2014 "),MH=a("a"),s9r=o("FlaxBartForQuestionAnswering"),l9r=o(" (BART model)"),i9r=l(),WM=a("li"),cFe=a("strong"),d9r=o("bert"),c9r=o(" \u2014 "),EH=a("a"),f9r=o("FlaxBertForQuestionAnswering"),m9r=o(" (BERT model)"),g9r=l(),HM=a("li"),fFe=a("strong"),h9r=o("big_bird"),p9r=o(" \u2014 "),CH=a("a"),_9r=o("FlaxBigBirdForQuestionAnswering"),u9r=o(" (BigBird model)"),b9r=l(),UM=a("li"),mFe=a("strong"),F9r=o("distilbert"),v9r=o(" \u2014 "),wH=a("a"),T9r=o("FlaxDistilBertForQuestionAnswering"),M9r=o(" (DistilBERT model)"),E9r=l(),JM=a("li"),gFe=a("strong"),C9r=o("electra"),w9r=o(" \u2014 "),AH=a("a"),A9r=o("FlaxElectraForQuestionAnswering"),y9r=o(" (ELECTRA model)"),L9r=l(),YM=a("li"),hFe=a("strong"),x9r=o("mbart"),k9r=o(" \u2014 "),yH=a("a"),S9r=o("FlaxMBartForQuestionAnswering"),R9r=o(" (mBART model)"),B9r=l(),KM=a("li"),pFe=a("strong"),P9r=o("roberta"),$9r=o(" \u2014 "),LH=a("a"),I9r=o("FlaxRobertaForQuestionAnswering"),q9r=o(" (RoBERTa model)"),N9r=l(),ZM=a("li"),_Fe=a("strong"),j9r=o("roformer"),D9r=o(" \u2014 "),xH=a("a"),G9r=o("FlaxRoFormerForQuestionAnswering"),O9r=o(" (RoFormer model)"),V9r=l(),eE=a("li"),uFe=a("strong"),X9r=o("xlm-roberta"),z9r=o(" \u2014 "),kH=a("a"),Q9r=o("FlaxXLMRobertaForQuestionAnswering"),W9r=o(" (XLM-RoBERTa model)"),H9r=l(),bFe=a("p"),U9r=o("Examples:"),J9r=l(),f(q8.$$.fragment),hPe=l(),vf=a("h2"),oE=a("a"),FFe=a("span"),f(N8.$$.fragment),Y9r=l(),vFe=a("span"),K9r=o("FlaxAutoModelForTokenClassification"),pPe=l(),jr=a("div"),f(j8.$$.fragment),Z9r=l(),Tf=a("p"),exr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),SH=a("a"),oxr=o("from_pretrained()"),rxr=o(" class method or the "),RH=a("a"),txr=o("from_config()"),axr=o(` class
method.`),nxr=l(),D8=a("p"),sxr=o("This class cannot be instantiated directly using "),TFe=a("code"),lxr=o("__init__()"),ixr=o(" (throws an error)."),dxr=l(),Bt=a("div"),f(G8.$$.fragment),cxr=l(),MFe=a("p"),fxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mxr=l(),Mf=a("p"),gxr=o(`Note:
Loading a model from its configuration file does `),EFe=a("strong"),hxr=o("not"),pxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),_xr=o("from_pretrained()"),uxr=o(" to load the model weights."),bxr=l(),CFe=a("p"),Fxr=o("Examples:"),vxr=l(),f(O8.$$.fragment),Txr=l(),Po=a("div"),f(V8.$$.fragment),Mxr=l(),wFe=a("p"),Exr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Cxr=l(),In=a("p"),wxr=o("The model class to instantiate is selected based on the "),AFe=a("code"),Axr=o("model_type"),yxr=o(` property of the config object (either
passed as an argument or loaded from `),yFe=a("code"),Lxr=o("pretrained_model_name_or_path"),xxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=a("code"),kxr=o("pretrained_model_name_or_path"),Sxr=o(":"),Rxr=l(),Be=a("ul"),rE=a("li"),xFe=a("strong"),Bxr=o("albert"),Pxr=o(" \u2014 "),PH=a("a"),$xr=o("FlaxAlbertForTokenClassification"),Ixr=o(" (ALBERT model)"),qxr=l(),tE=a("li"),kFe=a("strong"),Nxr=o("bert"),jxr=o(" \u2014 "),$H=a("a"),Dxr=o("FlaxBertForTokenClassification"),Gxr=o(" (BERT model)"),Oxr=l(),aE=a("li"),SFe=a("strong"),Vxr=o("big_bird"),Xxr=o(" \u2014 "),IH=a("a"),zxr=o("FlaxBigBirdForTokenClassification"),Qxr=o(" (BigBird model)"),Wxr=l(),nE=a("li"),RFe=a("strong"),Hxr=o("distilbert"),Uxr=o(" \u2014 "),qH=a("a"),Jxr=o("FlaxDistilBertForTokenClassification"),Yxr=o(" (DistilBERT model)"),Kxr=l(),sE=a("li"),BFe=a("strong"),Zxr=o("electra"),ekr=o(" \u2014 "),NH=a("a"),okr=o("FlaxElectraForTokenClassification"),rkr=o(" (ELECTRA model)"),tkr=l(),lE=a("li"),PFe=a("strong"),akr=o("roberta"),nkr=o(" \u2014 "),jH=a("a"),skr=o("FlaxRobertaForTokenClassification"),lkr=o(" (RoBERTa model)"),ikr=l(),iE=a("li"),$Fe=a("strong"),dkr=o("roformer"),ckr=o(" \u2014 "),DH=a("a"),fkr=o("FlaxRoFormerForTokenClassification"),mkr=o(" (RoFormer model)"),gkr=l(),dE=a("li"),IFe=a("strong"),hkr=o("xlm-roberta"),pkr=o(" \u2014 "),GH=a("a"),_kr=o("FlaxXLMRobertaForTokenClassification"),ukr=o(" (XLM-RoBERTa model)"),bkr=l(),qFe=a("p"),Fkr=o("Examples:"),vkr=l(),f(X8.$$.fragment),_Pe=l(),Ef=a("h2"),cE=a("a"),NFe=a("span"),f(z8.$$.fragment),Tkr=l(),jFe=a("span"),Mkr=o("FlaxAutoModelForMultipleChoice"),uPe=l(),Dr=a("div"),f(Q8.$$.fragment),Ekr=l(),Cf=a("p"),Ckr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OH=a("a"),wkr=o("from_pretrained()"),Akr=o(" class method or the "),VH=a("a"),ykr=o("from_config()"),Lkr=o(` class
method.`),xkr=l(),W8=a("p"),kkr=o("This class cannot be instantiated directly using "),DFe=a("code"),Skr=o("__init__()"),Rkr=o(" (throws an error)."),Bkr=l(),Pt=a("div"),f(H8.$$.fragment),Pkr=l(),GFe=a("p"),$kr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ikr=l(),wf=a("p"),qkr=o(`Note:
Loading a model from its configuration file does `),OFe=a("strong"),Nkr=o("not"),jkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),Dkr=o("from_pretrained()"),Gkr=o(" to load the model weights."),Okr=l(),VFe=a("p"),Vkr=o("Examples:"),Xkr=l(),f(U8.$$.fragment),zkr=l(),$o=a("div"),f(J8.$$.fragment),Qkr=l(),XFe=a("p"),Wkr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Hkr=l(),qn=a("p"),Ukr=o("The model class to instantiate is selected based on the "),zFe=a("code"),Jkr=o("model_type"),Ykr=o(` property of the config object (either
passed as an argument or loaded from `),QFe=a("code"),Kkr=o("pretrained_model_name_or_path"),Zkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=a("code"),eSr=o("pretrained_model_name_or_path"),oSr=o(":"),rSr=l(),Pe=a("ul"),fE=a("li"),HFe=a("strong"),tSr=o("albert"),aSr=o(" \u2014 "),zH=a("a"),nSr=o("FlaxAlbertForMultipleChoice"),sSr=o(" (ALBERT model)"),lSr=l(),mE=a("li"),UFe=a("strong"),iSr=o("bert"),dSr=o(" \u2014 "),QH=a("a"),cSr=o("FlaxBertForMultipleChoice"),fSr=o(" (BERT model)"),mSr=l(),gE=a("li"),JFe=a("strong"),gSr=o("big_bird"),hSr=o(" \u2014 "),WH=a("a"),pSr=o("FlaxBigBirdForMultipleChoice"),_Sr=o(" (BigBird model)"),uSr=l(),hE=a("li"),YFe=a("strong"),bSr=o("distilbert"),FSr=o(" \u2014 "),HH=a("a"),vSr=o("FlaxDistilBertForMultipleChoice"),TSr=o(" (DistilBERT model)"),MSr=l(),pE=a("li"),KFe=a("strong"),ESr=o("electra"),CSr=o(" \u2014 "),UH=a("a"),wSr=o("FlaxElectraForMultipleChoice"),ASr=o(" (ELECTRA model)"),ySr=l(),_E=a("li"),ZFe=a("strong"),LSr=o("roberta"),xSr=o(" \u2014 "),JH=a("a"),kSr=o("FlaxRobertaForMultipleChoice"),SSr=o(" (RoBERTa model)"),RSr=l(),uE=a("li"),eve=a("strong"),BSr=o("roformer"),PSr=o(" \u2014 "),YH=a("a"),$Sr=o("FlaxRoFormerForMultipleChoice"),ISr=o(" (RoFormer model)"),qSr=l(),bE=a("li"),ove=a("strong"),NSr=o("xlm-roberta"),jSr=o(" \u2014 "),KH=a("a"),DSr=o("FlaxXLMRobertaForMultipleChoice"),GSr=o(" (XLM-RoBERTa model)"),OSr=l(),rve=a("p"),VSr=o("Examples:"),XSr=l(),f(Y8.$$.fragment),bPe=l(),Af=a("h2"),FE=a("a"),tve=a("span"),f(K8.$$.fragment),zSr=l(),ave=a("span"),QSr=o("FlaxAutoModelForNextSentencePrediction"),FPe=l(),Gr=a("div"),f(Z8.$$.fragment),WSr=l(),yf=a("p"),HSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ZH=a("a"),USr=o("from_pretrained()"),JSr=o(" class method or the "),eU=a("a"),YSr=o("from_config()"),KSr=o(` class
method.`),ZSr=l(),e7=a("p"),eRr=o("This class cannot be instantiated directly using "),nve=a("code"),oRr=o("__init__()"),rRr=o(" (throws an error)."),tRr=l(),$t=a("div"),f(o7.$$.fragment),aRr=l(),sve=a("p"),nRr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sRr=l(),Lf=a("p"),lRr=o(`Note:
Loading a model from its configuration file does `),lve=a("strong"),iRr=o("not"),dRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),cRr=o("from_pretrained()"),fRr=o(" to load the model weights."),mRr=l(),ive=a("p"),gRr=o("Examples:"),hRr=l(),f(r7.$$.fragment),pRr=l(),Io=a("div"),f(t7.$$.fragment),_Rr=l(),dve=a("p"),uRr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bRr=l(),Nn=a("p"),FRr=o("The model class to instantiate is selected based on the "),cve=a("code"),vRr=o("model_type"),TRr=o(` property of the config object (either
passed as an argument or loaded from `),fve=a("code"),MRr=o("pretrained_model_name_or_path"),ERr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=a("code"),CRr=o("pretrained_model_name_or_path"),wRr=o(":"),ARr=l(),gve=a("ul"),vE=a("li"),hve=a("strong"),yRr=o("bert"),LRr=o(" \u2014 "),rU=a("a"),xRr=o("FlaxBertForNextSentencePrediction"),kRr=o(" (BERT model)"),SRr=l(),pve=a("p"),RRr=o("Examples:"),BRr=l(),f(a7.$$.fragment),vPe=l(),xf=a("h2"),TE=a("a"),_ve=a("span"),f(n7.$$.fragment),PRr=l(),uve=a("span"),$Rr=o("FlaxAutoModelForImageClassification"),TPe=l(),Or=a("div"),f(s7.$$.fragment),IRr=l(),kf=a("p"),qRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tU=a("a"),NRr=o("from_pretrained()"),jRr=o(" class method or the "),aU=a("a"),DRr=o("from_config()"),GRr=o(` class
method.`),ORr=l(),l7=a("p"),VRr=o("This class cannot be instantiated directly using "),bve=a("code"),XRr=o("__init__()"),zRr=o(" (throws an error)."),QRr=l(),It=a("div"),f(i7.$$.fragment),WRr=l(),Fve=a("p"),HRr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),URr=l(),Sf=a("p"),JRr=o(`Note:
Loading a model from its configuration file does `),vve=a("strong"),YRr=o("not"),KRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),ZRr=o("from_pretrained()"),eBr=o(" to load the model weights."),oBr=l(),Tve=a("p"),rBr=o("Examples:"),tBr=l(),f(d7.$$.fragment),aBr=l(),qo=a("div"),f(c7.$$.fragment),nBr=l(),Mve=a("p"),sBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lBr=l(),jn=a("p"),iBr=o("The model class to instantiate is selected based on the "),Eve=a("code"),dBr=o("model_type"),cBr=o(` property of the config object (either
passed as an argument or loaded from `),Cve=a("code"),fBr=o("pretrained_model_name_or_path"),mBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=a("code"),gBr=o("pretrained_model_name_or_path"),hBr=o(":"),pBr=l(),f7=a("ul"),ME=a("li"),Ave=a("strong"),_Br=o("beit"),uBr=o(" \u2014 "),sU=a("a"),bBr=o("FlaxBeitForImageClassification"),FBr=o(" (BEiT model)"),vBr=l(),EE=a("li"),yve=a("strong"),TBr=o("vit"),MBr=o(" \u2014 "),lU=a("a"),EBr=o("FlaxViTForImageClassification"),CBr=o(" (ViT model)"),wBr=l(),Lve=a("p"),ABr=o("Examples:"),yBr=l(),f(m7.$$.fragment),MPe=l(),Rf=a("h2"),CE=a("a"),xve=a("span"),f(g7.$$.fragment),LBr=l(),kve=a("span"),xBr=o("FlaxAutoModelForVision2Seq"),EPe=l(),Vr=a("div"),f(h7.$$.fragment),kBr=l(),Bf=a("p"),SBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iU=a("a"),RBr=o("from_pretrained()"),BBr=o(" class method or the "),dU=a("a"),PBr=o("from_config()"),$Br=o(` class
method.`),IBr=l(),p7=a("p"),qBr=o("This class cannot be instantiated directly using "),Sve=a("code"),NBr=o("__init__()"),jBr=o(" (throws an error)."),DBr=l(),qt=a("div"),f(_7.$$.fragment),GBr=l(),Rve=a("p"),OBr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),VBr=l(),Pf=a("p"),XBr=o(`Note:
Loading a model from its configuration file does `),Bve=a("strong"),zBr=o("not"),QBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=a("a"),WBr=o("from_pretrained()"),HBr=o(" to load the model weights."),UBr=l(),Pve=a("p"),JBr=o("Examples:"),YBr=l(),f(u7.$$.fragment),KBr=l(),No=a("div"),f(b7.$$.fragment),ZBr=l(),$ve=a("p"),ePr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oPr=l(),Dn=a("p"),rPr=o("The model class to instantiate is selected based on the "),Ive=a("code"),tPr=o("model_type"),aPr=o(` property of the config object (either
passed as an argument or loaded from `),qve=a("code"),nPr=o("pretrained_model_name_or_path"),sPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=a("code"),lPr=o("pretrained_model_name_or_path"),iPr=o(":"),dPr=l(),jve=a("ul"),wE=a("li"),Dve=a("strong"),cPr=o("vision-encoder-decoder"),fPr=o(" \u2014 "),fU=a("a"),mPr=o("FlaxVisionEncoderDecoderModel"),gPr=o(" (Vision Encoder decoder model)"),hPr=l(),Gve=a("p"),pPr=o("Examples:"),_Pr=l(),f(F7.$$.fragment),this.h()},l(c){const u=owt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),ce=n(c,"H1",{class:!0});var v7=s(ce);Ce=n(v7,"A",{id:!0,class:!0,href:!0});var Ove=s(Ce);lo=n(Ove,"SPAN",{});var Vve=s(lo);m(he.$$.fragment,Vve),Vve.forEach(t),Ove.forEach(t),Me=i(v7),Xo=n(v7,"SPAN",{});var bPr=s(Xo);Ii=r(bPr,"Auto Classes"),bPr.forEach(t),v7.forEach(t),qf=i(c),fa=n(c,"P",{});var wPe=s(fa);qi=r(wPe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(wPe,"CODE",{});var FPr=s(Ni);wC=r(FPr,"from_pretrained()"),FPr.forEach(t),Nf=r(wPe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),wPe.forEach(t),xe=i(c),co=n(c,"P",{});var AE=s(co);ji=r(AE,"Instantiating one of "),Gn=n(AE,"A",{href:!0});var vPr=s(Gn);AC=r(vPr,"AutoConfig"),vPr.forEach(t),On=r(AE,", "),Vn=n(AE,"A",{href:!0});var TPr=s(Vn);yC=r(TPr,"AutoModel"),TPr.forEach(t),Di=r(AE,`, and
`),Xn=n(AE,"A",{href:!0});var MPr=s(Xn);LC=r(MPr,"AutoTokenizer"),MPr.forEach(t),Gi=r(AE," will directly create a class of the relevant architecture. For instance"),AE.forEach(t),jf=i(c),m(Da.$$.fragment,c),fo=i(c),ue=n(c,"P",{});var APe=s(ue);u9=r(APe,"will create a model that is an instance of "),Oi=n(APe,"A",{href:!0});var EPr=s(Oi);b9=r(EPr,"BertModel"),EPr.forEach(t),F9=r(APe,"."),APe.forEach(t),zo=i(c),Ga=n(c,"P",{});var yPe=s(Ga);v9=r(yPe,"There is one class of "),Df=n(yPe,"CODE",{});var CPr=s(Df);T9=r(CPr,"AutoModel"),CPr.forEach(t),IIe=r(yPe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),yPe.forEach(t),ERe=i(c),Vi=n(c,"H2",{class:!0});var LPe=s(Vi);Gf=n(LPe,"A",{id:!0,class:!0,href:!0});var wPr=s(Gf);nY=n(wPr,"SPAN",{});var APr=s(nY);m(xC.$$.fragment,APr),APr.forEach(t),wPr.forEach(t),qIe=i(LPe),sY=n(LPe,"SPAN",{});var yPr=s(sY);NIe=r(yPr,"Extending the Auto Classes"),yPr.forEach(t),LPe.forEach(t),CRe=i(c),zn=n(c,"P",{});var mU=s(zn);jIe=r(mU,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),lY=n(mU,"CODE",{});var LPr=s(lY);DIe=r(LPr,"NewModel"),LPr.forEach(t),GIe=r(mU,", make sure you have a "),iY=n(mU,"CODE",{});var xPr=s(iY);OIe=r(xPr,"NewModelConfig"),xPr.forEach(t),VIe=r(mU,` then you can add those to the auto
classes like this:`),mU.forEach(t),wRe=i(c),m(kC.$$.fragment,c),ARe=i(c),M9=n(c,"P",{});var kPr=s(M9);XIe=r(kPr,"You will then be able to use the auto classes like you would usually do!"),kPr.forEach(t),yRe=i(c),m(Of.$$.fragment,c),LRe=i(c),Xi=n(c,"H2",{class:!0});var xPe=s(Xi);Vf=n(xPe,"A",{id:!0,class:!0,href:!0});var SPr=s(Vf);dY=n(SPr,"SPAN",{});var RPr=s(dY);m(SC.$$.fragment,RPr),RPr.forEach(t),SPr.forEach(t),zIe=i(xPe),cY=n(xPe,"SPAN",{});var BPr=s(cY);QIe=r(BPr,"AutoConfig"),BPr.forEach(t),xPe.forEach(t),xRe=i(c),Qo=n(c,"DIV",{class:!0});var Os=s(Qo);m(RC.$$.fragment,Os),WIe=i(Os),BC=n(Os,"P",{});var kPe=s(BC);HIe=r(kPe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),E9=n(kPe,"A",{href:!0});var PPr=s(E9);UIe=r(PPr,"from_pretrained()"),PPr.forEach(t),JIe=r(kPe," class method."),kPe.forEach(t),YIe=i(Os),PC=n(Os,"P",{});var SPe=s(PC);KIe=r(SPe,"This class cannot be instantiated directly using "),fY=n(SPe,"CODE",{});var $Pr=s(fY);ZIe=r($Pr,"__init__()"),$Pr.forEach(t),eqe=r(SPe," (throws an error)."),SPe.forEach(t),oqe=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m($C.$$.fragment,ga),rqe=i(ga),mY=n(ga,"P",{});var IPr=s(mY);tqe=r(IPr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),IPr.forEach(t),aqe=i(ga),zi=n(ga,"P",{});var gU=s(zi);nqe=r(gU,"The configuration class to instantiate is selected based on the "),gY=n(gU,"CODE",{});var qPr=s(gY);sqe=r(qPr,"model_type"),qPr.forEach(t),lqe=r(gU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),hY=n(gU,"CODE",{});var NPr=s(hY);iqe=r(NPr,"pretrained_model_name_or_path"),NPr.forEach(t),dqe=r(gU,":"),gU.forEach(t),cqe=i(ga),F=n(ga,"UL",{});var v=s(F);Xf=n(v,"LI",{});var Xve=s(Xf);pY=n(Xve,"STRONG",{});var jPr=s(pY);fqe=r(jPr,"albert"),jPr.forEach(t),mqe=r(Xve," \u2014 "),C9=n(Xve,"A",{href:!0});var DPr=s(C9);gqe=r(DPr,"AlbertConfig"),DPr.forEach(t),hqe=r(Xve," (ALBERT model)"),Xve.forEach(t),pqe=i(v),zf=n(v,"LI",{});var zve=s(zf);_Y=n(zve,"STRONG",{});var GPr=s(_Y);_qe=r(GPr,"bart"),GPr.forEach(t),uqe=r(zve," \u2014 "),w9=n(zve,"A",{href:!0});var OPr=s(w9);bqe=r(OPr,"BartConfig"),OPr.forEach(t),Fqe=r(zve," (BART model)"),zve.forEach(t),vqe=i(v),Qf=n(v,"LI",{});var Qve=s(Qf);uY=n(Qve,"STRONG",{});var VPr=s(uY);Tqe=r(VPr,"beit"),VPr.forEach(t),Mqe=r(Qve," \u2014 "),A9=n(Qve,"A",{href:!0});var XPr=s(A9);Eqe=r(XPr,"BeitConfig"),XPr.forEach(t),Cqe=r(Qve," (BEiT model)"),Qve.forEach(t),wqe=i(v),Wf=n(v,"LI",{});var Wve=s(Wf);bY=n(Wve,"STRONG",{});var zPr=s(bY);Aqe=r(zPr,"bert"),zPr.forEach(t),yqe=r(Wve," \u2014 "),y9=n(Wve,"A",{href:!0});var QPr=s(y9);Lqe=r(QPr,"BertConfig"),QPr.forEach(t),xqe=r(Wve," (BERT model)"),Wve.forEach(t),kqe=i(v),Hf=n(v,"LI",{});var Hve=s(Hf);FY=n(Hve,"STRONG",{});var WPr=s(FY);Sqe=r(WPr,"bert-generation"),WPr.forEach(t),Rqe=r(Hve," \u2014 "),L9=n(Hve,"A",{href:!0});var HPr=s(L9);Bqe=r(HPr,"BertGenerationConfig"),HPr.forEach(t),Pqe=r(Hve," (Bert Generation model)"),Hve.forEach(t),$qe=i(v),Uf=n(v,"LI",{});var Uve=s(Uf);vY=n(Uve,"STRONG",{});var UPr=s(vY);Iqe=r(UPr,"big_bird"),UPr.forEach(t),qqe=r(Uve," \u2014 "),x9=n(Uve,"A",{href:!0});var JPr=s(x9);Nqe=r(JPr,"BigBirdConfig"),JPr.forEach(t),jqe=r(Uve," (BigBird model)"),Uve.forEach(t),Dqe=i(v),Jf=n(v,"LI",{});var Jve=s(Jf);TY=n(Jve,"STRONG",{});var YPr=s(TY);Gqe=r(YPr,"bigbird_pegasus"),YPr.forEach(t),Oqe=r(Jve," \u2014 "),k9=n(Jve,"A",{href:!0});var KPr=s(k9);Vqe=r(KPr,"BigBirdPegasusConfig"),KPr.forEach(t),Xqe=r(Jve," (BigBirdPegasus model)"),Jve.forEach(t),zqe=i(v),Yf=n(v,"LI",{});var Yve=s(Yf);MY=n(Yve,"STRONG",{});var ZPr=s(MY);Qqe=r(ZPr,"blenderbot"),ZPr.forEach(t),Wqe=r(Yve," \u2014 "),S9=n(Yve,"A",{href:!0});var e$r=s(S9);Hqe=r(e$r,"BlenderbotConfig"),e$r.forEach(t),Uqe=r(Yve," (Blenderbot model)"),Yve.forEach(t),Jqe=i(v),Kf=n(v,"LI",{});var Kve=s(Kf);EY=n(Kve,"STRONG",{});var o$r=s(EY);Yqe=r(o$r,"blenderbot-small"),o$r.forEach(t),Kqe=r(Kve," \u2014 "),R9=n(Kve,"A",{href:!0});var r$r=s(R9);Zqe=r(r$r,"BlenderbotSmallConfig"),r$r.forEach(t),eNe=r(Kve," (BlenderbotSmall model)"),Kve.forEach(t),oNe=i(v),Zf=n(v,"LI",{});var Zve=s(Zf);CY=n(Zve,"STRONG",{});var t$r=s(CY);rNe=r(t$r,"camembert"),t$r.forEach(t),tNe=r(Zve," \u2014 "),B9=n(Zve,"A",{href:!0});var a$r=s(B9);aNe=r(a$r,"CamembertConfig"),a$r.forEach(t),nNe=r(Zve," (CamemBERT model)"),Zve.forEach(t),sNe=i(v),em=n(v,"LI",{});var e6e=s(em);wY=n(e6e,"STRONG",{});var n$r=s(wY);lNe=r(n$r,"canine"),n$r.forEach(t),iNe=r(e6e," \u2014 "),P9=n(e6e,"A",{href:!0});var s$r=s(P9);dNe=r(s$r,"CanineConfig"),s$r.forEach(t),cNe=r(e6e," (Canine model)"),e6e.forEach(t),fNe=i(v),om=n(v,"LI",{});var o6e=s(om);AY=n(o6e,"STRONG",{});var l$r=s(AY);mNe=r(l$r,"clip"),l$r.forEach(t),gNe=r(o6e," \u2014 "),$9=n(o6e,"A",{href:!0});var i$r=s($9);hNe=r(i$r,"CLIPConfig"),i$r.forEach(t),pNe=r(o6e," (CLIP model)"),o6e.forEach(t),_Ne=i(v),rm=n(v,"LI",{});var r6e=s(rm);yY=n(r6e,"STRONG",{});var d$r=s(yY);uNe=r(d$r,"convbert"),d$r.forEach(t),bNe=r(r6e," \u2014 "),I9=n(r6e,"A",{href:!0});var c$r=s(I9);FNe=r(c$r,"ConvBertConfig"),c$r.forEach(t),vNe=r(r6e," (ConvBERT model)"),r6e.forEach(t),TNe=i(v),tm=n(v,"LI",{});var t6e=s(tm);LY=n(t6e,"STRONG",{});var f$r=s(LY);MNe=r(f$r,"convnext"),f$r.forEach(t),ENe=r(t6e," \u2014 "),q9=n(t6e,"A",{href:!0});var m$r=s(q9);CNe=r(m$r,"ConvNextConfig"),m$r.forEach(t),wNe=r(t6e," (ConvNext model)"),t6e.forEach(t),ANe=i(v),am=n(v,"LI",{});var a6e=s(am);xY=n(a6e,"STRONG",{});var g$r=s(xY);yNe=r(g$r,"ctrl"),g$r.forEach(t),LNe=r(a6e," \u2014 "),N9=n(a6e,"A",{href:!0});var h$r=s(N9);xNe=r(h$r,"CTRLConfig"),h$r.forEach(t),kNe=r(a6e," (CTRL model)"),a6e.forEach(t),SNe=i(v),nm=n(v,"LI",{});var n6e=s(nm);kY=n(n6e,"STRONG",{});var p$r=s(kY);RNe=r(p$r,"data2vec-audio"),p$r.forEach(t),BNe=r(n6e," \u2014 "),j9=n(n6e,"A",{href:!0});var _$r=s(j9);PNe=r(_$r,"Data2VecAudioConfig"),_$r.forEach(t),$Ne=r(n6e," (Data2VecAudio model)"),n6e.forEach(t),INe=i(v),sm=n(v,"LI",{});var s6e=s(sm);SY=n(s6e,"STRONG",{});var u$r=s(SY);qNe=r(u$r,"data2vec-text"),u$r.forEach(t),NNe=r(s6e," \u2014 "),D9=n(s6e,"A",{href:!0});var b$r=s(D9);jNe=r(b$r,"Data2VecTextConfig"),b$r.forEach(t),DNe=r(s6e," (Data2VecText model)"),s6e.forEach(t),GNe=i(v),lm=n(v,"LI",{});var l6e=s(lm);RY=n(l6e,"STRONG",{});var F$r=s(RY);ONe=r(F$r,"deberta"),F$r.forEach(t),VNe=r(l6e," \u2014 "),G9=n(l6e,"A",{href:!0});var v$r=s(G9);XNe=r(v$r,"DebertaConfig"),v$r.forEach(t),zNe=r(l6e," (DeBERTa model)"),l6e.forEach(t),QNe=i(v),im=n(v,"LI",{});var i6e=s(im);BY=n(i6e,"STRONG",{});var T$r=s(BY);WNe=r(T$r,"deberta-v2"),T$r.forEach(t),HNe=r(i6e," \u2014 "),O9=n(i6e,"A",{href:!0});var M$r=s(O9);UNe=r(M$r,"DebertaV2Config"),M$r.forEach(t),JNe=r(i6e," (DeBERTa-v2 model)"),i6e.forEach(t),YNe=i(v),dm=n(v,"LI",{});var d6e=s(dm);PY=n(d6e,"STRONG",{});var E$r=s(PY);KNe=r(E$r,"decision_transformer"),E$r.forEach(t),ZNe=r(d6e," \u2014 "),V9=n(d6e,"A",{href:!0});var C$r=s(V9);eje=r(C$r,"DecisionTransformerConfig"),C$r.forEach(t),oje=r(d6e," (Decision Transformer model)"),d6e.forEach(t),rje=i(v),cm=n(v,"LI",{});var c6e=s(cm);$Y=n(c6e,"STRONG",{});var w$r=s($Y);tje=r(w$r,"deit"),w$r.forEach(t),aje=r(c6e," \u2014 "),X9=n(c6e,"A",{href:!0});var A$r=s(X9);nje=r(A$r,"DeiTConfig"),A$r.forEach(t),sje=r(c6e," (DeiT model)"),c6e.forEach(t),lje=i(v),fm=n(v,"LI",{});var f6e=s(fm);IY=n(f6e,"STRONG",{});var y$r=s(IY);ije=r(y$r,"detr"),y$r.forEach(t),dje=r(f6e," \u2014 "),z9=n(f6e,"A",{href:!0});var L$r=s(z9);cje=r(L$r,"DetrConfig"),L$r.forEach(t),fje=r(f6e," (DETR model)"),f6e.forEach(t),mje=i(v),mm=n(v,"LI",{});var m6e=s(mm);qY=n(m6e,"STRONG",{});var x$r=s(qY);gje=r(x$r,"distilbert"),x$r.forEach(t),hje=r(m6e," \u2014 "),Q9=n(m6e,"A",{href:!0});var k$r=s(Q9);pje=r(k$r,"DistilBertConfig"),k$r.forEach(t),_je=r(m6e," (DistilBERT model)"),m6e.forEach(t),uje=i(v),gm=n(v,"LI",{});var g6e=s(gm);NY=n(g6e,"STRONG",{});var S$r=s(NY);bje=r(S$r,"dpr"),S$r.forEach(t),Fje=r(g6e," \u2014 "),W9=n(g6e,"A",{href:!0});var R$r=s(W9);vje=r(R$r,"DPRConfig"),R$r.forEach(t),Tje=r(g6e," (DPR model)"),g6e.forEach(t),Mje=i(v),hm=n(v,"LI",{});var h6e=s(hm);jY=n(h6e,"STRONG",{});var B$r=s(jY);Eje=r(B$r,"dpt"),B$r.forEach(t),Cje=r(h6e," \u2014 "),H9=n(h6e,"A",{href:!0});var P$r=s(H9);wje=r(P$r,"DPTConfig"),P$r.forEach(t),Aje=r(h6e," (DPT model)"),h6e.forEach(t),yje=i(v),pm=n(v,"LI",{});var p6e=s(pm);DY=n(p6e,"STRONG",{});var $$r=s(DY);Lje=r($$r,"electra"),$$r.forEach(t),xje=r(p6e," \u2014 "),U9=n(p6e,"A",{href:!0});var I$r=s(U9);kje=r(I$r,"ElectraConfig"),I$r.forEach(t),Sje=r(p6e," (ELECTRA model)"),p6e.forEach(t),Rje=i(v),_m=n(v,"LI",{});var _6e=s(_m);GY=n(_6e,"STRONG",{});var q$r=s(GY);Bje=r(q$r,"encoder-decoder"),q$r.forEach(t),Pje=r(_6e," \u2014 "),J9=n(_6e,"A",{href:!0});var N$r=s(J9);$je=r(N$r,"EncoderDecoderConfig"),N$r.forEach(t),Ije=r(_6e," (Encoder decoder model)"),_6e.forEach(t),qje=i(v),um=n(v,"LI",{});var u6e=s(um);OY=n(u6e,"STRONG",{});var j$r=s(OY);Nje=r(j$r,"flaubert"),j$r.forEach(t),jje=r(u6e," \u2014 "),Y9=n(u6e,"A",{href:!0});var D$r=s(Y9);Dje=r(D$r,"FlaubertConfig"),D$r.forEach(t),Gje=r(u6e," (FlauBERT model)"),u6e.forEach(t),Oje=i(v),bm=n(v,"LI",{});var b6e=s(bm);VY=n(b6e,"STRONG",{});var G$r=s(VY);Vje=r(G$r,"fnet"),G$r.forEach(t),Xje=r(b6e," \u2014 "),K9=n(b6e,"A",{href:!0});var O$r=s(K9);zje=r(O$r,"FNetConfig"),O$r.forEach(t),Qje=r(b6e," (FNet model)"),b6e.forEach(t),Wje=i(v),Fm=n(v,"LI",{});var F6e=s(Fm);XY=n(F6e,"STRONG",{});var V$r=s(XY);Hje=r(V$r,"fsmt"),V$r.forEach(t),Uje=r(F6e," \u2014 "),Z9=n(F6e,"A",{href:!0});var X$r=s(Z9);Jje=r(X$r,"FSMTConfig"),X$r.forEach(t),Yje=r(F6e," (FairSeq Machine-Translation model)"),F6e.forEach(t),Kje=i(v),vm=n(v,"LI",{});var v6e=s(vm);zY=n(v6e,"STRONG",{});var z$r=s(zY);Zje=r(z$r,"funnel"),z$r.forEach(t),eDe=r(v6e," \u2014 "),ex=n(v6e,"A",{href:!0});var Q$r=s(ex);oDe=r(Q$r,"FunnelConfig"),Q$r.forEach(t),rDe=r(v6e," (Funnel Transformer model)"),v6e.forEach(t),tDe=i(v),Tm=n(v,"LI",{});var T6e=s(Tm);QY=n(T6e,"STRONG",{});var W$r=s(QY);aDe=r(W$r,"glpn"),W$r.forEach(t),nDe=r(T6e," \u2014 "),ox=n(T6e,"A",{href:!0});var H$r=s(ox);sDe=r(H$r,"GLPNConfig"),H$r.forEach(t),lDe=r(T6e," (GLPN model)"),T6e.forEach(t),iDe=i(v),Mm=n(v,"LI",{});var M6e=s(Mm);WY=n(M6e,"STRONG",{});var U$r=s(WY);dDe=r(U$r,"gpt2"),U$r.forEach(t),cDe=r(M6e," \u2014 "),rx=n(M6e,"A",{href:!0});var J$r=s(rx);fDe=r(J$r,"GPT2Config"),J$r.forEach(t),mDe=r(M6e," (OpenAI GPT-2 model)"),M6e.forEach(t),gDe=i(v),Em=n(v,"LI",{});var E6e=s(Em);HY=n(E6e,"STRONG",{});var Y$r=s(HY);hDe=r(Y$r,"gpt_neo"),Y$r.forEach(t),pDe=r(E6e," \u2014 "),tx=n(E6e,"A",{href:!0});var K$r=s(tx);_De=r(K$r,"GPTNeoConfig"),K$r.forEach(t),uDe=r(E6e," (GPT Neo model)"),E6e.forEach(t),bDe=i(v),Cm=n(v,"LI",{});var C6e=s(Cm);UY=n(C6e,"STRONG",{});var Z$r=s(UY);FDe=r(Z$r,"gptj"),Z$r.forEach(t),vDe=r(C6e," \u2014 "),ax=n(C6e,"A",{href:!0});var eIr=s(ax);TDe=r(eIr,"GPTJConfig"),eIr.forEach(t),MDe=r(C6e," (GPT-J model)"),C6e.forEach(t),EDe=i(v),wm=n(v,"LI",{});var w6e=s(wm);JY=n(w6e,"STRONG",{});var oIr=s(JY);CDe=r(oIr,"hubert"),oIr.forEach(t),wDe=r(w6e," \u2014 "),nx=n(w6e,"A",{href:!0});var rIr=s(nx);ADe=r(rIr,"HubertConfig"),rIr.forEach(t),yDe=r(w6e," (Hubert model)"),w6e.forEach(t),LDe=i(v),Am=n(v,"LI",{});var A6e=s(Am);YY=n(A6e,"STRONG",{});var tIr=s(YY);xDe=r(tIr,"ibert"),tIr.forEach(t),kDe=r(A6e," \u2014 "),sx=n(A6e,"A",{href:!0});var aIr=s(sx);SDe=r(aIr,"IBertConfig"),aIr.forEach(t),RDe=r(A6e," (I-BERT model)"),A6e.forEach(t),BDe=i(v),ym=n(v,"LI",{});var y6e=s(ym);KY=n(y6e,"STRONG",{});var nIr=s(KY);PDe=r(nIr,"imagegpt"),nIr.forEach(t),$De=r(y6e," \u2014 "),lx=n(y6e,"A",{href:!0});var sIr=s(lx);IDe=r(sIr,"ImageGPTConfig"),sIr.forEach(t),qDe=r(y6e," (ImageGPT model)"),y6e.forEach(t),NDe=i(v),Lm=n(v,"LI",{});var L6e=s(Lm);ZY=n(L6e,"STRONG",{});var lIr=s(ZY);jDe=r(lIr,"layoutlm"),lIr.forEach(t),DDe=r(L6e," \u2014 "),ix=n(L6e,"A",{href:!0});var iIr=s(ix);GDe=r(iIr,"LayoutLMConfig"),iIr.forEach(t),ODe=r(L6e," (LayoutLM model)"),L6e.forEach(t),VDe=i(v),xm=n(v,"LI",{});var x6e=s(xm);eK=n(x6e,"STRONG",{});var dIr=s(eK);XDe=r(dIr,"layoutlmv2"),dIr.forEach(t),zDe=r(x6e," \u2014 "),dx=n(x6e,"A",{href:!0});var cIr=s(dx);QDe=r(cIr,"LayoutLMv2Config"),cIr.forEach(t),WDe=r(x6e," (LayoutLMv2 model)"),x6e.forEach(t),HDe=i(v),km=n(v,"LI",{});var k6e=s(km);oK=n(k6e,"STRONG",{});var fIr=s(oK);UDe=r(fIr,"led"),fIr.forEach(t),JDe=r(k6e," \u2014 "),cx=n(k6e,"A",{href:!0});var mIr=s(cx);YDe=r(mIr,"LEDConfig"),mIr.forEach(t),KDe=r(k6e," (LED model)"),k6e.forEach(t),ZDe=i(v),Sm=n(v,"LI",{});var S6e=s(Sm);rK=n(S6e,"STRONG",{});var gIr=s(rK);eGe=r(gIr,"longformer"),gIr.forEach(t),oGe=r(S6e," \u2014 "),fx=n(S6e,"A",{href:!0});var hIr=s(fx);rGe=r(hIr,"LongformerConfig"),hIr.forEach(t),tGe=r(S6e," (Longformer model)"),S6e.forEach(t),aGe=i(v),Rm=n(v,"LI",{});var R6e=s(Rm);tK=n(R6e,"STRONG",{});var pIr=s(tK);nGe=r(pIr,"luke"),pIr.forEach(t),sGe=r(R6e," \u2014 "),mx=n(R6e,"A",{href:!0});var _Ir=s(mx);lGe=r(_Ir,"LukeConfig"),_Ir.forEach(t),iGe=r(R6e," (LUKE model)"),R6e.forEach(t),dGe=i(v),Bm=n(v,"LI",{});var B6e=s(Bm);aK=n(B6e,"STRONG",{});var uIr=s(aK);cGe=r(uIr,"lxmert"),uIr.forEach(t),fGe=r(B6e," \u2014 "),gx=n(B6e,"A",{href:!0});var bIr=s(gx);mGe=r(bIr,"LxmertConfig"),bIr.forEach(t),gGe=r(B6e," (LXMERT model)"),B6e.forEach(t),hGe=i(v),Pm=n(v,"LI",{});var P6e=s(Pm);nK=n(P6e,"STRONG",{});var FIr=s(nK);pGe=r(FIr,"m2m_100"),FIr.forEach(t),_Ge=r(P6e," \u2014 "),hx=n(P6e,"A",{href:!0});var vIr=s(hx);uGe=r(vIr,"M2M100Config"),vIr.forEach(t),bGe=r(P6e," (M2M100 model)"),P6e.forEach(t),FGe=i(v),$m=n(v,"LI",{});var $6e=s($m);sK=n($6e,"STRONG",{});var TIr=s(sK);vGe=r(TIr,"marian"),TIr.forEach(t),TGe=r($6e," \u2014 "),px=n($6e,"A",{href:!0});var MIr=s(px);MGe=r(MIr,"MarianConfig"),MIr.forEach(t),EGe=r($6e," (Marian model)"),$6e.forEach(t),CGe=i(v),Im=n(v,"LI",{});var I6e=s(Im);lK=n(I6e,"STRONG",{});var EIr=s(lK);wGe=r(EIr,"maskformer"),EIr.forEach(t),AGe=r(I6e," \u2014 "),_x=n(I6e,"A",{href:!0});var CIr=s(_x);yGe=r(CIr,"MaskFormerConfig"),CIr.forEach(t),LGe=r(I6e," (MaskFormer model)"),I6e.forEach(t),xGe=i(v),qm=n(v,"LI",{});var q6e=s(qm);iK=n(q6e,"STRONG",{});var wIr=s(iK);kGe=r(wIr,"mbart"),wIr.forEach(t),SGe=r(q6e," \u2014 "),ux=n(q6e,"A",{href:!0});var AIr=s(ux);RGe=r(AIr,"MBartConfig"),AIr.forEach(t),BGe=r(q6e," (mBART model)"),q6e.forEach(t),PGe=i(v),Nm=n(v,"LI",{});var N6e=s(Nm);dK=n(N6e,"STRONG",{});var yIr=s(dK);$Ge=r(yIr,"megatron-bert"),yIr.forEach(t),IGe=r(N6e," \u2014 "),bx=n(N6e,"A",{href:!0});var LIr=s(bx);qGe=r(LIr,"MegatronBertConfig"),LIr.forEach(t),NGe=r(N6e," (MegatronBert model)"),N6e.forEach(t),jGe=i(v),jm=n(v,"LI",{});var j6e=s(jm);cK=n(j6e,"STRONG",{});var xIr=s(cK);DGe=r(xIr,"mobilebert"),xIr.forEach(t),GGe=r(j6e," \u2014 "),Fx=n(j6e,"A",{href:!0});var kIr=s(Fx);OGe=r(kIr,"MobileBertConfig"),kIr.forEach(t),VGe=r(j6e," (MobileBERT model)"),j6e.forEach(t),XGe=i(v),Dm=n(v,"LI",{});var D6e=s(Dm);fK=n(D6e,"STRONG",{});var SIr=s(fK);zGe=r(SIr,"mpnet"),SIr.forEach(t),QGe=r(D6e," \u2014 "),vx=n(D6e,"A",{href:!0});var RIr=s(vx);WGe=r(RIr,"MPNetConfig"),RIr.forEach(t),HGe=r(D6e," (MPNet model)"),D6e.forEach(t),UGe=i(v),Gm=n(v,"LI",{});var G6e=s(Gm);mK=n(G6e,"STRONG",{});var BIr=s(mK);JGe=r(BIr,"mt5"),BIr.forEach(t),YGe=r(G6e," \u2014 "),Tx=n(G6e,"A",{href:!0});var PIr=s(Tx);KGe=r(PIr,"MT5Config"),PIr.forEach(t),ZGe=r(G6e," (mT5 model)"),G6e.forEach(t),eOe=i(v),Om=n(v,"LI",{});var O6e=s(Om);gK=n(O6e,"STRONG",{});var $Ir=s(gK);oOe=r($Ir,"nystromformer"),$Ir.forEach(t),rOe=r(O6e," \u2014 "),Mx=n(O6e,"A",{href:!0});var IIr=s(Mx);tOe=r(IIr,"NystromformerConfig"),IIr.forEach(t),aOe=r(O6e," (Nystromformer model)"),O6e.forEach(t),nOe=i(v),Vm=n(v,"LI",{});var V6e=s(Vm);hK=n(V6e,"STRONG",{});var qIr=s(hK);sOe=r(qIr,"openai-gpt"),qIr.forEach(t),lOe=r(V6e," \u2014 "),Ex=n(V6e,"A",{href:!0});var NIr=s(Ex);iOe=r(NIr,"OpenAIGPTConfig"),NIr.forEach(t),dOe=r(V6e," (OpenAI GPT model)"),V6e.forEach(t),cOe=i(v),Xm=n(v,"LI",{});var X6e=s(Xm);pK=n(X6e,"STRONG",{});var jIr=s(pK);fOe=r(jIr,"pegasus"),jIr.forEach(t),mOe=r(X6e," \u2014 "),Cx=n(X6e,"A",{href:!0});var DIr=s(Cx);gOe=r(DIr,"PegasusConfig"),DIr.forEach(t),hOe=r(X6e," (Pegasus model)"),X6e.forEach(t),pOe=i(v),zm=n(v,"LI",{});var z6e=s(zm);_K=n(z6e,"STRONG",{});var GIr=s(_K);_Oe=r(GIr,"perceiver"),GIr.forEach(t),uOe=r(z6e," \u2014 "),wx=n(z6e,"A",{href:!0});var OIr=s(wx);bOe=r(OIr,"PerceiverConfig"),OIr.forEach(t),FOe=r(z6e," (Perceiver model)"),z6e.forEach(t),vOe=i(v),Qm=n(v,"LI",{});var Q6e=s(Qm);uK=n(Q6e,"STRONG",{});var VIr=s(uK);TOe=r(VIr,"plbart"),VIr.forEach(t),MOe=r(Q6e," \u2014 "),Ax=n(Q6e,"A",{href:!0});var XIr=s(Ax);EOe=r(XIr,"PLBartConfig"),XIr.forEach(t),COe=r(Q6e," (PLBart model)"),Q6e.forEach(t),wOe=i(v),Wm=n(v,"LI",{});var W6e=s(Wm);bK=n(W6e,"STRONG",{});var zIr=s(bK);AOe=r(zIr,"poolformer"),zIr.forEach(t),yOe=r(W6e," \u2014 "),yx=n(W6e,"A",{href:!0});var QIr=s(yx);LOe=r(QIr,"PoolFormerConfig"),QIr.forEach(t),xOe=r(W6e," (PoolFormer model)"),W6e.forEach(t),kOe=i(v),Hm=n(v,"LI",{});var H6e=s(Hm);FK=n(H6e,"STRONG",{});var WIr=s(FK);SOe=r(WIr,"prophetnet"),WIr.forEach(t),ROe=r(H6e," \u2014 "),Lx=n(H6e,"A",{href:!0});var HIr=s(Lx);BOe=r(HIr,"ProphetNetConfig"),HIr.forEach(t),POe=r(H6e," (ProphetNet model)"),H6e.forEach(t),$Oe=i(v),Um=n(v,"LI",{});var U6e=s(Um);vK=n(U6e,"STRONG",{});var UIr=s(vK);IOe=r(UIr,"qdqbert"),UIr.forEach(t),qOe=r(U6e," \u2014 "),xx=n(U6e,"A",{href:!0});var JIr=s(xx);NOe=r(JIr,"QDQBertConfig"),JIr.forEach(t),jOe=r(U6e," (QDQBert model)"),U6e.forEach(t),DOe=i(v),Jm=n(v,"LI",{});var J6e=s(Jm);TK=n(J6e,"STRONG",{});var YIr=s(TK);GOe=r(YIr,"rag"),YIr.forEach(t),OOe=r(J6e," \u2014 "),kx=n(J6e,"A",{href:!0});var KIr=s(kx);VOe=r(KIr,"RagConfig"),KIr.forEach(t),XOe=r(J6e," (RAG model)"),J6e.forEach(t),zOe=i(v),Ym=n(v,"LI",{});var Y6e=s(Ym);MK=n(Y6e,"STRONG",{});var ZIr=s(MK);QOe=r(ZIr,"realm"),ZIr.forEach(t),WOe=r(Y6e," \u2014 "),Sx=n(Y6e,"A",{href:!0});var eqr=s(Sx);HOe=r(eqr,"RealmConfig"),eqr.forEach(t),UOe=r(Y6e," (Realm model)"),Y6e.forEach(t),JOe=i(v),Km=n(v,"LI",{});var K6e=s(Km);EK=n(K6e,"STRONG",{});var oqr=s(EK);YOe=r(oqr,"reformer"),oqr.forEach(t),KOe=r(K6e," \u2014 "),Rx=n(K6e,"A",{href:!0});var rqr=s(Rx);ZOe=r(rqr,"ReformerConfig"),rqr.forEach(t),eVe=r(K6e," (Reformer model)"),K6e.forEach(t),oVe=i(v),Zm=n(v,"LI",{});var Z6e=s(Zm);CK=n(Z6e,"STRONG",{});var tqr=s(CK);rVe=r(tqr,"regnet"),tqr.forEach(t),tVe=r(Z6e," \u2014 "),Bx=n(Z6e,"A",{href:!0});var aqr=s(Bx);aVe=r(aqr,"RegNetConfig"),aqr.forEach(t),nVe=r(Z6e," (RegNet model)"),Z6e.forEach(t),sVe=i(v),eg=n(v,"LI",{});var eTe=s(eg);wK=n(eTe,"STRONG",{});var nqr=s(wK);lVe=r(nqr,"rembert"),nqr.forEach(t),iVe=r(eTe," \u2014 "),Px=n(eTe,"A",{href:!0});var sqr=s(Px);dVe=r(sqr,"RemBertConfig"),sqr.forEach(t),cVe=r(eTe," (RemBERT model)"),eTe.forEach(t),fVe=i(v),og=n(v,"LI",{});var oTe=s(og);AK=n(oTe,"STRONG",{});var lqr=s(AK);mVe=r(lqr,"resnet"),lqr.forEach(t),gVe=r(oTe," \u2014 "),$x=n(oTe,"A",{href:!0});var iqr=s($x);hVe=r(iqr,"ResNetConfig"),iqr.forEach(t),pVe=r(oTe," (ResNet model)"),oTe.forEach(t),_Ve=i(v),rg=n(v,"LI",{});var rTe=s(rg);yK=n(rTe,"STRONG",{});var dqr=s(yK);uVe=r(dqr,"retribert"),dqr.forEach(t),bVe=r(rTe," \u2014 "),Ix=n(rTe,"A",{href:!0});var cqr=s(Ix);FVe=r(cqr,"RetriBertConfig"),cqr.forEach(t),vVe=r(rTe," (RetriBERT model)"),rTe.forEach(t),TVe=i(v),tg=n(v,"LI",{});var tTe=s(tg);LK=n(tTe,"STRONG",{});var fqr=s(LK);MVe=r(fqr,"roberta"),fqr.forEach(t),EVe=r(tTe," \u2014 "),qx=n(tTe,"A",{href:!0});var mqr=s(qx);CVe=r(mqr,"RobertaConfig"),mqr.forEach(t),wVe=r(tTe," (RoBERTa model)"),tTe.forEach(t),AVe=i(v),ag=n(v,"LI",{});var aTe=s(ag);xK=n(aTe,"STRONG",{});var gqr=s(xK);yVe=r(gqr,"roformer"),gqr.forEach(t),LVe=r(aTe," \u2014 "),Nx=n(aTe,"A",{href:!0});var hqr=s(Nx);xVe=r(hqr,"RoFormerConfig"),hqr.forEach(t),kVe=r(aTe," (RoFormer model)"),aTe.forEach(t),SVe=i(v),ng=n(v,"LI",{});var nTe=s(ng);kK=n(nTe,"STRONG",{});var pqr=s(kK);RVe=r(pqr,"segformer"),pqr.forEach(t),BVe=r(nTe," \u2014 "),jx=n(nTe,"A",{href:!0});var _qr=s(jx);PVe=r(_qr,"SegformerConfig"),_qr.forEach(t),$Ve=r(nTe," (SegFormer model)"),nTe.forEach(t),IVe=i(v),sg=n(v,"LI",{});var sTe=s(sg);SK=n(sTe,"STRONG",{});var uqr=s(SK);qVe=r(uqr,"sew"),uqr.forEach(t),NVe=r(sTe," \u2014 "),Dx=n(sTe,"A",{href:!0});var bqr=s(Dx);jVe=r(bqr,"SEWConfig"),bqr.forEach(t),DVe=r(sTe," (SEW model)"),sTe.forEach(t),GVe=i(v),lg=n(v,"LI",{});var lTe=s(lg);RK=n(lTe,"STRONG",{});var Fqr=s(RK);OVe=r(Fqr,"sew-d"),Fqr.forEach(t),VVe=r(lTe," \u2014 "),Gx=n(lTe,"A",{href:!0});var vqr=s(Gx);XVe=r(vqr,"SEWDConfig"),vqr.forEach(t),zVe=r(lTe," (SEW-D model)"),lTe.forEach(t),QVe=i(v),ig=n(v,"LI",{});var iTe=s(ig);BK=n(iTe,"STRONG",{});var Tqr=s(BK);WVe=r(Tqr,"speech-encoder-decoder"),Tqr.forEach(t),HVe=r(iTe," \u2014 "),Ox=n(iTe,"A",{href:!0});var Mqr=s(Ox);UVe=r(Mqr,"SpeechEncoderDecoderConfig"),Mqr.forEach(t),JVe=r(iTe," (Speech Encoder decoder model)"),iTe.forEach(t),YVe=i(v),dg=n(v,"LI",{});var dTe=s(dg);PK=n(dTe,"STRONG",{});var Eqr=s(PK);KVe=r(Eqr,"speech_to_text"),Eqr.forEach(t),ZVe=r(dTe," \u2014 "),Vx=n(dTe,"A",{href:!0});var Cqr=s(Vx);eXe=r(Cqr,"Speech2TextConfig"),Cqr.forEach(t),oXe=r(dTe," (Speech2Text model)"),dTe.forEach(t),rXe=i(v),cg=n(v,"LI",{});var cTe=s(cg);$K=n(cTe,"STRONG",{});var wqr=s($K);tXe=r(wqr,"speech_to_text_2"),wqr.forEach(t),aXe=r(cTe," \u2014 "),Xx=n(cTe,"A",{href:!0});var Aqr=s(Xx);nXe=r(Aqr,"Speech2Text2Config"),Aqr.forEach(t),sXe=r(cTe," (Speech2Text2 model)"),cTe.forEach(t),lXe=i(v),fg=n(v,"LI",{});var fTe=s(fg);IK=n(fTe,"STRONG",{});var yqr=s(IK);iXe=r(yqr,"splinter"),yqr.forEach(t),dXe=r(fTe," \u2014 "),zx=n(fTe,"A",{href:!0});var Lqr=s(zx);cXe=r(Lqr,"SplinterConfig"),Lqr.forEach(t),fXe=r(fTe," (Splinter model)"),fTe.forEach(t),mXe=i(v),mg=n(v,"LI",{});var mTe=s(mg);qK=n(mTe,"STRONG",{});var xqr=s(qK);gXe=r(xqr,"squeezebert"),xqr.forEach(t),hXe=r(mTe," \u2014 "),Qx=n(mTe,"A",{href:!0});var kqr=s(Qx);pXe=r(kqr,"SqueezeBertConfig"),kqr.forEach(t),_Xe=r(mTe," (SqueezeBERT model)"),mTe.forEach(t),uXe=i(v),gg=n(v,"LI",{});var gTe=s(gg);NK=n(gTe,"STRONG",{});var Sqr=s(NK);bXe=r(Sqr,"swin"),Sqr.forEach(t),FXe=r(gTe," \u2014 "),Wx=n(gTe,"A",{href:!0});var Rqr=s(Wx);vXe=r(Rqr,"SwinConfig"),Rqr.forEach(t),TXe=r(gTe," (Swin model)"),gTe.forEach(t),MXe=i(v),hg=n(v,"LI",{});var hTe=s(hg);jK=n(hTe,"STRONG",{});var Bqr=s(jK);EXe=r(Bqr,"t5"),Bqr.forEach(t),CXe=r(hTe," \u2014 "),Hx=n(hTe,"A",{href:!0});var Pqr=s(Hx);wXe=r(Pqr,"T5Config"),Pqr.forEach(t),AXe=r(hTe," (T5 model)"),hTe.forEach(t),yXe=i(v),pg=n(v,"LI",{});var pTe=s(pg);DK=n(pTe,"STRONG",{});var $qr=s(DK);LXe=r($qr,"tapas"),$qr.forEach(t),xXe=r(pTe," \u2014 "),Ux=n(pTe,"A",{href:!0});var Iqr=s(Ux);kXe=r(Iqr,"TapasConfig"),Iqr.forEach(t),SXe=r(pTe," (TAPAS model)"),pTe.forEach(t),RXe=i(v),_g=n(v,"LI",{});var _Te=s(_g);GK=n(_Te,"STRONG",{});var qqr=s(GK);BXe=r(qqr,"tapex"),qqr.forEach(t),PXe=r(_Te," \u2014 "),Jx=n(_Te,"A",{href:!0});var Nqr=s(Jx);$Xe=r(Nqr,"BartConfig"),Nqr.forEach(t),IXe=r(_Te," (TAPEX model)"),_Te.forEach(t),qXe=i(v),ug=n(v,"LI",{});var uTe=s(ug);OK=n(uTe,"STRONG",{});var jqr=s(OK);NXe=r(jqr,"transfo-xl"),jqr.forEach(t),jXe=r(uTe," \u2014 "),Yx=n(uTe,"A",{href:!0});var Dqr=s(Yx);DXe=r(Dqr,"TransfoXLConfig"),Dqr.forEach(t),GXe=r(uTe," (Transformer-XL model)"),uTe.forEach(t),OXe=i(v),bg=n(v,"LI",{});var bTe=s(bg);VK=n(bTe,"STRONG",{});var Gqr=s(VK);VXe=r(Gqr,"trocr"),Gqr.forEach(t),XXe=r(bTe," \u2014 "),Kx=n(bTe,"A",{href:!0});var Oqr=s(Kx);zXe=r(Oqr,"TrOCRConfig"),Oqr.forEach(t),QXe=r(bTe," (TrOCR model)"),bTe.forEach(t),WXe=i(v),Fg=n(v,"LI",{});var FTe=s(Fg);XK=n(FTe,"STRONG",{});var Vqr=s(XK);HXe=r(Vqr,"unispeech"),Vqr.forEach(t),UXe=r(FTe," \u2014 "),Zx=n(FTe,"A",{href:!0});var Xqr=s(Zx);JXe=r(Xqr,"UniSpeechConfig"),Xqr.forEach(t),YXe=r(FTe," (UniSpeech model)"),FTe.forEach(t),KXe=i(v),vg=n(v,"LI",{});var vTe=s(vg);zK=n(vTe,"STRONG",{});var zqr=s(zK);ZXe=r(zqr,"unispeech-sat"),zqr.forEach(t),eze=r(vTe," \u2014 "),ek=n(vTe,"A",{href:!0});var Qqr=s(ek);oze=r(Qqr,"UniSpeechSatConfig"),Qqr.forEach(t),rze=r(vTe," (UniSpeechSat model)"),vTe.forEach(t),tze=i(v),Tg=n(v,"LI",{});var TTe=s(Tg);QK=n(TTe,"STRONG",{});var Wqr=s(QK);aze=r(Wqr,"van"),Wqr.forEach(t),nze=r(TTe," \u2014 "),ok=n(TTe,"A",{href:!0});var Hqr=s(ok);sze=r(Hqr,"VanConfig"),Hqr.forEach(t),lze=r(TTe," (VAN model)"),TTe.forEach(t),ize=i(v),Mg=n(v,"LI",{});var MTe=s(Mg);WK=n(MTe,"STRONG",{});var Uqr=s(WK);dze=r(Uqr,"vilt"),Uqr.forEach(t),cze=r(MTe," \u2014 "),rk=n(MTe,"A",{href:!0});var Jqr=s(rk);fze=r(Jqr,"ViltConfig"),Jqr.forEach(t),mze=r(MTe," (ViLT model)"),MTe.forEach(t),gze=i(v),Eg=n(v,"LI",{});var ETe=s(Eg);HK=n(ETe,"STRONG",{});var Yqr=s(HK);hze=r(Yqr,"vision-encoder-decoder"),Yqr.forEach(t),pze=r(ETe," \u2014 "),tk=n(ETe,"A",{href:!0});var Kqr=s(tk);_ze=r(Kqr,"VisionEncoderDecoderConfig"),Kqr.forEach(t),uze=r(ETe," (Vision Encoder decoder model)"),ETe.forEach(t),bze=i(v),Cg=n(v,"LI",{});var CTe=s(Cg);UK=n(CTe,"STRONG",{});var Zqr=s(UK);Fze=r(Zqr,"vision-text-dual-encoder"),Zqr.forEach(t),vze=r(CTe," \u2014 "),ak=n(CTe,"A",{href:!0});var eNr=s(ak);Tze=r(eNr,"VisionTextDualEncoderConfig"),eNr.forEach(t),Mze=r(CTe," (VisionTextDualEncoder model)"),CTe.forEach(t),Eze=i(v),wg=n(v,"LI",{});var wTe=s(wg);JK=n(wTe,"STRONG",{});var oNr=s(JK);Cze=r(oNr,"visual_bert"),oNr.forEach(t),wze=r(wTe," \u2014 "),nk=n(wTe,"A",{href:!0});var rNr=s(nk);Aze=r(rNr,"VisualBertConfig"),rNr.forEach(t),yze=r(wTe," (VisualBert model)"),wTe.forEach(t),Lze=i(v),Ag=n(v,"LI",{});var ATe=s(Ag);YK=n(ATe,"STRONG",{});var tNr=s(YK);xze=r(tNr,"vit"),tNr.forEach(t),kze=r(ATe," \u2014 "),sk=n(ATe,"A",{href:!0});var aNr=s(sk);Sze=r(aNr,"ViTConfig"),aNr.forEach(t),Rze=r(ATe," (ViT model)"),ATe.forEach(t),Bze=i(v),yg=n(v,"LI",{});var yTe=s(yg);KK=n(yTe,"STRONG",{});var nNr=s(KK);Pze=r(nNr,"vit_mae"),nNr.forEach(t),$ze=r(yTe," \u2014 "),lk=n(yTe,"A",{href:!0});var sNr=s(lk);Ize=r(sNr,"ViTMAEConfig"),sNr.forEach(t),qze=r(yTe," (ViTMAE model)"),yTe.forEach(t),Nze=i(v),Lg=n(v,"LI",{});var LTe=s(Lg);ZK=n(LTe,"STRONG",{});var lNr=s(ZK);jze=r(lNr,"wav2vec2"),lNr.forEach(t),Dze=r(LTe," \u2014 "),ik=n(LTe,"A",{href:!0});var iNr=s(ik);Gze=r(iNr,"Wav2Vec2Config"),iNr.forEach(t),Oze=r(LTe," (Wav2Vec2 model)"),LTe.forEach(t),Vze=i(v),xg=n(v,"LI",{});var xTe=s(xg);eZ=n(xTe,"STRONG",{});var dNr=s(eZ);Xze=r(dNr,"wavlm"),dNr.forEach(t),zze=r(xTe," \u2014 "),dk=n(xTe,"A",{href:!0});var cNr=s(dk);Qze=r(cNr,"WavLMConfig"),cNr.forEach(t),Wze=r(xTe," (WavLM model)"),xTe.forEach(t),Hze=i(v),kg=n(v,"LI",{});var kTe=s(kg);oZ=n(kTe,"STRONG",{});var fNr=s(oZ);Uze=r(fNr,"xglm"),fNr.forEach(t),Jze=r(kTe," \u2014 "),ck=n(kTe,"A",{href:!0});var mNr=s(ck);Yze=r(mNr,"XGLMConfig"),mNr.forEach(t),Kze=r(kTe," (XGLM model)"),kTe.forEach(t),Zze=i(v),Sg=n(v,"LI",{});var STe=s(Sg);rZ=n(STe,"STRONG",{});var gNr=s(rZ);eQe=r(gNr,"xlm"),gNr.forEach(t),oQe=r(STe," \u2014 "),fk=n(STe,"A",{href:!0});var hNr=s(fk);rQe=r(hNr,"XLMConfig"),hNr.forEach(t),tQe=r(STe," (XLM model)"),STe.forEach(t),aQe=i(v),Rg=n(v,"LI",{});var RTe=s(Rg);tZ=n(RTe,"STRONG",{});var pNr=s(tZ);nQe=r(pNr,"xlm-prophetnet"),pNr.forEach(t),sQe=r(RTe," \u2014 "),mk=n(RTe,"A",{href:!0});var _Nr=s(mk);lQe=r(_Nr,"XLMProphetNetConfig"),_Nr.forEach(t),iQe=r(RTe," (XLMProphetNet model)"),RTe.forEach(t),dQe=i(v),Bg=n(v,"LI",{});var BTe=s(Bg);aZ=n(BTe,"STRONG",{});var uNr=s(aZ);cQe=r(uNr,"xlm-roberta"),uNr.forEach(t),fQe=r(BTe," \u2014 "),gk=n(BTe,"A",{href:!0});var bNr=s(gk);mQe=r(bNr,"XLMRobertaConfig"),bNr.forEach(t),gQe=r(BTe," (XLM-RoBERTa model)"),BTe.forEach(t),hQe=i(v),Pg=n(v,"LI",{});var PTe=s(Pg);nZ=n(PTe,"STRONG",{});var FNr=s(nZ);pQe=r(FNr,"xlm-roberta-xl"),FNr.forEach(t),_Qe=r(PTe," \u2014 "),hk=n(PTe,"A",{href:!0});var vNr=s(hk);uQe=r(vNr,"XLMRobertaXLConfig"),vNr.forEach(t),bQe=r(PTe," (XLM-RoBERTa-XL model)"),PTe.forEach(t),FQe=i(v),$g=n(v,"LI",{});var $Te=s($g);sZ=n($Te,"STRONG",{});var TNr=s(sZ);vQe=r(TNr,"xlnet"),TNr.forEach(t),TQe=r($Te," \u2014 "),pk=n($Te,"A",{href:!0});var MNr=s(pk);MQe=r(MNr,"XLNetConfig"),MNr.forEach(t),EQe=r($Te," (XLNet model)"),$Te.forEach(t),CQe=i(v),Ig=n(v,"LI",{});var ITe=s(Ig);lZ=n(ITe,"STRONG",{});var ENr=s(lZ);wQe=r(ENr,"yoso"),ENr.forEach(t),AQe=r(ITe," \u2014 "),_k=n(ITe,"A",{href:!0});var CNr=s(_k);yQe=r(CNr,"YosoConfig"),CNr.forEach(t),LQe=r(ITe," (YOSO model)"),ITe.forEach(t),v.forEach(t),xQe=i(ga),iZ=n(ga,"P",{});var wNr=s(iZ);kQe=r(wNr,"Examples:"),wNr.forEach(t),SQe=i(ga),m(IC.$$.fragment,ga),ga.forEach(t),RQe=i(Os),qg=n(Os,"DIV",{class:!0});var RPe=s(qg);m(qC.$$.fragment,RPe),BQe=i(RPe),dZ=n(RPe,"P",{});var ANr=s(dZ);PQe=r(ANr,"Register a new configuration for this class."),ANr.forEach(t),RPe.forEach(t),Os.forEach(t),kRe=i(c),Qi=n(c,"H2",{class:!0});var BPe=s(Qi);Ng=n(BPe,"A",{id:!0,class:!0,href:!0});var yNr=s(Ng);cZ=n(yNr,"SPAN",{});var LNr=s(cZ);m(NC.$$.fragment,LNr),LNr.forEach(t),yNr.forEach(t),$Qe=i(BPe),fZ=n(BPe,"SPAN",{});var xNr=s(fZ);IQe=r(xNr,"AutoTokenizer"),xNr.forEach(t),BPe.forEach(t),SRe=i(c),Wo=n(c,"DIV",{class:!0});var Vs=s(Wo);m(jC.$$.fragment,Vs),qQe=i(Vs),DC=n(Vs,"P",{});var PPe=s(DC);NQe=r(PPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),uk=n(PPe,"A",{href:!0});var kNr=s(uk);jQe=r(kNr,"AutoTokenizer.from_pretrained()"),kNr.forEach(t),DQe=r(PPe," class method."),PPe.forEach(t),GQe=i(Vs),GC=n(Vs,"P",{});var $Pe=s(GC);OQe=r($Pe,"This class cannot be instantiated directly using "),mZ=n($Pe,"CODE",{});var SNr=s(mZ);VQe=r(SNr,"__init__()"),SNr.forEach(t),XQe=r($Pe," (throws an error)."),$Pe.forEach(t),zQe=i(Vs),go=n(Vs,"DIV",{class:!0});var ha=s(go);m(OC.$$.fragment,ha),QQe=i(ha),gZ=n(ha,"P",{});var RNr=s(gZ);WQe=r(RNr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),RNr.forEach(t),HQe=i(ha),Oa=n(ha,"P",{});var yE=s(Oa);UQe=r(yE,"The tokenizer class to instantiate is selected based on the "),hZ=n(yE,"CODE",{});var BNr=s(hZ);JQe=r(BNr,"model_type"),BNr.forEach(t),YQe=r(yE,` property of the config object (either
passed as an argument or loaded from `),pZ=n(yE,"CODE",{});var PNr=s(pZ);KQe=r(PNr,"pretrained_model_name_or_path"),PNr.forEach(t),ZQe=r(yE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Z=n(yE,"CODE",{});var $Nr=s(_Z);eWe=r($Nr,"pretrained_model_name_or_path"),$Nr.forEach(t),oWe=r(yE,":"),yE.forEach(t),rWe=i(ha),E=n(ha,"UL",{});var w=s(E);Qn=n(w,"LI",{});var T7=s(Qn);uZ=n(T7,"STRONG",{});var INr=s(uZ);tWe=r(INr,"albert"),INr.forEach(t),aWe=r(T7," \u2014 "),bk=n(T7,"A",{href:!0});var qNr=s(bk);nWe=r(qNr,"AlbertTokenizer"),qNr.forEach(t),sWe=r(T7," or "),Fk=n(T7,"A",{href:!0});var NNr=s(Fk);lWe=r(NNr,"AlbertTokenizerFast"),NNr.forEach(t),iWe=r(T7," (ALBERT model)"),T7.forEach(t),dWe=i(w),Wn=n(w,"LI",{});var M7=s(Wn);bZ=n(M7,"STRONG",{});var jNr=s(bZ);cWe=r(jNr,"bart"),jNr.forEach(t),fWe=r(M7," \u2014 "),vk=n(M7,"A",{href:!0});var DNr=s(vk);mWe=r(DNr,"BartTokenizer"),DNr.forEach(t),gWe=r(M7," or "),Tk=n(M7,"A",{href:!0});var GNr=s(Tk);hWe=r(GNr,"BartTokenizerFast"),GNr.forEach(t),pWe=r(M7," (BART model)"),M7.forEach(t),_We=i(w),Hn=n(w,"LI",{});var E7=s(Hn);FZ=n(E7,"STRONG",{});var ONr=s(FZ);uWe=r(ONr,"barthez"),ONr.forEach(t),bWe=r(E7," \u2014 "),Mk=n(E7,"A",{href:!0});var VNr=s(Mk);FWe=r(VNr,"BarthezTokenizer"),VNr.forEach(t),vWe=r(E7," or "),Ek=n(E7,"A",{href:!0});var XNr=s(Ek);TWe=r(XNr,"BarthezTokenizerFast"),XNr.forEach(t),MWe=r(E7," (BARThez model)"),E7.forEach(t),EWe=i(w),jg=n(w,"LI",{});var qTe=s(jg);vZ=n(qTe,"STRONG",{});var zNr=s(vZ);CWe=r(zNr,"bartpho"),zNr.forEach(t),wWe=r(qTe," \u2014 "),Ck=n(qTe,"A",{href:!0});var QNr=s(Ck);AWe=r(QNr,"BartphoTokenizer"),QNr.forEach(t),yWe=r(qTe," (BARTpho model)"),qTe.forEach(t),LWe=i(w),Un=n(w,"LI",{});var C7=s(Un);TZ=n(C7,"STRONG",{});var WNr=s(TZ);xWe=r(WNr,"bert"),WNr.forEach(t),kWe=r(C7," \u2014 "),wk=n(C7,"A",{href:!0});var HNr=s(wk);SWe=r(HNr,"BertTokenizer"),HNr.forEach(t),RWe=r(C7," or "),Ak=n(C7,"A",{href:!0});var UNr=s(Ak);BWe=r(UNr,"BertTokenizerFast"),UNr.forEach(t),PWe=r(C7," (BERT model)"),C7.forEach(t),$We=i(w),Dg=n(w,"LI",{});var NTe=s(Dg);MZ=n(NTe,"STRONG",{});var JNr=s(MZ);IWe=r(JNr,"bert-generation"),JNr.forEach(t),qWe=r(NTe," \u2014 "),yk=n(NTe,"A",{href:!0});var YNr=s(yk);NWe=r(YNr,"BertGenerationTokenizer"),YNr.forEach(t),jWe=r(NTe," (Bert Generation model)"),NTe.forEach(t),DWe=i(w),Gg=n(w,"LI",{});var jTe=s(Gg);EZ=n(jTe,"STRONG",{});var KNr=s(EZ);GWe=r(KNr,"bert-japanese"),KNr.forEach(t),OWe=r(jTe," \u2014 "),Lk=n(jTe,"A",{href:!0});var ZNr=s(Lk);VWe=r(ZNr,"BertJapaneseTokenizer"),ZNr.forEach(t),XWe=r(jTe," (BertJapanese model)"),jTe.forEach(t),zWe=i(w),Og=n(w,"LI",{});var DTe=s(Og);CZ=n(DTe,"STRONG",{});var ejr=s(CZ);QWe=r(ejr,"bertweet"),ejr.forEach(t),WWe=r(DTe," \u2014 "),xk=n(DTe,"A",{href:!0});var ojr=s(xk);HWe=r(ojr,"BertweetTokenizer"),ojr.forEach(t),UWe=r(DTe," (Bertweet model)"),DTe.forEach(t),JWe=i(w),Jn=n(w,"LI",{});var w7=s(Jn);wZ=n(w7,"STRONG",{});var rjr=s(wZ);YWe=r(rjr,"big_bird"),rjr.forEach(t),KWe=r(w7," \u2014 "),kk=n(w7,"A",{href:!0});var tjr=s(kk);ZWe=r(tjr,"BigBirdTokenizer"),tjr.forEach(t),eHe=r(w7," or "),Sk=n(w7,"A",{href:!0});var ajr=s(Sk);oHe=r(ajr,"BigBirdTokenizerFast"),ajr.forEach(t),rHe=r(w7," (BigBird model)"),w7.forEach(t),tHe=i(w),Yn=n(w,"LI",{});var A7=s(Yn);AZ=n(A7,"STRONG",{});var njr=s(AZ);aHe=r(njr,"bigbird_pegasus"),njr.forEach(t),nHe=r(A7," \u2014 "),Rk=n(A7,"A",{href:!0});var sjr=s(Rk);sHe=r(sjr,"PegasusTokenizer"),sjr.forEach(t),lHe=r(A7," or "),Bk=n(A7,"A",{href:!0});var ljr=s(Bk);iHe=r(ljr,"PegasusTokenizerFast"),ljr.forEach(t),dHe=r(A7," (BigBirdPegasus model)"),A7.forEach(t),cHe=i(w),Kn=n(w,"LI",{});var y7=s(Kn);yZ=n(y7,"STRONG",{});var ijr=s(yZ);fHe=r(ijr,"blenderbot"),ijr.forEach(t),mHe=r(y7," \u2014 "),Pk=n(y7,"A",{href:!0});var djr=s(Pk);gHe=r(djr,"BlenderbotTokenizer"),djr.forEach(t),hHe=r(y7," or "),$k=n(y7,"A",{href:!0});var cjr=s($k);pHe=r(cjr,"BlenderbotTokenizerFast"),cjr.forEach(t),_He=r(y7," (Blenderbot model)"),y7.forEach(t),uHe=i(w),Vg=n(w,"LI",{});var GTe=s(Vg);LZ=n(GTe,"STRONG",{});var fjr=s(LZ);bHe=r(fjr,"blenderbot-small"),fjr.forEach(t),FHe=r(GTe," \u2014 "),Ik=n(GTe,"A",{href:!0});var mjr=s(Ik);vHe=r(mjr,"BlenderbotSmallTokenizer"),mjr.forEach(t),THe=r(GTe," (BlenderbotSmall model)"),GTe.forEach(t),MHe=i(w),Xg=n(w,"LI",{});var OTe=s(Xg);xZ=n(OTe,"STRONG",{});var gjr=s(xZ);EHe=r(gjr,"byt5"),gjr.forEach(t),CHe=r(OTe," \u2014 "),qk=n(OTe,"A",{href:!0});var hjr=s(qk);wHe=r(hjr,"ByT5Tokenizer"),hjr.forEach(t),AHe=r(OTe," (ByT5 model)"),OTe.forEach(t),yHe=i(w),Zn=n(w,"LI",{});var L7=s(Zn);kZ=n(L7,"STRONG",{});var pjr=s(kZ);LHe=r(pjr,"camembert"),pjr.forEach(t),xHe=r(L7," \u2014 "),Nk=n(L7,"A",{href:!0});var _jr=s(Nk);kHe=r(_jr,"CamembertTokenizer"),_jr.forEach(t),SHe=r(L7," or "),jk=n(L7,"A",{href:!0});var ujr=s(jk);RHe=r(ujr,"CamembertTokenizerFast"),ujr.forEach(t),BHe=r(L7," (CamemBERT model)"),L7.forEach(t),PHe=i(w),zg=n(w,"LI",{});var VTe=s(zg);SZ=n(VTe,"STRONG",{});var bjr=s(SZ);$He=r(bjr,"canine"),bjr.forEach(t),IHe=r(VTe," \u2014 "),Dk=n(VTe,"A",{href:!0});var Fjr=s(Dk);qHe=r(Fjr,"CanineTokenizer"),Fjr.forEach(t),NHe=r(VTe," (Canine model)"),VTe.forEach(t),jHe=i(w),es=n(w,"LI",{});var x7=s(es);RZ=n(x7,"STRONG",{});var vjr=s(RZ);DHe=r(vjr,"clip"),vjr.forEach(t),GHe=r(x7," \u2014 "),Gk=n(x7,"A",{href:!0});var Tjr=s(Gk);OHe=r(Tjr,"CLIPTokenizer"),Tjr.forEach(t),VHe=r(x7," or "),Ok=n(x7,"A",{href:!0});var Mjr=s(Ok);XHe=r(Mjr,"CLIPTokenizerFast"),Mjr.forEach(t),zHe=r(x7," (CLIP model)"),x7.forEach(t),QHe=i(w),os=n(w,"LI",{});var k7=s(os);BZ=n(k7,"STRONG",{});var Ejr=s(BZ);WHe=r(Ejr,"convbert"),Ejr.forEach(t),HHe=r(k7," \u2014 "),Vk=n(k7,"A",{href:!0});var Cjr=s(Vk);UHe=r(Cjr,"ConvBertTokenizer"),Cjr.forEach(t),JHe=r(k7," or "),Xk=n(k7,"A",{href:!0});var wjr=s(Xk);YHe=r(wjr,"ConvBertTokenizerFast"),wjr.forEach(t),KHe=r(k7," (ConvBERT model)"),k7.forEach(t),ZHe=i(w),rs=n(w,"LI",{});var S7=s(rs);PZ=n(S7,"STRONG",{});var Ajr=s(PZ);eUe=r(Ajr,"cpm"),Ajr.forEach(t),oUe=r(S7," \u2014 "),zk=n(S7,"A",{href:!0});var yjr=s(zk);rUe=r(yjr,"CpmTokenizer"),yjr.forEach(t),tUe=r(S7," or "),$Z=n(S7,"CODE",{});var Ljr=s($Z);aUe=r(Ljr,"CpmTokenizerFast"),Ljr.forEach(t),nUe=r(S7," (CPM model)"),S7.forEach(t),sUe=i(w),Qg=n(w,"LI",{});var XTe=s(Qg);IZ=n(XTe,"STRONG",{});var xjr=s(IZ);lUe=r(xjr,"ctrl"),xjr.forEach(t),iUe=r(XTe," \u2014 "),Qk=n(XTe,"A",{href:!0});var kjr=s(Qk);dUe=r(kjr,"CTRLTokenizer"),kjr.forEach(t),cUe=r(XTe," (CTRL model)"),XTe.forEach(t),fUe=i(w),ts=n(w,"LI",{});var R7=s(ts);qZ=n(R7,"STRONG",{});var Sjr=s(qZ);mUe=r(Sjr,"deberta"),Sjr.forEach(t),gUe=r(R7," \u2014 "),Wk=n(R7,"A",{href:!0});var Rjr=s(Wk);hUe=r(Rjr,"DebertaTokenizer"),Rjr.forEach(t),pUe=r(R7," or "),Hk=n(R7,"A",{href:!0});var Bjr=s(Hk);_Ue=r(Bjr,"DebertaTokenizerFast"),Bjr.forEach(t),uUe=r(R7," (DeBERTa model)"),R7.forEach(t),bUe=i(w),Wg=n(w,"LI",{});var zTe=s(Wg);NZ=n(zTe,"STRONG",{});var Pjr=s(NZ);FUe=r(Pjr,"deberta-v2"),Pjr.forEach(t),vUe=r(zTe," \u2014 "),Uk=n(zTe,"A",{href:!0});var $jr=s(Uk);TUe=r($jr,"DebertaV2Tokenizer"),$jr.forEach(t),MUe=r(zTe," (DeBERTa-v2 model)"),zTe.forEach(t),EUe=i(w),as=n(w,"LI",{});var B7=s(as);jZ=n(B7,"STRONG",{});var Ijr=s(jZ);CUe=r(Ijr,"distilbert"),Ijr.forEach(t),wUe=r(B7," \u2014 "),Jk=n(B7,"A",{href:!0});var qjr=s(Jk);AUe=r(qjr,"DistilBertTokenizer"),qjr.forEach(t),yUe=r(B7," or "),Yk=n(B7,"A",{href:!0});var Njr=s(Yk);LUe=r(Njr,"DistilBertTokenizerFast"),Njr.forEach(t),xUe=r(B7," (DistilBERT model)"),B7.forEach(t),kUe=i(w),ns=n(w,"LI",{});var P7=s(ns);DZ=n(P7,"STRONG",{});var jjr=s(DZ);SUe=r(jjr,"dpr"),jjr.forEach(t),RUe=r(P7," \u2014 "),Kk=n(P7,"A",{href:!0});var Djr=s(Kk);BUe=r(Djr,"DPRQuestionEncoderTokenizer"),Djr.forEach(t),PUe=r(P7," or "),Zk=n(P7,"A",{href:!0});var Gjr=s(Zk);$Ue=r(Gjr,"DPRQuestionEncoderTokenizerFast"),Gjr.forEach(t),IUe=r(P7," (DPR model)"),P7.forEach(t),qUe=i(w),ss=n(w,"LI",{});var $7=s(ss);GZ=n($7,"STRONG",{});var Ojr=s(GZ);NUe=r(Ojr,"electra"),Ojr.forEach(t),jUe=r($7," \u2014 "),eS=n($7,"A",{href:!0});var Vjr=s(eS);DUe=r(Vjr,"ElectraTokenizer"),Vjr.forEach(t),GUe=r($7," or "),oS=n($7,"A",{href:!0});var Xjr=s(oS);OUe=r(Xjr,"ElectraTokenizerFast"),Xjr.forEach(t),VUe=r($7," (ELECTRA model)"),$7.forEach(t),XUe=i(w),Hg=n(w,"LI",{});var QTe=s(Hg);OZ=n(QTe,"STRONG",{});var zjr=s(OZ);zUe=r(zjr,"flaubert"),zjr.forEach(t),QUe=r(QTe," \u2014 "),rS=n(QTe,"A",{href:!0});var Qjr=s(rS);WUe=r(Qjr,"FlaubertTokenizer"),Qjr.forEach(t),HUe=r(QTe," (FlauBERT model)"),QTe.forEach(t),UUe=i(w),ls=n(w,"LI",{});var I7=s(ls);VZ=n(I7,"STRONG",{});var Wjr=s(VZ);JUe=r(Wjr,"fnet"),Wjr.forEach(t),YUe=r(I7," \u2014 "),tS=n(I7,"A",{href:!0});var Hjr=s(tS);KUe=r(Hjr,"FNetTokenizer"),Hjr.forEach(t),ZUe=r(I7," or "),aS=n(I7,"A",{href:!0});var Ujr=s(aS);eJe=r(Ujr,"FNetTokenizerFast"),Ujr.forEach(t),oJe=r(I7," (FNet model)"),I7.forEach(t),rJe=i(w),Ug=n(w,"LI",{});var WTe=s(Ug);XZ=n(WTe,"STRONG",{});var Jjr=s(XZ);tJe=r(Jjr,"fsmt"),Jjr.forEach(t),aJe=r(WTe," \u2014 "),nS=n(WTe,"A",{href:!0});var Yjr=s(nS);nJe=r(Yjr,"FSMTTokenizer"),Yjr.forEach(t),sJe=r(WTe," (FairSeq Machine-Translation model)"),WTe.forEach(t),lJe=i(w),is=n(w,"LI",{});var q7=s(is);zZ=n(q7,"STRONG",{});var Kjr=s(zZ);iJe=r(Kjr,"funnel"),Kjr.forEach(t),dJe=r(q7," \u2014 "),sS=n(q7,"A",{href:!0});var Zjr=s(sS);cJe=r(Zjr,"FunnelTokenizer"),Zjr.forEach(t),fJe=r(q7," or "),lS=n(q7,"A",{href:!0});var eDr=s(lS);mJe=r(eDr,"FunnelTokenizerFast"),eDr.forEach(t),gJe=r(q7," (Funnel Transformer model)"),q7.forEach(t),hJe=i(w),ds=n(w,"LI",{});var N7=s(ds);QZ=n(N7,"STRONG",{});var oDr=s(QZ);pJe=r(oDr,"gpt2"),oDr.forEach(t),_Je=r(N7," \u2014 "),iS=n(N7,"A",{href:!0});var rDr=s(iS);uJe=r(rDr,"GPT2Tokenizer"),rDr.forEach(t),bJe=r(N7," or "),dS=n(N7,"A",{href:!0});var tDr=s(dS);FJe=r(tDr,"GPT2TokenizerFast"),tDr.forEach(t),vJe=r(N7," (OpenAI GPT-2 model)"),N7.forEach(t),TJe=i(w),cs=n(w,"LI",{});var j7=s(cs);WZ=n(j7,"STRONG",{});var aDr=s(WZ);MJe=r(aDr,"gpt_neo"),aDr.forEach(t),EJe=r(j7," \u2014 "),cS=n(j7,"A",{href:!0});var nDr=s(cS);CJe=r(nDr,"GPT2Tokenizer"),nDr.forEach(t),wJe=r(j7," or "),fS=n(j7,"A",{href:!0});var sDr=s(fS);AJe=r(sDr,"GPT2TokenizerFast"),sDr.forEach(t),yJe=r(j7," (GPT Neo model)"),j7.forEach(t),LJe=i(w),fs=n(w,"LI",{});var D7=s(fs);HZ=n(D7,"STRONG",{});var lDr=s(HZ);xJe=r(lDr,"herbert"),lDr.forEach(t),kJe=r(D7," \u2014 "),mS=n(D7,"A",{href:!0});var iDr=s(mS);SJe=r(iDr,"HerbertTokenizer"),iDr.forEach(t),RJe=r(D7," or "),gS=n(D7,"A",{href:!0});var dDr=s(gS);BJe=r(dDr,"HerbertTokenizerFast"),dDr.forEach(t),PJe=r(D7," (HerBERT model)"),D7.forEach(t),$Je=i(w),Jg=n(w,"LI",{});var HTe=s(Jg);UZ=n(HTe,"STRONG",{});var cDr=s(UZ);IJe=r(cDr,"hubert"),cDr.forEach(t),qJe=r(HTe," \u2014 "),hS=n(HTe,"A",{href:!0});var fDr=s(hS);NJe=r(fDr,"Wav2Vec2CTCTokenizer"),fDr.forEach(t),jJe=r(HTe," (Hubert model)"),HTe.forEach(t),DJe=i(w),ms=n(w,"LI",{});var G7=s(ms);JZ=n(G7,"STRONG",{});var mDr=s(JZ);GJe=r(mDr,"ibert"),mDr.forEach(t),OJe=r(G7," \u2014 "),pS=n(G7,"A",{href:!0});var gDr=s(pS);VJe=r(gDr,"RobertaTokenizer"),gDr.forEach(t),XJe=r(G7," or "),_S=n(G7,"A",{href:!0});var hDr=s(_S);zJe=r(hDr,"RobertaTokenizerFast"),hDr.forEach(t),QJe=r(G7," (I-BERT model)"),G7.forEach(t),WJe=i(w),gs=n(w,"LI",{});var O7=s(gs);YZ=n(O7,"STRONG",{});var pDr=s(YZ);HJe=r(pDr,"layoutlm"),pDr.forEach(t),UJe=r(O7," \u2014 "),uS=n(O7,"A",{href:!0});var _Dr=s(uS);JJe=r(_Dr,"LayoutLMTokenizer"),_Dr.forEach(t),YJe=r(O7," or "),bS=n(O7,"A",{href:!0});var uDr=s(bS);KJe=r(uDr,"LayoutLMTokenizerFast"),uDr.forEach(t),ZJe=r(O7," (LayoutLM model)"),O7.forEach(t),eYe=i(w),hs=n(w,"LI",{});var V7=s(hs);KZ=n(V7,"STRONG",{});var bDr=s(KZ);oYe=r(bDr,"layoutlmv2"),bDr.forEach(t),rYe=r(V7," \u2014 "),FS=n(V7,"A",{href:!0});var FDr=s(FS);tYe=r(FDr,"LayoutLMv2Tokenizer"),FDr.forEach(t),aYe=r(V7," or "),vS=n(V7,"A",{href:!0});var vDr=s(vS);nYe=r(vDr,"LayoutLMv2TokenizerFast"),vDr.forEach(t),sYe=r(V7," (LayoutLMv2 model)"),V7.forEach(t),lYe=i(w),ps=n(w,"LI",{});var X7=s(ps);ZZ=n(X7,"STRONG",{});var TDr=s(ZZ);iYe=r(TDr,"layoutxlm"),TDr.forEach(t),dYe=r(X7," \u2014 "),TS=n(X7,"A",{href:!0});var MDr=s(TS);cYe=r(MDr,"LayoutXLMTokenizer"),MDr.forEach(t),fYe=r(X7," or "),MS=n(X7,"A",{href:!0});var EDr=s(MS);mYe=r(EDr,"LayoutXLMTokenizerFast"),EDr.forEach(t),gYe=r(X7," (LayoutXLM model)"),X7.forEach(t),hYe=i(w),_s=n(w,"LI",{});var z7=s(_s);eee=n(z7,"STRONG",{});var CDr=s(eee);pYe=r(CDr,"led"),CDr.forEach(t),_Ye=r(z7," \u2014 "),ES=n(z7,"A",{href:!0});var wDr=s(ES);uYe=r(wDr,"LEDTokenizer"),wDr.forEach(t),bYe=r(z7," or "),CS=n(z7,"A",{href:!0});var ADr=s(CS);FYe=r(ADr,"LEDTokenizerFast"),ADr.forEach(t),vYe=r(z7," (LED model)"),z7.forEach(t),TYe=i(w),us=n(w,"LI",{});var Q7=s(us);oee=n(Q7,"STRONG",{});var yDr=s(oee);MYe=r(yDr,"longformer"),yDr.forEach(t),EYe=r(Q7," \u2014 "),wS=n(Q7,"A",{href:!0});var LDr=s(wS);CYe=r(LDr,"LongformerTokenizer"),LDr.forEach(t),wYe=r(Q7," or "),AS=n(Q7,"A",{href:!0});var xDr=s(AS);AYe=r(xDr,"LongformerTokenizerFast"),xDr.forEach(t),yYe=r(Q7," (Longformer model)"),Q7.forEach(t),LYe=i(w),Yg=n(w,"LI",{});var UTe=s(Yg);ree=n(UTe,"STRONG",{});var kDr=s(ree);xYe=r(kDr,"luke"),kDr.forEach(t),kYe=r(UTe," \u2014 "),yS=n(UTe,"A",{href:!0});var SDr=s(yS);SYe=r(SDr,"LukeTokenizer"),SDr.forEach(t),RYe=r(UTe," (LUKE model)"),UTe.forEach(t),BYe=i(w),bs=n(w,"LI",{});var W7=s(bs);tee=n(W7,"STRONG",{});var RDr=s(tee);PYe=r(RDr,"lxmert"),RDr.forEach(t),$Ye=r(W7," \u2014 "),LS=n(W7,"A",{href:!0});var BDr=s(LS);IYe=r(BDr,"LxmertTokenizer"),BDr.forEach(t),qYe=r(W7," or "),xS=n(W7,"A",{href:!0});var PDr=s(xS);NYe=r(PDr,"LxmertTokenizerFast"),PDr.forEach(t),jYe=r(W7," (LXMERT model)"),W7.forEach(t),DYe=i(w),Kg=n(w,"LI",{});var JTe=s(Kg);aee=n(JTe,"STRONG",{});var $Dr=s(aee);GYe=r($Dr,"m2m_100"),$Dr.forEach(t),OYe=r(JTe," \u2014 "),kS=n(JTe,"A",{href:!0});var IDr=s(kS);VYe=r(IDr,"M2M100Tokenizer"),IDr.forEach(t),XYe=r(JTe," (M2M100 model)"),JTe.forEach(t),zYe=i(w),Zg=n(w,"LI",{});var YTe=s(Zg);nee=n(YTe,"STRONG",{});var qDr=s(nee);QYe=r(qDr,"marian"),qDr.forEach(t),WYe=r(YTe," \u2014 "),SS=n(YTe,"A",{href:!0});var NDr=s(SS);HYe=r(NDr,"MarianTokenizer"),NDr.forEach(t),UYe=r(YTe," (Marian model)"),YTe.forEach(t),JYe=i(w),Fs=n(w,"LI",{});var H7=s(Fs);see=n(H7,"STRONG",{});var jDr=s(see);YYe=r(jDr,"mbart"),jDr.forEach(t),KYe=r(H7," \u2014 "),RS=n(H7,"A",{href:!0});var DDr=s(RS);ZYe=r(DDr,"MBartTokenizer"),DDr.forEach(t),eKe=r(H7," or "),BS=n(H7,"A",{href:!0});var GDr=s(BS);oKe=r(GDr,"MBartTokenizerFast"),GDr.forEach(t),rKe=r(H7," (mBART model)"),H7.forEach(t),tKe=i(w),vs=n(w,"LI",{});var U7=s(vs);lee=n(U7,"STRONG",{});var ODr=s(lee);aKe=r(ODr,"mbart50"),ODr.forEach(t),nKe=r(U7," \u2014 "),PS=n(U7,"A",{href:!0});var VDr=s(PS);sKe=r(VDr,"MBart50Tokenizer"),VDr.forEach(t),lKe=r(U7," or "),$S=n(U7,"A",{href:!0});var XDr=s($S);iKe=r(XDr,"MBart50TokenizerFast"),XDr.forEach(t),dKe=r(U7," (mBART-50 model)"),U7.forEach(t),cKe=i(w),eh=n(w,"LI",{});var KTe=s(eh);iee=n(KTe,"STRONG",{});var zDr=s(iee);fKe=r(zDr,"mluke"),zDr.forEach(t),mKe=r(KTe," \u2014 "),IS=n(KTe,"A",{href:!0});var QDr=s(IS);gKe=r(QDr,"MLukeTokenizer"),QDr.forEach(t),hKe=r(KTe," (mLUKE model)"),KTe.forEach(t),pKe=i(w),Ts=n(w,"LI",{});var J7=s(Ts);dee=n(J7,"STRONG",{});var WDr=s(dee);_Ke=r(WDr,"mobilebert"),WDr.forEach(t),uKe=r(J7," \u2014 "),qS=n(J7,"A",{href:!0});var HDr=s(qS);bKe=r(HDr,"MobileBertTokenizer"),HDr.forEach(t),FKe=r(J7," or "),NS=n(J7,"A",{href:!0});var UDr=s(NS);vKe=r(UDr,"MobileBertTokenizerFast"),UDr.forEach(t),TKe=r(J7," (MobileBERT model)"),J7.forEach(t),MKe=i(w),Ms=n(w,"LI",{});var Y7=s(Ms);cee=n(Y7,"STRONG",{});var JDr=s(cee);EKe=r(JDr,"mpnet"),JDr.forEach(t),CKe=r(Y7," \u2014 "),jS=n(Y7,"A",{href:!0});var YDr=s(jS);wKe=r(YDr,"MPNetTokenizer"),YDr.forEach(t),AKe=r(Y7," or "),DS=n(Y7,"A",{href:!0});var KDr=s(DS);yKe=r(KDr,"MPNetTokenizerFast"),KDr.forEach(t),LKe=r(Y7," (MPNet model)"),Y7.forEach(t),xKe=i(w),Es=n(w,"LI",{});var K7=s(Es);fee=n(K7,"STRONG",{});var ZDr=s(fee);kKe=r(ZDr,"mt5"),ZDr.forEach(t),SKe=r(K7," \u2014 "),GS=n(K7,"A",{href:!0});var eGr=s(GS);RKe=r(eGr,"MT5Tokenizer"),eGr.forEach(t),BKe=r(K7," or "),OS=n(K7,"A",{href:!0});var oGr=s(OS);PKe=r(oGr,"MT5TokenizerFast"),oGr.forEach(t),$Ke=r(K7," (mT5 model)"),K7.forEach(t),IKe=i(w),Cs=n(w,"LI",{});var Z7=s(Cs);mee=n(Z7,"STRONG",{});var rGr=s(mee);qKe=r(rGr,"openai-gpt"),rGr.forEach(t),NKe=r(Z7," \u2014 "),VS=n(Z7,"A",{href:!0});var tGr=s(VS);jKe=r(tGr,"OpenAIGPTTokenizer"),tGr.forEach(t),DKe=r(Z7," or "),XS=n(Z7,"A",{href:!0});var aGr=s(XS);GKe=r(aGr,"OpenAIGPTTokenizerFast"),aGr.forEach(t),OKe=r(Z7," (OpenAI GPT model)"),Z7.forEach(t),VKe=i(w),ws=n(w,"LI",{});var e9=s(ws);gee=n(e9,"STRONG",{});var nGr=s(gee);XKe=r(nGr,"pegasus"),nGr.forEach(t),zKe=r(e9," \u2014 "),zS=n(e9,"A",{href:!0});var sGr=s(zS);QKe=r(sGr,"PegasusTokenizer"),sGr.forEach(t),WKe=r(e9," or "),QS=n(e9,"A",{href:!0});var lGr=s(QS);HKe=r(lGr,"PegasusTokenizerFast"),lGr.forEach(t),UKe=r(e9," (Pegasus model)"),e9.forEach(t),JKe=i(w),oh=n(w,"LI",{});var ZTe=s(oh);hee=n(ZTe,"STRONG",{});var iGr=s(hee);YKe=r(iGr,"perceiver"),iGr.forEach(t),KKe=r(ZTe," \u2014 "),WS=n(ZTe,"A",{href:!0});var dGr=s(WS);ZKe=r(dGr,"PerceiverTokenizer"),dGr.forEach(t),eZe=r(ZTe," (Perceiver model)"),ZTe.forEach(t),oZe=i(w),rh=n(w,"LI",{});var eMe=s(rh);pee=n(eMe,"STRONG",{});var cGr=s(pee);rZe=r(cGr,"phobert"),cGr.forEach(t),tZe=r(eMe," \u2014 "),HS=n(eMe,"A",{href:!0});var fGr=s(HS);aZe=r(fGr,"PhobertTokenizer"),fGr.forEach(t),nZe=r(eMe," (PhoBERT model)"),eMe.forEach(t),sZe=i(w),th=n(w,"LI",{});var oMe=s(th);_ee=n(oMe,"STRONG",{});var mGr=s(_ee);lZe=r(mGr,"plbart"),mGr.forEach(t),iZe=r(oMe," \u2014 "),US=n(oMe,"A",{href:!0});var gGr=s(US);dZe=r(gGr,"PLBartTokenizer"),gGr.forEach(t),cZe=r(oMe," (PLBart model)"),oMe.forEach(t),fZe=i(w),ah=n(w,"LI",{});var rMe=s(ah);uee=n(rMe,"STRONG",{});var hGr=s(uee);mZe=r(hGr,"prophetnet"),hGr.forEach(t),gZe=r(rMe," \u2014 "),JS=n(rMe,"A",{href:!0});var pGr=s(JS);hZe=r(pGr,"ProphetNetTokenizer"),pGr.forEach(t),pZe=r(rMe," (ProphetNet model)"),rMe.forEach(t),_Ze=i(w),As=n(w,"LI",{});var o9=s(As);bee=n(o9,"STRONG",{});var _Gr=s(bee);uZe=r(_Gr,"qdqbert"),_Gr.forEach(t),bZe=r(o9," \u2014 "),YS=n(o9,"A",{href:!0});var uGr=s(YS);FZe=r(uGr,"BertTokenizer"),uGr.forEach(t),vZe=r(o9," or "),KS=n(o9,"A",{href:!0});var bGr=s(KS);TZe=r(bGr,"BertTokenizerFast"),bGr.forEach(t),MZe=r(o9," (QDQBert model)"),o9.forEach(t),EZe=i(w),nh=n(w,"LI",{});var tMe=s(nh);Fee=n(tMe,"STRONG",{});var FGr=s(Fee);CZe=r(FGr,"rag"),FGr.forEach(t),wZe=r(tMe," \u2014 "),ZS=n(tMe,"A",{href:!0});var vGr=s(ZS);AZe=r(vGr,"RagTokenizer"),vGr.forEach(t),yZe=r(tMe," (RAG model)"),tMe.forEach(t),LZe=i(w),ys=n(w,"LI",{});var r9=s(ys);vee=n(r9,"STRONG",{});var TGr=s(vee);xZe=r(TGr,"realm"),TGr.forEach(t),kZe=r(r9," \u2014 "),eR=n(r9,"A",{href:!0});var MGr=s(eR);SZe=r(MGr,"RealmTokenizer"),MGr.forEach(t),RZe=r(r9," or "),oR=n(r9,"A",{href:!0});var EGr=s(oR);BZe=r(EGr,"RealmTokenizerFast"),EGr.forEach(t),PZe=r(r9," (Realm model)"),r9.forEach(t),$Ze=i(w),Ls=n(w,"LI",{});var t9=s(Ls);Tee=n(t9,"STRONG",{});var CGr=s(Tee);IZe=r(CGr,"reformer"),CGr.forEach(t),qZe=r(t9," \u2014 "),rR=n(t9,"A",{href:!0});var wGr=s(rR);NZe=r(wGr,"ReformerTokenizer"),wGr.forEach(t),jZe=r(t9," or "),tR=n(t9,"A",{href:!0});var AGr=s(tR);DZe=r(AGr,"ReformerTokenizerFast"),AGr.forEach(t),GZe=r(t9," (Reformer model)"),t9.forEach(t),OZe=i(w),xs=n(w,"LI",{});var a9=s(xs);Mee=n(a9,"STRONG",{});var yGr=s(Mee);VZe=r(yGr,"rembert"),yGr.forEach(t),XZe=r(a9," \u2014 "),aR=n(a9,"A",{href:!0});var LGr=s(aR);zZe=r(LGr,"RemBertTokenizer"),LGr.forEach(t),QZe=r(a9," or "),nR=n(a9,"A",{href:!0});var xGr=s(nR);WZe=r(xGr,"RemBertTokenizerFast"),xGr.forEach(t),HZe=r(a9," (RemBERT model)"),a9.forEach(t),UZe=i(w),ks=n(w,"LI",{});var n9=s(ks);Eee=n(n9,"STRONG",{});var kGr=s(Eee);JZe=r(kGr,"retribert"),kGr.forEach(t),YZe=r(n9," \u2014 "),sR=n(n9,"A",{href:!0});var SGr=s(sR);KZe=r(SGr,"RetriBertTokenizer"),SGr.forEach(t),ZZe=r(n9," or "),lR=n(n9,"A",{href:!0});var RGr=s(lR);eeo=r(RGr,"RetriBertTokenizerFast"),RGr.forEach(t),oeo=r(n9," (RetriBERT model)"),n9.forEach(t),reo=i(w),Ss=n(w,"LI",{});var s9=s(Ss);Cee=n(s9,"STRONG",{});var BGr=s(Cee);teo=r(BGr,"roberta"),BGr.forEach(t),aeo=r(s9," \u2014 "),iR=n(s9,"A",{href:!0});var PGr=s(iR);neo=r(PGr,"RobertaTokenizer"),PGr.forEach(t),seo=r(s9," or "),dR=n(s9,"A",{href:!0});var $Gr=s(dR);leo=r($Gr,"RobertaTokenizerFast"),$Gr.forEach(t),ieo=r(s9," (RoBERTa model)"),s9.forEach(t),deo=i(w),Rs=n(w,"LI",{});var l9=s(Rs);wee=n(l9,"STRONG",{});var IGr=s(wee);ceo=r(IGr,"roformer"),IGr.forEach(t),feo=r(l9," \u2014 "),cR=n(l9,"A",{href:!0});var qGr=s(cR);meo=r(qGr,"RoFormerTokenizer"),qGr.forEach(t),geo=r(l9," or "),fR=n(l9,"A",{href:!0});var NGr=s(fR);heo=r(NGr,"RoFormerTokenizerFast"),NGr.forEach(t),peo=r(l9," (RoFormer model)"),l9.forEach(t),_eo=i(w),sh=n(w,"LI",{});var aMe=s(sh);Aee=n(aMe,"STRONG",{});var jGr=s(Aee);ueo=r(jGr,"speech_to_text"),jGr.forEach(t),beo=r(aMe," \u2014 "),mR=n(aMe,"A",{href:!0});var DGr=s(mR);Feo=r(DGr,"Speech2TextTokenizer"),DGr.forEach(t),veo=r(aMe," (Speech2Text model)"),aMe.forEach(t),Teo=i(w),lh=n(w,"LI",{});var nMe=s(lh);yee=n(nMe,"STRONG",{});var GGr=s(yee);Meo=r(GGr,"speech_to_text_2"),GGr.forEach(t),Eeo=r(nMe," \u2014 "),gR=n(nMe,"A",{href:!0});var OGr=s(gR);Ceo=r(OGr,"Speech2Text2Tokenizer"),OGr.forEach(t),weo=r(nMe," (Speech2Text2 model)"),nMe.forEach(t),Aeo=i(w),Bs=n(w,"LI",{});var i9=s(Bs);Lee=n(i9,"STRONG",{});var VGr=s(Lee);yeo=r(VGr,"splinter"),VGr.forEach(t),Leo=r(i9," \u2014 "),hR=n(i9,"A",{href:!0});var XGr=s(hR);xeo=r(XGr,"SplinterTokenizer"),XGr.forEach(t),keo=r(i9," or "),pR=n(i9,"A",{href:!0});var zGr=s(pR);Seo=r(zGr,"SplinterTokenizerFast"),zGr.forEach(t),Reo=r(i9," (Splinter model)"),i9.forEach(t),Beo=i(w),Ps=n(w,"LI",{});var d9=s(Ps);xee=n(d9,"STRONG",{});var QGr=s(xee);Peo=r(QGr,"squeezebert"),QGr.forEach(t),$eo=r(d9," \u2014 "),_R=n(d9,"A",{href:!0});var WGr=s(_R);Ieo=r(WGr,"SqueezeBertTokenizer"),WGr.forEach(t),qeo=r(d9," or "),uR=n(d9,"A",{href:!0});var HGr=s(uR);Neo=r(HGr,"SqueezeBertTokenizerFast"),HGr.forEach(t),jeo=r(d9," (SqueezeBERT model)"),d9.forEach(t),Deo=i(w),$s=n(w,"LI",{});var c9=s($s);kee=n(c9,"STRONG",{});var UGr=s(kee);Geo=r(UGr,"t5"),UGr.forEach(t),Oeo=r(c9," \u2014 "),bR=n(c9,"A",{href:!0});var JGr=s(bR);Veo=r(JGr,"T5Tokenizer"),JGr.forEach(t),Xeo=r(c9," or "),FR=n(c9,"A",{href:!0});var YGr=s(FR);zeo=r(YGr,"T5TokenizerFast"),YGr.forEach(t),Qeo=r(c9," (T5 model)"),c9.forEach(t),Weo=i(w),ih=n(w,"LI",{});var sMe=s(ih);See=n(sMe,"STRONG",{});var KGr=s(See);Heo=r(KGr,"tapas"),KGr.forEach(t),Ueo=r(sMe," \u2014 "),vR=n(sMe,"A",{href:!0});var ZGr=s(vR);Jeo=r(ZGr,"TapasTokenizer"),ZGr.forEach(t),Yeo=r(sMe," (TAPAS model)"),sMe.forEach(t),Keo=i(w),dh=n(w,"LI",{});var lMe=s(dh);Ree=n(lMe,"STRONG",{});var eOr=s(Ree);Zeo=r(eOr,"tapex"),eOr.forEach(t),eoo=r(lMe," \u2014 "),TR=n(lMe,"A",{href:!0});var oOr=s(TR);ooo=r(oOr,"TapexTokenizer"),oOr.forEach(t),roo=r(lMe," (TAPEX model)"),lMe.forEach(t),too=i(w),ch=n(w,"LI",{});var iMe=s(ch);Bee=n(iMe,"STRONG",{});var rOr=s(Bee);aoo=r(rOr,"transfo-xl"),rOr.forEach(t),noo=r(iMe," \u2014 "),MR=n(iMe,"A",{href:!0});var tOr=s(MR);soo=r(tOr,"TransfoXLTokenizer"),tOr.forEach(t),loo=r(iMe," (Transformer-XL model)"),iMe.forEach(t),ioo=i(w),fh=n(w,"LI",{});var dMe=s(fh);Pee=n(dMe,"STRONG",{});var aOr=s(Pee);doo=r(aOr,"wav2vec2"),aOr.forEach(t),coo=r(dMe," \u2014 "),ER=n(dMe,"A",{href:!0});var nOr=s(ER);foo=r(nOr,"Wav2Vec2CTCTokenizer"),nOr.forEach(t),moo=r(dMe," (Wav2Vec2 model)"),dMe.forEach(t),goo=i(w),mh=n(w,"LI",{});var cMe=s(mh);$ee=n(cMe,"STRONG",{});var sOr=s($ee);hoo=r(sOr,"wav2vec2_phoneme"),sOr.forEach(t),poo=r(cMe," \u2014 "),CR=n(cMe,"A",{href:!0});var lOr=s(CR);_oo=r(lOr,"Wav2Vec2PhonemeCTCTokenizer"),lOr.forEach(t),uoo=r(cMe," (Wav2Vec2Phoneme model)"),cMe.forEach(t),boo=i(w),Is=n(w,"LI",{});var f9=s(Is);Iee=n(f9,"STRONG",{});var iOr=s(Iee);Foo=r(iOr,"xglm"),iOr.forEach(t),voo=r(f9," \u2014 "),wR=n(f9,"A",{href:!0});var dOr=s(wR);Too=r(dOr,"XGLMTokenizer"),dOr.forEach(t),Moo=r(f9," or "),AR=n(f9,"A",{href:!0});var cOr=s(AR);Eoo=r(cOr,"XGLMTokenizerFast"),cOr.forEach(t),Coo=r(f9," (XGLM model)"),f9.forEach(t),woo=i(w),gh=n(w,"LI",{});var fMe=s(gh);qee=n(fMe,"STRONG",{});var fOr=s(qee);Aoo=r(fOr,"xlm"),fOr.forEach(t),yoo=r(fMe," \u2014 "),yR=n(fMe,"A",{href:!0});var mOr=s(yR);Loo=r(mOr,"XLMTokenizer"),mOr.forEach(t),xoo=r(fMe," (XLM model)"),fMe.forEach(t),koo=i(w),hh=n(w,"LI",{});var mMe=s(hh);Nee=n(mMe,"STRONG",{});var gOr=s(Nee);Soo=r(gOr,"xlm-prophetnet"),gOr.forEach(t),Roo=r(mMe," \u2014 "),LR=n(mMe,"A",{href:!0});var hOr=s(LR);Boo=r(hOr,"XLMProphetNetTokenizer"),hOr.forEach(t),Poo=r(mMe," (XLMProphetNet model)"),mMe.forEach(t),$oo=i(w),qs=n(w,"LI",{});var m9=s(qs);jee=n(m9,"STRONG",{});var pOr=s(jee);Ioo=r(pOr,"xlm-roberta"),pOr.forEach(t),qoo=r(m9," \u2014 "),xR=n(m9,"A",{href:!0});var _Or=s(xR);Noo=r(_Or,"XLMRobertaTokenizer"),_Or.forEach(t),joo=r(m9," or "),kR=n(m9,"A",{href:!0});var uOr=s(kR);Doo=r(uOr,"XLMRobertaTokenizerFast"),uOr.forEach(t),Goo=r(m9," (XLM-RoBERTa model)"),m9.forEach(t),Ooo=i(w),Ns=n(w,"LI",{});var g9=s(Ns);Dee=n(g9,"STRONG",{});var bOr=s(Dee);Voo=r(bOr,"xlnet"),bOr.forEach(t),Xoo=r(g9," \u2014 "),SR=n(g9,"A",{href:!0});var FOr=s(SR);zoo=r(FOr,"XLNetTokenizer"),FOr.forEach(t),Qoo=r(g9," or "),RR=n(g9,"A",{href:!0});var vOr=s(RR);Woo=r(vOr,"XLNetTokenizerFast"),vOr.forEach(t),Hoo=r(g9," (XLNet model)"),g9.forEach(t),w.forEach(t),Uoo=i(ha),Gee=n(ha,"P",{});var TOr=s(Gee);Joo=r(TOr,"Examples:"),TOr.forEach(t),Yoo=i(ha),m(VC.$$.fragment,ha),ha.forEach(t),Koo=i(Vs),ph=n(Vs,"DIV",{class:!0});var IPe=s(ph);m(XC.$$.fragment,IPe),Zoo=i(IPe),Oee=n(IPe,"P",{});var MOr=s(Oee);ero=r(MOr,"Register a new tokenizer in this mapping."),MOr.forEach(t),IPe.forEach(t),Vs.forEach(t),RRe=i(c),Wi=n(c,"H2",{class:!0});var qPe=s(Wi);_h=n(qPe,"A",{id:!0,class:!0,href:!0});var EOr=s(_h);Vee=n(EOr,"SPAN",{});var COr=s(Vee);m(zC.$$.fragment,COr),COr.forEach(t),EOr.forEach(t),oro=i(qPe),Xee=n(qPe,"SPAN",{});var wOr=s(Xee);rro=r(wOr,"AutoFeatureExtractor"),wOr.forEach(t),qPe.forEach(t),BRe=i(c),Ho=n(c,"DIV",{class:!0});var Xs=s(Ho);m(QC.$$.fragment,Xs),tro=i(Xs),WC=n(Xs,"P",{});var NPe=s(WC);aro=r(NPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),BR=n(NPe,"A",{href:!0});var AOr=s(BR);nro=r(AOr,"AutoFeatureExtractor.from_pretrained()"),AOr.forEach(t),sro=r(NPe," class method."),NPe.forEach(t),lro=i(Xs),HC=n(Xs,"P",{});var jPe=s(HC);iro=r(jPe,"This class cannot be instantiated directly using "),zee=n(jPe,"CODE",{});var yOr=s(zee);dro=r(yOr,"__init__()"),yOr.forEach(t),cro=r(jPe," (throws an error)."),jPe.forEach(t),fro=i(Xs),$e=n(Xs,"DIV",{class:!0});var Nt=s($e);m(UC.$$.fragment,Nt),mro=i(Nt),Qee=n(Nt,"P",{});var LOr=s(Qee);gro=r(LOr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),LOr.forEach(t),hro=i(Nt),Va=n(Nt,"P",{});var LE=s(Va);pro=r(LE,"The feature extractor class to instantiate is selected based on the "),Wee=n(LE,"CODE",{});var xOr=s(Wee);_ro=r(xOr,"model_type"),xOr.forEach(t),uro=r(LE,` property of the config object
(either passed as an argument or loaded from `),Hee=n(LE,"CODE",{});var kOr=s(Hee);bro=r(kOr,"pretrained_model_name_or_path"),kOr.forEach(t),Fro=r(LE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Uee=n(LE,"CODE",{});var SOr=s(Uee);vro=r(SOr,"pretrained_model_name_or_path"),SOr.forEach(t),Tro=r(LE,":"),LE.forEach(t),Mro=i(Nt),ee=n(Nt,"UL",{});var ae=s(ee);uh=n(ae,"LI",{});var gMe=s(uh);Jee=n(gMe,"STRONG",{});var ROr=s(Jee);Ero=r(ROr,"beit"),ROr.forEach(t),Cro=r(gMe," \u2014 "),PR=n(gMe,"A",{href:!0});var BOr=s(PR);wro=r(BOr,"BeitFeatureExtractor"),BOr.forEach(t),Aro=r(gMe," (BEiT model)"),gMe.forEach(t),yro=i(ae),bh=n(ae,"LI",{});var hMe=s(bh);Yee=n(hMe,"STRONG",{});var POr=s(Yee);Lro=r(POr,"clip"),POr.forEach(t),xro=r(hMe," \u2014 "),$R=n(hMe,"A",{href:!0});var $Or=s($R);kro=r($Or,"CLIPFeatureExtractor"),$Or.forEach(t),Sro=r(hMe," (CLIP model)"),hMe.forEach(t),Rro=i(ae),Fh=n(ae,"LI",{});var pMe=s(Fh);Kee=n(pMe,"STRONG",{});var IOr=s(Kee);Bro=r(IOr,"convnext"),IOr.forEach(t),Pro=r(pMe," \u2014 "),IR=n(pMe,"A",{href:!0});var qOr=s(IR);$ro=r(qOr,"ConvNextFeatureExtractor"),qOr.forEach(t),Iro=r(pMe," (ConvNext model)"),pMe.forEach(t),qro=i(ae),vh=n(ae,"LI",{});var _Me=s(vh);Zee=n(_Me,"STRONG",{});var NOr=s(Zee);Nro=r(NOr,"deit"),NOr.forEach(t),jro=r(_Me," \u2014 "),qR=n(_Me,"A",{href:!0});var jOr=s(qR);Dro=r(jOr,"DeiTFeatureExtractor"),jOr.forEach(t),Gro=r(_Me," (DeiT model)"),_Me.forEach(t),Oro=i(ae),Th=n(ae,"LI",{});var uMe=s(Th);eoe=n(uMe,"STRONG",{});var DOr=s(eoe);Vro=r(DOr,"detr"),DOr.forEach(t),Xro=r(uMe," \u2014 "),NR=n(uMe,"A",{href:!0});var GOr=s(NR);zro=r(GOr,"DetrFeatureExtractor"),GOr.forEach(t),Qro=r(uMe," (DETR model)"),uMe.forEach(t),Wro=i(ae),Mh=n(ae,"LI",{});var bMe=s(Mh);ooe=n(bMe,"STRONG",{});var OOr=s(ooe);Hro=r(OOr,"hubert"),OOr.forEach(t),Uro=r(bMe," \u2014 "),jR=n(bMe,"A",{href:!0});var VOr=s(jR);Jro=r(VOr,"Wav2Vec2FeatureExtractor"),VOr.forEach(t),Yro=r(bMe," (Hubert model)"),bMe.forEach(t),Kro=i(ae),Eh=n(ae,"LI",{});var FMe=s(Eh);roe=n(FMe,"STRONG",{});var XOr=s(roe);Zro=r(XOr,"layoutlmv2"),XOr.forEach(t),eto=r(FMe," \u2014 "),DR=n(FMe,"A",{href:!0});var zOr=s(DR);oto=r(zOr,"LayoutLMv2FeatureExtractor"),zOr.forEach(t),rto=r(FMe," (LayoutLMv2 model)"),FMe.forEach(t),tto=i(ae),Ch=n(ae,"LI",{});var vMe=s(Ch);toe=n(vMe,"STRONG",{});var QOr=s(toe);ato=r(QOr,"maskformer"),QOr.forEach(t),nto=r(vMe," \u2014 "),GR=n(vMe,"A",{href:!0});var WOr=s(GR);sto=r(WOr,"MaskFormerFeatureExtractor"),WOr.forEach(t),lto=r(vMe," (MaskFormer model)"),vMe.forEach(t),ito=i(ae),wh=n(ae,"LI",{});var TMe=s(wh);aoe=n(TMe,"STRONG",{});var HOr=s(aoe);dto=r(HOr,"perceiver"),HOr.forEach(t),cto=r(TMe," \u2014 "),OR=n(TMe,"A",{href:!0});var UOr=s(OR);fto=r(UOr,"PerceiverFeatureExtractor"),UOr.forEach(t),mto=r(TMe," (Perceiver model)"),TMe.forEach(t),gto=i(ae),Ah=n(ae,"LI",{});var MMe=s(Ah);noe=n(MMe,"STRONG",{});var JOr=s(noe);hto=r(JOr,"poolformer"),JOr.forEach(t),pto=r(MMe," \u2014 "),VR=n(MMe,"A",{href:!0});var YOr=s(VR);_to=r(YOr,"PoolFormerFeatureExtractor"),YOr.forEach(t),uto=r(MMe," (PoolFormer model)"),MMe.forEach(t),bto=i(ae),yh=n(ae,"LI",{});var EMe=s(yh);soe=n(EMe,"STRONG",{});var KOr=s(soe);Fto=r(KOr,"regnet"),KOr.forEach(t),vto=r(EMe," \u2014 "),XR=n(EMe,"A",{href:!0});var ZOr=s(XR);Tto=r(ZOr,"ConvNextFeatureExtractor"),ZOr.forEach(t),Mto=r(EMe," (RegNet model)"),EMe.forEach(t),Eto=i(ae),Lh=n(ae,"LI",{});var CMe=s(Lh);loe=n(CMe,"STRONG",{});var eVr=s(loe);Cto=r(eVr,"resnet"),eVr.forEach(t),wto=r(CMe," \u2014 "),zR=n(CMe,"A",{href:!0});var oVr=s(zR);Ato=r(oVr,"ConvNextFeatureExtractor"),oVr.forEach(t),yto=r(CMe," (ResNet model)"),CMe.forEach(t),Lto=i(ae),xh=n(ae,"LI",{});var wMe=s(xh);ioe=n(wMe,"STRONG",{});var rVr=s(ioe);xto=r(rVr,"segformer"),rVr.forEach(t),kto=r(wMe," \u2014 "),QR=n(wMe,"A",{href:!0});var tVr=s(QR);Sto=r(tVr,"SegformerFeatureExtractor"),tVr.forEach(t),Rto=r(wMe," (SegFormer model)"),wMe.forEach(t),Bto=i(ae),kh=n(ae,"LI",{});var AMe=s(kh);doe=n(AMe,"STRONG",{});var aVr=s(doe);Pto=r(aVr,"speech_to_text"),aVr.forEach(t),$to=r(AMe," \u2014 "),WR=n(AMe,"A",{href:!0});var nVr=s(WR);Ito=r(nVr,"Speech2TextFeatureExtractor"),nVr.forEach(t),qto=r(AMe," (Speech2Text model)"),AMe.forEach(t),Nto=i(ae),Sh=n(ae,"LI",{});var yMe=s(Sh);coe=n(yMe,"STRONG",{});var sVr=s(coe);jto=r(sVr,"swin"),sVr.forEach(t),Dto=r(yMe," \u2014 "),HR=n(yMe,"A",{href:!0});var lVr=s(HR);Gto=r(lVr,"ViTFeatureExtractor"),lVr.forEach(t),Oto=r(yMe," (Swin model)"),yMe.forEach(t),Vto=i(ae),Rh=n(ae,"LI",{});var LMe=s(Rh);foe=n(LMe,"STRONG",{});var iVr=s(foe);Xto=r(iVr,"van"),iVr.forEach(t),zto=r(LMe," \u2014 "),UR=n(LMe,"A",{href:!0});var dVr=s(UR);Qto=r(dVr,"ConvNextFeatureExtractor"),dVr.forEach(t),Wto=r(LMe," (VAN model)"),LMe.forEach(t),Hto=i(ae),Bh=n(ae,"LI",{});var xMe=s(Bh);moe=n(xMe,"STRONG",{});var cVr=s(moe);Uto=r(cVr,"vit"),cVr.forEach(t),Jto=r(xMe," \u2014 "),JR=n(xMe,"A",{href:!0});var fVr=s(JR);Yto=r(fVr,"ViTFeatureExtractor"),fVr.forEach(t),Kto=r(xMe," (ViT model)"),xMe.forEach(t),Zto=i(ae),Ph=n(ae,"LI",{});var kMe=s(Ph);goe=n(kMe,"STRONG",{});var mVr=s(goe);eao=r(mVr,"vit_mae"),mVr.forEach(t),oao=r(kMe," \u2014 "),YR=n(kMe,"A",{href:!0});var gVr=s(YR);rao=r(gVr,"ViTFeatureExtractor"),gVr.forEach(t),tao=r(kMe," (ViTMAE model)"),kMe.forEach(t),aao=i(ae),$h=n(ae,"LI",{});var SMe=s($h);hoe=n(SMe,"STRONG",{});var hVr=s(hoe);nao=r(hVr,"wav2vec2"),hVr.forEach(t),sao=r(SMe," \u2014 "),KR=n(SMe,"A",{href:!0});var pVr=s(KR);lao=r(pVr,"Wav2Vec2FeatureExtractor"),pVr.forEach(t),iao=r(SMe," (Wav2Vec2 model)"),SMe.forEach(t),ae.forEach(t),dao=i(Nt),m(Ih.$$.fragment,Nt),cao=i(Nt),poe=n(Nt,"P",{});var _Vr=s(poe);fao=r(_Vr,"Examples:"),_Vr.forEach(t),mao=i(Nt),m(JC.$$.fragment,Nt),Nt.forEach(t),gao=i(Xs),qh=n(Xs,"DIV",{class:!0});var DPe=s(qh);m(YC.$$.fragment,DPe),hao=i(DPe),_oe=n(DPe,"P",{});var uVr=s(_oe);pao=r(uVr,"Register a new feature extractor for this class."),uVr.forEach(t),DPe.forEach(t),Xs.forEach(t),PRe=i(c),Hi=n(c,"H2",{class:!0});var GPe=s(Hi);Nh=n(GPe,"A",{id:!0,class:!0,href:!0});var bVr=s(Nh);uoe=n(bVr,"SPAN",{});var FVr=s(uoe);m(KC.$$.fragment,FVr),FVr.forEach(t),bVr.forEach(t),_ao=i(GPe),boe=n(GPe,"SPAN",{});var vVr=s(boe);uao=r(vVr,"AutoProcessor"),vVr.forEach(t),GPe.forEach(t),$Re=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(ZC.$$.fragment,zs),bao=i(zs),ew=n(zs,"P",{});var OPe=s(ew);Fao=r(OPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),ZR=n(OPe,"A",{href:!0});var TVr=s(ZR);vao=r(TVr,"AutoProcessor.from_pretrained()"),TVr.forEach(t),Tao=r(OPe," class method."),OPe.forEach(t),Mao=i(zs),ow=n(zs,"P",{});var VPe=s(ow);Eao=r(VPe,"This class cannot be instantiated directly using "),Foe=n(VPe,"CODE",{});var MVr=s(Foe);Cao=r(MVr,"__init__()"),MVr.forEach(t),wao=r(VPe," (throws an error)."),VPe.forEach(t),Aao=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);m(rw.$$.fragment,jt),yao=i(jt),voe=n(jt,"P",{});var EVr=s(voe);Lao=r(EVr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),EVr.forEach(t),xao=i(jt),Ui=n(jt,"P",{});var hU=s(Ui);kao=r(hU,"The processor class to instantiate is selected based on the "),Toe=n(hU,"CODE",{});var CVr=s(Toe);Sao=r(CVr,"model_type"),CVr.forEach(t),Rao=r(hU,` property of the config object (either
passed as an argument or loaded from `),Moe=n(hU,"CODE",{});var wVr=s(Moe);Bao=r(wVr,"pretrained_model_name_or_path"),wVr.forEach(t),Pao=r(hU," if possible):"),hU.forEach(t),$ao=i(jt),ke=n(jt,"UL",{});var jo=s(ke);jh=n(jo,"LI",{});var RMe=s(jh);Eoe=n(RMe,"STRONG",{});var AVr=s(Eoe);Iao=r(AVr,"clip"),AVr.forEach(t),qao=r(RMe," \u2014 "),eB=n(RMe,"A",{href:!0});var yVr=s(eB);Nao=r(yVr,"CLIPProcessor"),yVr.forEach(t),jao=r(RMe," (CLIP model)"),RMe.forEach(t),Dao=i(jo),Dh=n(jo,"LI",{});var BMe=s(Dh);Coe=n(BMe,"STRONG",{});var LVr=s(Coe);Gao=r(LVr,"layoutlmv2"),LVr.forEach(t),Oao=r(BMe," \u2014 "),oB=n(BMe,"A",{href:!0});var xVr=s(oB);Vao=r(xVr,"LayoutLMv2Processor"),xVr.forEach(t),Xao=r(BMe," (LayoutLMv2 model)"),BMe.forEach(t),zao=i(jo),Gh=n(jo,"LI",{});var PMe=s(Gh);woe=n(PMe,"STRONG",{});var kVr=s(woe);Qao=r(kVr,"layoutxlm"),kVr.forEach(t),Wao=r(PMe," \u2014 "),rB=n(PMe,"A",{href:!0});var SVr=s(rB);Hao=r(SVr,"LayoutXLMProcessor"),SVr.forEach(t),Uao=r(PMe," (LayoutXLM model)"),PMe.forEach(t),Jao=i(jo),Oh=n(jo,"LI",{});var $Me=s(Oh);Aoe=n($Me,"STRONG",{});var RVr=s(Aoe);Yao=r(RVr,"speech_to_text"),RVr.forEach(t),Kao=r($Me," \u2014 "),tB=n($Me,"A",{href:!0});var BVr=s(tB);Zao=r(BVr,"Speech2TextProcessor"),BVr.forEach(t),eno=r($Me," (Speech2Text model)"),$Me.forEach(t),ono=i(jo),Vh=n(jo,"LI",{});var IMe=s(Vh);yoe=n(IMe,"STRONG",{});var PVr=s(yoe);rno=r(PVr,"speech_to_text_2"),PVr.forEach(t),tno=r(IMe," \u2014 "),aB=n(IMe,"A",{href:!0});var $Vr=s(aB);ano=r($Vr,"Speech2Text2Processor"),$Vr.forEach(t),nno=r(IMe," (Speech2Text2 model)"),IMe.forEach(t),sno=i(jo),Xh=n(jo,"LI",{});var qMe=s(Xh);Loe=n(qMe,"STRONG",{});var IVr=s(Loe);lno=r(IVr,"trocr"),IVr.forEach(t),ino=r(qMe," \u2014 "),nB=n(qMe,"A",{href:!0});var qVr=s(nB);dno=r(qVr,"TrOCRProcessor"),qVr.forEach(t),cno=r(qMe," (TrOCR model)"),qMe.forEach(t),fno=i(jo),zh=n(jo,"LI",{});var NMe=s(zh);xoe=n(NMe,"STRONG",{});var NVr=s(xoe);mno=r(NVr,"vision-text-dual-encoder"),NVr.forEach(t),gno=r(NMe," \u2014 "),sB=n(NMe,"A",{href:!0});var jVr=s(sB);hno=r(jVr,"VisionTextDualEncoderProcessor"),jVr.forEach(t),pno=r(NMe," (VisionTextDualEncoder model)"),NMe.forEach(t),_no=i(jo),Qh=n(jo,"LI",{});var jMe=s(Qh);koe=n(jMe,"STRONG",{});var DVr=s(koe);uno=r(DVr,"wav2vec2"),DVr.forEach(t),bno=r(jMe," \u2014 "),lB=n(jMe,"A",{href:!0});var GVr=s(lB);Fno=r(GVr,"Wav2Vec2Processor"),GVr.forEach(t),vno=r(jMe," (Wav2Vec2 model)"),jMe.forEach(t),jo.forEach(t),Tno=i(jt),m(Wh.$$.fragment,jt),Mno=i(jt),Soe=n(jt,"P",{});var OVr=s(Soe);Eno=r(OVr,"Examples:"),OVr.forEach(t),Cno=i(jt),m(tw.$$.fragment,jt),jt.forEach(t),wno=i(zs),Hh=n(zs,"DIV",{class:!0});var XPe=s(Hh);m(aw.$$.fragment,XPe),Ano=i(XPe),Roe=n(XPe,"P",{});var VVr=s(Roe);yno=r(VVr,"Register a new processor for this class."),VVr.forEach(t),XPe.forEach(t),zs.forEach(t),IRe=i(c),Ji=n(c,"H2",{class:!0});var zPe=s(Ji);Uh=n(zPe,"A",{id:!0,class:!0,href:!0});var XVr=s(Uh);Boe=n(XVr,"SPAN",{});var zVr=s(Boe);m(nw.$$.fragment,zVr),zVr.forEach(t),XVr.forEach(t),Lno=i(zPe),Poe=n(zPe,"SPAN",{});var QVr=s(Poe);xno=r(QVr,"AutoModel"),QVr.forEach(t),zPe.forEach(t),qRe=i(c),Jo=n(c,"DIV",{class:!0});var Qs=s(Jo);m(sw.$$.fragment,Qs),kno=i(Qs),Yi=n(Qs,"P",{});var pU=s(Yi);Sno=r(pU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iB=n(pU,"A",{href:!0});var WVr=s(iB);Rno=r(WVr,"from_pretrained()"),WVr.forEach(t),Bno=r(pU," class method or the "),dB=n(pU,"A",{href:!0});var HVr=s(dB);Pno=r(HVr,"from_config()"),HVr.forEach(t),$no=r(pU,` class
method.`),pU.forEach(t),Ino=i(Qs),lw=n(Qs,"P",{});var QPe=s(lw);qno=r(QPe,"This class cannot be instantiated directly using "),$oe=n(QPe,"CODE",{});var UVr=s($oe);Nno=r(UVr,"__init__()"),UVr.forEach(t),jno=r(QPe," (throws an error)."),QPe.forEach(t),Dno=i(Qs),Xr=n(Qs,"DIV",{class:!0});var Ws=s(Xr);m(iw.$$.fragment,Ws),Gno=i(Ws),Ioe=n(Ws,"P",{});var JVr=s(Ioe);Ono=r(JVr,"Instantiates one of the base model classes of the library from a configuration."),JVr.forEach(t),Vno=i(Ws),Ki=n(Ws,"P",{});var _U=s(Ki);Xno=r(_U,`Note:
Loading a model from its configuration file does `),qoe=n(_U,"STRONG",{});var YVr=s(qoe);zno=r(YVr,"not"),YVr.forEach(t),Qno=r(_U,` load the model weights. It only affects the
model\u2019s configuration. Use `),cB=n(_U,"A",{href:!0});var KVr=s(cB);Wno=r(KVr,"from_pretrained()"),KVr.forEach(t),Hno=r(_U," to load the model weights."),_U.forEach(t),Uno=i(Ws),Noe=n(Ws,"P",{});var ZVr=s(Noe);Jno=r(ZVr,"Examples:"),ZVr.forEach(t),Yno=i(Ws),m(dw.$$.fragment,Ws),Ws.forEach(t),Kno=i(Qs),qe=n(Qs,"DIV",{class:!0});var Dt=s(qe);m(cw.$$.fragment,Dt),Zno=i(Dt),joe=n(Dt,"P",{});var eXr=s(joe);eso=r(eXr,"Instantiate one of the base model classes of the library from a pretrained model."),eXr.forEach(t),oso=i(Dt),Xa=n(Dt,"P",{});var xE=s(Xa);rso=r(xE,"The model class to instantiate is selected based on the "),Doe=n(xE,"CODE",{});var oXr=s(Doe);tso=r(oXr,"model_type"),oXr.forEach(t),aso=r(xE,` property of the config object (either
passed as an argument or loaded from `),Goe=n(xE,"CODE",{});var rXr=s(Goe);nso=r(rXr,"pretrained_model_name_or_path"),rXr.forEach(t),sso=r(xE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ooe=n(xE,"CODE",{});var tXr=s(Ooe);lso=r(tXr,"pretrained_model_name_or_path"),tXr.forEach(t),iso=r(xE,":"),xE.forEach(t),dso=i(Dt),T=n(Dt,"UL",{});var M=s(T);Jh=n(M,"LI",{});var DMe=s(Jh);Voe=n(DMe,"STRONG",{});var aXr=s(Voe);cso=r(aXr,"albert"),aXr.forEach(t),fso=r(DMe," \u2014 "),fB=n(DMe,"A",{href:!0});var nXr=s(fB);mso=r(nXr,"AlbertModel"),nXr.forEach(t),gso=r(DMe," (ALBERT model)"),DMe.forEach(t),hso=i(M),Yh=n(M,"LI",{});var GMe=s(Yh);Xoe=n(GMe,"STRONG",{});var sXr=s(Xoe);pso=r(sXr,"bart"),sXr.forEach(t),_so=r(GMe," \u2014 "),mB=n(GMe,"A",{href:!0});var lXr=s(mB);uso=r(lXr,"BartModel"),lXr.forEach(t),bso=r(GMe," (BART model)"),GMe.forEach(t),Fso=i(M),Kh=n(M,"LI",{});var OMe=s(Kh);zoe=n(OMe,"STRONG",{});var iXr=s(zoe);vso=r(iXr,"beit"),iXr.forEach(t),Tso=r(OMe," \u2014 "),gB=n(OMe,"A",{href:!0});var dXr=s(gB);Mso=r(dXr,"BeitModel"),dXr.forEach(t),Eso=r(OMe," (BEiT model)"),OMe.forEach(t),Cso=i(M),Zh=n(M,"LI",{});var VMe=s(Zh);Qoe=n(VMe,"STRONG",{});var cXr=s(Qoe);wso=r(cXr,"bert"),cXr.forEach(t),Aso=r(VMe," \u2014 "),hB=n(VMe,"A",{href:!0});var fXr=s(hB);yso=r(fXr,"BertModel"),fXr.forEach(t),Lso=r(VMe," (BERT model)"),VMe.forEach(t),xso=i(M),ep=n(M,"LI",{});var XMe=s(ep);Woe=n(XMe,"STRONG",{});var mXr=s(Woe);kso=r(mXr,"bert-generation"),mXr.forEach(t),Sso=r(XMe," \u2014 "),pB=n(XMe,"A",{href:!0});var gXr=s(pB);Rso=r(gXr,"BertGenerationEncoder"),gXr.forEach(t),Bso=r(XMe," (Bert Generation model)"),XMe.forEach(t),Pso=i(M),op=n(M,"LI",{});var zMe=s(op);Hoe=n(zMe,"STRONG",{});var hXr=s(Hoe);$so=r(hXr,"big_bird"),hXr.forEach(t),Iso=r(zMe," \u2014 "),_B=n(zMe,"A",{href:!0});var pXr=s(_B);qso=r(pXr,"BigBirdModel"),pXr.forEach(t),Nso=r(zMe," (BigBird model)"),zMe.forEach(t),jso=i(M),rp=n(M,"LI",{});var QMe=s(rp);Uoe=n(QMe,"STRONG",{});var _Xr=s(Uoe);Dso=r(_Xr,"bigbird_pegasus"),_Xr.forEach(t),Gso=r(QMe," \u2014 "),uB=n(QMe,"A",{href:!0});var uXr=s(uB);Oso=r(uXr,"BigBirdPegasusModel"),uXr.forEach(t),Vso=r(QMe," (BigBirdPegasus model)"),QMe.forEach(t),Xso=i(M),tp=n(M,"LI",{});var WMe=s(tp);Joe=n(WMe,"STRONG",{});var bXr=s(Joe);zso=r(bXr,"blenderbot"),bXr.forEach(t),Qso=r(WMe," \u2014 "),bB=n(WMe,"A",{href:!0});var FXr=s(bB);Wso=r(FXr,"BlenderbotModel"),FXr.forEach(t),Hso=r(WMe," (Blenderbot model)"),WMe.forEach(t),Uso=i(M),ap=n(M,"LI",{});var HMe=s(ap);Yoe=n(HMe,"STRONG",{});var vXr=s(Yoe);Jso=r(vXr,"blenderbot-small"),vXr.forEach(t),Yso=r(HMe," \u2014 "),FB=n(HMe,"A",{href:!0});var TXr=s(FB);Kso=r(TXr,"BlenderbotSmallModel"),TXr.forEach(t),Zso=r(HMe," (BlenderbotSmall model)"),HMe.forEach(t),elo=i(M),np=n(M,"LI",{});var UMe=s(np);Koe=n(UMe,"STRONG",{});var MXr=s(Koe);olo=r(MXr,"camembert"),MXr.forEach(t),rlo=r(UMe," \u2014 "),vB=n(UMe,"A",{href:!0});var EXr=s(vB);tlo=r(EXr,"CamembertModel"),EXr.forEach(t),alo=r(UMe," (CamemBERT model)"),UMe.forEach(t),nlo=i(M),sp=n(M,"LI",{});var JMe=s(sp);Zoe=n(JMe,"STRONG",{});var CXr=s(Zoe);slo=r(CXr,"canine"),CXr.forEach(t),llo=r(JMe," \u2014 "),TB=n(JMe,"A",{href:!0});var wXr=s(TB);ilo=r(wXr,"CanineModel"),wXr.forEach(t),dlo=r(JMe," (Canine model)"),JMe.forEach(t),clo=i(M),lp=n(M,"LI",{});var YMe=s(lp);ere=n(YMe,"STRONG",{});var AXr=s(ere);flo=r(AXr,"clip"),AXr.forEach(t),mlo=r(YMe," \u2014 "),MB=n(YMe,"A",{href:!0});var yXr=s(MB);glo=r(yXr,"CLIPModel"),yXr.forEach(t),hlo=r(YMe," (CLIP model)"),YMe.forEach(t),plo=i(M),ip=n(M,"LI",{});var KMe=s(ip);ore=n(KMe,"STRONG",{});var LXr=s(ore);_lo=r(LXr,"convbert"),LXr.forEach(t),ulo=r(KMe," \u2014 "),EB=n(KMe,"A",{href:!0});var xXr=s(EB);blo=r(xXr,"ConvBertModel"),xXr.forEach(t),Flo=r(KMe," (ConvBERT model)"),KMe.forEach(t),vlo=i(M),dp=n(M,"LI",{});var ZMe=s(dp);rre=n(ZMe,"STRONG",{});var kXr=s(rre);Tlo=r(kXr,"convnext"),kXr.forEach(t),Mlo=r(ZMe," \u2014 "),CB=n(ZMe,"A",{href:!0});var SXr=s(CB);Elo=r(SXr,"ConvNextModel"),SXr.forEach(t),Clo=r(ZMe," (ConvNext model)"),ZMe.forEach(t),wlo=i(M),cp=n(M,"LI",{});var eEe=s(cp);tre=n(eEe,"STRONG",{});var RXr=s(tre);Alo=r(RXr,"ctrl"),RXr.forEach(t),ylo=r(eEe," \u2014 "),wB=n(eEe,"A",{href:!0});var BXr=s(wB);Llo=r(BXr,"CTRLModel"),BXr.forEach(t),xlo=r(eEe," (CTRL model)"),eEe.forEach(t),klo=i(M),fp=n(M,"LI",{});var oEe=s(fp);are=n(oEe,"STRONG",{});var PXr=s(are);Slo=r(PXr,"data2vec-audio"),PXr.forEach(t),Rlo=r(oEe," \u2014 "),AB=n(oEe,"A",{href:!0});var $Xr=s(AB);Blo=r($Xr,"Data2VecAudioModel"),$Xr.forEach(t),Plo=r(oEe," (Data2VecAudio model)"),oEe.forEach(t),$lo=i(M),mp=n(M,"LI",{});var rEe=s(mp);nre=n(rEe,"STRONG",{});var IXr=s(nre);Ilo=r(IXr,"data2vec-text"),IXr.forEach(t),qlo=r(rEe," \u2014 "),yB=n(rEe,"A",{href:!0});var qXr=s(yB);Nlo=r(qXr,"Data2VecTextModel"),qXr.forEach(t),jlo=r(rEe," (Data2VecText model)"),rEe.forEach(t),Dlo=i(M),gp=n(M,"LI",{});var tEe=s(gp);sre=n(tEe,"STRONG",{});var NXr=s(sre);Glo=r(NXr,"deberta"),NXr.forEach(t),Olo=r(tEe," \u2014 "),LB=n(tEe,"A",{href:!0});var jXr=s(LB);Vlo=r(jXr,"DebertaModel"),jXr.forEach(t),Xlo=r(tEe," (DeBERTa model)"),tEe.forEach(t),zlo=i(M),hp=n(M,"LI",{});var aEe=s(hp);lre=n(aEe,"STRONG",{});var DXr=s(lre);Qlo=r(DXr,"deberta-v2"),DXr.forEach(t),Wlo=r(aEe," \u2014 "),xB=n(aEe,"A",{href:!0});var GXr=s(xB);Hlo=r(GXr,"DebertaV2Model"),GXr.forEach(t),Ulo=r(aEe," (DeBERTa-v2 model)"),aEe.forEach(t),Jlo=i(M),pp=n(M,"LI",{});var nEe=s(pp);ire=n(nEe,"STRONG",{});var OXr=s(ire);Ylo=r(OXr,"decision_transformer"),OXr.forEach(t),Klo=r(nEe," \u2014 "),kB=n(nEe,"A",{href:!0});var VXr=s(kB);Zlo=r(VXr,"DecisionTransformerModel"),VXr.forEach(t),eio=r(nEe," (Decision Transformer model)"),nEe.forEach(t),oio=i(M),_p=n(M,"LI",{});var sEe=s(_p);dre=n(sEe,"STRONG",{});var XXr=s(dre);rio=r(XXr,"deit"),XXr.forEach(t),tio=r(sEe," \u2014 "),SB=n(sEe,"A",{href:!0});var zXr=s(SB);aio=r(zXr,"DeiTModel"),zXr.forEach(t),nio=r(sEe," (DeiT model)"),sEe.forEach(t),sio=i(M),up=n(M,"LI",{});var lEe=s(up);cre=n(lEe,"STRONG",{});var QXr=s(cre);lio=r(QXr,"detr"),QXr.forEach(t),iio=r(lEe," \u2014 "),RB=n(lEe,"A",{href:!0});var WXr=s(RB);dio=r(WXr,"DetrModel"),WXr.forEach(t),cio=r(lEe," (DETR model)"),lEe.forEach(t),fio=i(M),bp=n(M,"LI",{});var iEe=s(bp);fre=n(iEe,"STRONG",{});var HXr=s(fre);mio=r(HXr,"distilbert"),HXr.forEach(t),gio=r(iEe," \u2014 "),BB=n(iEe,"A",{href:!0});var UXr=s(BB);hio=r(UXr,"DistilBertModel"),UXr.forEach(t),pio=r(iEe," (DistilBERT model)"),iEe.forEach(t),_io=i(M),Fp=n(M,"LI",{});var dEe=s(Fp);mre=n(dEe,"STRONG",{});var JXr=s(mre);uio=r(JXr,"dpr"),JXr.forEach(t),bio=r(dEe," \u2014 "),PB=n(dEe,"A",{href:!0});var YXr=s(PB);Fio=r(YXr,"DPRQuestionEncoder"),YXr.forEach(t),vio=r(dEe," (DPR model)"),dEe.forEach(t),Tio=i(M),vp=n(M,"LI",{});var cEe=s(vp);gre=n(cEe,"STRONG",{});var KXr=s(gre);Mio=r(KXr,"dpt"),KXr.forEach(t),Eio=r(cEe," \u2014 "),$B=n(cEe,"A",{href:!0});var ZXr=s($B);Cio=r(ZXr,"DPTModel"),ZXr.forEach(t),wio=r(cEe," (DPT model)"),cEe.forEach(t),Aio=i(M),Tp=n(M,"LI",{});var fEe=s(Tp);hre=n(fEe,"STRONG",{});var ezr=s(hre);yio=r(ezr,"electra"),ezr.forEach(t),Lio=r(fEe," \u2014 "),IB=n(fEe,"A",{href:!0});var ozr=s(IB);xio=r(ozr,"ElectraModel"),ozr.forEach(t),kio=r(fEe," (ELECTRA model)"),fEe.forEach(t),Sio=i(M),Mp=n(M,"LI",{});var mEe=s(Mp);pre=n(mEe,"STRONG",{});var rzr=s(pre);Rio=r(rzr,"flaubert"),rzr.forEach(t),Bio=r(mEe," \u2014 "),qB=n(mEe,"A",{href:!0});var tzr=s(qB);Pio=r(tzr,"FlaubertModel"),tzr.forEach(t),$io=r(mEe," (FlauBERT model)"),mEe.forEach(t),Iio=i(M),Ep=n(M,"LI",{});var gEe=s(Ep);_re=n(gEe,"STRONG",{});var azr=s(_re);qio=r(azr,"fnet"),azr.forEach(t),Nio=r(gEe," \u2014 "),NB=n(gEe,"A",{href:!0});var nzr=s(NB);jio=r(nzr,"FNetModel"),nzr.forEach(t),Dio=r(gEe," (FNet model)"),gEe.forEach(t),Gio=i(M),Cp=n(M,"LI",{});var hEe=s(Cp);ure=n(hEe,"STRONG",{});var szr=s(ure);Oio=r(szr,"fsmt"),szr.forEach(t),Vio=r(hEe," \u2014 "),jB=n(hEe,"A",{href:!0});var lzr=s(jB);Xio=r(lzr,"FSMTModel"),lzr.forEach(t),zio=r(hEe," (FairSeq Machine-Translation model)"),hEe.forEach(t),Qio=i(M),js=n(M,"LI",{});var h9=s(js);bre=n(h9,"STRONG",{});var izr=s(bre);Wio=r(izr,"funnel"),izr.forEach(t),Hio=r(h9," \u2014 "),DB=n(h9,"A",{href:!0});var dzr=s(DB);Uio=r(dzr,"FunnelModel"),dzr.forEach(t),Jio=r(h9," or "),GB=n(h9,"A",{href:!0});var czr=s(GB);Yio=r(czr,"FunnelBaseModel"),czr.forEach(t),Kio=r(h9," (Funnel Transformer model)"),h9.forEach(t),Zio=i(M),wp=n(M,"LI",{});var pEe=s(wp);Fre=n(pEe,"STRONG",{});var fzr=s(Fre);edo=r(fzr,"glpn"),fzr.forEach(t),odo=r(pEe," \u2014 "),OB=n(pEe,"A",{href:!0});var mzr=s(OB);rdo=r(mzr,"GLPNModel"),mzr.forEach(t),tdo=r(pEe," (GLPN model)"),pEe.forEach(t),ado=i(M),Ap=n(M,"LI",{});var _Ee=s(Ap);vre=n(_Ee,"STRONG",{});var gzr=s(vre);ndo=r(gzr,"gpt2"),gzr.forEach(t),sdo=r(_Ee," \u2014 "),VB=n(_Ee,"A",{href:!0});var hzr=s(VB);ldo=r(hzr,"GPT2Model"),hzr.forEach(t),ido=r(_Ee," (OpenAI GPT-2 model)"),_Ee.forEach(t),ddo=i(M),yp=n(M,"LI",{});var uEe=s(yp);Tre=n(uEe,"STRONG",{});var pzr=s(Tre);cdo=r(pzr,"gpt_neo"),pzr.forEach(t),fdo=r(uEe," \u2014 "),XB=n(uEe,"A",{href:!0});var _zr=s(XB);mdo=r(_zr,"GPTNeoModel"),_zr.forEach(t),gdo=r(uEe," (GPT Neo model)"),uEe.forEach(t),hdo=i(M),Lp=n(M,"LI",{});var bEe=s(Lp);Mre=n(bEe,"STRONG",{});var uzr=s(Mre);pdo=r(uzr,"gptj"),uzr.forEach(t),_do=r(bEe," \u2014 "),zB=n(bEe,"A",{href:!0});var bzr=s(zB);udo=r(bzr,"GPTJModel"),bzr.forEach(t),bdo=r(bEe," (GPT-J model)"),bEe.forEach(t),Fdo=i(M),xp=n(M,"LI",{});var FEe=s(xp);Ere=n(FEe,"STRONG",{});var Fzr=s(Ere);vdo=r(Fzr,"hubert"),Fzr.forEach(t),Tdo=r(FEe," \u2014 "),QB=n(FEe,"A",{href:!0});var vzr=s(QB);Mdo=r(vzr,"HubertModel"),vzr.forEach(t),Edo=r(FEe," (Hubert model)"),FEe.forEach(t),Cdo=i(M),kp=n(M,"LI",{});var vEe=s(kp);Cre=n(vEe,"STRONG",{});var Tzr=s(Cre);wdo=r(Tzr,"ibert"),Tzr.forEach(t),Ado=r(vEe," \u2014 "),WB=n(vEe,"A",{href:!0});var Mzr=s(WB);ydo=r(Mzr,"IBertModel"),Mzr.forEach(t),Ldo=r(vEe," (I-BERT model)"),vEe.forEach(t),xdo=i(M),Sp=n(M,"LI",{});var TEe=s(Sp);wre=n(TEe,"STRONG",{});var Ezr=s(wre);kdo=r(Ezr,"imagegpt"),Ezr.forEach(t),Sdo=r(TEe," \u2014 "),HB=n(TEe,"A",{href:!0});var Czr=s(HB);Rdo=r(Czr,"ImageGPTModel"),Czr.forEach(t),Bdo=r(TEe," (ImageGPT model)"),TEe.forEach(t),Pdo=i(M),Rp=n(M,"LI",{});var MEe=s(Rp);Are=n(MEe,"STRONG",{});var wzr=s(Are);$do=r(wzr,"layoutlm"),wzr.forEach(t),Ido=r(MEe," \u2014 "),UB=n(MEe,"A",{href:!0});var Azr=s(UB);qdo=r(Azr,"LayoutLMModel"),Azr.forEach(t),Ndo=r(MEe," (LayoutLM model)"),MEe.forEach(t),jdo=i(M),Bp=n(M,"LI",{});var EEe=s(Bp);yre=n(EEe,"STRONG",{});var yzr=s(yre);Ddo=r(yzr,"layoutlmv2"),yzr.forEach(t),Gdo=r(EEe," \u2014 "),JB=n(EEe,"A",{href:!0});var Lzr=s(JB);Odo=r(Lzr,"LayoutLMv2Model"),Lzr.forEach(t),Vdo=r(EEe," (LayoutLMv2 model)"),EEe.forEach(t),Xdo=i(M),Pp=n(M,"LI",{});var CEe=s(Pp);Lre=n(CEe,"STRONG",{});var xzr=s(Lre);zdo=r(xzr,"led"),xzr.forEach(t),Qdo=r(CEe," \u2014 "),YB=n(CEe,"A",{href:!0});var kzr=s(YB);Wdo=r(kzr,"LEDModel"),kzr.forEach(t),Hdo=r(CEe," (LED model)"),CEe.forEach(t),Udo=i(M),$p=n(M,"LI",{});var wEe=s($p);xre=n(wEe,"STRONG",{});var Szr=s(xre);Jdo=r(Szr,"longformer"),Szr.forEach(t),Ydo=r(wEe," \u2014 "),KB=n(wEe,"A",{href:!0});var Rzr=s(KB);Kdo=r(Rzr,"LongformerModel"),Rzr.forEach(t),Zdo=r(wEe," (Longformer model)"),wEe.forEach(t),eco=i(M),Ip=n(M,"LI",{});var AEe=s(Ip);kre=n(AEe,"STRONG",{});var Bzr=s(kre);oco=r(Bzr,"luke"),Bzr.forEach(t),rco=r(AEe," \u2014 "),ZB=n(AEe,"A",{href:!0});var Pzr=s(ZB);tco=r(Pzr,"LukeModel"),Pzr.forEach(t),aco=r(AEe," (LUKE model)"),AEe.forEach(t),nco=i(M),qp=n(M,"LI",{});var yEe=s(qp);Sre=n(yEe,"STRONG",{});var $zr=s(Sre);sco=r($zr,"lxmert"),$zr.forEach(t),lco=r(yEe," \u2014 "),eP=n(yEe,"A",{href:!0});var Izr=s(eP);ico=r(Izr,"LxmertModel"),Izr.forEach(t),dco=r(yEe," (LXMERT model)"),yEe.forEach(t),cco=i(M),Np=n(M,"LI",{});var LEe=s(Np);Rre=n(LEe,"STRONG",{});var qzr=s(Rre);fco=r(qzr,"m2m_100"),qzr.forEach(t),mco=r(LEe," \u2014 "),oP=n(LEe,"A",{href:!0});var Nzr=s(oP);gco=r(Nzr,"M2M100Model"),Nzr.forEach(t),hco=r(LEe," (M2M100 model)"),LEe.forEach(t),pco=i(M),jp=n(M,"LI",{});var xEe=s(jp);Bre=n(xEe,"STRONG",{});var jzr=s(Bre);_co=r(jzr,"marian"),jzr.forEach(t),uco=r(xEe," \u2014 "),rP=n(xEe,"A",{href:!0});var Dzr=s(rP);bco=r(Dzr,"MarianModel"),Dzr.forEach(t),Fco=r(xEe," (Marian model)"),xEe.forEach(t),vco=i(M),Dp=n(M,"LI",{});var kEe=s(Dp);Pre=n(kEe,"STRONG",{});var Gzr=s(Pre);Tco=r(Gzr,"maskformer"),Gzr.forEach(t),Mco=r(kEe," \u2014 "),tP=n(kEe,"A",{href:!0});var Ozr=s(tP);Eco=r(Ozr,"MaskFormerModel"),Ozr.forEach(t),Cco=r(kEe," (MaskFormer model)"),kEe.forEach(t),wco=i(M),Gp=n(M,"LI",{});var SEe=s(Gp);$re=n(SEe,"STRONG",{});var Vzr=s($re);Aco=r(Vzr,"mbart"),Vzr.forEach(t),yco=r(SEe," \u2014 "),aP=n(SEe,"A",{href:!0});var Xzr=s(aP);Lco=r(Xzr,"MBartModel"),Xzr.forEach(t),xco=r(SEe," (mBART model)"),SEe.forEach(t),kco=i(M),Op=n(M,"LI",{});var REe=s(Op);Ire=n(REe,"STRONG",{});var zzr=s(Ire);Sco=r(zzr,"megatron-bert"),zzr.forEach(t),Rco=r(REe," \u2014 "),nP=n(REe,"A",{href:!0});var Qzr=s(nP);Bco=r(Qzr,"MegatronBertModel"),Qzr.forEach(t),Pco=r(REe," (MegatronBert model)"),REe.forEach(t),$co=i(M),Vp=n(M,"LI",{});var BEe=s(Vp);qre=n(BEe,"STRONG",{});var Wzr=s(qre);Ico=r(Wzr,"mobilebert"),Wzr.forEach(t),qco=r(BEe," \u2014 "),sP=n(BEe,"A",{href:!0});var Hzr=s(sP);Nco=r(Hzr,"MobileBertModel"),Hzr.forEach(t),jco=r(BEe," (MobileBERT model)"),BEe.forEach(t),Dco=i(M),Xp=n(M,"LI",{});var PEe=s(Xp);Nre=n(PEe,"STRONG",{});var Uzr=s(Nre);Gco=r(Uzr,"mpnet"),Uzr.forEach(t),Oco=r(PEe," \u2014 "),lP=n(PEe,"A",{href:!0});var Jzr=s(lP);Vco=r(Jzr,"MPNetModel"),Jzr.forEach(t),Xco=r(PEe," (MPNet model)"),PEe.forEach(t),zco=i(M),zp=n(M,"LI",{});var $Ee=s(zp);jre=n($Ee,"STRONG",{});var Yzr=s(jre);Qco=r(Yzr,"mt5"),Yzr.forEach(t),Wco=r($Ee," \u2014 "),iP=n($Ee,"A",{href:!0});var Kzr=s(iP);Hco=r(Kzr,"MT5Model"),Kzr.forEach(t),Uco=r($Ee," (mT5 model)"),$Ee.forEach(t),Jco=i(M),Qp=n(M,"LI",{});var IEe=s(Qp);Dre=n(IEe,"STRONG",{});var Zzr=s(Dre);Yco=r(Zzr,"nystromformer"),Zzr.forEach(t),Kco=r(IEe," \u2014 "),dP=n(IEe,"A",{href:!0});var eQr=s(dP);Zco=r(eQr,"NystromformerModel"),eQr.forEach(t),efo=r(IEe," (Nystromformer model)"),IEe.forEach(t),ofo=i(M),Wp=n(M,"LI",{});var qEe=s(Wp);Gre=n(qEe,"STRONG",{});var oQr=s(Gre);rfo=r(oQr,"openai-gpt"),oQr.forEach(t),tfo=r(qEe," \u2014 "),cP=n(qEe,"A",{href:!0});var rQr=s(cP);afo=r(rQr,"OpenAIGPTModel"),rQr.forEach(t),nfo=r(qEe," (OpenAI GPT model)"),qEe.forEach(t),sfo=i(M),Hp=n(M,"LI",{});var NEe=s(Hp);Ore=n(NEe,"STRONG",{});var tQr=s(Ore);lfo=r(tQr,"pegasus"),tQr.forEach(t),ifo=r(NEe," \u2014 "),fP=n(NEe,"A",{href:!0});var aQr=s(fP);dfo=r(aQr,"PegasusModel"),aQr.forEach(t),cfo=r(NEe," (Pegasus model)"),NEe.forEach(t),ffo=i(M),Up=n(M,"LI",{});var jEe=s(Up);Vre=n(jEe,"STRONG",{});var nQr=s(Vre);mfo=r(nQr,"perceiver"),nQr.forEach(t),gfo=r(jEe," \u2014 "),mP=n(jEe,"A",{href:!0});var sQr=s(mP);hfo=r(sQr,"PerceiverModel"),sQr.forEach(t),pfo=r(jEe," (Perceiver model)"),jEe.forEach(t),_fo=i(M),Jp=n(M,"LI",{});var DEe=s(Jp);Xre=n(DEe,"STRONG",{});var lQr=s(Xre);ufo=r(lQr,"plbart"),lQr.forEach(t),bfo=r(DEe," \u2014 "),gP=n(DEe,"A",{href:!0});var iQr=s(gP);Ffo=r(iQr,"PLBartModel"),iQr.forEach(t),vfo=r(DEe," (PLBart model)"),DEe.forEach(t),Tfo=i(M),Yp=n(M,"LI",{});var GEe=s(Yp);zre=n(GEe,"STRONG",{});var dQr=s(zre);Mfo=r(dQr,"poolformer"),dQr.forEach(t),Efo=r(GEe," \u2014 "),hP=n(GEe,"A",{href:!0});var cQr=s(hP);Cfo=r(cQr,"PoolFormerModel"),cQr.forEach(t),wfo=r(GEe," (PoolFormer model)"),GEe.forEach(t),Afo=i(M),Kp=n(M,"LI",{});var OEe=s(Kp);Qre=n(OEe,"STRONG",{});var fQr=s(Qre);yfo=r(fQr,"prophetnet"),fQr.forEach(t),Lfo=r(OEe," \u2014 "),pP=n(OEe,"A",{href:!0});var mQr=s(pP);xfo=r(mQr,"ProphetNetModel"),mQr.forEach(t),kfo=r(OEe," (ProphetNet model)"),OEe.forEach(t),Sfo=i(M),Zp=n(M,"LI",{});var VEe=s(Zp);Wre=n(VEe,"STRONG",{});var gQr=s(Wre);Rfo=r(gQr,"qdqbert"),gQr.forEach(t),Bfo=r(VEe," \u2014 "),_P=n(VEe,"A",{href:!0});var hQr=s(_P);Pfo=r(hQr,"QDQBertModel"),hQr.forEach(t),$fo=r(VEe," (QDQBert model)"),VEe.forEach(t),Ifo=i(M),e_=n(M,"LI",{});var XEe=s(e_);Hre=n(XEe,"STRONG",{});var pQr=s(Hre);qfo=r(pQr,"reformer"),pQr.forEach(t),Nfo=r(XEe," \u2014 "),uP=n(XEe,"A",{href:!0});var _Qr=s(uP);jfo=r(_Qr,"ReformerModel"),_Qr.forEach(t),Dfo=r(XEe," (Reformer model)"),XEe.forEach(t),Gfo=i(M),o_=n(M,"LI",{});var zEe=s(o_);Ure=n(zEe,"STRONG",{});var uQr=s(Ure);Ofo=r(uQr,"regnet"),uQr.forEach(t),Vfo=r(zEe," \u2014 "),bP=n(zEe,"A",{href:!0});var bQr=s(bP);Xfo=r(bQr,"RegNetModel"),bQr.forEach(t),zfo=r(zEe," (RegNet model)"),zEe.forEach(t),Qfo=i(M),r_=n(M,"LI",{});var QEe=s(r_);Jre=n(QEe,"STRONG",{});var FQr=s(Jre);Wfo=r(FQr,"rembert"),FQr.forEach(t),Hfo=r(QEe," \u2014 "),FP=n(QEe,"A",{href:!0});var vQr=s(FP);Ufo=r(vQr,"RemBertModel"),vQr.forEach(t),Jfo=r(QEe," (RemBERT model)"),QEe.forEach(t),Yfo=i(M),t_=n(M,"LI",{});var WEe=s(t_);Yre=n(WEe,"STRONG",{});var TQr=s(Yre);Kfo=r(TQr,"resnet"),TQr.forEach(t),Zfo=r(WEe," \u2014 "),vP=n(WEe,"A",{href:!0});var MQr=s(vP);emo=r(MQr,"ResNetModel"),MQr.forEach(t),omo=r(WEe," (ResNet model)"),WEe.forEach(t),rmo=i(M),a_=n(M,"LI",{});var HEe=s(a_);Kre=n(HEe,"STRONG",{});var EQr=s(Kre);tmo=r(EQr,"retribert"),EQr.forEach(t),amo=r(HEe," \u2014 "),TP=n(HEe,"A",{href:!0});var CQr=s(TP);nmo=r(CQr,"RetriBertModel"),CQr.forEach(t),smo=r(HEe," (RetriBERT model)"),HEe.forEach(t),lmo=i(M),n_=n(M,"LI",{});var UEe=s(n_);Zre=n(UEe,"STRONG",{});var wQr=s(Zre);imo=r(wQr,"roberta"),wQr.forEach(t),dmo=r(UEe," \u2014 "),MP=n(UEe,"A",{href:!0});var AQr=s(MP);cmo=r(AQr,"RobertaModel"),AQr.forEach(t),fmo=r(UEe," (RoBERTa model)"),UEe.forEach(t),mmo=i(M),s_=n(M,"LI",{});var JEe=s(s_);ete=n(JEe,"STRONG",{});var yQr=s(ete);gmo=r(yQr,"roformer"),yQr.forEach(t),hmo=r(JEe," \u2014 "),EP=n(JEe,"A",{href:!0});var LQr=s(EP);pmo=r(LQr,"RoFormerModel"),LQr.forEach(t),_mo=r(JEe," (RoFormer model)"),JEe.forEach(t),umo=i(M),l_=n(M,"LI",{});var YEe=s(l_);ote=n(YEe,"STRONG",{});var xQr=s(ote);bmo=r(xQr,"segformer"),xQr.forEach(t),Fmo=r(YEe," \u2014 "),CP=n(YEe,"A",{href:!0});var kQr=s(CP);vmo=r(kQr,"SegformerModel"),kQr.forEach(t),Tmo=r(YEe," (SegFormer model)"),YEe.forEach(t),Mmo=i(M),i_=n(M,"LI",{});var KEe=s(i_);rte=n(KEe,"STRONG",{});var SQr=s(rte);Emo=r(SQr,"sew"),SQr.forEach(t),Cmo=r(KEe," \u2014 "),wP=n(KEe,"A",{href:!0});var RQr=s(wP);wmo=r(RQr,"SEWModel"),RQr.forEach(t),Amo=r(KEe," (SEW model)"),KEe.forEach(t),ymo=i(M),d_=n(M,"LI",{});var ZEe=s(d_);tte=n(ZEe,"STRONG",{});var BQr=s(tte);Lmo=r(BQr,"sew-d"),BQr.forEach(t),xmo=r(ZEe," \u2014 "),AP=n(ZEe,"A",{href:!0});var PQr=s(AP);kmo=r(PQr,"SEWDModel"),PQr.forEach(t),Smo=r(ZEe," (SEW-D model)"),ZEe.forEach(t),Rmo=i(M),c_=n(M,"LI",{});var eCe=s(c_);ate=n(eCe,"STRONG",{});var $Qr=s(ate);Bmo=r($Qr,"speech_to_text"),$Qr.forEach(t),Pmo=r(eCe," \u2014 "),yP=n(eCe,"A",{href:!0});var IQr=s(yP);$mo=r(IQr,"Speech2TextModel"),IQr.forEach(t),Imo=r(eCe," (Speech2Text model)"),eCe.forEach(t),qmo=i(M),f_=n(M,"LI",{});var oCe=s(f_);nte=n(oCe,"STRONG",{});var qQr=s(nte);Nmo=r(qQr,"splinter"),qQr.forEach(t),jmo=r(oCe," \u2014 "),LP=n(oCe,"A",{href:!0});var NQr=s(LP);Dmo=r(NQr,"SplinterModel"),NQr.forEach(t),Gmo=r(oCe," (Splinter model)"),oCe.forEach(t),Omo=i(M),m_=n(M,"LI",{});var rCe=s(m_);ste=n(rCe,"STRONG",{});var jQr=s(ste);Vmo=r(jQr,"squeezebert"),jQr.forEach(t),Xmo=r(rCe," \u2014 "),xP=n(rCe,"A",{href:!0});var DQr=s(xP);zmo=r(DQr,"SqueezeBertModel"),DQr.forEach(t),Qmo=r(rCe," (SqueezeBERT model)"),rCe.forEach(t),Wmo=i(M),g_=n(M,"LI",{});var tCe=s(g_);lte=n(tCe,"STRONG",{});var GQr=s(lte);Hmo=r(GQr,"swin"),GQr.forEach(t),Umo=r(tCe," \u2014 "),kP=n(tCe,"A",{href:!0});var OQr=s(kP);Jmo=r(OQr,"SwinModel"),OQr.forEach(t),Ymo=r(tCe," (Swin model)"),tCe.forEach(t),Kmo=i(M),h_=n(M,"LI",{});var aCe=s(h_);ite=n(aCe,"STRONG",{});var VQr=s(ite);Zmo=r(VQr,"t5"),VQr.forEach(t),ego=r(aCe," \u2014 "),SP=n(aCe,"A",{href:!0});var XQr=s(SP);ogo=r(XQr,"T5Model"),XQr.forEach(t),rgo=r(aCe," (T5 model)"),aCe.forEach(t),tgo=i(M),p_=n(M,"LI",{});var nCe=s(p_);dte=n(nCe,"STRONG",{});var zQr=s(dte);ago=r(zQr,"tapas"),zQr.forEach(t),ngo=r(nCe," \u2014 "),RP=n(nCe,"A",{href:!0});var QQr=s(RP);sgo=r(QQr,"TapasModel"),QQr.forEach(t),lgo=r(nCe," (TAPAS model)"),nCe.forEach(t),igo=i(M),__=n(M,"LI",{});var sCe=s(__);cte=n(sCe,"STRONG",{});var WQr=s(cte);dgo=r(WQr,"transfo-xl"),WQr.forEach(t),cgo=r(sCe," \u2014 "),BP=n(sCe,"A",{href:!0});var HQr=s(BP);fgo=r(HQr,"TransfoXLModel"),HQr.forEach(t),mgo=r(sCe," (Transformer-XL model)"),sCe.forEach(t),ggo=i(M),u_=n(M,"LI",{});var lCe=s(u_);fte=n(lCe,"STRONG",{});var UQr=s(fte);hgo=r(UQr,"unispeech"),UQr.forEach(t),pgo=r(lCe," \u2014 "),PP=n(lCe,"A",{href:!0});var JQr=s(PP);_go=r(JQr,"UniSpeechModel"),JQr.forEach(t),ugo=r(lCe," (UniSpeech model)"),lCe.forEach(t),bgo=i(M),b_=n(M,"LI",{});var iCe=s(b_);mte=n(iCe,"STRONG",{});var YQr=s(mte);Fgo=r(YQr,"unispeech-sat"),YQr.forEach(t),vgo=r(iCe," \u2014 "),$P=n(iCe,"A",{href:!0});var KQr=s($P);Tgo=r(KQr,"UniSpeechSatModel"),KQr.forEach(t),Mgo=r(iCe," (UniSpeechSat model)"),iCe.forEach(t),Ego=i(M),F_=n(M,"LI",{});var dCe=s(F_);gte=n(dCe,"STRONG",{});var ZQr=s(gte);Cgo=r(ZQr,"van"),ZQr.forEach(t),wgo=r(dCe," \u2014 "),IP=n(dCe,"A",{href:!0});var eWr=s(IP);Ago=r(eWr,"VanModel"),eWr.forEach(t),ygo=r(dCe," (VAN model)"),dCe.forEach(t),Lgo=i(M),v_=n(M,"LI",{});var cCe=s(v_);hte=n(cCe,"STRONG",{});var oWr=s(hte);xgo=r(oWr,"vilt"),oWr.forEach(t),kgo=r(cCe," \u2014 "),qP=n(cCe,"A",{href:!0});var rWr=s(qP);Sgo=r(rWr,"ViltModel"),rWr.forEach(t),Rgo=r(cCe," (ViLT model)"),cCe.forEach(t),Bgo=i(M),T_=n(M,"LI",{});var fCe=s(T_);pte=n(fCe,"STRONG",{});var tWr=s(pte);Pgo=r(tWr,"vision-text-dual-encoder"),tWr.forEach(t),$go=r(fCe," \u2014 "),NP=n(fCe,"A",{href:!0});var aWr=s(NP);Igo=r(aWr,"VisionTextDualEncoderModel"),aWr.forEach(t),qgo=r(fCe," (VisionTextDualEncoder model)"),fCe.forEach(t),Ngo=i(M),M_=n(M,"LI",{});var mCe=s(M_);_te=n(mCe,"STRONG",{});var nWr=s(_te);jgo=r(nWr,"visual_bert"),nWr.forEach(t),Dgo=r(mCe," \u2014 "),jP=n(mCe,"A",{href:!0});var sWr=s(jP);Ggo=r(sWr,"VisualBertModel"),sWr.forEach(t),Ogo=r(mCe," (VisualBert model)"),mCe.forEach(t),Vgo=i(M),E_=n(M,"LI",{});var gCe=s(E_);ute=n(gCe,"STRONG",{});var lWr=s(ute);Xgo=r(lWr,"vit"),lWr.forEach(t),zgo=r(gCe," \u2014 "),DP=n(gCe,"A",{href:!0});var iWr=s(DP);Qgo=r(iWr,"ViTModel"),iWr.forEach(t),Wgo=r(gCe," (ViT model)"),gCe.forEach(t),Hgo=i(M),C_=n(M,"LI",{});var hCe=s(C_);bte=n(hCe,"STRONG",{});var dWr=s(bte);Ugo=r(dWr,"vit_mae"),dWr.forEach(t),Jgo=r(hCe," \u2014 "),GP=n(hCe,"A",{href:!0});var cWr=s(GP);Ygo=r(cWr,"ViTMAEModel"),cWr.forEach(t),Kgo=r(hCe," (ViTMAE model)"),hCe.forEach(t),Zgo=i(M),w_=n(M,"LI",{});var pCe=s(w_);Fte=n(pCe,"STRONG",{});var fWr=s(Fte);eho=r(fWr,"wav2vec2"),fWr.forEach(t),oho=r(pCe," \u2014 "),OP=n(pCe,"A",{href:!0});var mWr=s(OP);rho=r(mWr,"Wav2Vec2Model"),mWr.forEach(t),tho=r(pCe," (Wav2Vec2 model)"),pCe.forEach(t),aho=i(M),A_=n(M,"LI",{});var _Ce=s(A_);vte=n(_Ce,"STRONG",{});var gWr=s(vte);nho=r(gWr,"wavlm"),gWr.forEach(t),sho=r(_Ce," \u2014 "),VP=n(_Ce,"A",{href:!0});var hWr=s(VP);lho=r(hWr,"WavLMModel"),hWr.forEach(t),iho=r(_Ce," (WavLM model)"),_Ce.forEach(t),dho=i(M),y_=n(M,"LI",{});var uCe=s(y_);Tte=n(uCe,"STRONG",{});var pWr=s(Tte);cho=r(pWr,"xglm"),pWr.forEach(t),fho=r(uCe," \u2014 "),XP=n(uCe,"A",{href:!0});var _Wr=s(XP);mho=r(_Wr,"XGLMModel"),_Wr.forEach(t),gho=r(uCe," (XGLM model)"),uCe.forEach(t),hho=i(M),L_=n(M,"LI",{});var bCe=s(L_);Mte=n(bCe,"STRONG",{});var uWr=s(Mte);pho=r(uWr,"xlm"),uWr.forEach(t),_ho=r(bCe," \u2014 "),zP=n(bCe,"A",{href:!0});var bWr=s(zP);uho=r(bWr,"XLMModel"),bWr.forEach(t),bho=r(bCe," (XLM model)"),bCe.forEach(t),Fho=i(M),x_=n(M,"LI",{});var FCe=s(x_);Ete=n(FCe,"STRONG",{});var FWr=s(Ete);vho=r(FWr,"xlm-prophetnet"),FWr.forEach(t),Tho=r(FCe," \u2014 "),QP=n(FCe,"A",{href:!0});var vWr=s(QP);Mho=r(vWr,"XLMProphetNetModel"),vWr.forEach(t),Eho=r(FCe," (XLMProphetNet model)"),FCe.forEach(t),Cho=i(M),k_=n(M,"LI",{});var vCe=s(k_);Cte=n(vCe,"STRONG",{});var TWr=s(Cte);who=r(TWr,"xlm-roberta"),TWr.forEach(t),Aho=r(vCe," \u2014 "),WP=n(vCe,"A",{href:!0});var MWr=s(WP);yho=r(MWr,"XLMRobertaModel"),MWr.forEach(t),Lho=r(vCe," (XLM-RoBERTa model)"),vCe.forEach(t),xho=i(M),S_=n(M,"LI",{});var TCe=s(S_);wte=n(TCe,"STRONG",{});var EWr=s(wte);kho=r(EWr,"xlm-roberta-xl"),EWr.forEach(t),Sho=r(TCe," \u2014 "),HP=n(TCe,"A",{href:!0});var CWr=s(HP);Rho=r(CWr,"XLMRobertaXLModel"),CWr.forEach(t),Bho=r(TCe," (XLM-RoBERTa-XL model)"),TCe.forEach(t),Pho=i(M),R_=n(M,"LI",{});var MCe=s(R_);Ate=n(MCe,"STRONG",{});var wWr=s(Ate);$ho=r(wWr,"xlnet"),wWr.forEach(t),Iho=r(MCe," \u2014 "),UP=n(MCe,"A",{href:!0});var AWr=s(UP);qho=r(AWr,"XLNetModel"),AWr.forEach(t),Nho=r(MCe," (XLNet model)"),MCe.forEach(t),jho=i(M),B_=n(M,"LI",{});var ECe=s(B_);yte=n(ECe,"STRONG",{});var yWr=s(yte);Dho=r(yWr,"yoso"),yWr.forEach(t),Gho=r(ECe," \u2014 "),JP=n(ECe,"A",{href:!0});var LWr=s(JP);Oho=r(LWr,"YosoModel"),LWr.forEach(t),Vho=r(ECe," (YOSO model)"),ECe.forEach(t),M.forEach(t),Xho=i(Dt),P_=n(Dt,"P",{});var CCe=s(P_);zho=r(CCe,"The model is set in evaluation mode by default using "),Lte=n(CCe,"CODE",{});var xWr=s(Lte);Qho=r(xWr,"model.eval()"),xWr.forEach(t),Who=r(CCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xte=n(CCe,"CODE",{});var kWr=s(xte);Hho=r(kWr,"model.train()"),kWr.forEach(t),CCe.forEach(t),Uho=i(Dt),kte=n(Dt,"P",{});var SWr=s(kte);Jho=r(SWr,"Examples:"),SWr.forEach(t),Yho=i(Dt),m(fw.$$.fragment,Dt),Dt.forEach(t),Qs.forEach(t),NRe=i(c),Zi=n(c,"H2",{class:!0});var WPe=s(Zi);$_=n(WPe,"A",{id:!0,class:!0,href:!0});var RWr=s($_);Ste=n(RWr,"SPAN",{});var BWr=s(Ste);m(mw.$$.fragment,BWr),BWr.forEach(t),RWr.forEach(t),Kho=i(WPe),Rte=n(WPe,"SPAN",{});var PWr=s(Rte);Zho=r(PWr,"AutoModelForPreTraining"),PWr.forEach(t),WPe.forEach(t),jRe=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(gw.$$.fragment,Hs),epo=i(Hs),ed=n(Hs,"P",{});var uU=s(ed);opo=r(uU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YP=n(uU,"A",{href:!0});var $Wr=s(YP);rpo=r($Wr,"from_pretrained()"),$Wr.forEach(t),tpo=r(uU," class method or the "),KP=n(uU,"A",{href:!0});var IWr=s(KP);apo=r(IWr,"from_config()"),IWr.forEach(t),npo=r(uU,` class
method.`),uU.forEach(t),spo=i(Hs),hw=n(Hs,"P",{});var HPe=s(hw);lpo=r(HPe,"This class cannot be instantiated directly using "),Bte=n(HPe,"CODE",{});var qWr=s(Bte);ipo=r(qWr,"__init__()"),qWr.forEach(t),dpo=r(HPe," (throws an error)."),HPe.forEach(t),cpo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(pw.$$.fragment,Us),fpo=i(Us),Pte=n(Us,"P",{});var NWr=s(Pte);mpo=r(NWr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),NWr.forEach(t),gpo=i(Us),od=n(Us,"P",{});var bU=s(od);hpo=r(bU,`Note:
Loading a model from its configuration file does `),$te=n(bU,"STRONG",{});var jWr=s($te);ppo=r(jWr,"not"),jWr.forEach(t),_po=r(bU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZP=n(bU,"A",{href:!0});var DWr=s(ZP);upo=r(DWr,"from_pretrained()"),DWr.forEach(t),bpo=r(bU," to load the model weights."),bU.forEach(t),Fpo=i(Us),Ite=n(Us,"P",{});var GWr=s(Ite);vpo=r(GWr,"Examples:"),GWr.forEach(t),Tpo=i(Us),m(_w.$$.fragment,Us),Us.forEach(t),Mpo=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);m(uw.$$.fragment,Gt),Epo=i(Gt),qte=n(Gt,"P",{});var OWr=s(qte);Cpo=r(OWr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),OWr.forEach(t),wpo=i(Gt),za=n(Gt,"P",{});var kE=s(za);Apo=r(kE,"The model class to instantiate is selected based on the "),Nte=n(kE,"CODE",{});var VWr=s(Nte);ypo=r(VWr,"model_type"),VWr.forEach(t),Lpo=r(kE,` property of the config object (either
passed as an argument or loaded from `),jte=n(kE,"CODE",{});var XWr=s(jte);xpo=r(XWr,"pretrained_model_name_or_path"),XWr.forEach(t),kpo=r(kE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dte=n(kE,"CODE",{});var zWr=s(Dte);Spo=r(zWr,"pretrained_model_name_or_path"),zWr.forEach(t),Rpo=r(kE,":"),kE.forEach(t),Bpo=i(Gt),S=n(Gt,"UL",{});var B=s(S);I_=n(B,"LI",{});var wCe=s(I_);Gte=n(wCe,"STRONG",{});var QWr=s(Gte);Ppo=r(QWr,"albert"),QWr.forEach(t),$po=r(wCe," \u2014 "),e$=n(wCe,"A",{href:!0});var WWr=s(e$);Ipo=r(WWr,"AlbertForPreTraining"),WWr.forEach(t),qpo=r(wCe," (ALBERT model)"),wCe.forEach(t),Npo=i(B),q_=n(B,"LI",{});var ACe=s(q_);Ote=n(ACe,"STRONG",{});var HWr=s(Ote);jpo=r(HWr,"bart"),HWr.forEach(t),Dpo=r(ACe," \u2014 "),o$=n(ACe,"A",{href:!0});var UWr=s(o$);Gpo=r(UWr,"BartForConditionalGeneration"),UWr.forEach(t),Opo=r(ACe," (BART model)"),ACe.forEach(t),Vpo=i(B),N_=n(B,"LI",{});var yCe=s(N_);Vte=n(yCe,"STRONG",{});var JWr=s(Vte);Xpo=r(JWr,"bert"),JWr.forEach(t),zpo=r(yCe," \u2014 "),r$=n(yCe,"A",{href:!0});var YWr=s(r$);Qpo=r(YWr,"BertForPreTraining"),YWr.forEach(t),Wpo=r(yCe," (BERT model)"),yCe.forEach(t),Hpo=i(B),j_=n(B,"LI",{});var LCe=s(j_);Xte=n(LCe,"STRONG",{});var KWr=s(Xte);Upo=r(KWr,"big_bird"),KWr.forEach(t),Jpo=r(LCe," \u2014 "),t$=n(LCe,"A",{href:!0});var ZWr=s(t$);Ypo=r(ZWr,"BigBirdForPreTraining"),ZWr.forEach(t),Kpo=r(LCe," (BigBird model)"),LCe.forEach(t),Zpo=i(B),D_=n(B,"LI",{});var xCe=s(D_);zte=n(xCe,"STRONG",{});var eHr=s(zte);e_o=r(eHr,"camembert"),eHr.forEach(t),o_o=r(xCe," \u2014 "),a$=n(xCe,"A",{href:!0});var oHr=s(a$);r_o=r(oHr,"CamembertForMaskedLM"),oHr.forEach(t),t_o=r(xCe," (CamemBERT model)"),xCe.forEach(t),a_o=i(B),G_=n(B,"LI",{});var kCe=s(G_);Qte=n(kCe,"STRONG",{});var rHr=s(Qte);n_o=r(rHr,"ctrl"),rHr.forEach(t),s_o=r(kCe," \u2014 "),n$=n(kCe,"A",{href:!0});var tHr=s(n$);l_o=r(tHr,"CTRLLMHeadModel"),tHr.forEach(t),i_o=r(kCe," (CTRL model)"),kCe.forEach(t),d_o=i(B),O_=n(B,"LI",{});var SCe=s(O_);Wte=n(SCe,"STRONG",{});var aHr=s(Wte);c_o=r(aHr,"data2vec-text"),aHr.forEach(t),f_o=r(SCe," \u2014 "),s$=n(SCe,"A",{href:!0});var nHr=s(s$);m_o=r(nHr,"Data2VecTextForMaskedLM"),nHr.forEach(t),g_o=r(SCe," (Data2VecText model)"),SCe.forEach(t),h_o=i(B),V_=n(B,"LI",{});var RCe=s(V_);Hte=n(RCe,"STRONG",{});var sHr=s(Hte);p_o=r(sHr,"deberta"),sHr.forEach(t),__o=r(RCe," \u2014 "),l$=n(RCe,"A",{href:!0});var lHr=s(l$);u_o=r(lHr,"DebertaForMaskedLM"),lHr.forEach(t),b_o=r(RCe," (DeBERTa model)"),RCe.forEach(t),F_o=i(B),X_=n(B,"LI",{});var BCe=s(X_);Ute=n(BCe,"STRONG",{});var iHr=s(Ute);v_o=r(iHr,"deberta-v2"),iHr.forEach(t),T_o=r(BCe," \u2014 "),i$=n(BCe,"A",{href:!0});var dHr=s(i$);M_o=r(dHr,"DebertaV2ForMaskedLM"),dHr.forEach(t),E_o=r(BCe," (DeBERTa-v2 model)"),BCe.forEach(t),C_o=i(B),z_=n(B,"LI",{});var PCe=s(z_);Jte=n(PCe,"STRONG",{});var cHr=s(Jte);w_o=r(cHr,"distilbert"),cHr.forEach(t),A_o=r(PCe," \u2014 "),d$=n(PCe,"A",{href:!0});var fHr=s(d$);y_o=r(fHr,"DistilBertForMaskedLM"),fHr.forEach(t),L_o=r(PCe," (DistilBERT model)"),PCe.forEach(t),x_o=i(B),Q_=n(B,"LI",{});var $Ce=s(Q_);Yte=n($Ce,"STRONG",{});var mHr=s(Yte);k_o=r(mHr,"electra"),mHr.forEach(t),S_o=r($Ce," \u2014 "),c$=n($Ce,"A",{href:!0});var gHr=s(c$);R_o=r(gHr,"ElectraForPreTraining"),gHr.forEach(t),B_o=r($Ce," (ELECTRA model)"),$Ce.forEach(t),P_o=i(B),W_=n(B,"LI",{});var ICe=s(W_);Kte=n(ICe,"STRONG",{});var hHr=s(Kte);$_o=r(hHr,"flaubert"),hHr.forEach(t),I_o=r(ICe," \u2014 "),f$=n(ICe,"A",{href:!0});var pHr=s(f$);q_o=r(pHr,"FlaubertWithLMHeadModel"),pHr.forEach(t),N_o=r(ICe," (FlauBERT model)"),ICe.forEach(t),j_o=i(B),H_=n(B,"LI",{});var qCe=s(H_);Zte=n(qCe,"STRONG",{});var _Hr=s(Zte);D_o=r(_Hr,"fnet"),_Hr.forEach(t),G_o=r(qCe," \u2014 "),m$=n(qCe,"A",{href:!0});var uHr=s(m$);O_o=r(uHr,"FNetForPreTraining"),uHr.forEach(t),V_o=r(qCe," (FNet model)"),qCe.forEach(t),X_o=i(B),U_=n(B,"LI",{});var NCe=s(U_);eae=n(NCe,"STRONG",{});var bHr=s(eae);z_o=r(bHr,"fsmt"),bHr.forEach(t),Q_o=r(NCe," \u2014 "),g$=n(NCe,"A",{href:!0});var FHr=s(g$);W_o=r(FHr,"FSMTForConditionalGeneration"),FHr.forEach(t),H_o=r(NCe," (FairSeq Machine-Translation model)"),NCe.forEach(t),U_o=i(B),J_=n(B,"LI",{});var jCe=s(J_);oae=n(jCe,"STRONG",{});var vHr=s(oae);J_o=r(vHr,"funnel"),vHr.forEach(t),Y_o=r(jCe," \u2014 "),h$=n(jCe,"A",{href:!0});var THr=s(h$);K_o=r(THr,"FunnelForPreTraining"),THr.forEach(t),Z_o=r(jCe," (Funnel Transformer model)"),jCe.forEach(t),euo=i(B),Y_=n(B,"LI",{});var DCe=s(Y_);rae=n(DCe,"STRONG",{});var MHr=s(rae);ouo=r(MHr,"gpt2"),MHr.forEach(t),ruo=r(DCe," \u2014 "),p$=n(DCe,"A",{href:!0});var EHr=s(p$);tuo=r(EHr,"GPT2LMHeadModel"),EHr.forEach(t),auo=r(DCe," (OpenAI GPT-2 model)"),DCe.forEach(t),nuo=i(B),K_=n(B,"LI",{});var GCe=s(K_);tae=n(GCe,"STRONG",{});var CHr=s(tae);suo=r(CHr,"ibert"),CHr.forEach(t),luo=r(GCe," \u2014 "),_$=n(GCe,"A",{href:!0});var wHr=s(_$);iuo=r(wHr,"IBertForMaskedLM"),wHr.forEach(t),duo=r(GCe," (I-BERT model)"),GCe.forEach(t),cuo=i(B),Z_=n(B,"LI",{});var OCe=s(Z_);aae=n(OCe,"STRONG",{});var AHr=s(aae);fuo=r(AHr,"layoutlm"),AHr.forEach(t),muo=r(OCe," \u2014 "),u$=n(OCe,"A",{href:!0});var yHr=s(u$);guo=r(yHr,"LayoutLMForMaskedLM"),yHr.forEach(t),huo=r(OCe," (LayoutLM model)"),OCe.forEach(t),puo=i(B),eu=n(B,"LI",{});var VCe=s(eu);nae=n(VCe,"STRONG",{});var LHr=s(nae);_uo=r(LHr,"longformer"),LHr.forEach(t),uuo=r(VCe," \u2014 "),b$=n(VCe,"A",{href:!0});var xHr=s(b$);buo=r(xHr,"LongformerForMaskedLM"),xHr.forEach(t),Fuo=r(VCe," (Longformer model)"),VCe.forEach(t),vuo=i(B),ou=n(B,"LI",{});var XCe=s(ou);sae=n(XCe,"STRONG",{});var kHr=s(sae);Tuo=r(kHr,"lxmert"),kHr.forEach(t),Muo=r(XCe," \u2014 "),F$=n(XCe,"A",{href:!0});var SHr=s(F$);Euo=r(SHr,"LxmertForPreTraining"),SHr.forEach(t),Cuo=r(XCe," (LXMERT model)"),XCe.forEach(t),wuo=i(B),ru=n(B,"LI",{});var zCe=s(ru);lae=n(zCe,"STRONG",{});var RHr=s(lae);Auo=r(RHr,"megatron-bert"),RHr.forEach(t),yuo=r(zCe," \u2014 "),v$=n(zCe,"A",{href:!0});var BHr=s(v$);Luo=r(BHr,"MegatronBertForPreTraining"),BHr.forEach(t),xuo=r(zCe," (MegatronBert model)"),zCe.forEach(t),kuo=i(B),tu=n(B,"LI",{});var QCe=s(tu);iae=n(QCe,"STRONG",{});var PHr=s(iae);Suo=r(PHr,"mobilebert"),PHr.forEach(t),Ruo=r(QCe," \u2014 "),T$=n(QCe,"A",{href:!0});var $Hr=s(T$);Buo=r($Hr,"MobileBertForPreTraining"),$Hr.forEach(t),Puo=r(QCe," (MobileBERT model)"),QCe.forEach(t),$uo=i(B),au=n(B,"LI",{});var WCe=s(au);dae=n(WCe,"STRONG",{});var IHr=s(dae);Iuo=r(IHr,"mpnet"),IHr.forEach(t),quo=r(WCe," \u2014 "),M$=n(WCe,"A",{href:!0});var qHr=s(M$);Nuo=r(qHr,"MPNetForMaskedLM"),qHr.forEach(t),juo=r(WCe," (MPNet model)"),WCe.forEach(t),Duo=i(B),nu=n(B,"LI",{});var HCe=s(nu);cae=n(HCe,"STRONG",{});var NHr=s(cae);Guo=r(NHr,"openai-gpt"),NHr.forEach(t),Ouo=r(HCe," \u2014 "),E$=n(HCe,"A",{href:!0});var jHr=s(E$);Vuo=r(jHr,"OpenAIGPTLMHeadModel"),jHr.forEach(t),Xuo=r(HCe," (OpenAI GPT model)"),HCe.forEach(t),zuo=i(B),su=n(B,"LI",{});var UCe=s(su);fae=n(UCe,"STRONG",{});var DHr=s(fae);Quo=r(DHr,"retribert"),DHr.forEach(t),Wuo=r(UCe," \u2014 "),C$=n(UCe,"A",{href:!0});var GHr=s(C$);Huo=r(GHr,"RetriBertModel"),GHr.forEach(t),Uuo=r(UCe," (RetriBERT model)"),UCe.forEach(t),Juo=i(B),lu=n(B,"LI",{});var JCe=s(lu);mae=n(JCe,"STRONG",{});var OHr=s(mae);Yuo=r(OHr,"roberta"),OHr.forEach(t),Kuo=r(JCe," \u2014 "),w$=n(JCe,"A",{href:!0});var VHr=s(w$);Zuo=r(VHr,"RobertaForMaskedLM"),VHr.forEach(t),e1o=r(JCe," (RoBERTa model)"),JCe.forEach(t),o1o=i(B),iu=n(B,"LI",{});var YCe=s(iu);gae=n(YCe,"STRONG",{});var XHr=s(gae);r1o=r(XHr,"squeezebert"),XHr.forEach(t),t1o=r(YCe," \u2014 "),A$=n(YCe,"A",{href:!0});var zHr=s(A$);a1o=r(zHr,"SqueezeBertForMaskedLM"),zHr.forEach(t),n1o=r(YCe," (SqueezeBERT model)"),YCe.forEach(t),s1o=i(B),du=n(B,"LI",{});var KCe=s(du);hae=n(KCe,"STRONG",{});var QHr=s(hae);l1o=r(QHr,"t5"),QHr.forEach(t),i1o=r(KCe," \u2014 "),y$=n(KCe,"A",{href:!0});var WHr=s(y$);d1o=r(WHr,"T5ForConditionalGeneration"),WHr.forEach(t),c1o=r(KCe," (T5 model)"),KCe.forEach(t),f1o=i(B),cu=n(B,"LI",{});var ZCe=s(cu);pae=n(ZCe,"STRONG",{});var HHr=s(pae);m1o=r(HHr,"tapas"),HHr.forEach(t),g1o=r(ZCe," \u2014 "),L$=n(ZCe,"A",{href:!0});var UHr=s(L$);h1o=r(UHr,"TapasForMaskedLM"),UHr.forEach(t),p1o=r(ZCe," (TAPAS model)"),ZCe.forEach(t),_1o=i(B),fu=n(B,"LI",{});var ewe=s(fu);_ae=n(ewe,"STRONG",{});var JHr=s(_ae);u1o=r(JHr,"transfo-xl"),JHr.forEach(t),b1o=r(ewe," \u2014 "),x$=n(ewe,"A",{href:!0});var YHr=s(x$);F1o=r(YHr,"TransfoXLLMHeadModel"),YHr.forEach(t),v1o=r(ewe," (Transformer-XL model)"),ewe.forEach(t),T1o=i(B),mu=n(B,"LI",{});var owe=s(mu);uae=n(owe,"STRONG",{});var KHr=s(uae);M1o=r(KHr,"unispeech"),KHr.forEach(t),E1o=r(owe," \u2014 "),k$=n(owe,"A",{href:!0});var ZHr=s(k$);C1o=r(ZHr,"UniSpeechForPreTraining"),ZHr.forEach(t),w1o=r(owe," (UniSpeech model)"),owe.forEach(t),A1o=i(B),gu=n(B,"LI",{});var rwe=s(gu);bae=n(rwe,"STRONG",{});var eUr=s(bae);y1o=r(eUr,"unispeech-sat"),eUr.forEach(t),L1o=r(rwe," \u2014 "),S$=n(rwe,"A",{href:!0});var oUr=s(S$);x1o=r(oUr,"UniSpeechSatForPreTraining"),oUr.forEach(t),k1o=r(rwe," (UniSpeechSat model)"),rwe.forEach(t),S1o=i(B),hu=n(B,"LI",{});var twe=s(hu);Fae=n(twe,"STRONG",{});var rUr=s(Fae);R1o=r(rUr,"visual_bert"),rUr.forEach(t),B1o=r(twe," \u2014 "),R$=n(twe,"A",{href:!0});var tUr=s(R$);P1o=r(tUr,"VisualBertForPreTraining"),tUr.forEach(t),$1o=r(twe," (VisualBert model)"),twe.forEach(t),I1o=i(B),pu=n(B,"LI",{});var awe=s(pu);vae=n(awe,"STRONG",{});var aUr=s(vae);q1o=r(aUr,"vit_mae"),aUr.forEach(t),N1o=r(awe," \u2014 "),B$=n(awe,"A",{href:!0});var nUr=s(B$);j1o=r(nUr,"ViTMAEForPreTraining"),nUr.forEach(t),D1o=r(awe," (ViTMAE model)"),awe.forEach(t),G1o=i(B),_u=n(B,"LI",{});var nwe=s(_u);Tae=n(nwe,"STRONG",{});var sUr=s(Tae);O1o=r(sUr,"wav2vec2"),sUr.forEach(t),V1o=r(nwe," \u2014 "),P$=n(nwe,"A",{href:!0});var lUr=s(P$);X1o=r(lUr,"Wav2Vec2ForPreTraining"),lUr.forEach(t),z1o=r(nwe," (Wav2Vec2 model)"),nwe.forEach(t),Q1o=i(B),uu=n(B,"LI",{});var swe=s(uu);Mae=n(swe,"STRONG",{});var iUr=s(Mae);W1o=r(iUr,"xlm"),iUr.forEach(t),H1o=r(swe," \u2014 "),$$=n(swe,"A",{href:!0});var dUr=s($$);U1o=r(dUr,"XLMWithLMHeadModel"),dUr.forEach(t),J1o=r(swe," (XLM model)"),swe.forEach(t),Y1o=i(B),bu=n(B,"LI",{});var lwe=s(bu);Eae=n(lwe,"STRONG",{});var cUr=s(Eae);K1o=r(cUr,"xlm-roberta"),cUr.forEach(t),Z1o=r(lwe," \u2014 "),I$=n(lwe,"A",{href:!0});var fUr=s(I$);e4o=r(fUr,"XLMRobertaForMaskedLM"),fUr.forEach(t),o4o=r(lwe," (XLM-RoBERTa model)"),lwe.forEach(t),r4o=i(B),Fu=n(B,"LI",{});var iwe=s(Fu);Cae=n(iwe,"STRONG",{});var mUr=s(Cae);t4o=r(mUr,"xlm-roberta-xl"),mUr.forEach(t),a4o=r(iwe," \u2014 "),q$=n(iwe,"A",{href:!0});var gUr=s(q$);n4o=r(gUr,"XLMRobertaXLForMaskedLM"),gUr.forEach(t),s4o=r(iwe," (XLM-RoBERTa-XL model)"),iwe.forEach(t),l4o=i(B),vu=n(B,"LI",{});var dwe=s(vu);wae=n(dwe,"STRONG",{});var hUr=s(wae);i4o=r(hUr,"xlnet"),hUr.forEach(t),d4o=r(dwe," \u2014 "),N$=n(dwe,"A",{href:!0});var pUr=s(N$);c4o=r(pUr,"XLNetLMHeadModel"),pUr.forEach(t),f4o=r(dwe," (XLNet model)"),dwe.forEach(t),B.forEach(t),m4o=i(Gt),Tu=n(Gt,"P",{});var cwe=s(Tu);g4o=r(cwe,"The model is set in evaluation mode by default using "),Aae=n(cwe,"CODE",{});var _Ur=s(Aae);h4o=r(_Ur,"model.eval()"),_Ur.forEach(t),p4o=r(cwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yae=n(cwe,"CODE",{});var uUr=s(yae);_4o=r(uUr,"model.train()"),uUr.forEach(t),cwe.forEach(t),u4o=i(Gt),Lae=n(Gt,"P",{});var bUr=s(Lae);b4o=r(bUr,"Examples:"),bUr.forEach(t),F4o=i(Gt),m(bw.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),DRe=i(c),rd=n(c,"H2",{class:!0});var UPe=s(rd);Mu=n(UPe,"A",{id:!0,class:!0,href:!0});var FUr=s(Mu);xae=n(FUr,"SPAN",{});var vUr=s(xae);m(Fw.$$.fragment,vUr),vUr.forEach(t),FUr.forEach(t),v4o=i(UPe),kae=n(UPe,"SPAN",{});var TUr=s(kae);T4o=r(TUr,"AutoModelForCausalLM"),TUr.forEach(t),UPe.forEach(t),GRe=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(vw.$$.fragment,Js),M4o=i(Js),td=n(Js,"P",{});var FU=s(td);E4o=r(FU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),j$=n(FU,"A",{href:!0});var MUr=s(j$);C4o=r(MUr,"from_pretrained()"),MUr.forEach(t),w4o=r(FU," class method or the "),D$=n(FU,"A",{href:!0});var EUr=s(D$);A4o=r(EUr,"from_config()"),EUr.forEach(t),y4o=r(FU,` class
method.`),FU.forEach(t),L4o=i(Js),Tw=n(Js,"P",{});var JPe=s(Tw);x4o=r(JPe,"This class cannot be instantiated directly using "),Sae=n(JPe,"CODE",{});var CUr=s(Sae);k4o=r(CUr,"__init__()"),CUr.forEach(t),S4o=r(JPe," (throws an error)."),JPe.forEach(t),R4o=i(Js),Qr=n(Js,"DIV",{class:!0});var Ys=s(Qr);m(Mw.$$.fragment,Ys),B4o=i(Ys),Rae=n(Ys,"P",{});var wUr=s(Rae);P4o=r(wUr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wUr.forEach(t),$4o=i(Ys),ad=n(Ys,"P",{});var vU=s(ad);I4o=r(vU,`Note:
Loading a model from its configuration file does `),Bae=n(vU,"STRONG",{});var AUr=s(Bae);q4o=r(AUr,"not"),AUr.forEach(t),N4o=r(vU,` load the model weights. It only affects the
model\u2019s configuration. Use `),G$=n(vU,"A",{href:!0});var yUr=s(G$);j4o=r(yUr,"from_pretrained()"),yUr.forEach(t),D4o=r(vU," to load the model weights."),vU.forEach(t),G4o=i(Ys),Pae=n(Ys,"P",{});var LUr=s(Pae);O4o=r(LUr,"Examples:"),LUr.forEach(t),V4o=i(Ys),m(Ew.$$.fragment,Ys),Ys.forEach(t),X4o=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(Cw.$$.fragment,Ot),z4o=i(Ot),$ae=n(Ot,"P",{});var xUr=s($ae);Q4o=r(xUr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xUr.forEach(t),W4o=i(Ot),Qa=n(Ot,"P",{});var SE=s(Qa);H4o=r(SE,"The model class to instantiate is selected based on the "),Iae=n(SE,"CODE",{});var kUr=s(Iae);U4o=r(kUr,"model_type"),kUr.forEach(t),J4o=r(SE,` property of the config object (either
passed as an argument or loaded from `),qae=n(SE,"CODE",{});var SUr=s(qae);Y4o=r(SUr,"pretrained_model_name_or_path"),SUr.forEach(t),K4o=r(SE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nae=n(SE,"CODE",{});var RUr=s(Nae);Z4o=r(RUr,"pretrained_model_name_or_path"),RUr.forEach(t),ebo=r(SE,":"),SE.forEach(t),obo=i(Ot),$=n(Ot,"UL",{});var q=s($);Eu=n(q,"LI",{});var fwe=s(Eu);jae=n(fwe,"STRONG",{});var BUr=s(jae);rbo=r(BUr,"bart"),BUr.forEach(t),tbo=r(fwe," \u2014 "),O$=n(fwe,"A",{href:!0});var PUr=s(O$);abo=r(PUr,"BartForCausalLM"),PUr.forEach(t),nbo=r(fwe," (BART model)"),fwe.forEach(t),sbo=i(q),Cu=n(q,"LI",{});var mwe=s(Cu);Dae=n(mwe,"STRONG",{});var $Ur=s(Dae);lbo=r($Ur,"bert"),$Ur.forEach(t),ibo=r(mwe," \u2014 "),V$=n(mwe,"A",{href:!0});var IUr=s(V$);dbo=r(IUr,"BertLMHeadModel"),IUr.forEach(t),cbo=r(mwe," (BERT model)"),mwe.forEach(t),fbo=i(q),wu=n(q,"LI",{});var gwe=s(wu);Gae=n(gwe,"STRONG",{});var qUr=s(Gae);mbo=r(qUr,"bert-generation"),qUr.forEach(t),gbo=r(gwe," \u2014 "),X$=n(gwe,"A",{href:!0});var NUr=s(X$);hbo=r(NUr,"BertGenerationDecoder"),NUr.forEach(t),pbo=r(gwe," (Bert Generation model)"),gwe.forEach(t),_bo=i(q),Au=n(q,"LI",{});var hwe=s(Au);Oae=n(hwe,"STRONG",{});var jUr=s(Oae);ubo=r(jUr,"big_bird"),jUr.forEach(t),bbo=r(hwe," \u2014 "),z$=n(hwe,"A",{href:!0});var DUr=s(z$);Fbo=r(DUr,"BigBirdForCausalLM"),DUr.forEach(t),vbo=r(hwe," (BigBird model)"),hwe.forEach(t),Tbo=i(q),yu=n(q,"LI",{});var pwe=s(yu);Vae=n(pwe,"STRONG",{});var GUr=s(Vae);Mbo=r(GUr,"bigbird_pegasus"),GUr.forEach(t),Ebo=r(pwe," \u2014 "),Q$=n(pwe,"A",{href:!0});var OUr=s(Q$);Cbo=r(OUr,"BigBirdPegasusForCausalLM"),OUr.forEach(t),wbo=r(pwe," (BigBirdPegasus model)"),pwe.forEach(t),Abo=i(q),Lu=n(q,"LI",{});var _we=s(Lu);Xae=n(_we,"STRONG",{});var VUr=s(Xae);ybo=r(VUr,"blenderbot"),VUr.forEach(t),Lbo=r(_we," \u2014 "),W$=n(_we,"A",{href:!0});var XUr=s(W$);xbo=r(XUr,"BlenderbotForCausalLM"),XUr.forEach(t),kbo=r(_we," (Blenderbot model)"),_we.forEach(t),Sbo=i(q),xu=n(q,"LI",{});var uwe=s(xu);zae=n(uwe,"STRONG",{});var zUr=s(zae);Rbo=r(zUr,"blenderbot-small"),zUr.forEach(t),Bbo=r(uwe," \u2014 "),H$=n(uwe,"A",{href:!0});var QUr=s(H$);Pbo=r(QUr,"BlenderbotSmallForCausalLM"),QUr.forEach(t),$bo=r(uwe," (BlenderbotSmall model)"),uwe.forEach(t),Ibo=i(q),ku=n(q,"LI",{});var bwe=s(ku);Qae=n(bwe,"STRONG",{});var WUr=s(Qae);qbo=r(WUr,"camembert"),WUr.forEach(t),Nbo=r(bwe," \u2014 "),U$=n(bwe,"A",{href:!0});var HUr=s(U$);jbo=r(HUr,"CamembertForCausalLM"),HUr.forEach(t),Dbo=r(bwe," (CamemBERT model)"),bwe.forEach(t),Gbo=i(q),Su=n(q,"LI",{});var Fwe=s(Su);Wae=n(Fwe,"STRONG",{});var UUr=s(Wae);Obo=r(UUr,"ctrl"),UUr.forEach(t),Vbo=r(Fwe," \u2014 "),J$=n(Fwe,"A",{href:!0});var JUr=s(J$);Xbo=r(JUr,"CTRLLMHeadModel"),JUr.forEach(t),zbo=r(Fwe," (CTRL model)"),Fwe.forEach(t),Qbo=i(q),Ru=n(q,"LI",{});var vwe=s(Ru);Hae=n(vwe,"STRONG",{});var YUr=s(Hae);Wbo=r(YUr,"data2vec-text"),YUr.forEach(t),Hbo=r(vwe," \u2014 "),Y$=n(vwe,"A",{href:!0});var KUr=s(Y$);Ubo=r(KUr,"Data2VecTextForCausalLM"),KUr.forEach(t),Jbo=r(vwe," (Data2VecText model)"),vwe.forEach(t),Ybo=i(q),Bu=n(q,"LI",{});var Twe=s(Bu);Uae=n(Twe,"STRONG",{});var ZUr=s(Uae);Kbo=r(ZUr,"electra"),ZUr.forEach(t),Zbo=r(Twe," \u2014 "),K$=n(Twe,"A",{href:!0});var eJr=s(K$);e5o=r(eJr,"ElectraForCausalLM"),eJr.forEach(t),o5o=r(Twe," (ELECTRA model)"),Twe.forEach(t),r5o=i(q),Pu=n(q,"LI",{});var Mwe=s(Pu);Jae=n(Mwe,"STRONG",{});var oJr=s(Jae);t5o=r(oJr,"gpt2"),oJr.forEach(t),a5o=r(Mwe," \u2014 "),Z$=n(Mwe,"A",{href:!0});var rJr=s(Z$);n5o=r(rJr,"GPT2LMHeadModel"),rJr.forEach(t),s5o=r(Mwe," (OpenAI GPT-2 model)"),Mwe.forEach(t),l5o=i(q),$u=n(q,"LI",{});var Ewe=s($u);Yae=n(Ewe,"STRONG",{});var tJr=s(Yae);i5o=r(tJr,"gpt_neo"),tJr.forEach(t),d5o=r(Ewe," \u2014 "),eI=n(Ewe,"A",{href:!0});var aJr=s(eI);c5o=r(aJr,"GPTNeoForCausalLM"),aJr.forEach(t),f5o=r(Ewe," (GPT Neo model)"),Ewe.forEach(t),m5o=i(q),Iu=n(q,"LI",{});var Cwe=s(Iu);Kae=n(Cwe,"STRONG",{});var nJr=s(Kae);g5o=r(nJr,"gptj"),nJr.forEach(t),h5o=r(Cwe," \u2014 "),oI=n(Cwe,"A",{href:!0});var sJr=s(oI);p5o=r(sJr,"GPTJForCausalLM"),sJr.forEach(t),_5o=r(Cwe," (GPT-J model)"),Cwe.forEach(t),u5o=i(q),qu=n(q,"LI",{});var wwe=s(qu);Zae=n(wwe,"STRONG",{});var lJr=s(Zae);b5o=r(lJr,"marian"),lJr.forEach(t),F5o=r(wwe," \u2014 "),rI=n(wwe,"A",{href:!0});var iJr=s(rI);v5o=r(iJr,"MarianForCausalLM"),iJr.forEach(t),T5o=r(wwe," (Marian model)"),wwe.forEach(t),M5o=i(q),Nu=n(q,"LI",{});var Awe=s(Nu);ene=n(Awe,"STRONG",{});var dJr=s(ene);E5o=r(dJr,"mbart"),dJr.forEach(t),C5o=r(Awe," \u2014 "),tI=n(Awe,"A",{href:!0});var cJr=s(tI);w5o=r(cJr,"MBartForCausalLM"),cJr.forEach(t),A5o=r(Awe," (mBART model)"),Awe.forEach(t),y5o=i(q),ju=n(q,"LI",{});var ywe=s(ju);one=n(ywe,"STRONG",{});var fJr=s(one);L5o=r(fJr,"megatron-bert"),fJr.forEach(t),x5o=r(ywe," \u2014 "),aI=n(ywe,"A",{href:!0});var mJr=s(aI);k5o=r(mJr,"MegatronBertForCausalLM"),mJr.forEach(t),S5o=r(ywe," (MegatronBert model)"),ywe.forEach(t),R5o=i(q),Du=n(q,"LI",{});var Lwe=s(Du);rne=n(Lwe,"STRONG",{});var gJr=s(rne);B5o=r(gJr,"openai-gpt"),gJr.forEach(t),P5o=r(Lwe," \u2014 "),nI=n(Lwe,"A",{href:!0});var hJr=s(nI);$5o=r(hJr,"OpenAIGPTLMHeadModel"),hJr.forEach(t),I5o=r(Lwe," (OpenAI GPT model)"),Lwe.forEach(t),q5o=i(q),Gu=n(q,"LI",{});var xwe=s(Gu);tne=n(xwe,"STRONG",{});var pJr=s(tne);N5o=r(pJr,"pegasus"),pJr.forEach(t),j5o=r(xwe," \u2014 "),sI=n(xwe,"A",{href:!0});var _Jr=s(sI);D5o=r(_Jr,"PegasusForCausalLM"),_Jr.forEach(t),G5o=r(xwe," (Pegasus model)"),xwe.forEach(t),O5o=i(q),Ou=n(q,"LI",{});var kwe=s(Ou);ane=n(kwe,"STRONG",{});var uJr=s(ane);V5o=r(uJr,"plbart"),uJr.forEach(t),X5o=r(kwe," \u2014 "),lI=n(kwe,"A",{href:!0});var bJr=s(lI);z5o=r(bJr,"PLBartForCausalLM"),bJr.forEach(t),Q5o=r(kwe," (PLBart model)"),kwe.forEach(t),W5o=i(q),Vu=n(q,"LI",{});var Swe=s(Vu);nne=n(Swe,"STRONG",{});var FJr=s(nne);H5o=r(FJr,"prophetnet"),FJr.forEach(t),U5o=r(Swe," \u2014 "),iI=n(Swe,"A",{href:!0});var vJr=s(iI);J5o=r(vJr,"ProphetNetForCausalLM"),vJr.forEach(t),Y5o=r(Swe," (ProphetNet model)"),Swe.forEach(t),K5o=i(q),Xu=n(q,"LI",{});var Rwe=s(Xu);sne=n(Rwe,"STRONG",{});var TJr=s(sne);Z5o=r(TJr,"qdqbert"),TJr.forEach(t),e3o=r(Rwe," \u2014 "),dI=n(Rwe,"A",{href:!0});var MJr=s(dI);o3o=r(MJr,"QDQBertLMHeadModel"),MJr.forEach(t),r3o=r(Rwe," (QDQBert model)"),Rwe.forEach(t),t3o=i(q),zu=n(q,"LI",{});var Bwe=s(zu);lne=n(Bwe,"STRONG",{});var EJr=s(lne);a3o=r(EJr,"reformer"),EJr.forEach(t),n3o=r(Bwe," \u2014 "),cI=n(Bwe,"A",{href:!0});var CJr=s(cI);s3o=r(CJr,"ReformerModelWithLMHead"),CJr.forEach(t),l3o=r(Bwe," (Reformer model)"),Bwe.forEach(t),i3o=i(q),Qu=n(q,"LI",{});var Pwe=s(Qu);ine=n(Pwe,"STRONG",{});var wJr=s(ine);d3o=r(wJr,"rembert"),wJr.forEach(t),c3o=r(Pwe," \u2014 "),fI=n(Pwe,"A",{href:!0});var AJr=s(fI);f3o=r(AJr,"RemBertForCausalLM"),AJr.forEach(t),m3o=r(Pwe," (RemBERT model)"),Pwe.forEach(t),g3o=i(q),Wu=n(q,"LI",{});var $we=s(Wu);dne=n($we,"STRONG",{});var yJr=s(dne);h3o=r(yJr,"roberta"),yJr.forEach(t),p3o=r($we," \u2014 "),mI=n($we,"A",{href:!0});var LJr=s(mI);_3o=r(LJr,"RobertaForCausalLM"),LJr.forEach(t),u3o=r($we," (RoBERTa model)"),$we.forEach(t),b3o=i(q),Hu=n(q,"LI",{});var Iwe=s(Hu);cne=n(Iwe,"STRONG",{});var xJr=s(cne);F3o=r(xJr,"roformer"),xJr.forEach(t),v3o=r(Iwe," \u2014 "),gI=n(Iwe,"A",{href:!0});var kJr=s(gI);T3o=r(kJr,"RoFormerForCausalLM"),kJr.forEach(t),M3o=r(Iwe," (RoFormer model)"),Iwe.forEach(t),E3o=i(q),Uu=n(q,"LI",{});var qwe=s(Uu);fne=n(qwe,"STRONG",{});var SJr=s(fne);C3o=r(SJr,"speech_to_text_2"),SJr.forEach(t),w3o=r(qwe," \u2014 "),hI=n(qwe,"A",{href:!0});var RJr=s(hI);A3o=r(RJr,"Speech2Text2ForCausalLM"),RJr.forEach(t),y3o=r(qwe," (Speech2Text2 model)"),qwe.forEach(t),L3o=i(q),Ju=n(q,"LI",{});var Nwe=s(Ju);mne=n(Nwe,"STRONG",{});var BJr=s(mne);x3o=r(BJr,"transfo-xl"),BJr.forEach(t),k3o=r(Nwe," \u2014 "),pI=n(Nwe,"A",{href:!0});var PJr=s(pI);S3o=r(PJr,"TransfoXLLMHeadModel"),PJr.forEach(t),R3o=r(Nwe," (Transformer-XL model)"),Nwe.forEach(t),B3o=i(q),Yu=n(q,"LI",{});var jwe=s(Yu);gne=n(jwe,"STRONG",{});var $Jr=s(gne);P3o=r($Jr,"trocr"),$Jr.forEach(t),$3o=r(jwe," \u2014 "),_I=n(jwe,"A",{href:!0});var IJr=s(_I);I3o=r(IJr,"TrOCRForCausalLM"),IJr.forEach(t),q3o=r(jwe," (TrOCR model)"),jwe.forEach(t),N3o=i(q),Ku=n(q,"LI",{});var Dwe=s(Ku);hne=n(Dwe,"STRONG",{});var qJr=s(hne);j3o=r(qJr,"xglm"),qJr.forEach(t),D3o=r(Dwe," \u2014 "),uI=n(Dwe,"A",{href:!0});var NJr=s(uI);G3o=r(NJr,"XGLMForCausalLM"),NJr.forEach(t),O3o=r(Dwe," (XGLM model)"),Dwe.forEach(t),V3o=i(q),Zu=n(q,"LI",{});var Gwe=s(Zu);pne=n(Gwe,"STRONG",{});var jJr=s(pne);X3o=r(jJr,"xlm"),jJr.forEach(t),z3o=r(Gwe," \u2014 "),bI=n(Gwe,"A",{href:!0});var DJr=s(bI);Q3o=r(DJr,"XLMWithLMHeadModel"),DJr.forEach(t),W3o=r(Gwe," (XLM model)"),Gwe.forEach(t),H3o=i(q),e1=n(q,"LI",{});var Owe=s(e1);_ne=n(Owe,"STRONG",{});var GJr=s(_ne);U3o=r(GJr,"xlm-prophetnet"),GJr.forEach(t),J3o=r(Owe," \u2014 "),FI=n(Owe,"A",{href:!0});var OJr=s(FI);Y3o=r(OJr,"XLMProphetNetForCausalLM"),OJr.forEach(t),K3o=r(Owe," (XLMProphetNet model)"),Owe.forEach(t),Z3o=i(q),o1=n(q,"LI",{});var Vwe=s(o1);une=n(Vwe,"STRONG",{});var VJr=s(une);e2o=r(VJr,"xlm-roberta"),VJr.forEach(t),o2o=r(Vwe," \u2014 "),vI=n(Vwe,"A",{href:!0});var XJr=s(vI);r2o=r(XJr,"XLMRobertaForCausalLM"),XJr.forEach(t),t2o=r(Vwe," (XLM-RoBERTa model)"),Vwe.forEach(t),a2o=i(q),r1=n(q,"LI",{});var Xwe=s(r1);bne=n(Xwe,"STRONG",{});var zJr=s(bne);n2o=r(zJr,"xlm-roberta-xl"),zJr.forEach(t),s2o=r(Xwe," \u2014 "),TI=n(Xwe,"A",{href:!0});var QJr=s(TI);l2o=r(QJr,"XLMRobertaXLForCausalLM"),QJr.forEach(t),i2o=r(Xwe," (XLM-RoBERTa-XL model)"),Xwe.forEach(t),d2o=i(q),t1=n(q,"LI",{});var zwe=s(t1);Fne=n(zwe,"STRONG",{});var WJr=s(Fne);c2o=r(WJr,"xlnet"),WJr.forEach(t),f2o=r(zwe," \u2014 "),MI=n(zwe,"A",{href:!0});var HJr=s(MI);m2o=r(HJr,"XLNetLMHeadModel"),HJr.forEach(t),g2o=r(zwe," (XLNet model)"),zwe.forEach(t),q.forEach(t),h2o=i(Ot),a1=n(Ot,"P",{});var Qwe=s(a1);p2o=r(Qwe,"The model is set in evaluation mode by default using "),vne=n(Qwe,"CODE",{});var UJr=s(vne);_2o=r(UJr,"model.eval()"),UJr.forEach(t),u2o=r(Qwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tne=n(Qwe,"CODE",{});var JJr=s(Tne);b2o=r(JJr,"model.train()"),JJr.forEach(t),Qwe.forEach(t),F2o=i(Ot),Mne=n(Ot,"P",{});var YJr=s(Mne);v2o=r(YJr,"Examples:"),YJr.forEach(t),T2o=i(Ot),m(ww.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),ORe=i(c),nd=n(c,"H2",{class:!0});var YPe=s(nd);n1=n(YPe,"A",{id:!0,class:!0,href:!0});var KJr=s(n1);Ene=n(KJr,"SPAN",{});var ZJr=s(Ene);m(Aw.$$.fragment,ZJr),ZJr.forEach(t),KJr.forEach(t),M2o=i(YPe),Cne=n(YPe,"SPAN",{});var eYr=s(Cne);E2o=r(eYr,"AutoModelForMaskedLM"),eYr.forEach(t),YPe.forEach(t),VRe=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(yw.$$.fragment,Ks),C2o=i(Ks),sd=n(Ks,"P",{});var TU=s(sd);w2o=r(TU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EI=n(TU,"A",{href:!0});var oYr=s(EI);A2o=r(oYr,"from_pretrained()"),oYr.forEach(t),y2o=r(TU," class method or the "),CI=n(TU,"A",{href:!0});var rYr=s(CI);L2o=r(rYr,"from_config()"),rYr.forEach(t),x2o=r(TU,` class
method.`),TU.forEach(t),k2o=i(Ks),Lw=n(Ks,"P",{});var KPe=s(Lw);S2o=r(KPe,"This class cannot be instantiated directly using "),wne=n(KPe,"CODE",{});var tYr=s(wne);R2o=r(tYr,"__init__()"),tYr.forEach(t),B2o=r(KPe," (throws an error)."),KPe.forEach(t),P2o=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);m(xw.$$.fragment,Zs),$2o=i(Zs),Ane=n(Zs,"P",{});var aYr=s(Ane);I2o=r(aYr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),aYr.forEach(t),q2o=i(Zs),ld=n(Zs,"P",{});var MU=s(ld);N2o=r(MU,`Note:
Loading a model from its configuration file does `),yne=n(MU,"STRONG",{});var nYr=s(yne);j2o=r(nYr,"not"),nYr.forEach(t),D2o=r(MU,` load the model weights. It only affects the
model\u2019s configuration. Use `),wI=n(MU,"A",{href:!0});var sYr=s(wI);G2o=r(sYr,"from_pretrained()"),sYr.forEach(t),O2o=r(MU," to load the model weights."),MU.forEach(t),V2o=i(Zs),Lne=n(Zs,"P",{});var lYr=s(Lne);X2o=r(lYr,"Examples:"),lYr.forEach(t),z2o=i(Zs),m(kw.$$.fragment,Zs),Zs.forEach(t),Q2o=i(Ks),De=n(Ks,"DIV",{class:!0});var Vt=s(De);m(Sw.$$.fragment,Vt),W2o=i(Vt),xne=n(Vt,"P",{});var iYr=s(xne);H2o=r(iYr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),iYr.forEach(t),U2o=i(Vt),Wa=n(Vt,"P",{});var RE=s(Wa);J2o=r(RE,"The model class to instantiate is selected based on the "),kne=n(RE,"CODE",{});var dYr=s(kne);Y2o=r(dYr,"model_type"),dYr.forEach(t),K2o=r(RE,` property of the config object (either
passed as an argument or loaded from `),Sne=n(RE,"CODE",{});var cYr=s(Sne);Z2o=r(cYr,"pretrained_model_name_or_path"),cYr.forEach(t),eFo=r(RE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rne=n(RE,"CODE",{});var fYr=s(Rne);oFo=r(fYr,"pretrained_model_name_or_path"),fYr.forEach(t),rFo=r(RE,":"),RE.forEach(t),tFo=i(Vt),I=n(Vt,"UL",{});var N=s(I);s1=n(N,"LI",{});var Wwe=s(s1);Bne=n(Wwe,"STRONG",{});var mYr=s(Bne);aFo=r(mYr,"albert"),mYr.forEach(t),nFo=r(Wwe," \u2014 "),AI=n(Wwe,"A",{href:!0});var gYr=s(AI);sFo=r(gYr,"AlbertForMaskedLM"),gYr.forEach(t),lFo=r(Wwe," (ALBERT model)"),Wwe.forEach(t),iFo=i(N),l1=n(N,"LI",{});var Hwe=s(l1);Pne=n(Hwe,"STRONG",{});var hYr=s(Pne);dFo=r(hYr,"bart"),hYr.forEach(t),cFo=r(Hwe," \u2014 "),yI=n(Hwe,"A",{href:!0});var pYr=s(yI);fFo=r(pYr,"BartForConditionalGeneration"),pYr.forEach(t),mFo=r(Hwe," (BART model)"),Hwe.forEach(t),gFo=i(N),i1=n(N,"LI",{});var Uwe=s(i1);$ne=n(Uwe,"STRONG",{});var _Yr=s($ne);hFo=r(_Yr,"bert"),_Yr.forEach(t),pFo=r(Uwe," \u2014 "),LI=n(Uwe,"A",{href:!0});var uYr=s(LI);_Fo=r(uYr,"BertForMaskedLM"),uYr.forEach(t),uFo=r(Uwe," (BERT model)"),Uwe.forEach(t),bFo=i(N),d1=n(N,"LI",{});var Jwe=s(d1);Ine=n(Jwe,"STRONG",{});var bYr=s(Ine);FFo=r(bYr,"big_bird"),bYr.forEach(t),vFo=r(Jwe," \u2014 "),xI=n(Jwe,"A",{href:!0});var FYr=s(xI);TFo=r(FYr,"BigBirdForMaskedLM"),FYr.forEach(t),MFo=r(Jwe," (BigBird model)"),Jwe.forEach(t),EFo=i(N),c1=n(N,"LI",{});var Ywe=s(c1);qne=n(Ywe,"STRONG",{});var vYr=s(qne);CFo=r(vYr,"camembert"),vYr.forEach(t),wFo=r(Ywe," \u2014 "),kI=n(Ywe,"A",{href:!0});var TYr=s(kI);AFo=r(TYr,"CamembertForMaskedLM"),TYr.forEach(t),yFo=r(Ywe," (CamemBERT model)"),Ywe.forEach(t),LFo=i(N),f1=n(N,"LI",{});var Kwe=s(f1);Nne=n(Kwe,"STRONG",{});var MYr=s(Nne);xFo=r(MYr,"convbert"),MYr.forEach(t),kFo=r(Kwe," \u2014 "),SI=n(Kwe,"A",{href:!0});var EYr=s(SI);SFo=r(EYr,"ConvBertForMaskedLM"),EYr.forEach(t),RFo=r(Kwe," (ConvBERT model)"),Kwe.forEach(t),BFo=i(N),m1=n(N,"LI",{});var Zwe=s(m1);jne=n(Zwe,"STRONG",{});var CYr=s(jne);PFo=r(CYr,"data2vec-text"),CYr.forEach(t),$Fo=r(Zwe," \u2014 "),RI=n(Zwe,"A",{href:!0});var wYr=s(RI);IFo=r(wYr,"Data2VecTextForMaskedLM"),wYr.forEach(t),qFo=r(Zwe," (Data2VecText model)"),Zwe.forEach(t),NFo=i(N),g1=n(N,"LI",{});var eAe=s(g1);Dne=n(eAe,"STRONG",{});var AYr=s(Dne);jFo=r(AYr,"deberta"),AYr.forEach(t),DFo=r(eAe," \u2014 "),BI=n(eAe,"A",{href:!0});var yYr=s(BI);GFo=r(yYr,"DebertaForMaskedLM"),yYr.forEach(t),OFo=r(eAe," (DeBERTa model)"),eAe.forEach(t),VFo=i(N),h1=n(N,"LI",{});var oAe=s(h1);Gne=n(oAe,"STRONG",{});var LYr=s(Gne);XFo=r(LYr,"deberta-v2"),LYr.forEach(t),zFo=r(oAe," \u2014 "),PI=n(oAe,"A",{href:!0});var xYr=s(PI);QFo=r(xYr,"DebertaV2ForMaskedLM"),xYr.forEach(t),WFo=r(oAe," (DeBERTa-v2 model)"),oAe.forEach(t),HFo=i(N),p1=n(N,"LI",{});var rAe=s(p1);One=n(rAe,"STRONG",{});var kYr=s(One);UFo=r(kYr,"distilbert"),kYr.forEach(t),JFo=r(rAe," \u2014 "),$I=n(rAe,"A",{href:!0});var SYr=s($I);YFo=r(SYr,"DistilBertForMaskedLM"),SYr.forEach(t),KFo=r(rAe," (DistilBERT model)"),rAe.forEach(t),ZFo=i(N),_1=n(N,"LI",{});var tAe=s(_1);Vne=n(tAe,"STRONG",{});var RYr=s(Vne);evo=r(RYr,"electra"),RYr.forEach(t),ovo=r(tAe," \u2014 "),II=n(tAe,"A",{href:!0});var BYr=s(II);rvo=r(BYr,"ElectraForMaskedLM"),BYr.forEach(t),tvo=r(tAe," (ELECTRA model)"),tAe.forEach(t),avo=i(N),u1=n(N,"LI",{});var aAe=s(u1);Xne=n(aAe,"STRONG",{});var PYr=s(Xne);nvo=r(PYr,"flaubert"),PYr.forEach(t),svo=r(aAe," \u2014 "),qI=n(aAe,"A",{href:!0});var $Yr=s(qI);lvo=r($Yr,"FlaubertWithLMHeadModel"),$Yr.forEach(t),ivo=r(aAe," (FlauBERT model)"),aAe.forEach(t),dvo=i(N),b1=n(N,"LI",{});var nAe=s(b1);zne=n(nAe,"STRONG",{});var IYr=s(zne);cvo=r(IYr,"fnet"),IYr.forEach(t),fvo=r(nAe," \u2014 "),NI=n(nAe,"A",{href:!0});var qYr=s(NI);mvo=r(qYr,"FNetForMaskedLM"),qYr.forEach(t),gvo=r(nAe," (FNet model)"),nAe.forEach(t),hvo=i(N),F1=n(N,"LI",{});var sAe=s(F1);Qne=n(sAe,"STRONG",{});var NYr=s(Qne);pvo=r(NYr,"funnel"),NYr.forEach(t),_vo=r(sAe," \u2014 "),jI=n(sAe,"A",{href:!0});var jYr=s(jI);uvo=r(jYr,"FunnelForMaskedLM"),jYr.forEach(t),bvo=r(sAe," (Funnel Transformer model)"),sAe.forEach(t),Fvo=i(N),v1=n(N,"LI",{});var lAe=s(v1);Wne=n(lAe,"STRONG",{});var DYr=s(Wne);vvo=r(DYr,"ibert"),DYr.forEach(t),Tvo=r(lAe," \u2014 "),DI=n(lAe,"A",{href:!0});var GYr=s(DI);Mvo=r(GYr,"IBertForMaskedLM"),GYr.forEach(t),Evo=r(lAe," (I-BERT model)"),lAe.forEach(t),Cvo=i(N),T1=n(N,"LI",{});var iAe=s(T1);Hne=n(iAe,"STRONG",{});var OYr=s(Hne);wvo=r(OYr,"layoutlm"),OYr.forEach(t),Avo=r(iAe," \u2014 "),GI=n(iAe,"A",{href:!0});var VYr=s(GI);yvo=r(VYr,"LayoutLMForMaskedLM"),VYr.forEach(t),Lvo=r(iAe," (LayoutLM model)"),iAe.forEach(t),xvo=i(N),M1=n(N,"LI",{});var dAe=s(M1);Une=n(dAe,"STRONG",{});var XYr=s(Une);kvo=r(XYr,"longformer"),XYr.forEach(t),Svo=r(dAe," \u2014 "),OI=n(dAe,"A",{href:!0});var zYr=s(OI);Rvo=r(zYr,"LongformerForMaskedLM"),zYr.forEach(t),Bvo=r(dAe," (Longformer model)"),dAe.forEach(t),Pvo=i(N),E1=n(N,"LI",{});var cAe=s(E1);Jne=n(cAe,"STRONG",{});var QYr=s(Jne);$vo=r(QYr,"mbart"),QYr.forEach(t),Ivo=r(cAe," \u2014 "),VI=n(cAe,"A",{href:!0});var WYr=s(VI);qvo=r(WYr,"MBartForConditionalGeneration"),WYr.forEach(t),Nvo=r(cAe," (mBART model)"),cAe.forEach(t),jvo=i(N),C1=n(N,"LI",{});var fAe=s(C1);Yne=n(fAe,"STRONG",{});var HYr=s(Yne);Dvo=r(HYr,"megatron-bert"),HYr.forEach(t),Gvo=r(fAe," \u2014 "),XI=n(fAe,"A",{href:!0});var UYr=s(XI);Ovo=r(UYr,"MegatronBertForMaskedLM"),UYr.forEach(t),Vvo=r(fAe," (MegatronBert model)"),fAe.forEach(t),Xvo=i(N),w1=n(N,"LI",{});var mAe=s(w1);Kne=n(mAe,"STRONG",{});var JYr=s(Kne);zvo=r(JYr,"mobilebert"),JYr.forEach(t),Qvo=r(mAe," \u2014 "),zI=n(mAe,"A",{href:!0});var YYr=s(zI);Wvo=r(YYr,"MobileBertForMaskedLM"),YYr.forEach(t),Hvo=r(mAe," (MobileBERT model)"),mAe.forEach(t),Uvo=i(N),A1=n(N,"LI",{});var gAe=s(A1);Zne=n(gAe,"STRONG",{});var KYr=s(Zne);Jvo=r(KYr,"mpnet"),KYr.forEach(t),Yvo=r(gAe," \u2014 "),QI=n(gAe,"A",{href:!0});var ZYr=s(QI);Kvo=r(ZYr,"MPNetForMaskedLM"),ZYr.forEach(t),Zvo=r(gAe," (MPNet model)"),gAe.forEach(t),e6o=i(N),y1=n(N,"LI",{});var hAe=s(y1);ese=n(hAe,"STRONG",{});var eKr=s(ese);o6o=r(eKr,"nystromformer"),eKr.forEach(t),r6o=r(hAe," \u2014 "),WI=n(hAe,"A",{href:!0});var oKr=s(WI);t6o=r(oKr,"NystromformerForMaskedLM"),oKr.forEach(t),a6o=r(hAe," (Nystromformer model)"),hAe.forEach(t),n6o=i(N),L1=n(N,"LI",{});var pAe=s(L1);ose=n(pAe,"STRONG",{});var rKr=s(ose);s6o=r(rKr,"perceiver"),rKr.forEach(t),l6o=r(pAe," \u2014 "),HI=n(pAe,"A",{href:!0});var tKr=s(HI);i6o=r(tKr,"PerceiverForMaskedLM"),tKr.forEach(t),d6o=r(pAe," (Perceiver model)"),pAe.forEach(t),c6o=i(N),x1=n(N,"LI",{});var _Ae=s(x1);rse=n(_Ae,"STRONG",{});var aKr=s(rse);f6o=r(aKr,"qdqbert"),aKr.forEach(t),m6o=r(_Ae," \u2014 "),UI=n(_Ae,"A",{href:!0});var nKr=s(UI);g6o=r(nKr,"QDQBertForMaskedLM"),nKr.forEach(t),h6o=r(_Ae," (QDQBert model)"),_Ae.forEach(t),p6o=i(N),k1=n(N,"LI",{});var uAe=s(k1);tse=n(uAe,"STRONG",{});var sKr=s(tse);_6o=r(sKr,"reformer"),sKr.forEach(t),u6o=r(uAe," \u2014 "),JI=n(uAe,"A",{href:!0});var lKr=s(JI);b6o=r(lKr,"ReformerForMaskedLM"),lKr.forEach(t),F6o=r(uAe," (Reformer model)"),uAe.forEach(t),v6o=i(N),S1=n(N,"LI",{});var bAe=s(S1);ase=n(bAe,"STRONG",{});var iKr=s(ase);T6o=r(iKr,"rembert"),iKr.forEach(t),M6o=r(bAe," \u2014 "),YI=n(bAe,"A",{href:!0});var dKr=s(YI);E6o=r(dKr,"RemBertForMaskedLM"),dKr.forEach(t),C6o=r(bAe," (RemBERT model)"),bAe.forEach(t),w6o=i(N),R1=n(N,"LI",{});var FAe=s(R1);nse=n(FAe,"STRONG",{});var cKr=s(nse);A6o=r(cKr,"roberta"),cKr.forEach(t),y6o=r(FAe," \u2014 "),KI=n(FAe,"A",{href:!0});var fKr=s(KI);L6o=r(fKr,"RobertaForMaskedLM"),fKr.forEach(t),x6o=r(FAe," (RoBERTa model)"),FAe.forEach(t),k6o=i(N),B1=n(N,"LI",{});var vAe=s(B1);sse=n(vAe,"STRONG",{});var mKr=s(sse);S6o=r(mKr,"roformer"),mKr.forEach(t),R6o=r(vAe," \u2014 "),ZI=n(vAe,"A",{href:!0});var gKr=s(ZI);B6o=r(gKr,"RoFormerForMaskedLM"),gKr.forEach(t),P6o=r(vAe," (RoFormer model)"),vAe.forEach(t),$6o=i(N),P1=n(N,"LI",{});var TAe=s(P1);lse=n(TAe,"STRONG",{});var hKr=s(lse);I6o=r(hKr,"squeezebert"),hKr.forEach(t),q6o=r(TAe," \u2014 "),eq=n(TAe,"A",{href:!0});var pKr=s(eq);N6o=r(pKr,"SqueezeBertForMaskedLM"),pKr.forEach(t),j6o=r(TAe," (SqueezeBERT model)"),TAe.forEach(t),D6o=i(N),$1=n(N,"LI",{});var MAe=s($1);ise=n(MAe,"STRONG",{});var _Kr=s(ise);G6o=r(_Kr,"tapas"),_Kr.forEach(t),O6o=r(MAe," \u2014 "),oq=n(MAe,"A",{href:!0});var uKr=s(oq);V6o=r(uKr,"TapasForMaskedLM"),uKr.forEach(t),X6o=r(MAe," (TAPAS model)"),MAe.forEach(t),z6o=i(N),I1=n(N,"LI",{});var EAe=s(I1);dse=n(EAe,"STRONG",{});var bKr=s(dse);Q6o=r(bKr,"wav2vec2"),bKr.forEach(t),W6o=r(EAe," \u2014 "),cse=n(EAe,"CODE",{});var FKr=s(cse);H6o=r(FKr,"Wav2Vec2ForMaskedLM"),FKr.forEach(t),U6o=r(EAe," (Wav2Vec2 model)"),EAe.forEach(t),J6o=i(N),q1=n(N,"LI",{});var CAe=s(q1);fse=n(CAe,"STRONG",{});var vKr=s(fse);Y6o=r(vKr,"xlm"),vKr.forEach(t),K6o=r(CAe," \u2014 "),rq=n(CAe,"A",{href:!0});var TKr=s(rq);Z6o=r(TKr,"XLMWithLMHeadModel"),TKr.forEach(t),eTo=r(CAe," (XLM model)"),CAe.forEach(t),oTo=i(N),N1=n(N,"LI",{});var wAe=s(N1);mse=n(wAe,"STRONG",{});var MKr=s(mse);rTo=r(MKr,"xlm-roberta"),MKr.forEach(t),tTo=r(wAe," \u2014 "),tq=n(wAe,"A",{href:!0});var EKr=s(tq);aTo=r(EKr,"XLMRobertaForMaskedLM"),EKr.forEach(t),nTo=r(wAe," (XLM-RoBERTa model)"),wAe.forEach(t),sTo=i(N),j1=n(N,"LI",{});var AAe=s(j1);gse=n(AAe,"STRONG",{});var CKr=s(gse);lTo=r(CKr,"xlm-roberta-xl"),CKr.forEach(t),iTo=r(AAe," \u2014 "),aq=n(AAe,"A",{href:!0});var wKr=s(aq);dTo=r(wKr,"XLMRobertaXLForMaskedLM"),wKr.forEach(t),cTo=r(AAe," (XLM-RoBERTa-XL model)"),AAe.forEach(t),fTo=i(N),D1=n(N,"LI",{});var yAe=s(D1);hse=n(yAe,"STRONG",{});var AKr=s(hse);mTo=r(AKr,"yoso"),AKr.forEach(t),gTo=r(yAe," \u2014 "),nq=n(yAe,"A",{href:!0});var yKr=s(nq);hTo=r(yKr,"YosoForMaskedLM"),yKr.forEach(t),pTo=r(yAe," (YOSO model)"),yAe.forEach(t),N.forEach(t),_To=i(Vt),G1=n(Vt,"P",{});var LAe=s(G1);uTo=r(LAe,"The model is set in evaluation mode by default using "),pse=n(LAe,"CODE",{});var LKr=s(pse);bTo=r(LKr,"model.eval()"),LKr.forEach(t),FTo=r(LAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_se=n(LAe,"CODE",{});var xKr=s(_se);vTo=r(xKr,"model.train()"),xKr.forEach(t),LAe.forEach(t),TTo=i(Vt),use=n(Vt,"P",{});var kKr=s(use);MTo=r(kKr,"Examples:"),kKr.forEach(t),ETo=i(Vt),m(Rw.$$.fragment,Vt),Vt.forEach(t),Ks.forEach(t),XRe=i(c),id=n(c,"H2",{class:!0});var ZPe=s(id);O1=n(ZPe,"A",{id:!0,class:!0,href:!0});var SKr=s(O1);bse=n(SKr,"SPAN",{});var RKr=s(bse);m(Bw.$$.fragment,RKr),RKr.forEach(t),SKr.forEach(t),CTo=i(ZPe),Fse=n(ZPe,"SPAN",{});var BKr=s(Fse);wTo=r(BKr,"AutoModelForSeq2SeqLM"),BKr.forEach(t),ZPe.forEach(t),zRe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(Pw.$$.fragment,el),ATo=i(el),dd=n(el,"P",{});var EU=s(dd);yTo=r(EU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sq=n(EU,"A",{href:!0});var PKr=s(sq);LTo=r(PKr,"from_pretrained()"),PKr.forEach(t),xTo=r(EU," class method or the "),lq=n(EU,"A",{href:!0});var $Kr=s(lq);kTo=r($Kr,"from_config()"),$Kr.forEach(t),STo=r(EU,` class
method.`),EU.forEach(t),RTo=i(el),$w=n(el,"P",{});var e$e=s($w);BTo=r(e$e,"This class cannot be instantiated directly using "),vse=n(e$e,"CODE",{});var IKr=s(vse);PTo=r(IKr,"__init__()"),IKr.forEach(t),$To=r(e$e," (throws an error)."),e$e.forEach(t),ITo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(Iw.$$.fragment,ol),qTo=i(ol),Tse=n(ol,"P",{});var qKr=s(Tse);NTo=r(qKr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qKr.forEach(t),jTo=i(ol),cd=n(ol,"P",{});var CU=s(cd);DTo=r(CU,`Note:
Loading a model from its configuration file does `),Mse=n(CU,"STRONG",{});var NKr=s(Mse);GTo=r(NKr,"not"),NKr.forEach(t),OTo=r(CU,` load the model weights. It only affects the
model\u2019s configuration. Use `),iq=n(CU,"A",{href:!0});var jKr=s(iq);VTo=r(jKr,"from_pretrained()"),jKr.forEach(t),XTo=r(CU," to load the model weights."),CU.forEach(t),zTo=i(ol),Ese=n(ol,"P",{});var DKr=s(Ese);QTo=r(DKr,"Examples:"),DKr.forEach(t),WTo=i(ol),m(qw.$$.fragment,ol),ol.forEach(t),HTo=i(el),Ge=n(el,"DIV",{class:!0});var Xt=s(Ge);m(Nw.$$.fragment,Xt),UTo=i(Xt),Cse=n(Xt,"P",{});var GKr=s(Cse);JTo=r(GKr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),GKr.forEach(t),YTo=i(Xt),Ha=n(Xt,"P",{});var BE=s(Ha);KTo=r(BE,"The model class to instantiate is selected based on the "),wse=n(BE,"CODE",{});var OKr=s(wse);ZTo=r(OKr,"model_type"),OKr.forEach(t),eMo=r(BE,` property of the config object (either
passed as an argument or loaded from `),Ase=n(BE,"CODE",{});var VKr=s(Ase);oMo=r(VKr,"pretrained_model_name_or_path"),VKr.forEach(t),rMo=r(BE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yse=n(BE,"CODE",{});var XKr=s(yse);tMo=r(XKr,"pretrained_model_name_or_path"),XKr.forEach(t),aMo=r(BE,":"),BE.forEach(t),nMo=i(Xt),ne=n(Xt,"UL",{});var le=s(ne);V1=n(le,"LI",{});var xAe=s(V1);Lse=n(xAe,"STRONG",{});var zKr=s(Lse);sMo=r(zKr,"bart"),zKr.forEach(t),lMo=r(xAe," \u2014 "),dq=n(xAe,"A",{href:!0});var QKr=s(dq);iMo=r(QKr,"BartForConditionalGeneration"),QKr.forEach(t),dMo=r(xAe," (BART model)"),xAe.forEach(t),cMo=i(le),X1=n(le,"LI",{});var kAe=s(X1);xse=n(kAe,"STRONG",{});var WKr=s(xse);fMo=r(WKr,"bigbird_pegasus"),WKr.forEach(t),mMo=r(kAe," \u2014 "),cq=n(kAe,"A",{href:!0});var HKr=s(cq);gMo=r(HKr,"BigBirdPegasusForConditionalGeneration"),HKr.forEach(t),hMo=r(kAe," (BigBirdPegasus model)"),kAe.forEach(t),pMo=i(le),z1=n(le,"LI",{});var SAe=s(z1);kse=n(SAe,"STRONG",{});var UKr=s(kse);_Mo=r(UKr,"blenderbot"),UKr.forEach(t),uMo=r(SAe," \u2014 "),fq=n(SAe,"A",{href:!0});var JKr=s(fq);bMo=r(JKr,"BlenderbotForConditionalGeneration"),JKr.forEach(t),FMo=r(SAe," (Blenderbot model)"),SAe.forEach(t),vMo=i(le),Q1=n(le,"LI",{});var RAe=s(Q1);Sse=n(RAe,"STRONG",{});var YKr=s(Sse);TMo=r(YKr,"blenderbot-small"),YKr.forEach(t),MMo=r(RAe," \u2014 "),mq=n(RAe,"A",{href:!0});var KKr=s(mq);EMo=r(KKr,"BlenderbotSmallForConditionalGeneration"),KKr.forEach(t),CMo=r(RAe," (BlenderbotSmall model)"),RAe.forEach(t),wMo=i(le),W1=n(le,"LI",{});var BAe=s(W1);Rse=n(BAe,"STRONG",{});var ZKr=s(Rse);AMo=r(ZKr,"encoder-decoder"),ZKr.forEach(t),yMo=r(BAe," \u2014 "),gq=n(BAe,"A",{href:!0});var eZr=s(gq);LMo=r(eZr,"EncoderDecoderModel"),eZr.forEach(t),xMo=r(BAe," (Encoder decoder model)"),BAe.forEach(t),kMo=i(le),H1=n(le,"LI",{});var PAe=s(H1);Bse=n(PAe,"STRONG",{});var oZr=s(Bse);SMo=r(oZr,"fsmt"),oZr.forEach(t),RMo=r(PAe," \u2014 "),hq=n(PAe,"A",{href:!0});var rZr=s(hq);BMo=r(rZr,"FSMTForConditionalGeneration"),rZr.forEach(t),PMo=r(PAe," (FairSeq Machine-Translation model)"),PAe.forEach(t),$Mo=i(le),U1=n(le,"LI",{});var $Ae=s(U1);Pse=n($Ae,"STRONG",{});var tZr=s(Pse);IMo=r(tZr,"led"),tZr.forEach(t),qMo=r($Ae," \u2014 "),pq=n($Ae,"A",{href:!0});var aZr=s(pq);NMo=r(aZr,"LEDForConditionalGeneration"),aZr.forEach(t),jMo=r($Ae," (LED model)"),$Ae.forEach(t),DMo=i(le),J1=n(le,"LI",{});var IAe=s(J1);$se=n(IAe,"STRONG",{});var nZr=s($se);GMo=r(nZr,"m2m_100"),nZr.forEach(t),OMo=r(IAe," \u2014 "),_q=n(IAe,"A",{href:!0});var sZr=s(_q);VMo=r(sZr,"M2M100ForConditionalGeneration"),sZr.forEach(t),XMo=r(IAe," (M2M100 model)"),IAe.forEach(t),zMo=i(le),Y1=n(le,"LI",{});var qAe=s(Y1);Ise=n(qAe,"STRONG",{});var lZr=s(Ise);QMo=r(lZr,"marian"),lZr.forEach(t),WMo=r(qAe," \u2014 "),uq=n(qAe,"A",{href:!0});var iZr=s(uq);HMo=r(iZr,"MarianMTModel"),iZr.forEach(t),UMo=r(qAe," (Marian model)"),qAe.forEach(t),JMo=i(le),K1=n(le,"LI",{});var NAe=s(K1);qse=n(NAe,"STRONG",{});var dZr=s(qse);YMo=r(dZr,"mbart"),dZr.forEach(t),KMo=r(NAe," \u2014 "),bq=n(NAe,"A",{href:!0});var cZr=s(bq);ZMo=r(cZr,"MBartForConditionalGeneration"),cZr.forEach(t),eEo=r(NAe," (mBART model)"),NAe.forEach(t),oEo=i(le),Z1=n(le,"LI",{});var jAe=s(Z1);Nse=n(jAe,"STRONG",{});var fZr=s(Nse);rEo=r(fZr,"mt5"),fZr.forEach(t),tEo=r(jAe," \u2014 "),Fq=n(jAe,"A",{href:!0});var mZr=s(Fq);aEo=r(mZr,"MT5ForConditionalGeneration"),mZr.forEach(t),nEo=r(jAe," (mT5 model)"),jAe.forEach(t),sEo=i(le),e4=n(le,"LI",{});var DAe=s(e4);jse=n(DAe,"STRONG",{});var gZr=s(jse);lEo=r(gZr,"pegasus"),gZr.forEach(t),iEo=r(DAe," \u2014 "),vq=n(DAe,"A",{href:!0});var hZr=s(vq);dEo=r(hZr,"PegasusForConditionalGeneration"),hZr.forEach(t),cEo=r(DAe," (Pegasus model)"),DAe.forEach(t),fEo=i(le),o4=n(le,"LI",{});var GAe=s(o4);Dse=n(GAe,"STRONG",{});var pZr=s(Dse);mEo=r(pZr,"plbart"),pZr.forEach(t),gEo=r(GAe," \u2014 "),Tq=n(GAe,"A",{href:!0});var _Zr=s(Tq);hEo=r(_Zr,"PLBartForConditionalGeneration"),_Zr.forEach(t),pEo=r(GAe," (PLBart model)"),GAe.forEach(t),_Eo=i(le),r4=n(le,"LI",{});var OAe=s(r4);Gse=n(OAe,"STRONG",{});var uZr=s(Gse);uEo=r(uZr,"prophetnet"),uZr.forEach(t),bEo=r(OAe," \u2014 "),Mq=n(OAe,"A",{href:!0});var bZr=s(Mq);FEo=r(bZr,"ProphetNetForConditionalGeneration"),bZr.forEach(t),vEo=r(OAe," (ProphetNet model)"),OAe.forEach(t),TEo=i(le),t4=n(le,"LI",{});var VAe=s(t4);Ose=n(VAe,"STRONG",{});var FZr=s(Ose);MEo=r(FZr,"t5"),FZr.forEach(t),EEo=r(VAe," \u2014 "),Eq=n(VAe,"A",{href:!0});var vZr=s(Eq);CEo=r(vZr,"T5ForConditionalGeneration"),vZr.forEach(t),wEo=r(VAe," (T5 model)"),VAe.forEach(t),AEo=i(le),a4=n(le,"LI",{});var XAe=s(a4);Vse=n(XAe,"STRONG",{});var TZr=s(Vse);yEo=r(TZr,"tapex"),TZr.forEach(t),LEo=r(XAe," \u2014 "),Cq=n(XAe,"A",{href:!0});var MZr=s(Cq);xEo=r(MZr,"BartForConditionalGeneration"),MZr.forEach(t),kEo=r(XAe," (TAPEX model)"),XAe.forEach(t),SEo=i(le),n4=n(le,"LI",{});var zAe=s(n4);Xse=n(zAe,"STRONG",{});var EZr=s(Xse);REo=r(EZr,"xlm-prophetnet"),EZr.forEach(t),BEo=r(zAe," \u2014 "),wq=n(zAe,"A",{href:!0});var CZr=s(wq);PEo=r(CZr,"XLMProphetNetForConditionalGeneration"),CZr.forEach(t),$Eo=r(zAe," (XLMProphetNet model)"),zAe.forEach(t),le.forEach(t),IEo=i(Xt),s4=n(Xt,"P",{});var QAe=s(s4);qEo=r(QAe,"The model is set in evaluation mode by default using "),zse=n(QAe,"CODE",{});var wZr=s(zse);NEo=r(wZr,"model.eval()"),wZr.forEach(t),jEo=r(QAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qse=n(QAe,"CODE",{});var AZr=s(Qse);DEo=r(AZr,"model.train()"),AZr.forEach(t),QAe.forEach(t),GEo=i(Xt),Wse=n(Xt,"P",{});var yZr=s(Wse);OEo=r(yZr,"Examples:"),yZr.forEach(t),VEo=i(Xt),m(jw.$$.fragment,Xt),Xt.forEach(t),el.forEach(t),QRe=i(c),fd=n(c,"H2",{class:!0});var o$e=s(fd);l4=n(o$e,"A",{id:!0,class:!0,href:!0});var LZr=s(l4);Hse=n(LZr,"SPAN",{});var xZr=s(Hse);m(Dw.$$.fragment,xZr),xZr.forEach(t),LZr.forEach(t),XEo=i(o$e),Use=n(o$e,"SPAN",{});var kZr=s(Use);zEo=r(kZr,"AutoModelForSequenceClassification"),kZr.forEach(t),o$e.forEach(t),WRe=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(Gw.$$.fragment,rl),QEo=i(rl),md=n(rl,"P",{});var wU=s(md);WEo=r(wU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Aq=n(wU,"A",{href:!0});var SZr=s(Aq);HEo=r(SZr,"from_pretrained()"),SZr.forEach(t),UEo=r(wU," class method or the "),yq=n(wU,"A",{href:!0});var RZr=s(yq);JEo=r(RZr,"from_config()"),RZr.forEach(t),YEo=r(wU,` class
method.`),wU.forEach(t),KEo=i(rl),Ow=n(rl,"P",{});var r$e=s(Ow);ZEo=r(r$e,"This class cannot be instantiated directly using "),Jse=n(r$e,"CODE",{});var BZr=s(Jse);eCo=r(BZr,"__init__()"),BZr.forEach(t),oCo=r(r$e," (throws an error)."),r$e.forEach(t),rCo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(Vw.$$.fragment,tl),tCo=i(tl),Yse=n(tl,"P",{});var PZr=s(Yse);aCo=r(PZr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PZr.forEach(t),nCo=i(tl),gd=n(tl,"P",{});var AU=s(gd);sCo=r(AU,`Note:
Loading a model from its configuration file does `),Kse=n(AU,"STRONG",{});var $Zr=s(Kse);lCo=r($Zr,"not"),$Zr.forEach(t),iCo=r(AU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lq=n(AU,"A",{href:!0});var IZr=s(Lq);dCo=r(IZr,"from_pretrained()"),IZr.forEach(t),cCo=r(AU," to load the model weights."),AU.forEach(t),fCo=i(tl),Zse=n(tl,"P",{});var qZr=s(Zse);mCo=r(qZr,"Examples:"),qZr.forEach(t),gCo=i(tl),m(Xw.$$.fragment,tl),tl.forEach(t),hCo=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(zw.$$.fragment,zt),pCo=i(zt),ele=n(zt,"P",{});var NZr=s(ele);_Co=r(NZr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),NZr.forEach(t),uCo=i(zt),Ua=n(zt,"P",{});var PE=s(Ua);bCo=r(PE,"The model class to instantiate is selected based on the "),ole=n(PE,"CODE",{});var jZr=s(ole);FCo=r(jZr,"model_type"),jZr.forEach(t),vCo=r(PE,` property of the config object (either
passed as an argument or loaded from `),rle=n(PE,"CODE",{});var DZr=s(rle);TCo=r(DZr,"pretrained_model_name_or_path"),DZr.forEach(t),MCo=r(PE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tle=n(PE,"CODE",{});var GZr=s(tle);ECo=r(GZr,"pretrained_model_name_or_path"),GZr.forEach(t),CCo=r(PE,":"),PE.forEach(t),wCo=i(zt),y=n(zt,"UL",{});var L=s(y);i4=n(L,"LI",{});var WAe=s(i4);ale=n(WAe,"STRONG",{});var OZr=s(ale);ACo=r(OZr,"albert"),OZr.forEach(t),yCo=r(WAe," \u2014 "),xq=n(WAe,"A",{href:!0});var VZr=s(xq);LCo=r(VZr,"AlbertForSequenceClassification"),VZr.forEach(t),xCo=r(WAe," (ALBERT model)"),WAe.forEach(t),kCo=i(L),d4=n(L,"LI",{});var HAe=s(d4);nle=n(HAe,"STRONG",{});var XZr=s(nle);SCo=r(XZr,"bart"),XZr.forEach(t),RCo=r(HAe," \u2014 "),kq=n(HAe,"A",{href:!0});var zZr=s(kq);BCo=r(zZr,"BartForSequenceClassification"),zZr.forEach(t),PCo=r(HAe," (BART model)"),HAe.forEach(t),$Co=i(L),c4=n(L,"LI",{});var UAe=s(c4);sle=n(UAe,"STRONG",{});var QZr=s(sle);ICo=r(QZr,"bert"),QZr.forEach(t),qCo=r(UAe," \u2014 "),Sq=n(UAe,"A",{href:!0});var WZr=s(Sq);NCo=r(WZr,"BertForSequenceClassification"),WZr.forEach(t),jCo=r(UAe," (BERT model)"),UAe.forEach(t),DCo=i(L),f4=n(L,"LI",{});var JAe=s(f4);lle=n(JAe,"STRONG",{});var HZr=s(lle);GCo=r(HZr,"big_bird"),HZr.forEach(t),OCo=r(JAe," \u2014 "),Rq=n(JAe,"A",{href:!0});var UZr=s(Rq);VCo=r(UZr,"BigBirdForSequenceClassification"),UZr.forEach(t),XCo=r(JAe," (BigBird model)"),JAe.forEach(t),zCo=i(L),m4=n(L,"LI",{});var YAe=s(m4);ile=n(YAe,"STRONG",{});var JZr=s(ile);QCo=r(JZr,"bigbird_pegasus"),JZr.forEach(t),WCo=r(YAe," \u2014 "),Bq=n(YAe,"A",{href:!0});var YZr=s(Bq);HCo=r(YZr,"BigBirdPegasusForSequenceClassification"),YZr.forEach(t),UCo=r(YAe," (BigBirdPegasus model)"),YAe.forEach(t),JCo=i(L),g4=n(L,"LI",{});var KAe=s(g4);dle=n(KAe,"STRONG",{});var KZr=s(dle);YCo=r(KZr,"camembert"),KZr.forEach(t),KCo=r(KAe," \u2014 "),Pq=n(KAe,"A",{href:!0});var ZZr=s(Pq);ZCo=r(ZZr,"CamembertForSequenceClassification"),ZZr.forEach(t),ewo=r(KAe," (CamemBERT model)"),KAe.forEach(t),owo=i(L),h4=n(L,"LI",{});var ZAe=s(h4);cle=n(ZAe,"STRONG",{});var eet=s(cle);rwo=r(eet,"canine"),eet.forEach(t),two=r(ZAe," \u2014 "),$q=n(ZAe,"A",{href:!0});var oet=s($q);awo=r(oet,"CanineForSequenceClassification"),oet.forEach(t),nwo=r(ZAe," (Canine model)"),ZAe.forEach(t),swo=i(L),p4=n(L,"LI",{});var e0e=s(p4);fle=n(e0e,"STRONG",{});var ret=s(fle);lwo=r(ret,"convbert"),ret.forEach(t),iwo=r(e0e," \u2014 "),Iq=n(e0e,"A",{href:!0});var tet=s(Iq);dwo=r(tet,"ConvBertForSequenceClassification"),tet.forEach(t),cwo=r(e0e," (ConvBERT model)"),e0e.forEach(t),fwo=i(L),_4=n(L,"LI",{});var o0e=s(_4);mle=n(o0e,"STRONG",{});var aet=s(mle);mwo=r(aet,"ctrl"),aet.forEach(t),gwo=r(o0e," \u2014 "),qq=n(o0e,"A",{href:!0});var net=s(qq);hwo=r(net,"CTRLForSequenceClassification"),net.forEach(t),pwo=r(o0e," (CTRL model)"),o0e.forEach(t),_wo=i(L),u4=n(L,"LI",{});var r0e=s(u4);gle=n(r0e,"STRONG",{});var set=s(gle);uwo=r(set,"data2vec-text"),set.forEach(t),bwo=r(r0e," \u2014 "),Nq=n(r0e,"A",{href:!0});var iet=s(Nq);Fwo=r(iet,"Data2VecTextForSequenceClassification"),iet.forEach(t),vwo=r(r0e," (Data2VecText model)"),r0e.forEach(t),Two=i(L),b4=n(L,"LI",{});var t0e=s(b4);hle=n(t0e,"STRONG",{});var det=s(hle);Mwo=r(det,"deberta"),det.forEach(t),Ewo=r(t0e," \u2014 "),jq=n(t0e,"A",{href:!0});var cet=s(jq);Cwo=r(cet,"DebertaForSequenceClassification"),cet.forEach(t),wwo=r(t0e," (DeBERTa model)"),t0e.forEach(t),Awo=i(L),F4=n(L,"LI",{});var a0e=s(F4);ple=n(a0e,"STRONG",{});var fet=s(ple);ywo=r(fet,"deberta-v2"),fet.forEach(t),Lwo=r(a0e," \u2014 "),Dq=n(a0e,"A",{href:!0});var met=s(Dq);xwo=r(met,"DebertaV2ForSequenceClassification"),met.forEach(t),kwo=r(a0e," (DeBERTa-v2 model)"),a0e.forEach(t),Swo=i(L),v4=n(L,"LI",{});var n0e=s(v4);_le=n(n0e,"STRONG",{});var get=s(_le);Rwo=r(get,"distilbert"),get.forEach(t),Bwo=r(n0e," \u2014 "),Gq=n(n0e,"A",{href:!0});var het=s(Gq);Pwo=r(het,"DistilBertForSequenceClassification"),het.forEach(t),$wo=r(n0e," (DistilBERT model)"),n0e.forEach(t),Iwo=i(L),T4=n(L,"LI",{});var s0e=s(T4);ule=n(s0e,"STRONG",{});var pet=s(ule);qwo=r(pet,"electra"),pet.forEach(t),Nwo=r(s0e," \u2014 "),Oq=n(s0e,"A",{href:!0});var _et=s(Oq);jwo=r(_et,"ElectraForSequenceClassification"),_et.forEach(t),Dwo=r(s0e," (ELECTRA model)"),s0e.forEach(t),Gwo=i(L),M4=n(L,"LI",{});var l0e=s(M4);ble=n(l0e,"STRONG",{});var uet=s(ble);Owo=r(uet,"flaubert"),uet.forEach(t),Vwo=r(l0e," \u2014 "),Vq=n(l0e,"A",{href:!0});var bet=s(Vq);Xwo=r(bet,"FlaubertForSequenceClassification"),bet.forEach(t),zwo=r(l0e," (FlauBERT model)"),l0e.forEach(t),Qwo=i(L),E4=n(L,"LI",{});var i0e=s(E4);Fle=n(i0e,"STRONG",{});var Fet=s(Fle);Wwo=r(Fet,"fnet"),Fet.forEach(t),Hwo=r(i0e," \u2014 "),Xq=n(i0e,"A",{href:!0});var vet=s(Xq);Uwo=r(vet,"FNetForSequenceClassification"),vet.forEach(t),Jwo=r(i0e," (FNet model)"),i0e.forEach(t),Ywo=i(L),C4=n(L,"LI",{});var d0e=s(C4);vle=n(d0e,"STRONG",{});var Tet=s(vle);Kwo=r(Tet,"funnel"),Tet.forEach(t),Zwo=r(d0e," \u2014 "),zq=n(d0e,"A",{href:!0});var Met=s(zq);eAo=r(Met,"FunnelForSequenceClassification"),Met.forEach(t),oAo=r(d0e," (Funnel Transformer model)"),d0e.forEach(t),rAo=i(L),w4=n(L,"LI",{});var c0e=s(w4);Tle=n(c0e,"STRONG",{});var Eet=s(Tle);tAo=r(Eet,"gpt2"),Eet.forEach(t),aAo=r(c0e," \u2014 "),Qq=n(c0e,"A",{href:!0});var Cet=s(Qq);nAo=r(Cet,"GPT2ForSequenceClassification"),Cet.forEach(t),sAo=r(c0e," (OpenAI GPT-2 model)"),c0e.forEach(t),lAo=i(L),A4=n(L,"LI",{});var f0e=s(A4);Mle=n(f0e,"STRONG",{});var wet=s(Mle);iAo=r(wet,"gpt_neo"),wet.forEach(t),dAo=r(f0e," \u2014 "),Wq=n(f0e,"A",{href:!0});var Aet=s(Wq);cAo=r(Aet,"GPTNeoForSequenceClassification"),Aet.forEach(t),fAo=r(f0e," (GPT Neo model)"),f0e.forEach(t),mAo=i(L),y4=n(L,"LI",{});var m0e=s(y4);Ele=n(m0e,"STRONG",{});var yet=s(Ele);gAo=r(yet,"gptj"),yet.forEach(t),hAo=r(m0e," \u2014 "),Hq=n(m0e,"A",{href:!0});var Let=s(Hq);pAo=r(Let,"GPTJForSequenceClassification"),Let.forEach(t),_Ao=r(m0e," (GPT-J model)"),m0e.forEach(t),uAo=i(L),L4=n(L,"LI",{});var g0e=s(L4);Cle=n(g0e,"STRONG",{});var xet=s(Cle);bAo=r(xet,"ibert"),xet.forEach(t),FAo=r(g0e," \u2014 "),Uq=n(g0e,"A",{href:!0});var ket=s(Uq);vAo=r(ket,"IBertForSequenceClassification"),ket.forEach(t),TAo=r(g0e," (I-BERT model)"),g0e.forEach(t),MAo=i(L),x4=n(L,"LI",{});var h0e=s(x4);wle=n(h0e,"STRONG",{});var Set=s(wle);EAo=r(Set,"layoutlm"),Set.forEach(t),CAo=r(h0e," \u2014 "),Jq=n(h0e,"A",{href:!0});var Ret=s(Jq);wAo=r(Ret,"LayoutLMForSequenceClassification"),Ret.forEach(t),AAo=r(h0e," (LayoutLM model)"),h0e.forEach(t),yAo=i(L),k4=n(L,"LI",{});var p0e=s(k4);Ale=n(p0e,"STRONG",{});var Bet=s(Ale);LAo=r(Bet,"layoutlmv2"),Bet.forEach(t),xAo=r(p0e," \u2014 "),Yq=n(p0e,"A",{href:!0});var Pet=s(Yq);kAo=r(Pet,"LayoutLMv2ForSequenceClassification"),Pet.forEach(t),SAo=r(p0e," (LayoutLMv2 model)"),p0e.forEach(t),RAo=i(L),S4=n(L,"LI",{});var _0e=s(S4);yle=n(_0e,"STRONG",{});var $et=s(yle);BAo=r($et,"led"),$et.forEach(t),PAo=r(_0e," \u2014 "),Kq=n(_0e,"A",{href:!0});var Iet=s(Kq);$Ao=r(Iet,"LEDForSequenceClassification"),Iet.forEach(t),IAo=r(_0e," (LED model)"),_0e.forEach(t),qAo=i(L),R4=n(L,"LI",{});var u0e=s(R4);Lle=n(u0e,"STRONG",{});var qet=s(Lle);NAo=r(qet,"longformer"),qet.forEach(t),jAo=r(u0e," \u2014 "),Zq=n(u0e,"A",{href:!0});var Net=s(Zq);DAo=r(Net,"LongformerForSequenceClassification"),Net.forEach(t),GAo=r(u0e," (Longformer model)"),u0e.forEach(t),OAo=i(L),B4=n(L,"LI",{});var b0e=s(B4);xle=n(b0e,"STRONG",{});var jet=s(xle);VAo=r(jet,"mbart"),jet.forEach(t),XAo=r(b0e," \u2014 "),eN=n(b0e,"A",{href:!0});var Det=s(eN);zAo=r(Det,"MBartForSequenceClassification"),Det.forEach(t),QAo=r(b0e," (mBART model)"),b0e.forEach(t),WAo=i(L),P4=n(L,"LI",{});var F0e=s(P4);kle=n(F0e,"STRONG",{});var Get=s(kle);HAo=r(Get,"megatron-bert"),Get.forEach(t),UAo=r(F0e," \u2014 "),oN=n(F0e,"A",{href:!0});var Oet=s(oN);JAo=r(Oet,"MegatronBertForSequenceClassification"),Oet.forEach(t),YAo=r(F0e," (MegatronBert model)"),F0e.forEach(t),KAo=i(L),$4=n(L,"LI",{});var v0e=s($4);Sle=n(v0e,"STRONG",{});var Vet=s(Sle);ZAo=r(Vet,"mobilebert"),Vet.forEach(t),e0o=r(v0e," \u2014 "),rN=n(v0e,"A",{href:!0});var Xet=s(rN);o0o=r(Xet,"MobileBertForSequenceClassification"),Xet.forEach(t),r0o=r(v0e," (MobileBERT model)"),v0e.forEach(t),t0o=i(L),I4=n(L,"LI",{});var T0e=s(I4);Rle=n(T0e,"STRONG",{});var zet=s(Rle);a0o=r(zet,"mpnet"),zet.forEach(t),n0o=r(T0e," \u2014 "),tN=n(T0e,"A",{href:!0});var Qet=s(tN);s0o=r(Qet,"MPNetForSequenceClassification"),Qet.forEach(t),l0o=r(T0e," (MPNet model)"),T0e.forEach(t),i0o=i(L),q4=n(L,"LI",{});var M0e=s(q4);Ble=n(M0e,"STRONG",{});var Wet=s(Ble);d0o=r(Wet,"nystromformer"),Wet.forEach(t),c0o=r(M0e," \u2014 "),aN=n(M0e,"A",{href:!0});var Het=s(aN);f0o=r(Het,"NystromformerForSequenceClassification"),Het.forEach(t),m0o=r(M0e," (Nystromformer model)"),M0e.forEach(t),g0o=i(L),N4=n(L,"LI",{});var E0e=s(N4);Ple=n(E0e,"STRONG",{});var Uet=s(Ple);h0o=r(Uet,"openai-gpt"),Uet.forEach(t),p0o=r(E0e," \u2014 "),nN=n(E0e,"A",{href:!0});var Jet=s(nN);_0o=r(Jet,"OpenAIGPTForSequenceClassification"),Jet.forEach(t),u0o=r(E0e," (OpenAI GPT model)"),E0e.forEach(t),b0o=i(L),j4=n(L,"LI",{});var C0e=s(j4);$le=n(C0e,"STRONG",{});var Yet=s($le);F0o=r(Yet,"perceiver"),Yet.forEach(t),v0o=r(C0e," \u2014 "),sN=n(C0e,"A",{href:!0});var Ket=s(sN);T0o=r(Ket,"PerceiverForSequenceClassification"),Ket.forEach(t),M0o=r(C0e," (Perceiver model)"),C0e.forEach(t),E0o=i(L),D4=n(L,"LI",{});var w0e=s(D4);Ile=n(w0e,"STRONG",{});var Zet=s(Ile);C0o=r(Zet,"plbart"),Zet.forEach(t),w0o=r(w0e," \u2014 "),lN=n(w0e,"A",{href:!0});var eot=s(lN);A0o=r(eot,"PLBartForSequenceClassification"),eot.forEach(t),y0o=r(w0e," (PLBart model)"),w0e.forEach(t),L0o=i(L),G4=n(L,"LI",{});var A0e=s(G4);qle=n(A0e,"STRONG",{});var oot=s(qle);x0o=r(oot,"qdqbert"),oot.forEach(t),k0o=r(A0e," \u2014 "),iN=n(A0e,"A",{href:!0});var rot=s(iN);S0o=r(rot,"QDQBertForSequenceClassification"),rot.forEach(t),R0o=r(A0e," (QDQBert model)"),A0e.forEach(t),B0o=i(L),O4=n(L,"LI",{});var y0e=s(O4);Nle=n(y0e,"STRONG",{});var tot=s(Nle);P0o=r(tot,"reformer"),tot.forEach(t),$0o=r(y0e," \u2014 "),dN=n(y0e,"A",{href:!0});var aot=s(dN);I0o=r(aot,"ReformerForSequenceClassification"),aot.forEach(t),q0o=r(y0e," (Reformer model)"),y0e.forEach(t),N0o=i(L),V4=n(L,"LI",{});var L0e=s(V4);jle=n(L0e,"STRONG",{});var not=s(jle);j0o=r(not,"rembert"),not.forEach(t),D0o=r(L0e," \u2014 "),cN=n(L0e,"A",{href:!0});var sot=s(cN);G0o=r(sot,"RemBertForSequenceClassification"),sot.forEach(t),O0o=r(L0e," (RemBERT model)"),L0e.forEach(t),V0o=i(L),X4=n(L,"LI",{});var x0e=s(X4);Dle=n(x0e,"STRONG",{});var lot=s(Dle);X0o=r(lot,"roberta"),lot.forEach(t),z0o=r(x0e," \u2014 "),fN=n(x0e,"A",{href:!0});var iot=s(fN);Q0o=r(iot,"RobertaForSequenceClassification"),iot.forEach(t),W0o=r(x0e," (RoBERTa model)"),x0e.forEach(t),H0o=i(L),z4=n(L,"LI",{});var k0e=s(z4);Gle=n(k0e,"STRONG",{});var dot=s(Gle);U0o=r(dot,"roformer"),dot.forEach(t),J0o=r(k0e," \u2014 "),mN=n(k0e,"A",{href:!0});var cot=s(mN);Y0o=r(cot,"RoFormerForSequenceClassification"),cot.forEach(t),K0o=r(k0e," (RoFormer model)"),k0e.forEach(t),Z0o=i(L),Q4=n(L,"LI",{});var S0e=s(Q4);Ole=n(S0e,"STRONG",{});var fot=s(Ole);eyo=r(fot,"squeezebert"),fot.forEach(t),oyo=r(S0e," \u2014 "),gN=n(S0e,"A",{href:!0});var mot=s(gN);ryo=r(mot,"SqueezeBertForSequenceClassification"),mot.forEach(t),tyo=r(S0e," (SqueezeBERT model)"),S0e.forEach(t),ayo=i(L),W4=n(L,"LI",{});var R0e=s(W4);Vle=n(R0e,"STRONG",{});var got=s(Vle);nyo=r(got,"tapas"),got.forEach(t),syo=r(R0e," \u2014 "),hN=n(R0e,"A",{href:!0});var hot=s(hN);lyo=r(hot,"TapasForSequenceClassification"),hot.forEach(t),iyo=r(R0e," (TAPAS model)"),R0e.forEach(t),dyo=i(L),H4=n(L,"LI",{});var B0e=s(H4);Xle=n(B0e,"STRONG",{});var pot=s(Xle);cyo=r(pot,"tapex"),pot.forEach(t),fyo=r(B0e," \u2014 "),pN=n(B0e,"A",{href:!0});var _ot=s(pN);myo=r(_ot,"BartForSequenceClassification"),_ot.forEach(t),gyo=r(B0e," (TAPEX model)"),B0e.forEach(t),hyo=i(L),U4=n(L,"LI",{});var P0e=s(U4);zle=n(P0e,"STRONG",{});var uot=s(zle);pyo=r(uot,"transfo-xl"),uot.forEach(t),_yo=r(P0e," \u2014 "),_N=n(P0e,"A",{href:!0});var bot=s(_N);uyo=r(bot,"TransfoXLForSequenceClassification"),bot.forEach(t),byo=r(P0e," (Transformer-XL model)"),P0e.forEach(t),Fyo=i(L),J4=n(L,"LI",{});var $0e=s(J4);Qle=n($0e,"STRONG",{});var Fot=s(Qle);vyo=r(Fot,"xlm"),Fot.forEach(t),Tyo=r($0e," \u2014 "),uN=n($0e,"A",{href:!0});var vot=s(uN);Myo=r(vot,"XLMForSequenceClassification"),vot.forEach(t),Eyo=r($0e," (XLM model)"),$0e.forEach(t),Cyo=i(L),Y4=n(L,"LI",{});var I0e=s(Y4);Wle=n(I0e,"STRONG",{});var Tot=s(Wle);wyo=r(Tot,"xlm-roberta"),Tot.forEach(t),Ayo=r(I0e," \u2014 "),bN=n(I0e,"A",{href:!0});var Mot=s(bN);yyo=r(Mot,"XLMRobertaForSequenceClassification"),Mot.forEach(t),Lyo=r(I0e," (XLM-RoBERTa model)"),I0e.forEach(t),xyo=i(L),K4=n(L,"LI",{});var q0e=s(K4);Hle=n(q0e,"STRONG",{});var Eot=s(Hle);kyo=r(Eot,"xlm-roberta-xl"),Eot.forEach(t),Syo=r(q0e," \u2014 "),FN=n(q0e,"A",{href:!0});var Cot=s(FN);Ryo=r(Cot,"XLMRobertaXLForSequenceClassification"),Cot.forEach(t),Byo=r(q0e," (XLM-RoBERTa-XL model)"),q0e.forEach(t),Pyo=i(L),Z4=n(L,"LI",{});var N0e=s(Z4);Ule=n(N0e,"STRONG",{});var wot=s(Ule);$yo=r(wot,"xlnet"),wot.forEach(t),Iyo=r(N0e," \u2014 "),vN=n(N0e,"A",{href:!0});var Aot=s(vN);qyo=r(Aot,"XLNetForSequenceClassification"),Aot.forEach(t),Nyo=r(N0e," (XLNet model)"),N0e.forEach(t),jyo=i(L),eb=n(L,"LI",{});var j0e=s(eb);Jle=n(j0e,"STRONG",{});var yot=s(Jle);Dyo=r(yot,"yoso"),yot.forEach(t),Gyo=r(j0e," \u2014 "),TN=n(j0e,"A",{href:!0});var Lot=s(TN);Oyo=r(Lot,"YosoForSequenceClassification"),Lot.forEach(t),Vyo=r(j0e," (YOSO model)"),j0e.forEach(t),L.forEach(t),Xyo=i(zt),ob=n(zt,"P",{});var D0e=s(ob);zyo=r(D0e,"The model is set in evaluation mode by default using "),Yle=n(D0e,"CODE",{});var xot=s(Yle);Qyo=r(xot,"model.eval()"),xot.forEach(t),Wyo=r(D0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kle=n(D0e,"CODE",{});var kot=s(Kle);Hyo=r(kot,"model.train()"),kot.forEach(t),D0e.forEach(t),Uyo=i(zt),Zle=n(zt,"P",{});var Sot=s(Zle);Jyo=r(Sot,"Examples:"),Sot.forEach(t),Yyo=i(zt),m(Qw.$$.fragment,zt),zt.forEach(t),rl.forEach(t),HRe=i(c),hd=n(c,"H2",{class:!0});var t$e=s(hd);rb=n(t$e,"A",{id:!0,class:!0,href:!0});var Rot=s(rb);eie=n(Rot,"SPAN",{});var Bot=s(eie);m(Ww.$$.fragment,Bot),Bot.forEach(t),Rot.forEach(t),Kyo=i(t$e),oie=n(t$e,"SPAN",{});var Pot=s(oie);Zyo=r(Pot,"AutoModelForMultipleChoice"),Pot.forEach(t),t$e.forEach(t),URe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(Hw.$$.fragment,al),eLo=i(al),pd=n(al,"P",{});var yU=s(pd);oLo=r(yU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MN=n(yU,"A",{href:!0});var $ot=s(MN);rLo=r($ot,"from_pretrained()"),$ot.forEach(t),tLo=r(yU," class method or the "),EN=n(yU,"A",{href:!0});var Iot=s(EN);aLo=r(Iot,"from_config()"),Iot.forEach(t),nLo=r(yU,` class
method.`),yU.forEach(t),sLo=i(al),Uw=n(al,"P",{});var a$e=s(Uw);lLo=r(a$e,"This class cannot be instantiated directly using "),rie=n(a$e,"CODE",{});var qot=s(rie);iLo=r(qot,"__init__()"),qot.forEach(t),dLo=r(a$e," (throws an error)."),a$e.forEach(t),cLo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(Jw.$$.fragment,nl),fLo=i(nl),tie=n(nl,"P",{});var Not=s(tie);mLo=r(Not,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Not.forEach(t),gLo=i(nl),_d=n(nl,"P",{});var LU=s(_d);hLo=r(LU,`Note:
Loading a model from its configuration file does `),aie=n(LU,"STRONG",{});var jot=s(aie);pLo=r(jot,"not"),jot.forEach(t),_Lo=r(LU,` load the model weights. It only affects the
model\u2019s configuration. Use `),CN=n(LU,"A",{href:!0});var Dot=s(CN);uLo=r(Dot,"from_pretrained()"),Dot.forEach(t),bLo=r(LU," to load the model weights."),LU.forEach(t),FLo=i(nl),nie=n(nl,"P",{});var Got=s(nie);vLo=r(Got,"Examples:"),Got.forEach(t),TLo=i(nl),m(Yw.$$.fragment,nl),nl.forEach(t),MLo=i(al),Ve=n(al,"DIV",{class:!0});var Qt=s(Ve);m(Kw.$$.fragment,Qt),ELo=i(Qt),sie=n(Qt,"P",{});var Oot=s(sie);CLo=r(Oot,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Oot.forEach(t),wLo=i(Qt),Ja=n(Qt,"P",{});var $E=s(Ja);ALo=r($E,"The model class to instantiate is selected based on the "),lie=n($E,"CODE",{});var Vot=s(lie);yLo=r(Vot,"model_type"),Vot.forEach(t),LLo=r($E,` property of the config object (either
passed as an argument or loaded from `),iie=n($E,"CODE",{});var Xot=s(iie);xLo=r(Xot,"pretrained_model_name_or_path"),Xot.forEach(t),kLo=r($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),die=n($E,"CODE",{});var zot=s(die);SLo=r(zot,"pretrained_model_name_or_path"),zot.forEach(t),RLo=r($E,":"),$E.forEach(t),BLo=i(Qt),G=n(Qt,"UL",{});var O=s(G);tb=n(O,"LI",{});var G0e=s(tb);cie=n(G0e,"STRONG",{});var Qot=s(cie);PLo=r(Qot,"albert"),Qot.forEach(t),$Lo=r(G0e," \u2014 "),wN=n(G0e,"A",{href:!0});var Wot=s(wN);ILo=r(Wot,"AlbertForMultipleChoice"),Wot.forEach(t),qLo=r(G0e," (ALBERT model)"),G0e.forEach(t),NLo=i(O),ab=n(O,"LI",{});var O0e=s(ab);fie=n(O0e,"STRONG",{});var Hot=s(fie);jLo=r(Hot,"bert"),Hot.forEach(t),DLo=r(O0e," \u2014 "),AN=n(O0e,"A",{href:!0});var Uot=s(AN);GLo=r(Uot,"BertForMultipleChoice"),Uot.forEach(t),OLo=r(O0e," (BERT model)"),O0e.forEach(t),VLo=i(O),nb=n(O,"LI",{});var V0e=s(nb);mie=n(V0e,"STRONG",{});var Jot=s(mie);XLo=r(Jot,"big_bird"),Jot.forEach(t),zLo=r(V0e," \u2014 "),yN=n(V0e,"A",{href:!0});var Yot=s(yN);QLo=r(Yot,"BigBirdForMultipleChoice"),Yot.forEach(t),WLo=r(V0e," (BigBird model)"),V0e.forEach(t),HLo=i(O),sb=n(O,"LI",{});var X0e=s(sb);gie=n(X0e,"STRONG",{});var Kot=s(gie);ULo=r(Kot,"camembert"),Kot.forEach(t),JLo=r(X0e," \u2014 "),LN=n(X0e,"A",{href:!0});var Zot=s(LN);YLo=r(Zot,"CamembertForMultipleChoice"),Zot.forEach(t),KLo=r(X0e," (CamemBERT model)"),X0e.forEach(t),ZLo=i(O),lb=n(O,"LI",{});var z0e=s(lb);hie=n(z0e,"STRONG",{});var ert=s(hie);e8o=r(ert,"canine"),ert.forEach(t),o8o=r(z0e," \u2014 "),xN=n(z0e,"A",{href:!0});var ort=s(xN);r8o=r(ort,"CanineForMultipleChoice"),ort.forEach(t),t8o=r(z0e," (Canine model)"),z0e.forEach(t),a8o=i(O),ib=n(O,"LI",{});var Q0e=s(ib);pie=n(Q0e,"STRONG",{});var rrt=s(pie);n8o=r(rrt,"convbert"),rrt.forEach(t),s8o=r(Q0e," \u2014 "),kN=n(Q0e,"A",{href:!0});var trt=s(kN);l8o=r(trt,"ConvBertForMultipleChoice"),trt.forEach(t),i8o=r(Q0e," (ConvBERT model)"),Q0e.forEach(t),d8o=i(O),db=n(O,"LI",{});var W0e=s(db);_ie=n(W0e,"STRONG",{});var art=s(_ie);c8o=r(art,"data2vec-text"),art.forEach(t),f8o=r(W0e," \u2014 "),SN=n(W0e,"A",{href:!0});var nrt=s(SN);m8o=r(nrt,"Data2VecTextForMultipleChoice"),nrt.forEach(t),g8o=r(W0e," (Data2VecText model)"),W0e.forEach(t),h8o=i(O),cb=n(O,"LI",{});var H0e=s(cb);uie=n(H0e,"STRONG",{});var srt=s(uie);p8o=r(srt,"distilbert"),srt.forEach(t),_8o=r(H0e," \u2014 "),RN=n(H0e,"A",{href:!0});var lrt=s(RN);u8o=r(lrt,"DistilBertForMultipleChoice"),lrt.forEach(t),b8o=r(H0e," (DistilBERT model)"),H0e.forEach(t),F8o=i(O),fb=n(O,"LI",{});var U0e=s(fb);bie=n(U0e,"STRONG",{});var irt=s(bie);v8o=r(irt,"electra"),irt.forEach(t),T8o=r(U0e," \u2014 "),BN=n(U0e,"A",{href:!0});var drt=s(BN);M8o=r(drt,"ElectraForMultipleChoice"),drt.forEach(t),E8o=r(U0e," (ELECTRA model)"),U0e.forEach(t),C8o=i(O),mb=n(O,"LI",{});var J0e=s(mb);Fie=n(J0e,"STRONG",{});var crt=s(Fie);w8o=r(crt,"flaubert"),crt.forEach(t),A8o=r(J0e," \u2014 "),PN=n(J0e,"A",{href:!0});var frt=s(PN);y8o=r(frt,"FlaubertForMultipleChoice"),frt.forEach(t),L8o=r(J0e," (FlauBERT model)"),J0e.forEach(t),x8o=i(O),gb=n(O,"LI",{});var Y0e=s(gb);vie=n(Y0e,"STRONG",{});var mrt=s(vie);k8o=r(mrt,"fnet"),mrt.forEach(t),S8o=r(Y0e," \u2014 "),$N=n(Y0e,"A",{href:!0});var grt=s($N);R8o=r(grt,"FNetForMultipleChoice"),grt.forEach(t),B8o=r(Y0e," (FNet model)"),Y0e.forEach(t),P8o=i(O),hb=n(O,"LI",{});var K0e=s(hb);Tie=n(K0e,"STRONG",{});var hrt=s(Tie);$8o=r(hrt,"funnel"),hrt.forEach(t),I8o=r(K0e," \u2014 "),IN=n(K0e,"A",{href:!0});var prt=s(IN);q8o=r(prt,"FunnelForMultipleChoice"),prt.forEach(t),N8o=r(K0e," (Funnel Transformer model)"),K0e.forEach(t),j8o=i(O),pb=n(O,"LI",{});var Z0e=s(pb);Mie=n(Z0e,"STRONG",{});var _rt=s(Mie);D8o=r(_rt,"ibert"),_rt.forEach(t),G8o=r(Z0e," \u2014 "),qN=n(Z0e,"A",{href:!0});var urt=s(qN);O8o=r(urt,"IBertForMultipleChoice"),urt.forEach(t),V8o=r(Z0e," (I-BERT model)"),Z0e.forEach(t),X8o=i(O),_b=n(O,"LI",{});var eye=s(_b);Eie=n(eye,"STRONG",{});var brt=s(Eie);z8o=r(brt,"longformer"),brt.forEach(t),Q8o=r(eye," \u2014 "),NN=n(eye,"A",{href:!0});var Frt=s(NN);W8o=r(Frt,"LongformerForMultipleChoice"),Frt.forEach(t),H8o=r(eye," (Longformer model)"),eye.forEach(t),U8o=i(O),ub=n(O,"LI",{});var oye=s(ub);Cie=n(oye,"STRONG",{});var vrt=s(Cie);J8o=r(vrt,"megatron-bert"),vrt.forEach(t),Y8o=r(oye," \u2014 "),jN=n(oye,"A",{href:!0});var Trt=s(jN);K8o=r(Trt,"MegatronBertForMultipleChoice"),Trt.forEach(t),Z8o=r(oye," (MegatronBert model)"),oye.forEach(t),e7o=i(O),bb=n(O,"LI",{});var rye=s(bb);wie=n(rye,"STRONG",{});var Mrt=s(wie);o7o=r(Mrt,"mobilebert"),Mrt.forEach(t),r7o=r(rye," \u2014 "),DN=n(rye,"A",{href:!0});var Ert=s(DN);t7o=r(Ert,"MobileBertForMultipleChoice"),Ert.forEach(t),a7o=r(rye," (MobileBERT model)"),rye.forEach(t),n7o=i(O),Fb=n(O,"LI",{});var tye=s(Fb);Aie=n(tye,"STRONG",{});var Crt=s(Aie);s7o=r(Crt,"mpnet"),Crt.forEach(t),l7o=r(tye," \u2014 "),GN=n(tye,"A",{href:!0});var wrt=s(GN);i7o=r(wrt,"MPNetForMultipleChoice"),wrt.forEach(t),d7o=r(tye," (MPNet model)"),tye.forEach(t),c7o=i(O),vb=n(O,"LI",{});var aye=s(vb);yie=n(aye,"STRONG",{});var Art=s(yie);f7o=r(Art,"nystromformer"),Art.forEach(t),m7o=r(aye," \u2014 "),ON=n(aye,"A",{href:!0});var yrt=s(ON);g7o=r(yrt,"NystromformerForMultipleChoice"),yrt.forEach(t),h7o=r(aye," (Nystromformer model)"),aye.forEach(t),p7o=i(O),Tb=n(O,"LI",{});var nye=s(Tb);Lie=n(nye,"STRONG",{});var Lrt=s(Lie);_7o=r(Lrt,"qdqbert"),Lrt.forEach(t),u7o=r(nye," \u2014 "),VN=n(nye,"A",{href:!0});var xrt=s(VN);b7o=r(xrt,"QDQBertForMultipleChoice"),xrt.forEach(t),F7o=r(nye," (QDQBert model)"),nye.forEach(t),v7o=i(O),Mb=n(O,"LI",{});var sye=s(Mb);xie=n(sye,"STRONG",{});var krt=s(xie);T7o=r(krt,"rembert"),krt.forEach(t),M7o=r(sye," \u2014 "),XN=n(sye,"A",{href:!0});var Srt=s(XN);E7o=r(Srt,"RemBertForMultipleChoice"),Srt.forEach(t),C7o=r(sye," (RemBERT model)"),sye.forEach(t),w7o=i(O),Eb=n(O,"LI",{});var lye=s(Eb);kie=n(lye,"STRONG",{});var Rrt=s(kie);A7o=r(Rrt,"roberta"),Rrt.forEach(t),y7o=r(lye," \u2014 "),zN=n(lye,"A",{href:!0});var Brt=s(zN);L7o=r(Brt,"RobertaForMultipleChoice"),Brt.forEach(t),x7o=r(lye," (RoBERTa model)"),lye.forEach(t),k7o=i(O),Cb=n(O,"LI",{});var iye=s(Cb);Sie=n(iye,"STRONG",{});var Prt=s(Sie);S7o=r(Prt,"roformer"),Prt.forEach(t),R7o=r(iye," \u2014 "),QN=n(iye,"A",{href:!0});var $rt=s(QN);B7o=r($rt,"RoFormerForMultipleChoice"),$rt.forEach(t),P7o=r(iye," (RoFormer model)"),iye.forEach(t),$7o=i(O),wb=n(O,"LI",{});var dye=s(wb);Rie=n(dye,"STRONG",{});var Irt=s(Rie);I7o=r(Irt,"squeezebert"),Irt.forEach(t),q7o=r(dye," \u2014 "),WN=n(dye,"A",{href:!0});var qrt=s(WN);N7o=r(qrt,"SqueezeBertForMultipleChoice"),qrt.forEach(t),j7o=r(dye," (SqueezeBERT model)"),dye.forEach(t),D7o=i(O),Ab=n(O,"LI",{});var cye=s(Ab);Bie=n(cye,"STRONG",{});var Nrt=s(Bie);G7o=r(Nrt,"xlm"),Nrt.forEach(t),O7o=r(cye," \u2014 "),HN=n(cye,"A",{href:!0});var jrt=s(HN);V7o=r(jrt,"XLMForMultipleChoice"),jrt.forEach(t),X7o=r(cye," (XLM model)"),cye.forEach(t),z7o=i(O),yb=n(O,"LI",{});var fye=s(yb);Pie=n(fye,"STRONG",{});var Drt=s(Pie);Q7o=r(Drt,"xlm-roberta"),Drt.forEach(t),W7o=r(fye," \u2014 "),UN=n(fye,"A",{href:!0});var Grt=s(UN);H7o=r(Grt,"XLMRobertaForMultipleChoice"),Grt.forEach(t),U7o=r(fye," (XLM-RoBERTa model)"),fye.forEach(t),J7o=i(O),Lb=n(O,"LI",{});var mye=s(Lb);$ie=n(mye,"STRONG",{});var Ort=s($ie);Y7o=r(Ort,"xlm-roberta-xl"),Ort.forEach(t),K7o=r(mye," \u2014 "),JN=n(mye,"A",{href:!0});var Vrt=s(JN);Z7o=r(Vrt,"XLMRobertaXLForMultipleChoice"),Vrt.forEach(t),e9o=r(mye," (XLM-RoBERTa-XL model)"),mye.forEach(t),o9o=i(O),xb=n(O,"LI",{});var gye=s(xb);Iie=n(gye,"STRONG",{});var Xrt=s(Iie);r9o=r(Xrt,"xlnet"),Xrt.forEach(t),t9o=r(gye," \u2014 "),YN=n(gye,"A",{href:!0});var zrt=s(YN);a9o=r(zrt,"XLNetForMultipleChoice"),zrt.forEach(t),n9o=r(gye," (XLNet model)"),gye.forEach(t),s9o=i(O),kb=n(O,"LI",{});var hye=s(kb);qie=n(hye,"STRONG",{});var Qrt=s(qie);l9o=r(Qrt,"yoso"),Qrt.forEach(t),i9o=r(hye," \u2014 "),KN=n(hye,"A",{href:!0});var Wrt=s(KN);d9o=r(Wrt,"YosoForMultipleChoice"),Wrt.forEach(t),c9o=r(hye," (YOSO model)"),hye.forEach(t),O.forEach(t),f9o=i(Qt),Sb=n(Qt,"P",{});var pye=s(Sb);m9o=r(pye,"The model is set in evaluation mode by default using "),Nie=n(pye,"CODE",{});var Hrt=s(Nie);g9o=r(Hrt,"model.eval()"),Hrt.forEach(t),h9o=r(pye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=n(pye,"CODE",{});var Urt=s(jie);p9o=r(Urt,"model.train()"),Urt.forEach(t),pye.forEach(t),_9o=i(Qt),Die=n(Qt,"P",{});var Jrt=s(Die);u9o=r(Jrt,"Examples:"),Jrt.forEach(t),b9o=i(Qt),m(Zw.$$.fragment,Qt),Qt.forEach(t),al.forEach(t),JRe=i(c),ud=n(c,"H2",{class:!0});var n$e=s(ud);Rb=n(n$e,"A",{id:!0,class:!0,href:!0});var Yrt=s(Rb);Gie=n(Yrt,"SPAN",{});var Krt=s(Gie);m(eA.$$.fragment,Krt),Krt.forEach(t),Yrt.forEach(t),F9o=i(n$e),Oie=n(n$e,"SPAN",{});var Zrt=s(Oie);v9o=r(Zrt,"AutoModelForNextSentencePrediction"),Zrt.forEach(t),n$e.forEach(t),YRe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(oA.$$.fragment,sl),T9o=i(sl),bd=n(sl,"P",{});var xU=s(bd);M9o=r(xU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ZN=n(xU,"A",{href:!0});var ett=s(ZN);E9o=r(ett,"from_pretrained()"),ett.forEach(t),C9o=r(xU," class method or the "),ej=n(xU,"A",{href:!0});var ott=s(ej);w9o=r(ott,"from_config()"),ott.forEach(t),A9o=r(xU,` class
method.`),xU.forEach(t),y9o=i(sl),rA=n(sl,"P",{});var s$e=s(rA);L9o=r(s$e,"This class cannot be instantiated directly using "),Vie=n(s$e,"CODE",{});var rtt=s(Vie);x9o=r(rtt,"__init__()"),rtt.forEach(t),k9o=r(s$e," (throws an error)."),s$e.forEach(t),S9o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(tA.$$.fragment,ll),R9o=i(ll),Xie=n(ll,"P",{});var ttt=s(Xie);B9o=r(ttt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ttt.forEach(t),P9o=i(ll),Fd=n(ll,"P",{});var kU=s(Fd);$9o=r(kU,`Note:
Loading a model from its configuration file does `),zie=n(kU,"STRONG",{});var att=s(zie);I9o=r(att,"not"),att.forEach(t),q9o=r(kU,` load the model weights. It only affects the
model\u2019s configuration. Use `),oj=n(kU,"A",{href:!0});var ntt=s(oj);N9o=r(ntt,"from_pretrained()"),ntt.forEach(t),j9o=r(kU," to load the model weights."),kU.forEach(t),D9o=i(ll),Qie=n(ll,"P",{});var stt=s(Qie);G9o=r(stt,"Examples:"),stt.forEach(t),O9o=i(ll),m(aA.$$.fragment,ll),ll.forEach(t),V9o=i(sl),Xe=n(sl,"DIV",{class:!0});var Wt=s(Xe);m(nA.$$.fragment,Wt),X9o=i(Wt),Wie=n(Wt,"P",{});var ltt=s(Wie);z9o=r(ltt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ltt.forEach(t),Q9o=i(Wt),Ya=n(Wt,"P",{});var IE=s(Ya);W9o=r(IE,"The model class to instantiate is selected based on the "),Hie=n(IE,"CODE",{});var itt=s(Hie);H9o=r(itt,"model_type"),itt.forEach(t),U9o=r(IE,` property of the config object (either
passed as an argument or loaded from `),Uie=n(IE,"CODE",{});var dtt=s(Uie);J9o=r(dtt,"pretrained_model_name_or_path"),dtt.forEach(t),Y9o=r(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=n(IE,"CODE",{});var ctt=s(Jie);K9o=r(ctt,"pretrained_model_name_or_path"),ctt.forEach(t),Z9o=r(IE,":"),IE.forEach(t),exo=i(Wt),da=n(Wt,"UL",{});var il=s(da);Bb=n(il,"LI",{});var _ye=s(Bb);Yie=n(_ye,"STRONG",{});var ftt=s(Yie);oxo=r(ftt,"bert"),ftt.forEach(t),rxo=r(_ye," \u2014 "),rj=n(_ye,"A",{href:!0});var mtt=s(rj);txo=r(mtt,"BertForNextSentencePrediction"),mtt.forEach(t),axo=r(_ye," (BERT model)"),_ye.forEach(t),nxo=i(il),Pb=n(il,"LI",{});var uye=s(Pb);Kie=n(uye,"STRONG",{});var gtt=s(Kie);sxo=r(gtt,"fnet"),gtt.forEach(t),lxo=r(uye," \u2014 "),tj=n(uye,"A",{href:!0});var htt=s(tj);ixo=r(htt,"FNetForNextSentencePrediction"),htt.forEach(t),dxo=r(uye," (FNet model)"),uye.forEach(t),cxo=i(il),$b=n(il,"LI",{});var bye=s($b);Zie=n(bye,"STRONG",{});var ptt=s(Zie);fxo=r(ptt,"megatron-bert"),ptt.forEach(t),mxo=r(bye," \u2014 "),aj=n(bye,"A",{href:!0});var _tt=s(aj);gxo=r(_tt,"MegatronBertForNextSentencePrediction"),_tt.forEach(t),hxo=r(bye," (MegatronBert model)"),bye.forEach(t),pxo=i(il),Ib=n(il,"LI",{});var Fye=s(Ib);ede=n(Fye,"STRONG",{});var utt=s(ede);_xo=r(utt,"mobilebert"),utt.forEach(t),uxo=r(Fye," \u2014 "),nj=n(Fye,"A",{href:!0});var btt=s(nj);bxo=r(btt,"MobileBertForNextSentencePrediction"),btt.forEach(t),Fxo=r(Fye," (MobileBERT model)"),Fye.forEach(t),vxo=i(il),qb=n(il,"LI",{});var vye=s(qb);ode=n(vye,"STRONG",{});var Ftt=s(ode);Txo=r(Ftt,"qdqbert"),Ftt.forEach(t),Mxo=r(vye," \u2014 "),sj=n(vye,"A",{href:!0});var vtt=s(sj);Exo=r(vtt,"QDQBertForNextSentencePrediction"),vtt.forEach(t),Cxo=r(vye," (QDQBert model)"),vye.forEach(t),il.forEach(t),wxo=i(Wt),Nb=n(Wt,"P",{});var Tye=s(Nb);Axo=r(Tye,"The model is set in evaluation mode by default using "),rde=n(Tye,"CODE",{});var Ttt=s(rde);yxo=r(Ttt,"model.eval()"),Ttt.forEach(t),Lxo=r(Tye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tde=n(Tye,"CODE",{});var Mtt=s(tde);xxo=r(Mtt,"model.train()"),Mtt.forEach(t),Tye.forEach(t),kxo=i(Wt),ade=n(Wt,"P",{});var Ett=s(ade);Sxo=r(Ett,"Examples:"),Ett.forEach(t),Rxo=i(Wt),m(sA.$$.fragment,Wt),Wt.forEach(t),sl.forEach(t),KRe=i(c),vd=n(c,"H2",{class:!0});var l$e=s(vd);jb=n(l$e,"A",{id:!0,class:!0,href:!0});var Ctt=s(jb);nde=n(Ctt,"SPAN",{});var wtt=s(nde);m(lA.$$.fragment,wtt),wtt.forEach(t),Ctt.forEach(t),Bxo=i(l$e),sde=n(l$e,"SPAN",{});var Att=s(sde);Pxo=r(Att,"AutoModelForTokenClassification"),Att.forEach(t),l$e.forEach(t),ZRe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(iA.$$.fragment,dl),$xo=i(dl),Td=n(dl,"P",{});var SU=s(Td);Ixo=r(SU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lj=n(SU,"A",{href:!0});var ytt=s(lj);qxo=r(ytt,"from_pretrained()"),ytt.forEach(t),Nxo=r(SU," class method or the "),ij=n(SU,"A",{href:!0});var Ltt=s(ij);jxo=r(Ltt,"from_config()"),Ltt.forEach(t),Dxo=r(SU,` class
method.`),SU.forEach(t),Gxo=i(dl),dA=n(dl,"P",{});var i$e=s(dA);Oxo=r(i$e,"This class cannot be instantiated directly using "),lde=n(i$e,"CODE",{});var xtt=s(lde);Vxo=r(xtt,"__init__()"),xtt.forEach(t),Xxo=r(i$e," (throws an error)."),i$e.forEach(t),zxo=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(cA.$$.fragment,cl),Qxo=i(cl),ide=n(cl,"P",{});var ktt=s(ide);Wxo=r(ktt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ktt.forEach(t),Hxo=i(cl),Md=n(cl,"P",{});var RU=s(Md);Uxo=r(RU,`Note:
Loading a model from its configuration file does `),dde=n(RU,"STRONG",{});var Stt=s(dde);Jxo=r(Stt,"not"),Stt.forEach(t),Yxo=r(RU,` load the model weights. It only affects the
model\u2019s configuration. Use `),dj=n(RU,"A",{href:!0});var Rtt=s(dj);Kxo=r(Rtt,"from_pretrained()"),Rtt.forEach(t),Zxo=r(RU," to load the model weights."),RU.forEach(t),eko=i(cl),cde=n(cl,"P",{});var Btt=s(cde);oko=r(Btt,"Examples:"),Btt.forEach(t),rko=i(cl),m(fA.$$.fragment,cl),cl.forEach(t),tko=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(mA.$$.fragment,Ht),ako=i(Ht),fde=n(Ht,"P",{});var Ptt=s(fde);nko=r(Ptt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ptt.forEach(t),sko=i(Ht),Ka=n(Ht,"P",{});var qE=s(Ka);lko=r(qE,"The model class to instantiate is selected based on the "),mde=n(qE,"CODE",{});var $tt=s(mde);iko=r($tt,"model_type"),$tt.forEach(t),dko=r(qE,` property of the config object (either
passed as an argument or loaded from `),gde=n(qE,"CODE",{});var Itt=s(gde);cko=r(Itt,"pretrained_model_name_or_path"),Itt.forEach(t),fko=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hde=n(qE,"CODE",{});var qtt=s(hde);mko=r(qtt,"pretrained_model_name_or_path"),qtt.forEach(t),gko=r(qE,":"),qE.forEach(t),hko=i(Ht),j=n(Ht,"UL",{});var D=s(j);Db=n(D,"LI",{});var Mye=s(Db);pde=n(Mye,"STRONG",{});var Ntt=s(pde);pko=r(Ntt,"albert"),Ntt.forEach(t),_ko=r(Mye," \u2014 "),cj=n(Mye,"A",{href:!0});var jtt=s(cj);uko=r(jtt,"AlbertForTokenClassification"),jtt.forEach(t),bko=r(Mye," (ALBERT model)"),Mye.forEach(t),Fko=i(D),Gb=n(D,"LI",{});var Eye=s(Gb);_de=n(Eye,"STRONG",{});var Dtt=s(_de);vko=r(Dtt,"bert"),Dtt.forEach(t),Tko=r(Eye," \u2014 "),fj=n(Eye,"A",{href:!0});var Gtt=s(fj);Mko=r(Gtt,"BertForTokenClassification"),Gtt.forEach(t),Eko=r(Eye," (BERT model)"),Eye.forEach(t),Cko=i(D),Ob=n(D,"LI",{});var Cye=s(Ob);ude=n(Cye,"STRONG",{});var Ott=s(ude);wko=r(Ott,"big_bird"),Ott.forEach(t),Ako=r(Cye," \u2014 "),mj=n(Cye,"A",{href:!0});var Vtt=s(mj);yko=r(Vtt,"BigBirdForTokenClassification"),Vtt.forEach(t),Lko=r(Cye," (BigBird model)"),Cye.forEach(t),xko=i(D),Vb=n(D,"LI",{});var wye=s(Vb);bde=n(wye,"STRONG",{});var Xtt=s(bde);kko=r(Xtt,"camembert"),Xtt.forEach(t),Sko=r(wye," \u2014 "),gj=n(wye,"A",{href:!0});var ztt=s(gj);Rko=r(ztt,"CamembertForTokenClassification"),ztt.forEach(t),Bko=r(wye," (CamemBERT model)"),wye.forEach(t),Pko=i(D),Xb=n(D,"LI",{});var Aye=s(Xb);Fde=n(Aye,"STRONG",{});var Qtt=s(Fde);$ko=r(Qtt,"canine"),Qtt.forEach(t),Iko=r(Aye," \u2014 "),hj=n(Aye,"A",{href:!0});var Wtt=s(hj);qko=r(Wtt,"CanineForTokenClassification"),Wtt.forEach(t),Nko=r(Aye," (Canine model)"),Aye.forEach(t),jko=i(D),zb=n(D,"LI",{});var yye=s(zb);vde=n(yye,"STRONG",{});var Htt=s(vde);Dko=r(Htt,"convbert"),Htt.forEach(t),Gko=r(yye," \u2014 "),pj=n(yye,"A",{href:!0});var Utt=s(pj);Oko=r(Utt,"ConvBertForTokenClassification"),Utt.forEach(t),Vko=r(yye," (ConvBERT model)"),yye.forEach(t),Xko=i(D),Qb=n(D,"LI",{});var Lye=s(Qb);Tde=n(Lye,"STRONG",{});var Jtt=s(Tde);zko=r(Jtt,"data2vec-text"),Jtt.forEach(t),Qko=r(Lye," \u2014 "),_j=n(Lye,"A",{href:!0});var Ytt=s(_j);Wko=r(Ytt,"Data2VecTextForTokenClassification"),Ytt.forEach(t),Hko=r(Lye," (Data2VecText model)"),Lye.forEach(t),Uko=i(D),Wb=n(D,"LI",{});var xye=s(Wb);Mde=n(xye,"STRONG",{});var Ktt=s(Mde);Jko=r(Ktt,"deberta"),Ktt.forEach(t),Yko=r(xye," \u2014 "),uj=n(xye,"A",{href:!0});var Ztt=s(uj);Kko=r(Ztt,"DebertaForTokenClassification"),Ztt.forEach(t),Zko=r(xye," (DeBERTa model)"),xye.forEach(t),eSo=i(D),Hb=n(D,"LI",{});var kye=s(Hb);Ede=n(kye,"STRONG",{});var eat=s(Ede);oSo=r(eat,"deberta-v2"),eat.forEach(t),rSo=r(kye," \u2014 "),bj=n(kye,"A",{href:!0});var oat=s(bj);tSo=r(oat,"DebertaV2ForTokenClassification"),oat.forEach(t),aSo=r(kye," (DeBERTa-v2 model)"),kye.forEach(t),nSo=i(D),Ub=n(D,"LI",{});var Sye=s(Ub);Cde=n(Sye,"STRONG",{});var rat=s(Cde);sSo=r(rat,"distilbert"),rat.forEach(t),lSo=r(Sye," \u2014 "),Fj=n(Sye,"A",{href:!0});var tat=s(Fj);iSo=r(tat,"DistilBertForTokenClassification"),tat.forEach(t),dSo=r(Sye," (DistilBERT model)"),Sye.forEach(t),cSo=i(D),Jb=n(D,"LI",{});var Rye=s(Jb);wde=n(Rye,"STRONG",{});var aat=s(wde);fSo=r(aat,"electra"),aat.forEach(t),mSo=r(Rye," \u2014 "),vj=n(Rye,"A",{href:!0});var nat=s(vj);gSo=r(nat,"ElectraForTokenClassification"),nat.forEach(t),hSo=r(Rye," (ELECTRA model)"),Rye.forEach(t),pSo=i(D),Yb=n(D,"LI",{});var Bye=s(Yb);Ade=n(Bye,"STRONG",{});var sat=s(Ade);_So=r(sat,"flaubert"),sat.forEach(t),uSo=r(Bye," \u2014 "),Tj=n(Bye,"A",{href:!0});var lat=s(Tj);bSo=r(lat,"FlaubertForTokenClassification"),lat.forEach(t),FSo=r(Bye," (FlauBERT model)"),Bye.forEach(t),vSo=i(D),Kb=n(D,"LI",{});var Pye=s(Kb);yde=n(Pye,"STRONG",{});var iat=s(yde);TSo=r(iat,"fnet"),iat.forEach(t),MSo=r(Pye," \u2014 "),Mj=n(Pye,"A",{href:!0});var dat=s(Mj);ESo=r(dat,"FNetForTokenClassification"),dat.forEach(t),CSo=r(Pye," (FNet model)"),Pye.forEach(t),wSo=i(D),Zb=n(D,"LI",{});var $ye=s(Zb);Lde=n($ye,"STRONG",{});var cat=s(Lde);ASo=r(cat,"funnel"),cat.forEach(t),ySo=r($ye," \u2014 "),Ej=n($ye,"A",{href:!0});var fat=s(Ej);LSo=r(fat,"FunnelForTokenClassification"),fat.forEach(t),xSo=r($ye," (Funnel Transformer model)"),$ye.forEach(t),kSo=i(D),e5=n(D,"LI",{});var Iye=s(e5);xde=n(Iye,"STRONG",{});var mat=s(xde);SSo=r(mat,"gpt2"),mat.forEach(t),RSo=r(Iye," \u2014 "),Cj=n(Iye,"A",{href:!0});var gat=s(Cj);BSo=r(gat,"GPT2ForTokenClassification"),gat.forEach(t),PSo=r(Iye," (OpenAI GPT-2 model)"),Iye.forEach(t),$So=i(D),o5=n(D,"LI",{});var qye=s(o5);kde=n(qye,"STRONG",{});var hat=s(kde);ISo=r(hat,"ibert"),hat.forEach(t),qSo=r(qye," \u2014 "),wj=n(qye,"A",{href:!0});var pat=s(wj);NSo=r(pat,"IBertForTokenClassification"),pat.forEach(t),jSo=r(qye," (I-BERT model)"),qye.forEach(t),DSo=i(D),r5=n(D,"LI",{});var Nye=s(r5);Sde=n(Nye,"STRONG",{});var _at=s(Sde);GSo=r(_at,"layoutlm"),_at.forEach(t),OSo=r(Nye," \u2014 "),Aj=n(Nye,"A",{href:!0});var uat=s(Aj);VSo=r(uat,"LayoutLMForTokenClassification"),uat.forEach(t),XSo=r(Nye," (LayoutLM model)"),Nye.forEach(t),zSo=i(D),t5=n(D,"LI",{});var jye=s(t5);Rde=n(jye,"STRONG",{});var bat=s(Rde);QSo=r(bat,"layoutlmv2"),bat.forEach(t),WSo=r(jye," \u2014 "),yj=n(jye,"A",{href:!0});var Fat=s(yj);HSo=r(Fat,"LayoutLMv2ForTokenClassification"),Fat.forEach(t),USo=r(jye," (LayoutLMv2 model)"),jye.forEach(t),JSo=i(D),a5=n(D,"LI",{});var Dye=s(a5);Bde=n(Dye,"STRONG",{});var vat=s(Bde);YSo=r(vat,"longformer"),vat.forEach(t),KSo=r(Dye," \u2014 "),Lj=n(Dye,"A",{href:!0});var Tat=s(Lj);ZSo=r(Tat,"LongformerForTokenClassification"),Tat.forEach(t),eRo=r(Dye," (Longformer model)"),Dye.forEach(t),oRo=i(D),n5=n(D,"LI",{});var Gye=s(n5);Pde=n(Gye,"STRONG",{});var Mat=s(Pde);rRo=r(Mat,"megatron-bert"),Mat.forEach(t),tRo=r(Gye," \u2014 "),xj=n(Gye,"A",{href:!0});var Eat=s(xj);aRo=r(Eat,"MegatronBertForTokenClassification"),Eat.forEach(t),nRo=r(Gye," (MegatronBert model)"),Gye.forEach(t),sRo=i(D),s5=n(D,"LI",{});var Oye=s(s5);$de=n(Oye,"STRONG",{});var Cat=s($de);lRo=r(Cat,"mobilebert"),Cat.forEach(t),iRo=r(Oye," \u2014 "),kj=n(Oye,"A",{href:!0});var wat=s(kj);dRo=r(wat,"MobileBertForTokenClassification"),wat.forEach(t),cRo=r(Oye," (MobileBERT model)"),Oye.forEach(t),fRo=i(D),l5=n(D,"LI",{});var Vye=s(l5);Ide=n(Vye,"STRONG",{});var Aat=s(Ide);mRo=r(Aat,"mpnet"),Aat.forEach(t),gRo=r(Vye," \u2014 "),Sj=n(Vye,"A",{href:!0});var yat=s(Sj);hRo=r(yat,"MPNetForTokenClassification"),yat.forEach(t),pRo=r(Vye," (MPNet model)"),Vye.forEach(t),_Ro=i(D),i5=n(D,"LI",{});var Xye=s(i5);qde=n(Xye,"STRONG",{});var Lat=s(qde);uRo=r(Lat,"nystromformer"),Lat.forEach(t),bRo=r(Xye," \u2014 "),Rj=n(Xye,"A",{href:!0});var xat=s(Rj);FRo=r(xat,"NystromformerForTokenClassification"),xat.forEach(t),vRo=r(Xye," (Nystromformer model)"),Xye.forEach(t),TRo=i(D),d5=n(D,"LI",{});var zye=s(d5);Nde=n(zye,"STRONG",{});var kat=s(Nde);MRo=r(kat,"qdqbert"),kat.forEach(t),ERo=r(zye," \u2014 "),Bj=n(zye,"A",{href:!0});var Sat=s(Bj);CRo=r(Sat,"QDQBertForTokenClassification"),Sat.forEach(t),wRo=r(zye," (QDQBert model)"),zye.forEach(t),ARo=i(D),c5=n(D,"LI",{});var Qye=s(c5);jde=n(Qye,"STRONG",{});var Rat=s(jde);yRo=r(Rat,"rembert"),Rat.forEach(t),LRo=r(Qye," \u2014 "),Pj=n(Qye,"A",{href:!0});var Bat=s(Pj);xRo=r(Bat,"RemBertForTokenClassification"),Bat.forEach(t),kRo=r(Qye," (RemBERT model)"),Qye.forEach(t),SRo=i(D),f5=n(D,"LI",{});var Wye=s(f5);Dde=n(Wye,"STRONG",{});var Pat=s(Dde);RRo=r(Pat,"roberta"),Pat.forEach(t),BRo=r(Wye," \u2014 "),$j=n(Wye,"A",{href:!0});var $at=s($j);PRo=r($at,"RobertaForTokenClassification"),$at.forEach(t),$Ro=r(Wye," (RoBERTa model)"),Wye.forEach(t),IRo=i(D),m5=n(D,"LI",{});var Hye=s(m5);Gde=n(Hye,"STRONG",{});var Iat=s(Gde);qRo=r(Iat,"roformer"),Iat.forEach(t),NRo=r(Hye," \u2014 "),Ij=n(Hye,"A",{href:!0});var qat=s(Ij);jRo=r(qat,"RoFormerForTokenClassification"),qat.forEach(t),DRo=r(Hye," (RoFormer model)"),Hye.forEach(t),GRo=i(D),g5=n(D,"LI",{});var Uye=s(g5);Ode=n(Uye,"STRONG",{});var Nat=s(Ode);ORo=r(Nat,"squeezebert"),Nat.forEach(t),VRo=r(Uye," \u2014 "),qj=n(Uye,"A",{href:!0});var jat=s(qj);XRo=r(jat,"SqueezeBertForTokenClassification"),jat.forEach(t),zRo=r(Uye," (SqueezeBERT model)"),Uye.forEach(t),QRo=i(D),h5=n(D,"LI",{});var Jye=s(h5);Vde=n(Jye,"STRONG",{});var Dat=s(Vde);WRo=r(Dat,"xlm"),Dat.forEach(t),HRo=r(Jye," \u2014 "),Nj=n(Jye,"A",{href:!0});var Gat=s(Nj);URo=r(Gat,"XLMForTokenClassification"),Gat.forEach(t),JRo=r(Jye," (XLM model)"),Jye.forEach(t),YRo=i(D),p5=n(D,"LI",{});var Yye=s(p5);Xde=n(Yye,"STRONG",{});var Oat=s(Xde);KRo=r(Oat,"xlm-roberta"),Oat.forEach(t),ZRo=r(Yye," \u2014 "),jj=n(Yye,"A",{href:!0});var Vat=s(jj);eBo=r(Vat,"XLMRobertaForTokenClassification"),Vat.forEach(t),oBo=r(Yye," (XLM-RoBERTa model)"),Yye.forEach(t),rBo=i(D),_5=n(D,"LI",{});var Kye=s(_5);zde=n(Kye,"STRONG",{});var Xat=s(zde);tBo=r(Xat,"xlm-roberta-xl"),Xat.forEach(t),aBo=r(Kye," \u2014 "),Dj=n(Kye,"A",{href:!0});var zat=s(Dj);nBo=r(zat,"XLMRobertaXLForTokenClassification"),zat.forEach(t),sBo=r(Kye," (XLM-RoBERTa-XL model)"),Kye.forEach(t),lBo=i(D),u5=n(D,"LI",{});var Zye=s(u5);Qde=n(Zye,"STRONG",{});var Qat=s(Qde);iBo=r(Qat,"xlnet"),Qat.forEach(t),dBo=r(Zye," \u2014 "),Gj=n(Zye,"A",{href:!0});var Wat=s(Gj);cBo=r(Wat,"XLNetForTokenClassification"),Wat.forEach(t),fBo=r(Zye," (XLNet model)"),Zye.forEach(t),mBo=i(D),b5=n(D,"LI",{});var eLe=s(b5);Wde=n(eLe,"STRONG",{});var Hat=s(Wde);gBo=r(Hat,"yoso"),Hat.forEach(t),hBo=r(eLe," \u2014 "),Oj=n(eLe,"A",{href:!0});var Uat=s(Oj);pBo=r(Uat,"YosoForTokenClassification"),Uat.forEach(t),_Bo=r(eLe," (YOSO model)"),eLe.forEach(t),D.forEach(t),uBo=i(Ht),F5=n(Ht,"P",{});var oLe=s(F5);bBo=r(oLe,"The model is set in evaluation mode by default using "),Hde=n(oLe,"CODE",{});var Jat=s(Hde);FBo=r(Jat,"model.eval()"),Jat.forEach(t),vBo=r(oLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ude=n(oLe,"CODE",{});var Yat=s(Ude);TBo=r(Yat,"model.train()"),Yat.forEach(t),oLe.forEach(t),MBo=i(Ht),Jde=n(Ht,"P",{});var Kat=s(Jde);EBo=r(Kat,"Examples:"),Kat.forEach(t),CBo=i(Ht),m(gA.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),eBe=i(c),Ed=n(c,"H2",{class:!0});var d$e=s(Ed);v5=n(d$e,"A",{id:!0,class:!0,href:!0});var Zat=s(v5);Yde=n(Zat,"SPAN",{});var ent=s(Yde);m(hA.$$.fragment,ent),ent.forEach(t),Zat.forEach(t),wBo=i(d$e),Kde=n(d$e,"SPAN",{});var ont=s(Kde);ABo=r(ont,"AutoModelForQuestionAnswering"),ont.forEach(t),d$e.forEach(t),oBe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(pA.$$.fragment,fl),yBo=i(fl),Cd=n(fl,"P",{});var BU=s(Cd);LBo=r(BU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Vj=n(BU,"A",{href:!0});var rnt=s(Vj);xBo=r(rnt,"from_pretrained()"),rnt.forEach(t),kBo=r(BU," class method or the "),Xj=n(BU,"A",{href:!0});var tnt=s(Xj);SBo=r(tnt,"from_config()"),tnt.forEach(t),RBo=r(BU,` class
method.`),BU.forEach(t),BBo=i(fl),_A=n(fl,"P",{});var c$e=s(_A);PBo=r(c$e,"This class cannot be instantiated directly using "),Zde=n(c$e,"CODE",{});var ant=s(Zde);$Bo=r(ant,"__init__()"),ant.forEach(t),IBo=r(c$e," (throws an error)."),c$e.forEach(t),qBo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(uA.$$.fragment,ml),NBo=i(ml),ece=n(ml,"P",{});var nnt=s(ece);jBo=r(nnt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nnt.forEach(t),DBo=i(ml),wd=n(ml,"P",{});var PU=s(wd);GBo=r(PU,`Note:
Loading a model from its configuration file does `),oce=n(PU,"STRONG",{});var snt=s(oce);OBo=r(snt,"not"),snt.forEach(t),VBo=r(PU,` load the model weights. It only affects the
model\u2019s configuration. Use `),zj=n(PU,"A",{href:!0});var lnt=s(zj);XBo=r(lnt,"from_pretrained()"),lnt.forEach(t),zBo=r(PU," to load the model weights."),PU.forEach(t),QBo=i(ml),rce=n(ml,"P",{});var int=s(rce);WBo=r(int,"Examples:"),int.forEach(t),HBo=i(ml),m(bA.$$.fragment,ml),ml.forEach(t),UBo=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);m(FA.$$.fragment,Ut),JBo=i(Ut),tce=n(Ut,"P",{});var dnt=s(tce);YBo=r(dnt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),dnt.forEach(t),KBo=i(Ut),Za=n(Ut,"P",{});var NE=s(Za);ZBo=r(NE,"The model class to instantiate is selected based on the "),ace=n(NE,"CODE",{});var cnt=s(ace);ePo=r(cnt,"model_type"),cnt.forEach(t),oPo=r(NE,` property of the config object (either
passed as an argument or loaded from `),nce=n(NE,"CODE",{});var fnt=s(nce);rPo=r(fnt,"pretrained_model_name_or_path"),fnt.forEach(t),tPo=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=n(NE,"CODE",{});var mnt=s(sce);aPo=r(mnt,"pretrained_model_name_or_path"),mnt.forEach(t),nPo=r(NE,":"),NE.forEach(t),sPo=i(Ut),R=n(Ut,"UL",{});var P=s(R);T5=n(P,"LI",{});var rLe=s(T5);lce=n(rLe,"STRONG",{});var gnt=s(lce);lPo=r(gnt,"albert"),gnt.forEach(t),iPo=r(rLe," \u2014 "),Qj=n(rLe,"A",{href:!0});var hnt=s(Qj);dPo=r(hnt,"AlbertForQuestionAnswering"),hnt.forEach(t),cPo=r(rLe," (ALBERT model)"),rLe.forEach(t),fPo=i(P),M5=n(P,"LI",{});var tLe=s(M5);ice=n(tLe,"STRONG",{});var pnt=s(ice);mPo=r(pnt,"bart"),pnt.forEach(t),gPo=r(tLe," \u2014 "),Wj=n(tLe,"A",{href:!0});var _nt=s(Wj);hPo=r(_nt,"BartForQuestionAnswering"),_nt.forEach(t),pPo=r(tLe," (BART model)"),tLe.forEach(t),_Po=i(P),E5=n(P,"LI",{});var aLe=s(E5);dce=n(aLe,"STRONG",{});var unt=s(dce);uPo=r(unt,"bert"),unt.forEach(t),bPo=r(aLe," \u2014 "),Hj=n(aLe,"A",{href:!0});var bnt=s(Hj);FPo=r(bnt,"BertForQuestionAnswering"),bnt.forEach(t),vPo=r(aLe," (BERT model)"),aLe.forEach(t),TPo=i(P),C5=n(P,"LI",{});var nLe=s(C5);cce=n(nLe,"STRONG",{});var Fnt=s(cce);MPo=r(Fnt,"big_bird"),Fnt.forEach(t),EPo=r(nLe," \u2014 "),Uj=n(nLe,"A",{href:!0});var vnt=s(Uj);CPo=r(vnt,"BigBirdForQuestionAnswering"),vnt.forEach(t),wPo=r(nLe," (BigBird model)"),nLe.forEach(t),APo=i(P),w5=n(P,"LI",{});var sLe=s(w5);fce=n(sLe,"STRONG",{});var Tnt=s(fce);yPo=r(Tnt,"bigbird_pegasus"),Tnt.forEach(t),LPo=r(sLe," \u2014 "),Jj=n(sLe,"A",{href:!0});var Mnt=s(Jj);xPo=r(Mnt,"BigBirdPegasusForQuestionAnswering"),Mnt.forEach(t),kPo=r(sLe," (BigBirdPegasus model)"),sLe.forEach(t),SPo=i(P),A5=n(P,"LI",{});var lLe=s(A5);mce=n(lLe,"STRONG",{});var Ent=s(mce);RPo=r(Ent,"camembert"),Ent.forEach(t),BPo=r(lLe," \u2014 "),Yj=n(lLe,"A",{href:!0});var Cnt=s(Yj);PPo=r(Cnt,"CamembertForQuestionAnswering"),Cnt.forEach(t),$Po=r(lLe," (CamemBERT model)"),lLe.forEach(t),IPo=i(P),y5=n(P,"LI",{});var iLe=s(y5);gce=n(iLe,"STRONG",{});var wnt=s(gce);qPo=r(wnt,"canine"),wnt.forEach(t),NPo=r(iLe," \u2014 "),Kj=n(iLe,"A",{href:!0});var Ant=s(Kj);jPo=r(Ant,"CanineForQuestionAnswering"),Ant.forEach(t),DPo=r(iLe," (Canine model)"),iLe.forEach(t),GPo=i(P),L5=n(P,"LI",{});var dLe=s(L5);hce=n(dLe,"STRONG",{});var ynt=s(hce);OPo=r(ynt,"convbert"),ynt.forEach(t),VPo=r(dLe," \u2014 "),Zj=n(dLe,"A",{href:!0});var Lnt=s(Zj);XPo=r(Lnt,"ConvBertForQuestionAnswering"),Lnt.forEach(t),zPo=r(dLe," (ConvBERT model)"),dLe.forEach(t),QPo=i(P),x5=n(P,"LI",{});var cLe=s(x5);pce=n(cLe,"STRONG",{});var xnt=s(pce);WPo=r(xnt,"data2vec-text"),xnt.forEach(t),HPo=r(cLe," \u2014 "),eD=n(cLe,"A",{href:!0});var knt=s(eD);UPo=r(knt,"Data2VecTextForQuestionAnswering"),knt.forEach(t),JPo=r(cLe," (Data2VecText model)"),cLe.forEach(t),YPo=i(P),k5=n(P,"LI",{});var fLe=s(k5);_ce=n(fLe,"STRONG",{});var Snt=s(_ce);KPo=r(Snt,"deberta"),Snt.forEach(t),ZPo=r(fLe," \u2014 "),oD=n(fLe,"A",{href:!0});var Rnt=s(oD);e$o=r(Rnt,"DebertaForQuestionAnswering"),Rnt.forEach(t),o$o=r(fLe," (DeBERTa model)"),fLe.forEach(t),r$o=i(P),S5=n(P,"LI",{});var mLe=s(S5);uce=n(mLe,"STRONG",{});var Bnt=s(uce);t$o=r(Bnt,"deberta-v2"),Bnt.forEach(t),a$o=r(mLe," \u2014 "),rD=n(mLe,"A",{href:!0});var Pnt=s(rD);n$o=r(Pnt,"DebertaV2ForQuestionAnswering"),Pnt.forEach(t),s$o=r(mLe," (DeBERTa-v2 model)"),mLe.forEach(t),l$o=i(P),R5=n(P,"LI",{});var gLe=s(R5);bce=n(gLe,"STRONG",{});var $nt=s(bce);i$o=r($nt,"distilbert"),$nt.forEach(t),d$o=r(gLe," \u2014 "),tD=n(gLe,"A",{href:!0});var Int=s(tD);c$o=r(Int,"DistilBertForQuestionAnswering"),Int.forEach(t),f$o=r(gLe," (DistilBERT model)"),gLe.forEach(t),m$o=i(P),B5=n(P,"LI",{});var hLe=s(B5);Fce=n(hLe,"STRONG",{});var qnt=s(Fce);g$o=r(qnt,"electra"),qnt.forEach(t),h$o=r(hLe," \u2014 "),aD=n(hLe,"A",{href:!0});var Nnt=s(aD);p$o=r(Nnt,"ElectraForQuestionAnswering"),Nnt.forEach(t),_$o=r(hLe," (ELECTRA model)"),hLe.forEach(t),u$o=i(P),P5=n(P,"LI",{});var pLe=s(P5);vce=n(pLe,"STRONG",{});var jnt=s(vce);b$o=r(jnt,"flaubert"),jnt.forEach(t),F$o=r(pLe," \u2014 "),nD=n(pLe,"A",{href:!0});var Dnt=s(nD);v$o=r(Dnt,"FlaubertForQuestionAnsweringSimple"),Dnt.forEach(t),T$o=r(pLe," (FlauBERT model)"),pLe.forEach(t),M$o=i(P),$5=n(P,"LI",{});var _Le=s($5);Tce=n(_Le,"STRONG",{});var Gnt=s(Tce);E$o=r(Gnt,"fnet"),Gnt.forEach(t),C$o=r(_Le," \u2014 "),sD=n(_Le,"A",{href:!0});var Ont=s(sD);w$o=r(Ont,"FNetForQuestionAnswering"),Ont.forEach(t),A$o=r(_Le," (FNet model)"),_Le.forEach(t),y$o=i(P),I5=n(P,"LI",{});var uLe=s(I5);Mce=n(uLe,"STRONG",{});var Vnt=s(Mce);L$o=r(Vnt,"funnel"),Vnt.forEach(t),x$o=r(uLe," \u2014 "),lD=n(uLe,"A",{href:!0});var Xnt=s(lD);k$o=r(Xnt,"FunnelForQuestionAnswering"),Xnt.forEach(t),S$o=r(uLe," (Funnel Transformer model)"),uLe.forEach(t),R$o=i(P),q5=n(P,"LI",{});var bLe=s(q5);Ece=n(bLe,"STRONG",{});var znt=s(Ece);B$o=r(znt,"gptj"),znt.forEach(t),P$o=r(bLe," \u2014 "),iD=n(bLe,"A",{href:!0});var Qnt=s(iD);$$o=r(Qnt,"GPTJForQuestionAnswering"),Qnt.forEach(t),I$o=r(bLe," (GPT-J model)"),bLe.forEach(t),q$o=i(P),N5=n(P,"LI",{});var FLe=s(N5);Cce=n(FLe,"STRONG",{});var Wnt=s(Cce);N$o=r(Wnt,"ibert"),Wnt.forEach(t),j$o=r(FLe," \u2014 "),dD=n(FLe,"A",{href:!0});var Hnt=s(dD);D$o=r(Hnt,"IBertForQuestionAnswering"),Hnt.forEach(t),G$o=r(FLe," (I-BERT model)"),FLe.forEach(t),O$o=i(P),j5=n(P,"LI",{});var vLe=s(j5);wce=n(vLe,"STRONG",{});var Unt=s(wce);V$o=r(Unt,"layoutlmv2"),Unt.forEach(t),X$o=r(vLe," \u2014 "),cD=n(vLe,"A",{href:!0});var Jnt=s(cD);z$o=r(Jnt,"LayoutLMv2ForQuestionAnswering"),Jnt.forEach(t),Q$o=r(vLe," (LayoutLMv2 model)"),vLe.forEach(t),W$o=i(P),D5=n(P,"LI",{});var TLe=s(D5);Ace=n(TLe,"STRONG",{});var Ynt=s(Ace);H$o=r(Ynt,"led"),Ynt.forEach(t),U$o=r(TLe," \u2014 "),fD=n(TLe,"A",{href:!0});var Knt=s(fD);J$o=r(Knt,"LEDForQuestionAnswering"),Knt.forEach(t),Y$o=r(TLe," (LED model)"),TLe.forEach(t),K$o=i(P),G5=n(P,"LI",{});var MLe=s(G5);yce=n(MLe,"STRONG",{});var Znt=s(yce);Z$o=r(Znt,"longformer"),Znt.forEach(t),eIo=r(MLe," \u2014 "),mD=n(MLe,"A",{href:!0});var est=s(mD);oIo=r(est,"LongformerForQuestionAnswering"),est.forEach(t),rIo=r(MLe," (Longformer model)"),MLe.forEach(t),tIo=i(P),O5=n(P,"LI",{});var ELe=s(O5);Lce=n(ELe,"STRONG",{});var ost=s(Lce);aIo=r(ost,"lxmert"),ost.forEach(t),nIo=r(ELe," \u2014 "),gD=n(ELe,"A",{href:!0});var rst=s(gD);sIo=r(rst,"LxmertForQuestionAnswering"),rst.forEach(t),lIo=r(ELe," (LXMERT model)"),ELe.forEach(t),iIo=i(P),V5=n(P,"LI",{});var CLe=s(V5);xce=n(CLe,"STRONG",{});var tst=s(xce);dIo=r(tst,"mbart"),tst.forEach(t),cIo=r(CLe," \u2014 "),hD=n(CLe,"A",{href:!0});var ast=s(hD);fIo=r(ast,"MBartForQuestionAnswering"),ast.forEach(t),mIo=r(CLe," (mBART model)"),CLe.forEach(t),gIo=i(P),X5=n(P,"LI",{});var wLe=s(X5);kce=n(wLe,"STRONG",{});var nst=s(kce);hIo=r(nst,"megatron-bert"),nst.forEach(t),pIo=r(wLe," \u2014 "),pD=n(wLe,"A",{href:!0});var sst=s(pD);_Io=r(sst,"MegatronBertForQuestionAnswering"),sst.forEach(t),uIo=r(wLe," (MegatronBert model)"),wLe.forEach(t),bIo=i(P),z5=n(P,"LI",{});var ALe=s(z5);Sce=n(ALe,"STRONG",{});var lst=s(Sce);FIo=r(lst,"mobilebert"),lst.forEach(t),vIo=r(ALe," \u2014 "),_D=n(ALe,"A",{href:!0});var ist=s(_D);TIo=r(ist,"MobileBertForQuestionAnswering"),ist.forEach(t),MIo=r(ALe," (MobileBERT model)"),ALe.forEach(t),EIo=i(P),Q5=n(P,"LI",{});var yLe=s(Q5);Rce=n(yLe,"STRONG",{});var dst=s(Rce);CIo=r(dst,"mpnet"),dst.forEach(t),wIo=r(yLe," \u2014 "),uD=n(yLe,"A",{href:!0});var cst=s(uD);AIo=r(cst,"MPNetForQuestionAnswering"),cst.forEach(t),yIo=r(yLe," (MPNet model)"),yLe.forEach(t),LIo=i(P),W5=n(P,"LI",{});var LLe=s(W5);Bce=n(LLe,"STRONG",{});var fst=s(Bce);xIo=r(fst,"nystromformer"),fst.forEach(t),kIo=r(LLe," \u2014 "),bD=n(LLe,"A",{href:!0});var mst=s(bD);SIo=r(mst,"NystromformerForQuestionAnswering"),mst.forEach(t),RIo=r(LLe," (Nystromformer model)"),LLe.forEach(t),BIo=i(P),H5=n(P,"LI",{});var xLe=s(H5);Pce=n(xLe,"STRONG",{});var gst=s(Pce);PIo=r(gst,"qdqbert"),gst.forEach(t),$Io=r(xLe," \u2014 "),FD=n(xLe,"A",{href:!0});var hst=s(FD);IIo=r(hst,"QDQBertForQuestionAnswering"),hst.forEach(t),qIo=r(xLe," (QDQBert model)"),xLe.forEach(t),NIo=i(P),U5=n(P,"LI",{});var kLe=s(U5);$ce=n(kLe,"STRONG",{});var pst=s($ce);jIo=r(pst,"reformer"),pst.forEach(t),DIo=r(kLe," \u2014 "),vD=n(kLe,"A",{href:!0});var _st=s(vD);GIo=r(_st,"ReformerForQuestionAnswering"),_st.forEach(t),OIo=r(kLe," (Reformer model)"),kLe.forEach(t),VIo=i(P),J5=n(P,"LI",{});var SLe=s(J5);Ice=n(SLe,"STRONG",{});var ust=s(Ice);XIo=r(ust,"rembert"),ust.forEach(t),zIo=r(SLe," \u2014 "),TD=n(SLe,"A",{href:!0});var bst=s(TD);QIo=r(bst,"RemBertForQuestionAnswering"),bst.forEach(t),WIo=r(SLe," (RemBERT model)"),SLe.forEach(t),HIo=i(P),Y5=n(P,"LI",{});var RLe=s(Y5);qce=n(RLe,"STRONG",{});var Fst=s(qce);UIo=r(Fst,"roberta"),Fst.forEach(t),JIo=r(RLe," \u2014 "),MD=n(RLe,"A",{href:!0});var vst=s(MD);YIo=r(vst,"RobertaForQuestionAnswering"),vst.forEach(t),KIo=r(RLe," (RoBERTa model)"),RLe.forEach(t),ZIo=i(P),K5=n(P,"LI",{});var BLe=s(K5);Nce=n(BLe,"STRONG",{});var Tst=s(Nce);eqo=r(Tst,"roformer"),Tst.forEach(t),oqo=r(BLe," \u2014 "),ED=n(BLe,"A",{href:!0});var Mst=s(ED);rqo=r(Mst,"RoFormerForQuestionAnswering"),Mst.forEach(t),tqo=r(BLe," (RoFormer model)"),BLe.forEach(t),aqo=i(P),Z5=n(P,"LI",{});var PLe=s(Z5);jce=n(PLe,"STRONG",{});var Est=s(jce);nqo=r(Est,"splinter"),Est.forEach(t),sqo=r(PLe," \u2014 "),CD=n(PLe,"A",{href:!0});var Cst=s(CD);lqo=r(Cst,"SplinterForQuestionAnswering"),Cst.forEach(t),iqo=r(PLe," (Splinter model)"),PLe.forEach(t),dqo=i(P),e3=n(P,"LI",{});var $Le=s(e3);Dce=n($Le,"STRONG",{});var wst=s(Dce);cqo=r(wst,"squeezebert"),wst.forEach(t),fqo=r($Le," \u2014 "),wD=n($Le,"A",{href:!0});var Ast=s(wD);mqo=r(Ast,"SqueezeBertForQuestionAnswering"),Ast.forEach(t),gqo=r($Le," (SqueezeBERT model)"),$Le.forEach(t),hqo=i(P),o3=n(P,"LI",{});var ILe=s(o3);Gce=n(ILe,"STRONG",{});var yst=s(Gce);pqo=r(yst,"xlm"),yst.forEach(t),_qo=r(ILe," \u2014 "),AD=n(ILe,"A",{href:!0});var Lst=s(AD);uqo=r(Lst,"XLMForQuestionAnsweringSimple"),Lst.forEach(t),bqo=r(ILe," (XLM model)"),ILe.forEach(t),Fqo=i(P),r3=n(P,"LI",{});var qLe=s(r3);Oce=n(qLe,"STRONG",{});var xst=s(Oce);vqo=r(xst,"xlm-roberta"),xst.forEach(t),Tqo=r(qLe," \u2014 "),yD=n(qLe,"A",{href:!0});var kst=s(yD);Mqo=r(kst,"XLMRobertaForQuestionAnswering"),kst.forEach(t),Eqo=r(qLe," (XLM-RoBERTa model)"),qLe.forEach(t),Cqo=i(P),t3=n(P,"LI",{});var NLe=s(t3);Vce=n(NLe,"STRONG",{});var Sst=s(Vce);wqo=r(Sst,"xlm-roberta-xl"),Sst.forEach(t),Aqo=r(NLe," \u2014 "),LD=n(NLe,"A",{href:!0});var Rst=s(LD);yqo=r(Rst,"XLMRobertaXLForQuestionAnswering"),Rst.forEach(t),Lqo=r(NLe," (XLM-RoBERTa-XL model)"),NLe.forEach(t),xqo=i(P),a3=n(P,"LI",{});var jLe=s(a3);Xce=n(jLe,"STRONG",{});var Bst=s(Xce);kqo=r(Bst,"xlnet"),Bst.forEach(t),Sqo=r(jLe," \u2014 "),xD=n(jLe,"A",{href:!0});var Pst=s(xD);Rqo=r(Pst,"XLNetForQuestionAnsweringSimple"),Pst.forEach(t),Bqo=r(jLe," (XLNet model)"),jLe.forEach(t),Pqo=i(P),n3=n(P,"LI",{});var DLe=s(n3);zce=n(DLe,"STRONG",{});var $st=s(zce);$qo=r($st,"yoso"),$st.forEach(t),Iqo=r(DLe," \u2014 "),kD=n(DLe,"A",{href:!0});var Ist=s(kD);qqo=r(Ist,"YosoForQuestionAnswering"),Ist.forEach(t),Nqo=r(DLe," (YOSO model)"),DLe.forEach(t),P.forEach(t),jqo=i(Ut),s3=n(Ut,"P",{});var GLe=s(s3);Dqo=r(GLe,"The model is set in evaluation mode by default using "),Qce=n(GLe,"CODE",{});var qst=s(Qce);Gqo=r(qst,"model.eval()"),qst.forEach(t),Oqo=r(GLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wce=n(GLe,"CODE",{});var Nst=s(Wce);Vqo=r(Nst,"model.train()"),Nst.forEach(t),GLe.forEach(t),Xqo=i(Ut),Hce=n(Ut,"P",{});var jst=s(Hce);zqo=r(jst,"Examples:"),jst.forEach(t),Qqo=i(Ut),m(vA.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),rBe=i(c),Ad=n(c,"H2",{class:!0});var f$e=s(Ad);l3=n(f$e,"A",{id:!0,class:!0,href:!0});var Dst=s(l3);Uce=n(Dst,"SPAN",{});var Gst=s(Uce);m(TA.$$.fragment,Gst),Gst.forEach(t),Dst.forEach(t),Wqo=i(f$e),Jce=n(f$e,"SPAN",{});var Ost=s(Jce);Hqo=r(Ost,"AutoModelForTableQuestionAnswering"),Ost.forEach(t),f$e.forEach(t),tBe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(MA.$$.fragment,gl),Uqo=i(gl),yd=n(gl,"P",{});var $U=s(yd);Jqo=r($U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),SD=n($U,"A",{href:!0});var Vst=s(SD);Yqo=r(Vst,"from_pretrained()"),Vst.forEach(t),Kqo=r($U," class method or the "),RD=n($U,"A",{href:!0});var Xst=s(RD);Zqo=r(Xst,"from_config()"),Xst.forEach(t),eNo=r($U,` class
method.`),$U.forEach(t),oNo=i(gl),EA=n(gl,"P",{});var m$e=s(EA);rNo=r(m$e,"This class cannot be instantiated directly using "),Yce=n(m$e,"CODE",{});var zst=s(Yce);tNo=r(zst,"__init__()"),zst.forEach(t),aNo=r(m$e," (throws an error)."),m$e.forEach(t),nNo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(CA.$$.fragment,hl),sNo=i(hl),Kce=n(hl,"P",{});var Qst=s(Kce);lNo=r(Qst,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Qst.forEach(t),iNo=i(hl),Ld=n(hl,"P",{});var IU=s(Ld);dNo=r(IU,`Note:
Loading a model from its configuration file does `),Zce=n(IU,"STRONG",{});var Wst=s(Zce);cNo=r(Wst,"not"),Wst.forEach(t),fNo=r(IU,` load the model weights. It only affects the
model\u2019s configuration. Use `),BD=n(IU,"A",{href:!0});var Hst=s(BD);mNo=r(Hst,"from_pretrained()"),Hst.forEach(t),gNo=r(IU," to load the model weights."),IU.forEach(t),hNo=i(hl),efe=n(hl,"P",{});var Ust=s(efe);pNo=r(Ust,"Examples:"),Ust.forEach(t),_No=i(hl),m(wA.$$.fragment,hl),hl.forEach(t),uNo=i(gl),We=n(gl,"DIV",{class:!0});var Jt=s(We);m(AA.$$.fragment,Jt),bNo=i(Jt),ofe=n(Jt,"P",{});var Jst=s(ofe);FNo=r(Jst,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Jst.forEach(t),vNo=i(Jt),en=n(Jt,"P",{});var jE=s(en);TNo=r(jE,"The model class to instantiate is selected based on the "),rfe=n(jE,"CODE",{});var Yst=s(rfe);MNo=r(Yst,"model_type"),Yst.forEach(t),ENo=r(jE,` property of the config object (either
passed as an argument or loaded from `),tfe=n(jE,"CODE",{});var Kst=s(tfe);CNo=r(Kst,"pretrained_model_name_or_path"),Kst.forEach(t),wNo=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),afe=n(jE,"CODE",{});var Zst=s(afe);ANo=r(Zst,"pretrained_model_name_or_path"),Zst.forEach(t),yNo=r(jE,":"),jE.forEach(t),LNo=i(Jt),nfe=n(Jt,"UL",{});var elt=s(nfe);i3=n(elt,"LI",{});var OLe=s(i3);sfe=n(OLe,"STRONG",{});var olt=s(sfe);xNo=r(olt,"tapas"),olt.forEach(t),kNo=r(OLe," \u2014 "),PD=n(OLe,"A",{href:!0});var rlt=s(PD);SNo=r(rlt,"TapasForQuestionAnswering"),rlt.forEach(t),RNo=r(OLe," (TAPAS model)"),OLe.forEach(t),elt.forEach(t),BNo=i(Jt),d3=n(Jt,"P",{});var VLe=s(d3);PNo=r(VLe,"The model is set in evaluation mode by default using "),lfe=n(VLe,"CODE",{});var tlt=s(lfe);$No=r(tlt,"model.eval()"),tlt.forEach(t),INo=r(VLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=n(VLe,"CODE",{});var alt=s(ife);qNo=r(alt,"model.train()"),alt.forEach(t),VLe.forEach(t),NNo=i(Jt),dfe=n(Jt,"P",{});var nlt=s(dfe);jNo=r(nlt,"Examples:"),nlt.forEach(t),DNo=i(Jt),m(yA.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),aBe=i(c),xd=n(c,"H2",{class:!0});var g$e=s(xd);c3=n(g$e,"A",{id:!0,class:!0,href:!0});var slt=s(c3);cfe=n(slt,"SPAN",{});var llt=s(cfe);m(LA.$$.fragment,llt),llt.forEach(t),slt.forEach(t),GNo=i(g$e),ffe=n(g$e,"SPAN",{});var ilt=s(ffe);ONo=r(ilt,"AutoModelForImageClassification"),ilt.forEach(t),g$e.forEach(t),nBe=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(xA.$$.fragment,pl),VNo=i(pl),kd=n(pl,"P",{});var qU=s(kd);XNo=r(qU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$D=n(qU,"A",{href:!0});var dlt=s($D);zNo=r(dlt,"from_pretrained()"),dlt.forEach(t),QNo=r(qU," class method or the "),ID=n(qU,"A",{href:!0});var clt=s(ID);WNo=r(clt,"from_config()"),clt.forEach(t),HNo=r(qU,` class
method.`),qU.forEach(t),UNo=i(pl),kA=n(pl,"P",{});var h$e=s(kA);JNo=r(h$e,"This class cannot be instantiated directly using "),mfe=n(h$e,"CODE",{});var flt=s(mfe);YNo=r(flt,"__init__()"),flt.forEach(t),KNo=r(h$e," (throws an error)."),h$e.forEach(t),ZNo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(SA.$$.fragment,_l),ejo=i(_l),gfe=n(_l,"P",{});var mlt=s(gfe);ojo=r(mlt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mlt.forEach(t),rjo=i(_l),Sd=n(_l,"P",{});var NU=s(Sd);tjo=r(NU,`Note:
Loading a model from its configuration file does `),hfe=n(NU,"STRONG",{});var glt=s(hfe);ajo=r(glt,"not"),glt.forEach(t),njo=r(NU,` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=n(NU,"A",{href:!0});var hlt=s(qD);sjo=r(hlt,"from_pretrained()"),hlt.forEach(t),ljo=r(NU," to load the model weights."),NU.forEach(t),ijo=i(_l),pfe=n(_l,"P",{});var plt=s(pfe);djo=r(plt,"Examples:"),plt.forEach(t),cjo=i(_l),m(RA.$$.fragment,_l),_l.forEach(t),fjo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(BA.$$.fragment,Yt),mjo=i(Yt),_fe=n(Yt,"P",{});var _lt=s(_fe);gjo=r(_lt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_lt.forEach(t),hjo=i(Yt),on=n(Yt,"P",{});var DE=s(on);pjo=r(DE,"The model class to instantiate is selected based on the "),ufe=n(DE,"CODE",{});var ult=s(ufe);_jo=r(ult,"model_type"),ult.forEach(t),ujo=r(DE,` property of the config object (either
passed as an argument or loaded from `),bfe=n(DE,"CODE",{});var blt=s(bfe);bjo=r(blt,"pretrained_model_name_or_path"),blt.forEach(t),Fjo=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ffe=n(DE,"CODE",{});var Flt=s(Ffe);vjo=r(Flt,"pretrained_model_name_or_path"),Flt.forEach(t),Tjo=r(DE,":"),DE.forEach(t),Mjo=i(Yt),fe=n(Yt,"UL",{});var pe=s(fe);f3=n(pe,"LI",{});var XLe=s(f3);vfe=n(XLe,"STRONG",{});var vlt=s(vfe);Ejo=r(vlt,"beit"),vlt.forEach(t),Cjo=r(XLe," \u2014 "),ND=n(XLe,"A",{href:!0});var Tlt=s(ND);wjo=r(Tlt,"BeitForImageClassification"),Tlt.forEach(t),Ajo=r(XLe," (BEiT model)"),XLe.forEach(t),yjo=i(pe),m3=n(pe,"LI",{});var zLe=s(m3);Tfe=n(zLe,"STRONG",{});var Mlt=s(Tfe);Ljo=r(Mlt,"convnext"),Mlt.forEach(t),xjo=r(zLe," \u2014 "),jD=n(zLe,"A",{href:!0});var Elt=s(jD);kjo=r(Elt,"ConvNextForImageClassification"),Elt.forEach(t),Sjo=r(zLe," (ConvNext model)"),zLe.forEach(t),Rjo=i(pe),Ds=n(pe,"LI",{});var p9=s(Ds);Mfe=n(p9,"STRONG",{});var Clt=s(Mfe);Bjo=r(Clt,"deit"),Clt.forEach(t),Pjo=r(p9," \u2014 "),DD=n(p9,"A",{href:!0});var wlt=s(DD);$jo=r(wlt,"DeiTForImageClassification"),wlt.forEach(t),Ijo=r(p9," or "),GD=n(p9,"A",{href:!0});var Alt=s(GD);qjo=r(Alt,"DeiTForImageClassificationWithTeacher"),Alt.forEach(t),Njo=r(p9," (DeiT model)"),p9.forEach(t),jjo=i(pe),g3=n(pe,"LI",{});var QLe=s(g3);Efe=n(QLe,"STRONG",{});var ylt=s(Efe);Djo=r(ylt,"imagegpt"),ylt.forEach(t),Gjo=r(QLe," \u2014 "),OD=n(QLe,"A",{href:!0});var Llt=s(OD);Ojo=r(Llt,"ImageGPTForImageClassification"),Llt.forEach(t),Vjo=r(QLe," (ImageGPT model)"),QLe.forEach(t),Xjo=i(pe),ma=n(pe,"LI",{});var $f=s(ma);Cfe=n($f,"STRONG",{});var xlt=s(Cfe);zjo=r(xlt,"perceiver"),xlt.forEach(t),Qjo=r($f," \u2014 "),VD=n($f,"A",{href:!0});var klt=s(VD);Wjo=r(klt,"PerceiverForImageClassificationLearned"),klt.forEach(t),Hjo=r($f," or "),XD=n($f,"A",{href:!0});var Slt=s(XD);Ujo=r(Slt,"PerceiverForImageClassificationFourier"),Slt.forEach(t),Jjo=r($f," or "),zD=n($f,"A",{href:!0});var Rlt=s(zD);Yjo=r(Rlt,"PerceiverForImageClassificationConvProcessing"),Rlt.forEach(t),Kjo=r($f," (Perceiver model)"),$f.forEach(t),Zjo=i(pe),h3=n(pe,"LI",{});var WLe=s(h3);wfe=n(WLe,"STRONG",{});var Blt=s(wfe);eDo=r(Blt,"poolformer"),Blt.forEach(t),oDo=r(WLe," \u2014 "),QD=n(WLe,"A",{href:!0});var Plt=s(QD);rDo=r(Plt,"PoolFormerForImageClassification"),Plt.forEach(t),tDo=r(WLe," (PoolFormer model)"),WLe.forEach(t),aDo=i(pe),p3=n(pe,"LI",{});var HLe=s(p3);Afe=n(HLe,"STRONG",{});var $lt=s(Afe);nDo=r($lt,"regnet"),$lt.forEach(t),sDo=r(HLe," \u2014 "),WD=n(HLe,"A",{href:!0});var Ilt=s(WD);lDo=r(Ilt,"RegNetForImageClassification"),Ilt.forEach(t),iDo=r(HLe," (RegNet model)"),HLe.forEach(t),dDo=i(pe),_3=n(pe,"LI",{});var ULe=s(_3);yfe=n(ULe,"STRONG",{});var qlt=s(yfe);cDo=r(qlt,"resnet"),qlt.forEach(t),fDo=r(ULe," \u2014 "),HD=n(ULe,"A",{href:!0});var Nlt=s(HD);mDo=r(Nlt,"ResNetForImageClassification"),Nlt.forEach(t),gDo=r(ULe," (ResNet model)"),ULe.forEach(t),hDo=i(pe),u3=n(pe,"LI",{});var JLe=s(u3);Lfe=n(JLe,"STRONG",{});var jlt=s(Lfe);pDo=r(jlt,"segformer"),jlt.forEach(t),_Do=r(JLe," \u2014 "),UD=n(JLe,"A",{href:!0});var Dlt=s(UD);uDo=r(Dlt,"SegformerForImageClassification"),Dlt.forEach(t),bDo=r(JLe," (SegFormer model)"),JLe.forEach(t),FDo=i(pe),b3=n(pe,"LI",{});var YLe=s(b3);xfe=n(YLe,"STRONG",{});var Glt=s(xfe);vDo=r(Glt,"swin"),Glt.forEach(t),TDo=r(YLe," \u2014 "),JD=n(YLe,"A",{href:!0});var Olt=s(JD);MDo=r(Olt,"SwinForImageClassification"),Olt.forEach(t),EDo=r(YLe," (Swin model)"),YLe.forEach(t),CDo=i(pe),F3=n(pe,"LI",{});var KLe=s(F3);kfe=n(KLe,"STRONG",{});var Vlt=s(kfe);wDo=r(Vlt,"van"),Vlt.forEach(t),ADo=r(KLe," \u2014 "),YD=n(KLe,"A",{href:!0});var Xlt=s(YD);yDo=r(Xlt,"VanForImageClassification"),Xlt.forEach(t),LDo=r(KLe," (VAN model)"),KLe.forEach(t),xDo=i(pe),v3=n(pe,"LI",{});var ZLe=s(v3);Sfe=n(ZLe,"STRONG",{});var zlt=s(Sfe);kDo=r(zlt,"vit"),zlt.forEach(t),SDo=r(ZLe," \u2014 "),KD=n(ZLe,"A",{href:!0});var Qlt=s(KD);RDo=r(Qlt,"ViTForImageClassification"),Qlt.forEach(t),BDo=r(ZLe," (ViT model)"),ZLe.forEach(t),pe.forEach(t),PDo=i(Yt),T3=n(Yt,"P",{});var e8e=s(T3);$Do=r(e8e,"The model is set in evaluation mode by default using "),Rfe=n(e8e,"CODE",{});var Wlt=s(Rfe);IDo=r(Wlt,"model.eval()"),Wlt.forEach(t),qDo=r(e8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bfe=n(e8e,"CODE",{});var Hlt=s(Bfe);NDo=r(Hlt,"model.train()"),Hlt.forEach(t),e8e.forEach(t),jDo=i(Yt),Pfe=n(Yt,"P",{});var Ult=s(Pfe);DDo=r(Ult,"Examples:"),Ult.forEach(t),GDo=i(Yt),m(PA.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),sBe=i(c),Rd=n(c,"H2",{class:!0});var p$e=s(Rd);M3=n(p$e,"A",{id:!0,class:!0,href:!0});var Jlt=s(M3);$fe=n(Jlt,"SPAN",{});var Ylt=s($fe);m($A.$$.fragment,Ylt),Ylt.forEach(t),Jlt.forEach(t),ODo=i(p$e),Ife=n(p$e,"SPAN",{});var Klt=s(Ife);VDo=r(Klt,"AutoModelForVision2Seq"),Klt.forEach(t),p$e.forEach(t),lBe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(IA.$$.fragment,ul),XDo=i(ul),Bd=n(ul,"P",{});var jU=s(Bd);zDo=r(jU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ZD=n(jU,"A",{href:!0});var Zlt=s(ZD);QDo=r(Zlt,"from_pretrained()"),Zlt.forEach(t),WDo=r(jU," class method or the "),eG=n(jU,"A",{href:!0});var eit=s(eG);HDo=r(eit,"from_config()"),eit.forEach(t),UDo=r(jU,` class
method.`),jU.forEach(t),JDo=i(ul),qA=n(ul,"P",{});var _$e=s(qA);YDo=r(_$e,"This class cannot be instantiated directly using "),qfe=n(_$e,"CODE",{});var oit=s(qfe);KDo=r(oit,"__init__()"),oit.forEach(t),ZDo=r(_$e," (throws an error)."),_$e.forEach(t),eGo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(NA.$$.fragment,bl),oGo=i(bl),Nfe=n(bl,"P",{});var rit=s(Nfe);rGo=r(rit,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rit.forEach(t),tGo=i(bl),Pd=n(bl,"P",{});var DU=s(Pd);aGo=r(DU,`Note:
Loading a model from its configuration file does `),jfe=n(DU,"STRONG",{});var tit=s(jfe);nGo=r(tit,"not"),tit.forEach(t),sGo=r(DU,` load the model weights. It only affects the
model\u2019s configuration. Use `),oG=n(DU,"A",{href:!0});var ait=s(oG);lGo=r(ait,"from_pretrained()"),ait.forEach(t),iGo=r(DU," to load the model weights."),DU.forEach(t),dGo=i(bl),Dfe=n(bl,"P",{});var nit=s(Dfe);cGo=r(nit,"Examples:"),nit.forEach(t),fGo=i(bl),m(jA.$$.fragment,bl),bl.forEach(t),mGo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(DA.$$.fragment,Kt),gGo=i(Kt),Gfe=n(Kt,"P",{});var sit=s(Gfe);hGo=r(sit,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sit.forEach(t),pGo=i(Kt),rn=n(Kt,"P",{});var GE=s(rn);_Go=r(GE,"The model class to instantiate is selected based on the "),Ofe=n(GE,"CODE",{});var lit=s(Ofe);uGo=r(lit,"model_type"),lit.forEach(t),bGo=r(GE,` property of the config object (either
passed as an argument or loaded from `),Vfe=n(GE,"CODE",{});var iit=s(Vfe);FGo=r(iit,"pretrained_model_name_or_path"),iit.forEach(t),vGo=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xfe=n(GE,"CODE",{});var dit=s(Xfe);TGo=r(dit,"pretrained_model_name_or_path"),dit.forEach(t),MGo=r(GE,":"),GE.forEach(t),EGo=i(Kt),zfe=n(Kt,"UL",{});var cit=s(zfe);E3=n(cit,"LI",{});var o8e=s(E3);Qfe=n(o8e,"STRONG",{});var fit=s(Qfe);CGo=r(fit,"vision-encoder-decoder"),fit.forEach(t),wGo=r(o8e," \u2014 "),rG=n(o8e,"A",{href:!0});var mit=s(rG);AGo=r(mit,"VisionEncoderDecoderModel"),mit.forEach(t),yGo=r(o8e," (Vision Encoder decoder model)"),o8e.forEach(t),cit.forEach(t),LGo=i(Kt),C3=n(Kt,"P",{});var r8e=s(C3);xGo=r(r8e,"The model is set in evaluation mode by default using "),Wfe=n(r8e,"CODE",{});var git=s(Wfe);kGo=r(git,"model.eval()"),git.forEach(t),SGo=r(r8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hfe=n(r8e,"CODE",{});var hit=s(Hfe);RGo=r(hit,"model.train()"),hit.forEach(t),r8e.forEach(t),BGo=i(Kt),Ufe=n(Kt,"P",{});var pit=s(Ufe);PGo=r(pit,"Examples:"),pit.forEach(t),$Go=i(Kt),m(GA.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),iBe=i(c),$d=n(c,"H2",{class:!0});var u$e=s($d);w3=n(u$e,"A",{id:!0,class:!0,href:!0});var _it=s(w3);Jfe=n(_it,"SPAN",{});var uit=s(Jfe);m(OA.$$.fragment,uit),uit.forEach(t),_it.forEach(t),IGo=i(u$e),Yfe=n(u$e,"SPAN",{});var bit=s(Yfe);qGo=r(bit,"AutoModelForAudioClassification"),bit.forEach(t),u$e.forEach(t),dBe=i(c),dr=n(c,"DIV",{class:!0});var Fl=s(dr);m(VA.$$.fragment,Fl),NGo=i(Fl),Id=n(Fl,"P",{});var GU=s(Id);jGo=r(GU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),tG=n(GU,"A",{href:!0});var Fit=s(tG);DGo=r(Fit,"from_pretrained()"),Fit.forEach(t),GGo=r(GU," class method or the "),aG=n(GU,"A",{href:!0});var vit=s(aG);OGo=r(vit,"from_config()"),vit.forEach(t),VGo=r(GU,` class
method.`),GU.forEach(t),XGo=i(Fl),XA=n(Fl,"P",{});var b$e=s(XA);zGo=r(b$e,"This class cannot be instantiated directly using "),Kfe=n(b$e,"CODE",{});var Tit=s(Kfe);QGo=r(Tit,"__init__()"),Tit.forEach(t),WGo=r(b$e," (throws an error)."),b$e.forEach(t),HGo=i(Fl),tt=n(Fl,"DIV",{class:!0});var vl=s(tt);m(zA.$$.fragment,vl),UGo=i(vl),Zfe=n(vl,"P",{});var Mit=s(Zfe);JGo=r(Mit,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Mit.forEach(t),YGo=i(vl),qd=n(vl,"P",{});var OU=s(qd);KGo=r(OU,`Note:
Loading a model from its configuration file does `),eme=n(OU,"STRONG",{});var Eit=s(eme);ZGo=r(Eit,"not"),Eit.forEach(t),eOo=r(OU,` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=n(OU,"A",{href:!0});var Cit=s(nG);oOo=r(Cit,"from_pretrained()"),Cit.forEach(t),rOo=r(OU," to load the model weights."),OU.forEach(t),tOo=i(vl),ome=n(vl,"P",{});var wit=s(ome);aOo=r(wit,"Examples:"),wit.forEach(t),nOo=i(vl),m(QA.$$.fragment,vl),vl.forEach(t),sOo=i(Fl),Je=n(Fl,"DIV",{class:!0});var Zt=s(Je);m(WA.$$.fragment,Zt),lOo=i(Zt),rme=n(Zt,"P",{});var Ait=s(rme);iOo=r(Ait,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ait.forEach(t),dOo=i(Zt),tn=n(Zt,"P",{});var OE=s(tn);cOo=r(OE,"The model class to instantiate is selected based on the "),tme=n(OE,"CODE",{});var yit=s(tme);fOo=r(yit,"model_type"),yit.forEach(t),mOo=r(OE,` property of the config object (either
passed as an argument or loaded from `),ame=n(OE,"CODE",{});var Lit=s(ame);gOo=r(Lit,"pretrained_model_name_or_path"),Lit.forEach(t),hOo=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nme=n(OE,"CODE",{});var xit=s(nme);pOo=r(xit,"pretrained_model_name_or_path"),xit.forEach(t),_Oo=r(OE,":"),OE.forEach(t),uOo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);A3=n(Do,"LI",{});var t8e=s(A3);sme=n(t8e,"STRONG",{});var kit=s(sme);bOo=r(kit,"data2vec-audio"),kit.forEach(t),FOo=r(t8e," \u2014 "),sG=n(t8e,"A",{href:!0});var Sit=s(sG);vOo=r(Sit,"Data2VecAudioForSequenceClassification"),Sit.forEach(t),TOo=r(t8e," (Data2VecAudio model)"),t8e.forEach(t),MOo=i(Do),y3=n(Do,"LI",{});var a8e=s(y3);lme=n(a8e,"STRONG",{});var Rit=s(lme);EOo=r(Rit,"hubert"),Rit.forEach(t),COo=r(a8e," \u2014 "),lG=n(a8e,"A",{href:!0});var Bit=s(lG);wOo=r(Bit,"HubertForSequenceClassification"),Bit.forEach(t),AOo=r(a8e," (Hubert model)"),a8e.forEach(t),yOo=i(Do),L3=n(Do,"LI",{});var n8e=s(L3);ime=n(n8e,"STRONG",{});var Pit=s(ime);LOo=r(Pit,"sew"),Pit.forEach(t),xOo=r(n8e," \u2014 "),iG=n(n8e,"A",{href:!0});var $it=s(iG);kOo=r($it,"SEWForSequenceClassification"),$it.forEach(t),SOo=r(n8e," (SEW model)"),n8e.forEach(t),ROo=i(Do),x3=n(Do,"LI",{});var s8e=s(x3);dme=n(s8e,"STRONG",{});var Iit=s(dme);BOo=r(Iit,"sew-d"),Iit.forEach(t),POo=r(s8e," \u2014 "),dG=n(s8e,"A",{href:!0});var qit=s(dG);$Oo=r(qit,"SEWDForSequenceClassification"),qit.forEach(t),IOo=r(s8e," (SEW-D model)"),s8e.forEach(t),qOo=i(Do),k3=n(Do,"LI",{});var l8e=s(k3);cme=n(l8e,"STRONG",{});var Nit=s(cme);NOo=r(Nit,"unispeech"),Nit.forEach(t),jOo=r(l8e," \u2014 "),cG=n(l8e,"A",{href:!0});var jit=s(cG);DOo=r(jit,"UniSpeechForSequenceClassification"),jit.forEach(t),GOo=r(l8e," (UniSpeech model)"),l8e.forEach(t),OOo=i(Do),S3=n(Do,"LI",{});var i8e=s(S3);fme=n(i8e,"STRONG",{});var Dit=s(fme);VOo=r(Dit,"unispeech-sat"),Dit.forEach(t),XOo=r(i8e," \u2014 "),fG=n(i8e,"A",{href:!0});var Git=s(fG);zOo=r(Git,"UniSpeechSatForSequenceClassification"),Git.forEach(t),QOo=r(i8e," (UniSpeechSat model)"),i8e.forEach(t),WOo=i(Do),R3=n(Do,"LI",{});var d8e=s(R3);mme=n(d8e,"STRONG",{});var Oit=s(mme);HOo=r(Oit,"wav2vec2"),Oit.forEach(t),UOo=r(d8e," \u2014 "),mG=n(d8e,"A",{href:!0});var Vit=s(mG);JOo=r(Vit,"Wav2Vec2ForSequenceClassification"),Vit.forEach(t),YOo=r(d8e," (Wav2Vec2 model)"),d8e.forEach(t),KOo=i(Do),B3=n(Do,"LI",{});var c8e=s(B3);gme=n(c8e,"STRONG",{});var Xit=s(gme);ZOo=r(Xit,"wavlm"),Xit.forEach(t),eVo=r(c8e," \u2014 "),gG=n(c8e,"A",{href:!0});var zit=s(gG);oVo=r(zit,"WavLMForSequenceClassification"),zit.forEach(t),rVo=r(c8e," (WavLM model)"),c8e.forEach(t),Do.forEach(t),tVo=i(Zt),P3=n(Zt,"P",{});var f8e=s(P3);aVo=r(f8e,"The model is set in evaluation mode by default using "),hme=n(f8e,"CODE",{});var Qit=s(hme);nVo=r(Qit,"model.eval()"),Qit.forEach(t),sVo=r(f8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pme=n(f8e,"CODE",{});var Wit=s(pme);lVo=r(Wit,"model.train()"),Wit.forEach(t),f8e.forEach(t),iVo=i(Zt),_me=n(Zt,"P",{});var Hit=s(_me);dVo=r(Hit,"Examples:"),Hit.forEach(t),cVo=i(Zt),m(HA.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),cBe=i(c),Nd=n(c,"H2",{class:!0});var F$e=s(Nd);$3=n(F$e,"A",{id:!0,class:!0,href:!0});var Uit=s($3);ume=n(Uit,"SPAN",{});var Jit=s(ume);m(UA.$$.fragment,Jit),Jit.forEach(t),Uit.forEach(t),fVo=i(F$e),bme=n(F$e,"SPAN",{});var Yit=s(bme);mVo=r(Yit,"AutoModelForAudioFrameClassification"),Yit.forEach(t),F$e.forEach(t),fBe=i(c),cr=n(c,"DIV",{class:!0});var Tl=s(cr);m(JA.$$.fragment,Tl),gVo=i(Tl),jd=n(Tl,"P",{});var VU=s(jd);hVo=r(VU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),hG=n(VU,"A",{href:!0});var Kit=s(hG);pVo=r(Kit,"from_pretrained()"),Kit.forEach(t),_Vo=r(VU," class method or the "),pG=n(VU,"A",{href:!0});var Zit=s(pG);uVo=r(Zit,"from_config()"),Zit.forEach(t),bVo=r(VU,` class
method.`),VU.forEach(t),FVo=i(Tl),YA=n(Tl,"P",{});var v$e=s(YA);vVo=r(v$e,"This class cannot be instantiated directly using "),Fme=n(v$e,"CODE",{});var edt=s(Fme);TVo=r(edt,"__init__()"),edt.forEach(t),MVo=r(v$e," (throws an error)."),v$e.forEach(t),EVo=i(Tl),at=n(Tl,"DIV",{class:!0});var Ml=s(at);m(KA.$$.fragment,Ml),CVo=i(Ml),vme=n(Ml,"P",{});var odt=s(vme);wVo=r(odt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),odt.forEach(t),AVo=i(Ml),Dd=n(Ml,"P",{});var XU=s(Dd);yVo=r(XU,`Note:
Loading a model from its configuration file does `),Tme=n(XU,"STRONG",{});var rdt=s(Tme);LVo=r(rdt,"not"),rdt.forEach(t),xVo=r(XU,` load the model weights. It only affects the
model\u2019s configuration. Use `),_G=n(XU,"A",{href:!0});var tdt=s(_G);kVo=r(tdt,"from_pretrained()"),tdt.forEach(t),SVo=r(XU," to load the model weights."),XU.forEach(t),RVo=i(Ml),Mme=n(Ml,"P",{});var adt=s(Mme);BVo=r(adt,"Examples:"),adt.forEach(t),PVo=i(Ml),m(ZA.$$.fragment,Ml),Ml.forEach(t),$Vo=i(Tl),Ye=n(Tl,"DIV",{class:!0});var ea=s(Ye);m(e0.$$.fragment,ea),IVo=i(ea),Eme=n(ea,"P",{});var ndt=s(Eme);qVo=r(ndt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),ndt.forEach(t),NVo=i(ea),an=n(ea,"P",{});var VE=s(an);jVo=r(VE,"The model class to instantiate is selected based on the "),Cme=n(VE,"CODE",{});var sdt=s(Cme);DVo=r(sdt,"model_type"),sdt.forEach(t),GVo=r(VE,` property of the config object (either
passed as an argument or loaded from `),wme=n(VE,"CODE",{});var ldt=s(wme);OVo=r(ldt,"pretrained_model_name_or_path"),ldt.forEach(t),VVo=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=n(VE,"CODE",{});var idt=s(Ame);XVo=r(idt,"pretrained_model_name_or_path"),idt.forEach(t),zVo=r(VE,":"),VE.forEach(t),QVo=i(ea),nn=n(ea,"UL",{});var XE=s(nn);I3=n(XE,"LI",{});var m8e=s(I3);yme=n(m8e,"STRONG",{});var ddt=s(yme);WVo=r(ddt,"data2vec-audio"),ddt.forEach(t),HVo=r(m8e," \u2014 "),uG=n(m8e,"A",{href:!0});var cdt=s(uG);UVo=r(cdt,"Data2VecAudioForAudioFrameClassification"),cdt.forEach(t),JVo=r(m8e," (Data2VecAudio model)"),m8e.forEach(t),YVo=i(XE),q3=n(XE,"LI",{});var g8e=s(q3);Lme=n(g8e,"STRONG",{});var fdt=s(Lme);KVo=r(fdt,"unispeech-sat"),fdt.forEach(t),ZVo=r(g8e," \u2014 "),bG=n(g8e,"A",{href:!0});var mdt=s(bG);eXo=r(mdt,"UniSpeechSatForAudioFrameClassification"),mdt.forEach(t),oXo=r(g8e," (UniSpeechSat model)"),g8e.forEach(t),rXo=i(XE),N3=n(XE,"LI",{});var h8e=s(N3);xme=n(h8e,"STRONG",{});var gdt=s(xme);tXo=r(gdt,"wav2vec2"),gdt.forEach(t),aXo=r(h8e," \u2014 "),FG=n(h8e,"A",{href:!0});var hdt=s(FG);nXo=r(hdt,"Wav2Vec2ForAudioFrameClassification"),hdt.forEach(t),sXo=r(h8e," (Wav2Vec2 model)"),h8e.forEach(t),lXo=i(XE),j3=n(XE,"LI",{});var p8e=s(j3);kme=n(p8e,"STRONG",{});var pdt=s(kme);iXo=r(pdt,"wavlm"),pdt.forEach(t),dXo=r(p8e," \u2014 "),vG=n(p8e,"A",{href:!0});var _dt=s(vG);cXo=r(_dt,"WavLMForAudioFrameClassification"),_dt.forEach(t),fXo=r(p8e," (WavLM model)"),p8e.forEach(t),XE.forEach(t),mXo=i(ea),D3=n(ea,"P",{});var _8e=s(D3);gXo=r(_8e,"The model is set in evaluation mode by default using "),Sme=n(_8e,"CODE",{});var udt=s(Sme);hXo=r(udt,"model.eval()"),udt.forEach(t),pXo=r(_8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rme=n(_8e,"CODE",{});var bdt=s(Rme);_Xo=r(bdt,"model.train()"),bdt.forEach(t),_8e.forEach(t),uXo=i(ea),Bme=n(ea,"P",{});var Fdt=s(Bme);bXo=r(Fdt,"Examples:"),Fdt.forEach(t),FXo=i(ea),m(o0.$$.fragment,ea),ea.forEach(t),Tl.forEach(t),mBe=i(c),Gd=n(c,"H2",{class:!0});var T$e=s(Gd);G3=n(T$e,"A",{id:!0,class:!0,href:!0});var vdt=s(G3);Pme=n(vdt,"SPAN",{});var Tdt=s(Pme);m(r0.$$.fragment,Tdt),Tdt.forEach(t),vdt.forEach(t),vXo=i(T$e),$me=n(T$e,"SPAN",{});var Mdt=s($me);TXo=r(Mdt,"AutoModelForCTC"),Mdt.forEach(t),T$e.forEach(t),gBe=i(c),fr=n(c,"DIV",{class:!0});var El=s(fr);m(t0.$$.fragment,El),MXo=i(El),Od=n(El,"P",{});var zU=s(Od);EXo=r(zU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),TG=n(zU,"A",{href:!0});var Edt=s(TG);CXo=r(Edt,"from_pretrained()"),Edt.forEach(t),wXo=r(zU," class method or the "),MG=n(zU,"A",{href:!0});var Cdt=s(MG);AXo=r(Cdt,"from_config()"),Cdt.forEach(t),yXo=r(zU,` class
method.`),zU.forEach(t),LXo=i(El),a0=n(El,"P",{});var M$e=s(a0);xXo=r(M$e,"This class cannot be instantiated directly using "),Ime=n(M$e,"CODE",{});var wdt=s(Ime);kXo=r(wdt,"__init__()"),wdt.forEach(t),SXo=r(M$e," (throws an error)."),M$e.forEach(t),RXo=i(El),nt=n(El,"DIV",{class:!0});var Cl=s(nt);m(n0.$$.fragment,Cl),BXo=i(Cl),qme=n(Cl,"P",{});var Adt=s(qme);PXo=r(Adt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Adt.forEach(t),$Xo=i(Cl),Vd=n(Cl,"P",{});var QU=s(Vd);IXo=r(QU,`Note:
Loading a model from its configuration file does `),Nme=n(QU,"STRONG",{});var ydt=s(Nme);qXo=r(ydt,"not"),ydt.forEach(t),NXo=r(QU,` load the model weights. It only affects the
model\u2019s configuration. Use `),EG=n(QU,"A",{href:!0});var Ldt=s(EG);jXo=r(Ldt,"from_pretrained()"),Ldt.forEach(t),DXo=r(QU," to load the model weights."),QU.forEach(t),GXo=i(Cl),jme=n(Cl,"P",{});var xdt=s(jme);OXo=r(xdt,"Examples:"),xdt.forEach(t),VXo=i(Cl),m(s0.$$.fragment,Cl),Cl.forEach(t),XXo=i(El),Ke=n(El,"DIV",{class:!0});var oa=s(Ke);m(l0.$$.fragment,oa),zXo=i(oa),Dme=n(oa,"P",{});var kdt=s(Dme);QXo=r(kdt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),kdt.forEach(t),WXo=i(oa),sn=n(oa,"P",{});var zE=s(sn);HXo=r(zE,"The model class to instantiate is selected based on the "),Gme=n(zE,"CODE",{});var Sdt=s(Gme);UXo=r(Sdt,"model_type"),Sdt.forEach(t),JXo=r(zE,` property of the config object (either
passed as an argument or loaded from `),Ome=n(zE,"CODE",{});var Rdt=s(Ome);YXo=r(Rdt,"pretrained_model_name_or_path"),Rdt.forEach(t),KXo=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vme=n(zE,"CODE",{});var Bdt=s(Vme);ZXo=r(Bdt,"pretrained_model_name_or_path"),Bdt.forEach(t),ezo=r(zE,":"),zE.forEach(t),ozo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);O3=n(Go,"LI",{});var u8e=s(O3);Xme=n(u8e,"STRONG",{});var Pdt=s(Xme);rzo=r(Pdt,"data2vec-audio"),Pdt.forEach(t),tzo=r(u8e," \u2014 "),CG=n(u8e,"A",{href:!0});var $dt=s(CG);azo=r($dt,"Data2VecAudioForCTC"),$dt.forEach(t),nzo=r(u8e," (Data2VecAudio model)"),u8e.forEach(t),szo=i(Go),V3=n(Go,"LI",{});var b8e=s(V3);zme=n(b8e,"STRONG",{});var Idt=s(zme);lzo=r(Idt,"hubert"),Idt.forEach(t),izo=r(b8e," \u2014 "),wG=n(b8e,"A",{href:!0});var qdt=s(wG);dzo=r(qdt,"HubertForCTC"),qdt.forEach(t),czo=r(b8e," (Hubert model)"),b8e.forEach(t),fzo=i(Go),X3=n(Go,"LI",{});var F8e=s(X3);Qme=n(F8e,"STRONG",{});var Ndt=s(Qme);mzo=r(Ndt,"sew"),Ndt.forEach(t),gzo=r(F8e," \u2014 "),AG=n(F8e,"A",{href:!0});var jdt=s(AG);hzo=r(jdt,"SEWForCTC"),jdt.forEach(t),pzo=r(F8e," (SEW model)"),F8e.forEach(t),_zo=i(Go),z3=n(Go,"LI",{});var v8e=s(z3);Wme=n(v8e,"STRONG",{});var Ddt=s(Wme);uzo=r(Ddt,"sew-d"),Ddt.forEach(t),bzo=r(v8e," \u2014 "),yG=n(v8e,"A",{href:!0});var Gdt=s(yG);Fzo=r(Gdt,"SEWDForCTC"),Gdt.forEach(t),vzo=r(v8e," (SEW-D model)"),v8e.forEach(t),Tzo=i(Go),Q3=n(Go,"LI",{});var T8e=s(Q3);Hme=n(T8e,"STRONG",{});var Odt=s(Hme);Mzo=r(Odt,"unispeech"),Odt.forEach(t),Ezo=r(T8e," \u2014 "),LG=n(T8e,"A",{href:!0});var Vdt=s(LG);Czo=r(Vdt,"UniSpeechForCTC"),Vdt.forEach(t),wzo=r(T8e," (UniSpeech model)"),T8e.forEach(t),Azo=i(Go),W3=n(Go,"LI",{});var M8e=s(W3);Ume=n(M8e,"STRONG",{});var Xdt=s(Ume);yzo=r(Xdt,"unispeech-sat"),Xdt.forEach(t),Lzo=r(M8e," \u2014 "),xG=n(M8e,"A",{href:!0});var zdt=s(xG);xzo=r(zdt,"UniSpeechSatForCTC"),zdt.forEach(t),kzo=r(M8e," (UniSpeechSat model)"),M8e.forEach(t),Szo=i(Go),H3=n(Go,"LI",{});var E8e=s(H3);Jme=n(E8e,"STRONG",{});var Qdt=s(Jme);Rzo=r(Qdt,"wav2vec2"),Qdt.forEach(t),Bzo=r(E8e," \u2014 "),kG=n(E8e,"A",{href:!0});var Wdt=s(kG);Pzo=r(Wdt,"Wav2Vec2ForCTC"),Wdt.forEach(t),$zo=r(E8e," (Wav2Vec2 model)"),E8e.forEach(t),Izo=i(Go),U3=n(Go,"LI",{});var C8e=s(U3);Yme=n(C8e,"STRONG",{});var Hdt=s(Yme);qzo=r(Hdt,"wavlm"),Hdt.forEach(t),Nzo=r(C8e," \u2014 "),SG=n(C8e,"A",{href:!0});var Udt=s(SG);jzo=r(Udt,"WavLMForCTC"),Udt.forEach(t),Dzo=r(C8e," (WavLM model)"),C8e.forEach(t),Go.forEach(t),Gzo=i(oa),J3=n(oa,"P",{});var w8e=s(J3);Ozo=r(w8e,"The model is set in evaluation mode by default using "),Kme=n(w8e,"CODE",{});var Jdt=s(Kme);Vzo=r(Jdt,"model.eval()"),Jdt.forEach(t),Xzo=r(w8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zme=n(w8e,"CODE",{});var Ydt=s(Zme);zzo=r(Ydt,"model.train()"),Ydt.forEach(t),w8e.forEach(t),Qzo=i(oa),ege=n(oa,"P",{});var Kdt=s(ege);Wzo=r(Kdt,"Examples:"),Kdt.forEach(t),Hzo=i(oa),m(i0.$$.fragment,oa),oa.forEach(t),El.forEach(t),hBe=i(c),Xd=n(c,"H2",{class:!0});var E$e=s(Xd);Y3=n(E$e,"A",{id:!0,class:!0,href:!0});var Zdt=s(Y3);oge=n(Zdt,"SPAN",{});var ect=s(oge);m(d0.$$.fragment,ect),ect.forEach(t),Zdt.forEach(t),Uzo=i(E$e),rge=n(E$e,"SPAN",{});var oct=s(rge);Jzo=r(oct,"AutoModelForSpeechSeq2Seq"),oct.forEach(t),E$e.forEach(t),pBe=i(c),mr=n(c,"DIV",{class:!0});var wl=s(mr);m(c0.$$.fragment,wl),Yzo=i(wl),zd=n(wl,"P",{});var WU=s(zd);Kzo=r(WU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),RG=n(WU,"A",{href:!0});var rct=s(RG);Zzo=r(rct,"from_pretrained()"),rct.forEach(t),eQo=r(WU," class method or the "),BG=n(WU,"A",{href:!0});var tct=s(BG);oQo=r(tct,"from_config()"),tct.forEach(t),rQo=r(WU,` class
method.`),WU.forEach(t),tQo=i(wl),f0=n(wl,"P",{});var C$e=s(f0);aQo=r(C$e,"This class cannot be instantiated directly using "),tge=n(C$e,"CODE",{});var act=s(tge);nQo=r(act,"__init__()"),act.forEach(t),sQo=r(C$e," (throws an error)."),C$e.forEach(t),lQo=i(wl),st=n(wl,"DIV",{class:!0});var Al=s(st);m(m0.$$.fragment,Al),iQo=i(Al),age=n(Al,"P",{});var nct=s(age);dQo=r(nct,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),nct.forEach(t),cQo=i(Al),Qd=n(Al,"P",{});var HU=s(Qd);fQo=r(HU,`Note:
Loading a model from its configuration file does `),nge=n(HU,"STRONG",{});var sct=s(nge);mQo=r(sct,"not"),sct.forEach(t),gQo=r(HU,` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=n(HU,"A",{href:!0});var lct=s(PG);hQo=r(lct,"from_pretrained()"),lct.forEach(t),pQo=r(HU," to load the model weights."),HU.forEach(t),_Qo=i(Al),sge=n(Al,"P",{});var ict=s(sge);uQo=r(ict,"Examples:"),ict.forEach(t),bQo=i(Al),m(g0.$$.fragment,Al),Al.forEach(t),FQo=i(wl),Ze=n(wl,"DIV",{class:!0});var ra=s(Ze);m(h0.$$.fragment,ra),vQo=i(ra),lge=n(ra,"P",{});var dct=s(lge);TQo=r(dct,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),dct.forEach(t),MQo=i(ra),ln=n(ra,"P",{});var QE=s(ln);EQo=r(QE,"The model class to instantiate is selected based on the "),ige=n(QE,"CODE",{});var cct=s(ige);CQo=r(cct,"model_type"),cct.forEach(t),wQo=r(QE,` property of the config object (either
passed as an argument or loaded from `),dge=n(QE,"CODE",{});var fct=s(dge);AQo=r(fct,"pretrained_model_name_or_path"),fct.forEach(t),yQo=r(QE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=n(QE,"CODE",{});var mct=s(cge);LQo=r(mct,"pretrained_model_name_or_path"),mct.forEach(t),xQo=r(QE,":"),QE.forEach(t),kQo=i(ra),p0=n(ra,"UL",{});var w$e=s(p0);K3=n(w$e,"LI",{});var A8e=s(K3);fge=n(A8e,"STRONG",{});var gct=s(fge);SQo=r(gct,"speech-encoder-decoder"),gct.forEach(t),RQo=r(A8e," \u2014 "),$G=n(A8e,"A",{href:!0});var hct=s($G);BQo=r(hct,"SpeechEncoderDecoderModel"),hct.forEach(t),PQo=r(A8e," (Speech Encoder decoder model)"),A8e.forEach(t),$Qo=i(w$e),Z3=n(w$e,"LI",{});var y8e=s(Z3);mge=n(y8e,"STRONG",{});var pct=s(mge);IQo=r(pct,"speech_to_text"),pct.forEach(t),qQo=r(y8e," \u2014 "),IG=n(y8e,"A",{href:!0});var _ct=s(IG);NQo=r(_ct,"Speech2TextForConditionalGeneration"),_ct.forEach(t),jQo=r(y8e," (Speech2Text model)"),y8e.forEach(t),w$e.forEach(t),DQo=i(ra),e2=n(ra,"P",{});var L8e=s(e2);GQo=r(L8e,"The model is set in evaluation mode by default using "),gge=n(L8e,"CODE",{});var uct=s(gge);OQo=r(uct,"model.eval()"),uct.forEach(t),VQo=r(L8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=n(L8e,"CODE",{});var bct=s(hge);XQo=r(bct,"model.train()"),bct.forEach(t),L8e.forEach(t),zQo=i(ra),pge=n(ra,"P",{});var Fct=s(pge);QQo=r(Fct,"Examples:"),Fct.forEach(t),WQo=i(ra),m(_0.$$.fragment,ra),ra.forEach(t),wl.forEach(t),_Be=i(c),Wd=n(c,"H2",{class:!0});var A$e=s(Wd);o2=n(A$e,"A",{id:!0,class:!0,href:!0});var vct=s(o2);_ge=n(vct,"SPAN",{});var Tct=s(_ge);m(u0.$$.fragment,Tct),Tct.forEach(t),vct.forEach(t),HQo=i(A$e),uge=n(A$e,"SPAN",{});var Mct=s(uge);UQo=r(Mct,"AutoModelForAudioXVector"),Mct.forEach(t),A$e.forEach(t),uBe=i(c),gr=n(c,"DIV",{class:!0});var yl=s(gr);m(b0.$$.fragment,yl),JQo=i(yl),Hd=n(yl,"P",{});var UU=s(Hd);YQo=r(UU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),qG=n(UU,"A",{href:!0});var Ect=s(qG);KQo=r(Ect,"from_pretrained()"),Ect.forEach(t),ZQo=r(UU," class method or the "),NG=n(UU,"A",{href:!0});var Cct=s(NG);eWo=r(Cct,"from_config()"),Cct.forEach(t),oWo=r(UU,` class
method.`),UU.forEach(t),rWo=i(yl),F0=n(yl,"P",{});var y$e=s(F0);tWo=r(y$e,"This class cannot be instantiated directly using "),bge=n(y$e,"CODE",{});var wct=s(bge);aWo=r(wct,"__init__()"),wct.forEach(t),nWo=r(y$e," (throws an error)."),y$e.forEach(t),sWo=i(yl),lt=n(yl,"DIV",{class:!0});var Ll=s(lt);m(v0.$$.fragment,Ll),lWo=i(Ll),Fge=n(Ll,"P",{});var Act=s(Fge);iWo=r(Act,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Act.forEach(t),dWo=i(Ll),Ud=n(Ll,"P",{});var JU=s(Ud);cWo=r(JU,`Note:
Loading a model from its configuration file does `),vge=n(JU,"STRONG",{});var yct=s(vge);fWo=r(yct,"not"),yct.forEach(t),mWo=r(JU,` load the model weights. It only affects the
model\u2019s configuration. Use `),jG=n(JU,"A",{href:!0});var Lct=s(jG);gWo=r(Lct,"from_pretrained()"),Lct.forEach(t),hWo=r(JU," to load the model weights."),JU.forEach(t),pWo=i(Ll),Tge=n(Ll,"P",{});var xct=s(Tge);_Wo=r(xct,"Examples:"),xct.forEach(t),uWo=i(Ll),m(T0.$$.fragment,Ll),Ll.forEach(t),bWo=i(yl),eo=n(yl,"DIV",{class:!0});var ta=s(eo);m(M0.$$.fragment,ta),FWo=i(ta),Mge=n(ta,"P",{});var kct=s(Mge);vWo=r(kct,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),kct.forEach(t),TWo=i(ta),dn=n(ta,"P",{});var WE=s(dn);MWo=r(WE,"The model class to instantiate is selected based on the "),Ege=n(WE,"CODE",{});var Sct=s(Ege);EWo=r(Sct,"model_type"),Sct.forEach(t),CWo=r(WE,` property of the config object (either
passed as an argument or loaded from `),Cge=n(WE,"CODE",{});var Rct=s(Cge);wWo=r(Rct,"pretrained_model_name_or_path"),Rct.forEach(t),AWo=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wge=n(WE,"CODE",{});var Bct=s(wge);yWo=r(Bct,"pretrained_model_name_or_path"),Bct.forEach(t),LWo=r(WE,":"),WE.forEach(t),xWo=i(ta),cn=n(ta,"UL",{});var HE=s(cn);r2=n(HE,"LI",{});var x8e=s(r2);Age=n(x8e,"STRONG",{});var Pct=s(Age);kWo=r(Pct,"data2vec-audio"),Pct.forEach(t),SWo=r(x8e," \u2014 "),DG=n(x8e,"A",{href:!0});var $ct=s(DG);RWo=r($ct,"Data2VecAudioForXVector"),$ct.forEach(t),BWo=r(x8e," (Data2VecAudio model)"),x8e.forEach(t),PWo=i(HE),t2=n(HE,"LI",{});var k8e=s(t2);yge=n(k8e,"STRONG",{});var Ict=s(yge);$Wo=r(Ict,"unispeech-sat"),Ict.forEach(t),IWo=r(k8e," \u2014 "),GG=n(k8e,"A",{href:!0});var qct=s(GG);qWo=r(qct,"UniSpeechSatForXVector"),qct.forEach(t),NWo=r(k8e," (UniSpeechSat model)"),k8e.forEach(t),jWo=i(HE),a2=n(HE,"LI",{});var S8e=s(a2);Lge=n(S8e,"STRONG",{});var Nct=s(Lge);DWo=r(Nct,"wav2vec2"),Nct.forEach(t),GWo=r(S8e," \u2014 "),OG=n(S8e,"A",{href:!0});var jct=s(OG);OWo=r(jct,"Wav2Vec2ForXVector"),jct.forEach(t),VWo=r(S8e," (Wav2Vec2 model)"),S8e.forEach(t),XWo=i(HE),n2=n(HE,"LI",{});var R8e=s(n2);xge=n(R8e,"STRONG",{});var Dct=s(xge);zWo=r(Dct,"wavlm"),Dct.forEach(t),QWo=r(R8e," \u2014 "),VG=n(R8e,"A",{href:!0});var Gct=s(VG);WWo=r(Gct,"WavLMForXVector"),Gct.forEach(t),HWo=r(R8e," (WavLM model)"),R8e.forEach(t),HE.forEach(t),UWo=i(ta),s2=n(ta,"P",{});var B8e=s(s2);JWo=r(B8e,"The model is set in evaluation mode by default using "),kge=n(B8e,"CODE",{});var Oct=s(kge);YWo=r(Oct,"model.eval()"),Oct.forEach(t),KWo=r(B8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sge=n(B8e,"CODE",{});var Vct=s(Sge);ZWo=r(Vct,"model.train()"),Vct.forEach(t),B8e.forEach(t),eHo=i(ta),Rge=n(ta,"P",{});var Xct=s(Rge);oHo=r(Xct,"Examples:"),Xct.forEach(t),rHo=i(ta),m(E0.$$.fragment,ta),ta.forEach(t),yl.forEach(t),bBe=i(c),Jd=n(c,"H2",{class:!0});var L$e=s(Jd);l2=n(L$e,"A",{id:!0,class:!0,href:!0});var zct=s(l2);Bge=n(zct,"SPAN",{});var Qct=s(Bge);m(C0.$$.fragment,Qct),Qct.forEach(t),zct.forEach(t),tHo=i(L$e),Pge=n(L$e,"SPAN",{});var Wct=s(Pge);aHo=r(Wct,"AutoModelForMaskedImageModeling"),Wct.forEach(t),L$e.forEach(t),FBe=i(c),hr=n(c,"DIV",{class:!0});var xl=s(hr);m(w0.$$.fragment,xl),nHo=i(xl),Yd=n(xl,"P",{});var YU=s(Yd);sHo=r(YU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),XG=n(YU,"A",{href:!0});var Hct=s(XG);lHo=r(Hct,"from_pretrained()"),Hct.forEach(t),iHo=r(YU," class method or the "),zG=n(YU,"A",{href:!0});var Uct=s(zG);dHo=r(Uct,"from_config()"),Uct.forEach(t),cHo=r(YU,` class
method.`),YU.forEach(t),fHo=i(xl),A0=n(xl,"P",{});var x$e=s(A0);mHo=r(x$e,"This class cannot be instantiated directly using "),$ge=n(x$e,"CODE",{});var Jct=s($ge);gHo=r(Jct,"__init__()"),Jct.forEach(t),hHo=r(x$e," (throws an error)."),x$e.forEach(t),pHo=i(xl),it=n(xl,"DIV",{class:!0});var kl=s(it);m(y0.$$.fragment,kl),_Ho=i(kl),Ige=n(kl,"P",{});var Yct=s(Ige);uHo=r(Yct,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Yct.forEach(t),bHo=i(kl),Kd=n(kl,"P",{});var KU=s(Kd);FHo=r(KU,`Note:
Loading a model from its configuration file does `),qge=n(KU,"STRONG",{});var Kct=s(qge);vHo=r(Kct,"not"),Kct.forEach(t),THo=r(KU,` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=n(KU,"A",{href:!0});var Zct=s(QG);MHo=r(Zct,"from_pretrained()"),Zct.forEach(t),EHo=r(KU," to load the model weights."),KU.forEach(t),CHo=i(kl),Nge=n(kl,"P",{});var eft=s(Nge);wHo=r(eft,"Examples:"),eft.forEach(t),AHo=i(kl),m(L0.$$.fragment,kl),kl.forEach(t),yHo=i(xl),oo=n(xl,"DIV",{class:!0});var aa=s(oo);m(x0.$$.fragment,aa),LHo=i(aa),jge=n(aa,"P",{});var oft=s(jge);xHo=r(oft,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),oft.forEach(t),kHo=i(aa),fn=n(aa,"P",{});var UE=s(fn);SHo=r(UE,"The model class to instantiate is selected based on the "),Dge=n(UE,"CODE",{});var rft=s(Dge);RHo=r(rft,"model_type"),rft.forEach(t),BHo=r(UE,` property of the config object (either
passed as an argument or loaded from `),Gge=n(UE,"CODE",{});var tft=s(Gge);PHo=r(tft,"pretrained_model_name_or_path"),tft.forEach(t),$Ho=r(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=n(UE,"CODE",{});var aft=s(Oge);IHo=r(aft,"pretrained_model_name_or_path"),aft.forEach(t),qHo=r(UE,":"),UE.forEach(t),NHo=i(aa),Zd=n(aa,"UL",{});var ZU=s(Zd);i2=n(ZU,"LI",{});var P8e=s(i2);Vge=n(P8e,"STRONG",{});var nft=s(Vge);jHo=r(nft,"deit"),nft.forEach(t),DHo=r(P8e," \u2014 "),WG=n(P8e,"A",{href:!0});var sft=s(WG);GHo=r(sft,"DeiTForMaskedImageModeling"),sft.forEach(t),OHo=r(P8e," (DeiT model)"),P8e.forEach(t),VHo=i(ZU),d2=n(ZU,"LI",{});var $8e=s(d2);Xge=n($8e,"STRONG",{});var lft=s(Xge);XHo=r(lft,"swin"),lft.forEach(t),zHo=r($8e," \u2014 "),HG=n($8e,"A",{href:!0});var ift=s(HG);QHo=r(ift,"SwinForMaskedImageModeling"),ift.forEach(t),WHo=r($8e," (Swin model)"),$8e.forEach(t),HHo=i(ZU),c2=n(ZU,"LI",{});var I8e=s(c2);zge=n(I8e,"STRONG",{});var dft=s(zge);UHo=r(dft,"vit"),dft.forEach(t),JHo=r(I8e," \u2014 "),UG=n(I8e,"A",{href:!0});var cft=s(UG);YHo=r(cft,"ViTForMaskedImageModeling"),cft.forEach(t),KHo=r(I8e," (ViT model)"),I8e.forEach(t),ZU.forEach(t),ZHo=i(aa),f2=n(aa,"P",{});var q8e=s(f2);eUo=r(q8e,"The model is set in evaluation mode by default using "),Qge=n(q8e,"CODE",{});var fft=s(Qge);oUo=r(fft,"model.eval()"),fft.forEach(t),rUo=r(q8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wge=n(q8e,"CODE",{});var mft=s(Wge);tUo=r(mft,"model.train()"),mft.forEach(t),q8e.forEach(t),aUo=i(aa),Hge=n(aa,"P",{});var gft=s(Hge);nUo=r(gft,"Examples:"),gft.forEach(t),sUo=i(aa),m(k0.$$.fragment,aa),aa.forEach(t),xl.forEach(t),vBe=i(c),ec=n(c,"H2",{class:!0});var k$e=s(ec);m2=n(k$e,"A",{id:!0,class:!0,href:!0});var hft=s(m2);Uge=n(hft,"SPAN",{});var pft=s(Uge);m(S0.$$.fragment,pft),pft.forEach(t),hft.forEach(t),lUo=i(k$e),Jge=n(k$e,"SPAN",{});var _ft=s(Jge);iUo=r(_ft,"AutoModelForObjectDetection"),_ft.forEach(t),k$e.forEach(t),TBe=i(c),pr=n(c,"DIV",{class:!0});var Sl=s(pr);m(R0.$$.fragment,Sl),dUo=i(Sl),oc=n(Sl,"P",{});var eJ=s(oc);cUo=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),JG=n(eJ,"A",{href:!0});var uft=s(JG);fUo=r(uft,"from_pretrained()"),uft.forEach(t),mUo=r(eJ," class method or the "),YG=n(eJ,"A",{href:!0});var bft=s(YG);gUo=r(bft,"from_config()"),bft.forEach(t),hUo=r(eJ,` class
method.`),eJ.forEach(t),pUo=i(Sl),B0=n(Sl,"P",{});var S$e=s(B0);_Uo=r(S$e,"This class cannot be instantiated directly using "),Yge=n(S$e,"CODE",{});var Fft=s(Yge);uUo=r(Fft,"__init__()"),Fft.forEach(t),bUo=r(S$e," (throws an error)."),S$e.forEach(t),FUo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Rl=s(dt);m(P0.$$.fragment,Rl),vUo=i(Rl),Kge=n(Rl,"P",{});var vft=s(Kge);TUo=r(vft,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),vft.forEach(t),MUo=i(Rl),rc=n(Rl,"P",{});var oJ=s(rc);EUo=r(oJ,`Note:
Loading a model from its configuration file does `),Zge=n(oJ,"STRONG",{});var Tft=s(Zge);CUo=r(Tft,"not"),Tft.forEach(t),wUo=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=n(oJ,"A",{href:!0});var Mft=s(KG);AUo=r(Mft,"from_pretrained()"),Mft.forEach(t),yUo=r(oJ," to load the model weights."),oJ.forEach(t),LUo=i(Rl),ehe=n(Rl,"P",{});var Eft=s(ehe);xUo=r(Eft,"Examples:"),Eft.forEach(t),kUo=i(Rl),m($0.$$.fragment,Rl),Rl.forEach(t),SUo=i(Sl),ro=n(Sl,"DIV",{class:!0});var na=s(ro);m(I0.$$.fragment,na),RUo=i(na),ohe=n(na,"P",{});var Cft=s(ohe);BUo=r(Cft,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Cft.forEach(t),PUo=i(na),mn=n(na,"P",{});var JE=s(mn);$Uo=r(JE,"The model class to instantiate is selected based on the "),rhe=n(JE,"CODE",{});var wft=s(rhe);IUo=r(wft,"model_type"),wft.forEach(t),qUo=r(JE,` property of the config object (either
passed as an argument or loaded from `),the=n(JE,"CODE",{});var Aft=s(the);NUo=r(Aft,"pretrained_model_name_or_path"),Aft.forEach(t),jUo=r(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ahe=n(JE,"CODE",{});var yft=s(ahe);DUo=r(yft,"pretrained_model_name_or_path"),yft.forEach(t),GUo=r(JE,":"),JE.forEach(t),OUo=i(na),nhe=n(na,"UL",{});var Lft=s(nhe);g2=n(Lft,"LI",{});var N8e=s(g2);she=n(N8e,"STRONG",{});var xft=s(she);VUo=r(xft,"detr"),xft.forEach(t),XUo=r(N8e," \u2014 "),ZG=n(N8e,"A",{href:!0});var kft=s(ZG);zUo=r(kft,"DetrForObjectDetection"),kft.forEach(t),QUo=r(N8e," (DETR model)"),N8e.forEach(t),Lft.forEach(t),WUo=i(na),h2=n(na,"P",{});var j8e=s(h2);HUo=r(j8e,"The model is set in evaluation mode by default using "),lhe=n(j8e,"CODE",{});var Sft=s(lhe);UUo=r(Sft,"model.eval()"),Sft.forEach(t),JUo=r(j8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ihe=n(j8e,"CODE",{});var Rft=s(ihe);YUo=r(Rft,"model.train()"),Rft.forEach(t),j8e.forEach(t),KUo=i(na),dhe=n(na,"P",{});var Bft=s(dhe);ZUo=r(Bft,"Examples:"),Bft.forEach(t),eJo=i(na),m(q0.$$.fragment,na),na.forEach(t),Sl.forEach(t),MBe=i(c),tc=n(c,"H2",{class:!0});var R$e=s(tc);p2=n(R$e,"A",{id:!0,class:!0,href:!0});var Pft=s(p2);che=n(Pft,"SPAN",{});var $ft=s(che);m(N0.$$.fragment,$ft),$ft.forEach(t),Pft.forEach(t),oJo=i(R$e),fhe=n(R$e,"SPAN",{});var Ift=s(fhe);rJo=r(Ift,"AutoModelForImageSegmentation"),Ift.forEach(t),R$e.forEach(t),EBe=i(c),_r=n(c,"DIV",{class:!0});var Bl=s(_r);m(j0.$$.fragment,Bl),tJo=i(Bl),ac=n(Bl,"P",{});var rJ=s(ac);aJo=r(rJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),eO=n(rJ,"A",{href:!0});var qft=s(eO);nJo=r(qft,"from_pretrained()"),qft.forEach(t),sJo=r(rJ," class method or the "),oO=n(rJ,"A",{href:!0});var Nft=s(oO);lJo=r(Nft,"from_config()"),Nft.forEach(t),iJo=r(rJ,` class
method.`),rJ.forEach(t),dJo=i(Bl),D0=n(Bl,"P",{});var B$e=s(D0);cJo=r(B$e,"This class cannot be instantiated directly using "),mhe=n(B$e,"CODE",{});var jft=s(mhe);fJo=r(jft,"__init__()"),jft.forEach(t),mJo=r(B$e," (throws an error)."),B$e.forEach(t),gJo=i(Bl),ct=n(Bl,"DIV",{class:!0});var Pl=s(ct);m(G0.$$.fragment,Pl),hJo=i(Pl),ghe=n(Pl,"P",{});var Dft=s(ghe);pJo=r(Dft,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Dft.forEach(t),_Jo=i(Pl),nc=n(Pl,"P",{});var tJ=s(nc);uJo=r(tJ,`Note:
Loading a model from its configuration file does `),hhe=n(tJ,"STRONG",{});var Gft=s(hhe);bJo=r(Gft,"not"),Gft.forEach(t),FJo=r(tJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rO=n(tJ,"A",{href:!0});var Oft=s(rO);vJo=r(Oft,"from_pretrained()"),Oft.forEach(t),TJo=r(tJ," to load the model weights."),tJ.forEach(t),MJo=i(Pl),phe=n(Pl,"P",{});var Vft=s(phe);EJo=r(Vft,"Examples:"),Vft.forEach(t),CJo=i(Pl),m(O0.$$.fragment,Pl),Pl.forEach(t),wJo=i(Bl),to=n(Bl,"DIV",{class:!0});var sa=s(to);m(V0.$$.fragment,sa),AJo=i(sa),_he=n(sa,"P",{});var Xft=s(_he);yJo=r(Xft,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Xft.forEach(t),LJo=i(sa),gn=n(sa,"P",{});var YE=s(gn);xJo=r(YE,"The model class to instantiate is selected based on the "),uhe=n(YE,"CODE",{});var zft=s(uhe);kJo=r(zft,"model_type"),zft.forEach(t),SJo=r(YE,` property of the config object (either
passed as an argument or loaded from `),bhe=n(YE,"CODE",{});var Qft=s(bhe);RJo=r(Qft,"pretrained_model_name_or_path"),Qft.forEach(t),BJo=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=n(YE,"CODE",{});var Wft=s(Fhe);PJo=r(Wft,"pretrained_model_name_or_path"),Wft.forEach(t),$Jo=r(YE,":"),YE.forEach(t),IJo=i(sa),vhe=n(sa,"UL",{});var Hft=s(vhe);_2=n(Hft,"LI",{});var D8e=s(_2);The=n(D8e,"STRONG",{});var Uft=s(The);qJo=r(Uft,"detr"),Uft.forEach(t),NJo=r(D8e," \u2014 "),tO=n(D8e,"A",{href:!0});var Jft=s(tO);jJo=r(Jft,"DetrForSegmentation"),Jft.forEach(t),DJo=r(D8e," (DETR model)"),D8e.forEach(t),Hft.forEach(t),GJo=i(sa),u2=n(sa,"P",{});var G8e=s(u2);OJo=r(G8e,"The model is set in evaluation mode by default using "),Mhe=n(G8e,"CODE",{});var Yft=s(Mhe);VJo=r(Yft,"model.eval()"),Yft.forEach(t),XJo=r(G8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ehe=n(G8e,"CODE",{});var Kft=s(Ehe);zJo=r(Kft,"model.train()"),Kft.forEach(t),G8e.forEach(t),QJo=i(sa),Che=n(sa,"P",{});var Zft=s(Che);WJo=r(Zft,"Examples:"),Zft.forEach(t),HJo=i(sa),m(X0.$$.fragment,sa),sa.forEach(t),Bl.forEach(t),CBe=i(c),sc=n(c,"H2",{class:!0});var P$e=s(sc);b2=n(P$e,"A",{id:!0,class:!0,href:!0});var emt=s(b2);whe=n(emt,"SPAN",{});var omt=s(whe);m(z0.$$.fragment,omt),omt.forEach(t),emt.forEach(t),UJo=i(P$e),Ahe=n(P$e,"SPAN",{});var rmt=s(Ahe);JJo=r(rmt,"AutoModelForSemanticSegmentation"),rmt.forEach(t),P$e.forEach(t),wBe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(Q0.$$.fragment,$l),YJo=i($l),lc=n($l,"P",{});var aJ=s(lc);KJo=r(aJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),aO=n(aJ,"A",{href:!0});var tmt=s(aO);ZJo=r(tmt,"from_pretrained()"),tmt.forEach(t),eYo=r(aJ," class method or the "),nO=n(aJ,"A",{href:!0});var amt=s(nO);oYo=r(amt,"from_config()"),amt.forEach(t),rYo=r(aJ,` class
method.`),aJ.forEach(t),tYo=i($l),W0=n($l,"P",{});var $$e=s(W0);aYo=r($$e,"This class cannot be instantiated directly using "),yhe=n($$e,"CODE",{});var nmt=s(yhe);nYo=r(nmt,"__init__()"),nmt.forEach(t),sYo=r($$e," (throws an error)."),$$e.forEach(t),lYo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(H0.$$.fragment,Il),iYo=i(Il),Lhe=n(Il,"P",{});var smt=s(Lhe);dYo=r(smt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),smt.forEach(t),cYo=i(Il),ic=n(Il,"P",{});var nJ=s(ic);fYo=r(nJ,`Note:
Loading a model from its configuration file does `),xhe=n(nJ,"STRONG",{});var lmt=s(xhe);mYo=r(lmt,"not"),lmt.forEach(t),gYo=r(nJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=n(nJ,"A",{href:!0});var imt=s(sO);hYo=r(imt,"from_pretrained()"),imt.forEach(t),pYo=r(nJ," to load the model weights."),nJ.forEach(t),_Yo=i(Il),khe=n(Il,"P",{});var dmt=s(khe);uYo=r(dmt,"Examples:"),dmt.forEach(t),bYo=i(Il),m(U0.$$.fragment,Il),Il.forEach(t),FYo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(J0.$$.fragment,la),vYo=i(la),She=n(la,"P",{});var cmt=s(She);TYo=r(cmt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),cmt.forEach(t),MYo=i(la),hn=n(la,"P",{});var KE=s(hn);EYo=r(KE,"The model class to instantiate is selected based on the "),Rhe=n(KE,"CODE",{});var fmt=s(Rhe);CYo=r(fmt,"model_type"),fmt.forEach(t),wYo=r(KE,` property of the config object (either
passed as an argument or loaded from `),Bhe=n(KE,"CODE",{});var mmt=s(Bhe);AYo=r(mmt,"pretrained_model_name_or_path"),mmt.forEach(t),yYo=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Phe=n(KE,"CODE",{});var gmt=s(Phe);LYo=r(gmt,"pretrained_model_name_or_path"),gmt.forEach(t),xYo=r(KE,":"),KE.forEach(t),kYo=i(la),dc=n(la,"UL",{});var sJ=s(dc);F2=n(sJ,"LI",{});var O8e=s(F2);$he=n(O8e,"STRONG",{});var hmt=s($he);SYo=r(hmt,"beit"),hmt.forEach(t),RYo=r(O8e," \u2014 "),lO=n(O8e,"A",{href:!0});var pmt=s(lO);BYo=r(pmt,"BeitForSemanticSegmentation"),pmt.forEach(t),PYo=r(O8e," (BEiT model)"),O8e.forEach(t),$Yo=i(sJ),v2=n(sJ,"LI",{});var V8e=s(v2);Ihe=n(V8e,"STRONG",{});var _mt=s(Ihe);IYo=r(_mt,"dpt"),_mt.forEach(t),qYo=r(V8e," \u2014 "),iO=n(V8e,"A",{href:!0});var umt=s(iO);NYo=r(umt,"DPTForSemanticSegmentation"),umt.forEach(t),jYo=r(V8e," (DPT model)"),V8e.forEach(t),DYo=i(sJ),T2=n(sJ,"LI",{});var X8e=s(T2);qhe=n(X8e,"STRONG",{});var bmt=s(qhe);GYo=r(bmt,"segformer"),bmt.forEach(t),OYo=r(X8e," \u2014 "),dO=n(X8e,"A",{href:!0});var Fmt=s(dO);VYo=r(Fmt,"SegformerForSemanticSegmentation"),Fmt.forEach(t),XYo=r(X8e," (SegFormer model)"),X8e.forEach(t),sJ.forEach(t),zYo=i(la),M2=n(la,"P",{});var z8e=s(M2);QYo=r(z8e,"The model is set in evaluation mode by default using "),Nhe=n(z8e,"CODE",{});var vmt=s(Nhe);WYo=r(vmt,"model.eval()"),vmt.forEach(t),HYo=r(z8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jhe=n(z8e,"CODE",{});var Tmt=s(jhe);UYo=r(Tmt,"model.train()"),Tmt.forEach(t),z8e.forEach(t),JYo=i(la),Dhe=n(la,"P",{});var Mmt=s(Dhe);YYo=r(Mmt,"Examples:"),Mmt.forEach(t),KYo=i(la),m(Y0.$$.fragment,la),la.forEach(t),$l.forEach(t),ABe=i(c),cc=n(c,"H2",{class:!0});var I$e=s(cc);E2=n(I$e,"A",{id:!0,class:!0,href:!0});var Emt=s(E2);Ghe=n(Emt,"SPAN",{});var Cmt=s(Ghe);m(K0.$$.fragment,Cmt),Cmt.forEach(t),Emt.forEach(t),ZYo=i(I$e),Ohe=n(I$e,"SPAN",{});var wmt=s(Ohe);eKo=r(wmt,"AutoModelForInstanceSegmentation"),wmt.forEach(t),I$e.forEach(t),yBe=i(c),br=n(c,"DIV",{class:!0});var ql=s(br);m(Z0.$$.fragment,ql),oKo=i(ql),fc=n(ql,"P",{});var lJ=s(fc);rKo=r(lJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),cO=n(lJ,"A",{href:!0});var Amt=s(cO);tKo=r(Amt,"from_pretrained()"),Amt.forEach(t),aKo=r(lJ," class method or the "),fO=n(lJ,"A",{href:!0});var ymt=s(fO);nKo=r(ymt,"from_config()"),ymt.forEach(t),sKo=r(lJ,` class
method.`),lJ.forEach(t),lKo=i(ql),ey=n(ql,"P",{});var q$e=s(ey);iKo=r(q$e,"This class cannot be instantiated directly using "),Vhe=n(q$e,"CODE",{});var Lmt=s(Vhe);dKo=r(Lmt,"__init__()"),Lmt.forEach(t),cKo=r(q$e," (throws an error)."),q$e.forEach(t),fKo=i(ql),mt=n(ql,"DIV",{class:!0});var Nl=s(mt);m(oy.$$.fragment,Nl),mKo=i(Nl),Xhe=n(Nl,"P",{});var xmt=s(Xhe);gKo=r(xmt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),xmt.forEach(t),hKo=i(Nl),mc=n(Nl,"P",{});var iJ=s(mc);pKo=r(iJ,`Note:
Loading a model from its configuration file does `),zhe=n(iJ,"STRONG",{});var kmt=s(zhe);_Ko=r(kmt,"not"),kmt.forEach(t),uKo=r(iJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=n(iJ,"A",{href:!0});var Smt=s(mO);bKo=r(Smt,"from_pretrained()"),Smt.forEach(t),FKo=r(iJ," to load the model weights."),iJ.forEach(t),vKo=i(Nl),Qhe=n(Nl,"P",{});var Rmt=s(Qhe);TKo=r(Rmt,"Examples:"),Rmt.forEach(t),MKo=i(Nl),m(ry.$$.fragment,Nl),Nl.forEach(t),EKo=i(ql),no=n(ql,"DIV",{class:!0});var ia=s(no);m(ty.$$.fragment,ia),CKo=i(ia),Whe=n(ia,"P",{});var Bmt=s(Whe);wKo=r(Bmt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Bmt.forEach(t),AKo=i(ia),pn=n(ia,"P",{});var ZE=s(pn);yKo=r(ZE,"The model class to instantiate is selected based on the "),Hhe=n(ZE,"CODE",{});var Pmt=s(Hhe);LKo=r(Pmt,"model_type"),Pmt.forEach(t),xKo=r(ZE,` property of the config object (either
passed as an argument or loaded from `),Uhe=n(ZE,"CODE",{});var $mt=s(Uhe);kKo=r($mt,"pretrained_model_name_or_path"),$mt.forEach(t),SKo=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=n(ZE,"CODE",{});var Imt=s(Jhe);RKo=r(Imt,"pretrained_model_name_or_path"),Imt.forEach(t),BKo=r(ZE,":"),ZE.forEach(t),PKo=i(ia),Yhe=n(ia,"UL",{});var qmt=s(Yhe);C2=n(qmt,"LI",{});var Q8e=s(C2);Khe=n(Q8e,"STRONG",{});var Nmt=s(Khe);$Ko=r(Nmt,"maskformer"),Nmt.forEach(t),IKo=r(Q8e," \u2014 "),gO=n(Q8e,"A",{href:!0});var jmt=s(gO);qKo=r(jmt,"MaskFormerForInstanceSegmentation"),jmt.forEach(t),NKo=r(Q8e," (MaskFormer model)"),Q8e.forEach(t),qmt.forEach(t),jKo=i(ia),w2=n(ia,"P",{});var W8e=s(w2);DKo=r(W8e,"The model is set in evaluation mode by default using "),Zhe=n(W8e,"CODE",{});var Dmt=s(Zhe);GKo=r(Dmt,"model.eval()"),Dmt.forEach(t),OKo=r(W8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=n(W8e,"CODE",{});var Gmt=s(epe);VKo=r(Gmt,"model.train()"),Gmt.forEach(t),W8e.forEach(t),XKo=i(ia),ope=n(ia,"P",{});var Omt=s(ope);zKo=r(Omt,"Examples:"),Omt.forEach(t),QKo=i(ia),m(ay.$$.fragment,ia),ia.forEach(t),ql.forEach(t),LBe=i(c),gc=n(c,"H2",{class:!0});var N$e=s(gc);A2=n(N$e,"A",{id:!0,class:!0,href:!0});var Vmt=s(A2);rpe=n(Vmt,"SPAN",{});var Xmt=s(rpe);m(ny.$$.fragment,Xmt),Xmt.forEach(t),Vmt.forEach(t),WKo=i(N$e),tpe=n(N$e,"SPAN",{});var zmt=s(tpe);HKo=r(zmt,"TFAutoModel"),zmt.forEach(t),N$e.forEach(t),xBe=i(c),Fr=n(c,"DIV",{class:!0});var jl=s(Fr);m(sy.$$.fragment,jl),UKo=i(jl),hc=n(jl,"P",{});var dJ=s(hc);JKo=r(dJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hO=n(dJ,"A",{href:!0});var Qmt=s(hO);YKo=r(Qmt,"from_pretrained()"),Qmt.forEach(t),KKo=r(dJ," class method or the "),pO=n(dJ,"A",{href:!0});var Wmt=s(pO);ZKo=r(Wmt,"from_config()"),Wmt.forEach(t),eZo=r(dJ,` class
method.`),dJ.forEach(t),oZo=i(jl),ly=n(jl,"P",{});var j$e=s(ly);rZo=r(j$e,"This class cannot be instantiated directly using "),ape=n(j$e,"CODE",{});var Hmt=s(ape);tZo=r(Hmt,"__init__()"),Hmt.forEach(t),aZo=r(j$e," (throws an error)."),j$e.forEach(t),nZo=i(jl),gt=n(jl,"DIV",{class:!0});var Dl=s(gt);m(iy.$$.fragment,Dl),sZo=i(Dl),npe=n(Dl,"P",{});var Umt=s(npe);lZo=r(Umt,"Instantiates one of the base model classes of the library from a configuration."),Umt.forEach(t),iZo=i(Dl),pc=n(Dl,"P",{});var cJ=s(pc);dZo=r(cJ,`Note:
Loading a model from its configuration file does `),spe=n(cJ,"STRONG",{});var Jmt=s(spe);cZo=r(Jmt,"not"),Jmt.forEach(t),fZo=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_O=n(cJ,"A",{href:!0});var Ymt=s(_O);mZo=r(Ymt,"from_pretrained()"),Ymt.forEach(t),gZo=r(cJ," to load the model weights."),cJ.forEach(t),hZo=i(Dl),lpe=n(Dl,"P",{});var Kmt=s(lpe);pZo=r(Kmt,"Examples:"),Kmt.forEach(t),_Zo=i(Dl),m(dy.$$.fragment,Dl),Dl.forEach(t),uZo=i(jl),ho=n(jl,"DIV",{class:!0});var pa=s(ho);m(cy.$$.fragment,pa),bZo=i(pa),ipe=n(pa,"P",{});var Zmt=s(ipe);FZo=r(Zmt,"Instantiate one of the base model classes of the library from a pretrained model."),Zmt.forEach(t),vZo=i(pa),_n=n(pa,"P",{});var eC=s(_n);TZo=r(eC,"The model class to instantiate is selected based on the "),dpe=n(eC,"CODE",{});var egt=s(dpe);MZo=r(egt,"model_type"),egt.forEach(t),EZo=r(eC,` property of the config object (either
passed as an argument or loaded from `),cpe=n(eC,"CODE",{});var ogt=s(cpe);CZo=r(ogt,"pretrained_model_name_or_path"),ogt.forEach(t),wZo=r(eC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=n(eC,"CODE",{});var rgt=s(fpe);AZo=r(rgt,"pretrained_model_name_or_path"),rgt.forEach(t),yZo=r(eC,":"),eC.forEach(t),LZo=i(pa),x=n(pa,"UL",{});var k=s(x);y2=n(k,"LI",{});var H8e=s(y2);mpe=n(H8e,"STRONG",{});var tgt=s(mpe);xZo=r(tgt,"albert"),tgt.forEach(t),kZo=r(H8e," \u2014 "),uO=n(H8e,"A",{href:!0});var agt=s(uO);SZo=r(agt,"TFAlbertModel"),agt.forEach(t),RZo=r(H8e," (ALBERT model)"),H8e.forEach(t),BZo=i(k),L2=n(k,"LI",{});var U8e=s(L2);gpe=n(U8e,"STRONG",{});var ngt=s(gpe);PZo=r(ngt,"bart"),ngt.forEach(t),$Zo=r(U8e," \u2014 "),bO=n(U8e,"A",{href:!0});var sgt=s(bO);IZo=r(sgt,"TFBartModel"),sgt.forEach(t),qZo=r(U8e," (BART model)"),U8e.forEach(t),NZo=i(k),x2=n(k,"LI",{});var J8e=s(x2);hpe=n(J8e,"STRONG",{});var lgt=s(hpe);jZo=r(lgt,"bert"),lgt.forEach(t),DZo=r(J8e," \u2014 "),FO=n(J8e,"A",{href:!0});var igt=s(FO);GZo=r(igt,"TFBertModel"),igt.forEach(t),OZo=r(J8e," (BERT model)"),J8e.forEach(t),VZo=i(k),k2=n(k,"LI",{});var Y8e=s(k2);ppe=n(Y8e,"STRONG",{});var dgt=s(ppe);XZo=r(dgt,"blenderbot"),dgt.forEach(t),zZo=r(Y8e," \u2014 "),vO=n(Y8e,"A",{href:!0});var cgt=s(vO);QZo=r(cgt,"TFBlenderbotModel"),cgt.forEach(t),WZo=r(Y8e," (Blenderbot model)"),Y8e.forEach(t),HZo=i(k),S2=n(k,"LI",{});var K8e=s(S2);_pe=n(K8e,"STRONG",{});var fgt=s(_pe);UZo=r(fgt,"blenderbot-small"),fgt.forEach(t),JZo=r(K8e," \u2014 "),TO=n(K8e,"A",{href:!0});var mgt=s(TO);YZo=r(mgt,"TFBlenderbotSmallModel"),mgt.forEach(t),KZo=r(K8e," (BlenderbotSmall model)"),K8e.forEach(t),ZZo=i(k),R2=n(k,"LI",{});var Z8e=s(R2);upe=n(Z8e,"STRONG",{});var ggt=s(upe);eer=r(ggt,"camembert"),ggt.forEach(t),oer=r(Z8e," \u2014 "),MO=n(Z8e,"A",{href:!0});var hgt=s(MO);rer=r(hgt,"TFCamembertModel"),hgt.forEach(t),ter=r(Z8e," (CamemBERT model)"),Z8e.forEach(t),aer=i(k),B2=n(k,"LI",{});var e7e=s(B2);bpe=n(e7e,"STRONG",{});var pgt=s(bpe);ner=r(pgt,"clip"),pgt.forEach(t),ser=r(e7e," \u2014 "),EO=n(e7e,"A",{href:!0});var _gt=s(EO);ler=r(_gt,"TFCLIPModel"),_gt.forEach(t),ier=r(e7e," (CLIP model)"),e7e.forEach(t),der=i(k),P2=n(k,"LI",{});var o7e=s(P2);Fpe=n(o7e,"STRONG",{});var ugt=s(Fpe);cer=r(ugt,"convbert"),ugt.forEach(t),fer=r(o7e," \u2014 "),CO=n(o7e,"A",{href:!0});var bgt=s(CO);mer=r(bgt,"TFConvBertModel"),bgt.forEach(t),ger=r(o7e," (ConvBERT model)"),o7e.forEach(t),her=i(k),$2=n(k,"LI",{});var r7e=s($2);vpe=n(r7e,"STRONG",{});var Fgt=s(vpe);per=r(Fgt,"convnext"),Fgt.forEach(t),_er=r(r7e," \u2014 "),wO=n(r7e,"A",{href:!0});var vgt=s(wO);uer=r(vgt,"TFConvNextModel"),vgt.forEach(t),ber=r(r7e," (ConvNext model)"),r7e.forEach(t),Fer=i(k),I2=n(k,"LI",{});var t7e=s(I2);Tpe=n(t7e,"STRONG",{});var Tgt=s(Tpe);ver=r(Tgt,"ctrl"),Tgt.forEach(t),Ter=r(t7e," \u2014 "),AO=n(t7e,"A",{href:!0});var Mgt=s(AO);Mer=r(Mgt,"TFCTRLModel"),Mgt.forEach(t),Eer=r(t7e," (CTRL model)"),t7e.forEach(t),Cer=i(k),q2=n(k,"LI",{});var a7e=s(q2);Mpe=n(a7e,"STRONG",{});var Egt=s(Mpe);wer=r(Egt,"deberta"),Egt.forEach(t),Aer=r(a7e," \u2014 "),yO=n(a7e,"A",{href:!0});var Cgt=s(yO);yer=r(Cgt,"TFDebertaModel"),Cgt.forEach(t),Ler=r(a7e," (DeBERTa model)"),a7e.forEach(t),xer=i(k),N2=n(k,"LI",{});var n7e=s(N2);Epe=n(n7e,"STRONG",{});var wgt=s(Epe);ker=r(wgt,"deberta-v2"),wgt.forEach(t),Ser=r(n7e," \u2014 "),LO=n(n7e,"A",{href:!0});var Agt=s(LO);Rer=r(Agt,"TFDebertaV2Model"),Agt.forEach(t),Ber=r(n7e," (DeBERTa-v2 model)"),n7e.forEach(t),Per=i(k),j2=n(k,"LI",{});var s7e=s(j2);Cpe=n(s7e,"STRONG",{});var ygt=s(Cpe);$er=r(ygt,"distilbert"),ygt.forEach(t),Ier=r(s7e," \u2014 "),xO=n(s7e,"A",{href:!0});var Lgt=s(xO);qer=r(Lgt,"TFDistilBertModel"),Lgt.forEach(t),Ner=r(s7e," (DistilBERT model)"),s7e.forEach(t),jer=i(k),D2=n(k,"LI",{});var l7e=s(D2);wpe=n(l7e,"STRONG",{});var xgt=s(wpe);Der=r(xgt,"dpr"),xgt.forEach(t),Ger=r(l7e," \u2014 "),kO=n(l7e,"A",{href:!0});var kgt=s(kO);Oer=r(kgt,"TFDPRQuestionEncoder"),kgt.forEach(t),Ver=r(l7e," (DPR model)"),l7e.forEach(t),Xer=i(k),G2=n(k,"LI",{});var i7e=s(G2);Ape=n(i7e,"STRONG",{});var Sgt=s(Ape);zer=r(Sgt,"electra"),Sgt.forEach(t),Qer=r(i7e," \u2014 "),SO=n(i7e,"A",{href:!0});var Rgt=s(SO);Wer=r(Rgt,"TFElectraModel"),Rgt.forEach(t),Her=r(i7e," (ELECTRA model)"),i7e.forEach(t),Uer=i(k),O2=n(k,"LI",{});var d7e=s(O2);ype=n(d7e,"STRONG",{});var Bgt=s(ype);Jer=r(Bgt,"flaubert"),Bgt.forEach(t),Yer=r(d7e," \u2014 "),RO=n(d7e,"A",{href:!0});var Pgt=s(RO);Ker=r(Pgt,"TFFlaubertModel"),Pgt.forEach(t),Zer=r(d7e," (FlauBERT model)"),d7e.forEach(t),eor=i(k),Gs=n(k,"LI",{});var _9=s(Gs);Lpe=n(_9,"STRONG",{});var $gt=s(Lpe);oor=r($gt,"funnel"),$gt.forEach(t),ror=r(_9," \u2014 "),BO=n(_9,"A",{href:!0});var Igt=s(BO);tor=r(Igt,"TFFunnelModel"),Igt.forEach(t),aor=r(_9," or "),PO=n(_9,"A",{href:!0});var qgt=s(PO);nor=r(qgt,"TFFunnelBaseModel"),qgt.forEach(t),sor=r(_9," (Funnel Transformer model)"),_9.forEach(t),lor=i(k),V2=n(k,"LI",{});var c7e=s(V2);xpe=n(c7e,"STRONG",{});var Ngt=s(xpe);ior=r(Ngt,"gpt2"),Ngt.forEach(t),dor=r(c7e," \u2014 "),$O=n(c7e,"A",{href:!0});var jgt=s($O);cor=r(jgt,"TFGPT2Model"),jgt.forEach(t),mor=r(c7e," (OpenAI GPT-2 model)"),c7e.forEach(t),gor=i(k),X2=n(k,"LI",{});var f7e=s(X2);kpe=n(f7e,"STRONG",{});var Dgt=s(kpe);hor=r(Dgt,"gptj"),Dgt.forEach(t),por=r(f7e," \u2014 "),IO=n(f7e,"A",{href:!0});var Ggt=s(IO);_or=r(Ggt,"TFGPTJModel"),Ggt.forEach(t),uor=r(f7e," (GPT-J model)"),f7e.forEach(t),bor=i(k),z2=n(k,"LI",{});var m7e=s(z2);Spe=n(m7e,"STRONG",{});var Ogt=s(Spe);For=r(Ogt,"hubert"),Ogt.forEach(t),vor=r(m7e," \u2014 "),qO=n(m7e,"A",{href:!0});var Vgt=s(qO);Tor=r(Vgt,"TFHubertModel"),Vgt.forEach(t),Mor=r(m7e," (Hubert model)"),m7e.forEach(t),Eor=i(k),Q2=n(k,"LI",{});var g7e=s(Q2);Rpe=n(g7e,"STRONG",{});var Xgt=s(Rpe);Cor=r(Xgt,"layoutlm"),Xgt.forEach(t),wor=r(g7e," \u2014 "),NO=n(g7e,"A",{href:!0});var zgt=s(NO);Aor=r(zgt,"TFLayoutLMModel"),zgt.forEach(t),yor=r(g7e," (LayoutLM model)"),g7e.forEach(t),Lor=i(k),W2=n(k,"LI",{});var h7e=s(W2);Bpe=n(h7e,"STRONG",{});var Qgt=s(Bpe);xor=r(Qgt,"led"),Qgt.forEach(t),kor=r(h7e," \u2014 "),jO=n(h7e,"A",{href:!0});var Wgt=s(jO);Sor=r(Wgt,"TFLEDModel"),Wgt.forEach(t),Ror=r(h7e," (LED model)"),h7e.forEach(t),Bor=i(k),H2=n(k,"LI",{});var p7e=s(H2);Ppe=n(p7e,"STRONG",{});var Hgt=s(Ppe);Por=r(Hgt,"longformer"),Hgt.forEach(t),$or=r(p7e," \u2014 "),DO=n(p7e,"A",{href:!0});var Ugt=s(DO);Ior=r(Ugt,"TFLongformerModel"),Ugt.forEach(t),qor=r(p7e," (Longformer model)"),p7e.forEach(t),Nor=i(k),U2=n(k,"LI",{});var _7e=s(U2);$pe=n(_7e,"STRONG",{});var Jgt=s($pe);jor=r(Jgt,"lxmert"),Jgt.forEach(t),Dor=r(_7e," \u2014 "),GO=n(_7e,"A",{href:!0});var Ygt=s(GO);Gor=r(Ygt,"TFLxmertModel"),Ygt.forEach(t),Oor=r(_7e," (LXMERT model)"),_7e.forEach(t),Vor=i(k),J2=n(k,"LI",{});var u7e=s(J2);Ipe=n(u7e,"STRONG",{});var Kgt=s(Ipe);Xor=r(Kgt,"marian"),Kgt.forEach(t),zor=r(u7e," \u2014 "),OO=n(u7e,"A",{href:!0});var Zgt=s(OO);Qor=r(Zgt,"TFMarianModel"),Zgt.forEach(t),Wor=r(u7e," (Marian model)"),u7e.forEach(t),Hor=i(k),Y2=n(k,"LI",{});var b7e=s(Y2);qpe=n(b7e,"STRONG",{});var eht=s(qpe);Uor=r(eht,"mbart"),eht.forEach(t),Jor=r(b7e," \u2014 "),VO=n(b7e,"A",{href:!0});var oht=s(VO);Yor=r(oht,"TFMBartModel"),oht.forEach(t),Kor=r(b7e," (mBART model)"),b7e.forEach(t),Zor=i(k),K2=n(k,"LI",{});var F7e=s(K2);Npe=n(F7e,"STRONG",{});var rht=s(Npe);err=r(rht,"mobilebert"),rht.forEach(t),orr=r(F7e," \u2014 "),XO=n(F7e,"A",{href:!0});var tht=s(XO);rrr=r(tht,"TFMobileBertModel"),tht.forEach(t),trr=r(F7e," (MobileBERT model)"),F7e.forEach(t),arr=i(k),Z2=n(k,"LI",{});var v7e=s(Z2);jpe=n(v7e,"STRONG",{});var aht=s(jpe);nrr=r(aht,"mpnet"),aht.forEach(t),srr=r(v7e," \u2014 "),zO=n(v7e,"A",{href:!0});var nht=s(zO);lrr=r(nht,"TFMPNetModel"),nht.forEach(t),irr=r(v7e," (MPNet model)"),v7e.forEach(t),drr=i(k),eF=n(k,"LI",{});var T7e=s(eF);Dpe=n(T7e,"STRONG",{});var sht=s(Dpe);crr=r(sht,"mt5"),sht.forEach(t),frr=r(T7e," \u2014 "),QO=n(T7e,"A",{href:!0});var lht=s(QO);mrr=r(lht,"TFMT5Model"),lht.forEach(t),grr=r(T7e," (mT5 model)"),T7e.forEach(t),hrr=i(k),oF=n(k,"LI",{});var M7e=s(oF);Gpe=n(M7e,"STRONG",{});var iht=s(Gpe);prr=r(iht,"openai-gpt"),iht.forEach(t),_rr=r(M7e," \u2014 "),WO=n(M7e,"A",{href:!0});var dht=s(WO);urr=r(dht,"TFOpenAIGPTModel"),dht.forEach(t),brr=r(M7e," (OpenAI GPT model)"),M7e.forEach(t),Frr=i(k),rF=n(k,"LI",{});var E7e=s(rF);Ope=n(E7e,"STRONG",{});var cht=s(Ope);vrr=r(cht,"pegasus"),cht.forEach(t),Trr=r(E7e," \u2014 "),HO=n(E7e,"A",{href:!0});var fht=s(HO);Mrr=r(fht,"TFPegasusModel"),fht.forEach(t),Err=r(E7e," (Pegasus model)"),E7e.forEach(t),Crr=i(k),tF=n(k,"LI",{});var C7e=s(tF);Vpe=n(C7e,"STRONG",{});var mht=s(Vpe);wrr=r(mht,"rembert"),mht.forEach(t),Arr=r(C7e," \u2014 "),UO=n(C7e,"A",{href:!0});var ght=s(UO);yrr=r(ght,"TFRemBertModel"),ght.forEach(t),Lrr=r(C7e," (RemBERT model)"),C7e.forEach(t),xrr=i(k),aF=n(k,"LI",{});var w7e=s(aF);Xpe=n(w7e,"STRONG",{});var hht=s(Xpe);krr=r(hht,"roberta"),hht.forEach(t),Srr=r(w7e," \u2014 "),JO=n(w7e,"A",{href:!0});var pht=s(JO);Rrr=r(pht,"TFRobertaModel"),pht.forEach(t),Brr=r(w7e," (RoBERTa model)"),w7e.forEach(t),Prr=i(k),nF=n(k,"LI",{});var A7e=s(nF);zpe=n(A7e,"STRONG",{});var _ht=s(zpe);$rr=r(_ht,"roformer"),_ht.forEach(t),Irr=r(A7e," \u2014 "),YO=n(A7e,"A",{href:!0});var uht=s(YO);qrr=r(uht,"TFRoFormerModel"),uht.forEach(t),Nrr=r(A7e," (RoFormer model)"),A7e.forEach(t),jrr=i(k),sF=n(k,"LI",{});var y7e=s(sF);Qpe=n(y7e,"STRONG",{});var bht=s(Qpe);Drr=r(bht,"speech_to_text"),bht.forEach(t),Grr=r(y7e," \u2014 "),KO=n(y7e,"A",{href:!0});var Fht=s(KO);Orr=r(Fht,"TFSpeech2TextModel"),Fht.forEach(t),Vrr=r(y7e," (Speech2Text model)"),y7e.forEach(t),Xrr=i(k),lF=n(k,"LI",{});var L7e=s(lF);Wpe=n(L7e,"STRONG",{});var vht=s(Wpe);zrr=r(vht,"t5"),vht.forEach(t),Qrr=r(L7e," \u2014 "),ZO=n(L7e,"A",{href:!0});var Tht=s(ZO);Wrr=r(Tht,"TFT5Model"),Tht.forEach(t),Hrr=r(L7e," (T5 model)"),L7e.forEach(t),Urr=i(k),iF=n(k,"LI",{});var x7e=s(iF);Hpe=n(x7e,"STRONG",{});var Mht=s(Hpe);Jrr=r(Mht,"tapas"),Mht.forEach(t),Yrr=r(x7e," \u2014 "),eV=n(x7e,"A",{href:!0});var Eht=s(eV);Krr=r(Eht,"TFTapasModel"),Eht.forEach(t),Zrr=r(x7e," (TAPAS model)"),x7e.forEach(t),etr=i(k),dF=n(k,"LI",{});var k7e=s(dF);Upe=n(k7e,"STRONG",{});var Cht=s(Upe);otr=r(Cht,"transfo-xl"),Cht.forEach(t),rtr=r(k7e," \u2014 "),oV=n(k7e,"A",{href:!0});var wht=s(oV);ttr=r(wht,"TFTransfoXLModel"),wht.forEach(t),atr=r(k7e," (Transformer-XL model)"),k7e.forEach(t),ntr=i(k),cF=n(k,"LI",{});var S7e=s(cF);Jpe=n(S7e,"STRONG",{});var Aht=s(Jpe);str=r(Aht,"vit"),Aht.forEach(t),ltr=r(S7e," \u2014 "),rV=n(S7e,"A",{href:!0});var yht=s(rV);itr=r(yht,"TFViTModel"),yht.forEach(t),dtr=r(S7e," (ViT model)"),S7e.forEach(t),ctr=i(k),fF=n(k,"LI",{});var R7e=s(fF);Ype=n(R7e,"STRONG",{});var Lht=s(Ype);ftr=r(Lht,"vit_mae"),Lht.forEach(t),mtr=r(R7e," \u2014 "),tV=n(R7e,"A",{href:!0});var xht=s(tV);gtr=r(xht,"TFViTMAEModel"),xht.forEach(t),htr=r(R7e," (ViTMAE model)"),R7e.forEach(t),ptr=i(k),mF=n(k,"LI",{});var B7e=s(mF);Kpe=n(B7e,"STRONG",{});var kht=s(Kpe);_tr=r(kht,"wav2vec2"),kht.forEach(t),utr=r(B7e," \u2014 "),aV=n(B7e,"A",{href:!0});var Sht=s(aV);btr=r(Sht,"TFWav2Vec2Model"),Sht.forEach(t),Ftr=r(B7e," (Wav2Vec2 model)"),B7e.forEach(t),vtr=i(k),gF=n(k,"LI",{});var P7e=s(gF);Zpe=n(P7e,"STRONG",{});var Rht=s(Zpe);Ttr=r(Rht,"xglm"),Rht.forEach(t),Mtr=r(P7e," \u2014 "),nV=n(P7e,"A",{href:!0});var Bht=s(nV);Etr=r(Bht,"TFXGLMModel"),Bht.forEach(t),Ctr=r(P7e," (XGLM model)"),P7e.forEach(t),wtr=i(k),hF=n(k,"LI",{});var $7e=s(hF);e_e=n($7e,"STRONG",{});var Pht=s(e_e);Atr=r(Pht,"xlm"),Pht.forEach(t),ytr=r($7e," \u2014 "),sV=n($7e,"A",{href:!0});var $ht=s(sV);Ltr=r($ht,"TFXLMModel"),$ht.forEach(t),xtr=r($7e," (XLM model)"),$7e.forEach(t),ktr=i(k),pF=n(k,"LI",{});var I7e=s(pF);o_e=n(I7e,"STRONG",{});var Iht=s(o_e);Str=r(Iht,"xlm-roberta"),Iht.forEach(t),Rtr=r(I7e," \u2014 "),lV=n(I7e,"A",{href:!0});var qht=s(lV);Btr=r(qht,"TFXLMRobertaModel"),qht.forEach(t),Ptr=r(I7e," (XLM-RoBERTa model)"),I7e.forEach(t),$tr=i(k),_F=n(k,"LI",{});var q7e=s(_F);r_e=n(q7e,"STRONG",{});var Nht=s(r_e);Itr=r(Nht,"xlnet"),Nht.forEach(t),qtr=r(q7e," \u2014 "),iV=n(q7e,"A",{href:!0});var jht=s(iV);Ntr=r(jht,"TFXLNetModel"),jht.forEach(t),jtr=r(q7e," (XLNet model)"),q7e.forEach(t),k.forEach(t),Dtr=i(pa),t_e=n(pa,"P",{});var Dht=s(t_e);Gtr=r(Dht,"Examples:"),Dht.forEach(t),Otr=i(pa),m(fy.$$.fragment,pa),pa.forEach(t),jl.forEach(t),kBe=i(c),_c=n(c,"H2",{class:!0});var D$e=s(_c);uF=n(D$e,"A",{id:!0,class:!0,href:!0});var Ght=s(uF);a_e=n(Ght,"SPAN",{});var Oht=s(a_e);m(my.$$.fragment,Oht),Oht.forEach(t),Ght.forEach(t),Vtr=i(D$e),n_e=n(D$e,"SPAN",{});var Vht=s(n_e);Xtr=r(Vht,"TFAutoModelForPreTraining"),Vht.forEach(t),D$e.forEach(t),SBe=i(c),vr=n(c,"DIV",{class:!0});var Gl=s(vr);m(gy.$$.fragment,Gl),ztr=i(Gl),uc=n(Gl,"P",{});var fJ=s(uc);Qtr=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dV=n(fJ,"A",{href:!0});var Xht=s(dV);Wtr=r(Xht,"from_pretrained()"),Xht.forEach(t),Htr=r(fJ," class method or the "),cV=n(fJ,"A",{href:!0});var zht=s(cV);Utr=r(zht,"from_config()"),zht.forEach(t),Jtr=r(fJ,` class
method.`),fJ.forEach(t),Ytr=i(Gl),hy=n(Gl,"P",{});var G$e=s(hy);Ktr=r(G$e,"This class cannot be instantiated directly using "),s_e=n(G$e,"CODE",{});var Qht=s(s_e);Ztr=r(Qht,"__init__()"),Qht.forEach(t),ear=r(G$e," (throws an error)."),G$e.forEach(t),oar=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(py.$$.fragment,Ol),rar=i(Ol),l_e=n(Ol,"P",{});var Wht=s(l_e);tar=r(Wht,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Wht.forEach(t),aar=i(Ol),bc=n(Ol,"P",{});var mJ=s(bc);nar=r(mJ,`Note:
Loading a model from its configuration file does `),i_e=n(mJ,"STRONG",{});var Hht=s(i_e);sar=r(Hht,"not"),Hht.forEach(t),lar=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fV=n(mJ,"A",{href:!0});var Uht=s(fV);iar=r(Uht,"from_pretrained()"),Uht.forEach(t),dar=r(mJ," to load the model weights."),mJ.forEach(t),car=i(Ol),d_e=n(Ol,"P",{});var Jht=s(d_e);far=r(Jht,"Examples:"),Jht.forEach(t),mar=i(Ol),m(_y.$$.fragment,Ol),Ol.forEach(t),gar=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(uy.$$.fragment,_a),har=i(_a),c_e=n(_a,"P",{});var Yht=s(c_e);par=r(Yht,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Yht.forEach(t),_ar=i(_a),un=n(_a,"P",{});var oC=s(un);uar=r(oC,"The model class to instantiate is selected based on the "),f_e=n(oC,"CODE",{});var Kht=s(f_e);bar=r(Kht,"model_type"),Kht.forEach(t),Far=r(oC,` property of the config object (either
passed as an argument or loaded from `),m_e=n(oC,"CODE",{});var Zht=s(m_e);Tar=r(Zht,"pretrained_model_name_or_path"),Zht.forEach(t),Mar=r(oC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=n(oC,"CODE",{});var ept=s(g_e);Ear=r(ept,"pretrained_model_name_or_path"),ept.forEach(t),Car=r(oC,":"),oC.forEach(t),war=i(_a),H=n(_a,"UL",{});var U=s(H);bF=n(U,"LI",{});var N7e=s(bF);h_e=n(N7e,"STRONG",{});var opt=s(h_e);Aar=r(opt,"albert"),opt.forEach(t),yar=r(N7e," \u2014 "),mV=n(N7e,"A",{href:!0});var rpt=s(mV);Lar=r(rpt,"TFAlbertForPreTraining"),rpt.forEach(t),xar=r(N7e," (ALBERT model)"),N7e.forEach(t),kar=i(U),FF=n(U,"LI",{});var j7e=s(FF);p_e=n(j7e,"STRONG",{});var tpt=s(p_e);Sar=r(tpt,"bart"),tpt.forEach(t),Rar=r(j7e," \u2014 "),gV=n(j7e,"A",{href:!0});var apt=s(gV);Bar=r(apt,"TFBartForConditionalGeneration"),apt.forEach(t),Par=r(j7e," (BART model)"),j7e.forEach(t),$ar=i(U),vF=n(U,"LI",{});var D7e=s(vF);__e=n(D7e,"STRONG",{});var npt=s(__e);Iar=r(npt,"bert"),npt.forEach(t),qar=r(D7e," \u2014 "),hV=n(D7e,"A",{href:!0});var spt=s(hV);Nar=r(spt,"TFBertForPreTraining"),spt.forEach(t),jar=r(D7e," (BERT model)"),D7e.forEach(t),Dar=i(U),TF=n(U,"LI",{});var G7e=s(TF);u_e=n(G7e,"STRONG",{});var lpt=s(u_e);Gar=r(lpt,"camembert"),lpt.forEach(t),Oar=r(G7e," \u2014 "),pV=n(G7e,"A",{href:!0});var ipt=s(pV);Var=r(ipt,"TFCamembertForMaskedLM"),ipt.forEach(t),Xar=r(G7e," (CamemBERT model)"),G7e.forEach(t),zar=i(U),MF=n(U,"LI",{});var O7e=s(MF);b_e=n(O7e,"STRONG",{});var dpt=s(b_e);Qar=r(dpt,"ctrl"),dpt.forEach(t),War=r(O7e," \u2014 "),_V=n(O7e,"A",{href:!0});var cpt=s(_V);Har=r(cpt,"TFCTRLLMHeadModel"),cpt.forEach(t),Uar=r(O7e," (CTRL model)"),O7e.forEach(t),Jar=i(U),EF=n(U,"LI",{});var V7e=s(EF);F_e=n(V7e,"STRONG",{});var fpt=s(F_e);Yar=r(fpt,"distilbert"),fpt.forEach(t),Kar=r(V7e," \u2014 "),uV=n(V7e,"A",{href:!0});var mpt=s(uV);Zar=r(mpt,"TFDistilBertForMaskedLM"),mpt.forEach(t),enr=r(V7e," (DistilBERT model)"),V7e.forEach(t),onr=i(U),CF=n(U,"LI",{});var X7e=s(CF);v_e=n(X7e,"STRONG",{});var gpt=s(v_e);rnr=r(gpt,"electra"),gpt.forEach(t),tnr=r(X7e," \u2014 "),bV=n(X7e,"A",{href:!0});var hpt=s(bV);anr=r(hpt,"TFElectraForPreTraining"),hpt.forEach(t),nnr=r(X7e," (ELECTRA model)"),X7e.forEach(t),snr=i(U),wF=n(U,"LI",{});var z7e=s(wF);T_e=n(z7e,"STRONG",{});var ppt=s(T_e);lnr=r(ppt,"flaubert"),ppt.forEach(t),inr=r(z7e," \u2014 "),FV=n(z7e,"A",{href:!0});var _pt=s(FV);dnr=r(_pt,"TFFlaubertWithLMHeadModel"),_pt.forEach(t),cnr=r(z7e," (FlauBERT model)"),z7e.forEach(t),fnr=i(U),AF=n(U,"LI",{});var Q7e=s(AF);M_e=n(Q7e,"STRONG",{});var upt=s(M_e);mnr=r(upt,"funnel"),upt.forEach(t),gnr=r(Q7e," \u2014 "),vV=n(Q7e,"A",{href:!0});var bpt=s(vV);hnr=r(bpt,"TFFunnelForPreTraining"),bpt.forEach(t),pnr=r(Q7e," (Funnel Transformer model)"),Q7e.forEach(t),_nr=i(U),yF=n(U,"LI",{});var W7e=s(yF);E_e=n(W7e,"STRONG",{});var Fpt=s(E_e);unr=r(Fpt,"gpt2"),Fpt.forEach(t),bnr=r(W7e," \u2014 "),TV=n(W7e,"A",{href:!0});var vpt=s(TV);Fnr=r(vpt,"TFGPT2LMHeadModel"),vpt.forEach(t),vnr=r(W7e," (OpenAI GPT-2 model)"),W7e.forEach(t),Tnr=i(U),LF=n(U,"LI",{});var H7e=s(LF);C_e=n(H7e,"STRONG",{});var Tpt=s(C_e);Mnr=r(Tpt,"layoutlm"),Tpt.forEach(t),Enr=r(H7e," \u2014 "),MV=n(H7e,"A",{href:!0});var Mpt=s(MV);Cnr=r(Mpt,"TFLayoutLMForMaskedLM"),Mpt.forEach(t),wnr=r(H7e," (LayoutLM model)"),H7e.forEach(t),Anr=i(U),xF=n(U,"LI",{});var U7e=s(xF);w_e=n(U7e,"STRONG",{});var Ept=s(w_e);ynr=r(Ept,"lxmert"),Ept.forEach(t),Lnr=r(U7e," \u2014 "),EV=n(U7e,"A",{href:!0});var Cpt=s(EV);xnr=r(Cpt,"TFLxmertForPreTraining"),Cpt.forEach(t),knr=r(U7e," (LXMERT model)"),U7e.forEach(t),Snr=i(U),kF=n(U,"LI",{});var J7e=s(kF);A_e=n(J7e,"STRONG",{});var wpt=s(A_e);Rnr=r(wpt,"mobilebert"),wpt.forEach(t),Bnr=r(J7e," \u2014 "),CV=n(J7e,"A",{href:!0});var Apt=s(CV);Pnr=r(Apt,"TFMobileBertForPreTraining"),Apt.forEach(t),$nr=r(J7e," (MobileBERT model)"),J7e.forEach(t),Inr=i(U),SF=n(U,"LI",{});var Y7e=s(SF);y_e=n(Y7e,"STRONG",{});var ypt=s(y_e);qnr=r(ypt,"mpnet"),ypt.forEach(t),Nnr=r(Y7e," \u2014 "),wV=n(Y7e,"A",{href:!0});var Lpt=s(wV);jnr=r(Lpt,"TFMPNetForMaskedLM"),Lpt.forEach(t),Dnr=r(Y7e," (MPNet model)"),Y7e.forEach(t),Gnr=i(U),RF=n(U,"LI",{});var K7e=s(RF);L_e=n(K7e,"STRONG",{});var xpt=s(L_e);Onr=r(xpt,"openai-gpt"),xpt.forEach(t),Vnr=r(K7e," \u2014 "),AV=n(K7e,"A",{href:!0});var kpt=s(AV);Xnr=r(kpt,"TFOpenAIGPTLMHeadModel"),kpt.forEach(t),znr=r(K7e," (OpenAI GPT model)"),K7e.forEach(t),Qnr=i(U),BF=n(U,"LI",{});var Z7e=s(BF);x_e=n(Z7e,"STRONG",{});var Spt=s(x_e);Wnr=r(Spt,"roberta"),Spt.forEach(t),Hnr=r(Z7e," \u2014 "),yV=n(Z7e,"A",{href:!0});var Rpt=s(yV);Unr=r(Rpt,"TFRobertaForMaskedLM"),Rpt.forEach(t),Jnr=r(Z7e," (RoBERTa model)"),Z7e.forEach(t),Ynr=i(U),PF=n(U,"LI",{});var e9e=s(PF);k_e=n(e9e,"STRONG",{});var Bpt=s(k_e);Knr=r(Bpt,"t5"),Bpt.forEach(t),Znr=r(e9e," \u2014 "),LV=n(e9e,"A",{href:!0});var Ppt=s(LV);esr=r(Ppt,"TFT5ForConditionalGeneration"),Ppt.forEach(t),osr=r(e9e," (T5 model)"),e9e.forEach(t),rsr=i(U),$F=n(U,"LI",{});var o9e=s($F);S_e=n(o9e,"STRONG",{});var $pt=s(S_e);tsr=r($pt,"tapas"),$pt.forEach(t),asr=r(o9e," \u2014 "),xV=n(o9e,"A",{href:!0});var Ipt=s(xV);nsr=r(Ipt,"TFTapasForMaskedLM"),Ipt.forEach(t),ssr=r(o9e," (TAPAS model)"),o9e.forEach(t),lsr=i(U),IF=n(U,"LI",{});var r9e=s(IF);R_e=n(r9e,"STRONG",{});var qpt=s(R_e);isr=r(qpt,"transfo-xl"),qpt.forEach(t),dsr=r(r9e," \u2014 "),kV=n(r9e,"A",{href:!0});var Npt=s(kV);csr=r(Npt,"TFTransfoXLLMHeadModel"),Npt.forEach(t),fsr=r(r9e," (Transformer-XL model)"),r9e.forEach(t),msr=i(U),qF=n(U,"LI",{});var t9e=s(qF);B_e=n(t9e,"STRONG",{});var jpt=s(B_e);gsr=r(jpt,"vit_mae"),jpt.forEach(t),hsr=r(t9e," \u2014 "),SV=n(t9e,"A",{href:!0});var Dpt=s(SV);psr=r(Dpt,"TFViTMAEForPreTraining"),Dpt.forEach(t),_sr=r(t9e," (ViTMAE model)"),t9e.forEach(t),usr=i(U),NF=n(U,"LI",{});var a9e=s(NF);P_e=n(a9e,"STRONG",{});var Gpt=s(P_e);bsr=r(Gpt,"xlm"),Gpt.forEach(t),Fsr=r(a9e," \u2014 "),RV=n(a9e,"A",{href:!0});var Opt=s(RV);vsr=r(Opt,"TFXLMWithLMHeadModel"),Opt.forEach(t),Tsr=r(a9e," (XLM model)"),a9e.forEach(t),Msr=i(U),jF=n(U,"LI",{});var n9e=s(jF);$_e=n(n9e,"STRONG",{});var Vpt=s($_e);Esr=r(Vpt,"xlm-roberta"),Vpt.forEach(t),Csr=r(n9e," \u2014 "),BV=n(n9e,"A",{href:!0});var Xpt=s(BV);wsr=r(Xpt,"TFXLMRobertaForMaskedLM"),Xpt.forEach(t),Asr=r(n9e," (XLM-RoBERTa model)"),n9e.forEach(t),ysr=i(U),DF=n(U,"LI",{});var s9e=s(DF);I_e=n(s9e,"STRONG",{});var zpt=s(I_e);Lsr=r(zpt,"xlnet"),zpt.forEach(t),xsr=r(s9e," \u2014 "),PV=n(s9e,"A",{href:!0});var Qpt=s(PV);ksr=r(Qpt,"TFXLNetLMHeadModel"),Qpt.forEach(t),Ssr=r(s9e," (XLNet model)"),s9e.forEach(t),U.forEach(t),Rsr=i(_a),q_e=n(_a,"P",{});var Wpt=s(q_e);Bsr=r(Wpt,"Examples:"),Wpt.forEach(t),Psr=i(_a),m(by.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),RBe=i(c),Fc=n(c,"H2",{class:!0});var O$e=s(Fc);GF=n(O$e,"A",{id:!0,class:!0,href:!0});var Hpt=s(GF);N_e=n(Hpt,"SPAN",{});var Upt=s(N_e);m(Fy.$$.fragment,Upt),Upt.forEach(t),Hpt.forEach(t),$sr=i(O$e),j_e=n(O$e,"SPAN",{});var Jpt=s(j_e);Isr=r(Jpt,"TFAutoModelForCausalLM"),Jpt.forEach(t),O$e.forEach(t),BBe=i(c),Tr=n(c,"DIV",{class:!0});var Vl=s(Tr);m(vy.$$.fragment,Vl),qsr=i(Vl),vc=n(Vl,"P",{});var gJ=s(vc);Nsr=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$V=n(gJ,"A",{href:!0});var Ypt=s($V);jsr=r(Ypt,"from_pretrained()"),Ypt.forEach(t),Dsr=r(gJ," class method or the "),IV=n(gJ,"A",{href:!0});var Kpt=s(IV);Gsr=r(Kpt,"from_config()"),Kpt.forEach(t),Osr=r(gJ,` class
method.`),gJ.forEach(t),Vsr=i(Vl),Ty=n(Vl,"P",{});var V$e=s(Ty);Xsr=r(V$e,"This class cannot be instantiated directly using "),D_e=n(V$e,"CODE",{});var Zpt=s(D_e);zsr=r(Zpt,"__init__()"),Zpt.forEach(t),Qsr=r(V$e," (throws an error)."),V$e.forEach(t),Wsr=i(Vl),pt=n(Vl,"DIV",{class:!0});var Xl=s(pt);m(My.$$.fragment,Xl),Hsr=i(Xl),G_e=n(Xl,"P",{});var e_t=s(G_e);Usr=r(e_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),e_t.forEach(t),Jsr=i(Xl),Tc=n(Xl,"P",{});var hJ=s(Tc);Ysr=r(hJ,`Note:
Loading a model from its configuration file does `),O_e=n(hJ,"STRONG",{});var o_t=s(O_e);Ksr=r(o_t,"not"),o_t.forEach(t),Zsr=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=n(hJ,"A",{href:!0});var r_t=s(qV);elr=r(r_t,"from_pretrained()"),r_t.forEach(t),olr=r(hJ," to load the model weights."),hJ.forEach(t),rlr=i(Xl),V_e=n(Xl,"P",{});var t_t=s(V_e);tlr=r(t_t,"Examples:"),t_t.forEach(t),alr=i(Xl),m(Ey.$$.fragment,Xl),Xl.forEach(t),nlr=i(Vl),_o=n(Vl,"DIV",{class:!0});var ua=s(_o);m(Cy.$$.fragment,ua),slr=i(ua),X_e=n(ua,"P",{});var a_t=s(X_e);llr=r(a_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),a_t.forEach(t),ilr=i(ua),bn=n(ua,"P",{});var rC=s(bn);dlr=r(rC,"The model class to instantiate is selected based on the "),z_e=n(rC,"CODE",{});var n_t=s(z_e);clr=r(n_t,"model_type"),n_t.forEach(t),flr=r(rC,` property of the config object (either
passed as an argument or loaded from `),Q_e=n(rC,"CODE",{});var s_t=s(Q_e);mlr=r(s_t,"pretrained_model_name_or_path"),s_t.forEach(t),glr=r(rC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=n(rC,"CODE",{});var l_t=s(W_e);hlr=r(l_t,"pretrained_model_name_or_path"),l_t.forEach(t),plr=r(rC,":"),rC.forEach(t),_lr=i(ua),de=n(ua,"UL",{});var ge=s(de);OF=n(ge,"LI",{});var l9e=s(OF);H_e=n(l9e,"STRONG",{});var i_t=s(H_e);ulr=r(i_t,"bert"),i_t.forEach(t),blr=r(l9e," \u2014 "),NV=n(l9e,"A",{href:!0});var d_t=s(NV);Flr=r(d_t,"TFBertLMHeadModel"),d_t.forEach(t),vlr=r(l9e," (BERT model)"),l9e.forEach(t),Tlr=i(ge),VF=n(ge,"LI",{});var i9e=s(VF);U_e=n(i9e,"STRONG",{});var c_t=s(U_e);Mlr=r(c_t,"camembert"),c_t.forEach(t),Elr=r(i9e," \u2014 "),jV=n(i9e,"A",{href:!0});var f_t=s(jV);Clr=r(f_t,"TFCamembertForCausalLM"),f_t.forEach(t),wlr=r(i9e," (CamemBERT model)"),i9e.forEach(t),Alr=i(ge),XF=n(ge,"LI",{});var d9e=s(XF);J_e=n(d9e,"STRONG",{});var m_t=s(J_e);ylr=r(m_t,"ctrl"),m_t.forEach(t),Llr=r(d9e," \u2014 "),DV=n(d9e,"A",{href:!0});var g_t=s(DV);xlr=r(g_t,"TFCTRLLMHeadModel"),g_t.forEach(t),klr=r(d9e," (CTRL model)"),d9e.forEach(t),Slr=i(ge),zF=n(ge,"LI",{});var c9e=s(zF);Y_e=n(c9e,"STRONG",{});var h_t=s(Y_e);Rlr=r(h_t,"gpt2"),h_t.forEach(t),Blr=r(c9e," \u2014 "),GV=n(c9e,"A",{href:!0});var p_t=s(GV);Plr=r(p_t,"TFGPT2LMHeadModel"),p_t.forEach(t),$lr=r(c9e," (OpenAI GPT-2 model)"),c9e.forEach(t),Ilr=i(ge),QF=n(ge,"LI",{});var f9e=s(QF);K_e=n(f9e,"STRONG",{});var __t=s(K_e);qlr=r(__t,"gptj"),__t.forEach(t),Nlr=r(f9e," \u2014 "),OV=n(f9e,"A",{href:!0});var u_t=s(OV);jlr=r(u_t,"TFGPTJForCausalLM"),u_t.forEach(t),Dlr=r(f9e," (GPT-J model)"),f9e.forEach(t),Glr=i(ge),WF=n(ge,"LI",{});var m9e=s(WF);Z_e=n(m9e,"STRONG",{});var b_t=s(Z_e);Olr=r(b_t,"openai-gpt"),b_t.forEach(t),Vlr=r(m9e," \u2014 "),VV=n(m9e,"A",{href:!0});var F_t=s(VV);Xlr=r(F_t,"TFOpenAIGPTLMHeadModel"),F_t.forEach(t),zlr=r(m9e," (OpenAI GPT model)"),m9e.forEach(t),Qlr=i(ge),HF=n(ge,"LI",{});var g9e=s(HF);eue=n(g9e,"STRONG",{});var v_t=s(eue);Wlr=r(v_t,"rembert"),v_t.forEach(t),Hlr=r(g9e," \u2014 "),XV=n(g9e,"A",{href:!0});var T_t=s(XV);Ulr=r(T_t,"TFRemBertForCausalLM"),T_t.forEach(t),Jlr=r(g9e," (RemBERT model)"),g9e.forEach(t),Ylr=i(ge),UF=n(ge,"LI",{});var h9e=s(UF);oue=n(h9e,"STRONG",{});var M_t=s(oue);Klr=r(M_t,"roberta"),M_t.forEach(t),Zlr=r(h9e," \u2014 "),zV=n(h9e,"A",{href:!0});var E_t=s(zV);eir=r(E_t,"TFRobertaForCausalLM"),E_t.forEach(t),oir=r(h9e," (RoBERTa model)"),h9e.forEach(t),rir=i(ge),JF=n(ge,"LI",{});var p9e=s(JF);rue=n(p9e,"STRONG",{});var C_t=s(rue);tir=r(C_t,"roformer"),C_t.forEach(t),air=r(p9e," \u2014 "),QV=n(p9e,"A",{href:!0});var w_t=s(QV);nir=r(w_t,"TFRoFormerForCausalLM"),w_t.forEach(t),sir=r(p9e," (RoFormer model)"),p9e.forEach(t),lir=i(ge),YF=n(ge,"LI",{});var _9e=s(YF);tue=n(_9e,"STRONG",{});var A_t=s(tue);iir=r(A_t,"transfo-xl"),A_t.forEach(t),dir=r(_9e," \u2014 "),WV=n(_9e,"A",{href:!0});var y_t=s(WV);cir=r(y_t,"TFTransfoXLLMHeadModel"),y_t.forEach(t),fir=r(_9e," (Transformer-XL model)"),_9e.forEach(t),mir=i(ge),KF=n(ge,"LI",{});var u9e=s(KF);aue=n(u9e,"STRONG",{});var L_t=s(aue);gir=r(L_t,"xglm"),L_t.forEach(t),hir=r(u9e," \u2014 "),HV=n(u9e,"A",{href:!0});var x_t=s(HV);pir=r(x_t,"TFXGLMForCausalLM"),x_t.forEach(t),_ir=r(u9e," (XGLM model)"),u9e.forEach(t),uir=i(ge),ZF=n(ge,"LI",{});var b9e=s(ZF);nue=n(b9e,"STRONG",{});var k_t=s(nue);bir=r(k_t,"xlm"),k_t.forEach(t),Fir=r(b9e," \u2014 "),UV=n(b9e,"A",{href:!0});var S_t=s(UV);vir=r(S_t,"TFXLMWithLMHeadModel"),S_t.forEach(t),Tir=r(b9e," (XLM model)"),b9e.forEach(t),Mir=i(ge),ev=n(ge,"LI",{});var F9e=s(ev);sue=n(F9e,"STRONG",{});var R_t=s(sue);Eir=r(R_t,"xlnet"),R_t.forEach(t),Cir=r(F9e," \u2014 "),JV=n(F9e,"A",{href:!0});var B_t=s(JV);wir=r(B_t,"TFXLNetLMHeadModel"),B_t.forEach(t),Air=r(F9e," (XLNet model)"),F9e.forEach(t),ge.forEach(t),yir=i(ua),lue=n(ua,"P",{});var P_t=s(lue);Lir=r(P_t,"Examples:"),P_t.forEach(t),xir=i(ua),m(wy.$$.fragment,ua),ua.forEach(t),Vl.forEach(t),PBe=i(c),Mc=n(c,"H2",{class:!0});var X$e=s(Mc);ov=n(X$e,"A",{id:!0,class:!0,href:!0});var $_t=s(ov);iue=n($_t,"SPAN",{});var I_t=s(iue);m(Ay.$$.fragment,I_t),I_t.forEach(t),$_t.forEach(t),kir=i(X$e),due=n(X$e,"SPAN",{});var q_t=s(due);Sir=r(q_t,"TFAutoModelForImageClassification"),q_t.forEach(t),X$e.forEach(t),$Be=i(c),Mr=n(c,"DIV",{class:!0});var zl=s(Mr);m(yy.$$.fragment,zl),Rir=i(zl),Ec=n(zl,"P",{});var pJ=s(Ec);Bir=r(pJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YV=n(pJ,"A",{href:!0});var N_t=s(YV);Pir=r(N_t,"from_pretrained()"),N_t.forEach(t),$ir=r(pJ," class method or the "),KV=n(pJ,"A",{href:!0});var j_t=s(KV);Iir=r(j_t,"from_config()"),j_t.forEach(t),qir=r(pJ,` class
method.`),pJ.forEach(t),Nir=i(zl),Ly=n(zl,"P",{});var z$e=s(Ly);jir=r(z$e,"This class cannot be instantiated directly using "),cue=n(z$e,"CODE",{});var D_t=s(cue);Dir=r(D_t,"__init__()"),D_t.forEach(t),Gir=r(z$e," (throws an error)."),z$e.forEach(t),Oir=i(zl),_t=n(zl,"DIV",{class:!0});var Ql=s(_t);m(xy.$$.fragment,Ql),Vir=i(Ql),fue=n(Ql,"P",{});var G_t=s(fue);Xir=r(G_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),G_t.forEach(t),zir=i(Ql),Cc=n(Ql,"P",{});var _J=s(Cc);Qir=r(_J,`Note:
Loading a model from its configuration file does `),mue=n(_J,"STRONG",{});var O_t=s(mue);Wir=r(O_t,"not"),O_t.forEach(t),Hir=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=n(_J,"A",{href:!0});var V_t=s(ZV);Uir=r(V_t,"from_pretrained()"),V_t.forEach(t),Jir=r(_J," to load the model weights."),_J.forEach(t),Yir=i(Ql),gue=n(Ql,"P",{});var X_t=s(gue);Kir=r(X_t,"Examples:"),X_t.forEach(t),Zir=i(Ql),m(ky.$$.fragment,Ql),Ql.forEach(t),edr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(Sy.$$.fragment,ba),odr=i(ba),hue=n(ba,"P",{});var z_t=s(hue);rdr=r(z_t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),z_t.forEach(t),tdr=i(ba),Fn=n(ba,"P",{});var tC=s(Fn);adr=r(tC,"The model class to instantiate is selected based on the "),pue=n(tC,"CODE",{});var Q_t=s(pue);ndr=r(Q_t,"model_type"),Q_t.forEach(t),sdr=r(tC,` property of the config object (either
passed as an argument or loaded from `),_ue=n(tC,"CODE",{});var W_t=s(_ue);ldr=r(W_t,"pretrained_model_name_or_path"),W_t.forEach(t),idr=r(tC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=n(tC,"CODE",{});var H_t=s(uue);ddr=r(H_t,"pretrained_model_name_or_path"),H_t.forEach(t),cdr=r(tC,":"),tC.forEach(t),fdr=i(ba),Ry=n(ba,"UL",{});var Q$e=s(Ry);rv=n(Q$e,"LI",{});var v9e=s(rv);bue=n(v9e,"STRONG",{});var U_t=s(bue);mdr=r(U_t,"convnext"),U_t.forEach(t),gdr=r(v9e," \u2014 "),eX=n(v9e,"A",{href:!0});var J_t=s(eX);hdr=r(J_t,"TFConvNextForImageClassification"),J_t.forEach(t),pdr=r(v9e," (ConvNext model)"),v9e.forEach(t),_dr=i(Q$e),tv=n(Q$e,"LI",{});var T9e=s(tv);Fue=n(T9e,"STRONG",{});var Y_t=s(Fue);udr=r(Y_t,"vit"),Y_t.forEach(t),bdr=r(T9e," \u2014 "),oX=n(T9e,"A",{href:!0});var K_t=s(oX);Fdr=r(K_t,"TFViTForImageClassification"),K_t.forEach(t),vdr=r(T9e," (ViT model)"),T9e.forEach(t),Q$e.forEach(t),Tdr=i(ba),vue=n(ba,"P",{});var Z_t=s(vue);Mdr=r(Z_t,"Examples:"),Z_t.forEach(t),Edr=i(ba),m(By.$$.fragment,ba),ba.forEach(t),zl.forEach(t),IBe=i(c),wc=n(c,"H2",{class:!0});var W$e=s(wc);av=n(W$e,"A",{id:!0,class:!0,href:!0});var eut=s(av);Tue=n(eut,"SPAN",{});var out=s(Tue);m(Py.$$.fragment,out),out.forEach(t),eut.forEach(t),Cdr=i(W$e),Mue=n(W$e,"SPAN",{});var rut=s(Mue);wdr=r(rut,"TFAutoModelForMaskedLM"),rut.forEach(t),W$e.forEach(t),qBe=i(c),Er=n(c,"DIV",{class:!0});var Wl=s(Er);m($y.$$.fragment,Wl),Adr=i(Wl),Ac=n(Wl,"P",{});var uJ=s(Ac);ydr=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rX=n(uJ,"A",{href:!0});var tut=s(rX);Ldr=r(tut,"from_pretrained()"),tut.forEach(t),xdr=r(uJ," class method or the "),tX=n(uJ,"A",{href:!0});var aut=s(tX);kdr=r(aut,"from_config()"),aut.forEach(t),Sdr=r(uJ,` class
method.`),uJ.forEach(t),Rdr=i(Wl),Iy=n(Wl,"P",{});var H$e=s(Iy);Bdr=r(H$e,"This class cannot be instantiated directly using "),Eue=n(H$e,"CODE",{});var nut=s(Eue);Pdr=r(nut,"__init__()"),nut.forEach(t),$dr=r(H$e," (throws an error)."),H$e.forEach(t),Idr=i(Wl),ut=n(Wl,"DIV",{class:!0});var Hl=s(ut);m(qy.$$.fragment,Hl),qdr=i(Hl),Cue=n(Hl,"P",{});var sut=s(Cue);Ndr=r(sut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),sut.forEach(t),jdr=i(Hl),yc=n(Hl,"P",{});var bJ=s(yc);Ddr=r(bJ,`Note:
Loading a model from its configuration file does `),wue=n(bJ,"STRONG",{});var lut=s(wue);Gdr=r(lut,"not"),lut.forEach(t),Odr=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(bJ,"A",{href:!0});var iut=s(aX);Vdr=r(iut,"from_pretrained()"),iut.forEach(t),Xdr=r(bJ," to load the model weights."),bJ.forEach(t),zdr=i(Hl),Aue=n(Hl,"P",{});var dut=s(Aue);Qdr=r(dut,"Examples:"),dut.forEach(t),Wdr=i(Hl),m(Ny.$$.fragment,Hl),Hl.forEach(t),Hdr=i(Wl),bo=n(Wl,"DIV",{class:!0});var Fa=s(bo);m(jy.$$.fragment,Fa),Udr=i(Fa),yue=n(Fa,"P",{});var cut=s(yue);Jdr=r(cut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cut.forEach(t),Ydr=i(Fa),vn=n(Fa,"P",{});var aC=s(vn);Kdr=r(aC,"The model class to instantiate is selected based on the "),Lue=n(aC,"CODE",{});var fut=s(Lue);Zdr=r(fut,"model_type"),fut.forEach(t),ecr=r(aC,` property of the config object (either
passed as an argument or loaded from `),xue=n(aC,"CODE",{});var mut=s(xue);ocr=r(mut,"pretrained_model_name_or_path"),mut.forEach(t),rcr=r(aC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=n(aC,"CODE",{});var gut=s(kue);tcr=r(gut,"pretrained_model_name_or_path"),gut.forEach(t),acr=r(aC,":"),aC.forEach(t),ncr=i(Fa),J=n(Fa,"UL",{});var oe=s(J);nv=n(oe,"LI",{});var M9e=s(nv);Sue=n(M9e,"STRONG",{});var hut=s(Sue);scr=r(hut,"albert"),hut.forEach(t),lcr=r(M9e," \u2014 "),nX=n(M9e,"A",{href:!0});var put=s(nX);icr=r(put,"TFAlbertForMaskedLM"),put.forEach(t),dcr=r(M9e," (ALBERT model)"),M9e.forEach(t),ccr=i(oe),sv=n(oe,"LI",{});var E9e=s(sv);Rue=n(E9e,"STRONG",{});var _ut=s(Rue);fcr=r(_ut,"bert"),_ut.forEach(t),mcr=r(E9e," \u2014 "),sX=n(E9e,"A",{href:!0});var uut=s(sX);gcr=r(uut,"TFBertForMaskedLM"),uut.forEach(t),hcr=r(E9e," (BERT model)"),E9e.forEach(t),pcr=i(oe),lv=n(oe,"LI",{});var C9e=s(lv);Bue=n(C9e,"STRONG",{});var but=s(Bue);_cr=r(but,"camembert"),but.forEach(t),ucr=r(C9e," \u2014 "),lX=n(C9e,"A",{href:!0});var Fut=s(lX);bcr=r(Fut,"TFCamembertForMaskedLM"),Fut.forEach(t),Fcr=r(C9e," (CamemBERT model)"),C9e.forEach(t),vcr=i(oe),iv=n(oe,"LI",{});var w9e=s(iv);Pue=n(w9e,"STRONG",{});var vut=s(Pue);Tcr=r(vut,"convbert"),vut.forEach(t),Mcr=r(w9e," \u2014 "),iX=n(w9e,"A",{href:!0});var Tut=s(iX);Ecr=r(Tut,"TFConvBertForMaskedLM"),Tut.forEach(t),Ccr=r(w9e," (ConvBERT model)"),w9e.forEach(t),wcr=i(oe),dv=n(oe,"LI",{});var A9e=s(dv);$ue=n(A9e,"STRONG",{});var Mut=s($ue);Acr=r(Mut,"deberta"),Mut.forEach(t),ycr=r(A9e," \u2014 "),dX=n(A9e,"A",{href:!0});var Eut=s(dX);Lcr=r(Eut,"TFDebertaForMaskedLM"),Eut.forEach(t),xcr=r(A9e," (DeBERTa model)"),A9e.forEach(t),kcr=i(oe),cv=n(oe,"LI",{});var y9e=s(cv);Iue=n(y9e,"STRONG",{});var Cut=s(Iue);Scr=r(Cut,"deberta-v2"),Cut.forEach(t),Rcr=r(y9e," \u2014 "),cX=n(y9e,"A",{href:!0});var wut=s(cX);Bcr=r(wut,"TFDebertaV2ForMaskedLM"),wut.forEach(t),Pcr=r(y9e," (DeBERTa-v2 model)"),y9e.forEach(t),$cr=i(oe),fv=n(oe,"LI",{});var L9e=s(fv);que=n(L9e,"STRONG",{});var Aut=s(que);Icr=r(Aut,"distilbert"),Aut.forEach(t),qcr=r(L9e," \u2014 "),fX=n(L9e,"A",{href:!0});var yut=s(fX);Ncr=r(yut,"TFDistilBertForMaskedLM"),yut.forEach(t),jcr=r(L9e," (DistilBERT model)"),L9e.forEach(t),Dcr=i(oe),mv=n(oe,"LI",{});var x9e=s(mv);Nue=n(x9e,"STRONG",{});var Lut=s(Nue);Gcr=r(Lut,"electra"),Lut.forEach(t),Ocr=r(x9e," \u2014 "),mX=n(x9e,"A",{href:!0});var xut=s(mX);Vcr=r(xut,"TFElectraForMaskedLM"),xut.forEach(t),Xcr=r(x9e," (ELECTRA model)"),x9e.forEach(t),zcr=i(oe),gv=n(oe,"LI",{});var k9e=s(gv);jue=n(k9e,"STRONG",{});var kut=s(jue);Qcr=r(kut,"flaubert"),kut.forEach(t),Wcr=r(k9e," \u2014 "),gX=n(k9e,"A",{href:!0});var Sut=s(gX);Hcr=r(Sut,"TFFlaubertWithLMHeadModel"),Sut.forEach(t),Ucr=r(k9e," (FlauBERT model)"),k9e.forEach(t),Jcr=i(oe),hv=n(oe,"LI",{});var S9e=s(hv);Due=n(S9e,"STRONG",{});var Rut=s(Due);Ycr=r(Rut,"funnel"),Rut.forEach(t),Kcr=r(S9e," \u2014 "),hX=n(S9e,"A",{href:!0});var But=s(hX);Zcr=r(But,"TFFunnelForMaskedLM"),But.forEach(t),efr=r(S9e," (Funnel Transformer model)"),S9e.forEach(t),ofr=i(oe),pv=n(oe,"LI",{});var R9e=s(pv);Gue=n(R9e,"STRONG",{});var Put=s(Gue);rfr=r(Put,"layoutlm"),Put.forEach(t),tfr=r(R9e," \u2014 "),pX=n(R9e,"A",{href:!0});var $ut=s(pX);afr=r($ut,"TFLayoutLMForMaskedLM"),$ut.forEach(t),nfr=r(R9e," (LayoutLM model)"),R9e.forEach(t),sfr=i(oe),_v=n(oe,"LI",{});var B9e=s(_v);Oue=n(B9e,"STRONG",{});var Iut=s(Oue);lfr=r(Iut,"longformer"),Iut.forEach(t),ifr=r(B9e," \u2014 "),_X=n(B9e,"A",{href:!0});var qut=s(_X);dfr=r(qut,"TFLongformerForMaskedLM"),qut.forEach(t),cfr=r(B9e," (Longformer model)"),B9e.forEach(t),ffr=i(oe),uv=n(oe,"LI",{});var P9e=s(uv);Vue=n(P9e,"STRONG",{});var Nut=s(Vue);mfr=r(Nut,"mobilebert"),Nut.forEach(t),gfr=r(P9e," \u2014 "),uX=n(P9e,"A",{href:!0});var jut=s(uX);hfr=r(jut,"TFMobileBertForMaskedLM"),jut.forEach(t),pfr=r(P9e," (MobileBERT model)"),P9e.forEach(t),_fr=i(oe),bv=n(oe,"LI",{});var $9e=s(bv);Xue=n($9e,"STRONG",{});var Dut=s(Xue);ufr=r(Dut,"mpnet"),Dut.forEach(t),bfr=r($9e," \u2014 "),bX=n($9e,"A",{href:!0});var Gut=s(bX);Ffr=r(Gut,"TFMPNetForMaskedLM"),Gut.forEach(t),vfr=r($9e," (MPNet model)"),$9e.forEach(t),Tfr=i(oe),Fv=n(oe,"LI",{});var I9e=s(Fv);zue=n(I9e,"STRONG",{});var Out=s(zue);Mfr=r(Out,"rembert"),Out.forEach(t),Efr=r(I9e," \u2014 "),FX=n(I9e,"A",{href:!0});var Vut=s(FX);Cfr=r(Vut,"TFRemBertForMaskedLM"),Vut.forEach(t),wfr=r(I9e," (RemBERT model)"),I9e.forEach(t),Afr=i(oe),vv=n(oe,"LI",{});var q9e=s(vv);Que=n(q9e,"STRONG",{});var Xut=s(Que);yfr=r(Xut,"roberta"),Xut.forEach(t),Lfr=r(q9e," \u2014 "),vX=n(q9e,"A",{href:!0});var zut=s(vX);xfr=r(zut,"TFRobertaForMaskedLM"),zut.forEach(t),kfr=r(q9e," (RoBERTa model)"),q9e.forEach(t),Sfr=i(oe),Tv=n(oe,"LI",{});var N9e=s(Tv);Wue=n(N9e,"STRONG",{});var Qut=s(Wue);Rfr=r(Qut,"roformer"),Qut.forEach(t),Bfr=r(N9e," \u2014 "),TX=n(N9e,"A",{href:!0});var Wut=s(TX);Pfr=r(Wut,"TFRoFormerForMaskedLM"),Wut.forEach(t),$fr=r(N9e," (RoFormer model)"),N9e.forEach(t),Ifr=i(oe),Mv=n(oe,"LI",{});var j9e=s(Mv);Hue=n(j9e,"STRONG",{});var Hut=s(Hue);qfr=r(Hut,"tapas"),Hut.forEach(t),Nfr=r(j9e," \u2014 "),MX=n(j9e,"A",{href:!0});var Uut=s(MX);jfr=r(Uut,"TFTapasForMaskedLM"),Uut.forEach(t),Dfr=r(j9e," (TAPAS model)"),j9e.forEach(t),Gfr=i(oe),Ev=n(oe,"LI",{});var D9e=s(Ev);Uue=n(D9e,"STRONG",{});var Jut=s(Uue);Ofr=r(Jut,"xlm"),Jut.forEach(t),Vfr=r(D9e," \u2014 "),EX=n(D9e,"A",{href:!0});var Yut=s(EX);Xfr=r(Yut,"TFXLMWithLMHeadModel"),Yut.forEach(t),zfr=r(D9e," (XLM model)"),D9e.forEach(t),Qfr=i(oe),Cv=n(oe,"LI",{});var G9e=s(Cv);Jue=n(G9e,"STRONG",{});var Kut=s(Jue);Wfr=r(Kut,"xlm-roberta"),Kut.forEach(t),Hfr=r(G9e," \u2014 "),CX=n(G9e,"A",{href:!0});var Zut=s(CX);Ufr=r(Zut,"TFXLMRobertaForMaskedLM"),Zut.forEach(t),Jfr=r(G9e," (XLM-RoBERTa model)"),G9e.forEach(t),oe.forEach(t),Yfr=i(Fa),Yue=n(Fa,"P",{});var e1t=s(Yue);Kfr=r(e1t,"Examples:"),e1t.forEach(t),Zfr=i(Fa),m(Dy.$$.fragment,Fa),Fa.forEach(t),Wl.forEach(t),NBe=i(c),Lc=n(c,"H2",{class:!0});var U$e=s(Lc);wv=n(U$e,"A",{id:!0,class:!0,href:!0});var o1t=s(wv);Kue=n(o1t,"SPAN",{});var r1t=s(Kue);m(Gy.$$.fragment,r1t),r1t.forEach(t),o1t.forEach(t),emr=i(U$e),Zue=n(U$e,"SPAN",{});var t1t=s(Zue);omr=r(t1t,"TFAutoModelForSeq2SeqLM"),t1t.forEach(t),U$e.forEach(t),jBe=i(c),Cr=n(c,"DIV",{class:!0});var Ul=s(Cr);m(Oy.$$.fragment,Ul),rmr=i(Ul),xc=n(Ul,"P",{});var FJ=s(xc);tmr=r(FJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wX=n(FJ,"A",{href:!0});var a1t=s(wX);amr=r(a1t,"from_pretrained()"),a1t.forEach(t),nmr=r(FJ," class method or the "),AX=n(FJ,"A",{href:!0});var n1t=s(AX);smr=r(n1t,"from_config()"),n1t.forEach(t),lmr=r(FJ,` class
method.`),FJ.forEach(t),imr=i(Ul),Vy=n(Ul,"P",{});var J$e=s(Vy);dmr=r(J$e,"This class cannot be instantiated directly using "),e1e=n(J$e,"CODE",{});var s1t=s(e1e);cmr=r(s1t,"__init__()"),s1t.forEach(t),fmr=r(J$e," (throws an error)."),J$e.forEach(t),mmr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(Xy.$$.fragment,Jl),gmr=i(Jl),o1e=n(Jl,"P",{});var l1t=s(o1e);hmr=r(l1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),l1t.forEach(t),pmr=i(Jl),kc=n(Jl,"P",{});var vJ=s(kc);_mr=r(vJ,`Note:
Loading a model from its configuration file does `),r1e=n(vJ,"STRONG",{});var i1t=s(r1e);umr=r(i1t,"not"),i1t.forEach(t),bmr=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yX=n(vJ,"A",{href:!0});var d1t=s(yX);Fmr=r(d1t,"from_pretrained()"),d1t.forEach(t),vmr=r(vJ," to load the model weights."),vJ.forEach(t),Tmr=i(Jl),t1e=n(Jl,"P",{});var c1t=s(t1e);Mmr=r(c1t,"Examples:"),c1t.forEach(t),Emr=i(Jl),m(zy.$$.fragment,Jl),Jl.forEach(t),Cmr=i(Ul),Fo=n(Ul,"DIV",{class:!0});var va=s(Fo);m(Qy.$$.fragment,va),wmr=i(va),a1e=n(va,"P",{});var f1t=s(a1e);Amr=r(f1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),f1t.forEach(t),ymr=i(va),Tn=n(va,"P",{});var nC=s(Tn);Lmr=r(nC,"The model class to instantiate is selected based on the "),n1e=n(nC,"CODE",{});var m1t=s(n1e);xmr=r(m1t,"model_type"),m1t.forEach(t),kmr=r(nC,` property of the config object (either
passed as an argument or loaded from `),s1e=n(nC,"CODE",{});var g1t=s(s1e);Smr=r(g1t,"pretrained_model_name_or_path"),g1t.forEach(t),Rmr=r(nC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=n(nC,"CODE",{});var h1t=s(l1e);Bmr=r(h1t,"pretrained_model_name_or_path"),h1t.forEach(t),Pmr=r(nC,":"),nC.forEach(t),$mr=i(va),be=n(va,"UL",{});var we=s(be);Av=n(we,"LI",{});var O9e=s(Av);i1e=n(O9e,"STRONG",{});var p1t=s(i1e);Imr=r(p1t,"bart"),p1t.forEach(t),qmr=r(O9e," \u2014 "),LX=n(O9e,"A",{href:!0});var _1t=s(LX);Nmr=r(_1t,"TFBartForConditionalGeneration"),_1t.forEach(t),jmr=r(O9e," (BART model)"),O9e.forEach(t),Dmr=i(we),yv=n(we,"LI",{});var V9e=s(yv);d1e=n(V9e,"STRONG",{});var u1t=s(d1e);Gmr=r(u1t,"blenderbot"),u1t.forEach(t),Omr=r(V9e," \u2014 "),xX=n(V9e,"A",{href:!0});var b1t=s(xX);Vmr=r(b1t,"TFBlenderbotForConditionalGeneration"),b1t.forEach(t),Xmr=r(V9e," (Blenderbot model)"),V9e.forEach(t),zmr=i(we),Lv=n(we,"LI",{});var X9e=s(Lv);c1e=n(X9e,"STRONG",{});var F1t=s(c1e);Qmr=r(F1t,"blenderbot-small"),F1t.forEach(t),Wmr=r(X9e," \u2014 "),kX=n(X9e,"A",{href:!0});var v1t=s(kX);Hmr=r(v1t,"TFBlenderbotSmallForConditionalGeneration"),v1t.forEach(t),Umr=r(X9e," (BlenderbotSmall model)"),X9e.forEach(t),Jmr=i(we),xv=n(we,"LI",{});var z9e=s(xv);f1e=n(z9e,"STRONG",{});var T1t=s(f1e);Ymr=r(T1t,"encoder-decoder"),T1t.forEach(t),Kmr=r(z9e," \u2014 "),SX=n(z9e,"A",{href:!0});var M1t=s(SX);Zmr=r(M1t,"TFEncoderDecoderModel"),M1t.forEach(t),egr=r(z9e," (Encoder decoder model)"),z9e.forEach(t),ogr=i(we),kv=n(we,"LI",{});var Q9e=s(kv);m1e=n(Q9e,"STRONG",{});var E1t=s(m1e);rgr=r(E1t,"led"),E1t.forEach(t),tgr=r(Q9e," \u2014 "),RX=n(Q9e,"A",{href:!0});var C1t=s(RX);agr=r(C1t,"TFLEDForConditionalGeneration"),C1t.forEach(t),ngr=r(Q9e," (LED model)"),Q9e.forEach(t),sgr=i(we),Sv=n(we,"LI",{});var W9e=s(Sv);g1e=n(W9e,"STRONG",{});var w1t=s(g1e);lgr=r(w1t,"marian"),w1t.forEach(t),igr=r(W9e," \u2014 "),BX=n(W9e,"A",{href:!0});var A1t=s(BX);dgr=r(A1t,"TFMarianMTModel"),A1t.forEach(t),cgr=r(W9e," (Marian model)"),W9e.forEach(t),fgr=i(we),Rv=n(we,"LI",{});var H9e=s(Rv);h1e=n(H9e,"STRONG",{});var y1t=s(h1e);mgr=r(y1t,"mbart"),y1t.forEach(t),ggr=r(H9e," \u2014 "),PX=n(H9e,"A",{href:!0});var L1t=s(PX);hgr=r(L1t,"TFMBartForConditionalGeneration"),L1t.forEach(t),pgr=r(H9e," (mBART model)"),H9e.forEach(t),_gr=i(we),Bv=n(we,"LI",{});var U9e=s(Bv);p1e=n(U9e,"STRONG",{});var x1t=s(p1e);ugr=r(x1t,"mt5"),x1t.forEach(t),bgr=r(U9e," \u2014 "),$X=n(U9e,"A",{href:!0});var k1t=s($X);Fgr=r(k1t,"TFMT5ForConditionalGeneration"),k1t.forEach(t),vgr=r(U9e," (mT5 model)"),U9e.forEach(t),Tgr=i(we),Pv=n(we,"LI",{});var J9e=s(Pv);_1e=n(J9e,"STRONG",{});var S1t=s(_1e);Mgr=r(S1t,"pegasus"),S1t.forEach(t),Egr=r(J9e," \u2014 "),IX=n(J9e,"A",{href:!0});var R1t=s(IX);Cgr=r(R1t,"TFPegasusForConditionalGeneration"),R1t.forEach(t),wgr=r(J9e," (Pegasus model)"),J9e.forEach(t),Agr=i(we),$v=n(we,"LI",{});var Y9e=s($v);u1e=n(Y9e,"STRONG",{});var B1t=s(u1e);ygr=r(B1t,"t5"),B1t.forEach(t),Lgr=r(Y9e," \u2014 "),qX=n(Y9e,"A",{href:!0});var P1t=s(qX);xgr=r(P1t,"TFT5ForConditionalGeneration"),P1t.forEach(t),kgr=r(Y9e," (T5 model)"),Y9e.forEach(t),we.forEach(t),Sgr=i(va),b1e=n(va,"P",{});var $1t=s(b1e);Rgr=r($1t,"Examples:"),$1t.forEach(t),Bgr=i(va),m(Wy.$$.fragment,va),va.forEach(t),Ul.forEach(t),DBe=i(c),Sc=n(c,"H2",{class:!0});var Y$e=s(Sc);Iv=n(Y$e,"A",{id:!0,class:!0,href:!0});var I1t=s(Iv);F1e=n(I1t,"SPAN",{});var q1t=s(F1e);m(Hy.$$.fragment,q1t),q1t.forEach(t),I1t.forEach(t),Pgr=i(Y$e),v1e=n(Y$e,"SPAN",{});var N1t=s(v1e);$gr=r(N1t,"TFAutoModelForSequenceClassification"),N1t.forEach(t),Y$e.forEach(t),GBe=i(c),wr=n(c,"DIV",{class:!0});var Yl=s(wr);m(Uy.$$.fragment,Yl),Igr=i(Yl),Rc=n(Yl,"P",{});var TJ=s(Rc);qgr=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NX=n(TJ,"A",{href:!0});var j1t=s(NX);Ngr=r(j1t,"from_pretrained()"),j1t.forEach(t),jgr=r(TJ," class method or the "),jX=n(TJ,"A",{href:!0});var D1t=s(jX);Dgr=r(D1t,"from_config()"),D1t.forEach(t),Ggr=r(TJ,` class
method.`),TJ.forEach(t),Ogr=i(Yl),Jy=n(Yl,"P",{});var K$e=s(Jy);Vgr=r(K$e,"This class cannot be instantiated directly using "),T1e=n(K$e,"CODE",{});var G1t=s(T1e);Xgr=r(G1t,"__init__()"),G1t.forEach(t),zgr=r(K$e," (throws an error)."),K$e.forEach(t),Qgr=i(Yl),Ft=n(Yl,"DIV",{class:!0});var Kl=s(Ft);m(Yy.$$.fragment,Kl),Wgr=i(Kl),M1e=n(Kl,"P",{});var O1t=s(M1e);Hgr=r(O1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),O1t.forEach(t),Ugr=i(Kl),Bc=n(Kl,"P",{});var MJ=s(Bc);Jgr=r(MJ,`Note:
Loading a model from its configuration file does `),E1e=n(MJ,"STRONG",{});var V1t=s(E1e);Ygr=r(V1t,"not"),V1t.forEach(t),Kgr=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(MJ,"A",{href:!0});var X1t=s(DX);Zgr=r(X1t,"from_pretrained()"),X1t.forEach(t),ehr=r(MJ," to load the model weights."),MJ.forEach(t),ohr=i(Kl),C1e=n(Kl,"P",{});var z1t=s(C1e);rhr=r(z1t,"Examples:"),z1t.forEach(t),thr=i(Kl),m(Ky.$$.fragment,Kl),Kl.forEach(t),ahr=i(Yl),vo=n(Yl,"DIV",{class:!0});var Ta=s(vo);m(Zy.$$.fragment,Ta),nhr=i(Ta),w1e=n(Ta,"P",{});var Q1t=s(w1e);shr=r(Q1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Q1t.forEach(t),lhr=i(Ta),Mn=n(Ta,"P",{});var sC=s(Mn);ihr=r(sC,"The model class to instantiate is selected based on the "),A1e=n(sC,"CODE",{});var W1t=s(A1e);dhr=r(W1t,"model_type"),W1t.forEach(t),chr=r(sC,` property of the config object (either
passed as an argument or loaded from `),y1e=n(sC,"CODE",{});var H1t=s(y1e);fhr=r(H1t,"pretrained_model_name_or_path"),H1t.forEach(t),mhr=r(sC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=n(sC,"CODE",{});var U1t=s(L1e);ghr=r(U1t,"pretrained_model_name_or_path"),U1t.forEach(t),hhr=r(sC,":"),sC.forEach(t),phr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);qv=n(Q,"LI",{});var K9e=s(qv);x1e=n(K9e,"STRONG",{});var J1t=s(x1e);_hr=r(J1t,"albert"),J1t.forEach(t),uhr=r(K9e," \u2014 "),GX=n(K9e,"A",{href:!0});var Y1t=s(GX);bhr=r(Y1t,"TFAlbertForSequenceClassification"),Y1t.forEach(t),Fhr=r(K9e," (ALBERT model)"),K9e.forEach(t),vhr=i(Q),Nv=n(Q,"LI",{});var Z9e=s(Nv);k1e=n(Z9e,"STRONG",{});var K1t=s(k1e);Thr=r(K1t,"bert"),K1t.forEach(t),Mhr=r(Z9e," \u2014 "),OX=n(Z9e,"A",{href:!0});var Z1t=s(OX);Ehr=r(Z1t,"TFBertForSequenceClassification"),Z1t.forEach(t),Chr=r(Z9e," (BERT model)"),Z9e.forEach(t),whr=i(Q),jv=n(Q,"LI",{});var exe=s(jv);S1e=n(exe,"STRONG",{});var e4t=s(S1e);Ahr=r(e4t,"camembert"),e4t.forEach(t),yhr=r(exe," \u2014 "),VX=n(exe,"A",{href:!0});var o4t=s(VX);Lhr=r(o4t,"TFCamembertForSequenceClassification"),o4t.forEach(t),xhr=r(exe," (CamemBERT model)"),exe.forEach(t),khr=i(Q),Dv=n(Q,"LI",{});var oxe=s(Dv);R1e=n(oxe,"STRONG",{});var r4t=s(R1e);Shr=r(r4t,"convbert"),r4t.forEach(t),Rhr=r(oxe," \u2014 "),XX=n(oxe,"A",{href:!0});var t4t=s(XX);Bhr=r(t4t,"TFConvBertForSequenceClassification"),t4t.forEach(t),Phr=r(oxe," (ConvBERT model)"),oxe.forEach(t),$hr=i(Q),Gv=n(Q,"LI",{});var rxe=s(Gv);B1e=n(rxe,"STRONG",{});var a4t=s(B1e);Ihr=r(a4t,"ctrl"),a4t.forEach(t),qhr=r(rxe," \u2014 "),zX=n(rxe,"A",{href:!0});var n4t=s(zX);Nhr=r(n4t,"TFCTRLForSequenceClassification"),n4t.forEach(t),jhr=r(rxe," (CTRL model)"),rxe.forEach(t),Dhr=i(Q),Ov=n(Q,"LI",{});var txe=s(Ov);P1e=n(txe,"STRONG",{});var s4t=s(P1e);Ghr=r(s4t,"deberta"),s4t.forEach(t),Ohr=r(txe," \u2014 "),QX=n(txe,"A",{href:!0});var l4t=s(QX);Vhr=r(l4t,"TFDebertaForSequenceClassification"),l4t.forEach(t),Xhr=r(txe," (DeBERTa model)"),txe.forEach(t),zhr=i(Q),Vv=n(Q,"LI",{});var axe=s(Vv);$1e=n(axe,"STRONG",{});var i4t=s($1e);Qhr=r(i4t,"deberta-v2"),i4t.forEach(t),Whr=r(axe," \u2014 "),WX=n(axe,"A",{href:!0});var d4t=s(WX);Hhr=r(d4t,"TFDebertaV2ForSequenceClassification"),d4t.forEach(t),Uhr=r(axe," (DeBERTa-v2 model)"),axe.forEach(t),Jhr=i(Q),Xv=n(Q,"LI",{});var nxe=s(Xv);I1e=n(nxe,"STRONG",{});var c4t=s(I1e);Yhr=r(c4t,"distilbert"),c4t.forEach(t),Khr=r(nxe," \u2014 "),HX=n(nxe,"A",{href:!0});var f4t=s(HX);Zhr=r(f4t,"TFDistilBertForSequenceClassification"),f4t.forEach(t),epr=r(nxe," (DistilBERT model)"),nxe.forEach(t),opr=i(Q),zv=n(Q,"LI",{});var sxe=s(zv);q1e=n(sxe,"STRONG",{});var m4t=s(q1e);rpr=r(m4t,"electra"),m4t.forEach(t),tpr=r(sxe," \u2014 "),UX=n(sxe,"A",{href:!0});var g4t=s(UX);apr=r(g4t,"TFElectraForSequenceClassification"),g4t.forEach(t),npr=r(sxe," (ELECTRA model)"),sxe.forEach(t),spr=i(Q),Qv=n(Q,"LI",{});var lxe=s(Qv);N1e=n(lxe,"STRONG",{});var h4t=s(N1e);lpr=r(h4t,"flaubert"),h4t.forEach(t),ipr=r(lxe," \u2014 "),JX=n(lxe,"A",{href:!0});var p4t=s(JX);dpr=r(p4t,"TFFlaubertForSequenceClassification"),p4t.forEach(t),cpr=r(lxe," (FlauBERT model)"),lxe.forEach(t),fpr=i(Q),Wv=n(Q,"LI",{});var ixe=s(Wv);j1e=n(ixe,"STRONG",{});var _4t=s(j1e);mpr=r(_4t,"funnel"),_4t.forEach(t),gpr=r(ixe," \u2014 "),YX=n(ixe,"A",{href:!0});var u4t=s(YX);hpr=r(u4t,"TFFunnelForSequenceClassification"),u4t.forEach(t),ppr=r(ixe," (Funnel Transformer model)"),ixe.forEach(t),_pr=i(Q),Hv=n(Q,"LI",{});var dxe=s(Hv);D1e=n(dxe,"STRONG",{});var b4t=s(D1e);upr=r(b4t,"gpt2"),b4t.forEach(t),bpr=r(dxe," \u2014 "),KX=n(dxe,"A",{href:!0});var F4t=s(KX);Fpr=r(F4t,"TFGPT2ForSequenceClassification"),F4t.forEach(t),vpr=r(dxe," (OpenAI GPT-2 model)"),dxe.forEach(t),Tpr=i(Q),Uv=n(Q,"LI",{});var cxe=s(Uv);G1e=n(cxe,"STRONG",{});var v4t=s(G1e);Mpr=r(v4t,"gptj"),v4t.forEach(t),Epr=r(cxe," \u2014 "),ZX=n(cxe,"A",{href:!0});var T4t=s(ZX);Cpr=r(T4t,"TFGPTJForSequenceClassification"),T4t.forEach(t),wpr=r(cxe," (GPT-J model)"),cxe.forEach(t),Apr=i(Q),Jv=n(Q,"LI",{});var fxe=s(Jv);O1e=n(fxe,"STRONG",{});var M4t=s(O1e);ypr=r(M4t,"layoutlm"),M4t.forEach(t),Lpr=r(fxe," \u2014 "),ez=n(fxe,"A",{href:!0});var E4t=s(ez);xpr=r(E4t,"TFLayoutLMForSequenceClassification"),E4t.forEach(t),kpr=r(fxe," (LayoutLM model)"),fxe.forEach(t),Spr=i(Q),Yv=n(Q,"LI",{});var mxe=s(Yv);V1e=n(mxe,"STRONG",{});var C4t=s(V1e);Rpr=r(C4t,"longformer"),C4t.forEach(t),Bpr=r(mxe," \u2014 "),oz=n(mxe,"A",{href:!0});var w4t=s(oz);Ppr=r(w4t,"TFLongformerForSequenceClassification"),w4t.forEach(t),$pr=r(mxe," (Longformer model)"),mxe.forEach(t),Ipr=i(Q),Kv=n(Q,"LI",{});var gxe=s(Kv);X1e=n(gxe,"STRONG",{});var A4t=s(X1e);qpr=r(A4t,"mobilebert"),A4t.forEach(t),Npr=r(gxe," \u2014 "),rz=n(gxe,"A",{href:!0});var y4t=s(rz);jpr=r(y4t,"TFMobileBertForSequenceClassification"),y4t.forEach(t),Dpr=r(gxe," (MobileBERT model)"),gxe.forEach(t),Gpr=i(Q),Zv=n(Q,"LI",{});var hxe=s(Zv);z1e=n(hxe,"STRONG",{});var L4t=s(z1e);Opr=r(L4t,"mpnet"),L4t.forEach(t),Vpr=r(hxe," \u2014 "),tz=n(hxe,"A",{href:!0});var x4t=s(tz);Xpr=r(x4t,"TFMPNetForSequenceClassification"),x4t.forEach(t),zpr=r(hxe," (MPNet model)"),hxe.forEach(t),Qpr=i(Q),e6=n(Q,"LI",{});var pxe=s(e6);Q1e=n(pxe,"STRONG",{});var k4t=s(Q1e);Wpr=r(k4t,"openai-gpt"),k4t.forEach(t),Hpr=r(pxe," \u2014 "),az=n(pxe,"A",{href:!0});var S4t=s(az);Upr=r(S4t,"TFOpenAIGPTForSequenceClassification"),S4t.forEach(t),Jpr=r(pxe," (OpenAI GPT model)"),pxe.forEach(t),Ypr=i(Q),o6=n(Q,"LI",{});var _xe=s(o6);W1e=n(_xe,"STRONG",{});var R4t=s(W1e);Kpr=r(R4t,"rembert"),R4t.forEach(t),Zpr=r(_xe," \u2014 "),nz=n(_xe,"A",{href:!0});var B4t=s(nz);e_r=r(B4t,"TFRemBertForSequenceClassification"),B4t.forEach(t),o_r=r(_xe," (RemBERT model)"),_xe.forEach(t),r_r=i(Q),r6=n(Q,"LI",{});var uxe=s(r6);H1e=n(uxe,"STRONG",{});var P4t=s(H1e);t_r=r(P4t,"roberta"),P4t.forEach(t),a_r=r(uxe," \u2014 "),sz=n(uxe,"A",{href:!0});var $4t=s(sz);n_r=r($4t,"TFRobertaForSequenceClassification"),$4t.forEach(t),s_r=r(uxe," (RoBERTa model)"),uxe.forEach(t),l_r=i(Q),t6=n(Q,"LI",{});var bxe=s(t6);U1e=n(bxe,"STRONG",{});var I4t=s(U1e);i_r=r(I4t,"roformer"),I4t.forEach(t),d_r=r(bxe," \u2014 "),lz=n(bxe,"A",{href:!0});var q4t=s(lz);c_r=r(q4t,"TFRoFormerForSequenceClassification"),q4t.forEach(t),f_r=r(bxe," (RoFormer model)"),bxe.forEach(t),m_r=i(Q),a6=n(Q,"LI",{});var Fxe=s(a6);J1e=n(Fxe,"STRONG",{});var N4t=s(J1e);g_r=r(N4t,"tapas"),N4t.forEach(t),h_r=r(Fxe," \u2014 "),iz=n(Fxe,"A",{href:!0});var j4t=s(iz);p_r=r(j4t,"TFTapasForSequenceClassification"),j4t.forEach(t),__r=r(Fxe," (TAPAS model)"),Fxe.forEach(t),u_r=i(Q),n6=n(Q,"LI",{});var vxe=s(n6);Y1e=n(vxe,"STRONG",{});var D4t=s(Y1e);b_r=r(D4t,"transfo-xl"),D4t.forEach(t),F_r=r(vxe," \u2014 "),dz=n(vxe,"A",{href:!0});var G4t=s(dz);v_r=r(G4t,"TFTransfoXLForSequenceClassification"),G4t.forEach(t),T_r=r(vxe," (Transformer-XL model)"),vxe.forEach(t),M_r=i(Q),s6=n(Q,"LI",{});var Txe=s(s6);K1e=n(Txe,"STRONG",{});var O4t=s(K1e);E_r=r(O4t,"xlm"),O4t.forEach(t),C_r=r(Txe," \u2014 "),cz=n(Txe,"A",{href:!0});var V4t=s(cz);w_r=r(V4t,"TFXLMForSequenceClassification"),V4t.forEach(t),A_r=r(Txe," (XLM model)"),Txe.forEach(t),y_r=i(Q),l6=n(Q,"LI",{});var Mxe=s(l6);Z1e=n(Mxe,"STRONG",{});var X4t=s(Z1e);L_r=r(X4t,"xlm-roberta"),X4t.forEach(t),x_r=r(Mxe," \u2014 "),fz=n(Mxe,"A",{href:!0});var z4t=s(fz);k_r=r(z4t,"TFXLMRobertaForSequenceClassification"),z4t.forEach(t),S_r=r(Mxe," (XLM-RoBERTa model)"),Mxe.forEach(t),R_r=i(Q),i6=n(Q,"LI",{});var Exe=s(i6);e4e=n(Exe,"STRONG",{});var Q4t=s(e4e);B_r=r(Q4t,"xlnet"),Q4t.forEach(t),P_r=r(Exe," \u2014 "),mz=n(Exe,"A",{href:!0});var W4t=s(mz);$_r=r(W4t,"TFXLNetForSequenceClassification"),W4t.forEach(t),I_r=r(Exe," (XLNet model)"),Exe.forEach(t),Q.forEach(t),q_r=i(Ta),o4e=n(Ta,"P",{});var H4t=s(o4e);N_r=r(H4t,"Examples:"),H4t.forEach(t),j_r=i(Ta),m(eL.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),OBe=i(c),Pc=n(c,"H2",{class:!0});var Z$e=s(Pc);d6=n(Z$e,"A",{id:!0,class:!0,href:!0});var U4t=s(d6);r4e=n(U4t,"SPAN",{});var J4t=s(r4e);m(oL.$$.fragment,J4t),J4t.forEach(t),U4t.forEach(t),D_r=i(Z$e),t4e=n(Z$e,"SPAN",{});var Y4t=s(t4e);G_r=r(Y4t,"TFAutoModelForMultipleChoice"),Y4t.forEach(t),Z$e.forEach(t),VBe=i(c),Ar=n(c,"DIV",{class:!0});var Zl=s(Ar);m(rL.$$.fragment,Zl),O_r=i(Zl),$c=n(Zl,"P",{});var EJ=s($c);V_r=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gz=n(EJ,"A",{href:!0});var K4t=s(gz);X_r=r(K4t,"from_pretrained()"),K4t.forEach(t),z_r=r(EJ," class method or the "),hz=n(EJ,"A",{href:!0});var Z4t=s(hz);Q_r=r(Z4t,"from_config()"),Z4t.forEach(t),W_r=r(EJ,` class
method.`),EJ.forEach(t),H_r=i(Zl),tL=n(Zl,"P",{});var eIe=s(tL);U_r=r(eIe,"This class cannot be instantiated directly using "),a4e=n(eIe,"CODE",{});var ebt=s(a4e);J_r=r(ebt,"__init__()"),ebt.forEach(t),Y_r=r(eIe," (throws an error)."),eIe.forEach(t),K_r=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);m(aL.$$.fragment,ei),Z_r=i(ei),n4e=n(ei,"P",{});var obt=s(n4e);eur=r(obt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),obt.forEach(t),our=i(ei),Ic=n(ei,"P",{});var CJ=s(Ic);rur=r(CJ,`Note:
Loading a model from its configuration file does `),s4e=n(CJ,"STRONG",{});var rbt=s(s4e);tur=r(rbt,"not"),rbt.forEach(t),aur=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=n(CJ,"A",{href:!0});var tbt=s(pz);nur=r(tbt,"from_pretrained()"),tbt.forEach(t),sur=r(CJ," to load the model weights."),CJ.forEach(t),lur=i(ei),l4e=n(ei,"P",{});var abt=s(l4e);iur=r(abt,"Examples:"),abt.forEach(t),dur=i(ei),m(nL.$$.fragment,ei),ei.forEach(t),cur=i(Zl),To=n(Zl,"DIV",{class:!0});var Ma=s(To);m(sL.$$.fragment,Ma),fur=i(Ma),i4e=n(Ma,"P",{});var nbt=s(i4e);mur=r(nbt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),nbt.forEach(t),gur=i(Ma),En=n(Ma,"P",{});var lC=s(En);hur=r(lC,"The model class to instantiate is selected based on the "),d4e=n(lC,"CODE",{});var sbt=s(d4e);pur=r(sbt,"model_type"),sbt.forEach(t),_ur=r(lC,` property of the config object (either
passed as an argument or loaded from `),c4e=n(lC,"CODE",{});var lbt=s(c4e);uur=r(lbt,"pretrained_model_name_or_path"),lbt.forEach(t),bur=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=n(lC,"CODE",{});var ibt=s(f4e);Fur=r(ibt,"pretrained_model_name_or_path"),ibt.forEach(t),vur=r(lC,":"),lC.forEach(t),Tur=i(Ma),se=n(Ma,"UL",{});var ie=s(se);c6=n(ie,"LI",{});var Cxe=s(c6);m4e=n(Cxe,"STRONG",{});var dbt=s(m4e);Mur=r(dbt,"albert"),dbt.forEach(t),Eur=r(Cxe," \u2014 "),_z=n(Cxe,"A",{href:!0});var cbt=s(_z);Cur=r(cbt,"TFAlbertForMultipleChoice"),cbt.forEach(t),wur=r(Cxe," (ALBERT model)"),Cxe.forEach(t),Aur=i(ie),f6=n(ie,"LI",{});var wxe=s(f6);g4e=n(wxe,"STRONG",{});var fbt=s(g4e);yur=r(fbt,"bert"),fbt.forEach(t),Lur=r(wxe," \u2014 "),uz=n(wxe,"A",{href:!0});var mbt=s(uz);xur=r(mbt,"TFBertForMultipleChoice"),mbt.forEach(t),kur=r(wxe," (BERT model)"),wxe.forEach(t),Sur=i(ie),m6=n(ie,"LI",{});var Axe=s(m6);h4e=n(Axe,"STRONG",{});var gbt=s(h4e);Rur=r(gbt,"camembert"),gbt.forEach(t),Bur=r(Axe," \u2014 "),bz=n(Axe,"A",{href:!0});var hbt=s(bz);Pur=r(hbt,"TFCamembertForMultipleChoice"),hbt.forEach(t),$ur=r(Axe," (CamemBERT model)"),Axe.forEach(t),Iur=i(ie),g6=n(ie,"LI",{});var yxe=s(g6);p4e=n(yxe,"STRONG",{});var pbt=s(p4e);qur=r(pbt,"convbert"),pbt.forEach(t),Nur=r(yxe," \u2014 "),Fz=n(yxe,"A",{href:!0});var _bt=s(Fz);jur=r(_bt,"TFConvBertForMultipleChoice"),_bt.forEach(t),Dur=r(yxe," (ConvBERT model)"),yxe.forEach(t),Gur=i(ie),h6=n(ie,"LI",{});var Lxe=s(h6);_4e=n(Lxe,"STRONG",{});var ubt=s(_4e);Our=r(ubt,"distilbert"),ubt.forEach(t),Vur=r(Lxe," \u2014 "),vz=n(Lxe,"A",{href:!0});var bbt=s(vz);Xur=r(bbt,"TFDistilBertForMultipleChoice"),bbt.forEach(t),zur=r(Lxe," (DistilBERT model)"),Lxe.forEach(t),Qur=i(ie),p6=n(ie,"LI",{});var xxe=s(p6);u4e=n(xxe,"STRONG",{});var Fbt=s(u4e);Wur=r(Fbt,"electra"),Fbt.forEach(t),Hur=r(xxe," \u2014 "),Tz=n(xxe,"A",{href:!0});var vbt=s(Tz);Uur=r(vbt,"TFElectraForMultipleChoice"),vbt.forEach(t),Jur=r(xxe," (ELECTRA model)"),xxe.forEach(t),Yur=i(ie),_6=n(ie,"LI",{});var kxe=s(_6);b4e=n(kxe,"STRONG",{});var Tbt=s(b4e);Kur=r(Tbt,"flaubert"),Tbt.forEach(t),Zur=r(kxe," \u2014 "),Mz=n(kxe,"A",{href:!0});var Mbt=s(Mz);e1r=r(Mbt,"TFFlaubertForMultipleChoice"),Mbt.forEach(t),o1r=r(kxe," (FlauBERT model)"),kxe.forEach(t),r1r=i(ie),u6=n(ie,"LI",{});var Sxe=s(u6);F4e=n(Sxe,"STRONG",{});var Ebt=s(F4e);t1r=r(Ebt,"funnel"),Ebt.forEach(t),a1r=r(Sxe," \u2014 "),Ez=n(Sxe,"A",{href:!0});var Cbt=s(Ez);n1r=r(Cbt,"TFFunnelForMultipleChoice"),Cbt.forEach(t),s1r=r(Sxe," (Funnel Transformer model)"),Sxe.forEach(t),l1r=i(ie),b6=n(ie,"LI",{});var Rxe=s(b6);v4e=n(Rxe,"STRONG",{});var wbt=s(v4e);i1r=r(wbt,"longformer"),wbt.forEach(t),d1r=r(Rxe," \u2014 "),Cz=n(Rxe,"A",{href:!0});var Abt=s(Cz);c1r=r(Abt,"TFLongformerForMultipleChoice"),Abt.forEach(t),f1r=r(Rxe," (Longformer model)"),Rxe.forEach(t),m1r=i(ie),F6=n(ie,"LI",{});var Bxe=s(F6);T4e=n(Bxe,"STRONG",{});var ybt=s(T4e);g1r=r(ybt,"mobilebert"),ybt.forEach(t),h1r=r(Bxe," \u2014 "),wz=n(Bxe,"A",{href:!0});var Lbt=s(wz);p1r=r(Lbt,"TFMobileBertForMultipleChoice"),Lbt.forEach(t),_1r=r(Bxe," (MobileBERT model)"),Bxe.forEach(t),u1r=i(ie),v6=n(ie,"LI",{});var Pxe=s(v6);M4e=n(Pxe,"STRONG",{});var xbt=s(M4e);b1r=r(xbt,"mpnet"),xbt.forEach(t),F1r=r(Pxe," \u2014 "),Az=n(Pxe,"A",{href:!0});var kbt=s(Az);v1r=r(kbt,"TFMPNetForMultipleChoice"),kbt.forEach(t),T1r=r(Pxe," (MPNet model)"),Pxe.forEach(t),M1r=i(ie),T6=n(ie,"LI",{});var $xe=s(T6);E4e=n($xe,"STRONG",{});var Sbt=s(E4e);E1r=r(Sbt,"rembert"),Sbt.forEach(t),C1r=r($xe," \u2014 "),yz=n($xe,"A",{href:!0});var Rbt=s(yz);w1r=r(Rbt,"TFRemBertForMultipleChoice"),Rbt.forEach(t),A1r=r($xe," (RemBERT model)"),$xe.forEach(t),y1r=i(ie),M6=n(ie,"LI",{});var Ixe=s(M6);C4e=n(Ixe,"STRONG",{});var Bbt=s(C4e);L1r=r(Bbt,"roberta"),Bbt.forEach(t),x1r=r(Ixe," \u2014 "),Lz=n(Ixe,"A",{href:!0});var Pbt=s(Lz);k1r=r(Pbt,"TFRobertaForMultipleChoice"),Pbt.forEach(t),S1r=r(Ixe," (RoBERTa model)"),Ixe.forEach(t),R1r=i(ie),E6=n(ie,"LI",{});var qxe=s(E6);w4e=n(qxe,"STRONG",{});var $bt=s(w4e);B1r=r($bt,"roformer"),$bt.forEach(t),P1r=r(qxe," \u2014 "),xz=n(qxe,"A",{href:!0});var Ibt=s(xz);$1r=r(Ibt,"TFRoFormerForMultipleChoice"),Ibt.forEach(t),I1r=r(qxe," (RoFormer model)"),qxe.forEach(t),q1r=i(ie),C6=n(ie,"LI",{});var Nxe=s(C6);A4e=n(Nxe,"STRONG",{});var qbt=s(A4e);N1r=r(qbt,"xlm"),qbt.forEach(t),j1r=r(Nxe," \u2014 "),kz=n(Nxe,"A",{href:!0});var Nbt=s(kz);D1r=r(Nbt,"TFXLMForMultipleChoice"),Nbt.forEach(t),G1r=r(Nxe," (XLM model)"),Nxe.forEach(t),O1r=i(ie),w6=n(ie,"LI",{});var jxe=s(w6);y4e=n(jxe,"STRONG",{});var jbt=s(y4e);V1r=r(jbt,"xlm-roberta"),jbt.forEach(t),X1r=r(jxe," \u2014 "),Sz=n(jxe,"A",{href:!0});var Dbt=s(Sz);z1r=r(Dbt,"TFXLMRobertaForMultipleChoice"),Dbt.forEach(t),Q1r=r(jxe," (XLM-RoBERTa model)"),jxe.forEach(t),W1r=i(ie),A6=n(ie,"LI",{});var Dxe=s(A6);L4e=n(Dxe,"STRONG",{});var Gbt=s(L4e);H1r=r(Gbt,"xlnet"),Gbt.forEach(t),U1r=r(Dxe," \u2014 "),Rz=n(Dxe,"A",{href:!0});var Obt=s(Rz);J1r=r(Obt,"TFXLNetForMultipleChoice"),Obt.forEach(t),Y1r=r(Dxe," (XLNet model)"),Dxe.forEach(t),ie.forEach(t),K1r=i(Ma),x4e=n(Ma,"P",{});var Vbt=s(x4e);Z1r=r(Vbt,"Examples:"),Vbt.forEach(t),e4r=i(Ma),m(lL.$$.fragment,Ma),Ma.forEach(t),Zl.forEach(t),XBe=i(c),qc=n(c,"H2",{class:!0});var oIe=s(qc);y6=n(oIe,"A",{id:!0,class:!0,href:!0});var Xbt=s(y6);k4e=n(Xbt,"SPAN",{});var zbt=s(k4e);m(iL.$$.fragment,zbt),zbt.forEach(t),Xbt.forEach(t),o4r=i(oIe),S4e=n(oIe,"SPAN",{});var Qbt=s(S4e);r4r=r(Qbt,"TFAutoModelForTableQuestionAnswering"),Qbt.forEach(t),oIe.forEach(t),zBe=i(c),yr=n(c,"DIV",{class:!0});var oi=s(yr);m(dL.$$.fragment,oi),t4r=i(oi),Nc=n(oi,"P",{});var wJ=s(Nc);a4r=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Bz=n(wJ,"A",{href:!0});var Wbt=s(Bz);n4r=r(Wbt,"from_pretrained()"),Wbt.forEach(t),s4r=r(wJ," class method or the "),Pz=n(wJ,"A",{href:!0});var Hbt=s(Pz);l4r=r(Hbt,"from_config()"),Hbt.forEach(t),i4r=r(wJ,` class
method.`),wJ.forEach(t),d4r=i(oi),cL=n(oi,"P",{});var rIe=s(cL);c4r=r(rIe,"This class cannot be instantiated directly using "),R4e=n(rIe,"CODE",{});var Ubt=s(R4e);f4r=r(Ubt,"__init__()"),Ubt.forEach(t),m4r=r(rIe," (throws an error)."),rIe.forEach(t),g4r=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);m(fL.$$.fragment,ri),h4r=i(ri),B4e=n(ri,"P",{});var Jbt=s(B4e);p4r=r(Jbt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Jbt.forEach(t),_4r=i(ri),jc=n(ri,"P",{});var AJ=s(jc);u4r=r(AJ,`Note:
Loading a model from its configuration file does `),P4e=n(AJ,"STRONG",{});var Ybt=s(P4e);b4r=r(Ybt,"not"),Ybt.forEach(t),F4r=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=n(AJ,"A",{href:!0});var Kbt=s($z);v4r=r(Kbt,"from_pretrained()"),Kbt.forEach(t),T4r=r(AJ," to load the model weights."),AJ.forEach(t),M4r=i(ri),$4e=n(ri,"P",{});var Zbt=s($4e);E4r=r(Zbt,"Examples:"),Zbt.forEach(t),C4r=i(ri),m(mL.$$.fragment,ri),ri.forEach(t),w4r=i(oi),Mo=n(oi,"DIV",{class:!0});var Ea=s(Mo);m(gL.$$.fragment,Ea),A4r=i(Ea),I4e=n(Ea,"P",{});var e5t=s(I4e);y4r=r(e5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),e5t.forEach(t),L4r=i(Ea),Cn=n(Ea,"P",{});var iC=s(Cn);x4r=r(iC,"The model class to instantiate is selected based on the "),q4e=n(iC,"CODE",{});var o5t=s(q4e);k4r=r(o5t,"model_type"),o5t.forEach(t),S4r=r(iC,` property of the config object (either
passed as an argument or loaded from `),N4e=n(iC,"CODE",{});var r5t=s(N4e);R4r=r(r5t,"pretrained_model_name_or_path"),r5t.forEach(t),B4r=r(iC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j4e=n(iC,"CODE",{});var t5t=s(j4e);P4r=r(t5t,"pretrained_model_name_or_path"),t5t.forEach(t),$4r=r(iC,":"),iC.forEach(t),I4r=i(Ea),D4e=n(Ea,"UL",{});var a5t=s(D4e);L6=n(a5t,"LI",{});var Gxe=s(L6);G4e=n(Gxe,"STRONG",{});var n5t=s(G4e);q4r=r(n5t,"tapas"),n5t.forEach(t),N4r=r(Gxe," \u2014 "),Iz=n(Gxe,"A",{href:!0});var s5t=s(Iz);j4r=r(s5t,"TFTapasForQuestionAnswering"),s5t.forEach(t),D4r=r(Gxe," (TAPAS model)"),Gxe.forEach(t),a5t.forEach(t),G4r=i(Ea),O4e=n(Ea,"P",{});var l5t=s(O4e);O4r=r(l5t,"Examples:"),l5t.forEach(t),V4r=i(Ea),m(hL.$$.fragment,Ea),Ea.forEach(t),oi.forEach(t),QBe=i(c),Dc=n(c,"H2",{class:!0});var tIe=s(Dc);x6=n(tIe,"A",{id:!0,class:!0,href:!0});var i5t=s(x6);V4e=n(i5t,"SPAN",{});var d5t=s(V4e);m(pL.$$.fragment,d5t),d5t.forEach(t),i5t.forEach(t),X4r=i(tIe),X4e=n(tIe,"SPAN",{});var c5t=s(X4e);z4r=r(c5t,"TFAutoModelForTokenClassification"),c5t.forEach(t),tIe.forEach(t),WBe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(_L.$$.fragment,ti),Q4r=i(ti),Gc=n(ti,"P",{});var yJ=s(Gc);W4r=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),qz=n(yJ,"A",{href:!0});var f5t=s(qz);H4r=r(f5t,"from_pretrained()"),f5t.forEach(t),U4r=r(yJ," class method or the "),Nz=n(yJ,"A",{href:!0});var m5t=s(Nz);J4r=r(m5t,"from_config()"),m5t.forEach(t),Y4r=r(yJ,` class
method.`),yJ.forEach(t),K4r=i(ti),uL=n(ti,"P",{});var aIe=s(uL);Z4r=r(aIe,"This class cannot be instantiated directly using "),z4e=n(aIe,"CODE",{});var g5t=s(z4e);ebr=r(g5t,"__init__()"),g5t.forEach(t),obr=r(aIe," (throws an error)."),aIe.forEach(t),rbr=i(ti),Mt=n(ti,"DIV",{class:!0});var ai=s(Mt);m(bL.$$.fragment,ai),tbr=i(ai),Q4e=n(ai,"P",{});var h5t=s(Q4e);abr=r(h5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),h5t.forEach(t),nbr=i(ai),Oc=n(ai,"P",{});var LJ=s(Oc);sbr=r(LJ,`Note:
Loading a model from its configuration file does `),W4e=n(LJ,"STRONG",{});var p5t=s(W4e);lbr=r(p5t,"not"),p5t.forEach(t),ibr=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=n(LJ,"A",{href:!0});var _5t=s(jz);dbr=r(_5t,"from_pretrained()"),_5t.forEach(t),cbr=r(LJ," to load the model weights."),LJ.forEach(t),fbr=i(ai),H4e=n(ai,"P",{});var u5t=s(H4e);mbr=r(u5t,"Examples:"),u5t.forEach(t),gbr=i(ai),m(FL.$$.fragment,ai),ai.forEach(t),hbr=i(ti),Eo=n(ti,"DIV",{class:!0});var Ca=s(Eo);m(vL.$$.fragment,Ca),pbr=i(Ca),U4e=n(Ca,"P",{});var b5t=s(U4e);_br=r(b5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),b5t.forEach(t),ubr=i(Ca),wn=n(Ca,"P",{});var dC=s(wn);bbr=r(dC,"The model class to instantiate is selected based on the "),J4e=n(dC,"CODE",{});var F5t=s(J4e);Fbr=r(F5t,"model_type"),F5t.forEach(t),vbr=r(dC,` property of the config object (either
passed as an argument or loaded from `),Y4e=n(dC,"CODE",{});var v5t=s(Y4e);Tbr=r(v5t,"pretrained_model_name_or_path"),v5t.forEach(t),Mbr=r(dC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K4e=n(dC,"CODE",{});var T5t=s(K4e);Ebr=r(T5t,"pretrained_model_name_or_path"),T5t.forEach(t),Cbr=r(dC,":"),dC.forEach(t),wbr=i(Ca),Y=n(Ca,"UL",{});var re=s(Y);k6=n(re,"LI",{});var Oxe=s(k6);Z4e=n(Oxe,"STRONG",{});var M5t=s(Z4e);Abr=r(M5t,"albert"),M5t.forEach(t),ybr=r(Oxe," \u2014 "),Dz=n(Oxe,"A",{href:!0});var E5t=s(Dz);Lbr=r(E5t,"TFAlbertForTokenClassification"),E5t.forEach(t),xbr=r(Oxe," (ALBERT model)"),Oxe.forEach(t),kbr=i(re),S6=n(re,"LI",{});var Vxe=s(S6);ebe=n(Vxe,"STRONG",{});var C5t=s(ebe);Sbr=r(C5t,"bert"),C5t.forEach(t),Rbr=r(Vxe," \u2014 "),Gz=n(Vxe,"A",{href:!0});var w5t=s(Gz);Bbr=r(w5t,"TFBertForTokenClassification"),w5t.forEach(t),Pbr=r(Vxe," (BERT model)"),Vxe.forEach(t),$br=i(re),R6=n(re,"LI",{});var Xxe=s(R6);obe=n(Xxe,"STRONG",{});var A5t=s(obe);Ibr=r(A5t,"camembert"),A5t.forEach(t),qbr=r(Xxe," \u2014 "),Oz=n(Xxe,"A",{href:!0});var y5t=s(Oz);Nbr=r(y5t,"TFCamembertForTokenClassification"),y5t.forEach(t),jbr=r(Xxe," (CamemBERT model)"),Xxe.forEach(t),Dbr=i(re),B6=n(re,"LI",{});var zxe=s(B6);rbe=n(zxe,"STRONG",{});var L5t=s(rbe);Gbr=r(L5t,"convbert"),L5t.forEach(t),Obr=r(zxe," \u2014 "),Vz=n(zxe,"A",{href:!0});var x5t=s(Vz);Vbr=r(x5t,"TFConvBertForTokenClassification"),x5t.forEach(t),Xbr=r(zxe," (ConvBERT model)"),zxe.forEach(t),zbr=i(re),P6=n(re,"LI",{});var Qxe=s(P6);tbe=n(Qxe,"STRONG",{});var k5t=s(tbe);Qbr=r(k5t,"deberta"),k5t.forEach(t),Wbr=r(Qxe," \u2014 "),Xz=n(Qxe,"A",{href:!0});var S5t=s(Xz);Hbr=r(S5t,"TFDebertaForTokenClassification"),S5t.forEach(t),Ubr=r(Qxe," (DeBERTa model)"),Qxe.forEach(t),Jbr=i(re),$6=n(re,"LI",{});var Wxe=s($6);abe=n(Wxe,"STRONG",{});var R5t=s(abe);Ybr=r(R5t,"deberta-v2"),R5t.forEach(t),Kbr=r(Wxe," \u2014 "),zz=n(Wxe,"A",{href:!0});var B5t=s(zz);Zbr=r(B5t,"TFDebertaV2ForTokenClassification"),B5t.forEach(t),e5r=r(Wxe," (DeBERTa-v2 model)"),Wxe.forEach(t),o5r=i(re),I6=n(re,"LI",{});var Hxe=s(I6);nbe=n(Hxe,"STRONG",{});var P5t=s(nbe);r5r=r(P5t,"distilbert"),P5t.forEach(t),t5r=r(Hxe," \u2014 "),Qz=n(Hxe,"A",{href:!0});var $5t=s(Qz);a5r=r($5t,"TFDistilBertForTokenClassification"),$5t.forEach(t),n5r=r(Hxe," (DistilBERT model)"),Hxe.forEach(t),s5r=i(re),q6=n(re,"LI",{});var Uxe=s(q6);sbe=n(Uxe,"STRONG",{});var I5t=s(sbe);l5r=r(I5t,"electra"),I5t.forEach(t),i5r=r(Uxe," \u2014 "),Wz=n(Uxe,"A",{href:!0});var q5t=s(Wz);d5r=r(q5t,"TFElectraForTokenClassification"),q5t.forEach(t),c5r=r(Uxe," (ELECTRA model)"),Uxe.forEach(t),f5r=i(re),N6=n(re,"LI",{});var Jxe=s(N6);lbe=n(Jxe,"STRONG",{});var N5t=s(lbe);m5r=r(N5t,"flaubert"),N5t.forEach(t),g5r=r(Jxe," \u2014 "),Hz=n(Jxe,"A",{href:!0});var j5t=s(Hz);h5r=r(j5t,"TFFlaubertForTokenClassification"),j5t.forEach(t),p5r=r(Jxe," (FlauBERT model)"),Jxe.forEach(t),_5r=i(re),j6=n(re,"LI",{});var Yxe=s(j6);ibe=n(Yxe,"STRONG",{});var D5t=s(ibe);u5r=r(D5t,"funnel"),D5t.forEach(t),b5r=r(Yxe," \u2014 "),Uz=n(Yxe,"A",{href:!0});var G5t=s(Uz);F5r=r(G5t,"TFFunnelForTokenClassification"),G5t.forEach(t),v5r=r(Yxe," (Funnel Transformer model)"),Yxe.forEach(t),T5r=i(re),D6=n(re,"LI",{});var Kxe=s(D6);dbe=n(Kxe,"STRONG",{});var O5t=s(dbe);M5r=r(O5t,"layoutlm"),O5t.forEach(t),E5r=r(Kxe," \u2014 "),Jz=n(Kxe,"A",{href:!0});var V5t=s(Jz);C5r=r(V5t,"TFLayoutLMForTokenClassification"),V5t.forEach(t),w5r=r(Kxe," (LayoutLM model)"),Kxe.forEach(t),A5r=i(re),G6=n(re,"LI",{});var Zxe=s(G6);cbe=n(Zxe,"STRONG",{});var X5t=s(cbe);y5r=r(X5t,"longformer"),X5t.forEach(t),L5r=r(Zxe," \u2014 "),Yz=n(Zxe,"A",{href:!0});var z5t=s(Yz);x5r=r(z5t,"TFLongformerForTokenClassification"),z5t.forEach(t),k5r=r(Zxe," (Longformer model)"),Zxe.forEach(t),S5r=i(re),O6=n(re,"LI",{});var eke=s(O6);fbe=n(eke,"STRONG",{});var Q5t=s(fbe);R5r=r(Q5t,"mobilebert"),Q5t.forEach(t),B5r=r(eke," \u2014 "),Kz=n(eke,"A",{href:!0});var W5t=s(Kz);P5r=r(W5t,"TFMobileBertForTokenClassification"),W5t.forEach(t),$5r=r(eke," (MobileBERT model)"),eke.forEach(t),I5r=i(re),V6=n(re,"LI",{});var oke=s(V6);mbe=n(oke,"STRONG",{});var H5t=s(mbe);q5r=r(H5t,"mpnet"),H5t.forEach(t),N5r=r(oke," \u2014 "),Zz=n(oke,"A",{href:!0});var U5t=s(Zz);j5r=r(U5t,"TFMPNetForTokenClassification"),U5t.forEach(t),D5r=r(oke," (MPNet model)"),oke.forEach(t),G5r=i(re),X6=n(re,"LI",{});var rke=s(X6);gbe=n(rke,"STRONG",{});var J5t=s(gbe);O5r=r(J5t,"rembert"),J5t.forEach(t),V5r=r(rke," \u2014 "),eQ=n(rke,"A",{href:!0});var Y5t=s(eQ);X5r=r(Y5t,"TFRemBertForTokenClassification"),Y5t.forEach(t),z5r=r(rke," (RemBERT model)"),rke.forEach(t),Q5r=i(re),z6=n(re,"LI",{});var tke=s(z6);hbe=n(tke,"STRONG",{});var K5t=s(hbe);W5r=r(K5t,"roberta"),K5t.forEach(t),H5r=r(tke," \u2014 "),oQ=n(tke,"A",{href:!0});var Z5t=s(oQ);U5r=r(Z5t,"TFRobertaForTokenClassification"),Z5t.forEach(t),J5r=r(tke," (RoBERTa model)"),tke.forEach(t),Y5r=i(re),Q6=n(re,"LI",{});var ake=s(Q6);pbe=n(ake,"STRONG",{});var e3t=s(pbe);K5r=r(e3t,"roformer"),e3t.forEach(t),Z5r=r(ake," \u2014 "),rQ=n(ake,"A",{href:!0});var o3t=s(rQ);e3r=r(o3t,"TFRoFormerForTokenClassification"),o3t.forEach(t),o3r=r(ake," (RoFormer model)"),ake.forEach(t),r3r=i(re),W6=n(re,"LI",{});var nke=s(W6);_be=n(nke,"STRONG",{});var r3t=s(_be);t3r=r(r3t,"xlm"),r3t.forEach(t),a3r=r(nke," \u2014 "),tQ=n(nke,"A",{href:!0});var t3t=s(tQ);n3r=r(t3t,"TFXLMForTokenClassification"),t3t.forEach(t),s3r=r(nke," (XLM model)"),nke.forEach(t),l3r=i(re),H6=n(re,"LI",{});var ske=s(H6);ube=n(ske,"STRONG",{});var a3t=s(ube);i3r=r(a3t,"xlm-roberta"),a3t.forEach(t),d3r=r(ske," \u2014 "),aQ=n(ske,"A",{href:!0});var n3t=s(aQ);c3r=r(n3t,"TFXLMRobertaForTokenClassification"),n3t.forEach(t),f3r=r(ske," (XLM-RoBERTa model)"),ske.forEach(t),m3r=i(re),U6=n(re,"LI",{});var lke=s(U6);bbe=n(lke,"STRONG",{});var s3t=s(bbe);g3r=r(s3t,"xlnet"),s3t.forEach(t),h3r=r(lke," \u2014 "),nQ=n(lke,"A",{href:!0});var l3t=s(nQ);p3r=r(l3t,"TFXLNetForTokenClassification"),l3t.forEach(t),_3r=r(lke," (XLNet model)"),lke.forEach(t),re.forEach(t),u3r=i(Ca),Fbe=n(Ca,"P",{});var i3t=s(Fbe);b3r=r(i3t,"Examples:"),i3t.forEach(t),F3r=i(Ca),m(TL.$$.fragment,Ca),Ca.forEach(t),ti.forEach(t),HBe=i(c),Vc=n(c,"H2",{class:!0});var nIe=s(Vc);J6=n(nIe,"A",{id:!0,class:!0,href:!0});var d3t=s(J6);vbe=n(d3t,"SPAN",{});var c3t=s(vbe);m(ML.$$.fragment,c3t),c3t.forEach(t),d3t.forEach(t),v3r=i(nIe),Tbe=n(nIe,"SPAN",{});var f3t=s(Tbe);T3r=r(f3t,"TFAutoModelForQuestionAnswering"),f3t.forEach(t),nIe.forEach(t),UBe=i(c),xr=n(c,"DIV",{class:!0});var ni=s(xr);m(EL.$$.fragment,ni),M3r=i(ni),Xc=n(ni,"P",{});var xJ=s(Xc);E3r=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sQ=n(xJ,"A",{href:!0});var m3t=s(sQ);C3r=r(m3t,"from_pretrained()"),m3t.forEach(t),w3r=r(xJ," class method or the "),lQ=n(xJ,"A",{href:!0});var g3t=s(lQ);A3r=r(g3t,"from_config()"),g3t.forEach(t),y3r=r(xJ,` class
method.`),xJ.forEach(t),L3r=i(ni),CL=n(ni,"P",{});var sIe=s(CL);x3r=r(sIe,"This class cannot be instantiated directly using "),Mbe=n(sIe,"CODE",{});var h3t=s(Mbe);k3r=r(h3t,"__init__()"),h3t.forEach(t),S3r=r(sIe," (throws an error)."),sIe.forEach(t),R3r=i(ni),Et=n(ni,"DIV",{class:!0});var si=s(Et);m(wL.$$.fragment,si),B3r=i(si),Ebe=n(si,"P",{});var p3t=s(Ebe);P3r=r(p3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),p3t.forEach(t),$3r=i(si),zc=n(si,"P",{});var kJ=s(zc);I3r=r(kJ,`Note:
Loading a model from its configuration file does `),Cbe=n(kJ,"STRONG",{});var _3t=s(Cbe);q3r=r(_3t,"not"),_3t.forEach(t),N3r=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=n(kJ,"A",{href:!0});var u3t=s(iQ);j3r=r(u3t,"from_pretrained()"),u3t.forEach(t),D3r=r(kJ," to load the model weights."),kJ.forEach(t),G3r=i(si),wbe=n(si,"P",{});var b3t=s(wbe);O3r=r(b3t,"Examples:"),b3t.forEach(t),V3r=i(si),m(AL.$$.fragment,si),si.forEach(t),X3r=i(ni),Co=n(ni,"DIV",{class:!0});var wa=s(Co);m(yL.$$.fragment,wa),z3r=i(wa),Abe=n(wa,"P",{});var F3t=s(Abe);Q3r=r(F3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),F3t.forEach(t),W3r=i(wa),An=n(wa,"P",{});var cC=s(An);H3r=r(cC,"The model class to instantiate is selected based on the "),ybe=n(cC,"CODE",{});var v3t=s(ybe);U3r=r(v3t,"model_type"),v3t.forEach(t),J3r=r(cC,` property of the config object (either
passed as an argument or loaded from `),Lbe=n(cC,"CODE",{});var T3t=s(Lbe);Y3r=r(T3t,"pretrained_model_name_or_path"),T3t.forEach(t),K3r=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=n(cC,"CODE",{});var M3t=s(xbe);Z3r=r(M3t,"pretrained_model_name_or_path"),M3t.forEach(t),e2r=r(cC,":"),cC.forEach(t),o2r=i(wa),K=n(wa,"UL",{});var te=s(K);Y6=n(te,"LI",{});var ike=s(Y6);kbe=n(ike,"STRONG",{});var E3t=s(kbe);r2r=r(E3t,"albert"),E3t.forEach(t),t2r=r(ike," \u2014 "),dQ=n(ike,"A",{href:!0});var C3t=s(dQ);a2r=r(C3t,"TFAlbertForQuestionAnswering"),C3t.forEach(t),n2r=r(ike," (ALBERT model)"),ike.forEach(t),s2r=i(te),K6=n(te,"LI",{});var dke=s(K6);Sbe=n(dke,"STRONG",{});var w3t=s(Sbe);l2r=r(w3t,"bert"),w3t.forEach(t),i2r=r(dke," \u2014 "),cQ=n(dke,"A",{href:!0});var A3t=s(cQ);d2r=r(A3t,"TFBertForQuestionAnswering"),A3t.forEach(t),c2r=r(dke," (BERT model)"),dke.forEach(t),f2r=i(te),Z6=n(te,"LI",{});var cke=s(Z6);Rbe=n(cke,"STRONG",{});var y3t=s(Rbe);m2r=r(y3t,"camembert"),y3t.forEach(t),g2r=r(cke," \u2014 "),fQ=n(cke,"A",{href:!0});var L3t=s(fQ);h2r=r(L3t,"TFCamembertForQuestionAnswering"),L3t.forEach(t),p2r=r(cke," (CamemBERT model)"),cke.forEach(t),_2r=i(te),eT=n(te,"LI",{});var fke=s(eT);Bbe=n(fke,"STRONG",{});var x3t=s(Bbe);u2r=r(x3t,"convbert"),x3t.forEach(t),b2r=r(fke," \u2014 "),mQ=n(fke,"A",{href:!0});var k3t=s(mQ);F2r=r(k3t,"TFConvBertForQuestionAnswering"),k3t.forEach(t),v2r=r(fke," (ConvBERT model)"),fke.forEach(t),T2r=i(te),oT=n(te,"LI",{});var mke=s(oT);Pbe=n(mke,"STRONG",{});var S3t=s(Pbe);M2r=r(S3t,"deberta"),S3t.forEach(t),E2r=r(mke," \u2014 "),gQ=n(mke,"A",{href:!0});var R3t=s(gQ);C2r=r(R3t,"TFDebertaForQuestionAnswering"),R3t.forEach(t),w2r=r(mke," (DeBERTa model)"),mke.forEach(t),A2r=i(te),rT=n(te,"LI",{});var gke=s(rT);$be=n(gke,"STRONG",{});var B3t=s($be);y2r=r(B3t,"deberta-v2"),B3t.forEach(t),L2r=r(gke," \u2014 "),hQ=n(gke,"A",{href:!0});var P3t=s(hQ);x2r=r(P3t,"TFDebertaV2ForQuestionAnswering"),P3t.forEach(t),k2r=r(gke," (DeBERTa-v2 model)"),gke.forEach(t),S2r=i(te),tT=n(te,"LI",{});var hke=s(tT);Ibe=n(hke,"STRONG",{});var $3t=s(Ibe);R2r=r($3t,"distilbert"),$3t.forEach(t),B2r=r(hke," \u2014 "),pQ=n(hke,"A",{href:!0});var I3t=s(pQ);P2r=r(I3t,"TFDistilBertForQuestionAnswering"),I3t.forEach(t),$2r=r(hke," (DistilBERT model)"),hke.forEach(t),I2r=i(te),aT=n(te,"LI",{});var pke=s(aT);qbe=n(pke,"STRONG",{});var q3t=s(qbe);q2r=r(q3t,"electra"),q3t.forEach(t),N2r=r(pke," \u2014 "),_Q=n(pke,"A",{href:!0});var N3t=s(_Q);j2r=r(N3t,"TFElectraForQuestionAnswering"),N3t.forEach(t),D2r=r(pke," (ELECTRA model)"),pke.forEach(t),G2r=i(te),nT=n(te,"LI",{});var _ke=s(nT);Nbe=n(_ke,"STRONG",{});var j3t=s(Nbe);O2r=r(j3t,"flaubert"),j3t.forEach(t),V2r=r(_ke," \u2014 "),uQ=n(_ke,"A",{href:!0});var D3t=s(uQ);X2r=r(D3t,"TFFlaubertForQuestionAnsweringSimple"),D3t.forEach(t),z2r=r(_ke," (FlauBERT model)"),_ke.forEach(t),Q2r=i(te),sT=n(te,"LI",{});var uke=s(sT);jbe=n(uke,"STRONG",{});var G3t=s(jbe);W2r=r(G3t,"funnel"),G3t.forEach(t),H2r=r(uke," \u2014 "),bQ=n(uke,"A",{href:!0});var O3t=s(bQ);U2r=r(O3t,"TFFunnelForQuestionAnswering"),O3t.forEach(t),J2r=r(uke," (Funnel Transformer model)"),uke.forEach(t),Y2r=i(te),lT=n(te,"LI",{});var bke=s(lT);Dbe=n(bke,"STRONG",{});var V3t=s(Dbe);K2r=r(V3t,"gptj"),V3t.forEach(t),Z2r=r(bke," \u2014 "),FQ=n(bke,"A",{href:!0});var X3t=s(FQ);eFr=r(X3t,"TFGPTJForQuestionAnswering"),X3t.forEach(t),oFr=r(bke," (GPT-J model)"),bke.forEach(t),rFr=i(te),iT=n(te,"LI",{});var Fke=s(iT);Gbe=n(Fke,"STRONG",{});var z3t=s(Gbe);tFr=r(z3t,"longformer"),z3t.forEach(t),aFr=r(Fke," \u2014 "),vQ=n(Fke,"A",{href:!0});var Q3t=s(vQ);nFr=r(Q3t,"TFLongformerForQuestionAnswering"),Q3t.forEach(t),sFr=r(Fke," (Longformer model)"),Fke.forEach(t),lFr=i(te),dT=n(te,"LI",{});var vke=s(dT);Obe=n(vke,"STRONG",{});var W3t=s(Obe);iFr=r(W3t,"mobilebert"),W3t.forEach(t),dFr=r(vke," \u2014 "),TQ=n(vke,"A",{href:!0});var H3t=s(TQ);cFr=r(H3t,"TFMobileBertForQuestionAnswering"),H3t.forEach(t),fFr=r(vke," (MobileBERT model)"),vke.forEach(t),mFr=i(te),cT=n(te,"LI",{});var Tke=s(cT);Vbe=n(Tke,"STRONG",{});var U3t=s(Vbe);gFr=r(U3t,"mpnet"),U3t.forEach(t),hFr=r(Tke," \u2014 "),MQ=n(Tke,"A",{href:!0});var J3t=s(MQ);pFr=r(J3t,"TFMPNetForQuestionAnswering"),J3t.forEach(t),_Fr=r(Tke," (MPNet model)"),Tke.forEach(t),uFr=i(te),fT=n(te,"LI",{});var Mke=s(fT);Xbe=n(Mke,"STRONG",{});var Y3t=s(Xbe);bFr=r(Y3t,"rembert"),Y3t.forEach(t),FFr=r(Mke," \u2014 "),EQ=n(Mke,"A",{href:!0});var K3t=s(EQ);vFr=r(K3t,"TFRemBertForQuestionAnswering"),K3t.forEach(t),TFr=r(Mke," (RemBERT model)"),Mke.forEach(t),MFr=i(te),mT=n(te,"LI",{});var Eke=s(mT);zbe=n(Eke,"STRONG",{});var Z3t=s(zbe);EFr=r(Z3t,"roberta"),Z3t.forEach(t),CFr=r(Eke," \u2014 "),CQ=n(Eke,"A",{href:!0});var e2t=s(CQ);wFr=r(e2t,"TFRobertaForQuestionAnswering"),e2t.forEach(t),AFr=r(Eke," (RoBERTa model)"),Eke.forEach(t),yFr=i(te),gT=n(te,"LI",{});var Cke=s(gT);Qbe=n(Cke,"STRONG",{});var o2t=s(Qbe);LFr=r(o2t,"roformer"),o2t.forEach(t),xFr=r(Cke," \u2014 "),wQ=n(Cke,"A",{href:!0});var r2t=s(wQ);kFr=r(r2t,"TFRoFormerForQuestionAnswering"),r2t.forEach(t),SFr=r(Cke," (RoFormer model)"),Cke.forEach(t),RFr=i(te),hT=n(te,"LI",{});var wke=s(hT);Wbe=n(wke,"STRONG",{});var t2t=s(Wbe);BFr=r(t2t,"xlm"),t2t.forEach(t),PFr=r(wke," \u2014 "),AQ=n(wke,"A",{href:!0});var a2t=s(AQ);$Fr=r(a2t,"TFXLMForQuestionAnsweringSimple"),a2t.forEach(t),IFr=r(wke," (XLM model)"),wke.forEach(t),qFr=i(te),pT=n(te,"LI",{});var Ake=s(pT);Hbe=n(Ake,"STRONG",{});var n2t=s(Hbe);NFr=r(n2t,"xlm-roberta"),n2t.forEach(t),jFr=r(Ake," \u2014 "),yQ=n(Ake,"A",{href:!0});var s2t=s(yQ);DFr=r(s2t,"TFXLMRobertaForQuestionAnswering"),s2t.forEach(t),GFr=r(Ake," (XLM-RoBERTa model)"),Ake.forEach(t),OFr=i(te),_T=n(te,"LI",{});var yke=s(_T);Ube=n(yke,"STRONG",{});var l2t=s(Ube);VFr=r(l2t,"xlnet"),l2t.forEach(t),XFr=r(yke," \u2014 "),LQ=n(yke,"A",{href:!0});var i2t=s(LQ);zFr=r(i2t,"TFXLNetForQuestionAnsweringSimple"),i2t.forEach(t),QFr=r(yke," (XLNet model)"),yke.forEach(t),te.forEach(t),WFr=i(wa),Jbe=n(wa,"P",{});var d2t=s(Jbe);HFr=r(d2t,"Examples:"),d2t.forEach(t),UFr=i(wa),m(LL.$$.fragment,wa),wa.forEach(t),ni.forEach(t),JBe=i(c),Qc=n(c,"H2",{class:!0});var lIe=s(Qc);uT=n(lIe,"A",{id:!0,class:!0,href:!0});var c2t=s(uT);Ybe=n(c2t,"SPAN",{});var f2t=s(Ybe);m(xL.$$.fragment,f2t),f2t.forEach(t),c2t.forEach(t),JFr=i(lIe),Kbe=n(lIe,"SPAN",{});var m2t=s(Kbe);YFr=r(m2t,"TFAutoModelForVision2Seq"),m2t.forEach(t),lIe.forEach(t),YBe=i(c),kr=n(c,"DIV",{class:!0});var li=s(kr);m(kL.$$.fragment,li),KFr=i(li),Wc=n(li,"P",{});var SJ=s(Wc);ZFr=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xQ=n(SJ,"A",{href:!0});var g2t=s(xQ);evr=r(g2t,"from_pretrained()"),g2t.forEach(t),ovr=r(SJ," class method or the "),kQ=n(SJ,"A",{href:!0});var h2t=s(kQ);rvr=r(h2t,"from_config()"),h2t.forEach(t),tvr=r(SJ,` class
method.`),SJ.forEach(t),avr=i(li),SL=n(li,"P",{});var iIe=s(SL);nvr=r(iIe,"This class cannot be instantiated directly using "),Zbe=n(iIe,"CODE",{});var p2t=s(Zbe);svr=r(p2t,"__init__()"),p2t.forEach(t),lvr=r(iIe," (throws an error)."),iIe.forEach(t),ivr=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);m(RL.$$.fragment,ii),dvr=i(ii),e5e=n(ii,"P",{});var _2t=s(e5e);cvr=r(_2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_2t.forEach(t),fvr=i(ii),Hc=n(ii,"P",{});var RJ=s(Hc);mvr=r(RJ,`Note:
Loading a model from its configuration file does `),o5e=n(RJ,"STRONG",{});var u2t=s(o5e);gvr=r(u2t,"not"),u2t.forEach(t),hvr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(RJ,"A",{href:!0});var b2t=s(SQ);pvr=r(b2t,"from_pretrained()"),b2t.forEach(t),_vr=r(RJ," to load the model weights."),RJ.forEach(t),uvr=i(ii),r5e=n(ii,"P",{});var F2t=s(r5e);bvr=r(F2t,"Examples:"),F2t.forEach(t),Fvr=i(ii),m(BL.$$.fragment,ii),ii.forEach(t),vvr=i(li),wo=n(li,"DIV",{class:!0});var Aa=s(wo);m(PL.$$.fragment,Aa),Tvr=i(Aa),t5e=n(Aa,"P",{});var v2t=s(t5e);Mvr=r(v2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),v2t.forEach(t),Evr=i(Aa),yn=n(Aa,"P",{});var fC=s(yn);Cvr=r(fC,"The model class to instantiate is selected based on the "),a5e=n(fC,"CODE",{});var T2t=s(a5e);wvr=r(T2t,"model_type"),T2t.forEach(t),Avr=r(fC,` property of the config object (either
passed as an argument or loaded from `),n5e=n(fC,"CODE",{});var M2t=s(n5e);yvr=r(M2t,"pretrained_model_name_or_path"),M2t.forEach(t),Lvr=r(fC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=n(fC,"CODE",{});var E2t=s(s5e);xvr=r(E2t,"pretrained_model_name_or_path"),E2t.forEach(t),kvr=r(fC,":"),fC.forEach(t),Svr=i(Aa),l5e=n(Aa,"UL",{});var C2t=s(l5e);bT=n(C2t,"LI",{});var Lke=s(bT);i5e=n(Lke,"STRONG",{});var w2t=s(i5e);Rvr=r(w2t,"vision-encoder-decoder"),w2t.forEach(t),Bvr=r(Lke," \u2014 "),RQ=n(Lke,"A",{href:!0});var A2t=s(RQ);Pvr=r(A2t,"TFVisionEncoderDecoderModel"),A2t.forEach(t),$vr=r(Lke," (Vision Encoder decoder model)"),Lke.forEach(t),C2t.forEach(t),Ivr=i(Aa),d5e=n(Aa,"P",{});var y2t=s(d5e);qvr=r(y2t,"Examples:"),y2t.forEach(t),Nvr=i(Aa),m($L.$$.fragment,Aa),Aa.forEach(t),li.forEach(t),KBe=i(c),Uc=n(c,"H2",{class:!0});var dIe=s(Uc);FT=n(dIe,"A",{id:!0,class:!0,href:!0});var L2t=s(FT);c5e=n(L2t,"SPAN",{});var x2t=s(c5e);m(IL.$$.fragment,x2t),x2t.forEach(t),L2t.forEach(t),jvr=i(dIe),f5e=n(dIe,"SPAN",{});var k2t=s(f5e);Dvr=r(k2t,"TFAutoModelForSpeechSeq2Seq"),k2t.forEach(t),dIe.forEach(t),ZBe=i(c),Sr=n(c,"DIV",{class:!0});var di=s(Sr);m(qL.$$.fragment,di),Gvr=i(di),Jc=n(di,"P",{});var BJ=s(Jc);Ovr=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BQ=n(BJ,"A",{href:!0});var S2t=s(BQ);Vvr=r(S2t,"from_pretrained()"),S2t.forEach(t),Xvr=r(BJ," class method or the "),PQ=n(BJ,"A",{href:!0});var R2t=s(PQ);zvr=r(R2t,"from_config()"),R2t.forEach(t),Qvr=r(BJ,` class
method.`),BJ.forEach(t),Wvr=i(di),NL=n(di,"P",{});var cIe=s(NL);Hvr=r(cIe,"This class cannot be instantiated directly using "),m5e=n(cIe,"CODE",{});var B2t=s(m5e);Uvr=r(B2t,"__init__()"),B2t.forEach(t),Jvr=r(cIe," (throws an error)."),cIe.forEach(t),Yvr=i(di),wt=n(di,"DIV",{class:!0});var ci=s(wt);m(jL.$$.fragment,ci),Kvr=i(ci),g5e=n(ci,"P",{});var P2t=s(g5e);Zvr=r(P2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),P2t.forEach(t),e6r=i(ci),Yc=n(ci,"P",{});var PJ=s(Yc);o6r=r(PJ,`Note:
Loading a model from its configuration file does `),h5e=n(PJ,"STRONG",{});var $2t=s(h5e);r6r=r($2t,"not"),$2t.forEach(t),t6r=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(PJ,"A",{href:!0});var I2t=s($Q);a6r=r(I2t,"from_pretrained()"),I2t.forEach(t),n6r=r(PJ," to load the model weights."),PJ.forEach(t),s6r=i(ci),p5e=n(ci,"P",{});var q2t=s(p5e);l6r=r(q2t,"Examples:"),q2t.forEach(t),i6r=i(ci),m(DL.$$.fragment,ci),ci.forEach(t),d6r=i(di),Ao=n(di,"DIV",{class:!0});var ya=s(Ao);m(GL.$$.fragment,ya),c6r=i(ya),_5e=n(ya,"P",{});var N2t=s(_5e);f6r=r(N2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),N2t.forEach(t),m6r=i(ya),Ln=n(ya,"P",{});var mC=s(Ln);g6r=r(mC,"The model class to instantiate is selected based on the "),u5e=n(mC,"CODE",{});var j2t=s(u5e);h6r=r(j2t,"model_type"),j2t.forEach(t),p6r=r(mC,` property of the config object (either
passed as an argument or loaded from `),b5e=n(mC,"CODE",{});var D2t=s(b5e);_6r=r(D2t,"pretrained_model_name_or_path"),D2t.forEach(t),u6r=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=n(mC,"CODE",{});var G2t=s(F5e);b6r=r(G2t,"pretrained_model_name_or_path"),G2t.forEach(t),F6r=r(mC,":"),mC.forEach(t),v6r=i(ya),v5e=n(ya,"UL",{});var O2t=s(v5e);vT=n(O2t,"LI",{});var xke=s(vT);T5e=n(xke,"STRONG",{});var V2t=s(T5e);T6r=r(V2t,"speech_to_text"),V2t.forEach(t),M6r=r(xke," \u2014 "),IQ=n(xke,"A",{href:!0});var X2t=s(IQ);E6r=r(X2t,"TFSpeech2TextForConditionalGeneration"),X2t.forEach(t),C6r=r(xke," (Speech2Text model)"),xke.forEach(t),O2t.forEach(t),w6r=i(ya),M5e=n(ya,"P",{});var z2t=s(M5e);A6r=r(z2t,"Examples:"),z2t.forEach(t),y6r=i(ya),m(OL.$$.fragment,ya),ya.forEach(t),di.forEach(t),ePe=i(c),Kc=n(c,"H2",{class:!0});var fIe=s(Kc);TT=n(fIe,"A",{id:!0,class:!0,href:!0});var Q2t=s(TT);E5e=n(Q2t,"SPAN",{});var W2t=s(E5e);m(VL.$$.fragment,W2t),W2t.forEach(t),Q2t.forEach(t),L6r=i(fIe),C5e=n(fIe,"SPAN",{});var H2t=s(C5e);x6r=r(H2t,"FlaxAutoModel"),H2t.forEach(t),fIe.forEach(t),oPe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(XL.$$.fragment,fi),k6r=i(fi),Zc=n(fi,"P",{});var $J=s(Zc);S6r=r($J,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qQ=n($J,"A",{href:!0});var U2t=s(qQ);R6r=r(U2t,"from_pretrained()"),U2t.forEach(t),B6r=r($J," class method or the "),NQ=n($J,"A",{href:!0});var J2t=s(NQ);P6r=r(J2t,"from_config()"),J2t.forEach(t),$6r=r($J,` class
method.`),$J.forEach(t),I6r=i(fi),zL=n(fi,"P",{});var mIe=s(zL);q6r=r(mIe,"This class cannot be instantiated directly using "),w5e=n(mIe,"CODE",{});var Y2t=s(w5e);N6r=r(Y2t,"__init__()"),Y2t.forEach(t),j6r=r(mIe," (throws an error)."),mIe.forEach(t),D6r=i(fi),At=n(fi,"DIV",{class:!0});var mi=s(At);m(QL.$$.fragment,mi),G6r=i(mi),A5e=n(mi,"P",{});var K2t=s(A5e);O6r=r(K2t,"Instantiates one of the base model classes of the library from a configuration."),K2t.forEach(t),V6r=i(mi),ef=n(mi,"P",{});var IJ=s(ef);X6r=r(IJ,`Note:
Loading a model from its configuration file does `),y5e=n(IJ,"STRONG",{});var Z2t=s(y5e);z6r=r(Z2t,"not"),Z2t.forEach(t),Q6r=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=n(IJ,"A",{href:!0});var eFt=s(jQ);W6r=r(eFt,"from_pretrained()"),eFt.forEach(t),H6r=r(IJ," to load the model weights."),IJ.forEach(t),U6r=i(mi),L5e=n(mi,"P",{});var oFt=s(L5e);J6r=r(oFt,"Examples:"),oFt.forEach(t),Y6r=i(mi),m(WL.$$.fragment,mi),mi.forEach(t),K6r=i(fi),yo=n(fi,"DIV",{class:!0});var La=s(yo);m(HL.$$.fragment,La),Z6r=i(La),x5e=n(La,"P",{});var rFt=s(x5e);eTr=r(rFt,"Instantiate one of the base model classes of the library from a pretrained model."),rFt.forEach(t),oTr=i(La),xn=n(La,"P",{});var gC=s(xn);rTr=r(gC,"The model class to instantiate is selected based on the "),k5e=n(gC,"CODE",{});var tFt=s(k5e);tTr=r(tFt,"model_type"),tFt.forEach(t),aTr=r(gC,` property of the config object (either
passed as an argument or loaded from `),S5e=n(gC,"CODE",{});var aFt=s(S5e);nTr=r(aFt,"pretrained_model_name_or_path"),aFt.forEach(t),sTr=r(gC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=n(gC,"CODE",{});var nFt=s(R5e);lTr=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),iTr=r(gC,":"),gC.forEach(t),dTr=i(La),z=n(La,"UL",{});var W=s(z);MT=n(W,"LI",{});var kke=s(MT);B5e=n(kke,"STRONG",{});var sFt=s(B5e);cTr=r(sFt,"albert"),sFt.forEach(t),fTr=r(kke," \u2014 "),DQ=n(kke,"A",{href:!0});var lFt=s(DQ);mTr=r(lFt,"FlaxAlbertModel"),lFt.forEach(t),gTr=r(kke," (ALBERT model)"),kke.forEach(t),hTr=i(W),ET=n(W,"LI",{});var Ske=s(ET);P5e=n(Ske,"STRONG",{});var iFt=s(P5e);pTr=r(iFt,"bart"),iFt.forEach(t),_Tr=r(Ske," \u2014 "),GQ=n(Ske,"A",{href:!0});var dFt=s(GQ);uTr=r(dFt,"FlaxBartModel"),dFt.forEach(t),bTr=r(Ske," (BART model)"),Ske.forEach(t),FTr=i(W),CT=n(W,"LI",{});var Rke=s(CT);$5e=n(Rke,"STRONG",{});var cFt=s($5e);vTr=r(cFt,"beit"),cFt.forEach(t),TTr=r(Rke," \u2014 "),OQ=n(Rke,"A",{href:!0});var fFt=s(OQ);MTr=r(fFt,"FlaxBeitModel"),fFt.forEach(t),ETr=r(Rke," (BEiT model)"),Rke.forEach(t),CTr=i(W),wT=n(W,"LI",{});var Bke=s(wT);I5e=n(Bke,"STRONG",{});var mFt=s(I5e);wTr=r(mFt,"bert"),mFt.forEach(t),ATr=r(Bke," \u2014 "),VQ=n(Bke,"A",{href:!0});var gFt=s(VQ);yTr=r(gFt,"FlaxBertModel"),gFt.forEach(t),LTr=r(Bke," (BERT model)"),Bke.forEach(t),xTr=i(W),AT=n(W,"LI",{});var Pke=s(AT);q5e=n(Pke,"STRONG",{});var hFt=s(q5e);kTr=r(hFt,"big_bird"),hFt.forEach(t),STr=r(Pke," \u2014 "),XQ=n(Pke,"A",{href:!0});var pFt=s(XQ);RTr=r(pFt,"FlaxBigBirdModel"),pFt.forEach(t),BTr=r(Pke," (BigBird model)"),Pke.forEach(t),PTr=i(W),yT=n(W,"LI",{});var $ke=s(yT);N5e=n($ke,"STRONG",{});var _Ft=s(N5e);$Tr=r(_Ft,"blenderbot"),_Ft.forEach(t),ITr=r($ke," \u2014 "),zQ=n($ke,"A",{href:!0});var uFt=s(zQ);qTr=r(uFt,"FlaxBlenderbotModel"),uFt.forEach(t),NTr=r($ke," (Blenderbot model)"),$ke.forEach(t),jTr=i(W),LT=n(W,"LI",{});var Ike=s(LT);j5e=n(Ike,"STRONG",{});var bFt=s(j5e);DTr=r(bFt,"blenderbot-small"),bFt.forEach(t),GTr=r(Ike," \u2014 "),QQ=n(Ike,"A",{href:!0});var FFt=s(QQ);OTr=r(FFt,"FlaxBlenderbotSmallModel"),FFt.forEach(t),VTr=r(Ike," (BlenderbotSmall model)"),Ike.forEach(t),XTr=i(W),xT=n(W,"LI",{});var qke=s(xT);D5e=n(qke,"STRONG",{});var vFt=s(D5e);zTr=r(vFt,"clip"),vFt.forEach(t),QTr=r(qke," \u2014 "),WQ=n(qke,"A",{href:!0});var TFt=s(WQ);WTr=r(TFt,"FlaxCLIPModel"),TFt.forEach(t),HTr=r(qke," (CLIP model)"),qke.forEach(t),UTr=i(W),kT=n(W,"LI",{});var Nke=s(kT);G5e=n(Nke,"STRONG",{});var MFt=s(G5e);JTr=r(MFt,"distilbert"),MFt.forEach(t),YTr=r(Nke," \u2014 "),HQ=n(Nke,"A",{href:!0});var EFt=s(HQ);KTr=r(EFt,"FlaxDistilBertModel"),EFt.forEach(t),ZTr=r(Nke," (DistilBERT model)"),Nke.forEach(t),eMr=i(W),ST=n(W,"LI",{});var jke=s(ST);O5e=n(jke,"STRONG",{});var CFt=s(O5e);oMr=r(CFt,"electra"),CFt.forEach(t),rMr=r(jke," \u2014 "),UQ=n(jke,"A",{href:!0});var wFt=s(UQ);tMr=r(wFt,"FlaxElectraModel"),wFt.forEach(t),aMr=r(jke," (ELECTRA model)"),jke.forEach(t),nMr=i(W),RT=n(W,"LI",{});var Dke=s(RT);V5e=n(Dke,"STRONG",{});var AFt=s(V5e);sMr=r(AFt,"gpt2"),AFt.forEach(t),lMr=r(Dke," \u2014 "),JQ=n(Dke,"A",{href:!0});var yFt=s(JQ);iMr=r(yFt,"FlaxGPT2Model"),yFt.forEach(t),dMr=r(Dke," (OpenAI GPT-2 model)"),Dke.forEach(t),cMr=i(W),BT=n(W,"LI",{});var Gke=s(BT);X5e=n(Gke,"STRONG",{});var LFt=s(X5e);fMr=r(LFt,"gpt_neo"),LFt.forEach(t),mMr=r(Gke," \u2014 "),YQ=n(Gke,"A",{href:!0});var xFt=s(YQ);gMr=r(xFt,"FlaxGPTNeoModel"),xFt.forEach(t),hMr=r(Gke," (GPT Neo model)"),Gke.forEach(t),pMr=i(W),PT=n(W,"LI",{});var Oke=s(PT);z5e=n(Oke,"STRONG",{});var kFt=s(z5e);_Mr=r(kFt,"gptj"),kFt.forEach(t),uMr=r(Oke," \u2014 "),KQ=n(Oke,"A",{href:!0});var SFt=s(KQ);bMr=r(SFt,"FlaxGPTJModel"),SFt.forEach(t),FMr=r(Oke," (GPT-J model)"),Oke.forEach(t),vMr=i(W),$T=n(W,"LI",{});var Vke=s($T);Q5e=n(Vke,"STRONG",{});var RFt=s(Q5e);TMr=r(RFt,"marian"),RFt.forEach(t),MMr=r(Vke," \u2014 "),ZQ=n(Vke,"A",{href:!0});var BFt=s(ZQ);EMr=r(BFt,"FlaxMarianModel"),BFt.forEach(t),CMr=r(Vke," (Marian model)"),Vke.forEach(t),wMr=i(W),IT=n(W,"LI",{});var Xke=s(IT);W5e=n(Xke,"STRONG",{});var PFt=s(W5e);AMr=r(PFt,"mbart"),PFt.forEach(t),yMr=r(Xke," \u2014 "),eW=n(Xke,"A",{href:!0});var $Ft=s(eW);LMr=r($Ft,"FlaxMBartModel"),$Ft.forEach(t),xMr=r(Xke," (mBART model)"),Xke.forEach(t),kMr=i(W),qT=n(W,"LI",{});var zke=s(qT);H5e=n(zke,"STRONG",{});var IFt=s(H5e);SMr=r(IFt,"mt5"),IFt.forEach(t),RMr=r(zke," \u2014 "),oW=n(zke,"A",{href:!0});var qFt=s(oW);BMr=r(qFt,"FlaxMT5Model"),qFt.forEach(t),PMr=r(zke," (mT5 model)"),zke.forEach(t),$Mr=i(W),NT=n(W,"LI",{});var Qke=s(NT);U5e=n(Qke,"STRONG",{});var NFt=s(U5e);IMr=r(NFt,"pegasus"),NFt.forEach(t),qMr=r(Qke," \u2014 "),rW=n(Qke,"A",{href:!0});var jFt=s(rW);NMr=r(jFt,"FlaxPegasusModel"),jFt.forEach(t),jMr=r(Qke," (Pegasus model)"),Qke.forEach(t),DMr=i(W),jT=n(W,"LI",{});var Wke=s(jT);J5e=n(Wke,"STRONG",{});var DFt=s(J5e);GMr=r(DFt,"roberta"),DFt.forEach(t),OMr=r(Wke," \u2014 "),tW=n(Wke,"A",{href:!0});var GFt=s(tW);VMr=r(GFt,"FlaxRobertaModel"),GFt.forEach(t),XMr=r(Wke," (RoBERTa model)"),Wke.forEach(t),zMr=i(W),DT=n(W,"LI",{});var Hke=s(DT);Y5e=n(Hke,"STRONG",{});var OFt=s(Y5e);QMr=r(OFt,"roformer"),OFt.forEach(t),WMr=r(Hke," \u2014 "),aW=n(Hke,"A",{href:!0});var VFt=s(aW);HMr=r(VFt,"FlaxRoFormerModel"),VFt.forEach(t),UMr=r(Hke," (RoFormer model)"),Hke.forEach(t),JMr=i(W),GT=n(W,"LI",{});var Uke=s(GT);K5e=n(Uke,"STRONG",{});var XFt=s(K5e);YMr=r(XFt,"t5"),XFt.forEach(t),KMr=r(Uke," \u2014 "),nW=n(Uke,"A",{href:!0});var zFt=s(nW);ZMr=r(zFt,"FlaxT5Model"),zFt.forEach(t),eEr=r(Uke," (T5 model)"),Uke.forEach(t),oEr=i(W),OT=n(W,"LI",{});var Jke=s(OT);Z5e=n(Jke,"STRONG",{});var QFt=s(Z5e);rEr=r(QFt,"vision-text-dual-encoder"),QFt.forEach(t),tEr=r(Jke," \u2014 "),sW=n(Jke,"A",{href:!0});var WFt=s(sW);aEr=r(WFt,"FlaxVisionTextDualEncoderModel"),WFt.forEach(t),nEr=r(Jke," (VisionTextDualEncoder model)"),Jke.forEach(t),sEr=i(W),VT=n(W,"LI",{});var Yke=s(VT);e3e=n(Yke,"STRONG",{});var HFt=s(e3e);lEr=r(HFt,"vit"),HFt.forEach(t),iEr=r(Yke," \u2014 "),lW=n(Yke,"A",{href:!0});var UFt=s(lW);dEr=r(UFt,"FlaxViTModel"),UFt.forEach(t),cEr=r(Yke," (ViT model)"),Yke.forEach(t),fEr=i(W),XT=n(W,"LI",{});var Kke=s(XT);o3e=n(Kke,"STRONG",{});var JFt=s(o3e);mEr=r(JFt,"wav2vec2"),JFt.forEach(t),gEr=r(Kke," \u2014 "),iW=n(Kke,"A",{href:!0});var YFt=s(iW);hEr=r(YFt,"FlaxWav2Vec2Model"),YFt.forEach(t),pEr=r(Kke," (Wav2Vec2 model)"),Kke.forEach(t),_Er=i(W),zT=n(W,"LI",{});var Zke=s(zT);r3e=n(Zke,"STRONG",{});var KFt=s(r3e);uEr=r(KFt,"xglm"),KFt.forEach(t),bEr=r(Zke," \u2014 "),dW=n(Zke,"A",{href:!0});var ZFt=s(dW);FEr=r(ZFt,"FlaxXGLMModel"),ZFt.forEach(t),vEr=r(Zke," (XGLM model)"),Zke.forEach(t),TEr=i(W),QT=n(W,"LI",{});var eSe=s(QT);t3e=n(eSe,"STRONG",{});var evt=s(t3e);MEr=r(evt,"xlm-roberta"),evt.forEach(t),EEr=r(eSe," \u2014 "),cW=n(eSe,"A",{href:!0});var ovt=s(cW);CEr=r(ovt,"FlaxXLMRobertaModel"),ovt.forEach(t),wEr=r(eSe," (XLM-RoBERTa model)"),eSe.forEach(t),W.forEach(t),AEr=i(La),a3e=n(La,"P",{});var rvt=s(a3e);yEr=r(rvt,"Examples:"),rvt.forEach(t),LEr=i(La),m(UL.$$.fragment,La),La.forEach(t),fi.forEach(t),rPe=i(c),of=n(c,"H2",{class:!0});var gIe=s(of);WT=n(gIe,"A",{id:!0,class:!0,href:!0});var tvt=s(WT);n3e=n(tvt,"SPAN",{});var avt=s(n3e);m(JL.$$.fragment,avt),avt.forEach(t),tvt.forEach(t),xEr=i(gIe),s3e=n(gIe,"SPAN",{});var nvt=s(s3e);kEr=r(nvt,"FlaxAutoModelForCausalLM"),nvt.forEach(t),gIe.forEach(t),tPe=i(c),Br=n(c,"DIV",{class:!0});var gi=s(Br);m(YL.$$.fragment,gi),SEr=i(gi),rf=n(gi,"P",{});var qJ=s(rf);REr=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fW=n(qJ,"A",{href:!0});var svt=s(fW);BEr=r(svt,"from_pretrained()"),svt.forEach(t),PEr=r(qJ," class method or the "),mW=n(qJ,"A",{href:!0});var lvt=s(mW);$Er=r(lvt,"from_config()"),lvt.forEach(t),IEr=r(qJ,` class
method.`),qJ.forEach(t),qEr=i(gi),KL=n(gi,"P",{});var hIe=s(KL);NEr=r(hIe,"This class cannot be instantiated directly using "),l3e=n(hIe,"CODE",{});var ivt=s(l3e);jEr=r(ivt,"__init__()"),ivt.forEach(t),DEr=r(hIe," (throws an error)."),hIe.forEach(t),GEr=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);m(ZL.$$.fragment,hi),OEr=i(hi),i3e=n(hi,"P",{});var dvt=s(i3e);VEr=r(dvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dvt.forEach(t),XEr=i(hi),tf=n(hi,"P",{});var NJ=s(tf);zEr=r(NJ,`Note:
Loading a model from its configuration file does `),d3e=n(NJ,"STRONG",{});var cvt=s(d3e);QEr=r(cvt,"not"),cvt.forEach(t),WEr=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(NJ,"A",{href:!0});var fvt=s(gW);HEr=r(fvt,"from_pretrained()"),fvt.forEach(t),UEr=r(NJ," to load the model weights."),NJ.forEach(t),JEr=i(hi),c3e=n(hi,"P",{});var mvt=s(c3e);YEr=r(mvt,"Examples:"),mvt.forEach(t),KEr=i(hi),m(e8.$$.fragment,hi),hi.forEach(t),ZEr=i(gi),Lo=n(gi,"DIV",{class:!0});var xa=s(Lo);m(o8.$$.fragment,xa),eCr=i(xa),f3e=n(xa,"P",{});var gvt=s(f3e);oCr=r(gvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gvt.forEach(t),rCr=i(xa),kn=n(xa,"P",{});var hC=s(kn);tCr=r(hC,"The model class to instantiate is selected based on the "),m3e=n(hC,"CODE",{});var hvt=s(m3e);aCr=r(hvt,"model_type"),hvt.forEach(t),nCr=r(hC,` property of the config object (either
passed as an argument or loaded from `),g3e=n(hC,"CODE",{});var pvt=s(g3e);sCr=r(pvt,"pretrained_model_name_or_path"),pvt.forEach(t),lCr=r(hC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h3e=n(hC,"CODE",{});var _vt=s(h3e);iCr=r(_vt,"pretrained_model_name_or_path"),_vt.forEach(t),dCr=r(hC,":"),hC.forEach(t),cCr=i(xa),ca=n(xa,"UL",{});var pi=s(ca);HT=n(pi,"LI",{});var oSe=s(HT);p3e=n(oSe,"STRONG",{});var uvt=s(p3e);fCr=r(uvt,"bart"),uvt.forEach(t),mCr=r(oSe," \u2014 "),hW=n(oSe,"A",{href:!0});var bvt=s(hW);gCr=r(bvt,"FlaxBartForCausalLM"),bvt.forEach(t),hCr=r(oSe," (BART model)"),oSe.forEach(t),pCr=i(pi),UT=n(pi,"LI",{});var rSe=s(UT);_3e=n(rSe,"STRONG",{});var Fvt=s(_3e);_Cr=r(Fvt,"gpt2"),Fvt.forEach(t),uCr=r(rSe," \u2014 "),pW=n(rSe,"A",{href:!0});var vvt=s(pW);bCr=r(vvt,"FlaxGPT2LMHeadModel"),vvt.forEach(t),FCr=r(rSe," (OpenAI GPT-2 model)"),rSe.forEach(t),vCr=i(pi),JT=n(pi,"LI",{});var tSe=s(JT);u3e=n(tSe,"STRONG",{});var Tvt=s(u3e);TCr=r(Tvt,"gpt_neo"),Tvt.forEach(t),MCr=r(tSe," \u2014 "),_W=n(tSe,"A",{href:!0});var Mvt=s(_W);ECr=r(Mvt,"FlaxGPTNeoForCausalLM"),Mvt.forEach(t),CCr=r(tSe," (GPT Neo model)"),tSe.forEach(t),wCr=i(pi),YT=n(pi,"LI",{});var aSe=s(YT);b3e=n(aSe,"STRONG",{});var Evt=s(b3e);ACr=r(Evt,"gptj"),Evt.forEach(t),yCr=r(aSe," \u2014 "),uW=n(aSe,"A",{href:!0});var Cvt=s(uW);LCr=r(Cvt,"FlaxGPTJForCausalLM"),Cvt.forEach(t),xCr=r(aSe," (GPT-J model)"),aSe.forEach(t),kCr=i(pi),KT=n(pi,"LI",{});var nSe=s(KT);F3e=n(nSe,"STRONG",{});var wvt=s(F3e);SCr=r(wvt,"xglm"),wvt.forEach(t),RCr=r(nSe," \u2014 "),bW=n(nSe,"A",{href:!0});var Avt=s(bW);BCr=r(Avt,"FlaxXGLMForCausalLM"),Avt.forEach(t),PCr=r(nSe," (XGLM model)"),nSe.forEach(t),pi.forEach(t),$Cr=i(xa),v3e=n(xa,"P",{});var yvt=s(v3e);ICr=r(yvt,"Examples:"),yvt.forEach(t),qCr=i(xa),m(r8.$$.fragment,xa),xa.forEach(t),gi.forEach(t),aPe=i(c),af=n(c,"H2",{class:!0});var pIe=s(af);ZT=n(pIe,"A",{id:!0,class:!0,href:!0});var Lvt=s(ZT);T3e=n(Lvt,"SPAN",{});var xvt=s(T3e);m(t8.$$.fragment,xvt),xvt.forEach(t),Lvt.forEach(t),NCr=i(pIe),M3e=n(pIe,"SPAN",{});var kvt=s(M3e);jCr=r(kvt,"FlaxAutoModelForPreTraining"),kvt.forEach(t),pIe.forEach(t),nPe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(a8.$$.fragment,_i),DCr=i(_i),nf=n(_i,"P",{});var jJ=s(nf);GCr=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FW=n(jJ,"A",{href:!0});var Svt=s(FW);OCr=r(Svt,"from_pretrained()"),Svt.forEach(t),VCr=r(jJ," class method or the "),vW=n(jJ,"A",{href:!0});var Rvt=s(vW);XCr=r(Rvt,"from_config()"),Rvt.forEach(t),zCr=r(jJ,` class
method.`),jJ.forEach(t),QCr=i(_i),n8=n(_i,"P",{});var _Ie=s(n8);WCr=r(_Ie,"This class cannot be instantiated directly using "),E3e=n(_Ie,"CODE",{});var Bvt=s(E3e);HCr=r(Bvt,"__init__()"),Bvt.forEach(t),UCr=r(_Ie," (throws an error)."),_Ie.forEach(t),JCr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(s8.$$.fragment,ui),YCr=i(ui),C3e=n(ui,"P",{});var Pvt=s(C3e);KCr=r(Pvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Pvt.forEach(t),ZCr=i(ui),sf=n(ui,"P",{});var DJ=s(sf);ewr=r(DJ,`Note:
Loading a model from its configuration file does `),w3e=n(DJ,"STRONG",{});var $vt=s(w3e);owr=r($vt,"not"),$vt.forEach(t),rwr=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(DJ,"A",{href:!0});var Ivt=s(TW);twr=r(Ivt,"from_pretrained()"),Ivt.forEach(t),awr=r(DJ," to load the model weights."),DJ.forEach(t),nwr=i(ui),A3e=n(ui,"P",{});var qvt=s(A3e);swr=r(qvt,"Examples:"),qvt.forEach(t),lwr=i(ui),m(l8.$$.fragment,ui),ui.forEach(t),iwr=i(_i),xo=n(_i,"DIV",{class:!0});var ka=s(xo);m(i8.$$.fragment,ka),dwr=i(ka),y3e=n(ka,"P",{});var Nvt=s(y3e);cwr=r(Nvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Nvt.forEach(t),fwr=i(ka),Sn=n(ka,"P",{});var pC=s(Sn);mwr=r(pC,"The model class to instantiate is selected based on the "),L3e=n(pC,"CODE",{});var jvt=s(L3e);gwr=r(jvt,"model_type"),jvt.forEach(t),hwr=r(pC,` property of the config object (either
passed as an argument or loaded from `),x3e=n(pC,"CODE",{});var Dvt=s(x3e);pwr=r(Dvt,"pretrained_model_name_or_path"),Dvt.forEach(t),_wr=r(pC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k3e=n(pC,"CODE",{});var Gvt=s(k3e);uwr=r(Gvt,"pretrained_model_name_or_path"),Gvt.forEach(t),bwr=r(pC,":"),pC.forEach(t),Fwr=i(ka),me=n(ka,"UL",{});var _e=s(me);eM=n(_e,"LI",{});var sSe=s(eM);S3e=n(sSe,"STRONG",{});var Ovt=s(S3e);vwr=r(Ovt,"albert"),Ovt.forEach(t),Twr=r(sSe," \u2014 "),MW=n(sSe,"A",{href:!0});var Vvt=s(MW);Mwr=r(Vvt,"FlaxAlbertForPreTraining"),Vvt.forEach(t),Ewr=r(sSe," (ALBERT model)"),sSe.forEach(t),Cwr=i(_e),oM=n(_e,"LI",{});var lSe=s(oM);R3e=n(lSe,"STRONG",{});var Xvt=s(R3e);wwr=r(Xvt,"bart"),Xvt.forEach(t),Awr=r(lSe," \u2014 "),EW=n(lSe,"A",{href:!0});var zvt=s(EW);ywr=r(zvt,"FlaxBartForConditionalGeneration"),zvt.forEach(t),Lwr=r(lSe," (BART model)"),lSe.forEach(t),xwr=i(_e),rM=n(_e,"LI",{});var iSe=s(rM);B3e=n(iSe,"STRONG",{});var Qvt=s(B3e);kwr=r(Qvt,"bert"),Qvt.forEach(t),Swr=r(iSe," \u2014 "),CW=n(iSe,"A",{href:!0});var Wvt=s(CW);Rwr=r(Wvt,"FlaxBertForPreTraining"),Wvt.forEach(t),Bwr=r(iSe," (BERT model)"),iSe.forEach(t),Pwr=i(_e),tM=n(_e,"LI",{});var dSe=s(tM);P3e=n(dSe,"STRONG",{});var Hvt=s(P3e);$wr=r(Hvt,"big_bird"),Hvt.forEach(t),Iwr=r(dSe," \u2014 "),wW=n(dSe,"A",{href:!0});var Uvt=s(wW);qwr=r(Uvt,"FlaxBigBirdForPreTraining"),Uvt.forEach(t),Nwr=r(dSe," (BigBird model)"),dSe.forEach(t),jwr=i(_e),aM=n(_e,"LI",{});var cSe=s(aM);$3e=n(cSe,"STRONG",{});var Jvt=s($3e);Dwr=r(Jvt,"electra"),Jvt.forEach(t),Gwr=r(cSe," \u2014 "),AW=n(cSe,"A",{href:!0});var Yvt=s(AW);Owr=r(Yvt,"FlaxElectraForPreTraining"),Yvt.forEach(t),Vwr=r(cSe," (ELECTRA model)"),cSe.forEach(t),Xwr=i(_e),nM=n(_e,"LI",{});var fSe=s(nM);I3e=n(fSe,"STRONG",{});var Kvt=s(I3e);zwr=r(Kvt,"mbart"),Kvt.forEach(t),Qwr=r(fSe," \u2014 "),yW=n(fSe,"A",{href:!0});var Zvt=s(yW);Wwr=r(Zvt,"FlaxMBartForConditionalGeneration"),Zvt.forEach(t),Hwr=r(fSe," (mBART model)"),fSe.forEach(t),Uwr=i(_e),sM=n(_e,"LI",{});var mSe=s(sM);q3e=n(mSe,"STRONG",{});var e6t=s(q3e);Jwr=r(e6t,"mt5"),e6t.forEach(t),Ywr=r(mSe," \u2014 "),LW=n(mSe,"A",{href:!0});var o6t=s(LW);Kwr=r(o6t,"FlaxMT5ForConditionalGeneration"),o6t.forEach(t),Zwr=r(mSe," (mT5 model)"),mSe.forEach(t),eAr=i(_e),lM=n(_e,"LI",{});var gSe=s(lM);N3e=n(gSe,"STRONG",{});var r6t=s(N3e);oAr=r(r6t,"roberta"),r6t.forEach(t),rAr=r(gSe," \u2014 "),xW=n(gSe,"A",{href:!0});var t6t=s(xW);tAr=r(t6t,"FlaxRobertaForMaskedLM"),t6t.forEach(t),aAr=r(gSe," (RoBERTa model)"),gSe.forEach(t),nAr=i(_e),iM=n(_e,"LI",{});var hSe=s(iM);j3e=n(hSe,"STRONG",{});var a6t=s(j3e);sAr=r(a6t,"roformer"),a6t.forEach(t),lAr=r(hSe," \u2014 "),kW=n(hSe,"A",{href:!0});var n6t=s(kW);iAr=r(n6t,"FlaxRoFormerForMaskedLM"),n6t.forEach(t),dAr=r(hSe," (RoFormer model)"),hSe.forEach(t),cAr=i(_e),dM=n(_e,"LI",{});var pSe=s(dM);D3e=n(pSe,"STRONG",{});var s6t=s(D3e);fAr=r(s6t,"t5"),s6t.forEach(t),mAr=r(pSe," \u2014 "),SW=n(pSe,"A",{href:!0});var l6t=s(SW);gAr=r(l6t,"FlaxT5ForConditionalGeneration"),l6t.forEach(t),hAr=r(pSe," (T5 model)"),pSe.forEach(t),pAr=i(_e),cM=n(_e,"LI",{});var _Se=s(cM);G3e=n(_Se,"STRONG",{});var i6t=s(G3e);_Ar=r(i6t,"wav2vec2"),i6t.forEach(t),uAr=r(_Se," \u2014 "),RW=n(_Se,"A",{href:!0});var d6t=s(RW);bAr=r(d6t,"FlaxWav2Vec2ForPreTraining"),d6t.forEach(t),FAr=r(_Se," (Wav2Vec2 model)"),_Se.forEach(t),vAr=i(_e),fM=n(_e,"LI",{});var uSe=s(fM);O3e=n(uSe,"STRONG",{});var c6t=s(O3e);TAr=r(c6t,"xlm-roberta"),c6t.forEach(t),MAr=r(uSe," \u2014 "),BW=n(uSe,"A",{href:!0});var f6t=s(BW);EAr=r(f6t,"FlaxXLMRobertaForMaskedLM"),f6t.forEach(t),CAr=r(uSe," (XLM-RoBERTa model)"),uSe.forEach(t),_e.forEach(t),wAr=i(ka),V3e=n(ka,"P",{});var m6t=s(V3e);AAr=r(m6t,"Examples:"),m6t.forEach(t),yAr=i(ka),m(d8.$$.fragment,ka),ka.forEach(t),_i.forEach(t),sPe=i(c),lf=n(c,"H2",{class:!0});var uIe=s(lf);mM=n(uIe,"A",{id:!0,class:!0,href:!0});var g6t=s(mM);X3e=n(g6t,"SPAN",{});var h6t=s(X3e);m(c8.$$.fragment,h6t),h6t.forEach(t),g6t.forEach(t),LAr=i(uIe),z3e=n(uIe,"SPAN",{});var p6t=s(z3e);xAr=r(p6t,"FlaxAutoModelForMaskedLM"),p6t.forEach(t),uIe.forEach(t),lPe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(f8.$$.fragment,bi),kAr=i(bi),df=n(bi,"P",{});var GJ=s(df);SAr=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PW=n(GJ,"A",{href:!0});var _6t=s(PW);RAr=r(_6t,"from_pretrained()"),_6t.forEach(t),BAr=r(GJ," class method or the "),$W=n(GJ,"A",{href:!0});var u6t=s($W);PAr=r(u6t,"from_config()"),u6t.forEach(t),$Ar=r(GJ,` class
method.`),GJ.forEach(t),IAr=i(bi),m8=n(bi,"P",{});var bIe=s(m8);qAr=r(bIe,"This class cannot be instantiated directly using "),Q3e=n(bIe,"CODE",{});var b6t=s(Q3e);NAr=r(b6t,"__init__()"),b6t.forEach(t),jAr=r(bIe," (throws an error)."),bIe.forEach(t),DAr=i(bi),xt=n(bi,"DIV",{class:!0});var Fi=s(xt);m(g8.$$.fragment,Fi),GAr=i(Fi),W3e=n(Fi,"P",{});var F6t=s(W3e);OAr=r(F6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),F6t.forEach(t),VAr=i(Fi),cf=n(Fi,"P",{});var OJ=s(cf);XAr=r(OJ,`Note:
Loading a model from its configuration file does `),H3e=n(OJ,"STRONG",{});var v6t=s(H3e);zAr=r(v6t,"not"),v6t.forEach(t),QAr=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n(OJ,"A",{href:!0});var T6t=s(IW);WAr=r(T6t,"from_pretrained()"),T6t.forEach(t),HAr=r(OJ," to load the model weights."),OJ.forEach(t),UAr=i(Fi),U3e=n(Fi,"P",{});var M6t=s(U3e);JAr=r(M6t,"Examples:"),M6t.forEach(t),YAr=i(Fi),m(h8.$$.fragment,Fi),Fi.forEach(t),KAr=i(bi),ko=n(bi,"DIV",{class:!0});var Sa=s(ko);m(p8.$$.fragment,Sa),ZAr=i(Sa),J3e=n(Sa,"P",{});var E6t=s(J3e);e0r=r(E6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),E6t.forEach(t),o0r=i(Sa),Rn=n(Sa,"P",{});var _C=s(Rn);r0r=r(_C,"The model class to instantiate is selected based on the "),Y3e=n(_C,"CODE",{});var C6t=s(Y3e);t0r=r(C6t,"model_type"),C6t.forEach(t),a0r=r(_C,` property of the config object (either
passed as an argument or loaded from `),K3e=n(_C,"CODE",{});var w6t=s(K3e);n0r=r(w6t,"pretrained_model_name_or_path"),w6t.forEach(t),s0r=r(_C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z3e=n(_C,"CODE",{});var A6t=s(Z3e);l0r=r(A6t,"pretrained_model_name_or_path"),A6t.forEach(t),i0r=r(_C,":"),_C.forEach(t),d0r=i(Sa),Fe=n(Sa,"UL",{});var Ae=s(Fe);gM=n(Ae,"LI",{});var bSe=s(gM);e2e=n(bSe,"STRONG",{});var y6t=s(e2e);c0r=r(y6t,"albert"),y6t.forEach(t),f0r=r(bSe," \u2014 "),qW=n(bSe,"A",{href:!0});var L6t=s(qW);m0r=r(L6t,"FlaxAlbertForMaskedLM"),L6t.forEach(t),g0r=r(bSe," (ALBERT model)"),bSe.forEach(t),h0r=i(Ae),hM=n(Ae,"LI",{});var FSe=s(hM);o2e=n(FSe,"STRONG",{});var x6t=s(o2e);p0r=r(x6t,"bart"),x6t.forEach(t),_0r=r(FSe," \u2014 "),NW=n(FSe,"A",{href:!0});var k6t=s(NW);u0r=r(k6t,"FlaxBartForConditionalGeneration"),k6t.forEach(t),b0r=r(FSe," (BART model)"),FSe.forEach(t),F0r=i(Ae),pM=n(Ae,"LI",{});var vSe=s(pM);r2e=n(vSe,"STRONG",{});var S6t=s(r2e);v0r=r(S6t,"bert"),S6t.forEach(t),T0r=r(vSe," \u2014 "),jW=n(vSe,"A",{href:!0});var R6t=s(jW);M0r=r(R6t,"FlaxBertForMaskedLM"),R6t.forEach(t),E0r=r(vSe," (BERT model)"),vSe.forEach(t),C0r=i(Ae),_M=n(Ae,"LI",{});var TSe=s(_M);t2e=n(TSe,"STRONG",{});var B6t=s(t2e);w0r=r(B6t,"big_bird"),B6t.forEach(t),A0r=r(TSe," \u2014 "),DW=n(TSe,"A",{href:!0});var P6t=s(DW);y0r=r(P6t,"FlaxBigBirdForMaskedLM"),P6t.forEach(t),L0r=r(TSe," (BigBird model)"),TSe.forEach(t),x0r=i(Ae),uM=n(Ae,"LI",{});var MSe=s(uM);a2e=n(MSe,"STRONG",{});var $6t=s(a2e);k0r=r($6t,"distilbert"),$6t.forEach(t),S0r=r(MSe," \u2014 "),GW=n(MSe,"A",{href:!0});var I6t=s(GW);R0r=r(I6t,"FlaxDistilBertForMaskedLM"),I6t.forEach(t),B0r=r(MSe," (DistilBERT model)"),MSe.forEach(t),P0r=i(Ae),bM=n(Ae,"LI",{});var ESe=s(bM);n2e=n(ESe,"STRONG",{});var q6t=s(n2e);$0r=r(q6t,"electra"),q6t.forEach(t),I0r=r(ESe," \u2014 "),OW=n(ESe,"A",{href:!0});var N6t=s(OW);q0r=r(N6t,"FlaxElectraForMaskedLM"),N6t.forEach(t),N0r=r(ESe," (ELECTRA model)"),ESe.forEach(t),j0r=i(Ae),FM=n(Ae,"LI",{});var CSe=s(FM);s2e=n(CSe,"STRONG",{});var j6t=s(s2e);D0r=r(j6t,"mbart"),j6t.forEach(t),G0r=r(CSe," \u2014 "),VW=n(CSe,"A",{href:!0});var D6t=s(VW);O0r=r(D6t,"FlaxMBartForConditionalGeneration"),D6t.forEach(t),V0r=r(CSe," (mBART model)"),CSe.forEach(t),X0r=i(Ae),vM=n(Ae,"LI",{});var wSe=s(vM);l2e=n(wSe,"STRONG",{});var G6t=s(l2e);z0r=r(G6t,"roberta"),G6t.forEach(t),Q0r=r(wSe," \u2014 "),XW=n(wSe,"A",{href:!0});var O6t=s(XW);W0r=r(O6t,"FlaxRobertaForMaskedLM"),O6t.forEach(t),H0r=r(wSe," (RoBERTa model)"),wSe.forEach(t),U0r=i(Ae),TM=n(Ae,"LI",{});var ASe=s(TM);i2e=n(ASe,"STRONG",{});var V6t=s(i2e);J0r=r(V6t,"roformer"),V6t.forEach(t),Y0r=r(ASe," \u2014 "),zW=n(ASe,"A",{href:!0});var X6t=s(zW);K0r=r(X6t,"FlaxRoFormerForMaskedLM"),X6t.forEach(t),Z0r=r(ASe," (RoFormer model)"),ASe.forEach(t),eyr=i(Ae),MM=n(Ae,"LI",{});var ySe=s(MM);d2e=n(ySe,"STRONG",{});var z6t=s(d2e);oyr=r(z6t,"xlm-roberta"),z6t.forEach(t),ryr=r(ySe," \u2014 "),QW=n(ySe,"A",{href:!0});var Q6t=s(QW);tyr=r(Q6t,"FlaxXLMRobertaForMaskedLM"),Q6t.forEach(t),ayr=r(ySe," (XLM-RoBERTa model)"),ySe.forEach(t),Ae.forEach(t),nyr=i(Sa),c2e=n(Sa,"P",{});var W6t=s(c2e);syr=r(W6t,"Examples:"),W6t.forEach(t),lyr=i(Sa),m(_8.$$.fragment,Sa),Sa.forEach(t),bi.forEach(t),iPe=i(c),ff=n(c,"H2",{class:!0});var FIe=s(ff);EM=n(FIe,"A",{id:!0,class:!0,href:!0});var H6t=s(EM);f2e=n(H6t,"SPAN",{});var U6t=s(f2e);m(u8.$$.fragment,U6t),U6t.forEach(t),H6t.forEach(t),iyr=i(FIe),m2e=n(FIe,"SPAN",{});var J6t=s(m2e);dyr=r(J6t,"FlaxAutoModelForSeq2SeqLM"),J6t.forEach(t),FIe.forEach(t),dPe=i(c),Ir=n(c,"DIV",{class:!0});var vi=s(Ir);m(b8.$$.fragment,vi),cyr=i(vi),mf=n(vi,"P",{});var VJ=s(mf);fyr=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WW=n(VJ,"A",{href:!0});var Y6t=s(WW);myr=r(Y6t,"from_pretrained()"),Y6t.forEach(t),gyr=r(VJ," class method or the "),HW=n(VJ,"A",{href:!0});var K6t=s(HW);hyr=r(K6t,"from_config()"),K6t.forEach(t),pyr=r(VJ,` class
method.`),VJ.forEach(t),_yr=i(vi),F8=n(vi,"P",{});var vIe=s(F8);uyr=r(vIe,"This class cannot be instantiated directly using "),g2e=n(vIe,"CODE",{});var Z6t=s(g2e);byr=r(Z6t,"__init__()"),Z6t.forEach(t),Fyr=r(vIe," (throws an error)."),vIe.forEach(t),vyr=i(vi),kt=n(vi,"DIV",{class:!0});var Ti=s(kt);m(v8.$$.fragment,Ti),Tyr=i(Ti),h2e=n(Ti,"P",{});var eTt=s(h2e);Myr=r(eTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),eTt.forEach(t),Eyr=i(Ti),gf=n(Ti,"P",{});var XJ=s(gf);Cyr=r(XJ,`Note:
Loading a model from its configuration file does `),p2e=n(XJ,"STRONG",{});var oTt=s(p2e);wyr=r(oTt,"not"),oTt.forEach(t),Ayr=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n(XJ,"A",{href:!0});var rTt=s(UW);yyr=r(rTt,"from_pretrained()"),rTt.forEach(t),Lyr=r(XJ," to load the model weights."),XJ.forEach(t),xyr=i(Ti),_2e=n(Ti,"P",{});var tTt=s(_2e);kyr=r(tTt,"Examples:"),tTt.forEach(t),Syr=i(Ti),m(T8.$$.fragment,Ti),Ti.forEach(t),Ryr=i(vi),So=n(vi,"DIV",{class:!0});var Ra=s(So);m(M8.$$.fragment,Ra),Byr=i(Ra),u2e=n(Ra,"P",{});var aTt=s(u2e);Pyr=r(aTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),aTt.forEach(t),$yr=i(Ra),Bn=n(Ra,"P",{});var uC=s(Bn);Iyr=r(uC,"The model class to instantiate is selected based on the "),b2e=n(uC,"CODE",{});var nTt=s(b2e);qyr=r(nTt,"model_type"),nTt.forEach(t),Nyr=r(uC,` property of the config object (either
passed as an argument or loaded from `),F2e=n(uC,"CODE",{});var sTt=s(F2e);jyr=r(sTt,"pretrained_model_name_or_path"),sTt.forEach(t),Dyr=r(uC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v2e=n(uC,"CODE",{});var lTt=s(v2e);Gyr=r(lTt,"pretrained_model_name_or_path"),lTt.forEach(t),Oyr=r(uC,":"),uC.forEach(t),Vyr=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);CM=n(so,"LI",{});var LSe=s(CM);T2e=n(LSe,"STRONG",{});var iTt=s(T2e);Xyr=r(iTt,"bart"),iTt.forEach(t),zyr=r(LSe," \u2014 "),JW=n(LSe,"A",{href:!0});var dTt=s(JW);Qyr=r(dTt,"FlaxBartForConditionalGeneration"),dTt.forEach(t),Wyr=r(LSe," (BART model)"),LSe.forEach(t),Hyr=i(so),wM=n(so,"LI",{});var xSe=s(wM);M2e=n(xSe,"STRONG",{});var cTt=s(M2e);Uyr=r(cTt,"blenderbot"),cTt.forEach(t),Jyr=r(xSe," \u2014 "),YW=n(xSe,"A",{href:!0});var fTt=s(YW);Yyr=r(fTt,"FlaxBlenderbotForConditionalGeneration"),fTt.forEach(t),Kyr=r(xSe," (Blenderbot model)"),xSe.forEach(t),Zyr=i(so),AM=n(so,"LI",{});var kSe=s(AM);E2e=n(kSe,"STRONG",{});var mTt=s(E2e);eLr=r(mTt,"blenderbot-small"),mTt.forEach(t),oLr=r(kSe," \u2014 "),KW=n(kSe,"A",{href:!0});var gTt=s(KW);rLr=r(gTt,"FlaxBlenderbotSmallForConditionalGeneration"),gTt.forEach(t),tLr=r(kSe," (BlenderbotSmall model)"),kSe.forEach(t),aLr=i(so),yM=n(so,"LI",{});var SSe=s(yM);C2e=n(SSe,"STRONG",{});var hTt=s(C2e);nLr=r(hTt,"encoder-decoder"),hTt.forEach(t),sLr=r(SSe," \u2014 "),ZW=n(SSe,"A",{href:!0});var pTt=s(ZW);lLr=r(pTt,"FlaxEncoderDecoderModel"),pTt.forEach(t),iLr=r(SSe," (Encoder decoder model)"),SSe.forEach(t),dLr=i(so),LM=n(so,"LI",{});var RSe=s(LM);w2e=n(RSe,"STRONG",{});var _Tt=s(w2e);cLr=r(_Tt,"marian"),_Tt.forEach(t),fLr=r(RSe," \u2014 "),eH=n(RSe,"A",{href:!0});var uTt=s(eH);mLr=r(uTt,"FlaxMarianMTModel"),uTt.forEach(t),gLr=r(RSe," (Marian model)"),RSe.forEach(t),hLr=i(so),xM=n(so,"LI",{});var BSe=s(xM);A2e=n(BSe,"STRONG",{});var bTt=s(A2e);pLr=r(bTt,"mbart"),bTt.forEach(t),_Lr=r(BSe," \u2014 "),oH=n(BSe,"A",{href:!0});var FTt=s(oH);uLr=r(FTt,"FlaxMBartForConditionalGeneration"),FTt.forEach(t),bLr=r(BSe," (mBART model)"),BSe.forEach(t),FLr=i(so),kM=n(so,"LI",{});var PSe=s(kM);y2e=n(PSe,"STRONG",{});var vTt=s(y2e);vLr=r(vTt,"mt5"),vTt.forEach(t),TLr=r(PSe," \u2014 "),rH=n(PSe,"A",{href:!0});var TTt=s(rH);MLr=r(TTt,"FlaxMT5ForConditionalGeneration"),TTt.forEach(t),ELr=r(PSe," (mT5 model)"),PSe.forEach(t),CLr=i(so),SM=n(so,"LI",{});var $Se=s(SM);L2e=n($Se,"STRONG",{});var MTt=s(L2e);wLr=r(MTt,"pegasus"),MTt.forEach(t),ALr=r($Se," \u2014 "),tH=n($Se,"A",{href:!0});var ETt=s(tH);yLr=r(ETt,"FlaxPegasusForConditionalGeneration"),ETt.forEach(t),LLr=r($Se," (Pegasus model)"),$Se.forEach(t),xLr=i(so),RM=n(so,"LI",{});var ISe=s(RM);x2e=n(ISe,"STRONG",{});var CTt=s(x2e);kLr=r(CTt,"t5"),CTt.forEach(t),SLr=r(ISe," \u2014 "),aH=n(ISe,"A",{href:!0});var wTt=s(aH);RLr=r(wTt,"FlaxT5ForConditionalGeneration"),wTt.forEach(t),BLr=r(ISe," (T5 model)"),ISe.forEach(t),so.forEach(t),PLr=i(Ra),k2e=n(Ra,"P",{});var ATt=s(k2e);$Lr=r(ATt,"Examples:"),ATt.forEach(t),ILr=i(Ra),m(E8.$$.fragment,Ra),Ra.forEach(t),vi.forEach(t),cPe=i(c),hf=n(c,"H2",{class:!0});var TIe=s(hf);BM=n(TIe,"A",{id:!0,class:!0,href:!0});var yTt=s(BM);S2e=n(yTt,"SPAN",{});var LTt=s(S2e);m(C8.$$.fragment,LTt),LTt.forEach(t),yTt.forEach(t),qLr=i(TIe),R2e=n(TIe,"SPAN",{});var xTt=s(R2e);NLr=r(xTt,"FlaxAutoModelForSequenceClassification"),xTt.forEach(t),TIe.forEach(t),fPe=i(c),qr=n(c,"DIV",{class:!0});var Mi=s(qr);m(w8.$$.fragment,Mi),jLr=i(Mi),pf=n(Mi,"P",{});var zJ=s(pf);DLr=r(zJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nH=n(zJ,"A",{href:!0});var kTt=s(nH);GLr=r(kTt,"from_pretrained()"),kTt.forEach(t),OLr=r(zJ," class method or the "),sH=n(zJ,"A",{href:!0});var STt=s(sH);VLr=r(STt,"from_config()"),STt.forEach(t),XLr=r(zJ,` class
method.`),zJ.forEach(t),zLr=i(Mi),A8=n(Mi,"P",{});var MIe=s(A8);QLr=r(MIe,"This class cannot be instantiated directly using "),B2e=n(MIe,"CODE",{});var RTt=s(B2e);WLr=r(RTt,"__init__()"),RTt.forEach(t),HLr=r(MIe," (throws an error)."),MIe.forEach(t),ULr=i(Mi),St=n(Mi,"DIV",{class:!0});var Ei=s(St);m(y8.$$.fragment,Ei),JLr=i(Ei),P2e=n(Ei,"P",{});var BTt=s(P2e);YLr=r(BTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),BTt.forEach(t),KLr=i(Ei),_f=n(Ei,"P",{});var QJ=s(_f);ZLr=r(QJ,`Note:
Loading a model from its configuration file does `),$2e=n(QJ,"STRONG",{});var PTt=s($2e);e8r=r(PTt,"not"),PTt.forEach(t),o8r=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(QJ,"A",{href:!0});var $Tt=s(lH);r8r=r($Tt,"from_pretrained()"),$Tt.forEach(t),t8r=r(QJ," to load the model weights."),QJ.forEach(t),a8r=i(Ei),I2e=n(Ei,"P",{});var ITt=s(I2e);n8r=r(ITt,"Examples:"),ITt.forEach(t),s8r=i(Ei),m(L8.$$.fragment,Ei),Ei.forEach(t),l8r=i(Mi),Ro=n(Mi,"DIV",{class:!0});var Ba=s(Ro);m(x8.$$.fragment,Ba),i8r=i(Ba),q2e=n(Ba,"P",{});var qTt=s(q2e);d8r=r(qTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qTt.forEach(t),c8r=i(Ba),Pn=n(Ba,"P",{});var bC=s(Pn);f8r=r(bC,"The model class to instantiate is selected based on the "),N2e=n(bC,"CODE",{});var NTt=s(N2e);m8r=r(NTt,"model_type"),NTt.forEach(t),g8r=r(bC,` property of the config object (either
passed as an argument or loaded from `),j2e=n(bC,"CODE",{});var jTt=s(j2e);h8r=r(jTt,"pretrained_model_name_or_path"),jTt.forEach(t),p8r=r(bC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D2e=n(bC,"CODE",{});var DTt=s(D2e);_8r=r(DTt,"pretrained_model_name_or_path"),DTt.forEach(t),u8r=r(bC,":"),bC.forEach(t),b8r=i(Ba),ve=n(Ba,"UL",{});var ye=s(ve);PM=n(ye,"LI",{});var qSe=s(PM);G2e=n(qSe,"STRONG",{});var GTt=s(G2e);F8r=r(GTt,"albert"),GTt.forEach(t),v8r=r(qSe," \u2014 "),iH=n(qSe,"A",{href:!0});var OTt=s(iH);T8r=r(OTt,"FlaxAlbertForSequenceClassification"),OTt.forEach(t),M8r=r(qSe," (ALBERT model)"),qSe.forEach(t),E8r=i(ye),$M=n(ye,"LI",{});var NSe=s($M);O2e=n(NSe,"STRONG",{});var VTt=s(O2e);C8r=r(VTt,"bart"),VTt.forEach(t),w8r=r(NSe," \u2014 "),dH=n(NSe,"A",{href:!0});var XTt=s(dH);A8r=r(XTt,"FlaxBartForSequenceClassification"),XTt.forEach(t),y8r=r(NSe," (BART model)"),NSe.forEach(t),L8r=i(ye),IM=n(ye,"LI",{});var jSe=s(IM);V2e=n(jSe,"STRONG",{});var zTt=s(V2e);x8r=r(zTt,"bert"),zTt.forEach(t),k8r=r(jSe," \u2014 "),cH=n(jSe,"A",{href:!0});var QTt=s(cH);S8r=r(QTt,"FlaxBertForSequenceClassification"),QTt.forEach(t),R8r=r(jSe," (BERT model)"),jSe.forEach(t),B8r=i(ye),qM=n(ye,"LI",{});var DSe=s(qM);X2e=n(DSe,"STRONG",{});var WTt=s(X2e);P8r=r(WTt,"big_bird"),WTt.forEach(t),$8r=r(DSe," \u2014 "),fH=n(DSe,"A",{href:!0});var HTt=s(fH);I8r=r(HTt,"FlaxBigBirdForSequenceClassification"),HTt.forEach(t),q8r=r(DSe," (BigBird model)"),DSe.forEach(t),N8r=i(ye),NM=n(ye,"LI",{});var GSe=s(NM);z2e=n(GSe,"STRONG",{});var UTt=s(z2e);j8r=r(UTt,"distilbert"),UTt.forEach(t),D8r=r(GSe," \u2014 "),mH=n(GSe,"A",{href:!0});var JTt=s(mH);G8r=r(JTt,"FlaxDistilBertForSequenceClassification"),JTt.forEach(t),O8r=r(GSe," (DistilBERT model)"),GSe.forEach(t),V8r=i(ye),jM=n(ye,"LI",{});var OSe=s(jM);Q2e=n(OSe,"STRONG",{});var YTt=s(Q2e);X8r=r(YTt,"electra"),YTt.forEach(t),z8r=r(OSe," \u2014 "),gH=n(OSe,"A",{href:!0});var KTt=s(gH);Q8r=r(KTt,"FlaxElectraForSequenceClassification"),KTt.forEach(t),W8r=r(OSe," (ELECTRA model)"),OSe.forEach(t),H8r=i(ye),DM=n(ye,"LI",{});var VSe=s(DM);W2e=n(VSe,"STRONG",{});var ZTt=s(W2e);U8r=r(ZTt,"mbart"),ZTt.forEach(t),J8r=r(VSe," \u2014 "),hH=n(VSe,"A",{href:!0});var eMt=s(hH);Y8r=r(eMt,"FlaxMBartForSequenceClassification"),eMt.forEach(t),K8r=r(VSe," (mBART model)"),VSe.forEach(t),Z8r=i(ye),GM=n(ye,"LI",{});var XSe=s(GM);H2e=n(XSe,"STRONG",{});var oMt=s(H2e);e7r=r(oMt,"roberta"),oMt.forEach(t),o7r=r(XSe," \u2014 "),pH=n(XSe,"A",{href:!0});var rMt=s(pH);r7r=r(rMt,"FlaxRobertaForSequenceClassification"),rMt.forEach(t),t7r=r(XSe," (RoBERTa model)"),XSe.forEach(t),a7r=i(ye),OM=n(ye,"LI",{});var zSe=s(OM);U2e=n(zSe,"STRONG",{});var tMt=s(U2e);n7r=r(tMt,"roformer"),tMt.forEach(t),s7r=r(zSe," \u2014 "),_H=n(zSe,"A",{href:!0});var aMt=s(_H);l7r=r(aMt,"FlaxRoFormerForSequenceClassification"),aMt.forEach(t),i7r=r(zSe," (RoFormer model)"),zSe.forEach(t),d7r=i(ye),VM=n(ye,"LI",{});var QSe=s(VM);J2e=n(QSe,"STRONG",{});var nMt=s(J2e);c7r=r(nMt,"xlm-roberta"),nMt.forEach(t),f7r=r(QSe," \u2014 "),uH=n(QSe,"A",{href:!0});var sMt=s(uH);m7r=r(sMt,"FlaxXLMRobertaForSequenceClassification"),sMt.forEach(t),g7r=r(QSe," (XLM-RoBERTa model)"),QSe.forEach(t),ye.forEach(t),h7r=i(Ba),Y2e=n(Ba,"P",{});var lMt=s(Y2e);p7r=r(lMt,"Examples:"),lMt.forEach(t),_7r=i(Ba),m(k8.$$.fragment,Ba),Ba.forEach(t),Mi.forEach(t),mPe=i(c),uf=n(c,"H2",{class:!0});var EIe=s(uf);XM=n(EIe,"A",{id:!0,class:!0,href:!0});var iMt=s(XM);K2e=n(iMt,"SPAN",{});var dMt=s(K2e);m(S8.$$.fragment,dMt),dMt.forEach(t),iMt.forEach(t),u7r=i(EIe),Z2e=n(EIe,"SPAN",{});var cMt=s(Z2e);b7r=r(cMt,"FlaxAutoModelForQuestionAnswering"),cMt.forEach(t),EIe.forEach(t),gPe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);m(R8.$$.fragment,Ci),F7r=i(Ci),bf=n(Ci,"P",{});var WJ=s(bf);v7r=r(WJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bH=n(WJ,"A",{href:!0});var fMt=s(bH);T7r=r(fMt,"from_pretrained()"),fMt.forEach(t),M7r=r(WJ," class method or the "),FH=n(WJ,"A",{href:!0});var mMt=s(FH);E7r=r(mMt,"from_config()"),mMt.forEach(t),C7r=r(WJ,` class
method.`),WJ.forEach(t),w7r=i(Ci),B8=n(Ci,"P",{});var CIe=s(B8);A7r=r(CIe,"This class cannot be instantiated directly using "),eFe=n(CIe,"CODE",{});var gMt=s(eFe);y7r=r(gMt,"__init__()"),gMt.forEach(t),L7r=r(CIe," (throws an error)."),CIe.forEach(t),x7r=i(Ci),Rt=n(Ci,"DIV",{class:!0});var wi=s(Rt);m(P8.$$.fragment,wi),k7r=i(wi),oFe=n(wi,"P",{});var hMt=s(oFe);S7r=r(hMt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hMt.forEach(t),R7r=i(wi),Ff=n(wi,"P",{});var HJ=s(Ff);B7r=r(HJ,`Note:
Loading a model from its configuration file does `),rFe=n(HJ,"STRONG",{});var pMt=s(rFe);P7r=r(pMt,"not"),pMt.forEach(t),$7r=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n(HJ,"A",{href:!0});var _Mt=s(vH);I7r=r(_Mt,"from_pretrained()"),_Mt.forEach(t),q7r=r(HJ," to load the model weights."),HJ.forEach(t),N7r=i(wi),tFe=n(wi,"P",{});var uMt=s(tFe);j7r=r(uMt,"Examples:"),uMt.forEach(t),D7r=i(wi),m($8.$$.fragment,wi),wi.forEach(t),G7r=i(Ci),Bo=n(Ci,"DIV",{class:!0});var Pa=s(Bo);m(I8.$$.fragment,Pa),O7r=i(Pa),aFe=n(Pa,"P",{});var bMt=s(aFe);V7r=r(bMt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),bMt.forEach(t),X7r=i(Pa),$n=n(Pa,"P",{});var FC=s($n);z7r=r(FC,"The model class to instantiate is selected based on the "),nFe=n(FC,"CODE",{});var FMt=s(nFe);Q7r=r(FMt,"model_type"),FMt.forEach(t),W7r=r(FC,` property of the config object (either
passed as an argument or loaded from `),sFe=n(FC,"CODE",{});var vMt=s(sFe);H7r=r(vMt,"pretrained_model_name_or_path"),vMt.forEach(t),U7r=r(FC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=n(FC,"CODE",{});var TMt=s(lFe);J7r=r(TMt,"pretrained_model_name_or_path"),TMt.forEach(t),Y7r=r(FC,":"),FC.forEach(t),K7r=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);zM=n(Le,"LI",{});var WSe=s(zM);iFe=n(WSe,"STRONG",{});var MMt=s(iFe);Z7r=r(MMt,"albert"),MMt.forEach(t),e9r=r(WSe," \u2014 "),TH=n(WSe,"A",{href:!0});var EMt=s(TH);o9r=r(EMt,"FlaxAlbertForQuestionAnswering"),EMt.forEach(t),r9r=r(WSe," (ALBERT model)"),WSe.forEach(t),t9r=i(Le),QM=n(Le,"LI",{});var HSe=s(QM);dFe=n(HSe,"STRONG",{});var CMt=s(dFe);a9r=r(CMt,"bart"),CMt.forEach(t),n9r=r(HSe," \u2014 "),MH=n(HSe,"A",{href:!0});var wMt=s(MH);s9r=r(wMt,"FlaxBartForQuestionAnswering"),wMt.forEach(t),l9r=r(HSe," (BART model)"),HSe.forEach(t),i9r=i(Le),WM=n(Le,"LI",{});var USe=s(WM);cFe=n(USe,"STRONG",{});var AMt=s(cFe);d9r=r(AMt,"bert"),AMt.forEach(t),c9r=r(USe," \u2014 "),EH=n(USe,"A",{href:!0});var yMt=s(EH);f9r=r(yMt,"FlaxBertForQuestionAnswering"),yMt.forEach(t),m9r=r(USe," (BERT model)"),USe.forEach(t),g9r=i(Le),HM=n(Le,"LI",{});var JSe=s(HM);fFe=n(JSe,"STRONG",{});var LMt=s(fFe);h9r=r(LMt,"big_bird"),LMt.forEach(t),p9r=r(JSe," \u2014 "),CH=n(JSe,"A",{href:!0});var xMt=s(CH);_9r=r(xMt,"FlaxBigBirdForQuestionAnswering"),xMt.forEach(t),u9r=r(JSe," (BigBird model)"),JSe.forEach(t),b9r=i(Le),UM=n(Le,"LI",{});var YSe=s(UM);mFe=n(YSe,"STRONG",{});var kMt=s(mFe);F9r=r(kMt,"distilbert"),kMt.forEach(t),v9r=r(YSe," \u2014 "),wH=n(YSe,"A",{href:!0});var SMt=s(wH);T9r=r(SMt,"FlaxDistilBertForQuestionAnswering"),SMt.forEach(t),M9r=r(YSe," (DistilBERT model)"),YSe.forEach(t),E9r=i(Le),JM=n(Le,"LI",{});var KSe=s(JM);gFe=n(KSe,"STRONG",{});var RMt=s(gFe);C9r=r(RMt,"electra"),RMt.forEach(t),w9r=r(KSe," \u2014 "),AH=n(KSe,"A",{href:!0});var BMt=s(AH);A9r=r(BMt,"FlaxElectraForQuestionAnswering"),BMt.forEach(t),y9r=r(KSe," (ELECTRA model)"),KSe.forEach(t),L9r=i(Le),YM=n(Le,"LI",{});var ZSe=s(YM);hFe=n(ZSe,"STRONG",{});var PMt=s(hFe);x9r=r(PMt,"mbart"),PMt.forEach(t),k9r=r(ZSe," \u2014 "),yH=n(ZSe,"A",{href:!0});var $Mt=s(yH);S9r=r($Mt,"FlaxMBartForQuestionAnswering"),$Mt.forEach(t),R9r=r(ZSe," (mBART model)"),ZSe.forEach(t),B9r=i(Le),KM=n(Le,"LI",{});var eRe=s(KM);pFe=n(eRe,"STRONG",{});var IMt=s(pFe);P9r=r(IMt,"roberta"),IMt.forEach(t),$9r=r(eRe," \u2014 "),LH=n(eRe,"A",{href:!0});var qMt=s(LH);I9r=r(qMt,"FlaxRobertaForQuestionAnswering"),qMt.forEach(t),q9r=r(eRe," (RoBERTa model)"),eRe.forEach(t),N9r=i(Le),ZM=n(Le,"LI",{});var oRe=s(ZM);_Fe=n(oRe,"STRONG",{});var NMt=s(_Fe);j9r=r(NMt,"roformer"),NMt.forEach(t),D9r=r(oRe," \u2014 "),xH=n(oRe,"A",{href:!0});var jMt=s(xH);G9r=r(jMt,"FlaxRoFormerForQuestionAnswering"),jMt.forEach(t),O9r=r(oRe," (RoFormer model)"),oRe.forEach(t),V9r=i(Le),eE=n(Le,"LI",{});var rRe=s(eE);uFe=n(rRe,"STRONG",{});var DMt=s(uFe);X9r=r(DMt,"xlm-roberta"),DMt.forEach(t),z9r=r(rRe," \u2014 "),kH=n(rRe,"A",{href:!0});var GMt=s(kH);Q9r=r(GMt,"FlaxXLMRobertaForQuestionAnswering"),GMt.forEach(t),W9r=r(rRe," (XLM-RoBERTa model)"),rRe.forEach(t),Le.forEach(t),H9r=i(Pa),bFe=n(Pa,"P",{});var OMt=s(bFe);U9r=r(OMt,"Examples:"),OMt.forEach(t),J9r=i(Pa),m(q8.$$.fragment,Pa),Pa.forEach(t),Ci.forEach(t),hPe=i(c),vf=n(c,"H2",{class:!0});var wIe=s(vf);oE=n(wIe,"A",{id:!0,class:!0,href:!0});var VMt=s(oE);FFe=n(VMt,"SPAN",{});var XMt=s(FFe);m(N8.$$.fragment,XMt),XMt.forEach(t),VMt.forEach(t),Y9r=i(wIe),vFe=n(wIe,"SPAN",{});var zMt=s(vFe);K9r=r(zMt,"FlaxAutoModelForTokenClassification"),zMt.forEach(t),wIe.forEach(t),pPe=i(c),jr=n(c,"DIV",{class:!0});var Ai=s(jr);m(j8.$$.fragment,Ai),Z9r=i(Ai),Tf=n(Ai,"P",{});var UJ=s(Tf);exr=r(UJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),SH=n(UJ,"A",{href:!0});var QMt=s(SH);oxr=r(QMt,"from_pretrained()"),QMt.forEach(t),rxr=r(UJ," class method or the "),RH=n(UJ,"A",{href:!0});var WMt=s(RH);txr=r(WMt,"from_config()"),WMt.forEach(t),axr=r(UJ,` class
method.`),UJ.forEach(t),nxr=i(Ai),D8=n(Ai,"P",{});var AIe=s(D8);sxr=r(AIe,"This class cannot be instantiated directly using "),TFe=n(AIe,"CODE",{});var HMt=s(TFe);lxr=r(HMt,"__init__()"),HMt.forEach(t),ixr=r(AIe," (throws an error)."),AIe.forEach(t),dxr=i(Ai),Bt=n(Ai,"DIV",{class:!0});var yi=s(Bt);m(G8.$$.fragment,yi),cxr=i(yi),MFe=n(yi,"P",{});var UMt=s(MFe);fxr=r(UMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),UMt.forEach(t),mxr=i(yi),Mf=n(yi,"P",{});var JJ=s(Mf);gxr=r(JJ,`Note:
Loading a model from its configuration file does `),EFe=n(JJ,"STRONG",{});var JMt=s(EFe);hxr=r(JMt,"not"),JMt.forEach(t),pxr=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(JJ,"A",{href:!0});var YMt=s(BH);_xr=r(YMt,"from_pretrained()"),YMt.forEach(t),uxr=r(JJ," to load the model weights."),JJ.forEach(t),bxr=i(yi),CFe=n(yi,"P",{});var KMt=s(CFe);Fxr=r(KMt,"Examples:"),KMt.forEach(t),vxr=i(yi),m(O8.$$.fragment,yi),yi.forEach(t),Txr=i(Ai),Po=n(Ai,"DIV",{class:!0});var $a=s(Po);m(V8.$$.fragment,$a),Mxr=i($a),wFe=n($a,"P",{});var ZMt=s(wFe);Exr=r(ZMt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZMt.forEach(t),Cxr=i($a),In=n($a,"P",{});var vC=s(In);wxr=r(vC,"The model class to instantiate is selected based on the "),AFe=n(vC,"CODE",{});var eEt=s(AFe);Axr=r(eEt,"model_type"),eEt.forEach(t),yxr=r(vC,` property of the config object (either
passed as an argument or loaded from `),yFe=n(vC,"CODE",{});var oEt=s(yFe);Lxr=r(oEt,"pretrained_model_name_or_path"),oEt.forEach(t),xxr=r(vC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=n(vC,"CODE",{});var rEt=s(LFe);kxr=r(rEt,"pretrained_model_name_or_path"),rEt.forEach(t),Sxr=r(vC,":"),vC.forEach(t),Rxr=i($a),Be=n($a,"UL",{});var Oo=s(Be);rE=n(Oo,"LI",{});var tRe=s(rE);xFe=n(tRe,"STRONG",{});var tEt=s(xFe);Bxr=r(tEt,"albert"),tEt.forEach(t),Pxr=r(tRe," \u2014 "),PH=n(tRe,"A",{href:!0});var aEt=s(PH);$xr=r(aEt,"FlaxAlbertForTokenClassification"),aEt.forEach(t),Ixr=r(tRe," (ALBERT model)"),tRe.forEach(t),qxr=i(Oo),tE=n(Oo,"LI",{});var aRe=s(tE);kFe=n(aRe,"STRONG",{});var nEt=s(kFe);Nxr=r(nEt,"bert"),nEt.forEach(t),jxr=r(aRe," \u2014 "),$H=n(aRe,"A",{href:!0});var sEt=s($H);Dxr=r(sEt,"FlaxBertForTokenClassification"),sEt.forEach(t),Gxr=r(aRe," (BERT model)"),aRe.forEach(t),Oxr=i(Oo),aE=n(Oo,"LI",{});var nRe=s(aE);SFe=n(nRe,"STRONG",{});var lEt=s(SFe);Vxr=r(lEt,"big_bird"),lEt.forEach(t),Xxr=r(nRe," \u2014 "),IH=n(nRe,"A",{href:!0});var iEt=s(IH);zxr=r(iEt,"FlaxBigBirdForTokenClassification"),iEt.forEach(t),Qxr=r(nRe," (BigBird model)"),nRe.forEach(t),Wxr=i(Oo),nE=n(Oo,"LI",{});var sRe=s(nE);RFe=n(sRe,"STRONG",{});var dEt=s(RFe);Hxr=r(dEt,"distilbert"),dEt.forEach(t),Uxr=r(sRe," \u2014 "),qH=n(sRe,"A",{href:!0});var cEt=s(qH);Jxr=r(cEt,"FlaxDistilBertForTokenClassification"),cEt.forEach(t),Yxr=r(sRe," (DistilBERT model)"),sRe.forEach(t),Kxr=i(Oo),sE=n(Oo,"LI",{});var lRe=s(sE);BFe=n(lRe,"STRONG",{});var fEt=s(BFe);Zxr=r(fEt,"electra"),fEt.forEach(t),ekr=r(lRe," \u2014 "),NH=n(lRe,"A",{href:!0});var mEt=s(NH);okr=r(mEt,"FlaxElectraForTokenClassification"),mEt.forEach(t),rkr=r(lRe," (ELECTRA model)"),lRe.forEach(t),tkr=i(Oo),lE=n(Oo,"LI",{});var iRe=s(lE);PFe=n(iRe,"STRONG",{});var gEt=s(PFe);akr=r(gEt,"roberta"),gEt.forEach(t),nkr=r(iRe," \u2014 "),jH=n(iRe,"A",{href:!0});var hEt=s(jH);skr=r(hEt,"FlaxRobertaForTokenClassification"),hEt.forEach(t),lkr=r(iRe," (RoBERTa model)"),iRe.forEach(t),ikr=i(Oo),iE=n(Oo,"LI",{});var dRe=s(iE);$Fe=n(dRe,"STRONG",{});var pEt=s($Fe);dkr=r(pEt,"roformer"),pEt.forEach(t),ckr=r(dRe," \u2014 "),DH=n(dRe,"A",{href:!0});var _Et=s(DH);fkr=r(_Et,"FlaxRoFormerForTokenClassification"),_Et.forEach(t),mkr=r(dRe," (RoFormer model)"),dRe.forEach(t),gkr=i(Oo),dE=n(Oo,"LI",{});var cRe=s(dE);IFe=n(cRe,"STRONG",{});var uEt=s(IFe);hkr=r(uEt,"xlm-roberta"),uEt.forEach(t),pkr=r(cRe," \u2014 "),GH=n(cRe,"A",{href:!0});var bEt=s(GH);_kr=r(bEt,"FlaxXLMRobertaForTokenClassification"),bEt.forEach(t),ukr=r(cRe," (XLM-RoBERTa model)"),cRe.forEach(t),Oo.forEach(t),bkr=i($a),qFe=n($a,"P",{});var FEt=s(qFe);Fkr=r(FEt,"Examples:"),FEt.forEach(t),vkr=i($a),m(X8.$$.fragment,$a),$a.forEach(t),Ai.forEach(t),_Pe=i(c),Ef=n(c,"H2",{class:!0});var yIe=s(Ef);cE=n(yIe,"A",{id:!0,class:!0,href:!0});var vEt=s(cE);NFe=n(vEt,"SPAN",{});var TEt=s(NFe);m(z8.$$.fragment,TEt),TEt.forEach(t),vEt.forEach(t),Tkr=i(yIe),jFe=n(yIe,"SPAN",{});var MEt=s(jFe);Mkr=r(MEt,"FlaxAutoModelForMultipleChoice"),MEt.forEach(t),yIe.forEach(t),uPe=i(c),Dr=n(c,"DIV",{class:!0});var Li=s(Dr);m(Q8.$$.fragment,Li),Ekr=i(Li),Cf=n(Li,"P",{});var YJ=s(Cf);Ckr=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OH=n(YJ,"A",{href:!0});var EEt=s(OH);wkr=r(EEt,"from_pretrained()"),EEt.forEach(t),Akr=r(YJ," class method or the "),VH=n(YJ,"A",{href:!0});var CEt=s(VH);ykr=r(CEt,"from_config()"),CEt.forEach(t),Lkr=r(YJ,` class
method.`),YJ.forEach(t),xkr=i(Li),W8=n(Li,"P",{});var LIe=s(W8);kkr=r(LIe,"This class cannot be instantiated directly using "),DFe=n(LIe,"CODE",{});var wEt=s(DFe);Skr=r(wEt,"__init__()"),wEt.forEach(t),Rkr=r(LIe," (throws an error)."),LIe.forEach(t),Bkr=i(Li),Pt=n(Li,"DIV",{class:!0});var xi=s(Pt);m(H8.$$.fragment,xi),Pkr=i(xi),GFe=n(xi,"P",{});var AEt=s(GFe);$kr=r(AEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),AEt.forEach(t),Ikr=i(xi),wf=n(xi,"P",{});var KJ=s(wf);qkr=r(KJ,`Note:
Loading a model from its configuration file does `),OFe=n(KJ,"STRONG",{});var yEt=s(OFe);Nkr=r(yEt,"not"),yEt.forEach(t),jkr=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(KJ,"A",{href:!0});var LEt=s(XH);Dkr=r(LEt,"from_pretrained()"),LEt.forEach(t),Gkr=r(KJ," to load the model weights."),KJ.forEach(t),Okr=i(xi),VFe=n(xi,"P",{});var xEt=s(VFe);Vkr=r(xEt,"Examples:"),xEt.forEach(t),Xkr=i(xi),m(U8.$$.fragment,xi),xi.forEach(t),zkr=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(J8.$$.fragment,Ia),Qkr=i(Ia),XFe=n(Ia,"P",{});var kEt=s(XFe);Wkr=r(kEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kEt.forEach(t),Hkr=i(Ia),qn=n(Ia,"P",{});var TC=s(qn);Ukr=r(TC,"The model class to instantiate is selected based on the "),zFe=n(TC,"CODE",{});var SEt=s(zFe);Jkr=r(SEt,"model_type"),SEt.forEach(t),Ykr=r(TC,` property of the config object (either
passed as an argument or loaded from `),QFe=n(TC,"CODE",{});var REt=s(QFe);Kkr=r(REt,"pretrained_model_name_or_path"),REt.forEach(t),Zkr=r(TC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=n(TC,"CODE",{});var BEt=s(WFe);eSr=r(BEt,"pretrained_model_name_or_path"),BEt.forEach(t),oSr=r(TC,":"),TC.forEach(t),rSr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);fE=n(Vo,"LI",{});var fRe=s(fE);HFe=n(fRe,"STRONG",{});var PEt=s(HFe);tSr=r(PEt,"albert"),PEt.forEach(t),aSr=r(fRe," \u2014 "),zH=n(fRe,"A",{href:!0});var $Et=s(zH);nSr=r($Et,"FlaxAlbertForMultipleChoice"),$Et.forEach(t),sSr=r(fRe," (ALBERT model)"),fRe.forEach(t),lSr=i(Vo),mE=n(Vo,"LI",{});var mRe=s(mE);UFe=n(mRe,"STRONG",{});var IEt=s(UFe);iSr=r(IEt,"bert"),IEt.forEach(t),dSr=r(mRe," \u2014 "),QH=n(mRe,"A",{href:!0});var qEt=s(QH);cSr=r(qEt,"FlaxBertForMultipleChoice"),qEt.forEach(t),fSr=r(mRe," (BERT model)"),mRe.forEach(t),mSr=i(Vo),gE=n(Vo,"LI",{});var gRe=s(gE);JFe=n(gRe,"STRONG",{});var NEt=s(JFe);gSr=r(NEt,"big_bird"),NEt.forEach(t),hSr=r(gRe," \u2014 "),WH=n(gRe,"A",{href:!0});var jEt=s(WH);pSr=r(jEt,"FlaxBigBirdForMultipleChoice"),jEt.forEach(t),_Sr=r(gRe," (BigBird model)"),gRe.forEach(t),uSr=i(Vo),hE=n(Vo,"LI",{});var hRe=s(hE);YFe=n(hRe,"STRONG",{});var DEt=s(YFe);bSr=r(DEt,"distilbert"),DEt.forEach(t),FSr=r(hRe," \u2014 "),HH=n(hRe,"A",{href:!0});var GEt=s(HH);vSr=r(GEt,"FlaxDistilBertForMultipleChoice"),GEt.forEach(t),TSr=r(hRe," (DistilBERT model)"),hRe.forEach(t),MSr=i(Vo),pE=n(Vo,"LI",{});var pRe=s(pE);KFe=n(pRe,"STRONG",{});var OEt=s(KFe);ESr=r(OEt,"electra"),OEt.forEach(t),CSr=r(pRe," \u2014 "),UH=n(pRe,"A",{href:!0});var VEt=s(UH);wSr=r(VEt,"FlaxElectraForMultipleChoice"),VEt.forEach(t),ASr=r(pRe," (ELECTRA model)"),pRe.forEach(t),ySr=i(Vo),_E=n(Vo,"LI",{});var _Re=s(_E);ZFe=n(_Re,"STRONG",{});var XEt=s(ZFe);LSr=r(XEt,"roberta"),XEt.forEach(t),xSr=r(_Re," \u2014 "),JH=n(_Re,"A",{href:!0});var zEt=s(JH);kSr=r(zEt,"FlaxRobertaForMultipleChoice"),zEt.forEach(t),SSr=r(_Re," (RoBERTa model)"),_Re.forEach(t),RSr=i(Vo),uE=n(Vo,"LI",{});var uRe=s(uE);eve=n(uRe,"STRONG",{});var QEt=s(eve);BSr=r(QEt,"roformer"),QEt.forEach(t),PSr=r(uRe," \u2014 "),YH=n(uRe,"A",{href:!0});var WEt=s(YH);$Sr=r(WEt,"FlaxRoFormerForMultipleChoice"),WEt.forEach(t),ISr=r(uRe," (RoFormer model)"),uRe.forEach(t),qSr=i(Vo),bE=n(Vo,"LI",{});var bRe=s(bE);ove=n(bRe,"STRONG",{});var HEt=s(ove);NSr=r(HEt,"xlm-roberta"),HEt.forEach(t),jSr=r(bRe," \u2014 "),KH=n(bRe,"A",{href:!0});var UEt=s(KH);DSr=r(UEt,"FlaxXLMRobertaForMultipleChoice"),UEt.forEach(t),GSr=r(bRe," (XLM-RoBERTa model)"),bRe.forEach(t),Vo.forEach(t),OSr=i(Ia),rve=n(Ia,"P",{});var JEt=s(rve);VSr=r(JEt,"Examples:"),JEt.forEach(t),XSr=i(Ia),m(Y8.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),bPe=i(c),Af=n(c,"H2",{class:!0});var xIe=s(Af);FE=n(xIe,"A",{id:!0,class:!0,href:!0});var YEt=s(FE);tve=n(YEt,"SPAN",{});var KEt=s(tve);m(K8.$$.fragment,KEt),KEt.forEach(t),YEt.forEach(t),zSr=i(xIe),ave=n(xIe,"SPAN",{});var ZEt=s(ave);QSr=r(ZEt,"FlaxAutoModelForNextSentencePrediction"),ZEt.forEach(t),xIe.forEach(t),FPe=i(c),Gr=n(c,"DIV",{class:!0});var ki=s(Gr);m(Z8.$$.fragment,ki),WSr=i(ki),yf=n(ki,"P",{});var ZJ=s(yf);HSr=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ZH=n(ZJ,"A",{href:!0});var eCt=s(ZH);USr=r(eCt,"from_pretrained()"),eCt.forEach(t),JSr=r(ZJ," class method or the "),eU=n(ZJ,"A",{href:!0});var oCt=s(eU);YSr=r(oCt,"from_config()"),oCt.forEach(t),KSr=r(ZJ,` class
method.`),ZJ.forEach(t),ZSr=i(ki),e7=n(ki,"P",{});var kIe=s(e7);eRr=r(kIe,"This class cannot be instantiated directly using "),nve=n(kIe,"CODE",{});var rCt=s(nve);oRr=r(rCt,"__init__()"),rCt.forEach(t),rRr=r(kIe," (throws an error)."),kIe.forEach(t),tRr=i(ki),$t=n(ki,"DIV",{class:!0});var Si=s($t);m(o7.$$.fragment,Si),aRr=i(Si),sve=n(Si,"P",{});var tCt=s(sve);nRr=r(tCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tCt.forEach(t),sRr=i(Si),Lf=n(Si,"P",{});var eY=s(Lf);lRr=r(eY,`Note:
Loading a model from its configuration file does `),lve=n(eY,"STRONG",{});var aCt=s(lve);iRr=r(aCt,"not"),aCt.forEach(t),dRr=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(eY,"A",{href:!0});var nCt=s(oU);cRr=r(nCt,"from_pretrained()"),nCt.forEach(t),fRr=r(eY," to load the model weights."),eY.forEach(t),mRr=i(Si),ive=n(Si,"P",{});var sCt=s(ive);gRr=r(sCt,"Examples:"),sCt.forEach(t),hRr=i(Si),m(r7.$$.fragment,Si),Si.forEach(t),pRr=i(ki),Io=n(ki,"DIV",{class:!0});var qa=s(Io);m(t7.$$.fragment,qa),_Rr=i(qa),dve=n(qa,"P",{});var lCt=s(dve);uRr=r(lCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lCt.forEach(t),bRr=i(qa),Nn=n(qa,"P",{});var MC=s(Nn);FRr=r(MC,"The model class to instantiate is selected based on the "),cve=n(MC,"CODE",{});var iCt=s(cve);vRr=r(iCt,"model_type"),iCt.forEach(t),TRr=r(MC,` property of the config object (either
passed as an argument or loaded from `),fve=n(MC,"CODE",{});var dCt=s(fve);MRr=r(dCt,"pretrained_model_name_or_path"),dCt.forEach(t),ERr=r(MC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=n(MC,"CODE",{});var cCt=s(mve);CRr=r(cCt,"pretrained_model_name_or_path"),cCt.forEach(t),wRr=r(MC,":"),MC.forEach(t),ARr=i(qa),gve=n(qa,"UL",{});var fCt=s(gve);vE=n(fCt,"LI",{});var FRe=s(vE);hve=n(FRe,"STRONG",{});var mCt=s(hve);yRr=r(mCt,"bert"),mCt.forEach(t),LRr=r(FRe," \u2014 "),rU=n(FRe,"A",{href:!0});var gCt=s(rU);xRr=r(gCt,"FlaxBertForNextSentencePrediction"),gCt.forEach(t),kRr=r(FRe," (BERT model)"),FRe.forEach(t),fCt.forEach(t),SRr=i(qa),pve=n(qa,"P",{});var hCt=s(pve);RRr=r(hCt,"Examples:"),hCt.forEach(t),BRr=i(qa),m(a7.$$.fragment,qa),qa.forEach(t),ki.forEach(t),vPe=i(c),xf=n(c,"H2",{class:!0});var SIe=s(xf);TE=n(SIe,"A",{id:!0,class:!0,href:!0});var pCt=s(TE);_ve=n(pCt,"SPAN",{});var _Ct=s(_ve);m(n7.$$.fragment,_Ct),_Ct.forEach(t),pCt.forEach(t),PRr=i(SIe),uve=n(SIe,"SPAN",{});var uCt=s(uve);$Rr=r(uCt,"FlaxAutoModelForImageClassification"),uCt.forEach(t),SIe.forEach(t),TPe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(s7.$$.fragment,Ri),IRr=i(Ri),kf=n(Ri,"P",{});var oY=s(kf);qRr=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tU=n(oY,"A",{href:!0});var bCt=s(tU);NRr=r(bCt,"from_pretrained()"),bCt.forEach(t),jRr=r(oY," class method or the "),aU=n(oY,"A",{href:!0});var FCt=s(aU);DRr=r(FCt,"from_config()"),FCt.forEach(t),GRr=r(oY,` class
method.`),oY.forEach(t),ORr=i(Ri),l7=n(Ri,"P",{});var RIe=s(l7);VRr=r(RIe,"This class cannot be instantiated directly using "),bve=n(RIe,"CODE",{});var vCt=s(bve);XRr=r(vCt,"__init__()"),vCt.forEach(t),zRr=r(RIe," (throws an error)."),RIe.forEach(t),QRr=i(Ri),It=n(Ri,"DIV",{class:!0});var Bi=s(It);m(i7.$$.fragment,Bi),WRr=i(Bi),Fve=n(Bi,"P",{});var TCt=s(Fve);HRr=r(TCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),TCt.forEach(t),URr=i(Bi),Sf=n(Bi,"P",{});var rY=s(Sf);JRr=r(rY,`Note:
Loading a model from its configuration file does `),vve=n(rY,"STRONG",{});var MCt=s(vve);YRr=r(MCt,"not"),MCt.forEach(t),KRr=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(rY,"A",{href:!0});var ECt=s(nU);ZRr=r(ECt,"from_pretrained()"),ECt.forEach(t),eBr=r(rY," to load the model weights."),rY.forEach(t),oBr=i(Bi),Tve=n(Bi,"P",{});var CCt=s(Tve);rBr=r(CCt,"Examples:"),CCt.forEach(t),tBr=i(Bi),m(d7.$$.fragment,Bi),Bi.forEach(t),aBr=i(Ri),qo=n(Ri,"DIV",{class:!0});var Na=s(qo);m(c7.$$.fragment,Na),nBr=i(Na),Mve=n(Na,"P",{});var wCt=s(Mve);sBr=r(wCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wCt.forEach(t),lBr=i(Na),jn=n(Na,"P",{});var EC=s(jn);iBr=r(EC,"The model class to instantiate is selected based on the "),Eve=n(EC,"CODE",{});var ACt=s(Eve);dBr=r(ACt,"model_type"),ACt.forEach(t),cBr=r(EC,` property of the config object (either
passed as an argument or loaded from `),Cve=n(EC,"CODE",{});var yCt=s(Cve);fBr=r(yCt,"pretrained_model_name_or_path"),yCt.forEach(t),mBr=r(EC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=n(EC,"CODE",{});var LCt=s(wve);gBr=r(LCt,"pretrained_model_name_or_path"),LCt.forEach(t),hBr=r(EC,":"),EC.forEach(t),pBr=i(Na),f7=n(Na,"UL",{});var BIe=s(f7);ME=n(BIe,"LI",{});var vRe=s(ME);Ave=n(vRe,"STRONG",{});var xCt=s(Ave);_Br=r(xCt,"beit"),xCt.forEach(t),uBr=r(vRe," \u2014 "),sU=n(vRe,"A",{href:!0});var kCt=s(sU);bBr=r(kCt,"FlaxBeitForImageClassification"),kCt.forEach(t),FBr=r(vRe," (BEiT model)"),vRe.forEach(t),vBr=i(BIe),EE=n(BIe,"LI",{});var TRe=s(EE);yve=n(TRe,"STRONG",{});var SCt=s(yve);TBr=r(SCt,"vit"),SCt.forEach(t),MBr=r(TRe," \u2014 "),lU=n(TRe,"A",{href:!0});var RCt=s(lU);EBr=r(RCt,"FlaxViTForImageClassification"),RCt.forEach(t),CBr=r(TRe," (ViT model)"),TRe.forEach(t),BIe.forEach(t),wBr=i(Na),Lve=n(Na,"P",{});var BCt=s(Lve);ABr=r(BCt,"Examples:"),BCt.forEach(t),yBr=i(Na),m(m7.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),MPe=i(c),Rf=n(c,"H2",{class:!0});var PIe=s(Rf);CE=n(PIe,"A",{id:!0,class:!0,href:!0});var PCt=s(CE);xve=n(PCt,"SPAN",{});var $Ct=s(xve);m(g7.$$.fragment,$Ct),$Ct.forEach(t),PCt.forEach(t),LBr=i(PIe),kve=n(PIe,"SPAN",{});var ICt=s(kve);xBr=r(ICt,"FlaxAutoModelForVision2Seq"),ICt.forEach(t),PIe.forEach(t),EPe=i(c),Vr=n(c,"DIV",{class:!0});var Pi=s(Vr);m(h7.$$.fragment,Pi),kBr=i(Pi),Bf=n(Pi,"P",{});var tY=s(Bf);SBr=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iU=n(tY,"A",{href:!0});var qCt=s(iU);RBr=r(qCt,"from_pretrained()"),qCt.forEach(t),BBr=r(tY," class method or the "),dU=n(tY,"A",{href:!0});var NCt=s(dU);PBr=r(NCt,"from_config()"),NCt.forEach(t),$Br=r(tY,` class
method.`),tY.forEach(t),IBr=i(Pi),p7=n(Pi,"P",{});var $Ie=s(p7);qBr=r($Ie,"This class cannot be instantiated directly using "),Sve=n($Ie,"CODE",{});var jCt=s(Sve);NBr=r(jCt,"__init__()"),jCt.forEach(t),jBr=r($Ie," (throws an error)."),$Ie.forEach(t),DBr=i(Pi),qt=n(Pi,"DIV",{class:!0});var $i=s(qt);m(_7.$$.fragment,$i),GBr=i($i),Rve=n($i,"P",{});var DCt=s(Rve);OBr=r(DCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),DCt.forEach(t),VBr=i($i),Pf=n($i,"P",{});var aY=s(Pf);XBr=r(aY,`Note:
Loading a model from its configuration file does `),Bve=n(aY,"STRONG",{});var GCt=s(Bve);zBr=r(GCt,"not"),GCt.forEach(t),QBr=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=n(aY,"A",{href:!0});var OCt=s(cU);WBr=r(OCt,"from_pretrained()"),OCt.forEach(t),HBr=r(aY," to load the model weights."),aY.forEach(t),UBr=i($i),Pve=n($i,"P",{});var VCt=s(Pve);JBr=r(VCt,"Examples:"),VCt.forEach(t),YBr=i($i),m(u7.$$.fragment,$i),$i.forEach(t),KBr=i(Pi),No=n(Pi,"DIV",{class:!0});var ja=s(No);m(b7.$$.fragment,ja),ZBr=i(ja),$ve=n(ja,"P",{});var XCt=s($ve);ePr=r(XCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),XCt.forEach(t),oPr=i(ja),Dn=n(ja,"P",{});var CC=s(Dn);rPr=r(CC,"The model class to instantiate is selected based on the "),Ive=n(CC,"CODE",{});var zCt=s(Ive);tPr=r(zCt,"model_type"),zCt.forEach(t),aPr=r(CC,` property of the config object (either
passed as an argument or loaded from `),qve=n(CC,"CODE",{});var QCt=s(qve);nPr=r(QCt,"pretrained_model_name_or_path"),QCt.forEach(t),sPr=r(CC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=n(CC,"CODE",{});var WCt=s(Nve);lPr=r(WCt,"pretrained_model_name_or_path"),WCt.forEach(t),iPr=r(CC,":"),CC.forEach(t),dPr=i(ja),jve=n(ja,"UL",{});var HCt=s(jve);wE=n(HCt,"LI",{});var MRe=s(wE);Dve=n(MRe,"STRONG",{});var UCt=s(Dve);cPr=r(UCt,"vision-encoder-decoder"),UCt.forEach(t),fPr=r(MRe," \u2014 "),fU=n(MRe,"A",{href:!0});var JCt=s(fU);mPr=r(JCt,"FlaxVisionEncoderDecoderModel"),JCt.forEach(t),gPr=r(MRe," (Vision Encoder decoder model)"),MRe.forEach(t),HCt.forEach(t),hPr=i(ja),Gve=n(ja,"P",{});var YCt=s(Gve);pPr=r(YCt,"Examples:"),YCt.forEach(t),_Pr=i(ja),m(F7.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(lwt)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(ce,"class","relative group"),d(Gn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoConfig"),d(Vn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoModel"),d(Xn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Vf,"id","transformers.AutoConfig"),d(Vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vf,"href","#transformers.AutoConfig"),d(Xi,"class","relative group"),d(E9,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(C9,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig"),d(w9,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig"),d(A9,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig"),d(y9,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig"),d(L9,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(x9,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig"),d(k9,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(S9,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(R9,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(B9,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig"),d(P9,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig"),d($9,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig"),d(I9,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig"),d(q9,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig"),d(N9,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig"),d(j9,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(D9,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(G9,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig"),d(O9,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(V9,"href","/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(X9,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig"),d(z9,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig"),d(Q9,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig"),d(W9,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig"),d(H9,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig"),d(U9,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig"),d(J9,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(Y9,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig"),d(K9,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig"),d(Z9,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig"),d(ex,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig"),d(ox,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNConfig"),d(rx,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config"),d(tx,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(ax,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig"),d(nx,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig"),d(sx,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig"),d(lx,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(ix,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(dx,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(cx,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig"),d(fx,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig"),d(mx,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig"),d(gx,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig"),d(hx,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config"),d(px,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig"),d(_x,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(ux,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig"),d(bx,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(Fx,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(vx,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig"),d(Tx,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config"),d(Mx,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(Ex,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(Cx,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig"),d(wx,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig"),d(Ax,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig"),d(yx,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Lx,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(xx,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(kx,"href","/docs/transformers/pr_16543/en/model_doc/rag#transformers.RagConfig"),d(Sx,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmConfig"),d(Rx,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig"),d(Bx,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig"),d(Px,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig"),d($x,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig"),d(Ix,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig"),d(qx,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig"),d(Nx,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig"),d(jx,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig"),d(Dx,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig"),d(Gx,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig"),d(Ox,"href","/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Vx,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Xx,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(zx,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig"),d(Qx,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(Wx,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig"),d(Hx,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config"),d(Ux,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig"),d(Jx,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig"),d(Yx,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(Kx,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRConfig"),d(Zx,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(ek,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(ok,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig"),d(rk,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig"),d(tk,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(ak,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(nk,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(sk,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig"),d(lk,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(ik,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(dk,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig"),d(ck,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig"),d(fk,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig"),d(mk,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(gk,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(hk,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(pk,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig"),d(_k,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(qg,"class","docstring"),d(Qo,"class","docstring"),d(Ng,"id","transformers.AutoTokenizer"),d(Ng,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ng,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(uk,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(bk,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),d(Fk,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(vk,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartTokenizer"),d(Tk,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartTokenizerFast"),d(Mk,"href","/docs/transformers/pr_16543/en/model_doc/barthez#transformers.BarthezTokenizer"),d(Ek,"href","/docs/transformers/pr_16543/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(Ck,"href","/docs/transformers/pr_16543/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(wk,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),d(Ak,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),d(yk,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(Lk,"href","/docs/transformers/pr_16543/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(xk,"href","/docs/transformers/pr_16543/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(kk,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(Sk,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Rk,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Bk,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Pk,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d($k,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Ik,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(qk,"href","/docs/transformers/pr_16543/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Nk,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertTokenizer"),d(jk,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Dk,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineTokenizer"),d(Gk,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizer"),d(Ok,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Vk,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Xk,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(zk,"href","/docs/transformers/pr_16543/en/model_doc/cpm#transformers.CpmTokenizer"),d(Qk,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Wk,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Hk,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Uk,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Jk,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Yk,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Kk,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Zk,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(eS,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraTokenizer"),d(oS,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(rS,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(tS,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetTokenizer"),d(aS,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(nS,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(sS,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelTokenizer"),d(lS,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(iS,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(dS,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(cS,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(fS,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(mS,"href","/docs/transformers/pr_16543/en/model_doc/herbert#transformers.HerbertTokenizer"),d(gS,"href","/docs/transformers/pr_16543/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(hS,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(pS,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),d(_S,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(uS,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(bS,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(FS,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(vS,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(TS,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(MS,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(ES,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDTokenizer"),d(CS,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDTokenizerFast"),d(wS,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerTokenizer"),d(AS,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(yS,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeTokenizer"),d(LS,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(xS,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(kS,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(SS,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianTokenizer"),d(RS,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartTokenizer"),d(BS,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(PS,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBart50Tokenizer"),d($S,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(IS,"href","/docs/transformers/pr_16543/en/model_doc/mluke#transformers.MLukeTokenizer"),d(qS,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(NS,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(jS,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(DS,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(GS,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5Tokenizer"),d(OS,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5TokenizerFast"),d(VS,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(XS,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(zS,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(QS,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(WS,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(HS,"href","/docs/transformers/pr_16543/en/model_doc/phobert#transformers.PhobertTokenizer"),d(US,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartTokenizer"),d(JS,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(YS,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),d(KS,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),d(ZS,"href","/docs/transformers/pr_16543/en/model_doc/rag#transformers.RagTokenizer"),d(eR,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmTokenizer"),d(oR,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmTokenizerFast"),d(rR,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerTokenizer"),d(tR,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(aR,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertTokenizer"),d(nR,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(sR,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(lR,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(iR,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),d(dR,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(cR,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(fR,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(mR,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(gR,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(hR,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterTokenizer"),d(pR,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(_R,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(uR,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(bR,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5Tokenizer"),d(FR,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5TokenizerFast"),d(vR,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasTokenizer"),d(TR,"href","/docs/transformers/pr_16543/en/model_doc/tapex#transformers.TapexTokenizer"),d(MR,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(ER,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(CR,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(wR,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMTokenizer"),d(AR,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(yR,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMTokenizer"),d(LR,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(xR,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(kR,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(SR,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(RR,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(ph,"class","docstring"),d(Wo,"class","docstring"),d(_h,"id","transformers.AutoFeatureExtractor"),d(_h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_h,"href","#transformers.AutoFeatureExtractor"),d(Wi,"class","relative group"),d(BR,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(PR,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitFeatureExtractor"),d($R,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(IR,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(qR,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(NR,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(jR,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(DR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(GR,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(OR,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(VR,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(XR,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(zR,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(QR,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(WR,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(HR,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(UR,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(JR,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(YR,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(KR,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(qh,"class","docstring"),d(Ho,"class","docstring"),d(Nh,"id","transformers.AutoProcessor"),d(Nh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Nh,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(ZR,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(eB,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPProcessor"),d(oB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(rB,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(tB,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(aB,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(nB,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRProcessor"),d(sB,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(lB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Hh,"class","docstring"),d(Uo,"class","docstring"),d(Uh,"id","transformers.AutoModel"),d(Uh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Uh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(iB,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dB,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cB,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring"),d(fB,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertModel"),d(mB,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartModel"),d(gB,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitModel"),d(hB,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel"),d(pB,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(_B,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdModel"),d(uB,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(bB,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(FB,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(vB,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertModel"),d(TB,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineModel"),d(MB,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPModel"),d(EB,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertModel"),d(CB,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextModel"),d(wB,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLModel"),d(AB,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(yB,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(LB,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaModel"),d(xB,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(kB,"href","/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(SB,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTModel"),d(RB,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrModel"),d(BB,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertModel"),d(PB,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d($B,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTModel"),d(IB,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraModel"),d(qB,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertModel"),d(NB,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetModel"),d(jB,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTModel"),d(DB,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelModel"),d(GB,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelBaseModel"),d(OB,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNModel"),d(VB,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Model"),d(XB,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(zB,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJModel"),d(QB,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertModel"),d(WB,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertModel"),d(HB,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(UB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(JB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(YB,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDModel"),d(KB,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerModel"),d(ZB,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeModel"),d(eP,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertModel"),d(oP,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model"),d(rP,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianModel"),d(tP,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerModel"),d(aP,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartModel"),d(nP,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(sP,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertModel"),d(lP,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetModel"),d(iP,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Model"),d(dP,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerModel"),d(cP,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(fP,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusModel"),d(mP,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverModel"),d(gP,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartModel"),d(hP,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerModel"),d(pP,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(_P,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertModel"),d(uP,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModel"),d(bP,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetModel"),d(FP,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertModel"),d(vP,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetModel"),d(TP,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel"),d(MP,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaModel"),d(EP,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerModel"),d(CP,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerModel"),d(wP,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWModel"),d(AP,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDModel"),d(yP,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(LP,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterModel"),d(xP,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(kP,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinModel"),d(SP,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Model"),d(RP,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasModel"),d(BP,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(PP,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechModel"),d($P,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(IP,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanModel"),d(qP,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltModel"),d(NP,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(jP,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertModel"),d(DP,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTModel"),d(GP,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(OP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(VP,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMModel"),d(XP,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMModel"),d(zP,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMModel"),d(QP,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(WP,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(HP,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(UP,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetModel"),d(JP,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring"),d(Jo,"class","docstring"),d($_,"id","transformers.AutoModelForPreTraining"),d($_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(YP,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KP,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZP,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring"),d(e$,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForPreTraining"),d(o$,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(r$,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForPreTraining"),d(t$,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(a$,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(n$,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(s$,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(l$,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(i$,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(d$,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(c$,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForPreTraining"),d(f$,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(m$,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForPreTraining"),d(g$,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(h$,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(p$,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(_$,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(u$,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(b$,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(F$,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(v$,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(T$,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(M$,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(E$,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(C$,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel"),d(w$,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(A$,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(y$,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(L$,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(x$,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(k$,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(S$,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(R$,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(B$,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(P$,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d($$,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(I$,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(q$,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(N$,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(Mu,"id","transformers.AutoModelForCausalLM"),d(Mu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Mu,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(j$,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(D$,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(G$,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring"),d(O$,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForCausalLM"),d(V$,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertLMHeadModel"),d(X$,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(z$,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(Q$,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(W$,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(H$,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(U$,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(J$,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(Y$,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(K$,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForCausalLM"),d(Z$,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(eI,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(oI,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(rI,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianForCausalLM"),d(tI,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForCausalLM"),d(aI,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(nI,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(sI,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(lI,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(iI,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(dI,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(cI,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(fI,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(mI,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(gI,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(hI,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(pI,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(_I,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(uI,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(bI,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(FI,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(vI,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(TI,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(MI,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(n1,"id","transformers.AutoModelForMaskedLM"),d(n1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n1,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(EI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring"),d(AI,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(yI,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(LI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMaskedLM"),d(xI,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(kI,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(SI,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(RI,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(BI,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(PI,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d($I,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(II,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(qI,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(NI,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(jI,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(DI,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(GI,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(OI,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(VI,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(XI,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(zI,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(QI,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(WI,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(HI,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(UI,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(JI,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(YI,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(KI,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(ZI,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(eq,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(oq,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(rq,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(tq,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(aq,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(nq,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring"),d(Zo,"class","docstring"),d(O1,"id","transformers.AutoModelForSeq2SeqLM"),d(O1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O1,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(sq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring"),d(dq,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(cq,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(fq,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(mq,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(gq,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(hq,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(pq,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(_q,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(uq,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianMTModel"),d(bq,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(Fq,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(vq,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(Tq,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(Mq,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(Eq,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(Cq,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(wq,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(l4,"id","transformers.AutoModelForSequenceClassification"),d(l4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l4,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(Aq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Lq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring"),d(xq,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(kq,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification"),d(Sq,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForSequenceClassification"),d(Rq,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(Bq,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(Pq,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d($q,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(Iq,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(qq,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Nq,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(jq,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Dq,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(zq,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(lN,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(iN,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(dN,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(cN,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(fN,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(mN,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(gN,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(hN,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(pN,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification"),d(_N,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(uN,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(bN,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(FN,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(vN,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(TN,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(rb,"id","transformers.AutoModelForMultipleChoice"),d(rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rb,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(MN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring"),d(wN,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(AN,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMultipleChoice"),d(yN,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(LN,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(xN,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(kN,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(SN,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(RN,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(BN,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(PN,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d($N,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(IN,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(qN,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(NN,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(jN,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(DN,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(GN,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(ON,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(VN,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(XN,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(zN,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(QN,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(WN,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(HN,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(UN,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(JN,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(YN,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(KN,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(Rb,"id","transformers.AutoModelForNextSentencePrediction"),d(Rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rb,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(ZN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ej,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring"),d(rj,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(tj,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(aj,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(nj,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(sj,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring"),d(tr,"class","docstring"),d(jb,"id","transformers.AutoModelForTokenClassification"),d(jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jb,"href","#transformers.AutoModelForTokenClassification"),d(vd,"class","relative group"),d(lj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ij,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring"),d(cj,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(fj,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForTokenClassification"),d(mj,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(gj,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(hj,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForTokenClassification"),d(pj,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(_j,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(uj,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(bj,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(Fj,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(vj,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(Tj,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(Mj,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(Ej,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(Cj,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(wj,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(Aj,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(yj,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(Lj,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(xj,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(kj,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(Sj,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(Rj,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Bj,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(Pj,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d($j,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Ij,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(qj,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Nj,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(jj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Dj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Gj,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Oj,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(v5,"id","transformers.AutoModelForQuestionAnswering"),d(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v5,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Vj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring"),d(Qj,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(Wj,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(Hj,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(Uj,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(Jj,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(Yj,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(Kj,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(Zj,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(sD,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(wD,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(yD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(LD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(xD,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(kD,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(l3,"id","transformers.AutoModelForTableQuestionAnswering"),d(l3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l3,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(SD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring"),d(PD,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring"),d(sr,"class","docstring"),d(c3,"id","transformers.AutoModelForImageClassification"),d(c3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c3,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d($D,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ID,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring"),d(ND,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForImageClassification"),d(jD,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(DD,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassification"),d(GD,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(OD,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(VD,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(XD,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(zD,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(QD,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(WD,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(HD,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(UD,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(JD,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForImageClassification"),d(YD,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanForImageClassification"),d(KD,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(M3,"id","transformers.AutoModelForVision2Seq"),d(M3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M3,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(ZD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring"),d(rG,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(w3,"id","transformers.AutoModelForAudioClassification"),d(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w3,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(tG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring"),d(sG,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(lG,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(iG,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(dG,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(cG,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(fG,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(mG,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(gG,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d($3,"id","transformers.AutoModelForAudioFrameClassification"),d($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($3,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(hG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_G,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring"),d(uG,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(bG,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(FG,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(vG,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(G3,"id","transformers.AutoModelForCTC"),d(G3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G3,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(TG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring"),d(CG,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(wG,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForCTC"),d(AG,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForCTC"),d(yG,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForCTC"),d(LG,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(xG,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(kG,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(SG,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(Y3,"id","transformers.AutoModelForSpeechSeq2Seq"),d(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y3,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Xd,"class","relative group"),d(RG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring"),d($G,"href","/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(IG,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(o2,"id","transformers.AutoModelForAudioXVector"),d(o2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o2,"href","#transformers.AutoModelForAudioXVector"),d(Wd,"class","relative group"),d(qG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring"),d(DG,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(GG,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(OG,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(VG,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(l2,"id","transformers.AutoModelForMaskedImageModeling"),d(l2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l2,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(XG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring"),d(WG,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(HG,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(UG,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(m2,"id","transformers.AutoModelForObjectDetection"),d(m2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m2,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(JG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring"),d(ZG,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(p2,"id","transformers.AutoModelForImageSegmentation"),d(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p2,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(eO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring"),d(tO,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(b2,"id","transformers.AutoModelForSemanticSegmentation"),d(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b2,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(aO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring"),d(lO,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(iO,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(dO,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(E2,"id","transformers.AutoModelForInstanceSegmentation"),d(E2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E2,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(cO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring"),d(gO,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(A2,"id","transformers.TFAutoModel"),d(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A2,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(hO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_O,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring"),d(uO,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertModel"),d(bO,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartModel"),d(FO,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertModel"),d(vO,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(TO,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(MO,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertModel"),d(EO,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.TFCLIPModel"),d(CO,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertModel"),d(wO,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextModel"),d(AO,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLModel"),d(yO,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaModel"),d(LO,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(xO,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(kO,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(SO,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraModel"),d(RO,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(BO,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelModel"),d(PO,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d($O,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2Model"),d(IO,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJModel"),d(qO,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.TFHubertModel"),d(NO,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(jO,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDModel"),d(DO,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerModel"),d(GO,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertModel"),d(OO,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianModel"),d(VO,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartModel"),d(XO,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(zO,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetModel"),d(QO,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5Model"),d(WO,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(HO,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusModel"),d(UO,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertModel"),d(JO,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaModel"),d(YO,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerModel"),d(KO,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(ZO,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5Model"),d(eV,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasModel"),d(oV,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(rV,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTModel"),d(tV,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(aV,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(nV,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMModel"),d(sV,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMModel"),d(lV,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(iV,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(Fr,"class","docstring"),d(uF,"id","transformers.TFAutoModelForPreTraining"),d(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uF,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(dV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring"),d(mV,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(gV,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(hV,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForPreTraining"),d(pV,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(_V,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(uV,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(bV,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(FV,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(vV,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(TV,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(MV,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(EV,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(CV,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(wV,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(AV,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(yV,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(LV,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(xV,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(kV,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(SV,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(RV,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(BV,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(PV,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(vr,"class","docstring"),d(GF,"id","transformers.TFAutoModelForCausalLM"),d(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(GF,"href","#transformers.TFAutoModelForCausalLM"),d(Fc,"class","relative group"),d($V,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring"),d(NV,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(jV,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(DV,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(GV,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(OV,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(VV,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(XV,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(zV,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(QV,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(WV,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(HV,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),d(UV,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(JV,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Tr,"class","docstring"),d(ov,"id","transformers.TFAutoModelForImageClassification"),d(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ov,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d(YV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring"),d(eX,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(oX,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Mr,"class","docstring"),d(av,"id","transformers.TFAutoModelForMaskedLM"),d(av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(av,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(rX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring"),d(nX,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(sX,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(lX,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(iX,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(dX,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(cX,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(fX,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(mX,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(gX,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(hX,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(pX,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(_X,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(uX,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(bX,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(FX,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(vX,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(TX,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(MX,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(EX,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(CX,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Er,"class","docstring"),d(wv,"id","transformers.TFAutoModelForSeq2SeqLM"),d(wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wv,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(wX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring"),d(LX,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(xX,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(kX,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(SX,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(RX,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(BX,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianMTModel"),d(PX,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d($X,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(IX,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(qX,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring"),d(Cr,"class","docstring"),d(Iv,"id","transformers.TFAutoModelForSequenceClassification"),d(Iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Iv,"href","#transformers.TFAutoModelForSequenceClassification"),d(Sc,"class","relative group"),d(NX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring"),d(GX,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(OX,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(VX,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(XX,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(zX,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(QX,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(WX,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(HX,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(UX,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(JX,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(YX,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(KX,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(ez,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(oz,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(rz,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(tz,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(az,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(nz,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(sz,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(lz,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(iz,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(dz,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(cz,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(fz,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(mz,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(wr,"class","docstring"),d(d6,"id","transformers.TFAutoModelForMultipleChoice"),d(d6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d6,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(gz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring"),d(_z,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(uz,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(bz,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(Fz,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(vz,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(Tz,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(Mz,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(Ez,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(Cz,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(wz,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(Az,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(yz,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(xz,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(kz,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(Sz,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Ar,"class","docstring"),d(y6,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y6,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(qc,"class","relative group"),d(Bz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($z,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring"),d(Iz,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(x6,"id","transformers.TFAutoModelForTokenClassification"),d(x6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x6,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(qz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring"),d(Dz,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(Gz,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Oz,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(Vz,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(Xz,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(zz,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(Qz,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(Wz,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(Hz,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(Uz,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(Jz,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(Yz,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(Kz,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(Zz,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(eQ,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(oQ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(rQ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(tQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(aQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(nQ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring"),d(Lr,"class","docstring"),d(J6,"id","transformers.TFAutoModelForQuestionAnswering"),d(J6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J6,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(sQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring"),d(dQ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(cQ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(fQ,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(mQ,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(gQ,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(hQ,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(pQ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(_Q,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(uQ,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(bQ,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(FQ,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(vQ,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(MQ,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(EQ,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(wQ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(AQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(yQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(LQ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring"),d(xr,"class","docstring"),d(uT,"id","transformers.TFAutoModelForVision2Seq"),d(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uT,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(xQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring"),d(RQ,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(FT,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(FT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FT,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(BQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($Q,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring"),d(IQ,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring"),d(Sr,"class","docstring"),d(TT,"id","transformers.FlaxAutoModel"),d(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TT,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(qQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring"),d(DQ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertModel"),d(GQ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartModel"),d(OQ,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitModel"),d(VQ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertModel"),d(XQ,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(zQ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(QQ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(WQ,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.FlaxCLIPModel"),d(HQ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(UQ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraModel"),d(JQ,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(YQ,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(KQ,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(ZQ,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianModel"),d(eW,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartModel"),d(oW,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5Model"),d(rW,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(tW,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(aW,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(nW,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5Model"),d(sW,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(lW,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTModel"),d(iW,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(dW,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(cW,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring"),d(Rr,"class","docstring"),d(WT,"id","transformers.FlaxAutoModelForCausalLM"),d(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WT,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(fW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring"),d(hW,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(pW,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(_W,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(uW,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(bW,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Br,"class","docstring"),d(ZT,"id","transformers.FlaxAutoModelForPreTraining"),d(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZT,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(FW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring"),d(MW,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(EW,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(CW,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(wW,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(AW,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(yW,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(LW,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(xW,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(kW,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(SW,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(RW,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(BW,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d(Pr,"class","docstring"),d(mM,"id","transformers.FlaxAutoModelForMaskedLM"),d(mM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mM,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(PW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($W,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring"),d(qW,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(NW,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(jW,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(DW,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(GW,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(OW,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(VW,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(XW,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(zW,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(QW,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring"),d($r,"class","docstring"),d(EM,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EM,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(WW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring"),d(JW,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(YW,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(KW,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(ZW,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(eH,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(oH,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(rH,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(tH,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(aH,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring"),d(Ir,"class","docstring"),d(BM,"id","transformers.FlaxAutoModelForSequenceClassification"),d(BM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BM,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(nH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring"),d(iH,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(dH,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(cH,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(fH,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(mH,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(gH,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(hH,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(pH,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(_H,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(uH,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(qr,"class","docstring"),d(XM,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XM,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(bH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring"),d(TH,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(MH,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(EH,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(CH,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(wH,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(AH,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(yH,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(LH,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(xH,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(kH,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring"),d(Nr,"class","docstring"),d(oE,"id","transformers.FlaxAutoModelForTokenClassification"),d(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oE,"href","#transformers.FlaxAutoModelForTokenClassification"),d(vf,"class","relative group"),d(SH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring"),d(PH,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d($H,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(IH,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(qH,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(NH,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(jH,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(DH,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(GH,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(cE,"id","transformers.FlaxAutoModelForMultipleChoice"),d(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cE,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Ef,"class","relative group"),d(OH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring"),d(zH,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(QH,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(WH,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(HH,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(UH,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(JH,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(YH,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(KH,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(FE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(FE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Af,"class","relative group"),d(ZH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring"),d(rU,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(TE,"id","transformers.FlaxAutoModelForImageClassification"),d(TE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TE,"href","#transformers.FlaxAutoModelForImageClassification"),d(xf,"class","relative group"),d(tU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring"),d(sU,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(lU,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring"),d(Or,"class","docstring"),d(CE,"id","transformers.FlaxAutoModelForVision2Seq"),d(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CE,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(iU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring"),d(fU,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Vr,"class","docstring")},m(c,u){e(document.head,Z),b(c,io,u),b(c,ce,u),e(ce,Ce),e(Ce,lo),g(he,lo,null),e(ce,Me),e(ce,Xo),e(Xo,Ii),b(c,qf,u),b(c,fa,u),e(fa,qi),e(fa,Ni),e(Ni,wC),e(fa,Nf),b(c,xe,u),b(c,co,u),e(co,ji),e(co,Gn),e(Gn,AC),e(co,On),e(co,Vn),e(Vn,yC),e(co,Di),e(co,Xn),e(Xn,LC),e(co,Gi),b(c,jf,u),g(Da,c,u),b(c,fo,u),b(c,ue,u),e(ue,u9),e(ue,Oi),e(Oi,b9),e(ue,F9),b(c,zo,u),b(c,Ga,u),e(Ga,v9),e(Ga,Df),e(Df,T9),e(Ga,IIe),b(c,ERe,u),b(c,Vi,u),e(Vi,Gf),e(Gf,nY),g(xC,nY,null),e(Vi,qIe),e(Vi,sY),e(sY,NIe),b(c,CRe,u),b(c,zn,u),e(zn,jIe),e(zn,lY),e(lY,DIe),e(zn,GIe),e(zn,iY),e(iY,OIe),e(zn,VIe),b(c,wRe,u),g(kC,c,u),b(c,ARe,u),b(c,M9,u),e(M9,XIe),b(c,yRe,u),g(Of,c,u),b(c,LRe,u),b(c,Xi,u),e(Xi,Vf),e(Vf,dY),g(SC,dY,null),e(Xi,zIe),e(Xi,cY),e(cY,QIe),b(c,xRe,u),b(c,Qo,u),g(RC,Qo,null),e(Qo,WIe),e(Qo,BC),e(BC,HIe),e(BC,E9),e(E9,UIe),e(BC,JIe),e(Qo,YIe),e(Qo,PC),e(PC,KIe),e(PC,fY),e(fY,ZIe),e(PC,eqe),e(Qo,oqe),e(Qo,mo),g($C,mo,null),e(mo,rqe),e(mo,mY),e(mY,tqe),e(mo,aqe),e(mo,zi),e(zi,nqe),e(zi,gY),e(gY,sqe),e(zi,lqe),e(zi,hY),e(hY,iqe),e(zi,dqe),e(mo,cqe),e(mo,F),e(F,Xf),e(Xf,pY),e(pY,fqe),e(Xf,mqe),e(Xf,C9),e(C9,gqe),e(Xf,hqe),e(F,pqe),e(F,zf),e(zf,_Y),e(_Y,_qe),e(zf,uqe),e(zf,w9),e(w9,bqe),e(zf,Fqe),e(F,vqe),e(F,Qf),e(Qf,uY),e(uY,Tqe),e(Qf,Mqe),e(Qf,A9),e(A9,Eqe),e(Qf,Cqe),e(F,wqe),e(F,Wf),e(Wf,bY),e(bY,Aqe),e(Wf,yqe),e(Wf,y9),e(y9,Lqe),e(Wf,xqe),e(F,kqe),e(F,Hf),e(Hf,FY),e(FY,Sqe),e(Hf,Rqe),e(Hf,L9),e(L9,Bqe),e(Hf,Pqe),e(F,$qe),e(F,Uf),e(Uf,vY),e(vY,Iqe),e(Uf,qqe),e(Uf,x9),e(x9,Nqe),e(Uf,jqe),e(F,Dqe),e(F,Jf),e(Jf,TY),e(TY,Gqe),e(Jf,Oqe),e(Jf,k9),e(k9,Vqe),e(Jf,Xqe),e(F,zqe),e(F,Yf),e(Yf,MY),e(MY,Qqe),e(Yf,Wqe),e(Yf,S9),e(S9,Hqe),e(Yf,Uqe),e(F,Jqe),e(F,Kf),e(Kf,EY),e(EY,Yqe),e(Kf,Kqe),e(Kf,R9),e(R9,Zqe),e(Kf,eNe),e(F,oNe),e(F,Zf),e(Zf,CY),e(CY,rNe),e(Zf,tNe),e(Zf,B9),e(B9,aNe),e(Zf,nNe),e(F,sNe),e(F,em),e(em,wY),e(wY,lNe),e(em,iNe),e(em,P9),e(P9,dNe),e(em,cNe),e(F,fNe),e(F,om),e(om,AY),e(AY,mNe),e(om,gNe),e(om,$9),e($9,hNe),e(om,pNe),e(F,_Ne),e(F,rm),e(rm,yY),e(yY,uNe),e(rm,bNe),e(rm,I9),e(I9,FNe),e(rm,vNe),e(F,TNe),e(F,tm),e(tm,LY),e(LY,MNe),e(tm,ENe),e(tm,q9),e(q9,CNe),e(tm,wNe),e(F,ANe),e(F,am),e(am,xY),e(xY,yNe),e(am,LNe),e(am,N9),e(N9,xNe),e(am,kNe),e(F,SNe),e(F,nm),e(nm,kY),e(kY,RNe),e(nm,BNe),e(nm,j9),e(j9,PNe),e(nm,$Ne),e(F,INe),e(F,sm),e(sm,SY),e(SY,qNe),e(sm,NNe),e(sm,D9),e(D9,jNe),e(sm,DNe),e(F,GNe),e(F,lm),e(lm,RY),e(RY,ONe),e(lm,VNe),e(lm,G9),e(G9,XNe),e(lm,zNe),e(F,QNe),e(F,im),e(im,BY),e(BY,WNe),e(im,HNe),e(im,O9),e(O9,UNe),e(im,JNe),e(F,YNe),e(F,dm),e(dm,PY),e(PY,KNe),e(dm,ZNe),e(dm,V9),e(V9,eje),e(dm,oje),e(F,rje),e(F,cm),e(cm,$Y),e($Y,tje),e(cm,aje),e(cm,X9),e(X9,nje),e(cm,sje),e(F,lje),e(F,fm),e(fm,IY),e(IY,ije),e(fm,dje),e(fm,z9),e(z9,cje),e(fm,fje),e(F,mje),e(F,mm),e(mm,qY),e(qY,gje),e(mm,hje),e(mm,Q9),e(Q9,pje),e(mm,_je),e(F,uje),e(F,gm),e(gm,NY),e(NY,bje),e(gm,Fje),e(gm,W9),e(W9,vje),e(gm,Tje),e(F,Mje),e(F,hm),e(hm,jY),e(jY,Eje),e(hm,Cje),e(hm,H9),e(H9,wje),e(hm,Aje),e(F,yje),e(F,pm),e(pm,DY),e(DY,Lje),e(pm,xje),e(pm,U9),e(U9,kje),e(pm,Sje),e(F,Rje),e(F,_m),e(_m,GY),e(GY,Bje),e(_m,Pje),e(_m,J9),e(J9,$je),e(_m,Ije),e(F,qje),e(F,um),e(um,OY),e(OY,Nje),e(um,jje),e(um,Y9),e(Y9,Dje),e(um,Gje),e(F,Oje),e(F,bm),e(bm,VY),e(VY,Vje),e(bm,Xje),e(bm,K9),e(K9,zje),e(bm,Qje),e(F,Wje),e(F,Fm),e(Fm,XY),e(XY,Hje),e(Fm,Uje),e(Fm,Z9),e(Z9,Jje),e(Fm,Yje),e(F,Kje),e(F,vm),e(vm,zY),e(zY,Zje),e(vm,eDe),e(vm,ex),e(ex,oDe),e(vm,rDe),e(F,tDe),e(F,Tm),e(Tm,QY),e(QY,aDe),e(Tm,nDe),e(Tm,ox),e(ox,sDe),e(Tm,lDe),e(F,iDe),e(F,Mm),e(Mm,WY),e(WY,dDe),e(Mm,cDe),e(Mm,rx),e(rx,fDe),e(Mm,mDe),e(F,gDe),e(F,Em),e(Em,HY),e(HY,hDe),e(Em,pDe),e(Em,tx),e(tx,_De),e(Em,uDe),e(F,bDe),e(F,Cm),e(Cm,UY),e(UY,FDe),e(Cm,vDe),e(Cm,ax),e(ax,TDe),e(Cm,MDe),e(F,EDe),e(F,wm),e(wm,JY),e(JY,CDe),e(wm,wDe),e(wm,nx),e(nx,ADe),e(wm,yDe),e(F,LDe),e(F,Am),e(Am,YY),e(YY,xDe),e(Am,kDe),e(Am,sx),e(sx,SDe),e(Am,RDe),e(F,BDe),e(F,ym),e(ym,KY),e(KY,PDe),e(ym,$De),e(ym,lx),e(lx,IDe),e(ym,qDe),e(F,NDe),e(F,Lm),e(Lm,ZY),e(ZY,jDe),e(Lm,DDe),e(Lm,ix),e(ix,GDe),e(Lm,ODe),e(F,VDe),e(F,xm),e(xm,eK),e(eK,XDe),e(xm,zDe),e(xm,dx),e(dx,QDe),e(xm,WDe),e(F,HDe),e(F,km),e(km,oK),e(oK,UDe),e(km,JDe),e(km,cx),e(cx,YDe),e(km,KDe),e(F,ZDe),e(F,Sm),e(Sm,rK),e(rK,eGe),e(Sm,oGe),e(Sm,fx),e(fx,rGe),e(Sm,tGe),e(F,aGe),e(F,Rm),e(Rm,tK),e(tK,nGe),e(Rm,sGe),e(Rm,mx),e(mx,lGe),e(Rm,iGe),e(F,dGe),e(F,Bm),e(Bm,aK),e(aK,cGe),e(Bm,fGe),e(Bm,gx),e(gx,mGe),e(Bm,gGe),e(F,hGe),e(F,Pm),e(Pm,nK),e(nK,pGe),e(Pm,_Ge),e(Pm,hx),e(hx,uGe),e(Pm,bGe),e(F,FGe),e(F,$m),e($m,sK),e(sK,vGe),e($m,TGe),e($m,px),e(px,MGe),e($m,EGe),e(F,CGe),e(F,Im),e(Im,lK),e(lK,wGe),e(Im,AGe),e(Im,_x),e(_x,yGe),e(Im,LGe),e(F,xGe),e(F,qm),e(qm,iK),e(iK,kGe),e(qm,SGe),e(qm,ux),e(ux,RGe),e(qm,BGe),e(F,PGe),e(F,Nm),e(Nm,dK),e(dK,$Ge),e(Nm,IGe),e(Nm,bx),e(bx,qGe),e(Nm,NGe),e(F,jGe),e(F,jm),e(jm,cK),e(cK,DGe),e(jm,GGe),e(jm,Fx),e(Fx,OGe),e(jm,VGe),e(F,XGe),e(F,Dm),e(Dm,fK),e(fK,zGe),e(Dm,QGe),e(Dm,vx),e(vx,WGe),e(Dm,HGe),e(F,UGe),e(F,Gm),e(Gm,mK),e(mK,JGe),e(Gm,YGe),e(Gm,Tx),e(Tx,KGe),e(Gm,ZGe),e(F,eOe),e(F,Om),e(Om,gK),e(gK,oOe),e(Om,rOe),e(Om,Mx),e(Mx,tOe),e(Om,aOe),e(F,nOe),e(F,Vm),e(Vm,hK),e(hK,sOe),e(Vm,lOe),e(Vm,Ex),e(Ex,iOe),e(Vm,dOe),e(F,cOe),e(F,Xm),e(Xm,pK),e(pK,fOe),e(Xm,mOe),e(Xm,Cx),e(Cx,gOe),e(Xm,hOe),e(F,pOe),e(F,zm),e(zm,_K),e(_K,_Oe),e(zm,uOe),e(zm,wx),e(wx,bOe),e(zm,FOe),e(F,vOe),e(F,Qm),e(Qm,uK),e(uK,TOe),e(Qm,MOe),e(Qm,Ax),e(Ax,EOe),e(Qm,COe),e(F,wOe),e(F,Wm),e(Wm,bK),e(bK,AOe),e(Wm,yOe),e(Wm,yx),e(yx,LOe),e(Wm,xOe),e(F,kOe),e(F,Hm),e(Hm,FK),e(FK,SOe),e(Hm,ROe),e(Hm,Lx),e(Lx,BOe),e(Hm,POe),e(F,$Oe),e(F,Um),e(Um,vK),e(vK,IOe),e(Um,qOe),e(Um,xx),e(xx,NOe),e(Um,jOe),e(F,DOe),e(F,Jm),e(Jm,TK),e(TK,GOe),e(Jm,OOe),e(Jm,kx),e(kx,VOe),e(Jm,XOe),e(F,zOe),e(F,Ym),e(Ym,MK),e(MK,QOe),e(Ym,WOe),e(Ym,Sx),e(Sx,HOe),e(Ym,UOe),e(F,JOe),e(F,Km),e(Km,EK),e(EK,YOe),e(Km,KOe),e(Km,Rx),e(Rx,ZOe),e(Km,eVe),e(F,oVe),e(F,Zm),e(Zm,CK),e(CK,rVe),e(Zm,tVe),e(Zm,Bx),e(Bx,aVe),e(Zm,nVe),e(F,sVe),e(F,eg),e(eg,wK),e(wK,lVe),e(eg,iVe),e(eg,Px),e(Px,dVe),e(eg,cVe),e(F,fVe),e(F,og),e(og,AK),e(AK,mVe),e(og,gVe),e(og,$x),e($x,hVe),e(og,pVe),e(F,_Ve),e(F,rg),e(rg,yK),e(yK,uVe),e(rg,bVe),e(rg,Ix),e(Ix,FVe),e(rg,vVe),e(F,TVe),e(F,tg),e(tg,LK),e(LK,MVe),e(tg,EVe),e(tg,qx),e(qx,CVe),e(tg,wVe),e(F,AVe),e(F,ag),e(ag,xK),e(xK,yVe),e(ag,LVe),e(ag,Nx),e(Nx,xVe),e(ag,kVe),e(F,SVe),e(F,ng),e(ng,kK),e(kK,RVe),e(ng,BVe),e(ng,jx),e(jx,PVe),e(ng,$Ve),e(F,IVe),e(F,sg),e(sg,SK),e(SK,qVe),e(sg,NVe),e(sg,Dx),e(Dx,jVe),e(sg,DVe),e(F,GVe),e(F,lg),e(lg,RK),e(RK,OVe),e(lg,VVe),e(lg,Gx),e(Gx,XVe),e(lg,zVe),e(F,QVe),e(F,ig),e(ig,BK),e(BK,WVe),e(ig,HVe),e(ig,Ox),e(Ox,UVe),e(ig,JVe),e(F,YVe),e(F,dg),e(dg,PK),e(PK,KVe),e(dg,ZVe),e(dg,Vx),e(Vx,eXe),e(dg,oXe),e(F,rXe),e(F,cg),e(cg,$K),e($K,tXe),e(cg,aXe),e(cg,Xx),e(Xx,nXe),e(cg,sXe),e(F,lXe),e(F,fg),e(fg,IK),e(IK,iXe),e(fg,dXe),e(fg,zx),e(zx,cXe),e(fg,fXe),e(F,mXe),e(F,mg),e(mg,qK),e(qK,gXe),e(mg,hXe),e(mg,Qx),e(Qx,pXe),e(mg,_Xe),e(F,uXe),e(F,gg),e(gg,NK),e(NK,bXe),e(gg,FXe),e(gg,Wx),e(Wx,vXe),e(gg,TXe),e(F,MXe),e(F,hg),e(hg,jK),e(jK,EXe),e(hg,CXe),e(hg,Hx),e(Hx,wXe),e(hg,AXe),e(F,yXe),e(F,pg),e(pg,DK),e(DK,LXe),e(pg,xXe),e(pg,Ux),e(Ux,kXe),e(pg,SXe),e(F,RXe),e(F,_g),e(_g,GK),e(GK,BXe),e(_g,PXe),e(_g,Jx),e(Jx,$Xe),e(_g,IXe),e(F,qXe),e(F,ug),e(ug,OK),e(OK,NXe),e(ug,jXe),e(ug,Yx),e(Yx,DXe),e(ug,GXe),e(F,OXe),e(F,bg),e(bg,VK),e(VK,VXe),e(bg,XXe),e(bg,Kx),e(Kx,zXe),e(bg,QXe),e(F,WXe),e(F,Fg),e(Fg,XK),e(XK,HXe),e(Fg,UXe),e(Fg,Zx),e(Zx,JXe),e(Fg,YXe),e(F,KXe),e(F,vg),e(vg,zK),e(zK,ZXe),e(vg,eze),e(vg,ek),e(ek,oze),e(vg,rze),e(F,tze),e(F,Tg),e(Tg,QK),e(QK,aze),e(Tg,nze),e(Tg,ok),e(ok,sze),e(Tg,lze),e(F,ize),e(F,Mg),e(Mg,WK),e(WK,dze),e(Mg,cze),e(Mg,rk),e(rk,fze),e(Mg,mze),e(F,gze),e(F,Eg),e(Eg,HK),e(HK,hze),e(Eg,pze),e(Eg,tk),e(tk,_ze),e(Eg,uze),e(F,bze),e(F,Cg),e(Cg,UK),e(UK,Fze),e(Cg,vze),e(Cg,ak),e(ak,Tze),e(Cg,Mze),e(F,Eze),e(F,wg),e(wg,JK),e(JK,Cze),e(wg,wze),e(wg,nk),e(nk,Aze),e(wg,yze),e(F,Lze),e(F,Ag),e(Ag,YK),e(YK,xze),e(Ag,kze),e(Ag,sk),e(sk,Sze),e(Ag,Rze),e(F,Bze),e(F,yg),e(yg,KK),e(KK,Pze),e(yg,$ze),e(yg,lk),e(lk,Ize),e(yg,qze),e(F,Nze),e(F,Lg),e(Lg,ZK),e(ZK,jze),e(Lg,Dze),e(Lg,ik),e(ik,Gze),e(Lg,Oze),e(F,Vze),e(F,xg),e(xg,eZ),e(eZ,Xze),e(xg,zze),e(xg,dk),e(dk,Qze),e(xg,Wze),e(F,Hze),e(F,kg),e(kg,oZ),e(oZ,Uze),e(kg,Jze),e(kg,ck),e(ck,Yze),e(kg,Kze),e(F,Zze),e(F,Sg),e(Sg,rZ),e(rZ,eQe),e(Sg,oQe),e(Sg,fk),e(fk,rQe),e(Sg,tQe),e(F,aQe),e(F,Rg),e(Rg,tZ),e(tZ,nQe),e(Rg,sQe),e(Rg,mk),e(mk,lQe),e(Rg,iQe),e(F,dQe),e(F,Bg),e(Bg,aZ),e(aZ,cQe),e(Bg,fQe),e(Bg,gk),e(gk,mQe),e(Bg,gQe),e(F,hQe),e(F,Pg),e(Pg,nZ),e(nZ,pQe),e(Pg,_Qe),e(Pg,hk),e(hk,uQe),e(Pg,bQe),e(F,FQe),e(F,$g),e($g,sZ),e(sZ,vQe),e($g,TQe),e($g,pk),e(pk,MQe),e($g,EQe),e(F,CQe),e(F,Ig),e(Ig,lZ),e(lZ,wQe),e(Ig,AQe),e(Ig,_k),e(_k,yQe),e(Ig,LQe),e(mo,xQe),e(mo,iZ),e(iZ,kQe),e(mo,SQe),g(IC,mo,null),e(Qo,RQe),e(Qo,qg),g(qC,qg,null),e(qg,BQe),e(qg,dZ),e(dZ,PQe),b(c,kRe,u),b(c,Qi,u),e(Qi,Ng),e(Ng,cZ),g(NC,cZ,null),e(Qi,$Qe),e(Qi,fZ),e(fZ,IQe),b(c,SRe,u),b(c,Wo,u),g(jC,Wo,null),e(Wo,qQe),e(Wo,DC),e(DC,NQe),e(DC,uk),e(uk,jQe),e(DC,DQe),e(Wo,GQe),e(Wo,GC),e(GC,OQe),e(GC,mZ),e(mZ,VQe),e(GC,XQe),e(Wo,zQe),e(Wo,go),g(OC,go,null),e(go,QQe),e(go,gZ),e(gZ,WQe),e(go,HQe),e(go,Oa),e(Oa,UQe),e(Oa,hZ),e(hZ,JQe),e(Oa,YQe),e(Oa,pZ),e(pZ,KQe),e(Oa,ZQe),e(Oa,_Z),e(_Z,eWe),e(Oa,oWe),e(go,rWe),e(go,E),e(E,Qn),e(Qn,uZ),e(uZ,tWe),e(Qn,aWe),e(Qn,bk),e(bk,nWe),e(Qn,sWe),e(Qn,Fk),e(Fk,lWe),e(Qn,iWe),e(E,dWe),e(E,Wn),e(Wn,bZ),e(bZ,cWe),e(Wn,fWe),e(Wn,vk),e(vk,mWe),e(Wn,gWe),e(Wn,Tk),e(Tk,hWe),e(Wn,pWe),e(E,_We),e(E,Hn),e(Hn,FZ),e(FZ,uWe),e(Hn,bWe),e(Hn,Mk),e(Mk,FWe),e(Hn,vWe),e(Hn,Ek),e(Ek,TWe),e(Hn,MWe),e(E,EWe),e(E,jg),e(jg,vZ),e(vZ,CWe),e(jg,wWe),e(jg,Ck),e(Ck,AWe),e(jg,yWe),e(E,LWe),e(E,Un),e(Un,TZ),e(TZ,xWe),e(Un,kWe),e(Un,wk),e(wk,SWe),e(Un,RWe),e(Un,Ak),e(Ak,BWe),e(Un,PWe),e(E,$We),e(E,Dg),e(Dg,MZ),e(MZ,IWe),e(Dg,qWe),e(Dg,yk),e(yk,NWe),e(Dg,jWe),e(E,DWe),e(E,Gg),e(Gg,EZ),e(EZ,GWe),e(Gg,OWe),e(Gg,Lk),e(Lk,VWe),e(Gg,XWe),e(E,zWe),e(E,Og),e(Og,CZ),e(CZ,QWe),e(Og,WWe),e(Og,xk),e(xk,HWe),e(Og,UWe),e(E,JWe),e(E,Jn),e(Jn,wZ),e(wZ,YWe),e(Jn,KWe),e(Jn,kk),e(kk,ZWe),e(Jn,eHe),e(Jn,Sk),e(Sk,oHe),e(Jn,rHe),e(E,tHe),e(E,Yn),e(Yn,AZ),e(AZ,aHe),e(Yn,nHe),e(Yn,Rk),e(Rk,sHe),e(Yn,lHe),e(Yn,Bk),e(Bk,iHe),e(Yn,dHe),e(E,cHe),e(E,Kn),e(Kn,yZ),e(yZ,fHe),e(Kn,mHe),e(Kn,Pk),e(Pk,gHe),e(Kn,hHe),e(Kn,$k),e($k,pHe),e(Kn,_He),e(E,uHe),e(E,Vg),e(Vg,LZ),e(LZ,bHe),e(Vg,FHe),e(Vg,Ik),e(Ik,vHe),e(Vg,THe),e(E,MHe),e(E,Xg),e(Xg,xZ),e(xZ,EHe),e(Xg,CHe),e(Xg,qk),e(qk,wHe),e(Xg,AHe),e(E,yHe),e(E,Zn),e(Zn,kZ),e(kZ,LHe),e(Zn,xHe),e(Zn,Nk),e(Nk,kHe),e(Zn,SHe),e(Zn,jk),e(jk,RHe),e(Zn,BHe),e(E,PHe),e(E,zg),e(zg,SZ),e(SZ,$He),e(zg,IHe),e(zg,Dk),e(Dk,qHe),e(zg,NHe),e(E,jHe),e(E,es),e(es,RZ),e(RZ,DHe),e(es,GHe),e(es,Gk),e(Gk,OHe),e(es,VHe),e(es,Ok),e(Ok,XHe),e(es,zHe),e(E,QHe),e(E,os),e(os,BZ),e(BZ,WHe),e(os,HHe),e(os,Vk),e(Vk,UHe),e(os,JHe),e(os,Xk),e(Xk,YHe),e(os,KHe),e(E,ZHe),e(E,rs),e(rs,PZ),e(PZ,eUe),e(rs,oUe),e(rs,zk),e(zk,rUe),e(rs,tUe),e(rs,$Z),e($Z,aUe),e(rs,nUe),e(E,sUe),e(E,Qg),e(Qg,IZ),e(IZ,lUe),e(Qg,iUe),e(Qg,Qk),e(Qk,dUe),e(Qg,cUe),e(E,fUe),e(E,ts),e(ts,qZ),e(qZ,mUe),e(ts,gUe),e(ts,Wk),e(Wk,hUe),e(ts,pUe),e(ts,Hk),e(Hk,_Ue),e(ts,uUe),e(E,bUe),e(E,Wg),e(Wg,NZ),e(NZ,FUe),e(Wg,vUe),e(Wg,Uk),e(Uk,TUe),e(Wg,MUe),e(E,EUe),e(E,as),e(as,jZ),e(jZ,CUe),e(as,wUe),e(as,Jk),e(Jk,AUe),e(as,yUe),e(as,Yk),e(Yk,LUe),e(as,xUe),e(E,kUe),e(E,ns),e(ns,DZ),e(DZ,SUe),e(ns,RUe),e(ns,Kk),e(Kk,BUe),e(ns,PUe),e(ns,Zk),e(Zk,$Ue),e(ns,IUe),e(E,qUe),e(E,ss),e(ss,GZ),e(GZ,NUe),e(ss,jUe),e(ss,eS),e(eS,DUe),e(ss,GUe),e(ss,oS),e(oS,OUe),e(ss,VUe),e(E,XUe),e(E,Hg),e(Hg,OZ),e(OZ,zUe),e(Hg,QUe),e(Hg,rS),e(rS,WUe),e(Hg,HUe),e(E,UUe),e(E,ls),e(ls,VZ),e(VZ,JUe),e(ls,YUe),e(ls,tS),e(tS,KUe),e(ls,ZUe),e(ls,aS),e(aS,eJe),e(ls,oJe),e(E,rJe),e(E,Ug),e(Ug,XZ),e(XZ,tJe),e(Ug,aJe),e(Ug,nS),e(nS,nJe),e(Ug,sJe),e(E,lJe),e(E,is),e(is,zZ),e(zZ,iJe),e(is,dJe),e(is,sS),e(sS,cJe),e(is,fJe),e(is,lS),e(lS,mJe),e(is,gJe),e(E,hJe),e(E,ds),e(ds,QZ),e(QZ,pJe),e(ds,_Je),e(ds,iS),e(iS,uJe),e(ds,bJe),e(ds,dS),e(dS,FJe),e(ds,vJe),e(E,TJe),e(E,cs),e(cs,WZ),e(WZ,MJe),e(cs,EJe),e(cs,cS),e(cS,CJe),e(cs,wJe),e(cs,fS),e(fS,AJe),e(cs,yJe),e(E,LJe),e(E,fs),e(fs,HZ),e(HZ,xJe),e(fs,kJe),e(fs,mS),e(mS,SJe),e(fs,RJe),e(fs,gS),e(gS,BJe),e(fs,PJe),e(E,$Je),e(E,Jg),e(Jg,UZ),e(UZ,IJe),e(Jg,qJe),e(Jg,hS),e(hS,NJe),e(Jg,jJe),e(E,DJe),e(E,ms),e(ms,JZ),e(JZ,GJe),e(ms,OJe),e(ms,pS),e(pS,VJe),e(ms,XJe),e(ms,_S),e(_S,zJe),e(ms,QJe),e(E,WJe),e(E,gs),e(gs,YZ),e(YZ,HJe),e(gs,UJe),e(gs,uS),e(uS,JJe),e(gs,YJe),e(gs,bS),e(bS,KJe),e(gs,ZJe),e(E,eYe),e(E,hs),e(hs,KZ),e(KZ,oYe),e(hs,rYe),e(hs,FS),e(FS,tYe),e(hs,aYe),e(hs,vS),e(vS,nYe),e(hs,sYe),e(E,lYe),e(E,ps),e(ps,ZZ),e(ZZ,iYe),e(ps,dYe),e(ps,TS),e(TS,cYe),e(ps,fYe),e(ps,MS),e(MS,mYe),e(ps,gYe),e(E,hYe),e(E,_s),e(_s,eee),e(eee,pYe),e(_s,_Ye),e(_s,ES),e(ES,uYe),e(_s,bYe),e(_s,CS),e(CS,FYe),e(_s,vYe),e(E,TYe),e(E,us),e(us,oee),e(oee,MYe),e(us,EYe),e(us,wS),e(wS,CYe),e(us,wYe),e(us,AS),e(AS,AYe),e(us,yYe),e(E,LYe),e(E,Yg),e(Yg,ree),e(ree,xYe),e(Yg,kYe),e(Yg,yS),e(yS,SYe),e(Yg,RYe),e(E,BYe),e(E,bs),e(bs,tee),e(tee,PYe),e(bs,$Ye),e(bs,LS),e(LS,IYe),e(bs,qYe),e(bs,xS),e(xS,NYe),e(bs,jYe),e(E,DYe),e(E,Kg),e(Kg,aee),e(aee,GYe),e(Kg,OYe),e(Kg,kS),e(kS,VYe),e(Kg,XYe),e(E,zYe),e(E,Zg),e(Zg,nee),e(nee,QYe),e(Zg,WYe),e(Zg,SS),e(SS,HYe),e(Zg,UYe),e(E,JYe),e(E,Fs),e(Fs,see),e(see,YYe),e(Fs,KYe),e(Fs,RS),e(RS,ZYe),e(Fs,eKe),e(Fs,BS),e(BS,oKe),e(Fs,rKe),e(E,tKe),e(E,vs),e(vs,lee),e(lee,aKe),e(vs,nKe),e(vs,PS),e(PS,sKe),e(vs,lKe),e(vs,$S),e($S,iKe),e(vs,dKe),e(E,cKe),e(E,eh),e(eh,iee),e(iee,fKe),e(eh,mKe),e(eh,IS),e(IS,gKe),e(eh,hKe),e(E,pKe),e(E,Ts),e(Ts,dee),e(dee,_Ke),e(Ts,uKe),e(Ts,qS),e(qS,bKe),e(Ts,FKe),e(Ts,NS),e(NS,vKe),e(Ts,TKe),e(E,MKe),e(E,Ms),e(Ms,cee),e(cee,EKe),e(Ms,CKe),e(Ms,jS),e(jS,wKe),e(Ms,AKe),e(Ms,DS),e(DS,yKe),e(Ms,LKe),e(E,xKe),e(E,Es),e(Es,fee),e(fee,kKe),e(Es,SKe),e(Es,GS),e(GS,RKe),e(Es,BKe),e(Es,OS),e(OS,PKe),e(Es,$Ke),e(E,IKe),e(E,Cs),e(Cs,mee),e(mee,qKe),e(Cs,NKe),e(Cs,VS),e(VS,jKe),e(Cs,DKe),e(Cs,XS),e(XS,GKe),e(Cs,OKe),e(E,VKe),e(E,ws),e(ws,gee),e(gee,XKe),e(ws,zKe),e(ws,zS),e(zS,QKe),e(ws,WKe),e(ws,QS),e(QS,HKe),e(ws,UKe),e(E,JKe),e(E,oh),e(oh,hee),e(hee,YKe),e(oh,KKe),e(oh,WS),e(WS,ZKe),e(oh,eZe),e(E,oZe),e(E,rh),e(rh,pee),e(pee,rZe),e(rh,tZe),e(rh,HS),e(HS,aZe),e(rh,nZe),e(E,sZe),e(E,th),e(th,_ee),e(_ee,lZe),e(th,iZe),e(th,US),e(US,dZe),e(th,cZe),e(E,fZe),e(E,ah),e(ah,uee),e(uee,mZe),e(ah,gZe),e(ah,JS),e(JS,hZe),e(ah,pZe),e(E,_Ze),e(E,As),e(As,bee),e(bee,uZe),e(As,bZe),e(As,YS),e(YS,FZe),e(As,vZe),e(As,KS),e(KS,TZe),e(As,MZe),e(E,EZe),e(E,nh),e(nh,Fee),e(Fee,CZe),e(nh,wZe),e(nh,ZS),e(ZS,AZe),e(nh,yZe),e(E,LZe),e(E,ys),e(ys,vee),e(vee,xZe),e(ys,kZe),e(ys,eR),e(eR,SZe),e(ys,RZe),e(ys,oR),e(oR,BZe),e(ys,PZe),e(E,$Ze),e(E,Ls),e(Ls,Tee),e(Tee,IZe),e(Ls,qZe),e(Ls,rR),e(rR,NZe),e(Ls,jZe),e(Ls,tR),e(tR,DZe),e(Ls,GZe),e(E,OZe),e(E,xs),e(xs,Mee),e(Mee,VZe),e(xs,XZe),e(xs,aR),e(aR,zZe),e(xs,QZe),e(xs,nR),e(nR,WZe),e(xs,HZe),e(E,UZe),e(E,ks),e(ks,Eee),e(Eee,JZe),e(ks,YZe),e(ks,sR),e(sR,KZe),e(ks,ZZe),e(ks,lR),e(lR,eeo),e(ks,oeo),e(E,reo),e(E,Ss),e(Ss,Cee),e(Cee,teo),e(Ss,aeo),e(Ss,iR),e(iR,neo),e(Ss,seo),e(Ss,dR),e(dR,leo),e(Ss,ieo),e(E,deo),e(E,Rs),e(Rs,wee),e(wee,ceo),e(Rs,feo),e(Rs,cR),e(cR,meo),e(Rs,geo),e(Rs,fR),e(fR,heo),e(Rs,peo),e(E,_eo),e(E,sh),e(sh,Aee),e(Aee,ueo),e(sh,beo),e(sh,mR),e(mR,Feo),e(sh,veo),e(E,Teo),e(E,lh),e(lh,yee),e(yee,Meo),e(lh,Eeo),e(lh,gR),e(gR,Ceo),e(lh,weo),e(E,Aeo),e(E,Bs),e(Bs,Lee),e(Lee,yeo),e(Bs,Leo),e(Bs,hR),e(hR,xeo),e(Bs,keo),e(Bs,pR),e(pR,Seo),e(Bs,Reo),e(E,Beo),e(E,Ps),e(Ps,xee),e(xee,Peo),e(Ps,$eo),e(Ps,_R),e(_R,Ieo),e(Ps,qeo),e(Ps,uR),e(uR,Neo),e(Ps,jeo),e(E,Deo),e(E,$s),e($s,kee),e(kee,Geo),e($s,Oeo),e($s,bR),e(bR,Veo),e($s,Xeo),e($s,FR),e(FR,zeo),e($s,Qeo),e(E,Weo),e(E,ih),e(ih,See),e(See,Heo),e(ih,Ueo),e(ih,vR),e(vR,Jeo),e(ih,Yeo),e(E,Keo),e(E,dh),e(dh,Ree),e(Ree,Zeo),e(dh,eoo),e(dh,TR),e(TR,ooo),e(dh,roo),e(E,too),e(E,ch),e(ch,Bee),e(Bee,aoo),e(ch,noo),e(ch,MR),e(MR,soo),e(ch,loo),e(E,ioo),e(E,fh),e(fh,Pee),e(Pee,doo),e(fh,coo),e(fh,ER),e(ER,foo),e(fh,moo),e(E,goo),e(E,mh),e(mh,$ee),e($ee,hoo),e(mh,poo),e(mh,CR),e(CR,_oo),e(mh,uoo),e(E,boo),e(E,Is),e(Is,Iee),e(Iee,Foo),e(Is,voo),e(Is,wR),e(wR,Too),e(Is,Moo),e(Is,AR),e(AR,Eoo),e(Is,Coo),e(E,woo),e(E,gh),e(gh,qee),e(qee,Aoo),e(gh,yoo),e(gh,yR),e(yR,Loo),e(gh,xoo),e(E,koo),e(E,hh),e(hh,Nee),e(Nee,Soo),e(hh,Roo),e(hh,LR),e(LR,Boo),e(hh,Poo),e(E,$oo),e(E,qs),e(qs,jee),e(jee,Ioo),e(qs,qoo),e(qs,xR),e(xR,Noo),e(qs,joo),e(qs,kR),e(kR,Doo),e(qs,Goo),e(E,Ooo),e(E,Ns),e(Ns,Dee),e(Dee,Voo),e(Ns,Xoo),e(Ns,SR),e(SR,zoo),e(Ns,Qoo),e(Ns,RR),e(RR,Woo),e(Ns,Hoo),e(go,Uoo),e(go,Gee),e(Gee,Joo),e(go,Yoo),g(VC,go,null),e(Wo,Koo),e(Wo,ph),g(XC,ph,null),e(ph,Zoo),e(ph,Oee),e(Oee,ero),b(c,RRe,u),b(c,Wi,u),e(Wi,_h),e(_h,Vee),g(zC,Vee,null),e(Wi,oro),e(Wi,Xee),e(Xee,rro),b(c,BRe,u),b(c,Ho,u),g(QC,Ho,null),e(Ho,tro),e(Ho,WC),e(WC,aro),e(WC,BR),e(BR,nro),e(WC,sro),e(Ho,lro),e(Ho,HC),e(HC,iro),e(HC,zee),e(zee,dro),e(HC,cro),e(Ho,fro),e(Ho,$e),g(UC,$e,null),e($e,mro),e($e,Qee),e(Qee,gro),e($e,hro),e($e,Va),e(Va,pro),e(Va,Wee),e(Wee,_ro),e(Va,uro),e(Va,Hee),e(Hee,bro),e(Va,Fro),e(Va,Uee),e(Uee,vro),e(Va,Tro),e($e,Mro),e($e,ee),e(ee,uh),e(uh,Jee),e(Jee,Ero),e(uh,Cro),e(uh,PR),e(PR,wro),e(uh,Aro),e(ee,yro),e(ee,bh),e(bh,Yee),e(Yee,Lro),e(bh,xro),e(bh,$R),e($R,kro),e(bh,Sro),e(ee,Rro),e(ee,Fh),e(Fh,Kee),e(Kee,Bro),e(Fh,Pro),e(Fh,IR),e(IR,$ro),e(Fh,Iro),e(ee,qro),e(ee,vh),e(vh,Zee),e(Zee,Nro),e(vh,jro),e(vh,qR),e(qR,Dro),e(vh,Gro),e(ee,Oro),e(ee,Th),e(Th,eoe),e(eoe,Vro),e(Th,Xro),e(Th,NR),e(NR,zro),e(Th,Qro),e(ee,Wro),e(ee,Mh),e(Mh,ooe),e(ooe,Hro),e(Mh,Uro),e(Mh,jR),e(jR,Jro),e(Mh,Yro),e(ee,Kro),e(ee,Eh),e(Eh,roe),e(roe,Zro),e(Eh,eto),e(Eh,DR),e(DR,oto),e(Eh,rto),e(ee,tto),e(ee,Ch),e(Ch,toe),e(toe,ato),e(Ch,nto),e(Ch,GR),e(GR,sto),e(Ch,lto),e(ee,ito),e(ee,wh),e(wh,aoe),e(aoe,dto),e(wh,cto),e(wh,OR),e(OR,fto),e(wh,mto),e(ee,gto),e(ee,Ah),e(Ah,noe),e(noe,hto),e(Ah,pto),e(Ah,VR),e(VR,_to),e(Ah,uto),e(ee,bto),e(ee,yh),e(yh,soe),e(soe,Fto),e(yh,vto),e(yh,XR),e(XR,Tto),e(yh,Mto),e(ee,Eto),e(ee,Lh),e(Lh,loe),e(loe,Cto),e(Lh,wto),e(Lh,zR),e(zR,Ato),e(Lh,yto),e(ee,Lto),e(ee,xh),e(xh,ioe),e(ioe,xto),e(xh,kto),e(xh,QR),e(QR,Sto),e(xh,Rto),e(ee,Bto),e(ee,kh),e(kh,doe),e(doe,Pto),e(kh,$to),e(kh,WR),e(WR,Ito),e(kh,qto),e(ee,Nto),e(ee,Sh),e(Sh,coe),e(coe,jto),e(Sh,Dto),e(Sh,HR),e(HR,Gto),e(Sh,Oto),e(ee,Vto),e(ee,Rh),e(Rh,foe),e(foe,Xto),e(Rh,zto),e(Rh,UR),e(UR,Qto),e(Rh,Wto),e(ee,Hto),e(ee,Bh),e(Bh,moe),e(moe,Uto),e(Bh,Jto),e(Bh,JR),e(JR,Yto),e(Bh,Kto),e(ee,Zto),e(ee,Ph),e(Ph,goe),e(goe,eao),e(Ph,oao),e(Ph,YR),e(YR,rao),e(Ph,tao),e(ee,aao),e(ee,$h),e($h,hoe),e(hoe,nao),e($h,sao),e($h,KR),e(KR,lao),e($h,iao),e($e,dao),g(Ih,$e,null),e($e,cao),e($e,poe),e(poe,fao),e($e,mao),g(JC,$e,null),e(Ho,gao),e(Ho,qh),g(YC,qh,null),e(qh,hao),e(qh,_oe),e(_oe,pao),b(c,PRe,u),b(c,Hi,u),e(Hi,Nh),e(Nh,uoe),g(KC,uoe,null),e(Hi,_ao),e(Hi,boe),e(boe,uao),b(c,$Re,u),b(c,Uo,u),g(ZC,Uo,null),e(Uo,bao),e(Uo,ew),e(ew,Fao),e(ew,ZR),e(ZR,vao),e(ew,Tao),e(Uo,Mao),e(Uo,ow),e(ow,Eao),e(ow,Foe),e(Foe,Cao),e(ow,wao),e(Uo,Aao),e(Uo,Ie),g(rw,Ie,null),e(Ie,yao),e(Ie,voe),e(voe,Lao),e(Ie,xao),e(Ie,Ui),e(Ui,kao),e(Ui,Toe),e(Toe,Sao),e(Ui,Rao),e(Ui,Moe),e(Moe,Bao),e(Ui,Pao),e(Ie,$ao),e(Ie,ke),e(ke,jh),e(jh,Eoe),e(Eoe,Iao),e(jh,qao),e(jh,eB),e(eB,Nao),e(jh,jao),e(ke,Dao),e(ke,Dh),e(Dh,Coe),e(Coe,Gao),e(Dh,Oao),e(Dh,oB),e(oB,Vao),e(Dh,Xao),e(ke,zao),e(ke,Gh),e(Gh,woe),e(woe,Qao),e(Gh,Wao),e(Gh,rB),e(rB,Hao),e(Gh,Uao),e(ke,Jao),e(ke,Oh),e(Oh,Aoe),e(Aoe,Yao),e(Oh,Kao),e(Oh,tB),e(tB,Zao),e(Oh,eno),e(ke,ono),e(ke,Vh),e(Vh,yoe),e(yoe,rno),e(Vh,tno),e(Vh,aB),e(aB,ano),e(Vh,nno),e(ke,sno),e(ke,Xh),e(Xh,Loe),e(Loe,lno),e(Xh,ino),e(Xh,nB),e(nB,dno),e(Xh,cno),e(ke,fno),e(ke,zh),e(zh,xoe),e(xoe,mno),e(zh,gno),e(zh,sB),e(sB,hno),e(zh,pno),e(ke,_no),e(ke,Qh),e(Qh,koe),e(koe,uno),e(Qh,bno),e(Qh,lB),e(lB,Fno),e(Qh,vno),e(Ie,Tno),g(Wh,Ie,null),e(Ie,Mno),e(Ie,Soe),e(Soe,Eno),e(Ie,Cno),g(tw,Ie,null),e(Uo,wno),e(Uo,Hh),g(aw,Hh,null),e(Hh,Ano),e(Hh,Roe),e(Roe,yno),b(c,IRe,u),b(c,Ji,u),e(Ji,Uh),e(Uh,Boe),g(nw,Boe,null),e(Ji,Lno),e(Ji,Poe),e(Poe,xno),b(c,qRe,u),b(c,Jo,u),g(sw,Jo,null),e(Jo,kno),e(Jo,Yi),e(Yi,Sno),e(Yi,iB),e(iB,Rno),e(Yi,Bno),e(Yi,dB),e(dB,Pno),e(Yi,$no),e(Jo,Ino),e(Jo,lw),e(lw,qno),e(lw,$oe),e($oe,Nno),e(lw,jno),e(Jo,Dno),e(Jo,Xr),g(iw,Xr,null),e(Xr,Gno),e(Xr,Ioe),e(Ioe,Ono),e(Xr,Vno),e(Xr,Ki),e(Ki,Xno),e(Ki,qoe),e(qoe,zno),e(Ki,Qno),e(Ki,cB),e(cB,Wno),e(Ki,Hno),e(Xr,Uno),e(Xr,Noe),e(Noe,Jno),e(Xr,Yno),g(dw,Xr,null),e(Jo,Kno),e(Jo,qe),g(cw,qe,null),e(qe,Zno),e(qe,joe),e(joe,eso),e(qe,oso),e(qe,Xa),e(Xa,rso),e(Xa,Doe),e(Doe,tso),e(Xa,aso),e(Xa,Goe),e(Goe,nso),e(Xa,sso),e(Xa,Ooe),e(Ooe,lso),e(Xa,iso),e(qe,dso),e(qe,T),e(T,Jh),e(Jh,Voe),e(Voe,cso),e(Jh,fso),e(Jh,fB),e(fB,mso),e(Jh,gso),e(T,hso),e(T,Yh),e(Yh,Xoe),e(Xoe,pso),e(Yh,_so),e(Yh,mB),e(mB,uso),e(Yh,bso),e(T,Fso),e(T,Kh),e(Kh,zoe),e(zoe,vso),e(Kh,Tso),e(Kh,gB),e(gB,Mso),e(Kh,Eso),e(T,Cso),e(T,Zh),e(Zh,Qoe),e(Qoe,wso),e(Zh,Aso),e(Zh,hB),e(hB,yso),e(Zh,Lso),e(T,xso),e(T,ep),e(ep,Woe),e(Woe,kso),e(ep,Sso),e(ep,pB),e(pB,Rso),e(ep,Bso),e(T,Pso),e(T,op),e(op,Hoe),e(Hoe,$so),e(op,Iso),e(op,_B),e(_B,qso),e(op,Nso),e(T,jso),e(T,rp),e(rp,Uoe),e(Uoe,Dso),e(rp,Gso),e(rp,uB),e(uB,Oso),e(rp,Vso),e(T,Xso),e(T,tp),e(tp,Joe),e(Joe,zso),e(tp,Qso),e(tp,bB),e(bB,Wso),e(tp,Hso),e(T,Uso),e(T,ap),e(ap,Yoe),e(Yoe,Jso),e(ap,Yso),e(ap,FB),e(FB,Kso),e(ap,Zso),e(T,elo),e(T,np),e(np,Koe),e(Koe,olo),e(np,rlo),e(np,vB),e(vB,tlo),e(np,alo),e(T,nlo),e(T,sp),e(sp,Zoe),e(Zoe,slo),e(sp,llo),e(sp,TB),e(TB,ilo),e(sp,dlo),e(T,clo),e(T,lp),e(lp,ere),e(ere,flo),e(lp,mlo),e(lp,MB),e(MB,glo),e(lp,hlo),e(T,plo),e(T,ip),e(ip,ore),e(ore,_lo),e(ip,ulo),e(ip,EB),e(EB,blo),e(ip,Flo),e(T,vlo),e(T,dp),e(dp,rre),e(rre,Tlo),e(dp,Mlo),e(dp,CB),e(CB,Elo),e(dp,Clo),e(T,wlo),e(T,cp),e(cp,tre),e(tre,Alo),e(cp,ylo),e(cp,wB),e(wB,Llo),e(cp,xlo),e(T,klo),e(T,fp),e(fp,are),e(are,Slo),e(fp,Rlo),e(fp,AB),e(AB,Blo),e(fp,Plo),e(T,$lo),e(T,mp),e(mp,nre),e(nre,Ilo),e(mp,qlo),e(mp,yB),e(yB,Nlo),e(mp,jlo),e(T,Dlo),e(T,gp),e(gp,sre),e(sre,Glo),e(gp,Olo),e(gp,LB),e(LB,Vlo),e(gp,Xlo),e(T,zlo),e(T,hp),e(hp,lre),e(lre,Qlo),e(hp,Wlo),e(hp,xB),e(xB,Hlo),e(hp,Ulo),e(T,Jlo),e(T,pp),e(pp,ire),e(ire,Ylo),e(pp,Klo),e(pp,kB),e(kB,Zlo),e(pp,eio),e(T,oio),e(T,_p),e(_p,dre),e(dre,rio),e(_p,tio),e(_p,SB),e(SB,aio),e(_p,nio),e(T,sio),e(T,up),e(up,cre),e(cre,lio),e(up,iio),e(up,RB),e(RB,dio),e(up,cio),e(T,fio),e(T,bp),e(bp,fre),e(fre,mio),e(bp,gio),e(bp,BB),e(BB,hio),e(bp,pio),e(T,_io),e(T,Fp),e(Fp,mre),e(mre,uio),e(Fp,bio),e(Fp,PB),e(PB,Fio),e(Fp,vio),e(T,Tio),e(T,vp),e(vp,gre),e(gre,Mio),e(vp,Eio),e(vp,$B),e($B,Cio),e(vp,wio),e(T,Aio),e(T,Tp),e(Tp,hre),e(hre,yio),e(Tp,Lio),e(Tp,IB),e(IB,xio),e(Tp,kio),e(T,Sio),e(T,Mp),e(Mp,pre),e(pre,Rio),e(Mp,Bio),e(Mp,qB),e(qB,Pio),e(Mp,$io),e(T,Iio),e(T,Ep),e(Ep,_re),e(_re,qio),e(Ep,Nio),e(Ep,NB),e(NB,jio),e(Ep,Dio),e(T,Gio),e(T,Cp),e(Cp,ure),e(ure,Oio),e(Cp,Vio),e(Cp,jB),e(jB,Xio),e(Cp,zio),e(T,Qio),e(T,js),e(js,bre),e(bre,Wio),e(js,Hio),e(js,DB),e(DB,Uio),e(js,Jio),e(js,GB),e(GB,Yio),e(js,Kio),e(T,Zio),e(T,wp),e(wp,Fre),e(Fre,edo),e(wp,odo),e(wp,OB),e(OB,rdo),e(wp,tdo),e(T,ado),e(T,Ap),e(Ap,vre),e(vre,ndo),e(Ap,sdo),e(Ap,VB),e(VB,ldo),e(Ap,ido),e(T,ddo),e(T,yp),e(yp,Tre),e(Tre,cdo),e(yp,fdo),e(yp,XB),e(XB,mdo),e(yp,gdo),e(T,hdo),e(T,Lp),e(Lp,Mre),e(Mre,pdo),e(Lp,_do),e(Lp,zB),e(zB,udo),e(Lp,bdo),e(T,Fdo),e(T,xp),e(xp,Ere),e(Ere,vdo),e(xp,Tdo),e(xp,QB),e(QB,Mdo),e(xp,Edo),e(T,Cdo),e(T,kp),e(kp,Cre),e(Cre,wdo),e(kp,Ado),e(kp,WB),e(WB,ydo),e(kp,Ldo),e(T,xdo),e(T,Sp),e(Sp,wre),e(wre,kdo),e(Sp,Sdo),e(Sp,HB),e(HB,Rdo),e(Sp,Bdo),e(T,Pdo),e(T,Rp),e(Rp,Are),e(Are,$do),e(Rp,Ido),e(Rp,UB),e(UB,qdo),e(Rp,Ndo),e(T,jdo),e(T,Bp),e(Bp,yre),e(yre,Ddo),e(Bp,Gdo),e(Bp,JB),e(JB,Odo),e(Bp,Vdo),e(T,Xdo),e(T,Pp),e(Pp,Lre),e(Lre,zdo),e(Pp,Qdo),e(Pp,YB),e(YB,Wdo),e(Pp,Hdo),e(T,Udo),e(T,$p),e($p,xre),e(xre,Jdo),e($p,Ydo),e($p,KB),e(KB,Kdo),e($p,Zdo),e(T,eco),e(T,Ip),e(Ip,kre),e(kre,oco),e(Ip,rco),e(Ip,ZB),e(ZB,tco),e(Ip,aco),e(T,nco),e(T,qp),e(qp,Sre),e(Sre,sco),e(qp,lco),e(qp,eP),e(eP,ico),e(qp,dco),e(T,cco),e(T,Np),e(Np,Rre),e(Rre,fco),e(Np,mco),e(Np,oP),e(oP,gco),e(Np,hco),e(T,pco),e(T,jp),e(jp,Bre),e(Bre,_co),e(jp,uco),e(jp,rP),e(rP,bco),e(jp,Fco),e(T,vco),e(T,Dp),e(Dp,Pre),e(Pre,Tco),e(Dp,Mco),e(Dp,tP),e(tP,Eco),e(Dp,Cco),e(T,wco),e(T,Gp),e(Gp,$re),e($re,Aco),e(Gp,yco),e(Gp,aP),e(aP,Lco),e(Gp,xco),e(T,kco),e(T,Op),e(Op,Ire),e(Ire,Sco),e(Op,Rco),e(Op,nP),e(nP,Bco),e(Op,Pco),e(T,$co),e(T,Vp),e(Vp,qre),e(qre,Ico),e(Vp,qco),e(Vp,sP),e(sP,Nco),e(Vp,jco),e(T,Dco),e(T,Xp),e(Xp,Nre),e(Nre,Gco),e(Xp,Oco),e(Xp,lP),e(lP,Vco),e(Xp,Xco),e(T,zco),e(T,zp),e(zp,jre),e(jre,Qco),e(zp,Wco),e(zp,iP),e(iP,Hco),e(zp,Uco),e(T,Jco),e(T,Qp),e(Qp,Dre),e(Dre,Yco),e(Qp,Kco),e(Qp,dP),e(dP,Zco),e(Qp,efo),e(T,ofo),e(T,Wp),e(Wp,Gre),e(Gre,rfo),e(Wp,tfo),e(Wp,cP),e(cP,afo),e(Wp,nfo),e(T,sfo),e(T,Hp),e(Hp,Ore),e(Ore,lfo),e(Hp,ifo),e(Hp,fP),e(fP,dfo),e(Hp,cfo),e(T,ffo),e(T,Up),e(Up,Vre),e(Vre,mfo),e(Up,gfo),e(Up,mP),e(mP,hfo),e(Up,pfo),e(T,_fo),e(T,Jp),e(Jp,Xre),e(Xre,ufo),e(Jp,bfo),e(Jp,gP),e(gP,Ffo),e(Jp,vfo),e(T,Tfo),e(T,Yp),e(Yp,zre),e(zre,Mfo),e(Yp,Efo),e(Yp,hP),e(hP,Cfo),e(Yp,wfo),e(T,Afo),e(T,Kp),e(Kp,Qre),e(Qre,yfo),e(Kp,Lfo),e(Kp,pP),e(pP,xfo),e(Kp,kfo),e(T,Sfo),e(T,Zp),e(Zp,Wre),e(Wre,Rfo),e(Zp,Bfo),e(Zp,_P),e(_P,Pfo),e(Zp,$fo),e(T,Ifo),e(T,e_),e(e_,Hre),e(Hre,qfo),e(e_,Nfo),e(e_,uP),e(uP,jfo),e(e_,Dfo),e(T,Gfo),e(T,o_),e(o_,Ure),e(Ure,Ofo),e(o_,Vfo),e(o_,bP),e(bP,Xfo),e(o_,zfo),e(T,Qfo),e(T,r_),e(r_,Jre),e(Jre,Wfo),e(r_,Hfo),e(r_,FP),e(FP,Ufo),e(r_,Jfo),e(T,Yfo),e(T,t_),e(t_,Yre),e(Yre,Kfo),e(t_,Zfo),e(t_,vP),e(vP,emo),e(t_,omo),e(T,rmo),e(T,a_),e(a_,Kre),e(Kre,tmo),e(a_,amo),e(a_,TP),e(TP,nmo),e(a_,smo),e(T,lmo),e(T,n_),e(n_,Zre),e(Zre,imo),e(n_,dmo),e(n_,MP),e(MP,cmo),e(n_,fmo),e(T,mmo),e(T,s_),e(s_,ete),e(ete,gmo),e(s_,hmo),e(s_,EP),e(EP,pmo),e(s_,_mo),e(T,umo),e(T,l_),e(l_,ote),e(ote,bmo),e(l_,Fmo),e(l_,CP),e(CP,vmo),e(l_,Tmo),e(T,Mmo),e(T,i_),e(i_,rte),e(rte,Emo),e(i_,Cmo),e(i_,wP),e(wP,wmo),e(i_,Amo),e(T,ymo),e(T,d_),e(d_,tte),e(tte,Lmo),e(d_,xmo),e(d_,AP),e(AP,kmo),e(d_,Smo),e(T,Rmo),e(T,c_),e(c_,ate),e(ate,Bmo),e(c_,Pmo),e(c_,yP),e(yP,$mo),e(c_,Imo),e(T,qmo),e(T,f_),e(f_,nte),e(nte,Nmo),e(f_,jmo),e(f_,LP),e(LP,Dmo),e(f_,Gmo),e(T,Omo),e(T,m_),e(m_,ste),e(ste,Vmo),e(m_,Xmo),e(m_,xP),e(xP,zmo),e(m_,Qmo),e(T,Wmo),e(T,g_),e(g_,lte),e(lte,Hmo),e(g_,Umo),e(g_,kP),e(kP,Jmo),e(g_,Ymo),e(T,Kmo),e(T,h_),e(h_,ite),e(ite,Zmo),e(h_,ego),e(h_,SP),e(SP,ogo),e(h_,rgo),e(T,tgo),e(T,p_),e(p_,dte),e(dte,ago),e(p_,ngo),e(p_,RP),e(RP,sgo),e(p_,lgo),e(T,igo),e(T,__),e(__,cte),e(cte,dgo),e(__,cgo),e(__,BP),e(BP,fgo),e(__,mgo),e(T,ggo),e(T,u_),e(u_,fte),e(fte,hgo),e(u_,pgo),e(u_,PP),e(PP,_go),e(u_,ugo),e(T,bgo),e(T,b_),e(b_,mte),e(mte,Fgo),e(b_,vgo),e(b_,$P),e($P,Tgo),e(b_,Mgo),e(T,Ego),e(T,F_),e(F_,gte),e(gte,Cgo),e(F_,wgo),e(F_,IP),e(IP,Ago),e(F_,ygo),e(T,Lgo),e(T,v_),e(v_,hte),e(hte,xgo),e(v_,kgo),e(v_,qP),e(qP,Sgo),e(v_,Rgo),e(T,Bgo),e(T,T_),e(T_,pte),e(pte,Pgo),e(T_,$go),e(T_,NP),e(NP,Igo),e(T_,qgo),e(T,Ngo),e(T,M_),e(M_,_te),e(_te,jgo),e(M_,Dgo),e(M_,jP),e(jP,Ggo),e(M_,Ogo),e(T,Vgo),e(T,E_),e(E_,ute),e(ute,Xgo),e(E_,zgo),e(E_,DP),e(DP,Qgo),e(E_,Wgo),e(T,Hgo),e(T,C_),e(C_,bte),e(bte,Ugo),e(C_,Jgo),e(C_,GP),e(GP,Ygo),e(C_,Kgo),e(T,Zgo),e(T,w_),e(w_,Fte),e(Fte,eho),e(w_,oho),e(w_,OP),e(OP,rho),e(w_,tho),e(T,aho),e(T,A_),e(A_,vte),e(vte,nho),e(A_,sho),e(A_,VP),e(VP,lho),e(A_,iho),e(T,dho),e(T,y_),e(y_,Tte),e(Tte,cho),e(y_,fho),e(y_,XP),e(XP,mho),e(y_,gho),e(T,hho),e(T,L_),e(L_,Mte),e(Mte,pho),e(L_,_ho),e(L_,zP),e(zP,uho),e(L_,bho),e(T,Fho),e(T,x_),e(x_,Ete),e(Ete,vho),e(x_,Tho),e(x_,QP),e(QP,Mho),e(x_,Eho),e(T,Cho),e(T,k_),e(k_,Cte),e(Cte,who),e(k_,Aho),e(k_,WP),e(WP,yho),e(k_,Lho),e(T,xho),e(T,S_),e(S_,wte),e(wte,kho),e(S_,Sho),e(S_,HP),e(HP,Rho),e(S_,Bho),e(T,Pho),e(T,R_),e(R_,Ate),e(Ate,$ho),e(R_,Iho),e(R_,UP),e(UP,qho),e(R_,Nho),e(T,jho),e(T,B_),e(B_,yte),e(yte,Dho),e(B_,Gho),e(B_,JP),e(JP,Oho),e(B_,Vho),e(qe,Xho),e(qe,P_),e(P_,zho),e(P_,Lte),e(Lte,Qho),e(P_,Who),e(P_,xte),e(xte,Hho),e(qe,Uho),e(qe,kte),e(kte,Jho),e(qe,Yho),g(fw,qe,null),b(c,NRe,u),b(c,Zi,u),e(Zi,$_),e($_,Ste),g(mw,Ste,null),e(Zi,Kho),e(Zi,Rte),e(Rte,Zho),b(c,jRe,u),b(c,Yo,u),g(gw,Yo,null),e(Yo,epo),e(Yo,ed),e(ed,opo),e(ed,YP),e(YP,rpo),e(ed,tpo),e(ed,KP),e(KP,apo),e(ed,npo),e(Yo,spo),e(Yo,hw),e(hw,lpo),e(hw,Bte),e(Bte,ipo),e(hw,dpo),e(Yo,cpo),e(Yo,zr),g(pw,zr,null),e(zr,fpo),e(zr,Pte),e(Pte,mpo),e(zr,gpo),e(zr,od),e(od,hpo),e(od,$te),e($te,ppo),e(od,_po),e(od,ZP),e(ZP,upo),e(od,bpo),e(zr,Fpo),e(zr,Ite),e(Ite,vpo),e(zr,Tpo),g(_w,zr,null),e(Yo,Mpo),e(Yo,Ne),g(uw,Ne,null),e(Ne,Epo),e(Ne,qte),e(qte,Cpo),e(Ne,wpo),e(Ne,za),e(za,Apo),e(za,Nte),e(Nte,ypo),e(za,Lpo),e(za,jte),e(jte,xpo),e(za,kpo),e(za,Dte),e(Dte,Spo),e(za,Rpo),e(Ne,Bpo),e(Ne,S),e(S,I_),e(I_,Gte),e(Gte,Ppo),e(I_,$po),e(I_,e$),e(e$,Ipo),e(I_,qpo),e(S,Npo),e(S,q_),e(q_,Ote),e(Ote,jpo),e(q_,Dpo),e(q_,o$),e(o$,Gpo),e(q_,Opo),e(S,Vpo),e(S,N_),e(N_,Vte),e(Vte,Xpo),e(N_,zpo),e(N_,r$),e(r$,Qpo),e(N_,Wpo),e(S,Hpo),e(S,j_),e(j_,Xte),e(Xte,Upo),e(j_,Jpo),e(j_,t$),e(t$,Ypo),e(j_,Kpo),e(S,Zpo),e(S,D_),e(D_,zte),e(zte,e_o),e(D_,o_o),e(D_,a$),e(a$,r_o),e(D_,t_o),e(S,a_o),e(S,G_),e(G_,Qte),e(Qte,n_o),e(G_,s_o),e(G_,n$),e(n$,l_o),e(G_,i_o),e(S,d_o),e(S,O_),e(O_,Wte),e(Wte,c_o),e(O_,f_o),e(O_,s$),e(s$,m_o),e(O_,g_o),e(S,h_o),e(S,V_),e(V_,Hte),e(Hte,p_o),e(V_,__o),e(V_,l$),e(l$,u_o),e(V_,b_o),e(S,F_o),e(S,X_),e(X_,Ute),e(Ute,v_o),e(X_,T_o),e(X_,i$),e(i$,M_o),e(X_,E_o),e(S,C_o),e(S,z_),e(z_,Jte),e(Jte,w_o),e(z_,A_o),e(z_,d$),e(d$,y_o),e(z_,L_o),e(S,x_o),e(S,Q_),e(Q_,Yte),e(Yte,k_o),e(Q_,S_o),e(Q_,c$),e(c$,R_o),e(Q_,B_o),e(S,P_o),e(S,W_),e(W_,Kte),e(Kte,$_o),e(W_,I_o),e(W_,f$),e(f$,q_o),e(W_,N_o),e(S,j_o),e(S,H_),e(H_,Zte),e(Zte,D_o),e(H_,G_o),e(H_,m$),e(m$,O_o),e(H_,V_o),e(S,X_o),e(S,U_),e(U_,eae),e(eae,z_o),e(U_,Q_o),e(U_,g$),e(g$,W_o),e(U_,H_o),e(S,U_o),e(S,J_),e(J_,oae),e(oae,J_o),e(J_,Y_o),e(J_,h$),e(h$,K_o),e(J_,Z_o),e(S,euo),e(S,Y_),e(Y_,rae),e(rae,ouo),e(Y_,ruo),e(Y_,p$),e(p$,tuo),e(Y_,auo),e(S,nuo),e(S,K_),e(K_,tae),e(tae,suo),e(K_,luo),e(K_,_$),e(_$,iuo),e(K_,duo),e(S,cuo),e(S,Z_),e(Z_,aae),e(aae,fuo),e(Z_,muo),e(Z_,u$),e(u$,guo),e(Z_,huo),e(S,puo),e(S,eu),e(eu,nae),e(nae,_uo),e(eu,uuo),e(eu,b$),e(b$,buo),e(eu,Fuo),e(S,vuo),e(S,ou),e(ou,sae),e(sae,Tuo),e(ou,Muo),e(ou,F$),e(F$,Euo),e(ou,Cuo),e(S,wuo),e(S,ru),e(ru,lae),e(lae,Auo),e(ru,yuo),e(ru,v$),e(v$,Luo),e(ru,xuo),e(S,kuo),e(S,tu),e(tu,iae),e(iae,Suo),e(tu,Ruo),e(tu,T$),e(T$,Buo),e(tu,Puo),e(S,$uo),e(S,au),e(au,dae),e(dae,Iuo),e(au,quo),e(au,M$),e(M$,Nuo),e(au,juo),e(S,Duo),e(S,nu),e(nu,cae),e(cae,Guo),e(nu,Ouo),e(nu,E$),e(E$,Vuo),e(nu,Xuo),e(S,zuo),e(S,su),e(su,fae),e(fae,Quo),e(su,Wuo),e(su,C$),e(C$,Huo),e(su,Uuo),e(S,Juo),e(S,lu),e(lu,mae),e(mae,Yuo),e(lu,Kuo),e(lu,w$),e(w$,Zuo),e(lu,e1o),e(S,o1o),e(S,iu),e(iu,gae),e(gae,r1o),e(iu,t1o),e(iu,A$),e(A$,a1o),e(iu,n1o),e(S,s1o),e(S,du),e(du,hae),e(hae,l1o),e(du,i1o),e(du,y$),e(y$,d1o),e(du,c1o),e(S,f1o),e(S,cu),e(cu,pae),e(pae,m1o),e(cu,g1o),e(cu,L$),e(L$,h1o),e(cu,p1o),e(S,_1o),e(S,fu),e(fu,_ae),e(_ae,u1o),e(fu,b1o),e(fu,x$),e(x$,F1o),e(fu,v1o),e(S,T1o),e(S,mu),e(mu,uae),e(uae,M1o),e(mu,E1o),e(mu,k$),e(k$,C1o),e(mu,w1o),e(S,A1o),e(S,gu),e(gu,bae),e(bae,y1o),e(gu,L1o),e(gu,S$),e(S$,x1o),e(gu,k1o),e(S,S1o),e(S,hu),e(hu,Fae),e(Fae,R1o),e(hu,B1o),e(hu,R$),e(R$,P1o),e(hu,$1o),e(S,I1o),e(S,pu),e(pu,vae),e(vae,q1o),e(pu,N1o),e(pu,B$),e(B$,j1o),e(pu,D1o),e(S,G1o),e(S,_u),e(_u,Tae),e(Tae,O1o),e(_u,V1o),e(_u,P$),e(P$,X1o),e(_u,z1o),e(S,Q1o),e(S,uu),e(uu,Mae),e(Mae,W1o),e(uu,H1o),e(uu,$$),e($$,U1o),e(uu,J1o),e(S,Y1o),e(S,bu),e(bu,Eae),e(Eae,K1o),e(bu,Z1o),e(bu,I$),e(I$,e4o),e(bu,o4o),e(S,r4o),e(S,Fu),e(Fu,Cae),e(Cae,t4o),e(Fu,a4o),e(Fu,q$),e(q$,n4o),e(Fu,s4o),e(S,l4o),e(S,vu),e(vu,wae),e(wae,i4o),e(vu,d4o),e(vu,N$),e(N$,c4o),e(vu,f4o),e(Ne,m4o),e(Ne,Tu),e(Tu,g4o),e(Tu,Aae),e(Aae,h4o),e(Tu,p4o),e(Tu,yae),e(yae,_4o),e(Ne,u4o),e(Ne,Lae),e(Lae,b4o),e(Ne,F4o),g(bw,Ne,null),b(c,DRe,u),b(c,rd,u),e(rd,Mu),e(Mu,xae),g(Fw,xae,null),e(rd,v4o),e(rd,kae),e(kae,T4o),b(c,GRe,u),b(c,Ko,u),g(vw,Ko,null),e(Ko,M4o),e(Ko,td),e(td,E4o),e(td,j$),e(j$,C4o),e(td,w4o),e(td,D$),e(D$,A4o),e(td,y4o),e(Ko,L4o),e(Ko,Tw),e(Tw,x4o),e(Tw,Sae),e(Sae,k4o),e(Tw,S4o),e(Ko,R4o),e(Ko,Qr),g(Mw,Qr,null),e(Qr,B4o),e(Qr,Rae),e(Rae,P4o),e(Qr,$4o),e(Qr,ad),e(ad,I4o),e(ad,Bae),e(Bae,q4o),e(ad,N4o),e(ad,G$),e(G$,j4o),e(ad,D4o),e(Qr,G4o),e(Qr,Pae),e(Pae,O4o),e(Qr,V4o),g(Ew,Qr,null),e(Ko,X4o),e(Ko,je),g(Cw,je,null),e(je,z4o),e(je,$ae),e($ae,Q4o),e(je,W4o),e(je,Qa),e(Qa,H4o),e(Qa,Iae),e(Iae,U4o),e(Qa,J4o),e(Qa,qae),e(qae,Y4o),e(Qa,K4o),e(Qa,Nae),e(Nae,Z4o),e(Qa,ebo),e(je,obo),e(je,$),e($,Eu),e(Eu,jae),e(jae,rbo),e(Eu,tbo),e(Eu,O$),e(O$,abo),e(Eu,nbo),e($,sbo),e($,Cu),e(Cu,Dae),e(Dae,lbo),e(Cu,ibo),e(Cu,V$),e(V$,dbo),e(Cu,cbo),e($,fbo),e($,wu),e(wu,Gae),e(Gae,mbo),e(wu,gbo),e(wu,X$),e(X$,hbo),e(wu,pbo),e($,_bo),e($,Au),e(Au,Oae),e(Oae,ubo),e(Au,bbo),e(Au,z$),e(z$,Fbo),e(Au,vbo),e($,Tbo),e($,yu),e(yu,Vae),e(Vae,Mbo),e(yu,Ebo),e(yu,Q$),e(Q$,Cbo),e(yu,wbo),e($,Abo),e($,Lu),e(Lu,Xae),e(Xae,ybo),e(Lu,Lbo),e(Lu,W$),e(W$,xbo),e(Lu,kbo),e($,Sbo),e($,xu),e(xu,zae),e(zae,Rbo),e(xu,Bbo),e(xu,H$),e(H$,Pbo),e(xu,$bo),e($,Ibo),e($,ku),e(ku,Qae),e(Qae,qbo),e(ku,Nbo),e(ku,U$),e(U$,jbo),e(ku,Dbo),e($,Gbo),e($,Su),e(Su,Wae),e(Wae,Obo),e(Su,Vbo),e(Su,J$),e(J$,Xbo),e(Su,zbo),e($,Qbo),e($,Ru),e(Ru,Hae),e(Hae,Wbo),e(Ru,Hbo),e(Ru,Y$),e(Y$,Ubo),e(Ru,Jbo),e($,Ybo),e($,Bu),e(Bu,Uae),e(Uae,Kbo),e(Bu,Zbo),e(Bu,K$),e(K$,e5o),e(Bu,o5o),e($,r5o),e($,Pu),e(Pu,Jae),e(Jae,t5o),e(Pu,a5o),e(Pu,Z$),e(Z$,n5o),e(Pu,s5o),e($,l5o),e($,$u),e($u,Yae),e(Yae,i5o),e($u,d5o),e($u,eI),e(eI,c5o),e($u,f5o),e($,m5o),e($,Iu),e(Iu,Kae),e(Kae,g5o),e(Iu,h5o),e(Iu,oI),e(oI,p5o),e(Iu,_5o),e($,u5o),e($,qu),e(qu,Zae),e(Zae,b5o),e(qu,F5o),e(qu,rI),e(rI,v5o),e(qu,T5o),e($,M5o),e($,Nu),e(Nu,ene),e(ene,E5o),e(Nu,C5o),e(Nu,tI),e(tI,w5o),e(Nu,A5o),e($,y5o),e($,ju),e(ju,one),e(one,L5o),e(ju,x5o),e(ju,aI),e(aI,k5o),e(ju,S5o),e($,R5o),e($,Du),e(Du,rne),e(rne,B5o),e(Du,P5o),e(Du,nI),e(nI,$5o),e(Du,I5o),e($,q5o),e($,Gu),e(Gu,tne),e(tne,N5o),e(Gu,j5o),e(Gu,sI),e(sI,D5o),e(Gu,G5o),e($,O5o),e($,Ou),e(Ou,ane),e(ane,V5o),e(Ou,X5o),e(Ou,lI),e(lI,z5o),e(Ou,Q5o),e($,W5o),e($,Vu),e(Vu,nne),e(nne,H5o),e(Vu,U5o),e(Vu,iI),e(iI,J5o),e(Vu,Y5o),e($,K5o),e($,Xu),e(Xu,sne),e(sne,Z5o),e(Xu,e3o),e(Xu,dI),e(dI,o3o),e(Xu,r3o),e($,t3o),e($,zu),e(zu,lne),e(lne,a3o),e(zu,n3o),e(zu,cI),e(cI,s3o),e(zu,l3o),e($,i3o),e($,Qu),e(Qu,ine),e(ine,d3o),e(Qu,c3o),e(Qu,fI),e(fI,f3o),e(Qu,m3o),e($,g3o),e($,Wu),e(Wu,dne),e(dne,h3o),e(Wu,p3o),e(Wu,mI),e(mI,_3o),e(Wu,u3o),e($,b3o),e($,Hu),e(Hu,cne),e(cne,F3o),e(Hu,v3o),e(Hu,gI),e(gI,T3o),e(Hu,M3o),e($,E3o),e($,Uu),e(Uu,fne),e(fne,C3o),e(Uu,w3o),e(Uu,hI),e(hI,A3o),e(Uu,y3o),e($,L3o),e($,Ju),e(Ju,mne),e(mne,x3o),e(Ju,k3o),e(Ju,pI),e(pI,S3o),e(Ju,R3o),e($,B3o),e($,Yu),e(Yu,gne),e(gne,P3o),e(Yu,$3o),e(Yu,_I),e(_I,I3o),e(Yu,q3o),e($,N3o),e($,Ku),e(Ku,hne),e(hne,j3o),e(Ku,D3o),e(Ku,uI),e(uI,G3o),e(Ku,O3o),e($,V3o),e($,Zu),e(Zu,pne),e(pne,X3o),e(Zu,z3o),e(Zu,bI),e(bI,Q3o),e(Zu,W3o),e($,H3o),e($,e1),e(e1,_ne),e(_ne,U3o),e(e1,J3o),e(e1,FI),e(FI,Y3o),e(e1,K3o),e($,Z3o),e($,o1),e(o1,une),e(une,e2o),e(o1,o2o),e(o1,vI),e(vI,r2o),e(o1,t2o),e($,a2o),e($,r1),e(r1,bne),e(bne,n2o),e(r1,s2o),e(r1,TI),e(TI,l2o),e(r1,i2o),e($,d2o),e($,t1),e(t1,Fne),e(Fne,c2o),e(t1,f2o),e(t1,MI),e(MI,m2o),e(t1,g2o),e(je,h2o),e(je,a1),e(a1,p2o),e(a1,vne),e(vne,_2o),e(a1,u2o),e(a1,Tne),e(Tne,b2o),e(je,F2o),e(je,Mne),e(Mne,v2o),e(je,T2o),g(ww,je,null),b(c,ORe,u),b(c,nd,u),e(nd,n1),e(n1,Ene),g(Aw,Ene,null),e(nd,M2o),e(nd,Cne),e(Cne,E2o),b(c,VRe,u),b(c,Zo,u),g(yw,Zo,null),e(Zo,C2o),e(Zo,sd),e(sd,w2o),e(sd,EI),e(EI,A2o),e(sd,y2o),e(sd,CI),e(CI,L2o),e(sd,x2o),e(Zo,k2o),e(Zo,Lw),e(Lw,S2o),e(Lw,wne),e(wne,R2o),e(Lw,B2o),e(Zo,P2o),e(Zo,Wr),g(xw,Wr,null),e(Wr,$2o),e(Wr,Ane),e(Ane,I2o),e(Wr,q2o),e(Wr,ld),e(ld,N2o),e(ld,yne),e(yne,j2o),e(ld,D2o),e(ld,wI),e(wI,G2o),e(ld,O2o),e(Wr,V2o),e(Wr,Lne),e(Lne,X2o),e(Wr,z2o),g(kw,Wr,null),e(Zo,Q2o),e(Zo,De),g(Sw,De,null),e(De,W2o),e(De,xne),e(xne,H2o),e(De,U2o),e(De,Wa),e(Wa,J2o),e(Wa,kne),e(kne,Y2o),e(Wa,K2o),e(Wa,Sne),e(Sne,Z2o),e(Wa,eFo),e(Wa,Rne),e(Rne,oFo),e(Wa,rFo),e(De,tFo),e(De,I),e(I,s1),e(s1,Bne),e(Bne,aFo),e(s1,nFo),e(s1,AI),e(AI,sFo),e(s1,lFo),e(I,iFo),e(I,l1),e(l1,Pne),e(Pne,dFo),e(l1,cFo),e(l1,yI),e(yI,fFo),e(l1,mFo),e(I,gFo),e(I,i1),e(i1,$ne),e($ne,hFo),e(i1,pFo),e(i1,LI),e(LI,_Fo),e(i1,uFo),e(I,bFo),e(I,d1),e(d1,Ine),e(Ine,FFo),e(d1,vFo),e(d1,xI),e(xI,TFo),e(d1,MFo),e(I,EFo),e(I,c1),e(c1,qne),e(qne,CFo),e(c1,wFo),e(c1,kI),e(kI,AFo),e(c1,yFo),e(I,LFo),e(I,f1),e(f1,Nne),e(Nne,xFo),e(f1,kFo),e(f1,SI),e(SI,SFo),e(f1,RFo),e(I,BFo),e(I,m1),e(m1,jne),e(jne,PFo),e(m1,$Fo),e(m1,RI),e(RI,IFo),e(m1,qFo),e(I,NFo),e(I,g1),e(g1,Dne),e(Dne,jFo),e(g1,DFo),e(g1,BI),e(BI,GFo),e(g1,OFo),e(I,VFo),e(I,h1),e(h1,Gne),e(Gne,XFo),e(h1,zFo),e(h1,PI),e(PI,QFo),e(h1,WFo),e(I,HFo),e(I,p1),e(p1,One),e(One,UFo),e(p1,JFo),e(p1,$I),e($I,YFo),e(p1,KFo),e(I,ZFo),e(I,_1),e(_1,Vne),e(Vne,evo),e(_1,ovo),e(_1,II),e(II,rvo),e(_1,tvo),e(I,avo),e(I,u1),e(u1,Xne),e(Xne,nvo),e(u1,svo),e(u1,qI),e(qI,lvo),e(u1,ivo),e(I,dvo),e(I,b1),e(b1,zne),e(zne,cvo),e(b1,fvo),e(b1,NI),e(NI,mvo),e(b1,gvo),e(I,hvo),e(I,F1),e(F1,Qne),e(Qne,pvo),e(F1,_vo),e(F1,jI),e(jI,uvo),e(F1,bvo),e(I,Fvo),e(I,v1),e(v1,Wne),e(Wne,vvo),e(v1,Tvo),e(v1,DI),e(DI,Mvo),e(v1,Evo),e(I,Cvo),e(I,T1),e(T1,Hne),e(Hne,wvo),e(T1,Avo),e(T1,GI),e(GI,yvo),e(T1,Lvo),e(I,xvo),e(I,M1),e(M1,Une),e(Une,kvo),e(M1,Svo),e(M1,OI),e(OI,Rvo),e(M1,Bvo),e(I,Pvo),e(I,E1),e(E1,Jne),e(Jne,$vo),e(E1,Ivo),e(E1,VI),e(VI,qvo),e(E1,Nvo),e(I,jvo),e(I,C1),e(C1,Yne),e(Yne,Dvo),e(C1,Gvo),e(C1,XI),e(XI,Ovo),e(C1,Vvo),e(I,Xvo),e(I,w1),e(w1,Kne),e(Kne,zvo),e(w1,Qvo),e(w1,zI),e(zI,Wvo),e(w1,Hvo),e(I,Uvo),e(I,A1),e(A1,Zne),e(Zne,Jvo),e(A1,Yvo),e(A1,QI),e(QI,Kvo),e(A1,Zvo),e(I,e6o),e(I,y1),e(y1,ese),e(ese,o6o),e(y1,r6o),e(y1,WI),e(WI,t6o),e(y1,a6o),e(I,n6o),e(I,L1),e(L1,ose),e(ose,s6o),e(L1,l6o),e(L1,HI),e(HI,i6o),e(L1,d6o),e(I,c6o),e(I,x1),e(x1,rse),e(rse,f6o),e(x1,m6o),e(x1,UI),e(UI,g6o),e(x1,h6o),e(I,p6o),e(I,k1),e(k1,tse),e(tse,_6o),e(k1,u6o),e(k1,JI),e(JI,b6o),e(k1,F6o),e(I,v6o),e(I,S1),e(S1,ase),e(ase,T6o),e(S1,M6o),e(S1,YI),e(YI,E6o),e(S1,C6o),e(I,w6o),e(I,R1),e(R1,nse),e(nse,A6o),e(R1,y6o),e(R1,KI),e(KI,L6o),e(R1,x6o),e(I,k6o),e(I,B1),e(B1,sse),e(sse,S6o),e(B1,R6o),e(B1,ZI),e(ZI,B6o),e(B1,P6o),e(I,$6o),e(I,P1),e(P1,lse),e(lse,I6o),e(P1,q6o),e(P1,eq),e(eq,N6o),e(P1,j6o),e(I,D6o),e(I,$1),e($1,ise),e(ise,G6o),e($1,O6o),e($1,oq),e(oq,V6o),e($1,X6o),e(I,z6o),e(I,I1),e(I1,dse),e(dse,Q6o),e(I1,W6o),e(I1,cse),e(cse,H6o),e(I1,U6o),e(I,J6o),e(I,q1),e(q1,fse),e(fse,Y6o),e(q1,K6o),e(q1,rq),e(rq,Z6o),e(q1,eTo),e(I,oTo),e(I,N1),e(N1,mse),e(mse,rTo),e(N1,tTo),e(N1,tq),e(tq,aTo),e(N1,nTo),e(I,sTo),e(I,j1),e(j1,gse),e(gse,lTo),e(j1,iTo),e(j1,aq),e(aq,dTo),e(j1,cTo),e(I,fTo),e(I,D1),e(D1,hse),e(hse,mTo),e(D1,gTo),e(D1,nq),e(nq,hTo),e(D1,pTo),e(De,_To),e(De,G1),e(G1,uTo),e(G1,pse),e(pse,bTo),e(G1,FTo),e(G1,_se),e(_se,vTo),e(De,TTo),e(De,use),e(use,MTo),e(De,ETo),g(Rw,De,null),b(c,XRe,u),b(c,id,u),e(id,O1),e(O1,bse),g(Bw,bse,null),e(id,CTo),e(id,Fse),e(Fse,wTo),b(c,zRe,u),b(c,er,u),g(Pw,er,null),e(er,ATo),e(er,dd),e(dd,yTo),e(dd,sq),e(sq,LTo),e(dd,xTo),e(dd,lq),e(lq,kTo),e(dd,STo),e(er,RTo),e(er,$w),e($w,BTo),e($w,vse),e(vse,PTo),e($w,$To),e(er,ITo),e(er,Hr),g(Iw,Hr,null),e(Hr,qTo),e(Hr,Tse),e(Tse,NTo),e(Hr,jTo),e(Hr,cd),e(cd,DTo),e(cd,Mse),e(Mse,GTo),e(cd,OTo),e(cd,iq),e(iq,VTo),e(cd,XTo),e(Hr,zTo),e(Hr,Ese),e(Ese,QTo),e(Hr,WTo),g(qw,Hr,null),e(er,HTo),e(er,Ge),g(Nw,Ge,null),e(Ge,UTo),e(Ge,Cse),e(Cse,JTo),e(Ge,YTo),e(Ge,Ha),e(Ha,KTo),e(Ha,wse),e(wse,ZTo),e(Ha,eMo),e(Ha,Ase),e(Ase,oMo),e(Ha,rMo),e(Ha,yse),e(yse,tMo),e(Ha,aMo),e(Ge,nMo),e(Ge,ne),e(ne,V1),e(V1,Lse),e(Lse,sMo),e(V1,lMo),e(V1,dq),e(dq,iMo),e(V1,dMo),e(ne,cMo),e(ne,X1),e(X1,xse),e(xse,fMo),e(X1,mMo),e(X1,cq),e(cq,gMo),e(X1,hMo),e(ne,pMo),e(ne,z1),e(z1,kse),e(kse,_Mo),e(z1,uMo),e(z1,fq),e(fq,bMo),e(z1,FMo),e(ne,vMo),e(ne,Q1),e(Q1,Sse),e(Sse,TMo),e(Q1,MMo),e(Q1,mq),e(mq,EMo),e(Q1,CMo),e(ne,wMo),e(ne,W1),e(W1,Rse),e(Rse,AMo),e(W1,yMo),e(W1,gq),e(gq,LMo),e(W1,xMo),e(ne,kMo),e(ne,H1),e(H1,Bse),e(Bse,SMo),e(H1,RMo),e(H1,hq),e(hq,BMo),e(H1,PMo),e(ne,$Mo),e(ne,U1),e(U1,Pse),e(Pse,IMo),e(U1,qMo),e(U1,pq),e(pq,NMo),e(U1,jMo),e(ne,DMo),e(ne,J1),e(J1,$se),e($se,GMo),e(J1,OMo),e(J1,_q),e(_q,VMo),e(J1,XMo),e(ne,zMo),e(ne,Y1),e(Y1,Ise),e(Ise,QMo),e(Y1,WMo),e(Y1,uq),e(uq,HMo),e(Y1,UMo),e(ne,JMo),e(ne,K1),e(K1,qse),e(qse,YMo),e(K1,KMo),e(K1,bq),e(bq,ZMo),e(K1,eEo),e(ne,oEo),e(ne,Z1),e(Z1,Nse),e(Nse,rEo),e(Z1,tEo),e(Z1,Fq),e(Fq,aEo),e(Z1,nEo),e(ne,sEo),e(ne,e4),e(e4,jse),e(jse,lEo),e(e4,iEo),e(e4,vq),e(vq,dEo),e(e4,cEo),e(ne,fEo),e(ne,o4),e(o4,Dse),e(Dse,mEo),e(o4,gEo),e(o4,Tq),e(Tq,hEo),e(o4,pEo),e(ne,_Eo),e(ne,r4),e(r4,Gse),e(Gse,uEo),e(r4,bEo),e(r4,Mq),e(Mq,FEo),e(r4,vEo),e(ne,TEo),e(ne,t4),e(t4,Ose),e(Ose,MEo),e(t4,EEo),e(t4,Eq),e(Eq,CEo),e(t4,wEo),e(ne,AEo),e(ne,a4),e(a4,Vse),e(Vse,yEo),e(a4,LEo),e(a4,Cq),e(Cq,xEo),e(a4,kEo),e(ne,SEo),e(ne,n4),e(n4,Xse),e(Xse,REo),e(n4,BEo),e(n4,wq),e(wq,PEo),e(n4,$Eo),e(Ge,IEo),e(Ge,s4),e(s4,qEo),e(s4,zse),e(zse,NEo),e(s4,jEo),e(s4,Qse),e(Qse,DEo),e(Ge,GEo),e(Ge,Wse),e(Wse,OEo),e(Ge,VEo),g(jw,Ge,null),b(c,QRe,u),b(c,fd,u),e(fd,l4),e(l4,Hse),g(Dw,Hse,null),e(fd,XEo),e(fd,Use),e(Use,zEo),b(c,WRe,u),b(c,or,u),g(Gw,or,null),e(or,QEo),e(or,md),e(md,WEo),e(md,Aq),e(Aq,HEo),e(md,UEo),e(md,yq),e(yq,JEo),e(md,YEo),e(or,KEo),e(or,Ow),e(Ow,ZEo),e(Ow,Jse),e(Jse,eCo),e(Ow,oCo),e(or,rCo),e(or,Ur),g(Vw,Ur,null),e(Ur,tCo),e(Ur,Yse),e(Yse,aCo),e(Ur,nCo),e(Ur,gd),e(gd,sCo),e(gd,Kse),e(Kse,lCo),e(gd,iCo),e(gd,Lq),e(Lq,dCo),e(gd,cCo),e(Ur,fCo),e(Ur,Zse),e(Zse,mCo),e(Ur,gCo),g(Xw,Ur,null),e(or,hCo),e(or,Oe),g(zw,Oe,null),e(Oe,pCo),e(Oe,ele),e(ele,_Co),e(Oe,uCo),e(Oe,Ua),e(Ua,bCo),e(Ua,ole),e(ole,FCo),e(Ua,vCo),e(Ua,rle),e(rle,TCo),e(Ua,MCo),e(Ua,tle),e(tle,ECo),e(Ua,CCo),e(Oe,wCo),e(Oe,y),e(y,i4),e(i4,ale),e(ale,ACo),e(i4,yCo),e(i4,xq),e(xq,LCo),e(i4,xCo),e(y,kCo),e(y,d4),e(d4,nle),e(nle,SCo),e(d4,RCo),e(d4,kq),e(kq,BCo),e(d4,PCo),e(y,$Co),e(y,c4),e(c4,sle),e(sle,ICo),e(c4,qCo),e(c4,Sq),e(Sq,NCo),e(c4,jCo),e(y,DCo),e(y,f4),e(f4,lle),e(lle,GCo),e(f4,OCo),e(f4,Rq),e(Rq,VCo),e(f4,XCo),e(y,zCo),e(y,m4),e(m4,ile),e(ile,QCo),e(m4,WCo),e(m4,Bq),e(Bq,HCo),e(m4,UCo),e(y,JCo),e(y,g4),e(g4,dle),e(dle,YCo),e(g4,KCo),e(g4,Pq),e(Pq,ZCo),e(g4,ewo),e(y,owo),e(y,h4),e(h4,cle),e(cle,rwo),e(h4,two),e(h4,$q),e($q,awo),e(h4,nwo),e(y,swo),e(y,p4),e(p4,fle),e(fle,lwo),e(p4,iwo),e(p4,Iq),e(Iq,dwo),e(p4,cwo),e(y,fwo),e(y,_4),e(_4,mle),e(mle,mwo),e(_4,gwo),e(_4,qq),e(qq,hwo),e(_4,pwo),e(y,_wo),e(y,u4),e(u4,gle),e(gle,uwo),e(u4,bwo),e(u4,Nq),e(Nq,Fwo),e(u4,vwo),e(y,Two),e(y,b4),e(b4,hle),e(hle,Mwo),e(b4,Ewo),e(b4,jq),e(jq,Cwo),e(b4,wwo),e(y,Awo),e(y,F4),e(F4,ple),e(ple,ywo),e(F4,Lwo),e(F4,Dq),e(Dq,xwo),e(F4,kwo),e(y,Swo),e(y,v4),e(v4,_le),e(_le,Rwo),e(v4,Bwo),e(v4,Gq),e(Gq,Pwo),e(v4,$wo),e(y,Iwo),e(y,T4),e(T4,ule),e(ule,qwo),e(T4,Nwo),e(T4,Oq),e(Oq,jwo),e(T4,Dwo),e(y,Gwo),e(y,M4),e(M4,ble),e(ble,Owo),e(M4,Vwo),e(M4,Vq),e(Vq,Xwo),e(M4,zwo),e(y,Qwo),e(y,E4),e(E4,Fle),e(Fle,Wwo),e(E4,Hwo),e(E4,Xq),e(Xq,Uwo),e(E4,Jwo),e(y,Ywo),e(y,C4),e(C4,vle),e(vle,Kwo),e(C4,Zwo),e(C4,zq),e(zq,eAo),e(C4,oAo),e(y,rAo),e(y,w4),e(w4,Tle),e(Tle,tAo),e(w4,aAo),e(w4,Qq),e(Qq,nAo),e(w4,sAo),e(y,lAo),e(y,A4),e(A4,Mle),e(Mle,iAo),e(A4,dAo),e(A4,Wq),e(Wq,cAo),e(A4,fAo),e(y,mAo),e(y,y4),e(y4,Ele),e(Ele,gAo),e(y4,hAo),e(y4,Hq),e(Hq,pAo),e(y4,_Ao),e(y,uAo),e(y,L4),e(L4,Cle),e(Cle,bAo),e(L4,FAo),e(L4,Uq),e(Uq,vAo),e(L4,TAo),e(y,MAo),e(y,x4),e(x4,wle),e(wle,EAo),e(x4,CAo),e(x4,Jq),e(Jq,wAo),e(x4,AAo),e(y,yAo),e(y,k4),e(k4,Ale),e(Ale,LAo),e(k4,xAo),e(k4,Yq),e(Yq,kAo),e(k4,SAo),e(y,RAo),e(y,S4),e(S4,yle),e(yle,BAo),e(S4,PAo),e(S4,Kq),e(Kq,$Ao),e(S4,IAo),e(y,qAo),e(y,R4),e(R4,Lle),e(Lle,NAo),e(R4,jAo),e(R4,Zq),e(Zq,DAo),e(R4,GAo),e(y,OAo),e(y,B4),e(B4,xle),e(xle,VAo),e(B4,XAo),e(B4,eN),e(eN,zAo),e(B4,QAo),e(y,WAo),e(y,P4),e(P4,kle),e(kle,HAo),e(P4,UAo),e(P4,oN),e(oN,JAo),e(P4,YAo),e(y,KAo),e(y,$4),e($4,Sle),e(Sle,ZAo),e($4,e0o),e($4,rN),e(rN,o0o),e($4,r0o),e(y,t0o),e(y,I4),e(I4,Rle),e(Rle,a0o),e(I4,n0o),e(I4,tN),e(tN,s0o),e(I4,l0o),e(y,i0o),e(y,q4),e(q4,Ble),e(Ble,d0o),e(q4,c0o),e(q4,aN),e(aN,f0o),e(q4,m0o),e(y,g0o),e(y,N4),e(N4,Ple),e(Ple,h0o),e(N4,p0o),e(N4,nN),e(nN,_0o),e(N4,u0o),e(y,b0o),e(y,j4),e(j4,$le),e($le,F0o),e(j4,v0o),e(j4,sN),e(sN,T0o),e(j4,M0o),e(y,E0o),e(y,D4),e(D4,Ile),e(Ile,C0o),e(D4,w0o),e(D4,lN),e(lN,A0o),e(D4,y0o),e(y,L0o),e(y,G4),e(G4,qle),e(qle,x0o),e(G4,k0o),e(G4,iN),e(iN,S0o),e(G4,R0o),e(y,B0o),e(y,O4),e(O4,Nle),e(Nle,P0o),e(O4,$0o),e(O4,dN),e(dN,I0o),e(O4,q0o),e(y,N0o),e(y,V4),e(V4,jle),e(jle,j0o),e(V4,D0o),e(V4,cN),e(cN,G0o),e(V4,O0o),e(y,V0o),e(y,X4),e(X4,Dle),e(Dle,X0o),e(X4,z0o),e(X4,fN),e(fN,Q0o),e(X4,W0o),e(y,H0o),e(y,z4),e(z4,Gle),e(Gle,U0o),e(z4,J0o),e(z4,mN),e(mN,Y0o),e(z4,K0o),e(y,Z0o),e(y,Q4),e(Q4,Ole),e(Ole,eyo),e(Q4,oyo),e(Q4,gN),e(gN,ryo),e(Q4,tyo),e(y,ayo),e(y,W4),e(W4,Vle),e(Vle,nyo),e(W4,syo),e(W4,hN),e(hN,lyo),e(W4,iyo),e(y,dyo),e(y,H4),e(H4,Xle),e(Xle,cyo),e(H4,fyo),e(H4,pN),e(pN,myo),e(H4,gyo),e(y,hyo),e(y,U4),e(U4,zle),e(zle,pyo),e(U4,_yo),e(U4,_N),e(_N,uyo),e(U4,byo),e(y,Fyo),e(y,J4),e(J4,Qle),e(Qle,vyo),e(J4,Tyo),e(J4,uN),e(uN,Myo),e(J4,Eyo),e(y,Cyo),e(y,Y4),e(Y4,Wle),e(Wle,wyo),e(Y4,Ayo),e(Y4,bN),e(bN,yyo),e(Y4,Lyo),e(y,xyo),e(y,K4),e(K4,Hle),e(Hle,kyo),e(K4,Syo),e(K4,FN),e(FN,Ryo),e(K4,Byo),e(y,Pyo),e(y,Z4),e(Z4,Ule),e(Ule,$yo),e(Z4,Iyo),e(Z4,vN),e(vN,qyo),e(Z4,Nyo),e(y,jyo),e(y,eb),e(eb,Jle),e(Jle,Dyo),e(eb,Gyo),e(eb,TN),e(TN,Oyo),e(eb,Vyo),e(Oe,Xyo),e(Oe,ob),e(ob,zyo),e(ob,Yle),e(Yle,Qyo),e(ob,Wyo),e(ob,Kle),e(Kle,Hyo),e(Oe,Uyo),e(Oe,Zle),e(Zle,Jyo),e(Oe,Yyo),g(Qw,Oe,null),b(c,HRe,u),b(c,hd,u),e(hd,rb),e(rb,eie),g(Ww,eie,null),e(hd,Kyo),e(hd,oie),e(oie,Zyo),b(c,URe,u),b(c,rr,u),g(Hw,rr,null),e(rr,eLo),e(rr,pd),e(pd,oLo),e(pd,MN),e(MN,rLo),e(pd,tLo),e(pd,EN),e(EN,aLo),e(pd,nLo),e(rr,sLo),e(rr,Uw),e(Uw,lLo),e(Uw,rie),e(rie,iLo),e(Uw,dLo),e(rr,cLo),e(rr,Jr),g(Jw,Jr,null),e(Jr,fLo),e(Jr,tie),e(tie,mLo),e(Jr,gLo),e(Jr,_d),e(_d,hLo),e(_d,aie),e(aie,pLo),e(_d,_Lo),e(_d,CN),e(CN,uLo),e(_d,bLo),e(Jr,FLo),e(Jr,nie),e(nie,vLo),e(Jr,TLo),g(Yw,Jr,null),e(rr,MLo),e(rr,Ve),g(Kw,Ve,null),e(Ve,ELo),e(Ve,sie),e(sie,CLo),e(Ve,wLo),e(Ve,Ja),e(Ja,ALo),e(Ja,lie),e(lie,yLo),e(Ja,LLo),e(Ja,iie),e(iie,xLo),e(Ja,kLo),e(Ja,die),e(die,SLo),e(Ja,RLo),e(Ve,BLo),e(Ve,G),e(G,tb),e(tb,cie),e(cie,PLo),e(tb,$Lo),e(tb,wN),e(wN,ILo),e(tb,qLo),e(G,NLo),e(G,ab),e(ab,fie),e(fie,jLo),e(ab,DLo),e(ab,AN),e(AN,GLo),e(ab,OLo),e(G,VLo),e(G,nb),e(nb,mie),e(mie,XLo),e(nb,zLo),e(nb,yN),e(yN,QLo),e(nb,WLo),e(G,HLo),e(G,sb),e(sb,gie),e(gie,ULo),e(sb,JLo),e(sb,LN),e(LN,YLo),e(sb,KLo),e(G,ZLo),e(G,lb),e(lb,hie),e(hie,e8o),e(lb,o8o),e(lb,xN),e(xN,r8o),e(lb,t8o),e(G,a8o),e(G,ib),e(ib,pie),e(pie,n8o),e(ib,s8o),e(ib,kN),e(kN,l8o),e(ib,i8o),e(G,d8o),e(G,db),e(db,_ie),e(_ie,c8o),e(db,f8o),e(db,SN),e(SN,m8o),e(db,g8o),e(G,h8o),e(G,cb),e(cb,uie),e(uie,p8o),e(cb,_8o),e(cb,RN),e(RN,u8o),e(cb,b8o),e(G,F8o),e(G,fb),e(fb,bie),e(bie,v8o),e(fb,T8o),e(fb,BN),e(BN,M8o),e(fb,E8o),e(G,C8o),e(G,mb),e(mb,Fie),e(Fie,w8o),e(mb,A8o),e(mb,PN),e(PN,y8o),e(mb,L8o),e(G,x8o),e(G,gb),e(gb,vie),e(vie,k8o),e(gb,S8o),e(gb,$N),e($N,R8o),e(gb,B8o),e(G,P8o),e(G,hb),e(hb,Tie),e(Tie,$8o),e(hb,I8o),e(hb,IN),e(IN,q8o),e(hb,N8o),e(G,j8o),e(G,pb),e(pb,Mie),e(Mie,D8o),e(pb,G8o),e(pb,qN),e(qN,O8o),e(pb,V8o),e(G,X8o),e(G,_b),e(_b,Eie),e(Eie,z8o),e(_b,Q8o),e(_b,NN),e(NN,W8o),e(_b,H8o),e(G,U8o),e(G,ub),e(ub,Cie),e(Cie,J8o),e(ub,Y8o),e(ub,jN),e(jN,K8o),e(ub,Z8o),e(G,e7o),e(G,bb),e(bb,wie),e(wie,o7o),e(bb,r7o),e(bb,DN),e(DN,t7o),e(bb,a7o),e(G,n7o),e(G,Fb),e(Fb,Aie),e(Aie,s7o),e(Fb,l7o),e(Fb,GN),e(GN,i7o),e(Fb,d7o),e(G,c7o),e(G,vb),e(vb,yie),e(yie,f7o),e(vb,m7o),e(vb,ON),e(ON,g7o),e(vb,h7o),e(G,p7o),e(G,Tb),e(Tb,Lie),e(Lie,_7o),e(Tb,u7o),e(Tb,VN),e(VN,b7o),e(Tb,F7o),e(G,v7o),e(G,Mb),e(Mb,xie),e(xie,T7o),e(Mb,M7o),e(Mb,XN),e(XN,E7o),e(Mb,C7o),e(G,w7o),e(G,Eb),e(Eb,kie),e(kie,A7o),e(Eb,y7o),e(Eb,zN),e(zN,L7o),e(Eb,x7o),e(G,k7o),e(G,Cb),e(Cb,Sie),e(Sie,S7o),e(Cb,R7o),e(Cb,QN),e(QN,B7o),e(Cb,P7o),e(G,$7o),e(G,wb),e(wb,Rie),e(Rie,I7o),e(wb,q7o),e(wb,WN),e(WN,N7o),e(wb,j7o),e(G,D7o),e(G,Ab),e(Ab,Bie),e(Bie,G7o),e(Ab,O7o),e(Ab,HN),e(HN,V7o),e(Ab,X7o),e(G,z7o),e(G,yb),e(yb,Pie),e(Pie,Q7o),e(yb,W7o),e(yb,UN),e(UN,H7o),e(yb,U7o),e(G,J7o),e(G,Lb),e(Lb,$ie),e($ie,Y7o),e(Lb,K7o),e(Lb,JN),e(JN,Z7o),e(Lb,e9o),e(G,o9o),e(G,xb),e(xb,Iie),e(Iie,r9o),e(xb,t9o),e(xb,YN),e(YN,a9o),e(xb,n9o),e(G,s9o),e(G,kb),e(kb,qie),e(qie,l9o),e(kb,i9o),e(kb,KN),e(KN,d9o),e(kb,c9o),e(Ve,f9o),e(Ve,Sb),e(Sb,m9o),e(Sb,Nie),e(Nie,g9o),e(Sb,h9o),e(Sb,jie),e(jie,p9o),e(Ve,_9o),e(Ve,Die),e(Die,u9o),e(Ve,b9o),g(Zw,Ve,null),b(c,JRe,u),b(c,ud,u),e(ud,Rb),e(Rb,Gie),g(eA,Gie,null),e(ud,F9o),e(ud,Oie),e(Oie,v9o),b(c,YRe,u),b(c,tr,u),g(oA,tr,null),e(tr,T9o),e(tr,bd),e(bd,M9o),e(bd,ZN),e(ZN,E9o),e(bd,C9o),e(bd,ej),e(ej,w9o),e(bd,A9o),e(tr,y9o),e(tr,rA),e(rA,L9o),e(rA,Vie),e(Vie,x9o),e(rA,k9o),e(tr,S9o),e(tr,Yr),g(tA,Yr,null),e(Yr,R9o),e(Yr,Xie),e(Xie,B9o),e(Yr,P9o),e(Yr,Fd),e(Fd,$9o),e(Fd,zie),e(zie,I9o),e(Fd,q9o),e(Fd,oj),e(oj,N9o),e(Fd,j9o),e(Yr,D9o),e(Yr,Qie),e(Qie,G9o),e(Yr,O9o),g(aA,Yr,null),e(tr,V9o),e(tr,Xe),g(nA,Xe,null),e(Xe,X9o),e(Xe,Wie),e(Wie,z9o),e(Xe,Q9o),e(Xe,Ya),e(Ya,W9o),e(Ya,Hie),e(Hie,H9o),e(Ya,U9o),e(Ya,Uie),e(Uie,J9o),e(Ya,Y9o),e(Ya,Jie),e(Jie,K9o),e(Ya,Z9o),e(Xe,exo),e(Xe,da),e(da,Bb),e(Bb,Yie),e(Yie,oxo),e(Bb,rxo),e(Bb,rj),e(rj,txo),e(Bb,axo),e(da,nxo),e(da,Pb),e(Pb,Kie),e(Kie,sxo),e(Pb,lxo),e(Pb,tj),e(tj,ixo),e(Pb,dxo),e(da,cxo),e(da,$b),e($b,Zie),e(Zie,fxo),e($b,mxo),e($b,aj),e(aj,gxo),e($b,hxo),e(da,pxo),e(da,Ib),e(Ib,ede),e(ede,_xo),e(Ib,uxo),e(Ib,nj),e(nj,bxo),e(Ib,Fxo),e(da,vxo),e(da,qb),e(qb,ode),e(ode,Txo),e(qb,Mxo),e(qb,sj),e(sj,Exo),e(qb,Cxo),e(Xe,wxo),e(Xe,Nb),e(Nb,Axo),e(Nb,rde),e(rde,yxo),e(Nb,Lxo),e(Nb,tde),e(tde,xxo),e(Xe,kxo),e(Xe,ade),e(ade,Sxo),e(Xe,Rxo),g(sA,Xe,null),b(c,KRe,u),b(c,vd,u),e(vd,jb),e(jb,nde),g(lA,nde,null),e(vd,Bxo),e(vd,sde),e(sde,Pxo),b(c,ZRe,u),b(c,ar,u),g(iA,ar,null),e(ar,$xo),e(ar,Td),e(Td,Ixo),e(Td,lj),e(lj,qxo),e(Td,Nxo),e(Td,ij),e(ij,jxo),e(Td,Dxo),e(ar,Gxo),e(ar,dA),e(dA,Oxo),e(dA,lde),e(lde,Vxo),e(dA,Xxo),e(ar,zxo),e(ar,Kr),g(cA,Kr,null),e(Kr,Qxo),e(Kr,ide),e(ide,Wxo),e(Kr,Hxo),e(Kr,Md),e(Md,Uxo),e(Md,dde),e(dde,Jxo),e(Md,Yxo),e(Md,dj),e(dj,Kxo),e(Md,Zxo),e(Kr,eko),e(Kr,cde),e(cde,oko),e(Kr,rko),g(fA,Kr,null),e(ar,tko),e(ar,ze),g(mA,ze,null),e(ze,ako),e(ze,fde),e(fde,nko),e(ze,sko),e(ze,Ka),e(Ka,lko),e(Ka,mde),e(mde,iko),e(Ka,dko),e(Ka,gde),e(gde,cko),e(Ka,fko),e(Ka,hde),e(hde,mko),e(Ka,gko),e(ze,hko),e(ze,j),e(j,Db),e(Db,pde),e(pde,pko),e(Db,_ko),e(Db,cj),e(cj,uko),e(Db,bko),e(j,Fko),e(j,Gb),e(Gb,_de),e(_de,vko),e(Gb,Tko),e(Gb,fj),e(fj,Mko),e(Gb,Eko),e(j,Cko),e(j,Ob),e(Ob,ude),e(ude,wko),e(Ob,Ako),e(Ob,mj),e(mj,yko),e(Ob,Lko),e(j,xko),e(j,Vb),e(Vb,bde),e(bde,kko),e(Vb,Sko),e(Vb,gj),e(gj,Rko),e(Vb,Bko),e(j,Pko),e(j,Xb),e(Xb,Fde),e(Fde,$ko),e(Xb,Iko),e(Xb,hj),e(hj,qko),e(Xb,Nko),e(j,jko),e(j,zb),e(zb,vde),e(vde,Dko),e(zb,Gko),e(zb,pj),e(pj,Oko),e(zb,Vko),e(j,Xko),e(j,Qb),e(Qb,Tde),e(Tde,zko),e(Qb,Qko),e(Qb,_j),e(_j,Wko),e(Qb,Hko),e(j,Uko),e(j,Wb),e(Wb,Mde),e(Mde,Jko),e(Wb,Yko),e(Wb,uj),e(uj,Kko),e(Wb,Zko),e(j,eSo),e(j,Hb),e(Hb,Ede),e(Ede,oSo),e(Hb,rSo),e(Hb,bj),e(bj,tSo),e(Hb,aSo),e(j,nSo),e(j,Ub),e(Ub,Cde),e(Cde,sSo),e(Ub,lSo),e(Ub,Fj),e(Fj,iSo),e(Ub,dSo),e(j,cSo),e(j,Jb),e(Jb,wde),e(wde,fSo),e(Jb,mSo),e(Jb,vj),e(vj,gSo),e(Jb,hSo),e(j,pSo),e(j,Yb),e(Yb,Ade),e(Ade,_So),e(Yb,uSo),e(Yb,Tj),e(Tj,bSo),e(Yb,FSo),e(j,vSo),e(j,Kb),e(Kb,yde),e(yde,TSo),e(Kb,MSo),e(Kb,Mj),e(Mj,ESo),e(Kb,CSo),e(j,wSo),e(j,Zb),e(Zb,Lde),e(Lde,ASo),e(Zb,ySo),e(Zb,Ej),e(Ej,LSo),e(Zb,xSo),e(j,kSo),e(j,e5),e(e5,xde),e(xde,SSo),e(e5,RSo),e(e5,Cj),e(Cj,BSo),e(e5,PSo),e(j,$So),e(j,o5),e(o5,kde),e(kde,ISo),e(o5,qSo),e(o5,wj),e(wj,NSo),e(o5,jSo),e(j,DSo),e(j,r5),e(r5,Sde),e(Sde,GSo),e(r5,OSo),e(r5,Aj),e(Aj,VSo),e(r5,XSo),e(j,zSo),e(j,t5),e(t5,Rde),e(Rde,QSo),e(t5,WSo),e(t5,yj),e(yj,HSo),e(t5,USo),e(j,JSo),e(j,a5),e(a5,Bde),e(Bde,YSo),e(a5,KSo),e(a5,Lj),e(Lj,ZSo),e(a5,eRo),e(j,oRo),e(j,n5),e(n5,Pde),e(Pde,rRo),e(n5,tRo),e(n5,xj),e(xj,aRo),e(n5,nRo),e(j,sRo),e(j,s5),e(s5,$de),e($de,lRo),e(s5,iRo),e(s5,kj),e(kj,dRo),e(s5,cRo),e(j,fRo),e(j,l5),e(l5,Ide),e(Ide,mRo),e(l5,gRo),e(l5,Sj),e(Sj,hRo),e(l5,pRo),e(j,_Ro),e(j,i5),e(i5,qde),e(qde,uRo),e(i5,bRo),e(i5,Rj),e(Rj,FRo),e(i5,vRo),e(j,TRo),e(j,d5),e(d5,Nde),e(Nde,MRo),e(d5,ERo),e(d5,Bj),e(Bj,CRo),e(d5,wRo),e(j,ARo),e(j,c5),e(c5,jde),e(jde,yRo),e(c5,LRo),e(c5,Pj),e(Pj,xRo),e(c5,kRo),e(j,SRo),e(j,f5),e(f5,Dde),e(Dde,RRo),e(f5,BRo),e(f5,$j),e($j,PRo),e(f5,$Ro),e(j,IRo),e(j,m5),e(m5,Gde),e(Gde,qRo),e(m5,NRo),e(m5,Ij),e(Ij,jRo),e(m5,DRo),e(j,GRo),e(j,g5),e(g5,Ode),e(Ode,ORo),e(g5,VRo),e(g5,qj),e(qj,XRo),e(g5,zRo),e(j,QRo),e(j,h5),e(h5,Vde),e(Vde,WRo),e(h5,HRo),e(h5,Nj),e(Nj,URo),e(h5,JRo),e(j,YRo),e(j,p5),e(p5,Xde),e(Xde,KRo),e(p5,ZRo),e(p5,jj),e(jj,eBo),e(p5,oBo),e(j,rBo),e(j,_5),e(_5,zde),e(zde,tBo),e(_5,aBo),e(_5,Dj),e(Dj,nBo),e(_5,sBo),e(j,lBo),e(j,u5),e(u5,Qde),e(Qde,iBo),e(u5,dBo),e(u5,Gj),e(Gj,cBo),e(u5,fBo),e(j,mBo),e(j,b5),e(b5,Wde),e(Wde,gBo),e(b5,hBo),e(b5,Oj),e(Oj,pBo),e(b5,_Bo),e(ze,uBo),e(ze,F5),e(F5,bBo),e(F5,Hde),e(Hde,FBo),e(F5,vBo),e(F5,Ude),e(Ude,TBo),e(ze,MBo),e(ze,Jde),e(Jde,EBo),e(ze,CBo),g(gA,ze,null),b(c,eBe,u),b(c,Ed,u),e(Ed,v5),e(v5,Yde),g(hA,Yde,null),e(Ed,wBo),e(Ed,Kde),e(Kde,ABo),b(c,oBe,u),b(c,nr,u),g(pA,nr,null),e(nr,yBo),e(nr,Cd),e(Cd,LBo),e(Cd,Vj),e(Vj,xBo),e(Cd,kBo),e(Cd,Xj),e(Xj,SBo),e(Cd,RBo),e(nr,BBo),e(nr,_A),e(_A,PBo),e(_A,Zde),e(Zde,$Bo),e(_A,IBo),e(nr,qBo),e(nr,Zr),g(uA,Zr,null),e(Zr,NBo),e(Zr,ece),e(ece,jBo),e(Zr,DBo),e(Zr,wd),e(wd,GBo),e(wd,oce),e(oce,OBo),e(wd,VBo),e(wd,zj),e(zj,XBo),e(wd,zBo),e(Zr,QBo),e(Zr,rce),e(rce,WBo),e(Zr,HBo),g(bA,Zr,null),e(nr,UBo),e(nr,Qe),g(FA,Qe,null),e(Qe,JBo),e(Qe,tce),e(tce,YBo),e(Qe,KBo),e(Qe,Za),e(Za,ZBo),e(Za,ace),e(ace,ePo),e(Za,oPo),e(Za,nce),e(nce,rPo),e(Za,tPo),e(Za,sce),e(sce,aPo),e(Za,nPo),e(Qe,sPo),e(Qe,R),e(R,T5),e(T5,lce),e(lce,lPo),e(T5,iPo),e(T5,Qj),e(Qj,dPo),e(T5,cPo),e(R,fPo),e(R,M5),e(M5,ice),e(ice,mPo),e(M5,gPo),e(M5,Wj),e(Wj,hPo),e(M5,pPo),e(R,_Po),e(R,E5),e(E5,dce),e(dce,uPo),e(E5,bPo),e(E5,Hj),e(Hj,FPo),e(E5,vPo),e(R,TPo),e(R,C5),e(C5,cce),e(cce,MPo),e(C5,EPo),e(C5,Uj),e(Uj,CPo),e(C5,wPo),e(R,APo),e(R,w5),e(w5,fce),e(fce,yPo),e(w5,LPo),e(w5,Jj),e(Jj,xPo),e(w5,kPo),e(R,SPo),e(R,A5),e(A5,mce),e(mce,RPo),e(A5,BPo),e(A5,Yj),e(Yj,PPo),e(A5,$Po),e(R,IPo),e(R,y5),e(y5,gce),e(gce,qPo),e(y5,NPo),e(y5,Kj),e(Kj,jPo),e(y5,DPo),e(R,GPo),e(R,L5),e(L5,hce),e(hce,OPo),e(L5,VPo),e(L5,Zj),e(Zj,XPo),e(L5,zPo),e(R,QPo),e(R,x5),e(x5,pce),e(pce,WPo),e(x5,HPo),e(x5,eD),e(eD,UPo),e(x5,JPo),e(R,YPo),e(R,k5),e(k5,_ce),e(_ce,KPo),e(k5,ZPo),e(k5,oD),e(oD,e$o),e(k5,o$o),e(R,r$o),e(R,S5),e(S5,uce),e(uce,t$o),e(S5,a$o),e(S5,rD),e(rD,n$o),e(S5,s$o),e(R,l$o),e(R,R5),e(R5,bce),e(bce,i$o),e(R5,d$o),e(R5,tD),e(tD,c$o),e(R5,f$o),e(R,m$o),e(R,B5),e(B5,Fce),e(Fce,g$o),e(B5,h$o),e(B5,aD),e(aD,p$o),e(B5,_$o),e(R,u$o),e(R,P5),e(P5,vce),e(vce,b$o),e(P5,F$o),e(P5,nD),e(nD,v$o),e(P5,T$o),e(R,M$o),e(R,$5),e($5,Tce),e(Tce,E$o),e($5,C$o),e($5,sD),e(sD,w$o),e($5,A$o),e(R,y$o),e(R,I5),e(I5,Mce),e(Mce,L$o),e(I5,x$o),e(I5,lD),e(lD,k$o),e(I5,S$o),e(R,R$o),e(R,q5),e(q5,Ece),e(Ece,B$o),e(q5,P$o),e(q5,iD),e(iD,$$o),e(q5,I$o),e(R,q$o),e(R,N5),e(N5,Cce),e(Cce,N$o),e(N5,j$o),e(N5,dD),e(dD,D$o),e(N5,G$o),e(R,O$o),e(R,j5),e(j5,wce),e(wce,V$o),e(j5,X$o),e(j5,cD),e(cD,z$o),e(j5,Q$o),e(R,W$o),e(R,D5),e(D5,Ace),e(Ace,H$o),e(D5,U$o),e(D5,fD),e(fD,J$o),e(D5,Y$o),e(R,K$o),e(R,G5),e(G5,yce),e(yce,Z$o),e(G5,eIo),e(G5,mD),e(mD,oIo),e(G5,rIo),e(R,tIo),e(R,O5),e(O5,Lce),e(Lce,aIo),e(O5,nIo),e(O5,gD),e(gD,sIo),e(O5,lIo),e(R,iIo),e(R,V5),e(V5,xce),e(xce,dIo),e(V5,cIo),e(V5,hD),e(hD,fIo),e(V5,mIo),e(R,gIo),e(R,X5),e(X5,kce),e(kce,hIo),e(X5,pIo),e(X5,pD),e(pD,_Io),e(X5,uIo),e(R,bIo),e(R,z5),e(z5,Sce),e(Sce,FIo),e(z5,vIo),e(z5,_D),e(_D,TIo),e(z5,MIo),e(R,EIo),e(R,Q5),e(Q5,Rce),e(Rce,CIo),e(Q5,wIo),e(Q5,uD),e(uD,AIo),e(Q5,yIo),e(R,LIo),e(R,W5),e(W5,Bce),e(Bce,xIo),e(W5,kIo),e(W5,bD),e(bD,SIo),e(W5,RIo),e(R,BIo),e(R,H5),e(H5,Pce),e(Pce,PIo),e(H5,$Io),e(H5,FD),e(FD,IIo),e(H5,qIo),e(R,NIo),e(R,U5),e(U5,$ce),e($ce,jIo),e(U5,DIo),e(U5,vD),e(vD,GIo),e(U5,OIo),e(R,VIo),e(R,J5),e(J5,Ice),e(Ice,XIo),e(J5,zIo),e(J5,TD),e(TD,QIo),e(J5,WIo),e(R,HIo),e(R,Y5),e(Y5,qce),e(qce,UIo),e(Y5,JIo),e(Y5,MD),e(MD,YIo),e(Y5,KIo),e(R,ZIo),e(R,K5),e(K5,Nce),e(Nce,eqo),e(K5,oqo),e(K5,ED),e(ED,rqo),e(K5,tqo),e(R,aqo),e(R,Z5),e(Z5,jce),e(jce,nqo),e(Z5,sqo),e(Z5,CD),e(CD,lqo),e(Z5,iqo),e(R,dqo),e(R,e3),e(e3,Dce),e(Dce,cqo),e(e3,fqo),e(e3,wD),e(wD,mqo),e(e3,gqo),e(R,hqo),e(R,o3),e(o3,Gce),e(Gce,pqo),e(o3,_qo),e(o3,AD),e(AD,uqo),e(o3,bqo),e(R,Fqo),e(R,r3),e(r3,Oce),e(Oce,vqo),e(r3,Tqo),e(r3,yD),e(yD,Mqo),e(r3,Eqo),e(R,Cqo),e(R,t3),e(t3,Vce),e(Vce,wqo),e(t3,Aqo),e(t3,LD),e(LD,yqo),e(t3,Lqo),e(R,xqo),e(R,a3),e(a3,Xce),e(Xce,kqo),e(a3,Sqo),e(a3,xD),e(xD,Rqo),e(a3,Bqo),e(R,Pqo),e(R,n3),e(n3,zce),e(zce,$qo),e(n3,Iqo),e(n3,kD),e(kD,qqo),e(n3,Nqo),e(Qe,jqo),e(Qe,s3),e(s3,Dqo),e(s3,Qce),e(Qce,Gqo),e(s3,Oqo),e(s3,Wce),e(Wce,Vqo),e(Qe,Xqo),e(Qe,Hce),e(Hce,zqo),e(Qe,Qqo),g(vA,Qe,null),b(c,rBe,u),b(c,Ad,u),e(Ad,l3),e(l3,Uce),g(TA,Uce,null),e(Ad,Wqo),e(Ad,Jce),e(Jce,Hqo),b(c,tBe,u),b(c,sr,u),g(MA,sr,null),e(sr,Uqo),e(sr,yd),e(yd,Jqo),e(yd,SD),e(SD,Yqo),e(yd,Kqo),e(yd,RD),e(RD,Zqo),e(yd,eNo),e(sr,oNo),e(sr,EA),e(EA,rNo),e(EA,Yce),e(Yce,tNo),e(EA,aNo),e(sr,nNo),e(sr,et),g(CA,et,null),e(et,sNo),e(et,Kce),e(Kce,lNo),e(et,iNo),e(et,Ld),e(Ld,dNo),e(Ld,Zce),e(Zce,cNo),e(Ld,fNo),e(Ld,BD),e(BD,mNo),e(Ld,gNo),e(et,hNo),e(et,efe),e(efe,pNo),e(et,_No),g(wA,et,null),e(sr,uNo),e(sr,We),g(AA,We,null),e(We,bNo),e(We,ofe),e(ofe,FNo),e(We,vNo),e(We,en),e(en,TNo),e(en,rfe),e(rfe,MNo),e(en,ENo),e(en,tfe),e(tfe,CNo),e(en,wNo),e(en,afe),e(afe,ANo),e(en,yNo),e(We,LNo),e(We,nfe),e(nfe,i3),e(i3,sfe),e(sfe,xNo),e(i3,kNo),e(i3,PD),e(PD,SNo),e(i3,RNo),e(We,BNo),e(We,d3),e(d3,PNo),e(d3,lfe),e(lfe,$No),e(d3,INo),e(d3,ife),e(ife,qNo),e(We,NNo),e(We,dfe),e(dfe,jNo),e(We,DNo),g(yA,We,null),b(c,aBe,u),b(c,xd,u),e(xd,c3),e(c3,cfe),g(LA,cfe,null),e(xd,GNo),e(xd,ffe),e(ffe,ONo),b(c,nBe,u),b(c,lr,u),g(xA,lr,null),e(lr,VNo),e(lr,kd),e(kd,XNo),e(kd,$D),e($D,zNo),e(kd,QNo),e(kd,ID),e(ID,WNo),e(kd,HNo),e(lr,UNo),e(lr,kA),e(kA,JNo),e(kA,mfe),e(mfe,YNo),e(kA,KNo),e(lr,ZNo),e(lr,ot),g(SA,ot,null),e(ot,ejo),e(ot,gfe),e(gfe,ojo),e(ot,rjo),e(ot,Sd),e(Sd,tjo),e(Sd,hfe),e(hfe,ajo),e(Sd,njo),e(Sd,qD),e(qD,sjo),e(Sd,ljo),e(ot,ijo),e(ot,pfe),e(pfe,djo),e(ot,cjo),g(RA,ot,null),e(lr,fjo),e(lr,He),g(BA,He,null),e(He,mjo),e(He,_fe),e(_fe,gjo),e(He,hjo),e(He,on),e(on,pjo),e(on,ufe),e(ufe,_jo),e(on,ujo),e(on,bfe),e(bfe,bjo),e(on,Fjo),e(on,Ffe),e(Ffe,vjo),e(on,Tjo),e(He,Mjo),e(He,fe),e(fe,f3),e(f3,vfe),e(vfe,Ejo),e(f3,Cjo),e(f3,ND),e(ND,wjo),e(f3,Ajo),e(fe,yjo),e(fe,m3),e(m3,Tfe),e(Tfe,Ljo),e(m3,xjo),e(m3,jD),e(jD,kjo),e(m3,Sjo),e(fe,Rjo),e(fe,Ds),e(Ds,Mfe),e(Mfe,Bjo),e(Ds,Pjo),e(Ds,DD),e(DD,$jo),e(Ds,Ijo),e(Ds,GD),e(GD,qjo),e(Ds,Njo),e(fe,jjo),e(fe,g3),e(g3,Efe),e(Efe,Djo),e(g3,Gjo),e(g3,OD),e(OD,Ojo),e(g3,Vjo),e(fe,Xjo),e(fe,ma),e(ma,Cfe),e(Cfe,zjo),e(ma,Qjo),e(ma,VD),e(VD,Wjo),e(ma,Hjo),e(ma,XD),e(XD,Ujo),e(ma,Jjo),e(ma,zD),e(zD,Yjo),e(ma,Kjo),e(fe,Zjo),e(fe,h3),e(h3,wfe),e(wfe,eDo),e(h3,oDo),e(h3,QD),e(QD,rDo),e(h3,tDo),e(fe,aDo),e(fe,p3),e(p3,Afe),e(Afe,nDo),e(p3,sDo),e(p3,WD),e(WD,lDo),e(p3,iDo),e(fe,dDo),e(fe,_3),e(_3,yfe),e(yfe,cDo),e(_3,fDo),e(_3,HD),e(HD,mDo),e(_3,gDo),e(fe,hDo),e(fe,u3),e(u3,Lfe),e(Lfe,pDo),e(u3,_Do),e(u3,UD),e(UD,uDo),e(u3,bDo),e(fe,FDo),e(fe,b3),e(b3,xfe),e(xfe,vDo),e(b3,TDo),e(b3,JD),e(JD,MDo),e(b3,EDo),e(fe,CDo),e(fe,F3),e(F3,kfe),e(kfe,wDo),e(F3,ADo),e(F3,YD),e(YD,yDo),e(F3,LDo),e(fe,xDo),e(fe,v3),e(v3,Sfe),e(Sfe,kDo),e(v3,SDo),e(v3,KD),e(KD,RDo),e(v3,BDo),e(He,PDo),e(He,T3),e(T3,$Do),e(T3,Rfe),e(Rfe,IDo),e(T3,qDo),e(T3,Bfe),e(Bfe,NDo),e(He,jDo),e(He,Pfe),e(Pfe,DDo),e(He,GDo),g(PA,He,null),b(c,sBe,u),b(c,Rd,u),e(Rd,M3),e(M3,$fe),g($A,$fe,null),e(Rd,ODo),e(Rd,Ife),e(Ife,VDo),b(c,lBe,u),b(c,ir,u),g(IA,ir,null),e(ir,XDo),e(ir,Bd),e(Bd,zDo),e(Bd,ZD),e(ZD,QDo),e(Bd,WDo),e(Bd,eG),e(eG,HDo),e(Bd,UDo),e(ir,JDo),e(ir,qA),e(qA,YDo),e(qA,qfe),e(qfe,KDo),e(qA,ZDo),e(ir,eGo),e(ir,rt),g(NA,rt,null),e(rt,oGo),e(rt,Nfe),e(Nfe,rGo),e(rt,tGo),e(rt,Pd),e(Pd,aGo),e(Pd,jfe),e(jfe,nGo),e(Pd,sGo),e(Pd,oG),e(oG,lGo),e(Pd,iGo),e(rt,dGo),e(rt,Dfe),e(Dfe,cGo),e(rt,fGo),g(jA,rt,null),e(ir,mGo),e(ir,Ue),g(DA,Ue,null),e(Ue,gGo),e(Ue,Gfe),e(Gfe,hGo),e(Ue,pGo),e(Ue,rn),e(rn,_Go),e(rn,Ofe),e(Ofe,uGo),e(rn,bGo),e(rn,Vfe),e(Vfe,FGo),e(rn,vGo),e(rn,Xfe),e(Xfe,TGo),e(rn,MGo),e(Ue,EGo),e(Ue,zfe),e(zfe,E3),e(E3,Qfe),e(Qfe,CGo),e(E3,wGo),e(E3,rG),e(rG,AGo),e(E3,yGo),e(Ue,LGo),e(Ue,C3),e(C3,xGo),e(C3,Wfe),e(Wfe,kGo),e(C3,SGo),e(C3,Hfe),e(Hfe,RGo),e(Ue,BGo),e(Ue,Ufe),e(Ufe,PGo),e(Ue,$Go),g(GA,Ue,null),b(c,iBe,u),b(c,$d,u),e($d,w3),e(w3,Jfe),g(OA,Jfe,null),e($d,IGo),e($d,Yfe),e(Yfe,qGo),b(c,dBe,u),b(c,dr,u),g(VA,dr,null),e(dr,NGo),e(dr,Id),e(Id,jGo),e(Id,tG),e(tG,DGo),e(Id,GGo),e(Id,aG),e(aG,OGo),e(Id,VGo),e(dr,XGo),e(dr,XA),e(XA,zGo),e(XA,Kfe),e(Kfe,QGo),e(XA,WGo),e(dr,HGo),e(dr,tt),g(zA,tt,null),e(tt,UGo),e(tt,Zfe),e(Zfe,JGo),e(tt,YGo),e(tt,qd),e(qd,KGo),e(qd,eme),e(eme,ZGo),e(qd,eOo),e(qd,nG),e(nG,oOo),e(qd,rOo),e(tt,tOo),e(tt,ome),e(ome,aOo),e(tt,nOo),g(QA,tt,null),e(dr,sOo),e(dr,Je),g(WA,Je,null),e(Je,lOo),e(Je,rme),e(rme,iOo),e(Je,dOo),e(Je,tn),e(tn,cOo),e(tn,tme),e(tme,fOo),e(tn,mOo),e(tn,ame),e(ame,gOo),e(tn,hOo),e(tn,nme),e(nme,pOo),e(tn,_Oo),e(Je,uOo),e(Je,Se),e(Se,A3),e(A3,sme),e(sme,bOo),e(A3,FOo),e(A3,sG),e(sG,vOo),e(A3,TOo),e(Se,MOo),e(Se,y3),e(y3,lme),e(lme,EOo),e(y3,COo),e(y3,lG),e(lG,wOo),e(y3,AOo),e(Se,yOo),e(Se,L3),e(L3,ime),e(ime,LOo),e(L3,xOo),e(L3,iG),e(iG,kOo),e(L3,SOo),e(Se,ROo),e(Se,x3),e(x3,dme),e(dme,BOo),e(x3,POo),e(x3,dG),e(dG,$Oo),e(x3,IOo),e(Se,qOo),e(Se,k3),e(k3,cme),e(cme,NOo),e(k3,jOo),e(k3,cG),e(cG,DOo),e(k3,GOo),e(Se,OOo),e(Se,S3),e(S3,fme),e(fme,VOo),e(S3,XOo),e(S3,fG),e(fG,zOo),e(S3,QOo),e(Se,WOo),e(Se,R3),e(R3,mme),e(mme,HOo),e(R3,UOo),e(R3,mG),e(mG,JOo),e(R3,YOo),e(Se,KOo),e(Se,B3),e(B3,gme),e(gme,ZOo),e(B3,eVo),e(B3,gG),e(gG,oVo),e(B3,rVo),e(Je,tVo),e(Je,P3),e(P3,aVo),e(P3,hme),e(hme,nVo),e(P3,sVo),e(P3,pme),e(pme,lVo),e(Je,iVo),e(Je,_me),e(_me,dVo),e(Je,cVo),g(HA,Je,null),b(c,cBe,u),b(c,Nd,u),e(Nd,$3),e($3,ume),g(UA,ume,null),e(Nd,fVo),e(Nd,bme),e(bme,mVo),b(c,fBe,u),b(c,cr,u),g(JA,cr,null),e(cr,gVo),e(cr,jd),e(jd,hVo),e(jd,hG),e(hG,pVo),e(jd,_Vo),e(jd,pG),e(pG,uVo),e(jd,bVo),e(cr,FVo),e(cr,YA),e(YA,vVo),e(YA,Fme),e(Fme,TVo),e(YA,MVo),e(cr,EVo),e(cr,at),g(KA,at,null),e(at,CVo),e(at,vme),e(vme,wVo),e(at,AVo),e(at,Dd),e(Dd,yVo),e(Dd,Tme),e(Tme,LVo),e(Dd,xVo),e(Dd,_G),e(_G,kVo),e(Dd,SVo),e(at,RVo),e(at,Mme),e(Mme,BVo),e(at,PVo),g(ZA,at,null),e(cr,$Vo),e(cr,Ye),g(e0,Ye,null),e(Ye,IVo),e(Ye,Eme),e(Eme,qVo),e(Ye,NVo),e(Ye,an),e(an,jVo),e(an,Cme),e(Cme,DVo),e(an,GVo),e(an,wme),e(wme,OVo),e(an,VVo),e(an,Ame),e(Ame,XVo),e(an,zVo),e(Ye,QVo),e(Ye,nn),e(nn,I3),e(I3,yme),e(yme,WVo),e(I3,HVo),e(I3,uG),e(uG,UVo),e(I3,JVo),e(nn,YVo),e(nn,q3),e(q3,Lme),e(Lme,KVo),e(q3,ZVo),e(q3,bG),e(bG,eXo),e(q3,oXo),e(nn,rXo),e(nn,N3),e(N3,xme),e(xme,tXo),e(N3,aXo),e(N3,FG),e(FG,nXo),e(N3,sXo),e(nn,lXo),e(nn,j3),e(j3,kme),e(kme,iXo),e(j3,dXo),e(j3,vG),e(vG,cXo),e(j3,fXo),e(Ye,mXo),e(Ye,D3),e(D3,gXo),e(D3,Sme),e(Sme,hXo),e(D3,pXo),e(D3,Rme),e(Rme,_Xo),e(Ye,uXo),e(Ye,Bme),e(Bme,bXo),e(Ye,FXo),g(o0,Ye,null),b(c,mBe,u),b(c,Gd,u),e(Gd,G3),e(G3,Pme),g(r0,Pme,null),e(Gd,vXo),e(Gd,$me),e($me,TXo),b(c,gBe,u),b(c,fr,u),g(t0,fr,null),e(fr,MXo),e(fr,Od),e(Od,EXo),e(Od,TG),e(TG,CXo),e(Od,wXo),e(Od,MG),e(MG,AXo),e(Od,yXo),e(fr,LXo),e(fr,a0),e(a0,xXo),e(a0,Ime),e(Ime,kXo),e(a0,SXo),e(fr,RXo),e(fr,nt),g(n0,nt,null),e(nt,BXo),e(nt,qme),e(qme,PXo),e(nt,$Xo),e(nt,Vd),e(Vd,IXo),e(Vd,Nme),e(Nme,qXo),e(Vd,NXo),e(Vd,EG),e(EG,jXo),e(Vd,DXo),e(nt,GXo),e(nt,jme),e(jme,OXo),e(nt,VXo),g(s0,nt,null),e(fr,XXo),e(fr,Ke),g(l0,Ke,null),e(Ke,zXo),e(Ke,Dme),e(Dme,QXo),e(Ke,WXo),e(Ke,sn),e(sn,HXo),e(sn,Gme),e(Gme,UXo),e(sn,JXo),e(sn,Ome),e(Ome,YXo),e(sn,KXo),e(sn,Vme),e(Vme,ZXo),e(sn,ezo),e(Ke,ozo),e(Ke,Re),e(Re,O3),e(O3,Xme),e(Xme,rzo),e(O3,tzo),e(O3,CG),e(CG,azo),e(O3,nzo),e(Re,szo),e(Re,V3),e(V3,zme),e(zme,lzo),e(V3,izo),e(V3,wG),e(wG,dzo),e(V3,czo),e(Re,fzo),e(Re,X3),e(X3,Qme),e(Qme,mzo),e(X3,gzo),e(X3,AG),e(AG,hzo),e(X3,pzo),e(Re,_zo),e(Re,z3),e(z3,Wme),e(Wme,uzo),e(z3,bzo),e(z3,yG),e(yG,Fzo),e(z3,vzo),e(Re,Tzo),e(Re,Q3),e(Q3,Hme),e(Hme,Mzo),e(Q3,Ezo),e(Q3,LG),e(LG,Czo),e(Q3,wzo),e(Re,Azo),e(Re,W3),e(W3,Ume),e(Ume,yzo),e(W3,Lzo),e(W3,xG),e(xG,xzo),e(W3,kzo),e(Re,Szo),e(Re,H3),e(H3,Jme),e(Jme,Rzo),e(H3,Bzo),e(H3,kG),e(kG,Pzo),e(H3,$zo),e(Re,Izo),e(Re,U3),e(U3,Yme),e(Yme,qzo),e(U3,Nzo),e(U3,SG),e(SG,jzo),e(U3,Dzo),e(Ke,Gzo),e(Ke,J3),e(J3,Ozo),e(J3,Kme),e(Kme,Vzo),e(J3,Xzo),e(J3,Zme),e(Zme,zzo),e(Ke,Qzo),e(Ke,ege),e(ege,Wzo),e(Ke,Hzo),g(i0,Ke,null),b(c,hBe,u),b(c,Xd,u),e(Xd,Y3),e(Y3,oge),g(d0,oge,null),e(Xd,Uzo),e(Xd,rge),e(rge,Jzo),b(c,pBe,u),b(c,mr,u),g(c0,mr,null),e(mr,Yzo),e(mr,zd),e(zd,Kzo),e(zd,RG),e(RG,Zzo),e(zd,eQo),e(zd,BG),e(BG,oQo),e(zd,rQo),e(mr,tQo),e(mr,f0),e(f0,aQo),e(f0,tge),e(tge,nQo),e(f0,sQo),e(mr,lQo),e(mr,st),g(m0,st,null),e(st,iQo),e(st,age),e(age,dQo),e(st,cQo),e(st,Qd),e(Qd,fQo),e(Qd,nge),e(nge,mQo),e(Qd,gQo),e(Qd,PG),e(PG,hQo),e(Qd,pQo),e(st,_Qo),e(st,sge),e(sge,uQo),e(st,bQo),g(g0,st,null),e(mr,FQo),e(mr,Ze),g(h0,Ze,null),e(Ze,vQo),e(Ze,lge),e(lge,TQo),e(Ze,MQo),e(Ze,ln),e(ln,EQo),e(ln,ige),e(ige,CQo),e(ln,wQo),e(ln,dge),e(dge,AQo),e(ln,yQo),e(ln,cge),e(cge,LQo),e(ln,xQo),e(Ze,kQo),e(Ze,p0),e(p0,K3),e(K3,fge),e(fge,SQo),e(K3,RQo),e(K3,$G),e($G,BQo),e(K3,PQo),e(p0,$Qo),e(p0,Z3),e(Z3,mge),e(mge,IQo),e(Z3,qQo),e(Z3,IG),e(IG,NQo),e(Z3,jQo),e(Ze,DQo),e(Ze,e2),e(e2,GQo),e(e2,gge),e(gge,OQo),e(e2,VQo),e(e2,hge),e(hge,XQo),e(Ze,zQo),e(Ze,pge),e(pge,QQo),e(Ze,WQo),g(_0,Ze,null),b(c,_Be,u),b(c,Wd,u),e(Wd,o2),e(o2,_ge),g(u0,_ge,null),e(Wd,HQo),e(Wd,uge),e(uge,UQo),b(c,uBe,u),b(c,gr,u),g(b0,gr,null),e(gr,JQo),e(gr,Hd),e(Hd,YQo),e(Hd,qG),e(qG,KQo),e(Hd,ZQo),e(Hd,NG),e(NG,eWo),e(Hd,oWo),e(gr,rWo),e(gr,F0),e(F0,tWo),e(F0,bge),e(bge,aWo),e(F0,nWo),e(gr,sWo),e(gr,lt),g(v0,lt,null),e(lt,lWo),e(lt,Fge),e(Fge,iWo),e(lt,dWo),e(lt,Ud),e(Ud,cWo),e(Ud,vge),e(vge,fWo),e(Ud,mWo),e(Ud,jG),e(jG,gWo),e(Ud,hWo),e(lt,pWo),e(lt,Tge),e(Tge,_Wo),e(lt,uWo),g(T0,lt,null),e(gr,bWo),e(gr,eo),g(M0,eo,null),e(eo,FWo),e(eo,Mge),e(Mge,vWo),e(eo,TWo),e(eo,dn),e(dn,MWo),e(dn,Ege),e(Ege,EWo),e(dn,CWo),e(dn,Cge),e(Cge,wWo),e(dn,AWo),e(dn,wge),e(wge,yWo),e(dn,LWo),e(eo,xWo),e(eo,cn),e(cn,r2),e(r2,Age),e(Age,kWo),e(r2,SWo),e(r2,DG),e(DG,RWo),e(r2,BWo),e(cn,PWo),e(cn,t2),e(t2,yge),e(yge,$Wo),e(t2,IWo),e(t2,GG),e(GG,qWo),e(t2,NWo),e(cn,jWo),e(cn,a2),e(a2,Lge),e(Lge,DWo),e(a2,GWo),e(a2,OG),e(OG,OWo),e(a2,VWo),e(cn,XWo),e(cn,n2),e(n2,xge),e(xge,zWo),e(n2,QWo),e(n2,VG),e(VG,WWo),e(n2,HWo),e(eo,UWo),e(eo,s2),e(s2,JWo),e(s2,kge),e(kge,YWo),e(s2,KWo),e(s2,Sge),e(Sge,ZWo),e(eo,eHo),e(eo,Rge),e(Rge,oHo),e(eo,rHo),g(E0,eo,null),b(c,bBe,u),b(c,Jd,u),e(Jd,l2),e(l2,Bge),g(C0,Bge,null),e(Jd,tHo),e(Jd,Pge),e(Pge,aHo),b(c,FBe,u),b(c,hr,u),g(w0,hr,null),e(hr,nHo),e(hr,Yd),e(Yd,sHo),e(Yd,XG),e(XG,lHo),e(Yd,iHo),e(Yd,zG),e(zG,dHo),e(Yd,cHo),e(hr,fHo),e(hr,A0),e(A0,mHo),e(A0,$ge),e($ge,gHo),e(A0,hHo),e(hr,pHo),e(hr,it),g(y0,it,null),e(it,_Ho),e(it,Ige),e(Ige,uHo),e(it,bHo),e(it,Kd),e(Kd,FHo),e(Kd,qge),e(qge,vHo),e(Kd,THo),e(Kd,QG),e(QG,MHo),e(Kd,EHo),e(it,CHo),e(it,Nge),e(Nge,wHo),e(it,AHo),g(L0,it,null),e(hr,yHo),e(hr,oo),g(x0,oo,null),e(oo,LHo),e(oo,jge),e(jge,xHo),e(oo,kHo),e(oo,fn),e(fn,SHo),e(fn,Dge),e(Dge,RHo),e(fn,BHo),e(fn,Gge),e(Gge,PHo),e(fn,$Ho),e(fn,Oge),e(Oge,IHo),e(fn,qHo),e(oo,NHo),e(oo,Zd),e(Zd,i2),e(i2,Vge),e(Vge,jHo),e(i2,DHo),e(i2,WG),e(WG,GHo),e(i2,OHo),e(Zd,VHo),e(Zd,d2),e(d2,Xge),e(Xge,XHo),e(d2,zHo),e(d2,HG),e(HG,QHo),e(d2,WHo),e(Zd,HHo),e(Zd,c2),e(c2,zge),e(zge,UHo),e(c2,JHo),e(c2,UG),e(UG,YHo),e(c2,KHo),e(oo,ZHo),e(oo,f2),e(f2,eUo),e(f2,Qge),e(Qge,oUo),e(f2,rUo),e(f2,Wge),e(Wge,tUo),e(oo,aUo),e(oo,Hge),e(Hge,nUo),e(oo,sUo),g(k0,oo,null),b(c,vBe,u),b(c,ec,u),e(ec,m2),e(m2,Uge),g(S0,Uge,null),e(ec,lUo),e(ec,Jge),e(Jge,iUo),b(c,TBe,u),b(c,pr,u),g(R0,pr,null),e(pr,dUo),e(pr,oc),e(oc,cUo),e(oc,JG),e(JG,fUo),e(oc,mUo),e(oc,YG),e(YG,gUo),e(oc,hUo),e(pr,pUo),e(pr,B0),e(B0,_Uo),e(B0,Yge),e(Yge,uUo),e(B0,bUo),e(pr,FUo),e(pr,dt),g(P0,dt,null),e(dt,vUo),e(dt,Kge),e(Kge,TUo),e(dt,MUo),e(dt,rc),e(rc,EUo),e(rc,Zge),e(Zge,CUo),e(rc,wUo),e(rc,KG),e(KG,AUo),e(rc,yUo),e(dt,LUo),e(dt,ehe),e(ehe,xUo),e(dt,kUo),g($0,dt,null),e(pr,SUo),e(pr,ro),g(I0,ro,null),e(ro,RUo),e(ro,ohe),e(ohe,BUo),e(ro,PUo),e(ro,mn),e(mn,$Uo),e(mn,rhe),e(rhe,IUo),e(mn,qUo),e(mn,the),e(the,NUo),e(mn,jUo),e(mn,ahe),e(ahe,DUo),e(mn,GUo),e(ro,OUo),e(ro,nhe),e(nhe,g2),e(g2,she),e(she,VUo),e(g2,XUo),e(g2,ZG),e(ZG,zUo),e(g2,QUo),e(ro,WUo),e(ro,h2),e(h2,HUo),e(h2,lhe),e(lhe,UUo),e(h2,JUo),e(h2,ihe),e(ihe,YUo),e(ro,KUo),e(ro,dhe),e(dhe,ZUo),e(ro,eJo),g(q0,ro,null),b(c,MBe,u),b(c,tc,u),e(tc,p2),e(p2,che),g(N0,che,null),e(tc,oJo),e(tc,fhe),e(fhe,rJo),b(c,EBe,u),b(c,_r,u),g(j0,_r,null),e(_r,tJo),e(_r,ac),e(ac,aJo),e(ac,eO),e(eO,nJo),e(ac,sJo),e(ac,oO),e(oO,lJo),e(ac,iJo),e(_r,dJo),e(_r,D0),e(D0,cJo),e(D0,mhe),e(mhe,fJo),e(D0,mJo),e(_r,gJo),e(_r,ct),g(G0,ct,null),e(ct,hJo),e(ct,ghe),e(ghe,pJo),e(ct,_Jo),e(ct,nc),e(nc,uJo),e(nc,hhe),e(hhe,bJo),e(nc,FJo),e(nc,rO),e(rO,vJo),e(nc,TJo),e(ct,MJo),e(ct,phe),e(phe,EJo),e(ct,CJo),g(O0,ct,null),e(_r,wJo),e(_r,to),g(V0,to,null),e(to,AJo),e(to,_he),e(_he,yJo),e(to,LJo),e(to,gn),e(gn,xJo),e(gn,uhe),e(uhe,kJo),e(gn,SJo),e(gn,bhe),e(bhe,RJo),e(gn,BJo),e(gn,Fhe),e(Fhe,PJo),e(gn,$Jo),e(to,IJo),e(to,vhe),e(vhe,_2),e(_2,The),e(The,qJo),e(_2,NJo),e(_2,tO),e(tO,jJo),e(_2,DJo),e(to,GJo),e(to,u2),e(u2,OJo),e(u2,Mhe),e(Mhe,VJo),e(u2,XJo),e(u2,Ehe),e(Ehe,zJo),e(to,QJo),e(to,Che),e(Che,WJo),e(to,HJo),g(X0,to,null),b(c,CBe,u),b(c,sc,u),e(sc,b2),e(b2,whe),g(z0,whe,null),e(sc,UJo),e(sc,Ahe),e(Ahe,JJo),b(c,wBe,u),b(c,ur,u),g(Q0,ur,null),e(ur,YJo),e(ur,lc),e(lc,KJo),e(lc,aO),e(aO,ZJo),e(lc,eYo),e(lc,nO),e(nO,oYo),e(lc,rYo),e(ur,tYo),e(ur,W0),e(W0,aYo),e(W0,yhe),e(yhe,nYo),e(W0,sYo),e(ur,lYo),e(ur,ft),g(H0,ft,null),e(ft,iYo),e(ft,Lhe),e(Lhe,dYo),e(ft,cYo),e(ft,ic),e(ic,fYo),e(ic,xhe),e(xhe,mYo),e(ic,gYo),e(ic,sO),e(sO,hYo),e(ic,pYo),e(ft,_Yo),e(ft,khe),e(khe,uYo),e(ft,bYo),g(U0,ft,null),e(ur,FYo),e(ur,ao),g(J0,ao,null),e(ao,vYo),e(ao,She),e(She,TYo),e(ao,MYo),e(ao,hn),e(hn,EYo),e(hn,Rhe),e(Rhe,CYo),e(hn,wYo),e(hn,Bhe),e(Bhe,AYo),e(hn,yYo),e(hn,Phe),e(Phe,LYo),e(hn,xYo),e(ao,kYo),e(ao,dc),e(dc,F2),e(F2,$he),e($he,SYo),e(F2,RYo),e(F2,lO),e(lO,BYo),e(F2,PYo),e(dc,$Yo),e(dc,v2),e(v2,Ihe),e(Ihe,IYo),e(v2,qYo),e(v2,iO),e(iO,NYo),e(v2,jYo),e(dc,DYo),e(dc,T2),e(T2,qhe),e(qhe,GYo),e(T2,OYo),e(T2,dO),e(dO,VYo),e(T2,XYo),e(ao,zYo),e(ao,M2),e(M2,QYo),e(M2,Nhe),e(Nhe,WYo),e(M2,HYo),e(M2,jhe),e(jhe,UYo),e(ao,JYo),e(ao,Dhe),e(Dhe,YYo),e(ao,KYo),g(Y0,ao,null),b(c,ABe,u),b(c,cc,u),e(cc,E2),e(E2,Ghe),g(K0,Ghe,null),e(cc,ZYo),e(cc,Ohe),e(Ohe,eKo),b(c,yBe,u),b(c,br,u),g(Z0,br,null),e(br,oKo),e(br,fc),e(fc,rKo),e(fc,cO),e(cO,tKo),e(fc,aKo),e(fc,fO),e(fO,nKo),e(fc,sKo),e(br,lKo),e(br,ey),e(ey,iKo),e(ey,Vhe),e(Vhe,dKo),e(ey,cKo),e(br,fKo),e(br,mt),g(oy,mt,null),e(mt,mKo),e(mt,Xhe),e(Xhe,gKo),e(mt,hKo),e(mt,mc),e(mc,pKo),e(mc,zhe),e(zhe,_Ko),e(mc,uKo),e(mc,mO),e(mO,bKo),e(mc,FKo),e(mt,vKo),e(mt,Qhe),e(Qhe,TKo),e(mt,MKo),g(ry,mt,null),e(br,EKo),e(br,no),g(ty,no,null),e(no,CKo),e(no,Whe),e(Whe,wKo),e(no,AKo),e(no,pn),e(pn,yKo),e(pn,Hhe),e(Hhe,LKo),e(pn,xKo),e(pn,Uhe),e(Uhe,kKo),e(pn,SKo),e(pn,Jhe),e(Jhe,RKo),e(pn,BKo),e(no,PKo),e(no,Yhe),e(Yhe,C2),e(C2,Khe),e(Khe,$Ko),e(C2,IKo),e(C2,gO),e(gO,qKo),e(C2,NKo),e(no,jKo),e(no,w2),e(w2,DKo),e(w2,Zhe),e(Zhe,GKo),e(w2,OKo),e(w2,epe),e(epe,VKo),e(no,XKo),e(no,ope),e(ope,zKo),e(no,QKo),g(ay,no,null),b(c,LBe,u),b(c,gc,u),e(gc,A2),e(A2,rpe),g(ny,rpe,null),e(gc,WKo),e(gc,tpe),e(tpe,HKo),b(c,xBe,u),b(c,Fr,u),g(sy,Fr,null),e(Fr,UKo),e(Fr,hc),e(hc,JKo),e(hc,hO),e(hO,YKo),e(hc,KKo),e(hc,pO),e(pO,ZKo),e(hc,eZo),e(Fr,oZo),e(Fr,ly),e(ly,rZo),e(ly,ape),e(ape,tZo),e(ly,aZo),e(Fr,nZo),e(Fr,gt),g(iy,gt,null),e(gt,sZo),e(gt,npe),e(npe,lZo),e(gt,iZo),e(gt,pc),e(pc,dZo),e(pc,spe),e(spe,cZo),e(pc,fZo),e(pc,_O),e(_O,mZo),e(pc,gZo),e(gt,hZo),e(gt,lpe),e(lpe,pZo),e(gt,_Zo),g(dy,gt,null),e(Fr,uZo),e(Fr,ho),g(cy,ho,null),e(ho,bZo),e(ho,ipe),e(ipe,FZo),e(ho,vZo),e(ho,_n),e(_n,TZo),e(_n,dpe),e(dpe,MZo),e(_n,EZo),e(_n,cpe),e(cpe,CZo),e(_n,wZo),e(_n,fpe),e(fpe,AZo),e(_n,yZo),e(ho,LZo),e(ho,x),e(x,y2),e(y2,mpe),e(mpe,xZo),e(y2,kZo),e(y2,uO),e(uO,SZo),e(y2,RZo),e(x,BZo),e(x,L2),e(L2,gpe),e(gpe,PZo),e(L2,$Zo),e(L2,bO),e(bO,IZo),e(L2,qZo),e(x,NZo),e(x,x2),e(x2,hpe),e(hpe,jZo),e(x2,DZo),e(x2,FO),e(FO,GZo),e(x2,OZo),e(x,VZo),e(x,k2),e(k2,ppe),e(ppe,XZo),e(k2,zZo),e(k2,vO),e(vO,QZo),e(k2,WZo),e(x,HZo),e(x,S2),e(S2,_pe),e(_pe,UZo),e(S2,JZo),e(S2,TO),e(TO,YZo),e(S2,KZo),e(x,ZZo),e(x,R2),e(R2,upe),e(upe,eer),e(R2,oer),e(R2,MO),e(MO,rer),e(R2,ter),e(x,aer),e(x,B2),e(B2,bpe),e(bpe,ner),e(B2,ser),e(B2,EO),e(EO,ler),e(B2,ier),e(x,der),e(x,P2),e(P2,Fpe),e(Fpe,cer),e(P2,fer),e(P2,CO),e(CO,mer),e(P2,ger),e(x,her),e(x,$2),e($2,vpe),e(vpe,per),e($2,_er),e($2,wO),e(wO,uer),e($2,ber),e(x,Fer),e(x,I2),e(I2,Tpe),e(Tpe,ver),e(I2,Ter),e(I2,AO),e(AO,Mer),e(I2,Eer),e(x,Cer),e(x,q2),e(q2,Mpe),e(Mpe,wer),e(q2,Aer),e(q2,yO),e(yO,yer),e(q2,Ler),e(x,xer),e(x,N2),e(N2,Epe),e(Epe,ker),e(N2,Ser),e(N2,LO),e(LO,Rer),e(N2,Ber),e(x,Per),e(x,j2),e(j2,Cpe),e(Cpe,$er),e(j2,Ier),e(j2,xO),e(xO,qer),e(j2,Ner),e(x,jer),e(x,D2),e(D2,wpe),e(wpe,Der),e(D2,Ger),e(D2,kO),e(kO,Oer),e(D2,Ver),e(x,Xer),e(x,G2),e(G2,Ape),e(Ape,zer),e(G2,Qer),e(G2,SO),e(SO,Wer),e(G2,Her),e(x,Uer),e(x,O2),e(O2,ype),e(ype,Jer),e(O2,Yer),e(O2,RO),e(RO,Ker),e(O2,Zer),e(x,eor),e(x,Gs),e(Gs,Lpe),e(Lpe,oor),e(Gs,ror),e(Gs,BO),e(BO,tor),e(Gs,aor),e(Gs,PO),e(PO,nor),e(Gs,sor),e(x,lor),e(x,V2),e(V2,xpe),e(xpe,ior),e(V2,dor),e(V2,$O),e($O,cor),e(V2,mor),e(x,gor),e(x,X2),e(X2,kpe),e(kpe,hor),e(X2,por),e(X2,IO),e(IO,_or),e(X2,uor),e(x,bor),e(x,z2),e(z2,Spe),e(Spe,For),e(z2,vor),e(z2,qO),e(qO,Tor),e(z2,Mor),e(x,Eor),e(x,Q2),e(Q2,Rpe),e(Rpe,Cor),e(Q2,wor),e(Q2,NO),e(NO,Aor),e(Q2,yor),e(x,Lor),e(x,W2),e(W2,Bpe),e(Bpe,xor),e(W2,kor),e(W2,jO),e(jO,Sor),e(W2,Ror),e(x,Bor),e(x,H2),e(H2,Ppe),e(Ppe,Por),e(H2,$or),e(H2,DO),e(DO,Ior),e(H2,qor),e(x,Nor),e(x,U2),e(U2,$pe),e($pe,jor),e(U2,Dor),e(U2,GO),e(GO,Gor),e(U2,Oor),e(x,Vor),e(x,J2),e(J2,Ipe),e(Ipe,Xor),e(J2,zor),e(J2,OO),e(OO,Qor),e(J2,Wor),e(x,Hor),e(x,Y2),e(Y2,qpe),e(qpe,Uor),e(Y2,Jor),e(Y2,VO),e(VO,Yor),e(Y2,Kor),e(x,Zor),e(x,K2),e(K2,Npe),e(Npe,err),e(K2,orr),e(K2,XO),e(XO,rrr),e(K2,trr),e(x,arr),e(x,Z2),e(Z2,jpe),e(jpe,nrr),e(Z2,srr),e(Z2,zO),e(zO,lrr),e(Z2,irr),e(x,drr),e(x,eF),e(eF,Dpe),e(Dpe,crr),e(eF,frr),e(eF,QO),e(QO,mrr),e(eF,grr),e(x,hrr),e(x,oF),e(oF,Gpe),e(Gpe,prr),e(oF,_rr),e(oF,WO),e(WO,urr),e(oF,brr),e(x,Frr),e(x,rF),e(rF,Ope),e(Ope,vrr),e(rF,Trr),e(rF,HO),e(HO,Mrr),e(rF,Err),e(x,Crr),e(x,tF),e(tF,Vpe),e(Vpe,wrr),e(tF,Arr),e(tF,UO),e(UO,yrr),e(tF,Lrr),e(x,xrr),e(x,aF),e(aF,Xpe),e(Xpe,krr),e(aF,Srr),e(aF,JO),e(JO,Rrr),e(aF,Brr),e(x,Prr),e(x,nF),e(nF,zpe),e(zpe,$rr),e(nF,Irr),e(nF,YO),e(YO,qrr),e(nF,Nrr),e(x,jrr),e(x,sF),e(sF,Qpe),e(Qpe,Drr),e(sF,Grr),e(sF,KO),e(KO,Orr),e(sF,Vrr),e(x,Xrr),e(x,lF),e(lF,Wpe),e(Wpe,zrr),e(lF,Qrr),e(lF,ZO),e(ZO,Wrr),e(lF,Hrr),e(x,Urr),e(x,iF),e(iF,Hpe),e(Hpe,Jrr),e(iF,Yrr),e(iF,eV),e(eV,Krr),e(iF,Zrr),e(x,etr),e(x,dF),e(dF,Upe),e(Upe,otr),e(dF,rtr),e(dF,oV),e(oV,ttr),e(dF,atr),e(x,ntr),e(x,cF),e(cF,Jpe),e(Jpe,str),e(cF,ltr),e(cF,rV),e(rV,itr),e(cF,dtr),e(x,ctr),e(x,fF),e(fF,Ype),e(Ype,ftr),e(fF,mtr),e(fF,tV),e(tV,gtr),e(fF,htr),e(x,ptr),e(x,mF),e(mF,Kpe),e(Kpe,_tr),e(mF,utr),e(mF,aV),e(aV,btr),e(mF,Ftr),e(x,vtr),e(x,gF),e(gF,Zpe),e(Zpe,Ttr),e(gF,Mtr),e(gF,nV),e(nV,Etr),e(gF,Ctr),e(x,wtr),e(x,hF),e(hF,e_e),e(e_e,Atr),e(hF,ytr),e(hF,sV),e(sV,Ltr),e(hF,xtr),e(x,ktr),e(x,pF),e(pF,o_e),e(o_e,Str),e(pF,Rtr),e(pF,lV),e(lV,Btr),e(pF,Ptr),e(x,$tr),e(x,_F),e(_F,r_e),e(r_e,Itr),e(_F,qtr),e(_F,iV),e(iV,Ntr),e(_F,jtr),e(ho,Dtr),e(ho,t_e),e(t_e,Gtr),e(ho,Otr),g(fy,ho,null),b(c,kBe,u),b(c,_c,u),e(_c,uF),e(uF,a_e),g(my,a_e,null),e(_c,Vtr),e(_c,n_e),e(n_e,Xtr),b(c,SBe,u),b(c,vr,u),g(gy,vr,null),e(vr,ztr),e(vr,uc),e(uc,Qtr),e(uc,dV),e(dV,Wtr),e(uc,Htr),e(uc,cV),e(cV,Utr),e(uc,Jtr),e(vr,Ytr),e(vr,hy),e(hy,Ktr),e(hy,s_e),e(s_e,Ztr),e(hy,ear),e(vr,oar),e(vr,ht),g(py,ht,null),e(ht,rar),e(ht,l_e),e(l_e,tar),e(ht,aar),e(ht,bc),e(bc,nar),e(bc,i_e),e(i_e,sar),e(bc,lar),e(bc,fV),e(fV,iar),e(bc,dar),e(ht,car),e(ht,d_e),e(d_e,far),e(ht,mar),g(_y,ht,null),e(vr,gar),e(vr,po),g(uy,po,null),e(po,har),e(po,c_e),e(c_e,par),e(po,_ar),e(po,un),e(un,uar),e(un,f_e),e(f_e,bar),e(un,Far),e(un,m_e),e(m_e,Tar),e(un,Mar),e(un,g_e),e(g_e,Ear),e(un,Car),e(po,war),e(po,H),e(H,bF),e(bF,h_e),e(h_e,Aar),e(bF,yar),e(bF,mV),e(mV,Lar),e(bF,xar),e(H,kar),e(H,FF),e(FF,p_e),e(p_e,Sar),e(FF,Rar),e(FF,gV),e(gV,Bar),e(FF,Par),e(H,$ar),e(H,vF),e(vF,__e),e(__e,Iar),e(vF,qar),e(vF,hV),e(hV,Nar),e(vF,jar),e(H,Dar),e(H,TF),e(TF,u_e),e(u_e,Gar),e(TF,Oar),e(TF,pV),e(pV,Var),e(TF,Xar),e(H,zar),e(H,MF),e(MF,b_e),e(b_e,Qar),e(MF,War),e(MF,_V),e(_V,Har),e(MF,Uar),e(H,Jar),e(H,EF),e(EF,F_e),e(F_e,Yar),e(EF,Kar),e(EF,uV),e(uV,Zar),e(EF,enr),e(H,onr),e(H,CF),e(CF,v_e),e(v_e,rnr),e(CF,tnr),e(CF,bV),e(bV,anr),e(CF,nnr),e(H,snr),e(H,wF),e(wF,T_e),e(T_e,lnr),e(wF,inr),e(wF,FV),e(FV,dnr),e(wF,cnr),e(H,fnr),e(H,AF),e(AF,M_e),e(M_e,mnr),e(AF,gnr),e(AF,vV),e(vV,hnr),e(AF,pnr),e(H,_nr),e(H,yF),e(yF,E_e),e(E_e,unr),e(yF,bnr),e(yF,TV),e(TV,Fnr),e(yF,vnr),e(H,Tnr),e(H,LF),e(LF,C_e),e(C_e,Mnr),e(LF,Enr),e(LF,MV),e(MV,Cnr),e(LF,wnr),e(H,Anr),e(H,xF),e(xF,w_e),e(w_e,ynr),e(xF,Lnr),e(xF,EV),e(EV,xnr),e(xF,knr),e(H,Snr),e(H,kF),e(kF,A_e),e(A_e,Rnr),e(kF,Bnr),e(kF,CV),e(CV,Pnr),e(kF,$nr),e(H,Inr),e(H,SF),e(SF,y_e),e(y_e,qnr),e(SF,Nnr),e(SF,wV),e(wV,jnr),e(SF,Dnr),e(H,Gnr),e(H,RF),e(RF,L_e),e(L_e,Onr),e(RF,Vnr),e(RF,AV),e(AV,Xnr),e(RF,znr),e(H,Qnr),e(H,BF),e(BF,x_e),e(x_e,Wnr),e(BF,Hnr),e(BF,yV),e(yV,Unr),e(BF,Jnr),e(H,Ynr),e(H,PF),e(PF,k_e),e(k_e,Knr),e(PF,Znr),e(PF,LV),e(LV,esr),e(PF,osr),e(H,rsr),e(H,$F),e($F,S_e),e(S_e,tsr),e($F,asr),e($F,xV),e(xV,nsr),e($F,ssr),e(H,lsr),e(H,IF),e(IF,R_e),e(R_e,isr),e(IF,dsr),e(IF,kV),e(kV,csr),e(IF,fsr),e(H,msr),e(H,qF),e(qF,B_e),e(B_e,gsr),e(qF,hsr),e(qF,SV),e(SV,psr),e(qF,_sr),e(H,usr),e(H,NF),e(NF,P_e),e(P_e,bsr),e(NF,Fsr),e(NF,RV),e(RV,vsr),e(NF,Tsr),e(H,Msr),e(H,jF),e(jF,$_e),e($_e,Esr),e(jF,Csr),e(jF,BV),e(BV,wsr),e(jF,Asr),e(H,ysr),e(H,DF),e(DF,I_e),e(I_e,Lsr),e(DF,xsr),e(DF,PV),e(PV,ksr),e(DF,Ssr),e(po,Rsr),e(po,q_e),e(q_e,Bsr),e(po,Psr),g(by,po,null),b(c,RBe,u),b(c,Fc,u),e(Fc,GF),e(GF,N_e),g(Fy,N_e,null),e(Fc,$sr),e(Fc,j_e),e(j_e,Isr),b(c,BBe,u),b(c,Tr,u),g(vy,Tr,null),e(Tr,qsr),e(Tr,vc),e(vc,Nsr),e(vc,$V),e($V,jsr),e(vc,Dsr),e(vc,IV),e(IV,Gsr),e(vc,Osr),e(Tr,Vsr),e(Tr,Ty),e(Ty,Xsr),e(Ty,D_e),e(D_e,zsr),e(Ty,Qsr),e(Tr,Wsr),e(Tr,pt),g(My,pt,null),e(pt,Hsr),e(pt,G_e),e(G_e,Usr),e(pt,Jsr),e(pt,Tc),e(Tc,Ysr),e(Tc,O_e),e(O_e,Ksr),e(Tc,Zsr),e(Tc,qV),e(qV,elr),e(Tc,olr),e(pt,rlr),e(pt,V_e),e(V_e,tlr),e(pt,alr),g(Ey,pt,null),e(Tr,nlr),e(Tr,_o),g(Cy,_o,null),e(_o,slr),e(_o,X_e),e(X_e,llr),e(_o,ilr),e(_o,bn),e(bn,dlr),e(bn,z_e),e(z_e,clr),e(bn,flr),e(bn,Q_e),e(Q_e,mlr),e(bn,glr),e(bn,W_e),e(W_e,hlr),e(bn,plr),e(_o,_lr),e(_o,de),e(de,OF),e(OF,H_e),e(H_e,ulr),e(OF,blr),e(OF,NV),e(NV,Flr),e(OF,vlr),e(de,Tlr),e(de,VF),e(VF,U_e),e(U_e,Mlr),e(VF,Elr),e(VF,jV),e(jV,Clr),e(VF,wlr),e(de,Alr),e(de,XF),e(XF,J_e),e(J_e,ylr),e(XF,Llr),e(XF,DV),e(DV,xlr),e(XF,klr),e(de,Slr),e(de,zF),e(zF,Y_e),e(Y_e,Rlr),e(zF,Blr),e(zF,GV),e(GV,Plr),e(zF,$lr),e(de,Ilr),e(de,QF),e(QF,K_e),e(K_e,qlr),e(QF,Nlr),e(QF,OV),e(OV,jlr),e(QF,Dlr),e(de,Glr),e(de,WF),e(WF,Z_e),e(Z_e,Olr),e(WF,Vlr),e(WF,VV),e(VV,Xlr),e(WF,zlr),e(de,Qlr),e(de,HF),e(HF,eue),e(eue,Wlr),e(HF,Hlr),e(HF,XV),e(XV,Ulr),e(HF,Jlr),e(de,Ylr),e(de,UF),e(UF,oue),e(oue,Klr),e(UF,Zlr),e(UF,zV),e(zV,eir),e(UF,oir),e(de,rir),e(de,JF),e(JF,rue),e(rue,tir),e(JF,air),e(JF,QV),e(QV,nir),e(JF,sir),e(de,lir),e(de,YF),e(YF,tue),e(tue,iir),e(YF,dir),e(YF,WV),e(WV,cir),e(YF,fir),e(de,mir),e(de,KF),e(KF,aue),e(aue,gir),e(KF,hir),e(KF,HV),e(HV,pir),e(KF,_ir),e(de,uir),e(de,ZF),e(ZF,nue),e(nue,bir),e(ZF,Fir),e(ZF,UV),e(UV,vir),e(ZF,Tir),e(de,Mir),e(de,ev),e(ev,sue),e(sue,Eir),e(ev,Cir),e(ev,JV),e(JV,wir),e(ev,Air),e(_o,yir),e(_o,lue),e(lue,Lir),e(_o,xir),g(wy,_o,null),b(c,PBe,u),b(c,Mc,u),e(Mc,ov),e(ov,iue),g(Ay,iue,null),e(Mc,kir),e(Mc,due),e(due,Sir),b(c,$Be,u),b(c,Mr,u),g(yy,Mr,null),e(Mr,Rir),e(Mr,Ec),e(Ec,Bir),e(Ec,YV),e(YV,Pir),e(Ec,$ir),e(Ec,KV),e(KV,Iir),e(Ec,qir),e(Mr,Nir),e(Mr,Ly),e(Ly,jir),e(Ly,cue),e(cue,Dir),e(Ly,Gir),e(Mr,Oir),e(Mr,_t),g(xy,_t,null),e(_t,Vir),e(_t,fue),e(fue,Xir),e(_t,zir),e(_t,Cc),e(Cc,Qir),e(Cc,mue),e(mue,Wir),e(Cc,Hir),e(Cc,ZV),e(ZV,Uir),e(Cc,Jir),e(_t,Yir),e(_t,gue),e(gue,Kir),e(_t,Zir),g(ky,_t,null),e(Mr,edr),e(Mr,uo),g(Sy,uo,null),e(uo,odr),e(uo,hue),e(hue,rdr),e(uo,tdr),e(uo,Fn),e(Fn,adr),e(Fn,pue),e(pue,ndr),e(Fn,sdr),e(Fn,_ue),e(_ue,ldr),e(Fn,idr),e(Fn,uue),e(uue,ddr),e(Fn,cdr),e(uo,fdr),e(uo,Ry),e(Ry,rv),e(rv,bue),e(bue,mdr),e(rv,gdr),e(rv,eX),e(eX,hdr),e(rv,pdr),e(Ry,_dr),e(Ry,tv),e(tv,Fue),e(Fue,udr),e(tv,bdr),e(tv,oX),e(oX,Fdr),e(tv,vdr),e(uo,Tdr),e(uo,vue),e(vue,Mdr),e(uo,Edr),g(By,uo,null),b(c,IBe,u),b(c,wc,u),e(wc,av),e(av,Tue),g(Py,Tue,null),e(wc,Cdr),e(wc,Mue),e(Mue,wdr),b(c,qBe,u),b(c,Er,u),g($y,Er,null),e(Er,Adr),e(Er,Ac),e(Ac,ydr),e(Ac,rX),e(rX,Ldr),e(Ac,xdr),e(Ac,tX),e(tX,kdr),e(Ac,Sdr),e(Er,Rdr),e(Er,Iy),e(Iy,Bdr),e(Iy,Eue),e(Eue,Pdr),e(Iy,$dr),e(Er,Idr),e(Er,ut),g(qy,ut,null),e(ut,qdr),e(ut,Cue),e(Cue,Ndr),e(ut,jdr),e(ut,yc),e(yc,Ddr),e(yc,wue),e(wue,Gdr),e(yc,Odr),e(yc,aX),e(aX,Vdr),e(yc,Xdr),e(ut,zdr),e(ut,Aue),e(Aue,Qdr),e(ut,Wdr),g(Ny,ut,null),e(Er,Hdr),e(Er,bo),g(jy,bo,null),e(bo,Udr),e(bo,yue),e(yue,Jdr),e(bo,Ydr),e(bo,vn),e(vn,Kdr),e(vn,Lue),e(Lue,Zdr),e(vn,ecr),e(vn,xue),e(xue,ocr),e(vn,rcr),e(vn,kue),e(kue,tcr),e(vn,acr),e(bo,ncr),e(bo,J),e(J,nv),e(nv,Sue),e(Sue,scr),e(nv,lcr),e(nv,nX),e(nX,icr),e(nv,dcr),e(J,ccr),e(J,sv),e(sv,Rue),e(Rue,fcr),e(sv,mcr),e(sv,sX),e(sX,gcr),e(sv,hcr),e(J,pcr),e(J,lv),e(lv,Bue),e(Bue,_cr),e(lv,ucr),e(lv,lX),e(lX,bcr),e(lv,Fcr),e(J,vcr),e(J,iv),e(iv,Pue),e(Pue,Tcr),e(iv,Mcr),e(iv,iX),e(iX,Ecr),e(iv,Ccr),e(J,wcr),e(J,dv),e(dv,$ue),e($ue,Acr),e(dv,ycr),e(dv,dX),e(dX,Lcr),e(dv,xcr),e(J,kcr),e(J,cv),e(cv,Iue),e(Iue,Scr),e(cv,Rcr),e(cv,cX),e(cX,Bcr),e(cv,Pcr),e(J,$cr),e(J,fv),e(fv,que),e(que,Icr),e(fv,qcr),e(fv,fX),e(fX,Ncr),e(fv,jcr),e(J,Dcr),e(J,mv),e(mv,Nue),e(Nue,Gcr),e(mv,Ocr),e(mv,mX),e(mX,Vcr),e(mv,Xcr),e(J,zcr),e(J,gv),e(gv,jue),e(jue,Qcr),e(gv,Wcr),e(gv,gX),e(gX,Hcr),e(gv,Ucr),e(J,Jcr),e(J,hv),e(hv,Due),e(Due,Ycr),e(hv,Kcr),e(hv,hX),e(hX,Zcr),e(hv,efr),e(J,ofr),e(J,pv),e(pv,Gue),e(Gue,rfr),e(pv,tfr),e(pv,pX),e(pX,afr),e(pv,nfr),e(J,sfr),e(J,_v),e(_v,Oue),e(Oue,lfr),e(_v,ifr),e(_v,_X),e(_X,dfr),e(_v,cfr),e(J,ffr),e(J,uv),e(uv,Vue),e(Vue,mfr),e(uv,gfr),e(uv,uX),e(uX,hfr),e(uv,pfr),e(J,_fr),e(J,bv),e(bv,Xue),e(Xue,ufr),e(bv,bfr),e(bv,bX),e(bX,Ffr),e(bv,vfr),e(J,Tfr),e(J,Fv),e(Fv,zue),e(zue,Mfr),e(Fv,Efr),e(Fv,FX),e(FX,Cfr),e(Fv,wfr),e(J,Afr),e(J,vv),e(vv,Que),e(Que,yfr),e(vv,Lfr),e(vv,vX),e(vX,xfr),e(vv,kfr),e(J,Sfr),e(J,Tv),e(Tv,Wue),e(Wue,Rfr),e(Tv,Bfr),e(Tv,TX),e(TX,Pfr),e(Tv,$fr),e(J,Ifr),e(J,Mv),e(Mv,Hue),e(Hue,qfr),e(Mv,Nfr),e(Mv,MX),e(MX,jfr),e(Mv,Dfr),e(J,Gfr),e(J,Ev),e(Ev,Uue),e(Uue,Ofr),e(Ev,Vfr),e(Ev,EX),e(EX,Xfr),e(Ev,zfr),e(J,Qfr),e(J,Cv),e(Cv,Jue),e(Jue,Wfr),e(Cv,Hfr),e(Cv,CX),e(CX,Ufr),e(Cv,Jfr),e(bo,Yfr),e(bo,Yue),e(Yue,Kfr),e(bo,Zfr),g(Dy,bo,null),b(c,NBe,u),b(c,Lc,u),e(Lc,wv),e(wv,Kue),g(Gy,Kue,null),e(Lc,emr),e(Lc,Zue),e(Zue,omr),b(c,jBe,u),b(c,Cr,u),g(Oy,Cr,null),e(Cr,rmr),e(Cr,xc),e(xc,tmr),e(xc,wX),e(wX,amr),e(xc,nmr),e(xc,AX),e(AX,smr),e(xc,lmr),e(Cr,imr),e(Cr,Vy),e(Vy,dmr),e(Vy,e1e),e(e1e,cmr),e(Vy,fmr),e(Cr,mmr),e(Cr,bt),g(Xy,bt,null),e(bt,gmr),e(bt,o1e),e(o1e,hmr),e(bt,pmr),e(bt,kc),e(kc,_mr),e(kc,r1e),e(r1e,umr),e(kc,bmr),e(kc,yX),e(yX,Fmr),e(kc,vmr),e(bt,Tmr),e(bt,t1e),e(t1e,Mmr),e(bt,Emr),g(zy,bt,null),e(Cr,Cmr),e(Cr,Fo),g(Qy,Fo,null),e(Fo,wmr),e(Fo,a1e),e(a1e,Amr),e(Fo,ymr),e(Fo,Tn),e(Tn,Lmr),e(Tn,n1e),e(n1e,xmr),e(Tn,kmr),e(Tn,s1e),e(s1e,Smr),e(Tn,Rmr),e(Tn,l1e),e(l1e,Bmr),e(Tn,Pmr),e(Fo,$mr),e(Fo,be),e(be,Av),e(Av,i1e),e(i1e,Imr),e(Av,qmr),e(Av,LX),e(LX,Nmr),e(Av,jmr),e(be,Dmr),e(be,yv),e(yv,d1e),e(d1e,Gmr),e(yv,Omr),e(yv,xX),e(xX,Vmr),e(yv,Xmr),e(be,zmr),e(be,Lv),e(Lv,c1e),e(c1e,Qmr),e(Lv,Wmr),e(Lv,kX),e(kX,Hmr),e(Lv,Umr),e(be,Jmr),e(be,xv),e(xv,f1e),e(f1e,Ymr),e(xv,Kmr),e(xv,SX),e(SX,Zmr),e(xv,egr),e(be,ogr),e(be,kv),e(kv,m1e),e(m1e,rgr),e(kv,tgr),e(kv,RX),e(RX,agr),e(kv,ngr),e(be,sgr),e(be,Sv),e(Sv,g1e),e(g1e,lgr),e(Sv,igr),e(Sv,BX),e(BX,dgr),e(Sv,cgr),e(be,fgr),e(be,Rv),e(Rv,h1e),e(h1e,mgr),e(Rv,ggr),e(Rv,PX),e(PX,hgr),e(Rv,pgr),e(be,_gr),e(be,Bv),e(Bv,p1e),e(p1e,ugr),e(Bv,bgr),e(Bv,$X),e($X,Fgr),e(Bv,vgr),e(be,Tgr),e(be,Pv),e(Pv,_1e),e(_1e,Mgr),e(Pv,Egr),e(Pv,IX),e(IX,Cgr),e(Pv,wgr),e(be,Agr),e(be,$v),e($v,u1e),e(u1e,ygr),e($v,Lgr),e($v,qX),e(qX,xgr),e($v,kgr),e(Fo,Sgr),e(Fo,b1e),e(b1e,Rgr),e(Fo,Bgr),g(Wy,Fo,null),b(c,DBe,u),b(c,Sc,u),e(Sc,Iv),e(Iv,F1e),g(Hy,F1e,null),e(Sc,Pgr),e(Sc,v1e),e(v1e,$gr),b(c,GBe,u),b(c,wr,u),g(Uy,wr,null),e(wr,Igr),e(wr,Rc),e(Rc,qgr),e(Rc,NX),e(NX,Ngr),e(Rc,jgr),e(Rc,jX),e(jX,Dgr),e(Rc,Ggr),e(wr,Ogr),e(wr,Jy),e(Jy,Vgr),e(Jy,T1e),e(T1e,Xgr),e(Jy,zgr),e(wr,Qgr),e(wr,Ft),g(Yy,Ft,null),e(Ft,Wgr),e(Ft,M1e),e(M1e,Hgr),e(Ft,Ugr),e(Ft,Bc),e(Bc,Jgr),e(Bc,E1e),e(E1e,Ygr),e(Bc,Kgr),e(Bc,DX),e(DX,Zgr),e(Bc,ehr),e(Ft,ohr),e(Ft,C1e),e(C1e,rhr),e(Ft,thr),g(Ky,Ft,null),e(wr,ahr),e(wr,vo),g(Zy,vo,null),e(vo,nhr),e(vo,w1e),e(w1e,shr),e(vo,lhr),e(vo,Mn),e(Mn,ihr),e(Mn,A1e),e(A1e,dhr),e(Mn,chr),e(Mn,y1e),e(y1e,fhr),e(Mn,mhr),e(Mn,L1e),e(L1e,ghr),e(Mn,hhr),e(vo,phr),e(vo,V),e(V,qv),e(qv,x1e),e(x1e,_hr),e(qv,uhr),e(qv,GX),e(GX,bhr),e(qv,Fhr),e(V,vhr),e(V,Nv),e(Nv,k1e),e(k1e,Thr),e(Nv,Mhr),e(Nv,OX),e(OX,Ehr),e(Nv,Chr),e(V,whr),e(V,jv),e(jv,S1e),e(S1e,Ahr),e(jv,yhr),e(jv,VX),e(VX,Lhr),e(jv,xhr),e(V,khr),e(V,Dv),e(Dv,R1e),e(R1e,Shr),e(Dv,Rhr),e(Dv,XX),e(XX,Bhr),e(Dv,Phr),e(V,$hr),e(V,Gv),e(Gv,B1e),e(B1e,Ihr),e(Gv,qhr),e(Gv,zX),e(zX,Nhr),e(Gv,jhr),e(V,Dhr),e(V,Ov),e(Ov,P1e),e(P1e,Ghr),e(Ov,Ohr),e(Ov,QX),e(QX,Vhr),e(Ov,Xhr),e(V,zhr),e(V,Vv),e(Vv,$1e),e($1e,Qhr),e(Vv,Whr),e(Vv,WX),e(WX,Hhr),e(Vv,Uhr),e(V,Jhr),e(V,Xv),e(Xv,I1e),e(I1e,Yhr),e(Xv,Khr),e(Xv,HX),e(HX,Zhr),e(Xv,epr),e(V,opr),e(V,zv),e(zv,q1e),e(q1e,rpr),e(zv,tpr),e(zv,UX),e(UX,apr),e(zv,npr),e(V,spr),e(V,Qv),e(Qv,N1e),e(N1e,lpr),e(Qv,ipr),e(Qv,JX),e(JX,dpr),e(Qv,cpr),e(V,fpr),e(V,Wv),e(Wv,j1e),e(j1e,mpr),e(Wv,gpr),e(Wv,YX),e(YX,hpr),e(Wv,ppr),e(V,_pr),e(V,Hv),e(Hv,D1e),e(D1e,upr),e(Hv,bpr),e(Hv,KX),e(KX,Fpr),e(Hv,vpr),e(V,Tpr),e(V,Uv),e(Uv,G1e),e(G1e,Mpr),e(Uv,Epr),e(Uv,ZX),e(ZX,Cpr),e(Uv,wpr),e(V,Apr),e(V,Jv),e(Jv,O1e),e(O1e,ypr),e(Jv,Lpr),e(Jv,ez),e(ez,xpr),e(Jv,kpr),e(V,Spr),e(V,Yv),e(Yv,V1e),e(V1e,Rpr),e(Yv,Bpr),e(Yv,oz),e(oz,Ppr),e(Yv,$pr),e(V,Ipr),e(V,Kv),e(Kv,X1e),e(X1e,qpr),e(Kv,Npr),e(Kv,rz),e(rz,jpr),e(Kv,Dpr),e(V,Gpr),e(V,Zv),e(Zv,z1e),e(z1e,Opr),e(Zv,Vpr),e(Zv,tz),e(tz,Xpr),e(Zv,zpr),e(V,Qpr),e(V,e6),e(e6,Q1e),e(Q1e,Wpr),e(e6,Hpr),e(e6,az),e(az,Upr),e(e6,Jpr),e(V,Ypr),e(V,o6),e(o6,W1e),e(W1e,Kpr),e(o6,Zpr),e(o6,nz),e(nz,e_r),e(o6,o_r),e(V,r_r),e(V,r6),e(r6,H1e),e(H1e,t_r),e(r6,a_r),e(r6,sz),e(sz,n_r),e(r6,s_r),e(V,l_r),e(V,t6),e(t6,U1e),e(U1e,i_r),e(t6,d_r),e(t6,lz),e(lz,c_r),e(t6,f_r),e(V,m_r),e(V,a6),e(a6,J1e),e(J1e,g_r),e(a6,h_r),e(a6,iz),e(iz,p_r),e(a6,__r),e(V,u_r),e(V,n6),e(n6,Y1e),e(Y1e,b_r),e(n6,F_r),e(n6,dz),e(dz,v_r),e(n6,T_r),e(V,M_r),e(V,s6),e(s6,K1e),e(K1e,E_r),e(s6,C_r),e(s6,cz),e(cz,w_r),e(s6,A_r),e(V,y_r),e(V,l6),e(l6,Z1e),e(Z1e,L_r),e(l6,x_r),e(l6,fz),e(fz,k_r),e(l6,S_r),e(V,R_r),e(V,i6),e(i6,e4e),e(e4e,B_r),e(i6,P_r),e(i6,mz),e(mz,$_r),e(i6,I_r),e(vo,q_r),e(vo,o4e),e(o4e,N_r),e(vo,j_r),g(eL,vo,null),b(c,OBe,u),b(c,Pc,u),e(Pc,d6),e(d6,r4e),g(oL,r4e,null),e(Pc,D_r),e(Pc,t4e),e(t4e,G_r),b(c,VBe,u),b(c,Ar,u),g(rL,Ar,null),e(Ar,O_r),e(Ar,$c),e($c,V_r),e($c,gz),e(gz,X_r),e($c,z_r),e($c,hz),e(hz,Q_r),e($c,W_r),e(Ar,H_r),e(Ar,tL),e(tL,U_r),e(tL,a4e),e(a4e,J_r),e(tL,Y_r),e(Ar,K_r),e(Ar,vt),g(aL,vt,null),e(vt,Z_r),e(vt,n4e),e(n4e,eur),e(vt,our),e(vt,Ic),e(Ic,rur),e(Ic,s4e),e(s4e,tur),e(Ic,aur),e(Ic,pz),e(pz,nur),e(Ic,sur),e(vt,lur),e(vt,l4e),e(l4e,iur),e(vt,dur),g(nL,vt,null),e(Ar,cur),e(Ar,To),g(sL,To,null),e(To,fur),e(To,i4e),e(i4e,mur),e(To,gur),e(To,En),e(En,hur),e(En,d4e),e(d4e,pur),e(En,_ur),e(En,c4e),e(c4e,uur),e(En,bur),e(En,f4e),e(f4e,Fur),e(En,vur),e(To,Tur),e(To,se),e(se,c6),e(c6,m4e),e(m4e,Mur),e(c6,Eur),e(c6,_z),e(_z,Cur),e(c6,wur),e(se,Aur),e(se,f6),e(f6,g4e),e(g4e,yur),e(f6,Lur),e(f6,uz),e(uz,xur),e(f6,kur),e(se,Sur),e(se,m6),e(m6,h4e),e(h4e,Rur),e(m6,Bur),e(m6,bz),e(bz,Pur),e(m6,$ur),e(se,Iur),e(se,g6),e(g6,p4e),e(p4e,qur),e(g6,Nur),e(g6,Fz),e(Fz,jur),e(g6,Dur),e(se,Gur),e(se,h6),e(h6,_4e),e(_4e,Our),e(h6,Vur),e(h6,vz),e(vz,Xur),e(h6,zur),e(se,Qur),e(se,p6),e(p6,u4e),e(u4e,Wur),e(p6,Hur),e(p6,Tz),e(Tz,Uur),e(p6,Jur),e(se,Yur),e(se,_6),e(_6,b4e),e(b4e,Kur),e(_6,Zur),e(_6,Mz),e(Mz,e1r),e(_6,o1r),e(se,r1r),e(se,u6),e(u6,F4e),e(F4e,t1r),e(u6,a1r),e(u6,Ez),e(Ez,n1r),e(u6,s1r),e(se,l1r),e(se,b6),e(b6,v4e),e(v4e,i1r),e(b6,d1r),e(b6,Cz),e(Cz,c1r),e(b6,f1r),e(se,m1r),e(se,F6),e(F6,T4e),e(T4e,g1r),e(F6,h1r),e(F6,wz),e(wz,p1r),e(F6,_1r),e(se,u1r),e(se,v6),e(v6,M4e),e(M4e,b1r),e(v6,F1r),e(v6,Az),e(Az,v1r),e(v6,T1r),e(se,M1r),e(se,T6),e(T6,E4e),e(E4e,E1r),e(T6,C1r),e(T6,yz),e(yz,w1r),e(T6,A1r),e(se,y1r),e(se,M6),e(M6,C4e),e(C4e,L1r),e(M6,x1r),e(M6,Lz),e(Lz,k1r),e(M6,S1r),e(se,R1r),e(se,E6),e(E6,w4e),e(w4e,B1r),e(E6,P1r),e(E6,xz),e(xz,$1r),e(E6,I1r),e(se,q1r),e(se,C6),e(C6,A4e),e(A4e,N1r),e(C6,j1r),e(C6,kz),e(kz,D1r),e(C6,G1r),e(se,O1r),e(se,w6),e(w6,y4e),e(y4e,V1r),e(w6,X1r),e(w6,Sz),e(Sz,z1r),e(w6,Q1r),e(se,W1r),e(se,A6),e(A6,L4e),e(L4e,H1r),e(A6,U1r),e(A6,Rz),e(Rz,J1r),e(A6,Y1r),e(To,K1r),e(To,x4e),e(x4e,Z1r),e(To,e4r),g(lL,To,null),b(c,XBe,u),b(c,qc,u),e(qc,y6),e(y6,k4e),g(iL,k4e,null),e(qc,o4r),e(qc,S4e),e(S4e,r4r),b(c,zBe,u),b(c,yr,u),g(dL,yr,null),e(yr,t4r),e(yr,Nc),e(Nc,a4r),e(Nc,Bz),e(Bz,n4r),e(Nc,s4r),e(Nc,Pz),e(Pz,l4r),e(Nc,i4r),e(yr,d4r),e(yr,cL),e(cL,c4r),e(cL,R4e),e(R4e,f4r),e(cL,m4r),e(yr,g4r),e(yr,Tt),g(fL,Tt,null),e(Tt,h4r),e(Tt,B4e),e(B4e,p4r),e(Tt,_4r),e(Tt,jc),e(jc,u4r),e(jc,P4e),e(P4e,b4r),e(jc,F4r),e(jc,$z),e($z,v4r),e(jc,T4r),e(Tt,M4r),e(Tt,$4e),e($4e,E4r),e(Tt,C4r),g(mL,Tt,null),e(yr,w4r),e(yr,Mo),g(gL,Mo,null),e(Mo,A4r),e(Mo,I4e),e(I4e,y4r),e(Mo,L4r),e(Mo,Cn),e(Cn,x4r),e(Cn,q4e),e(q4e,k4r),e(Cn,S4r),e(Cn,N4e),e(N4e,R4r),e(Cn,B4r),e(Cn,j4e),e(j4e,P4r),e(Cn,$4r),e(Mo,I4r),e(Mo,D4e),e(D4e,L6),e(L6,G4e),e(G4e,q4r),e(L6,N4r),e(L6,Iz),e(Iz,j4r),e(L6,D4r),e(Mo,G4r),e(Mo,O4e),e(O4e,O4r),e(Mo,V4r),g(hL,Mo,null),b(c,QBe,u),b(c,Dc,u),e(Dc,x6),e(x6,V4e),g(pL,V4e,null),e(Dc,X4r),e(Dc,X4e),e(X4e,z4r),b(c,WBe,u),b(c,Lr,u),g(_L,Lr,null),e(Lr,Q4r),e(Lr,Gc),e(Gc,W4r),e(Gc,qz),e(qz,H4r),e(Gc,U4r),e(Gc,Nz),e(Nz,J4r),e(Gc,Y4r),e(Lr,K4r),e(Lr,uL),e(uL,Z4r),e(uL,z4e),e(z4e,ebr),e(uL,obr),e(Lr,rbr),e(Lr,Mt),g(bL,Mt,null),e(Mt,tbr),e(Mt,Q4e),e(Q4e,abr),e(Mt,nbr),e(Mt,Oc),e(Oc,sbr),e(Oc,W4e),e(W4e,lbr),e(Oc,ibr),e(Oc,jz),e(jz,dbr),e(Oc,cbr),e(Mt,fbr),e(Mt,H4e),e(H4e,mbr),e(Mt,gbr),g(FL,Mt,null),e(Lr,hbr),e(Lr,Eo),g(vL,Eo,null),e(Eo,pbr),e(Eo,U4e),e(U4e,_br),e(Eo,ubr),e(Eo,wn),e(wn,bbr),e(wn,J4e),e(J4e,Fbr),e(wn,vbr),e(wn,Y4e),e(Y4e,Tbr),e(wn,Mbr),e(wn,K4e),e(K4e,Ebr),e(wn,Cbr),e(Eo,wbr),e(Eo,Y),e(Y,k6),e(k6,Z4e),e(Z4e,Abr),e(k6,ybr),e(k6,Dz),e(Dz,Lbr),e(k6,xbr),e(Y,kbr),e(Y,S6),e(S6,ebe),e(ebe,Sbr),e(S6,Rbr),e(S6,Gz),e(Gz,Bbr),e(S6,Pbr),e(Y,$br),e(Y,R6),e(R6,obe),e(obe,Ibr),e(R6,qbr),e(R6,Oz),e(Oz,Nbr),e(R6,jbr),e(Y,Dbr),e(Y,B6),e(B6,rbe),e(rbe,Gbr),e(B6,Obr),e(B6,Vz),e(Vz,Vbr),e(B6,Xbr),e(Y,zbr),e(Y,P6),e(P6,tbe),e(tbe,Qbr),e(P6,Wbr),e(P6,Xz),e(Xz,Hbr),e(P6,Ubr),e(Y,Jbr),e(Y,$6),e($6,abe),e(abe,Ybr),e($6,Kbr),e($6,zz),e(zz,Zbr),e($6,e5r),e(Y,o5r),e(Y,I6),e(I6,nbe),e(nbe,r5r),e(I6,t5r),e(I6,Qz),e(Qz,a5r),e(I6,n5r),e(Y,s5r),e(Y,q6),e(q6,sbe),e(sbe,l5r),e(q6,i5r),e(q6,Wz),e(Wz,d5r),e(q6,c5r),e(Y,f5r),e(Y,N6),e(N6,lbe),e(lbe,m5r),e(N6,g5r),e(N6,Hz),e(Hz,h5r),e(N6,p5r),e(Y,_5r),e(Y,j6),e(j6,ibe),e(ibe,u5r),e(j6,b5r),e(j6,Uz),e(Uz,F5r),e(j6,v5r),e(Y,T5r),e(Y,D6),e(D6,dbe),e(dbe,M5r),e(D6,E5r),e(D6,Jz),e(Jz,C5r),e(D6,w5r),e(Y,A5r),e(Y,G6),e(G6,cbe),e(cbe,y5r),e(G6,L5r),e(G6,Yz),e(Yz,x5r),e(G6,k5r),e(Y,S5r),e(Y,O6),e(O6,fbe),e(fbe,R5r),e(O6,B5r),e(O6,Kz),e(Kz,P5r),e(O6,$5r),e(Y,I5r),e(Y,V6),e(V6,mbe),e(mbe,q5r),e(V6,N5r),e(V6,Zz),e(Zz,j5r),e(V6,D5r),e(Y,G5r),e(Y,X6),e(X6,gbe),e(gbe,O5r),e(X6,V5r),e(X6,eQ),e(eQ,X5r),e(X6,z5r),e(Y,Q5r),e(Y,z6),e(z6,hbe),e(hbe,W5r),e(z6,H5r),e(z6,oQ),e(oQ,U5r),e(z6,J5r),e(Y,Y5r),e(Y,Q6),e(Q6,pbe),e(pbe,K5r),e(Q6,Z5r),e(Q6,rQ),e(rQ,e3r),e(Q6,o3r),e(Y,r3r),e(Y,W6),e(W6,_be),e(_be,t3r),e(W6,a3r),e(W6,tQ),e(tQ,n3r),e(W6,s3r),e(Y,l3r),e(Y,H6),e(H6,ube),e(ube,i3r),e(H6,d3r),e(H6,aQ),e(aQ,c3r),e(H6,f3r),e(Y,m3r),e(Y,U6),e(U6,bbe),e(bbe,g3r),e(U6,h3r),e(U6,nQ),e(nQ,p3r),e(U6,_3r),e(Eo,u3r),e(Eo,Fbe),e(Fbe,b3r),e(Eo,F3r),g(TL,Eo,null),b(c,HBe,u),b(c,Vc,u),e(Vc,J6),e(J6,vbe),g(ML,vbe,null),e(Vc,v3r),e(Vc,Tbe),e(Tbe,T3r),b(c,UBe,u),b(c,xr,u),g(EL,xr,null),e(xr,M3r),e(xr,Xc),e(Xc,E3r),e(Xc,sQ),e(sQ,C3r),e(Xc,w3r),e(Xc,lQ),e(lQ,A3r),e(Xc,y3r),e(xr,L3r),e(xr,CL),e(CL,x3r),e(CL,Mbe),e(Mbe,k3r),e(CL,S3r),e(xr,R3r),e(xr,Et),g(wL,Et,null),e(Et,B3r),e(Et,Ebe),e(Ebe,P3r),e(Et,$3r),e(Et,zc),e(zc,I3r),e(zc,Cbe),e(Cbe,q3r),e(zc,N3r),e(zc,iQ),e(iQ,j3r),e(zc,D3r),e(Et,G3r),e(Et,wbe),e(wbe,O3r),e(Et,V3r),g(AL,Et,null),e(xr,X3r),e(xr,Co),g(yL,Co,null),e(Co,z3r),e(Co,Abe),e(Abe,Q3r),e(Co,W3r),e(Co,An),e(An,H3r),e(An,ybe),e(ybe,U3r),e(An,J3r),e(An,Lbe),e(Lbe,Y3r),e(An,K3r),e(An,xbe),e(xbe,Z3r),e(An,e2r),e(Co,o2r),e(Co,K),e(K,Y6),e(Y6,kbe),e(kbe,r2r),e(Y6,t2r),e(Y6,dQ),e(dQ,a2r),e(Y6,n2r),e(K,s2r),e(K,K6),e(K6,Sbe),e(Sbe,l2r),e(K6,i2r),e(K6,cQ),e(cQ,d2r),e(K6,c2r),e(K,f2r),e(K,Z6),e(Z6,Rbe),e(Rbe,m2r),e(Z6,g2r),e(Z6,fQ),e(fQ,h2r),e(Z6,p2r),e(K,_2r),e(K,eT),e(eT,Bbe),e(Bbe,u2r),e(eT,b2r),e(eT,mQ),e(mQ,F2r),e(eT,v2r),e(K,T2r),e(K,oT),e(oT,Pbe),e(Pbe,M2r),e(oT,E2r),e(oT,gQ),e(gQ,C2r),e(oT,w2r),e(K,A2r),e(K,rT),e(rT,$be),e($be,y2r),e(rT,L2r),e(rT,hQ),e(hQ,x2r),e(rT,k2r),e(K,S2r),e(K,tT),e(tT,Ibe),e(Ibe,R2r),e(tT,B2r),e(tT,pQ),e(pQ,P2r),e(tT,$2r),e(K,I2r),e(K,aT),e(aT,qbe),e(qbe,q2r),e(aT,N2r),e(aT,_Q),e(_Q,j2r),e(aT,D2r),e(K,G2r),e(K,nT),e(nT,Nbe),e(Nbe,O2r),e(nT,V2r),e(nT,uQ),e(uQ,X2r),e(nT,z2r),e(K,Q2r),e(K,sT),e(sT,jbe),e(jbe,W2r),e(sT,H2r),e(sT,bQ),e(bQ,U2r),e(sT,J2r),e(K,Y2r),e(K,lT),e(lT,Dbe),e(Dbe,K2r),e(lT,Z2r),e(lT,FQ),e(FQ,eFr),e(lT,oFr),e(K,rFr),e(K,iT),e(iT,Gbe),e(Gbe,tFr),e(iT,aFr),e(iT,vQ),e(vQ,nFr),e(iT,sFr),e(K,lFr),e(K,dT),e(dT,Obe),e(Obe,iFr),e(dT,dFr),e(dT,TQ),e(TQ,cFr),e(dT,fFr),e(K,mFr),e(K,cT),e(cT,Vbe),e(Vbe,gFr),e(cT,hFr),e(cT,MQ),e(MQ,pFr),e(cT,_Fr),e(K,uFr),e(K,fT),e(fT,Xbe),e(Xbe,bFr),e(fT,FFr),e(fT,EQ),e(EQ,vFr),e(fT,TFr),e(K,MFr),e(K,mT),e(mT,zbe),e(zbe,EFr),e(mT,CFr),e(mT,CQ),e(CQ,wFr),e(mT,AFr),e(K,yFr),e(K,gT),e(gT,Qbe),e(Qbe,LFr),e(gT,xFr),e(gT,wQ),e(wQ,kFr),e(gT,SFr),e(K,RFr),e(K,hT),e(hT,Wbe),e(Wbe,BFr),e(hT,PFr),e(hT,AQ),e(AQ,$Fr),e(hT,IFr),e(K,qFr),e(K,pT),e(pT,Hbe),e(Hbe,NFr),e(pT,jFr),e(pT,yQ),e(yQ,DFr),e(pT,GFr),e(K,OFr),e(K,_T),e(_T,Ube),e(Ube,VFr),e(_T,XFr),e(_T,LQ),e(LQ,zFr),e(_T,QFr),e(Co,WFr),e(Co,Jbe),e(Jbe,HFr),e(Co,UFr),g(LL,Co,null),b(c,JBe,u),b(c,Qc,u),e(Qc,uT),e(uT,Ybe),g(xL,Ybe,null),e(Qc,JFr),e(Qc,Kbe),e(Kbe,YFr),b(c,YBe,u),b(c,kr,u),g(kL,kr,null),e(kr,KFr),e(kr,Wc),e(Wc,ZFr),e(Wc,xQ),e(xQ,evr),e(Wc,ovr),e(Wc,kQ),e(kQ,rvr),e(Wc,tvr),e(kr,avr),e(kr,SL),e(SL,nvr),e(SL,Zbe),e(Zbe,svr),e(SL,lvr),e(kr,ivr),e(kr,Ct),g(RL,Ct,null),e(Ct,dvr),e(Ct,e5e),e(e5e,cvr),e(Ct,fvr),e(Ct,Hc),e(Hc,mvr),e(Hc,o5e),e(o5e,gvr),e(Hc,hvr),e(Hc,SQ),e(SQ,pvr),e(Hc,_vr),e(Ct,uvr),e(Ct,r5e),e(r5e,bvr),e(Ct,Fvr),g(BL,Ct,null),e(kr,vvr),e(kr,wo),g(PL,wo,null),e(wo,Tvr),e(wo,t5e),e(t5e,Mvr),e(wo,Evr),e(wo,yn),e(yn,Cvr),e(yn,a5e),e(a5e,wvr),e(yn,Avr),e(yn,n5e),e(n5e,yvr),e(yn,Lvr),e(yn,s5e),e(s5e,xvr),e(yn,kvr),e(wo,Svr),e(wo,l5e),e(l5e,bT),e(bT,i5e),e(i5e,Rvr),e(bT,Bvr),e(bT,RQ),e(RQ,Pvr),e(bT,$vr),e(wo,Ivr),e(wo,d5e),e(d5e,qvr),e(wo,Nvr),g($L,wo,null),b(c,KBe,u),b(c,Uc,u),e(Uc,FT),e(FT,c5e),g(IL,c5e,null),e(Uc,jvr),e(Uc,f5e),e(f5e,Dvr),b(c,ZBe,u),b(c,Sr,u),g(qL,Sr,null),e(Sr,Gvr),e(Sr,Jc),e(Jc,Ovr),e(Jc,BQ),e(BQ,Vvr),e(Jc,Xvr),e(Jc,PQ),e(PQ,zvr),e(Jc,Qvr),e(Sr,Wvr),e(Sr,NL),e(NL,Hvr),e(NL,m5e),e(m5e,Uvr),e(NL,Jvr),e(Sr,Yvr),e(Sr,wt),g(jL,wt,null),e(wt,Kvr),e(wt,g5e),e(g5e,Zvr),e(wt,e6r),e(wt,Yc),e(Yc,o6r),e(Yc,h5e),e(h5e,r6r),e(Yc,t6r),e(Yc,$Q),e($Q,a6r),e(Yc,n6r),e(wt,s6r),e(wt,p5e),e(p5e,l6r),e(wt,i6r),g(DL,wt,null),e(Sr,d6r),e(Sr,Ao),g(GL,Ao,null),e(Ao,c6r),e(Ao,_5e),e(_5e,f6r),e(Ao,m6r),e(Ao,Ln),e(Ln,g6r),e(Ln,u5e),e(u5e,h6r),e(Ln,p6r),e(Ln,b5e),e(b5e,_6r),e(Ln,u6r),e(Ln,F5e),e(F5e,b6r),e(Ln,F6r),e(Ao,v6r),e(Ao,v5e),e(v5e,vT),e(vT,T5e),e(T5e,T6r),e(vT,M6r),e(vT,IQ),e(IQ,E6r),e(vT,C6r),e(Ao,w6r),e(Ao,M5e),e(M5e,A6r),e(Ao,y6r),g(OL,Ao,null),b(c,ePe,u),b(c,Kc,u),e(Kc,TT),e(TT,E5e),g(VL,E5e,null),e(Kc,L6r),e(Kc,C5e),e(C5e,x6r),b(c,oPe,u),b(c,Rr,u),g(XL,Rr,null),e(Rr,k6r),e(Rr,Zc),e(Zc,S6r),e(Zc,qQ),e(qQ,R6r),e(Zc,B6r),e(Zc,NQ),e(NQ,P6r),e(Zc,$6r),e(Rr,I6r),e(Rr,zL),e(zL,q6r),e(zL,w5e),e(w5e,N6r),e(zL,j6r),e(Rr,D6r),e(Rr,At),g(QL,At,null),e(At,G6r),e(At,A5e),e(A5e,O6r),e(At,V6r),e(At,ef),e(ef,X6r),e(ef,y5e),e(y5e,z6r),e(ef,Q6r),e(ef,jQ),e(jQ,W6r),e(ef,H6r),e(At,U6r),e(At,L5e),e(L5e,J6r),e(At,Y6r),g(WL,At,null),e(Rr,K6r),e(Rr,yo),g(HL,yo,null),e(yo,Z6r),e(yo,x5e),e(x5e,eTr),e(yo,oTr),e(yo,xn),e(xn,rTr),e(xn,k5e),e(k5e,tTr),e(xn,aTr),e(xn,S5e),e(S5e,nTr),e(xn,sTr),e(xn,R5e),e(R5e,lTr),e(xn,iTr),e(yo,dTr),e(yo,z),e(z,MT),e(MT,B5e),e(B5e,cTr),e(MT,fTr),e(MT,DQ),e(DQ,mTr),e(MT,gTr),e(z,hTr),e(z,ET),e(ET,P5e),e(P5e,pTr),e(ET,_Tr),e(ET,GQ),e(GQ,uTr),e(ET,bTr),e(z,FTr),e(z,CT),e(CT,$5e),e($5e,vTr),e(CT,TTr),e(CT,OQ),e(OQ,MTr),e(CT,ETr),e(z,CTr),e(z,wT),e(wT,I5e),e(I5e,wTr),e(wT,ATr),e(wT,VQ),e(VQ,yTr),e(wT,LTr),e(z,xTr),e(z,AT),e(AT,q5e),e(q5e,kTr),e(AT,STr),e(AT,XQ),e(XQ,RTr),e(AT,BTr),e(z,PTr),e(z,yT),e(yT,N5e),e(N5e,$Tr),e(yT,ITr),e(yT,zQ),e(zQ,qTr),e(yT,NTr),e(z,jTr),e(z,LT),e(LT,j5e),e(j5e,DTr),e(LT,GTr),e(LT,QQ),e(QQ,OTr),e(LT,VTr),e(z,XTr),e(z,xT),e(xT,D5e),e(D5e,zTr),e(xT,QTr),e(xT,WQ),e(WQ,WTr),e(xT,HTr),e(z,UTr),e(z,kT),e(kT,G5e),e(G5e,JTr),e(kT,YTr),e(kT,HQ),e(HQ,KTr),e(kT,ZTr),e(z,eMr),e(z,ST),e(ST,O5e),e(O5e,oMr),e(ST,rMr),e(ST,UQ),e(UQ,tMr),e(ST,aMr),e(z,nMr),e(z,RT),e(RT,V5e),e(V5e,sMr),e(RT,lMr),e(RT,JQ),e(JQ,iMr),e(RT,dMr),e(z,cMr),e(z,BT),e(BT,X5e),e(X5e,fMr),e(BT,mMr),e(BT,YQ),e(YQ,gMr),e(BT,hMr),e(z,pMr),e(z,PT),e(PT,z5e),e(z5e,_Mr),e(PT,uMr),e(PT,KQ),e(KQ,bMr),e(PT,FMr),e(z,vMr),e(z,$T),e($T,Q5e),e(Q5e,TMr),e($T,MMr),e($T,ZQ),e(ZQ,EMr),e($T,CMr),e(z,wMr),e(z,IT),e(IT,W5e),e(W5e,AMr),e(IT,yMr),e(IT,eW),e(eW,LMr),e(IT,xMr),e(z,kMr),e(z,qT),e(qT,H5e),e(H5e,SMr),e(qT,RMr),e(qT,oW),e(oW,BMr),e(qT,PMr),e(z,$Mr),e(z,NT),e(NT,U5e),e(U5e,IMr),e(NT,qMr),e(NT,rW),e(rW,NMr),e(NT,jMr),e(z,DMr),e(z,jT),e(jT,J5e),e(J5e,GMr),e(jT,OMr),e(jT,tW),e(tW,VMr),e(jT,XMr),e(z,zMr),e(z,DT),e(DT,Y5e),e(Y5e,QMr),e(DT,WMr),e(DT,aW),e(aW,HMr),e(DT,UMr),e(z,JMr),e(z,GT),e(GT,K5e),e(K5e,YMr),e(GT,KMr),e(GT,nW),e(nW,ZMr),e(GT,eEr),e(z,oEr),e(z,OT),e(OT,Z5e),e(Z5e,rEr),e(OT,tEr),e(OT,sW),e(sW,aEr),e(OT,nEr),e(z,sEr),e(z,VT),e(VT,e3e),e(e3e,lEr),e(VT,iEr),e(VT,lW),e(lW,dEr),e(VT,cEr),e(z,fEr),e(z,XT),e(XT,o3e),e(o3e,mEr),e(XT,gEr),e(XT,iW),e(iW,hEr),e(XT,pEr),e(z,_Er),e(z,zT),e(zT,r3e),e(r3e,uEr),e(zT,bEr),e(zT,dW),e(dW,FEr),e(zT,vEr),e(z,TEr),e(z,QT),e(QT,t3e),e(t3e,MEr),e(QT,EEr),e(QT,cW),e(cW,CEr),e(QT,wEr),e(yo,AEr),e(yo,a3e),e(a3e,yEr),e(yo,LEr),g(UL,yo,null),b(c,rPe,u),b(c,of,u),e(of,WT),e(WT,n3e),g(JL,n3e,null),e(of,xEr),e(of,s3e),e(s3e,kEr),b(c,tPe,u),b(c,Br,u),g(YL,Br,null),e(Br,SEr),e(Br,rf),e(rf,REr),e(rf,fW),e(fW,BEr),e(rf,PEr),e(rf,mW),e(mW,$Er),e(rf,IEr),e(Br,qEr),e(Br,KL),e(KL,NEr),e(KL,l3e),e(l3e,jEr),e(KL,DEr),e(Br,GEr),e(Br,yt),g(ZL,yt,null),e(yt,OEr),e(yt,i3e),e(i3e,VEr),e(yt,XEr),e(yt,tf),e(tf,zEr),e(tf,d3e),e(d3e,QEr),e(tf,WEr),e(tf,gW),e(gW,HEr),e(tf,UEr),e(yt,JEr),e(yt,c3e),e(c3e,YEr),e(yt,KEr),g(e8,yt,null),e(Br,ZEr),e(Br,Lo),g(o8,Lo,null),e(Lo,eCr),e(Lo,f3e),e(f3e,oCr),e(Lo,rCr),e(Lo,kn),e(kn,tCr),e(kn,m3e),e(m3e,aCr),e(kn,nCr),e(kn,g3e),e(g3e,sCr),e(kn,lCr),e(kn,h3e),e(h3e,iCr),e(kn,dCr),e(Lo,cCr),e(Lo,ca),e(ca,HT),e(HT,p3e),e(p3e,fCr),e(HT,mCr),e(HT,hW),e(hW,gCr),e(HT,hCr),e(ca,pCr),e(ca,UT),e(UT,_3e),e(_3e,_Cr),e(UT,uCr),e(UT,pW),e(pW,bCr),e(UT,FCr),e(ca,vCr),e(ca,JT),e(JT,u3e),e(u3e,TCr),e(JT,MCr),e(JT,_W),e(_W,ECr),e(JT,CCr),e(ca,wCr),e(ca,YT),e(YT,b3e),e(b3e,ACr),e(YT,yCr),e(YT,uW),e(uW,LCr),e(YT,xCr),e(ca,kCr),e(ca,KT),e(KT,F3e),e(F3e,SCr),e(KT,RCr),e(KT,bW),e(bW,BCr),e(KT,PCr),e(Lo,$Cr),e(Lo,v3e),e(v3e,ICr),e(Lo,qCr),g(r8,Lo,null),b(c,aPe,u),b(c,af,u),e(af,ZT),e(ZT,T3e),g(t8,T3e,null),e(af,NCr),e(af,M3e),e(M3e,jCr),b(c,nPe,u),b(c,Pr,u),g(a8,Pr,null),e(Pr,DCr),e(Pr,nf),e(nf,GCr),e(nf,FW),e(FW,OCr),e(nf,VCr),e(nf,vW),e(vW,XCr),e(nf,zCr),e(Pr,QCr),e(Pr,n8),e(n8,WCr),e(n8,E3e),e(E3e,HCr),e(n8,UCr),e(Pr,JCr),e(Pr,Lt),g(s8,Lt,null),e(Lt,YCr),e(Lt,C3e),e(C3e,KCr),e(Lt,ZCr),e(Lt,sf),e(sf,ewr),e(sf,w3e),e(w3e,owr),e(sf,rwr),e(sf,TW),e(TW,twr),e(sf,awr),e(Lt,nwr),e(Lt,A3e),e(A3e,swr),e(Lt,lwr),g(l8,Lt,null),e(Pr,iwr),e(Pr,xo),g(i8,xo,null),e(xo,dwr),e(xo,y3e),e(y3e,cwr),e(xo,fwr),e(xo,Sn),e(Sn,mwr),e(Sn,L3e),e(L3e,gwr),e(Sn,hwr),e(Sn,x3e),e(x3e,pwr),e(Sn,_wr),e(Sn,k3e),e(k3e,uwr),e(Sn,bwr),e(xo,Fwr),e(xo,me),e(me,eM),e(eM,S3e),e(S3e,vwr),e(eM,Twr),e(eM,MW),e(MW,Mwr),e(eM,Ewr),e(me,Cwr),e(me,oM),e(oM,R3e),e(R3e,wwr),e(oM,Awr),e(oM,EW),e(EW,ywr),e(oM,Lwr),e(me,xwr),e(me,rM),e(rM,B3e),e(B3e,kwr),e(rM,Swr),e(rM,CW),e(CW,Rwr),e(rM,Bwr),e(me,Pwr),e(me,tM),e(tM,P3e),e(P3e,$wr),e(tM,Iwr),e(tM,wW),e(wW,qwr),e(tM,Nwr),e(me,jwr),e(me,aM),e(aM,$3e),e($3e,Dwr),e(aM,Gwr),e(aM,AW),e(AW,Owr),e(aM,Vwr),e(me,Xwr),e(me,nM),e(nM,I3e),e(I3e,zwr),e(nM,Qwr),e(nM,yW),e(yW,Wwr),e(nM,Hwr),e(me,Uwr),e(me,sM),e(sM,q3e),e(q3e,Jwr),e(sM,Ywr),e(sM,LW),e(LW,Kwr),e(sM,Zwr),e(me,eAr),e(me,lM),e(lM,N3e),e(N3e,oAr),e(lM,rAr),e(lM,xW),e(xW,tAr),e(lM,aAr),e(me,nAr),e(me,iM),e(iM,j3e),e(j3e,sAr),e(iM,lAr),e(iM,kW),e(kW,iAr),e(iM,dAr),e(me,cAr),e(me,dM),e(dM,D3e),e(D3e,fAr),e(dM,mAr),e(dM,SW),e(SW,gAr),e(dM,hAr),e(me,pAr),e(me,cM),e(cM,G3e),e(G3e,_Ar),e(cM,uAr),e(cM,RW),e(RW,bAr),e(cM,FAr),e(me,vAr),e(me,fM),e(fM,O3e),e(O3e,TAr),e(fM,MAr),e(fM,BW),e(BW,EAr),e(fM,CAr),e(xo,wAr),e(xo,V3e),e(V3e,AAr),e(xo,yAr),g(d8,xo,null),b(c,sPe,u),b(c,lf,u),e(lf,mM),e(mM,X3e),g(c8,X3e,null),e(lf,LAr),e(lf,z3e),e(z3e,xAr),b(c,lPe,u),b(c,$r,u),g(f8,$r,null),e($r,kAr),e($r,df),e(df,SAr),e(df,PW),e(PW,RAr),e(df,BAr),e(df,$W),e($W,PAr),e(df,$Ar),e($r,IAr),e($r,m8),e(m8,qAr),e(m8,Q3e),e(Q3e,NAr),e(m8,jAr),e($r,DAr),e($r,xt),g(g8,xt,null),e(xt,GAr),e(xt,W3e),e(W3e,OAr),e(xt,VAr),e(xt,cf),e(cf,XAr),e(cf,H3e),e(H3e,zAr),e(cf,QAr),e(cf,IW),e(IW,WAr),e(cf,HAr),e(xt,UAr),e(xt,U3e),e(U3e,JAr),e(xt,YAr),g(h8,xt,null),e($r,KAr),e($r,ko),g(p8,ko,null),e(ko,ZAr),e(ko,J3e),e(J3e,e0r),e(ko,o0r),e(ko,Rn),e(Rn,r0r),e(Rn,Y3e),e(Y3e,t0r),e(Rn,a0r),e(Rn,K3e),e(K3e,n0r),e(Rn,s0r),e(Rn,Z3e),e(Z3e,l0r),e(Rn,i0r),e(ko,d0r),e(ko,Fe),e(Fe,gM),e(gM,e2e),e(e2e,c0r),e(gM,f0r),e(gM,qW),e(qW,m0r),e(gM,g0r),e(Fe,h0r),e(Fe,hM),e(hM,o2e),e(o2e,p0r),e(hM,_0r),e(hM,NW),e(NW,u0r),e(hM,b0r),e(Fe,F0r),e(Fe,pM),e(pM,r2e),e(r2e,v0r),e(pM,T0r),e(pM,jW),e(jW,M0r),e(pM,E0r),e(Fe,C0r),e(Fe,_M),e(_M,t2e),e(t2e,w0r),e(_M,A0r),e(_M,DW),e(DW,y0r),e(_M,L0r),e(Fe,x0r),e(Fe,uM),e(uM,a2e),e(a2e,k0r),e(uM,S0r),e(uM,GW),e(GW,R0r),e(uM,B0r),e(Fe,P0r),e(Fe,bM),e(bM,n2e),e(n2e,$0r),e(bM,I0r),e(bM,OW),e(OW,q0r),e(bM,N0r),e(Fe,j0r),e(Fe,FM),e(FM,s2e),e(s2e,D0r),e(FM,G0r),e(FM,VW),e(VW,O0r),e(FM,V0r),e(Fe,X0r),e(Fe,vM),e(vM,l2e),e(l2e,z0r),e(vM,Q0r),e(vM,XW),e(XW,W0r),e(vM,H0r),e(Fe,U0r),e(Fe,TM),e(TM,i2e),e(i2e,J0r),e(TM,Y0r),e(TM,zW),e(zW,K0r),e(TM,Z0r),e(Fe,eyr),e(Fe,MM),e(MM,d2e),e(d2e,oyr),e(MM,ryr),e(MM,QW),e(QW,tyr),e(MM,ayr),e(ko,nyr),e(ko,c2e),e(c2e,syr),e(ko,lyr),g(_8,ko,null),b(c,iPe,u),b(c,ff,u),e(ff,EM),e(EM,f2e),g(u8,f2e,null),e(ff,iyr),e(ff,m2e),e(m2e,dyr),b(c,dPe,u),b(c,Ir,u),g(b8,Ir,null),e(Ir,cyr),e(Ir,mf),e(mf,fyr),e(mf,WW),e(WW,myr),e(mf,gyr),e(mf,HW),e(HW,hyr),e(mf,pyr),e(Ir,_yr),e(Ir,F8),e(F8,uyr),e(F8,g2e),e(g2e,byr),e(F8,Fyr),e(Ir,vyr),e(Ir,kt),g(v8,kt,null),e(kt,Tyr),e(kt,h2e),e(h2e,Myr),e(kt,Eyr),e(kt,gf),e(gf,Cyr),e(gf,p2e),e(p2e,wyr),e(gf,Ayr),e(gf,UW),e(UW,yyr),e(gf,Lyr),e(kt,xyr),e(kt,_2e),e(_2e,kyr),e(kt,Syr),g(T8,kt,null),e(Ir,Ryr),e(Ir,So),g(M8,So,null),e(So,Byr),e(So,u2e),e(u2e,Pyr),e(So,$yr),e(So,Bn),e(Bn,Iyr),e(Bn,b2e),e(b2e,qyr),e(Bn,Nyr),e(Bn,F2e),e(F2e,jyr),e(Bn,Dyr),e(Bn,v2e),e(v2e,Gyr),e(Bn,Oyr),e(So,Vyr),e(So,Ee),e(Ee,CM),e(CM,T2e),e(T2e,Xyr),e(CM,zyr),e(CM,JW),e(JW,Qyr),e(CM,Wyr),e(Ee,Hyr),e(Ee,wM),e(wM,M2e),e(M2e,Uyr),e(wM,Jyr),e(wM,YW),e(YW,Yyr),e(wM,Kyr),e(Ee,Zyr),e(Ee,AM),e(AM,E2e),e(E2e,eLr),e(AM,oLr),e(AM,KW),e(KW,rLr),e(AM,tLr),e(Ee,aLr),e(Ee,yM),e(yM,C2e),e(C2e,nLr),e(yM,sLr),e(yM,ZW),e(ZW,lLr),e(yM,iLr),e(Ee,dLr),e(Ee,LM),e(LM,w2e),e(w2e,cLr),e(LM,fLr),e(LM,eH),e(eH,mLr),e(LM,gLr),e(Ee,hLr),e(Ee,xM),e(xM,A2e),e(A2e,pLr),e(xM,_Lr),e(xM,oH),e(oH,uLr),e(xM,bLr),e(Ee,FLr),e(Ee,kM),e(kM,y2e),e(y2e,vLr),e(kM,TLr),e(kM,rH),e(rH,MLr),e(kM,ELr),e(Ee,CLr),e(Ee,SM),e(SM,L2e),e(L2e,wLr),e(SM,ALr),e(SM,tH),e(tH,yLr),e(SM,LLr),e(Ee,xLr),e(Ee,RM),e(RM,x2e),e(x2e,kLr),e(RM,SLr),e(RM,aH),e(aH,RLr),e(RM,BLr),e(So,PLr),e(So,k2e),e(k2e,$Lr),e(So,ILr),g(E8,So,null),b(c,cPe,u),b(c,hf,u),e(hf,BM),e(BM,S2e),g(C8,S2e,null),e(hf,qLr),e(hf,R2e),e(R2e,NLr),b(c,fPe,u),b(c,qr,u),g(w8,qr,null),e(qr,jLr),e(qr,pf),e(pf,DLr),e(pf,nH),e(nH,GLr),e(pf,OLr),e(pf,sH),e(sH,VLr),e(pf,XLr),e(qr,zLr),e(qr,A8),e(A8,QLr),e(A8,B2e),e(B2e,WLr),e(A8,HLr),e(qr,ULr),e(qr,St),g(y8,St,null),e(St,JLr),e(St,P2e),e(P2e,YLr),e(St,KLr),e(St,_f),e(_f,ZLr),e(_f,$2e),e($2e,e8r),e(_f,o8r),e(_f,lH),e(lH,r8r),e(_f,t8r),e(St,a8r),e(St,I2e),e(I2e,n8r),e(St,s8r),g(L8,St,null),e(qr,l8r),e(qr,Ro),g(x8,Ro,null),e(Ro,i8r),e(Ro,q2e),e(q2e,d8r),e(Ro,c8r),e(Ro,Pn),e(Pn,f8r),e(Pn,N2e),e(N2e,m8r),e(Pn,g8r),e(Pn,j2e),e(j2e,h8r),e(Pn,p8r),e(Pn,D2e),e(D2e,_8r),e(Pn,u8r),e(Ro,b8r),e(Ro,ve),e(ve,PM),e(PM,G2e),e(G2e,F8r),e(PM,v8r),e(PM,iH),e(iH,T8r),e(PM,M8r),e(ve,E8r),e(ve,$M),e($M,O2e),e(O2e,C8r),e($M,w8r),e($M,dH),e(dH,A8r),e($M,y8r),e(ve,L8r),e(ve,IM),e(IM,V2e),e(V2e,x8r),e(IM,k8r),e(IM,cH),e(cH,S8r),e(IM,R8r),e(ve,B8r),e(ve,qM),e(qM,X2e),e(X2e,P8r),e(qM,$8r),e(qM,fH),e(fH,I8r),e(qM,q8r),e(ve,N8r),e(ve,NM),e(NM,z2e),e(z2e,j8r),e(NM,D8r),e(NM,mH),e(mH,G8r),e(NM,O8r),e(ve,V8r),e(ve,jM),e(jM,Q2e),e(Q2e,X8r),e(jM,z8r),e(jM,gH),e(gH,Q8r),e(jM,W8r),e(ve,H8r),e(ve,DM),e(DM,W2e),e(W2e,U8r),e(DM,J8r),e(DM,hH),e(hH,Y8r),e(DM,K8r),e(ve,Z8r),e(ve,GM),e(GM,H2e),e(H2e,e7r),e(GM,o7r),e(GM,pH),e(pH,r7r),e(GM,t7r),e(ve,a7r),e(ve,OM),e(OM,U2e),e(U2e,n7r),e(OM,s7r),e(OM,_H),e(_H,l7r),e(OM,i7r),e(ve,d7r),e(ve,VM),e(VM,J2e),e(J2e,c7r),e(VM,f7r),e(VM,uH),e(uH,m7r),e(VM,g7r),e(Ro,h7r),e(Ro,Y2e),e(Y2e,p7r),e(Ro,_7r),g(k8,Ro,null),b(c,mPe,u),b(c,uf,u),e(uf,XM),e(XM,K2e),g(S8,K2e,null),e(uf,u7r),e(uf,Z2e),e(Z2e,b7r),b(c,gPe,u),b(c,Nr,u),g(R8,Nr,null),e(Nr,F7r),e(Nr,bf),e(bf,v7r),e(bf,bH),e(bH,T7r),e(bf,M7r),e(bf,FH),e(FH,E7r),e(bf,C7r),e(Nr,w7r),e(Nr,B8),e(B8,A7r),e(B8,eFe),e(eFe,y7r),e(B8,L7r),e(Nr,x7r),e(Nr,Rt),g(P8,Rt,null),e(Rt,k7r),e(Rt,oFe),e(oFe,S7r),e(Rt,R7r),e(Rt,Ff),e(Ff,B7r),e(Ff,rFe),e(rFe,P7r),e(Ff,$7r),e(Ff,vH),e(vH,I7r),e(Ff,q7r),e(Rt,N7r),e(Rt,tFe),e(tFe,j7r),e(Rt,D7r),g($8,Rt,null),e(Nr,G7r),e(Nr,Bo),g(I8,Bo,null),e(Bo,O7r),e(Bo,aFe),e(aFe,V7r),e(Bo,X7r),e(Bo,$n),e($n,z7r),e($n,nFe),e(nFe,Q7r),e($n,W7r),e($n,sFe),e(sFe,H7r),e($n,U7r),e($n,lFe),e(lFe,J7r),e($n,Y7r),e(Bo,K7r),e(Bo,Te),e(Te,zM),e(zM,iFe),e(iFe,Z7r),e(zM,e9r),e(zM,TH),e(TH,o9r),e(zM,r9r),e(Te,t9r),e(Te,QM),e(QM,dFe),e(dFe,a9r),e(QM,n9r),e(QM,MH),e(MH,s9r),e(QM,l9r),e(Te,i9r),e(Te,WM),e(WM,cFe),e(cFe,d9r),e(WM,c9r),e(WM,EH),e(EH,f9r),e(WM,m9r),e(Te,g9r),e(Te,HM),e(HM,fFe),e(fFe,h9r),e(HM,p9r),e(HM,CH),e(CH,_9r),e(HM,u9r),e(Te,b9r),e(Te,UM),e(UM,mFe),e(mFe,F9r),e(UM,v9r),e(UM,wH),e(wH,T9r),e(UM,M9r),e(Te,E9r),e(Te,JM),e(JM,gFe),e(gFe,C9r),e(JM,w9r),e(JM,AH),e(AH,A9r),e(JM,y9r),e(Te,L9r),e(Te,YM),e(YM,hFe),e(hFe,x9r),e(YM,k9r),e(YM,yH),e(yH,S9r),e(YM,R9r),e(Te,B9r),e(Te,KM),e(KM,pFe),e(pFe,P9r),e(KM,$9r),e(KM,LH),e(LH,I9r),e(KM,q9r),e(Te,N9r),e(Te,ZM),e(ZM,_Fe),e(_Fe,j9r),e(ZM,D9r),e(ZM,xH),e(xH,G9r),e(ZM,O9r),e(Te,V9r),e(Te,eE),e(eE,uFe),e(uFe,X9r),e(eE,z9r),e(eE,kH),e(kH,Q9r),e(eE,W9r),e(Bo,H9r),e(Bo,bFe),e(bFe,U9r),e(Bo,J9r),g(q8,Bo,null),b(c,hPe,u),b(c,vf,u),e(vf,oE),e(oE,FFe),g(N8,FFe,null),e(vf,Y9r),e(vf,vFe),e(vFe,K9r),b(c,pPe,u),b(c,jr,u),g(j8,jr,null),e(jr,Z9r),e(jr,Tf),e(Tf,exr),e(Tf,SH),e(SH,oxr),e(Tf,rxr),e(Tf,RH),e(RH,txr),e(Tf,axr),e(jr,nxr),e(jr,D8),e(D8,sxr),e(D8,TFe),e(TFe,lxr),e(D8,ixr),e(jr,dxr),e(jr,Bt),g(G8,Bt,null),e(Bt,cxr),e(Bt,MFe),e(MFe,fxr),e(Bt,mxr),e(Bt,Mf),e(Mf,gxr),e(Mf,EFe),e(EFe,hxr),e(Mf,pxr),e(Mf,BH),e(BH,_xr),e(Mf,uxr),e(Bt,bxr),e(Bt,CFe),e(CFe,Fxr),e(Bt,vxr),g(O8,Bt,null),e(jr,Txr),e(jr,Po),g(V8,Po,null),e(Po,Mxr),e(Po,wFe),e(wFe,Exr),e(Po,Cxr),e(Po,In),e(In,wxr),e(In,AFe),e(AFe,Axr),e(In,yxr),e(In,yFe),e(yFe,Lxr),e(In,xxr),e(In,LFe),e(LFe,kxr),e(In,Sxr),e(Po,Rxr),e(Po,Be),e(Be,rE),e(rE,xFe),e(xFe,Bxr),e(rE,Pxr),e(rE,PH),e(PH,$xr),e(rE,Ixr),e(Be,qxr),e(Be,tE),e(tE,kFe),e(kFe,Nxr),e(tE,jxr),e(tE,$H),e($H,Dxr),e(tE,Gxr),e(Be,Oxr),e(Be,aE),e(aE,SFe),e(SFe,Vxr),e(aE,Xxr),e(aE,IH),e(IH,zxr),e(aE,Qxr),e(Be,Wxr),e(Be,nE),e(nE,RFe),e(RFe,Hxr),e(nE,Uxr),e(nE,qH),e(qH,Jxr),e(nE,Yxr),e(Be,Kxr),e(Be,sE),e(sE,BFe),e(BFe,Zxr),e(sE,ekr),e(sE,NH),e(NH,okr),e(sE,rkr),e(Be,tkr),e(Be,lE),e(lE,PFe),e(PFe,akr),e(lE,nkr),e(lE,jH),e(jH,skr),e(lE,lkr),e(Be,ikr),e(Be,iE),e(iE,$Fe),e($Fe,dkr),e(iE,ckr),e(iE,DH),e(DH,fkr),e(iE,mkr),e(Be,gkr),e(Be,dE),e(dE,IFe),e(IFe,hkr),e(dE,pkr),e(dE,GH),e(GH,_kr),e(dE,ukr),e(Po,bkr),e(Po,qFe),e(qFe,Fkr),e(Po,vkr),g(X8,Po,null),b(c,_Pe,u),b(c,Ef,u),e(Ef,cE),e(cE,NFe),g(z8,NFe,null),e(Ef,Tkr),e(Ef,jFe),e(jFe,Mkr),b(c,uPe,u),b(c,Dr,u),g(Q8,Dr,null),e(Dr,Ekr),e(Dr,Cf),e(Cf,Ckr),e(Cf,OH),e(OH,wkr),e(Cf,Akr),e(Cf,VH),e(VH,ykr),e(Cf,Lkr),e(Dr,xkr),e(Dr,W8),e(W8,kkr),e(W8,DFe),e(DFe,Skr),e(W8,Rkr),e(Dr,Bkr),e(Dr,Pt),g(H8,Pt,null),e(Pt,Pkr),e(Pt,GFe),e(GFe,$kr),e(Pt,Ikr),e(Pt,wf),e(wf,qkr),e(wf,OFe),e(OFe,Nkr),e(wf,jkr),e(wf,XH),e(XH,Dkr),e(wf,Gkr),e(Pt,Okr),e(Pt,VFe),e(VFe,Vkr),e(Pt,Xkr),g(U8,Pt,null),e(Dr,zkr),e(Dr,$o),g(J8,$o,null),e($o,Qkr),e($o,XFe),e(XFe,Wkr),e($o,Hkr),e($o,qn),e(qn,Ukr),e(qn,zFe),e(zFe,Jkr),e(qn,Ykr),e(qn,QFe),e(QFe,Kkr),e(qn,Zkr),e(qn,WFe),e(WFe,eSr),e(qn,oSr),e($o,rSr),e($o,Pe),e(Pe,fE),e(fE,HFe),e(HFe,tSr),e(fE,aSr),e(fE,zH),e(zH,nSr),e(fE,sSr),e(Pe,lSr),e(Pe,mE),e(mE,UFe),e(UFe,iSr),e(mE,dSr),e(mE,QH),e(QH,cSr),e(mE,fSr),e(Pe,mSr),e(Pe,gE),e(gE,JFe),e(JFe,gSr),e(gE,hSr),e(gE,WH),e(WH,pSr),e(gE,_Sr),e(Pe,uSr),e(Pe,hE),e(hE,YFe),e(YFe,bSr),e(hE,FSr),e(hE,HH),e(HH,vSr),e(hE,TSr),e(Pe,MSr),e(Pe,pE),e(pE,KFe),e(KFe,ESr),e(pE,CSr),e(pE,UH),e(UH,wSr),e(pE,ASr),e(Pe,ySr),e(Pe,_E),e(_E,ZFe),e(ZFe,LSr),e(_E,xSr),e(_E,JH),e(JH,kSr),e(_E,SSr),e(Pe,RSr),e(Pe,uE),e(uE,eve),e(eve,BSr),e(uE,PSr),e(uE,YH),e(YH,$Sr),e(uE,ISr),e(Pe,qSr),e(Pe,bE),e(bE,ove),e(ove,NSr),e(bE,jSr),e(bE,KH),e(KH,DSr),e(bE,GSr),e($o,OSr),e($o,rve),e(rve,VSr),e($o,XSr),g(Y8,$o,null),b(c,bPe,u),b(c,Af,u),e(Af,FE),e(FE,tve),g(K8,tve,null),e(Af,zSr),e(Af,ave),e(ave,QSr),b(c,FPe,u),b(c,Gr,u),g(Z8,Gr,null),e(Gr,WSr),e(Gr,yf),e(yf,HSr),e(yf,ZH),e(ZH,USr),e(yf,JSr),e(yf,eU),e(eU,YSr),e(yf,KSr),e(Gr,ZSr),e(Gr,e7),e(e7,eRr),e(e7,nve),e(nve,oRr),e(e7,rRr),e(Gr,tRr),e(Gr,$t),g(o7,$t,null),e($t,aRr),e($t,sve),e(sve,nRr),e($t,sRr),e($t,Lf),e(Lf,lRr),e(Lf,lve),e(lve,iRr),e(Lf,dRr),e(Lf,oU),e(oU,cRr),e(Lf,fRr),e($t,mRr),e($t,ive),e(ive,gRr),e($t,hRr),g(r7,$t,null),e(Gr,pRr),e(Gr,Io),g(t7,Io,null),e(Io,_Rr),e(Io,dve),e(dve,uRr),e(Io,bRr),e(Io,Nn),e(Nn,FRr),e(Nn,cve),e(cve,vRr),e(Nn,TRr),e(Nn,fve),e(fve,MRr),e(Nn,ERr),e(Nn,mve),e(mve,CRr),e(Nn,wRr),e(Io,ARr),e(Io,gve),e(gve,vE),e(vE,hve),e(hve,yRr),e(vE,LRr),e(vE,rU),e(rU,xRr),e(vE,kRr),e(Io,SRr),e(Io,pve),e(pve,RRr),e(Io,BRr),g(a7,Io,null),b(c,vPe,u),b(c,xf,u),e(xf,TE),e(TE,_ve),g(n7,_ve,null),e(xf,PRr),e(xf,uve),e(uve,$Rr),b(c,TPe,u),b(c,Or,u),g(s7,Or,null),e(Or,IRr),e(Or,kf),e(kf,qRr),e(kf,tU),e(tU,NRr),e(kf,jRr),e(kf,aU),e(aU,DRr),e(kf,GRr),e(Or,ORr),e(Or,l7),e(l7,VRr),e(l7,bve),e(bve,XRr),e(l7,zRr),e(Or,QRr),e(Or,It),g(i7,It,null),e(It,WRr),e(It,Fve),e(Fve,HRr),e(It,URr),e(It,Sf),e(Sf,JRr),e(Sf,vve),e(vve,YRr),e(Sf,KRr),e(Sf,nU),e(nU,ZRr),e(Sf,eBr),e(It,oBr),e(It,Tve),e(Tve,rBr),e(It,tBr),g(d7,It,null),e(Or,aBr),e(Or,qo),g(c7,qo,null),e(qo,nBr),e(qo,Mve),e(Mve,sBr),e(qo,lBr),e(qo,jn),e(jn,iBr),e(jn,Eve),e(Eve,dBr),e(jn,cBr),e(jn,Cve),e(Cve,fBr),e(jn,mBr),e(jn,wve),e(wve,gBr),e(jn,hBr),e(qo,pBr),e(qo,f7),e(f7,ME),e(ME,Ave),e(Ave,_Br),e(ME,uBr),e(ME,sU),e(sU,bBr),e(ME,FBr),e(f7,vBr),e(f7,EE),e(EE,yve),e(yve,TBr),e(EE,MBr),e(EE,lU),e(lU,EBr),e(EE,CBr),e(qo,wBr),e(qo,Lve),e(Lve,ABr),e(qo,yBr),g(m7,qo,null),b(c,MPe,u),b(c,Rf,u),e(Rf,CE),e(CE,xve),g(g7,xve,null),e(Rf,LBr),e(Rf,kve),e(kve,xBr),b(c,EPe,u),b(c,Vr,u),g(h7,Vr,null),e(Vr,kBr),e(Vr,Bf),e(Bf,SBr),e(Bf,iU),e(iU,RBr),e(Bf,BBr),e(Bf,dU),e(dU,PBr),e(Bf,$Br),e(Vr,IBr),e(Vr,p7),e(p7,qBr),e(p7,Sve),e(Sve,NBr),e(p7,jBr),e(Vr,DBr),e(Vr,qt),g(_7,qt,null),e(qt,GBr),e(qt,Rve),e(Rve,OBr),e(qt,VBr),e(qt,Pf),e(Pf,XBr),e(Pf,Bve),e(Bve,zBr),e(Pf,QBr),e(Pf,cU),e(cU,WBr),e(Pf,HBr),e(qt,UBr),e(qt,Pve),e(Pve,JBr),e(qt,YBr),g(u7,qt,null),e(Vr,KBr),e(Vr,No),g(b7,No,null),e(No,ZBr),e(No,$ve),e($ve,ePr),e(No,oPr),e(No,Dn),e(Dn,rPr),e(Dn,Ive),e(Ive,tPr),e(Dn,aPr),e(Dn,qve),e(qve,nPr),e(Dn,sPr),e(Dn,Nve),e(Nve,lPr),e(Dn,iPr),e(No,dPr),e(No,jve),e(jve,wE),e(wE,Dve),e(Dve,cPr),e(wE,fPr),e(wE,fU),e(fU,mPr),e(wE,gPr),e(No,hPr),e(No,Gve),e(Gve,pPr),e(No,_Pr),g(F7,No,null),CPe=!0},p(c,[u]){const v7={};u&2&&(v7.$$scope={dirty:u,ctx:c}),Of.$set(v7);const Ove={};u&2&&(Ove.$$scope={dirty:u,ctx:c}),Ih.$set(Ove);const Vve={};u&2&&(Vve.$$scope={dirty:u,ctx:c}),Wh.$set(Vve)},i(c){CPe||(h(he.$$.fragment,c),h(Da.$$.fragment,c),h(xC.$$.fragment,c),h(kC.$$.fragment,c),h(Of.$$.fragment,c),h(SC.$$.fragment,c),h(RC.$$.fragment,c),h($C.$$.fragment,c),h(IC.$$.fragment,c),h(qC.$$.fragment,c),h(NC.$$.fragment,c),h(jC.$$.fragment,c),h(OC.$$.fragment,c),h(VC.$$.fragment,c),h(XC.$$.fragment,c),h(zC.$$.fragment,c),h(QC.$$.fragment,c),h(UC.$$.fragment,c),h(Ih.$$.fragment,c),h(JC.$$.fragment,c),h(YC.$$.fragment,c),h(KC.$$.fragment,c),h(ZC.$$.fragment,c),h(rw.$$.fragment,c),h(Wh.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(Fw.$$.fragment,c),h(vw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h(Iw.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(q0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(Fy.$$.fragment,c),h(vy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(bL.$$.fragment,c),h(FL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(yL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(RL.$$.fragment,c),h(BL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(qL.$$.fragment,c),h(jL.$$.fragment,c),h(DL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(VL.$$.fragment,c),h(XL.$$.fragment,c),h(QL.$$.fragment,c),h(WL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(ZL.$$.fragment,c),h(e8.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(a8.$$.fragment,c),h(s8.$$.fragment,c),h(l8.$$.fragment,c),h(i8.$$.fragment,c),h(d8.$$.fragment,c),h(c8.$$.fragment,c),h(f8.$$.fragment,c),h(g8.$$.fragment,c),h(h8.$$.fragment,c),h(p8.$$.fragment,c),h(_8.$$.fragment,c),h(u8.$$.fragment,c),h(b8.$$.fragment,c),h(v8.$$.fragment,c),h(T8.$$.fragment,c),h(M8.$$.fragment,c),h(E8.$$.fragment,c),h(C8.$$.fragment,c),h(w8.$$.fragment,c),h(y8.$$.fragment,c),h(L8.$$.fragment,c),h(x8.$$.fragment,c),h(k8.$$.fragment,c),h(S8.$$.fragment,c),h(R8.$$.fragment,c),h(P8.$$.fragment,c),h($8.$$.fragment,c),h(I8.$$.fragment,c),h(q8.$$.fragment,c),h(N8.$$.fragment,c),h(j8.$$.fragment,c),h(G8.$$.fragment,c),h(O8.$$.fragment,c),h(V8.$$.fragment,c),h(X8.$$.fragment,c),h(z8.$$.fragment,c),h(Q8.$$.fragment,c),h(H8.$$.fragment,c),h(U8.$$.fragment,c),h(J8.$$.fragment,c),h(Y8.$$.fragment,c),h(K8.$$.fragment,c),h(Z8.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(t7.$$.fragment,c),h(a7.$$.fragment,c),h(n7.$$.fragment,c),h(s7.$$.fragment,c),h(i7.$$.fragment,c),h(d7.$$.fragment,c),h(c7.$$.fragment,c),h(m7.$$.fragment,c),h(g7.$$.fragment,c),h(h7.$$.fragment,c),h(_7.$$.fragment,c),h(u7.$$.fragment,c),h(b7.$$.fragment,c),h(F7.$$.fragment,c),CPe=!0)},o(c){p(he.$$.fragment,c),p(Da.$$.fragment,c),p(xC.$$.fragment,c),p(kC.$$.fragment,c),p(Of.$$.fragment,c),p(SC.$$.fragment,c),p(RC.$$.fragment,c),p($C.$$.fragment,c),p(IC.$$.fragment,c),p(qC.$$.fragment,c),p(NC.$$.fragment,c),p(jC.$$.fragment,c),p(OC.$$.fragment,c),p(VC.$$.fragment,c),p(XC.$$.fragment,c),p(zC.$$.fragment,c),p(QC.$$.fragment,c),p(UC.$$.fragment,c),p(Ih.$$.fragment,c),p(JC.$$.fragment,c),p(YC.$$.fragment,c),p(KC.$$.fragment,c),p(ZC.$$.fragment,c),p(rw.$$.fragment,c),p(Wh.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(Fw.$$.fragment,c),p(vw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(yw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p(Iw.$$.fragment,c),p(qw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Vw.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(FA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(CA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(SA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(v0.$$.fragment,c),p(T0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(C0.$$.fragment,c),p(w0.$$.fragment,c),p(y0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(q0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(X0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(Fy.$$.fragment,c),p(vy.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(Cy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(By.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(qy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(bL.$$.fragment,c),p(FL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(yL.$$.fragment,c),p(LL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(RL.$$.fragment,c),p(BL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(IL.$$.fragment,c),p(qL.$$.fragment,c),p(jL.$$.fragment,c),p(DL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(VL.$$.fragment,c),p(XL.$$.fragment,c),p(QL.$$.fragment,c),p(WL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(JL.$$.fragment,c),p(YL.$$.fragment,c),p(ZL.$$.fragment,c),p(e8.$$.fragment,c),p(o8.$$.fragment,c),p(r8.$$.fragment,c),p(t8.$$.fragment,c),p(a8.$$.fragment,c),p(s8.$$.fragment,c),p(l8.$$.fragment,c),p(i8.$$.fragment,c),p(d8.$$.fragment,c),p(c8.$$.fragment,c),p(f8.$$.fragment,c),p(g8.$$.fragment,c),p(h8.$$.fragment,c),p(p8.$$.fragment,c),p(_8.$$.fragment,c),p(u8.$$.fragment,c),p(b8.$$.fragment,c),p(v8.$$.fragment,c),p(T8.$$.fragment,c),p(M8.$$.fragment,c),p(E8.$$.fragment,c),p(C8.$$.fragment,c),p(w8.$$.fragment,c),p(y8.$$.fragment,c),p(L8.$$.fragment,c),p(x8.$$.fragment,c),p(k8.$$.fragment,c),p(S8.$$.fragment,c),p(R8.$$.fragment,c),p(P8.$$.fragment,c),p($8.$$.fragment,c),p(I8.$$.fragment,c),p(q8.$$.fragment,c),p(N8.$$.fragment,c),p(j8.$$.fragment,c),p(G8.$$.fragment,c),p(O8.$$.fragment,c),p(V8.$$.fragment,c),p(X8.$$.fragment,c),p(z8.$$.fragment,c),p(Q8.$$.fragment,c),p(H8.$$.fragment,c),p(U8.$$.fragment,c),p(J8.$$.fragment,c),p(Y8.$$.fragment,c),p(K8.$$.fragment,c),p(Z8.$$.fragment,c),p(o7.$$.fragment,c),p(r7.$$.fragment,c),p(t7.$$.fragment,c),p(a7.$$.fragment,c),p(n7.$$.fragment,c),p(s7.$$.fragment,c),p(i7.$$.fragment,c),p(d7.$$.fragment,c),p(c7.$$.fragment,c),p(m7.$$.fragment,c),p(g7.$$.fragment,c),p(h7.$$.fragment,c),p(_7.$$.fragment,c),p(u7.$$.fragment,c),p(b7.$$.fragment,c),p(F7.$$.fragment,c),CPe=!1},d(c){t(Z),c&&t(io),c&&t(ce),_(he),c&&t(qf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(jf),_(Da,c),c&&t(fo),c&&t(ue),c&&t(zo),c&&t(Ga),c&&t(ERe),c&&t(Vi),_(xC),c&&t(CRe),c&&t(zn),c&&t(wRe),_(kC,c),c&&t(ARe),c&&t(M9),c&&t(yRe),_(Of,c),c&&t(LRe),c&&t(Xi),_(SC),c&&t(xRe),c&&t(Qo),_(RC),_($C),_(IC),_(qC),c&&t(kRe),c&&t(Qi),_(NC),c&&t(SRe),c&&t(Wo),_(jC),_(OC),_(VC),_(XC),c&&t(RRe),c&&t(Wi),_(zC),c&&t(BRe),c&&t(Ho),_(QC),_(UC),_(Ih),_(JC),_(YC),c&&t(PRe),c&&t(Hi),_(KC),c&&t($Re),c&&t(Uo),_(ZC),_(rw),_(Wh),_(tw),_(aw),c&&t(IRe),c&&t(Ji),_(nw),c&&t(qRe),c&&t(Jo),_(sw),_(iw),_(dw),_(cw),_(fw),c&&t(NRe),c&&t(Zi),_(mw),c&&t(jRe),c&&t(Yo),_(gw),_(pw),_(_w),_(uw),_(bw),c&&t(DRe),c&&t(rd),_(Fw),c&&t(GRe),c&&t(Ko),_(vw),_(Mw),_(Ew),_(Cw),_(ww),c&&t(ORe),c&&t(nd),_(Aw),c&&t(VRe),c&&t(Zo),_(yw),_(xw),_(kw),_(Sw),_(Rw),c&&t(XRe),c&&t(id),_(Bw),c&&t(zRe),c&&t(er),_(Pw),_(Iw),_(qw),_(Nw),_(jw),c&&t(QRe),c&&t(fd),_(Dw),c&&t(WRe),c&&t(or),_(Gw),_(Vw),_(Xw),_(zw),_(Qw),c&&t(HRe),c&&t(hd),_(Ww),c&&t(URe),c&&t(rr),_(Hw),_(Jw),_(Yw),_(Kw),_(Zw),c&&t(JRe),c&&t(ud),_(eA),c&&t(YRe),c&&t(tr),_(oA),_(tA),_(aA),_(nA),_(sA),c&&t(KRe),c&&t(vd),_(lA),c&&t(ZRe),c&&t(ar),_(iA),_(cA),_(fA),_(mA),_(gA),c&&t(eBe),c&&t(Ed),_(hA),c&&t(oBe),c&&t(nr),_(pA),_(uA),_(bA),_(FA),_(vA),c&&t(rBe),c&&t(Ad),_(TA),c&&t(tBe),c&&t(sr),_(MA),_(CA),_(wA),_(AA),_(yA),c&&t(aBe),c&&t(xd),_(LA),c&&t(nBe),c&&t(lr),_(xA),_(SA),_(RA),_(BA),_(PA),c&&t(sBe),c&&t(Rd),_($A),c&&t(lBe),c&&t(ir),_(IA),_(NA),_(jA),_(DA),_(GA),c&&t(iBe),c&&t($d),_(OA),c&&t(dBe),c&&t(dr),_(VA),_(zA),_(QA),_(WA),_(HA),c&&t(cBe),c&&t(Nd),_(UA),c&&t(fBe),c&&t(cr),_(JA),_(KA),_(ZA),_(e0),_(o0),c&&t(mBe),c&&t(Gd),_(r0),c&&t(gBe),c&&t(fr),_(t0),_(n0),_(s0),_(l0),_(i0),c&&t(hBe),c&&t(Xd),_(d0),c&&t(pBe),c&&t(mr),_(c0),_(m0),_(g0),_(h0),_(_0),c&&t(_Be),c&&t(Wd),_(u0),c&&t(uBe),c&&t(gr),_(b0),_(v0),_(T0),_(M0),_(E0),c&&t(bBe),c&&t(Jd),_(C0),c&&t(FBe),c&&t(hr),_(w0),_(y0),_(L0),_(x0),_(k0),c&&t(vBe),c&&t(ec),_(S0),c&&t(TBe),c&&t(pr),_(R0),_(P0),_($0),_(I0),_(q0),c&&t(MBe),c&&t(tc),_(N0),c&&t(EBe),c&&t(_r),_(j0),_(G0),_(O0),_(V0),_(X0),c&&t(CBe),c&&t(sc),_(z0),c&&t(wBe),c&&t(ur),_(Q0),_(H0),_(U0),_(J0),_(Y0),c&&t(ABe),c&&t(cc),_(K0),c&&t(yBe),c&&t(br),_(Z0),_(oy),_(ry),_(ty),_(ay),c&&t(LBe),c&&t(gc),_(ny),c&&t(xBe),c&&t(Fr),_(sy),_(iy),_(dy),_(cy),_(fy),c&&t(kBe),c&&t(_c),_(my),c&&t(SBe),c&&t(vr),_(gy),_(py),_(_y),_(uy),_(by),c&&t(RBe),c&&t(Fc),_(Fy),c&&t(BBe),c&&t(Tr),_(vy),_(My),_(Ey),_(Cy),_(wy),c&&t(PBe),c&&t(Mc),_(Ay),c&&t($Be),c&&t(Mr),_(yy),_(xy),_(ky),_(Sy),_(By),c&&t(IBe),c&&t(wc),_(Py),c&&t(qBe),c&&t(Er),_($y),_(qy),_(Ny),_(jy),_(Dy),c&&t(NBe),c&&t(Lc),_(Gy),c&&t(jBe),c&&t(Cr),_(Oy),_(Xy),_(zy),_(Qy),_(Wy),c&&t(DBe),c&&t(Sc),_(Hy),c&&t(GBe),c&&t(wr),_(Uy),_(Yy),_(Ky),_(Zy),_(eL),c&&t(OBe),c&&t(Pc),_(oL),c&&t(VBe),c&&t(Ar),_(rL),_(aL),_(nL),_(sL),_(lL),c&&t(XBe),c&&t(qc),_(iL),c&&t(zBe),c&&t(yr),_(dL),_(fL),_(mL),_(gL),_(hL),c&&t(QBe),c&&t(Dc),_(pL),c&&t(WBe),c&&t(Lr),_(_L),_(bL),_(FL),_(vL),_(TL),c&&t(HBe),c&&t(Vc),_(ML),c&&t(UBe),c&&t(xr),_(EL),_(wL),_(AL),_(yL),_(LL),c&&t(JBe),c&&t(Qc),_(xL),c&&t(YBe),c&&t(kr),_(kL),_(RL),_(BL),_(PL),_($L),c&&t(KBe),c&&t(Uc),_(IL),c&&t(ZBe),c&&t(Sr),_(qL),_(jL),_(DL),_(GL),_(OL),c&&t(ePe),c&&t(Kc),_(VL),c&&t(oPe),c&&t(Rr),_(XL),_(QL),_(WL),_(HL),_(UL),c&&t(rPe),c&&t(of),_(JL),c&&t(tPe),c&&t(Br),_(YL),_(ZL),_(e8),_(o8),_(r8),c&&t(aPe),c&&t(af),_(t8),c&&t(nPe),c&&t(Pr),_(a8),_(s8),_(l8),_(i8),_(d8),c&&t(sPe),c&&t(lf),_(c8),c&&t(lPe),c&&t($r),_(f8),_(g8),_(h8),_(p8),_(_8),c&&t(iPe),c&&t(ff),_(u8),c&&t(dPe),c&&t(Ir),_(b8),_(v8),_(T8),_(M8),_(E8),c&&t(cPe),c&&t(hf),_(C8),c&&t(fPe),c&&t(qr),_(w8),_(y8),_(L8),_(x8),_(k8),c&&t(mPe),c&&t(uf),_(S8),c&&t(gPe),c&&t(Nr),_(R8),_(P8),_($8),_(I8),_(q8),c&&t(hPe),c&&t(vf),_(N8),c&&t(pPe),c&&t(jr),_(j8),_(G8),_(O8),_(V8),_(X8),c&&t(_Pe),c&&t(Ef),_(z8),c&&t(uPe),c&&t(Dr),_(Q8),_(H8),_(U8),_(J8),_(Y8),c&&t(bPe),c&&t(Af),_(K8),c&&t(FPe),c&&t(Gr),_(Z8),_(o7),_(r7),_(t7),_(a7),c&&t(vPe),c&&t(xf),_(n7),c&&t(TPe),c&&t(Or),_(s7),_(i7),_(d7),_(c7),_(m7),c&&t(MPe),c&&t(Rf),_(g7),c&&t(EPe),c&&t(Vr),_(h7),_(_7),_(u7),_(b7),_(F7)}}}const lwt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function iwt(If){return rwt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class hwt extends KCt{constructor(Z){super();ZCt(this,Z,iwt,swt,ewt,{})}}export{hwt as default,lwt as metadata};
