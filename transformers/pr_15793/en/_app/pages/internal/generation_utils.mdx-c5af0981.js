import{S as lk,i as dk,s as pk,e as o,k as c,w as m,t as a,L as fk,c as n,d as r,m as l,a as s,x as h,h as i,b as d,J as e,g as f,y as u,K as mk,q as g,o as _,B as b}from"../../chunks/vendor-9e2b328e.js";import{D as v}from"../../chunks/Docstring-50fd6873.js";import{C as x1}from"../../chunks/CodeBlock-88e23343.js";import{I as Oe}from"../../chunks/IconCopyLink-fd0e58fd.js";import"../../chunks/CopyButton-4ae140ab.js";function hk(Cp){let Be,tn,N,H,Ia,Jt,Np,Aa,Wp,bl,y,Vp,rn,Mp,Gp,on,jp,Hp,nn,Rp,Kp,sn,Up,Yp,an,Xp,Jp,cn,Qp,Zp,ln,ef,tf,vl,dn,rf,Tl,Ge,pt,Ca,Qt,of,Na,nf,$l,W,sf,pn,af,cf,fn,lf,df,mn,pf,ff,yl,hn,mf,kl,Zt,wl,Ie,hf,Wa,uf,gf,un,_f,bf,xl,V,gn,Va,vf,Tf,$f,_n,Ma,yf,kf,wf,bn,Ga,xf,Ef,Lf,vn,ja,Pf,Ff,El,k,Df,Ha,zf,Sf,Ra,qf,Of,Ka,Bf,If,Ua,Af,Cf,Ya,Nf,Wf,Xa,Vf,Mf,Ll,F,Gf,Ja,jf,Hf,Qa,Rf,Kf,Za,Uf,Yf,ei,Xf,Jf,Pl,D,Qf,ti,Zf,em,ri,tm,rm,oi,om,nm,ni,sm,am,Fl,er,Dl,ft,im,si,cm,lm,zl,z,dm,ai,pm,fm,ii,mm,hm,ci,um,gm,li,_m,bm,Sl,Tn,vm,ql,je,mt,di,tr,Tm,pi,$m,Ol,He,rr,ym,fi,km,Bl,Re,or,wm,mi,xm,Il,R,nr,Em,hi,Lm,Pm,ht,sr,Fm,ui,Dm,Al,Ke,ut,gi,ar,zm,_i,Sm,Cl,Ue,ir,qm,bi,Om,Nl,Ye,cr,Bm,vi,Im,Wl,K,lr,Am,Ti,Cm,Nm,gt,dr,Wm,$i,Vm,Vl,Xe,_t,yi,pr,Mm,ki,Gm,Ml,Je,fr,jm,wi,Hm,Gl,Qe,mr,Rm,xi,Km,jl,Ze,bt,Ei,hr,Um,Li,Ym,Hl,et,ur,Xm,Pi,Jm,Rl,tt,gr,Qm,Fi,Zm,Kl,rt,vt,Di,_r,eh,zi,th,Ul,Tt,rh,$n,oh,nh,Yl,U,br,sh,Si,ah,ih,$t,vr,ch,qi,lh,Xl,Y,Tr,dh,w,ph,yn,fh,mh,kn,hh,uh,Oi,gh,_h,Bi,Ii,bh,vh,wn,Th,$h,xn,yh,kh,wh,En,$r,Jl,X,yr,xh,Ai,Eh,Lh,yt,kr,Ph,Ci,Fh,Ql,J,wr,Dh,Ln,Pn,zh,Sh,qh,Ni,Zl,Q,xr,Oh,Fn,Dn,Bh,Ih,Ah,Wi,ed,Z,Er,Ch,zn,Sn,Nh,Wh,Vh,Vi,td,ee,Lr,Mh,qn,On,Gh,jh,Hh,Mi,rd,te,Pr,Rh,Bn,In,Kh,Uh,Yh,Gi,od,re,Fr,Xh,kt,An,Jh,Qh,Dr,Zh,eu,tu,ji,nd,oe,zr,ru,Cn,Nn,ou,nu,su,Hi,sd,ne,Sr,au,wt,Wn,iu,cu,qr,lu,du,pu,Ri,ad,se,Or,fu,Ae,Vn,mu,hu,Mn,uu,gu,Br,_u,bu,vu,Ki,id,ae,Ir,Tu,Gn,jn,$u,yu,ku,Ui,cd,ie,Ar,wu,xt,Hn,xu,Eu,Yi,Lu,Pu,Fu,Xi,ld,ce,Cr,Du,M,Rn,zu,Su,Ji,qu,Ou,Qi,Bu,Iu,Zi,Au,Cu,Nu,ec,dd,le,Nr,Wu,tc,Vu,Mu,Et,Wr,Gu,rc,ju,pd,de,Vr,Hu,B,Ru,Kn,Ku,Uu,oc,Yu,Xu,nc,sc,Ju,Qu,Un,Zu,eg,tg,Yn,Mr,fd,pe,Gr,rg,ac,og,ng,Lt,jr,sg,ic,ag,md,fe,Hr,ig,Xn,Jn,cg,lg,dg,cc,hd,me,Rr,pg,Qn,Zn,fg,mg,hg,lc,ud,he,Kr,ug,es,ts,gg,_g,bg,dc,gd,ue,Ur,vg,rs,os,Tg,$g,yg,pc,_d,ge,Yr,kg,ns,ss,wg,xg,Eg,fc,bd,_e,Xr,Lg,Pt,as,Pg,Fg,Jr,Dg,zg,Sg,mc,vd,be,Qr,qg,is,cs,Og,Bg,Ig,hc,Td,ve,Zr,Ag,uc,Cg,Ng,Ft,eo,Wg,gc,Vg,$d,Te,to,Mg,x,Gg,ls,jg,Hg,ds,Rg,Kg,_c,Ug,Yg,bc,vc,Xg,Jg,ps,Qg,Zg,fs,e_,t_,r_,ms,ro,yd,$e,oo,o_,Tc,n_,s_,Dt,no,a_,$c,i_,kd,ye,so,c_,hs,us,l_,d_,p_,yc,wd,ke,ao,f_,gs,_s,m_,h_,u_,kc,xd,we,io,g_,bs,vs,__,b_,v_,wc,Ed,xe,co,T_,Ts,$s,$_,y_,k_,xc,Ld,Ee,lo,w_,zt,ys,x_,E_,Ec,L_,P_,F_,Lc,Pd,Le,po,D_,ks,ws,z_,S_,q_,Pc,Fd,ot,St,Fc,fo,O_,Dc,B_,Dd,qt,I_,xs,A_,C_,zd,Pe,mo,N_,zc,W_,V_,Es,ho,Sd,uo,Ls,go,qd,Fe,_o,M_,bo,G_,Sc,j_,H_,R_,Ps,vo,Od,De,To,K_,$o,U_,qc,Y_,X_,J_,Fs,yo,Bd,nt,Ot,Oc,ko,Q_,Bc,Z_,Id,Bt,eb,Ds,tb,rb,Ad,T,wo,ob,Ic,nb,sb,Ac,ab,ib,xo,cb,Cc,lb,db,It,Eo,pb,Nc,fb,mb,At,Lo,hb,Wc,ub,gb,Ct,Po,_b,Vc,bb,vb,Nt,Fo,Tb,Do,$b,Mc,yb,kb,wb,Wt,zo,xb,Gc,Eb,Lb,Vt,So,Pb,jc,Fb,Db,Ce,qo,zb,Oo,Sb,Hc,qb,Ob,Bb,Rc,Ib,Cd,st,Bo,Ab,zs,Ss,Cb,Nb,Nd,I,Io,Wb,Kc,Vb,Mb,L,Ao,Gb,Uc,jb,Hb,at,Rb,Yc,Kb,Ub,Xc,Yb,Xb,Jb,Jc,Qc,Qb,Zb,ze,ev,Zc,tv,rv,el,ov,nv,tl,sv,av,iv,rl,cv,lv,Mt,Co,dv,ol,pv,Wd,it,Gt,nl,No,fv,sl,mv,Vd,A,Wo,hv,ct,uv,qs,gv,_v,Os,bv,vv,Tv,Bs,Vo,$v,Is,Mo,Md,E,Go,yv,As,Cs,kv,wv,xv,jo,Ev,Ho,Lv,Pv,Fv,Ns,Dv,Ro,zv,Sv,al,qv,il,Gd,C,Ko,Ov,Ws,Vs,Bv,Iv,Av,Ms,Uo,Cv,cl,jd,lt,jt,ll,Yo,Nv,dl,Wv,Hd,Se,Xo,Vv,pl,Mv,Gv,Gs,jv,Jo,Hv,Rd,qe,Qo,Rv,fl,Kv,Uv,js,Yv,Zo,Xv,Kd;return Jt=new Oe({}),Qt=new Oe({}),Zt=new x1({props:{code:`from transformers import GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained("gpt2")
model = GPT2LMHeadModel.from_pretrained("gpt2")

inputs = tokenizer("Hello, my dog is cute and ", return_tensors="pt")
generation_output = model.generate(**inputs, return_dict_in_generate=True, output_scores=True),`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)
model = GPT2LMHeadModel.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)

inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute and &quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
generation_output = model.generate(**inputs, return_dict_in_generate=<span class="hljs-literal">True</span>, output_scores=<span class="hljs-literal">True</span>)`}}),er=new x1({props:{code:"generation_output[:2],",highlighted:'generation_output[:<span class="hljs-number">2</span>]'}}),tr=new Oe({}),rr=new v({props:{name:"class transformers.generation_utils.GreedySearchDecoderOnlyOutput",anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_utils.py#L61",parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each
tensor of shape <code>(batch_size, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}]}}),or=new v({props:{name:"class transformers.generation_utils.GreedySearchEncoderDecoderOutput",anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_utils.py#L89",parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}]}}),nr=new v({props:{name:"class transformers.generation_flax_utils.FlaxGreedySearchOutput",anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput",parameters:[{name:"sequences",val:": ndarray = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_flax_utils.py#L45",parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}]}}),sr=new v({props:{name:"replace",anchor:"None",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/flax/struct.py#L120"}}),ar=new Oe({}),ir=new v({props:{name:"class transformers.generation_utils.SampleDecoderOnlyOutput",anchor:"transformers.generation_utils.SampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_utils.py#L131",parametersDescription:[{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each
tensor of shape <code>(batch_size*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}]}}),cr=new v({props:{name:"class transformers.generation_utils.SampleEncoderDecoderOutput",anchor:"transformers.generation_utils.SampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_utils.py#L160",parametersDescription:[{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape
<code>(batch_size*num_return_sequences, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}]}}),lr=new v({props:{name:"class transformers.generation_flax_utils.FlaxSampleOutput",anchor:"transformers.generation_flax_utils.FlaxSampleOutput",parameters:[{name:"sequences",val:": ndarray = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_flax_utils.py#L59",parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxSampleOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}]}}),dr=new v({props:{name:"replace",anchor:"None",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/flax/struct.py#L120"}}),pr=new Oe({}),fr=new v({props:{name:"class transformers.generation_utils.BeamSearchDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_utils.py#L203",parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-input_ids.shape[-1],)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"hidden_states"}]}}),mr=new v({props:{name:"class transformers.generation_utils.BeamSearchEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_utils.py#L238",parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-1,)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.attentions",description:"<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;",name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}]}}),hr=new Oe({}),ur=new v({props:{name:"class transformers.generation_utils.BeamSampleDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_utils.py#L289",parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-input_ids.shape[-1],)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"hidden_states"}]}}),gr=new v({props:{name:"class transformers.generation_utils.BeamSampleEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_utils.py#L324",parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_beams, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-1,)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}]}}),_r=new Oe({}),br=new v({props:{name:"class transformers.LogitsProcessor",anchor:"transformers.LogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_logits_process.py#L51"}}),vr=new v({props:{name:"__call__",anchor:"transformers.LogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_logits_process.py#L54",parametersDescription:[{anchor:"transformers.LogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15793/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Tr=new v({props:{name:"class transformers.LogitsProcessorList",anchor:"transformers.LogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_logits_process.py#L73"}}),$r=new v({props:{name:"__call__",anchor:"transformers.LogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_logits_process.py#L80",parametersDescription:[{anchor:"transformers.LogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15793/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),yr=new v({props:{name:"class transformers.LogitsWarper",anchor:"transformers.LogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_logits_process.py#L62"}}),kr=new v({props:{name:"__call__",anchor:"transformers.LogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_logits_process.py#L65",parametersDescription:[{anchor:"transformers.LogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15793/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),wr=new v({props:{name:"class transformers.MinLengthLogitsProcessor",anchor:"transformers.MinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_logits_process.py#L96",parametersDescription:[{anchor:"transformers.MinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.MinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),xr=new v({props:{name:"class transformers.TemperatureLogitsWarper",anchor:"transformers.TemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_logits_process.py#L124",parametersDescription:[{anchor:"transformers.TemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}]}}),Er=new v({props:{name:"class transformers.RepetitionPenaltyLogitsProcessor",anchor:"transformers.RepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_logits_process.py#L144",parametersDescription:[{anchor:"transformers.RepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}]}}),Lr=new v({props:{name:"class transformers.TopPLogitsWarper",anchor:"transformers.TopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_logits_process.py#L170",parametersDescription:[{anchor:"transformers.TopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.TopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),Pr=new v({props:{name:"class transformers.TopKLogitsWarper",anchor:"transformers.TopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_logits_process.py#L212",parametersDescription:[{anchor:"transformers.TopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),Fr=new v({props:{name:"class transformers.NoRepeatNGramLogitsProcessor",anchor:"transformers.NoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_logits_process.py#L309",parametersDescription:[{anchor:"transformers.NoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}]}}),zr=new v({props:{name:"class transformers.NoBadWordsLogitsProcessor",anchor:"transformers.NoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_logits_process.py#L376",parametersDescription:[{anchor:"transformers.NoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the token ids of the words
that should not appear in the generated text, use <code>tokenizer(bad_words, add_prefix_space=True, add_special_tokens=False).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.NoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),Sr=new v({props:{name:"class transformers.PrefixConstrainedLogitsProcessor",anchor:"transformers.PrefixConstrainedLogitsProcessor",parameters:[{name:"prefix_allowed_tokens_fn",val:": typing.Callable[[int, torch.Tensor], typing.List[int]]"},{name:"num_beams",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_logits_process.py#L504"}}),Or=new v({props:{name:"class transformers.HammingDiversityLogitsProcessor",anchor:"transformers.HammingDiversityLogitsProcessor",parameters:[{name:"diversity_penalty",val:": float"},{name:"num_beams",val:": int"},{name:"num_beam_groups",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_logits_process.py#L530",parametersDescription:[{anchor:"transformers.HammingDiversityLogitsProcessor.diversity_penalty",description:`<strong>diversity_penalty</strong> (<code>float</code>) &#x2014;
This value is subtracted from a beam&#x2019;s score if it generates a token same as any beam from other group at a
particular time. Note that <code>diversity_penalty</code> is only effective if <code>group beam search</code> is enabled.`,name:"diversity_penalty"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams used for group beam search. See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more
details.`,name:"num_beams"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}]}}),Ir=new v({props:{name:"class transformers.ForcedBOSTokenLogitsProcessor",anchor:"transformers.ForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_logits_process.py#L590",parametersDescription:[{anchor:"transformers.ForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}]}}),Ar=new v({props:{name:"class transformers.ForcedEOSTokenLogitsProcessor",anchor:"transformers.ForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_logits_process.py#L611",parametersDescription:[{anchor:"transformers.ForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}]}}),Cr=new v({props:{name:"class transformers.InfNanRemoveLogitsProcessor",anchor:"transformers.InfNanRemoveLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_logits_process.py#L635"}}),Nr=new v({props:{name:"class transformers.TFLogitsProcessor",anchor:"transformers.TFLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_tf_logits_process.py#L50"}}),Wr=new v({props:{name:"__call__",anchor:"transformers.TFLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_tf_logits_process.py#L53",parametersDescription:[{anchor:"transformers.TFLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15793/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Vr=new v({props:{name:"class transformers.TFLogitsProcessorList",anchor:"transformers.TFLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_tf_logits_process.py#L72"}}),Mr=new v({props:{name:"__call__",anchor:"transformers.TFLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_tf_logits_process.py#L79",parametersDescription:[{anchor:"transformers.TFLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15793/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Gr=new v({props:{name:"class transformers.TFLogitsWarper",anchor:"transformers.TFLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_tf_logits_process.py#L61"}}),jr=new v({props:{name:"__call__",anchor:"transformers.TFLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_tf_logits_process.py#L64",parametersDescription:[{anchor:"transformers.TFLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15793/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Hr=new v({props:{name:"class transformers.TFTemperatureLogitsWarper",anchor:"transformers.TFTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_tf_logits_process.py#L95",parametersDescription:[{anchor:"transformers.TFTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}]}}),Rr=new v({props:{name:"class transformers.TFTopPLogitsWarper",anchor:"transformers.TFTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_tf_logits_process.py#L152",parametersDescription:[{anchor:"transformers.TFTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.TFTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),Kr=new v({props:{name:"class transformers.TFTopKLogitsWarper",anchor:"transformers.TFTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_tf_logits_process.py#L115",parametersDescription:[{anchor:"transformers.TFTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TFTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),Ur=new v({props:{name:"class transformers.TFMinLengthLogitsProcessor",anchor:"transformers.TFMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_tf_logits_process.py#L205",parametersDescription:[{anchor:"transformers.TFMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.TFMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),Yr=new v({props:{name:"class transformers.TFNoBadWordsLogitsProcessor",anchor:"transformers.TFNoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_tf_logits_process.py#L278",parametersDescription:[{anchor:"transformers.TFNoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the tokens of the words
that should not appear in the generated text, use <code>tokenizer(bad_word, add_prefix_space=True).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.TFNoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),Xr=new v({props:{name:"class transformers.TFNoRepeatNGramLogitsProcessor",anchor:"transformers.TFNoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_tf_logits_process.py#L361",parametersDescription:[{anchor:"transformers.TFNoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}]}}),Qr=new v({props:{name:"class transformers.TFRepetitionPenaltyLogitsProcessor",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_tf_logits_process.py#L240",parametersDescription:[{anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}]}}),Zr=new v({props:{name:"class transformers.FlaxLogitsProcessor",anchor:"transformers.FlaxLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_flax_logits_process.py#L50"}}),eo=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_flax_logits_process.py#L53",parametersDescription:[{anchor:"transformers.FlaxLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15793/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),to=new v({props:{name:"class transformers.FlaxLogitsProcessorList",anchor:"transformers.FlaxLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_flax_logits_process.py#L72"}}),ro=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_flax_logits_process.py#L79",parametersDescription:[{anchor:"transformers.FlaxLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15793/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),oo=new v({props:{name:"class transformers.FlaxLogitsWarper",anchor:"transformers.FlaxLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_flax_logits_process.py#L61"}}),no=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_flax_logits_process.py#L64",parametersDescription:[{anchor:"transformers.FlaxLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15793/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),so=new v({props:{name:"class transformers.FlaxTemperatureLogitsWarper",anchor:"transformers.FlaxTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_flax_logits_process.py#L95",parametersDescription:[{anchor:"transformers.FlaxTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}]}}),ao=new v({props:{name:"class transformers.FlaxTopPLogitsWarper",anchor:"transformers.FlaxTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_flax_logits_process.py#L115",parametersDescription:[{anchor:"transformers.FlaxTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.FlaxTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),io=new v({props:{name:"class transformers.FlaxTopKLogitsWarper",anchor:"transformers.FlaxTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_flax_logits_process.py#L156",parametersDescription:[{anchor:"transformers.FlaxTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.FlaxTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),co=new v({props:{name:"class transformers.FlaxForcedBOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_flax_logits_process.py#L192",parametersDescription:[{anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}]}}),lo=new v({props:{name:"class transformers.FlaxForcedEOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_flax_logits_process.py#L216",parametersDescription:[{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}]}}),po=new v({props:{name:"class transformers.FlaxMinLengthLogitsProcessor",anchor:"transformers.FlaxMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_flax_logits_process.py#L243",parametersDescription:[{anchor:"transformers.FlaxMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.FlaxMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),fo=new Oe({}),mo=new v({props:{name:"class transformers.StoppingCriteria",anchor:"transformers.StoppingCriteria",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_stopping_criteria.py#L33"}}),ho=new v({props:{name:"__call__",anchor:"transformers.StoppingCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_stopping_criteria.py#L36",parametersDescription:[{anchor:"transformers.StoppingCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15793/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),go=new v({props:{name:"__call__",anchor:"transformers.StoppingCriteriaList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_stopping_criteria.py#L111",parametersDescription:[{anchor:"transformers.StoppingCriteriaList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15793/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteriaList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),_o=new v({props:{name:"class transformers.MaxLengthCriteria",anchor:"transformers.MaxLengthCriteria",parameters:[{name:"max_length",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_stopping_criteria.py#L41",parametersDescription:[{anchor:"transformers.MaxLengthCriteria.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length that the output sequence can have in number of tokens.`,name:"max_length"}]}}),vo=new v({props:{name:"__call__",anchor:"transformers.MaxLengthCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_stopping_criteria.py#L54",parametersDescription:[{anchor:"transformers.MaxLengthCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15793/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxLengthCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),To=new v({props:{name:"class transformers.MaxTimeCriteria",anchor:"transformers.MaxTimeCriteria",parameters:[{name:"max_time",val:": float"},{name:"initial_timestamp",val:": typing.Optional[float] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_stopping_criteria.py#L88",parametersDescription:[{anchor:"transformers.MaxTimeCriteria.max_time",description:`<strong>max_time</strong> (<code>float</code>) &#x2014;
The maximum allowed time in seconds for the generation.`,name:"max_time"},{anchor:"transformers.MaxTimeCriteria.initial_time",description:`<strong>initial_time</strong> (<code>float</code>, <em>optional</em>, defaults to <code>time.time()</code>) &#x2014;
The start of the generation allowed time.`,name:"initial_time"}]}}),yo=new v({props:{name:"__call__",anchor:"transformers.MaxTimeCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_stopping_criteria.py#L105",parametersDescription:[{anchor:"transformers.MaxTimeCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15793/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxTimeCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),ko=new Oe({}),wo=new v({props:{name:"class transformers.Constraint",anchor:"transformers.Constraint",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_beam_constraints.py#L7"}}),xo=new x1({props:{code:`completed = False
while not completed:
    _, completed = constraint.update(constraint.advance()),`,highlighted:`completed = <span class="hljs-literal">False</span>
<span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> completed:
    _, completed = constraint.update(constraint.advance())`}}),Eo=new v({props:{name:"advance",anchor:"transformers.Constraint.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_beam_constraints.py#L50",returnDescription:`
<p>Must be a tensor of a list of indexable tokens, not some integer.</p>
`,returnType:`
<p>token_ids(<code>torch.tensor</code>)</p>
`}}),Lo=new v({props:{name:"copy",anchor:"transformers.Constraint.copy",parameters:[{name:"stateful",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_beam_constraints.py#L115",returnDescription:`
<p>The same constraint as the one being called from.</p>
`,returnType:`
<p>constraint(<code>Constraint</code>)</p>
`}}),Po=new v({props:{name:"does_advance",anchor:"transformers.Constraint.does_advance",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_beam_constraints.py#L62"}}),Fo=new v({props:{name:"remaining",anchor:"transformers.Constraint.remaining",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_beam_constraints.py#L106"}}),zo=new v({props:{name:"reset",anchor:"transformers.Constraint.reset",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_beam_constraints.py#L96"}}),So=new v({props:{name:"test",anchor:"transformers.Constraint.test",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_beam_constraints.py#L26"}}),qo=new v({props:{name:"update",anchor:"transformers.Constraint.update",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_beam_constraints.py#L71",returnDescription:`
<p>Whether this constraint has become one step closer to being fulfuilled.
completed(<code>bool</code>):
Whether this constraint has been completely fulfilled by this token being generated.
reset (<code>bool</code>):
Whether this constraint has reset its progress by this token being generated.</p>
`,returnType:`
<p>stepped(<code>bool</code>)</p>
`}}),Bo=new v({props:{name:"class transformers.PhrasalConstraint",anchor:"transformers.PhrasalConstraint",parameters:[{name:"token_ids",val:": typing.Union[typing.List[int], torch.LongTensor]"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_beam_constraints.py#L131",parametersDescription:[{anchor:"transformers.PhrasalConstraint.token_ids",description:`<strong>token_ids</strong> (<code>List[int]</code>) &#x2014;
The id of the token that must be generated by the output.`,name:"token_ids"}]}}),Io=new v({props:{name:"class transformers.ConstraintListState",anchor:"transformers.ConstraintListState",parameters:[{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_beam_constraints.py#L205",parametersDescription:[{anchor:"transformers.ConstraintListState.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of <a href="/docs/transformers/pr_15793/en/internal/generation_utils#transformers.Constraint">Constraint</a> objects that must be fulfilled by the beam scorer.`,name:"constraints"}]}}),Ao=new v({props:{name:"advance",anchor:"transformers.ConstraintListState.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_beam_constraints.py#L237"}}),Co=new v({props:{name:"reset",anchor:"transformers.ConstraintListState.reset",parameters:[{name:"token_ids",val:": typing.Optional[torch.LongTensor]"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_beam_constraints.py#L265"}}),No=new Oe({}),Wo=new v({props:{name:"class transformers.BeamScorer",anchor:"transformers.BeamScorer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_beam_search.py#L88"}}),Vo=new v({props:{name:"process",anchor:"transformers.BeamScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_beam_search.py#L94",parametersDescription:[{anchor:"transformers.BeamScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/pr_15793/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.BeamScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.BeamScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.BeamScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of all
non-finished beams.</li>
<li><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be added
to the non-finished beam_hypotheses.</li>
<li><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),Mo=new v({props:{name:"finalize",anchor:"transformers.BeamScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_beam_search.py#L106",parametersDescription:[{anchor:"transformers.BeamScorer.finalize.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/pr_15793/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.finalize.final_beam_scores",description:`<strong>final_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The final scores of all non-finished beams.`,name:"final_beam_scores"},{anchor:"transformers.BeamScorer.finalize.final_beam_tokens",description:`<strong>final_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The last tokens to be added to the non-finished beam_hypotheses.`,name:"final_beam_tokens"},{anchor:"transformers.BeamScorer.finalize.final_beam_indices",description:`<strong>final_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The beam indices indicating to which beam the <code>final_beam_tokens</code> shall be added.`,name:"final_beam_indices"},{anchor:"transformers.BeamScorer.finalize.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.finalize.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],returnDescription:`
<p>The generated sequences.
The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter if all batches finished early
due to the <code>eos_token_id</code>.</p>
`,returnType:`
<p><code>torch.LongTensor</code> of shape <code>(batch_size * num_return_sequences, sequence_length)</code></p>
`}}),Go=new v({props:{name:"class transformers.BeamSearchScorer",anchor:"transformers.BeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_beam_search.py#L120",parametersDescription:[{anchor:"transformers.BeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.BeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.BeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.BeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.BeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length. 1.0 means no penalty. Set to values &lt; 1.0 in order to encourage the
model to generate shorter sequences, to a value &gt; 1.0 in order to encourage the model to produce longer
sequences.`,name:"length_penalty"},{anchor:"transformers.BeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.BeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.BeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}]}}),Ko=new v({props:{name:"class transformers.ConstrainedBeamSearchScorer",anchor:"transformers.ConstrainedBeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_beam_search.py#L355",parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.ConstrainedBeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.ConstrainedBeamSearchScorer.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of positive constraints represented as <code>Constraint</code> objects that must be fulfilled in the generation
output. For more information, the documentation of <a href="/docs/transformers/pr_15793/en/internal/generation_utils#transformers.Constraint">Constraint</a> should be read.`,name:"constraints"},{anchor:"transformers.ConstrainedBeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.ConstrainedBeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length. 1.0 means no penalty. Set to values &lt; 1.0 in order to encourage the
model to generate shorter sequences, to a value &gt; 1.0 in order to encourage the model to produce longer
sequences.`,name:"length_penalty"},{anchor:"transformers.ConstrainedBeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}]}}),Uo=new v({props:{name:"process",anchor:"transformers.ConstrainedBeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"scores_for_all_vocab",val:": FloatTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_beam_search.py#L449",parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/pr_15793/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/pr_15793/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.scores_for_all_vocab",description:`<strong>scores_for_all_vocab</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
The scores of all tokens in the vocabulary for each of the beam hypotheses.`,name:"scores_for_all_vocab"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of
all
non-finished beams.</li>
<li><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be
added
to the non-finished beam_hypotheses.</li>
<li><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),Yo=new Oe({}),Xo=new v({props:{name:"transformers.top_k_top_p_filtering",anchor:"transformers.top_k_top_p_filtering",parameters:[{name:"logits",val:": FloatTensor"},{name:"top_k",val:": int = 0"},{name:"top_p",val:": float = 1.0"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_utils.py#L3161",parametersDescription:[{anchor:"transformers.top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}]}}),Qo=new v({props:{name:"transformers.tf_top_k_top_p_filtering",anchor:"transformers.tf_top_k_top_p_filtering",parameters:[{name:"logits",val:""},{name:"top_k",val:" = 0"},{name:"top_p",val:" = 1.0"},{name:"filter_value",val:" = -inf"},{name:"min_tokens_to_keep",val:" = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_15793/src/transformers/generation_tf_utils.py#L2314",parametersDescription:[{anchor:"transformers.tf_top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.tf_top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.tf_top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}]}}),{c(){Be=o("meta"),tn=c(),N=o("h1"),H=o("a"),Ia=o("span"),m(Jt.$$.fragment),Np=c(),Aa=o("span"),Wp=a("Utilities for Generation"),bl=c(),y=o("p"),Vp=a("This page lists all the utility functions used by "),rn=o("a"),Mp=a("generate()"),Gp=a(`,
`),on=o("a"),jp=a("greedy_search()"),Hp=a(`,
`),nn=o("a"),Rp=a("sample()"),Kp=a(`,
`),sn=o("a"),Up=a("beam_search()"),Yp=a(`,
`),an=o("a"),Xp=a("beam_sample()"),Jp=a(`,
`),cn=o("a"),Qp=a("group_beam_search()"),Zp=a(`, and
`),ln=o("a"),ef=a("constrained_beam_search()"),tf=a("."),vl=c(),dn=o("p"),rf=a("Most of those are only useful if you are studying the code of the generate methods in the library."),Tl=c(),Ge=o("h2"),pt=o("a"),Ca=o("span"),m(Qt.$$.fragment),of=c(),Na=o("span"),nf=a("Generate Outputs"),$l=c(),W=o("p"),sf=a("The output of "),pn=o("a"),af=a("generate()"),cf=a(` is an instance of a subclass of
`),fn=o("a"),lf=a("ModelOutput"),df=a(`. This output is a data structure containing all the information returned
by `),mn=o("a"),pf=a("generate()"),ff=a(", but that can also be used as tuple or dictionary."),yl=c(),hn=o("p"),mf=a("Here\u2019s an example:"),kl=c(),m(Zt.$$.fragment),wl=c(),Ie=o("p"),hf=a("The "),Wa=o("code"),uf=a("generation_output"),gf=a(" object is a "),un=o("a"),_f=a("GreedySearchDecoderOnlyOutput"),bf=a(`, as we can
see in the documentation of that class below, it means it has the following attributes:`),xl=c(),V=o("ul"),gn=o("li"),Va=o("code"),vf=a("sequences"),Tf=a(": the generated sequences of tokens"),$f=c(),_n=o("li"),Ma=o("code"),yf=a("scores"),kf=a(" (optional): the prediction scores of the language modelling head, for each generation step"),wf=c(),bn=o("li"),Ga=o("code"),xf=a("hidden_states"),Ef=a(" (optional): the hidden states of the model, for each generation step"),Lf=c(),vn=o("li"),ja=o("code"),Pf=a("attentions"),Ff=a(" (optional): the attention weights of the model, for each generation step"),El=c(),k=o("p"),Df=a("Here we have the "),Ha=o("code"),zf=a("scores"),Sf=a(" since we passed along "),Ra=o("code"),qf=a("output_scores=True"),Of=a(", but we don\u2019t have "),Ka=o("code"),Bf=a("hidden_states"),If=a(` and
`),Ua=o("code"),Af=a("attentions"),Cf=a(" because we didn\u2019t pass "),Ya=o("code"),Nf=a("output_hidden_states=True"),Wf=a(" or "),Xa=o("code"),Vf=a("output_attentions=True"),Mf=a("."),Ll=c(),F=o("p"),Gf=a(`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),Ja=o("code"),jf=a("None"),Hf=a(". Here for instance "),Qa=o("code"),Rf=a("generation_output.scores"),Kf=a(` are all the generated prediction scores of the
language modeling head, and `),Za=o("code"),Uf=a("generation_output.attentions"),Yf=a(" is "),ei=o("code"),Xf=a("None"),Jf=a("."),Pl=c(),D=o("p"),Qf=a("When using our "),ti=o("code"),Zf=a("generation_output"),em=a(" object as a tuple, it only keeps the attributes that don\u2019t have "),ri=o("code"),tm=a("None"),rm=a(` values.
Here, for instance, it has two elements, `),oi=o("code"),om=a("loss"),nm=a(" then "),ni=o("code"),sm=a("logits"),am=a(", so"),Fl=c(),m(er.$$.fragment),Dl=c(),ft=o("p"),im=a("will return the tuple "),si=o("code"),cm=a("(generation_output.sequences, generation_output.scores)"),lm=a(" for instance."),zl=c(),z=o("p"),dm=a("When using our "),ai=o("code"),pm=a("generation_output"),fm=a(" object as a dictionary, it only keeps the attributes that don\u2019t have "),ii=o("code"),mm=a("None"),hm=a(`
values. Here, for instance, it has two keys that are `),ci=o("code"),um=a("sequences"),gm=a(" and "),li=o("code"),_m=a("scores"),bm=a("."),Sl=c(),Tn=o("p"),vm=a("We document here all output types."),ql=c(),je=o("h3"),mt=o("a"),di=o("span"),m(tr.$$.fragment),Tm=c(),pi=o("span"),$m=a("GreedySearchOutput"),Ol=c(),He=o("div"),m(rr.$$.fragment),ym=c(),fi=o("p"),km=a("Base class for outputs of decoder-only generation models using greedy search."),Bl=c(),Re=o("div"),m(or.$$.fragment),wm=c(),mi=o("p"),xm=a(`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Il=c(),R=o("div"),m(nr.$$.fragment),Em=c(),hi=o("p"),Lm=a("Flax Base class for outputs of decoder-only generation models using greedy search."),Pm=c(),ht=o("div"),m(sr.$$.fragment),Fm=c(),ui=o("p"),Dm=a("\u201CReturns a new object replacing the specified fields with new values."),Al=c(),Ke=o("h3"),ut=o("a"),gi=o("span"),m(ar.$$.fragment),zm=c(),_i=o("span"),Sm=a("SampleOutput"),Cl=c(),Ue=o("div"),m(ir.$$.fragment),qm=c(),bi=o("p"),Om=a("Base class for outputs of decoder-only generation models using sampling."),Nl=c(),Ye=o("div"),m(cr.$$.fragment),Bm=c(),vi=o("p"),Im=a(`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Wl=c(),K=o("div"),m(lr.$$.fragment),Am=c(),Ti=o("p"),Cm=a("Flax Base class for outputs of decoder-only generation models using sampling."),Nm=c(),gt=o("div"),m(dr.$$.fragment),Wm=c(),$i=o("p"),Vm=a("\u201CReturns a new object replacing the specified fields with new values."),Vl=c(),Xe=o("h3"),_t=o("a"),yi=o("span"),m(pr.$$.fragment),Mm=c(),ki=o("span"),Gm=a("BeamSearchOutput"),Ml=c(),Je=o("div"),m(fr.$$.fragment),jm=c(),wi=o("p"),Hm=a("Base class for outputs of decoder-only generation models using beam search."),Gl=c(),Qe=o("div"),m(mr.$$.fragment),Rm=c(),xi=o("p"),Km=a(`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),jl=c(),Ze=o("h3"),bt=o("a"),Ei=o("span"),m(hr.$$.fragment),Um=c(),Li=o("span"),Ym=a("BeamSampleOutput"),Hl=c(),et=o("div"),m(ur.$$.fragment),Xm=c(),Pi=o("p"),Jm=a("Base class for outputs of decoder-only generation models using beam sample."),Rl=c(),tt=o("div"),m(gr.$$.fragment),Qm=c(),Fi=o("p"),Zm=a(`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Kl=c(),rt=o("h2"),vt=o("a"),Di=o("span"),m(_r.$$.fragment),eh=c(),zi=o("span"),th=a("LogitsProcessor"),Ul=c(),Tt=o("p"),rh=a("A "),$n=o("a"),oh=a("LogitsProcessor"),nh=a(` can be used to modify the prediction scores of a language model head for
generation.`),Yl=c(),U=o("div"),m(br.$$.fragment),sh=c(),Si=o("p"),ah=a("Abstract base class for all logit processors that can be applied during generation."),ih=c(),$t=o("div"),m(vr.$$.fragment),ch=c(),qi=o("p"),lh=a("Torch method for processing logits."),Xl=c(),Y=o("div"),m(Tr.$$.fragment),dh=c(),w=o("p"),ph=a("This class can be used to create a list of "),yn=o("a"),fh=a("LogitsProcessor"),mh=a(" or "),kn=o("a"),hh=a("LogitsWarper"),uh=a(` to subsequently process a
`),Oi=o("code"),gh=a("scores"),_h=a(" input tensor. This class inherits from list and adds a specific "),Bi=o("em"),Ii=o("strong"),bh=a("call"),vh=a(` method to apply each
`),wn=o("a"),Th=a("LogitsProcessor"),$h=a(" or "),xn=o("a"),yh=a("LogitsWarper"),kh=a(" to the inputs."),wh=c(),En=o("div"),m($r.$$.fragment),Jl=c(),X=o("div"),m(yr.$$.fragment),xh=c(),Ai=o("p"),Eh=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),Lh=c(),yt=o("div"),m(kr.$$.fragment),Ph=c(),Ci=o("p"),Fh=a("Torch method for warping logits."),Ql=c(),J=o("div"),m(wr.$$.fragment),Dh=c(),Ln=o("p"),Pn=o("a"),zh=a("LogitsProcessor"),Sh=a(" enforcing a min-length by setting EOS probability to 0."),qh=c(),Ni=o("div"),Zl=c(),Q=o("div"),m(xr.$$.fragment),Oh=c(),Fn=o("p"),Dn=o("a"),Bh=a("LogitsWarper"),Ih=a(" for temperature (exponential scaling output probability distribution)."),Ah=c(),Wi=o("div"),ed=c(),Z=o("div"),m(Er.$$.fragment),Ch=c(),zn=o("p"),Sn=o("a"),Nh=a("LogitsProcessor"),Wh=a(" enforcing an exponential penalty on repeated sequences."),Vh=c(),Vi=o("div"),td=c(),ee=o("div"),m(Lr.$$.fragment),Mh=c(),qn=o("p"),On=o("a"),Gh=a("LogitsWarper"),jh=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),Hh=c(),Mi=o("div"),rd=c(),te=o("div"),m(Pr.$$.fragment),Rh=c(),Bn=o("p"),In=o("a"),Kh=a("LogitsWarper"),Uh=a(" that performs top-k, i.e. restricting to the k highest probability elements."),Yh=c(),Gi=o("div"),od=c(),re=o("div"),m(Fr.$$.fragment),Xh=c(),kt=o("p"),An=o("a"),Jh=a("LogitsProcessor"),Qh=a(` that enforces no repetition of n-grams. See
`),Dr=o("a"),Zh=a("Fairseq"),eu=a("."),tu=c(),ji=o("div"),nd=c(),oe=o("div"),m(zr.$$.fragment),ru=c(),Cn=o("p"),Nn=o("a"),ou=a("LogitsProcessor"),nu=a(" that enforces that specified sequences will never be sampled."),su=c(),Hi=o("div"),sd=c(),ne=o("div"),m(Sr.$$.fragment),au=c(),wt=o("p"),Wn=o("a"),iu=a("LogitsProcessor"),cu=a(` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),qr=o("a"),lu=a("Autoregressive Entity Retrieval"),du=a(" for more information."),pu=c(),Ri=o("div"),ad=c(),se=o("div"),m(Or.$$.fragment),fu=c(),Ae=o("p"),Vn=o("a"),mu=a("LogitsProcessor"),hu=a(` that enforces diverse beam search. Note that this logits processor is only effective for
`),Mn=o("a"),uu=a("PreTrainedModel.group_beam_search()"),gu=a(". See "),Br=o("a"),_u=a(`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),bu=a(" for more details."),vu=c(),Ki=o("div"),id=c(),ae=o("div"),m(Ir.$$.fragment),Tu=c(),Gn=o("p"),jn=o("a"),$u=a("LogitsProcessor"),yu=a(" that enforces the specified token as the first generated token."),ku=c(),Ui=o("div"),cd=c(),ie=o("div"),m(Ar.$$.fragment),wu=c(),xt=o("p"),Hn=o("a"),xu=a("LogitsProcessor"),Eu=a(" that enforces the specified token as the last generated token when "),Yi=o("code"),Lu=a("max_length"),Pu=a(" is reached."),Fu=c(),Xi=o("div"),ld=c(),ce=o("div"),m(Cr.$$.fragment),Du=c(),M=o("p"),Rn=o("a"),zu=a("LogitsProcessor"),Su=a(" that removes all "),Ji=o("code"),qu=a("nan"),Ou=a(" and "),Qi=o("code"),Bu=a("inf"),Iu=a(` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),Zi=o("code"),Au=a("max_length"),Cu=a(` is
reached.`),Nu=c(),ec=o("div"),dd=c(),le=o("div"),m(Nr.$$.fragment),Wu=c(),tc=o("p"),Vu=a("Abstract base class for all logit processors that can be applied during generation."),Mu=c(),Et=o("div"),m(Wr.$$.fragment),Gu=c(),rc=o("p"),ju=a("TF method for processing logits."),pd=c(),de=o("div"),m(Vr.$$.fragment),Hu=c(),B=o("p"),Ru=a("This class can be used to create a list of "),Kn=o("a"),Ku=a("TFLogitsProcessor"),Uu=a(" to subsequently process a "),oc=o("code"),Yu=a("scores"),Xu=a(` input tensor.
This class inherits from list and adds a specific `),nc=o("em"),sc=o("strong"),Ju=a("call"),Qu=a(" method to apply each "),Un=o("a"),Zu=a("TFLogitsProcessor"),eg=a(` to the
inputs.`),tg=c(),Yn=o("div"),m(Mr.$$.fragment),fd=c(),pe=o("div"),m(Gr.$$.fragment),rg=c(),ac=o("p"),og=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),ng=c(),Lt=o("div"),m(jr.$$.fragment),sg=c(),ic=o("p"),ag=a("TF method for warping logits."),md=c(),fe=o("div"),m(Hr.$$.fragment),ig=c(),Xn=o("p"),Jn=o("a"),cg=a("TFLogitsWarper"),lg=a(" for temperature (exponential scaling output probability distribution)."),dg=c(),cc=o("div"),hd=c(),me=o("div"),m(Rr.$$.fragment),pg=c(),Qn=o("p"),Zn=o("a"),fg=a("TFLogitsWarper"),mg=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),hg=c(),lc=o("div"),ud=c(),he=o("div"),m(Kr.$$.fragment),ug=c(),es=o("p"),ts=o("a"),gg=a("TFLogitsWarper"),_g=a(" that performs top-k, i.e. restricting to the k highest probability elements."),bg=c(),dc=o("div"),gd=c(),ue=o("div"),m(Ur.$$.fragment),vg=c(),rs=o("p"),os=o("a"),Tg=a("TFLogitsProcessor"),$g=a(" enforcing a min-length by setting EOS probability to 0."),yg=c(),pc=o("div"),_d=c(),ge=o("div"),m(Yr.$$.fragment),kg=c(),ns=o("p"),ss=o("a"),wg=a("TFLogitsProcessor"),xg=a(" that enforces that specified sequences will never be sampled."),Eg=c(),fc=o("div"),bd=c(),_e=o("div"),m(Xr.$$.fragment),Lg=c(),Pt=o("p"),as=o("a"),Pg=a("TFLogitsProcessor"),Fg=a(` that enforces no repetition of n-grams. See
`),Jr=o("a"),Dg=a("Fairseq"),zg=a("."),Sg=c(),mc=o("div"),vd=c(),be=o("div"),m(Qr.$$.fragment),qg=c(),is=o("p"),cs=o("a"),Og=a("TFLogitsProcessor"),Bg=a(" enforcing an exponential penalty on repeated sequences."),Ig=c(),hc=o("div"),Td=c(),ve=o("div"),m(Zr.$$.fragment),Ag=c(),uc=o("p"),Cg=a("Abstract base class for all logit processors that can be applied during generation."),Ng=c(),Ft=o("div"),m(eo.$$.fragment),Wg=c(),gc=o("p"),Vg=a("Flax method for processing logits."),$d=c(),Te=o("div"),m(to.$$.fragment),Mg=c(),x=o("p"),Gg=a("This class can be used to create a list of "),ls=o("a"),jg=a("FlaxLogitsProcessor"),Hg=a(" or "),ds=o("a"),Rg=a("FlaxLogitsWarper"),Kg=a(` to subsequently process
a `),_c=o("code"),Ug=a("scores"),Yg=a(" input tensor. This class inherits from list and adds a specific "),bc=o("em"),vc=o("strong"),Xg=a("call"),Jg=a(` method to apply each
`),ps=o("a"),Qg=a("FlaxLogitsProcessor"),Zg=a(" or "),fs=o("a"),e_=a("FlaxLogitsWarper"),t_=a(" to the inputs."),r_=c(),ms=o("div"),m(ro.$$.fragment),yd=c(),$e=o("div"),m(oo.$$.fragment),o_=c(),Tc=o("p"),n_=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),s_=c(),Dt=o("div"),m(no.$$.fragment),a_=c(),$c=o("p"),i_=a("Flax method for warping logits."),kd=c(),ye=o("div"),m(so.$$.fragment),c_=c(),hs=o("p"),us=o("a"),l_=a("FlaxLogitsWarper"),d_=a(" for temperature (exponential scaling output probability distribution)."),p_=c(),yc=o("div"),wd=c(),ke=o("div"),m(ao.$$.fragment),f_=c(),gs=o("p"),_s=o("a"),m_=a("FlaxLogitsWarper"),h_=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),u_=c(),kc=o("div"),xd=c(),we=o("div"),m(io.$$.fragment),g_=c(),bs=o("p"),vs=o("a"),__=a("FlaxLogitsWarper"),b_=a(" that performs top-k, i.e. restricting to the k highest probability elements."),v_=c(),wc=o("div"),Ed=c(),xe=o("div"),m(co.$$.fragment),T_=c(),Ts=o("p"),$s=o("a"),$_=a("FlaxLogitsProcessor"),y_=a(" that enforces the specified token as the first generated token."),k_=c(),xc=o("div"),Ld=c(),Ee=o("div"),m(lo.$$.fragment),w_=c(),zt=o("p"),ys=o("a"),x_=a("FlaxLogitsProcessor"),E_=a(" that enforces the specified token as the last generated token when "),Ec=o("code"),L_=a("max_length"),P_=a(" is reached."),F_=c(),Lc=o("div"),Pd=c(),Le=o("div"),m(po.$$.fragment),D_=c(),ks=o("p"),ws=o("a"),z_=a("FlaxLogitsProcessor"),S_=a(" enforcing a min-length by setting EOS probability to 0."),q_=c(),Pc=o("div"),Fd=c(),ot=o("h2"),St=o("a"),Fc=o("span"),m(fo.$$.fragment),O_=c(),Dc=o("span"),B_=a("StoppingCriteria"),Dd=c(),qt=o("p"),I_=a("A "),xs=o("a"),A_=a("StoppingCriteria"),C_=a(" can be used to change when to stop generation (other than EOS token)."),zd=c(),Pe=o("div"),m(mo.$$.fragment),N_=c(),zc=o("p"),W_=a("Abstract base class for all stopping criteria that can be applied during generation."),V_=c(),Es=o("div"),m(ho.$$.fragment),Sd=c(),uo=o("div"),Ls=o("div"),m(go.$$.fragment),qd=c(),Fe=o("div"),m(_o.$$.fragment),M_=c(),bo=o("p"),G_=a("This class can be used to stop generation whenever the full generated number of tokens exceeds "),Sc=o("code"),j_=a("max_length"),H_=a(`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),R_=c(),Ps=o("div"),m(vo.$$.fragment),Od=c(),De=o("div"),m(To.$$.fragment),K_=c(),$o=o("p"),U_=a(`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),qc=o("code"),Y_=a("initial_time"),X_=a("."),J_=c(),Fs=o("div"),m(yo.$$.fragment),Bd=c(),nt=o("h2"),Ot=o("a"),Oc=o("span"),m(ko.$$.fragment),Q_=c(),Bc=o("span"),Z_=a("Constraints"),Id=c(),Bt=o("p"),eb=a("A "),Ds=o("a"),tb=a("Constraint"),rb=a(" can be used to force the generation to include specific tokens or sequences in the output."),Ad=c(),T=o("div"),m(wo.$$.fragment),ob=c(),Ic=o("p"),nb=a(`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),sb=c(),Ac=o("p"),ab=a("All classes that inherit Constraint must follow the requirement that"),ib=c(),m(xo.$$.fragment),cb=c(),Cc=o("p"),lb=a("will always terminate (halt)."),db=c(),It=o("div"),m(Eo.$$.fragment),pb=c(),Nc=o("p"),fb=a("When called, returns the token that would take this constraint one step closer to being fulfilled."),mb=c(),At=o("div"),m(Lo.$$.fragment),hb=c(),Wc=o("p"),ub=a("Creates a new instance of this constraint."),gb=c(),Ct=o("div"),m(Po.$$.fragment),_b=c(),Vc=o("p"),bb=a("Reads in a token and returns whether it creates progress."),vb=c(),Nt=o("div"),m(Fo.$$.fragment),Tb=c(),Do=o("p"),$b=a("Returns the number of remaining steps of "),Mc=o("code"),yb=a("advance()"),kb=a(" in order to complete this constraint."),wb=c(),Wt=o("div"),m(zo.$$.fragment),xb=c(),Gc=o("p"),Eb=a(`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),Lb=c(),Vt=o("div"),m(So.$$.fragment),Pb=c(),jc=o("p"),Fb=a("Tests whether this constraint has been properly defined."),Db=c(),Ce=o("div"),m(qo.$$.fragment),zb=c(),Oo=o("p"),Sb=a(`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),Hc=o("code"),qb=a("does_advance(self, token_id: int)"),Ob=a("."),Bb=c(),Rc=o("p"),Ib=a(`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),Cd=c(),st=o("div"),m(Bo.$$.fragment),Ab=c(),zs=o("p"),Ss=o("a"),Cb=a("Constraint"),Nb=a(" enforcing that an ordered sequence of tokens is included in the output."),Nd=c(),I=o("div"),m(Io.$$.fragment),Wb=c(),Kc=o("p"),Vb=a("A class for beam scorers to track its progress through a list of constraints."),Mb=c(),L=o("div"),m(Ao.$$.fragment),Gb=c(),Uc=o("p"),jb=a(`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),Hb=c(),at=o("p"),Rb=a("Given constraints "),Yc=o("code"),Kb=a("c_i = {t_ij | j == # of tokens}"),Ub=a(`, If we\u2019re not in the middle of progressing through a
specific constraint `),Xc=o("code"),Yb=a("c_i"),Xb=a(", we return:"),Jb=c(),Jc=o("p"),Qc=o("code"),Qb=a("[t_k1 for k in indices of unfulfilled constraints]"),Zb=c(),ze=o("p"),ev=a(`If we are in the middle of a constraint, then we return:
`),Zc=o("code"),tv=a("[t_ij]"),rv=a(", where "),el=o("code"),ov=a("i"),nv=a(" is the index of the inprogress constraint, "),tl=o("code"),sv=a("j"),av=a(" is the next step for the constraint."),iv=c(),rl=o("p"),cv=a(`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),lv=c(),Mt=o("div"),m(Co.$$.fragment),dv=c(),ol=o("p"),pv=a("token_ids: the tokens generated thus far to reset the state of the progress through constraints."),Wd=c(),it=o("h2"),Gt=o("a"),nl=o("span"),m(No.$$.fragment),fv=c(),sl=o("span"),mv=a("BeamSearch"),Vd=c(),A=o("div"),m(Wo.$$.fragment),hv=c(),ct=o("p"),uv=a("Abstract base class for all beam scorers that are used for "),qs=o("a"),gv=a("beam_search()"),_v=a(` and
`),Os=o("a"),bv=a("beam_sample()"),vv=a("."),Tv=c(),Bs=o("div"),m(Vo.$$.fragment),$v=c(),Is=o("div"),m(Mo.$$.fragment),Md=c(),E=o("div"),m(Go.$$.fragment),yv=c(),As=o("p"),Cs=o("a"),kv=a("BeamScorer"),wv=a(" implementing standard beam search decoding."),xv=c(),jo=o("p"),Ev=a("Adapted in part from "),Ho=o("a"),Lv=a(`Facebook\u2019s XLM beam search
code`),Pv=a("."),Fv=c(),Ns=o("p"),Dv=a("Reference for the diverse beam search algorithm and implementation "),Ro=o("a"),zv=a(`Ashwin Kalyan\u2019s DBS
implementation`),Sv=c(),al=o("div"),qv=c(),il=o("div"),Gd=c(),C=o("div"),m(Ko.$$.fragment),Ov=c(),Ws=o("p"),Vs=o("a"),Bv=a("BeamScorer"),Iv=a(" implementing constrained beam search decoding."),Av=c(),Ms=o("div"),m(Uo.$$.fragment),Cv=c(),cl=o("div"),jd=c(),lt=o("h2"),jt=o("a"),ll=o("span"),m(Yo.$$.fragment),Nv=c(),dl=o("span"),Wv=a("Utilities"),Hd=c(),Se=o("div"),m(Xo.$$.fragment),Vv=c(),pl=o("p"),Mv=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),Gv=c(),Gs=o("p"),jv=a("From: "),Jo=o("a"),Hv=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),Rd=c(),qe=o("div"),m(Qo.$$.fragment),Rv=c(),fl=o("p"),Kv=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),Uv=c(),js=o("p"),Yv=a("From: "),Zo=o("a"),Xv=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),this.h()},l(t){const p=fk('[data-svelte="svelte-1phssyn"]',document.head);Be=n(p,"META",{name:!0,content:!0}),p.forEach(r),tn=l(t),N=n(t,"H1",{class:!0});var Ud=s(N);H=n(Ud,"A",{id:!0,class:!0,href:!0});var E1=s(H);Ia=n(E1,"SPAN",{});var L1=s(Ia);h(Jt.$$.fragment,L1),L1.forEach(r),E1.forEach(r),Np=l(Ud),Aa=n(Ud,"SPAN",{});var P1=s(Aa);Wp=i(P1,"Utilities for Generation"),P1.forEach(r),Ud.forEach(r),bl=l(t),y=n(t,"P",{});var P=s(y);Vp=i(P,"This page lists all the utility functions used by "),rn=n(P,"A",{href:!0});var F1=s(rn);Mp=i(F1,"generate()"),F1.forEach(r),Gp=i(P,`,
`),on=n(P,"A",{href:!0});var D1=s(on);jp=i(D1,"greedy_search()"),D1.forEach(r),Hp=i(P,`,
`),nn=n(P,"A",{href:!0});var z1=s(nn);Rp=i(z1,"sample()"),z1.forEach(r),Kp=i(P,`,
`),sn=n(P,"A",{href:!0});var S1=s(sn);Up=i(S1,"beam_search()"),S1.forEach(r),Yp=i(P,`,
`),an=n(P,"A",{href:!0});var q1=s(an);Xp=i(q1,"beam_sample()"),q1.forEach(r),Jp=i(P,`,
`),cn=n(P,"A",{href:!0});var O1=s(cn);Qp=i(O1,"group_beam_search()"),O1.forEach(r),Zp=i(P,`, and
`),ln=n(P,"A",{href:!0});var B1=s(ln);ef=i(B1,"constrained_beam_search()"),B1.forEach(r),tf=i(P,"."),P.forEach(r),vl=l(t),dn=n(t,"P",{});var I1=s(dn);rf=i(I1,"Most of those are only useful if you are studying the code of the generate methods in the library."),I1.forEach(r),Tl=l(t),Ge=n(t,"H2",{class:!0});var Yd=s(Ge);pt=n(Yd,"A",{id:!0,class:!0,href:!0});var A1=s(pt);Ca=n(A1,"SPAN",{});var C1=s(Ca);h(Qt.$$.fragment,C1),C1.forEach(r),A1.forEach(r),of=l(Yd),Na=n(Yd,"SPAN",{});var N1=s(Na);nf=i(N1,"Generate Outputs"),N1.forEach(r),Yd.forEach(r),$l=l(t),W=n(t,"P",{});var Ht=s(W);sf=i(Ht,"The output of "),pn=n(Ht,"A",{href:!0});var W1=s(pn);af=i(W1,"generate()"),W1.forEach(r),cf=i(Ht,` is an instance of a subclass of
`),fn=n(Ht,"A",{href:!0});var V1=s(fn);lf=i(V1,"ModelOutput"),V1.forEach(r),df=i(Ht,`. This output is a data structure containing all the information returned
by `),mn=n(Ht,"A",{href:!0});var M1=s(mn);pf=i(M1,"generate()"),M1.forEach(r),ff=i(Ht,", but that can also be used as tuple or dictionary."),Ht.forEach(r),yl=l(t),hn=n(t,"P",{});var G1=s(hn);mf=i(G1,"Here\u2019s an example:"),G1.forEach(r),kl=l(t),h(Zt.$$.fragment,t),wl=l(t),Ie=n(t,"P",{});var Hs=s(Ie);hf=i(Hs,"The "),Wa=n(Hs,"CODE",{});var j1=s(Wa);uf=i(j1,"generation_output"),j1.forEach(r),gf=i(Hs," object is a "),un=n(Hs,"A",{href:!0});var H1=s(un);_f=i(H1,"GreedySearchDecoderOnlyOutput"),H1.forEach(r),bf=i(Hs,`, as we can
see in the documentation of that class below, it means it has the following attributes:`),Hs.forEach(r),xl=l(t),V=n(t,"UL",{});var Rt=s(V);gn=n(Rt,"LI",{});var Jv=s(gn);Va=n(Jv,"CODE",{});var R1=s(Va);vf=i(R1,"sequences"),R1.forEach(r),Tf=i(Jv,": the generated sequences of tokens"),Jv.forEach(r),$f=l(Rt),_n=n(Rt,"LI",{});var Qv=s(_n);Ma=n(Qv,"CODE",{});var K1=s(Ma);yf=i(K1,"scores"),K1.forEach(r),kf=i(Qv," (optional): the prediction scores of the language modelling head, for each generation step"),Qv.forEach(r),wf=l(Rt),bn=n(Rt,"LI",{});var Zv=s(bn);Ga=n(Zv,"CODE",{});var U1=s(Ga);xf=i(U1,"hidden_states"),U1.forEach(r),Ef=i(Zv," (optional): the hidden states of the model, for each generation step"),Zv.forEach(r),Lf=l(Rt),vn=n(Rt,"LI",{});var e1=s(vn);ja=n(e1,"CODE",{});var Y1=s(ja);Pf=i(Y1,"attentions"),Y1.forEach(r),Ff=i(e1," (optional): the attention weights of the model, for each generation step"),e1.forEach(r),Rt.forEach(r),El=l(t),k=n(t,"P",{});var S=s(k);Df=i(S,"Here we have the "),Ha=n(S,"CODE",{});var X1=s(Ha);zf=i(X1,"scores"),X1.forEach(r),Sf=i(S," since we passed along "),Ra=n(S,"CODE",{});var J1=s(Ra);qf=i(J1,"output_scores=True"),J1.forEach(r),Of=i(S,", but we don\u2019t have "),Ka=n(S,"CODE",{});var Q1=s(Ka);Bf=i(Q1,"hidden_states"),Q1.forEach(r),If=i(S,` and
`),Ua=n(S,"CODE",{});var Z1=s(Ua);Af=i(Z1,"attentions"),Z1.forEach(r),Cf=i(S," because we didn\u2019t pass "),Ya=n(S,"CODE",{});var eT=s(Ya);Nf=i(eT,"output_hidden_states=True"),eT.forEach(r),Wf=i(S," or "),Xa=n(S,"CODE",{});var tT=s(Xa);Vf=i(tT,"output_attentions=True"),tT.forEach(r),Mf=i(S,"."),S.forEach(r),Ll=l(t),F=n(t,"P",{});var Ne=s(F);Gf=i(Ne,`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),Ja=n(Ne,"CODE",{});var rT=s(Ja);jf=i(rT,"None"),rT.forEach(r),Hf=i(Ne,". Here for instance "),Qa=n(Ne,"CODE",{});var oT=s(Qa);Rf=i(oT,"generation_output.scores"),oT.forEach(r),Kf=i(Ne,` are all the generated prediction scores of the
language modeling head, and `),Za=n(Ne,"CODE",{});var nT=s(Za);Uf=i(nT,"generation_output.attentions"),nT.forEach(r),Yf=i(Ne," is "),ei=n(Ne,"CODE",{});var sT=s(ei);Xf=i(sT,"None"),sT.forEach(r),Jf=i(Ne,"."),Ne.forEach(r),Pl=l(t),D=n(t,"P",{});var We=s(D);Qf=i(We,"When using our "),ti=n(We,"CODE",{});var aT=s(ti);Zf=i(aT,"generation_output"),aT.forEach(r),em=i(We," object as a tuple, it only keeps the attributes that don\u2019t have "),ri=n(We,"CODE",{});var iT=s(ri);tm=i(iT,"None"),iT.forEach(r),rm=i(We,` values.
Here, for instance, it has two elements, `),oi=n(We,"CODE",{});var cT=s(oi);om=i(cT,"loss"),cT.forEach(r),nm=i(We," then "),ni=n(We,"CODE",{});var lT=s(ni);sm=i(lT,"logits"),lT.forEach(r),am=i(We,", so"),We.forEach(r),Fl=l(t),h(er.$$.fragment,t),Dl=l(t),ft=n(t,"P",{});var Xd=s(ft);im=i(Xd,"will return the tuple "),si=n(Xd,"CODE",{});var dT=s(si);cm=i(dT,"(generation_output.sequences, generation_output.scores)"),dT.forEach(r),lm=i(Xd," for instance."),Xd.forEach(r),zl=l(t),z=n(t,"P",{});var Ve=s(z);dm=i(Ve,"When using our "),ai=n(Ve,"CODE",{});var pT=s(ai);pm=i(pT,"generation_output"),pT.forEach(r),fm=i(Ve," object as a dictionary, it only keeps the attributes that don\u2019t have "),ii=n(Ve,"CODE",{});var fT=s(ii);mm=i(fT,"None"),fT.forEach(r),hm=i(Ve,`
values. Here, for instance, it has two keys that are `),ci=n(Ve,"CODE",{});var mT=s(ci);um=i(mT,"sequences"),mT.forEach(r),gm=i(Ve," and "),li=n(Ve,"CODE",{});var hT=s(li);_m=i(hT,"scores"),hT.forEach(r),bm=i(Ve,"."),Ve.forEach(r),Sl=l(t),Tn=n(t,"P",{});var uT=s(Tn);vm=i(uT,"We document here all output types."),uT.forEach(r),ql=l(t),je=n(t,"H3",{class:!0});var Jd=s(je);mt=n(Jd,"A",{id:!0,class:!0,href:!0});var gT=s(mt);di=n(gT,"SPAN",{});var _T=s(di);h(tr.$$.fragment,_T),_T.forEach(r),gT.forEach(r),Tm=l(Jd),pi=n(Jd,"SPAN",{});var bT=s(pi);$m=i(bT,"GreedySearchOutput"),bT.forEach(r),Jd.forEach(r),Ol=l(t),He=n(t,"DIV",{class:!0});var Qd=s(He);h(rr.$$.fragment,Qd),ym=l(Qd),fi=n(Qd,"P",{});var vT=s(fi);km=i(vT,"Base class for outputs of decoder-only generation models using greedy search."),vT.forEach(r),Qd.forEach(r),Bl=l(t),Re=n(t,"DIV",{class:!0});var Zd=s(Re);h(or.$$.fragment,Zd),wm=l(Zd),mi=n(Zd,"P",{});var TT=s(mi);xm=i(TT,`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),TT.forEach(r),Zd.forEach(r),Il=l(t),R=n(t,"DIV",{class:!0});var Rs=s(R);h(nr.$$.fragment,Rs),Em=l(Rs),hi=n(Rs,"P",{});var $T=s(hi);Lm=i($T,"Flax Base class for outputs of decoder-only generation models using greedy search."),$T.forEach(r),Pm=l(Rs),ht=n(Rs,"DIV",{class:!0});var ep=s(ht);h(sr.$$.fragment,ep),Fm=l(ep),ui=n(ep,"P",{});var yT=s(ui);Dm=i(yT,"\u201CReturns a new object replacing the specified fields with new values."),yT.forEach(r),ep.forEach(r),Rs.forEach(r),Al=l(t),Ke=n(t,"H3",{class:!0});var tp=s(Ke);ut=n(tp,"A",{id:!0,class:!0,href:!0});var kT=s(ut);gi=n(kT,"SPAN",{});var wT=s(gi);h(ar.$$.fragment,wT),wT.forEach(r),kT.forEach(r),zm=l(tp),_i=n(tp,"SPAN",{});var xT=s(_i);Sm=i(xT,"SampleOutput"),xT.forEach(r),tp.forEach(r),Cl=l(t),Ue=n(t,"DIV",{class:!0});var rp=s(Ue);h(ir.$$.fragment,rp),qm=l(rp),bi=n(rp,"P",{});var ET=s(bi);Om=i(ET,"Base class for outputs of decoder-only generation models using sampling."),ET.forEach(r),rp.forEach(r),Nl=l(t),Ye=n(t,"DIV",{class:!0});var op=s(Ye);h(cr.$$.fragment,op),Bm=l(op),vi=n(op,"P",{});var LT=s(vi);Im=i(LT,`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),LT.forEach(r),op.forEach(r),Wl=l(t),K=n(t,"DIV",{class:!0});var Ks=s(K);h(lr.$$.fragment,Ks),Am=l(Ks),Ti=n(Ks,"P",{});var PT=s(Ti);Cm=i(PT,"Flax Base class for outputs of decoder-only generation models using sampling."),PT.forEach(r),Nm=l(Ks),gt=n(Ks,"DIV",{class:!0});var np=s(gt);h(dr.$$.fragment,np),Wm=l(np),$i=n(np,"P",{});var FT=s($i);Vm=i(FT,"\u201CReturns a new object replacing the specified fields with new values."),FT.forEach(r),np.forEach(r),Ks.forEach(r),Vl=l(t),Xe=n(t,"H3",{class:!0});var sp=s(Xe);_t=n(sp,"A",{id:!0,class:!0,href:!0});var DT=s(_t);yi=n(DT,"SPAN",{});var zT=s(yi);h(pr.$$.fragment,zT),zT.forEach(r),DT.forEach(r),Mm=l(sp),ki=n(sp,"SPAN",{});var ST=s(ki);Gm=i(ST,"BeamSearchOutput"),ST.forEach(r),sp.forEach(r),Ml=l(t),Je=n(t,"DIV",{class:!0});var ap=s(Je);h(fr.$$.fragment,ap),jm=l(ap),wi=n(ap,"P",{});var qT=s(wi);Hm=i(qT,"Base class for outputs of decoder-only generation models using beam search."),qT.forEach(r),ap.forEach(r),Gl=l(t),Qe=n(t,"DIV",{class:!0});var ip=s(Qe);h(mr.$$.fragment,ip),Rm=l(ip),xi=n(ip,"P",{});var OT=s(xi);Km=i(OT,`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),OT.forEach(r),ip.forEach(r),jl=l(t),Ze=n(t,"H3",{class:!0});var cp=s(Ze);bt=n(cp,"A",{id:!0,class:!0,href:!0});var BT=s(bt);Ei=n(BT,"SPAN",{});var IT=s(Ei);h(hr.$$.fragment,IT),IT.forEach(r),BT.forEach(r),Um=l(cp),Li=n(cp,"SPAN",{});var AT=s(Li);Ym=i(AT,"BeamSampleOutput"),AT.forEach(r),cp.forEach(r),Hl=l(t),et=n(t,"DIV",{class:!0});var lp=s(et);h(ur.$$.fragment,lp),Xm=l(lp),Pi=n(lp,"P",{});var CT=s(Pi);Jm=i(CT,"Base class for outputs of decoder-only generation models using beam sample."),CT.forEach(r),lp.forEach(r),Rl=l(t),tt=n(t,"DIV",{class:!0});var dp=s(tt);h(gr.$$.fragment,dp),Qm=l(dp),Fi=n(dp,"P",{});var NT=s(Fi);Zm=i(NT,`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),NT.forEach(r),dp.forEach(r),Kl=l(t),rt=n(t,"H2",{class:!0});var pp=s(rt);vt=n(pp,"A",{id:!0,class:!0,href:!0});var WT=s(vt);Di=n(WT,"SPAN",{});var VT=s(Di);h(_r.$$.fragment,VT),VT.forEach(r),WT.forEach(r),eh=l(pp),zi=n(pp,"SPAN",{});var MT=s(zi);th=i(MT,"LogitsProcessor"),MT.forEach(r),pp.forEach(r),Ul=l(t),Tt=n(t,"P",{});var fp=s(Tt);rh=i(fp,"A "),$n=n(fp,"A",{href:!0});var GT=s($n);oh=i(GT,"LogitsProcessor"),GT.forEach(r),nh=i(fp,` can be used to modify the prediction scores of a language model head for
generation.`),fp.forEach(r),Yl=l(t),U=n(t,"DIV",{class:!0});var Us=s(U);h(br.$$.fragment,Us),sh=l(Us),Si=n(Us,"P",{});var jT=s(Si);ah=i(jT,"Abstract base class for all logit processors that can be applied during generation."),jT.forEach(r),ih=l(Us),$t=n(Us,"DIV",{class:!0});var mp=s($t);h(vr.$$.fragment,mp),ch=l(mp),qi=n(mp,"P",{});var HT=s(qi);lh=i(HT,"Torch method for processing logits."),HT.forEach(r),mp.forEach(r),Us.forEach(r),Xl=l(t),Y=n(t,"DIV",{class:!0});var Ys=s(Y);h(Tr.$$.fragment,Ys),dh=l(Ys),w=n(Ys,"P",{});var q=s(w);ph=i(q,"This class can be used to create a list of "),yn=n(q,"A",{href:!0});var RT=s(yn);fh=i(RT,"LogitsProcessor"),RT.forEach(r),mh=i(q," or "),kn=n(q,"A",{href:!0});var KT=s(kn);hh=i(KT,"LogitsWarper"),KT.forEach(r),uh=i(q,` to subsequently process a
`),Oi=n(q,"CODE",{});var UT=s(Oi);gh=i(UT,"scores"),UT.forEach(r),_h=i(q," input tensor. This class inherits from list and adds a specific "),Bi=n(q,"EM",{});var YT=s(Bi);Ii=n(YT,"STRONG",{});var XT=s(Ii);bh=i(XT,"call"),XT.forEach(r),YT.forEach(r),vh=i(q,` method to apply each
`),wn=n(q,"A",{href:!0});var JT=s(wn);Th=i(JT,"LogitsProcessor"),JT.forEach(r),$h=i(q," or "),xn=n(q,"A",{href:!0});var QT=s(xn);yh=i(QT,"LogitsWarper"),QT.forEach(r),kh=i(q," to the inputs."),q.forEach(r),wh=l(Ys),En=n(Ys,"DIV",{class:!0});var ZT=s(En);h($r.$$.fragment,ZT),ZT.forEach(r),Ys.forEach(r),Jl=l(t),X=n(t,"DIV",{class:!0});var Xs=s(X);h(yr.$$.fragment,Xs),xh=l(Xs),Ai=n(Xs,"P",{});var e$=s(Ai);Eh=i(e$,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),e$.forEach(r),Lh=l(Xs),yt=n(Xs,"DIV",{class:!0});var hp=s(yt);h(kr.$$.fragment,hp),Ph=l(hp),Ci=n(hp,"P",{});var t$=s(Ci);Fh=i(t$,"Torch method for warping logits."),t$.forEach(r),hp.forEach(r),Xs.forEach(r),Ql=l(t),J=n(t,"DIV",{class:!0});var Js=s(J);h(wr.$$.fragment,Js),Dh=l(Js),Ln=n(Js,"P",{});var t1=s(Ln);Pn=n(t1,"A",{href:!0});var r$=s(Pn);zh=i(r$,"LogitsProcessor"),r$.forEach(r),Sh=i(t1," enforcing a min-length by setting EOS probability to 0."),t1.forEach(r),qh=l(Js),Ni=n(Js,"DIV",{class:!0}),s(Ni).forEach(r),Js.forEach(r),Zl=l(t),Q=n(t,"DIV",{class:!0});var Qs=s(Q);h(xr.$$.fragment,Qs),Oh=l(Qs),Fn=n(Qs,"P",{});var r1=s(Fn);Dn=n(r1,"A",{href:!0});var o$=s(Dn);Bh=i(o$,"LogitsWarper"),o$.forEach(r),Ih=i(r1," for temperature (exponential scaling output probability distribution)."),r1.forEach(r),Ah=l(Qs),Wi=n(Qs,"DIV",{class:!0}),s(Wi).forEach(r),Qs.forEach(r),ed=l(t),Z=n(t,"DIV",{class:!0});var Zs=s(Z);h(Er.$$.fragment,Zs),Ch=l(Zs),zn=n(Zs,"P",{});var o1=s(zn);Sn=n(o1,"A",{href:!0});var n$=s(Sn);Nh=i(n$,"LogitsProcessor"),n$.forEach(r),Wh=i(o1," enforcing an exponential penalty on repeated sequences."),o1.forEach(r),Vh=l(Zs),Vi=n(Zs,"DIV",{class:!0}),s(Vi).forEach(r),Zs.forEach(r),td=l(t),ee=n(t,"DIV",{class:!0});var ea=s(ee);h(Lr.$$.fragment,ea),Mh=l(ea),qn=n(ea,"P",{});var n1=s(qn);On=n(n1,"A",{href:!0});var s$=s(On);Gh=i(s$,"LogitsWarper"),s$.forEach(r),jh=i(n1," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),n1.forEach(r),Hh=l(ea),Mi=n(ea,"DIV",{class:!0}),s(Mi).forEach(r),ea.forEach(r),rd=l(t),te=n(t,"DIV",{class:!0});var ta=s(te);h(Pr.$$.fragment,ta),Rh=l(ta),Bn=n(ta,"P",{});var s1=s(Bn);In=n(s1,"A",{href:!0});var a$=s(In);Kh=i(a$,"LogitsWarper"),a$.forEach(r),Uh=i(s1," that performs top-k, i.e. restricting to the k highest probability elements."),s1.forEach(r),Yh=l(ta),Gi=n(ta,"DIV",{class:!0}),s(Gi).forEach(r),ta.forEach(r),od=l(t),re=n(t,"DIV",{class:!0});var ra=s(re);h(Fr.$$.fragment,ra),Xh=l(ra),kt=n(ra,"P",{});var ml=s(kt);An=n(ml,"A",{href:!0});var i$=s(An);Jh=i(i$,"LogitsProcessor"),i$.forEach(r),Qh=i(ml,` that enforces no repetition of n-grams. See
`),Dr=n(ml,"A",{href:!0,rel:!0});var c$=s(Dr);Zh=i(c$,"Fairseq"),c$.forEach(r),eu=i(ml,"."),ml.forEach(r),tu=l(ra),ji=n(ra,"DIV",{class:!0}),s(ji).forEach(r),ra.forEach(r),nd=l(t),oe=n(t,"DIV",{class:!0});var oa=s(oe);h(zr.$$.fragment,oa),ru=l(oa),Cn=n(oa,"P",{});var a1=s(Cn);Nn=n(a1,"A",{href:!0});var l$=s(Nn);ou=i(l$,"LogitsProcessor"),l$.forEach(r),nu=i(a1," that enforces that specified sequences will never be sampled."),a1.forEach(r),su=l(oa),Hi=n(oa,"DIV",{class:!0}),s(Hi).forEach(r),oa.forEach(r),sd=l(t),ne=n(t,"DIV",{class:!0});var na=s(ne);h(Sr.$$.fragment,na),au=l(na),wt=n(na,"P",{});var hl=s(wt);Wn=n(hl,"A",{href:!0});var d$=s(Wn);iu=i(d$,"LogitsProcessor"),d$.forEach(r),cu=i(hl,` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),qr=n(hl,"A",{href:!0,rel:!0});var p$=s(qr);lu=i(p$,"Autoregressive Entity Retrieval"),p$.forEach(r),du=i(hl," for more information."),hl.forEach(r),pu=l(na),Ri=n(na,"DIV",{class:!0}),s(Ri).forEach(r),na.forEach(r),ad=l(t),se=n(t,"DIV",{class:!0});var sa=s(se);h(Or.$$.fragment,sa),fu=l(sa),Ae=n(sa,"P",{});var en=s(Ae);Vn=n(en,"A",{href:!0});var f$=s(Vn);mu=i(f$,"LogitsProcessor"),f$.forEach(r),hu=i(en,` that enforces diverse beam search. Note that this logits processor is only effective for
`),Mn=n(en,"A",{href:!0});var m$=s(Mn);uu=i(m$,"PreTrainedModel.group_beam_search()"),m$.forEach(r),gu=i(en,". See "),Br=n(en,"A",{href:!0,rel:!0});var h$=s(Br);_u=i(h$,`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),h$.forEach(r),bu=i(en," for more details."),en.forEach(r),vu=l(sa),Ki=n(sa,"DIV",{class:!0}),s(Ki).forEach(r),sa.forEach(r),id=l(t),ae=n(t,"DIV",{class:!0});var aa=s(ae);h(Ir.$$.fragment,aa),Tu=l(aa),Gn=n(aa,"P",{});var i1=s(Gn);jn=n(i1,"A",{href:!0});var u$=s(jn);$u=i(u$,"LogitsProcessor"),u$.forEach(r),yu=i(i1," that enforces the specified token as the first generated token."),i1.forEach(r),ku=l(aa),Ui=n(aa,"DIV",{class:!0}),s(Ui).forEach(r),aa.forEach(r),cd=l(t),ie=n(t,"DIV",{class:!0});var ia=s(ie);h(Ar.$$.fragment,ia),wu=l(ia),xt=n(ia,"P",{});var ul=s(xt);Hn=n(ul,"A",{href:!0});var g$=s(Hn);xu=i(g$,"LogitsProcessor"),g$.forEach(r),Eu=i(ul," that enforces the specified token as the last generated token when "),Yi=n(ul,"CODE",{});var _$=s(Yi);Lu=i(_$,"max_length"),_$.forEach(r),Pu=i(ul," is reached."),ul.forEach(r),Fu=l(ia),Xi=n(ia,"DIV",{class:!0}),s(Xi).forEach(r),ia.forEach(r),ld=l(t),ce=n(t,"DIV",{class:!0});var ca=s(ce);h(Cr.$$.fragment,ca),Du=l(ca),M=n(ca,"P",{});var dt=s(M);Rn=n(dt,"A",{href:!0});var b$=s(Rn);zu=i(b$,"LogitsProcessor"),b$.forEach(r),Su=i(dt," that removes all "),Ji=n(dt,"CODE",{});var v$=s(Ji);qu=i(v$,"nan"),v$.forEach(r),Ou=i(dt," and "),Qi=n(dt,"CODE",{});var T$=s(Qi);Bu=i(T$,"inf"),T$.forEach(r),Iu=i(dt,` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),Zi=n(dt,"CODE",{});var $$=s(Zi);Au=i($$,"max_length"),$$.forEach(r),Cu=i(dt,` is
reached.`),dt.forEach(r),Nu=l(ca),ec=n(ca,"DIV",{class:!0}),s(ec).forEach(r),ca.forEach(r),dd=l(t),le=n(t,"DIV",{class:!0});var la=s(le);h(Nr.$$.fragment,la),Wu=l(la),tc=n(la,"P",{});var y$=s(tc);Vu=i(y$,"Abstract base class for all logit processors that can be applied during generation."),y$.forEach(r),Mu=l(la),Et=n(la,"DIV",{class:!0});var up=s(Et);h(Wr.$$.fragment,up),Gu=l(up),rc=n(up,"P",{});var k$=s(rc);ju=i(k$,"TF method for processing logits."),k$.forEach(r),up.forEach(r),la.forEach(r),pd=l(t),de=n(t,"DIV",{class:!0});var da=s(de);h(Vr.$$.fragment,da),Hu=l(da),B=n(da,"P",{});var Me=s(B);Ru=i(Me,"This class can be used to create a list of "),Kn=n(Me,"A",{href:!0});var w$=s(Kn);Ku=i(w$,"TFLogitsProcessor"),w$.forEach(r),Uu=i(Me," to subsequently process a "),oc=n(Me,"CODE",{});var x$=s(oc);Yu=i(x$,"scores"),x$.forEach(r),Xu=i(Me,` input tensor.
This class inherits from list and adds a specific `),nc=n(Me,"EM",{});var E$=s(nc);sc=n(E$,"STRONG",{});var L$=s(sc);Ju=i(L$,"call"),L$.forEach(r),E$.forEach(r),Qu=i(Me," method to apply each "),Un=n(Me,"A",{href:!0});var P$=s(Un);Zu=i(P$,"TFLogitsProcessor"),P$.forEach(r),eg=i(Me,` to the
inputs.`),Me.forEach(r),tg=l(da),Yn=n(da,"DIV",{class:!0});var F$=s(Yn);h(Mr.$$.fragment,F$),F$.forEach(r),da.forEach(r),fd=l(t),pe=n(t,"DIV",{class:!0});var pa=s(pe);h(Gr.$$.fragment,pa),rg=l(pa),ac=n(pa,"P",{});var D$=s(ac);og=i(D$,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),D$.forEach(r),ng=l(pa),Lt=n(pa,"DIV",{class:!0});var gp=s(Lt);h(jr.$$.fragment,gp),sg=l(gp),ic=n(gp,"P",{});var z$=s(ic);ag=i(z$,"TF method for warping logits."),z$.forEach(r),gp.forEach(r),pa.forEach(r),md=l(t),fe=n(t,"DIV",{class:!0});var fa=s(fe);h(Hr.$$.fragment,fa),ig=l(fa),Xn=n(fa,"P",{});var c1=s(Xn);Jn=n(c1,"A",{href:!0});var S$=s(Jn);cg=i(S$,"TFLogitsWarper"),S$.forEach(r),lg=i(c1," for temperature (exponential scaling output probability distribution)."),c1.forEach(r),dg=l(fa),cc=n(fa,"DIV",{class:!0}),s(cc).forEach(r),fa.forEach(r),hd=l(t),me=n(t,"DIV",{class:!0});var ma=s(me);h(Rr.$$.fragment,ma),pg=l(ma),Qn=n(ma,"P",{});var l1=s(Qn);Zn=n(l1,"A",{href:!0});var q$=s(Zn);fg=i(q$,"TFLogitsWarper"),q$.forEach(r),mg=i(l1," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),l1.forEach(r),hg=l(ma),lc=n(ma,"DIV",{class:!0}),s(lc).forEach(r),ma.forEach(r),ud=l(t),he=n(t,"DIV",{class:!0});var ha=s(he);h(Kr.$$.fragment,ha),ug=l(ha),es=n(ha,"P",{});var d1=s(es);ts=n(d1,"A",{href:!0});var O$=s(ts);gg=i(O$,"TFLogitsWarper"),O$.forEach(r),_g=i(d1," that performs top-k, i.e. restricting to the k highest probability elements."),d1.forEach(r),bg=l(ha),dc=n(ha,"DIV",{class:!0}),s(dc).forEach(r),ha.forEach(r),gd=l(t),ue=n(t,"DIV",{class:!0});var ua=s(ue);h(Ur.$$.fragment,ua),vg=l(ua),rs=n(ua,"P",{});var p1=s(rs);os=n(p1,"A",{href:!0});var B$=s(os);Tg=i(B$,"TFLogitsProcessor"),B$.forEach(r),$g=i(p1," enforcing a min-length by setting EOS probability to 0."),p1.forEach(r),yg=l(ua),pc=n(ua,"DIV",{class:!0}),s(pc).forEach(r),ua.forEach(r),_d=l(t),ge=n(t,"DIV",{class:!0});var ga=s(ge);h(Yr.$$.fragment,ga),kg=l(ga),ns=n(ga,"P",{});var f1=s(ns);ss=n(f1,"A",{href:!0});var I$=s(ss);wg=i(I$,"TFLogitsProcessor"),I$.forEach(r),xg=i(f1," that enforces that specified sequences will never be sampled."),f1.forEach(r),Eg=l(ga),fc=n(ga,"DIV",{class:!0}),s(fc).forEach(r),ga.forEach(r),bd=l(t),_e=n(t,"DIV",{class:!0});var _a=s(_e);h(Xr.$$.fragment,_a),Lg=l(_a),Pt=n(_a,"P",{});var gl=s(Pt);as=n(gl,"A",{href:!0});var A$=s(as);Pg=i(A$,"TFLogitsProcessor"),A$.forEach(r),Fg=i(gl,` that enforces no repetition of n-grams. See
`),Jr=n(gl,"A",{href:!0,rel:!0});var C$=s(Jr);Dg=i(C$,"Fairseq"),C$.forEach(r),zg=i(gl,"."),gl.forEach(r),Sg=l(_a),mc=n(_a,"DIV",{class:!0}),s(mc).forEach(r),_a.forEach(r),vd=l(t),be=n(t,"DIV",{class:!0});var ba=s(be);h(Qr.$$.fragment,ba),qg=l(ba),is=n(ba,"P",{});var m1=s(is);cs=n(m1,"A",{href:!0});var N$=s(cs);Og=i(N$,"TFLogitsProcessor"),N$.forEach(r),Bg=i(m1," enforcing an exponential penalty on repeated sequences."),m1.forEach(r),Ig=l(ba),hc=n(ba,"DIV",{class:!0}),s(hc).forEach(r),ba.forEach(r),Td=l(t),ve=n(t,"DIV",{class:!0});var va=s(ve);h(Zr.$$.fragment,va),Ag=l(va),uc=n(va,"P",{});var W$=s(uc);Cg=i(W$,"Abstract base class for all logit processors that can be applied during generation."),W$.forEach(r),Ng=l(va),Ft=n(va,"DIV",{class:!0});var _p=s(Ft);h(eo.$$.fragment,_p),Wg=l(_p),gc=n(_p,"P",{});var V$=s(gc);Vg=i(V$,"Flax method for processing logits."),V$.forEach(r),_p.forEach(r),va.forEach(r),$d=l(t),Te=n(t,"DIV",{class:!0});var Ta=s(Te);h(to.$$.fragment,Ta),Mg=l(Ta),x=n(Ta,"P",{});var O=s(x);Gg=i(O,"This class can be used to create a list of "),ls=n(O,"A",{href:!0});var M$=s(ls);jg=i(M$,"FlaxLogitsProcessor"),M$.forEach(r),Hg=i(O," or "),ds=n(O,"A",{href:!0});var G$=s(ds);Rg=i(G$,"FlaxLogitsWarper"),G$.forEach(r),Kg=i(O,` to subsequently process
a `),_c=n(O,"CODE",{});var j$=s(_c);Ug=i(j$,"scores"),j$.forEach(r),Yg=i(O," input tensor. This class inherits from list and adds a specific "),bc=n(O,"EM",{});var H$=s(bc);vc=n(H$,"STRONG",{});var R$=s(vc);Xg=i(R$,"call"),R$.forEach(r),H$.forEach(r),Jg=i(O,` method to apply each
`),ps=n(O,"A",{href:!0});var K$=s(ps);Qg=i(K$,"FlaxLogitsProcessor"),K$.forEach(r),Zg=i(O," or "),fs=n(O,"A",{href:!0});var U$=s(fs);e_=i(U$,"FlaxLogitsWarper"),U$.forEach(r),t_=i(O," to the inputs."),O.forEach(r),r_=l(Ta),ms=n(Ta,"DIV",{class:!0});var Y$=s(ms);h(ro.$$.fragment,Y$),Y$.forEach(r),Ta.forEach(r),yd=l(t),$e=n(t,"DIV",{class:!0});var $a=s($e);h(oo.$$.fragment,$a),o_=l($a),Tc=n($a,"P",{});var X$=s(Tc);n_=i(X$,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),X$.forEach(r),s_=l($a),Dt=n($a,"DIV",{class:!0});var bp=s(Dt);h(no.$$.fragment,bp),a_=l(bp),$c=n(bp,"P",{});var J$=s($c);i_=i(J$,"Flax method for warping logits."),J$.forEach(r),bp.forEach(r),$a.forEach(r),kd=l(t),ye=n(t,"DIV",{class:!0});var ya=s(ye);h(so.$$.fragment,ya),c_=l(ya),hs=n(ya,"P",{});var h1=s(hs);us=n(h1,"A",{href:!0});var Q$=s(us);l_=i(Q$,"FlaxLogitsWarper"),Q$.forEach(r),d_=i(h1," for temperature (exponential scaling output probability distribution)."),h1.forEach(r),p_=l(ya),yc=n(ya,"DIV",{class:!0}),s(yc).forEach(r),ya.forEach(r),wd=l(t),ke=n(t,"DIV",{class:!0});var ka=s(ke);h(ao.$$.fragment,ka),f_=l(ka),gs=n(ka,"P",{});var u1=s(gs);_s=n(u1,"A",{href:!0});var Z$=s(_s);m_=i(Z$,"FlaxLogitsWarper"),Z$.forEach(r),h_=i(u1," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),u1.forEach(r),u_=l(ka),kc=n(ka,"DIV",{class:!0}),s(kc).forEach(r),ka.forEach(r),xd=l(t),we=n(t,"DIV",{class:!0});var wa=s(we);h(io.$$.fragment,wa),g_=l(wa),bs=n(wa,"P",{});var g1=s(bs);vs=n(g1,"A",{href:!0});var ey=s(vs);__=i(ey,"FlaxLogitsWarper"),ey.forEach(r),b_=i(g1," that performs top-k, i.e. restricting to the k highest probability elements."),g1.forEach(r),v_=l(wa),wc=n(wa,"DIV",{class:!0}),s(wc).forEach(r),wa.forEach(r),Ed=l(t),xe=n(t,"DIV",{class:!0});var xa=s(xe);h(co.$$.fragment,xa),T_=l(xa),Ts=n(xa,"P",{});var _1=s(Ts);$s=n(_1,"A",{href:!0});var ty=s($s);$_=i(ty,"FlaxLogitsProcessor"),ty.forEach(r),y_=i(_1," that enforces the specified token as the first generated token."),_1.forEach(r),k_=l(xa),xc=n(xa,"DIV",{class:!0}),s(xc).forEach(r),xa.forEach(r),Ld=l(t),Ee=n(t,"DIV",{class:!0});var Ea=s(Ee);h(lo.$$.fragment,Ea),w_=l(Ea),zt=n(Ea,"P",{});var _l=s(zt);ys=n(_l,"A",{href:!0});var ry=s(ys);x_=i(ry,"FlaxLogitsProcessor"),ry.forEach(r),E_=i(_l," that enforces the specified token as the last generated token when "),Ec=n(_l,"CODE",{});var oy=s(Ec);L_=i(oy,"max_length"),oy.forEach(r),P_=i(_l," is reached."),_l.forEach(r),F_=l(Ea),Lc=n(Ea,"DIV",{class:!0}),s(Lc).forEach(r),Ea.forEach(r),Pd=l(t),Le=n(t,"DIV",{class:!0});var La=s(Le);h(po.$$.fragment,La),D_=l(La),ks=n(La,"P",{});var b1=s(ks);ws=n(b1,"A",{href:!0});var ny=s(ws);z_=i(ny,"FlaxLogitsProcessor"),ny.forEach(r),S_=i(b1," enforcing a min-length by setting EOS probability to 0."),b1.forEach(r),q_=l(La),Pc=n(La,"DIV",{class:!0}),s(Pc).forEach(r),La.forEach(r),Fd=l(t),ot=n(t,"H2",{class:!0});var vp=s(ot);St=n(vp,"A",{id:!0,class:!0,href:!0});var sy=s(St);Fc=n(sy,"SPAN",{});var ay=s(Fc);h(fo.$$.fragment,ay),ay.forEach(r),sy.forEach(r),O_=l(vp),Dc=n(vp,"SPAN",{});var iy=s(Dc);B_=i(iy,"StoppingCriteria"),iy.forEach(r),vp.forEach(r),Dd=l(t),qt=n(t,"P",{});var Tp=s(qt);I_=i(Tp,"A "),xs=n(Tp,"A",{href:!0});var cy=s(xs);A_=i(cy,"StoppingCriteria"),cy.forEach(r),C_=i(Tp," can be used to change when to stop generation (other than EOS token)."),Tp.forEach(r),zd=l(t),Pe=n(t,"DIV",{class:!0});var Pa=s(Pe);h(mo.$$.fragment,Pa),N_=l(Pa),zc=n(Pa,"P",{});var ly=s(zc);W_=i(ly,"Abstract base class for all stopping criteria that can be applied during generation."),ly.forEach(r),V_=l(Pa),Es=n(Pa,"DIV",{class:!0});var dy=s(Es);h(ho.$$.fragment,dy),dy.forEach(r),Pa.forEach(r),Sd=l(t),uo=n(t,"DIV",{class:!0});var py=s(uo);Ls=n(py,"DIV",{class:!0});var fy=s(Ls);h(go.$$.fragment,fy),fy.forEach(r),py.forEach(r),qd=l(t),Fe=n(t,"DIV",{class:!0});var Fa=s(Fe);h(_o.$$.fragment,Fa),M_=l(Fa),bo=n(Fa,"P",{});var $p=s(bo);G_=i($p,"This class can be used to stop generation whenever the full generated number of tokens exceeds "),Sc=n($p,"CODE",{});var my=s(Sc);j_=i(my,"max_length"),my.forEach(r),H_=i($p,`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),$p.forEach(r),R_=l(Fa),Ps=n(Fa,"DIV",{class:!0});var hy=s(Ps);h(vo.$$.fragment,hy),hy.forEach(r),Fa.forEach(r),Od=l(t),De=n(t,"DIV",{class:!0});var Da=s(De);h(To.$$.fragment,Da),K_=l(Da),$o=n(Da,"P",{});var yp=s($o);U_=i(yp,`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),qc=n(yp,"CODE",{});var uy=s(qc);Y_=i(uy,"initial_time"),uy.forEach(r),X_=i(yp,"."),yp.forEach(r),J_=l(Da),Fs=n(Da,"DIV",{class:!0});var gy=s(Fs);h(yo.$$.fragment,gy),gy.forEach(r),Da.forEach(r),Bd=l(t),nt=n(t,"H2",{class:!0});var kp=s(nt);Ot=n(kp,"A",{id:!0,class:!0,href:!0});var _y=s(Ot);Oc=n(_y,"SPAN",{});var by=s(Oc);h(ko.$$.fragment,by),by.forEach(r),_y.forEach(r),Q_=l(kp),Bc=n(kp,"SPAN",{});var vy=s(Bc);Z_=i(vy,"Constraints"),vy.forEach(r),kp.forEach(r),Id=l(t),Bt=n(t,"P",{});var wp=s(Bt);eb=i(wp,"A "),Ds=n(wp,"A",{href:!0});var Ty=s(Ds);tb=i(Ty,"Constraint"),Ty.forEach(r),rb=i(wp," can be used to force the generation to include specific tokens or sequences in the output."),wp.forEach(r),Ad=l(t),T=n(t,"DIV",{class:!0});var $=s(T);h(wo.$$.fragment,$),ob=l($),Ic=n($,"P",{});var $y=s(Ic);nb=i($y,`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),$y.forEach(r),sb=l($),Ac=n($,"P",{});var yy=s(Ac);ab=i(yy,"All classes that inherit Constraint must follow the requirement that"),yy.forEach(r),ib=l($),h(xo.$$.fragment,$),cb=l($),Cc=n($,"P",{});var ky=s(Cc);lb=i(ky,"will always terminate (halt)."),ky.forEach(r),db=l($),It=n($,"DIV",{class:!0});var xp=s(It);h(Eo.$$.fragment,xp),pb=l(xp),Nc=n(xp,"P",{});var wy=s(Nc);fb=i(wy,"When called, returns the token that would take this constraint one step closer to being fulfilled."),wy.forEach(r),xp.forEach(r),mb=l($),At=n($,"DIV",{class:!0});var Ep=s(At);h(Lo.$$.fragment,Ep),hb=l(Ep),Wc=n(Ep,"P",{});var xy=s(Wc);ub=i(xy,"Creates a new instance of this constraint."),xy.forEach(r),Ep.forEach(r),gb=l($),Ct=n($,"DIV",{class:!0});var Lp=s(Ct);h(Po.$$.fragment,Lp),_b=l(Lp),Vc=n(Lp,"P",{});var Ey=s(Vc);bb=i(Ey,"Reads in a token and returns whether it creates progress."),Ey.forEach(r),Lp.forEach(r),vb=l($),Nt=n($,"DIV",{class:!0});var Pp=s(Nt);h(Fo.$$.fragment,Pp),Tb=l(Pp),Do=n(Pp,"P",{});var Fp=s(Do);$b=i(Fp,"Returns the number of remaining steps of "),Mc=n(Fp,"CODE",{});var Ly=s(Mc);yb=i(Ly,"advance()"),Ly.forEach(r),kb=i(Fp," in order to complete this constraint."),Fp.forEach(r),Pp.forEach(r),wb=l($),Wt=n($,"DIV",{class:!0});var Dp=s(Wt);h(zo.$$.fragment,Dp),xb=l(Dp),Gc=n(Dp,"P",{});var Py=s(Gc);Eb=i(Py,`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),Py.forEach(r),Dp.forEach(r),Lb=l($),Vt=n($,"DIV",{class:!0});var zp=s(Vt);h(So.$$.fragment,zp),Pb=l(zp),jc=n(zp,"P",{});var Fy=s(jc);Fb=i(Fy,"Tests whether this constraint has been properly defined."),Fy.forEach(r),zp.forEach(r),Db=l($),Ce=n($,"DIV",{class:!0});var za=s(Ce);h(qo.$$.fragment,za),zb=l(za),Oo=n(za,"P",{});var Sp=s(Oo);Sb=i(Sp,`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),Hc=n(Sp,"CODE",{});var Dy=s(Hc);qb=i(Dy,"does_advance(self, token_id: int)"),Dy.forEach(r),Ob=i(Sp,"."),Sp.forEach(r),Bb=l(za),Rc=n(za,"P",{});var zy=s(Rc);Ib=i(zy,`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),zy.forEach(r),za.forEach(r),$.forEach(r),Cd=l(t),st=n(t,"DIV",{class:!0});var qp=s(st);h(Bo.$$.fragment,qp),Ab=l(qp),zs=n(qp,"P",{});var v1=s(zs);Ss=n(v1,"A",{href:!0});var Sy=s(Ss);Cb=i(Sy,"Constraint"),Sy.forEach(r),Nb=i(v1," enforcing that an ordered sequence of tokens is included in the output."),v1.forEach(r),qp.forEach(r),Nd=l(t),I=n(t,"DIV",{class:!0});var Kt=s(I);h(Io.$$.fragment,Kt),Wb=l(Kt),Kc=n(Kt,"P",{});var qy=s(Kc);Vb=i(qy,"A class for beam scorers to track its progress through a list of constraints."),qy.forEach(r),Mb=l(Kt),L=n(Kt,"DIV",{class:!0});var G=s(L);h(Ao.$$.fragment,G),Gb=l(G),Uc=n(G,"P",{});var Oy=s(Uc);jb=i(Oy,`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),Oy.forEach(r),Hb=l(G),at=n(G,"P",{});var Sa=s(at);Rb=i(Sa,"Given constraints "),Yc=n(Sa,"CODE",{});var By=s(Yc);Kb=i(By,"c_i = {t_ij | j == # of tokens}"),By.forEach(r),Ub=i(Sa,`, If we\u2019re not in the middle of progressing through a
specific constraint `),Xc=n(Sa,"CODE",{});var Iy=s(Xc);Yb=i(Iy,"c_i"),Iy.forEach(r),Xb=i(Sa,", we return:"),Sa.forEach(r),Jb=l(G),Jc=n(G,"P",{});var Ay=s(Jc);Qc=n(Ay,"CODE",{});var Cy=s(Qc);Qb=i(Cy,"[t_k1 for k in indices of unfulfilled constraints]"),Cy.forEach(r),Ay.forEach(r),Zb=l(G),ze=n(G,"P",{});var Ut=s(ze);ev=i(Ut,`If we are in the middle of a constraint, then we return:
`),Zc=n(Ut,"CODE",{});var Ny=s(Zc);tv=i(Ny,"[t_ij]"),Ny.forEach(r),rv=i(Ut,", where "),el=n(Ut,"CODE",{});var Wy=s(el);ov=i(Wy,"i"),Wy.forEach(r),nv=i(Ut," is the index of the inprogress constraint, "),tl=n(Ut,"CODE",{});var Vy=s(tl);sv=i(Vy,"j"),Vy.forEach(r),av=i(Ut," is the next step for the constraint."),Ut.forEach(r),iv=l(G),rl=n(G,"P",{});var My=s(rl);cv=i(My,`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),My.forEach(r),G.forEach(r),lv=l(Kt),Mt=n(Kt,"DIV",{class:!0});var Op=s(Mt);h(Co.$$.fragment,Op),dv=l(Op),ol=n(Op,"P",{});var Gy=s(ol);pv=i(Gy,"token_ids: the tokens generated thus far to reset the state of the progress through constraints."),Gy.forEach(r),Op.forEach(r),Kt.forEach(r),Wd=l(t),it=n(t,"H2",{class:!0});var Bp=s(it);Gt=n(Bp,"A",{id:!0,class:!0,href:!0});var jy=s(Gt);nl=n(jy,"SPAN",{});var Hy=s(nl);h(No.$$.fragment,Hy),Hy.forEach(r),jy.forEach(r),fv=l(Bp),sl=n(Bp,"SPAN",{});var Ry=s(sl);mv=i(Ry,"BeamSearch"),Ry.forEach(r),Bp.forEach(r),Vd=l(t),A=n(t,"DIV",{class:!0});var Yt=s(A);h(Wo.$$.fragment,Yt),hv=l(Yt),ct=n(Yt,"P",{});var qa=s(ct);uv=i(qa,"Abstract base class for all beam scorers that are used for "),qs=n(qa,"A",{href:!0});var Ky=s(qs);gv=i(Ky,"beam_search()"),Ky.forEach(r),_v=i(qa,` and
`),Os=n(qa,"A",{href:!0});var Uy=s(Os);bv=i(Uy,"beam_sample()"),Uy.forEach(r),vv=i(qa,"."),qa.forEach(r),Tv=l(Yt),Bs=n(Yt,"DIV",{class:!0});var Yy=s(Bs);h(Vo.$$.fragment,Yy),Yy.forEach(r),$v=l(Yt),Is=n(Yt,"DIV",{class:!0});var Xy=s(Is);h(Mo.$$.fragment,Xy),Xy.forEach(r),Yt.forEach(r),Md=l(t),E=n(t,"DIV",{class:!0});var j=s(E);h(Go.$$.fragment,j),yv=l(j),As=n(j,"P",{});var T1=s(As);Cs=n(T1,"A",{href:!0});var Jy=s(Cs);kv=i(Jy,"BeamScorer"),Jy.forEach(r),wv=i(T1," implementing standard beam search decoding."),T1.forEach(r),xv=l(j),jo=n(j,"P",{});var Ip=s(jo);Ev=i(Ip,"Adapted in part from "),Ho=n(Ip,"A",{href:!0,rel:!0});var Qy=s(Ho);Lv=i(Qy,`Facebook\u2019s XLM beam search
code`),Qy.forEach(r),Pv=i(Ip,"."),Ip.forEach(r),Fv=l(j),Ns=n(j,"P",{});var $1=s(Ns);Dv=i($1,"Reference for the diverse beam search algorithm and implementation "),Ro=n($1,"A",{href:!0,rel:!0});var Zy=s(Ro);zv=i(Zy,`Ashwin Kalyan\u2019s DBS
implementation`),Zy.forEach(r),$1.forEach(r),Sv=l(j),al=n(j,"DIV",{class:!0}),s(al).forEach(r),qv=l(j),il=n(j,"DIV",{class:!0}),s(il).forEach(r),j.forEach(r),Gd=l(t),C=n(t,"DIV",{class:!0});var Xt=s(C);h(Ko.$$.fragment,Xt),Ov=l(Xt),Ws=n(Xt,"P",{});var y1=s(Ws);Vs=n(y1,"A",{href:!0});var ek=s(Vs);Bv=i(ek,"BeamScorer"),ek.forEach(r),Iv=i(y1," implementing constrained beam search decoding."),y1.forEach(r),Av=l(Xt),Ms=n(Xt,"DIV",{class:!0});var tk=s(Ms);h(Uo.$$.fragment,tk),tk.forEach(r),Cv=l(Xt),cl=n(Xt,"DIV",{class:!0}),s(cl).forEach(r),Xt.forEach(r),jd=l(t),lt=n(t,"H2",{class:!0});var Ap=s(lt);jt=n(Ap,"A",{id:!0,class:!0,href:!0});var rk=s(jt);ll=n(rk,"SPAN",{});var ok=s(ll);h(Yo.$$.fragment,ok),ok.forEach(r),rk.forEach(r),Nv=l(Ap),dl=n(Ap,"SPAN",{});var nk=s(dl);Wv=i(nk,"Utilities"),nk.forEach(r),Ap.forEach(r),Hd=l(t),Se=n(t,"DIV",{class:!0});var Oa=s(Se);h(Xo.$$.fragment,Oa),Vv=l(Oa),pl=n(Oa,"P",{});var sk=s(pl);Mv=i(sk,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),sk.forEach(r),Gv=l(Oa),Gs=n(Oa,"P",{});var k1=s(Gs);jv=i(k1,"From: "),Jo=n(k1,"A",{href:!0,rel:!0});var ak=s(Jo);Hv=i(ak,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),ak.forEach(r),k1.forEach(r),Oa.forEach(r),Rd=l(t),qe=n(t,"DIV",{class:!0});var Ba=s(qe);h(Qo.$$.fragment,Ba),Rv=l(Ba),fl=n(Ba,"P",{});var ik=s(fl);Kv=i(ik,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),ik.forEach(r),Uv=l(Ba),js=n(Ba,"P",{});var w1=s(js);Yv=i(w1,"From: "),Zo=n(w1,"A",{href:!0,rel:!0});var ck=s(Zo);Xv=i(ck,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),ck.forEach(r),w1.forEach(r),Ba.forEach(r),this.h()},h(){d(Be,"name","hf:doc:metadata"),d(Be,"content",JSON.stringify(uk)),d(H,"id","utilities-for-generation"),d(H,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H,"href","#utilities-for-generation"),d(N,"class","relative group"),d(rn,"href","/docs/transformers/pr_15793/en/main_classes/model#transformers.generation_utils.GenerationMixin.generate"),d(on,"href","/docs/transformers/pr_15793/en/main_classes/model#transformers.generation_utils.GenerationMixin.greedy_search"),d(nn,"href","/docs/transformers/pr_15793/en/main_classes/model#transformers.generation_utils.GenerationMixin.sample"),d(sn,"href","/docs/transformers/pr_15793/en/main_classes/model#transformers.generation_utils.GenerationMixin.beam_search"),d(an,"href","/docs/transformers/pr_15793/en/main_classes/model#transformers.generation_utils.GenerationMixin.beam_sample"),d(cn,"href","/docs/transformers/pr_15793/en/main_classes/model#transformers.generation_utils.GenerationMixin.group_beam_search"),d(ln,"href","/docs/transformers/pr_15793/en/main_classes/model#transformers.generation_utils.GenerationMixin.constrained_beam_search"),d(pt,"id","generate-outputs"),d(pt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pt,"href","#generate-outputs"),d(Ge,"class","relative group"),d(pn,"href","/docs/transformers/pr_15793/en/main_classes/model#transformers.generation_utils.GenerationMixin.generate"),d(fn,"href","/docs/transformers/pr_15793/en/main_classes/output#transformers.file_utils.ModelOutput"),d(mn,"href","/docs/transformers/pr_15793/en/main_classes/model#transformers.generation_utils.GenerationMixin.generate"),d(un,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(mt,"id","transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(mt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mt,"href","#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(je,"class","relative group"),d(He,"class","docstring"),d(Re,"class","docstring"),d(ht,"class","docstring"),d(R,"class","docstring"),d(ut,"id","transformers.generation_utils.SampleDecoderOnlyOutput"),d(ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ut,"href","#transformers.generation_utils.SampleDecoderOnlyOutput"),d(Ke,"class","relative group"),d(Ue,"class","docstring"),d(Ye,"class","docstring"),d(gt,"class","docstring"),d(K,"class","docstring"),d(_t,"id","transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(_t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_t,"href","#transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(Xe,"class","relative group"),d(Je,"class","docstring"),d(Qe,"class","docstring"),d(bt,"id","transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bt,"href","#transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(Ze,"class","relative group"),d(et,"class","docstring"),d(tt,"class","docstring"),d(vt,"id","transformers.LogitsProcessor"),d(vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vt,"href","#transformers.LogitsProcessor"),d(rt,"class","relative group"),d($n,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.LogitsProcessor"),d($t,"class","docstring"),d(U,"class","docstring"),d(yn,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.LogitsProcessor"),d(kn,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.LogitsWarper"),d(wn,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.LogitsProcessor"),d(xn,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.LogitsWarper"),d(En,"class","docstring"),d(Y,"class","docstring"),d(yt,"class","docstring"),d(X,"class","docstring"),d(Pn,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ni,"class","docstring"),d(J,"class","docstring"),d(Dn,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.LogitsWarper"),d(Wi,"class","docstring"),d(Q,"class","docstring"),d(Sn,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.LogitsProcessor"),d(Vi,"class","docstring"),d(Z,"class","docstring"),d(On,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.LogitsWarper"),d(Mi,"class","docstring"),d(ee,"class","docstring"),d(In,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.LogitsWarper"),d(Gi,"class","docstring"),d(te,"class","docstring"),d(An,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.LogitsProcessor"),d(Dr,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(Dr,"rel","nofollow"),d(ji,"class","docstring"),d(re,"class","docstring"),d(Nn,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.LogitsProcessor"),d(Hi,"class","docstring"),d(oe,"class","docstring"),d(Wn,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.LogitsProcessor"),d(qr,"href","https://arxiv.org/abs/2010.00904"),d(qr,"rel","nofollow"),d(Ri,"class","docstring"),d(ne,"class","docstring"),d(Vn,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.LogitsProcessor"),d(Mn,"href","/docs/transformers/pr_15793/en/main_classes/model#transformers.generation_utils.GenerationMixin.group_beam_search"),d(Br,"href","https://arxiv.org/pdf/1610.02424.pdf"),d(Br,"rel","nofollow"),d(Ki,"class","docstring"),d(se,"class","docstring"),d(jn,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ui,"class","docstring"),d(ae,"class","docstring"),d(Hn,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.LogitsProcessor"),d(Xi,"class","docstring"),d(ie,"class","docstring"),d(Rn,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.LogitsProcessor"),d(ec,"class","docstring"),d(ce,"class","docstring"),d(Et,"class","docstring"),d(le,"class","docstring"),d(Kn,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Un,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Yn,"class","docstring"),d(de,"class","docstring"),d(Lt,"class","docstring"),d(pe,"class","docstring"),d(Jn,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.TFLogitsWarper"),d(cc,"class","docstring"),d(fe,"class","docstring"),d(Zn,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.TFLogitsWarper"),d(lc,"class","docstring"),d(me,"class","docstring"),d(ts,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.TFLogitsWarper"),d(dc,"class","docstring"),d(he,"class","docstring"),d(os,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(pc,"class","docstring"),d(ue,"class","docstring"),d(ss,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(fc,"class","docstring"),d(ge,"class","docstring"),d(as,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Jr,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(Jr,"rel","nofollow"),d(mc,"class","docstring"),d(_e,"class","docstring"),d(cs,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(hc,"class","docstring"),d(be,"class","docstring"),d(Ft,"class","docstring"),d(ve,"class","docstring"),d(ls,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(ds,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(ps,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(fs,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(ms,"class","docstring"),d(Te,"class","docstring"),d(Dt,"class","docstring"),d($e,"class","docstring"),d(us,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(yc,"class","docstring"),d(ye,"class","docstring"),d(_s,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(kc,"class","docstring"),d(ke,"class","docstring"),d(vs,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(wc,"class","docstring"),d(we,"class","docstring"),d($s,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(xc,"class","docstring"),d(xe,"class","docstring"),d(ys,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Lc,"class","docstring"),d(Ee,"class","docstring"),d(ws,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Pc,"class","docstring"),d(Le,"class","docstring"),d(St,"id","transformers.StoppingCriteria"),d(St,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(St,"href","#transformers.StoppingCriteria"),d(ot,"class","relative group"),d(xs,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.StoppingCriteria"),d(Es,"class","docstring"),d(Pe,"class","docstring"),d(Ls,"class","docstring"),d(uo,"class","docstring"),d(Ps,"class","docstring"),d(Fe,"class","docstring"),d(Fs,"class","docstring"),d(De,"class","docstring"),d(Ot,"id","transformers.Constraint"),d(Ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ot,"href","#transformers.Constraint"),d(nt,"class","relative group"),d(Ds,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.Constraint"),d(It,"class","docstring"),d(At,"class","docstring"),d(Ct,"class","docstring"),d(Nt,"class","docstring"),d(Wt,"class","docstring"),d(Vt,"class","docstring"),d(Ce,"class","docstring"),d(T,"class","docstring"),d(Ss,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.Constraint"),d(st,"class","docstring"),d(L,"class","docstring"),d(Mt,"class","docstring"),d(I,"class","docstring"),d(Gt,"id","transformers.BeamScorer"),d(Gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gt,"href","#transformers.BeamScorer"),d(it,"class","relative group"),d(qs,"href","/docs/transformers/pr_15793/en/main_classes/model#transformers.generation_utils.GenerationMixin.beam_search"),d(Os,"href","/docs/transformers/pr_15793/en/main_classes/model#transformers.generation_utils.GenerationMixin.beam_sample"),d(Bs,"class","docstring"),d(Is,"class","docstring"),d(A,"class","docstring"),d(Cs,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.BeamScorer"),d(Ho,"href","https://github.com/facebookresearch/XLM/blob/9e6f6814d17be4fe5b15f2e6c43eb2b2d76daeb4/src/model/transformer.py#L529"),d(Ho,"rel","nofollow"),d(Ro,"href","https://github.com/ashwinkalyan/dbs/blob/master/dbs/beam_utils.lua"),d(Ro,"rel","nofollow"),d(al,"class","docstring"),d(il,"class","docstring"),d(E,"class","docstring"),d(Vs,"href","/docs/transformers/pr_15793/en/internal/generation_utils#transformers.BeamScorer"),d(Ms,"class","docstring"),d(cl,"class","docstring"),d(C,"class","docstring"),d(jt,"id","transformers.top_k_top_p_filtering"),d(jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jt,"href","#transformers.top_k_top_p_filtering"),d(lt,"class","relative group"),d(Jo,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(Jo,"rel","nofollow"),d(Se,"class","docstring"),d(Zo,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(Zo,"rel","nofollow"),d(qe,"class","docstring")},m(t,p){e(document.head,Be),f(t,tn,p),f(t,N,p),e(N,H),e(H,Ia),u(Jt,Ia,null),e(N,Np),e(N,Aa),e(Aa,Wp),f(t,bl,p),f(t,y,p),e(y,Vp),e(y,rn),e(rn,Mp),e(y,Gp),e(y,on),e(on,jp),e(y,Hp),e(y,nn),e(nn,Rp),e(y,Kp),e(y,sn),e(sn,Up),e(y,Yp),e(y,an),e(an,Xp),e(y,Jp),e(y,cn),e(cn,Qp),e(y,Zp),e(y,ln),e(ln,ef),e(y,tf),f(t,vl,p),f(t,dn,p),e(dn,rf),f(t,Tl,p),f(t,Ge,p),e(Ge,pt),e(pt,Ca),u(Qt,Ca,null),e(Ge,of),e(Ge,Na),e(Na,nf),f(t,$l,p),f(t,W,p),e(W,sf),e(W,pn),e(pn,af),e(W,cf),e(W,fn),e(fn,lf),e(W,df),e(W,mn),e(mn,pf),e(W,ff),f(t,yl,p),f(t,hn,p),e(hn,mf),f(t,kl,p),u(Zt,t,p),f(t,wl,p),f(t,Ie,p),e(Ie,hf),e(Ie,Wa),e(Wa,uf),e(Ie,gf),e(Ie,un),e(un,_f),e(Ie,bf),f(t,xl,p),f(t,V,p),e(V,gn),e(gn,Va),e(Va,vf),e(gn,Tf),e(V,$f),e(V,_n),e(_n,Ma),e(Ma,yf),e(_n,kf),e(V,wf),e(V,bn),e(bn,Ga),e(Ga,xf),e(bn,Ef),e(V,Lf),e(V,vn),e(vn,ja),e(ja,Pf),e(vn,Ff),f(t,El,p),f(t,k,p),e(k,Df),e(k,Ha),e(Ha,zf),e(k,Sf),e(k,Ra),e(Ra,qf),e(k,Of),e(k,Ka),e(Ka,Bf),e(k,If),e(k,Ua),e(Ua,Af),e(k,Cf),e(k,Ya),e(Ya,Nf),e(k,Wf),e(k,Xa),e(Xa,Vf),e(k,Mf),f(t,Ll,p),f(t,F,p),e(F,Gf),e(F,Ja),e(Ja,jf),e(F,Hf),e(F,Qa),e(Qa,Rf),e(F,Kf),e(F,Za),e(Za,Uf),e(F,Yf),e(F,ei),e(ei,Xf),e(F,Jf),f(t,Pl,p),f(t,D,p),e(D,Qf),e(D,ti),e(ti,Zf),e(D,em),e(D,ri),e(ri,tm),e(D,rm),e(D,oi),e(oi,om),e(D,nm),e(D,ni),e(ni,sm),e(D,am),f(t,Fl,p),u(er,t,p),f(t,Dl,p),f(t,ft,p),e(ft,im),e(ft,si),e(si,cm),e(ft,lm),f(t,zl,p),f(t,z,p),e(z,dm),e(z,ai),e(ai,pm),e(z,fm),e(z,ii),e(ii,mm),e(z,hm),e(z,ci),e(ci,um),e(z,gm),e(z,li),e(li,_m),e(z,bm),f(t,Sl,p),f(t,Tn,p),e(Tn,vm),f(t,ql,p),f(t,je,p),e(je,mt),e(mt,di),u(tr,di,null),e(je,Tm),e(je,pi),e(pi,$m),f(t,Ol,p),f(t,He,p),u(rr,He,null),e(He,ym),e(He,fi),e(fi,km),f(t,Bl,p),f(t,Re,p),u(or,Re,null),e(Re,wm),e(Re,mi),e(mi,xm),f(t,Il,p),f(t,R,p),u(nr,R,null),e(R,Em),e(R,hi),e(hi,Lm),e(R,Pm),e(R,ht),u(sr,ht,null),e(ht,Fm),e(ht,ui),e(ui,Dm),f(t,Al,p),f(t,Ke,p),e(Ke,ut),e(ut,gi),u(ar,gi,null),e(Ke,zm),e(Ke,_i),e(_i,Sm),f(t,Cl,p),f(t,Ue,p),u(ir,Ue,null),e(Ue,qm),e(Ue,bi),e(bi,Om),f(t,Nl,p),f(t,Ye,p),u(cr,Ye,null),e(Ye,Bm),e(Ye,vi),e(vi,Im),f(t,Wl,p),f(t,K,p),u(lr,K,null),e(K,Am),e(K,Ti),e(Ti,Cm),e(K,Nm),e(K,gt),u(dr,gt,null),e(gt,Wm),e(gt,$i),e($i,Vm),f(t,Vl,p),f(t,Xe,p),e(Xe,_t),e(_t,yi),u(pr,yi,null),e(Xe,Mm),e(Xe,ki),e(ki,Gm),f(t,Ml,p),f(t,Je,p),u(fr,Je,null),e(Je,jm),e(Je,wi),e(wi,Hm),f(t,Gl,p),f(t,Qe,p),u(mr,Qe,null),e(Qe,Rm),e(Qe,xi),e(xi,Km),f(t,jl,p),f(t,Ze,p),e(Ze,bt),e(bt,Ei),u(hr,Ei,null),e(Ze,Um),e(Ze,Li),e(Li,Ym),f(t,Hl,p),f(t,et,p),u(ur,et,null),e(et,Xm),e(et,Pi),e(Pi,Jm),f(t,Rl,p),f(t,tt,p),u(gr,tt,null),e(tt,Qm),e(tt,Fi),e(Fi,Zm),f(t,Kl,p),f(t,rt,p),e(rt,vt),e(vt,Di),u(_r,Di,null),e(rt,eh),e(rt,zi),e(zi,th),f(t,Ul,p),f(t,Tt,p),e(Tt,rh),e(Tt,$n),e($n,oh),e(Tt,nh),f(t,Yl,p),f(t,U,p),u(br,U,null),e(U,sh),e(U,Si),e(Si,ah),e(U,ih),e(U,$t),u(vr,$t,null),e($t,ch),e($t,qi),e(qi,lh),f(t,Xl,p),f(t,Y,p),u(Tr,Y,null),e(Y,dh),e(Y,w),e(w,ph),e(w,yn),e(yn,fh),e(w,mh),e(w,kn),e(kn,hh),e(w,uh),e(w,Oi),e(Oi,gh),e(w,_h),e(w,Bi),e(Bi,Ii),e(Ii,bh),e(w,vh),e(w,wn),e(wn,Th),e(w,$h),e(w,xn),e(xn,yh),e(w,kh),e(Y,wh),e(Y,En),u($r,En,null),f(t,Jl,p),f(t,X,p),u(yr,X,null),e(X,xh),e(X,Ai),e(Ai,Eh),e(X,Lh),e(X,yt),u(kr,yt,null),e(yt,Ph),e(yt,Ci),e(Ci,Fh),f(t,Ql,p),f(t,J,p),u(wr,J,null),e(J,Dh),e(J,Ln),e(Ln,Pn),e(Pn,zh),e(Ln,Sh),e(J,qh),e(J,Ni),f(t,Zl,p),f(t,Q,p),u(xr,Q,null),e(Q,Oh),e(Q,Fn),e(Fn,Dn),e(Dn,Bh),e(Fn,Ih),e(Q,Ah),e(Q,Wi),f(t,ed,p),f(t,Z,p),u(Er,Z,null),e(Z,Ch),e(Z,zn),e(zn,Sn),e(Sn,Nh),e(zn,Wh),e(Z,Vh),e(Z,Vi),f(t,td,p),f(t,ee,p),u(Lr,ee,null),e(ee,Mh),e(ee,qn),e(qn,On),e(On,Gh),e(qn,jh),e(ee,Hh),e(ee,Mi),f(t,rd,p),f(t,te,p),u(Pr,te,null),e(te,Rh),e(te,Bn),e(Bn,In),e(In,Kh),e(Bn,Uh),e(te,Yh),e(te,Gi),f(t,od,p),f(t,re,p),u(Fr,re,null),e(re,Xh),e(re,kt),e(kt,An),e(An,Jh),e(kt,Qh),e(kt,Dr),e(Dr,Zh),e(kt,eu),e(re,tu),e(re,ji),f(t,nd,p),f(t,oe,p),u(zr,oe,null),e(oe,ru),e(oe,Cn),e(Cn,Nn),e(Nn,ou),e(Cn,nu),e(oe,su),e(oe,Hi),f(t,sd,p),f(t,ne,p),u(Sr,ne,null),e(ne,au),e(ne,wt),e(wt,Wn),e(Wn,iu),e(wt,cu),e(wt,qr),e(qr,lu),e(wt,du),e(ne,pu),e(ne,Ri),f(t,ad,p),f(t,se,p),u(Or,se,null),e(se,fu),e(se,Ae),e(Ae,Vn),e(Vn,mu),e(Ae,hu),e(Ae,Mn),e(Mn,uu),e(Ae,gu),e(Ae,Br),e(Br,_u),e(Ae,bu),e(se,vu),e(se,Ki),f(t,id,p),f(t,ae,p),u(Ir,ae,null),e(ae,Tu),e(ae,Gn),e(Gn,jn),e(jn,$u),e(Gn,yu),e(ae,ku),e(ae,Ui),f(t,cd,p),f(t,ie,p),u(Ar,ie,null),e(ie,wu),e(ie,xt),e(xt,Hn),e(Hn,xu),e(xt,Eu),e(xt,Yi),e(Yi,Lu),e(xt,Pu),e(ie,Fu),e(ie,Xi),f(t,ld,p),f(t,ce,p),u(Cr,ce,null),e(ce,Du),e(ce,M),e(M,Rn),e(Rn,zu),e(M,Su),e(M,Ji),e(Ji,qu),e(M,Ou),e(M,Qi),e(Qi,Bu),e(M,Iu),e(M,Zi),e(Zi,Au),e(M,Cu),e(ce,Nu),e(ce,ec),f(t,dd,p),f(t,le,p),u(Nr,le,null),e(le,Wu),e(le,tc),e(tc,Vu),e(le,Mu),e(le,Et),u(Wr,Et,null),e(Et,Gu),e(Et,rc),e(rc,ju),f(t,pd,p),f(t,de,p),u(Vr,de,null),e(de,Hu),e(de,B),e(B,Ru),e(B,Kn),e(Kn,Ku),e(B,Uu),e(B,oc),e(oc,Yu),e(B,Xu),e(B,nc),e(nc,sc),e(sc,Ju),e(B,Qu),e(B,Un),e(Un,Zu),e(B,eg),e(de,tg),e(de,Yn),u(Mr,Yn,null),f(t,fd,p),f(t,pe,p),u(Gr,pe,null),e(pe,rg),e(pe,ac),e(ac,og),e(pe,ng),e(pe,Lt),u(jr,Lt,null),e(Lt,sg),e(Lt,ic),e(ic,ag),f(t,md,p),f(t,fe,p),u(Hr,fe,null),e(fe,ig),e(fe,Xn),e(Xn,Jn),e(Jn,cg),e(Xn,lg),e(fe,dg),e(fe,cc),f(t,hd,p),f(t,me,p),u(Rr,me,null),e(me,pg),e(me,Qn),e(Qn,Zn),e(Zn,fg),e(Qn,mg),e(me,hg),e(me,lc),f(t,ud,p),f(t,he,p),u(Kr,he,null),e(he,ug),e(he,es),e(es,ts),e(ts,gg),e(es,_g),e(he,bg),e(he,dc),f(t,gd,p),f(t,ue,p),u(Ur,ue,null),e(ue,vg),e(ue,rs),e(rs,os),e(os,Tg),e(rs,$g),e(ue,yg),e(ue,pc),f(t,_d,p),f(t,ge,p),u(Yr,ge,null),e(ge,kg),e(ge,ns),e(ns,ss),e(ss,wg),e(ns,xg),e(ge,Eg),e(ge,fc),f(t,bd,p),f(t,_e,p),u(Xr,_e,null),e(_e,Lg),e(_e,Pt),e(Pt,as),e(as,Pg),e(Pt,Fg),e(Pt,Jr),e(Jr,Dg),e(Pt,zg),e(_e,Sg),e(_e,mc),f(t,vd,p),f(t,be,p),u(Qr,be,null),e(be,qg),e(be,is),e(is,cs),e(cs,Og),e(is,Bg),e(be,Ig),e(be,hc),f(t,Td,p),f(t,ve,p),u(Zr,ve,null),e(ve,Ag),e(ve,uc),e(uc,Cg),e(ve,Ng),e(ve,Ft),u(eo,Ft,null),e(Ft,Wg),e(Ft,gc),e(gc,Vg),f(t,$d,p),f(t,Te,p),u(to,Te,null),e(Te,Mg),e(Te,x),e(x,Gg),e(x,ls),e(ls,jg),e(x,Hg),e(x,ds),e(ds,Rg),e(x,Kg),e(x,_c),e(_c,Ug),e(x,Yg),e(x,bc),e(bc,vc),e(vc,Xg),e(x,Jg),e(x,ps),e(ps,Qg),e(x,Zg),e(x,fs),e(fs,e_),e(x,t_),e(Te,r_),e(Te,ms),u(ro,ms,null),f(t,yd,p),f(t,$e,p),u(oo,$e,null),e($e,o_),e($e,Tc),e(Tc,n_),e($e,s_),e($e,Dt),u(no,Dt,null),e(Dt,a_),e(Dt,$c),e($c,i_),f(t,kd,p),f(t,ye,p),u(so,ye,null),e(ye,c_),e(ye,hs),e(hs,us),e(us,l_),e(hs,d_),e(ye,p_),e(ye,yc),f(t,wd,p),f(t,ke,p),u(ao,ke,null),e(ke,f_),e(ke,gs),e(gs,_s),e(_s,m_),e(gs,h_),e(ke,u_),e(ke,kc),f(t,xd,p),f(t,we,p),u(io,we,null),e(we,g_),e(we,bs),e(bs,vs),e(vs,__),e(bs,b_),e(we,v_),e(we,wc),f(t,Ed,p),f(t,xe,p),u(co,xe,null),e(xe,T_),e(xe,Ts),e(Ts,$s),e($s,$_),e(Ts,y_),e(xe,k_),e(xe,xc),f(t,Ld,p),f(t,Ee,p),u(lo,Ee,null),e(Ee,w_),e(Ee,zt),e(zt,ys),e(ys,x_),e(zt,E_),e(zt,Ec),e(Ec,L_),e(zt,P_),e(Ee,F_),e(Ee,Lc),f(t,Pd,p),f(t,Le,p),u(po,Le,null),e(Le,D_),e(Le,ks),e(ks,ws),e(ws,z_),e(ks,S_),e(Le,q_),e(Le,Pc),f(t,Fd,p),f(t,ot,p),e(ot,St),e(St,Fc),u(fo,Fc,null),e(ot,O_),e(ot,Dc),e(Dc,B_),f(t,Dd,p),f(t,qt,p),e(qt,I_),e(qt,xs),e(xs,A_),e(qt,C_),f(t,zd,p),f(t,Pe,p),u(mo,Pe,null),e(Pe,N_),e(Pe,zc),e(zc,W_),e(Pe,V_),e(Pe,Es),u(ho,Es,null),f(t,Sd,p),f(t,uo,p),e(uo,Ls),u(go,Ls,null),f(t,qd,p),f(t,Fe,p),u(_o,Fe,null),e(Fe,M_),e(Fe,bo),e(bo,G_),e(bo,Sc),e(Sc,j_),e(bo,H_),e(Fe,R_),e(Fe,Ps),u(vo,Ps,null),f(t,Od,p),f(t,De,p),u(To,De,null),e(De,K_),e(De,$o),e($o,U_),e($o,qc),e(qc,Y_),e($o,X_),e(De,J_),e(De,Fs),u(yo,Fs,null),f(t,Bd,p),f(t,nt,p),e(nt,Ot),e(Ot,Oc),u(ko,Oc,null),e(nt,Q_),e(nt,Bc),e(Bc,Z_),f(t,Id,p),f(t,Bt,p),e(Bt,eb),e(Bt,Ds),e(Ds,tb),e(Bt,rb),f(t,Ad,p),f(t,T,p),u(wo,T,null),e(T,ob),e(T,Ic),e(Ic,nb),e(T,sb),e(T,Ac),e(Ac,ab),e(T,ib),u(xo,T,null),e(T,cb),e(T,Cc),e(Cc,lb),e(T,db),e(T,It),u(Eo,It,null),e(It,pb),e(It,Nc),e(Nc,fb),e(T,mb),e(T,At),u(Lo,At,null),e(At,hb),e(At,Wc),e(Wc,ub),e(T,gb),e(T,Ct),u(Po,Ct,null),e(Ct,_b),e(Ct,Vc),e(Vc,bb),e(T,vb),e(T,Nt),u(Fo,Nt,null),e(Nt,Tb),e(Nt,Do),e(Do,$b),e(Do,Mc),e(Mc,yb),e(Do,kb),e(T,wb),e(T,Wt),u(zo,Wt,null),e(Wt,xb),e(Wt,Gc),e(Gc,Eb),e(T,Lb),e(T,Vt),u(So,Vt,null),e(Vt,Pb),e(Vt,jc),e(jc,Fb),e(T,Db),e(T,Ce),u(qo,Ce,null),e(Ce,zb),e(Ce,Oo),e(Oo,Sb),e(Oo,Hc),e(Hc,qb),e(Oo,Ob),e(Ce,Bb),e(Ce,Rc),e(Rc,Ib),f(t,Cd,p),f(t,st,p),u(Bo,st,null),e(st,Ab),e(st,zs),e(zs,Ss),e(Ss,Cb),e(zs,Nb),f(t,Nd,p),f(t,I,p),u(Io,I,null),e(I,Wb),e(I,Kc),e(Kc,Vb),e(I,Mb),e(I,L),u(Ao,L,null),e(L,Gb),e(L,Uc),e(Uc,jb),e(L,Hb),e(L,at),e(at,Rb),e(at,Yc),e(Yc,Kb),e(at,Ub),e(at,Xc),e(Xc,Yb),e(at,Xb),e(L,Jb),e(L,Jc),e(Jc,Qc),e(Qc,Qb),e(L,Zb),e(L,ze),e(ze,ev),e(ze,Zc),e(Zc,tv),e(ze,rv),e(ze,el),e(el,ov),e(ze,nv),e(ze,tl),e(tl,sv),e(ze,av),e(L,iv),e(L,rl),e(rl,cv),e(I,lv),e(I,Mt),u(Co,Mt,null),e(Mt,dv),e(Mt,ol),e(ol,pv),f(t,Wd,p),f(t,it,p),e(it,Gt),e(Gt,nl),u(No,nl,null),e(it,fv),e(it,sl),e(sl,mv),f(t,Vd,p),f(t,A,p),u(Wo,A,null),e(A,hv),e(A,ct),e(ct,uv),e(ct,qs),e(qs,gv),e(ct,_v),e(ct,Os),e(Os,bv),e(ct,vv),e(A,Tv),e(A,Bs),u(Vo,Bs,null),e(A,$v),e(A,Is),u(Mo,Is,null),f(t,Md,p),f(t,E,p),u(Go,E,null),e(E,yv),e(E,As),e(As,Cs),e(Cs,kv),e(As,wv),e(E,xv),e(E,jo),e(jo,Ev),e(jo,Ho),e(Ho,Lv),e(jo,Pv),e(E,Fv),e(E,Ns),e(Ns,Dv),e(Ns,Ro),e(Ro,zv),e(E,Sv),e(E,al),e(E,qv),e(E,il),f(t,Gd,p),f(t,C,p),u(Ko,C,null),e(C,Ov),e(C,Ws),e(Ws,Vs),e(Vs,Bv),e(Ws,Iv),e(C,Av),e(C,Ms),u(Uo,Ms,null),e(C,Cv),e(C,cl),f(t,jd,p),f(t,lt,p),e(lt,jt),e(jt,ll),u(Yo,ll,null),e(lt,Nv),e(lt,dl),e(dl,Wv),f(t,Hd,p),f(t,Se,p),u(Xo,Se,null),e(Se,Vv),e(Se,pl),e(pl,Mv),e(Se,Gv),e(Se,Gs),e(Gs,jv),e(Gs,Jo),e(Jo,Hv),f(t,Rd,p),f(t,qe,p),u(Qo,qe,null),e(qe,Rv),e(qe,fl),e(fl,Kv),e(qe,Uv),e(qe,js),e(js,Yv),e(js,Zo),e(Zo,Xv),Kd=!0},p:mk,i(t){Kd||(g(Jt.$$.fragment,t),g(Qt.$$.fragment,t),g(Zt.$$.fragment,t),g(er.$$.fragment,t),g(tr.$$.fragment,t),g(rr.$$.fragment,t),g(or.$$.fragment,t),g(nr.$$.fragment,t),g(sr.$$.fragment,t),g(ar.$$.fragment,t),g(ir.$$.fragment,t),g(cr.$$.fragment,t),g(lr.$$.fragment,t),g(dr.$$.fragment,t),g(pr.$$.fragment,t),g(fr.$$.fragment,t),g(mr.$$.fragment,t),g(hr.$$.fragment,t),g(ur.$$.fragment,t),g(gr.$$.fragment,t),g(_r.$$.fragment,t),g(br.$$.fragment,t),g(vr.$$.fragment,t),g(Tr.$$.fragment,t),g($r.$$.fragment,t),g(yr.$$.fragment,t),g(kr.$$.fragment,t),g(wr.$$.fragment,t),g(xr.$$.fragment,t),g(Er.$$.fragment,t),g(Lr.$$.fragment,t),g(Pr.$$.fragment,t),g(Fr.$$.fragment,t),g(zr.$$.fragment,t),g(Sr.$$.fragment,t),g(Or.$$.fragment,t),g(Ir.$$.fragment,t),g(Ar.$$.fragment,t),g(Cr.$$.fragment,t),g(Nr.$$.fragment,t),g(Wr.$$.fragment,t),g(Vr.$$.fragment,t),g(Mr.$$.fragment,t),g(Gr.$$.fragment,t),g(jr.$$.fragment,t),g(Hr.$$.fragment,t),g(Rr.$$.fragment,t),g(Kr.$$.fragment,t),g(Ur.$$.fragment,t),g(Yr.$$.fragment,t),g(Xr.$$.fragment,t),g(Qr.$$.fragment,t),g(Zr.$$.fragment,t),g(eo.$$.fragment,t),g(to.$$.fragment,t),g(ro.$$.fragment,t),g(oo.$$.fragment,t),g(no.$$.fragment,t),g(so.$$.fragment,t),g(ao.$$.fragment,t),g(io.$$.fragment,t),g(co.$$.fragment,t),g(lo.$$.fragment,t),g(po.$$.fragment,t),g(fo.$$.fragment,t),g(mo.$$.fragment,t),g(ho.$$.fragment,t),g(go.$$.fragment,t),g(_o.$$.fragment,t),g(vo.$$.fragment,t),g(To.$$.fragment,t),g(yo.$$.fragment,t),g(ko.$$.fragment,t),g(wo.$$.fragment,t),g(xo.$$.fragment,t),g(Eo.$$.fragment,t),g(Lo.$$.fragment,t),g(Po.$$.fragment,t),g(Fo.$$.fragment,t),g(zo.$$.fragment,t),g(So.$$.fragment,t),g(qo.$$.fragment,t),g(Bo.$$.fragment,t),g(Io.$$.fragment,t),g(Ao.$$.fragment,t),g(Co.$$.fragment,t),g(No.$$.fragment,t),g(Wo.$$.fragment,t),g(Vo.$$.fragment,t),g(Mo.$$.fragment,t),g(Go.$$.fragment,t),g(Ko.$$.fragment,t),g(Uo.$$.fragment,t),g(Yo.$$.fragment,t),g(Xo.$$.fragment,t),g(Qo.$$.fragment,t),Kd=!0)},o(t){_(Jt.$$.fragment,t),_(Qt.$$.fragment,t),_(Zt.$$.fragment,t),_(er.$$.fragment,t),_(tr.$$.fragment,t),_(rr.$$.fragment,t),_(or.$$.fragment,t),_(nr.$$.fragment,t),_(sr.$$.fragment,t),_(ar.$$.fragment,t),_(ir.$$.fragment,t),_(cr.$$.fragment,t),_(lr.$$.fragment,t),_(dr.$$.fragment,t),_(pr.$$.fragment,t),_(fr.$$.fragment,t),_(mr.$$.fragment,t),_(hr.$$.fragment,t),_(ur.$$.fragment,t),_(gr.$$.fragment,t),_(_r.$$.fragment,t),_(br.$$.fragment,t),_(vr.$$.fragment,t),_(Tr.$$.fragment,t),_($r.$$.fragment,t),_(yr.$$.fragment,t),_(kr.$$.fragment,t),_(wr.$$.fragment,t),_(xr.$$.fragment,t),_(Er.$$.fragment,t),_(Lr.$$.fragment,t),_(Pr.$$.fragment,t),_(Fr.$$.fragment,t),_(zr.$$.fragment,t),_(Sr.$$.fragment,t),_(Or.$$.fragment,t),_(Ir.$$.fragment,t),_(Ar.$$.fragment,t),_(Cr.$$.fragment,t),_(Nr.$$.fragment,t),_(Wr.$$.fragment,t),_(Vr.$$.fragment,t),_(Mr.$$.fragment,t),_(Gr.$$.fragment,t),_(jr.$$.fragment,t),_(Hr.$$.fragment,t),_(Rr.$$.fragment,t),_(Kr.$$.fragment,t),_(Ur.$$.fragment,t),_(Yr.$$.fragment,t),_(Xr.$$.fragment,t),_(Qr.$$.fragment,t),_(Zr.$$.fragment,t),_(eo.$$.fragment,t),_(to.$$.fragment,t),_(ro.$$.fragment,t),_(oo.$$.fragment,t),_(no.$$.fragment,t),_(so.$$.fragment,t),_(ao.$$.fragment,t),_(io.$$.fragment,t),_(co.$$.fragment,t),_(lo.$$.fragment,t),_(po.$$.fragment,t),_(fo.$$.fragment,t),_(mo.$$.fragment,t),_(ho.$$.fragment,t),_(go.$$.fragment,t),_(_o.$$.fragment,t),_(vo.$$.fragment,t),_(To.$$.fragment,t),_(yo.$$.fragment,t),_(ko.$$.fragment,t),_(wo.$$.fragment,t),_(xo.$$.fragment,t),_(Eo.$$.fragment,t),_(Lo.$$.fragment,t),_(Po.$$.fragment,t),_(Fo.$$.fragment,t),_(zo.$$.fragment,t),_(So.$$.fragment,t),_(qo.$$.fragment,t),_(Bo.$$.fragment,t),_(Io.$$.fragment,t),_(Ao.$$.fragment,t),_(Co.$$.fragment,t),_(No.$$.fragment,t),_(Wo.$$.fragment,t),_(Vo.$$.fragment,t),_(Mo.$$.fragment,t),_(Go.$$.fragment,t),_(Ko.$$.fragment,t),_(Uo.$$.fragment,t),_(Yo.$$.fragment,t),_(Xo.$$.fragment,t),_(Qo.$$.fragment,t),Kd=!1},d(t){r(Be),t&&r(tn),t&&r(N),b(Jt),t&&r(bl),t&&r(y),t&&r(vl),t&&r(dn),t&&r(Tl),t&&r(Ge),b(Qt),t&&r($l),t&&r(W),t&&r(yl),t&&r(hn),t&&r(kl),b(Zt,t),t&&r(wl),t&&r(Ie),t&&r(xl),t&&r(V),t&&r(El),t&&r(k),t&&r(Ll),t&&r(F),t&&r(Pl),t&&r(D),t&&r(Fl),b(er,t),t&&r(Dl),t&&r(ft),t&&r(zl),t&&r(z),t&&r(Sl),t&&r(Tn),t&&r(ql),t&&r(je),b(tr),t&&r(Ol),t&&r(He),b(rr),t&&r(Bl),t&&r(Re),b(or),t&&r(Il),t&&r(R),b(nr),b(sr),t&&r(Al),t&&r(Ke),b(ar),t&&r(Cl),t&&r(Ue),b(ir),t&&r(Nl),t&&r(Ye),b(cr),t&&r(Wl),t&&r(K),b(lr),b(dr),t&&r(Vl),t&&r(Xe),b(pr),t&&r(Ml),t&&r(Je),b(fr),t&&r(Gl),t&&r(Qe),b(mr),t&&r(jl),t&&r(Ze),b(hr),t&&r(Hl),t&&r(et),b(ur),t&&r(Rl),t&&r(tt),b(gr),t&&r(Kl),t&&r(rt),b(_r),t&&r(Ul),t&&r(Tt),t&&r(Yl),t&&r(U),b(br),b(vr),t&&r(Xl),t&&r(Y),b(Tr),b($r),t&&r(Jl),t&&r(X),b(yr),b(kr),t&&r(Ql),t&&r(J),b(wr),t&&r(Zl),t&&r(Q),b(xr),t&&r(ed),t&&r(Z),b(Er),t&&r(td),t&&r(ee),b(Lr),t&&r(rd),t&&r(te),b(Pr),t&&r(od),t&&r(re),b(Fr),t&&r(nd),t&&r(oe),b(zr),t&&r(sd),t&&r(ne),b(Sr),t&&r(ad),t&&r(se),b(Or),t&&r(id),t&&r(ae),b(Ir),t&&r(cd),t&&r(ie),b(Ar),t&&r(ld),t&&r(ce),b(Cr),t&&r(dd),t&&r(le),b(Nr),b(Wr),t&&r(pd),t&&r(de),b(Vr),b(Mr),t&&r(fd),t&&r(pe),b(Gr),b(jr),t&&r(md),t&&r(fe),b(Hr),t&&r(hd),t&&r(me),b(Rr),t&&r(ud),t&&r(he),b(Kr),t&&r(gd),t&&r(ue),b(Ur),t&&r(_d),t&&r(ge),b(Yr),t&&r(bd),t&&r(_e),b(Xr),t&&r(vd),t&&r(be),b(Qr),t&&r(Td),t&&r(ve),b(Zr),b(eo),t&&r($d),t&&r(Te),b(to),b(ro),t&&r(yd),t&&r($e),b(oo),b(no),t&&r(kd),t&&r(ye),b(so),t&&r(wd),t&&r(ke),b(ao),t&&r(xd),t&&r(we),b(io),t&&r(Ed),t&&r(xe),b(co),t&&r(Ld),t&&r(Ee),b(lo),t&&r(Pd),t&&r(Le),b(po),t&&r(Fd),t&&r(ot),b(fo),t&&r(Dd),t&&r(qt),t&&r(zd),t&&r(Pe),b(mo),b(ho),t&&r(Sd),t&&r(uo),b(go),t&&r(qd),t&&r(Fe),b(_o),b(vo),t&&r(Od),t&&r(De),b(To),b(yo),t&&r(Bd),t&&r(nt),b(ko),t&&r(Id),t&&r(Bt),t&&r(Ad),t&&r(T),b(wo),b(xo),b(Eo),b(Lo),b(Po),b(Fo),b(zo),b(So),b(qo),t&&r(Cd),t&&r(st),b(Bo),t&&r(Nd),t&&r(I),b(Io),b(Ao),b(Co),t&&r(Wd),t&&r(it),b(No),t&&r(Vd),t&&r(A),b(Wo),b(Vo),b(Mo),t&&r(Md),t&&r(E),b(Go),t&&r(Gd),t&&r(C),b(Ko),b(Uo),t&&r(jd),t&&r(lt),b(Yo),t&&r(Hd),t&&r(Se),b(Xo),t&&r(Rd),t&&r(qe),b(Qo)}}}const uk={local:"utilities-for-generation",sections:[{local:"generate-outputs",sections:[{local:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",title:"GreedySearchOutput"},{local:"transformers.generation_utils.SampleDecoderOnlyOutput",title:"SampleOutput"},{local:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",title:"BeamSearchOutput"},{local:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",title:"BeamSampleOutput"}],title:"Generate Outputs"},{local:"transformers.LogitsProcessor",title:"LogitsProcessor"},{local:"transformers.StoppingCriteria",title:"StoppingCriteria"},{local:"transformers.Constraint",title:"Constraints"},{local:"transformers.BeamScorer",title:"BeamSearch"},{local:"transformers.top_k_top_p_filtering",title:"Utilities"}],title:"Utilities for Generation"};function gk(Cp,Be,tn){let{fw:N}=Be;return Cp.$$set=H=>{"fw"in H&&tn(0,N=H.fw)},[N]}class yk extends lk{constructor(Be){super();dk(this,Be,gk,hk,pk,{fw:0})}}export{yk as default,uk as metadata};
